id closure #1 in static ARKitRunner.runSession(_:configuration:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  MEMORY[0x1F4188790](v8 - 8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
  v12 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v10, a1, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  v13 = a2 + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_continuation;
  swift_beginAccess();
  outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, v13);
  swift_endAccess();
  return objc_msgSend(a3, sel_runWithConfiguration_options_, a4, 0);
}

id ARKitRunner.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ARKitRunner();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(a2, a3);
}

uint64_t closure #1 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(void *)(Strong + 24) = a1;
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t Strong = swift_bridgeObjectRelease();
  }
  return a3(Strong);
}

uint64_t closure #2 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    *(void *)(Strong + 32) = a1;
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t Strong = swift_bridgeObjectRelease();
  }
  return a3(Strong);
}

uint64_t ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v14 = (char *)swift_allocObject();
  uint64_t v15 = MEMORY[0x1E4FBCFD8];
  *((void *)v14 + 2) = v12;
  *((void *)v14 + 3) = v15;
  *((void *)v14 + 4) = v2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v14[v13], v7, v4);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = type metadata accessor for MainActor();
  v5[3] = static MainActor.shared.getter();
  uint64_t v8 = (void *)swift_task_alloc();
  v5[4] = v8;
  *uint64_t v8 = v5;
  v8[1] = closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:);
  return ARSessionManager.runARKitSession(withSupportedCapabilities:)(a1, a5);
}

uint64_t closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)()
{
  swift_task_dealloc();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:), v1, v0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.UnavailableCapabilities?);
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t key path getter for ARSessionManager.isRunningUserProvidedARSession : ARSessionManager@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 40);
  return result;
}

uint64_t key path setter for ARSessionManager.isRunningUserProvidedARSession : ARSessionManager(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 40) = v2;
  return result;
}

uint64_t ARSessionManager.isRunningUserProvidedARSession.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t ARSessionManager.isRunningUserProvidedARSession.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 40) = a1;
  return result;
}

uint64_t (*ARSessionManager.isRunningUserProvidedARSession.modify())()
{
  return ARSessionManager.isRunningUserProvidedARSession.modify;
}

uint64_t ARSessionManager.__allocating_init(arView:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 0;
  *(void *)(v2 + 16) = a1;
  uint64_t v3 = a1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  *(unsigned char *)(v3 + 2) = 0;
  return v2;
}

uint64_t ARSessionManager.init(arView:)(uint64_t a1)
{
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 40) = 0;
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = a1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  *(unsigned char *)(v2 + 2) = 0;
  return v1;
}

uint64_t ARSessionManager.getSupportedCapabilities(for:)@<X0>(uint64_t a1@<X8>)
{
  return SpatialTrackingSession.Configuration.supportedConfiguration()(a1);
}

uint64_t ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](ARSessionManager.configureViewUsingSession(_:supportedCapabilities:), 0, 0);
}

uint64_t ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)()
{
  type metadata accessor for MainActor();
  *(void *)(v0 + 40) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](ARSessionManager.configureViewUsingSession(_:supportedCapabilities:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 16);
  swift_release();
  closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(v1, v2);
  return MEMORY[0x1F4188298](ARSessionManager.configureViewUsingSession(_:supportedCapabilities:), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = a1;
  uint64_t v11 = *(char **)(a1 + 16);
  id v12 = objc_msgSend(v11, sel_session);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARSession);
  LOBYTE(a1) = static NSObject.== infix(_:_:)();

  unint64_t v13 = v11;
  if ((a1 & 1) == 0) {
    objc_msgSend(v11, sel_setSession_, a2);
  }
  uint64_t v14 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
  char v15 = specialized Set.contains(_:)((uint64_t)v10, v14);
  swift_bridgeObjectRelease();
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  v41 = v13;
  uint64_t v17 = &v13[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  swift_beginAccess();
  *uint64_t v17 = v15 & 1;
  if ((v15 & 1) == 0)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    *((void *)v17 + 2) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
    *((void *)v17 + 4) = specialized Dictionary.init(dictionaryLiteral:)(v18);
    swift_bridgeObjectRelease();
    *(void *)(v38 + 24) = 0;
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
  char v20 = specialized Set.contains(_:)((uint64_t)v10, v19);
  swift_bridgeObjectRelease();
  v16(v10, v7);
  v17[1] = v20 & 1;
  if ((v20 & 1) == 0)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    *((void *)v17 + 3) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
    *((void *)v17 + 5) = specialized Dictionary.init(dictionaryLiteral:)(v21);
    swift_bridgeObjectRelease();
    *(void *)(v38 + 32) = 0;
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
  char v23 = specialized Set.contains(_:)((uint64_t)v6, v22);
  swift_bridgeObjectRelease();
  uint64_t v24 = v40;
  v25 = *(void (**)(char *, uint64_t))(v39 + 8);
  v25(v6, v40);
  uint64_t v26 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
  char v27 = specialized Set.contains(_:)((uint64_t)v6, v26);
  swift_bridgeObjectRelease();
  v25(v6, v24);
  if (v27) {
    int v28 = v23 & 1 | 2;
  }
  else {
    int v28 = v23 & 1;
  }
  uint64_t v29 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
  char v30 = specialized Set.contains(_:)((uint64_t)v6, v29);
  swift_bridgeObjectRelease();
  v25(v6, v24);
  if (v30) {
    v28 |= 4u;
  }
  uint64_t v31 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
  char v32 = specialized Set.contains(_:)((uint64_t)v6, v31);
  swift_bridgeObjectRelease();
  v25(v6, v24);
  if (v32) {
    v28 |= 0xCu;
  }
  v33 = &v41[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  swift_beginAccess();
  ARView.Environment.sceneUnderstanding.getter((uint64_t)&v42);
  int v34 = v44;
  int v44 = v28;
  int v45 = v34;
  ARView.Environment.SceneUnderstanding.options.didset(&v45);
  int v35 = v44;
  uint64_t v36 = 0x100000000;
  if (!v43) {
    uint64_t v36 = 0;
  }
  *(void *)v33 = v36 | v42;
  *((_DWORD *)v33 + 2) = v35;
  swift_endAccess();
  ARView.updateEnvironment()();
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    id v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    id v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t ARSessionManager.runARKitSession(withSupportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for SpatialTrackingSession.UnavailableCapabilities();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), 0, 0);
}

uint64_t ARSessionManager.runARKitSession(withSupportedCapabilities:)()
{
  unint64_t v1 = (unint64_t)SpatialTrackingSession.Configuration.arConfiguration()();
  v0[13] = v1;
  if (v1)
  {
    v0[14] = *(void *)(v0[6] + 16);
    v0[15] = type metadata accessor for MainActor();
    v0[16] = static MainActor.shared.getter();
    uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), v3, v2);
  }
  else
  {
    uint64_t v4 = v0[7];
    uint64_t v5 = v0[8];
    uint64_t v6 = v0[4];
    SpatialTrackingSession.UnavailableCapabilities.init()();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  unint64_t v1 = *(void **)(v0 + 112);
  swift_release();
  *(void *)(v0 + 136) = objc_msgSend(v1, sel_session);
  return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 144) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  unint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  *(void *)(v0 + 152) = *(void *)(v1 + 24);
  swift_bridgeObjectRetain();
  return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (*(void *)(v0 + 152))
  {
    uint64_t v2 = *(void *)(v0 + 88);
    unint64_t v1 = *(void *)(v0 + 96);
    uint64_t v3 = *(void *)(v0 + 80);
    uint64_t v4 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    uint64_t v5 = specialized Set.contains(_:)(v1, v4);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    if (v5) {
      specialized static ARSessionManager.configureImageTracking(arConfiguration:arReferenceImages:)(*(void **)(v0 + 104), *(void *)(v0 + 152));
    }
    swift_bridgeObjectRelease();
  }
  *(void *)(v0 + 160) = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  unint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  *(void *)(v0 + 168) = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  Class isa;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  if (v0[21])
  {
    uint64_t v2 = v0[11];
    unint64_t v1 = v0[12];
    uint64_t v3 = v0[10];
    uint64_t v4 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    uint64_t v5 = specialized Set.contains(_:)(v1, v4);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    if (v5)
    {
      self;
      uint64_t v6 = swift_dynamicCastObjCClass();
      if (v6)
      {
        uint64_t v7 = (void *)v6;
        uint64_t v8 = (void *)v0[13];
        type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
        lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceObject and conformance NSObject, &lazy cache variable for type metadata for ARReferenceObject);
        uint64_t v9 = v8;
        isa = Set._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v7, sel_setDetectionObjects_, isa);
      }
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v0[13];
  id v12 = (void *)swift_task_alloc();
  v0[22] = v12;
  *id v12 = v0;
  v12[1] = ARSessionManager.runARKitSession(withSupportedCapabilities:);
  v12[3] = v0[17];
  v12[4] = v11;
  return MEMORY[0x1F4188298](specialized static ARKitRunner.runSession(_:configuration:), 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  unint64_t v1 = (void *)v0[23];
  if (v1)
  {
    uint64_t v2 = v1;
    SpatialTrackingSession.UnavailableCapabilities.init()();
    v0[3] = v2;
    type metadata accessor for related decl 'e' for ARErrorCode(0);
    lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
    _BridgedStoredNSError.code.getter();
    if (v0[2] == 103)
    {
      SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.setter();
      SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
      SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.setter();
      SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
      SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.setter();
    }
    else
    {
      SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.setter();
      SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
      SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter();
      SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
      SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter();
    }
    uint64_t v5 = (void *)v0[17];
    uint64_t v6 = (void *)v0[13];
    uint64_t v8 = v0[8];
    uint64_t v7 = v0[9];
    uint64_t v9 = v0[7];
    uint64_t v10 = v0[4];

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v10, v7, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    v0[24] = static MainActor.shared.getter();
    uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
    return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), v4, v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  unint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_release();
  closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(v2, v1);
  return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  unint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 32);

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v4, 1, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t ARSessionManager.runARKitSession(withSupportedCapabilities:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ARSessionManager.runARKitSession(withSupportedCapabilities:), 0, 0);
}

uint64_t ARSessionManager.stop()()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SpatialTrackingSession.Configuration();
  v1[9] = v3;
  v1[10] = *(void *)(v3 - 8);
  v1[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](ARSessionManager.stop(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0[12] = *(void *)(v0[5] + 16);
  v0[13] = type metadata accessor for MainActor();
  v0[14] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](ARSessionManager.stop(), v2, v1);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = *(void **)(v0 + 96);
  swift_release();
  *(void *)(v0 + 120) = objc_msgSend(v1, sel_session);
  return MEMORY[0x1F4188298](ARSessionManager.stop(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  (*(void (**)(void, void, void))(v0[7] + 104))(v0[8], *MEMORY[0x1E4F3AC78], v0[6]);
  SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  v0[16] = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](ARSessionManager.stop(), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_release();
  closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(v2, v1);
  return MEMORY[0x1F4188298](ARSessionManager.stop(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 40);
  (*(void (**)(void, void))(*(void *)(v0 + 80) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 72));
  swift_beginAccess();
  if ((*(unsigned char *)(v1 + 40) & 1) == 0) {
    objc_msgSend(*(id *)(v0 + 120), sel_pause);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ARSessionManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ARSessionManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ARKitRunnable.configure(withRFServiceManager:onReferencesChanged:) in conformance ARSessionManager(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(a2, a3);
}

uint64_t protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager;
  return ARSessionManager.runARKitSession(withSupportedCapabilities:)(a1, a2);
}

uint64_t protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t protocol witness for ARKitRunnable.runARKitSessionWithoutRequesting(withSupportedCapabilities:) in conformance ARSessionManager(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SpatialTrackingSession.Configuration();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v1;
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  type metadata accessor for MainActor();
  swift_retain();
  uint64_t v12 = static MainActor.shared.getter();
  unint64_t v13 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  uint64_t v15 = MEMORY[0x1E4FBCFD8];
  *((void *)v14 + 2) = v12;
  *((void *)v14 + 3) = v15;
  *((void *)v14 + 4) = v10;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v14[v13], v6, v3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tgm5((uint64_t)v9, (uint64_t)&closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)partial apply, (uint64_t)v14);
  return swift_release();
}

uint64_t protocol witness for ARKitRunnable.stop() in conformance ARSessionManager()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return ARSessionManager.stop()();
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for ARErrorCode()
{
  return *v0;
}

uint64_t protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for ARErrorCode@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance ARErrorCode@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ARErrorCode(void *a1@<X8>)
{
  *a1 = *v1;
}

NSNumber protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UIAccessibilityTraits()
{
  return UInt64._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance UIAccessibilityTraits(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x1E4E63530](a1, &v6);
  uint64_t v4 = v6;
  char v5 = v7;
  if (v7) {
    uint64_t v4 = 0;
  }
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UIAccessibilityTraits(uint64_t a1, uint64_t a2)
{
  char v3 = static UInt64._conditionallyBridgeFromObjectiveC(_:result:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UIAccessibilityTraits@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static UInt64._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RESyncPacketDeliveryMethodType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MTKTextureLoaderOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance MTKTextureLoaderOption(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MTKTextureLoaderOption()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MTKTextureLoaderOption()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance MTKTextureLoaderOption(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance MTKTextureLoaderOption(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MTKTextureLoaderOption(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance MTKTextureLoaderOption(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance MTKTextureLoaderOption(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance MTKTextureLoaderOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = MEMORY[0x1E4E62C20](v2);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for ARErrorCode()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for ARErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);

  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for ARErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);

  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for ARErrorCode(void *a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
  id v5 = a1;

  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for ARErrorCode()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for ARErrorCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);

  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for ARErrorCode()
{
  return Hasher._finalize()();
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance RESyncPacketDeliveryMethodType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RESyncPacketDeliveryMethodType(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MTKTextureLoaderOption()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for ARErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);

  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for ARErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);

  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t protocol witness for Error._userInfo.getter in conformance related decl 'e' for ARErrorCode()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for ARErrorCode(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);

  return MEMORY[0x1F40E4480](a1, v2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for ARErrorCode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);

  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ARErrorCode(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance UIAccessibilityTraits()
{
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MTKTextureLoaderOption@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4E62C20](*a1, a1[1]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MTKTextureLoaderOption@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance MTKTextureLoaderOption()
{
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, type metadata accessor for MTKTextureLoaderOption);
  lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, type metadata accessor for MTKTextureLoaderOption);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance UIAccessibilityTraits()
{
  return MEMORY[0x1F4185F88](*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UIAccessibilityTraits()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance UIAccessibilityTraits(uint64_t a1)
{
  return MEMORY[0x1F4185EA8](a1, *v1);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, Entity), &demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, ModelEntity), &demangling cache variable for type metadata for _DictionaryStorage<UUID, ModelEntity>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, __RKFaceMeshEntity), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, __RKFaceMeshEntity>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t result;
  char v14;
  unint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RKARSystem.HitTestScreenPoint, CollisionCastHit?));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (double *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RKARSystem.HitTestScreenPoint, CollisionCastHit?>);
    uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    char v10 = *(void *)(v3 + 72);
    while (1)
    {
      outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v9, (uint64_t)v5, &demangling cache variable for type metadata for (RKARSystem.HitTestScreenPoint, CollisionCastHit?));
      uint64_t v11 = *v5;
      uint64_t v12 = v5[1];
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v12);
      if (v14) {
        break;
      }
      uint64_t v15 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v16 = (double *)(v7[6] + 16 * result);
      *uint64_t v16 = v11;
      v16[1] = v12;
      long long v17 = v7[7];
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
      unint64_t result = outlined init with take of vImage_CGImageFormat?(v8, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v15, &demangling cache variable for type metadata for CollisionCastHit?);
      uint64_t v19 = v7[2];
      char v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_10;
      }
      v7[2] = v21;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  BOOL v14;

  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        uint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        uint64_t v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

void specialized ARKitRunner.session(_:didChange:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  uint64_t v3 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v14 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (os_unfair_lock_s *)(*(void *)(v1
                                       + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_lock)
                           + 16);
  os_unfair_lock_lock(v12);
  uint64_t v13 = v1 + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_continuation;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v13, (uint64_t)v7, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v7, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    if ((a1 | 2) == 2)
    {
      type metadata accessor for related decl 'e' for ARErrorCode(0);
      uint64_t v15 = 501;
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v15 = v14[1];
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
      swift_beginAccess();
      outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, v13);
      swift_endAccess();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  os_unfair_lock_unlock(v12);
}

void specialized ARKitRunner.session(_:didUpdate:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v13 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (os_unfair_lock_s *)(*(void *)(v0
                                       + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_lock)
                           + 16);
  os_unfair_lock_lock(v11);
  uint64_t v12 = v0 + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_continuation;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v12, (uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v13[0] = 0;
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v7);
    swift_beginAccess();
    outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, v12);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  os_unfair_lock_unlock(v11);
}

void specialized ARKitRunner.session(_:didFailWithError:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (os_unfair_lock_s *)(*(void *)(v1
                                       + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_lock)
                           + 16);
  os_unfair_lock_lock(v13);
  uint64_t v14 = v1 + OBJC_IVAR____TtC10RealityKitP33_98DEB876138878DC696D4005FE1B9B4811ARKitRunner_continuation;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v14, (uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    uint64_t v18 = (uint64_t)a1;
    id v15 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    type metadata accessor for related decl 'e' for ARErrorCode(0);
    if (swift_dynamicCast())
    {
      uint64_t v18 = v19;
      id v16 = (id)v19;
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
      swift_beginAccess();
      outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, v14);
      swift_endAccess();
    }
    else
    {
      uint64_t v19 = 501;
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v19 = v18;
      CheckedContinuation.resume(returning:)();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v9);
      swift_beginAccess();
      outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, v14);
      swift_endAccess();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  os_unfair_lock_unlock(v13);
}

uint64_t specialized static ARKitRunner.runSession(_:configuration:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return MEMORY[0x1F4188298](specialized static ARKitRunner.runSession(_:configuration:), 0, 0);
}

uint64_t specialized static ARKitRunner.runSession(_:configuration:)()
{
  uint64_t v1 = (objc_class *)type metadata accessor for ARKitRunner();
  long long v7 = *(_OWORD *)(v0 + 24);
  id v2 = objc_msgSend(objc_allocWithZone(v1), sel_init);
  *(void *)(v0 + 40) = v2;
  objc_msgSend((id)v7, sel__addObserver_, v2);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v7;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for related decl 'e' for ARErrorCode?);
  *uint64_t v4 = v0;
  v4[1] = specialized static ARKitRunner.runSession(_:configuration:);
  return MEMORY[0x1F41880D8](v0 + 16, 0, 0, 0xD00000000000001CLL, 0x80000001E2AB89B0, partial apply for closure #1 in static ARKitRunner.runSession(_:configuration:), v3, v5);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized static ARKitRunner.runSession(_:configuration:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;

  uint64_t v1 = *(void **)(v0 + 40);
  id v2 = *(void *)(v0 + 16);
  objc_msgSend(*(id *)(v0 + 24), sel__removeObserver_, v1);

  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t specialized ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a1;
  v8[4] = a2;
  uint64_t v9 = (void *)(v6 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents);
  swift_beginAccess();
  uint64_t v10 = v9[8];
  v9[8] = partial apply for closure #1 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:);
  v9[9] = v8;
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v10);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v11;
  v12[3] = a1;
  v12[4] = a2;
  uint64_t v13 = v9[6];
  v9[6] = partial apply for closure #2 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:);
  v9[7] = v12;
  swift_retain();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v13);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SpatialTrackingSession.Configuration() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #1 in ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)(a1, v5, v6, v7, v8);
}

void type metadata accessor for related decl 'e' for ARErrorCode(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ARReferenceObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void specialized static ARSessionManager.configureImageTracking(arConfiguration:arReferenceImages:)(void *a1, uint64_t a2)
{
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, &lazy cache variable for type metadata for ARReferenceImage);
    id v6 = a1;
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v5, sel_setDetectionImages_, isa);

    if ((a2 & 0xC000000000000001) != 0) {
      uint64_t v8 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v8 = *(void *)(a2 + 16);
    }
    objc_msgSend(v5, sel_setMaximumNumberOfTrackedImages_, v8);
  }
  self;
  uint64_t v9 = swift_dynamicCastObjCClass();
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, &lazy cache variable for type metadata for ARReferenceImage);
    id v13 = a1;
    Class v11 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, sel_setDetectionImages_, v11);

    if ((a2 & 0xC000000000000001) != 0) {
      uint64_t v12 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v12 = *(void *)(a2 + 16);
    }
    objc_msgSend(v10, sel_setMaximumNumberOfTrackedImages_, v12);
  }
}

uint64_t ObjC metadata update function for ARKitRunner()
{
  return type metadata accessor for ARKitRunner();
}

uint64_t type metadata accessor for ARKitRunner()
{
  uint64_t result = type metadata singleton initialization cache for ARKitRunner;
  if (!type metadata singleton initialization cache for ARKitRunner) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ARKitRunner()
{
  type metadata accessor for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
    }
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for ARSessionManager()
{
  return self;
}

uint64_t method lookup function for ARSessionManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ARSessionManager);
}

uint64_t dispatch thunk of ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ARSessionManager.runARKitSessionWithoutRequesting(withSupportedCapabilities:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ARSessionManager.isRunningUserProvidedARSession.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ARSessionManager.isRunningUserProvidedARSession.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ARSessionManager.isRunningUserProvidedARSession.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ARSessionManager.__allocating_init(arView:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of ARSessionManager.getSupportedCapabilities(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 216) + **(int **)(*(void *)v2 + 216));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ARSessionManager.runARKitSession(withSupportedCapabilities:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 224) + **(int **)(*(void *)v2 + 224));
  id v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *id v6 = v3;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v8(a1, a2);
}

uint64_t dispatch thunk of ARSessionManager.stop()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 232) + **(int **)(*(void *)v0 + 232));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return v4();
}

void type metadata accessor for UIInterfaceOrientation(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityCustomSystemRotorType(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityCustomRotorDirection(uint64_t a1)
{
}

void type metadata accessor for CVMetalTextureCacheRef(uint64_t a1)
{
}

void type metadata accessor for CVBufferRef(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for CGBitmapInfo(uint64_t a1)
{
}

void type metadata accessor for CGColorSpaceRef(uint64_t a1)
{
}

void type metadata accessor for REColorGamut(uint64_t a1)
{
}

void type metadata accessor for UIAccessibilityTraits(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for UIEdgeInsets(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for UIEdgeInsets(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UIEdgeInsets(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float4x4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for simd_float4x4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
}

uint64_t base witness table accessor for Equatable in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
}

uint64_t lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Error in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
}

uint64_t base witness table accessor for RawRepresentable in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, type metadata accessor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, type metadata accessor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for Equatable in UIAccessibilityTraits()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type UIAccessibilityTraits and conformance UIAccessibilityTraits, type metadata accessor for UIAccessibilityTraits);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type ARErrorCode and conformance ARErrorCode, type metadata accessor for ARErrorCode);
}

void type metadata accessor for ARErrorCode(uint64_t a1)
{
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type ARErrorCode and conformance ARErrorCode, type metadata accessor for ARErrorCode);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type ARErrorCode and conformance ARErrorCode, type metadata accessor for ARErrorCode);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in ARErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode, type metadata accessor for related decl 'e' for ARErrorCode);
}

uint64_t outlined assign with take of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = type metadata accessor for SpatialTrackingSession.Configuration();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1E2A3B988()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

id partial apply for closure #1 in static ARKitRunner.runSession(_:configuration:)(uint64_t a1)
{
  return closure #1 in static ARKitRunner.runSession(_:configuration:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t type metadata accessor for ARReferenceObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR17RealityFoundation22SpatialTrackingSessionC23UnavailableCapabilitiesVSg_Tg5Tu);
  return v6(a1, v4);
}

uint64_t sub_1E2A3BB78()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1)
{
  return closure #1 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t objectdestroy_80Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #2 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(uint64_t a1)
{
  return closure #2 in ARSessionManager.configure(withRFServiceManager:onReferencesChanged:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

void type metadata accessor for RESyncPacketDeliveryMethodType(uint64_t a1)
{
}

void type metadata accessor for RESyncChannelId(uint64_t a1)
{
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RERay(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RERay(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for RERay(uint64_t a1)
{
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for vImage_CGImageFormat(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for vImage_CGImageFormat(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for vImage_CGImageFormat(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for MTKTextureLoaderOption(uint64_t a1)
{
}

uint64_t base witness table accessor for RawRepresentable in MTKTextureLoaderOption()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, type metadata accessor for MTKTextureLoaderOption);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in MTKTextureLoaderOption()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, type metadata accessor for MTKTextureLoaderOption);
}

uint64_t base witness table accessor for Equatable in MTKTextureLoaderOption()
{
  return lazy protocol witness table accessor for type related decl 'e' for ARErrorCode and conformance related decl 'e' for ARErrorCode((unint64_t *)&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, type metadata accessor for MTKTextureLoaderOption);
}

void type metadata accessor for CGColorRenderingIntent(uint64_t a1)
{
}

void type metadata accessor for related decl 'e' for ARErrorCode(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t type metadata instantiation function for GroupActivitiesSynchronizationSession()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationSession()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    RESyncParticipantGetAddress();
    uint64_t v2 = String.init(cString:)();
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)(*(void *)(v1 + 40) + 16);
    swift_beginAccess();
    unint64_t v6 = *(void *)(v5 + 16);
    if (v6 >> 62) {
      goto LABEL_20;
    }
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v8 = 4;
      while (1)
      {
        uint64_t v9 = v8 - 4;
        if ((v6 & 0xC000000000000001) == 0) {
          break;
        }
        uint64_t v10 = MEMORY[0x1E4E63150](v8 - 4, v6);
        BOOL v11 = __OFADD__(v9, 1);
        uint64_t v12 = v8 - 3;
        if (v11) {
          goto LABEL_19;
        }
LABEL_10:
        id v13 = (void *)(*(void *)(v10 + 16)
                       + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_address);
        BOOL v14 = *v13 == v2 && v13[1] == v4;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t PeerID = RESyncParticipantGetPeerID();
          swift_release();
          *(void *)(*(void *)(v10 + 16)
                    + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) = PeerID;
          return swift_release();
        }
        swift_release();
        ++v8;
        if (v12 == v7) {
          goto LABEL_16;
        }
      }
      uint64_t v10 = *(void *)(v6 + 8 * v8);
      swift_retain();
      BOOL v11 = __OFADD__(v9, 1);
      uint64_t v12 = v8 - 3;
      if (!v11) {
        goto LABEL_10;
      }
LABEL_19:
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain_n();
    }
LABEL_16:
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = Strong;
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = 1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = partial apply for closure #1 in closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:);
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  aBlock[3] = &block_descriptor_27;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  RESyncViewEnumerateObjects();
  swift_release();
  _Block_release(v4);
  swift_beginAccess();
  uint64_t v5 = *(unsigned __int8 *)(v2 + 16);
  swift_release();
  return v5;
}

uint64_t closure #1 in closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (RENetGetEntityFromSyncObject() && (REEntityIsNonHiddenAndInHierarchy() & 1) != 0) {
    return 1;
  }
  swift_beginAccess();
  uint64_t result = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned OpaquePointer) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a4) = v7(a2, a3, a4);
  swift_release();
  return a4 & 1;
}

uint64_t closure #3 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Participant();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for GroupSession.State();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (void **)((char *)&v23 - v8);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(void **, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
    if ((*(unsigned int (**)(void **, uint64_t))(v7 + 88))(v9, v6) == *MEMORY[0x1E4F29440])
    {
      (*(void (**)(void **, uint64_t))(v7 + 96))(v9, v6);
      BOOL v11 = *v9;
      if (one-time initialization token for groupActivities != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.groupActivities);
      id v13 = v11;
      id v14 = v11;
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        uint64_t v24 = v15;
        uint64_t v19 = (void *)v18;
        uint64_t v25 = v3;
        uint64_t v26 = v2;
        *(_DWORD *)uint64_t v17 = 138412290;
        id v20 = v11;
        uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v27 = v21;
        uint64_t v3 = v25;
        uint64_t v2 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v19 = v21;
        uint64_t v22 = v19;
        id v15 = v24;

        _os_log_impl(&dword_1E2A33000, v15, v16, "Session invalidated due: %@", v17, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1E4E64DE0](v22, -1, -1);
        MEMORY[0x1E4E64DE0](v17, -1, -1);
      }
      else
      {
      }
      swift_retain();
      GroupSession.localParticipant.getter();
      GroupActivitiesSynchronizationDiscoveryView.remove(participant:)((uint64_t)v5);
      swift_release();
      swift_release();

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      swift_release();
      return (*(uint64_t (**)(void **, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  return result;
}

uint64_t closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    swift_bridgeObjectRetain();
    uint64_t v7 = GroupSession.activeParticipants.getter();
    if (*(void *)(v7 + 16) <= *(void *)(v4 + 16) >> 3)
    {
      v10[6] = v4;
      specialized Set._subtract<A>(_:)(v7);
      uint64_t v9 = swift_bridgeObjectRelease();
      uint64_t v8 = v4;
    }
    else
    {
      uint64_t v8 = specialized _NativeSet.subtracting<A>(_:)(v7, v4);
      uint64_t v9 = swift_bridgeObjectRelease();
    }
    MEMORY[0x1F4188790](v9);
    v10[2] = v6;
    v10[3] = a3;
    specialized Sequence.forEach(_:)((void (*)(char *))partial apply for closure #1 in closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:), (uint64_t)v10, v8);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Participant();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = *(void *)(*(void *)(a2 + 40) + 16);
  swift_beginAccess();
  unint64_t v9 = *(void *)(v8 + 16);
  uint64_t v14 = a1;
  swift_bridgeObjectRetain();
  uint64_t v10 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in Array<A>.first(with:), (uint64_t)v13, v9);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (!v10)
  {
    swift_retain();
    GroupSession.localParticipant.getter();
    char v12 = MEMORY[0x1E4E61C20](v7, a1);
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    GroupActivitiesSynchronizationDiscoveryView.add(participant:isLocal:)(a1, v12 & 1);
    return swift_release();
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a1;
  uint64_t v5 = type metadata accessor for Participant();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  BOOL v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v25 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v28 = v6 + 16;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v27 = v6 + 32;
  os_log_type_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v30 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v30 + 48) + *(void *)(v6 + 72) * i, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    v29(v8);
    if (v3)
    {
      (*v16)(v8, v5);
      return swift_release();
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v16)(v8, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_17:
    unint64_t v15 = (v22 - 1) & v22;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v26) {
    return swift_release();
  }
  unint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
LABEL_16:
    int64_t v18 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v26) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v25 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t GroupActivitiesSynchronizationSession.deinit()
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v1 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (MEMORY[0x1E4E64150](v1)) {
    RESharedClockServiceSetSession();
  }
  RESyncNetSessionRemoveObserver();
  RESyncRelease();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t result = REServiceLocatorGetNetworkSyncManager();
  if (result)
  {
    RESyncServiceStopSyncWithSession();
    RESyncRelease();
    MEMORY[0x1E4E639D0](*(void *)(v0 + 16));
    RERelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t GroupActivitiesSynchronizationSession.__deallocating_deinit()
{
  GroupActivitiesSynchronizationSession.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationSession()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v53 = a1;
  uint64_t v5 = *v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v56 = v6;
  MEMORY[0x1F4188790](v6);
  v54 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v5 + 80);
  uint64_t v57 = *(void *)(v5 + 88);
  uint64_t v58 = v8;
  type metadata accessor for GroupSession.State();
  uint64_t v9 = type metadata accessor for Published.Publisher();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  MEMORY[0x1F4188790](v9);
  v50 = (char *)&v50 - v10;
  uint64_t v11 = type metadata accessor for __REECSManagerRef();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  int64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1E4FBC860];
  v3[5] = a2;
  v3[6] = v19;
  uint64_t v59 = a2;
  swift_retain();
  v3[2] = REEntityCreate();
  uint64_t aBlock = 0x746F6F52636E7953;
  unint64_t v61 = 0xE90000000000002DLL;
  UUID.init()();
  uint64_t v20 = UUID.uuidString.getter();
  unint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v23._countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REEntitySetName();
  swift_release();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.sceneService.getter();
  swift_release();
  uint64_t v24 = v63;
  uint64_t v25 = v64;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v63);
  (*((void (**)(void *, uint64_t (*)()))v25 + 4))(v24, v25);
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  REECSManagerGetScene();
  RESceneAddEntity();
  RESyncNetSessionConfigurationCreate();
  RESyncNetSessionConfigurationSetIsLocal();
  id v26 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v27 = (void *)MEMORY[0x1E4E62C20](0xD000000000000034, 0x80000001E2AB8A40);
  objc_msgSend(v26, sel_BOOLForKey_, v27);

  uint64_t result = RESyncNetSessionConfigurationSetUnreliableSyncEnabled();
  if (!*(void *)(*(void *)(v59 + 24) + 16))
  {
    __break(1u);
    goto LABEL_8;
  }
  RESyncNetSessionConfigurationSetDiscoveryView();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t result = REServiceLocatorGetNetworkSyncManager();
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v3[3] = RESyncServiceCreateSessionAndStartSync();
  RESyncRelease();
  v3[4] = RESyncNetSessionObserverCreate();
  uint64_t v29 = swift_allocObject();
  swift_weakInit();
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v32 = v57;
  uint64_t v31 = v58;
  v30[2] = v58;
  v30[3] = v32;
  v30[4] = v29;
  v64 = partial apply for closure #1 in GroupActivitiesSynchronizationSession.init(session:discoveryView:);
  v65 = v30;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  unint64_t v61 = 1107296256;
  v62 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
  v63 = &block_descriptor;
  v33 = _Block_copy(&aBlock);
  swift_release();
  RESyncNetSessionObserverOnParticipantJoin();
  _Block_release(v33);
  RESyncNetSessionAddObserver();
  uint64_t result = RESyncServiceGetSyncSession();
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  int v35 = (void *)swift_allocObject();
  v35[2] = v31;
  v35[3] = v32;
  v35[4] = v34;
  v64 = partial apply for closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:);
  v65 = v35;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  unint64_t v61 = 1107296256;
  v62 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned OpaquePointer) -> (@unowned Bool);
  v63 = &block_descriptor_10;
  uint64_t v36 = _Block_copy(&aBlock);
  swift_release();
  RESyncSessionSetViewFilterCB();
  _Block_release(v36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1E2ABE320;
  uint64_t v38 = v50;
  uint64_t v39 = v53;
  GroupSession.$state.getter();
  uint64_t v40 = swift_allocObject();
  swift_weakInit();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v40;
  *(void *)(v41 + 24) = v39;
  swift_retain();
  uint64_t v42 = v52;
  swift_getWitnessTable();
  uint64_t v43 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v38, v42);
  *(void *)(v37 + 32) = v43;
  int v44 = v54;
  GroupSession.$activeParticipants.getter();
  uint64_t v45 = swift_allocObject();
  swift_weakInit();
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v45;
  *(void *)(v46 + 24) = v39;
  lazy protocol witness table accessor for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher();
  swift_retain();
  uint64_t v47 = v56;
  uint64_t v48 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v44, v47);
  *(void *)(v37 + 40) = v48;
  uint64_t aBlock = v37;
  specialized Array._endMutation()();
  v3[6] = aBlock;
  swift_bridgeObjectRelease();
  static __ServiceLocator.shared.getter();
  uint64_t v49 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (MEMORY[0x1E4E64150](v49)) {
    RESharedClockServiceSetSession();
  }
  return (uint64_t)v3;
}

uint64_t specialized GroupActivitiesSynchronizationSession.__allocating_init(session:discoveryView:)(uint64_t a1, uint64_t a2)
{
  return specialized GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1, a2);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1E2A3D7E0()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1E2A3D818()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)()
{
  return closure #1 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)()
{
  return closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)();
}

uint64_t partial apply for closure #3 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1)
{
  return closure #3 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1);
}

uint64_t partial apply for closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t *a1)
{
  return closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher()
{
  unint64_t result = lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher;
  if (!lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1)
{
  return closure #1 in closure #4 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Array<A>.first(with:)(uint64_t a1)
{
  return closure #1 in Array<A>.first(with:)(a1) & 1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1E2A3D968()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t objectdestroy_13Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(uint64_t a1)
{
  return closure #1 in closure #2 in GroupActivitiesSynchronizationSession.init(session:discoveryView:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

unint64_t ARView.PostProcessContext.init(_:_:_:_:_:_:_:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, __n128 *a6@<X8>, __n128 a7@<Q0>, __n128 a8@<Q1>, __n128 a9@<Q2>, __n128 a10@<Q3>, double a11@<D4>)
{
  a6->n128_u64[0] = result;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  a6[2].n128_u64[0] = a5;
  a6[3] = a7;
  a6[4] = a8;
  a6[5] = a9;
  a6[6] = a10;
  a6[7].n128_f64[0] = a11;
  return result;
}

uint64_t ARView.PostProcessContext.device.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.device.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.device.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.PostProcessContext.commandBuffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.commandBuffer.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.commandBuffer.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.PostProcessContext.sourceColorTexture.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.sourceColorTexture.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.sourceColorTexture.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.PostProcessContext.sourceDepthTexture.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.sourceDepthTexture.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.sourceDepthTexture.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.PostProcessContext.targetColorTexture.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ARView.PostProcessContext.targetColorTexture.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t (*ARView.PostProcessContext.targetColorTexture.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

__n128 ARView.PostProcessContext.projection.getter()
{
  return v0[3];
}

void ARView.PostProcessContext.projection.setter(__n128 a1, __n128 a2, __n128 a3, __n128 a4)
{
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  v4[6] = a4;
}

uint64_t (*ARView.PostProcessContext.projection.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

double ARView.PostProcessContext.time.getter()
{
  return *(double *)(v0 + 112);
}

void ARView.PostProcessContext.time.setter(double a1)
{
  *(double *)(v1 + 112) = a1;
}

uint64_t (*ARView.PostProcessContext.time.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t key path getter for ARView.RenderCallbacks.prepareWithDevice : ARView.RenderCallbacks@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed MTLDevice) -> ();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v3);
}

uint64_t key path setter for ARView.RenderCallbacks.prepareWithDevice : ARView.RenderCallbacks(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed MTLDevice) -> (@out ());
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t ARView.RenderCallbacks.prepareWithDevice.getter()
{
  uint64_t v1 = *v0;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(*v0);
  return v1;
}

uint64_t ARView.RenderCallbacks.prepareWithDevice.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(*v2);
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ARView.RenderCallbacks.prepareWithDevice.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t key path getter for ARView.RenderCallbacks.postProcess : ARView.RenderCallbacks@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ()partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;

  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v3);
}

uint64_t key path setter for ARView.RenderCallbacks.postProcess : ARView.RenderCallbacks(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> (@out ())partial apply;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v7);
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t ARView.RenderCallbacks.postProcess.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v1);
  return v1;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t ARView.RenderCallbacks.postProcess.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(*(void *)(v2 + 16));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ARView.RenderCallbacks.postProcess.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

double ARView.RenderCallbacks.init()@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t ARView.renderCallbacks.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v3 = type metadata accessor for __SceneRef();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__coreScene.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v8 = (uint64_t (*)())(id)RESceneGetPrepareWithDeviceRenderCallback();
    if (v8)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v8;
      uint64_t v8 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned MTLDevice) -> ();
    }
    else
    {
      uint64_t v9 = 0;
    }
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(0);
    if ((id)RESceneGetPostProcessRenderCallback())
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v13, 0, sizeof(v13));
    }
    outlined init with take of Any?((uint64_t)v13, (uint64_t)v14);
    if (v14[3])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
      if (swift_dynamicCast())
      {
        uint64_t v10 = swift_allocObject();
        *(_OWORD *)(v10 + 16) = v12;
        uint64_t v11 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> (@out ());
LABEL_13:
        uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(0);
        *a1 = v8;
        a1[1] = (uint64_t (*)())v9;
        a1[2] = v11;
        a1[3] = (uint64_t (*)())v10;
        return result;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v14);
    }
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t key path setter for ARView.renderCallbacks : ARView(uint64_t *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  v5[0] = *a1;
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v5[0]);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v2);
  return ARView.renderCallbacks.setter(v5);
}

uint64_t ARView.renderCallbacks.setter(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __SceneRef();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v13 = a1[2];
  uint64_t v12 = a1[3];
  swift_retain();
  dispatch thunk of Scene.__coreScene.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (!v13)
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ((_:))?);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    __swift_project_boxed_opaque_existential_1(&v29, v31);
    _bridgeAnythingToObjectiveC<A>(_:)();
    RESceneSetPostProcessRenderCallback();
    swift_unknownObjectRelease();
    REScenePostProcessRenderCallbackClearCameraViewHandles();
    if (v11)
    {
LABEL_14:
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v11);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v13);
      uint64_t v27 = (void (*)(uint64_t))v11;
      uint64_t v28 = (void *)v10;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v24 = 1107296256;
      uint64_t v25 = thunk for @escaping @callee_guaranteed (@guaranteed MTLDevice) -> ();
      id v26 = &block_descriptor_0;
      uint64_t v20 = _Block_copy(&aBlock);
      swift_release();
      goto LABEL_15;
    }
LABEL_8:
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(0);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v13);
    uint64_t v20 = 0;
LABEL_15:
    RESceneSetPrepareWithDeviceRenderCallback();
    _Block_release(v20);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  }
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v12;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ((_:))?);
  uint64_t v29 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ();
  uint64_t v30 = v14;
  __swift_project_boxed_opaque_existential_1(&v29, v31);
  swift_retain();
  _bridgeAnythingToObjectiveC<A>(_:)();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v11;
  v15[3] = v10;
  v15[4] = v13;
  v15[5] = v12;
  uint64_t v27 = partial apply for closure #1 in ARView.renderCallbacks.setter;
  uint64_t v28 = v15;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v24 = 1107296256;
  uint64_t v25 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
  id v26 = &block_descriptor_14;
  uint64_t v16 = _Block_copy(&aBlock);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v11);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v13);
  swift_release();
  RESceneSetPostProcessRenderCallback();
  _Block_release(v16);
  uint64_t result = swift_unknownObjectRelease();
  if (!*(void *)(v2 + v9)) {
    goto LABEL_19;
  }
  swift_retain();
  uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v18 = *(void *)(v2 + v9);
  if (active)
  {
    if (v18)
    {
      swift_retain();
      uint64_t v19 = dispatch thunk of Scene.internalActiveCamera.getter();
      goto LABEL_11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v18)
  {
    swift_retain();
    uint64_t v19 = dispatch thunk of Scene.defaultCamera.getter();
LABEL_11:
    uint64_t v21 = v19;
    swift_release();
    if (!v21)
    {
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v11);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v13);
      static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      unint64_t v22 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
    }
    swift_retain();
    Entity.coreEntity.getter();
    swift_release();
    RECameraViewDescriptorsComponentGetComponentType();
    uint64_t result = REEntityGetComponentByClass();
    if (result)
    {
      RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex();
      REScenePostProcessRenderCallbackAddCameraViewHandle();
      swift_release();
      if (v11) {
        goto LABEL_14;
      }
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void closure #1 in ARView.renderCallbacks.setter(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *))
{
  if (a4)
  {
    id v5 = (id)RERenderCallbacksPostProcessGetDevice();
    id v6 = (id)RERenderCallbacksPostProcessGetCommandBuffer();
    id v7 = (id)RERenderCallbacksPostProcessGetSourceColorTexture();
    id v8 = (id)RERenderCallbacksPostProcessGetSourceDepthTexture();
    id v9 = (id)RERenderCallbacksPostProcessGetTargetColorTexture();
    RERenderCallbacksPostProcessGetProjection();
    long long v17 = v11;
    long long v18 = v10;
    long long v15 = v13;
    long long v16 = v12;
    RERenderCallbacksPostProcessGetSimulationTime();
    v19[0] = v5;
    v19[1] = v6;
    v19[2] = v7;
    v19[3] = v8;
    v19[4] = v9;
    long long v20 = v18;
    long long v21 = v17;
    long long v22 = v16;
    long long v23 = v15;
    uint64_t v24 = v14;
    a4(v19);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MTLDevice) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void (*ARView.renderCallbacks.modify(uint64_t (***a1)()))(uint64_t **a1, char a2)
{
  uint64_t v3 = (uint64_t (**)())malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  ARView.renderCallbacks.getter(v3);
  return ARView.renderCallbacks.modify;
}

void ARView.renderCallbacks.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v6 = v3[3];
  v9[0] = v4;
  v9[1] = v5;
  v9[2] = v7;
  v9[3] = v6;
  if (a2)
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v4);
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(v7);
    ARView.renderCallbacks.setter(v9);
    uint64_t v8 = v3[2];
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(*v3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?(v8);
  }
  else
  {
    ARView.renderCallbacks.setter(v9);
  }

  free(v3);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1E2A3EA94()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1E2A3EAF4()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned MTLDevice) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1E2A3EB80()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void partial apply for closure #1 in ARView.renderCallbacks.setter(uint64_t a1)
{
  closure #1 in ARView.renderCallbacks.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void *))(v1 + 32));
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

double sub_1E2A3EC2C@<D0>(_OWORD *a1@<X8>)
{
  ARView.renderCallbacks.getter((uint64_t (**)())v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t destroy for ARView.PostProcessContext()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ARView.PostProcessContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ARView.PostProcessContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

__n128 __swift_memcpy120_16(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ARView.PostProcessContext(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.PostProcessContext(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.PostProcessContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.PostProcessContext()
{
  return &type metadata for ARView.PostProcessContext;
}

void *destroy for ARView.RenderCallbacks(void *result)
{
  uint64_t v1 = result;
  if (*result) {
    __n128 result = (void *)swift_release();
  }
  if (v1[2])
  {
    return (void *)swift_release();
  }
  return result;
}

void *initializeWithCopy for ARView.RenderCallbacks(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  return a1;
}

void *assignWithCopy for ARView.RenderCallbacks(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      uint64_t v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for ARView.RenderCallbacks(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      uint64_t v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.RenderCallbacks(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.RenderCallbacks(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.RenderCallbacks()
{
  return &type metadata for ARView.RenderCallbacks;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed MTLDevice) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed MTLDevice) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t Entity.ConfigurationCatalog.init(from:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](Entity.ConfigurationCatalog.init(from:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.init(from:)()
{
  (*(void (**)(void, void, void))(v0[5] + 16))(v0[6], v0[3], v0[4]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  *uint64_t v1 = v0;
  v1[1] = Entity.ConfigurationCatalog.init(from:);
  uint64_t v2 = v0[6];
  uint64_t v3 = v0[2];
  return Entity.ConfigurationCatalog.init(fromURL:)(v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.ConfigurationCatalog.init(from:);
  }
  else {
    uint64_t v2 = Entity.ConfigurationCatalog.init(from:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[5] + 8))(v0[3], v0[4]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[5] + 8))(v0[3], v0[4]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t Entity.ConfigurationCatalog.init(fromURL:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v2[4] = swift_task_alloc();
  v2[5] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Entity.ConfigurationCatalog();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](Entity.ConfigurationCatalog.init(fromURL:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.init(fromURL:)()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  static Entity.ConfigurationCatalog.resolveRealityFileURL(_:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = v0[14];
    uint64_t v5 = v0[11];
    uint64_t v6 = v0[12];
    uint64_t v7 = v0[3];
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v0[10], &demangling cache variable for type metadata for URL?);
    type metadata accessor for ImportSession();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v8(v4, v7, v5);
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    type metadata accessor for Entity();
    uint64_t v9 = ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)();
    v0[16] = v9;
    uint64_t v22 = v9;
    if (v9)
    {
      uint64_t v23 = v0[4];
      uint64_t v24 = ImportSession.core.getter();
      uint64_t Options = type metadata accessor for Entity.ConfigurationCatalog.LoadOptions();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Options - 8) + 56))(v23, 1, 1, Options);
      swift_retain();
      id v26 = (void *)swift_task_alloc();
      v0[19] = v26;
      *id v26 = v0;
      v26[1] = Entity.ConfigurationCatalog.init(fromURL:);
      uint64_t v27 = v0[8];
      uint64_t v28 = v0[4];
      return MEMORY[0x1F40F5AF8](v27, v24, v22, v28);
    }
    else
    {
      uint64_t v29 = v0[11];
      uint64_t v30 = v0[12];
      uint64_t v31 = v0[3];
      uint64_t v32 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError();
      swift_allocError();
      uint64_t v34 = v33;
      v8(v33, v31, v29);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x1E4F3AA70], v32);
      swift_willThrow();
      (*(void (**)(void, void))(v30 + 8))(v0[3], v0[11]);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v10 = (uint64_t (*)(void))v0[1];
      return v10();
    }
  }
  else
  {
    uint64_t v12 = v0[15];
    uint64_t v14 = v0[12];
    uint64_t v13 = v0[13];
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[5];
    (*(void (**)(uint64_t, void, uint64_t))(v14 + 32))(v12, v0[10], v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v12, v15);
    uint64_t v17 = type metadata accessor for Entity.ConfigurationCatalog.LoadOptions();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
    long long v18 = (void *)swift_task_alloc();
    v0[17] = v18;
    *long long v18 = v0;
    v18[1] = Entity.ConfigurationCatalog.init(fromURL:);
    uint64_t v19 = v0[13];
    uint64_t v20 = v0[9];
    uint64_t v21 = v0[5];
    return MEMORY[0x1F40F5B00](v20, v19, v21);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.ConfigurationCatalog.init(fromURL:);
  }
  else {
    uint64_t v2 = Entity.ConfigurationCatalog.init(fromURL:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  void (*v1)(void, void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void (**)(void, void))(v0[12] + 8);
  v1(v0[3], v0[11]);
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[2];
  v1(v0[15], v0[11]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.ConfigurationCatalog.init(fromURL:);
  }
  else {
    uint64_t v2 = Entity.ConfigurationCatalog.init(fromURL:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[12];
  swift_release();
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = v0[2];
  (*(void (**)(void, void))(v1 + 8))(v0[3], v0[11]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v5, v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  void (*v1)(void, void);
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void (**)(void, void))(v0[12] + 8);
  v1(v0[3], v0[11]);
  v1(v0[15], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[12];
  swift_release();
  (*(void (**)(void, void))(v1 + 8))(v0[3], v0[11]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

unint64_t lazy protocol witness table accessor for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError;
  if (!lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError)
  {
    type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError);
  }
  return result;
}

uint64_t Entity.ConfigurationCatalog.init(from:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  v3[5] = swift_task_alloc();
  v3[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Entity.ConfigurationCatalog();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v3[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URL();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](Entity.ConfigurationCatalog.init(from:options:), 0, 0);
}

uint64_t Entity.ConfigurationCatalog.init(from:options:)()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[11];
  static Entity.ConfigurationCatalog.resolveRealityFileURL(_:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = v0[15];
    uint64_t v5 = v0[12];
    uint64_t v6 = v0[13];
    uint64_t v7 = v0[3];
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v0[11], &demangling cache variable for type metadata for URL?);
    type metadata accessor for ImportSession();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v8(v4, v7, v5);
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    type metadata accessor for Entity();
    uint64_t v9 = ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)();
    v0[17] = v9;
    uint64_t v10 = v0[4];
    uint64_t v23 = v9;
    if (v9)
    {
      uint64_t v24 = v0[5];
      uint64_t v25 = ImportSession.core.getter();
      outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(v10, v24);
      swift_retain();
      id v26 = (void *)swift_task_alloc();
      v0[20] = v26;
      *id v26 = v0;
      v26[1] = Entity.ConfigurationCatalog.init(from:options:);
      uint64_t v27 = v0[9];
      uint64_t v28 = v0[5];
      return MEMORY[0x1F40F5AF8](v27, v25, v23, v28);
    }
    else
    {
      uint64_t v30 = v0[12];
      uint64_t v29 = v0[13];
      uint64_t v31 = v0[3];
      uint64_t v32 = type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.USDConfigurationReaderError and conformance Entity.ConfigurationCatalog.USDConfigurationReaderError();
      swift_allocError();
      uint64_t v34 = v33;
      v8(v33, v31, v30);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x1E4F3AA70], v32);
      swift_willThrow();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v10, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
      (*(void (**)(void, void))(v29 + 8))(v0[3], v0[12]);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      long long v11 = (uint64_t (*)(void))v0[1];
      return v11();
    }
  }
  else
  {
    uint64_t v13 = v0[16];
    uint64_t v15 = v0[13];
    uint64_t v14 = v0[14];
    uint64_t v16 = v0[12];
    uint64_t v17 = v0[6];
    uint64_t v18 = v0[4];
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 32))(v13, v0[11], v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v13, v16);
    outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(v18, v17);
    uint64_t v19 = (void *)swift_task_alloc();
    v0[18] = v19;
    *uint64_t v19 = v0;
    v19[1] = Entity.ConfigurationCatalog.init(from:options:);
    uint64_t v20 = v0[14];
    uint64_t v21 = v0[10];
    uint64_t v22 = v0[6];
    return MEMORY[0x1F40F5B00](v21, v20, v22);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.ConfigurationCatalog.init(from:options:);
  }
  else {
    uint64_t v2 = Entity.ConfigurationCatalog.init(from:options:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[3];
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v0[4], &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v4(v3, v1);
  uint64_t v5 = v0[10];
  uint64_t v7 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v8 = v0[2];
  v4(v0[16], v0[12]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v5, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Entity.ConfigurationCatalog.init(from:options:);
  }
  else {
    uint64_t v2 = Entity.ConfigurationCatalog.init(from:options:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[13];
  uint64_t v2 = v0[4];
  swift_release();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v2, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  uint64_t v3 = v0[9];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[2];
  (*(void (**)(void, void))(v1 + 8))(v0[3], v0[12]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[3];
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v0[4], &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v4(v3, v1);
  v4(v0[16], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[13];
  uint64_t v2 = v0[4];
  swift_release();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v2, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(void, void))(v1 + 8))(v0[3], v0[12]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t outlined init with copy of Entity.ConfigurationCatalog.LoadOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void one-time initialization function for translationBeginWorldThresholdSq()
{
  static EntityTranslationGestureRecognizer.Constants.translationBeginWorldThresholdSq = 953267991;
}

void one-time initialization function for translationBeginScreenThresholdSq()
{
  static EntityTranslationGestureRecognizer.Constants.translationBeginScreenThresholdSq = 1120403456;
}

uint64_t key path setter for EntityTranslationGestureRecognizer.entity : EntityTranslationGestureRecognizer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = swift_retain();
  EntityTranslationGestureRecognizer.entity.willset(v5);
  uint64_t v6 = (void *)(v4 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity);
  swift_beginAccess();
  *uint64_t v6 = v2;
  v6[1] = v3;
  return swift_release();
}

id EntityTranslationGestureRecognizer.entity.willset(uint64_t a1)
{
  uint64_t v2 = v1;
  id result = objc_msgSend(v2, sel_isEnabled);
  if (result)
  {
    uint64_t v5 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
    id result = (id)swift_beginAccess();
    if (*(void *)v5)
    {
      if (a1)
      {
        type metadata accessor for Entity();
        lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
        swift_retain_n();
        char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        id result = (id)swift_release();
        if (v6) {
          return result;
        }
      }
    }
    else if (!a1)
    {
      return result;
    }
    return objc_msgSend(v2, sel_setState_, 5);
  }
  return result;
}

uint64_t EntityTranslationGestureRecognizer.entity.getter()
{
  return swift_retain();
}

uint64_t EntityTranslationGestureRecognizer.entity.setter(uint64_t a1, uint64_t a2)
{
  EntityTranslationGestureRecognizer.entity.willset(a1);
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

void (*EntityTranslationGestureRecognizer.entity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity;
  *((void *)v3 + 5) = v1;
  *((void *)v3 + 6) = v4;
  uint64_t v5 = (_OWORD *)(v1 + v4);
  swift_beginAccess();
  *(_OWORD *)(v3 + 24) = *v5;
  swift_retain();
  return EntityTranslationGestureRecognizer.entity.modify;
}

void EntityTranslationGestureRecognizer.entity.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = (uint64_t *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48));
  if (a2)
  {
    uint64_t v6 = swift_retain();
    EntityTranslationGestureRecognizer.entity.willset(v6);
    *uint64_t v5 = v3;
    v5[1] = v4;
    swift_release();
  }
  else
  {
    EntityTranslationGestureRecognizer.entity.willset(v3);
    *uint64_t v5 = v3;
    v5[1] = v4;
  }
  swift_release();

  free(v2);
}

void EntityTranslationGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, void *a2)
{
  uint64_t v4 = v2;
  id v5 = a2;
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = specialized Set._Variant.filter(_:)(v6, v4, v5);

  uint64_t v8 = &v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation];
  int v9 = v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation + 16];
  uint64_t v10 = (uint64_t)objc_msgSend(v4, sel_numberOfTouches);
  if (v9 != 1)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      uint64_t v21 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v21 = *(void *)(v7 + 16);
    }
    swift_release();
    if (v21 >= 1)
    {
      EntityTranslationGestureRecognizer.touchCentroidChanged()();
      if (v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun] != 1) {
        return;
      }
      uint64_t v22 = v4;
      uint64_t v23 = 2;
      goto LABEL_16;
    }
    if (v10 > 0) {
      return;
    }
LABEL_15:
    uint64_t v22 = v4;
    uint64_t v23 = 5;
LABEL_16:
    objc_msgSend(v22, sel_setState_, v23);
    return;
  }
  swift_release();
  if (v10 < 1) {
    goto LABEL_15;
  }
  unint64_t v11 = EntityTranslationGestureRecognizer.calcTouchHeight()();
  uint64_t v12 = &v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
  *(_DWORD *)uint64_t v12 = v11;
  v12[4] = BYTE4(v11) & 1;
  id v13 = objc_msgSend(v4, sel_view);
  objc_msgSend(v4, sel_locationInView_, v13);
  double v15 = v14;
  double v17 = v16;

  id v18 = objc_msgSend(v4, sel_view);
  if (!v18)
  {
LABEL_7:
    objc_msgSend(v4, sel_setState_, 5);
    return;
  }
  uint64_t v19 = v18;
  type metadata accessor for ARView();
  if (!swift_dynamicCastClass()
    || (uint64_t v20 = *(unsigned int *)v12,
        LOBYTE(v33[0]) = v12[4],
        specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v20 | ((unint64_t)LOBYTE(v33[0]) << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v32), outlined init with take of simd_float4x4?((uint64_t)v32, (uint64_t)v33), (v36 & 1) != 0))
  {

    goto LABEL_7;
  }
  uint64_t v24 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v15, v17, *(double *)v33, (float32x4_t)v33[1], *(double *)&v34, v35);
  uint64_t v26 = v25;
  char v28 = v27;

  if (v28) {
    goto LABEL_7;
  }
  *(void *)uint64_t v8 = v24;
  *((void *)v8 + 1) = v26;
  v8[16] = 0;
  uint64_t v29 = &v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation];
  *(void *)uint64_t v29 = v24;
  *((void *)v29 + 1) = v26;
  v29[16] = 0;
  uint64_t v30 = (double *)&v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation];
  *uint64_t v30 = v15;
  v30[1] = v17;
  *((unsigned char *)v30 + 16) = 0;
  uint64_t v31 = (double *)&v4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation];
  *uint64_t v31 = v15;
  v31[1] = v17;
  *((unsigned char *)v31 + 16) = 0;
}

unint64_t EntityTranslationGestureRecognizer.calcTouchHeight()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CollisionCastHit();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(v0, sel_view);
  objc_msgSend(v1, sel_locationInView_, v9);
  double v11 = v10;
  double v13 = v12;

  id v14 = objc_msgSend(v1, sel_view);
  if (!v14) {
    goto LABEL_8;
  }
  double v15 = v14;
  type metadata accessor for ARView();
  unint64_t result = swift_dynamicCastClass();
  if (!result)
  {

LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_9;
  }
  double v17 = *(void **)(result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v17)
  {
    id v18 = v17;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v4, v11, v13);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
      v26[0] = 1;
      specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(0x100000000, &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v25);
      outlined init with take of simd_float4x4?((uint64_t)v25, (uint64_t)v26);
      if (v29 != 1)
      {
        float32x4_t v24 = v27;
        float32x4_t v23 = v28;
        CollisionCastHit.position.getter();
        v21.i32[3] = 1.0;
        int8x16_t v22 = (int8x16_t)vmulq_f32(v24, vsubq_f32(v21, v23));
        *(float32x2_t *)v22.i8 = vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
        *(float32x2_t *)v22.i8 = vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1));
        float32x4_t v24 = (float32x4_t)v22;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        unsigned __int8 v20 = 0;
        uint64_t v19 = v24.u32[0];
        goto LABEL_11;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_10:
      uint64_t v19 = 0;
      unsigned __int8 v20 = 1;
LABEL_11:
      v26[0] = v20;
      return v19 | ((unint64_t)v20 << 32);
    }
LABEL_9:
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, &demangling cache variable for type metadata for CollisionCastHit?);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void EntityTranslationGestureRecognizer.touchCentroidChanged()()
{
  uint64_t v1 = v0;
  unint64_t v2 = EntityTranslationGestureRecognizer.calcTouchHeight()();
  uint64_t v3 = (unsigned int *)((char *)v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight);
  *uint64_t v3 = v2;
  *((unsigned char *)v3 + 4) = BYTE4(v2) & 1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))(0);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    id v10 = objc_msgSend(v0, sel_view);
    objc_msgSend(v1, sel_locationInView_, v10);
    double v12 = v11;
    double v14 = v13;

    id v15 = objc_msgSend(v1, sel_view);
    if (v15)
    {
      uint64_t v30 = v15;
      type metadata accessor for ARView();
      if (swift_dynamicCastClass())
      {
        uint64_t v16 = *v3;
        LOBYTE(v33[0]) = *((unsigned char *)v3 + 4);
        specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v16 | ((unint64_t)LOBYTE(v33[0]) << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v32);
        outlined init with take of simd_float4x4?((uint64_t)v32, (uint64_t)v33);
        if (v36)
        {
        }
        else
        {
          uint64_t v17 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v12, v14, *(double *)v33, (float32x4_t)v33[1], *(double *)&v34, v35);
          uint64_t v19 = v18;
          char v21 = v20;

          if ((v21 & 1) == 0)
          {
            *(void *)&long long v22 = v8;
            *((void *)&v22 + 1) = v9;
            *(_OWORD *)uint64_t v31 = v22;
            float32x4_t v23 = (char *)v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation;
            *(void *)float32x4_t v23 = v17;
            *((void *)v23 + 1) = v19;
            v23[16] = 0;
            id v24 = objc_msgSend(v1, sel_view);
            objc_msgSend(v1, sel_locationInView_, v24);
            uint64_t v26 = v25;
            uint64_t v28 = v27;

            char v29 = (char *)v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation;
            *(void *)char v29 = v26;
            *((void *)v29 + 1) = v28;
            v29[16] = 0;
            (*(void (**)(void, __n128))((*v4 & *v1) + 0xC0))(0, *(__n128 *)v31);
          }
        }
      }
      else
      {
      }
    }
  }
}

void EntityTranslationGestureRecognizer.touchesEnded(_:with:)(uint64_t a1, void *a2)
{
  id v5 = v2;
  id v6 = a2;
  specialized Sequence.forEach(_:)(a1, v5, (uint64_t)v6);

  if ((uint64_t)objc_msgSend(v5, sel_numberOfTouches) < 1)
  {
    char v7 = v5;
    if (*((unsigned char *)v5 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun) == 1) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = 5;
    }
  }
  else
  {
    EntityTranslationGestureRecognizer.touchCentroidChanged()();
    if (*((unsigned char *)v5 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun) != 1) {
      return;
    }
    char v7 = v5;
    uint64_t v8 = 2;
  }

  objc_msgSend(v7, sel_setState_, v8);
}

uint64_t @objc EntityTranslationGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  type metadata accessor for UITouch();
  lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UITouch);
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

uint64_t specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X8>)
{
  return specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(a1, &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, a2);
}

{
  return specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(a1, &OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity, a2);
}

uint64_t specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, float32x4_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AnchoringComponent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v10 = &v63.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  double v14 = &v63.i8[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (uint64_t *)((char *)v63.i64 - v15);
  uint64_t v17 = (uint64_t *)(v3 + *a2);
  uint64_t result = swift_beginAccess();
  uint64_t v20 = *v17;
  float32x4_t v21 = 0uLL;
  if (!v20)
  {
    char v28 = 1;
    float32x4_t v29 = 0uLL;
LABEL_22:
    a3->i64[0] = 0;
    a3->i64[1] = 0;
    a3[1] = v21;
    a3[2].i64[0] = 0;
    a3[2].i64[1] = 0;
    a3[3] = v29;
    a3[4].i8[0] = v28;
    return result;
  }
  v65.i64[0] = v3;
  v67 = a3;
  LODWORD(v19) = a1;
  if ((a1 & 0x100000000) != 0) {
    *(float *)&long long v19 = 0.0;
  }
  long long v66 = v19;
  swift_retain();
  uint64_t v22 = Entity.anchor.getter();
  if (v22)
  {
    uint64_t v24 = v22;
    uint64_t v25 = v23;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
    v63.i64[0] = v7;
    uint64_t v27 = v26;
    v64.i64[0] = v20;
    *uint64_t v16 = v24;
    v16[1] = v25;
    swift_retain();
    HasAnchoring.anchoring.getter();
    AnchoringComponent.target.getter();
    (*(void (**)(__int8 *, uint64_t))(v8 + 8))(v10, v63.i64[0]);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v16, 0, 1, v27);
    swift_release();
  }
  else
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v16, 1, 1, v30);
  }
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, (uint64_t)v14, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
  if ((*(unsigned int (**)(__int8 *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v14, 1, v31) == 1)
  {
    HasTransform.transformMatrix(relativeTo:)();
    float32x4_t v64 = v32;
    float32x4_t v65 = v33;
    swift_release();
    int8x16_t v34 = (int8x16_t)vmulq_f32(v64, v64);
    *(float32x2_t *)v34.i8 = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
    v34.i32[0] = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1)).u32[0];
    float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    float32x2_t v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    float32x4_t v64 = vmulq_n_f32(v64, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    uint64_t result = outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
    float32x4_t v21 = v64;
LABEL_21:
    a3 = v67;
    char v28 = 0;
    float32x4_t v29 = vaddq_f32(v65, vmulq_n_f32(v21, *(float *)&v66));
    goto LABEL_22;
  }
  uint64_t v37 = &v14[*(int *)(v31 + 48)];
  uint64_t v38 = type metadata accessor for AnchoringComponent.Target();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v39 + 88))(v37, v38) != *MEMORY[0x1E4F3A950])
  {
    HasTransform.transformMatrix(relativeTo:)();
    float32x4_t v64 = v47;
    float32x4_t v65 = v48;
    swift_release();
    swift_release();
    int8x16_t v49 = (int8x16_t)vmulq_f32(v64, v64);
    *(float32x2_t *)v49.i8 = vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
    v49.i32[0] = vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1)).u32[0];
    float32x2_t v50 = vrsqrte_f32((float32x2_t)v49.u32[0]);
    float32x2_t v51 = vmul_f32(v50, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v50, v50)));
    float32x4_t v64 = vmulq_n_f32(v64, vmul_f32(v51, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v51, v51))).f32[0]);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    float32x4_t v21 = v64;
    goto LABEL_21;
  }
  uint64_t v40 = (uint64_t)v16;
  swift_release();
  id v41 = objc_msgSend((id)v65.i64[0], sel_view);
  if (!v41)
  {
LABEL_18:
    swift_release();
    uint64_t result = outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v40, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
    char v28 = 1;
    float32x4_t v29 = 0uLL;
    a3 = v67;
    float32x4_t v21 = 0uLL;
    goto LABEL_22;
  }
  uint64_t v42 = v41;
  type metadata accessor for ARView();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {

    goto LABEL_18;
  }
  if (*(void *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    if (active)
    {
      type metadata accessor for Entity();
      HasTransform.transformMatrix(relativeTo:)();
      Transform.init(matrix:)();
      float32x4_t v64 = v45;
      float32x4_t v65 = v44;
      int8x16_t v63 = v46;

      swift_release();
    }
    else
    {
      Transform.init()();
      float32x4_t v64 = v53;
      float32x4_t v65 = v52;
      int8x16_t v63 = v54;
    }
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v63.i64, v64);
    float32x4_t v64 = v55;
    float32x4_t v65 = v56;
    HasTransform.position(relativeTo:)();
    int8x16_t v63 = v57;
    swift_release();
    float32x4_t v58 = vsubq_f32((float32x4_t)0, v64);
    v59.i32[0] = vextq_s8(v63, v63, 8uLL).u32[0];
    v59.i32[1] = 1.0;
    float32x2_t v60 = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v65.f32), *(float32x2_t *)v58.f32), vmul_f32(vsub_f32(v59, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)));
    int8x16_t v61 = (int8x16_t)vmulq_f32(v58, v58);
    *(float32x2_t *)v61.i8 = vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL));
    float32x4_t v62 = vaddq_f32(v65, vmulq_n_f32(v58, vadd_f32(v60, (float32x2_t)vdup_lane_s32((int32x2_t)v60, 1)).f32[0]));
    v60.i32[0] = vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1)).u32[0];
    *(float32x2_t *)v61.i8 = vrsqrte_f32((float32x2_t)v60.u32[0]);
    *(float32x2_t *)v61.i8 = vmul_f32(*(float32x2_t *)v61.i8, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8)));
    float32x4_t v64 = vmulq_n_f32(v58, vmul_f32(*(float32x2_t *)v61.i8, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(*(float32x2_t *)v61.i8, *(float32x2_t *)v61.i8))).f32[0]);
    float32x4_t v65 = v62;
    uint64_t result = outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v40, &demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
    float32x4_t v21 = vsubq_f32((float32x4_t)0, v64);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall EntityTranslationGestureRecognizer.reset()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation;
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 16) = 1;
  uint64_t v2 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 1;
  uint64_t v3 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight;
  *(_DWORD *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 4) = 1;
  uint64_t v4 = (void *)(v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity);
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation;
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 16) = 1;
  uint64_t v6 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation;
  *(void *)uint64_t v7 = 0;
  *(void *)(v7 + 8) = 0;
  *(unsigned char *)(v7 + 16) = 1;
  uint64_t v8 = v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = 1;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun) = 0;
}

Swift::Bool __swiftcall EntityTranslationGestureRecognizer.canPrevent(_:)(UIGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = (uint64_t *)&v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t ObjectType = swift_getObjectType();
  id v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v11 = a1;
  swift_retain();
  uint64_t v12 = v10(ObjectType, v5);
  if (!v12)
  {

    swift_release();
LABEL_12:
    v16.receiver = v2;
    v16.super_class = (Class)type metadata accessor for EntityTranslationGestureRecognizer();
    unsigned __int8 v14 = [(UIGestureRecognizer *)&v16 canPreventGestureRecognizer:a1];
    return v14 & 1;
  }
  uint64_t v13 = v12;
  swift_retain();
  unsigned __int8 v14 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v13, v8);

  swift_release();
  swift_release_n();
  return v14 & 1;
}

float32x2_t EntityTranslationGestureRecognizer.translation(in:)(uint64_t a1)
{
  uint64_t v2 = (float32x2_t *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation);
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation + 16) & 1) == 0)
  {
    uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation);
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation + 16) & 1) == 0)
    {
      uint64_t v4 = (const double *)(v3 + 1);
      uint64_t v6 = *v3;
      unsigned int v5 = *v3;
      uint64_t v7 = (const double *)&v2[1];
      vld1q_dup_f64(v7);
      vld1q_dup_f64(v4);
      float32x2_t result = vsub_f32((float32x2_t)__PAIR64__(HIDWORD(v6), v5), *v2);
      if (a1)
      {
        type metadata accessor for Entity();
        HasTransform.convert(direction:from:)();
      }
    }
  }
  return result;
}

float32x4_t EntityTranslationGestureRecognizer.setTranslation(_:in:)(uint64_t a1, float32x4_t result)
{
  uint64_t v3 = (float32x4_t *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation);
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation + 16) & 1) == 0)
  {
    float32x4_t v4 = result;
    uint64_t v5 = v3->i64[0];
    float32x4_t v6 = *v3;
    if (a1)
    {
      float32x4_t v12 = *v3;
      float32x4_t v13 = result;
      type metadata accessor for Entity();
      HasTransform.convert(direction:to:)();
      float32x4_t v6 = v12;
      float32x4_t v4 = v13;
    }
    *(float32x2_t *)&long long v7 = vsub_f32((float32x2_t)__PAIR64__(v6.u32[1], v5), *(float32x2_t *)result.f32);
    *((void *)&v7 + 1) = vsubq_f32(v6, result).u32[2];
    uint64_t v8 = v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation;
    *(_OWORD *)uint64_t v8 = v7;
    *(unsigned char *)(v8 + 16) = 0;
    uint64_t v9 = (float32x4_t *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation);
    *uint64_t v9 = v4;
    v9[1].i8[0] = 0;
    unsigned __int8 v10 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation + 16);
    uint64_t v11 = (__n128 *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation);
    float32x2_t result = *(float32x4_t *)(v2 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation);
    *uint64_t v11 = (__n128)result;
    v11[1].n128_u8[0] = v10;
  }
  return result;
}

__n128 EntityTranslationGestureRecognizer.velocity(in:)(uint64_t a1)
{
  if (a1)
  {
    type metadata accessor for Entity();
    HasTransform.convert(direction:from:)();
  }
  else
  {
    return *(__n128 *)(v1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity);
  }
  return result;
}

uint64_t EntityTranslationGestureRecognizer.location(in:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_view);
  objc_msgSend(v1, sel_locationInView_, v3);
  double v5 = v4;
  double v7 = v6;

  id v8 = objc_msgSend(v1, sel_view);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  type metadata accessor for ARView();
  if (!swift_dynamicCastClass())
  {

    return 0;
  }
  uint64_t v10 = *(unsigned int *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
  LOBYTE(v18[0]) = v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight + 4];
  specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v10 | ((unint64_t)LOBYTE(v18[0]) << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v17);
  outlined init with take of simd_float4x4?((uint64_t)v17, (uint64_t)v18);
  if ((v21 & 1) != 0
    || (uint64_t v11 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v5, v7, *(double *)v18, (float32x4_t)v18[1], *(double *)&v19, v20), (v12 & 1) != 0))
  {

    return 0;
  }
  uint64_t v13 = v11;
  if (a1)
  {
    type metadata accessor for Entity();
    HasTransform.convert(position:from:)();
    uint64_t v16 = v14;

    return v16;
  }
  else
  {
  }
  return v13;
}

id EntityTranslationGestureRecognizer.__allocating_init(target:action:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    double v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = *(void *)(v4 - 8);
    MEMORY[0x1F4188790](v6);
    uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = objc_msgSend(objc_allocWithZone(v2), sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v11;
}

id EntityTranslationGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  double v5 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
  *double v5 = 0;
  v5[1] = 0;
  double v6 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation];
  *(void *)double v6 = 0;
  *((void *)v6 + 1) = 0;
  v6[16] = 1;
  uint64_t v7 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation];
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  v7[16] = 1;
  uint64_t v8 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
  *(_DWORD *)uint64_t v8 = 0;
  v8[4] = 1;
  uint64_t v9 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity];
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation];
  *(void *)uint64_t v10 = 0;
  *((void *)v10 + 1) = 0;
  v10[16] = 1;
  id v11 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime];
  *(void *)id v11 = 0;
  v11[8] = 1;
  char v12 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation];
  *(void *)char v12 = 0;
  *((void *)v12 + 1) = 0;
  v12[16] = 1;
  uint64_t v13 = &v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation];
  *(void *)uint64_t v13 = 0;
  *((void *)v13 + 1) = 0;
  unsigned char v13[16] = 1;
  v2[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun] = 0;
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, (uint64_t)v24, &demangling cache variable for type metadata for Any?);
  uint64_t v14 = v25;
  if (v25)
  {
    uint64_t v15 = __swift_project_boxed_opaque_existential_1(v24, v25);
    uint64_t v16 = *(void *)(v14 - 8);
    MEMORY[0x1F4188790](v15);
    uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v16 + 16))(v18);
    uint64_t v19 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    uint64_t v19 = 0;
  }
  float32x4_t v20 = (objc_class *)type metadata accessor for EntityTranslationGestureRecognizer();
  v23.receiver = v2;
  v23.super_class = v20;
  id v21 = objc_msgSendSuper2(&v23, sel_initWithTarget_action_, v19, a2);
  swift_unknownObjectRelease();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for Any?);
  return v21;
}

id EntityTranslationGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EntityTranslationGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void (*protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer(void *a1))(void *a1)
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityTranslationGestureRecognizer.entity.modify(v2);
  return protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer;
}

void protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for EntityGestureRecognizer.location(in:) in conformance EntityTranslationGestureRecognizer(uint64_t a1)
{
  return EntityTranslationGestureRecognizer.location(in:)(a1);
}

uint64_t specialized EntityGestureRecognizer.doesEntity(_:contain:)(uint64_t a1, uint64_t a2)
{
  return specialized EntityGestureRecognizer.doesEntity(_:contain:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))specialized EntityGestureRecognizer.doesEntity(_:contain:));
}

uint64_t specialized EntityGestureRecognizer.doesEntity(_:contain:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!a2) {
    return 0;
  }
  type metadata accessor for Entity();
  swift_retain();
  uint64_t v5 = HasHierarchy.parent.getter();
  if (v5 && (uint64_t v6 = v5, swift_release(), v6 == a1))
  {
    swift_release();
    return 1;
  }
  else
  {
    uint64_t v7 = HasHierarchy.parent.getter();
    char v8 = a3(a1, v7);
    swift_release();
    swift_release();
    return v8 & 1;
  }
}

void specialized Sequence.forEach(_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UITouch();
    lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UITouch);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v22;
    uint64_t v21 = v23;
    uint64_t v6 = v24;
    uint64_t v7 = v25;
    unint64_t v8 = v26;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v20 = (unint64_t)(v6 + 64) >> 6;
  if (v5 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v8)
    {
      uint64_t v13 = (v8 - 1) & v8;
      unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
      uint64_t v15 = v7;
      goto LABEL_29;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v17 >= v20) {
      goto LABEL_32;
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    uint64_t v15 = v7 + 1;
    if (!v18)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v20) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v21 + 8 * v15);
      if (!v18)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v20) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v21 + 8 * v15);
        if (!v18)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v20) {
            goto LABEL_32;
          }
          unint64_t v18 = *(void *)(v21 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v20) {
              goto LABEL_32;
            }
            unint64_t v18 = *(void *)(v21 + 8 * v15);
            if (!v18)
            {
              uint64_t v19 = v7 + 6;
              while (v20 != v19)
              {
                unint64_t v18 = *(void *)(v21 + 8 * v19++);
                if (v18)
                {
                  uint64_t v15 = v19 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<UITouch>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v13 = (v18 - 1) & v18;
    unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
LABEL_29:
    id v16 = *(id *)(*(void *)(v5 + 48) + 8 * v14);
    if (!v16) {
      goto LABEL_32;
    }
    while (1)
    {
      objc_msgSend(a2, sel_ignoreTouch_forEvent_, v16, a3);

      uint64_t v7 = v15;
      unint64_t v8 = v13;
      if ((v5 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for UITouch();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v16 = v27;
        swift_unknownObjectRelease();
        uint64_t v15 = v7;
        uint64_t v13 = v8;
        if (v27) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v70 = a5;
  uint64_t v56 = a2;
  int8x16_t v57 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CollisionCastHit();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  int8x16_t v63 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  float32x4_t v62 = (char *)&v55 - v14;
  uint64_t v72 = a3;
  uint64_t v17 = *(void *)(a3 + 56);
  uint64_t v16 = a3 + 56;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v16 - 24);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v15;
  v71 = (uint64_t *)&a4[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
  swift_beginAccess();
  int64_t v21 = 0;
  v68 = v9;
  int64_t v69 = (unint64_t)(v18 + 63) >> 6;
  float32x4_t v64 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v65 = v16;
  float32x2_t v60 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  int8x16_t v61 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  uint64_t v58 = 0;
  float32x2_t v59 = (void (**)(char *, uint64_t))(v11 + 8);
  long long v66 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  while (1)
  {
    if (v20)
    {
      uint64_t v73 = (v20 - 1) & v20;
      int64_t v74 = v21;
      unint64_t v23 = __clz(__rbit64(v20)) | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v24 >= v69) {
      goto LABEL_37;
    }
    unint64_t v25 = *(void *)(v16 + 8 * v24);
    int64_t v26 = v21 + 1;
    if (!v25)
    {
      int64_t v26 = v21 + 2;
      if (v21 + 2 >= v69) {
        goto LABEL_37;
      }
      unint64_t v25 = *(void *)(v16 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v21 + 3;
        if (v21 + 3 >= v69) {
          goto LABEL_37;
        }
        unint64_t v25 = *(void *)(v16 + 8 * v26);
        if (!v25) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v73 = (v25 - 1) & v25;
    int64_t v74 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_22:
    char v28 = *(void **)(*(void *)(v72 + 48) + 8 * v23);
    uint64_t v29 = *v71;
    if (!*v71)
    {
      id v22 = v28;
      goto LABEL_5;
    }
    unint64_t v67 = v23;
    id v30 = v28;
    swift_retain();
    id v31 = objc_msgSend(a4, sel_view);
    float32x4_t v32 = v30;
    objc_msgSend(v30, sel_locationInView_, v31);
    double v34 = v33;
    double v36 = v35;

    id v37 = objc_msgSend(a4, sel_view);
    if (!v37) {
      goto LABEL_31;
    }
    uint64_t v38 = v37;
    type metadata accessor for ARView();
    uint64_t v39 = swift_dynamicCastClass();
    if (!v39)
    {

LABEL_31:
      uint64_t v44 = (uint64_t)v68;
      (*v66)((uint64_t)v68, 1, 1, v10);
LABEL_32:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v44, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_5;
    }
    uint64_t v40 = *(void **)(v39 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v40) {
      goto LABEL_40;
    }
    id v41 = a4;
    id v42 = v40;
    uint64_t v43 = (uint64_t)v68;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v68, v34, v36);

    uint64_t v44 = v43;
    int v45 = (*v64)(v43, 1, v10);
    a4 = v41;
    uint64_t v16 = v65;
    if (v45 == 1) {
      goto LABEL_32;
    }
    int8x16_t v46 = v62;
    (*v61)(v62, v44, v10);
    swift_retain();
    uint64_t v47 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    (*v60)(v63, v46, v10);
    if (v47 == v29)
    {
      swift_release();
      float32x4_t v52 = *v59;
      (*v59)(v63, v10);
      v52(v62, v10);
LABEL_34:

      *(unint64_t *)((char *)v57 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v67;
      BOOL v53 = __OFADD__(v58++, 1);
      int64_t v21 = v74;
      unint64_t v20 = v73;
      if (v53)
      {
        __break(1u);
LABEL_37:
        uint64_t v54 = v72;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v57, v56, v58, v54);
        return;
      }
    }
    else
    {
      float32x4_t v48 = v63;
      uint64_t v49 = CollisionCastHit.entity.getter();
      char v50 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v29, v49);
      swift_release();
      swift_release();
      float32x2_t v51 = *v59;
      (*v59)(v48, v10);
      v51(v62, v10);
      if (v50) {
        goto LABEL_34;
      }
LABEL_5:
      objc_msgSend(a4, sel_ignoreTouch_forEvent_, v28, v70);

      int64_t v21 = v74;
      unint64_t v20 = v73;
    }
  }
  uint64_t v27 = v21 + 4;
  if (v21 + 4 >= v69) {
    goto LABEL_37;
  }
  unint64_t v25 = *(void *)(v16 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v21 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v26 >= v69) {
      goto LABEL_37;
    }
    unint64_t v25 = *(void *)(v16 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  id v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  void (**v59)(char *, uint64_t);
  void (**v60)(char *, char *, uint64_t);
  void (**v61)(char *, uint64_t, uint64_t);
  char *v62;
  char *v63;
  uint64_t (**v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  void (**v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v67;
  char *v68;
  int64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;

  uint64_t v70 = a5;
  uint64_t v56 = a2;
  int8x16_t v57 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CollisionCastHit();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  int8x16_t v63 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  float32x4_t v62 = (char *)&v55 - v14;
  uint64_t v72 = a3;
  uint64_t v17 = *(void *)(a3 + 56);
  uint64_t v16 = a3 + 56;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v16 - 24);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v15;
  v71 = (uint64_t *)&a4[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
  swift_beginAccess();
  int64_t v21 = 0;
  v68 = v9;
  int64_t v69 = (unint64_t)(v18 + 63) >> 6;
  float32x4_t v64 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v65 = v16;
  float32x2_t v60 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  int8x16_t v61 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  uint64_t v58 = 0;
  float32x2_t v59 = (void (**)(char *, uint64_t))(v11 + 8);
  long long v66 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  while (1)
  {
    if (v20)
    {
      uint64_t v73 = (v20 - 1) & v20;
      int64_t v74 = v21;
      unint64_t v23 = __clz(__rbit64(v20)) | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v24 >= v69) {
      goto LABEL_37;
    }
    unint64_t v25 = *(void *)(v16 + 8 * v24);
    int64_t v26 = v21 + 1;
    if (!v25)
    {
      int64_t v26 = v21 + 2;
      if (v21 + 2 >= v69) {
        goto LABEL_37;
      }
      unint64_t v25 = *(void *)(v16 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v21 + 3;
        if (v21 + 3 >= v69) {
          goto LABEL_37;
        }
        unint64_t v25 = *(void *)(v16 + 8 * v26);
        if (!v25) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v73 = (v25 - 1) & v25;
    int64_t v74 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_22:
    char v28 = *(void **)(*(void *)(v72 + 48) + 8 * v23);
    uint64_t v29 = *v71;
    if (!*v71)
    {
      id v22 = v28;
      goto LABEL_5;
    }
    unint64_t v67 = v23;
    id v30 = v28;
    swift_retain();
    id v31 = objc_msgSend(a4, sel_view);
    float32x4_t v32 = v30;
    objc_msgSend(v30, sel_locationInView_, v31);
    double v34 = v33;
    double v36 = v35;

    id v37 = objc_msgSend(a4, sel_view);
    if (!v37) {
      goto LABEL_31;
    }
    uint64_t v38 = v37;
    type metadata accessor for ARView();
    uint64_t v39 = swift_dynamicCastClass();
    if (!v39)
    {

LABEL_31:
      uint64_t v44 = (uint64_t)v68;
      (*v66)((uint64_t)v68, 1, 1, v10);
LABEL_32:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v44, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_5;
    }
    uint64_t v40 = *(void **)(v39 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v40) {
      goto LABEL_40;
    }
    id v41 = a4;
    id v42 = v40;
    uint64_t v43 = (uint64_t)v68;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v68, v34, v36);

    uint64_t v44 = v43;
    int v45 = (*v64)(v43, 1, v10);
    a4 = v41;
    uint64_t v16 = v65;
    if (v45 == 1) {
      goto LABEL_32;
    }
    int8x16_t v46 = v62;
    (*v61)(v62, v44, v10);
    swift_retain();
    uint64_t v47 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    (*v60)(v63, v46, v10);
    if (v47 == v29)
    {
      swift_release();
      float32x4_t v52 = *v59;
      (*v59)(v63, v10);
      v52(v62, v10);
LABEL_34:

      *(unint64_t *)((char *)v57 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v67;
      BOOL v53 = __OFADD__(v58++, 1);
      int64_t v21 = v74;
      unint64_t v20 = v73;
      if (v53)
      {
        __break(1u);
LABEL_37:
        uint64_t v54 = v72;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v57, v56, v58, v54);
        return;
      }
    }
    else
    {
      float32x4_t v48 = v63;
      uint64_t v49 = CollisionCastHit.entity.getter();
      char v50 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v29, v49);
      swift_release();
      swift_release();
      float32x2_t v51 = *v59;
      (*v59)(v48, v10);
      v51(v62, v10);
      if (v50) {
        goto LABEL_34;
      }
LABEL_5:
      objc_msgSend(a4, sel_ignoreTouch_forEvent_, v28, v70);

      int64_t v21 = v74;
      unint64_t v20 = v73;
    }
  }
  uint64_t v27 = v21 + 4;
  if (v21 + 4 >= v69) {
    goto LABEL_37;
  }
  unint64_t v25 = *(void *)(v16 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v21 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v26 >= v69) {
      goto LABEL_37;
    }
    unint64_t v25 = *(void *)(v16 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  id v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  void (**v59)(char *, uint64_t);
  void (**v60)(char *, char *, uint64_t);
  void (**v61)(char *, uint64_t, uint64_t);
  char *v62;
  char *v63;
  uint64_t (**v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  void (**v66)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v67;
  char *v68;
  int64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;

  uint64_t v70 = a5;
  uint64_t v56 = a2;
  int8x16_t v57 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CollisionCastHit();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  int8x16_t v63 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  float32x4_t v62 = (char *)&v55 - v14;
  uint64_t v72 = a3;
  uint64_t v17 = *(void *)(a3 + 56);
  uint64_t v16 = a3 + 56;
  uint64_t v15 = v17;
  uint64_t v18 = 1 << *(unsigned char *)(v16 - 24);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v15;
  v71 = (uint64_t *)&a4[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
  swift_beginAccess();
  int64_t v21 = 0;
  v68 = v9;
  int64_t v69 = (unint64_t)(v18 + 63) >> 6;
  float32x4_t v64 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  uint64_t v65 = v16;
  float32x2_t v60 = (void (**)(char *, char *, uint64_t))(v11 + 16);
  int8x16_t v61 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  uint64_t v58 = 0;
  float32x2_t v59 = (void (**)(char *, uint64_t))(v11 + 8);
  long long v66 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  while (1)
  {
    if (v20)
    {
      uint64_t v73 = (v20 - 1) & v20;
      int64_t v74 = v21;
      unint64_t v23 = __clz(__rbit64(v20)) | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v24 >= v69) {
      goto LABEL_37;
    }
    unint64_t v25 = *(void *)(v16 + 8 * v24);
    int64_t v26 = v21 + 1;
    if (!v25)
    {
      int64_t v26 = v21 + 2;
      if (v21 + 2 >= v69) {
        goto LABEL_37;
      }
      unint64_t v25 = *(void *)(v16 + 8 * v26);
      if (!v25)
      {
        int64_t v26 = v21 + 3;
        if (v21 + 3 >= v69) {
          goto LABEL_37;
        }
        unint64_t v25 = *(void *)(v16 + 8 * v26);
        if (!v25) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v73 = (v25 - 1) & v25;
    int64_t v74 = v26;
    unint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_22:
    char v28 = *(void **)(*(void *)(v72 + 48) + 8 * v23);
    uint64_t v29 = *v71;
    if (!*v71)
    {
      id v22 = v28;
      goto LABEL_5;
    }
    unint64_t v67 = v23;
    id v30 = v28;
    swift_retain();
    id v31 = objc_msgSend(a4, sel_view);
    float32x4_t v32 = v30;
    objc_msgSend(v30, sel_locationInView_, v31);
    double v34 = v33;
    double v36 = v35;

    id v37 = objc_msgSend(a4, sel_view);
    if (!v37) {
      goto LABEL_31;
    }
    uint64_t v38 = v37;
    type metadata accessor for ARView();
    uint64_t v39 = swift_dynamicCastClass();
    if (!v39)
    {

LABEL_31:
      uint64_t v44 = (uint64_t)v68;
      (*v66)((uint64_t)v68, 1, 1, v10);
LABEL_32:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v44, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_5;
    }
    uint64_t v40 = *(void **)(v39 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v40) {
      goto LABEL_40;
    }
    id v41 = a4;
    id v42 = v40;
    uint64_t v43 = (uint64_t)v68;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v68, v34, v36);

    uint64_t v44 = v43;
    int v45 = (*v64)(v43, 1, v10);
    a4 = v41;
    uint64_t v16 = v65;
    if (v45 == 1) {
      goto LABEL_32;
    }
    int8x16_t v46 = v62;
    (*v61)(v62, v44, v10);
    swift_retain();
    uint64_t v47 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    (*v60)(v63, v46, v10);
    if (v47 == v29)
    {
      swift_release();
      float32x4_t v52 = *v59;
      (*v59)(v63, v10);
      v52(v62, v10);
LABEL_34:

      *(unint64_t *)((char *)v57 + ((v67 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v67;
      BOOL v53 = __OFADD__(v58++, 1);
      int64_t v21 = v74;
      unint64_t v20 = v73;
      if (v53)
      {
        __break(1u);
LABEL_37:
        uint64_t v54 = v72;
        swift_retain();
        specialized _NativeSet.extractSubset(using:count:)(v57, v56, v58, v54);
        return;
      }
    }
    else
    {
      float32x4_t v48 = v63;
      uint64_t v49 = CollisionCastHit.entity.getter();
      char v50 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v29, v49);
      swift_release();
      swift_release();
      float32x2_t v51 = *v59;
      (*v59)(v48, v10);
      v51(v62, v10);
      if (v50) {
        goto LABEL_34;
      }
LABEL_5:
      objc_msgSend(a4, sel_ignoreTouch_forEvent_, v28, v70);

      int64_t v21 = v74;
      unint64_t v20 = v73;
    }
  }
  uint64_t v27 = v21 + 4;
  if (v21 + 4 >= v69) {
    goto LABEL_37;
  }
  unint64_t v25 = *(void *)(v16 + 8 * v27);
  if (v25)
  {
    int64_t v26 = v21 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v26 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v26 >= v69) {
      goto LABEL_37;
    }
    unint64_t v25 = *(void *)(v16 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_21;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, void *a2, void *a3)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  id v9 = a2;
  id v10 = a3;
  id v11 = v9;
  uint64_t isStackAllocationSafe = (uint64_t)v10;
  uint64_t v13 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v14 = (char *)v24 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v14, 8 * v8);
    uint64_t v15 = (char *)v11;
    id v16 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v8, a1, v15, (uint64_t)v16);
    uint64_t v18 = v17;
    swift_release();

    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v19 = (void *)swift_slowAlloc();
    bzero(v19, 8 * v8);
    unint64_t v20 = (char *)v11;
    id v21 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v19, v8, a1, v20, (uint64_t)v21);
    uint64_t v18 = v22;
    swift_release();

    MEMORY[0x1E4E64DE0](v19, -1, -1);
  }

  return v18;
}

{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t isStackAllocationSafe;
  void *v13;
  char *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  void v24[2];

  v24[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  id v9 = a2;
  id v10 = a3;
  id v11 = v9;
  uint64_t isStackAllocationSafe = (uint64_t)v10;
  uint64_t v13 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v14 = (char *)v24 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v14, 8 * v8);
    uint64_t v15 = (char *)v11;
    id v16 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v8, a1, v15, (uint64_t)v16);
    uint64_t v18 = v17;
    swift_release();

    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v19 = (void *)swift_slowAlloc();
    bzero(v19, 8 * v8);
    unint64_t v20 = (char *)v11;
    id v21 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v19, v8, a1, v20, (uint64_t)v21);
    uint64_t v18 = v22;
    swift_release();

    MEMORY[0x1E4E64DE0](v19, -1, -1);
  }

  return v18;
}

{
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t isStackAllocationSafe;
  void *v13;
  char *v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  void v24[2];

  v24[1] = *MEMORY[0x1E4F143B8];
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  id v9 = a2;
  id v10 = a3;
  id v11 = v9;
  uint64_t isStackAllocationSafe = (uint64_t)v10;
  uint64_t v13 = (void *)isStackAllocationSafe;
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v14 = (char *)v24 - ((8 * v8 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v14, 8 * v8);
    uint64_t v15 = (char *)v11;
    id v16 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v14, v8, a1, v15, (uint64_t)v16);
    uint64_t v18 = v17;
    swift_release();

    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v19 = (void *)swift_slowAlloc();
    bzero(v19, 8 * v8);
    unint64_t v20 = (char *)v11;
    id v21 = v13;
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v19, v8, a1, v20, (uint64_t)v21);
    uint64_t v18 = v22;
    swift_release();

    MEMORY[0x1E4E64DE0](v19, -1, -1);
  }

  return v18;
}

uint64_t specialized Set._Variant.filter(_:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CollisionCastHit();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  float32x2_t v59 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v58 = (char *)v54 - v15;
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v53 = specialized _NativeSet.filter(_:)(a1, a2, a3);
    if (!v3) {
      return v53;
    }
    return v4;
  }
  v54[1] = v3;
  uint64_t v4 = MEMORY[0x1E4FBC870];
  uint64_t v68 = MEMORY[0x1E4FBC870];
  id v16 = a2;
  id v62 = a3;
  uint64_t v17 = __CocoaSet.makeIterator()();
  float32x4_t v64 = (uint64_t *)&v16[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity];
  swift_beginAccess();
  uint64_t v65 = v17;
  uint64_t v18 = __CocoaSet.Iterator.next()();
  if (!v18)
  {
LABEL_32:

    swift_release();
    return v4;
  }
  uint64_t v19 = v18;
  unint64_t v63 = type metadata accessor for UITouch();
  float32x2_t v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v56 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  int8x16_t v57 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v55 = (void (**)(char *, uint64_t))(v12 + 8);
  int8x16_t v61 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  unint64_t v20 = v58;
  while (1)
  {
    uint64_t v66 = v19;
    swift_dynamicCast();
    id v21 = v67;
    uint64_t v22 = *v64;
    if (!*v64) {
      goto LABEL_15;
    }
    swift_retain();
    id v23 = objc_msgSend(v16, sel_view);
    objc_msgSend(v21, sel_locationInView_, v23);
    double v25 = v24;
    double v27 = v26;

    id v28 = objc_msgSend(v16, sel_view);
    if (!v28) {
      goto LABEL_13;
    }
    uint64_t v29 = v28;
    type metadata accessor for ARView();
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {

LABEL_13:
      (*v61)(v10, 1, 1, v11);
LABEL_14:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_15;
    }
    id v31 = *(void **)(result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v31) {
      break;
    }
    id v32 = v31;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v10, v25, v27);

    if ((*v60)(v10, 1, v11) == 1) {
      goto LABEL_14;
    }
    (*v57)(v20, v10, v11);
    swift_retain();
    uint64_t v33 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    double v34 = v59;
    (*v56)(v59, v20, v11);
    if (v33 == v22)
    {
      swift_release();
      uint64_t v40 = *v55;
      (*v55)(v34, v11);
      v40(v20, v11);
LABEL_19:
      id v41 = v67;
      uint64_t v42 = v68;
      unint64_t v43 = *(void *)(v68 + 16);
      if (*(void *)(v68 + 24) <= v43)
      {
        specialized _NativeSet.resize(capacity:)(v43 + 1);
        uint64_t v42 = v68;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v42 + 40));
      uint64_t v44 = v42 + 56;
      uint64_t v45 = -1 << *(unsigned char *)(v42 + 32);
      unint64_t v46 = result & ~v45;
      unint64_t v47 = v46 >> 6;
      if (((-1 << v46) & ~*(void *)(v42 + 56 + 8 * (v46 >> 6))) != 0)
      {
        unint64_t v48 = __clz(__rbit64((-1 << v46) & ~*(void *)(v42 + 56 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v49 = 0;
        unint64_t v50 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v50 && (v49 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v51 = v47 == v50;
          if (v47 == v50) {
            unint64_t v47 = 0;
          }
          v49 |= v51;
          uint64_t v52 = *(void *)(v44 + 8 * v47);
        }
        while (v52 == -1);
        unint64_t v48 = __clz(__rbit64(~v52)) + (v47 << 6);
      }
      *(void *)(v44 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
      *(void *)(*(void *)(v42 + 48) + 8 * v48) = v41;
      ++*(void *)(v42 + 16);
      goto LABEL_16;
    }
    double v35 = v34;
    uint64_t v36 = CollisionCastHit.entity.getter();
    char v37 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v22, v36);
    swift_release();
    swift_release();
    uint64_t v38 = *v55;
    uint64_t v39 = v35;
    unint64_t v20 = v58;
    (*v55)(v39, v11);
    v38(v20, v11);
    if (v37) {
      goto LABEL_19;
    }
LABEL_15:
    objc_msgSend(v16, sel_ignoreTouch_forEvent_, v21, v62);

LABEL_16:
    uint64_t v19 = __CocoaSet.Iterator.next()();
    if (!v19)
    {
      uint64_t v4 = v68;
      goto LABEL_32;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  uint64_t result;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t);
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  void v54[2];
  void (**v55)(char *, uint64_t);
  void (**v56)(char *, char *, uint64_t);
  void (**v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  unsigned int (**v60)(char *, uint64_t, uint64_t);
  void (**v61)(char *, uint64_t, uint64_t, uint64_t);
  id v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;

  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CollisionCastHit();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  float32x2_t v59 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v58 = (char *)v54 - v15;
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v53 = specialized _NativeSet.filter(_:)(a1, a2, a3);
    if (!v3) {
      return v53;
    }
    return v4;
  }
  v54[1] = v3;
  uint64_t v4 = MEMORY[0x1E4FBC870];
  uint64_t v68 = MEMORY[0x1E4FBC870];
  id v16 = a2;
  id v62 = a3;
  uint64_t v17 = __CocoaSet.makeIterator()();
  float32x4_t v64 = (uint64_t *)&v16[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
  swift_beginAccess();
  uint64_t v65 = v17;
  uint64_t v18 = __CocoaSet.Iterator.next()();
  if (!v18)
  {
LABEL_32:

    swift_release();
    return v4;
  }
  uint64_t v19 = v18;
  unint64_t v63 = type metadata accessor for UITouch();
  float32x2_t v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v56 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  int8x16_t v57 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v55 = (void (**)(char *, uint64_t))(v12 + 8);
  int8x16_t v61 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  unint64_t v20 = v58;
  while (1)
  {
    uint64_t v66 = v19;
    swift_dynamicCast();
    id v21 = v67;
    uint64_t v22 = *v64;
    if (!*v64) {
      goto LABEL_15;
    }
    swift_retain();
    id v23 = objc_msgSend(v16, sel_view);
    objc_msgSend(v21, sel_locationInView_, v23);
    double v25 = v24;
    double v27 = v26;

    id v28 = objc_msgSend(v16, sel_view);
    if (!v28) {
      goto LABEL_13;
    }
    uint64_t v29 = v28;
    type metadata accessor for ARView();
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {

LABEL_13:
      (*v61)(v10, 1, 1, v11);
LABEL_14:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_15;
    }
    id v31 = *(void **)(result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v31) {
      break;
    }
    id v32 = v31;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v10, v25, v27);

    if ((*v60)(v10, 1, v11) == 1) {
      goto LABEL_14;
    }
    (*v57)(v20, v10, v11);
    swift_retain();
    uint64_t v33 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    double v34 = v59;
    (*v56)(v59, v20, v11);
    if (v33 == v22)
    {
      swift_release();
      uint64_t v40 = *v55;
      (*v55)(v34, v11);
      v40(v20, v11);
LABEL_19:
      id v41 = v67;
      uint64_t v42 = v68;
      unint64_t v43 = *(void *)(v68 + 16);
      if (*(void *)(v68 + 24) <= v43)
      {
        specialized _NativeSet.resize(capacity:)(v43 + 1);
        uint64_t v42 = v68;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v42 + 40));
      uint64_t v44 = v42 + 56;
      uint64_t v45 = -1 << *(unsigned char *)(v42 + 32);
      unint64_t v46 = result & ~v45;
      unint64_t v47 = v46 >> 6;
      if (((-1 << v46) & ~*(void *)(v42 + 56 + 8 * (v46 >> 6))) != 0)
      {
        unint64_t v48 = __clz(__rbit64((-1 << v46) & ~*(void *)(v42 + 56 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v49 = 0;
        unint64_t v50 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v50 && (v49 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v51 = v47 == v50;
          if (v47 == v50) {
            unint64_t v47 = 0;
          }
          v49 |= v51;
          uint64_t v52 = *(void *)(v44 + 8 * v47);
        }
        while (v52 == -1);
        unint64_t v48 = __clz(__rbit64(~v52)) + (v47 << 6);
      }
      *(void *)(v44 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
      *(void *)(*(void *)(v42 + 48) + 8 * v48) = v41;
      ++*(void *)(v42 + 16);
      goto LABEL_16;
    }
    double v35 = v34;
    uint64_t v36 = CollisionCastHit.entity.getter();
    char v37 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v22, v36);
    swift_release();
    swift_release();
    uint64_t v38 = *v55;
    uint64_t v39 = v35;
    unint64_t v20 = v58;
    (*v55)(v39, v11);
    v38(v20, v11);
    if (v37) {
      goto LABEL_19;
    }
LABEL_15:
    objc_msgSend(v16, sel_ignoreTouch_forEvent_, v21, v62);

LABEL_16:
    uint64_t v19 = __CocoaSet.Iterator.next()();
    if (!v19)
    {
      uint64_t v4 = v68;
      goto LABEL_32;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  id v28;
  void *v29;
  uint64_t result;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t);
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  void v54[2];
  void (**v55)(char *, uint64_t);
  void (**v56)(char *, char *, uint64_t);
  void (**v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  unsigned int (**v60)(char *, uint64_t, uint64_t);
  void (**v61)(char *, uint64_t, uint64_t, uint64_t);
  id v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;

  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for CollisionCastHit();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  float32x2_t v59 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v58 = (char *)v54 - v15;
  if ((a1 & 0xC000000000000001) == 0)
  {
    uint64_t v53 = specialized _NativeSet.filter(_:)(a1, a2, a3);
    if (!v3) {
      return v53;
    }
    return v4;
  }
  v54[1] = v3;
  uint64_t v4 = MEMORY[0x1E4FBC870];
  uint64_t v68 = MEMORY[0x1E4FBC870];
  id v16 = a2;
  id v62 = a3;
  uint64_t v17 = __CocoaSet.makeIterator()();
  float32x4_t v64 = (uint64_t *)&v16[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
  swift_beginAccess();
  uint64_t v65 = v17;
  uint64_t v18 = __CocoaSet.Iterator.next()();
  if (!v18)
  {
LABEL_32:

    swift_release();
    return v4;
  }
  uint64_t v19 = v18;
  unint64_t v63 = type metadata accessor for UITouch();
  float32x2_t v60 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v56 = (void (**)(char *, char *, uint64_t))(v12 + 16);
  int8x16_t v57 = (void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v55 = (void (**)(char *, uint64_t))(v12 + 8);
  int8x16_t v61 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  unint64_t v20 = v58;
  while (1)
  {
    uint64_t v66 = v19;
    swift_dynamicCast();
    id v21 = v67;
    uint64_t v22 = *v64;
    if (!*v64) {
      goto LABEL_15;
    }
    swift_retain();
    id v23 = objc_msgSend(v16, sel_view);
    objc_msgSend(v21, sel_locationInView_, v23);
    double v25 = v24;
    double v27 = v26;

    id v28 = objc_msgSend(v16, sel_view);
    if (!v28) {
      goto LABEL_13;
    }
    uint64_t v29 = v28;
    type metadata accessor for ARView();
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {

LABEL_13:
      (*v61)(v10, 1, 1, v11);
LABEL_14:
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
      goto LABEL_15;
    }
    id v31 = *(void **)(result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
    if (!v31) {
      break;
    }
    id v32 = v31;
    RKARSystem.cachedGestureHitTest(_:)((uint64_t)v10, v25, v27);

    if ((*v60)(v10, 1, v11) == 1) {
      goto LABEL_14;
    }
    (*v57)(v20, v10, v11);
    swift_retain();
    uint64_t v33 = CollisionCastHit.entity.getter();
    swift_release();
    swift_release();
    double v34 = v59;
    (*v56)(v59, v20, v11);
    if (v33 == v22)
    {
      swift_release();
      uint64_t v40 = *v55;
      (*v55)(v34, v11);
      v40(v20, v11);
LABEL_19:
      id v41 = v67;
      uint64_t v42 = v68;
      unint64_t v43 = *(void *)(v68 + 16);
      if (*(void *)(v68 + 24) <= v43)
      {
        specialized _NativeSet.resize(capacity:)(v43 + 1);
        uint64_t v42 = v68;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v42 + 40));
      uint64_t v44 = v42 + 56;
      uint64_t v45 = -1 << *(unsigned char *)(v42 + 32);
      unint64_t v46 = result & ~v45;
      unint64_t v47 = v46 >> 6;
      if (((-1 << v46) & ~*(void *)(v42 + 56 + 8 * (v46 >> 6))) != 0)
      {
        unint64_t v48 = __clz(__rbit64((-1 << v46) & ~*(void *)(v42 + 56 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v49 = 0;
        unint64_t v50 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v50 && (v49 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          BOOL v51 = v47 == v50;
          if (v47 == v50) {
            unint64_t v47 = 0;
          }
          v49 |= v51;
          uint64_t v52 = *(void *)(v44 + 8 * v47);
        }
        while (v52 == -1);
        unint64_t v48 = __clz(__rbit64(~v52)) + (v47 << 6);
      }
      *(void *)(v44 + ((v48 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v48;
      *(void *)(*(void *)(v42 + 48) + 8 * v48) = v41;
      ++*(void *)(v42 + 16);
      goto LABEL_16;
    }
    double v35 = v34;
    uint64_t v36 = CollisionCastHit.entity.getter();
    char v37 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v22, v36);
    swift_release();
    swift_release();
    uint64_t v38 = *v55;
    uint64_t v39 = v35;
    unint64_t v20 = v58;
    (*v55)(v39, v11);
    v38(v20, v11);
    if (v37) {
      goto LABEL_19;
    }
LABEL_15:
    objc_msgSend(v16, sel_ignoreTouch_forEvent_, v21, v62);

LABEL_16:
    uint64_t v19 = __CocoaSet.Iterator.next()();
    if (!v19)
    {
      uint64_t v4 = v68;
      goto LABEL_32;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t outlined init with take of simd_float4x4?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for simd_float4x4?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double specialized simd_float4x4.init(translation:rotation:scale:)(double a1, float32x4_t a2)
{
  double v3 = simd_matrix4x4(a2);
  simd_float4x4.scale(_:)();
  SIMD4<>._xyz.getter();
  SIMD4<>._xyz.setter();
  return v3;
}

void specialized EntityTranslationGestureRecognizer.touchesMoved(_:with:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  unsigned int v7 = (char *)&v59 - v6;
  id v8 = objc_msgSend(v0, sel_view);
  objc_msgSend(v1, sel_locationInView_, v8);
  long long v64 = v10;
  long long v65 = v9;

  if ((uint64_t)objc_msgSend(v1, sel_numberOfTouches) >= 1)
  {
    uint64_t v11 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
    uint64_t v12 = *(unsigned int *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight];
    v72[0] = v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight + 4];
    specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v12 | ((unint64_t)v72[0] << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v66);
    outlined init with take of simd_float4x4?((uint64_t)v66, (uint64_t)v72);
    if ((v74 & 1) == 0)
    {
      uint64_t v13 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation];
      if ((v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingWorldLocation + 16] & 1) == 0)
      {
        v60.i64[0] = *(void *)v13;
        v14.i64[0] = v60.i64[0];
        v14.i64[1] = *((void *)v13 + 1);
        float32x4_t v61 = v14;
        float32x4_t v62 = v73;
        id v15 = objc_msgSend(v1, sel_view);
        if (v15)
        {
          id v16 = v15;
          type metadata accessor for ARView();
          if (swift_dynamicCastClass()
            && (uint64_t v17 = *(unsigned int *)v11,
                LOBYTE(v68[0]) = v11[4],
                specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v17 | ((unint64_t)LOBYTE(v68[0]) << 32), &OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity, v67), outlined init with take of simd_float4x4?((uint64_t)v67, (uint64_t)v68), (v71 & 1) == 0))
          {
            uint64_t v18 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, *(double *)&v65, *(double *)&v64, *(double *)v68, (float32x4_t)v68[1], *(double *)&v69, v70);
            uint64_t v20 = v19;
            char v22 = v21;

            if ((v22 & 1) == 0)
            {
              float32x4_t v25 = v61;
              v25.i32[0] = v60.i32[0];
              v24.i64[0] = v18;
              float32x4_t v59 = v25;
              float32x4_t v60 = v24;
              *(float32x2_t *)v23.f32 = vsub_f32(*(float32x2_t *)v25.f32, (float32x2_t)v18);
              float v26 = v61.f32[2];
              v23.f32[2] = v61.f32[2] - *(float *)&v20;
              float32x4_t v61 = v23;
              specialized SIMD.subscript.getter((__n128)xmmword_1E2ABE430, COERCE_DOUBLE(2));
              float32x4_t v28 = vmulq_f32(v61, v27);
              float32x4_t v29 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1)));
              float32x4_t v30 = vmulq_laneq_f32(v29, v27, 2);
              *(float32x2_t *)v27.f32 = vsub_f32(*(float32x2_t *)v59.f32, vmul_n_f32(*(float32x2_t *)v27.f32, v29.f32[0]));
              v29.i64[1] = v60.i64[1];
              *(float32x2_t *)v29.f32 = vsub_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v27.f32);
              v27.f32[2] = v26 - v30.f32[0];
              v27.i32[3] = 0;
              v30.f32[0] = *(float *)&v20 - (float)(v26 - v30.f32[0]);
              float32x4_t v60 = v30;
              float32x4_t v61 = v29;
              v29.i64[1] = v30.u32[0];
              float32x4_t v62 = v29;
              id v31 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastWorldLocation];
              *(void *)id v31 = v18;
              *((void *)v31 + 1) = v20;
              v31[16] = 0;
              *(float32x4_t *)uint64_t v13 = v27;
              unsigned char v13[16] = 0;
              id v32 = (float32x2_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation];
              if ((v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastTranslation + 16] & 1) == 0
                && (v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime + 8] & 1) == 0)
              {
                double v33 = *(double *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime];
                float32x2_t v34 = *v32;
                *(float32x2_t *)v59.f32 = v32[1];
                Date.init()();
                static Date.now.getter();
                Date.timeIntervalSince(_:)();
                double v36 = v35;
                char v37 = *(void (**)(char *, uint64_t))(v63 + 8);
                v37(v5, v2);
                v37(v7, v2);
                double v39 = v36 - v33;
                if (v36 - v33 > 2.22044605e-16)
                {
                  *(float *)&double v39 = v39;
                  *(float32x2_t *)v38.f32 = vdiv_f32(vsub_f32(*(float32x2_t *)v61.f32, v34), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v39, 0));
                  v38.f32[2] = (float)(v60.f32[0] - COERCE_FLOAT(vdupq_n_s64(*(unint64_t *)&v59).i32[2]))
                             / *(float *)&v39;
                  float32x4_t v40 = *(float32x4_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity];
                  float32x4_t v41 = vsubq_f32(v38, v40);
                  __asm { FMOV            V2.4S, #0.25 }
                  *(float32x4_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_velocity] = vmlaq_f32(v40, _Q2, v41);
                }
              }
              Date.init()();
              static Date.now.getter();
              Date.timeIntervalSince(_:)();
              uint64_t v48 = v47;
              char v49 = *(void (**)(char *, uint64_t))(v63 + 8);
              v49(v5, v2);
              v49(v7, v2);
              unint64_t v50 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastFrameTime];
              *(void *)unint64_t v50 = v48;
              v50[8] = 0;
              *(float32x4_t *)v32->f32 = v62;
              v32[2].i8[0] = 0;
              BOOL v51 = &v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation];
              uint64_t v52 = v64;
              *(void *)BOOL v51 = v65;
              *((void *)v51 + 1) = v52;
              v51[16] = 0;
              uint64_t v53 = OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun;
              if (v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_hasBegun] == 1)
              {
                objc_msgSend(v1, sel_setState_, 2);
              }
              else
              {
                float32x2_t v54 = vmul_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v61.f32);
                float v55 = (float)(v60.f32[0] * v60.f32[0]) + vaddv_f32(v54);
                if (one-time initialization token for translationBeginWorldThresholdSq != -1) {
                  swift_once();
                }
                v54.i32[0] = static EntityTranslationGestureRecognizer.Constants.translationBeginWorldThresholdSq;
                if (*(float *)&static EntityTranslationGestureRecognizer.Constants.translationBeginWorldThresholdSq < v55) {
                  goto LABEL_23;
                }
                if ((v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation + 16] & 1) == 0)
                {
                  *(void *)&v56.f64[0] = v65;
                  *(void *)&v56.f64[1] = v64;
                  float32x2_t v57 = vcvt_f32_f64(vsubq_f64(v56, *(float64x2_t *)&v1[OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_startingScreenLocation]));
                  float32x2_t v54 = vmul_f32(v57, v57);
                  float v58 = vaddv_f32(v54);
                  if (one-time initialization token for translationBeginScreenThresholdSq != -1) {
                    swift_once();
                  }
                  v54.i32[0] = static EntityTranslationGestureRecognizer.Constants.translationBeginScreenThresholdSq;
                  if (*(float *)&static EntityTranslationGestureRecognizer.Constants.translationBeginScreenThresholdSq < v58)
                  {
LABEL_23:
                    objc_msgSend(v1, sel_setState_, 1, *(double *)&v54);
                    v1[v53] = 1;
                  }
                }
              }
            }
          }
          else
          {
          }
        }
      }
    }
  }
}

uint64_t type metadata accessor for EntityTranslationGestureRecognizer()
{
  return self;
}

uint64_t sub_1E2A44880@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t method lookup function for EntityTranslationGestureRecognizer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EntityTranslationGestureRecognizer);
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.entity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.entity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.entity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.translation(in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.setTranslation(_:in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.velocity(in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of EntityTranslationGestureRecognizer.location(in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0))();
}

double simd_matrix4x4(float32x4_t a1)
{
  _S3 = a1.i32[1];
  _S5 = a1.i32[2];
  __asm { FMLS            S1, S5, V0.S[2] }
  _S7 = a1.i32[3];
  __asm { FMLA            S1, S7, V0.S[3] }
  float v10 = vmlas_n_f32(vmuls_lane_f32(a1.f32[2], a1, 3), a1.f32[1], a1.f32[0]);
  LODWORD(v11) = _S1;
  *((float *)&v11 + 1) = v10 + v10;
  __asm
  {
    FMLA            S6, S3, V0.S[1]
    FMLA            S6, S7, V0.S[3]
    FMLS            S6, S0, V0.S[0]
    FMLA            S18, S5, V0.S[1]
    FMLA            S17, S0, V0.S[2]
    FMLA            S16, S5, V0.S[1]
    FMLA            S7, S5, V0.S[2]
    FMLS            S7, S0, V0.S[0]
    FMLS            S7, S3, V0.S[1]
  }
  return v11;
}

unint64_t type metadata accessor for UITouch()
{
  unint64_t result = lazy cache variable for type metadata for UITouch;
  if (!lazy cache variable for type metadata for UITouch)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  }
  return result;
}

uint64_t outlined consume of Set<UITouch>.Iterator._Variant()
{
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double TextComponent.edgeInsets.getter()
{
  TextComponent.coreEdgeInsets.getter();
  double v1 = v0;
  TextComponent.coreEdgeInsets.getter();
  TextComponent.coreEdgeInsets.getter();
  TextComponent.coreEdgeInsets.getter();
  return v1;
}

double key path getter for TextComponent.edgeInsets : TextComponent@<D0>(double *a1@<X8>)
{
  TextComponent.coreEdgeInsets.getter();
  double v3 = v2;
  TextComponent.coreEdgeInsets.getter();
  double v5 = v4;
  TextComponent.coreEdgeInsets.getter();
  double v7 = v6;
  TextComponent.coreEdgeInsets.getter();
  double result = v8;
  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
  a1[3] = v8;
  return result;
}

uint64_t key path setter for TextComponent.edgeInsets : TextComponent(double *a1)
{
  double v1 = a1[1];
  double v2 = a1[2];
  double v3 = a1[3];
  float v4 = *a1;
  double v5 = (void (*)(unsigned char *, void))TextComponent.coreEdgeInsets.modify();
  *float v6 = v4;
  v5(v14, 0);
  double v7 = (void (*)(unsigned char *, void))TextComponent.coreEdgeInsets.modify();
  *(float *)&double v1 = v1;
  *(_DWORD *)(v8 + 4) = LODWORD(v1);
  v7(v14, 0);
  long long v9 = (void (*)(unsigned char *, void))TextComponent.coreEdgeInsets.modify();
  *(float *)&double v1 = v2;
  *(_DWORD *)(v10 + 8) = LODWORD(v1);
  v9(v14, 0);
  double v11 = (uint64_t (*)(unsigned char *, void))TextComponent.coreEdgeInsets.modify();
  *(float *)&double v1 = v3;
  *(_DWORD *)(v12 + 12) = LODWORD(v1);
  return v11(v14, 0);
}

uint64_t TextComponent.edgeInsets.setter(double a1, double a2, double a3, double a4)
{
  float v7 = a1;
  uint64_t v8 = (void (*)(unsigned char *, void))TextComponent.coreEdgeInsets.modify();
  *long long v9 = v7;
  v8(v17, 0);
  uint64_t v10 = (void (*)(unsigned char *, void))TextComponent.coreEdgeInsets.modify();
  *(float *)&a2 = a2;
  *(_DWORD *)(v11 + 4) = LODWORD(a2);
  v10(v17, 0);
  uint64_t v12 = (void (*)(unsigned char *, void))TextComponent.coreEdgeInsets.modify();
  *(float *)&a3 = a3;
  *(_DWORD *)(v13 + 8) = LODWORD(a3);
  v12(v17, 0);
  float32x4_t v14 = (uint64_t (*)(unsigned char *, void))TextComponent.coreEdgeInsets.modify();
  *(float *)&a4 = a4;
  *(_DWORD *)(v15 + 12) = LODWORD(a4);
  return v14(v17, 0);
}

void (*TextComponent.edgeInsets.modify(double **a1))(uint64_t a1)
{
  double v3 = (double *)malloc(0x48uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  TextComponent.coreEdgeInsets.getter();
  double v5 = v4;
  TextComponent.coreEdgeInsets.getter();
  double v7 = v6;
  TextComponent.coreEdgeInsets.getter();
  double v9 = v8;
  TextComponent.coreEdgeInsets.getter();
  *double v3 = v5;
  v3[1] = v7;
  v3[2] = v9;
  v3[3] = v10;
  return TextComponent.edgeInsets.modify;
}

void TextComponent.edgeInsets.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)a1 + 32;
  double v3 = *(double *)(*(void *)a1 + 24);
  float v4 = **(double **)a1;
  float v5 = *(double *)(*(void *)a1 + 8);
  float v6 = *(double *)(*(void *)a1 + 16);
  double v7 = (void (*)(uint64_t, void))TextComponent.coreEdgeInsets.modify();
  *float v8 = v4;
  v7(v2, 0);
  double v9 = (void (*)(uint64_t, void))TextComponent.coreEdgeInsets.modify();
  *(float *)(v10 + 4) = v5;
  v9(v2, 0);
  uint64_t v11 = (void (*)(uint64_t, void))TextComponent.coreEdgeInsets.modify();
  *(float *)(v12 + 8) = v6;
  v11(v2, 0);
  uint64_t v13 = (void (*)(uint64_t, void))TextComponent.coreEdgeInsets.modify();
  *(float *)&double v3 = v3;
  *(_DWORD *)(v14 + 12) = LODWORD(v3);
  v13(v2, 0);

  free(v1);
}

uint64_t TextComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v34[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  float v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  float v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TextComponent();
  MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1E2ABE4B0;
  *(void *)(v12 + 32) = 1702521203;
  *(void *)(v12 + 40) = 0xE400000000000000;
  TextComponent.size.getter();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  type metadata accessor for CGSize(0);
  *(void *)(v12 + 48) = v14;
  *(void *)(v12 + 56) = v16;
  *(void *)(v12 + 72) = v17;
  *(void *)(v12 + 80) = 1954047348;
  *(void *)(v12 + 88) = 0xE400000000000000;
  *(void *)(v12 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 96));
  TextComponent.text.getter();
  *(void *)(v12 + 128) = 0x756F72676B636162;
  *(void *)(v12 + 136) = 0xEF726F6C6F43646ELL;
  uint64_t v18 = TextComponent.backgroundColor.getter();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGColorRef?);
  *(void *)(v12 + 144) = v18;
  *(void *)(v12 + 168) = v19;
  strcpy((char *)(v12 + 176), "cornerRadius");
  *(unsigned char *)(v12 + 189) = 0;
  *(_WORD *)(v12 + 190) = -5120;
  TextComponent.cornerRadius.getter();
  uint64_t v20 = MEMORY[0x1E4FBB470];
  *(_DWORD *)(v12 + 192) = v21;
  *(void *)(v12 + 216) = v20;
  *(void *)(v12 + 224) = 0x65736E4965676465;
  *(void *)(v12 + 232) = 0xEA00000000007374;
  TextComponent.coreEdgeInsets.getter();
  double v23 = v22;
  TextComponent.coreEdgeInsets.getter();
  double v25 = v24;
  TextComponent.coreEdgeInsets.getter();
  double v27 = v26;
  TextComponent.coreEdgeInsets.getter();
  double v29 = v28;
  type metadata accessor for UIEdgeInsets(0);
  *(void *)(v12 + 264) = v30;
  id v31 = (double *)swift_allocObject();
  *(void *)(v12 + 240) = v31;
  id v31[2] = v23;
  v31[3] = v25;
  v31[4] = v27;
  v31[5] = v29;
  uint64_t v32 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v8, 1, 1, v32);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1E2A453F0()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t static ParticleEmitterComponent.Presets.impact.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  MEMORY[0x1F4188790](v0 - 8);
  v98 = (char *)&v72 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
  uint64_t v96 = *(void *)(v2 - 8);
  uint64_t v97 = v2;
  MEMORY[0x1F4188790](v2);
  v95 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  uint64_t v93 = *(void *)(v4 - 8);
  uint64_t v94 = v4;
  MEMORY[0x1F4188790](v4);
  v92 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  uint64_t v90 = *(void *)(v6 - 8);
  uint64_t v91 = v6;
  MEMORY[0x1F4188790](v6);
  v89 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  uint64_t v86 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87);
  v85 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  uint64_t v83 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  v82 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  v79 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  v76 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  float32x4_t v73 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  float v24 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E4F3ADC0], v17);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x1E4F3AD98], v13);
  ParticleEmitterComponent.birthLocation.setter();
  long long v88 = xmmword_1E2ABE4F0;
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, *MEMORY[0x1E4F3AD28], v75);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*(void (**)(char *, void, uint64_t))(v77 + 104))(v76, *MEMORY[0x1E4F3ADC8], v78);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, void, uint64_t))(v80 + 104))(v79, *MEMORY[0x1E4F3ADA8], v81);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  double v25 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v25(v99, 0);
  float v26 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v26(v99, 0);
  double v27 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v27(v99, 0);
  float v28 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v28(v99, 0);
  double v29 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v29(v99, 0);
  uint64_t v30 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v30(v99, 0);
  id v31 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v31(v99, 0);
  (*(void (**)(char *, void, uint64_t))(v83 + 104))(v82, *MEMORY[0x1E4F3AD48], v84);
  uint64_t v32 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v32(v99, 0);
  double v33 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v33(v99, 0);
  float32x2_t v34 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v34(v99, 0);
  (*(void (**)(char *, void, uint64_t))(v86 + 104))(v85, *MEMORY[0x1E4F3AD68], v87);
  double v35 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v35(v99, 0);
  double v36 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v36(v99, 0);
  char v37 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v37(v99, 0);
  float32x4_t v38 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v38(v99, 0);
  double v39 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v39(v99, 0);
  float32x4_t v40 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v40(v99, 0);
  float32x4_t v41 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v41(v99, 0);
  uint64_t v42 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v42(v99, 0);
  unint64_t v43 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v43(v99, 0);
  uint64_t v44 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v44(v99, 0);
  uint64_t v45 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v45(v99, 0);
  unint64_t v46 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v46(v99, 0);
  uint64_t v47 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v47(v99, 0);
  uint64_t v48 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v48(v99, 0);
  (*(void (**)(char *, void, uint64_t))(v90 + 104))(v89, *MEMORY[0x1E4F3AD30], v91);
  char v49 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v49(v99, 0);
  unint64_t v50 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v50(v99, 0);
  BOOL v51 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v51(v99, 0);
  uint64_t v52 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v52(v99, 0);
  uint64_t v53 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v53(v99, 0);
  float32x2_t v54 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v54(v99, 0);
  (*(void (**)(char *, void, uint64_t))(v93 + 104))(v92, *MEMORY[0x1E4F3AD80], v94);
  float v55 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v55(v99, 0);
  float64x2_t v56 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v56(v99, 0);
  float32x2_t v57 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v57(v99, 0);
  float v58 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v58(v99, 0);
  CGColorCreateGenericRGB(255.0, 248.0, 228.0, 0.26);
  float32x4_t v59 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v59(v99, 0);
  CGColorCreateGenericRGB(134.0, 134.0, 134.0, 0.07);
  float32x4_t v60 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v60(v99, 0);
  float32x4_t v61 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v61(v99, 0);
  float32x4_t v62 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v62(v99, 0);
  uint64_t v63 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v63(v99, 0);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  (*(void (**)(char *, void, uint64_t))(v96 + 104))(v95, *MEMORY[0x1E4F3AD60], v97);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  long long v64 = v98;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v98, v24, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v64, 0, 1, v21);
  long long v65 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v65(v99, 0);
  type metadata accessor for TextureResource();
  uint64_t v66 = (void *)MEMORY[0x1E4E62C20](0xD000000000000010, 0x80000001E2AB8BE0);
  id v67 = objc_msgSend(self, sel_bundleWithIdentifier_, v66);

  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  uint64_t v68 = (void *)textureLoader;
  v99[3] = &type metadata for TextureLoader;
  v99[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v99[0] = v68;
  id v69 = v68;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v99);

  float32x4_t v70 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v70(v99, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
}

unint64_t lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader()
{
  unint64_t result = lazy protocol witness table cache variable for type TextureLoader and conformance TextureLoader;
  if (!lazy protocol witness table cache variable for type TextureLoader and conformance TextureLoader)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureLoader and conformance TextureLoader);
  }
  return result;
}

uint64_t key path setter for EntityScaleGestureRecognizer.entity : EntityScaleGestureRecognizer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = swift_retain();
  EntityScaleGestureRecognizer.entity.willset(v5);
  uint64_t v6 = (void *)(v4 + OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity);
  swift_beginAccess();
  *uint64_t v6 = v2;
  v6[1] = v3;
  return swift_release();
}

id EntityScaleGestureRecognizer.entity.willset(uint64_t a1)
{
  uint64_t v2 = v1;
  id result = objc_msgSend(v2, sel_isEnabled);
  if (result)
  {
    uint64_t v5 = &v2[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
    id result = (id)swift_beginAccess();
    if (*(void *)v5)
    {
      if (a1)
      {
        type metadata accessor for Entity();
        lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
        swift_retain_n();
        char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        id result = (id)swift_release();
        if (v6) {
          return result;
        }
      }
    }
    else if (!a1)
    {
      return result;
    }
    return objc_msgSend(v2, sel_setState_, 5);
  }
  return result;
}

uint64_t EntityScaleGestureRecognizer.entity.getter()
{
  return swift_retain();
}

uint64_t EntityScaleGestureRecognizer.entity.setter(uint64_t a1, uint64_t a2)
{
  EntityScaleGestureRecognizer.entity.willset(a1);
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

void (*EntityScaleGestureRecognizer.entity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity;
  *((void *)v3 + 5) = v1;
  *((void *)v3 + 6) = v4;
  uint64_t v5 = (_OWORD *)(v1 + v4);
  swift_beginAccess();
  *(_OWORD *)(v3 + 24) = *v5;
  swift_retain();
  return EntityScaleGestureRecognizer.entity.modify;
}

void EntityScaleGestureRecognizer.entity.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = (uint64_t *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48));
  if (a2)
  {
    uint64_t v6 = swift_retain();
    EntityScaleGestureRecognizer.entity.willset(v6);
    *uint64_t v5 = v3;
    v5[1] = v4;
    swift_release();
  }
  else
  {
    EntityScaleGestureRecognizer.entity.willset(v3);
    *uint64_t v5 = v3;
    v5[1] = v4;
  }
  swift_release();

  free(v2);
}

void EntityScaleGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, void *a2)
{
  id v4 = v2;
  id v5 = a2;
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized Set._Variant.filter(_:)(v6, v4, v5);

  if (objc_msgSend(v4, sel_numberOfTouches))
  {
    type metadata accessor for UITouch();
    lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UITouch);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_release();
    v8.receiver = v4;
    v8.super_class = (Class)type metadata accessor for EntityScaleGestureRecognizer();
    objc_msgSendSuper2(&v8, sel_touchesBegan_withEvent_, isa, v5);
  }
  else
  {
    swift_release();
    objc_msgSend(v4, sel_setState_, 5);
  }
}

Swift::Bool __swiftcall EntityScaleGestureRecognizer.canPrevent(_:)(UIGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = (uint64_t *)&v2[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v11 = a1;
  swift_retain();
  uint64_t v12 = v10(ObjectType, v5);
  if (!v12)
  {

    swift_release();
LABEL_12:
    v16.receiver = v2;
    v16.super_class = (Class)type metadata accessor for EntityScaleGestureRecognizer();
    unsigned __int8 v14 = [(UIGestureRecognizer *)&v16 canPreventGestureRecognizer:a1];
    return v14 & 1;
  }
  uint64_t v13 = v12;
  swift_retain();
  unsigned __int8 v14 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v13, v8);

  swift_release();
  swift_release_n();
  return v14 & 1;
}

id EntityScaleGestureRecognizer.__allocating_init(target:action:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = *(void *)(v4 - 8);
    MEMORY[0x1F4188790](v6);
    uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = objc_msgSend(objc_allocWithZone(v2), sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v11;
}

id EntityScaleGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v2[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  outlined init with copy of Any?(a1, (uint64_t)v16);
  uint64_t v6 = v17;
  if (v17)
  {
    uint64_t v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v8 = *(void *)(v6 - 8);
    MEMORY[0x1F4188790](v7);
    uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (objc_class *)type metadata accessor for EntityScaleGestureRecognizer();
  v15.receiver = v2;
  v15.super_class = v12;
  id v13 = objc_msgSendSuper2(&v15, sel_initWithTarget_action_, v11, a2);
  swift_unknownObjectRelease();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for Any?);
  return v13;
}

id EntityScaleGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EntityScaleGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void (*protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityScaleGestureRecognizer(void *a1))(void *a1)
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityScaleGestureRecognizer.entity.modify(v2);
  return protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer;
}

uint64_t type metadata accessor for EntityScaleGestureRecognizer()
{
  return self;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E2A47FDC@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t method lookup function for EntityScaleGestureRecognizer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EntityScaleGestureRecognizer);
}

uint64_t dispatch thunk of EntityScaleGestureRecognizer.entity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of EntityScaleGestureRecognizer.entity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of EntityScaleGestureRecognizer.entity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t one-time initialization function for groupActivities()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.groupActivities);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.groupActivities);
  return Logger.init(subsystem:category:)();
}

uint64_t RESyncHandle.__deallocating_deinit()
{
  if (*(void *)(v0 + 16)) {
    RESyncRelease();
  }

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RESyncHandle()
{
  return self;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

Swift::Void __swiftcall RKARSystem.updateCollaborationState()()
{
  uint64_t v1 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
  id v2 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_configuration);
  if (!v2)
  {
LABEL_5:
    id v6 = objc_msgSend(*(id *)(v0 + v1), sel_configuration);
    if (!v6)
    {
      unsigned int v5 = 0;
      goto LABEL_14;
    }
    uint64_t v3 = v6;
    self;
    uint64_t v7 = (void *)swift_dynamicCastObjCClass();
    if (v7)
    {
      id v8 = objc_msgSend(v7, sel_templateConfiguration);
      if (v8)
      {
        uint64_t v9 = v8;
        self;
        uint64_t v10 = (void *)swift_dynamicCastObjCClass();
        if (v10)
        {
          unsigned int v5 = objc_msgSend(v10, sel_isCollaborationEnabled);

          goto LABEL_13;
        }
      }
    }
    unsigned int v5 = 0;
    goto LABEL_13;
  }
  uint64_t v3 = v2;
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {

    goto LABEL_5;
  }
  unsigned int v5 = objc_msgSend(v4, sel_isCollaborationEnabled);
LABEL_13:

LABEL_14:
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted) == 1)
  {
    if ((v5 & 1) == 0)
    {
      RKARSystem.endCollaborativeMapBuilding()();
    }
  }
  else if (v5)
  {
    RKARSystem.startCollaborativeMapBuilding()();
  }
}

Swift::Void __swiftcall RKARSystem.endCollaborativeMapBuilding()()
{
  uint64_t v1 = OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted) == 1)
  {
    uint64_t v2 = v0;
    uint64_t v3 = MEMORY[0x1E4E64ED0](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      if (*(void *)(v3 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();

        uint64_t v5 = dispatch thunk of Scene.synchronizationService.getter();
        swift_release();
        if (v5)
        {
          type metadata accessor for MultipeerConnectivityService();
          uint64_t v6 = swift_dynamicCastClass();
          if (v6)
          {
            MEMORY[0x1E4E63AF0](*(void *)(v6 + 24));
            uint64_t v7 = OBJC_IVAR____TtC10RealityKit10RKARSystem_netSessionObserver;
            if (*(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_netSessionObserver))
            {
              RESyncNetSessionRemoveObserver();
              RERelease();
              *(void *)(v2 + v7) = 0;
            }
            id v8 = (void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers);
            swift_beginAccess();
            *id v8 = MEMORY[0x1E4FBC860];
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            *(unsigned char *)(v2 + v1) = 0;
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void RKARSystem.startCollaborativeMapBuilding()()
{
  uint64_t v1 = OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted) & 1) == 0)
  {
    uint64_t v2 = v0;
    uint64_t v3 = MEMORY[0x1E4E64ED0](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v3)
    {
      uint64_t v4 = (void *)v3;
      if (*(void *)(v3 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();

        uint64_t v5 = dispatch thunk of Scene.synchronizationService.getter();
        swift_release();
        if (v5)
        {
          type metadata accessor for MultipeerConnectivityService();
          uint64_t v6 = swift_dynamicCastClass();
          if (v6)
          {
            MEMORY[0x1E4E63AF0](*(void *)(v6 + 24));
            uint64_t v7 = RESyncNetSessionObserverCreate();
            *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_netSessionObserver) = v7;
            if (v7)
            {
              uint64_t v21 = ARView.PostProcessContext.device.modify;
              uint64_t v22 = 0;
              uint64_t v17 = MEMORY[0x1E4F143A8];
              uint64_t v18 = 1107296256;
              uint64_t v19 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
              uint64_t v20 = &block_descriptor_1;
              id v8 = _Block_copy(&v17);
              swift_release();
              RENetSessionObserverOnStart();
              _Block_release(v8);
              uint64_t v9 = swift_allocObject();
              swift_unknownObjectWeakInit();
              uint64_t v21 = (uint64_t (*)())partial apply for closure #2 in RKARSystem.startCollaborativeMapBuilding();
              uint64_t v22 = v9;
              uint64_t v17 = MEMORY[0x1E4F143A8];
              uint64_t v18 = 1107296256;
              uint64_t v19 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned RENetSessionError) -> ();
              uint64_t v20 = &block_descriptor_10_0;
              uint64_t v10 = _Block_copy(&v17);
              swift_release();
              RENetSessionObserverOnStop();
              _Block_release(v10);
              uint64_t v11 = swift_allocObject();
              swift_unknownObjectWeakInit();
              uint64_t v21 = (uint64_t (*)())partial apply for closure #3 in RKARSystem.startCollaborativeMapBuilding();
              uint64_t v22 = v11;
              uint64_t v17 = MEMORY[0x1E4F143A8];
              uint64_t v18 = 1107296256;
              uint64_t v19 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> ();
              uint64_t v20 = &block_descriptor_14_0;
              uint64_t v12 = _Block_copy(&v17);
              swift_release();
              RENetSessionObserverOnParticipantJoin();
              _Block_release(v12);
              uint64_t v13 = swift_allocObject();
              swift_unknownObjectWeakInit();
              uint64_t v21 = (uint64_t (*)())partial apply for closure #4 in RKARSystem.startCollaborativeMapBuilding();
              uint64_t v22 = v13;
              uint64_t v17 = MEMORY[0x1E4F143A8];
              uint64_t v18 = 1107296256;
              uint64_t v19 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer, @unowned RENetParticipantError) -> ();
              uint64_t v20 = &block_descriptor_18;
              unsigned __int8 v14 = _Block_copy(&v17);
              swift_release();
              RENetSessionObserverOnParticipantLeave();
              _Block_release(v14);
              uint64_t v15 = swift_allocObject();
              swift_unknownObjectWeakInit();
              uint64_t v21 = (uint64_t (*)())partial apply for closure #5 in RKARSystem.startCollaborativeMapBuilding();
              uint64_t v22 = v15;
              uint64_t v17 = MEMORY[0x1E4F143A8];
              uint64_t v18 = 1107296256;
              uint64_t v19 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned UnsafeRawPointer, @unowned UInt32) -> ();
              uint64_t v20 = &block_descriptor_22;
              objc_super v16 = _Block_copy(&v17);
              swift_release();
              RENetSessionObserverOnReceiveUserData();
              _Block_release(v16);
              RESyncNetSessionAddObserver();
            }
            swift_unknownObjectRelease();
            *(unsigned char *)(v2 + v1) = 1;
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void closure #2 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x1E4E64ED0](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    RKARSystem.endCollaborativeMapBuilding()();
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned RENetSessionError) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

void closure #3 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1E4E64ED0](v4);
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    type metadata accessor for REARNetworkParticipant();
    *(void *)(swift_allocObject() + 16) = a2;
    RERetain();
    uint64_t v7 = &v6[OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers];
    uint64_t v8 = swift_beginAccess();
    MEMORY[0x1E4E62CE0](v8);
    if (*(void *)((*(void *)v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v7 & 0xFFFFFFFFFFFFFF8)
                                                                                + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
}

uint64_t closure #4 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1E4E64ED0](v6);
  if (result)
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = (uint64_t *)(result + OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers);
    swift_beginAccess();
    uint64_t v10 = *v9;
    swift_bridgeObjectRetain();

    if ((unint64_t)v10 >> 62) {
      goto LABEL_19;
    }
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v12 = swift_bridgeObjectRetain();
    if (v11)
    {
      while (1)
      {
        unint64_t v4 = v10 & 0xC000000000000001;
        if ((v10 & 0xC000000000000001) != 0) {
          break;
        }
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          if (*(void *)(*(void *)(v10 + 32) + 16) != a2) {
            goto LABEL_7;
          }
          goto LABEL_25;
        }
        __break(1u);
LABEL_30:
        uint64_t v11 = v12;
        if (!v12) {
          goto LABEL_8;
        }
      }
      while (1)
      {
        uint64_t v18 = *(void *)(MEMORY[0x1E4E63150](0, v10) + 16);
        swift_unknownObjectRelease();
        if (v18 == a2) {
          break;
        }
LABEL_7:
        uint64_t v13 = v11 - 1;
        if (v11 == 1) {
          goto LABEL_8;
        }
        uint64_t v14 = 0;
        while (v13 != v14)
        {
          unint64_t v16 = v14 + 1;
          if (v4)
          {
            uint64_t v15 = *(void *)(MEMORY[0x1E4E63150](v16, v10) + 16);
            swift_unknownObjectRelease();
            if (v15 == a2) {
              goto LABEL_16;
            }
          }
          else
          {
            if (v16 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_18;
            }
            if (*(void *)(*(void *)(v10 + 8 * v14 + 40) + 16) == a2)
            {
LABEL_16:
              swift_bridgeObjectRelease();
              uint64_t v17 = v14 + 1;
              goto LABEL_26;
            }
          }
          if (v13 == ++v14) {
            goto LABEL_8;
          }
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        if (v10 < 0) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
        }
        swift_bridgeObjectRetain();
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
        if ((v12 & 0x8000000000000000) == 0) {
          goto LABEL_30;
        }
        __break(1u);
      }
LABEL_25:
      swift_bridgeObjectRelease();
      uint64_t v17 = 0;
LABEL_26:
      specialized Array.remove(at:)(v17);
      swift_release();
    }
    else
    {
LABEL_8:
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer, @unowned RENetParticipantError) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);

  return swift_release();
}

void closure #5 in RKARSystem.startCollaborativeMapBuilding()(int a1, int a2, unsigned char *__src, unsigned int a4, uint64_t a5)
{
  uint64_t v5 = a5 + 16;
  if (a4)
  {
    uint64_t v7 = a4;
    if (a4 <= 0xE)
    {
      uint64_t v10 = specialized Data.InlineData.init(_:)(__src, &__src[a4]);
      unint64_t v11 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v8 = __DataStorage.init(bytes:length:)();
      uint64_t v9 = v8;
      if (a4 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = v7;
        unint64_t v11 = v9 | 0x8000000000000000;
      }
      else
      {
        uint64_t v10 = v7 << 32;
        unint64_t v11 = v8 | 0x4000000000000000;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0xC000000000000000;
  }
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x1E4E64ED0](v5);
  if (v13)
  {
    uint64_t v14 = (char *)v13;
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for NSKeyedUnarchiver);
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARCollaborationData);
    uint64_t v15 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    unint64_t v16 = (void *)v15;
    if (v15)
    {
      objc_msgSend(*(id *)&v14[OBJC_IVAR____TtC10RealityKit10RKARSystem_session], sel_updateWithCollaborationData_, v15);
    }
    outlined consume of Data._Representation(v10, v11);
  }
  else
  {
    outlined consume of Data._Representation(v10, v11);
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned UnsafeRawPointer, @unowned UInt32) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v9(a2, a3, a4, a5);

  return swift_release();
}

uint64_t RKARSystem.sendDataToPeers(_:sendUnreliably:)(void *a1, char a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers);
  swift_beginAccess();
  if ((unint64_t)*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return 0;
    }
  }
  else if (!*(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  uint64_t result = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!result) {
    return 0;
  }
  uint64_t v7 = (void *)result;
  if (!*(void *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
    goto LABEL_14;
  }
  swift_retain();

  uint64_t v8 = dispatch thunk of Scene.synchronizationService.getter();
  swift_release();
  if (!v8) {
    return 0;
  }
  type metadata accessor for MultipeerConnectivityService();
  uint64_t v9 = swift_dynamicCastClass();
  BOOL v10 = v9 != 0;
  if (!v9)
  {
LABEL_9:
    swift_unknownObjectRelease();
    return v10;
  }
  uint64_t v11 = MEMORY[0x1E4E63AF0](*(void *)(v9 + 24));
  uint64_t v12 = *v5;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(unsigned char *)(v13 + 24) = a2 & 1;
    *(void *)(v13 + 32) = v11;
    *(void *)(v13 + 40) = a1;
    swift_bridgeObjectRetain();
    id v14 = a1;
    dispatch thunk of __Engine.asyncOnEngineQueue(_:)();
    swift_release();
    swift_release();
    goto LABEL_9;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t closure #1 in RKARSystem.sendDataToPeers(_:sendUnreliably:)(unint64_t a1, char a2, uint64_t a3, void *a4)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v7 = result;
    if (!result) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_13;
    }
  }
  if (v7 < 1)
  {
    __break(1u);
    return result;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      MEMORY[0x1E4E63150](i, a1);
    }
    else {
      swift_retain();
    }
    uint64_t PeerID = RESyncParticipantGetPeerID();
    id v11 = a4;
    id v12 = objc_msgSend(v11, sel_bytes);
    id v13 = objc_msgSend(v11, sel_length);
    if (a2) {
      MEMORY[0x1E4E63C00](a3, PeerID, v12, v13, 3);
    }
    else {
      MEMORY[0x1E4E63BF0](a3, PeerID, v12, v13, 3);
    }
    swift_release();
  }
LABEL_13:

  return swift_bridgeObjectRelease();
}

uint64_t REARNetworkParticipant.__deallocating_deinit()
{
  RERelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REARNetworkParticipant()
{
  return self;
}

uint64_t sub_1E2A49308()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in RKARSystem.sendDataToPeers(_:sendUnreliably:)()
{
  return closure #1 in RKARSystem.sendDataToPeers(_:sendUnreliably:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_1E2A49370()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #2 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2)
{
  closure #2 in RKARSystem.startCollaborativeMapBuilding()(a1, a2, v2);
}

void partial apply for closure #3 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2)
{
  closure #3 in RKARSystem.startCollaborativeMapBuilding()(a1, a2, v2);
}

uint64_t partial apply for closure #4 in RKARSystem.startCollaborativeMapBuilding()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #4 in RKARSystem.startCollaborativeMapBuilding()(a1, a2, a3, v3);
}

void partial apply for closure #5 in RKARSystem.startCollaborativeMapBuilding()(int a1, int a2, unsigned char *a3, unsigned int a4)
{
  closure #5 in RKARSystem.startCollaborativeMapBuilding()(a1, a2, a3, a4, v4);
}

uint64_t specialized Data.InlineData.init(_:)(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

Swift::Void __swiftcall ARView.didMoveToWindow()()
{
  v18.receiver = v0;
  v18.super_class = (Class)type metadata accessor for ARView();
  objc_msgSendSuper2(&v18, sel_didMoveToWindow);
  id v1 = *(id *)&v0[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v1, sel_setFrame_);

  id v2 = objc_msgSend(v0, sel_window);
  if (v2 && (v3 = v2, id v4 = objc_msgSend(v2, sel_windowScene), v3, v4))
  {
    uint64_t v5 = (uint64_t)objc_msgSend(v4, sel_interfaceOrientation);
  }
  else
  {
    uint64_t v5 = 1;
  }
  *(void *)&v0[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = v5;
  *(void *)&v0[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = v5;
  id v6 = objc_msgSend(self, sel_defaultCenter);
  id v7 = objc_msgSend(v0, sel_window);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = (void *)MEMORY[0x1E4E62C20](0xD00000000000001ELL, 0x80000001E2AB8D40);
    objc_msgSend(v6, sel_addObserver_selector_name_object_, v0, sel_windowWillRotateWithNotification_, v9, v8);

    BOOL v10 = (void *)MEMORY[0x1E4E62C20](0xD000000000000027, 0x80000001E2AB8D60);
    objc_msgSend(v6, sel_addObserver_selector_name_object_, v0, sel_windowWillAnimateRotationWithNotification_, v10, v8);

    id v11 = (void *)MEMORY[0x1E4E62C20](0xD00000000000001DLL, 0x80000001E2AB8D90);
    id v12 = v8;
    objc_msgSend(v6, sel_addObserver_selector_name_object_, v0, sel_windowDidRotateWithNotification_, v11, v12);

    id v13 = v12;
  }
  else
  {
    id v14 = (void *)MEMORY[0x1E4E62C20](0xD00000000000001ELL, 0x80000001E2AB8D40);
    id v15 = objc_msgSend(v0, sel_window);
    objc_msgSend(v6, sel_removeObserver_name_object_, v0, v14, v15);

    unint64_t v16 = (void *)MEMORY[0x1E4E62C20](0xD000000000000027, 0x80000001E2AB8D60);
    id v17 = objc_msgSend(v0, sel_window);
    objc_msgSend(v6, sel_removeObserver_name_object_, v0, v16, v17);

    id v12 = (id)MEMORY[0x1E4E62C20](0xD00000000000001DLL, 0x80000001E2AB8D90);
    id v13 = objc_msgSend(v0, sel_window);
    objc_msgSend(v6, sel_removeObserver_name_object_, v0, v12, v13);
  }
}

Swift::Void __swiftcall ARView.windowWillRotate(notification:)(NSNotification notification)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for __AssetRef();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([(objc_class *)notification.super.isa object])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v44 = 0u;
    long long v45 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v44, (uint64_t)v43);
  if (!v43[3])
  {
    id v17 = v43;
LABEL_13:
    outlined destroy of Any?((uint64_t)v17);
    return;
  }
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for UIWindow);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  id v8 = v41;
  id v9 = objc_msgSend(v1, sel_window);
  if (!v9)
  {

    goto LABEL_15;
  }
  BOOL v10 = v9;
  id v8 = v8;
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
LABEL_15:

    return;
  }
  id v12 = [(objc_class *)notification.super.isa userInfo];
  if (!v12)
  {
    long long v44 = 0u;
    long long v45 = 0u;
LABEL_23:

    id v17 = (id *)&v44;
    goto LABEL_13;
  }
  id v13 = v12;
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id v41 = (id)0xD000000000000021;
  unint64_t v42 = 0x80000001E2AB8DD0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v14 + 16) && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v43), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v15, (uint64_t)&v44);
  }
  else
  {
    long long v44 = 0u;
    long long v45 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v43);
  if (!*((void *)&v45 + 1)) {
    goto LABEL_23;
  }
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_15;
  }
  id v18 = v43[0];
  id v19 = objc_msgSend(v43[0], sel_integerValue);
  uint64_t v20 = OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation;
  id v21 = *(id *)&v2[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation];
  if (v21 == v19)
  {

    return;
  }
  *(void *)&v2[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = v21;
  *(void *)&v2[v20] = v19;
  uint64_t v22 = *(void **)&v2[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (!v22)
  {
    __break(1u);
    return;
  }
  id v23 = v22;
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();

  float v24 = &v2[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation];
  swift_beginAccess();
  if ((*v24 & 1) != 0 || (id v25 = objc_msgSend(v2, sel_window)) == 0)
  {

    goto LABEL_15;
  }
  float v26 = v25;
  objc_msgSend(v2, sel_frame);
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  CGFloat v32 = v31;
  CGFloat v34 = v33;
  objc_msgSend(v26, sel_bounds);
  v47.origin.x = v35;
  v47.origin.y = v36;
  v47.size.width = v37;
  v47.size.height = v38;
  v46.origin.x = v28;
  v46.origin.y = v30;
  v46.size.width = v32;
  v46.size.height = v34;
  BOOL v39 = CGRectEqualToRect(v46, v47);

  if (v39) {
    v2[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 1;
  }
}

Swift::Void __swiftcall ARView.updateWindowRotation()()
{
  uint64_t v1 = OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation;
  if (v0[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] == 1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of RERenderManager.waitUntilScheduled()();
    id v2 = *(void **)&v0[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
    v8[0] = 0x3FF0000000000000;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0x3FF0000000000000;
    v8[4] = 0;
    v8[5] = 0;
    objc_msgSend(v2, sel_setTransform_, v8);
    objc_msgSend(v0, sel_bounds);
    double v4 = v3;
    double v6 = v5;
    objc_msgSend(v0, sel_contentScaleFactor);
    ARView.resizeDrawable(size:scaleFactor:)(v4, v6, v7);
    swift_release();
    v0[v1] = 0;
  }
}

uint64_t specialized ARView.windowWillAnimateRotation(notification:)()
{
  uint64_t v1 = v0;
  id v2 = &v0[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation];
  uint64_t result = swift_beginAccess();
  if ((*v2 & 1) == 0 && v1[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] == 1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of RERenderManager.waitUntilScheduled()();
    uint64_t v4 = OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation;
    float v5 = (float)ARCameraToDisplayRotation();
    uint64_t v6 = ARCameraToDisplayRotation();
    float v7 = SPAngleMakeWithDegrees((float)((float)v6 - v5));
    if (fabsf(fabsf(v7) + -3.1416) <= 0.01)
    {
      uint64_t v29 = *(void *)&v1[v4];
      BOOL v30 = v29 == 4 || v29 == 1;
      float v31 = -0.00000023842;
      if (v30) {
        float v31 = 0.00000023842;
      }
      if (v7 >= 0.0) {
        float v31 = -v31;
      }
      float v7 = v31 + v7;
      id v22 = *(id *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
      objc_msgSend(v1, sel_bounds);
      double MidX = CGRectGetMidX(v44);
      objc_msgSend(v1, sel_bounds);
    }
    else
    {
      uint64_t v8 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView], sel_bounds);
      CGFloat v10 = v9;
      CGFloat v12 = v11;
      CGFloat v14 = v13;
      CGFloat v16 = v15;
      objc_msgSend(v1, sel_bounds);
      v45.origin.x = v17;
      v45.origin.y = v18;
      v45.size.width = v19;
      v45.size.height = v20;
      v42.origin.x = v10;
      v42.origin.y = v12;
      v42.size.width = v14;
      v42.size.height = v16;
      BOOL v21 = CGRectEqualToRect(v42, v45);
      id v22 = *(id *)&v1[v8];
      objc_msgSend(v1, sel_bounds);
      if (v21)
      {
        double MidX = CGRectGetMidY(*(CGRect *)&v23);
        objc_msgSend(v1, sel_bounds);
        double MidY = CGRectGetMidX(v43);
LABEL_16:
        objc_msgSend(v22, sel_setCenter_, MidX, MidY);

        CGFloat v36 = *(void **)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
        CGAffineTransformMakeRotation(&v41, v7);
        long long v39 = *(_OWORD *)&v41.c;
        long long v40 = *(_OWORD *)&v41.a;
        long long v38 = *(_OWORD *)&v41.tx;
        id v37 = v36;
        *(_OWORD *)&v41.a = v40;
        *(_OWORD *)&v41.c = v39;
        *(_OWORD *)&v41.tx = v38;
        objc_msgSend(v37, sel_setTransform_, &v41);

        return swift_release();
      }
      double MidX = CGRectGetMidX(*(CGRect *)&v23);
      objc_msgSend(v1, sel_bounds);
    }
    double MidY = CGRectGetMidY(*(CGRect *)&v32);
    goto LABEL_16;
  }
  return result;
}

double SPAngleMakeWithDegrees(double a1)
{
  return a1 / 180.0 * 3.14159265;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t static MeshResource.generateText(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:)()
{
  return static TextMeshResource.makeMeshResource(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentDensity:)();
}

uint64_t static MeshResource.__generateText(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentCount:)()
{
  return static TextMeshResource.makeMeshResource(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentDensity:)();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.description.getter()
{
  if ((SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter() & 1) == 0) {
    return 0;
  }
  uint64_t v0 = *(void *)(SpatialTrackingSession.UnavailableCapabilities.anchor.getter() + 16);
  swift_bridgeObjectRelease();
  if (v0)
  {
    unint64_t v43 = 0x203A726F68636E61;
    unint64_t v44 = 0xE90000000000005BLL;
    uint64_t v1 = SpatialTrackingSession.UnavailableCapabilities.anchor.getter();
    uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh57C23UnavailableCapabilitiesV0A3KitE11descriptionSSvgSSAC13i3V16jK54Vcfu_33_0e2f2957bef5a9ec78f2a038ea1e8673AKSSTf3nnnpk_nTf1cn_nTm(v1, (uint64_t)v42, MEMORY[0x1E4F3AC40], (uint64_t (*)(uint64_t))specialized Set.startIndex.getter, MEMORY[0x1E4F3AC38], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))specialized _NativeSet.index(after:));
    swift_bridgeObjectRelease();
    uint64_t v41 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v3 = BidirectionalCollection<>.joined(separator:)();
    float v5 = v4;
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = v3;
    v6._object = v5;
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 93;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    unint64_t v8 = v43;
    unint64_t v9 = v44;
    CGFloat v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    if (v12 >= v11 >> 1) {
      CGFloat v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v10);
    }
    v10[2] = v12 + 1;
    double v13 = &v10[2 * v12];
    v13[4] = v8;
    v13[5] = v9;
  }
  else
  {
    CGFloat v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = *(void *)(SpatialTrackingSession.UnavailableCapabilities.sceneUnderstanding.getter() + 16);
  uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
  if (v15)
  {
    unint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    unint64_t v43 = 0xD000000000000015;
    unint64_t v44 = 0x80000001E2AB8E20;
    uint64_t v17 = SpatialTrackingSession.UnavailableCapabilities.sceneUnderstanding.getter();
    uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh57C23UnavailableCapabilitiesV0A3KitE11descriptionSSvgSSAC13i3V16jK54Vcfu_33_0e2f2957bef5a9ec78f2a038ea1e8673AKSSTf3nnnpk_nTf1cn_nTm(v17, (uint64_t)&v40, MEMORY[0x1E4F3AC60], (uint64_t (*)(uint64_t))specialized Set.startIndex.getter, MEMORY[0x1E4F3AC58], (uint64_t (*)(uint64_t, uint64_t, void, uint64_t))specialized _NativeSet.index(after:));
    swift_bridgeObjectRelease();
    uint64_t v41 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
    BOOL v21 = v20;
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = v19;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 93;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    unint64_t v24 = v43;
    unint64_t v25 = v44;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
      CGFloat v10 = (void *)isUniquelyReferenced_nonNull_native;
    }
    unint64_t v27 = v10[2];
    unint64_t v26 = v10[3];
    if (v27 >= v26 >> 1)
    {
      uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v10);
      CGFloat v10 = (void *)isUniquelyReferenced_nonNull_native;
    }
    v10[2] = v27 + 1;
    CGFloat v28 = &v10[2 * v27];
    v28[4] = v24;
    v28[5] = v25;
  }
  char v29 = MEMORY[0x1E4E622E0](isUniquelyReferenced_nonNull_native);
  if (v29 != 2)
  {
    char v30 = v29;
    unint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v43 = 0xD00000000000001CLL;
    unint64_t v44 = 0x80000001E2AB8E40;
    if (v30) {
      uint64_t v31 = 1702195828;
    }
    else {
      uint64_t v31 = 0x65736C6166;
    }
    if (v30) {
      unint64_t v32 = 0xE400000000000000;
    }
    else {
      unint64_t v32 = 0xE500000000000000;
    }
    unint64_t v33 = v32;
    String.append(_:)(*(Swift::String *)&v31);
    swift_bridgeObjectRelease();
    unint64_t v34 = v43;
    unint64_t v35 = v44;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      CGFloat v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    }
    unint64_t v37 = v10[2];
    unint64_t v36 = v10[3];
    if (v37 >= v36 >> 1) {
      CGFloat v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v10);
    }
    v10[2] = v37 + 1;
    long long v38 = &v10[2 * v37];
    v38[4] = v34;
    v38[5] = v35;
  }
  unint64_t v43 = (unint64_t)v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy17RealityFoundation22SpatialTrackingSessionC13ConfigurationV16AnchorCapabilityVG_SSs5NeverOTg504_s17d12Foundation22fgh57C23UnavailableCapabilitiesV0A3KitE11descriptionSSvgSSAC13i3V16jK54Vcfu_33_0e2f2957bef5a9ec78f2a038ea1e8673AKSSTf3nnnpk_nTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v41 = a5;
  CGRect v42 = a6;
  uint64_t v40 = a3(0);
  uint64_t v9 = *(void *)(v40 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v40);
  long long v39 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  long long v38 = (char *)v34 - v12;
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (!v13) {
    return v14;
  }
  v34[0] = v6;
  uint64_t v43 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
  uint64_t result = a4(a1);
  uint64_t v16 = result;
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  void v34[2] = v9 + 32;
  v34[3] = v9 + 16;
  v34[1] = v9 + 8;
  uint64_t v35 = v9;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(v37 + (((unint64_t)v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 36) != v18) {
      goto LABEL_16;
    }
    uint64_t v21 = *(void *)(a1 + 48) + *(void *)(v9 + 72) * v16;
    Swift::String v22 = v38;
    uint64_t v23 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v38, v21, v40);
    unint64_t v24 = v39;
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v39, v22, v23);
    uint64_t v26 = v41(v25);
    uint64_t v28 = v27;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v24, v23);
    uint64_t v14 = v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
      uint64_t v14 = v43;
    }
    unint64_t v30 = *(void *)(v14 + 16);
    unint64_t v29 = *(void *)(v14 + 24);
    if (v30 >= v29 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
      uint64_t v14 = v43;
    }
    *(void *)(v14 + 16) = v30 + 1;
    uint64_t v31 = v14 + 16 * v30;
    *(void *)(v31 + 32) = v26;
    *(void *)(v31 + 40) = v28;
    a1 = v36;
    uint64_t result = v42(v16, v18, v20 & 1, v36);
    uint64_t v16 = result;
    uint64_t v18 = v32;
    char v20 = v33 & 1;
    --v13;
    uint64_t v9 = v35;
    if (!v13)
    {
      outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(result, v32, v33 & 1);
      return v14;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      int64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      int64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CGFloat)>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<EntityGestureRecognizer>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      int64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      int64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollisionCastHit>, MEMORY[0x1E4F3A8E0], MEMORY[0x1E4F3A8E0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AccessibilityComponent.RotorType>, type metadata accessor for AccessibilityComponent.RotorType, type metadata accessor for AccessibilityComponent.RotorType);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PixelCastHit>, MEMORY[0x1E4F3AAF8], MEMORY[0x1E4F3AAF8]);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _OWORD v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CGFloat));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EntityGestureRecognizer);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t RKARTextureCache.init(device:)(id metalDevice)
{
  cacheOut[1] = *(CVMetalTextureCacheRef *)MEMORY[0x1E4F143B8];
  *(void *)(v1 + 16) = 0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  cacheOut[0] = 0;
  if (CVMetalTextureCacheCreate(0, 0, metalDevice, 0, cacheOut) || !cacheOut[0])
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = cacheOut[0];
    swift_unknownObjectRelease();
    *(void *)(v1 + 24) = v2;

    return v1;
  }
  return result;
}

uint64_t RKARTextureCache.extractTextures(from:requireBothPlanes:)(__CVBuffer *a1, char a2)
{
  textureOut[1] = *(CVMetalTextureRef *)MEMORY[0x1E4F143B8];
  uint64_t v5 = (__CVMetalTextureCache *)v2[3];
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  textureOut[0] = 0;
  CVReturn TextureFromImage = CVMetalTextureCacheCreateTextureFromImage(0, v5, a1, 0, MTLPixelFormatR8Unorm, WidthOfPlane, HeightOfPlane, 0, textureOut);
  CVMetalTextureRef v9 = textureOut[0];
  if (TextureFromImage) {
    goto LABEL_2;
  }
  if (!textureOut[0]) {
    return 0;
  }
  if (CVPixelBufferGetPlaneCount(a1) == 2)
  {
    size_t v11 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
    size_t v12 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
    textureOut[0] = 0;
    CVReturn v13 = CVMetalTextureCacheCreateTextureFromImage(0, v5, a1, 0, MTLPixelFormatRG8Unorm, v11, v12, 1uLL, textureOut);
    CVMetalTextureRef v14 = textureOut[0];
    if (v13)
    {
    }
    else if (textureOut[0])
    {
      goto LABEL_12;
    }
  }
  if ((a2 & 1) == 0)
  {
    uint64_t v15 = v9;
    CVMetalTextureRef v14 = v9;
LABEL_12:
    uint64_t v16 = (void *)v2[4];
    unint64_t v17 = (void *)v2[5];
    v2[4] = v9;
    v2[5] = v14;
    outlined consume of RKARTextureCache.CapturedImageCVTexturePair?(v16, v17);
    return 1;
  }
LABEL_2:

  return 0;
}

Swift::Void __swiftcall RKARTextureCache.extractTextures(from:)(ARFrame from)
{
  textureOut[1] = *(CVMetalTextureRef *)MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)v1[2];
  if (!v3
    || (size_t v4 = v3,
        char v5 = RKARTextureCache.extractTextures(from:requireBothPlanes:)(v4, 0),
        v4,
        (v5 & 1) == 0))
  {
    unint64_t v6 = (__CVBuffer *)[(objc_class *)from.super.isa capturedImage];
    RKARTextureCache.extractTextures(from:requireBothPlanes:)(v6, 1);
  }
  id v7 = [(objc_class *)from.super.isa segmentationBuffer];
  int64_t v8 = v7;
  if (v7)
  {
    CVMetalTextureRef v9 = (__CVMetalTextureCache *)v1[3];
    uint64_t v10 = (__CVBuffer *)v7;
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v10, 0);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v10, 0);
    textureOut[0] = 0;
    LODWORD(v9) = CVMetalTextureCacheCreateTextureFromImage(0, v9, v10, 0, MTLPixelFormatR8Unorm, WidthOfPlane, HeightOfPlane, 0, textureOut);
    CVMetalTextureRef v13 = textureOut[0];

    if (!v9) {
      goto LABEL_8;
    }
  }
  CVMetalTextureRef v13 = 0;
LABEL_8:
  CVMetalTextureRef v14 = (void *)v1[6];
  v1[6] = v13;

  id v15 = [(objc_class *)from.super.isa estimatedDepthData];
  if (!v15)
  {

    goto LABEL_12;
  }
  uint64_t v16 = (__CVMetalTextureCache *)v1[3];
  unint64_t v17 = (__CVBuffer *)v15;
  size_t v18 = CVPixelBufferGetWidthOfPlane(v17, 0);
  size_t v19 = CVPixelBufferGetHeightOfPlane(v17, 0);
  textureOut[0] = 0;
  LODWORD(v16) = CVMetalTextureCacheCreateTextureFromImage(0, v16, v17, 0, MTLPixelFormatR32Float, v18, v19, 0, textureOut);
  CVMetalTextureRef v20 = textureOut[0];

  if (v16)
  {

LABEL_12:
    CVMetalTextureRef v20 = 0;
  }
  uint64_t v21 = (void *)v1[7];
  v1[7] = v20;
}

uint64_t RKARTextureCache.__deallocating_deinit()
{
  outlined consume of RKARTextureCache.CapturedImageCVTexturePair?(v0[4], v0[5]);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RKARTextureCache()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for RKARTextureCache.CapturedImageCVTexturePair(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  size_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for RKARTextureCache.CapturedImageCVTexturePair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for RKARTextureCache.CapturedImageCVTexturePair(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  int64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for RKARTextureCache.CapturedImageCVTexturePair(uint64_t a1, _OWORD *a2)
{
  size_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for RKARTextureCache.CapturedImageCVTexturePair(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RKARTextureCache.CapturedImageCVTexturePair(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for RKARTextureCache.CapturedImageCVTexturePair()
{
  return &unk_1F3E01638;
}

void outlined consume of RKARTextureCache.CapturedImageCVTexturePair?(void *a1, void *a2)
{
  if (a1)
  {
  }
}

Swift::Void __swiftcall RKARSystem.updateDebugVisualization(with:oldOptions:)(RealityKit::ARView::DebugOptions with, RealityKit::ARView::DebugOptions oldOptions)
{
  uint64_t v3 = *(void *)with.rawValue;
  uint64_t v4 = *(void *)oldOptions.rawValue;
  if ((*(void *)with.rawValue & 4) != 0)
  {
    if ((v4 & 4) == 0) {
      RKARSystem.activateWorldOriginVisualization()();
    }
  }
  else if ((v4 & 4) != 0)
  {
    RKARSystem.deactivateWorldOriginVisualization()();
  }
  if ((v3 & 8) != 0)
  {
    if ((v4 & 8) == 0)
    {
      id v5 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_currentFrame);
      if (!v5) {
        return;
      }
      id v6 = v5;
      RKARSystem.createDebugVisualizationForAnchors(in:)(v5);
    }
  }
  else if ((v4 & 8) != 0)
  {
    RKARSystem.removeAllAnchorDebugVisualization()(&demangling cache variable for type metadata for (key: UUID, value: Entity), &OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier, (uint64_t (*)(void))specialized Dictionary.init(dictionaryLiteral:));
  }
  if ((v3 & 0x10) != 0)
  {
    if ((v4 & 0x10) == 0)
    {
      id v7 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_currentFrame);
      if (!v7) {
        return;
      }
      int64_t v8 = v7;
      RKARSystem.createDebugVisualizationForAnchorPlanes(in:)(v7);
    }
  }
  else if ((v4 & 0x10) != 0)
  {
    RKARSystem.removeAllAnchorDebugVisualization()(&demangling cache variable for type metadata for (key: UUID, value: ModelEntity), &OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier, (uint64_t (*)(void))specialized Dictionary.init(dictionaryLiteral:));
    RKARSystem.removeAllAnchorDebugVisualization()(&demangling cache variable for type metadata for (key: UUID, value: ModelEntity), &OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier, (uint64_t (*)(void))specialized Dictionary.init(dictionaryLiteral:));
  }
  if ((v3 & 0x40) != 0)
  {
    if ((v4 & 0x40) == 0)
    {
      uint64_t v16 = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
      if (v16)
      {
        unint64_t v17 = (void *)v16;
        size_t v18 = (uint64_t *)(v16 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
        swift_beginAccess();
        uint64_t v19 = *v18;
        swift_retain();

        if (v19)
        {
          uint64_t v20 = dispatch thunk of RealityFusionSession.serviceManager.getter();
          if (!v20) {
            goto LABEL_31;
          }
          uint64_t v21 = (void *)v20;
          id v15 = (id)RFServiceManagerGetMeshReconstructionService();

          if (!v15) {
            goto LABEL_31;
          }
LABEL_30:
          RFMeshReconstructionServiceSetWireframeEnabled();

LABEL_31:
          swift_release();
        }
      }
    }
  }
  else if ((v4 & 0x40) != 0)
  {
    uint64_t v9 = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      size_t v11 = (uint64_t *)(v9 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
      swift_beginAccess();
      uint64_t v12 = *v11;
      swift_retain();

      if (v12)
      {
        uint64_t v13 = dispatch thunk of RealityFusionSession.serviceManager.getter();
        if (!v13) {
          goto LABEL_31;
        }
        CVMetalTextureRef v14 = (void *)v13;
        id v15 = (id)RFServiceManagerGetMeshReconstructionService();

        if (!v15) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
  }
}

void RKARSystem.activateWorldOriginVisualization()()
{
  uint64_t v1 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin;
  if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin))
  {
    uint64_t v6 = specialized RKARSystem.createDebugAxis()();
    Entity.turnIntoNinja()();
    uint64_t v7 = MEMORY[0x1E4E64ED0](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v7)
    {
      int64_t v8 = (void *)v7;
      if (!*(void *)(v7 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        __break(1u);
        return;
      }
      swift_retain();

      dispatch thunk of Scene.anchors.getter();
      swift_release();
      Scene.AnchorCollection.appendNinja(_:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
    *(void *)(v0 + v5) = v6;
    swift_release();
  }
}

void RKARSystem.deactivateWorldOriginVisualization()()
{
  uint64_t v1 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin;
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin))
  {
    uint64_t v7 = MEMORY[0x1E4E64ED0](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView, v3);
    if (v7)
    {
      int64_t v8 = (void *)v7;
      if (!*(void *)(v7 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        __break(1u);
        return;
      }
      swift_retain();
      swift_retain();

      dispatch thunk of Scene.anchors.getter();
      swift_release();
      Scene.AnchorCollection.removeNinja(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    }
    *(void *)(v0 + v6) = 0;
    swift_release();
  }
}

void RKARSystem.createDebugVisualizationForAnchors(in:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v46 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v4 = *(char **)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  CGRect v45 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v44 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v10 = MEMORY[0x1F4188790](v9).n128_u64[0];
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v54 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 8) == 0) {
    return;
  }
  id v13 = objc_msgSend(a1, sel_anchors, v10);
  type metadata accessor for ARAnchor();
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_4;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v15) {
    goto LABEL_32;
  }
LABEL_4:
  uint64_t v50 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  uint64_t v52 = (char **)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier);
  unint64_t v53 = v14 & 0xC000000000000001;
  CGRect v42 = (void (**)(char *, uint64_t, unint64_t))(v7 + 16);
  uint64_t v43 = (void (**)(char *, uint64_t))(v4 + 8);
  CGRect v47 = (void (**)(char *, unint64_t))(v7 + 8);
  uint64_t v16 = 4;
  long long v49 = xmmword_1E2ABE690;
  float v55 = v12;
  uint64_t v48 = v15;
  while (1)
  {
    uint64_t v17 = v16 - 4;
    if (v53)
    {
      id v18 = (id)MEMORY[0x1E4E63150](v16 - 4, v14);
      BOOL v19 = __OFADD__(v17, 1);
      uint64_t v20 = v16 - 3;
      if (v19) {
        goto LABEL_29;
      }
    }
    else
    {
      id v18 = *(id *)(v14 + 8 * v16);
      BOOL v19 = __OFADD__(v17, 1);
      uint64_t v20 = v16 - 3;
      if (v19)
      {
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
    }
    if ((*(unsigned char *)(v2 + v54) & 8) != 0) {
      break;
    }

LABEL_6:
    ++v16;
    if (v20 == v15)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  uint64_t v51 = v20;
  unint64_t v21 = v14;
  uint64_t v22 = v2;
  unint64_t v23 = v6;
  unint64_t v24 = v18;
  uint64_t v7 = specialized RKARSystem.createDebugAxis()();
  type metadata accessor for Entity();
  HasTransform.position.setter();
  id v56 = v24;
  uint64_t v25 = v24;
  unint64_t v26 = v23;
  uint64_t v2 = v22;
  objc_msgSend(v25, sel_transform);
  HasTransform.setTransformMatrix(_:relativeTo:)();
  Entity.turnIntoNinja()();
  uint64_t v27 = MEMORY[0x1E4E64ED0](v50);
  if (!v27)
  {
LABEL_16:
    unint64_t v14 = v26;
    id v30 = objc_msgSend(v56, sel_identifier);
    uint64_t v12 = v55;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v31 = v52;
    swift_beginAccess();
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    float32x2_t v57 = *v31;
    uint64_t v4 = v57;
    *uint64_t v31 = (char *)0x8000000000000000;
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    uint64_t v34 = *((void *)v4 + 2);
    BOOL v35 = (v33 & 1) == 0;
    uint64_t v36 = v34 + v35;
    if (__OFADD__(v34, v35)) {
      goto LABEL_30;
    }
    char v37 = v33;
    if (*((void *)v4 + 3) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
      unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v55);
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_36;
      }
      unint64_t v6 = v38;
      uint64_t v40 = v57;
      if ((v37 & 1) == 0) {
        goto LABEL_25;
      }
LABEL_23:
      uint64_t v4 = (char *)*((void *)v40 + 7);
      swift_release();
      *(void *)&v4[8 * v6] = v7;
      uint64_t v12 = v55;
LABEL_26:
      *uint64_t v52 = v40;
      swift_bridgeObjectRelease();
      (*v47)(v12, v14);
      swift_endAccess();

      swift_release();
      unint64_t v6 = v14;
      unint64_t v14 = v21;
      uint64_t v15 = v48;
      uint64_t v20 = v51;
      goto LABEL_6;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v40 = v57;
      if (v33) {
        goto LABEL_23;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      uint64_t v40 = v57;
      if (v37) {
        goto LABEL_23;
      }
    }
LABEL_25:
    uint64_t v4 = v44;
    uint64_t v12 = v55;
    (*v42)(v44, (uint64_t)v55, v14);
    specialized _NativeDictionary._insert(at:key:value:)(v6, v4, v7, v40);
    goto LABEL_26;
  }
  uint64_t v28 = (void *)v27;
  if (*(void *)(v27 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    unint64_t v29 = v45;
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    Scene.AnchorCollection.appendNinja(_:)();
    (*v43)(v29, v46);
    goto LABEL_16;
  }
  __break(1u);
LABEL_36:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void RKARSystem.createDebugVisualizationForAnchorPlanes(in:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v52 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v4 = *(void (***)(char *, uint64_t))(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v51 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v58 - 8);
  *(void *)&double v7 = MEMORY[0x1F4188790](v58).n128_u64[0];
  float32x2_t v57 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 0x10) == 0) {
    return;
  }
  id v10 = objc_msgSend(a1, sel_anchors, v7);
  type metadata accessor for ARAnchor();
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_4;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v12) {
    goto LABEL_37;
  }
LABEL_4:
  uint64_t v55 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  uint64_t v46 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier;
  uint64_t v49 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier;
  unint64_t v13 = v11 & 0xC000000000000001;
  uint64_t v48 = v4 + 1;
  unint64_t v53 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v14 = 4;
  long long v54 = xmmword_1E2ABE6A0;
  unint64_t v47 = 0x80000001E2AB90C0;
  unint64_t v50 = 0x80000001E2AB9130;
  uint64_t v59 = v9;
  unint64_t v60 = v11 & 0xC000000000000001;
  uint64_t v61 = v12;
  while (1)
  {
    uint64_t v6 = v14 - 4;
    if (v13) {
      uint64_t v15 = (char *)MEMORY[0x1E4E63150](v14 - 4, v11);
    }
    else {
      uint64_t v15 = (char *)*(id *)(v11 + 8 * v14);
    }
    uint64_t v4 = (void (**)(char *, uint64_t))v15;
    uint64_t v16 = v14 - 3;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (v17) {
      break;
    }
    self;
    uint64_t v33 = swift_dynamicCastObjCClass();
    if (v33 && (*(unsigned char *)(v2 + v9) & 0x10) != 0)
    {
      uint64_t v34 = (void *)v33;
      BOOL v19 = v4;
      objc_msgSend(v34, sel_extent, v46, v47);
      long long v56 = v35;
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.assetService.getter();
      swift_release();
      uint64_t v36 = v67;
      uint64_t v37 = v68;
      __swift_project_boxed_opaque_existential_1(&v63, v67);
      (*(void (**)(uint64_t, uint64_t))(v37 + 32))(v36, v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
      uint64_t v63 = 0x1000100010001;
      int v64 = 0;
      uint64_t v65 = v56;
      int v66 = DWORD2(v56);
      LOWORD(v67) = 257;
      BYTE2(v67) = 1;
      if (REAssetManagerMeshMemoryAssetCreateBox())
      {
        type metadata accessor for MeshResource();
        swift_allocObject();
        MeshResource.init(_:)();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = v54;
        *(void *)(v38 + 56) = type metadata accessor for UnlitMaterial();
        *(void *)(v38 + 64) = MEMORY[0x1E4F3A820];
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v38 + 32));
        swift_retain();
        RKARSystem.debugProbeMaterial.getter((uint64_t)boxed_opaque_existential_0);
        type metadata accessor for ModelEntity();
        swift_allocObject();
        uint64_t v26 = ModelEntity.init(mesh:materials:)();
        swift_retain();
        dispatch thunk of Entity.name.setter();
        swift_release();
        objc_msgSend(v34, sel_transform);
        HasTransform.setTransformMatrix(_:relativeTo:)();
        Entity.turnIntoNinja()();
        uint64_t v40 = MEMORY[0x1E4E64ED0](v55);
        if (v40)
        {
          uint64_t v41 = (void *)v40;
          if (!*(void *)(v40 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
            goto LABEL_41;
          }
          swift_retain();

          CGRect v42 = v51;
          dispatch thunk of Scene.anchors.getter();
          swift_release();
          Scene.AnchorCollection.appendNinja(_:)();
          (*v48)(v42, v52);
        }
        id v43 = objc_msgSend(v34, sel_identifier);
        uint64_t v31 = (uint64_t)v57;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v32 = &v70;
LABEL_27:
        unint64_t v44 = (uint64_t *)*(v32 - 32);
        swift_beginAccess();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v62 = *v44;
        *unint64_t v44 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v26, v31, isUniquelyReferenced_nonNull_native);
        *unint64_t v44 = v62;
        swift_bridgeObjectRelease();
        (*v53)(v31, v58);
        swift_endAccess();

        swift_release();
        swift_release();
        uint64_t v9 = v59;
LABEL_31:
        unint64_t v13 = v60;
        uint64_t v12 = v61;
        goto LABEL_6;
      }

LABEL_30:
      goto LABEL_31;
    }
LABEL_5:

LABEL_6:
    ++v14;
    if (v16 == v12)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  if ((*(unsigned char *)(v2 + v9) & 0x10) == 0) {
    goto LABEL_5;
  }
  id v18 = (void *)v17;
  BOOL v19 = v4;
  id v20 = objc_msgSend(v18, sel_geometry);
  if (*(void *)(ARPlaneGeometry.vertices.getter() + 16) >= 0x100uLL) {
    goto LABEL_42;
  }
  uint64_t v21 = REGeomMeshCreateFromPolygon();
  swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_29;
  }
  uint64_t v62 = v21;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.assetService.getter();
  swift_release();
  uint64_t v22 = v67;
  uint64_t v23 = v68;
  __swift_project_boxed_opaque_existential_1(&v63, v67);
  (*(void (**)(uint64_t, uint64_t))(v23 + 32))(v22, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  if (!REAssetManagerMeshMemoryAssetCreate())
  {
    RERelease();
    uint64_t v9 = v59;
LABEL_29:

    goto LABEL_30;
  }
  type metadata accessor for MeshResource();
  swift_allocObject();
  MeshResource.init(_:)();
  RERelease();
  RERelease();

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = v54;
  *(void *)(v24 + 56) = type metadata accessor for UnlitMaterial();
  *(void *)(v24 + 64) = MEMORY[0x1E4F3A820];
  uint64_t v25 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v24 + 32));
  swift_retain();
  RKARSystem.debugAnchorPlaneMaterial.getter((uint64_t)v25);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  uint64_t v26 = ModelEntity.init(mesh:materials:)();
  swift_retain();
  dispatch thunk of Entity.name.setter();
  swift_release();
  objc_msgSend(v18, sel_transform);
  HasTransform.setTransformMatrix(_:relativeTo:)();
  Entity.turnIntoNinja()();
  uint64_t v27 = MEMORY[0x1E4E64ED0](v55);
  if (!v27)
  {
LABEL_19:
    id v30 = objc_msgSend(v18, sel_identifier, v46, v47);
    uint64_t v31 = (uint64_t)v57;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = &v71;
    goto LABEL_27;
  }
  uint64_t v28 = (void *)v27;
  if (*(void *)(v27 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    unint64_t v29 = v51;
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    Scene.AnchorCollection.appendNinja(_:)();
    (*v48)(v29, v52);
    goto LABEL_19;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t RKARSystem.removeAllAnchorDebugVisualization()(uint64_t *a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v36 = a3;
  uint64_t v39 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v6 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v38 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGRect v42 = a1;
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(a1);
  MEMORY[0x1F4188790](v44);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v34 - v11;
  unint64_t v13 = (uint64_t *)(v3 + *a2);
  swift_beginAccess();
  long long v35 = v13;
  uint64_t v14 = *v13;
  uint64_t v15 = *(void *)(*v13 + 64);
  uint64_t v40 = *v13 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v43 = v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  int64_t v41 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v37 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  while (1)
  {
    if (v18)
    {
      unint64_t v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v41) {
      goto LABEL_25;
    }
    unint64_t v24 = *(void *)(v40 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_25;
      }
      unint64_t v24 = *(void *)(v40 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v41) {
          goto LABEL_25;
        }
        unint64_t v24 = *(void *)(v40 + 8 * v20);
        if (!v24) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v14 + 48);
    uint64_t v27 = type metadata accessor for UUID();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v12, v26 + *(void *)(v28 + 72) * v22, v27);
    uint64_t v29 = *(int *)(v44 + 48);
    uint64_t v30 = *(void *)(*(void *)(v14 + 56) + 8 * v22);
    *(void *)&v12[v29] = v30;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v9, v12, v27);
    *(void *)&v9[v29] = v30;
    uint64_t result = MEMORY[0x1E4E64ED0](v43);
    if (result)
    {
      uint64_t v31 = (void *)result;
      if (!*(void *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
        goto LABEL_28;
      }
      swift_retain_n();
      swift_retain();

      uint64_t v32 = v38;
      dispatch thunk of Scene.anchors.getter();
      swift_release();
      Scene.AnchorCollection.removeNinja(_:)();
      swift_release();
      (*v37)(v32, v39);
    }
    else
    {
      swift_retain();
    }
    uint64_t result = outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v9, v42);
  }
  int64_t v25 = v23 + 3;
  if (v25 >= v41)
  {
LABEL_25:
    swift_release();
    uint64_t v33 = v36(MEMORY[0x1E4FBC860]);
    *long long v35 = v33;
    return swift_bridgeObjectRelease();
  }
  unint64_t v24 = *(void *)(v40 + 8 * v25);
  if (v24)
  {
    int64_t v20 = v25;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v20 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v20 >= v41) {
      goto LABEL_25;
    }
    unint64_t v24 = *(void *)(v40 + 8 * v20);
    ++v25;
    if (v24) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void RKARSystem.removeAnchorDebugVisualization(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v13 = MEMORY[0x1F4188790](v12).n128_u64[0];
  uint64_t v15 = (char *)&v24 - v14;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 8) != 0)
  {
    uint64_t v26 = v5;
    id v16 = objc_msgSend(a1, sel_identifier, v13);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier;
    swift_beginAccess();
    if (*(void *)(*(void *)v17 + 16)
      && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15), (v18 & 1) != 0))
    {
      swift_endAccess();
      int64_t v25 = a1;
      BOOL v19 = *(void (**)(char *, uint64_t))(v9 + 8);
      swift_retain();
      unint64_t v24 = v19;
      v19(v15, v8);
      int64_t v20 = v25;
      uint64_t v21 = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
      if (!v21)
      {
LABEL_7:
        id v23 = objc_msgSend(v20, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v11);
        swift_endAccess();
        swift_release();
        v24(v11, v8);
        swift_release();
        return;
      }
      unint64_t v22 = (void *)v21;
      if (*(void *)(v21 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();

        dispatch thunk of Scene.anchors.getter();
        swift_release();
        Scene.AnchorCollection.removeNinja(_:)();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v4);
        goto LABEL_7;
      }
      __break(1u);
    }
    else
    {
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    }
  }
}

void RKARSystem.removePlaneDebugVisualization(for:)(void *a1)
{
}

void RKARSystem.removeProbeDebugVisualization(for:)(void *a1)
{
}

void RKARSystem.removePlaneDebugVisualization(for:)(void *a1, void *a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  double v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = MEMORY[0x1F4188790](v14).n128_u64[0];
  uint64_t v17 = (char *)&v26 - v16;
  if ((*(unsigned char *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 0x10) != 0)
  {
    uint64_t v28 = v7;
    id v18 = objc_msgSend(a1, sel_identifier, v15);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = v4 + *a2;
    swift_beginAccess();
    if (*(void *)(*(void *)v19 + 16)
      && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17), (v20 & 1) != 0))
    {
      swift_endAccess();
      uint64_t v27 = a1;
      uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
      swift_retain();
      uint64_t v26 = v21;
      v21(v17, v10);
      unint64_t v22 = v27;
      uint64_t v23 = MEMORY[0x1E4E64ED0](v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
      if (!v23)
      {
LABEL_7:
        id v25 = objc_msgSend(v22, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v13);
        swift_endAccess();
        swift_release();
        v26(v13, v10);
        swift_release();
        return;
      }
      unint64_t v24 = (void *)v23;
      if (*(void *)(v23 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
      {
        swift_retain();

        dispatch thunk of Scene.anchors.getter();
        swift_release();
        Scene.AnchorCollection.removeNinja(_:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v6);
        goto LABEL_7;
      }
      __break(1u);
    }
    else
    {
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }
  }
}

Swift::Void __swiftcall RKARSystem.updateFeaturePointDebugVisualization(for:)(ARFrame a1)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 0x20) == 0) {
    return;
  }
  if (!swift_weakLoadStrong())
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v3 = dispatch thunk of __Engine.services.getter();
  swift_release();
  if (!v3)
  {
LABEL_12:
    __break(1u);
    return;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  id v4 = [(objc_class *)a1.super.isa rawFeaturePoints];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)(ARPointCloud.points.getter() + 16);
    if (v6)
    {
      uint64_t v7 = 0;
      do
      {
        ++v7;
        uint64_t v8 = v11;
        uint64_t v9 = v12;
        __swift_project_boxed_opaque_existential_1(v10, v11);
        (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
        REDebugRendererDrawAxisWithWorldTransform();
      }
      while (v6 != v7);
    }

    swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t specialized RKARSystem.createDebugAxis(with:position:color:)(void *a1, __n128 a2, __n128 a3)
{
  v14[0] = a2;
  v14[1] = a3;
  uint64_t v4 = type metadata accessor for UnlitMaterial();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnlitMaterial.init()();
  id v8 = a1;
  UnlitMaterial.__tintColor.setter();
  type metadata accessor for MeshResource();
  static MeshResource.generateBox(size:cornerRadius:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1E2ABE6A0;
  uint64_t v10 = MEMORY[0x1E4F3A820];
  *(void *)(v9 + 56) = v4;
  *(void *)(v9 + 64) = v10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v9 + 32));
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 16))(boxed_opaque_existential_0, v7, v4);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  uint64_t v12 = ModelEntity.init(mesh:materials:)();
  HasTransform.position.setter();
  swift_retain();
  dispatch thunk of Entity.name.setter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

uint64_t specialized RKARSystem.createDebugAxis()()
{
  uint64_t v0 = type metadata accessor for Entity.ChildCollection();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Entity();
  swift_allocObject();
  uint64_t v4 = Entity.init()();
  type metadata accessor for CGColorRef(0);
  _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)();
  uint64_t v5 = v15;
  uint64_t v6 = specialized RKARSystem.createDebugAxis(with:position:color:)(v15, (__n128)xmmword_1E2ABE6B0, (__n128)xmmword_1E2ABE6C0);

  _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)();
  uint64_t v7 = v15;
  uint64_t v8 = specialized RKARSystem.createDebugAxis(with:position:color:)(v15, (__n128)xmmword_1E2ABE6D0, (__n128)xmmword_1E2ABE6E0);

  _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)();
  uint64_t v9 = v15;
  uint64_t v10 = specialized RKARSystem.createDebugAxis(with:position:color:)(v15, (__n128)xmmword_1E2ABE6F0, (__n128)xmmword_1E2ABE700);

  dispatch thunk of Entity.name.setter();
  HasHierarchy.children.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1E2ABE710;
  *(void *)(v11 + 32) = v6;
  *(void *)(v11 + 40) = v8;
  *(void *)(v11 + 48) = v10;
  double v15 = (void *)v11;
  specialized Array._endMutation()();
  v12._rawValue = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  Entity.ChildCollection.append(contentsOf:preservingWorldTransforms:)(v12, 0);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  Entity.turnIntoNinja()();
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

unint64_t type metadata accessor for ARAnchor()
{
  unint64_t result = lazy cache variable for type metadata for ARAnchor;
  if (!lazy cache variable for type metadata for ARAnchor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  }
  return result;
}

void ARView.Environment.sceneUnderstanding.getter(uint64_t a1@<X8>)
{
  unint64_t v2 = *v1;
  if ((*v1 & 0xFF00000000) == 0x200000000)
  {
    LODWORD(v2) = 0;
    LOBYTE(v3) = 0;
    int v4 = 0;
    *uint64_t v1 = 0;
    *((_DWORD *)v1 + 2) = 0;
  }
  else
  {
    int v4 = *((_DWORD *)v1 + 2);
    uint64_t v3 = HIDWORD(v2) & 1;
  }
  *(_DWORD *)a1 = v2;
  *(unsigned char *)(a1 + 4) = v3;
  *(_DWORD *)(a1 + 8) = v4;
}

void ARView.Environment.SceneUnderstanding.options.setter(_DWORD *a1)
{
  int v2 = *(_DWORD *)(v1 + 8);
  *(_DWORD *)(v1 + 8) = *a1;
  int v3 = v2;
  ARView.Environment.SceneUnderstanding.options.didset(&v3);
}

unsigned int *ARView.Environment.sceneUnderstanding.setter(unsigned int *result)
{
  unsigned int v2 = result[2];
  uint64_t v3 = 0x100000000;
  if (!*((unsigned char *)result + 4)) {
    uint64_t v3 = 0;
  }
  *(void *)uint64_t v1 = v3 | *result;
  *(_DWORD *)(v1 + 8) = v2;
  return result;
}

void static ARView.Environment.Background.cameraFeed(exposureCompensation:)(uint64_t a1@<X8>, unsigned int a2@<S0>)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t static ARView.Environment.Background.skybox(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(unsigned char *)(a2 + 8) = 1;
  return swift_retain();
}

id static ARView.Environment.Background.color(_:)@<X0>(id a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(unsigned char *)(a2 + 8) = 2;
  return a1;
}

uint64_t ARView.Environment.ImageBasedLight.resource.getter()
{
  return swift_retain();
}

uint64_t ARView.Environment.ImageBasedLight.resource.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*ARView.Environment.ImageBasedLight.resource.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

float ARView.Environment.ImageBasedLight.intensityExponent.getter()
{
  return *(float *)(v0 + 8);
}

void ARView.Environment.ImageBasedLight.intensityExponent.setter(float a1)
{
  *(float *)(v1 + 8) = a1;
}

uint64_t (*ARView.Environment.ImageBasedLight.intensityExponent.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

BOOL static ARView.Environment.Reverb.Preset.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ARView.Environment.Reverb.Preset.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ARView.Environment.Reverb.Preset.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ARView.Environment.Reverb.Preset(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ARView.Environment.Reverb.Preset()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ARView.Environment.Reverb.Preset()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ARView.Environment.Reverb.Preset()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static ARView.Environment.Reverb.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ARView.Environment.SceneUnderstanding.validateOptions()()
{
  Swift::UInt v1 = v0;
  int v2 = v0[2];
  int v3 = *v0;
  int v4 = v2;
  if ((*v0 & v2) != 0)
  {
    static os_log_type_t.debug.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    uint64_t v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    int v4 = v2 & ~v3;
  }
  v1[2] = v4;
  int v7 = v2;
  return ARView.Environment.SceneUnderstanding.options.didset(&v7);
}

uint64_t ARView.Environment.SceneUnderstanding.Options.rawValue.getter()
{
  return *v0;
}

uint64_t ARView.Environment.SceneUnderstanding.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ARView.Environment.SceneUnderstanding.Options.occlusion.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.Environment.SceneUnderstanding.Options.receivesLighting.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.Environment.SceneUnderstanding.Options.collision.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ARView.Environment.SceneUnderstanding.Options.physics.getter(_DWORD *a1@<X8>)
{
  *a1 = 12;
}

void static ARView.Environment.SceneUnderstanding.Options.__disableFeathering.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ARView.Environment.SceneUnderstanding.Options.__disableGuidedFilterOcclusions.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ARView.Environment.SceneUnderstanding.Options.enableDynamicLighting.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static ARView.Environment.SceneUnderstanding.Options.default.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x80000000;
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance ARView.Environment.SceneUnderstanding.Options@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ARView.Environment.SceneUnderstanding.Options()
{
  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance ARView.Environment.SceneUnderstanding.Options(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance ARView.Environment.SceneUnderstanding.Options(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t ARView.Environment.SceneUnderstanding.__InternalSettings.guidedFilterOcclusionUseSingleMTLEvent.getter()
{
  return *v0;
}

uint64_t ARView.Environment.SceneUnderstanding.__InternalSettings.guidedFilterOcclusionUseSingleMTLEvent.setter(uint64_t result)
{
  *Swift::UInt v1 = result;
  return result;
}

uint64_t (*ARView.Environment.SceneUnderstanding.__InternalSettings.guidedFilterOcclusionUseSingleMTLEvent.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

void ARView.Environment.SceneUnderstanding.__internalSettings.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 4);
}

uint64_t key path setter for ARView.Environment.SceneUnderstanding.__internalSettings : ARView.Environment.SceneUnderstanding(unsigned char *a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 4) = *a1;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v2 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t result = MEMORY[0x1E4E64130](v2);
  if (result)
  {
    return MEMORY[0x1F4114AC0]();
  }
  return result;
}

uint64_t ARView.Environment.SceneUnderstanding.__internalSettings.setter(unsigned char *a1)
{
  *(unsigned char *)(v1 + 4) = *a1;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v2 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t result = MEMORY[0x1E4E64130](v2);
  if (result)
  {
    return MEMORY[0x1F4114AC0]();
  }
  return result;
}

uint64_t (*ARView.Environment.SceneUnderstanding.__internalSettings.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  return ARView.Environment.SceneUnderstanding.__internalSettings.modify;
}

uint64_t ARView.Environment.SceneUnderstanding.__internalSettings.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    uint64_t v2 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    uint64_t result = MEMORY[0x1E4E64130](v2);
    if (result)
    {
      return MEMORY[0x1F4114AC0]();
    }
  }
  return result;
}

void ARView.Environment.SceneUnderstanding.options.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(v1 + 8);
}

void ARView.Environment.SceneUnderstanding.options.didset(_DWORD *a1)
{
  uint64_t v2 = v1;
  int v3 = *(_DWORD *)(v1 + 8);
  if (*a1 != v3)
  {
    if (objc_msgSend(self, sel_supportsSceneReconstruction_, 1))
    {
      if (v3 < 0 && (v3 & ~dword_1F3E005B8) != 0)
      {
        static os_log_type_t.debug.getter();
        type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        int v4 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:type:_:)();

        *(_DWORD *)(v2 + 8) = dword_1F3E005E0;
      }
      ARView.Environment.SceneUnderstanding.validateOptions()();
      type metadata accessor for RealityFusionSession();
      if (static RealityFusionSession.sharedSession.getter())
      {
        int v5 = (void *)dispatch thunk of RealityFusionSession.serviceManager.getter();
        swift_release();
        if (v5)
        {
          id v6 = (id)RFServiceManagerGetMeshReconstructionService();

          if (v6)
          {
            RFMeshReconstructionServiceSetOcclusionEnabled();
            RFMeshReconstructionServiceSetPhysicsEnabled();
            RFMeshReconstructionServiceSetCollisionEnabled();
            RFMeshReconstructionServiceSetLightingEnabled();
            RFMeshReconstructionServiceSetDynamicLightingEnabled();
          }
        }
      }
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      uint64_t v7 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
      swift_release();
      uint64_t v8 = MEMORY[0x1E4E64130](v7);
      if (v8)
      {
        uint64_t v9 = v8;
        RESceneUnderstandingServiceSetDepthFeatheringEnabled();
        RESceneUnderstandingServiceSetGuidedFilterOcclusionSupportEnabled();
        BOOL v11 = *(int *)(v2 + 8) < 0 || (*(_DWORD *)(v2 + 8) & 0x21) == 1;
        MEMORY[0x1F4114AB0](v9, v11);
      }
    }
    else
    {
      static os_log_type_t.debug.getter();
      type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      Swift::OpaquePointer v12 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      *(_DWORD *)(v2 + 8) = 0;
    }
  }
}

void (*ARView.Environment.SceneUnderstanding.options.modify(uint64_t a1))(_DWORD *a1, char a2)
{
  *(void *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 8);
  return ARView.Environment.SceneUnderstanding.options.modify;
}

void ARView.Environment.SceneUnderstanding.options.modify(_DWORD *a1, char a2)
{
  int v2 = *(_DWORD *)(*(void *)a1 + 8);
  *(_DWORD *)(*(void *)a1 + 8) = a1[2];
  if (a2)
  {
    int v4 = v2;
    int v3 = &v4;
  }
  else
  {
    int v5 = v2;
    int v3 = &v5;
  }
  ARView.Environment.SceneUnderstanding.options.didset(v3);
}

uint64_t *(*ARView.Environment.sceneUnderstanding.modify(void *a1))(uint64_t *result)
{
  *a1 = v1;
  ARView.Environment.sceneUnderstanding.getter((uint64_t)(a1 + 1));
  return ARView.Environment.sceneUnderstanding.modify;
}

uint64_t *ARView.Environment.sceneUnderstanding.modify(uint64_t *result)
{
  uint64_t v1 = *result;
  int v2 = *((_DWORD *)result + 4);
  uint64_t v3 = 0x100000000;
  if (!*((unsigned char *)result + 12)) {
    uint64_t v3 = 0;
  }
  *(void *)uint64_t v1 = v3 | *((unsigned int *)result + 2);
  *(_DWORD *)(v1 + 8) = v2;
  return result;
}

id ARView.Environment.background.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(void **)(v1 + 16);
  *(void *)a1 = v2;
  char v3 = *(unsigned char *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of ARView.Environment.Background.Value(v2, v3);
}

id outlined copy of ARView.Environment.Background.Value(id result, char a2)
{
  if (a2 == 2) {
    return result;
  }
  if (a2 == 1) {
    return (id)swift_retain();
  }
  return result;
}

void ARView.Environment.background.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  outlined consume of ARView.Environment.Background.Value(*(void **)(v1 + 16), *(unsigned char *)(v1 + 24));
  *(void *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 24) = v3;
}

void outlined consume of ARView.Environment.Background.Value(void *a1, char a2)
{
  if (a2 == 2)
  {
  }
  else if (a2 == 1)
  {
    swift_release();
  }
}

uint64_t (*ARView.Environment.background.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t ARView.Environment.lighting.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t ARView.Environment.lighting.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t result = swift_release();
  *(void *)(v1 + 32) = v2;
  *(_DWORD *)(v1 + 40) = v3;
  return result;
}

uint64_t (*ARView.Environment.lighting.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

void ARView.Environment.reverb.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 44);
}

unsigned char *ARView.Environment.reverb.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 44) = *result;
  return result;
}

uint64_t (*ARView.Environment.reverb.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

float ARView.Environment.init(background:lighting:reverb:)@<S0>(uint64_t *a1@<X0>, float *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = *(void *)a2;
  float result = a2[2];
  char v8 = *a3;
  *(void *)a4 = 0x200000000;
  *(_DWORD *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = v4;
  *(unsigned char *)(a4 + 24) = v5;
  *(void *)(a4 + 32) = v6;
  *(float *)(a4 + 40) = result;
  *(unsigned char *)(a4 + 44) = v8;
  return result;
}

void ARView.Environment.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x200000000;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 6;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

Swift::Void __swiftcall ARView.updateEnvironment()()
{
  uint64_t v1 = v0;
  uint64_t v70 = type metadata accessor for ImageBasedLightComponent.Source();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v71 = (uint64_t *)((char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageBasedLightComponent?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v72 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __SkyboxMaterial();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SkyboxComponent?);
  MEMORY[0x1F4188790](v9 - 8);
  BOOL v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::OpaquePointer v12 = &v0[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  swift_beginAccess();
  double v13 = (void *)*((void *)v12 + 2);
  float32x4_t v73 = v12;
  if (v12[24])
  {
    if (v12[24] == 1)
    {
      uint64_t v14 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
      swift_beginAccess();
      if (!*(void *)v14)
      {
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
      outlined copy of ARView.Environment.Background.Value(v13, 1);
      outlined copy of ARView.Environment.Background.Value(v13, 1);
      swift_retain();
      __SkyboxComponent.init(environment:)();
      uint64_t v15 = type metadata accessor for __SkyboxComponent();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 0, 1, v15);
      uint64_t v16 = (void (*)(char *, void))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v16(v75, 0);
      swift_release();
      if (dispatch thunk of EnvironmentResource.coreSkyboxAsset.getter())
      {
        __SkyboxMaterial.init()();
        __SkyboxMaterial.__resource.getter();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        dispatch thunk of __MaterialResource.coreAsset.getter();
        swift_release();
        REMaterialAssetSetTextureFromAsset();
      }
      outlined consume of ARView.Environment.Background.Value(v13, 1);
      uint64_t v17 = v73;
    }
    else
    {
      unint64_t v22 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
      swift_beginAccess();
      if (!*(void *)v22)
      {
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      uint64_t v23 = type metadata accessor for __SkyboxComponent();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v11, 1, 1, v23);
      swift_retain();
      unint64_t v24 = (void (*)(char *, void))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v24(v75, 0);
      swift_release();
      uint64_t v17 = v73;
    }
  }
  else
  {
    id v18 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (!*(void *)v18)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    uint64_t v19 = type metadata accessor for __SkyboxComponent();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 1, 1, v19);
    swift_retain();
    char v20 = (void (*)(char *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v20(v75, 0);
    swift_release();
    uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
    uint64_t v17 = v73;
    if (v21) {
      *(_DWORD *)(v21 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent) = v13;
    }
  }
  id v25 = objc_msgSend(v1, sel_layer, v69);
  if (v17[24] == 2)
  {
    uint64_t v26 = (void *)*((void *)v17 + 2);
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    uint64_t v27 = self;
    outlined copy of ARView.Environment.Background.Value(v26, 2);
    id v28 = objc_msgSend(v27, sel_blackColor);
    char v29 = static NSObject.== infix(_:_:)();

    if (v25)
    {
      id v30 = v25;
      id v31 = objc_msgSend(v26, sel_CGColor);
      objc_msgSend(v30, sel_setBackgroundColor_, v31);
    }
    uint64_t v32 = (CGColor *)objc_msgSend(v26, sel_CGColor);
    double Alpha = CGColorGetAlpha(v32);
    outlined consume of ARView.Environment.Background.Value(v26, 2);

    BOOL v34 = Alpha >= 1.0;
  }
  else
  {
    char v29 = 1;
    BOOL v34 = 1;
  }
  objc_msgSend(v1, sel_setOpaque_, v34);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView], sel_setOpaque_, v29 & 1);
  uint64_t v35 = *((void *)v17 + 4);
  float32x4_t v73 = (char *)v25;
  if (v35)
  {
    uint64_t v36 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (!*(void *)v36) {
      goto LABEL_49;
    }
    uint64_t v37 = v71;
    uint64_t *v71 = v35;
    (*(void (**)(uint64_t *, void, uint64_t))(v69 + 104))(v37, *MEMORY[0x1E4F3AD08], v70);
    swift_retain_n();
    swift_retain();
    uint64_t v38 = v72;
    ImageBasedLightComponent.init(source:intensityExponent:global:)();
    uint64_t v39 = type metadata accessor for ImageBasedLightComponent();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
    uint64_t v40 = (void (*)(char *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v40(v75, 0);
    swift_release();
    swift_release();
    v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 1;
LABEL_33:
    float32x2_t v57 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (*(void *)v57)
    {
      swift_retain();
      uint64_t v58 = (void (*)(char *, void))dispatch thunk of Entity.components.modify();
      uint64_t v59 = type metadata accessor for ImageBasedLightComponent();
      unint64_t v60 = (void (*)(char *, void))Entity.ComponentSet.subscript.modify();
      int v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 48))(v61, 1, v59);
      uint64_t v63 = v73;
      if (!v62) {
        ImageBasedLightComponent.inheritsRotation.setter();
      }
      v60(v74, 0);
      v58(v75, 0);
      swift_release();
      v75[0] = v17[44];
      ARView.updateEnvironmentReverb(_:)(v75);
      uint64_t v64 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
      if (*(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
      {
        swift_retain();
        uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
        swift_release();
        if (active) {
          goto LABEL_40;
        }
        if (*(void *)&v1[v64])
        {
          swift_retain();
          uint64_t v66 = dispatch thunk of Scene.defaultCamera.getter();
          swift_release();
          if (!v66)
          {
LABEL_46:

            return;
          }
LABEL_40:
          Entity.coreEntity.getter();
          RECameraViewDescriptorsComponentGetComponentType();
          if (REEntityGetComponentByClass() && RECameraViewDescriptorsComponentCameraViewDescriptorCount() >= 1)
          {
            RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex();
            uint64_t v67 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
            RERenderGraphDataStructAddFloat4();
            int v68 = v17[24];
            if (!v17[24]) {
              outlined copy of ARView.Environment.Background.Value(*((id *)v17 + 2), 0);
            }
            MEMORY[0x1E4E63E70](v67, "forceHidePassthroughFeed", v68 != 0);
            RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
            RERelease();
          }
          swift_release();
          goto LABEL_46;
        }
        goto LABEL_50;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v17[24])
  {
    uint64_t v41 = OBJC_IVAR____TtC10RealityKit6ARView_currentIBL;
    if (v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] == 2) {
      goto LABEL_33;
    }
    CGRect v42 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (!*(void *)v42)
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    goto LABEL_23;
  }
  uint64_t v49 = *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v49 && *(unsigned char *)(v49 + OBJC_IVAR____TtC10RealityKit10RKARSystem_isFaceSession) == 1)
  {
    uint64_t v41 = OBJC_IVAR____TtC10RealityKit6ARView_currentIBL;
    if (v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] == 2) {
      goto LABEL_33;
    }
    unint64_t v50 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
    swift_beginAccess();
    if (*(void *)v50)
    {
LABEL_23:
      type metadata accessor for EnvironmentResource();
      swift_retain();
      uint64_t v43 = static EnvironmentResource.defaultObject()();
      uint64_t v44 = v71;
      uint64_t *v71 = v43;
      (*(void (**)(uint64_t *, void, uint64_t))(v69 + 104))(v44, *MEMORY[0x1E4F3AD08], v70);
      CGRect v45 = v72;
      ImageBasedLightComponent.init(source:intensityExponent:global:)();
      uint64_t v46 = type metadata accessor for ImageBasedLightComponent();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 0, 1, v46);
      unint64_t v47 = (void (*)(char *, void))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v47(v75, 0);
      swift_release();
      char v48 = 2;
LABEL_32:
      v1[v41] = v48;
      goto LABEL_33;
    }
    __break(1u);
  }
  uint64_t v41 = OBJC_IVAR____TtC10RealityKit6ARView_currentIBL;
  if (v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] == 3) {
    goto LABEL_33;
  }
  uint64_t v51 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity];
  swift_beginAccess();
  if (*(void *)v51)
  {
    type metadata accessor for EnvironmentResource();
    swift_retain();
    uint64_t v52 = static EnvironmentResource.defaultAR()();
    unint64_t v53 = v71;
    uint64_t *v71 = v52;
    (*(void (**)(uint64_t *, void, uint64_t))(v69 + 104))(v53, *MEMORY[0x1E4F3AD08], v70);
    long long v54 = v72;
    ImageBasedLightComponent.init(source:intensityExponent:global:)();
    uint64_t v55 = type metadata accessor for ImageBasedLightComponent();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 0, 1, v55);
    long long v56 = (void (*)(char *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v56(v75, 0);
    swift_release();
    char v48 = 3;
    goto LABEL_32;
  }
LABEL_55:
  __break(1u);
}

char *ARView.updateEnvironmentReverb(_:)(char *result)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = *result;
  swift_retain();
  dispatch thunk of Scene.applyReverbPreset(_:)();
  float result = (char *)swift_release();
  uint64_t v4 = *(void *)(v1 + v2);
  if (v3 == 6)
  {
    if (v4) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  if (!v4)
  {
LABEL_11:
    __break(1u);
    return result;
  }
LABEL_6:
  swift_retain();
  dispatch thunk of Scene.setReverbPresetPriority(_:)();

  return (char *)swift_release();
}

BOOL static ARView.Environment.Reverb.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 7) {
    return v3 == 7;
  }
  if (v2 == 6) {
    return v3 == 6;
  }
  if ((v3 & 0xFE) == 6) {
    return 0;
  }
  return v2 == v3;
}

void ARView.Environment.Reverb.hash(into:)()
{
  Swift::UInt v1 = *v0;
  if (v1 == 6)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 7)
  {
    Swift::UInt v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int ARView.Environment.Reverb.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 6)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 7)
  {
    Swift::UInt v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ARView.Environment.Reverb(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 7) {
    return v3 == 7;
  }
  if (v2 == 6) {
    return v3 == 6;
  }
  if ((v3 & 0xFE) == 6) {
    return 0;
  }
  return v2 == v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ARView.Environment.Reverb()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 6)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 7)
  {
    Swift::UInt v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ARView.Environment.Reverb()
{
  Swift::UInt v1 = *v0;
  if (v1 == 6)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 7)
  {
    Swift::UInt v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ARView.Environment.Reverb()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if (v1 == 6)
  {
    Swift::UInt v1 = 0;
  }
  else if (v1 == 7)
  {
    Swift::UInt v1 = 2;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *static ARView.Environment.Reverb.Preset.allCases.getter()
{
  return &outlined read-only object #0 of static ARView.Environment.Reverb.Preset.allCases.getter;
}

unint64_t lazy protocol witness table accessor for type ARView.Environment.Reverb.Preset and conformance ARView.Environment.Reverb.Preset()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.Environment.Reverb.Preset and conformance ARView.Environment.Reverb.Preset;
  if (!lazy protocol witness table cache variable for type ARView.Environment.Reverb.Preset and conformance ARView.Environment.Reverb.Preset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.Reverb.Preset and conformance ARView.Environment.Reverb.Preset);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options;
  if (!lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options;
  if (!lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options;
  if (!lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options;
  if (!lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.SceneUnderstanding.Options and conformance ARView.Environment.SceneUnderstanding.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARView.Environment.Reverb and conformance ARView.Environment.Reverb()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.Environment.Reverb and conformance ARView.Environment.Reverb;
  if (!lazy protocol witness table cache variable for type ARView.Environment.Reverb and conformance ARView.Environment.Reverb)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.Environment.Reverb and conformance ARView.Environment.Reverb);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ARView.Environment.Reverb.Preset] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ARView.Environment.Reverb.Preset] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ARView.Environment.Reverb.Preset] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ARView.Environment.Reverb.Preset]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ARView.Environment.Reverb.Preset] and conformance [A]);
  }
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ARView.Environment.Reverb.Preset(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ARView.Environment.Reverb.Preset.allCases.getter;
}

uint64_t sub_1E2A50464@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 4);
  return result;
}

uint64_t sub_1E2A50474@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 8);
  return result;
}

void sub_1E2A50480(_DWORD *a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *a1;
  int v3 = v2;
  ARView.Environment.SceneUnderstanding.options.didset(&v3);
}

uint64_t destroy for ARView.Environment(uint64_t a1)
{
  outlined consume of ARView.Environment.Background.Value(*(void **)(a1 + 16), *(unsigned char *)(a1 + 24));

  return swift_release();
}

uint64_t initializeWithCopy for ARView.Environment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  outlined copy of ARView.Environment.Background.Value(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ARView.Environment(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  char v5 = (void *)a2[2];
  char v6 = *((unsigned char *)a2 + 24);
  outlined copy of ARView.Environment.Background.Value(v5, v6);
  uint64_t v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of ARView.Environment.Background.Value(v7, v8);
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
  *(unsigned char *)(a1 + 44) = *((unsigned char *)a2 + 44);
  return a1;
}

__n128 __swift_memcpy45_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 29) = *(_OWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ARView.Environment(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 24);
  char v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of ARView.Environment.Background.Value(v5, v6);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.Environment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 45)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 45) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment()
{
  return &type metadata for ARView.Environment;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.Background()
{
  return &type metadata for ARView.Environment.Background;
}

uint64_t initializeBufferWithCopyOfBuffer for ARView.Environment.ImageBasedLight(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for ARView.Environment.ImageBasedLight()
{
  return swift_release();
}

uint64_t assignWithCopy for ARView.Environment.ImageBasedLight(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t assignWithTake for ARView.Environment.ImageBasedLight(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.ImageBasedLight(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 12)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.ImageBasedLight(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.ImageBasedLight()
{
  return &type metadata for ARView.Environment.ImageBasedLight;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.Reverb(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9)
  {
    unsigned int v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 7;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1E2A509F0);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 7;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 6) {
    unsigned int v8 = v7 - 5;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for ARView.Environment.Reverb(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xF9) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v7 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1E2A50AD8);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ARView.Environment.Reverb(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 6) {
    return v1 - 5;
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for ARView.Environment.Reverb(unsigned char *result, int a2)
{
  if (a2) {
    *__n128 result = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.Reverb()
{
  return &type metadata for ARView.Environment.Reverb;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.Reverb.Preset(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ARView.Environment.Reverb.Preset(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A50C90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for ARView.Environment.Reverb.Preset(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for ARView.Environment.Reverb.Preset(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.Reverb.Preset()
{
  return &type metadata for ARView.Environment.Reverb.Preset;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.SceneUnderstanding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.SceneUnderstanding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.SceneUnderstanding()
{
  return &type metadata for ARView.Environment.SceneUnderstanding;
}

ValueMetadata *type metadata accessor for ARView.Environment.SceneUnderstanding.Options()
{
  return &type metadata for ARView.Environment.SceneUnderstanding.Options;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.SceneUnderstanding.__InternalSettings(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ARView.Environment.SceneUnderstanding.__InternalSettings(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A50F10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.SceneUnderstanding.__InternalSettings()
{
  return &type metadata for ARView.Environment.SceneUnderstanding.__InternalSettings;
}

uint64_t initializeBufferWithCopyOfBuffer for ARView.Environment.Background.Value(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ARView.Environment.Background.Value(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for ARView.Environment.Background.Value(uint64_t a1)
{
}

uint64_t assignWithCopy for ARView.Environment.Background(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ARView.Environment.Background.Value(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ARView.Environment.Background.Value(v5, v6);
  return a1;
}

uint64_t assignWithTake for ARView.Environment.Background.Value(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of ARView.Environment.Background.Value(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.Environment.Background(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.Environment.Background(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ARView.Environment.Background.Value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t destructiveInjectEnumTag for ARView.Environment.Background.Value(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ARView.Environment.Background.Value()
{
  return &type metadata for ARView.Environment.Background.Value;
}

double ParticleEmitterComponent.ParticleEmitter.color.getter@<D0>(uint64_t a1@<X8>)
{
  char v2 = ParticleEmitterComponent.ParticleEmitter.useEndColor.getter();
  unsigned int v3 = (void *)ParticleEmitterComponent.ParticleEmitter.startColorA.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  char v5 = (void *)ParticleEmitterComponent.ParticleEmitter.startColorB.getter();
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v5);

  char started = ParticleEmitterComponent.ParticleEmitter.useStartColorRange.getter();
  char v9 = started;
  if (v2)
  {
    if ((started & 1) == 0)
    {

      id v6 = 0;
    }
    uint64_t v10 = (void *)ParticleEmitterComponent.ParticleEmitter.endColorA.getter();
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v10);

    Swift::OpaquePointer v12 = (void *)ParticleEmitterComponent.ParticleEmitter.endColorB.getter();
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v12);

    char v14 = ParticleEmitterComponent.ParticleEmitter.useEndColorRange.getter();
    if ((v14 & 1) == 0)
    {

      id v13 = 0;
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v9 & 1;
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v13;
    *(unsigned char *)(a1 + 40) = v14 & 1 | 0x80;
  }
  else
  {
    if (started)
    {
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 16) = 1;
    }
    else
    {

      *(void *)a1 = v4;
      double result = 0.0;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
    }
    *(unsigned char *)(a1 + 40) = 0;
  }
  return result;
}

void key path setter for ParticleEmitterComponent.ParticleEmitter.color : ParticleEmitterComponent.ParticleEmitter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  v6[0] = *(void *)a1;
  v6[1] = v1;
  v6[2] = v2;
  v6[3] = v3;
  v6[4] = v4;
  char v7 = v5;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v6[0], v1, v2, v3, v4, v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  ParticleEmitterComponent.ParticleEmitter.color.setter((uint64_t)v6);
}

void ParticleEmitterComponent.ParticleEmitter.color.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v1 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  char v5 = *(void **)(a1 + 32);
  int v6 = *(char *)(a1 + 40);
  if ((v6 & 0x80000000) == 0)
  {
    outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a1, v1, v4 & 1);
    ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
    if (v4)
    {
      id v7 = v2;
      id v8 = v1;
      id v9 = objc_msgSend(v7, sel_CGColor);
      ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
      id v10 = objc_msgSend(v8, sel_CGColor);
      ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
      ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();

      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      return;
    }
    id v18 = objc_msgSend(v2, sel_CGColor);
    ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
    ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    uint64_t v16 = v2;
    uint64_t v17 = v1;
    goto LABEL_8;
  }
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a1, v1, v4 & 1);
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v3, v5, v6 & 1);
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  if ((v4 & 1) == 0)
  {
    id v20 = objc_msgSend(v2, sel_CGColor);
    ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
    ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v1, 0);
    if ((v6 & 1) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    id v21 = v3;
    id v22 = v5;
    id v23 = objc_msgSend(v21, (SEL)&_OBJC_LABEL_PROTOCOL___ARTrackable + 5);
    ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
    id v24 = objc_msgSend(v22, (SEL)&_OBJC_LABEL_PROTOCOL___ARTrackable + 5);
    ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
    ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();

    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v1, v4 & 1);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    uint64_t v16 = v3;
    uint64_t v17 = v5;
    char v19 = 1;
    goto LABEL_11;
  }
  id v11 = v2;
  id v12 = v1;
  id v13 = objc_msgSend(v11, sel_CGColor);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  id v14 = objc_msgSend(v12, sel_CGColor);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();

  if (v6) {
    goto LABEL_10;
  }
LABEL_6:
  id v15 = objc_msgSend(v3, sel_CGColor);
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v3, v5, 0);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v1, v4 & 1);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v2, (uint64_t)v1, v4, (uint64_t)v3, (uint64_t)v5, v6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  uint64_t v16 = v3;
  uint64_t v17 = v5;
LABEL_8:
  char v19 = 0;
LABEL_11:

  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v16, v17, v19);
}

void (*ParticleEmitterComponent.ParticleEmitter.color.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  ParticleEmitterComponent.ParticleEmitter.color.getter((uint64_t)v3);
  return ParticleEmitterComponent.ParticleEmitter.color.modify;
}

void ParticleEmitterComponent.ParticleEmitter.color.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = **a1;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  char v9 = *((unsigned char *)v3 + 40);
  v10[0] = v4;
  v10[1] = v5;
  v10[2] = v6;
  void v10[3] = v7;
  v10[4] = v8;
  char v11 = v9;
  if (a2)
  {
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v4, v5, v6, v7, v8, v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    ParticleEmitterComponent.ParticleEmitter.color.setter((uint64_t)v10);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(*v3, v3[1], v3[2], v3[3], v3[4], *((unsigned char *)v3 + 40), (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  }
  else
  {
    ParticleEmitterComponent.ParticleEmitter.color.setter((uint64_t)v10);
  }

  free(v3);
}

double ParticleEmitterComponent.Timing.VariableDuration.duration.getter()
{
  return *(double *)v0;
}

uint64_t ParticleEmitterComponent.Timing.VariableDuration.variation.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ParticleEmitterComponent.Timing.VariableDuration.init(duration:variation:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(double *)a3 = a4;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = a2 & 1;
  return result;
}

BOOL static ParticleEmitterComponent.Timing.VariableDuration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (vabdd_f64(*(double *)a2, *(double *)a1) > 0.00001) {
    return 0;
  }
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = v4 & v3;
  if ((v4 & 1) == 0 && (v3 & 1) == 0) {
    return vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 8)) <= 0.00001;
  }
  return v5;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  if (*v0) {
    return 0x6F69746169726176;
  }
  else {
    return 0x6E6F697461727564;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.Timing.VariableDuration.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ParticleEmitterComponent.Timing.VariableDuration.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.Timing.VariableDuration.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v11 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v10 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ParticleEmitterComponent.Timing.VariableDuration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.Timing.VariableDuration.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v15[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    v15[14] = 1;
    uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v14 = v13;
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    *(void *)a2 = v10;
    *(void *)(a2 + 8) = v12;
    *(unsigned char *)(a2 + 16) = v14 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParticleEmitterComponent.Timing.VariableDuration(uint64_t a1, uint64_t a2)
{
  if (vabdd_f64(*(double *)a2, *(double *)a1) > 0.00001) {
    return 0;
  }
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = v4 & v3;
  if ((v4 & 1) == 0 && (v3 & 1) == 0) {
    return vabdd_f64(*(double *)(a2 + 8), *(double *)(a1 + 8)) <= 0.00001;
  }
  return v5;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.Timing.VariableDuration@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ParticleEmitterComponent.Timing.VariableDuration.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.Timing.VariableDuration(void *a1)
{
  return ParticleEmitterComponent.Timing.VariableDuration.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ParticleEmitterComponent.Timing.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.Timing.CodingKeys()
{
  if (*v0) {
    return 0x6E69746165706572;
  }
  else {
    return 1701015151;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.Timing.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.Timing.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.Timing.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.Timing.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.Timing.OnceCodingKeys()
{
  if (*v0) {
    return 1953066341;
  }
  else {
    return 0x70556D726177;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.Timing.OnceCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.Timing.OnceCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.Timing.OnceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.Timing.OnceCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys()
{
  uint64_t v1 = 1953066341;
  if (*v0 != 1) {
    uint64_t v1 = 1701602409;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x70556D726177;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ParticleEmitterComponent.Timing.RepeatingCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ParticleEmitterComponent.Timing.encode(to:)(void *a1)
{
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.Timing.RepeatingCodingKeys>);
  uint64_t v22 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v26 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.Timing.OnceCodingKeys>);
  uint64_t v28 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  char v29 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ParticleEmitterComponent.Timing.CodingKeys>);
  uint64_t v31 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v32 = v1[1];
  uint64_t v33 = v8;
  uint64_t v9 = (char *)v1[3];
  uint64_t v23 = v1[2];
  id v24 = v9;
  uint64_t v10 = v1[5];
  uint64_t v25 = v1[4];
  char v11 = (char *)v1[6];
  int v12 = *((__int16 *)v1 + 28);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v12 < 0)
  {
    LODWORD(v28) = v12;
    char v29 = v11;
    uint64_t v30 = v10;
    uint64_t v16 = v22;
    LOBYTE(v35) = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys();
    uint64_t v17 = v26;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v35) = 0;
    id v18 = v17;
    uint64_t v19 = v27;
    uint64_t v20 = v34;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v20)
    {
      uint64_t v35 = v23;
      uint64_t v36 = v24;
      LOBYTE(v37) = v25 & 1;
      char v38 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v35 = v30;
      uint64_t v36 = v29;
      __int16 v37 = v28 & 0x1FF;
      char v38 = 2;
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v19);
  }
  else
  {
    LOBYTE(v35) = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys();
    char v13 = v29;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v35) = 0;
    uint64_t v14 = v30;
    uint64_t v15 = v34;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    if (!v15)
    {
      uint64_t v35 = v23;
      uint64_t v36 = v24;
      LOBYTE(v37) = v25 & 1;
      char v38 = 1;
      lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v7, v5);
}

uint64_t ParticleEmitterComponent.Timing.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.Timing.RepeatingCodingKeys>);
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.Timing.OnceCodingKeys>);
  uint64_t v41 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ParticleEmitterComponent.Timing.CodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  int v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys();
  uint64_t v14 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    goto LABEL_7;
  }
  uint64_t v39 = v6;
  uint64_t v15 = v43;
  uint64_t v45 = v10;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v20 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v22 = &type metadata for ParticleEmitterComponent.Timing;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x1E4FBBA70], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v9);
LABEL_7:
    uint64_t v36 = (uint64_t)v44;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if (*(unsigned char *)(v16 + 32))
  {
    LOBYTE(v46) = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v46) = 0;
    uint64_t v17 = v15;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LODWORD(v39) = v19;
    uint64_t v41 = v18;
    LOBYTE(v46) = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v28 = v49;
    uint64_t v29 = v50;
    uint64_t v30 = v5;
    unsigned int v31 = v51;
    char v52 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v17);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v9);
    long long v35 = v46;
    if (v48) {
      __int16 v32 = 256;
    }
    else {
      __int16 v32 = 0;
    }
    __int16 v33 = v32 | v47 | 0x8000;
    uint64_t v36 = (uint64_t)v44;
    uint64_t v24 = v41;
    char v26 = v39;
    uint64_t v34 = v29;
  }
  else
  {
    LOBYTE(v46) = 0;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    LOBYTE(v46) = 0;
    uint64_t v23 = v39;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v26 = v25;
    LOBYTE(v49) = 1;
    lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v9);
    __int16 v33 = 0;
    uint64_t v34 = *((void *)&v46 + 1);
    uint64_t v28 = v46;
    long long v35 = 0uLL;
    unsigned int v31 = v47;
    uint64_t v36 = (uint64_t)v44;
  }
  __int16 v37 = v40;
  *uint64_t v40 = v24;
  v37[1] = v26 & 1;
  v37[2] = v28;
  v37[3] = v34;
  v37[4] = v31;
  *(_OWORD *)(v37 + 5) = v35;
  *((_WORD *)v37 + 28) = v33;
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ParticleEmitterComponent.Timing@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return ParticleEmitterComponent.Timing.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ParticleEmitterComponent.Timing(void *a1)
{
  return ParticleEmitterComponent.Timing.encode(to:)(a1);
}

uint64_t ParticleEmitterComponent.timing.getter@<X0>(uint64_t a1@<X8>)
{
  ParticleEmitterComponent.warmupDuration.getter();
  uint64_t v2 = 0;
  double v4 = vabdd_f64(0.0, v3);
  uint64_t v5 = 0;
  if (v4 > 0.00001)
  {
    ParticleEmitterComponent.warmupDuration.getter();
    uint64_t v5 = v6;
  }
  ParticleEmitterComponent.emissionDuration.getter();
  uint64_t v8 = v7;
  ParticleEmitterComponent.emissionDurationVariation.getter();
  double v10 = vabdd_f64(0.0, v9);
  if (v10 > 0.00001)
  {
    ParticleEmitterComponent.emissionDurationVariation.getter();
    uint64_t v2 = v11;
  }
  uint64_t result = ParticleEmitterComponent.shouldLoop.getter();
  if (result)
  {
    uint64_t result = ParticleEmitterComponent.idleDuration.getter();
    uint64_t v13 = 0;
    if (vabdd_f64(0.0, v14) <= 0.00001)
    {
      __int16 v20 = 0;
      __int16 v21 = -32512;
      uint64_t v18 = 0;
    }
    else
    {
      ParticleEmitterComponent.idleDuration.getter();
      uint64_t v13 = v15;
      uint64_t result = ParticleEmitterComponent.idleDurationVariation.getter();
      double v17 = v16;
      uint64_t v18 = 0;
      double v19 = vabdd_f64(0.0, v17);
      if (v19 > 0.00001) {
        uint64_t result = ParticleEmitterComponent.idleDurationVariation.getter();
      }
      __int16 v20 = v19 <= 0.00001;
      __int16 v21 = 0x8000;
    }
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4 <= 0.00001;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v2;
    *(void *)(a1 + 32) = v10 <= 0.00001;
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v18;
    *(_WORD *)(a1 + 56) = v21 | v20;
  }
  else
  {
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4 <= 0.00001;
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v2;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = v10 <= 0.00001;
    *(_WORD *)(a1 + 56) = 0;
  }
  return result;
}

double key path getter for ParticleEmitterComponent.timing : ParticleEmitterComponent@<D0>(uint64_t a1@<X8>)
{
  ParticleEmitterComponent.timing.getter((uint64_t)v6);
  uint64_t v2 = v8;
  __int16 v3 = v9;
  long long v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v2;
  *(_WORD *)(a1 + 56) = v3;
  return result;
}

uint64_t key path setter for ParticleEmitterComponent.timing : ParticleEmitterComponent()
{
  return ParticleEmitterComponent.timing.setter();
}

uint64_t ParticleEmitterComponent.timing.setter()
{
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  ParticleEmitterComponent.idleDuration.setter();

  return ParticleEmitterComponent.idleDurationVariation.setter();
}

void (*ParticleEmitterComponent.timing.modify(void *a1))(void **a1)
{
  __int16 v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  ParticleEmitterComponent.timing.getter((uint64_t)v3);
  return ParticleEmitterComponent.timing.modify;
}

void ParticleEmitterComponent.timing.modify(void **a1)
{
  uint64_t v1 = *a1;
  ParticleEmitterComponent.timing.setter();

  free(v1);
}

BOOL specialized static ParticleEmitterComponent.Timing.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(__int16 *)(a1 + 56);
  double v7 = *(double *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  double v9 = *(double *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 32);
  unsigned int v11 = *(unsigned __int16 *)(a2 + 56);
  if ((v6 & 0x80000000) == 0)
  {
    if ((v11 & 0x8000) == 0)
    {
      if (v2)
      {
        if (v8) {
          goto LABEL_13;
        }
      }
      else if ((v8 & 1) == 0 && vabdd_f64(v7, v3) <= 0.00001)
      {
LABEL_13:
        BOOL v14 = vabdd_f64(v9, v4) > 0.00001;
        char v15 = v14 | v5;
        char v16 = (v14 ^ (v14 | v5)) & v10;
        if ((v15 & 1) == 0 && (v10 & 1) == 0)
        {
          double v12 = *(double *)(a1 + 24);
          double v13 = *(double *)(a2 + 24);
          return vabdd_f64(v13, v12) <= 0.00001;
        }
        return v16 & 1;
      }
    }
    return 0;
  }
  if ((v11 & 0x8000) == 0) {
    return 0;
  }
  double v12 = *(double *)(a1 + 48);
  double v13 = *(double *)(a2 + 48);
  if (v2)
  {
    if ((v8 & 1) == 0) {
      return 0;
    }
  }
  else if ((v8 & 1) != 0 || vabdd_f64(v7, v3) > 0.00001)
  {
    return 0;
  }
  if (vabdd_f64(v9, v4) > 0.00001) {
    return 0;
  }
  if (v5)
  {
    if ((v10 & 1) == 0) {
      return 0;
    }
  }
  else if ((v10 & 1) != 0 || vabdd_f64(*(double *)(a2 + 24), *(double *)(a1 + 24)) > 0.00001)
  {
    return 0;
  }
  if ((v6 & 0x100) == 0)
  {
    if ((v11 & 0x100) == 0 && vabdd_f64(*(double *)(a2 + 40), *(double *)(a1 + 40)) <= 0.00001)
    {
      if (((v6 | v11) & 1) == 0) {
        return vabdd_f64(v13, v12) <= 0.00001;
      }
      char v16 = v6 & v11;
      return v16 & 1;
    }
    return 0;
  }
  return (v11 >> 8) & 1;
}

uint64_t specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  double v3 = *(void **)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void **)a2;
  int v6 = *(void **)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 16);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 16) & 1) == 0)
    {
      type metadata accessor for NSObject();
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v5, v6, 0);
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v3, 0);
      char v13 = static NSObject.== infix(_:_:)();
      char v4 = 0;
      char v7 = 0;
      goto LABEL_10;
    }
    goto LABEL_6;
  }
  if ((*(unsigned char *)(a2 + 16) & 1) == 0)
  {
LABEL_6:
    outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a2, *(void **)(a2 + 8), v7);
    outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v3, v4);
    char v13 = 0;
    goto LABEL_10;
  }
  type metadata accessor for NSObject();
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v5, v6, 1);
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v3, 1);
  id v8 = v2;
  id v9 = v5;
  id v10 = v3;
  id v11 = v6;
  char v12 = static NSObject.== infix(_:_:)();

  if (v12)
  {
    char v13 = static NSObject.== infix(_:_:)();
  }
  else
  {

    char v13 = 0;
  }
  char v4 = 1;
  char v7 = 1;
LABEL_10:
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v2, v3, v4);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v5, v6, v7);
  return v13 & 1;
}

uint64_t specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  char v7 = *(void **)a2;
  int v6 = *(void **)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  id v8 = *(void **)(a2 + 24);
  uint64_t v38 = *(void **)(a2 + 32);
  uint64_t v39 = *(void **)(a1 + 24);
  int v40 = *(char *)(a2 + 40);
  int v36 = *(char *)(a1 + 40);
  __int16 v37 = (void *)v2;
  long long v35 = *(void **)a1;
  if (v36 < 0)
  {
    if (v40 < 0)
    {
      uint64_t v30 = *(void *)(a1 + 16) & 1;
      uint64_t v44 = *(void *)a1;
      uint64_t v45 = v2;
      char v46 = v4 & 1;
      uint64_t v41 = v7;
      uint64_t v42 = v6;
      char v43 = v9 & 1;
      uint64_t v23 = (void *)v5;
      char v34 = v4;
      char v24 = v4;
      uint64_t v25 = v5;
      char v26 = (void *)v2;
      uint64_t v27 = (void *)v3;
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v3, v2, v24, (uint64_t)v39, v25, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v7, (uint64_t)v6, v9, (uint64_t)v8, (uint64_t)v38, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v27, v26, v30);
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v7, v6, v9 & 1);
      char v28 = v36 & 1;
      uint64_t v29 = v23;
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v39, v23, v36 & 1);
      outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v8, v38, v40 & 1);
      if (specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v41))
      {
        uint64_t v44 = (uint64_t)v39;
        uint64_t v45 = (uint64_t)v23;
        char v46 = v36 & 1;
        uint64_t v41 = v8;
        uint64_t v42 = v38;
        char v43 = v40 & 1;
        char v15 = specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v41);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v7, v6, v9 & 1);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v35, v37, v34 & 1);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v35, (uint64_t)v37, v34, (uint64_t)v39, (uint64_t)v29, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v7, (uint64_t)v6, v9, (uint64_t)v8, (uint64_t)v38, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v8, v38, v40 & 1);
        outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v39, v29, v28);
        return v15 & 1;
      }
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v8, v38, v40 & 1);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v39, v23, v28);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v7, v6, v9 & 1);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v35, v37, v34 & 1);
      outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v35, (uint64_t)v37, v34, (uint64_t)v39, (uint64_t)v23, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
      uint64_t v16 = (uint64_t)v7;
      uint64_t v17 = (uint64_t)v6;
      char v18 = v9;
      uint64_t v19 = (uint64_t)v8;
      uint64_t v20 = (uint64_t)v38;
      char v21 = v40;
      goto LABEL_6;
    }
LABEL_5:
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v3, v2, v4, (uint64_t)v39, v5, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v7, (uint64_t)v6, v9, (uint64_t)v8, (uint64_t)v38, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v35, (uint64_t)v37, v4, (uint64_t)v39, v5, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    uint64_t v16 = (uint64_t)v7;
    uint64_t v17 = (uint64_t)v6;
    char v18 = v9;
    uint64_t v19 = (uint64_t)v8;
    uint64_t v20 = (uint64_t)v38;
    char v21 = v40;
LABEL_6:
    outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v16, v17, v18, v19, v20, v21, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
    char v15 = 0;
    return v15 & 1;
  }
  if (v40 < 0) {
    goto LABEL_5;
  }
  uint64_t v44 = *(void *)a1;
  uint64_t v45 = v2;
  char v46 = v4 & 1;
  uint64_t v41 = v7;
  uint64_t v42 = v6;
  char v43 = v9 & 1;
  char v10 = v4;
  uint64_t v32 = (uint64_t)v8;
  uint64_t v11 = (uint64_t)v8;
  uint64_t v12 = v5;
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v7, (uint64_t)v6, v9, v11, (uint64_t)v38, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  char v33 = v10;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v14, v13, v10, (uint64_t)v39, v12, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v14, v13, v10, (uint64_t)v39, v12, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v7, (uint64_t)v6, v9, v32, (uint64_t)v38, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  char v31 = specialized static ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue.== infix(_:_:)((uint64_t)&v44, (uint64_t)&v41);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v35, (uint64_t)v37, v10, (uint64_t)v39, v12, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v7, (uint64_t)v6, v9, v32, (uint64_t)v38, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v7, (uint64_t)v6, v9, v32, (uint64_t)v38, v40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  char v15 = v31;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor((uint64_t)v35, (uint64_t)v37, v33, (uint64_t)v39, v12, v36, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  return v15 & 1;
}

id outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(void *a1, void *a2, char a3)
{
  if (a3)
  {
    id v5 = a1;
    a1 = a2;
    uint64_t v3 = vars8;
  }
  return a1;
}

void outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(void *a1, void *a2, char a3)
{
  if (a3)
  {
  }
}

uint64_t outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t))
{
  if (a6 < 0)
  {
    uint64_t v12 = a6 & 1;
    a7(a1, a2, a3 & 1);
    return a7(a4, a5, v12);
  }
  else
  {
    uint64_t v8 = a3 & 1;
    return a7(a1, a2, v8);
  }
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration.CodingKeys and conformance ParticleEmitterComponent.Timing.VariableDuration.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.CodingKeys and conformance ParticleEmitterComponent.Timing.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.RepeatingCodingKeys and conformance ParticleEmitterComponent.Timing.RepeatingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.VariableDuration and conformance ParticleEmitterComponent.Timing.VariableDuration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys;
  if (!lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticleEmitterComponent.Timing.OnceCodingKeys and conformance ParticleEmitterComponent.Timing.OnceCodingKeys);
  }
  return result;
}

double sub_1E2A53900@<D0>(uint64_t a1@<X8>)
{
  ParticleEmitterComponent.ParticleEmitter.color.getter((uint64_t)v6);
  uint64_t v2 = v7;
  char v3 = v8;
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 40) = v3;
  return result;
}

uint64_t destroy for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1)
{
  return outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40), (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
}

uint64_t initializeWithCopy for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(*(void *)a2, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(*(void *)a2, v4, v5, v6, v7, v8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  char v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v9, v10, v11, v12, v13, v14, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  char v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor(v5, v7, v6, v8, v9, v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t))outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(void *)(result + 16) = 2 * -a2;
      *(unsigned char *)(result + 40) = 0;
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40) >> 7;
}

uint64_t destructiveProjectEnumData for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t result)
{
  *(unsigned char *)(result + 40) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for ParticleEmitterComponent.ParticleEmitter.ParticleColor(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 40) & 1 | (a2 << 7);
  *(void *)(result + 16) &= 1uLL;
  *(unsigned char *)(result + 40) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ParticleColor()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.ParticleColor;
}

void destroy for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  char v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  char v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  char v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue()
{
  return &type metadata for ParticleEmitterComponent.ParticleEmitter.ParticleColor.ColorValue;
}

__n128 __swift_memcpy58_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.Timing(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 58)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 8) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ParticleEmitterComponent.Timing(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 56) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 58) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 2 * -a2;
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 42) = 0u;
      return result;
    }
    *(unsigned char *)(a1 + 58) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for ParticleEmitterComponent.Timing(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 56) >> 15;
}

uint64_t destructiveProjectEnumData for ParticleEmitterComponent.Timing(uint64_t result)
{
  *(_WORD *)(result + 56) &= ~0x8000u;
  return result;
}

uint64_t destructiveInjectEnumTag for ParticleEmitterComponent.Timing(uint64_t result, __int16 a2)
{
  uint64_t v2 = *(void *)(result + 32) & 1;
  __int16 v3 = *(_WORD *)(result + 56) & 0x1FF | (a2 << 15);
  *(void *)(result + 8) &= 1uLL;
  *(void *)(result + 32) = v2;
  *(_WORD *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.Timing()
{
  return &type metadata for ParticleEmitterComponent.Timing;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.Timing.VariableDuration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParticleEmitterComponent.Timing.VariableDuration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.Timing.VariableDuration()
{
  return &type metadata for ParticleEmitterComponent.Timing.VariableDuration;
}

ValueMetadata *type metadata accessor for ParticleEmitterComponent.Presets()
{
  return &type metadata for ParticleEmitterComponent.Presets;
}

unsigned char *destructiveInjectEnumTag for ParticleEmitterComponent.Timing.CodingKeys(unsigned char *result, char a2)
{
  *double result = a2 & 1;
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.Timing.CodingKeys()
{
  return &unk_1F3E01D88;
}

void *type metadata accessor for ParticleEmitterComponent.Timing.OnceCodingKeys()
{
  return &unk_1F3E01E18;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.Timing.RepeatingCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.Timing.RepeatingCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A54130);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.Timing.RepeatingCodingKeys()
{
  return &unk_1F3E01EA8;
}

uint64_t getEnumTagSinglePayload for ParticleEmitterComponent.Timing.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ParticleEmitterComponent.Timing.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A542C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ParticleEmitterComponent.Timing.VariableDuration.CodingKeys()
{
  return &unk_1F3E01F38;
}

uint64_t specialized ParticleEmitterComponent.Timing.VariableDuration.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746169726176 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.Timing.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701015151 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69746165706572 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.Timing.OnceCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x70556D726177 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953066341 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized ParticleEmitterComponent.Timing.RepeatingCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x70556D726177 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953066341 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701602409 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

double ARFrame.displayToCameraMatrix(for:viewportSize:)(uint64_t a1)
{
  objc_msgSend(v1, sel_displayTransformForOrientation_viewportSize_, a1);
  v2.columns[0].i64[1] = *(void *)&v4.f64[1];
  v2.columns[1].i64[1] = *(void *)&v5.f64[1];
  *(float32x2_t *)v2.columns[0].f32 = vcvt_f32_f64(v4);
  *(float32x2_t *)v2.columns[1].f32 = vcvt_f32_f64(v5);
  *(float32x2_t *)v2.columns[3].f32 = vcvt_f32_f64(v6);
  v2.columns[3].i64[1] = 0x3F80000000000000;
  v2.columns[2] = (simd_float4)xmmword_1E2ABF0E0;

  *(void *)&double result = (unint64_t)__invert_f4(v2);
  return result;
}

uint64_t key path setter for EntityRotationGestureRecognizer.entity : EntityRotationGestureRecognizer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = swift_retain();
  EntityRotationGestureRecognizer.entity.willset(v5);
  float64x2_t v6 = (void *)(v4 + OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity);
  swift_beginAccess();
  *float64x2_t v6 = v2;
  v6[1] = v3;
  return swift_release();
}

id EntityRotationGestureRecognizer.entity.willset(uint64_t a1)
{
  uint64_t v2 = v1;
  id result = objc_msgSend(v2, sel_isEnabled);
  if (result)
  {
    uint64_t v5 = &v2[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
    id result = (id)swift_beginAccess();
    if (*(void *)v5)
    {
      if (a1)
      {
        type metadata accessor for Entity();
        lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
        swift_retain_n();
        char v6 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        id result = (id)swift_release();
        if (v6) {
          return result;
        }
      }
    }
    else if (!a1)
    {
      return result;
    }
    return objc_msgSend(v2, sel_setState_, 5);
  }
  return result;
}

uint64_t EntityRotationGestureRecognizer.entity.getter()
{
  return swift_retain();
}

uint64_t EntityRotationGestureRecognizer.entity.setter(uint64_t a1, uint64_t a2)
{
  EntityRotationGestureRecognizer.entity.willset(a1);
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

void (*EntityRotationGestureRecognizer.entity.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity;
  *((void *)v3 + 5) = v1;
  *((void *)v3 + 6) = v4;
  uint64_t v5 = (_OWORD *)(v1 + v4);
  swift_beginAccess();
  *(_OWORD *)(v3 + 24) = *v5;
  swift_retain();
  return EntityRotationGestureRecognizer.entity.modify;
}

void EntityRotationGestureRecognizer.entity.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v5 = (uint64_t *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48));
  if (a2)
  {
    uint64_t v6 = swift_retain();
    EntityRotationGestureRecognizer.entity.willset(v6);
    *uint64_t v5 = v3;
    v5[1] = v4;
    swift_release();
  }
  else
  {
    EntityRotationGestureRecognizer.entity.willset(v3);
    *uint64_t v5 = v3;
    v5[1] = v4;
  }
  swift_release();

  free(v2);
}

void EntityRotationGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, void *a2)
{
  id v4 = v2;
  id v5 = a2;
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized Set._Variant.filter(_:)(v6, v4, v5);

  if (objc_msgSend(v4, sel_numberOfTouches))
  {
    type metadata accessor for UITouch();
    lazy protocol witness table accessor for type UITouch and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UITouch);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_release();
    v8.receiver = v4;
    v8.super_class = (Class)type metadata accessor for EntityRotationGestureRecognizer();
    objc_msgSendSuper2(&v8, sel_touchesBegan_withEvent_, isa, v5);
  }
  else
  {
    swift_release();
    objc_msgSend(v4, sel_setState_, 5);
  }
}

Swift::Bool __swiftcall EntityRotationGestureRecognizer.canPrevent(_:)(UIGestureRecognizer *a1)
{
  uint64_t v2 = v1;
  swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v6) {
    goto LABEL_12;
  }
  BOOL v7 = (uint64_t *)&v2[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t ObjectType = swift_getObjectType();
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  char v11 = a1;
  swift_retain();
  uint64_t v12 = v10(ObjectType, v5);
  if (!v12)
  {

    swift_release();
LABEL_12:
    v16.receiver = v2;
    v16.super_class = (Class)type metadata accessor for EntityRotationGestureRecognizer();
    unsigned __int8 v14 = [(UIGestureRecognizer *)&v16 canPreventGestureRecognizer:a1];
    return v14 & 1;
  }
  uint64_t v13 = v12;
  swift_retain();
  unsigned __int8 v14 = specialized EntityGestureRecognizer.doesEntity(_:contain:)(v13, v8);

  swift_release();
  swift_release_n();
  return v14 & 1;
}

id EntityRotationGestureRecognizer.__allocating_init(target:action:)(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v6 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = *(void *)(v4 - 8);
    MEMORY[0x1F4188790](v6);
    uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v7 + 16))(v9);
    uint64_t v10 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v11 = objc_msgSend(objc_allocWithZone(v2), sel_initWithTarget_action_, v10, a2);
  swift_unknownObjectRelease();
  return v11;
}

id EntityRotationGestureRecognizer.init(target:action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = &v2[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  outlined init with copy of Any?(a1, (uint64_t)v16);
  uint64_t v6 = v17;
  if (v17)
  {
    uint64_t v7 = __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v8 = *(void *)(v6 - 8);
    MEMORY[0x1F4188790](v7);
    uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v8 + 16))(v10);
    uint64_t v11 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = (objc_class *)type metadata accessor for EntityRotationGestureRecognizer();
  v15.receiver = v2;
  v15.super_class = v12;
  id v13 = objc_msgSendSuper2(&v15, sel_initWithTarget_action_, v11, a2);
  swift_unknownObjectRelease();
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for Any?);
  return v13;
}

id EntityRotationGestureRecognizer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EntityRotationGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void (*protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityRotationGestureRecognizer(void *a1))(void *a1)
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = EntityRotationGestureRecognizer.entity.modify(v2);
  return protocol witness for EntityGestureRecognizer.entity.modify in conformance EntityTranslationGestureRecognizer;
}

uint64_t type metadata accessor for EntityRotationGestureRecognizer()
{
  return self;
}

uint64_t sub_1E2A56430@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

uint64_t method lookup function for EntityRotationGestureRecognizer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EntityRotationGestureRecognizer);
}

uint64_t dispatch thunk of EntityRotationGestureRecognizer.entity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t dispatch thunk of EntityRotationGestureRecognizer.entity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of EntityRotationGestureRecognizer.entity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t static MeshResource.__generateFace(from:fillMesh:)(void *a1)
{
  uint64_t v2 = type metadata accessor for __AnyARKitObject();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = a1;
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARFaceGeometry);
  id v6 = a1;
  __AnyARKitObject.init<A>(_:)();
  uint64_t v7 = static MeshResource.__generateFace(from:fillMesh:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t AnchorEntity.__allocating_init(anchor:)(void *a1)
{
  return AnchorEntity.__allocating_init(anchor:)(a1, (unint64_t *)&lazy cache variable for type metadata for ARAnchor, 0x1E4F14E88, MEMORY[0x1E4F3A7A8]);
}

uint64_t AnchorEntity.__allocating_init(raycastResult:)(void *a1)
{
  return AnchorEntity.__allocating_init(anchor:)(a1, &lazy cache variable for type metadata for ARRaycastResult, 0x1E4F14F00, MEMORY[0x1E4F3A7A0]);
}

uint64_t AnchorEntity.__allocating_init(anchor:)(void *a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v7 = type metadata accessor for __AnyARKitObject();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = a1;
  type metadata accessor for ARReferenceObject(0, a2);
  id v10 = a1;
  __AnyARKitObject.init<A>(_:)();
  uint64_t v11 = a4(v9);

  return v11;
}

void AnchoringComponent.init(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for __AnyARKitObject();
  MEMORY[0x1F4188790](v2 - 8);
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  id v3 = a1;
  __AnyARKitObject.init<A>(_:)();
  AnchoringComponent.init(_:)();
}

ARReferenceObject_optional __swiftcall __ARReferenceProviding.fetchReferenceObject(group:name:)(Swift::String group, Swift::String name)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of __ARReferenceProviding.__fetchReferenceObject(group:name:)();
  uint64_t v5 = type metadata accessor for __AnyARKitObject();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of __AnyARKitObject?((uint64_t)v4);
    uint64_t v8 = 0;
  }
  else
  {
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
    __AnyARKitObject.as<A>(type:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v8 = (objc_class *)v9[1];
  }
  result.value.super.Class isa = v8;
  result.is_nil = v7;
  return result;
}

uint64_t outlined destroy of __AnyARKitObject?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __ARReferenceProviding.fetchReferenceImage(group:name:physicalWidth:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:)();
  uint64_t v3 = type metadata accessor for __AnyARKitObject();
  uint64_t v4 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    outlined destroy of __AnyARKitObject?((uint64_t)v2);
    return 0;
  }
  else
  {
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    __AnyARKitObject.as<A>(type:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v2, v3);
    return v6[1];
  }
}

Swift::Bool __swiftcall __REAnchoringType.isEqualToARAnchor(anchor:)(ARAnchor *anchor)
{
  uint64_t v2 = type metadata accessor for __AnyARKitObject();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[1] = anchor;
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  uint64_t v6 = anchor;
  __AnyARKitObject.init<A>(_:)();
  LOBYTE(anchor) = __REAnchoringType.isEqualToARAnchor(anchor:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return anchor & 1;
}

uint64_t static ShapeResource.generateStaticMesh(from:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for __AnyARKitObject();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](static ShapeResource.generateStaticMesh(from:), 0, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 72) = v1;
  swift_task_dealloc();
  (*(void (**)(void, void))(v4[6] + 8))(v4[7], v4[5]);
  if (v1)
  {
    return MEMORY[0x1F4188298](static ShapeResource.generateStaticMesh(from:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v5[1];
    return v6(a1);
  }
}

uint64_t static ShapeResource.generateStaticMesh(from:)()
{
  uint64_t v1 = (void *)v0[3];
  v0[2] = v1;
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARMeshAnchor);
  id v2 = v1;
  __AnyARKitObject.init<A>(_:)();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[8] = v3;
  *uint64_t v3 = v0;
  v3[1] = static ShapeResource.generateStaticMesh(from:);
  uint64_t v4 = v0[7];
  return MEMORY[0x1F40F50A0](v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void __swiftcall EntityGestureRecognizer.planeForUnprojection(heightOffset:)(simd_float4x4_optional *__return_ptr retstr, Swift::Float_optional *heightOffset)
{
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v9 = type metadata accessor for AnchoringComponent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v64.i8[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  objc_super v16 = &v64.i8[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  char v18 = (uint64_t *)((char *)v64.i64 - v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v6, v5);
  float32x4_t v21 = 0uLL;
  if (!v19)
  {
    Swift::Bool v28 = 1;
    float32x4_t v29 = 0uLL;
LABEL_19:
    retstr->value.columns[0].i64[0] = 0;
    retstr->value.columns[0].i64[1] = 0;
    retstr->value.columns[1] = (simd_float4)v21;
    retstr->value.columns[2].i64[0] = 0;
    retstr->value.columns[2].i64[1] = 0;
    retstr->value.columns[3] = (simd_float4)v29;
    retstr->is_nil = v28;
    return;
  }
  uint64_t v22 = v19;
  v66.i64[0] = v4;
  int v68 = retstr;
  LODWORD(v20) = heightOffset;
  if (((unint64_t)heightOffset & 0x100000000) != 0) {
    *(float *)&long long v20 = 0.0;
  }
  long long v67 = v20;
  uint64_t v23 = Entity.anchor.getter();
  if (v23)
  {
    uint64_t v25 = v23;
    uint64_t v26 = v24;
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
    v64.i64[0] = v9;
    v65.i64[0] = v22;
    *char v18 = v25;
    v18[1] = v26;
    swift_retain();
    HasAnchoring.anchoring.getter();
    AnchoringComponent.target.getter();
    (*(void (**)(__int8 *, uint64_t))(v10 + 8))(v12, v64.i64[0]);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v18, 0, 1, v27);
    swift_release();
  }
  else
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v18, 1, 1, v30);
  }
  outlined init with copy of (HasAnchoring, AnchoringComponent.Target)?((uint64_t)v18, (uint64_t)v16);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target));
  if ((*(unsigned int (**)(__int8 *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v16, 1, v31) == 1)
  {
    HasTransform.transformMatrix(relativeTo:)();
    float32x4_t v65 = v32;
    float32x4_t v66 = v33;
    swift_release();
    int8x16_t v34 = (int8x16_t)vmulq_f32(v65, v65);
    *(float32x2_t *)v34.i8 = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
    v34.i32[0] = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1)).u32[0];
    float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    float32x2_t v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    float32x4_t v65 = vmulq_n_f32(v65, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    outlined destroy of (HasAnchoring, AnchoringComponent.Target)?((uint64_t)v18);
LABEL_17:
    float32x4_t v21 = v65;
LABEL_18:
    retstr = v68;
    Swift::Bool v28 = 0;
    float32x4_t v29 = vaddq_f32(v66, vmulq_n_f32(v21, *(float *)&v67));
    goto LABEL_19;
  }
  __int16 v37 = &v16[*(int *)(v31 + 48)];
  uint64_t v38 = type metadata accessor for AnchoringComponent.Target();
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v39 + 88))(v37, v38) != *MEMORY[0x1E4F3A950])
  {
    HasTransform.transformMatrix(relativeTo:)();
    float32x4_t v65 = v48;
    float32x4_t v66 = v49;
    swift_release();
    swift_release();
    int8x16_t v50 = (int8x16_t)vmulq_f32(v65, v65);
    *(float32x2_t *)v50.i8 = vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
    v50.i32[0] = vadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v50.i8, 1)).u32[0];
    float32x2_t v51 = vrsqrte_f32((float32x2_t)v50.u32[0]);
    float32x2_t v52 = vmul_f32(v51, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v51, v51)));
    float32x4_t v65 = vmulq_n_f32(v65, vmul_f32(v52, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v52, v52))).f32[0]);
    outlined destroy of (HasAnchoring, AnchoringComponent.Target)?((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    goto LABEL_17;
  }
  uint64_t v40 = (uint64_t)v18;
  swift_release();
  id v41 = objc_msgSend((id)v66.i64[0], sel_view);
  if (!v41)
  {
LABEL_21:
    swift_release();
    outlined destroy of (HasAnchoring, AnchoringComponent.Target)?(v40);
    Swift::Bool v28 = 1;
    float32x4_t v29 = 0uLL;
    retstr = v68;
    float32x4_t v21 = 0uLL;
    goto LABEL_19;
  }
  uint64_t v42 = v41;
  type metadata accessor for ARView();
  uint64_t v43 = swift_dynamicCastClass();
  if (!v43)
  {

    goto LABEL_21;
  }
  if (*(void *)(v43 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    if (active)
    {
      type metadata accessor for Entity();
      HasTransform.transformMatrix(relativeTo:)();
      Transform.init(matrix:)();
      float32x4_t v65 = v46;
      float32x4_t v66 = v45;
      int8x16_t v64 = v47;

      swift_release();
    }
    else
    {
      Transform.init()();
      float32x4_t v65 = v54;
      float32x4_t v66 = v53;
      int8x16_t v64 = v55;
    }
    specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v64.i64, v65);
    float32x4_t v65 = v56;
    float32x4_t v66 = v57;
    HasTransform.position(relativeTo:)();
    int8x16_t v64 = v58;
    swift_release();
    float32x4_t v59 = vsubq_f32((float32x4_t)0, v65);
    v60.i32[0] = vextq_s8(v64, v64, 8uLL).u32[0];
    v60.i32[1] = 1.0;
    float32x2_t v61 = vadd_f32(vmul_f32(vsub_f32(*(float32x2_t *)v64.i8, *(float32x2_t *)v66.f32), *(float32x2_t *)v59.f32), vmul_f32(vsub_f32(v60, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL)));
    int8x16_t v62 = (int8x16_t)vmulq_f32(v59, v59);
    *(float32x2_t *)v62.i8 = vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
    float32x4_t v63 = vaddq_f32(v66, vmulq_n_f32(v59, vadd_f32(v61, (float32x2_t)vdup_lane_s32((int32x2_t)v61, 1)).f32[0]));
    v61.i32[0] = vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1)).u32[0];
    *(float32x2_t *)v62.i8 = vrsqrte_f32((float32x2_t)v61.u32[0]);
    *(float32x2_t *)v62.i8 = vmul_f32(*(float32x2_t *)v62.i8, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8)));
    float32x4_t v65 = vmulq_n_f32(v59, vmul_f32(*(float32x2_t *)v62.i8, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(*(float32x2_t *)v62.i8, *(float32x2_t *)v62.i8))).f32[0]);
    float32x4_t v66 = v63;
    outlined destroy of (HasAnchoring, AnchoringComponent.Target)?(v40);
    float32x4_t v21 = vsubq_f32((float32x4_t)0, v65);
    goto LABEL_18;
  }
  __break(1u);
}

uint64_t EntityGestureRecognizer.location(in:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_view);
  objc_msgSend(v1, sel_locationInView_, v3);
  double v5 = v4;
  double v7 = v6;

  id v8 = objc_msgSend(v1, sel_view);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  type metadata accessor for ARView();
  if (!swift_dynamicCastClass()
    || (LOBYTE(v17[0]) = 1,
        EntityGestureRecognizer.planeForUnprojection(heightOffset:)(&v16, (Swift::Float_optional *)0x100000000),
        outlined init with take of simd_float4x4?((uint64_t)&v16, (uint64_t)v17),
        v20 == 1)
    || (uint64_t v10 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v5, v7, *(double *)v17, (float32x4_t)v17[1], *(double *)&v18, v19), (v11 & 1) != 0))
  {

    return 0;
  }
  uint64_t v12 = v10;
  if (a1)
  {
    type metadata accessor for Entity();
    HasTransform.convert(position:from:)();
    uint64_t v15 = v13;

    return v15;
  }
  else
  {
  }
  return v12;
}

{
  return EntityGestureRecognizer.location(in:)(a1);
}

uint64_t dispatch thunk of EntityGestureRecognizer.entity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of EntityGestureRecognizer.entity.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of EntityGestureRecognizer.entity.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of EntityGestureRecognizer.location(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t outlined init with copy of (HasAnchoring, AnchoringComponent.Target)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (HasAnchoring, AnchoringComponent.Target)?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HasAnchoring, AnchoringComponent.Target)?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id PointLightComponent.color.getter()
{
  uint64_t v0 = (void *)PointLightComponent.__color.getter();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v0);

  return v1;
}

void key path getter for PointLightComponent.color : PointLightComponent(void *a1@<X8>)
{
  uint64_t v2 = (void *)PointLightComponent.__color.getter();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v2);

  *a1 = v3;
}

void key path setter for PointLightComponent.color : PointLightComponent(id *a1)
{
  id v2 = *a1;
  id v1 = objc_msgSend(v2, sel_CGColor);
  PointLightComponent.__color.setter();
}

void PointLightComponent.color.setter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  PointLightComponent.__color.setter();
}

void (*PointLightComponent.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  id v3 = (void *)PointLightComponent.__color.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return PointLightComponent.color.modify;
}

void PointLightComponent.color.modify(void **a1, char a2)
{
  id v2 = *a1;
  id v6 = *a1;
  if (a2)
  {
    id v3 = v2;
    id v4 = objc_msgSend(v3, sel_CGColor);
    PointLightComponent.__color.setter();
  }
  else
  {
    id v5 = objc_msgSend(v2, sel_CGColor);
    PointLightComponent.__color.setter();
  }
}

void PointLightComponent.init(color:intensity:attenuationRadius:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  PointLightComponent.init(cgColor:intensity:attenuationRadius:)();
}

void PointLightComponent.init(color:intensity:attenuationRadius:attenuationFalloffExponent:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  PointLightComponent.init(cgColor:intensity:attenuationRadius:attenuationFalloffExponent:)();
}

uint64_t PointLightComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v22[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PointLightComponent();
  MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1E2ABF180;
  *(void *)(v12 + 32) = 0x726F6C6F63;
  *(void *)(v12 + 40) = 0xE500000000000000;
  uint64_t v13 = (void *)PointLightComponent.__color.getter();
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v13);

  unint64_t v15 = type metadata accessor for UIColor();
  *(void *)(v12 + 48) = v14;
  *(void *)(v12 + 72) = v15;
  *(void *)(v12 + 80) = 0x7469736E65746E69;
  *(void *)(v12 + 88) = 0xE900000000000079;
  PointLightComponent.intensity.getter();
  uint64_t v16 = MEMORY[0x1E4FBB470];
  *(_DWORD *)(v12 + 96) = v17;
  *(void *)(v12 + 120) = v16;
  *(void *)(v12 + 128) = 0xD000000000000011;
  *(void *)(v12 + 136) = 0x80000001E2AB9300;
  PointLightComponent.attenuationRadius.getter();
  *(_DWORD *)(v12 + 144) = v18;
  *(void *)(v12 + 168) = v16;
  *(void *)(v12 + 176) = 0xD00000000000001ALL;
  *(void *)(v12 + 184) = 0x80000001E2AB9320;
  PointLightComponent.attenuationFalloffExponent.getter();
  *(void *)(v12 + 216) = v16;
  *(_DWORD *)(v12 + 192) = v19;
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result = lazy cache variable for type metadata for UIColor;
  if (!lazy cache variable for type metadata for UIColor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  }
  return result;
}

uint64_t ARView.RenderOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ARView.RenderOptions.disableCameraGrain.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.RenderOptions.disableAutomaticLighting.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.RenderOptions.disableGroundingShadows.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static ARView.RenderOptions.disableMotionBlur.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static ARView.RenderOptions.disableDepthOfField.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static ARView.RenderOptions.disableHDR.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static ARView.RenderOptions.disableFaceOcclusions.getter(void *a1@<X8>)
{
  *a1 = 64;
}

void static ARView.RenderOptions.disablePersonOcclusion.getter(void *a1@<X8>)
{
  *a1 = 128;
}

void static ARView.RenderOptions.disableAREnvironmentLighting.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static ARView.RenderOptions.__disableLocalizedProbes.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static ARView.RenderOptions.disableFaceMesh.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

uint64_t ARView.RenderOptions.rawValue.getter()
{
  return *(void *)v0;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance ARView.RenderOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance ARView.RenderOptions(void *a1@<X8>)
{
  *a1 = 0;
}

void *protocol witness for SetAlgebra.union(_:) in conformance ARView.RenderOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance ARView.RenderOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ARView.RenderOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ARView.RenderOptions(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *protocol witness for SetAlgebra.remove(_:) in conformance ARView.RenderOptions@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance ARView.RenderOptions@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance ARView.RenderOptions(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance ARView.RenderOptions(void *result)
{
  *v1 &= *result;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ARView.RenderOptions(void *result)
{
  *v1 ^= *result;
  return result;
}

void *protocol witness for SetAlgebra.subtracting(_:) in conformance ARView.RenderOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ARView.RenderOptions(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ARView.RenderOptions(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance ARView.RenderOptions(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ARView.RenderOptions()
{
  return *v0 == 0;
}

void *protocol witness for SetAlgebra.subtract(_:) in conformance ARView.RenderOptions(void *result)
{
  *v1 &= ~*result;
  return result;
}

void ARView.renderOptions.getter(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *a1 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
  }
  else {
    __break(1u);
  }
}

void ARView.renderOptions.setter(void *a1)
{
  uint64_t v2 = *(char **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    uint64_t v3 = *(void *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions];
    *(void *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] = *a1;
    uint64_t v5 = v3;
    uint64_t v4 = v2;
    RKARSystem.renderOptions.didset(&v5);
  }
  else
  {
    __break(1u);
  }
}

void *ARView.renderOptions.modify(void *result)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  result[1] = v1;
  result[2] = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *unint64_t result = *(void *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
    return ARView.renderOptions.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.renderOptions.modify(void *a1, char a2)
{
  uint64_t v2 = *(char **)(a1[1] + a1[2]);
  if (a2)
  {
    if (v2)
    {
LABEL_5:
      uint64_t v3 = *(void *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions];
      *(void *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] = *a1;
      uint64_t v5 = v3;
      uint64_t v4 = v2;
      RKARSystem.renderOptions.didset(&v5);

      return;
    }
    __break(1u);
  }
  if (v2) {
    goto LABEL_5;
  }
  __break(1u);
}

BOOL static ARView.__RenderQuality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ARView.__RenderQuality.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ARView.__RenderQuality.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ARView.__renderQuality.getter(unsigned char *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *a1 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality);
  }
  else {
    __break(1u);
  }
}

unsigned char *ARView.__renderQuality.setter(unsigned char *result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality) = *result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t (*ARView.__renderQuality.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(void *)unint64_t result = v1;
  *((void *)result + 1) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *((unsigned char *)result + 16) = *(unsigned char *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality);
    return ARView.__renderQuality.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__renderQuality.modify(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(*(void *)result + *(void *)(result + 8));
  if (a2)
  {
    if (v2)
    {
LABEL_5:
      *(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality) = *(unsigned char *)(result + 16);
      return result;
    }
    __break(1u);
  }
  if (v2) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void *one-time initialization function for gpuClass()
{
  unint64_t result = MTLCreateSystemDefaultDevice();
  if (result)
  {
    uint64_t v1 = result;
    if (objc_msgSend(result, sel_supportsFamily_, 1005))
    {
      unint64_t result = (void *)swift_unknownObjectRelease();
      char v2 = 3;
    }
    else if (objc_msgSend(v1, sel_supportsFamily_, 1004))
    {
      unint64_t result = (void *)swift_unknownObjectRelease();
      char v2 = 2;
    }
    else if (objc_msgSend(v1, sel_supportsFamily_, 1003))
    {
      unint64_t result = (void *)swift_unknownObjectRelease();
      char v2 = 1;
    }
    else
    {
      unsigned int v3 = objc_msgSend(v1, sel_supportsFamily_, 1002);
      unint64_t result = (void *)swift_unknownObjectRelease();
      if (v3) {
        char v2 = 0;
      }
      else {
        char v2 = 4;
      }
    }
  }
  else
  {
    char v2 = 4;
  }
  static RKARSystem.gpuClass = v2;
  return result;
}

{
  void *result;
  void *v1;
  char v2;
  unsigned int v3;

  unint64_t result = MTLCreateSystemDefaultDevice();
  if (result)
  {
    uint64_t v1 = result;
    if (objc_msgSend(result, sel_supportsFamily_, 1005))
    {
      unint64_t result = (void *)swift_unknownObjectRelease();
      char v2 = 3;
    }
    else if (objc_msgSend(v1, sel_supportsFamily_, 1004))
    {
      unint64_t result = (void *)swift_unknownObjectRelease();
      char v2 = 2;
    }
    else if (objc_msgSend(v1, sel_supportsFamily_, 1003))
    {
      unint64_t result = (void *)swift_unknownObjectRelease();
      char v2 = 1;
    }
    else
    {
      unsigned int v3 = objc_msgSend(v1, sel_supportsFamily_, 1002);
      unint64_t result = (void *)swift_unknownObjectRelease();
      if (v3) {
        char v2 = 0;
      }
      else {
        char v2 = 4;
      }
    }
  }
  else
  {
    char v2 = 4;
  }
  static RealityFusionSession.gpuClass = v2;
  return result;
}

void one-time initialization function for socIdentifier()
{
  id v0 = MTLCreateSystemDefaultDevice();
  if (v0)
  {
    id v1 = objc_msgSend(v0, sel_name);
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v4 = v3;
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  static RKARSystem.socIdentifier = v2;
  *(void *)algn_1EADD5658 = v4;
}

void one-time initialization function for nonARKitModelIdentifiers()
{
  static RKARSystem.nonARKitModelIdentifiers = (uint64_t)&outlined read-only object #0 of one-time initialization function for nonARKitModelIdentifiers;
}

uint64_t one-time initialization function for modelIdentifier()
{
  uint64_t result = specialized static RKARSystem.__queryModelIdentifier()();
  static RKARSystem.modelIdentifier = result;
  *(void *)algn_1EADD5668 = v1;
  return result;
}

Swift::Void __swiftcall RKARSystem.setDefaultRenderSettings()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for __AssetRef();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!swift_weakLoadStrong())
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v6 = dispatch thunk of __Engine.services.getter();
  swift_release();
  if (!v6)
  {
LABEL_25:
    __break(1u);
    JUMPOUT(0x1E2A58CA0);
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  uint64_t v7 = v30;
  uint64_t v8 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  uint64_t v9 = OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions;
  RERenderManagerSetEnableProbeLighting();
  RKARSystem.showGroundingShadow(_:)((*(void *)(v1 + v9) & 4) == 0);
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, v2);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  v10(v5, v2);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  v10(v5, v2);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();
  if (one-time initialization token for gpuClass != -1) {
    swift_once();
  }
  switch(static RKARSystem.gpuClass)
  {
    case 1:
      uint64_t v15 = *(void *)(v1 + v9);
      *(void *)(v1 + v9) = v15 | 0x10;
      v28[0] = v15;
      RKARSystem.renderOptions.didset(v28);
      uint64_t v16 = *(void *)(v1 + v9);
      *(void *)(v1 + v9) = v16 | 8;
      v28[0] = v16;
      RKARSystem.renderOptions.didset(v28);
      if (one-time initialization token for socIdentifier != -1) {
        swift_once();
      }
      v28[0] = static RKARSystem.socIdentifier;
      v28[1] = *(void *)algn_1EADD5658;
      v27[0] = 57;
      v27[1] = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      if (StringProtocol.contains<A>(_:)())
      {
        uint64_t v17 = *(void *)(v1 + v9);
        uint64_t v18 = v17 | 0x20;
        goto LABEL_12;
      }
      goto LABEL_16;
    case 2:
      uint64_t v19 = *(void *)(v1 + v9);
      *(void *)(v1 + v9) = v19 | 0x10;
      v28[0] = v19;
      RKARSystem.renderOptions.didset(v28);
      uint64_t v13 = *(void *)(v1 + v9);
      uint64_t v14 = v13 | 8;
      goto LABEL_14;
    case 3:
      uint64_t v17 = *(void *)(v1 + v9);
      uint64_t v18 = v17 | 0x10;
LABEL_12:
      *(void *)(v1 + v9) = v18;
      v28[0] = v17;
      goto LABEL_15;
    default:
      uint64_t v11 = *(void *)(v1 + v9);
      *(void *)(v1 + v9) = v11 | 0x10;
      v28[0] = v11;
      RKARSystem.renderOptions.didset(v28);
      uint64_t v12 = *(void *)(v1 + v9);
      *(void *)(v1 + v9) = v12 | 8;
      v28[0] = v12;
      RKARSystem.renderOptions.didset(v28);
      uint64_t v13 = *(void *)(v1 + v9);
      uint64_t v14 = v13 | 0x20;
LABEL_14:
      *(void *)(v1 + v9) = v14;
      v28[0] = v13;
LABEL_15:
      RKARSystem.renderOptions.didset(v28);
LABEL_16:
      if (one-time initialization token for modelIdentifier != -1) {
        swift_once();
      }
      uint64_t v21 = static RKARSystem.modelIdentifier;
      uint64_t v20 = *(void *)algn_1EADD5668;
      uint64_t v22 = one-time initialization token for nonARKitModelIdentifiers;
      swift_bridgeObjectRetain();
      if (v22 != -1) {
        swift_once();
      }
      char v23 = specialized Sequence<>.contains(_:)(v21, v20, (void *)static RKARSystem.nonARKitModelIdentifiers);
      swift_bridgeObjectRelease();
      if (v23)
      {
        RKARSystem.cameraRenderGraph.getter();
        RERenderGraphAssetSetRuntimeNodeStringSetting();
        RERenderGraphAssetSetRuntimeNodeStringSetting();
        uint64_t v24 = MEMORY[0x1E4E64ED0](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
        if (v24)
        {
          uint64_t v25 = (void *)v24;
          uint64_t v26 = (unsigned char *)(v24 + OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices);
          swift_beginAccess();
          *uint64_t v26 = 1;
        }
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      return;
  }
}

Swift::Void __swiftcall RKARSystem.showGroundingShadow(_:)(Swift::Bool a1)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode) & 1) == 0)
  {
    if (swift_weakLoadStrong())
    {
      uint64_t v3 = dispatch thunk of __Engine.services.getter();
      swift_release();
      if (!v3) {
        return;
      }
      uint64_t v4 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
      swift_release();
      if (!MEMORY[0x1E4E64140](v4)) {
        return;
      }
_REShadowManagerSetEnabled:
      MEMORY[0x1F4114B38]();
      return;
    }
    __break(1u);
LABEL_15:
    __break(1u);
    goto _REShadowManagerSetEnabled;
  }
  uint64_t v2 = MEMORY[0x1E4E64ED0](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!v2) {
    return;
  }
  id v5 = (id)v2;
  if (!*(void *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
    goto LABEL_15;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  RERayTracedShadowReceiverSetVisibleForScene();
}

unint64_t lazy protocol witness table accessor for type ARView.RenderOptions and conformance ARView.RenderOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions;
  if (!lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions;
  if (!lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions;
  if (!lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions;
  if (!lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.RenderOptions and conformance ARView.RenderOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARView.__RenderQuality and conformance ARView.__RenderQuality()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.__RenderQuality and conformance ARView.__RenderQuality;
  if (!lazy protocol witness table cache variable for type ARView.__RenderQuality and conformance ARView.__RenderQuality)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__RenderQuality and conformance ARView.__RenderQuality);
  }
  return result;
}

void *sub_1E2A58FA8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *a2 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_1E2A58FDC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  ARView.renderOptions.setter(&v1);
}

void *sub_1E2A59014@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *a2 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality);
  }
  else {
    __break(1u);
  }
  return result;
}

unsigned char *sub_1E2A59048(unsigned char *result, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality) = *result;
  }
  else {
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.RenderOptions()
{
  return &type metadata for ARView.RenderOptions;
}

uint64_t getEnumTagSinglePayload for ARView.__RenderQuality(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ARView.__RenderQuality(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A591E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.__RenderQuality()
{
  return &type metadata for ARView.__RenderQuality;
}

unsigned char *storeEnumTagSinglePayload for RKARSystem.GroundingShadowMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A592ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RKARSystem.GroundingShadowMode()
{
  return &type metadata for RKARSystem.GroundingShadowMode;
}

unint64_t lazy protocol witness table accessor for type RKARSystem.GroundingShadowMode and conformance RKARSystem.GroundingShadowMode()
{
  unint64_t result = lazy protocol witness table cache variable for type RKARSystem.GroundingShadowMode and conformance RKARSystem.GroundingShadowMode;
  if (!lazy protocol witness table cache variable for type RKARSystem.GroundingShadowMode and conformance RKARSystem.GroundingShadowMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RKARSystem.GroundingShadowMode and conformance RKARSystem.GroundingShadowMode);
  }
  return result;
}

uint64_t specialized static RKARSystem.__queryModelIdentifier()()
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for Mirror();
  uint64_t v35 = *(void *)(v0 - 8);
  uint64_t v36 = v0;
  MEMORY[0x1F4188790](v0);
  int v2 = (char *)&v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(&v39, 0x500uLL);
  uname(&v39);
  long long v28 = *(_OWORD *)&v39.machine[16];
  long long v29 = *(_OWORD *)v39.machine;
  long long v26 = *(_OWORD *)&v39.machine[48];
  long long v27 = *(_OWORD *)&v39.machine[32];
  long long v37 = *(_OWORD *)&v39.machine[64];
  long long v33 = *(_OWORD *)&v39.machine[96];
  long long v34 = *(_OWORD *)&v39.machine[80];
  long long v31 = *(_OWORD *)&v39.machine[128];
  long long v32 = *(_OWORD *)&v39.machine[112];
  long long v30 = *(_OWORD *)&v39.machine[144];
  *((void *)&v45 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, Int8, In);
  int v3 = (_OWORD *)swift_allocObject();
  *(void *)&long long v44 = v3;
  long long v4 = v28;
  v3[1] = v29;
  v3[2] = v4;
  long long v5 = v26;
  v3[3] = v27;
  v3[4] = v5;
  long long v6 = *(_OWORD *)&v39.machine[160];
  long long v7 = *(_OWORD *)&v39.machine[176];
  long long v8 = *(_OWORD *)&v39.machine[192];
  long long v9 = *(_OWORD *)&v39.machine[208];
  long long v10 = *(_OWORD *)&v39.machine[224];
  long long v11 = *(_OWORD *)&v39.machine[240];
  long long v12 = v34;
  v3[5] = v37;
  v3[6] = v12;
  long long v13 = v32;
  v3[7] = v33;
  v3[8] = v13;
  long long v14 = v30;
  v3[9] = v31;
  v3[10] = v14;
  v3[11] = v6;
  v3[12] = v7;
  v3[13] = v8;
  v3[14] = v9;
  v3[15] = v10;
  v3[16] = v11;
  Mirror.init(reflecting:)();
  *(void *)&long long v34 = v2;
  *(void *)&long long v33 = Mirror.children.getter();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v46 + 1))
  {
    uint64_t v15 = 0;
    uint64_t v16 = &v41;
    unint64_t v17 = 0xE000000000000000;
    uint64_t v18 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      long long v42 = v44;
      v43[0] = v45;
      v43[1] = v46;
      long long v40 = v44;
      outlined init with copy of Any((uint64_t)v43, (uint64_t)v16);
      if (swift_dynamicCast() && v38)
      {
        if ((v38 & 0x80) != 0)
        {
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v20 = v16;
        uint64_t v21 = v18;
        *(void *)&long long v40 = v38;
        *(void *)&long long v37 = MEMORY[0x1E4E62C80](&v40, 1);
        char v23 = v22;
        *(void *)&long long v40 = v15;
        *((void *)&v40 + 1) = v17;
        swift_bridgeObjectRetain();
        v24._countAndFlagsBits = v37;
        v24._object = v23;
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        unint64_t v19 = *((void *)&v40 + 1);
        uint64_t v15 = v40;
        uint64_t v18 = v21;
        uint64_t v16 = v20;
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v19 = v17;
      }
      outlined destroy of (label: String?, value: Any)((uint64_t)&v42);
      swift_bridgeObjectRelease();
      dispatch thunk of _AnyIteratorBoxBase.next()();
      unint64_t v17 = v19;
      if (!*((void *)&v46 + 1)) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v15 = 0;
LABEL_10:
  swift_release();
  swift_release();
  (*(void (**)(void, uint64_t))(v35 + 8))(v34, v36);
  return v15;
}

uint64_t sub_1E2A59728()
{
  return MEMORY[0x1F4186498](v0, 272, 7);
}

uint64_t outlined destroy of (label: String?, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void specialized SIMD.subscript.getter(__n128 a1, double a2)
{
  unint64_t v2 = a1.n128_u8[0] & 3;
  if (a1.n128_i64[0] <= 0) {
    unint64_t v2 = -(-a1.n128_u64[0] & 3);
  }
  unint64_t v3 = a1.n128_u8[8] & 3;
  if (a1.n128_i64[1] <= 0) {
    unint64_t v3 = -(-a1.n128_u64[1] & 3);
  }
  uint64_t v4 = LOBYTE(a2) & 3;
  if (*(uint64_t *)&a2 <= 0) {
    uint64_t v4 = -(-*(void *)&a2 & 3);
  }
  if (((v2 | v4 | v3) & 0x8000000000000000) != 0) {
    __break(1u);
  }
}

uint64_t ARView.unproject(_:ontoPlane:)(double a1, double a2, double a3, float32x4_t a4, double a5, float32x4_t a6)
{
  return ARView.unproject(_:ontoPlane:relativeToCamera:)(0, a1, a2, a3, a4, a5, a6);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  long long v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t ARView.project(_:)(double a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    return ARView.project(_:isAR:)((*(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) == 0, a1);
  }
  __break(1u);
  return result;
}

uint64_t ARView.project(_:isAR:)(uint64_t result, double a2)
{
  uint64_t v3 = v2;
  if ((result & 1) == 0)
  {
    if (!*(void *)&v2[OBJC_IVAR____TtC10RealityKit6ARView__scene])
    {
      __break(1u);
      goto LABEL_21;
    }
    swift_retain();
    uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    if (!active) {
      return 0;
    }
    Entity.coreEntity.getter();
    REPerspectiveCameraComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      objc_msgSend(v3, sel_bounds);
      REPerspectiveCameraComponentCalculateProjectionWithAspectRatio();
      objc_msgSend(v3, sel_bounds);
      REPerspectiveCameraComponentAdjustProjectionAspect();
    }
    else
    {
      Entity.coreEntity.getter();
      RECustomMatrixCameraComponentGetComponentType();
      if (!REEntityGetComponentByClass())
      {
        char v14 = 1;
        goto LABEL_14;
      }
      RECustomMatrixCameraComponentCalculateProjection();
      objc_msgSend(v3, sel_bounds);
      RECustomMatrixCameraComponentAdjustProjectionAspect();
    }
    REConvertProjectionToMatrix4x4();
    char v14 = 0;
LABEL_14:
    Entity.coreEntity.getter();
    RETransformComponentGetComponentType();
    if (!REEntityGetComponentByClass())
    {
      swift_release();
      return 0;
    }
    RETransformComponentGetWorldMatrix4x4F();
    __invert_f4(v22);
    uint64_t result = simd_float4x4.transform(position:)();
    if ((v14 & 1) == 0)
    {
      REProjectionProjectPoint();
      double v16 = (float)((float)(v15 + 1.0) * 0.5);
      objc_msgSend(v3, sel_bounds);
      double v18 = v17 * v16;
      objc_msgSend(v3, sel_bounds);
      objc_msgSend(v3, sel_bounds);
      double v20 = v18 + v19;
      objc_msgSend(v3, sel_bounds);
      swift_release();
      return *(void *)&v20;
    }
LABEL_21:
    __break(1u);
    return result;
  }
  id v4 = objc_msgSend(v2, sel_session);
  id v5 = objc_msgSend(v4, sel_currentFrame);

  if (!v5) {
    return 0;
  }
  id v6 = objc_msgSend(v5, sel_camera);
  if (v3[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] == 1)
  {
    id v7 = *(id *)&v3[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation];
  }
  else
  {
    id v9 = objc_msgSend(self, sel_sharedApplication);
    id v7 = objc_msgSend(v9, sel_statusBarOrientation);
  }
  objc_msgSend(v3, sel_bounds);
  objc_msgSend(v6, sel_projectPoint_orientation_viewportSize_, v7, a2, v10, v11);
  uint64_t v13 = v12;

  return v13;
}

uint64_t ARView.unproject(_:viewport:)()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
    __break(1u);
  }
  swift_retain();
  uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  uint64_t v4 = 0;
  if (active)
  {
    Entity.coreEntity.getter();
    REPerspectiveCameraComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REPerspectiveCameraComponentCalculateProjectionWithAspectRatio();
      REPerspectiveCameraComponentAdjustProjectionAspect();
      REProjectionClipSpaceNearZ();
    }
    else
    {
      Entity.coreEntity.getter();
      RECustomMatrixCameraComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RECustomMatrixCameraComponentCalculateProjection();
        RECustomMatrixCameraComponentAdjustProjectionAspect();
        REProjectionClipSpaceNearZ();
      }
      else
      {
        Entity.coreEntity.getter();
        REOrthographicCameraComponentGetComponentType();
        if (!REEntityGetComponentByClass())
        {
          swift_release();
          return v4;
        }
        REOrthographicCameraComponentCalculateProjectionWithAspectRatio();
        REOrthographicCameraComponentAdjustProjectionAspect();
        REProjectionClipSpaceNearZ();
      }
    }
    REConvertProjectionToMatrix4x4();
    REProjectionUnprojectPoint();
    uint64_t v4 = v2;
    swift_release();
  }
  return v4;
}

uint64_t ARView.unproject(_:ontoPlane:relativeToCamera:)(uint64_t result, double a2, double a3, double a4, float32x4_t a5, double a6, float32x4_t a7)
{
  uint64_t v8 = *(void *)&v7[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v8)
  {
    id v9 = v7;
    char v10 = result;
    if ((*(unsigned char *)(v8 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) == 0)
    {
      id v34 = objc_msgSend(v7, sel_session);
      id v35 = objc_msgSend(v34, sel_currentFrame);

      if (v35)
      {
        if (v10)
        {
          id v36 = objc_msgSend(v35, sel_camera);
          objc_msgSend(v36, sel_transform);
          long long v41 = v37;
          long long v42 = v38;
        }
        id v39 = objc_msgSend(v35, sel_camera, v41, v42);
        if (v9[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] != 1)
        {
          id v40 = objc_msgSend(self, sel_sharedApplication);
          objc_msgSend(v40, sel_statusBarOrientation);
        }
        objc_msgSend(v9, sel_bounds);
        uint64_t v12 = ARCamera.unprojectPoint(_:ontoPlane:orientation:viewportSize:)();

        return v12;
      }
      return 0;
    }
    if (*(void *)&v7[OBJC_IVAR____TtC10RealityKit6ARView__scene])
    {
      swift_retain();
      uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
      swift_release();
      if (active)
      {
        objc_msgSend(v7, sel_bounds);
        uint64_t v12 = ARView.unproject(_:viewport:)();
        if (v13)
        {
          swift_release();
          return v12;
        }
        Entity.coreEntity.getter();
        RETransformComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          RETransformComponentGetWorldMatrix4x4F();
          float32x4_t v43 = v14;
          float32x4_t v44 = v15;
          float32x4_t v45 = v16;
          float32x4_t v46 = v17;
          simd_float4x4.transform(position:)();
          float32x4_t v19 = a5;
          float32x4_t v20 = a7;
          if (v10)
          {
            float32x4_t v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, a7.f32[0]), v44, *(float32x2_t *)a7.f32, 1), v45, a7, 2), v46, a7, 3);
            float32x4_t v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, a5.f32[0]), v44, *(float32x2_t *)a5.f32, 1), v45, a5, 2), v46, a5, 3);
          }
          float32x4_t v21 = vsubq_f32(v18, v46);
          int32x4_t v22 = (int32x4_t)vmulq_f32(v21, v21);
          v22.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v22, 2), vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v22.i8, 1))).u32[0];
          float32x2_t v23 = vrsqrte_f32((float32x2_t)v22.u32[0]);
          float32x2_t v24 = vmul_f32(v23, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v23, v23)));
          int32x4_t v25 = (int32x4_t)vmulq_n_f32(v21, vmul_f32(v24, vrsqrts_f32((float32x2_t)v22.u32[0], vmul_f32(v24, v24))).f32[0]);
          int32x4_t v26 = (int32x4_t)vsubq_f32(v20, v46);
          float32x2_t v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v25.i8, 0);
          v27.i32[0] = v26.i32[1];
          float32x2_t v48 = *(float32x2_t *)v25.i8;
          float32x2_t v50 = vadd_f32(vmul_laneq_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v26, v25), v19, 2), vadd_f32(vmul_f32(v27, (float32x2_t)vrev64_s32(*(int32x2_t *)v19.f32)), vmul_f32((float32x2_t)__PAIR64__(v25.u32[1], v26.u32[0]), *(float32x2_t *)v19.f32)));
          swift_release();
          if (v50.f32[1] <= -0.00000011921 || v50.f32[1] >= 0.00000011921)
          {
            __asm { FMOV            V1.2S, #1.0 }
            float32x2_t v33 = (float32x2_t)vand_s8(vbsl_s8((int8x8_t)0x8000000080000000, _D1, (int8x8_t)v50), vorr_s8((int8x8_t)vcltz_f32(v50), (int8x8_t)vcgtz_f32(v50)));
            if (vceq_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1)).u32[0]) {
              return (uint64_t)vadd_f32(*(float32x2_t *)v46.f32, vmul_n_f32(v48, v50.f32[0] / v50.f32[1]));
            }
          }
        }
        else
        {
          swift_release();
        }
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void ARView.ray(through:)(float32x4_t *a1@<X8>)
{
  if (*(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
    swift_retain();
    uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    float32x4_t v4 = 0uLL;
    if (!active)
    {
      char v8 = 1;
      float32x4_t v13 = 0uLL;
LABEL_8:
      *a1 = v4;
      a1[1] = v13;
      a1[2].i8[0] = v8;
      return;
    }
    objc_msgSend(v1, sel_bounds);
    ARView.unproject(_:viewport:)();
    if ((v5 & 1) == 0)
    {
      Entity.coreEntity.getter();
      RETransformComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RETransformComponentGetWorldMatrix4x4F();
        float32x4_t v14 = v6;
        simd_float4x4.transform(position:)();
        float32x4_t v15 = v7;
        swift_release();
        float32x4_t v4 = v14;
        char v8 = 0;
        float32x4_t v9 = vsubq_f32(v15, v14);
        v4.i32[3] = 0;
        int32x4_t v10 = (int32x4_t)vmulq_f32(v9, v9);
        v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
        float32x2_t v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
        float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
        float32x4_t v13 = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
      }
      else
      {
        swift_release();
        char v8 = 1;
        float32x4_t v13 = 0uLL;
        float32x4_t v4 = 0uLL;
      }
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t ARView.hitTest(_:query:mask:)()
{
  ARView.ray(through:)(v3);
  uint64_t result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v3, (uint64_t)&v4);
  if (v5) {
    return MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    uint64_t v2 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
    swift_release();
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t ARView.hitTest(_:requireInputTarget:query:mask:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputTargetComponent?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Entity.ComponentSet();
  uint64_t v4 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  float32x4_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InputTargetComponent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  float32x4_t v54 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CollisionCastHit();
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v11 = ((uint64_t (*)(uint64_t))MEMORY[0x1F4188790])(v10);
  id v39 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  float32x4_t v46 = (char *)&v37 - v13;
  ARView.ray(through:)(v60);
  uint64_t result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v60, (uint64_t)v61);
  if (v62)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  else
  {
    if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
      goto LABEL_44;
    }
    long long v55 = v61[0];
    long long v56 = v61[1];
    swift_retain();
    uint64_t v15 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
    uint64_t result = swift_release();
  }
  uint64_t v45 = *(void *)(v15 + 16);
  if (!v45)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v16 = 0;
  unint64_t v38 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  unint64_t v44 = v15 + v38;
  uint64_t v50 = v47 + 16;
  *(void *)&long long v56 = v4 + 8;
  float32x4_t v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  float32x4_t v53 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  float32x2_t v52 = (void (**)(char *, uint64_t))(v8 + 8);
  long long v41 = (uint64_t (**)(char *, uint64_t))(v47 + 8);
  long long v37 = (void (**)(unint64_t, char *, uint64_t))(v47 + 32);
  unint64_t v40 = MEMORY[0x1E4FBC860];
  float32x4_t v18 = v46;
  uint64_t v43 = v10;
  uint64_t v42 = v15;
  while (v16 < *(void *)(v15 + 16))
  {
    unint64_t v19 = v16;
    uint64_t v20 = *(void *)(v47 + 72);
    unint64_t v51 = v19 + 1;
    uint64_t v49 = v20;
    float32x2_t v48 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
    v48(v18, v44 + v20 * v19, v10);
    uint64_t v21 = CollisionCastHit.entity.getter();
    swift_getKeyPath();
    *(void *)&long long v55 = MEMORY[0x1E4FBC860];
    swift_retain();
    while (1)
    {
      dispatch thunk of Entity.components.getter();
      Entity.ComponentSet.subscript.getter();
      float32x2_t v23 = *(void (**)(char *, uint64_t))v56;
      (*(void (**)(char *, uint64_t))v56)(v6, v57);
      float32x2_t v24 = *v17;
      if ((*v17)(v3, 1, v7) == 1) {
        break;
      }
LABEL_16:
      (*v53)(v54, v3, v7);
      char v25 = InputTargetComponent.isEnabled.getter();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        int32x4_t v26 = (char *)v55;
      }
      else {
        int32x4_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v55 + 16) + 1, 1, (char *)v55);
      }
      unint64_t v28 = *((void *)v26 + 2);
      unint64_t v27 = *((void *)v26 + 3);
      if (v28 >= v27 >> 1) {
        int32x4_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v26);
      }
      *((void *)v26 + 2) = v28 + 1;
      *(void *)&long long v55 = v26;
      v26[v28 + 32] = v25 & 1;
      swift_release();
      (*v52)(v54, v7);
      uint64_t v58 = v21;
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      uint64_t v22 = v59;
      swift_retain();
      swift_release();
      if (!v22) {
        goto LABEL_22;
      }
      uint64_t v21 = v22;
    }
    while (1)
    {
      swift_release();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v3, &demangling cache variable for type metadata for InputTargetComponent?);
      uint64_t v58 = v21;
      swift_retain();
      swift_getAtKeyPath();
      swift_release();
      uint64_t v21 = v59;
      swift_retain();
      swift_release();
      if (!v21) {
        break;
      }
      dispatch thunk of Entity.components.getter();
      Entity.ComponentSet.subscript.getter();
      v23(v6, v57);
      if (v24(v3, 1, v7) != 1) {
        goto LABEL_16;
      }
    }
LABEL_22:
    swift_release();
    uint64_t result = v55;
    uint64_t v29 = *(void *)(v55 + 16);
    if (v29)
    {
      uint64_t v10 = v43;
      float32x4_t v18 = v46;
      uint64_t v15 = v42;
      if (*(unsigned char *)(v55 + 32) == 1)
      {
        if (v29 != 1)
        {
          uint64_t v30 = 33;
          do
          {
            uint64_t v31 = v30 - 31;
            if (__OFADD__(v30 - 32, 1))
            {
              __break(1u);
              goto LABEL_43;
            }
            int v32 = *(unsigned __int8 *)(v55 + v30++);
          }
          while (v32 == 1 && v31 != v29);
          if (!v32) {
            goto LABEL_7;
          }
        }
        swift_bridgeObjectRelease();
        v48(v39, (unint64_t)v18, v10);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v34 = v40;
        }
        else {
          unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1, v40);
        }
        unint64_t v36 = *(void *)(v34 + 16);
        unint64_t v35 = *(void *)(v34 + 24);
        if (v36 >= v35 >> 1) {
          unint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v34);
        }
        *(void *)(v34 + 16) = v36 + 1;
        unint64_t v40 = v34;
        (*v37)(v34 + v38 + v36 * v49, v39, v10);
      }
      else
      {
LABEL_7:
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v43;
      float32x4_t v18 = v46;
      uint64_t v15 = v42;
    }
    uint64_t result = (*v41)(v18, v10);
    unint64_t v16 = v51;
    if (v51 == v45)
    {
      swift_bridgeObjectRelease();
      return v40;
    }
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t ARView.entity(at:)()
{
  uint64_t v1 = type metadata accessor for CollisionGroup();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Type = type metadata accessor for CollisionCastQueryType();
  uint64_t v6 = *(void *)(Type - 8);
  MEMORY[0x1F4188790](Type);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  __n128 v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v6 + 104))(v8, *MEMORY[0x1E4F3A9E0], Type, v10);
  static CollisionGroup.all.getter();
  ARView.ray(through:)(v21);
  uint64_t result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v21, (uint64_t)v22);
  if (v23)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  else
  {
    if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      __break(1u);
      return result;
    }
    v20[0] = v22[0];
    v20[1] = v22[1];
    swift_retain();
    uint64_t v14 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, Type);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = type metadata accessor for CollisionCastHit();
  uint64_t v17 = *(void *)(v16 - 8);
  if (v15)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v12, v14+ ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80)), v16);
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v12, v18, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, v16) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v12, &demangling cache variable for type metadata for CollisionCastHit?);
    return 0;
  }
  else
  {
    uint64_t v19 = CollisionCastHit.entity.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v12, v16);
  }
  return v19;
}

uint64_t ARView.entities(at:)()
{
  uint64_t v25 = type metadata accessor for CollisionCastHit();
  uint64_t v1 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CollisionGroup();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Type = type metadata accessor for CollisionCastQueryType();
  uint64_t v9 = *(void *)(Type - 8);
  __n128 v10 = MEMORY[0x1F4188790](Type);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v9 + 104))(v12, *MEMORY[0x1E4F3A9D8], Type, v10);
  static CollisionGroup.all.getter();
  ARView.ray(through:)(v28);
  uint64_t result = outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?((uint64_t)v28, (uint64_t)v29);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if ((v30 & 1) == 0)
  {
    if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      __break(1u);
      return result;
    }
    long long v26 = v29[1];
    long long v24 = v29[0];
    swift_retain();
    uint64_t v14 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, Type);
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v27 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v17 = *(void *)(v1 + 16);
    uint64_t v16 = v1 + 16;
    *(void *)&long long v26 = v17;
    uint64_t v18 = *(unsigned __int8 *)(v16 + 64);
    *(void *)&long long v24 = v14;
    uint64_t v19 = v14 + ((v18 + 32) & ~v18);
    uint64_t v20 = *(void *)(v16 + 56);
    uint64_t v21 = v25;
    uint64_t v22 = (void (**)(char *, uint64_t))(v16 - 8);
    do
    {
      ((void (*)(char *, uint64_t, uint64_t))v26)(v3, v19, v21);
      CollisionCastHit.entity.getter();
      (*v22)(v3, v21);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v19 += v20;
      --v15;
    }
    while (v15);
    uint64_t v23 = v27;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v23;
}

uint64_t ARView.hitTest(_:types:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  id v8 = objc_msgSend(v3, sel_session);
  id v9 = objc_msgSend(v8, sel_currentFrame);

  if (!v9) {
    return MEMORY[0x1E4FBC860];
  }
  objc_msgSend(v4, sel_bounds);
  double v11 = a2 / v10;
  double v13 = a3 / v12;
  if (*((unsigned char *)v4 + OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating) != 1)
  {
    id v15 = objc_msgSend(self, sel_sharedApplication);
    objc_msgSend(v15, sel_statusBarOrientation);
  }
  id v16 = objc_msgSend(v9, sel_camera);
  objc_msgSend(v16, sel_imageResolution);

  ARViewToCameraImageTransform();
  v21.x = v11;
  v21.y = v13;
  CGPoint v17 = CGPointApplyAffineTransform(v21, &v20);
  id v18 = objc_msgSend(v9, sel_hitTest_types_, a1, v17.x, v17.y);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARHitTestResult);
  uint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v14;
}

ARRaycastQuery_optional __swiftcall ARView.makeRaycastQuery(from:allowing:alignment:)(CGPoint from, ARRaycastTarget allowing, ARRaycastTargetAlignment alignment)
{
  uint64_t v4 = v3;
  double y = from.y;
  double x = from.x;
  id v9 = objc_msgSend(v4, sel_session);
  id v10 = objc_msgSend(v9, sel_currentFrame);

  if (v10)
  {
    objc_msgSend(v4, sel_bounds);
    double v13 = x / v12;
    double v15 = y / v14;
    if (*((unsigned char *)v4 + OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating) != 1)
    {
      id v17 = objc_msgSend(self, sel_sharedApplication);
      objc_msgSend(v17, sel_statusBarOrientation);
    }
    id v18 = objc_msgSend(v10, sel_camera);
    objc_msgSend(v18, sel_imageResolution);

    ARViewToCameraImageTransform();
    v23.double x = v13;
    v23.double y = v15;
    CGPoint v19 = CGPointApplyAffineTransform(v23, &v21);
    id v16 = (objc_class *)objc_msgSend(v10, sel_raycastQueryFromPoint_allowingTarget_alignment_, allowing, alignment, v19.x, v19.y);
  }
  else
  {
    id v16 = 0;
  }
  CGAffineTransform v20 = v16;
  result.value.super.Class isa = v20;
  result.is_nil = v11;
  return result;
}

id ARView.trackedRaycast(from:allowing:alignment:updateHandler:)(ARRaycastTarget a1, ARRaycastTargetAlignment a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  unint64_t v9 = (unint64_t)ARView.makeRaycastQuery(from:allowing:alignment:)((CGPoint)__PAIR128__(*(unint64_t *)&a6, *(unint64_t *)&a5), a1, a2);
  if (!v9) {
    return 0;
  }
  id v10 = (void *)v9;
  id v11 = objc_msgSend(v6, sel_session);
  v15[4] = a3;
  v15[5] = a4;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed [ARRaycastResult]) -> ();
  v15[3] = &block_descriptor_2;
  double v12 = _Block_copy(v15);
  swift_retain();
  swift_release();
  id v13 = objc_msgSend(v11, sel_trackedRaycast_updateHandler_, v10, v12);
  _Block_release(v12);

  return v13;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [ARRaycastResult]) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARRaycastResult);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t ARView.raycast(from:allowing:alignment:)(ARRaycastTarget a1, ARRaycastTargetAlignment a2, double a3, double a4)
{
  unint64_t v5 = (unint64_t)ARView.makeRaycastQuery(from:allowing:alignment:)((CGPoint)__PAIR128__(*(unint64_t *)&a4, *(unint64_t *)&a3), a1, a2);
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = (void *)v5;
  id v7 = objc_msgSend(v4, sel_session);
  id v8 = objc_msgSend(v7, sel_raycast_, v6);

  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARRaycastResult);
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v9;
}

uint64_t outlined init with take of (origin: SIMD3<Float>, direction: SIMD3<Float>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1E2A5C058()
{
  return MEMORY[0x1E4F3AAC0];
}

uint64_t sub_1E2A5C064@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Entity();
  uint64_t result = HasHierarchy.parent.getter();
  *a1 = result;
  return result;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t GroupActivitiesSynchronizationIdentity.State.__deallocating_deinit()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant;
  uint64_t v2 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)(char *a1, int a2)
{
  uint64_t v3 = v2;
  int v32 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Participant();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x1F4188790](v9);
  id v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  uint64_t v31 = a1;
  v14(v13, (uint64_t)a1, v9, v11);
  type metadata accessor for GroupActivitiesSynchronizationIdentity.State();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15
            + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) = 0;
  ((void (*)(uint64_t, char *, uint64_t))v14)(v15+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant, v13, v9);
  Participant.id.getter();
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  char v30 = *(void (**)(char *, uint64_t))(v10 + 8);
  v30(v13, v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  CGPoint v19 = (uint64_t *)(v15
                  + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_address);
  *CGPoint v19 = v16;
  v19[1] = v18;
  *(unsigned char *)(v15
           + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_isLocal) = v32;
  *(void *)(v3 + 16) = v15;
  uint64_t v20 = RESyncDiscoveryIdentityObserverCreate();
  uint64_t v21 = *(void *)(v3 + 16);
  long long v37 = partial apply for closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:);
  uint64_t v38 = v21;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v34 = 1107296256;
  unint64_t v35 = thunk for @escaping @callee_guaranteed () -> (@unowned UnsafePointer<Int8>);
  unint64_t v36 = &block_descriptor_3;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  RESyncDiscoveryIdentityObserverOnGetDisplayName();
  _Block_release(v22);
  if (v20)
  {
    uint64_t v23 = *(void *)(v3 + 16);
    long long v37 = partial apply for closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:);
    uint64_t v38 = v23;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v34 = 1107296256;
    unint64_t v35 = thunk for @escaping @callee_guaranteed () -> (@unowned UnsafePointer<Int8>);
    unint64_t v36 = &block_descriptor_24;
    long long v24 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncDiscoveryIdentityObserverOnGetAddress();
    _Block_release(v24);
    uint64_t v25 = *(void *)(v3 + 16);
    long long v37 = partial apply for closure #3 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:);
    uint64_t v38 = v25;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v34 = 1107296256;
    unint64_t v35 = thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
    unint64_t v36 = &block_descriptor_27_0;
    long long v26 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncDiscoveryIdentityObserverOnIsLocal();
    _Block_release(v26);
    uint64_t v27 = RESyncIdentityCreateWithObserver();
    RESyncRelease();
    v30(v31, v9);
    type metadata accessor for RESyncHandle();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v27;
    *(void *)(v3 + 24) = v28;
  }
  else
  {
    __break(1u);
  }
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UnsafePointer<Int8>)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

id closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4E62C20](*(void *)(a1+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_address), *(void *)(a1+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_address+ 8));
  id v2 = objc_msgSend(v1, sel_UTF8String);
  id result = v1;
  if (v2) {
    return v2;
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Bool)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  return v1 & 1;
}

uint64_t GroupActivitiesSynchronizationIdentity.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationIdentity()
{
  return self;
}

uint64_t ObjC metadata update function for GroupActivitiesSynchronizationIdentity.State()
{
  return type metadata accessor for GroupActivitiesSynchronizationIdentity.State();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationIdentity.State()
{
  uint64_t result = type metadata singleton initialization cache for GroupActivitiesSynchronizationIdentity.State;
  if (!type metadata singleton initialization cache for GroupActivitiesSynchronizationIdentity.State) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationIdentity.State()
{
  uint64_t result = type metadata accessor for Participant();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id partial apply for closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)()
{
  return closure #1 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)(v0);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t partial apply for closure #3 in GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_isLocal);
}

uint64_t static ParticleEmitterComponent.Presets.snow.getter()
{
  uint64_t v0 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  uint64_t v86 = *(void *)(v0 - 8);
  uint64_t v87 = v0;
  MEMORY[0x1F4188790](v0);
  v85 = (char *)&v69 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  uint64_t v83 = *(void *)(v2 - 8);
  uint64_t v84 = v2;
  MEMORY[0x1F4188790](v2);
  v82 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v81 = v4;
  MEMORY[0x1F4188790](v4);
  v79 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  MEMORY[0x1F4188790](v6);
  v76 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  float32x4_t v73 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  uint64_t v71 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  uint64_t v70 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParticleEmitterComponent.init()();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4F3ADB8], v18);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E4F3AD98], v14);
  ParticleEmitterComponent.birthLocation.setter();
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4F3AD10], v10);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*(void (**)(char *, void, uint64_t))(v71 + 104))(v70, *MEMORY[0x1E4F3ADC8], v72);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, void, uint64_t))(v74 + 104))(v73, *MEMORY[0x1E4F3ADB0], v75);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  uint64_t v22 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v22(v88, 0);
  uint64_t v23 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v23(v88, 0);
  long long v24 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v24(v88, 0);
  uint64_t v25 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v25(v88, 0);
  long long v26 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v26(v88, 0);
  uint64_t v27 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v27(v88, 0);
  uint64_t v28 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v28(v88, 0);
  (*(void (**)(char *, void, uint64_t))(v77 + 104))(v76, *MEMORY[0x1E4F3AD48], v78);
  uint64_t v29 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v29(v88, 0);
  char v30 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v30(v88, 0);
  uint64_t v31 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v31(v88, 0);
  (*(void (**)(char *, void, uint64_t))(v80 + 104))(v79, *MEMORY[0x1E4F3AD68], v81);
  int v32 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v32(v88, 0);
  float32x2_t v33 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v33(v88, 0);
  uint64_t v34 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v34(v88, 0);
  unint64_t v35 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v35(v88, 0);
  unint64_t v36 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v36(v88, 0);
  long long v37 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v37(v88, 0);
  uint64_t v38 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v38(v88, 0);
  id v39 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v39(v88, 0);
  unint64_t v40 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v40(v88, 0);
  long long v41 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v41(v88, 0);
  uint64_t v42 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v42(v88, 0);
  uint64_t v43 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v43(v88, 0);
  unint64_t v44 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v44(v88, 0);
  uint64_t v45 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v45(v88, 0);
  (*(void (**)(char *, void, uint64_t))(v83 + 104))(v82, *MEMORY[0x1E4F3AD38], v84);
  float32x4_t v46 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v46(v88, 0);
  uint64_t v47 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v47(v88, 0);
  float32x2_t v48 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v48(v88, 0);
  uint64_t v49 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v49(v88, 0);
  uint64_t v50 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v50(v88, 0);
  unint64_t v51 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v51(v88, 0);
  (*(void (**)(char *, void, uint64_t))(v86 + 104))(v85, *MEMORY[0x1E4F3AD88], v87);
  float32x2_t v52 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v52(v88, 0);
  float32x4_t v53 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v53(v88, 0);
  float32x4_t v54 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v54(v88, 0);
  long long v55 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v55(v88, 0);
  CGColorCreateGenericRGB(255.0, 255.0, 255.0, 1.0);
  long long v56 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v56(v88, 0);
  CGColorCreateGenericRGB(255.0, 255.0, 255.0, 1.0);
  uint64_t v57 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v57(v88, 0);
  CGColorCreateGenericRGB(255.0, 255.0, 255.0, 1.0);
  uint64_t v58 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  v58(v88, 0);
  CGColorCreateGenericRGB(255.0, 255.0, 255.0, 1.0);
  uint64_t v59 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
  v59(v88, 0);
  float32x2_t v60 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v60(v88, 0);
  float32x2_t v61 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v61(v88, 0);
  char v62 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v62(v88, 0);
  type metadata accessor for TextureResource();
  float32x4_t v63 = (void *)MEMORY[0x1E4E62C20](0xD000000000000010, 0x80000001E2AB8BE0);
  id v64 = objc_msgSend(self, sel_bundleWithIdentifier_, v63);

  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  float32x4_t v65 = (void *)textureLoader;
  v88[3] = &type metadata for TextureLoader;
  v88[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v88[0] = v65;
  id v66 = v65;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v88);

  long long v67 = (uint64_t (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  return v67(v88, 0);
}

uint64_t SpatialTrackingSession.Configuration.supportedConfiguration()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v8 = (unint64_t)SpatialTrackingSession.Configuration.arConfiguration()();
  if (!v8)
  {
    SpatialTrackingSession.Configuration.camera.getter();
    return SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  }
  uint64_t v9 = (void *)v8;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v1, v4);
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v10 = self;
    id v11 = v9;
    if (objc_msgSend(v10, sel_supportsSceneReconstruction_, 1))
    {
      uint64_t v12 = MEMORY[0x1E4FBC870];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
      type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_1E2ABF180;
      static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
      static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
      static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
      static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
      uint64_t v12 = specialized Set.init(_nonEmptyArrayLiteral:)(v18);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }
    uint64_t v19 = (void (*)(unsigned char *, void))SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.modify();
    specialized Set._subtract<A>(_:)(v12, MEMORY[0x1E4F3AC60], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
    swift_bridgeObjectRelease();
    v19(v20, 0);
  }
  else
  {
    self;
    if (!swift_dynamicCastObjCClass())
    {
      self;
      if (!swift_dynamicCastObjCClass()) {
        goto LABEL_12;
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1E2ABF180;
    id v15 = v9;
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    uint64_t v16 = specialized Set.init(_nonEmptyArrayLiteral:)(v14);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v17 = (void (*)(unsigned char *, void))SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.modify();
    specialized Set._subtract<A>(_:)(v16, MEMORY[0x1E4F3AC60], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
    swift_bridgeObjectRelease();
    v17(v20, 0);
  }

LABEL_12:
  return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(a1, v7, v4);
}

ARConfiguration_optional __swiftcall SpatialTrackingSession.Configuration.arConfiguration()()
{
  uint64_t v0 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  uint64_t v8 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  SpatialTrackingSession.Configuration.camera.getter();
  id v9 = convertAnchorCapabilitiesToARConfiguration(anchorCapabilitySet:sceneUnderstandingCapabilities:camera:)(v7, v8, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v6, v0);
  if (v9)
  {
    SpatialTrackingSession.Configuration.camera.getter();
    int v12 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v4, v0);
    if (v12 == *MEMORY[0x1E4F3AC78])
    {
      objc_msgSend(v9, sel_setCameraPosition_, 1);
    }
    else if (v12 == *MEMORY[0x1E4F3AC80])
    {
      objc_msgSend(v9, sel_setCameraPosition_, 2);
    }
    else
    {
      v10(v4, v0);
    }
  }
  id v13 = (objc_class *)v9;
  result.value.super.Class isa = v13;
  result.is_nil = v11;
  return result;
}

uint64_t specialized static CapabilitySupportable.supports(anchorCapabilities:sceneUnderstandingCapabilities:camera:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARBodyTrackingConfiguration);
  if (!objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_isSupported)) {
    goto LABEL_12;
  }
  if (one-time initialization token for supportingCamera != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v4, (uint64_t)static ARBodyTrackingConfiguration.supportingCamera);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera, MEMORY[0x1E4F3AC88]);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v25 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v24 = v10;
  uint64_t v11 = swift_allocObject();
  long long v23 = xmmword_1E2ABF570;
  *(_OWORD *)(v11 + 16) = xmmword_1E2ABF570;
  swift_bridgeObjectRetain();
  static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
  uint64_t v12 = specialized Set.init(_nonEmptyArrayLiteral:)(v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (*(void *)(v12 + 16) <= *(void *)(a1 + 16) >> 3)
  {
    uint64_t v26 = a1;
    specialized Set._subtract<A>(_:)(v12, MEMORY[0x1E4F3AC40], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
    swift_bridgeObjectRelease();
    uint64_t v13 = v26;
  }
  else
  {
    uint64_t v13 = specialized _NativeSet.subtracting<A>(_:)(v12, a1);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_12;
  }
  uint64_t v15 = v25;
  uint64_t v26 = v25;
  swift_bridgeObjectRetain();
  specialized Set._subtract<A>(_:)(MEMORY[0x1E4FBC870], MEMORY[0x1E4F3AC60], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
  uint64_t v16 = *(void *)(v26 + 16);
  swift_bridgeObjectRelease();
  if (v16) {
    goto LABEL_12;
  }
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = v23;
  static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
  uint64_t v18 = specialized Set.init(_nonEmptyArrayLiteral:)(v17);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  LOBYTE(v17) = specialized Set.isDisjoint(with:)(v18, a1);
  swift_bridgeObjectRelease();
  if (v17)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1E2ABF180;
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    uint64_t v20 = specialized Set.init(_nonEmptyArrayLiteral:)(v19);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    char v21 = specialized Set.isDisjoint(with:)(v20, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_12:
    char v21 = 0;
  }
  return v21 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARFaceTrackingConfiguration);
  if (!objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_isSupported)) {
    goto LABEL_12;
  }
  if (one-time initialization token for supportingCamera != -1) {
    swift_once();
  }
  uint64_t v8 = __swift_project_value_buffer(v4, (uint64_t)static ARFaceTrackingConfiguration.supportingCamera);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera, MEMORY[0x1E4F3AC88]);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0) {
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1E2ABE6A0;
  swift_bridgeObjectRetain();
  static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
  uint64_t v11 = specialized Set.init(_nonEmptyArrayLiteral:)(v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (*(void *)(v11 + 16) <= *(void *)(a1 + 16) >> 3)
  {
    uint64_t v22 = a1;
    specialized Set._subtract<A>(_:)(v11, MEMORY[0x1E4F3AC40], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
    swift_bridgeObjectRelease();
    uint64_t v12 = v22;
  }
  else
  {
    uint64_t v12 = specialized _NativeSet.subtracting<A>(_:)(v11, a1);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = *(void *)(v12 + 16);
  swift_bridgeObjectRelease();
  if (v13) {
    goto LABEL_12;
  }
  uint64_t v22 = a2;
  swift_bridgeObjectRetain();
  specialized Set._subtract<A>(_:)(MEMORY[0x1E4FBC870], MEMORY[0x1E4F3AC60], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
  uint64_t v14 = *(void *)(v22 + 16);
  swift_bridgeObjectRelease();
  if (v14) {
    goto LABEL_12;
  }
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1E2ABE4B0;
  static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
  static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
  uint64_t v16 = specialized Set.init(_nonEmptyArrayLiteral:)(v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  LOBYTE(v15) = specialized Set.isDisjoint(with:)(v16, a1);
  swift_bridgeObjectRelease();
  if (v15)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1E2ABF180;
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    uint64_t v18 = specialized Set.init(_nonEmptyArrayLiteral:)(v17);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v19 = specialized Set.isDisjoint(with:)(v18, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_12:
    uint64_t v19 = 0;
  }
  return v19 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v22;
  uint64_t v23;

  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARWorldTrackingConfiguration);
  uint64_t v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_isSupported);
  if (v8)
  {
    if (one-time initialization token for supportingCamera != -1) {
      swift_once();
    }
    char v9 = __swift_project_value_buffer(v4, (uint64_t)static ARWorldTrackingConfiguration.supportingCamera);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.Camera and conformance SpatialTrackingSession.Configuration.Camera, MEMORY[0x1E4F3AC88]);
    uint64_t v10 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v10 & 1) == 0) {
      goto LABEL_15;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1E2ABF580;
    swift_bridgeObjectRetain();
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter();
    uint64_t v12 = specialized Set.init(_nonEmptyArrayLiteral:)(v11);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (*(void *)(v12 + 16) <= *(void *)(a1 + 16) >> 3)
    {
      long long v23 = a1;
      specialized Set._subtract<A>(_:)(v12, MEMORY[0x1E4F3AC40], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
      swift_bridgeObjectRelease();
      uint64_t v13 = v23;
    }
    else
    {
      uint64_t v13 = specialized _NativeSet.subtracting<A>(_:)(v12, a1);
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = *(void *)(v13 + 16);
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_15;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1E2ABF180;
    swift_bridgeObjectRetain();
    static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    static SpatialTrackingSession.Configuration.AnchorCapability.object.getter();
    uint64_t v16 = specialized Set.init(_nonEmptyArrayLiteral:)(v15);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    if (*(void *)(v16 + 16) <= *(void *)(a2 + 16) >> 3)
    {
      long long v23 = a2;
      specialized Set._subtract<A>(_:)(v16, MEMORY[0x1E4F3AC60], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
      swift_bridgeObjectRelease();
      uint64_t v17 = v23;
    }
    else
    {
      uint64_t v17 = specialized _NativeSet.subtracting<A>(_:)(v16, a2);
      swift_bridgeObjectRelease();
    }
    uint64_t v18 = *(void *)(v17 + 16);
    swift_bridgeObjectRelease();
    if (v18
      || (uint64_t v19 = specialized static ARWorldTrackingConfiguration.unsupportedAnchorCapabilities.getter(),
          uint64_t v20 = specialized Set.isDisjoint(with:)(v19, a1),
          swift_bridgeObjectRelease(),
          (v20 & 1) == 0))
    {
LABEL_15:
      LOBYTE(v8) = 0;
    }
    else
    {
      LOBYTE(v8) = specialized Set.isDisjoint(with:)(MEMORY[0x1E4FBC870], a2);
    }
  }
  return v8 & 1;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v39 - v9;
  MEMORY[0x1F4188790](v8);
  float32x4_t v46 = (char *)&v39 - v11;
  unint64_t v12 = *(void *)(a2 + 16);
  if (!v12) {
    return 1;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return 1;
  }
  if (v12 >= v13) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = a2;
  }
  if (v12 >= v13) {
    a1 = a2;
  }
  uint64_t v15 = *(void *)(v14 + 56);
  uint64_t v41 = v14 + 56;
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  uint64_t v39 = ~v16;
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v40 = (unint64_t)(63 - v16) >> 6;
  uint64_t v42 = v47 + 32;
  uint64_t v50 = a1 + 56;
  uint64_t v51 = v47 + 16;
  uint64_t v19 = (void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v45 = v14;
  swift_bridgeObjectRetain();
  uint64_t v52 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v49)
  {
    unint64_t v43 = v18;
    uint64_t v44 = i;
    if (!v18) {
      break;
    }
    uint64_t v48 = (v18 - 1) & v18;
    int64_t v49 = i;
    unint64_t v22 = __clz(__rbit64(v18)) | (i << 6);
LABEL_29:
    uint64_t v27 = v46;
    uint64_t v28 = v47;
    uint64_t v29 = *(void *)(v47 + 72);
    char v30 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
    v30(v46, *(void *)(v45 + 48) + v29 * v22, v4);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v10, v27, v4);
    if (*(void *)(v52 + 16))
    {
      uint64_t v31 = v52;
      lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
      uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
      unint64_t v34 = v32 & ~v33;
      if ((*(void *)(v50 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34))
      {
        uint64_t v35 = ~v33;
        while (1)
        {
          v30(v7, *(void *)(v52 + 48) + v34 * v29, v4);
          lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
          char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
          long long v37 = (uint64_t (*)(char *, uint64_t))*v19;
          (*v19)(v7, v4);
          if (v36) {
            break;
          }
          unint64_t v34 = (v34 + 1) & v35;
          if (((*(void *)(v50 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
            goto LABEL_12;
          }
        }
        swift_bridgeObjectRelease();
        v37(v10, v4);
        uint64_t v38 = 0;
        goto LABEL_37;
      }
    }
LABEL_12:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v19)(v10, v4);
    unint64_t v18 = v48;
  }
  int64_t v23 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v23 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v23);
  int64_t v25 = i + 1;
  if (v24) {
    goto LABEL_28;
  }
  int64_t v25 = i + 2;
  if (i + 2 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v25);
  if (v24) {
    goto LABEL_28;
  }
  int64_t v25 = i + 3;
  if (i + 3 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v25);
  if (v24)
  {
LABEL_28:
    uint64_t v48 = (v24 - 1) & v24;
    int64_t v49 = v25;
    unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_29;
  }
  uint64_t v26 = i + 4;
  if (i + 4 >= v40)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v38 = 1;
LABEL_37:
    outlined consume of Set<UITouch>.Iterator._Variant();
    return v38;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v26);
  if (v24)
  {
    int64_t v25 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v40) {
      goto LABEL_39;
    }
    unint64_t v24 = *(void *)(v41 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_28;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(char *, uint64_t);
  uint64_t result;
  int64_t i;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v39 - v9;
  MEMORY[0x1F4188790](v8);
  float32x4_t v46 = (char *)&v39 - v11;
  unint64_t v12 = *(void *)(a2 + 16);
  if (!v12) {
    return 1;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return 1;
  }
  if (v12 >= v13) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = a2;
  }
  if (v12 >= v13) {
    a1 = a2;
  }
  uint64_t v15 = *(void *)(v14 + 56);
  uint64_t v41 = v14 + 56;
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  uint64_t v39 = ~v16;
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v40 = (unint64_t)(63 - v16) >> 6;
  uint64_t v42 = v47 + 32;
  uint64_t v50 = a1 + 56;
  uint64_t v51 = v47 + 16;
  uint64_t v19 = (void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v45 = v14;
  swift_bridgeObjectRetain();
  uint64_t v52 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v49)
  {
    unint64_t v43 = v18;
    uint64_t v44 = i;
    if (!v18) {
      break;
    }
    uint64_t v48 = (v18 - 1) & v18;
    int64_t v49 = i;
    unint64_t v22 = __clz(__rbit64(v18)) | (i << 6);
LABEL_29:
    uint64_t v27 = v46;
    uint64_t v28 = v47;
    uint64_t v29 = *(void *)(v47 + 72);
    char v30 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
    v30(v46, *(void *)(v45 + 48) + v29 * v22, v4);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v10, v27, v4);
    if (*(void *)(v52 + 16))
    {
      uint64_t v31 = v52;
      lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
      uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
      unint64_t v34 = v32 & ~v33;
      if ((*(void *)(v50 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34))
      {
        uint64_t v35 = ~v33;
        while (1)
        {
          v30(v7, *(void *)(v52 + 48) + v34 * v29, v4);
          lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
          char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
          long long v37 = (uint64_t (*)(char *, uint64_t))*v19;
          (*v19)(v7, v4);
          if (v36) {
            break;
          }
          unint64_t v34 = (v34 + 1) & v35;
          if (((*(void *)(v50 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
            goto LABEL_12;
          }
        }
        swift_bridgeObjectRelease();
        v37(v10, v4);
        uint64_t v38 = 0;
        goto LABEL_37;
      }
    }
LABEL_12:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v19)(v10, v4);
    unint64_t v18 = v48;
  }
  int64_t v23 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v23 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v23);
  int64_t v25 = i + 1;
  if (v24) {
    goto LABEL_28;
  }
  int64_t v25 = i + 2;
  if (i + 2 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v25);
  if (v24) {
    goto LABEL_28;
  }
  int64_t v25 = i + 3;
  if (i + 3 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v25);
  if (v24)
  {
LABEL_28:
    uint64_t v48 = (v24 - 1) & v24;
    int64_t v49 = v25;
    unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_29;
  }
  uint64_t v26 = i + 4;
  if (i + 4 >= v40)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v38 = 1;
LABEL_37:
    outlined consume of Set<UITouch>.Iterator._Variant();
    return v38;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v26);
  if (v24)
  {
    int64_t v25 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v40) {
      goto LABEL_39;
    }
    unint64_t v24 = *(void *)(v41 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_28;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t one-time initialization function for supportingCamera(uint64_t a1)
{
  return one-time initialization function for supportingCamera(a1, static ARWorldTrackingConfiguration.supportingCamera, MEMORY[0x1E4F3AC78]);
}

{
  return one-time initialization function for supportingCamera(a1, static ARFaceTrackingConfiguration.supportingCamera, MEMORY[0x1E4F3AC80]);
}

{
  return one-time initialization function for supportingCamera(a1, static ARBodyTrackingConfiguration.supportingCamera, MEMORY[0x1E4F3AC78]);
}

uint64_t one-time initialization function for supportingCamera(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v5 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  __swift_allocate_value_buffer(v5, a2);
  uint64_t v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  uint64_t v7 = *a3;
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v8(v6, v7, v5);
}

uint64_t ARWorldTrackingConfiguration.filterConfiguration(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v3 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v74 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  float32x4_t v63 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v58 - v6;
  MEMORY[0x1F4188790](v8);
  float32x4_t v73 = (char *)&v58 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v71 = (char *)&v58 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v72 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for SpatialTrackingSession.Configuration();
  uint64_t v58 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  id v66 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  char v21 = (char *)&v58 - v20;
  uint64_t v60 = a1;
  SpatialTrackingSession.Configuration.camera.getter();
  uint64_t v22 = *MEMORY[0x1E4F3AC78];
  v76 = *(void (**)(char *))(v16 + 104);
  v76(v18);
  LOBYTE(a1) = static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)();
  int64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  v23(v18, v15);
  v23(v21, v15);
  if ((a1 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v61, 1, 1, v59);
  }
  ((void (*)(char *, uint64_t, uint64_t))v76)(v21, v22, v15);
  SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  uint64_t result = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  int64_t v25 = 0;
  uint64_t v26 = *(void *)(result + 56);
  uint64_t v62 = result + 56;
  uint64_t v27 = 1 << *(unsigned char *)(result + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v64 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v30 = v74;
  uint64_t v69 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56);
  uint64_t v70 = result;
  long long v67 = (void (**)(char *, char *, uint64_t))(v74 + 32);
  uint64_t v68 = v74 + 48;
  uint64_t v31 = (void (**)(char *, uint64_t))(v74 + 8);
  uint64_t v32 = v71;
  uint64_t v75 = v74 + 16;
  while (1)
  {
    long long v37 = v72;
    char v36 = v73;
    if (v29)
    {
      unint64_t v38 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      v76 = v25;
      unint64_t v39 = v38 | ((void)v25 << 6);
      goto LABEL_24;
    }
    int64_t v40 = (int64_t)v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v40 >= v64) {
      goto LABEL_36;
    }
    unint64_t v41 = *(void *)(v62 + 8 * v40);
    int64_t v42 = (int64_t)v25 + 1;
    if (!v41)
    {
      int64_t v42 = (int64_t)v25 + 2;
      if ((uint64_t)v25 + 2 >= v64) {
        goto LABEL_36;
      }
      unint64_t v41 = *(void *)(v62 + 8 * v42);
      if (!v41)
      {
        int64_t v42 = (int64_t)v25 + 3;
        if ((uint64_t)v25 + 3 >= v64) {
          goto LABEL_36;
        }
        unint64_t v41 = *(void *)(v62 + 8 * v42);
        if (!v41) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v29 = (v41 - 1) & v41;
    v76 = (void (*)(char *))v42;
    unint64_t v39 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_24:
    uint64_t v44 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    v44(v72, *(void *)(v70 + 48) + *(void *)(v30 + 72) * v39, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v37, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v37, 1, v3) == 1) {
      goto LABEL_37;
    }
    (*v67)(v32, v37, v3);
    v44(v36, (unint64_t)v32, v3);
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    float32x4_t v46 = *v31;
    (*v31)(v7, v3);
    if (v45)
    {
      v46(v36, v3);
      id v47 = objc_msgSend(v65, sel_planeDetection);
      uint64_t v33 = v71;
      if (v47) {
        goto LABEL_6;
      }
    }
    else
    {
      static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
      char v48 = dispatch thunk of static Equatable.== infix(_:_:)();
      v46(v7, v3);
      if (v48)
      {
        v46(v36, v3);
        unsigned int v49 = objc_msgSend(v65, sel_userFaceTrackingEnabled);
        uint64_t v33 = v71;
        if (v49) {
          goto LABEL_6;
        }
      }
      else
      {
        static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
        char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
        v46(v7, v3);
        if ((v50 & 1) != 0
          || (static SpatialTrackingSession.Configuration.AnchorCapability.object.getter(),
              char v51 = dispatch thunk of static Equatable.== infix(_:_:)(),
              v46(v7, v3),
              (v51 & 1) != 0))
        {
          v46(v36, v3);
          uint64_t v33 = v71;
LABEL_6:
          unint64_t v34 = v63;
          v44(v63, (unint64_t)v33, v3);
          uint64_t v35 = (void (*)(char *, void))SpatialTrackingSession.Configuration.anchorCapabilitySet.modify();
          specialized Set._Variant.insert(_:)((uint64_t)v7, v34);
          v46(v7, v3);
          v35(v77, 0);
          goto LABEL_7;
        }
        static SpatialTrackingSession.Configuration.AnchorCapability.world.getter();
        char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
        v46(v7, v3);
        v46(v36, v3);
        uint64_t v33 = v71;
        if (v52) {
          goto LABEL_6;
        }
      }
    }
LABEL_7:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v46)(v33, v3);
    uint64_t v30 = v74;
    uint64_t v32 = v33;
    int64_t v25 = v76;
  }
  unint64_t v43 = (char *)v25 + 4;
  if ((uint64_t)v25 + 4 < v64)
  {
    unint64_t v41 = *(void *)(v62 + 8 * (void)v43);
    if (!v41)
    {
      while (1)
      {
        int64_t v42 = (int64_t)(v43 + 1);
        if (__OFADD__(v43, 1)) {
          goto LABEL_41;
        }
        if (v42 >= v64) {
          goto LABEL_36;
        }
        unint64_t v41 = *(void *)(v62 + 8 * v42);
        ++v43;
        if (v41) {
          goto LABEL_23;
        }
      }
    }
    int64_t v42 = (int64_t)v25 + 4;
    goto LABEL_23;
  }
LABEL_36:
  (*v69)(v72, 1, 1, v3);
LABEL_37:
  swift_release();
  uint64_t v53 = *(void *)(SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v54 = v61;
  uint64_t v55 = v59;
  uint64_t v56 = v58;
  uint64_t v57 = v66;
  if (v53)
  {
    SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
    SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.setter();
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v54, v57, v55);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v54, 0, 1, v55);
}

id protocol witness for ARConfigurationBuilder.createConfigure(requestingAnchorCapabilities:sceneUnderstandingCapabilities:camera:) in conformance ARFaceTrackingConfigurationBuilder(uint64_t a1, uint64_t a2)
{
  if (specialized static CapabilitySupportable.supports(anchorCapabilities:sceneUnderstandingCapabilities:camera:)(a1, a2))return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F14ED0]), sel_init); {
  else
  }
    return 0;
}

uint64_t ARFaceTrackingConfiguration.filterConfiguration(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v1 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v33 = *(void *)(v1 - 8);
  uint64_t v34 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v30 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v32 = (char *)&v29 - v4;
  uint64_t v35 = type metadata accessor for SpatialTrackingSession.Configuration();
  uint64_t v5 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v31 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v29 - v12;
  SpatialTrackingSession.Configuration.camera.getter();
  uint64_t v14 = *(void (**)(char *, void, uint64_t))(v8 + 104);
  v14(v10, *MEMORY[0x1E4F3AC80], v7);
  char v15 = static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, v7);
  v16(v13, v7);
  if (v15)
  {
    uint64_t v17 = v30;
    v14(v13, *MEMORY[0x1E4F3AC78], v7);
    unint64_t v18 = v31;
    SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
    uint64_t v19 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
    uint64_t v20 = (uint64_t)v32;
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    char v21 = specialized Set.contains(_:)(v20, v19);
    swift_bridgeObjectRelease();
    uint64_t v22 = v34;
    int64_t v23 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v23(v20, v34);
    if (v21)
    {
      static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
      unint64_t v24 = (void (*)(char *, void))SpatialTrackingSession.Configuration.anchorCapabilitySet.modify();
      specialized Set._Variant.insert(_:)(v20, v17);
      v23(v20, v22);
      v24(v37, 0);
    }
    uint64_t v26 = v35;
    uint64_t v25 = v36;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v36, v18, v35);
    uint64_t v27 = 0;
  }
  else
  {
    uint64_t v27 = 1;
    uint64_t v26 = v35;
    uint64_t v25 = v36;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v25, v27, 1, v26);
}

uint64_t ARBodyTrackingConfiguration.filterConfiguration(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v3 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  int64_t v70 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v61 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v55 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v62 = (char *)&v55 - v9;
  MEMORY[0x1F4188790](v10);
  long long v67 = (char *)&v55 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v69 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for SpatialTrackingSession.Configuration();
  uint64_t v14 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v68 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v55 - v21;
  int64_t v71 = a1;
  SpatialTrackingSession.Configuration.camera.getter();
  int64_t v23 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v17 + 104);
  LODWORD(v66) = *MEMORY[0x1E4F3AC78];
  id v65 = v23;
  ((void (*)(char *))v23)(v19);
  LOBYTE(a1) = static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)();
  unint64_t v24 = *(void (**)(char *, uint64_t))(v17 + 8);
  v24(v19, v16);
  v24(v22, v16);
  if ((a1 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v57, 1, 1, v55);
  }
  uint64_t v56 = v14;
  ((void (*)(char *, void, uint64_t))v65)(v22, v66, v16);
  SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
  uint64_t result = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  int64_t v26 = 0;
  uint64_t v27 = *(void *)(result + 56);
  uint64_t v59 = result + 56;
  uint64_t v28 = 1 << *(unsigned char *)(result + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  int64_t v60 = (unint64_t)(v28 + 63) >> 6;
  int64_t v31 = v70;
  id v65 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
  uint64_t v66 = result;
  float32x4_t v63 = (void (**)(char *, char *, uint64_t))(v70 + 32);
  int64_t v64 = v70 + 48;
  uint64_t v32 = (void (**)(char *, uint64_t))(v70 + 8);
  uint64_t v33 = v62;
  uint64_t v34 = v67;
  int64_t v71 = v70 + 16;
  while (1)
  {
    unint64_t v38 = v69;
    if (v30)
    {
      unint64_t v39 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      int64_t v70 = v26;
      unint64_t v40 = v39 | (v26 << 6);
      goto LABEL_24;
    }
    int64_t v41 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v43 = v56;
    uint64_t v42 = v57;
    uint64_t v44 = v68;
    if (v41 >= v60) {
      goto LABEL_33;
    }
    unint64_t v45 = *(void *)(v59 + 8 * v41);
    int64_t v46 = v26 + 1;
    if (!v45)
    {
      int64_t v46 = v26 + 2;
      if (v26 + 2 >= v60) {
        goto LABEL_33;
      }
      unint64_t v45 = *(void *)(v59 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v26 + 3;
        if (v26 + 3 >= v60) {
          goto LABEL_33;
        }
        unint64_t v45 = *(void *)(v59 + 8 * v46);
        if (!v45) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v30 = (v45 - 1) & v45;
    int64_t v70 = v46;
    unint64_t v40 = __clz(__rbit64(v45)) + (v46 << 6);
    unint64_t v38 = v69;
LABEL_24:
    char v48 = *(void (**)(char *, unint64_t, uint64_t))(v31 + 16);
    v48(v38, *(void *)(v66 + 48) + *(void *)(v31 + 72) * v40, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v38, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v38, 1, v3) == 1)
    {
      swift_release();
      uint64_t v43 = v56;
      uint64_t v42 = v57;
      uint64_t v44 = v68;
LABEL_34:
      uint64_t v54 = v55;
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v42, v44, v55);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v42, 0, 1, v54);
    }
    (*v63)(v34, v38, v3);
    v48(v33, (unint64_t)v34, v3);
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
    char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v50 = *v32;
    (*v32)(v7, v3);
    if (v49)
    {
      v50(v33, v3);
      id v51 = objc_msgSend(v58, sel_planeDetection);
      uint64_t v34 = v67;
      if (v51) {
        goto LABEL_6;
      }
    }
    else
    {
      static SpatialTrackingSession.Configuration.AnchorCapability.image.getter();
      char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v7, v3);
      if (v52)
      {
        v50(v33, v3);
        uint64_t v34 = v67;
LABEL_6:
        uint64_t v35 = v61;
        v48(v61, (unint64_t)v34, v3);
        uint64_t v36 = (void (*)(char *, void))SpatialTrackingSession.Configuration.anchorCapabilitySet.modify();
        long long v37 = v35;
        uint64_t v33 = v62;
        specialized Set._Variant.insert(_:)((uint64_t)v7, v37);
        v50(v7, v3);
        v36(v72, 0);
        goto LABEL_7;
      }
      static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
      char v53 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50(v7, v3);
      v50(v33, v3);
      uint64_t v34 = v67;
      if (v53) {
        goto LABEL_6;
      }
    }
LABEL_7:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v50)(v34, v3);
    int64_t v26 = v70;
  }
  uint64_t v47 = v26 + 4;
  if (v26 + 4 >= v60)
  {
LABEL_33:
    (*v65)(v69, 1, 1, v3);
    swift_release();
    goto LABEL_34;
  }
  unint64_t v45 = *(void *)(v59 + 8 * v47);
  if (v45)
  {
    int64_t v46 = v26 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v46 >= v60) {
      goto LABEL_33;
    }
    unint64_t v45 = *(void *)(v59 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_23;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

id convertAnchorCapabilitiesToARConfiguration(anchorCapabilitySet:sceneUnderstandingCapabilities:camera:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ARConfigurationBuilder>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1E2ABF570;
  *(void *)(inited + 56) = &unk_1F3E021D8;
  *(void *)(inited + 64) = &protocol witness table for ARWorldTrackingConfigurationBuilder;
  *(void *)(inited + 96) = &unk_1F3E021B8;
  *(void *)(inited + 104) = &protocol witness table for ARFaceTrackingConfigurationBuilder;
  *(void *)(inited + 136) = &unk_1F3E02198;
  *(void *)(inited + 144) = &protocol witness table for ARBodyTrackingConfigurationBuilder;
  __swift_project_boxed_opaque_existential_1((void *)(inited + 32), (uint64_t)&unk_1F3E021D8);
  id v7 = specialized ARWorldTrackingConfigurationBuilder.createConfigure(requestingAnchorCapabilities:sceneUnderstandingCapabilities:camera:)(a1, a2);
  if (!v7)
  {
    uint64_t v8 = *(void *)(inited + 96);
    uint64_t v9 = *(void *)(inited + 104);
    __swift_project_boxed_opaque_existential_1((void *)(inited + 72), v8);
    id v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(a1, a2, a3, v8, v9);
    if (!v7)
    {
      uint64_t v10 = *(void *)(inited + 136);
      uint64_t v11 = *(void *)(inited + 144);
      __swift_project_boxed_opaque_existential_1((void *)(inited + 112), v10);
      id v7 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, a3, v10, v11);
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

void SpatialTrackingSession.Configuration.filteredBy(arConfiguration:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  MEMORY[0x1F4188790](v5 - 8);
  self;
  if (swift_dynamicCastObjCClass())
  {
    id v7 = a1;
    ARWorldTrackingConfiguration.filterConfiguration(_:)(v2, a2);
  }
  else
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      id v7 = a1;
      ARBodyTrackingConfiguration.filterConfiguration(_:)(v2, a2);
    }
    else
    {
      self;
      if (!swift_dynamicCastObjCClass())
      {
        SpatialTrackingSession.Configuration.camera.getter();
        SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
        uint64_t v6 = type metadata accessor for SpatialTrackingSession.Configuration();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 0, 1, v6);
        return;
      }
      id v7 = a1;
      ARFaceTrackingConfiguration.filterConfiguration(_:)(a2);
    }
  }
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1)
{
  return specialized Set._subtract<A>(_:)(a1, MEMORY[0x1E4F3AC60], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
}

{
  return specialized Set._subtract<A>(_:)(a1, MEMORY[0x1E4F3AC40], &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?, (void (*)(char *))specialized Set._Variant.remove(_:));
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, void (*a4)(char *))
{
  int64_t v31 = a4;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v28 - v9;
  unint64_t v30 = a3;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v28 - v16;
  if (!*(void *)(*(void *)v4 + 16)) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v28 = a1 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v29 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v33 = v8 + 16;
  uint64_t v34 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v32 = v8 + 48;
  uint64_t v35 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  if (!v21) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v23 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (unint64_t i = v23 | (v22 << 6); ; unint64_t i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v17, *(void *)(v35 + 48) + *(void *)(v8 + 72) * i, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7) == 1) {
      return swift_release();
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v17, v7);
    v31(v10);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v14, v30);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (v21) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v25 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v25 >= v29) {
      goto LABEL_25;
    }
    unint64_t v26 = *(void *)(v28 + 8 * v25);
    ++v22;
    if (!v26)
    {
      int64_t v22 = v25 + 1;
      if (v25 + 1 >= v29) {
        goto LABEL_25;
      }
      unint64_t v26 = *(void *)(v28 + 8 * v22);
      if (!v26)
      {
        int64_t v22 = v25 + 2;
        if (v25 + 2 >= v29) {
          goto LABEL_25;
        }
        unint64_t v26 = *(void *)(v28 + 8 * v22);
        if (!v26)
        {
          int64_t v22 = v25 + 3;
          if (v25 + 3 >= v29) {
            goto LABEL_25;
          }
          unint64_t v26 = *(void *)(v28 + 8 * v22);
          if (!v26) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v21 = (v26 - 1) & v26;
  }
  int64_t v27 = v25 + 4;
  if (v27 >= v29)
  {
LABEL_25:
    (*v34)(v17, 1, 1, v7);
    return swift_release();
  }
  unint64_t v26 = *(void *)(v28 + 8 * v27);
  if (v26)
  {
    int64_t v22 = v27;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v29) {
      goto LABEL_25;
    }
    unint64_t v26 = *(void *)(v28 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Participant();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v24 - v11;
  if (!*(void *)(*(void *)v1 + 16)) {
    return;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v27 = v7 + 16;
  int64_t v25 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v26 = v7 + 32;
  uint64_t v17 = a1;
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v25) {
      goto LABEL_24;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v18;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_24;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v18);
      if (!v22)
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_24;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v18);
        if (!v22)
        {
          int64_t v18 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_24;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v18);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v17 + 48) + *(void *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    specialized Set._Variant.remove(_:)((uint64_t)v9, (uint64_t)v5);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for Participant?);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_24:
    swift_release();
    return;
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
    int64_t v18 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v25) {
      goto LABEL_24;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  long long v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    int64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        int64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(unint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;

  uint64_t v2 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  long long v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    int64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        int64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

void *type metadata accessor for ARBodyTrackingConfigurationBuilder()
{
  return &unk_1F3E02198;
}

void *type metadata accessor for ARFaceTrackingConfigurationBuilder()
{
  return &unk_1F3E021B8;
}

void *type metadata accessor for ARWorldTrackingConfigurationBuilder()
{
  return &unk_1F3E021D8;
}

id specialized ARBodyTrackingConfigurationBuilder.createConfigure(requestingAnchorCapabilities:sceneUnderstandingCapabilities:camera:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = 0;
  if (specialized static CapabilitySupportable.supports(anchorCapabilities:sceneUnderstandingCapabilities:camera:)(a1, a2))
  {
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F14E98]), sel_init);
    static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
    char v9 = specialized Set.contains(_:)((uint64_t)v7, a1);
    uint64_t v10 = *(void (**)(char *, uint64_t))(v5 + 8);
    v10(v7, v4);
    if (v9) {
      objc_msgSend(v8, sel_setAutomaticSkeletonScaleEstimationEnabled_, 1);
    }
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    char v11 = specialized Set.contains(_:)((uint64_t)v7, a1);
    v10(v7, v4);
    if (v11)
    {
      objc_msgSend(v8, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v8, sel_planeDetection) | 1);
      objc_msgSend(v8, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v8, sel_planeDetection) | 2);
    }
  }
  return v8;
}

uint64_t specialized static ARWorldTrackingConfiguration.unsupportedAnchorCapabilities.getter()
{
  uint64_t v0 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v10 = MEMORY[0x1E4FBC870];
  static SpatialTrackingSession.Configuration.AnchorCapability.body.getter();
  specialized Set._Variant.insert(_:)((uint64_t)v6, v4);
  uint64_t v7 = *(void (**)(char *, uint64_t))(v1 + 8);
  v7(v6, v0);
  if ((objc_msgSend(self, sel_supportsUserFaceTracking) & 1) == 0)
  {
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    specialized Set._Variant.insert(_:)((uint64_t)v6, v4);
    v7(v6, v0);
  }
  return v10;
}

id specialized ARWorldTrackingConfigurationBuilder.createConfigure(requestingAnchorCapabilities:sceneUnderstandingCapabilities:camera:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = 0;
  if (specialized static CapabilitySupportable.supports(anchorCapabilities:sceneUnderstandingCapabilities:camera:)(a1, a2))
  {
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F14F28]), sel_init);
    objc_msgSend(v8, sel_setEnvironmentTexturing_, 2);
    static SpatialTrackingSession.Configuration.AnchorCapability.face.getter();
    char v9 = specialized Set.contains(_:)((uint64_t)v7, a1);
    uint64_t v10 = *(void (**)(char *, uint64_t))(v5 + 8);
    v10(v7, v4);
    objc_msgSend(v8, sel_setUserFaceTrackingEnabled_, v9 & 1);
    static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter();
    char v11 = specialized Set.contains(_:)((uint64_t)v7, a1);
    v10(v7, v4);
    if (v11)
    {
      objc_msgSend(v8, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v8, sel_planeDetection) | 1);
      objc_msgSend(v8, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v8, sel_planeDetection) | 2);
    }
    if (*(void *)(a2 + 16) && objc_msgSend(self, sel_supportsSceneReconstruction_, 1)) {
      objc_msgSend(v8, sel_setSceneReconstruction_, (unint64_t)objc_msgSend(v8, sel_sceneReconstruction) | 1);
    }
  }
  return v8;
}

uint64_t lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id SpotLightComponent.color.getter()
{
  uint64_t v0 = (void *)SpotLightComponent.__color.getter();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v0);

  return v1;
}

void key path getter for SpotLightComponent.color : SpotLightComponent(void *a1@<X8>)
{
  uint64_t v2 = (void *)SpotLightComponent.__color.getter();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v2);

  *a1 = v3;
}

void key path setter for SpotLightComponent.color : SpotLightComponent(id *a1)
{
  id v2 = *a1;
  id v1 = objc_msgSend(v2, sel_CGColor);
  SpotLightComponent.__color.setter();
}

void SpotLightComponent.color.setter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  SpotLightComponent.__color.setter();
}

void (*SpotLightComponent.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  id v3 = (void *)SpotLightComponent.__color.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return SpotLightComponent.color.modify;
}

void SpotLightComponent.color.modify(void **a1, char a2)
{
  id v2 = *a1;
  id v6 = *a1;
  if (a2)
  {
    id v3 = v2;
    id v4 = objc_msgSend(v3, sel_CGColor);
    SpotLightComponent.__color.setter();
  }
  else
  {
    id v5 = objc_msgSend(v2, sel_CGColor);
    SpotLightComponent.__color.setter();
  }
}

void SpotLightComponent.init(color:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:)();
}

void SpotLightComponent.init(color:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)();
}

uint64_t SpotLightComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v25[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SpotLightComponent();
  __n128 v10 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1E2ABF580;
  *(void *)(v13 + 32) = 0x726F6C6F63;
  *(void *)(v13 + 40) = 0xE500000000000000;
  uint64_t v14 = (void *)SpotLightComponent.__color.getter();
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v14);

  unint64_t v16 = type metadata accessor for UIColor();
  *(void *)(v13 + 48) = v15;
  *(void *)(v13 + 72) = v16;
  *(void *)(v13 + 80) = 0x7469736E65746E69;
  *(void *)(v13 + 88) = 0xE900000000000079;
  SpotLightComponent.intensity.getter();
  uint64_t v17 = MEMORY[0x1E4FBB470];
  *(_DWORD *)(v13 + 96) = v18;
  *(void *)(v13 + 120) = v17;
  *(void *)(v13 + 128) = 0xD000000000000013;
  *(void *)(v13 + 136) = 0x80000001E2AB94F0;
  SpotLightComponent.innerAngleInDegrees.getter();
  *(_DWORD *)(v13 + 144) = v19;
  *(void *)(v13 + 168) = v17;
  *(void *)(v13 + 176) = 0xD000000000000013;
  *(void *)(v13 + 184) = 0x80000001E2AB9510;
  SpotLightComponent.outerAngleInDegrees.getter();
  *(_DWORD *)(v13 + 192) = v20;
  *(void *)(v13 + 216) = v17;
  *(void *)(v13 + 224) = 0xD000000000000011;
  *(void *)(v13 + 232) = 0x80000001E2AB9300;
  SpotLightComponent.attenuationRadius.getter();
  *(_DWORD *)(v13 + 240) = v21;
  *(void *)(v13 + 264) = v17;
  *(void *)(v13 + 272) = 0xD00000000000001ALL;
  *(void *)(v13 + 280) = 0x80000001E2AB9320;
  SpotLightComponent.attenuationFalloffExponent.getter();
  *(void *)(v13 + 312) = v17;
  *(_DWORD *)(v13 + 288) = v22;
  uint64_t v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v8, 1, 1, v23);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void RealityFusionSession.update(scene:with:by:)(int a1, char *a2)
{
  specialized RealityFusionSession.getCameraTransform(arView:)(a2);
  Camera = (void *)RFAnchorCreateCamera();
  uint64_t v4 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v4)
  {
    id v5 = (void *)v4;
    id v6 = (id)RFServiceManagerGetAnchorDataProvider();

    if (v6)
    {
      RFAnchorDataProviderUpdateLocalAnchor();
    }
  }
  uint64_t v7 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (!v7)
  {
    __break(1u);
    goto LABEL_46;
  }
  id v8 = (void *)v7;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (!REServiceLocatorGetECSService())
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    return;
  }
  RFServiceManagerUpdate();

  uint64_t v9 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v9)
  {
    __n128 v10 = (void *)v9;
    id v11 = (id)RFServiceManagerGetMeshReconstructionService();

    if (v11)
    {
      RFMeshReconstructionServiceUpdateByDeltaTime();
    }
  }
  uint64_t v12 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    id v14 = (id)RFServiceManagerGetAnchorManagementService();

    if (v14)
    {
      RFAnchorManagementServiceUpdateByDeltaTime();
    }
  }
  uint64_t v15 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v15)
  {
    unint64_t v16 = (void *)v15;
    id v17 = (id)RFServiceManagerGetLoggingService();

    if (v17)
    {
      RFLoggingServiceUpdateByDeltaTime();
    }
  }
  uint64_t v18 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v18)
  {
    int v19 = (void *)v18;
    id v20 = (id)RFServiceManagerGetDebugService();

    if (v20)
    {
      RFDebugServiceUpdateByDeltaTime();
    }
  }
  uint64_t v21 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v21)
  {
    int v22 = (void *)v21;
    id v23 = (id)RFServiceManagerGetSyntheticEnvironmentService();

    if (v23)
    {
      RFSyntheticEnvironmentServiceUpdateByDeltaTime();
    }
  }
  uint64_t v24 = dispatch thunk of RealityFusionSession.serviceManager.getter();
  if (v24)
  {
    int64_t v25 = (void *)v24;
    id v26 = (id)RFServiceManagerGetAtmospherePlacementService();

    if (v26)
    {
      RFAtmospherePlacementServiceUpdateByDeltaTime();
    }
  }
  id v27 = objc_msgSend(a2, sel_session);
  id v36 = objc_msgSend(v27, sel_configuration);

  if (!v36
    || (self, (BOOL v28 = (void *)swift_dynamicCastObjCClass()) == 0)
    || objc_msgSend(v28, sel_environmentTexturing)
    || (self, (uint64_t v34 = (void *)swift_dynamicCastObjCClass()) == 0)
    || objc_msgSend(v34, sel_environmentTexturing)
    || (self, (uint64_t v35 = (void *)swift_dynamicCastObjCClass()) == 0)
    || objc_msgSend(v35, sel_environmentTexturing))
  {
    uint64_t v29 = dispatch thunk of RealityFusionSession.serviceManager.getter();
    if (v29)
    {
      uint64_t v30 = (void *)v29;
      id v31 = (id)RFServiceManagerGetEnvironmentProbePlacementService();
      if (v31)
      {
        uint64_t v32 = v31;
        if (one-time initialization token for gpuClass != -1) {
          swift_once();
        }
        if (static RealityFusionSession.gpuClass != 3
          && (uint64_t v33 = &a2[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes], swift_beginAccess(), *v33 != 1)
          || *(void *)&a2[OBJC_IVAR____TtC10RealityKit6ARView_arSystem])
        {
          swift_beginAccess();
          RFEnvironmentProbePlacementServiceSetLocalizedProbeEnabled();
          RFEnvironmentProbePlacementServiceSetBackgroundParallaxEnabled();
          RFEnvironmentProbePlacementServiceUpdateByDeltaTime();

          return;
        }
        goto LABEL_47;
      }
    }
  }
}

__n128 specialized RealityFusionSession.getCameraTransform(arView:)(char *a1)
{
  if (a1[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] == 1)
  {
    uint64_t v2 = *(void *)&a1[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation];
  }
  else
  {
    id v3 = objc_msgSend(a1, sel_window);
    if (v3
      && (uint64_t v4 = v3, v5 = objc_msgSend(v3, sel_windowScene), v4, v5))
    {
      uint64_t v2 = (uint64_t)objc_msgSend(v5, sel_interfaceOrientation);

      if (!v2) {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 3;
    }
  }
  id v6 = objc_msgSend(a1, sel_session);
  id v7 = objc_msgSend(v6, sel_currentFrame);

  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_camera);

    objc_msgSend(v8, sel_viewMatrixForOrientation_, v2);
    simd_float4 v16 = v10;
    simd_float4 v17 = v9;
    simd_float4 v14 = v12;
    simd_float4 v15 = v11;

    v18.columns[1] = v16;
    v18.columns[0] = v17;
    v18.columns[3] = v14;
    v18.columns[2] = v15;
    result.n128_u64[0] = (unint64_t)__invert_f4(v18);
  }
  else
  {
    return *(__n128 *)MEMORY[0x1E4F149A0];
  }
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  unint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v3 = v5;
    *uint64_t v1 = v5;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void *)(v6 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = v7 - 1 - a1;
    if (v9 >= 0)
    {
      uint64_t v10 = v6 + 8 * a1;
      uint64_t v11 = *(void *)(v10 + 32);
      memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * v9);
      *(void *)(v6 + 16) = v8;
      specialized Array._endMutation()();
      return v11;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in Array<A>.first(with:)(uint64_t a1)
{
  return MEMORY[0x1E4E61C20](*(void *)(*(void *)a1 + 16)+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant) & 1;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = 0;
  if (v6)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = MEMORY[0x1E4E63150](v7, a3);
      }
      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7 + 32);
        swift_retain();
      }
      uint64_t v12 = v8;
      char v9 = a1(&v12);
      swift_release();
      if (v3 || (v9 & 1) != 0) {
        break;
      }
      uint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        if (!v6) {
          return v7;
        }
      }
      else
      {
        ++v7;
        if (v10 == v6) {
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t GroupActivitiesSynchronizationDiscoveryView.State.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

void GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(uint64_t a1)
{
  type metadata accessor for GroupActivitiesSynchronizationDiscoveryView.State();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v3 + 24) = a1;
  *(void *)(v1 + 16) = v3;
  swift_retain();
  uint64_t v4 = RESyncDiscoveryViewObserverCreate();
  uint64_t v5 = *(void *)(v1 + 16);
  int v19 = partial apply for closure #1 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
  uint64_t v20 = v5;
  uint64_t v15 = MEMORY[0x1E4F143A8];
  uint64_t v16 = 1107296256;
  simd_float4 v17 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  simd_float4x4 v18 = &block_descriptor_4;
  uint64_t v6 = _Block_copy(&v15);
  swift_retain();
  swift_release();
  RESyncDiscoveryViewObserverOnGetIdentitiesCount();
  _Block_release(v6);
  if (v4)
  {
    uint64_t v7 = *(void *)(v1 + 16);
    int v19 = partial apply for closure #2 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
    uint64_t v20 = v7;
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1107296256;
    simd_float4 v17 = thunk for @escaping @callee_guaranteed (@unowned Int) -> (@unowned OpaquePointer);
    simd_float4x4 v18 = &block_descriptor_21;
    uint64_t v8 = _Block_copy(&v15);
    swift_retain();
    swift_release();
    RESyncDiscoveryViewObserverOnGetIdentityAtIndex();
    _Block_release(v8);
    int v19 = closure #3 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
    uint64_t v20 = 0;
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1644167168;
    simd_float4 v17 = thunk for @escaping @callee_guaranteed () -> (@unowned RESyncAuthData);
    simd_float4x4 v18 = &block_descriptor_24_0;
    char v9 = _Block_copy(&v15);
    RESyncDiscoveryViewObserverOnGetAuthData();
    _Block_release(v9);
    int v19 = closure #4 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
    uint64_t v20 = 0;
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1107296256;
    simd_float4 v17 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned UnsafePointer<RESyncAuthData>) -> (@unowned OpaquePointer?);
    simd_float4x4 v18 = &block_descriptor_27_1;
    uint64_t v10 = _Block_copy(&v15);
    RESyncDiscoveryViewObserverOnRequestIdentity();
    _Block_release(v10);
    uint64_t v11 = *(void *)(v1 + 16);
    int v19 = partial apply for closure #5 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:);
    uint64_t v20 = v11;
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = 1107296256;
    simd_float4 v17 = thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
    simd_float4x4 v18 = &block_descriptor_30;
    uint64_t v12 = _Block_copy(&v15);
    swift_retain();
    swift_release();
    RESyncDiscoveryViewObserverOnCreateProtocolLayer();
    _Block_release(v12);
    uint64_t v13 = RESyncDiscoveryViewCreateWithObserver();
    swift_release();
    RESyncRelease();
    type metadata accessor for RESyncHandle();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    *(void *)(v1 + 24) = v14;
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #1 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v2 = *(void *)(a1 + 16);
  if (!(v2 >> 62)) {
    return *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(a1);
}

{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  unint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t closure #2 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(unint64_t a1, uint64_t a2)
{
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(a2 + 16);
  if ((v5 & 0xC000000000000001) == 0)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) > a1)
    {
      uint64_t v6 = *(void *)(v5 + 8 * a1 + 32);
      swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = MEMORY[0x1E4E63150](a1, v5);
  swift_bridgeObjectRelease();
LABEL_5:
  uint64_t v7 = *(void *)(v6 + 24);
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t result = swift_release();
  if (v8) {
    return v8;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Int) -> (@unowned OpaquePointer)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t closure #3 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)()
{
  return 1;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned RESyncAuthData)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v4 = swift_retain();
  LODWORD(v3) = v3(v4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t result = swift_release();
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v8;
  return result;
}

void closure #4 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)()
{
  _StringGuts.grow(_:)(35);
  v0._object = (void *)0x80000001E2AB96E0;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<Int8>);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>, @unowned UnsafePointer<RESyncAuthData>) -> (@unowned OpaquePointer?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v6 = v5(a2, a3);
  swift_release();
  return v6;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(a1);
}

uint64_t GroupActivitiesSynchronizationDiscoveryView.add(participant:isLocal:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Participant();
  __n128 v7 = MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v10 + 16))(v9, a1, v7);
  type metadata accessor for GroupActivitiesSynchronizationIdentity();
  swift_allocObject();
  GroupActivitiesSynchronizationIdentity.init(participant:isLocal:)(v9, a2);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v3 + 16);
  swift_beginAccess();
  swift_retain();
  uint64_t v14 = swift_retain();
  MEMORY[0x1E4E62CE0](v14);
  if (*(void *)((*(void *)(v13 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v13 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_release();
  if (a2) {
    return swift_release();
  }
  swift_retain();
  GroupActivitiesSynchronizationProtocolLayer.add(participant:)(a1);
  swift_release();
  uint64_t result = *(void *)(*(void *)(v3 + 24) + 16);
  if (result)
  {
    if (*(void *)(*(void *)(v12 + 24) + 16))
    {
      RESyncDiscoveryViewNotifyJoin();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t GroupActivitiesSynchronizationDiscoveryView.remove(participant:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v5 = *(void *)(v4 + 16);
  v12[2] = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized Collection.firstIndex(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in Array<A>.remove(with:), (uint64_t)v12, v5);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (v8)
  {
    swift_endAccess();
    return swift_release();
  }
  uint64_t v9 = specialized Array.remove(at:)(v6);
  swift_endAccess();
  swift_release();
  uint64_t v10 = *(void *)(v9 + 24);
  swift_retain();
  swift_release();
  uint64_t result = *(void *)(*(void *)(v2 + 24) + 16);
  if (result)
  {
    if (*(void *)(v10 + 16))
    {
      RESyncDiscoveryViewNotifyLeave();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationDiscoveryView()
{
  return self;
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationDiscoveryView.State()
{
  return self;
}

uint64_t partial apply for closure #1 in Array<A>.remove(with:)(uint64_t a1)
{
  return MEMORY[0x1E4E61C20](*(void *)(*(void *)a1 + 16)+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant, *(void *)(v1 + 16)) & 1;
}

uint64_t partial apply for closure #1 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)()
{
  return closure #1 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(v0);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(unint64_t a1)
{
  return closure #2 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(a1, v1);
}

uint64_t partial apply for closure #5 in GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(v0 + 24) + 24) + 16);
  if (v1)
  {
    RESyncRetain();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x1E4E63160);
}

uint64_t AccessibilityEvents.RotorNavigation.rotorType.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AccessibilityComponent.RotorType(v1, a1);
}

uint64_t outlined init with copy of AccessibilityComponent.RotorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityComponent.RotorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AccessibilityComponent.RotorType(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityComponent.RotorType);
}

uint64_t AccessibilityEvents.RotorNavigation.hostEntity.getter()
{
  return AccessibilityEvents.RotorNavigation.hostEntity.getter((void (*)(void))type metadata accessor for AccessibilityEvents.RotorNavigation);
}

uint64_t type metadata accessor for AccessibilityEvents.RotorNavigation(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityEvents.RotorNavigation);
}

uint64_t AccessibilityEvents.RotorNavigation.currentItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AccessibilityEvents.RotorNavigation(0);
  return outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for Any?);
}

uint64_t AccessibilityEvents.RotorNavigation.searchDirection.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for AccessibilityEvents.RotorNavigation(0) + 28));
}

uint64_t AccessibilityEvents.RotorNavigation.resultHandler.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for AccessibilityEvents.RotorNavigation(0) + 32));
  swift_retain();
  return v1;
}

uint64_t AccessibilityEvents.RotorNavigation.init(rotorType:hostEntity:currentItem:searchDirection:resultHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  outlined init with take of AccessibilityComponent.RotorType(a1, a7);
  uint64_t v13 = (int *)type metadata accessor for AccessibilityEvents.RotorNavigation(0);
  *(void *)(a7 + v13[5]) = a2;
  uint64_t result = outlined init with take of Any?(a3, a7 + v13[6]);
  *(void *)(a7 + v13[7]) = a4;
  uint64_t v15 = (void *)(a7 + v13[8]);
  *uint64_t v15 = a5;
  v15[1] = a6;
  return result;
}

uint64_t outlined init with take of AccessibilityComponent.RotorType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityComponent.RotorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AccessibilityEvents.Activate.entity.getter()
{
  return swift_retain();
}

uint64_t AccessibilityEvents.Activate.entity.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AccessibilityEvents.Activate.entity.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t AccessibilityEvents.Activate.init(entity:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t (*AccessibilityEvents.Increment.entity.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t (*AccessibilityEvents.Decrement.entity.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t AccessibilityEvents.CustomAction.key.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AccessibilityEvents.CustomAction.key.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LocalizedStringResource();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*AccessibilityEvents.CustomAction.key.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t AccessibilityEvents.CustomAction.entity.getter()
{
  return AccessibilityEvents.RotorNavigation.hostEntity.getter((void (*)(void))type metadata accessor for AccessibilityEvents.CustomAction);
}

uint64_t AccessibilityEvents.RotorNavigation.hostEntity.getter(void (*a1)(void))
{
  a1(0);

  return swift_retain();
}

uint64_t type metadata accessor for AccessibilityEvents.CustomAction(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for AccessibilityEvents.CustomAction);
}

uint64_t type metadata accessor for AccessibilityComponent.RotorType(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AccessibilityEvents.CustomAction.entity.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for AccessibilityEvents.CustomAction(0) + 20);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*AccessibilityEvents.CustomAction.entity.modify())()
{
  return ARView.PostProcessContext.device.modify;
}

uint64_t AccessibilityEvents.CustomAction.init(key:entity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for AccessibilityEvents.CustomAction(0);
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t (*AccessibilityComponent.traits.modify(uint64_t *a1))()
{
  a1[1] = v1;
  *a1 = AccessibilityComponent.traitsRawValue.getter();
  return AccessibilityComponent.traits.modify;
}

uint64_t AccessibilityComponent.traits.modify()
{
  return AccessibilityComponent.traitsRawValue.setter();
}

unint64_t AccessibilityComponent.customRotors.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent.RotorType?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (void *)((char *)v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for AccessibilityComponent.RotorType(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v42 = (uint64_t)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v34 = (uint64_t)v29 - v7;
  uint64_t v8 = type metadata accessor for AccessibilityComponent.RotorTypeInternal();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v29 - v13;
  uint64_t v15 = AccessibilityComponent.customRotorsRawValue.getter();
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  simd_float4x4 v18 = *(void (**)(void, void, void))(v9 + 16);
  uint64_t v17 = v9 + 16;
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64);
  v29[1] = v15;
  unint64_t v20 = v15 + v19;
  uint64_t v40 = *(void *)(v17 + 56);
  int64_t v41 = v18;
  unint64_t v39 = (uint64_t (**)(char *, uint64_t))(v17 + 72);
  int v38 = *MEMORY[0x1E4F3AC10];
  int v30 = *MEMORY[0x1E4F3AC08];
  uint64_t v43 = (void (**)(char *, uint64_t))(v17 - 8);
  uint64_t v35 = (void (**)(char *, uint64_t))(v17 + 80);
  id v36 = (unsigned int (**)(void *, uint64_t, uint64_t))(v4 + 48);
  long long v37 = (void (**)(void *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  unint64_t v21 = MEMORY[0x1E4FBC860];
  uint64_t v32 = v4;
  uint64_t v33 = v3;
  uint64_t v31 = v17;
  int v22 = (void (*)(char *, char *, uint64_t))v18;
  v18(v14, v15 + v19, v8);
  while (1)
  {
    v22(v11, v14, v8);
    int v23 = (*v39)(v11, v8);
    if (v23 == v38)
    {
      (*v35)(v11, v8);
      *uint64_t v2 = *(void *)v11;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      (*v37)(v2, 0, 1, v3);
      goto LABEL_12;
    }
    if (v23 == v30)
    {
      (*v35)(v11, v8);
      uint64_t v24 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v2, v11, v24);
      goto LABEL_10;
    }
    (*v37)(v2, 1, 1, v3);
    (*v43)(v11, v8);
LABEL_12:
    (*v43)(v14, v8);
    if ((*v36)(v2, 1, v3) == 1)
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v2, &demangling cache variable for type metadata for AccessibilityComponent.RotorType?);
    }
    else
    {
      uint64_t v25 = v34;
      outlined init with take of AccessibilityComponent.RotorType((uint64_t)v2, v34);
      outlined init with take of AccessibilityComponent.RotorType(v25, v42);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1, v21);
      }
      unint64_t v27 = *(void *)(v21 + 16);
      unint64_t v26 = *(void *)(v21 + 24);
      if (v27 >= v26 >> 1) {
        unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v21);
      }
      *(void *)(v21 + 16) = v27 + 1;
      outlined init with take of AccessibilityComponent.RotorType(v42, v21+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v27);
      uint64_t v3 = v33;
    }
    v20 += v40;
    if (!--v16) {
      break;
    }
    v22(v14, (char *)v20, v8);
  }
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t AccessibilityComponent.customRotors.setter(uint64_t a1)
{
  uint64_t v29 = type metadata accessor for AccessibilityComponent.RotorType(0);
  uint64_t v3 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v5 = (void *)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v25 = type metadata accessor for AccessibilityComponent.RotorTypeInternal();
  uint64_t v9 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v11 = (void *)((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    _OWORD v22[2] = v1;
    uint64_t v30 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    uint64_t v13 = *(unsigned __int8 *)(v3 + 80);
    v22[1] = a1;
    uint64_t v14 = a1 + ((v13 + 32) & ~v13);
    uint64_t v28 = *(void *)(v3 + 72);
    unsigned int v24 = *MEMORY[0x1E4F3AC10];
    unint64_t v27 = (void (**)(void *, uint64_t, uint64_t))(v9 + 104);
    unsigned int v23 = *MEMORY[0x1E4F3AC08];
    uint64_t v26 = v9 + 32;
    uint64_t v15 = v25;
    do
    {
      outlined init with copy of AccessibilityComponent.RotorType(v14, (uint64_t)v8);
      outlined init with copy of AccessibilityComponent.RotorType((uint64_t)v8, (uint64_t)v5);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v16 = type metadata accessor for LocalizedStringResource();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v5, v16);
        uint64_t v17 = v23;
      }
      else
      {
        *uint64_t v11 = *v5;
        uint64_t v17 = v24;
      }
      (*v27)(v11, v17, v15);
      outlined destroy of AccessibilityComponent.RotorType((uint64_t)v8);
      uint64_t v18 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v15 = v25;
        uint64_t v18 = v30;
      }
      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v15 = v25;
        uint64_t v18 = v30;
      }
      *(void *)(v18 + 16) = v20 + 1;
      (*(void (**)(unint64_t, void *, uint64_t))(v9 + 32))(v18+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v20, v11, v15);
      uint64_t v30 = v18;
      v14 += v28;
      --v12;
    }
    while (v12);
  }
  swift_bridgeObjectRelease();
  return AccessibilityComponent.customRotorsRawValue.setter();
}

uint64_t (*AccessibilityComponent.customRotors.modify(unint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = AccessibilityComponent.customRotors.getter();
  return AccessibilityComponent.customRotors.modify;
}

uint64_t AccessibilityComponent.customRotors.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return AccessibilityComponent.customRotors.setter(*a1);
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  AccessibilityComponent.customRotors.setter(v2);

  return swift_bridgeObjectRelease();
}

uint64_t Entity.accessibilityComponent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Entity.ComponentSet();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v16 - v10;
  dispatch thunk of Entity.components.getter();
  uint64_t v12 = type metadata accessor for AccessibilityComponent();
  Entity.ComponentSet.subscript.getter();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v11, v5);
  uint64_t v14 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a1, v4, v12);
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, &demangling cache variable for type metadata for AccessibilityComponent?);
  AccessibilityComponent.init()();
  dispatch thunk of Entity.components.getter();
  Entity.ComponentSet.set<A>(_:)();
  return ((uint64_t (*)(char *, uint64_t))v13)(v8, v5);
}

uint64_t Entity.accessibilityLabelKey.getter()
{
  return Entity.accessibilityLabelKey.getter(MEMORY[0x1E4F3AC18]);
}

uint64_t Entity.accessibilityLabelKey.setter(uint64_t a1)
{
  return Entity.accessibilityLabelKey.setter(a1, MEMORY[0x1E4F3AC20]);
}

void (*Entity.accessibilityLabelKey.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[9] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v3[11] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v3[12] = v8;
  size_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?)
                             - 8)
                 + 64);
  v3[13] = malloc(v9);
  v3[14] = malloc(v9);
  v3[15] = malloc(v9);
  Entity.accessibilityComponent.getter((uint64_t)v8);
  AccessibilityComponent.label.getter();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v7 + 8);
  v3[16] = v10;
  v3[17] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v8, v5);
  return Entity.accessibilityLabelKey.modify;
}

void Entity.accessibilityLabelKey.modify(uint64_t a1, char a2)
{
}

uint64_t Entity.accessibilityValue.getter()
{
  return Entity.accessibilityLabelKey.getter(MEMORY[0x1E4F3AC28]);
}

uint64_t key path setter for Entity.accessibilityLabelKey : Entity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x1F4188790](v7 - 8);
  size_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, (uint64_t)v9, &demangling cache variable for type metadata for LocalizedStringResource?);
  return a5(v9);
}

uint64_t Entity.accessibilityValue.setter(uint64_t a1)
{
  return Entity.accessibilityLabelKey.setter(a1, MEMORY[0x1E4F3AC30]);
}

uint64_t Entity.accessibilityLabelKey.setter(uint64_t a1, void (*a2)(unsigned char *))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for AccessibilityComponent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, (uint64_t)v13, &demangling cache variable for type metadata for LocalizedStringResource?);
  Entity.accessibilityComponent.getter((uint64_t)v10);
  a2(v13);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v6, v10, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  uint64_t v14 = (void (*)(unsigned char *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v14(v16, 0);
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
  return outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for LocalizedStringResource?);
}

void (*Entity.accessibilityValue.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[9] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v3[11] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v3[12] = v8;
  size_t v9 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?)
                             - 8)
                 + 64);
  v3[13] = malloc(v9);
  v3[14] = malloc(v9);
  v3[15] = malloc(v9);
  Entity.accessibilityComponent.getter((uint64_t)v8);
  AccessibilityComponent.value.getter();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v7 + 8);
  v3[16] = v10;
  v3[17] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v8, v5);
  return Entity.accessibilityValue.modify;
}

void Entity.accessibilityValue.modify(uint64_t a1, char a2)
{
}

void Entity.accessibilityLabelKey.modify(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v5 = *(void **)a1;
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(*(void *)(*(void *)a1 + 120), *(void *)(*(void *)a1 + 112), &demangling cache variable for type metadata for LocalizedStringResource?);
  uint64_t v16 = (void (*)(void *, uint64_t))v5[16];
  uint64_t v6 = (void *)v5[14];
  if (a2)
  {
    uint64_t v18 = (void *)v5[15];
    uint64_t v7 = (void *)v5[12];
    uint64_t v8 = v5[13];
    uint64_t v10 = v5[10];
    uint64_t v9 = v5[11];
    uint64_t v11 = (void *)v5[9];
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v5[14], v8, &demangling cache variable for type metadata for LocalizedStringResource?);
    Entity.accessibilityComponent.getter((uint64_t)v7);
    uint64_t v17 = (void *)v8;
    a3(v8);
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v11, v7, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v11, 0, 1, v10);
    uint64_t v12 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v12(v5, 0);
    v16(v7, v10);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for LocalizedStringResource?);
  }
  else
  {
    uint64_t v7 = (void *)v5[12];
    uint64_t v17 = (void *)v5[13];
    uint64_t v18 = (void *)v5[15];
    uint64_t v14 = v5[10];
    uint64_t v13 = v5[11];
    uint64_t v11 = (void *)v5[9];
    Entity.accessibilityComponent.getter((uint64_t)v7);
    a3((uint64_t)v6);
    (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v11, v7, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v14);
    uint64_t v15 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v15(v5 + 4, 0);
    v16(v7, v14);
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v18, &demangling cache variable for type metadata for LocalizedStringResource?);
  free(v18);
  free(v6);
  free(v17);
  free(v7);
  free(v11);

  free(v5);
}

uint64_t Entity.accessibilityTraits.getter()
{
  uint64_t v0 = type metadata accessor for AccessibilityComponent();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Entity.accessibilityComponent.getter((uint64_t)v3);
  uint64_t v4 = AccessibilityComponent.traitsRawValue.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t key path getter for Entity.accessibilityTraits : Entity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityComponent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Entity.accessibilityComponent.getter((uint64_t)v5);
  uint64_t v6 = AccessibilityComponent.traitsRawValue.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *a1 = v6;
  return result;
}

uint64_t key path setter for Entity.accessibilityTraits : Entity()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = &v9[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for AccessibilityComponent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Entity.accessibilityComponent.getter((uint64_t)v6);
  AccessibilityComponent.traitsRawValue.setter();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 16))(v2, v6, v3);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  uint64_t v7 = (void (*)(unsigned char *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v7(v9, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Entity.accessibilityTraits.setter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = &v9[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for AccessibilityComponent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Entity.accessibilityComponent.getter((uint64_t)v6);
  AccessibilityComponent.traitsRawValue.setter();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 16))(v2, v6, v3);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  uint64_t v7 = (void (*)(unsigned char *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v7(v9, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

void (*Entity.accessibilityTraits.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[10] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v3[12] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v3[13] = v8;
  Entity.accessibilityComponent.getter((uint64_t)v8);
  uint64_t v9 = AccessibilityComponent.traitsRawValue.getter();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v7 + 8);
  v3[14] = v10;
  v3[15] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v8, v5);
  v3[8] = v9;
  return Entity.accessibilityTraits.modify;
}

void Entity.accessibilityTraits.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 96);
  uint64_t v4 = *(void *)(*(void *)a1 + 104);
  uint64_t v7 = *(void *)(*(void *)a1 + 80);
  uint64_t v6 = *(void *)(*(void *)a1 + 88);
  Entity.accessibilityComponent.getter(v4);
  AccessibilityComponent.traitsRawValue.setter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v6);
  if (a2)
  {
    uint64_t v8 = (void (*)(void *, uint64_t))v3[14];
    uint64_t v9 = (void *)v3[13];
    uint64_t v10 = (void *)v3[10];
    uint64_t v11 = v3[11];
    uint64_t v12 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v12(v3, 0);
    v8(v9, v11);
  }
  else
  {
    uint64_t v13 = (void (*)(void *, uint64_t))v3[14];
    uint64_t v9 = (void *)v3[13];
    uint64_t v10 = (void *)v3[10];
    uint64_t v14 = v3[11];
    uint64_t v15 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v15(v3 + 4, 0);
    v13(v9, v14);
  }
  free(v9);
  free(v10);

  free(v3);
}

uint64_t Entity.accessibilityCustomContent.getter()
{
  return Entity.accessibilityCustomContent.getter(MEMORY[0x1E4F3ABE8]);
}

uint64_t Entity.accessibilityCustomContent.setter(uint64_t a1)
{
  return Entity.accessibilityCustomContent.setter(a1, MEMORY[0x1E4F3ABF0]);
}

void (*Entity.accessibilityCustomContent.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[10] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v3[12] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v3[13] = v8;
  Entity.accessibilityComponent.getter((uint64_t)v8);
  uint64_t v9 = AccessibilityComponent.customContent.getter();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v7 + 8);
  v3[14] = v10;
  v3[15] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v8, v5);
  v3[8] = v9;
  return Entity.accessibilityCustomContent.modify;
}

void Entity.accessibilityCustomContent.modify(uint64_t a1, char a2)
{
}

uint64_t Entity.accessibilityCustomRotors.getter()
{
  return Entity.accessibilityCustomContent.getter((uint64_t (*)(uint64_t))AccessibilityComponent.customRotors.getter);
}

uint64_t Entity.accessibilityCustomRotors.setter(uint64_t a1)
{
  return Entity.accessibilityCustomContent.setter(a1, (void (*)(uint64_t))AccessibilityComponent.customRotors.setter);
}

void (*Entity.accessibilityCustomRotors.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[10] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v3[12] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v3[13] = v8;
  Entity.accessibilityComponent.getter((uint64_t)v8);
  unint64_t v9 = AccessibilityComponent.customRotors.getter();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v7 + 8);
  v3[14] = v10;
  v3[15] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v8, v5);
  v3[8] = v9;
  return Entity.accessibilityCustomRotors.modify;
}

void Entity.accessibilityCustomRotors.modify(uint64_t a1, char a2)
{
}

uint64_t Entity.accessibilitySystemActions.getter()
{
  return Entity.accessibilityLabelKey.getter(MEMORY[0x1E4F3ABF8]);
}

uint64_t Entity.accessibilityLabelKey.getter(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for AccessibilityComponent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Entity.accessibilityComponent.getter((uint64_t)v5);
  a1(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t key path getter for Entity.accessibilityLabelKey : Entity(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = Entity.accessibilityComponent.getter((uint64_t)v8);
  a4(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t key path setter for Entity.accessibilitySystemActions : Entity(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessibilityComponent.SupportedActions();
  __n128 v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return Entity.accessibilitySystemActions.setter((uint64_t)v5);
}

uint64_t Entity.accessibilitySystemActions.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for AccessibilityComponent.SupportedActions();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x1F4188790](v9);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v10 + 16))(&v15[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v9, v11);
  Entity.accessibilityComponent.getter((uint64_t)v8);
  AccessibilityComponent.systemActions.setter();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 16))(v4, v8, v5);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  uint64_t v13 = (void (*)(unsigned char *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v13(v15, 0);
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
}

void (*Entity.accessibilitySystemActions.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0xA0uLL);
  *a1 = v3;
  v3[8] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[9] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v3[11] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v3[12] = v8;
  uint64_t v9 = type metadata accessor for AccessibilityComponent.SupportedActions();
  v3[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[14] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v3[15] = malloc(v11);
  v3[16] = malloc(v11);
  v3[17] = malloc(v11);
  Entity.accessibilityComponent.getter((uint64_t)v8);
  AccessibilityComponent.systemActions.getter();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v7 + 8);
  v3[18] = v12;
  v3[19] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v8, v5);
  return Entity.accessibilitySystemActions.modify;
}

void Entity.accessibilitySystemActions.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void))(*(void *)(*(void *)a1 + 112) + 16);
  ((void (*)(void, void, void))v4)(*(void *)(*(void *)a1 + 128), v3[17], v3[13]);
  int v22 = (void (*)(void *, uint64_t))v3[18];
  if (a2)
  {
    uint64_t v5 = (void *)v3[16];
    unsigned int v23 = (void *)v3[17];
    uint64_t v6 = (void *)v3[15];
    uint64_t v7 = (void *)v3[12];
    uint64_t v20 = v3[13];
    uint64_t v21 = v3[14];
    uint64_t v9 = v3[10];
    uint64_t v8 = v3[11];
    uint64_t v10 = (void *)v3[9];
    v4(v6, v5);
    size_t v11 = v5;
    Entity.accessibilityComponent.getter((uint64_t)v7);
    uint64_t v25 = v6;
    AccessibilityComponent.systemActions.setter();
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v7, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v9);
    uint64_t v12 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v12(v3, 0);
    v22(v7, v9);
    uint64_t v13 = *(void (**)(void *, uint64_t))(v21 + 8);
    v13(v11, v20);
    uint64_t v14 = v23;
    v13(v23, v20);
  }
  else
  {
    uint64_t v15 = (void *)v3[16];
    uint64_t v16 = v3[14];
    unsigned int v24 = (void *)v3[17];
    uint64_t v25 = (void *)v3[15];
    uint64_t v7 = (void *)v3[12];
    uint64_t v18 = v3[10];
    uint64_t v17 = v3[11];
    uint64_t v10 = (void *)v3[9];
    Entity.accessibilityComponent.getter((uint64_t)v7);
    AccessibilityComponent.systemActions.setter();
    (*(void (**)(void *, void *, uint64_t))(v17 + 16))(v10, v7, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v18);
    size_t v11 = v15;
    unint64_t v19 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v19(v3 + 4, 0);
    v22(v7, v18);
    uint64_t v14 = v24;
    (*(void (**)(void))(v16 + 8))();
  }
  free(v14);
  free(v11);
  free(v25);
  free(v7);
  free(v10);

  free(v3);
}

uint64_t Entity.accessibilityCustomActions.getter()
{
  return Entity.accessibilityCustomContent.getter(MEMORY[0x1E4F3ABD8]);
}

uint64_t Entity.accessibilityCustomContent.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for AccessibilityComponent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Entity.accessibilityComponent.getter((uint64_t)v5);
  uint64_t v7 = a1(v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t key path getter for Entity.accessibilityCustomContent : Entity@<X0>(uint64_t (*a1)(uint64_t)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AccessibilityComponent();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = Entity.accessibilityComponent.getter((uint64_t)v7);
  uint64_t v9 = a1(v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v9;
  return result;
}

uint64_t key path setter for Entity.accessibilityCustomContent : Entity(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for AccessibilityComponent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = *a1;
  swift_bridgeObjectRetain();
  Entity.accessibilityComponent.getter((uint64_t)v13);
  a5(v14);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 16))(v9, v13, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  uint64_t v15 = (void (*)(unsigned char *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v15(v17, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t Entity.accessibilityCustomActions.setter(uint64_t a1)
{
  return Entity.accessibilityCustomContent.setter(a1, MEMORY[0x1E4F3ABE0]);
}

uint64_t Entity.accessibilityCustomContent.setter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for AccessibilityComponent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Entity.accessibilityComponent.getter((uint64_t)v10);
  a2(a1);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v6, v10, v7);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  uint64_t v11 = (void (*)(unsigned char *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v11(v13, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

void (*Entity.accessibilityCustomActions.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x80uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityComponent?);
  v3[10] = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  v3[11] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v3[12] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v3[13] = v8;
  Entity.accessibilityComponent.getter((uint64_t)v8);
  uint64_t v9 = AccessibilityComponent.customActions.getter();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v7 + 8);
  v3[14] = v10;
  v3[15] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v10(v8, v5);
  v3[8] = v9;
  return Entity.accessibilityCustomActions.modify;
}

void Entity.accessibilityCustomActions.modify(uint64_t a1, char a2)
{
}

void Entity.accessibilityCustomContent.modify(uint64_t a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  if (a2)
  {
    uint64_t v6 = (void (*)(void *, uint64_t))v4[14];
    uint64_t v8 = v4[12];
    uint64_t v7 = (void *)v4[13];
    uint64_t v9 = (void *)v4[10];
    uint64_t v10 = v4[11];
    swift_bridgeObjectRetain();
    Entity.accessibilityComponent.getter((uint64_t)v7);
    a3(v5);
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v9, v7, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v9, 0, 1, v10);
    uint64_t v11 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v11(v4, 0);
    v6(v7, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = (void *)v4[13];
    uint64_t v15 = (void (*)(void *, uint64_t))v4[14];
    uint64_t v12 = v4[11];
    uint64_t v13 = v4[12];
    uint64_t v9 = (void *)v4[10];
    Entity.accessibilityComponent.getter((uint64_t)v7);
    a3(v5);
    (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v9, v7, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    uint64_t v14 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v14(v4 + 4, 0);
    v15(v7, v12);
  }
  free(v7);
  free(v9);

  free(v4);
}

uint64_t AccessibilityComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v25[1] = a1;
  v25[0] = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v25[0] - 8);
  MEMORY[0x1F4188790](v25[0]);
  uint64_t v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AccessibilityComponent();
  __n128 v9 = MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1E2ABF7C0;
  *(void *)(v12 + 32) = 0xD000000000000016;
  *(void *)(v12 + 40) = 0x80000001E2AB9710;
  char v13 = AccessibilityComponent.isAccessibilityElement.getter();
  uint64_t v14 = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v12 + 48) = v13 & 1;
  *(void *)(v12 + 72) = v14;
  *(void *)(v12 + 80) = 0x6C6562616CLL;
  *(void *)(v12 + 88) = 0xE500000000000000;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  *(void *)(v12 + 120) = v15;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 96));
  AccessibilityComponent.label.getter();
  *(void *)(v12 + 128) = 0x65756C6176;
  *(void *)(v12 + 136) = 0xE500000000000000;
  *(void *)(v12 + 168) = v15;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 144));
  AccessibilityComponent.value.getter();
  *(void *)(v12 + 176) = 0x737469617274;
  *(void *)(v12 + 184) = 0xE600000000000000;
  uint64_t v16 = AccessibilityComponent.traitsRawValue.getter();
  type metadata accessor for UIAccessibilityTraits(0);
  *(void *)(v12 + 192) = v16;
  *(void *)(v12 + 216) = v17;
  strcpy((char *)(v12 + 224), "systemActions");
  *(_WORD *)(v12 + 238) = -4864;
  *(void *)(v12 + 264) = type metadata accessor for AccessibilityComponent.SupportedActions();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 240));
  AccessibilityComponent.systemActions.getter();
  strcpy((char *)(v12 + 272), "customActions");
  *(_WORD *)(v12 + 286) = -4864;
  uint64_t v18 = AccessibilityComponent.customActions.getter();
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [LocalizedStringResource]);
  *(void *)(v12 + 288) = v18;
  *(void *)(v12 + 312) = v19;
  strcpy((char *)(v12 + 320), "customContent");
  *(_WORD *)(v12 + 334) = -4864;
  uint64_t v20 = AccessibilityComponent.customContent.getter();
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AccessibilityComponent.CustomContent]);
  *(void *)(v12 + 336) = v20;
  *(void *)(v12 + 360) = v21;
  strcpy((char *)(v12 + 368), "customRotors");
  *(unsigned char *)(v12 + 381) = 0;
  *(_WORD *)(v12 + 382) = -5120;
  unint64_t v22 = AccessibilityComponent.customRotors.getter();
  *(void *)(v12 + 408) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AccessibilityComponent.RotorType]);
  *(void *)(v12 + 384) = v22;
  uint64_t v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v7, 1, 1, v23);
  (*(void (**)(char *, void, void))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v25[0]);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  char v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    char v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AccessibilityComponent.RotorTypeInternal>);
  uint64_t v10 = *(void *)(type metadata accessor for AccessibilityComponent.RotorTypeInternal() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  char v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for AccessibilityComponent.RotorTypeInternal() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
    uint64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  char v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Material);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    char v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, ARAnchor)>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor))
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  char v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  void v13[2] = v8;
  void v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor))
                  - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AccessibilityComponent.RotorType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AccessibilityComponent.RotorType(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v13 = (uint64_t *)((char *)&v22 - v12);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AccessibilityComponent.RotorType, AccessibilityComponent.RotorType));
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &v16[*(int *)(v17 + 56)];
  outlined init with copy of AccessibilityComponent.RotorType(a1, (uint64_t)v16);
  outlined init with copy of AccessibilityComponent.RotorType(a2, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined init with copy of AccessibilityComponent.RotorType((uint64_t)v16, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      char v19 = *v13 == *(void *)v18;
      goto LABEL_6;
    }
LABEL_8:
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v16, &demangling cache variable for type metadata for (AccessibilityComponent.RotorType, AccessibilityComponent.RotorType));
    char v19 = 0;
    return v19 & 1;
  }
  outlined init with copy of AccessibilityComponent.RotorType((uint64_t)v16, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v18, v4);
  char v19 = MEMORY[0x1E4E60840](v10, v7);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v7, v4);
  v20(v10, v4);
LABEL_6:
  outlined destroy of AccessibilityComponent.RotorType((uint64_t)v16);
  return v19 & 1;
}

uint64_t outlined destroy of AccessibilityComponent.RotorType(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessibilityComponent.RotorType(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.Activate()
{
  return &protocol witness table for AccessibilityEvents.Activate;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.Increment()
{
  return &protocol witness table for AccessibilityEvents.Increment;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.Decrement()
{
  return &protocol witness table for AccessibilityEvents.Decrement;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.CustomAction()
{
  return &protocol witness table for AccessibilityEvents.CustomAction;
}

_UNKNOWN **base witness table accessor for Event in AccessibilityEvents.RotorNavigation()
{
  return &protocol witness table for AccessibilityEvents.RotorNavigation;
}

uint64_t sub_1E2A68428@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AccessibilityComponent.traitsRawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1E2A68454()
{
  return AccessibilityComponent.traitsRawValue.setter();
}

unint64_t sub_1E2A6847C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = AccessibilityComponent.customRotors.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1E2A684A8()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return AccessibilityComponent.customRotors.setter(v0);
}

uint64_t sub_1E2A684D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, MEMORY[0x1E4F3AC18]);
}

uint64_t sub_1E2A68500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, a4, (uint64_t (*)(char *))Entity.accessibilityLabelKey.setter);
}

uint64_t sub_1E2A6852C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, MEMORY[0x1E4F3AC28]);
}

uint64_t sub_1E2A68558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, a4, (uint64_t (*)(char *))Entity.accessibilityValue.setter);
}

uint64_t sub_1E2A6858C@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for Entity.accessibilityCustomContent : Entity(MEMORY[0x1E4F3ABE8], a1);
}

uint64_t sub_1E2A685B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityCustomContent : Entity(a1, a2, a3, a4, MEMORY[0x1E4F3ABF0]);
}

uint64_t sub_1E2A685E4@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for Entity.accessibilityCustomContent : Entity((uint64_t (*)(uint64_t))AccessibilityComponent.customRotors.getter, a1);
}

uint64_t sub_1E2A68610(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityCustomContent : Entity(a1, a2, a3, a4, (void (*)(uint64_t))AccessibilityComponent.customRotors.setter);
}

uint64_t sub_1E2A6863C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Entity.accessibilityLabelKey : Entity(a1, a2, a3, MEMORY[0x1E4F3ABF8]);
}

uint64_t sub_1E2A6866C@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for Entity.accessibilityCustomContent : Entity(MEMORY[0x1E4F3ABD8], a1);
}

uint64_t sub_1E2A68698(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Entity.accessibilityCustomContent : Entity(a1, a2, a3, a4, MEMORY[0x1E4F3ABE0]);
}

ValueMetadata *type metadata accessor for AccessibilityEvents()
{
  return &type metadata for AccessibilityEvents;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityEvents.RotorNavigation(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for AccessibilityComponent.RotorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v10 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (_OWORD *)((char *)a2 + v10);
    uint64_t v13 = *(uint64_t *)((char *)a2 + v10 + 24);
    swift_retain();
    if (v13)
    {
      *((void *)v11 + 3) = v13;
      (**(void (***)(char *, _OWORD *, uint64_t))(v13 - 8))(v11, v12, v13);
    }
    else
    {
      long long v14 = v12[1];
      *(_OWORD *)uint64_t v11 = *v12;
      *((_OWORD *)v11 + 1) = v14;
    }
    uint64_t v15 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AccessibilityEvents.RotorNavigation(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityComponent.RotorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_release();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  if (*(void *)(v5 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v5);
  }

  return swift_release();
}

char *initializeWithCopy for AccessibilityEvents.RotorNavigation(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccessibilityComponent.RotorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)&a2[v8 + 24];
  swift_retain();
  if (v11)
  {
    *((void *)v9 + 3) = v11;
    (**(void (***)(char *, char *, uint64_t))(v11 - 8))(v9, v10, v11);
  }
  else
  {
    long long v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *((_OWORD *)v9 + 1) = v12;
  }
  uint64_t v13 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  long long v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)long long v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  swift_retain();
  return a1;
}

char *assignWithCopy for AccessibilityEvents.RotorNavigation(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.RotorType((uint64_t)a1);
    uint64_t v6 = type metadata accessor for AccessibilityComponent.RotorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  uint64_t v8 = a3[6];
  uint64_t v9 = (uint64_t)&a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)&a2[v8 + 24];
  if (!*(void *)&a1[v8 + 24])
  {
    if (v11)
    {
      *(void *)(v9 + 24) = v11;
      (**(void (***)(uint64_t, char *))(v11 - 8))(v9, v10);
      goto LABEL_12;
    }
LABEL_11:
    long long v12 = *((_OWORD *)v10 + 1);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v12;
    goto LABEL_12;
  }
  if (!v11)
  {
    __swift_destroy_boxed_opaque_existential_1(v9);
    goto LABEL_11;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)v9, (uint64_t *)v10);
LABEL_12:
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v13 = a3[8];
  long long v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *((void *)v15 + 1);
  *(void *)long long v14 = *(void *)v15;
  *((void *)v14 + 1) = v16;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

char *initializeWithTake for AccessibilityEvents.RotorNavigation(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for AccessibilityComponent.RotorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  int v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  long long v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)int v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  uint64_t v12 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  return a1;
}

char *assignWithTake for AccessibilityEvents.RotorNavigation(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.RotorType((uint64_t)a1);
    uint64_t v6 = type metadata accessor for AccessibilityComponent.RotorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  uint64_t v8 = a3[6];
  int v9 = &a1[v8];
  if (*(void *)&a1[v8 + 24]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&a1[v8]);
  }
  long long v10 = *(_OWORD *)&a2[v8 + 16];
  *(_OWORD *)int v9 = *(_OWORD *)&a2[v8];
  *((_OWORD *)v9 + 1) = v10;
  uint64_t v11 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityEvents.RotorNavigation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E2A69078);
}

uint64_t sub_1E2A69078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for AccessibilityComponent.RotorType);
}

uint64_t storeEnumTagSinglePayload for AccessibilityEvents.RotorNavigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E2A690A4);
}

uint64_t sub_1E2A690A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for AccessibilityComponent.RotorType);
}

uint64_t type metadata completion function for AccessibilityEvents.RotorNavigation()
{
  uint64_t result = type metadata accessor for AccessibilityComponent.RotorType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityEvents.Activate()
{
  return &type metadata for AccessibilityEvents.Activate;
}

ValueMetadata *type metadata accessor for AccessibilityEvents.Increment()
{
  return &type metadata for AccessibilityEvents.Increment;
}

ValueMetadata *type metadata accessor for AccessibilityEvents.Decrement()
{
  return &type metadata for AccessibilityEvents.Decrement;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityEvents.CustomAction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AccessibilityEvents.CustomAction(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E2A6950C);
}

uint64_t sub_1E2A6950C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, MEMORY[0x1E4F27608]);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == a2)
  {
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v9(a1, a2, v7);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E2A695FC);
}

uint64_t sub_1E2A695FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, MEMORY[0x1E4F27608]);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
  {
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v11(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for AccessibilityEvents.CustomAction()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityComponent.RotorType(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t destroy for AccessibilityComponent.RotorType(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for LocalizedStringResource();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *initializeWithCopy for AccessibilityComponent.RotorType(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for AccessibilityComponent.RotorType(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.RotorType((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for AccessibilityComponent.RotorType(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for AccessibilityComponent.RotorType(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityComponent.RotorType((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for LocalizedStringResource();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityComponent.RotorType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AccessibilityComponent.RotorType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for AccessibilityComponent.RotorType()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for AccessibilityComponent.RotorType()
{
  uint64_t result = type metadata accessor for LocalizedStringResource();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id HoverEffectComponent.SpotlightHoverEffectStyle.color.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E4F3AB78]);
}

void HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(void *a1)
{
}

void (*HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)HoverEffectComponent.HighlightHoverEffectStyle._color.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.modify;
}

void HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(void **a1, char a2)
{
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)(void *a1, uint64_t a2, float a3)
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)(a1, a2, MEMORY[0x1E4F3AB70], a3);
}

void HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:)(void *a1, float a2)
{
}

id HoverEffectComponent.HighlightHoverEffectStyle.color.getter()
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(MEMORY[0x1E4F3AB50]);
}

id HoverEffectComponent.SpotlightHoverEffectStyle.color.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = (void *)a1();
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v1);

  return v2;
}

void key path getter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(uint64_t (*a1)(void)@<X3>, void *a2@<X8>)
{
  uint64_t v3 = (void *)a1();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a2 = v4;
}

void key path setter for HoverEffectComponent.SpotlightHoverEffectStyle.color : HoverEffectComponent.SpotlightHoverEffectStyle(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id))
{
  id v6 = *a1;
  a5(objc_msgSend(v6, sel_CGColor));
}

void HoverEffectComponent.HighlightHoverEffectStyle.color.setter(void *a1)
{
}

void HoverEffectComponent.SpotlightHoverEffectStyle.color.setter(void *a1, void (*a2)(id))
{
  a2(objc_msgSend(a1, sel_CGColor));
}

void (*HoverEffectComponent.HighlightHoverEffectStyle.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)HoverEffectComponent.HighlightHoverEffectStyle._color.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return HoverEffectComponent.HighlightHoverEffectStyle.color.modify;
}

void HoverEffectComponent.HighlightHoverEffectStyle.color.modify(void **a1, char a2)
{
}

void HoverEffectComponent.SpotlightHoverEffectStyle.color.modify(void **a1, char a2, void (*a3)(id))
{
  id v4 = *a1;
  id v6 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3(objc_msgSend(v5, sel_CGColor));
  }
  else
  {
    a3(objc_msgSend(v4, sel_CGColor));
  }
}

uint64_t HoverEffectComponent.HighlightHoverEffectStyle.init(color:strength:opacityFunction:)(void *a1, uint64_t a2, float a3)
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)(a1, a2, MEMORY[0x1E4F3AB48], a3);
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:opacityFunction:)(void *a1, uint64_t a2, void (*a3)(id, char *, float), float a4)
{
  uint64_t v8 = type metadata accessor for HoverEffectComponent.OpacityFunction();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = MEMORY[0x1F4188790](v8).n128_u64[0];
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1) {
    id v13 = objc_msgSend(a1, sel_CGColor, v10);
  }
  else {
    id v13 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  a3(v13, v12, a4);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
}

void HoverEffectComponent.HighlightHoverEffectStyle.init(color:strength:)(void *a1, float a2)
{
}

void HoverEffectComponent.SpotlightHoverEffectStyle.init(color:strength:)(void *a1, void (*a2)(id, char *, float), float a3)
{
  uint64_t v6 = type metadata accessor for HoverEffectComponent.OpacityFunction();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)&double v8 = MEMORY[0x1F4188790](v6).n128_u64[0];
  double v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1) {
    id v11 = objc_msgSend(a1, sel_CGColor, v8);
  }
  else {
    id v11 = 0;
  }
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E4F3AB98], v6);
  a2(v11, v10, a3);
}

uint64_t HoverEffectComponent.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HoverEffectComponent();
  __n128 v9 = MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1E2ABE6A0;
  *(void *)(v12 + 32) = 0x6666457265766F68;
  *(void *)(v12 + 40) = 0xEB00000000746365;
  *(void *)(v12 + 72) = type metadata accessor for HoverEffectComponent.HoverEffect();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v12 + 48));
  HoverEffectComponent.hoverEffect.getter();
  uint64_t v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 1, 1, v13);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance HoverEffectComponent(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v7 - 8);
  __n128 v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1E2ABE6A0;
  *(void *)(v14 + 32) = 0x6666457265766F68;
  *(void *)(v14 + 40) = 0xEB00000000746365;
  *(void *)(v14 + 72) = type metadata accessor for HoverEffectComponent.HoverEffect();
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v14 + 48));
  HoverEffectComponent.hoverEffect.getter();
  uint64_t v15 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBC430], v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.customMirror.getter(MEMORY[0x1E4F3AB90], MEMORY[0x1E4F3AB78], MEMORY[0x1E4F3AB88], a1);
}

uint64_t HoverEffectComponent.HighlightHoverEffectStyle.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  return HoverEffectComponent.SpotlightHoverEffectStyle.customMirror.getter(MEMORY[0x1E4F3AB68], MEMORY[0x1E4F3AB50], MEMORY[0x1E4F3AB60], a1);
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle.customMirror.getter@<X0>(uint64_t (*a1)(void, __n128)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v26[0] = a3;
  v26[1] = a4;
  uint64_t v7 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __n128 v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1(0, v12);
  __n128 v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))((char *)v26 - v17, v4, v15, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1E2ABFA10;
  *(void *)(v19 + 32) = 0x726F6C6F63;
  *(void *)(v19 + 40) = 0xE500000000000000;
  uint64_t v20 = (void *)a2();
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v20);

  unint64_t v22 = type metadata accessor for UIColor();
  *(void *)(v19 + 48) = v21;
  *(void *)(v19 + 72) = v22;
  *(void *)(v19 + 80) = 0x6874676E65727473;
  *(void *)(v19 + 88) = 0xE800000000000000;
  float v23 = ((float (*)(void))v26[0])();
  *(void *)(v19 + 120) = MEMORY[0x1E4FBB470];
  *(float *)(v19 + 96) = v23;
  uint64_t v24 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v14, 1, 1, v24);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBC430], v7);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for HoverEffectComponent.ShaderHoverEffectInputs();
  __n128 v9 = MEMORY[0x1F4188790](v8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1E2ABFA10;
  strcpy((char *)(v12 + 32), "fadeInDuration");
  *(unsigned char *)(v12 + 47) = -18;
  HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.getter();
  uint64_t v13 = MEMORY[0x1E4FBB3D0];
  *(void *)(v12 + 48) = v14;
  *(void *)(v12 + 72) = v13;
  *(void *)(v12 + 80) = 0x4474754F65646166;
  *(void *)(v12 + 88) = 0xEF6E6F6974617275;
  HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.getter();
  *(void *)(v12 + 120) = v13;
  *(void *)(v12 + 96) = v15;
  uint64_t v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void sub_1E2A6AE60(void *a1@<X8>)
{
}

void sub_1E2A6AE8C(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1E2A6AEB8(void *a1@<X8>)
{
}

void sub_1E2A6AEE4(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t static ParticleEmitterComponent.Presets.sparks.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v96 = (char *)&v83 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  *(void *)&long long v91 = *(void *)(v92 - 8);
  MEMORY[0x1F4188790](v92);
  uint64_t v90 = (char *)&v83 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  uint64_t v105 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  v99 = (char *)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  uint64_t v103 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101);
  uint64_t v97 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  uint64_t v104 = *(void *)(v100 - 8);
  MEMORY[0x1F4188790](v100);
  v98 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = (void *)type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  uint64_t v88 = *(v89 - 1);
  MEMORY[0x1F4188790](v89);
  uint64_t v87 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  v85 = *(void (***)(char *, void, uint64_t))(v86 - 8);
  MEMORY[0x1F4188790](v86);
  uint64_t v84 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  uint64_t v8 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83);
  uint64_t v10 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter();
  uint64_t v94 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v93 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  unint64_t v22 = (char *)&v83 - v21;
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.init()();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4F3ADB8], v15);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4F3AD98], v11);
  ParticleEmitterComponent.birthLocation.setter();
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4F3AD18], v83);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  v85[13](v84, *MEMORY[0x1E4F3ADC8], v86);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, void, void *))(v88 + 104))(v87, *MEMORY[0x1E4F3ADA0], v89);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  float v23 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v23(v106, 0);
  uint64_t v24 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v24(v106, 0);
  uint64_t v25 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v25(v106, 0);
  uint64_t v26 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v26(v106, 0);
  unint64_t v27 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v27(v106, 0);
  uint64_t v28 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v28(v106, 0);
  uint64_t v29 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v29(v106, 0);
  LODWORD(v88) = *MEMORY[0x1E4F3AD48];
  uint64_t v30 = *(void (**)(void))(v104 + 104);
  v104 += 104;
  v89 = v30;
  v30(v98);
  uint64_t v31 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v31(v106, 0);
  uint64_t v32 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v32(v106, 0);
  uint64_t v33 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v33(v106, 0);
  LODWORD(v86) = *MEMORY[0x1E4F3AD70];
  uint64_t v34 = *(char **)(v103 + 104);
  v103 += 104;
  uint64_t v87 = v34;
  ((void (*)(char *))v34)(v97);
  uint64_t v35 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v35(v106, 0);
  id v36 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v36(v106, 0);
  long long v37 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v37(v106, 0);
  int v38 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v38(v106, 0);
  unint64_t v39 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v39(v106, 0);
  uint64_t v40 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v40(v106, 0);
  int64_t v41 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v41(v106, 0);
  uint64_t v42 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v42(v106, 0);
  uint64_t v43 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v43(v106, 0);
  uint64_t v44 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v44(v106, 0);
  unint64_t v45 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v45(v106, 0);
  int64_t v46 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v46(v106, 0);
  uint64_t v47 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v47(v106, 0);
  char v48 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v48(v106, 0);
  uint64_t v49 = *MEMORY[0x1E4F3AD38];
  char v50 = *(void (***)(char *, void, uint64_t))(v105 + 104);
  v105 += 104;
  v85 = v50;
  ((void (*)(char *, uint64_t, uint64_t))v50)(v99, v49, v102);
  id v51 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v51(v106, 0);
  char v52 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v52(v106, 0);
  char v53 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v53(v106, 0);
  uint64_t v54 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v54(v106, 0);
  uint64_t v55 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v55(v106, 0);
  uint64_t v56 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v56(v106, 0);
  uint64_t v57 = *(void (**)(char *, void, uint64_t))(v91 + 104);
  id v58 = v90;
  uint64_t v59 = v92;
  v57(v90, *MEMORY[0x1E4F3AD88], v92);
  int64_t v60 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v60(v106, 0);
  uint64_t v61 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v61(v106, 0);
  uint64_t v62 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  long long v91 = xmmword_1E2ABE4F0;
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v62(v106, 0);
  float32x4_t v63 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v63(v106, 0);
  CGColorCreateGenericRGB(242.0, 243.0, 250.0, 1.0);
  int64_t v64 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v64(v106, 0);
  CGColorCreateGenericRGB(214.0, 215.0, 241.0, 1.0);
  id v65 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v65(v106, 0);
  CGColorCreateGenericRGB(255.0, 155.0, 0.0, 1.0);
  uint64_t v66 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  v66(v106, 0);
  CGColorCreateGenericRGB(255.0, 216.0, 75.0, 1.0);
  long long v67 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
  v67(v106, 0);
  uint64_t v68 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v68(v106, 0);
  uint64_t v69 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v69(v106, 0);
  int64_t v70 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v70(v106, 0);
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  ((void (*)(char *, void, uint64_t))v89)(v98, v88, v100);
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  ((void (*)(char *, void, uint64_t))v87)(v97, v86, v101);
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  ((void (*)(char *, void, uint64_t))v85)(v99, *MEMORY[0x1E4F3AD40], v102);
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v57(v58, *MEMORY[0x1E4F3AD78], v59);
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  CGColorCreateGenericRGB(244.0, 210.0, 134.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  CGColorCreateGenericRGB(97.0, 184.0, 26.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  type metadata accessor for TextureResource();
  int64_t v71 = (void *)MEMORY[0x1E4E62C20](0xD000000000000010, 0x80000001E2AB8BE0);
  id v72 = objc_msgSend(self, sel_bundleWithIdentifier_, v71);

  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  float32x4_t v73 = (void *)textureLoader;
  v106[3] = &type metadata for TextureLoader;
  v106[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v106[0] = v73;
  id v74 = v73;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v106);

  uint64_t v75 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v75(v106, 0);
  v76 = v93;
  ParticleEmitterComponent.mainEmitter.getter();
  ParticleEmitterComponent.ParticleEmitter.image.getter();
  uint64_t v77 = v94;
  uint64_t v78 = *(void (**)(char *, uint64_t))(v94 + 8);
  v79 = v76;
  uint64_t v80 = v95;
  v78(v79, v95);
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  uint64_t v81 = v96;
  (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v96, v22, v80);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v81, 0, 1, v80);
  ParticleEmitterComponent.spawnedEmitter.setter();
  return ((uint64_t (*)(char *, uint64_t))v78)(v22, v80);
}

uint64_t specialized Sequence.first(where:)(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x1E4E63150](v7 - 4, a3);
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a3 + 8 * v7);
          swift_retain();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10)
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        uint64_t v14 = v9;
        char v12 = a1(&v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v9;
        }
        if (v12)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t GroupActivitiesSynchronizationComponent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupActivitiesSynchronizationComponent.CodingKeys>);
  uint64_t v16 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for GroupActivitiesSynchronizationComponent(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    outlined init with take of GroupActivitiesSynchronizationPeer((uint64_t)v11, v15, type metadata accessor for GroupActivitiesSynchronizationComponent);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return 0x496E6F6973736573;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000044)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupActivitiesSynchronizationComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupActivitiesSynchronizationComponent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance GroupActivitiesSynchronizationComponent@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return GroupActivitiesSynchronizationComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupActivitiesSynchronizationComponent(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupActivitiesSynchronizationComponent.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for static Component.__typeName.getter in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5D90]();
}

uint64_t protocol witness for static Component.componentName.getter in conformance GroupActivitiesSynchronizationComponent()
{
  uint64_t v0 = static GroupActivitiesSynchronizationComponent.componentName;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for static Component.__size.getter in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5DB0]();
}

uint64_t protocol witness for static Component.__load(from:) in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5D70]();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:deinitialize:) in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5DB8]();
}

uint64_t protocol witness for static Component.__store(attribute:to:offset:) in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5DC0]();
}

uint64_t protocol witness for static Component.__free(to:offset:) in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5DA0]();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5D88]();
}

uint64_t protocol witness for Component.__toCore(_:) in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5DC8]();
}

uint64_t protocol witness for static Component.__coreComponentType.getter in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5D78]();
}

uint64_t protocol witness for static Component.__addIntrospectionData(_:) in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5D98]();
}

uint64_t protocol witness for static Component.__load(from:offset:) in conformance GroupActivitiesSynchronizationComponent()
{
  return MEMORY[0x1F40F5DA8]();
}

uint64_t GroupActivitiesSynchronizationPeer.participant.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Participant();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t GroupActivitiesSynchronizationPeer.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Participant();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t GroupActivitiesSynchronizationPeer.hash(into:)()
{
  type metadata accessor for Participant();
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int GroupActivitiesSynchronizationPeer.hashValue.getter()
{
  return Hasher._finalize()();
}

BOOL static GroupActivitiesSynchronizationService.SynchronizationError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void GroupActivitiesSynchronizationService.SynchronizationError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int GroupActivitiesSynchronizationService.SynchronizationError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupActivitiesSynchronizationPeer()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GroupActivitiesSynchronizationPeer()
{
  type metadata accessor for Participant();
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivitiesSynchronizationPeer()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static GroupActivitiesSynchronizationService.SynchronizationError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  return GroupActivitiesSynchronizationService.SynchronizationError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError(uint64_t a1)
{
  GroupActivitiesSynchronizationService.SynchronizationError.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  Hasher.init(_seed:)();
  GroupActivitiesSynchronizationService.SynchronizationError.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t protocol witness for Error._domain.getter in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t GroupActivitiesSynchronizationService.synchronizationSession.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t GroupActivitiesSynchronizationService.discoveryView.setter(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t GroupActivitiesSynchronizationService.session.getter()
{
  return swift_retain();
}

uint64_t key path getter for GroupActivitiesSynchronizationService.entities : <A>GroupActivitiesSynchronizationService<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupActivitiesSynchronizationService.entities.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for GroupActivitiesSynchronizationService.entities : <A>GroupActivitiesSynchronizationService<A>()
{
  return GroupActivitiesSynchronizationService.entities.setter();
}

uint64_t GroupActivitiesSynchronizationService.entities.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1E2A6D1D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = GroupActivitiesSynchronizationService.entities.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1E2A6D1FC()
{
  return GroupActivitiesSynchronizationService.entities.setter();
}

uint64_t sub_1E2A6D228()
{
  return 16;
}

__n128 sub_1E2A6D234(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t GroupActivitiesSynchronizationService.entities.setter()
{
  return static Published.subscript.setter();
}

uint64_t key path setter for GroupActivitiesSynchronizationService.$entities : <A>GroupActivitiesSynchronizationService<A>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>.Publisher);
  __n128 v3 = MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return GroupActivitiesSynchronizationService.$entities.setter((uint64_t)v5);
}

uint64_t GroupActivitiesSynchronizationService.$entities.getter()
{
  return swift_endAccess();
}

uint64_t GroupActivitiesSynchronizationService.$entities.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t GroupActivitiesSynchronizationService.__allocating_init(session:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  GroupActivitiesSynchronizationService.init(session:)(a1);
  return v2;
}

void *GroupActivitiesSynchronizationService.init(session:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = 0;
  v2[5] = 0;
  uint64_t v9 = (char *)v2 + direct field offset for GroupActivitiesSynchronizationService._entities;
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v11 = *(void *)(v4 + 88);
  uint64_t aBlock = MEMORY[0x1E4FBC870];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Entity>);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v8, v5);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v12 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t v13 = MEMORY[0x1E4E64100](v12);
  if (v13)
  {
    v2[6] = a1;
    v2[2] = v13;
    swift_retain();
    v2[3] = RENetworkSystemObserverCreateEx();
    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v10;
    v15[3] = v11;
    v15[4] = v14;
    unint64_t v27 = partial apply for closure #1 in GroupActivitiesSynchronizationService.init(session:);
    uint64_t v28 = v15;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v24 = 1107296256;
    uint64_t v25 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> ();
    uint64_t v26 = &block_descriptor_5;
    uint64_t v16 = _Block_copy(&aBlock);
    swift_release();
    RENetworkSystemObserverOnEntityWillDestroy();
    _Block_release(v16);
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    uint64_t v18 = (void *)swift_allocObject();
    _OWORD v18[2] = v10;
    v18[3] = v11;
    v18[4] = v17;
    unint64_t v27 = partial apply for closure #2 in GroupActivitiesSynchronizationService.init(session:);
    uint64_t v28 = v18;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v24 = 1107296256;
    uint64_t v25 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> (@unowned RENetworkNewUnboundTLEHandlerResult);
    uint64_t v26 = &block_descriptor_11;
    uint64_t v19 = _Block_copy(&aBlock);
    swift_release();
    RENetworkSystemObserverOnTopLevelEntityDidCreate();
    _Block_release(v19);
    type metadata accessor for GroupActivitiesSynchronizationComponent(0);
    static Component.registerComponent()();
    swift_release();
  }
  else
  {
    type metadata accessor for GroupActivitiesSynchronizationService.SynchronizationError();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v20 = 0;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))((uint64_t)v2 + direct field offset for GroupActivitiesSynchronizationService._entities, v5);
    type metadata accessor for GroupActivitiesSynchronizationService();
    swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationService.SynchronizationError()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationService()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1E2A6D9F0()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t closure #1 in GroupActivitiesSynchronizationService.init(session:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Entity();
    uint64_t v1 = static Entity.fromCore(_:ignoringEntityInfo:)();
    MEMORY[0x1F4188790](v1);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    swift_getKeyPath();
    uint64_t v3 = (void (*)(unsigned char *, void))static Published.subscript.modify();
    specialized Set._Variant.remove(_:)();
    swift_release();
    v3(v4, 0);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1E2A6DB90()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in GroupActivitiesSynchronizationService.init(session:)()
{
  return closure #1 in GroupActivitiesSynchronizationService.init(session:)();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t closure #2 in GroupActivitiesSynchronizationService.init(session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v56 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v48 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v52);
  uint64_t v54 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for GroupActivitiesSynchronizationComponent(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v49 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivitiesSynchronizationComponent?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Entity.ComponentSet();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v51 = (uint64_t)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v46 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v46 - v24;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v53 = result;
  if (result)
  {
    type metadata accessor for Entity();
    uint64_t v50 = static Entity.fromCore(_:ignoringEntityInfo:)();
    dispatch thunk of Entity.components.getter();
    Entity.ComponentSet.subscript.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v13, &demangling cache variable for type metadata for GroupActivitiesSynchronizationComponent?);
      uint64_t v27 = v55;
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
      v28(v25, 1, 1, v5);
    }
    else
    {
      uint64_t v29 = v49;
      outlined init with copy of GroupActivitiesSynchronizationComponent((uint64_t)v13, v49);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v13, &demangling cache variable for type metadata for GroupActivitiesSynchronizationComponent?);
      uint64_t v27 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v25, v29, v5);
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v28(v25, 0, 1, v5);
    }
    uint64_t v31 = v53;
    uint64_t v30 = (uint64_t)v54;
    GroupSession.id.getter();
    v28(v22, 0, 1, v5);
    uint64_t v32 = v30 + *(int *)(v52 + 48);
    outlined init with copy of UUID?((uint64_t)v25, v30);
    outlined init with copy of UUID?((uint64_t)v22, v32);
    uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
    if (v33(v30, 1, v5) == 1)
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
      if (v33(v32, 1, v5) == 1)
      {
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v30, &demangling cache variable for type metadata for UUID?);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v34 = v51;
      outlined init with copy of UUID?(v30, v51);
      if (v33(v32, 1, v5) != 1)
      {
        uint64_t v35 = v55;
        uint64_t v36 = v34;
        long long v37 = v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v48, v32, v5);
        lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v39 = *(void (**)(char *, uint64_t))(v35 + 8);
        v39(v37, v5);
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
        v39((char *)v36, v5);
        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v30, &demangling cache variable for type metadata for UUID?);
        if (v38)
        {
LABEL_12:
          if (*(void *)(v31 + 32))
          {
            swift_retain();
            uint64_t v40 = REEntitySetParent();
            MEMORY[0x1F4188790](v40);
            uint64_t v42 = v46;
            uint64_t v41 = v47;
            *(&v46 - 2) = v46;
            *(&v46 - 1) = v41;
            uint64_t KeyPath = swift_getKeyPath();
            MEMORY[0x1F4188790](KeyPath);
            *(&v46 - 2) = v42;
            *(&v46 - 1) = v41;
            swift_getKeyPath();
            uint64_t v44 = v50;
            swift_retain();
            unint64_t v45 = (void (*)(char *, void))static Published.subscript.modify();
            specialized Set._Variant.insert(_:)(&v58, v44);
            swift_release();
            v45(v57, 0);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            return 1;
          }
        }
LABEL_14:
        swift_release();
        swift_release();
        return 0;
      }
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v34, v5);
    }
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v30, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_14;
  }
  return result;
}

uint64_t partial apply for closure #2 in GroupActivitiesSynchronizationService.init(session:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in GroupActivitiesSynchronizationService.init(session:)(a1, a2, v2[4], v2[2], v2[3]);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned OpaquePointer) -> (@unowned RENetworkNewUnboundTLEHandlerResult)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v6 = v5(a2, a3);
  swift_release();
  return v6;
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationComponent(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for GroupActivitiesSynchronizationComponent);
}

uint64_t GroupActivitiesSynchronizationService.deinit()
{
  RESyncRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = v0 + direct field offset for GroupActivitiesSynchronizationService._entities;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Entity>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t GroupActivitiesSynchronizationService.__deallocating_deinit()
{
  GroupActivitiesSynchronizationService.deinit();

  return swift_deallocClassInstance();
}

uint64_t GroupActivitiesSynchronizationService.entity(for:)()
{
  uint64_t result = RENetworkSystemFindEntityWithGuid();
  if (result)
  {
    type metadata accessor for Entity();
    return static Entity.fromCore(_:ignoringEntityInfo:)();
  }
  return result;
}

void GroupActivitiesSynchronizationService.owner(of:)(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Participant();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = *(void *)(v1 + 40);
  if (v10)
  {
    swift_retain();
    Entity.coreEntity.getter();
    RENetworkComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      uint64_t v26 = v9;
      uint64_t v11 = RENetworkComponentOwnerPeerID();
      uint64_t v12 = *(void *)(v10 + 16);
      swift_beginAccess();
      unint64_t v13 = *(void *)(v12 + 16);
      uint64_t v27 = v4;
      uint64_t v28 = v3;
      if (v13 >> 62) {
        goto LABEL_22;
      }
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      for (; v14; uint64_t v14 = _CocoaArrayWrapper.endIndex.getter())
      {
        if ((v13 & 0xC000000000000001) != 0)
        {
          uint64_t v15 = 0;
          while (1)
          {
            uint64_t v16 = MEMORY[0x1E4E63150](v15, v13);
            uint64_t v17 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              break;
            }
            uint64_t v18 = v16;
            if (*(void *)(*(void *)(v16 + 16)
                           + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) == v11)
              goto LABEL_19;
            swift_unknownObjectRelease();
            ++v15;
            if (v17 == v14) {
              goto LABEL_16;
            }
          }
          __break(1u);
        }
        else
        {
          uint64_t v19 = 0;
          while (1)
          {
            uint64_t v20 = v19 + 1;
            if (__OFADD__(v19, 1)) {
              break;
            }
            uint64_t v18 = *(void *)(v13 + 8 * v19 + 32);
            if (*(void *)(*(void *)(v18 + 16)
                           + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) == v11)
            {
              swift_retain();
LABEL_19:
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v22 = v27;
              uint64_t v21 = v28;
              (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v6, *(void *)(v18 + 16)+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant, v28);
              swift_release();
              uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
              uint64_t v24 = v26;
              v23(v26, v6, v21);
              *(void *)(a1 + 24) = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
              *(void *)(a1 + 32) = &protocol witness table for GroupActivitiesSynchronizationPeer;
              boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a1);
              v23((char *)boxed_opaque_existential_0, v24, v21);
              return;
            }
            ++v19;
            if (v20 == v14) {
              goto LABEL_16;
            }
          }
        }
        __break(1u);
LABEL_22:
        swift_bridgeObjectRetain_n();
      }
LABEL_16:
      swift_release();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_release();
    }
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
}

uint64_t GroupActivitiesSynchronizationService.giveOwnership(of:toPeer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivitiesSynchronizationPeer?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of SynchronizationPeerID(a2, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID);
  int v11 = swift_dynamicCast();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v11)
  {
    v12(v6, 0, 1, v7);
    outlined init with take of GroupActivitiesSynchronizationPeer((uint64_t)v6, (uint64_t)v10, type metadata accessor for GroupActivitiesSynchronizationPeer);
    uint64_t v13 = *(void *)(v2 + 40);
    if (v13)
    {
      swift_retain();
      Entity.coreEntity.getter();
      RENetworkComponentGetComponentType();
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        uint64_t v15 = ComponentByClass;
        if (RENetworkComponentIsAuthoritative())
        {
          uint64_t v16 = *(void *)(v13 + 16);
          uint64_t v17 = swift_beginAccess();
          unint64_t v18 = *(void *)(v16 + 16);
          MEMORY[0x1F4188790](v17);
          *(&v22 - 2) = (uint64_t)v10;
          swift_bridgeObjectRetain();
          uint64_t v19 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))partial apply for closure #1 in Array<A>.first(with:), (uint64_t)(&v22 - 4), v18);
          swift_bridgeObjectRelease();
          if (v19)
          {
            uint64_t v20 = *(void *)(*(void *)(v19 + 16)
                            + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID);
            swift_release();
            MEMORY[0x1E4E63C20](v15, v20);
            swift_release();
            outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v10);
            return 1;
          }
        }
      }
      outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v10);
      swift_release();
    }
    else
    {
      outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v10);
    }
  }
  else
  {
    v12(v6, 1, 1, v7);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for GroupActivitiesSynchronizationPeer?);
  }
  return 0;
}

uint64_t GroupActivitiesSynchronizationService.__fromCore(peerID:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Participant();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t result = __PeerIDRef.__as<A>(_:)();
  uint64_t v11 = *(void *)(v1 + 40);
  if (v11)
  {
    uint64_t v12 = v29;
    uint64_t v13 = *(void *)(v11 + 16);
    swift_beginAccess();
    unint64_t v14 = *(void *)(v13 + 16);
    uint64_t v27 = v4;
    uint64_t v28 = v3;
    if (v14 >> 62) {
      goto LABEL_20;
    }
    uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v15; uint64_t v15 = _CocoaArrayWrapper.endIndex.getter())
    {
      if ((v14 & 0xC000000000000001) != 0)
      {
        uint64_t v16 = 0;
        while (1)
        {
          uint64_t v17 = MEMORY[0x1E4E63150](v16, v14);
          uint64_t v18 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            break;
          }
          uint64_t v19 = v17;
          if (*(void *)(*(void *)(v17 + 16)
                         + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) == v12)
            goto LABEL_17;
          swift_unknownObjectRelease();
          ++v16;
          if (v18 == v15) {
            goto LABEL_14;
          }
        }
        __break(1u);
      }
      else
      {
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = v20 + 1;
          if (__OFADD__(v20, 1)) {
            break;
          }
          uint64_t v19 = *(void *)(v14 + 32 + 8 * v20);
          if (*(void *)(*(void *)(v19 + 16)
                         + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID) == v12)
          {
            swift_retain();
LABEL_17:
            swift_bridgeObjectRelease_n();
            uint64_t v23 = v27;
            uint64_t v22 = v28;
            (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v6, *(void *)(v19 + 16)+ OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_participant, v28);
            swift_release();
            uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
            v24(v9, v6, v22);
            *(void *)(a1 + 24) = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
            *(void *)(a1 + 32) = &protocol witness table for GroupActivitiesSynchronizationPeer;
            boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)a1);
            return ((uint64_t (*)(uint64_t *, char *, uint64_t))v24)(boxed_opaque_existential_0, v9, v22);
          }
          ++v20;
          if (v21 == v15) {
            goto LABEL_14;
          }
        }
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain_n();
    }
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease_n();
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t GroupActivitiesSynchronizationService.__toCore(peerID:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivitiesSynchronizationPeer?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of SynchronizationPeerID(a1, (uint64_t)v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID);
  char v10 = swift_dynamicCast();
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  if ((v10 & 1) == 0)
  {
    v11(v5, 1, 1, v6);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for GroupActivitiesSynchronizationPeer?);
LABEL_7:
    uint64_t v21 = MEMORY[0x1E4FBC538];
    v20[0] = 0;
    static __PeerIDRef.__fromCore(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  v11(v5, 0, 1, v6);
  outlined init with take of GroupActivitiesSynchronizationPeer((uint64_t)v5, (uint64_t)v9, type metadata accessor for GroupActivitiesSynchronizationPeer);
  uint64_t v12 = *(void *)(v1 + 40);
  if (!v12) {
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = swift_beginAccess();
  unint64_t v15 = *(void *)(v13 + 16);
  MEMORY[0x1F4188790](v14);
  *(void *)&v19[-16] = v9;
  swift_bridgeObjectRetain();
  uint64_t v16 = specialized Sequence.first(where:)((uint64_t (*)(uint64_t *))closure #1 in Array<A>.first(with:)partial apply, (uint64_t)&v19[-32], v15);
  swift_bridgeObjectRelease();
  if (!v16)
  {
LABEL_6:
    outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v9);
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)(*(void *)(v16 + 16)
                  + OBJC_IVAR____TtCC10RealityKit38GroupActivitiesSynchronizationIdentityP33_7E3E0600D4E33AA58CAA5FAB3E0E71EC5State_peerID);
  swift_release();
  uint64_t v21 = MEMORY[0x1E4FBC538];
  v20[0] = v17;
  static __PeerIDRef.__fromCore(_:)();
  outlined destroy of GroupActivitiesSynchronizationPeer((uint64_t)v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

Swift::Void __swiftcall GroupActivitiesSynchronizationService.startSync()()
{
  if (!v0[4])
  {
    uint64_t v1 = v0;
    RENetworkSystemAddObserver();
    type metadata accessor for GroupActivitiesSynchronizationProtocolLayer();
    uint64_t v2 = v0[6];
    uint64_t v3 = swift_retain();
    GroupActivitiesSynchronizationProtocolLayer.__allocating_init<A>(session:)(v3);
    type metadata accessor for GroupActivitiesSynchronizationDiscoveryView();
    swift_allocObject();
    uint64_t v4 = swift_retain();
    GroupActivitiesSynchronizationDiscoveryView.init(protocolLayer:)(v4);
    uint64_t v6 = v5;
    v0[5] = v5;
    swift_retain();
    swift_release();
    type metadata accessor for GroupActivitiesSynchronizationSession();
    swift_retain();
    swift_retain();
    uint64_t v7 = specialized GroupActivitiesSynchronizationSession.__allocating_init(session:discoveryView:)(v2, v6);
    swift_release();
    swift_release();
    v1[4] = v7;
    swift_release();
    swift_release();
    swift_release();
  }
}

Swift::Void __swiftcall GroupActivitiesSynchronizationService.stopSync()()
{
  if (*(void *)(v0 + 32))
  {
    RENetworkSystemRemoveObserver();
    *(void *)(v0 + 40) = 0;
    swift_release();
    *(void *)(v0 + 32) = 0;
    swift_release();
  }
}

uint64_t GroupActivitiesSynchronizationService.add(entity:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupActivitiesSynchronizationComponent?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v1[4])
  {
    swift_retain();
    GroupSession.id.getter();
    uint64_t v7 = type metadata accessor for GroupActivitiesSynchronizationComponent(0);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
    uint64_t v8 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
    Entity.ComponentSet.subscript.setter();
    v8(v17, 0);
    Entity.coreEntity.getter();
    RENetworkComponentGetComponentType();
    uint64_t v9 = REEntityGetOrAddComponentByClass();
    MEMORY[0x1E4E63C50](v9, 3);
    uint64_t v10 = REEntitySetParent();
    MEMORY[0x1F4188790](v10);
    uint64_t v11 = *(void *)(v3 + 80);
    uint64_t v12 = *(void *)(v3 + 88);
    v17[-2] = v11;
    v17[-1] = v12;
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    v17[-2] = v11;
    v17[-1] = v12;
    swift_getKeyPath();
    swift_retain();
    uint64_t v14 = (void (*)(void *, void))static Published.subscript.modify();
    specialized Set._Variant.insert(_:)(&v18, a1);
    swift_release();
    v14(v17, 0);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    type metadata accessor for GroupActivitiesSynchronizationService.SynchronizationError();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v16 = 1;
    return swift_willThrow();
  }
}

void GroupActivitiesSynchronizationService.remove(entity:)()
{
  if (*(void *)(v0 + 32))
  {
    type metadata accessor for Entity();
    uint64_t v1 = HasSynchronization.isOwner.getter();
    if (v1)
    {
      MEMORY[0x1F4188790](v1);
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x1F4188790](KeyPath);
      swift_getKeyPath();
      uint64_t v3 = (void (*)(unsigned char *, void))static Published.subscript.modify();
      uint64_t v4 = specialized Set._Variant.remove(_:)();
      v3(v6, 0);
      swift_release();
      swift_release();
      swift_release();
      if (v4) {
        HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
      }
    }
  }
  else
  {
    type metadata accessor for GroupActivitiesSynchronizationService.SynchronizationError();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v5 = 1;
    swift_willThrow();
  }
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x1E4F3AC60], &lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60], MEMORY[0x1E4F3AC68]);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v5 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x1E4F3AC40], &lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40], MEMORY[0x1E4F3AC48]);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v5 = type metadata accessor for Participant();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x1E4F294B8], &lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8], MEMORY[0x1E4F294C0]);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t specialized Set._Variant.remove(_:)()
{
  uint64_t v1 = *v0;
  if ((*v0 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    char v2 = __CocoaSet.contains(_:)();
    swift_release();
    if (v2)
    {
      uint64_t v3 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    return 0;
  }
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
  swift_bridgeObjectRetain();
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v1 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v7 = ~v5;
  lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v6 = (v6 + 1) & v7;
    if (((*(void *)(v1 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *v0;
  uint64_t v11 = *v0;
  uint64_t *v0 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeSet.copy()();
    uint64_t v10 = v11;
  }
  uint64_t v3 = *(void *)(*(void *)(v10 + 48) + 8 * v6);
  specialized _NativeSet._delete(at:)(v6);
  uint64_t *v0 = v11;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  char v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = *v1;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  id v30 = a1;
  id v12 = objc_msgSend(a1, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v10, v4);
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v29 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v27 = v2;
    uint64_t v28 = ~v15;
    while (1)
    {
      uint64_t v17 = v11;
      id v18 = *(id *)(*(void *)(v11 + 48) + 8 * v16);
      id v19 = objc_msgSend(v18, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v20 = objc_msgSend(v30, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v20) = static UUID.== infix(_:_:)();
      v13(v7, v4);
      v13(v10, v4);

      if (v20) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v28;
      uint64_t v11 = v17;
      if (((*(void *)(v29 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v22 = v27;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = *v22;
    uint64_t v31 = *v22;
    *uint64_t v22 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v24 = v31;
    }
    uint64_t v21 = *(void *)(*(void *)(v24 + 48) + 8 * v16);
    specialized _NativeSet._delete(at:)(v16);
    *uint64_t v22 = v31;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v21;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = __CocoaSet.count.getter();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = specialized _NativeSet.init(_:capacity:)(v2, v1);
  uint64_t v10 = v3;
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
  swift_retain();
  uint64_t v4 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = v4 & ~v5;
  if ((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = ~v5;
    lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      unint64_t v6 = (v6 + 1) & v7;
      if (((*(void *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
    specialized _NativeSet._delete(at:)(v6);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
      uint64_t *v0 = v10;
      return v8;
    }
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v42 = a3;
  uint64_t v7 = a2(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v38 - v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 56;
  uint64_t v14 = -1 << *(unsigned char *)(*v5 + 32);
  unint64_t v15 = (a1 + 1) & ~v14;
  if (((1 << v15) & *(void *)(v13 + 8 * (v15 >> 6))) != 0)
  {
    char v38 = v5;
    uint64_t v16 = ~v14;
    swift_retain();
    uint64_t v17 = _HashTable.previousHole(before:)();
    uint64_t v18 = v12;
    if ((*(void *)(v13 + 8 * (v15 >> 6)) & (1 << v15)) != 0)
    {
      unint64_t v40 = (v17 + 1) & v16;
      id v20 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v19 = v8 + 16;
      unint64_t v39 = v20;
      uint64_t v45 = *(void *)(v19 + 56);
      uint64_t v41 = v19;
      uint64_t v21 = (void (**)(char *, uint64_t))(v19 - 8);
      do
      {
        uint64_t v22 = v13;
        int64_t v23 = v45 * v15;
        v39(v11, *(void *)(v18 + 48) + v45 * v15, v7);
        uint64_t v24 = v18;
        lazy protocol witness table accessor for type Participant and conformance Participant(v42, v43);
        uint64_t v25 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v21)(v11, v7);
        unint64_t v26 = v25 & v16;
        if (a1 >= (uint64_t)v40)
        {
          if (v26 >= v40 && a1 >= (uint64_t)v26)
          {
LABEL_16:
            uint64_t v18 = v24;
            uint64_t v29 = *(void *)(v24 + 48);
            int64_t v30 = v45 * a1;
            unint64_t v31 = v29 + v45 * a1;
            unint64_t v32 = v29 + v23 + v45;
            if (v45 * a1 < v23 || v31 >= v32)
            {
              swift_arrayInitWithTakeFrontToBack();
              a1 = v15;
            }
            else
            {
              a1 = v15;
              if (v30 != v23)
              {
                swift_arrayInitWithTakeBackToFront();
                a1 = v15;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v26 >= v40 || a1 >= (uint64_t)v26)
        {
          goto LABEL_16;
        }
        uint64_t v18 = v24;
LABEL_5:
        unint64_t v15 = (v15 + 1) & v16;
        uint64_t v13 = v22;
      }
      while (((*(void *)(v22 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) != 0);
    }
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v5 = v38;
  }
  else
  {
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v34 = *v5;
  uint64_t v35 = *(void *)(*v5 + 16);
  BOOL v36 = __OFSUB__(v35, 1);
  uint64_t v37 = v35 - 1;
  if (v36)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v34 + 16) = v37;
    ++*(_DWORD *)(v34 + 36);
  }
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      type metadata accessor for Entity();
      lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
      do
      {
        uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 >= v9 && v2 >= v10)
          {
LABEL_16:
            uint64_t v13 = *(void *)(v3 + 48);
            uint64_t v14 = (void *)(v13 + 8 * v2);
            unint64_t v15 = (void *)(v13 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v14 >= v15 + 1))
            {
              void *v14 = *v15;
              int64_t v2 = v6;
            }
          }
        }
        else if (v10 >= v9 || v2 >= v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v29 = v1;
    uint64_t v30 = v8;
    uint64_t v11 = ~v9;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    uint64_t v13 = v30;
    if ((*(void *)(v30 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v14 = (v12 + 1) & v11;
      unint64_t v15 = (void (**)(char *, uint64_t))(v4 + 8);
      do
      {
        uint64_t v16 = *(void **)(*(void *)(v7 + 48) + 8 * v10);
        Hasher.init(_seed:)();
        id v17 = v16;
        id v18 = objc_msgSend(v17, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        dispatch thunk of Hashable.hash(into:)();
        (*v15)(v6, v3);
        Swift::Int v19 = Hasher._finalize()();

        Swift::Int v20 = v19 & v11;
        if (a1 >= (uint64_t)v14)
        {
          if (v20 < v14)
          {
            uint64_t v13 = v30;
          }
          else
          {
            uint64_t v13 = v30;
            if (a1 >= v20) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v13 = v30;
          if (v20 >= v14 || a1 >= v20)
          {
LABEL_12:
            uint64_t v21 = *(void *)(v7 + 48);
            uint64_t v22 = (void *)(v21 + 8 * a1);
            int64_t v23 = (void *)(v21 + 8 * v10);
            if (a1 != v10 || (a1 = v10, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              a1 = v10;
            }
          }
        }
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v13 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v13 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    uint64_t v1 = v29;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v24 = *v1;
  uint64_t v25 = *(void *)(*v1 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v24 + 16) = v27;
    ++*(_DWORD *)(v24 + 36);
  }
}

uint64_t specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Entity>);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for Entity();
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          uint64_t v2 = v14;
        }
        lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v2;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)();
    uint64_t v21 = v8;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for ARReferenceObject(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v8 = v21;
        unint64_t v15 = *(void *)(v21 + 16);
        if (*(void *)(v21 + 24) <= v15)
        {
          a6(v15 + 1);
          uint64_t v8 = v21;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
        uint64_t v10 = v8 + 56;
        uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
        unint64_t v12 = result & ~v11;
        unint64_t v13 = v12 >> 6;
        if (((-1 << v12) & ~*(void *)(v8 + 56 + 8 * (v12 >> 6))) != 0)
        {
          unint64_t v14 = __clz(__rbit64((-1 << v12) & ~*(void *)(v8 + 56 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v16 = 0;
          unint64_t v17 = (unint64_t)(63 - v11) >> 6;
          do
          {
            if (++v13 == v17 && (v16 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v18 = v13 == v17;
            if (v13 == v17) {
              unint64_t v13 = 0;
            }
            v16 |= v18;
            uint64_t v19 = *(void *)(v10 + 8 * v13);
          }
          while (v19 == -1);
          unint64_t v14 = __clz(__rbit64(~v19)) + (v13 << 6);
        }
        *(void *)(v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        *(void *)(*(void *)(v8 + 48) + 8 * v14) = v20;
        ++*(void *)(v8 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E4FBC870];
  }
  return v8;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    unint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      unint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v8 = __CocoaSet.member(for:)();
    swift_release();
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_release();
      type metadata accessor for Entity();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v18;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v16 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    uint64_t v20 = v16;
    if (*(void *)(v16 + 24) <= *(void *)(v16 + 16))
    {
      swift_retain();
      specialized _NativeSet.resize(capacity:)();
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = v16;
      swift_retain();
    }
    specialized _NativeSet._unsafeInsertNew(_:)(a2, v17);
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
  swift_bridgeObjectRetain();
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v15 = swift_retain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v15, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v19;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v13 = ~v11;
  lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v6 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v12);
  swift_retain();
  return 0;
}

uint64_t specialized Set._Variant.insert(_:)(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &demangling cache variable for type metadata for _SetStorage<ARReferenceImage>, &lazy cache variable for type metadata for ARReferenceImage, 0x1E4F14F08, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    uint64_t v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      uint64_t v24 = v30;
    }
    else
    {
      uint64_t v24 = (void *)v22;
      id v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    *uint64_t v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  void *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1, &demangling cache variable for type metadata for _SetStorage<ARReferenceObject>, &lazy cache variable for type metadata for ARReferenceObject, 0x1E4F14F10, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    uint64_t v30 = (void *)v22;
    unint64_t v23 = *(void *)(v22 + 16);
    if (*(void *)(v22 + 24) <= v23)
    {
      uint64_t v27 = v23 + 1;
      id v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27);
      uint64_t v24 = v30;
    }
    else
    {
      uint64_t v24 = (void *)v22;
      id v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    *uint64_t v3 = (uint64_t)v24;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  id v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  type metadata accessor for Entity();
  lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    lazy protocol witness table accessor for type Participant and conformance Participant((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
    do
    {
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v10;
    }
    while (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v11 + 48) + 8 * a2) = v5;
  uint64_t v12 = *(void *)(v11 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (!v13)
  {
    *(void *)(v11 + 16) = v14;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }
  uint64_t v9 = *v3;
  Swift::Int v10 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)(v8);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8);
  }
  uint64_t v9 = *v3;
  Swift::Int v10 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
    id v12 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v15 = *(id *)(*(void *)(v9 + 48) + 8 * a2);
        char v16 = static NSObject.== infix(_:_:)();

        if (v16) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v17 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v17 + 48) + 8 * a2) = a1;
  uint64_t v18 = *(void *)(v17 + 16);
  BOOL v19 = __OFADD__(v18, 1);
  uint64_t v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    *(void *)(v17 + 16) = v20;
  }
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationPeer(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for GroupActivitiesSynchronizationPeer);
}

uint64_t outlined init with copy of SynchronizationPeerID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined destroy of GroupActivitiesSynchronizationPeer(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for GroupActivitiesSynchronizationPeer(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t base witness table accessor for Equatable in GroupActivitiesSynchronizationPeer()
{
  return lazy protocol witness table accessor for type Participant and conformance Participant(&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationPeer and conformance GroupActivitiesSynchronizationPeer, (void (*)(uint64_t))type metadata accessor for GroupActivitiesSynchronizationPeer);
}

uint64_t lazy protocol witness table accessor for type Participant and conformance Participant(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1E2A72924()
{
  return 16;
}

__n128 sub_1E2A72930(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1E2A7293C()
{
  return GroupActivitiesSynchronizationService.$entities.getter();
}

uint64_t sub_1E2A72964()
{
  return 16;
}

__n128 sub_1E2A72970(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F294B8]);
}

uint64_t destroy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2)
{
  return destroy for GroupActivitiesSynchronizationPeer(a1, a2, MEMORY[0x1E4F294B8]);
}

uint64_t initializeWithCopy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F294B8]);
}

uint64_t assignWithCopy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F294B8]);
}

uint64_t initializeWithTake for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F294B8]);
}

uint64_t assignWithTake for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F294B8]);
}

uint64_t getEnumTagSinglePayload for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E2A72A20);
}

uint64_t sub_1E2A72A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, MEMORY[0x1E4F294B8]);
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E2A72A4C);
}

uint64_t sub_1E2A72A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, MEMORY[0x1E4F294B8]);
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F294B8]);
}

void type metadata completion function for GroupActivitiesSynchronizationService()
{
  type metadata accessor for Published<Set<Entity>>();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t method lookup function for GroupActivitiesSynchronizationService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GroupActivitiesSynchronizationService);
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.entities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.$entities.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.__allocating_init(session:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.entity(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.owner(of:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.giveOwnership(of:toPeer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.__fromCore(peerID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.__toCore(peerID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.startSync()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of GroupActivitiesSynchronizationService.stopSync()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

void type metadata accessor for Published<Set<Entity>>()
{
  if (!lazy cache variable for type metadata for Published<Set<Entity>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Entity>);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Set<Entity>>);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  unint64_t v7 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);

  return v7(a1, a2, v6);
}

uint64_t destroy for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2)
{
  return destroy for GroupActivitiesSynchronizationPeer(a1, a2, MEMORY[0x1E4F27990]);
}

uint64_t destroy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t initializeWithCopy for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t initializeWithCopy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t assignWithCopy for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t assignWithCopy for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t initializeWithTake for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t initializeWithTake for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t assignWithTake for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t assignWithTake for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1E2A73064);
}

uint64_t sub_1E2A73064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1E2A73100);
}

uint64_t sub_1E2A73100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, MEMORY[0x1E4F27990]);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for GroupActivitiesSynchronizationPeer(a1, a2, a3, MEMORY[0x1E4F27990]);
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata instantiation function for GroupActivitiesSynchronizationService.SynchronizationError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

unsigned char *storeEnumTagSinglePayload for GroupActivitiesSynchronizationService.SynchronizationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A73308);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in GroupActivitiesSynchronizationService<A>.SynchronizationError()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for Component in GroupActivitiesSynchronizationComponent()
{
  return &protocol witness table for GroupActivitiesSynchronizationComponent;
}

unint64_t lazy protocol witness table accessor for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationComponent.CodingKeys and conformance GroupActivitiesSynchronizationComponent.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of GroupActivitiesSynchronizationPeer(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of GroupActivitiesSynchronizationComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for GroupActivitiesSynchronizationComponent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for GroupActivitiesSynchronizationComponent.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for GroupActivitiesSynchronizationComponent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1E2A735D0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t getEnumTag for GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return 0;
}

void *type metadata accessor for GroupActivitiesSynchronizationComponent.CodingKeys()
{
  return &unk_1F3E026C0;
}

uint64_t closure #1 in Array<A>.first(with:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in Array<A>.first(with:)(a1) & 1;
}

uint64_t static ParticleEmitterComponent.Presets.magic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  MEMORY[0x1F4188790](v2 - 8);
  v120 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  MEMORY[0x1F4188790](v4 - 8);
  v119 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
  uint64_t v113 = *(void *)(v114 - 8);
  MEMORY[0x1F4188790](v114);
  v112 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  v132 = *(char **)(v111 - 8);
  MEMORY[0x1F4188790](v111);
  v110 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  uint64_t v131 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  v123 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  uint64_t v129 = *(void *)(v125 - 8);
  MEMORY[0x1F4188790](v125);
  v121 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  uint64_t v130 = *(void *)(v124 - 8);
  MEMORY[0x1F4188790](v124);
  v122 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = (void *)type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  uint64_t v108 = *(v109 - 1);
  MEMORY[0x1F4188790](v109);
  v107 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  uint64_t v105 = *(void (**)(void))(v106 - 8);
  MEMORY[0x1F4188790](v106);
  uint64_t v104 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = (void *)type metadata accessor for ParticleEmitterComponent.EmitterShape();
  *(void *)&long long v102 = *(v103 - 1);
  MEMORY[0x1F4188790](v103);
  uint64_t v14 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  uint64_t v15 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101);
  uint64_t v17 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  char v21 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence();
  uint64_t v117 = *(void *)(v118 - 8);
  MEMORY[0x1F4188790](v118);
  v126 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  v133 = (char *)&v100 - v24;
  uint64_t v128 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter();
  uint64_t v116 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128);
  v115 = (char *)&v100 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  id v28 = (char *)&v100 - v27;
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4F3ADC0], v18);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E4F3AD98], v101);
  ParticleEmitterComponent.birthLocation.setter();
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, void, void *))(v102 + 104))(v14, *MEMORY[0x1E4F3AD20], v103);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*((void (**)(char *, void, uint64_t))v105 + 13))(v104, *MEMORY[0x1E4F3ADC8], v106);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, void, void *))(v108 + 104))(v107, *MEMORY[0x1E4F3ADB0], v109);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  uint64_t v29 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v29(v134, 0);
  uint64_t v30 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v30(v134, 0);
  uint64_t v31 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v31(v134, 0);
  uint64_t v32 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v32(v134, 0);
  uint64_t v33 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v33(v134, 0);
  uint64_t v34 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v34(v134, 0);
  uint64_t v35 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v35(v134, 0);
  LODWORD(v108) = *MEMORY[0x1E4F3AD48];
  BOOL v36 = *(void (**)(void))(v130 + 104);
  v130 += 104;
  v109 = v36;
  v36(v122);
  uint64_t v37 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v37(v134, 0);
  char v38 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v38(v134, 0);
  unint64_t v39 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v39(v134, 0);
  LODWORD(v106) = *MEMORY[0x1E4F3AD70];
  unint64_t v40 = *(char **)(v129 + 104);
  v129 += 104;
  v107 = v40;
  ((void (*)(char *))v40)(v121);
  uint64_t v41 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v41(v134, 0);
  uint64_t v42 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v42(v134, 0);
  uint64_t v43 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v43(v134, 0);
  uint64_t v44 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v44(v134, 0);
  uint64_t v45 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v45(v134, 0);
  uint64_t v46 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v46(v134, 0);
  uint64_t v47 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v47(v134, 0);
  char v48 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v48(v134, 0);
  uint64_t v49 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v49(v134, 0);
  uint64_t v50 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v50(v134, 0);
  uint64_t v51 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v51(v134, 0);
  uint64_t v52 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v52(v134, 0);
  uint64_t v53 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v53(v134, 0);
  uint64_t v54 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v54(v134, 0);
  LODWORD(v104) = *MEMORY[0x1E4F3AD38];
  uint64_t v55 = *(void (**)(void))(v131 + 104);
  v131 += 104;
  uint64_t v105 = v55;
  v55(v123);
  uint64_t v56 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v56(v134, 0);
  uint64_t v57 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v57(v134, 0);
  uint64_t v58 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v58(v134, 0);
  uint64_t v59 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v59(v134, 0);
  int64_t v60 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v60(v134, 0);
  uint64_t v61 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v61(v134, 0);
  uint64_t v62 = *MEMORY[0x1E4F3AD88];
  float32x4_t v63 = (void *)*((void *)v132 + 13);
  v132 += 104;
  uint64_t v103 = v63;
  int64_t v64 = v110;
  uint64_t v65 = v111;
  ((void (*)(char *, uint64_t, uint64_t))v63)(v110, v62, v111);
  uint64_t v66 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v66(v134, 0);
  long long v67 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v67(v134, 0);
  uint64_t v68 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  long long v102 = xmmword_1E2ABE4F0;
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v68(v134, 0);
  uint64_t v69 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v69(v134, 0);
  CGColorCreateGenericRGB(255.0, 0.0, 116.0, 1.0);
  int64_t v70 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v70(v134, 0);
  CGColorCreateGenericRGB(255.0, 216.0, 0.0, 1.0);
  int64_t v71 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v71(v134, 0);
  CGColorCreateGenericRGB(120.0, 0.0, 255.0, 1.0);
  id v72 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  v72(v134, 0);
  CGColorCreateGenericRGB(0.0, 255.0, 136.0, 1.0);
  float32x4_t v73 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
  v73(v134, 0);
  id v74 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v74(v134, 0);
  uint64_t v75 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v75(v134, 0);
  v76 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v76(v134, 0);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  uint64_t v77 = *(void (**)(char *, void, uint64_t))(v113 + 104);
  uint64_t v78 = v112;
  uint64_t v79 = v114;
  v77(v112, *MEMORY[0x1E4F3AD58], v114);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  ((void (*)(char *, void, uint64_t))v109)(v122, v108, v124);
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  ((void (*)(char *, void, uint64_t))v107)(v121, v106, v125);
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  ((void (*)(char *, void, uint64_t))v105)(v123, v104, v127);
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  ((void (*)(char *, void, uint64_t))v103)(v64, *MEMORY[0x1E4F3AD78], v65);
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  CGColorCreateGenericRGB(88.0, 0.0, 255.0, 0.04);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  CGColorCreateGenericRGB(0.0, 255.0, 97.0, 0.04);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  CGColorCreateGenericRGB(0.0, 130.0, 255.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.endColorA.setter();
  CGColorCreateGenericRGB(255.0, 0.0, 47.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.endColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  uint64_t v80 = v126;
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  v77(v78, *MEMORY[0x1E4F3AD50], v79);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  type metadata accessor for TextureResource();
  uint64_t v81 = (void *)MEMORY[0x1E4E62C20](0xD000000000000010, 0x80000001E2AB8BE0);
  id v82 = objc_msgSend(self, sel_bundleWithIdentifier_, v81);

  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  uint64_t v83 = (void *)textureLoader;
  v134[3] = &type metadata for TextureLoader;
  v134[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v134[0] = v83;
  id v84 = v83;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v134);

  v85 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v85(v134, 0);
  uint64_t v86 = v115;
  ParticleEmitterComponent.mainEmitter.getter();
  ParticleEmitterComponent.ParticleEmitter.image.getter();
  uint64_t v130 = a1;
  uint64_t v87 = v116;
  uint64_t v88 = *(char **)(v116 + 8);
  uint64_t v131 = v116 + 8;
  v132 = v88;
  ((void (*)(char *, uint64_t))v88)(v86, v128);
  v89 = v28;
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  uint64_t v90 = v117;
  long long v91 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
  uint64_t v92 = v119;
  uint64_t v93 = v118;
  v91(v119, v80, v118);
  uint64_t v94 = *(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56);
  v94(v92, 0, 1, v93);
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v91(v92, v133, v93);
  v94(v92, 0, 1, v93);
  uint64_t v95 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v95(v134, 0);
  uint64_t v96 = v120;
  uint64_t v97 = v128;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v120, v89, v128);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v96, 0, 1, v97);
  ParticleEmitterComponent.spawnedEmitter.setter();
  v98 = *(void (**)(char *, uint64_t))(v90 + 8);
  v98(v126, v93);
  v98(v133, v93);
  return ((uint64_t (*)(char *, uint64_t))v132)(v89, v97);
}

uint64_t RKARProbePlacementManager.__deallocating_deinit()
{
  swift_unownedRelease();
  swift_unownedRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RKARProbePlacementManager()
{
  return self;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v16, (uint64_t)v9, a2);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if (v19) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v21 = v11[6];
    uint64_t v22 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v20, v9, v22);
    *(void *)(v11[7] + 8 * v20) = *(void *)&v9[v13];
    uint64_t v23 = v11[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void ARView.resizeDrawable(size:scaleFactor:)(double a1, double a2, double a3)
{
  if ((v3[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] & 1) == 0)
  {
    uint64_t v4 = v3;
    id v8 = *(id *)&v3[OBJC_IVAR____TtC10RealityKit6ARView_renderView];
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v8, sel_setFrame_);

    if (v4[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] == 1)
    {
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.renderService.getter();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
      type metadata accessor for RERenderManager();
      swift_dynamicCast();
      dispatch thunk of RERenderManager.getLayerSize(_:)();
      float v10 = a1 * a3;
      float v11 = a2 * a3;
      if (v12 != v10 || v9 != v11)
      {
        dispatch thunk of RERenderManager.waitUntilScheduled()();
        uint64_t v14 = *(void **)&v4[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer];
        if (!v14) {
          goto LABEL_17;
        }
        uint64_t v15 = OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction;
        objc_msgSend(v14, sel_setPresentsWithTransaction_, v4[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction]);
        if (v4[v15]) {
          int v16 = 2;
        }
        else {
          int v16 = 0;
        }
        *(_DWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = v16;
        dispatch thunk of RERenderManager.setLayerSize(_:_:_:)();
      }
      swift_release();
    }
    uint64_t v17 = *(void **)&v4[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer];
    if (v17)
    {
      objc_msgSend(v17, sel_setContentsScale_, a3);
      return;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
}

uint64_t ARView.__services.getter()
{
  return static __ServiceLocator.shared.getter();
}

uint64_t ARView._lastHitEntityForGestures.getter()
{
  return ARView._lastHitEntityForGestures.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

uint64_t ARView._lastHitEntityForGestures.setter(uint64_t a1)
{
  return ARView._lastHitEntityForGestures.setter(a1, &OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures);
}

uint64_t (*ARView._lastHitEntityForGestures.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.scene.getter()
{
  uint64_t result = *(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene);
  if (result) {
    return swift_retain();
  }
  __break(1u);
  return result;
}

uint64_t ARView.__delegatePrivate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  return MEMORY[0x1E4E64ED0](v1);
}

uint64_t ARView.__delegatePrivate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ARView.__delegatePrivate.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1E4E64ED0](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  float32x4_t v3[3] = v6;
  v3[4] = v7;
  return ARView.__delegatePrivate.modify;
}

void ARView.__delegatePrivate.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

void *key path getter for ARView.__automaticallyInvokesStartTrigger : ARView@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    uint64_t v4 = v3;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 80))(ObjectType, v4);
    uint64_t result = (void *)swift_unknownObjectRelease();
    *a2 = v6 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned __int8 *key path setter for ARView.__automaticallyInvokesStartTrigger : ARView(unsigned __int8 *result, void *a2)
{
  if (*(void *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    uint64_t v2 = *result;
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    uint64_t v4 = v3;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 88))(v2, ObjectType, v4);
    return (unsigned __int8 *)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__automaticallyInvokesStartTrigger.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    uint64_t v2 = v1;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 80))(ObjectType, v2);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.__automaticallyInvokesStartTrigger.setter(uint64_t result)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    char v2 = result;
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    uint64_t v4 = v3;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t))(v4 + 88))(v2 & 1, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*ARView.__automaticallyInvokesStartTrigger.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  *(void *)uint64_t result = v1;
  *((void *)result + 1) = v2;
  if (*(void *)(v1 + v2))
  {
    uint64_t v3 = result;
    swift_retain();
    dispatch thunk of Scene.__interactionService.getter();
    uint64_t v5 = v4;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 80))(ObjectType, v5);
    swift_unknownObjectRelease();
    *((unsigned char *)v3 + 16) = v7 & 1;
    return ARView.__automaticallyInvokesStartTrigger.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__automaticallyInvokesStartTrigger.modify(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(*(void *)result + *(void *)(result + 8));
  if (a2)
  {
    if (v2) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if (!v2)
  {
    __break(1u);
    return result;
  }
LABEL_5:
  uint64_t v3 = *(unsigned __int8 *)(result + 16);
  swift_retain();
  dispatch thunk of Scene.__interactionService.getter();
  uint64_t v5 = v4;
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 88))(v3, ObjectType, v5);

  return swift_unknownObjectRelease();
}

void ARView.debugOptions.getter(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *a1 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions);
  }
  else {
    __break(1u);
  }
}

void ARView.debugOptions.setter(uint64_t *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (!v3)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v4 = *a1;
  if ((((unint64_t)*a1 >> 1) & 1) == ((*(unsigned char *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 2) == 0))
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    if (REServiceLocatorGetFrameStatisticsHUD())
    {
      MEMORY[0x1E4E63A30]();
      REFrameStatisticsHUDSetRenderLayer();
    }
  }
  uint64_t v5 = *(char **)(v1 + v2);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)&v5[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions];
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions] = v4;
  if (v4 != v6)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v4;
    char v7 = v5;
    RKARSystem.updateDebugVisualization(with:oldOptions:)((RealityKit::ARView::DebugOptions)&v9, (RealityKit::ARView::DebugOptions)&v8);
  }
}

void (*ARView.debugOptions.modify(void (*result)(uint64_t *a1)))(uint64_t *a1)
{
  *((void *)result + 1) = v1;
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    *(void *)uint64_t result = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions);
    return ARView.debugOptions.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.debugOptions.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  ARView.debugOptions.setter(&v1);
}

uint64_t key path getter for ARView.environment : ARView@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  swift_beginAccess();
  int v4 = *(_DWORD *)(v3 + 8);
  uint64_t v5 = *(void **)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 32);
  int v7 = *(_DWORD *)(v3 + 40);
  char v8 = *(unsigned char *)(v3 + 44);
  *(void *)a2 = *(void *)v3;
  *(_DWORD *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  char v9 = *(unsigned char *)(v3 + 24);
  *(unsigned char *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v6;
  *(_DWORD *)(a2 + 40) = v7;
  *(unsigned char *)(a2 + 44) = v8;
  outlined copy of ARView.Environment.Background.Value(v5, v9);
  return swift_retain();
}

void key path setter for ARView.environment : ARView(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  int v4 = (void *)a1[2];
  uint64_t v5 = a1[4];
  int v6 = *((_DWORD *)a1 + 10);
  char v7 = *((unsigned char *)a1 + 44);
  uint64_t v8 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  char v9 = *((unsigned char *)a1 + 24);
  swift_beginAccess();
  float v10 = *(void **)(v8 + 16);
  *(void *)uint64_t v8 = v2;
  *(_DWORD *)(v8 + 8) = v3;
  *(void *)(v8 + 16) = v4;
  LOBYTE(v2) = *(unsigned char *)(v8 + 24);
  *(unsigned char *)(v8 + 24) = v9;
  *(void *)(v8 + 32) = v5;
  *(_DWORD *)(v8 + 40) = v6;
  *(unsigned char *)(v8 + 44) = v7;
  outlined copy of ARView.Environment.Background.Value(v4, v9);
  swift_retain();
  outlined consume of ARView.Environment.Background.Value(v10, v2);
  swift_release();
  ARView.updateEnvironment()();
}

uint64_t ARView.environment.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  swift_beginAccess();
  int v4 = *(_DWORD *)(v3 + 8);
  uint64_t v5 = *(void **)(v3 + 16);
  uint64_t v6 = *(void *)(v3 + 32);
  int v7 = *(_DWORD *)(v3 + 40);
  char v8 = *(unsigned char *)(v3 + 44);
  *(void *)a1 = *(void *)v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v9 = *(unsigned char *)(v3 + 24);
  *(unsigned char *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 44) = v8;
  outlined copy of ARView.Environment.Background.Value(v5, v9);
  return swift_retain();
}

void ARView.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  char v5 = *((unsigned char *)a1 + 24);
  uint64_t v6 = a1[4];
  int v7 = *((_DWORD *)a1 + 10);
  char v8 = *((unsigned char *)a1 + 44);
  uint64_t v9 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  swift_beginAccess();
  float v10 = *(void **)(v9 + 16);
  *(void *)uint64_t v9 = v2;
  *(_DWORD *)(v9 + 8) = v3;
  *(void *)(v9 + 16) = v4;
  char v11 = *(unsigned char *)(v9 + 24);
  *(unsigned char *)(v9 + 24) = v5;
  *(void *)(v9 + 32) = v6;
  *(_DWORD *)(v9 + 40) = v7;
  *(unsigned char *)(v9 + 44) = v8;
  outlined consume of ARView.Environment.Background.Value(v10, v11);
  swift_release();
  ARView.updateEnvironment()();
}

void (*ARView.environment.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ARView.environment.modify;
}

void ARView.environment.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    ARView.updateEnvironment()();
  }
}

void ARView.cameraTransform.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
    swift_release();
    if (active)
    {
      type metadata accessor for Entity();
      HasTransform.transformMatrix(relativeTo:)();
      Transform.init(matrix:)();
      swift_release();
    }
    else
    {
      Transform.init()();
    }
  }
  else
  {
    __break(1u);
  }
}

void *key path getter for ARView.audioListener : ARView@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    uint64_t v3 = dispatch thunk of Scene.__audioListener.getter();
    uint64_t result = (void *)swift_release();
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path setter for ARView.audioListener : ARView(uint64_t a1, void *a2)
{
  if (*(void *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    swift_retain();
    dispatch thunk of Scene.__audioListener.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.audioListener.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__audioListener.getter();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.audioListener.setter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.__audioListener.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*ARView.audioListener.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  *((void *)result + 1) = v1;
  *((void *)result + 2) = v2;
  if (*(void *)(v1 + v2))
  {
    uint64_t v3 = (uint64_t *)result;
    swift_retain();
    uint64_t v4 = dispatch thunk of Scene.__audioListener.getter();
    swift_release();
    *uint64_t v3 = v4;
    return ARView.audioListener.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.audioListener.modify(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 8) + *(void *)(result + 16));
  if ((a2 & 1) == 0)
  {
    if (v2)
    {
      swift_retain();
      dispatch thunk of Scene.__audioListener.setter();
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    return result;
  }
  if (!v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  swift_retain();
  swift_retain();
  dispatch thunk of Scene.__audioListener.setter();
  swift_release();
LABEL_6:

  return swift_release();
}

uint64_t ARView.__environmentEntity.getter()
{
  return ARView._lastHitEntityForGestures.getter();
}

uint64_t ARView.__environmentEntity.setter(uint64_t a1)
{
  return ARView._lastHitEntityForGestures.setter(a1, &OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
}

uint64_t (*ARView.__environmentEntity.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__enableAutomaticFrameRate.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__enableAutomaticFrameRate.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ARView.__enableAutomaticFrameRate.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

float ARView.__preferredFrameRate.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate;
  swift_beginAccess();
  return *(float *)v1;
}

uint64_t ARView.__preferredFrameRate.setter(float a1)
{
  uint64_t v3 = (float *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ARView.__preferredFrameRate.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

id ARView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id ARView.init(coder:)(void *a1)
{
  uint64_t v3 = type metadata accessor for __AssetRef();
  uint64_t v39 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC10RealityKit6ARView_initialized] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = 2;
  uint64_t v6 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  *(void *)uint64_t v6 = 0x200000000;
  *((_DWORD *)v6 + 2) = 0;
  *((void *)v6 + 4) = 0;
  *((_DWORD *)v6 + 10) = 0;
  v6[44] = 6;
  *((void *)v6 + 2) = 0;
  v6[24] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate] = 1;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] = 1;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput] = 0;
  int v7 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  *(_DWORD *)int v7 = 0;
  v7[4] = 2;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes] = 0;
  v1[OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe] = 1;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = 0;
  char v8 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  *(_OWORD *)char v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((void *)v8 + 4) = 0;
  uint64_t v9 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  *((void *)v9 + 4) = 0;
  *(_OWORD *)uint64_t v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession] = 0;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;
  uint64_t v10 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  id v11 = objc_allocWithZone((Class)type metadata accessor for ARRenderView());
  float v12 = v1;
  *(void *)&v1[v10] = objc_msgSend(v11, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v12[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = 1;
  *(void *)&v12[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = 1;
  v12[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] = 0;
  uint64_t v13 = &v12[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  uint64_t v14 = MEMORY[0x1E4FBC860];
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(v14, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(v14, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
  unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(v14, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
  *(_DWORD *)uint64_t v13 = 0x10000;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = v15;
  *((void *)v13 + 3) = v16;
  *((void *)v13 + 4) = v17;
  *((void *)v13 + 5) = v18;
  *((_OWORD *)v13 + 3) = 0u;
  *((_OWORD *)v13 + 4) = 0u;
  v12[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation] = 0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView___disableComposition] = 0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices] = 0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction] = 1;
  *(_DWORD *)&v12[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = 0;
  char v19 = &v12[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  uint64_t v20 = *MEMORY[0x1E4F3AB30];
  uint64_t v21 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  int v22 = unk_1F3E007B4;
  if ((unk_1F3E007B4 & ~dword_1F3E007B0) == 0) {
    int v22 = 0;
  }
  int v23 = dword_1F3E007B8;
  if ((dword_1F3E007B8 & ~(v22 | dword_1F3E007B0)) == 0) {
    int v23 = 0;
  }
  *(_DWORD *)&v12[OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions] = v23 | v22 | dword_1F3E007B0;
  v12[OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering] = 0;

  BOOL v24 = (objc_class *)type metadata accessor for ARView();
  v40.receiver = v12;
  v40.super_class = v24;
  id v25 = objc_msgSendSuper2(&v40, sel_initWithCoder_, a1);
  id v26 = v25;
  if (!v25) {
    goto LABEL_15;
  }
  uint64_t v27 = (char *)v25;
  specialized ARView.commonInit(_:)();
  id v28 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v29 = (void *)MEMORY[0x1E4E62C20](0xD000000000000022, 0x80000001E2AB98C0);
  unsigned __int8 v30 = objc_msgSend(v28, sel_BOOLForKey_, v29);

  if ((v30 & 1) == 0
    && ((uint64_t v31 = (void *)MEMORY[0x1E4E62C20](0xD000000000000016, 0x80000001E2AB98F0),
         unsigned int v32 = objc_msgSend(a1, sel_containsValueForKey_, v31),
         v31,
         !v32)
     || (uint64_t v33 = (void *)MEMORY[0x1E4E62C20](0xD000000000000016, 0x80000001E2AB98F0),
         unsigned int v34 = objc_msgSend(a1, sel_decodeBoolForKey_, v33),
         v33,
         !v34))
    || (id v35 = MTLCreateSystemDefaultDevice()) == 0)
  {
LABEL_14:

LABEL_15:
    return v26;
  }
  id result = objc_msgSend(v35, sel_supportsFamily_, 1004);
  if (!result)
  {
LABEL_13:
    swift_unknownObjectRelease();
    goto LABEL_14;
  }
  uint64_t v37 = *(unsigned char **)&v27[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v37)
  {
    v37[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 1;
    swift_retain();
    char v38 = v37;
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v5, v3);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    RERenderGraphEmitterAssetSetRuntimeSettingBool();

    type metadata accessor for RKARSystemCore();
    static RKARSystemCore.generateDecimatedMeshes.setter();
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

id ARView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

id ARView.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures] = 0;
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView__scene] = 0;
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate + 8] = 0;
  swift_unknownObjectWeakInit();
  v4[OBJC_IVAR____TtC10RealityKit6ARView_initialized] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = 2;
  id v9 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  *(void *)id v9 = 0x200000000;
  *((_DWORD *)v9 + 2) = 0;
  *((void *)v9 + 4) = 0;
  *((_DWORD *)v9 + 10) = 0;
  v9[44] = 6;
  *((void *)v9 + 2) = 0;
  v9[24] = 0;
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate] = 1;
  *(_DWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate] = 0;
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground] = 0;
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] = 1;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput] = 0;
  uint64_t v10 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  *(_DWORD *)uint64_t v10 = 0;
  v10[4] = 2;
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes] = 0;
  v4[OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe] = 1;
  *(_DWORD *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = 0;
  id v11 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  *(_OWORD *)id v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((void *)v11 + 4) = 0;
  float v12 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  *((void *)v12 + 4) = 0;
  *(_OWORD *)float v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession] = 0;
  *(void *)&v4[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;
  uint64_t v13 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  id v14 = objc_allocWithZone((Class)type metadata accessor for ARRenderView());
  unint64_t v15 = v4;
  *(void *)&v4[v13] = objc_msgSend(v14, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v15[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = 1;
  *(void *)&v15[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = 1;
  v15[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] = 0;
  unint64_t v16 = &v15[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  uint64_t v17 = MEMORY[0x1E4FBC860];
  unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
  unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(v17, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(v17, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
  unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(v17, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
  *(_DWORD *)unint64_t v16 = 0x10000;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = v18;
  *((void *)v16 + 3) = v19;
  *((void *)v16 + 4) = v20;
  *((void *)v16 + 5) = v21;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  v15[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation] = 0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView___disableComposition] = 0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices] = 0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction] = 1;
  *(_DWORD *)&v15[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = 0;
  int v22 = &v15[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  uint64_t v23 = *MEMORY[0x1E4F3AB30];
  uint64_t v24 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(v22, v23, v24);
  int v25 = unk_1F3E007E4;
  if ((unk_1F3E007E4 & ~dword_1F3E007E0) == 0) {
    int v25 = 0;
  }
  int v26 = dword_1F3E007E8;
  if ((dword_1F3E007E8 & ~(v25 | dword_1F3E007E0)) == 0) {
    int v26 = 0;
  }
  *(_DWORD *)&v15[OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions] = v26 | v25 | dword_1F3E007E0;
  v15[OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering] = 0;

  v29.receiver = v15;
  v29.super_class = (Class)type metadata accessor for ARView();
  id v27 = objc_msgSendSuper2(&v29, sel_initWithFrame_, a1, a2, a3, a4);
  specialized ARView.commonInit(_:)();

  return v27;
}

char *ARView.__allocating_init(frame:cameraMode:)(char *a1, double a2, double a3, double a4, double a5)
{
  char v6 = *a1;
  id result = (char *)objc_msgSend(objc_allocWithZone(v5), sel_initWithFrame_, a2, a3, a4, a5);
  char v8 = *(unsigned char **)&result[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v8)
  {
    unsigned __int8 v11 = v8[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
    v8[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = v6;
    id v9 = result;
    uint64_t v10 = v8;
    RKARSystem.cameraMode.didset(&v11);

    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__allocating_init(frame:cameraMode:automaticallyConfigureSession:)(char *a1, char a2, double a3, double a4, double a5, double a6)
{
  id v13 = objc_allocWithZone(v6);
  ARView.init(frame:cameraMode:automaticallyConfigureSession:)(a1, a2, a3, a4, a5, a6);
}

void ARView.init(frame:cameraMode:automaticallyConfigureSession:)(char *a1, char a2, double a3, double a4, double a5, double a6)
{
  char v34 = *a1;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView__scene] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate + 8] = 0;
  swift_unknownObjectWeakInit();
  v6[OBJC_IVAR____TtC10RealityKit6ARView_initialized] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = 2;
  unsigned __int8 v11 = &v6[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  *(void *)unsigned __int8 v11 = 0x200000000;
  *((_DWORD *)v11 + 2) = 0;
  *((void *)v11 + 4) = 0;
  *((_DWORD *)v11 + 10) = 0;
  v11[44] = 6;
  *((void *)v11 + 2) = 0;
  v11[24] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate] = 1;
  *(_DWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] = 1;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput] = 0;
  float v12 = &v6[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  *(_DWORD *)float v12 = 0;
  v12[4] = 2;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes] = 0;
  v6[OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe] = 1;
  *(_DWORD *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = 0;
  id v13 = &v6[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  *(_OWORD *)id v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((void *)v13 + 4) = 0;
  id v14 = &v6[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  *((void *)v14 + 4) = 0;
  *(_OWORD *)id v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession] = 0;
  *(void *)&v6[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;
  uint64_t v15 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  id v16 = objc_allocWithZone((Class)type metadata accessor for ARRenderView());
  uint64_t v17 = v6;
  *(void *)&v6[v15] = objc_msgSend(v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = 1;
  *(void *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = 1;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] = 0;
  unint64_t v18 = &v17[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  uint64_t v19 = MEMORY[0x1E4FBC860];
  unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
  unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(v19, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(v19, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
  unint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(v19, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
  *(_DWORD *)unint64_t v18 = 0x10000;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = v20;
  *((void *)v18 + 3) = v21;
  *((void *)v18 + 4) = v22;
  *((void *)v18 + 5) = v23;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableComposition] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction] = 1;
  *(_DWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = 0;
  uint64_t v24 = &v17[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  uint64_t v25 = *MEMORY[0x1E4F3AB30];
  uint64_t v26 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v24, v25, v26);
  int v27 = unk_1F3E00814;
  if ((unk_1F3E00814 & ~dword_1F3E00810) == 0) {
    int v27 = 0;
  }
  int v28 = dword_1F3E00818;
  if ((dword_1F3E00818 & ~(v27 | dword_1F3E00810)) == 0) {
    int v28 = 0;
  }
  *(_DWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions] = v28 | v27 | dword_1F3E00810;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering] = 0;

  v37.receiver = v17;
  v37.super_class = (Class)type metadata accessor for ARView();
  objc_super v29 = (char *)objc_msgSendSuper2(&v37, sel_initWithFrame_, a3, a4, a5, a6);
  specialized ARView.commonInit(_:)();
  unsigned __int8 v30 = *(unsigned char **)&v29[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v30)
  {
    unsigned __int8 v31 = v30[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
    v30[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = v34;
    v36[0] = v31;
    unsigned int v32 = v30;
    RKARSystem.cameraMode.didset(v36);

    uint64_t v33 = &v29[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
    swift_beginAccess();
    _OWORD v33[2] = a2 & 1;
  }
  else
  {
    __break(1u);
  }
}

unsigned char *ARView.__allocating_init(frame:forRealityView:)(char a1, double a2, double a3, double a4, double a5)
{
  id v11 = objc_allocWithZone(v5);
  return ARView.init(frame:forRealityView:)(a1, a2, a3, a4, a5);
}

unsigned char *ARView.init(frame:forRealityView:)(char a1, double a2, double a3, double a4, double a5)
{
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures] = 0;
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView__scene] = 0;
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate + 8] = 0;
  swift_unknownObjectWeakInit();
  v5[OBJC_IVAR____TtC10RealityKit6ARView_initialized] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_currentIBL] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = 2;
  id v11 = &v5[OBJC_IVAR____TtC10RealityKit6ARView_environment];
  *(void *)id v11 = 0x200000000;
  *((_DWORD *)v11 + 2) = 0;
  *((void *)v11 + 4) = 0;
  *((_DWORD *)v11 + 10) = 0;
  v11[44] = 6;
  *((void *)v11 + 2) = 0;
  v11[24] = 0;
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate] = 1;
  *(_DWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate] = 0;
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground] = 0;
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer] = 1;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput] = 0;
  float v12 = &v5[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  *(_DWORD *)float v12 = 0;
  v12[4] = 2;
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes] = 0;
  v5[OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe] = 1;
  *(_DWORD *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = 0;
  id v13 = &v5[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  *(_OWORD *)id v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((void *)v13 + 4) = 0;
  id v14 = &v5[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  *((void *)v14 + 4) = 0;
  *(_OWORD *)id v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession] = 0;
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;
  uint64_t v15 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  id v16 = objc_allocWithZone((Class)type metadata accessor for ARRenderView());
  uint64_t v17 = v5;
  *(void *)&v5[v15] = objc_msgSend(v16, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  *(void *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation] = 1;
  *(void *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation] = 1;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_updateAfterCounterRotation] = 0;
  unint64_t v18 = &v17[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
  uint64_t v19 = MEMORY[0x1E4FBC860];
  unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860], (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
  unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(v19, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(v19, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
  unint64_t v23 = specialized Dictionary.init(dictionaryLiteral:)(v19, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
  *(_DWORD *)unint64_t v18 = 0x10000;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = v20;
  *((void *)v18 + 3) = v21;
  *((void *)v18 + 4) = v22;
  *((void *)v18 + 5) = v23;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableComposition] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices] = 0;
  v17[OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction] = 1;
  *(_DWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames] = 0;
  uint64_t v24 = &v17[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  uint64_t v25 = *MEMORY[0x1E4F3AB30];
  uint64_t v26 = type metadata accessor for AntialiasingMode();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 104))(v24, v25, v26);
  int v27 = unk_1F3E00844;
  if ((unk_1F3E00844 & ~dword_1F3E00840) == 0) {
    int v27 = 0;
  }
  int v28 = dword_1F3E00848;
  if ((dword_1F3E00848 & ~(v27 | dword_1F3E00840)) == 0) {
    int v28 = 0;
  }
  *(_DWORD *)&v17[OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions] = v28 | v27 | dword_1F3E00840;
  v17[OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering] = 0;

  v32.receiver = v17;
  v32.super_class = (Class)type metadata accessor for ARView();
  objc_super v29 = objc_msgSendSuper2(&v32, sel_initWithFrame_, a2, a3, a4, a5);
  if (v29[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] == 2) {
    v29[OBJC_IVAR____TtC10RealityKit6ARView__enableGroundingShadowsByDefault] = (a1 & 1) == 0;
  }
  unsigned __int8 v30 = v29;
  specialized ARView.commonInit(_:)();

  return v30;
}

float closure #1 in ARView.extendedDynamicRangeOutput.didset(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x1E4E64ED0](v1);
  if (!v2) {
    return 1.0;
  }
  uint64_t v3 = (char *)v2;
  uint64_t v4 = (unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  float v5 = 1.0;
  if (*v4 == 1)
  {
    id v6 = objc_msgSend(v3, sel_window);
    if (v6)
    {
      int v7 = v6;
      id v8 = objc_msgSend(v6, sel_screen);

      objc_msgSend(v8, sel_currentEDRHeadroom);
      double v10 = v9;

      float v5 = v10;
    }
  }
  id v11 = (float *)&v3[OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy];
  swift_beginAccess();
  float v12 = *v11;
  int v13 = *((unsigned __int8 *)v11 + 4);

  if (v13)
  {
    if (v13 == 1)
    {
      float v5 = 1.0;
      if (v12 > 1.0)
      {
        if (v12 <= 16.0) {
          return v12;
        }
        else {
          return 16.0;
        }
      }
    }
  }
  else if (v12 <= 1.0)
  {
    if (v5 > 1.0) {
      return 1.0;
    }
  }
  else if (v5 > v12)
  {
    return v12;
  }
  return v5;
}

float thunk for @escaping @callee_guaranteed () -> (@unowned Float)(uint64_t a1)
{
  uint64_t v1 = *(float (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  float v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t ARView.extendedDynamicRangeOutput.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  return *v1;
}

void ARView.extendedDynamicRangeOutput.setter(char a1)
{
  uint64_t v2 = v1;
  int v4 = a1 & 1;
  float v5 = (unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  int v6 = *v5;
  *float v5 = a1;
  if (v6 != v4)
  {
    ARView.setupMetalLayer()();
    uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView__scene);
    if (*v5)
    {
      if (v7)
      {
        swift_retain();
        Scene.coreScene.getter();
        swift_release();
        RESceneAddEDRColorManagementComponent();
        uint64_t v8 = swift_allocObject();
        swift_unknownObjectWeakInit();
        aBlock[4] = partial apply for closure #1 in ARView.extendedDynamicRangeOutput.didset;
        aBlock[5] = v8;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@unowned Float);
        aBlock[3] = &block_descriptor_6;
        double v9 = _Block_copy(aBlock);
        swift_release();
        REEDRColorManagementComponentSetHeadroomCallback();
        _Block_release(v9);
        return;
      }
      __break(1u);
      goto LABEL_9;
    }
    if (!v7)
    {
LABEL_9:
      __break(1u);
      return;
    }
    swift_retain();
    Scene.coreScene.getter();
    swift_release();
    RESceneRemoveEDRColorManagementComponent();
  }
}

void (*ARView.extendedDynamicRangeOutput.modify(void *a1))(uint64_t a1)
{
  float v3 = malloc(0x28uLL);
  *a1 = v3;
  float32x4_t v3[3] = v1;
  int v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *v4;
  return ARView.extendedDynamicRangeOutput.modify;
}

void ARView.extendedDynamicRangeOutput.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  ARView.extendedDynamicRangeOutput.setter(*(unsigned char *)(*(void *)a1 + 32));

  free(v1);
}

uint64_t ARView.edrHeadroomPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 4);
  *(_DWORD *)a1 = *(_DWORD *)v3;
  *(unsigned char *)(a1 + 4) = v5;
  return result;
}

uint64_t ARView.edrHeadroomPolicy.setter(int *a1)
{
  int v2 = *a1;
  char v3 = *((unsigned char *)a1 + 4);
  uint64_t v4 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v4 = v2;
  *(unsigned char *)(v4 + 4) = v3;
  return result;
}

uint64_t (*ARView.edrHeadroomPolicy.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__renderGraphEmitter.getter()
{
  return ARView._lastHitEntityForGestures.getter();
}

uint64_t ARView.__renderGraphEmitter.setter(uint64_t a1)
{
  specialized ARView.__renderGraphEmitter.setter(a1);

  return swift_release();
}

void (*ARView.__renderGraphEmitter.modify(void *a1))(uint64_t a1, char a2)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter);
  swift_beginAccess();
  float32x4_t v3[3] = *v4;
  swift_retain();
  return ARView.__renderGraphEmitter.modify;
}

void ARView.__renderGraphEmitter.modify(uint64_t a1, char a2)
{
  int v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    uint64_t v4 = swift_retain();
    specialized ARView.__renderGraphEmitter.setter(v4);
    swift_release();
  }
  else
  {
    specialized ARView.__renderGraphEmitter.setter(v3);
  }
  swift_release();

  free(v2);
}

Swift::Void __swiftcall ARView.__setWireframeMode(displayWireframe:)(Swift::Bool displayWireframe)
{
  int v2 = (void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter);
  swift_beginAccess();
  if (*v2)
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.setWireframeMode(displayWireframe:)();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.__forceLocalizedProbes.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__forceLocalizedProbes.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ARView.__forceLocalizedProbes.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__parallaxBackgroundProbe.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__parallaxBackgroundProbe.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ARView.__parallaxBackgroundProbe.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__targetIdentifier.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_layerHandle);
}

uint64_t key path setter for ARView._lastHitEntityForGestures : ARView(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *a1;
  int v6 = (void *)(*a2 + *a5);
  swift_beginAccess();
  *int v6 = v5;
  swift_retain();
  return swift_release();
}

uint64_t ARView.realityFusionSession.getter()
{
  return ARView._lastHitEntityForGestures.getter();
}

uint64_t ARView.realityFusionSession.setter(uint64_t a1)
{
  return ARView._lastHitEntityForGestures.setter(a1, &OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
}

uint64_t ARView._lastHitEntityForGestures.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_release();
}

uint64_t (*ARView.realityFusionSession.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__interfaceOrientation.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_interfaceOrientation);
}

uint64_t static ARView.__nonARKitModelIdentifiers.getter()
{
  if (one-time initialization token for nonARKitModelIdentifiers != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t ARView.__disableCounterRotation.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__disableCounterRotation.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ARView.__disableCounterRotation.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__disableComposition.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___disableComposition);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__disableComposition.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___disableComposition);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ARView.__disableComposition.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

uint64_t ARView.__nonARKitDevices.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__nonARKitDevices.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ARView.__nonARKitDevices.modify())()
{
  return ARView._lastHitEntityForGestures.modify;
}

dispatch_semaphore_t one-time initialization function for uniqueTokenGenerator()
{
  dispatch_semaphore_t result = dispatch_semaphore_create(1);
  static ARView.uniqueTokenGenerator = 0;
  qword_1EADD5A18 = (uint64_t)result;
  return result;
}

uint64_t closure #1 in ARView.commonInit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1E4E64ED0](v2);
  if (result)
  {
    uint64_t v4 = (void *)result;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    ARView.commonRenderCallback()();

    return swift_release();
  }
  return result;
}

uint64_t closure #2 in ARView.commonInit(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1E4E64ED0](v2);
  if (result)
  {
    uint64_t v4 = (void *)result;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    uint64_t v5 = dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    SceneEvents.Update.deltaTime.getter();
    *(float *)&double v6 = v6;
    ARView.doUpdateCallback(engine:deltaTime:)(v5, *(float *)&v6);

    return swift_release();
  }
  return result;
}

uint64_t ARView.doUpdateCallback(engine:deltaTime:)(uint64_t a1, float a2)
{
  uint64_t v3 = v2;
  uint64_t v83 = a1;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v78 = type metadata accessor for __AnyARKitObject();
  uint64_t v77 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  v76 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v81 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v79 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v80 = (char *)&v76 - v9;
  uint64_t v10 = type metadata accessor for AntialiasingMode();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _Proto_AntialiasingMode_v1();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = (char *)&v76 - v19;
  uint64_t v21 = type metadata accessor for OSSignpostID();
  MEMORY[0x1F4188790](v21 - 8);
  static __REOSLog.UpdateLoop.getter();
  static __RESignpostID.UpdateLoop.getter();
  type metadata accessor for __REOSSignpostScope();
  swift_allocObject();
  __REOSSignpostScope.init(osLog:signpostID:name:)();
  swift_release();
  uint64_t v84 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(void *)&v2[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  AllEntitiesArradouble y = (char *)RESceneGetAllEntitiesArray();
  uint64_t v24 = specialized _copyCollectionToContiguousArray<A>(_:)(AllEntitiesArray, v23);
  uint64_t v86 = v3;
  uint64_t v25 = &v3[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v25, v10);
  int v26 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v13, v10);
  if (v26 == *MEMORY[0x1E4F3AB38])
  {
    uint64_t v27 = *MEMORY[0x1E4F3ADD8];
    int v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
    v28(v20, v27, v14);
  }
  else
  {
    uint64_t v85 = v11;
    int v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
    if (v26 == *MEMORY[0x1E4F3AB30])
    {
      v28(v20, *MEMORY[0x1E4F3ADD0], v14);
      uint64_t v27 = *MEMORY[0x1E4F3ADD8];
    }
    else
    {
      uint64_t v27 = *MEMORY[0x1E4F3ADD8];
      v28(v20, v27, v14);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v13, v10);
    }
  }
  v28(v17, v27, v14);
  int v29 = MEMORY[0x1E4E62A50](v20, v17);
  unsigned __int8 v30 = *(void (**)(char *, uint64_t))(v15 + 8);
  v30(v17, v14);
  v30(v20, v14);
  uint64_t v31 = *(void *)(v24 + 16);
  if (v31)
  {
    uint64_t v85 = OBJC_IVAR____TtC10RealityKit6ARView_layerHandle;
    swift_retain();
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    while (1)
    {
      RECustomMatrixCameraComponentGetComponentType();
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      REPerspectiveCameraComponentGetComponentType();
      uint64_t v37 = REEntityGetComponentByClass();
      REOrthographicCameraComponentGetComponentType();
      uint64_t v38 = REEntityGetComponentByClass();
      BOOL v39 = !ComponentByClass && v37 == 0;
      if (!v39 || v38 != 0)
      {
        RECameraViewDescriptorsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        if (RECameraViewDescriptorsComponentCameraViewDescriptorCount())
        {
          RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex();
          uint64_t v41 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
          unsigned __int8 v88 = v29 & 1;
          if (!RERenderGraphDataStructGetBool() || ((v29 ^ v88) & 1) != 0)
          {
            MEMORY[0x1E4E63E70](v41, "disableAA", v29 & 1);
            RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
          }
        }
        else
        {
          RECameraViewDescriptorsComponentAddViewDescriptor();
          RECameraViewDescriptorsComponentAddSpecifyCommandFromLayer();
          uint64_t v34 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
          RERenderGraphDataStructAddFloat4();
          MEMORY[0x1E4E63E70](v34, "disableAA", v29 & 1);
          RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
        }
        RERelease();
        if (__OFADD__(v33++, 1)) {
          break;
        }
      }
      if (v31 == ++v32)
      {
        swift_release();
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_73;
  }
  uint64_t v33 = 0;
LABEL_25:
  swift_release();
  uint64_t v42 = v86;
  uint64_t v43 = v84;
  if (!*(void *)&v86[v84]) {
    goto LABEL_74;
  }
  swift_retain();
  uint64_t v44 = dispatch thunk of Scene.defaultCamera.getter();
  swift_release();
  if (!v44)
  {
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
  }
  uint64_t v45 = dispatch thunk of Entity.scene.getter();
  swift_release();
  uint64_t result = swift_release();
  if (v45 && v33 >= 2)
  {
    if (*(void *)&v42[v43])
    {
      swift_retain();
      uint64_t v47 = v80;
      dispatch thunk of Scene.anchors.getter();
      uint64_t result = swift_release();
      if (*(void *)&v42[v43])
      {
        swift_retain();
        uint64_t v48 = dispatch thunk of Scene.defaultCamera.getter();
        uint64_t result = swift_release();
        if (v48)
        {
          Scene.AnchorCollection.removeNinja(_:)();
LABEL_40:
          swift_release();
          (*(void (**)(char *, uint64_t))(v81 + 8))(v47, v82);
          goto LABEL_41;
        }
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_80;
  }
  if (!v33)
  {
    if (!*(void *)&v42[v43])
    {
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    swift_retain();
    uint64_t v49 = dispatch thunk of Scene.defaultCamera.getter();
    uint64_t result = swift_release();
    uint64_t v47 = v79;
    if (!v49)
    {
LABEL_86:
      __break(1u);
      goto LABEL_87;
    }
    Entity.turnIntoNinja()();
    uint64_t result = swift_release();
    if (!*(void *)&v42[v43])
    {
LABEL_87:
      __break(1u);
      goto LABEL_88;
    }
    swift_retain();
    dispatch thunk of Scene.anchors.getter();
    uint64_t result = swift_release();
    if (!*(void *)&v42[v43])
    {
LABEL_88:
      __break(1u);
      goto LABEL_89;
    }
    swift_retain();
    uint64_t v50 = dispatch thunk of Scene.defaultCamera.getter();
    uint64_t result = swift_release();
    if (!v50)
    {
LABEL_89:
      __break(1u);
      return result;
    }
    Scene.AnchorCollection.appendNinja(_:)();
    goto LABEL_40;
  }
LABEL_41:
  ARView.updateWindowRotation()();
  objc_msgSend(*(id *)&v42[OBJC_IVAR____TtC10RealityKit6ARView_renderView], sel_bounds);
  double v52 = v51;
  double v54 = v53;
  ARView.updateARSession(restartIfPaused:)(0);
  uint64_t v55 = &v42[OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession];
  swift_beginAccess();
  if (*(void *)v55)
  {
    swift_retain();
    uint64_t v56 = dispatch thunk of RealityFusionSession.sharedCount.getter();
    swift_release();
    if (v56 == 1)
    {
      if (*(void *)v55)
      {
        swift_retain();
        uint64_t v57 = (void *)dispatch thunk of RealityFusionSession.serviceManager.getter();
        swift_release();
        if (v57)
        {
          id v58 = (id)RFServiceManagerGetARKitDataProvider();

          if (v58)
          {
            id v59 = (id)RFARKitDataProviderGetARSession();
            id v60 = objc_msgSend(v42, sel_session);
            type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARSession);
            char v61 = static NSObject.== infix(_:_:)();

            if (v61)
            {
              uint64_t v43 = v84;
            }
            else
            {
              id v62 = objc_msgSend(v42, sel_session);
              id v63 = v62;
              if (*(void *)v55)
              {
                id v87 = v62;
                swift_retain();
                id v63 = v63;
                int64_t v64 = v76;
                __AnyARKitObject.init<A>(_:)();
                RealityFusionSession.configure(with:)();
                swift_release();
                (*(void (**)(char *, uint64_t))(v77 + 8))(v64, v78);
              }
              uint64_t v43 = v84;

              id v58 = v63;
            }
          }
        }
      }
    }
  }
  uint64_t v65 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  uint64_t v66 = *(void **)&v42[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (!v66) {
    goto LABEL_76;
  }
  id v67 = v66;
  RKARSystem.update(engine:viewportSize:)(v83, v52, v54);

  if (!*(void *)&v42[v43]) {
    goto LABEL_77;
  }
  swift_retain();
  int v68 = Scene.coreScene.getter();
  swift_release();
  if (*(void *)v55)
  {
    swift_retain();
    RealityFusionSession.update(scene:with:by:)(v68, v42);
    swift_release();
  }
  ARView.checkProximity()();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v69 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t result = REPhysicsDebugRendererIsEnabled();
  if ((result & 1) == 0)
  {
    uint64_t v70 = *(void *)&v42[v65];
    if (v70)
    {
      if ((*(unsigned char *)(v70 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 1) != 0
        && MEMORY[0x1E4E64120](v69)
        && REServiceLocatorGetCollisionWorld())
      {
        REDebugRendererDrawCollisionWorld();
      }
      goto LABEL_62;
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
LABEL_62:
  uint64_t result = REPhysicsDebugRendererIsEnabled();
  if (!result) {
    goto LABEL_69;
  }
  uint64_t v71 = *(void *)&v42[v65];
  if (!v71) {
    goto LABEL_82;
  }
  uint64_t v72 = *(void *)&v42[v43];
  if ((*(unsigned char *)(v71 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions) & 1) == 0)
  {
    if (v72)
    {
      swift_retain();
      Scene.coreScene.getter();
      swift_release();
      RESceneRemovePhysicsDebugComponent();
      goto LABEL_69;
    }
    goto LABEL_83;
  }
  if (!v72)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  RESceneSetPhysicsDebugDrawLevel();
LABEL_69:
  float32x4_t v73 = &v42[OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate];
  swift_beginAccess();
  uint64_t result = MEMORY[0x1E4E64ED0](v73);
  if (result)
  {
    uint64_t v74 = *((void *)v73 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t, float))(v74 + 32))(v42, ObjectType, v74, a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ARView.shutdownEngine()()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer) == 1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of RERenderManager.unregisterRenderLayer(_:)();
    swift_release();
  }
  specialized ARView.__renderGraphEmitter.setter(0);
  uint64_t v2 = (void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
  swift_beginAccess();
  if (*v2)
  {
    swift_retain();
    uint64_t v3 = (void (*)(uint64_t *, void))dispatch thunk of RealityFusionSession.sharedCount.modify();
    if (__OFSUB__(*v4, 1))
    {
      __break(1u);
      return;
    }
    --*v4;
    v3(&v6, 0);
    swift_release();
  }
  uint64_t v5 = OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView) == 1)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.__stop()();
    swift_release();
    *(unsigned char *)(v1 + v5) = 0;
  }
}

id ARView.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput];
  id result = (id)swift_beginAccess();
  if (*v2 == 1)
  {
    if (!*(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
    {
LABEL_11:
      __break(1u);
      return result;
    }
    swift_retain();
    Scene.coreScene.getter();
    swift_release();
    RESceneRemoveEDRColorManagementComponent();
  }
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.sceneService.getter();
  swift_release();
  uint64_t v4 = v13;
  uint64_t v5 = v14;
  id result = __swift_project_boxed_opaque_existential_1(v12, v13);
  if (!*(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = swift_retain();
  v6(v7, v4, v5);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = 0;

  uint64_t v9 = (uint64_t)&v1[OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription];
  swift_beginAccess();
  if (*(void *)(v9 + 24))
  {
    outlined init with copy of SynchronizationPeerID(v9, (uint64_t)v12);
    __swift_project_boxed_opaque_existential_1(v12, v13);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  uint64_t v10 = (uint64_t)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription];
  swift_beginAccess();
  if (*(void *)(v10 + 24))
  {
    outlined init with copy of SynchronizationPeerID(v10, (uint64_t)v12);
    __swift_project_boxed_opaque_existential_1(v12, v13);
    dispatch thunk of Cancellable.cancel()();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  ARView.shutdownEngine()();
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ARView();
  return objc_msgSendSuper2(&v11, sel_dealloc);
}

Swift::Void __swiftcall ARView.onDrawingManagerCreated()()
{
  uint64_t v1 = v0;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
  type metadata accessor for RERenderManager();
  swift_dynamicCast();
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer];
  if (!v2)
  {
    __break(1u);
    goto LABEL_18;
  }
  id v3 = v2;
  int v4 = dispatch thunk of RERenderManager.registerRenderLayer(_:)();

  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_layerHandle] = v4;
  objc_msgSend(v1, sel_bounds);
  double v6 = v5;
  double v8 = v7;
  objc_msgSend(v1, sel_contentScaleFactor);
  ARView.resizeDrawable(size:scaleFactor:)(v6, v8, v9);
  if (!*(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  AllEntitiesArradouble y = (char *)RESceneGetAllEntitiesArray();
  uint64_t v12 = specialized _copyCollectionToContiguousArray<A>(_:)(AllEntitiesArray, v11);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    uint64_t v14 = v12 + 32;
    do
    {
      RECustomMatrixCameraComponentGetComponentType();
      uint64_t ComponentByClass = REEntityGetComponentByClass();
      REPerspectiveCameraComponentGetComponentType();
      uint64_t v16 = REEntityGetComponentByClass();
      REOrthographicCameraComponentGetComponentType();
      uint64_t v17 = REEntityGetComponentByClass();
      if (ComponentByClass) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v16 == 0;
      }
      if (!v18 || v17 != 0)
      {
        RECameraViewDescriptorsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        RECameraViewDescriptorsComponentClearCameraViewDescriptors();
      }
      v14 += 8;
      --v13;
    }
    while (v13);
  }
  swift_release();
  unint64_t v20 = &v1[OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter];
  swift_beginAccess();
  if (!*(void *)v20) {
    goto LABEL_19;
  }
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)();
  swift_release();
  if (*(void *)v20)
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.setup(mgr:)();
    swift_release();
    swift_release();
    return;
  }
LABEL_20:
  __break(1u);
}

uint64_t ARView.commonRenderCallback()()
{
  uint64_t v1 = v0;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  char v2 = dispatch thunk of __Engine.hasRenderedThisFrame.getter();
  uint64_t result = swift_release();
  if ((v2 & 1) == 0)
  {
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.hasRenderedThisFrame.setter();
    swift_release();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer) != 1
      || (dispatch thunk of RERenderManager.getLayerSize(_:)(), v5 != 0.0) && v4 != 0.0)
    {
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.engine.getter();
      swift_release();
      __Engine.coreEngine.getter();
      swift_release();
      REEngineGetCurrentTime();
      dispatch thunk of RERenderManager.createRenderFrameSettings()();
      dispatch thunk of RERenderFrameSettings.setTotalTime(_:)();
      dispatch thunk of RERenderManager.createRenderFrameWorkload()();
      dispatch thunk of RERenderFrameWorkload.configure(_:)();
      double v6 = (void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter);
      uint64_t result = swift_beginAccess();
      if (!*v6)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      swift_retain();
      dispatch thunk of __RERenderGraphEmitter.execute(mgr:)();
      swift_release();
      specialized static ARView.fulfillPixelCastRequest(renderManager:)();
      specialized static ARView.fulfillPixelCastArrayRequest(renderManager:)();
      uint64_t v7 = OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames;
      if (*(_DWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_presentsWithTransactionFrames)
        && *(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction) == 1)
      {
        uint64_t result = dispatch thunk of RERenderFrameWorkload.commitWithImmediatePresent()();
        int v8 = *(_DWORD *)(v1 + v7);
        BOOL v9 = v8 != 0;
        int v10 = v8 - 1;
        if (!v9)
        {
          __break(1u);
          goto LABEL_17;
        }
        *(_DWORD *)(v1 + v7) = v10;
        if (!v10)
        {
          uint64_t v11 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer);
          if (!v11)
          {
LABEL_18:
            __break(1u);
            return result;
          }
          id v12 = v11;
          objc_msgSend(v12, sel_setPresentsWithTransaction_, 0);
        }
      }
      else
      {
        dispatch thunk of RERenderFrameWorkload.commit()();
      }
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t key path getter for ARView.__proto_antialiasingMode_v1 : ARView@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AntialiasingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  int v9 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v9 == *MEMORY[0x1E4F3AB38])
  {
    uint64_t v10 = *MEMORY[0x1E4F3ADD8];
    uint64_t v11 = type metadata accessor for _Proto_AntialiasingMode_v1();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104))(a2, v10, v11);
  }
  else
  {
    int v13 = v9;
    int v14 = *MEMORY[0x1E4F3AB30];
    uint64_t v15 = type metadata accessor for _Proto_AntialiasingMode_v1();
    uint64_t v16 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104);
    if (v13 == v14)
    {
      return v16(a2, *MEMORY[0x1E4F3ADD0], v15);
    }
    else
    {
      v16(a2, *MEMORY[0x1E4F3ADD8], v15);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
}

uint64_t key path setter for ARView.__proto_antialiasingMode_v1 : ARView(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _Proto_AntialiasingMode_v1();
  __n128 v3 = MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v5, a1, v3);
  return ARView.__proto_antialiasingMode_v1.setter(v5);
}

uint64_t ARView.__proto_antialiasingMode_v1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AntialiasingMode();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v3);
  if (v8 == *MEMORY[0x1E4F3AB38])
  {
    uint64_t v9 = *MEMORY[0x1E4F3ADD8];
    uint64_t v10 = type metadata accessor for _Proto_AntialiasingMode_v1();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 104))(a1, v9, v10);
  }
  else
  {
    int v12 = v8;
    int v13 = *MEMORY[0x1E4F3AB30];
    uint64_t v14 = type metadata accessor for _Proto_AntialiasingMode_v1();
    uint64_t v15 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v14 - 8) + 104);
    if (v12 == v13)
    {
      return v15(a1, *MEMORY[0x1E4F3ADD0], v14);
    }
    else
    {
      v15(a1, *MEMORY[0x1E4F3ADD8], v14);
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
  }
}

uint64_t ARView.__proto_antialiasingMode_v1.setter(char *a1)
{
  uint64_t v3 = type metadata accessor for AntialiasingMode();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for _Proto_AntialiasingMode_v1();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, __n128))(v8 + 16))(v11, a1, v7, v9);
  int v12 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v11, v7);
  if (v12 == *MEMORY[0x1E4F3ADD8])
  {
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4F3AB38], v3);
    uint64_t v13 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v13, v6, v3);
    swift_endAccess();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(a1, v7);
  }
  else
  {
    uint64_t v15 = *(void (**)(char *, void, uint64_t))(v4 + 104);
    uint64_t v16 = (void (**)(uint64_t, char *, uint64_t))(v4 + 40);
    uint64_t v17 = (uint64_t (**)(char *, uint64_t))(v8 + 8);
    if (v12 == *MEMORY[0x1E4F3ADD0])
    {
      v15(v6, *MEMORY[0x1E4F3AB30], v3);
      uint64_t v18 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
      swift_beginAccess();
      (*v16)(v18, v6, v3);
      swift_endAccess();
      return (*v17)(a1, v7);
    }
    else
    {
      v15(v6, *MEMORY[0x1E4F3AB38], v3);
      uint64_t v19 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
      swift_beginAccess();
      (*v16)(v19, v6, v3);
      swift_endAccess();
      unint64_t v20 = *v17;
      (*v17)(a1, v7);
      return v20(v11, v7);
    }
  }
}

void (*ARView.__proto_antialiasingMode_v1.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  float32x4_t v3[3] = v1;
  uint64_t v4 = type metadata accessor for AntialiasingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = malloc(*(void *)(v5 + 64));
  v3[4] = v6;
  uint64_t v7 = type metadata accessor for _Proto_AntialiasingMode_v1();
  v3[5] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  v3[6] = v8;
  size_t v10 = *(void *)(v8 + 64);
  v3[7] = malloc(v10);
  uint64_t v11 = malloc(v10);
  v3[8] = v11;
  uint64_t v12 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v6, v12, v4);
  int v13 = (*(uint64_t (**)(void *, uint64_t))(v5 + 88))(v6, v4);
  if (v13 == *MEMORY[0x1E4F3AB38])
  {
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4F3ADD8], v7);
  }
  else
  {
    uint64_t v14 = *(void (**)(void *, void, uint64_t))(v9 + 104);
    if (v13 == *MEMORY[0x1E4F3AB30])
    {
      v14(v11, *MEMORY[0x1E4F3ADD0], v7);
    }
    else
    {
      v14(v11, *MEMORY[0x1E4F3ADD8], v7);
      (*(void (**)(void *, uint64_t))(v5 + 8))(v6, v4);
    }
  }
  return ARView.__proto_antialiasingMode_v1.modify;
}

void ARView.__proto_antialiasingMode_v1.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(char **)(*(void *)a1 + 56);
  uint64_t v4 = *(void **)(*(void *)a1 + 64);
  if (a2)
  {
    uint64_t v5 = v2[5];
    uint64_t v6 = v2[6];
    uint64_t v7 = (void *)v2[4];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 56), v4, v5);
    ARView.__proto_antialiasingMode_v1.setter(v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    uint64_t v7 = (void *)v2[4];
    ARView.__proto_antialiasingMode_v1.setter(*(char **)(*(void *)a1 + 64));
  }
  free(v4);
  free(v3);
  free(v7);

  free(v2);
}

uint64_t key path getter for ARView.antialiasingMode : ARView@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for ARView.antialiasingMode : ARView(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for AntialiasingMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  uint64_t v9 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v9, v8, v4);
  return swift_endAccess();
}

uint64_t ARView.antialiasingMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AntialiasingMode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ARView.antialiasingMode.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for AntialiasingMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ARView.antialiasingMode.modify())()
{
  return ARSessionManager.isRunningUserProvidedARSession.modify;
}

void ARView.checkProximity()()
{
  uint64_t v1 = type metadata accessor for __RKEntityProximityTrigger.ExitType();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v37 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  swift_retain();
  uint64_t v4 = dispatch thunk of Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  uint64_t v5 = swift_dynamicCastClass();
  if (v5)
  {
    uint64_t v6 = v5;
    if (dispatch thunk of __RKEntityInteractionManager.proximityEnabled.getter())
    {
      if (!*(void *)(v0 + v3))
      {
LABEL_74:
        __break(1u);
        return;
      }
      swift_retain();
      uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
      swift_release();
      uint64_t v35 = active;
      if (active)
      {
        v31[1] = v4;
        uint64_t v32 = v0;
        uint64_t v34 = v6;
        unint64_t v8 = dispatch thunk of __RKEntityInteractionManager.__interactions.getter();
        uint64_t v9 = v8;
        unint64_t v10 = MEMORY[0x1E4FBC860];
        unint64_t v39 = MEMORY[0x1E4FBC860];
        if (v8 >> 62) {
          goto LABEL_43;
        }
        uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        while (v11)
        {
          uint64_t v12 = 0;
          *(void *)&long long v38 = v9 & 0xC000000000000001;
          uint64_t v33 = v9 + 32;
          uint64_t v36 = v9;
          while (1)
          {
            if (!(void)v38)
            {
              uint64_t v13 = *(void *)(v33 + 8 * v12);
              swift_retain();
              BOOL v14 = __OFADD__(v12++, 1);
              if (v14) {
                break;
              }
              goto LABEL_16;
            }
            uint64_t v13 = MEMORY[0x1E4E63150](v12, v9);
            BOOL v14 = __OFADD__(v12++, 1);
            if (v14) {
              break;
            }
LABEL_16:
            dispatch thunk of __RKEntityInteraction.trigger.getter();
            type metadata accessor for __RKEntityTriggerGroup();
            if (swift_dynamicCastClass())
            {
              unint64_t v15 = dispatch thunk of __RKEntityTriggerGroup.triggers.getter();
              unint64_t v10 = v15;
              if (v15 >> 62)
              {
                uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
                if (v16)
                {
LABEL_19:
                  uint64_t v9 = 4;
                  do
                  {
                    uint64_t v17 = v9 - 4;
                    if ((v10 & 0xC000000000000001) != 0)
                    {
                      MEMORY[0x1E4E63150](v9 - 4, v10);
                      BOOL v14 = __OFADD__(v17, 1);
                      uint64_t v18 = v9 - 3;
                      if (v14) {
                        goto LABEL_41;
                      }
                    }
                    else
                    {
                      swift_retain();
                      BOOL v14 = __OFADD__(v17, 1);
                      uint64_t v18 = v9 - 3;
                      if (v14)
                      {
LABEL_41:
                        __break(1u);
                        goto LABEL_42;
                      }
                    }
                    type metadata accessor for __RKEntityProximityTrigger();
                    if (swift_dynamicCastClass())
                    {
                      swift_release();
                      swift_bridgeObjectRelease();
                      uint64_t v9 = v36;
                      goto LABEL_31;
                    }
                    swift_release();
                    ++v9;
                  }
                  while (v18 != v16);
                }
              }
              else
              {
                uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v16) {
                  goto LABEL_19;
                }
              }
              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              uint64_t v9 = v36;
            }
            else
            {
              swift_release();
              unint64_t v10 = v13;
              dispatch thunk of __RKEntityInteraction.trigger.getter();
              type metadata accessor for __RKEntityProximityTrigger();
              if (swift_dynamicCastClass())
              {
                swift_release();
                dispatch thunk of __RKEntityInteraction.trigger.getter();
LABEL_31:
                uint64_t v19 = swift_release();
                unint64_t v10 = (unint64_t)&v39;
                MEMORY[0x1E4E62CE0](v19);
                if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              else
              {
                swift_release();
                swift_release();
              }
            }
            if (v12 == v11)
            {
              swift_bridgeObjectRelease();
              unint64_t v20 = v39;
              unint64_t v10 = MEMORY[0x1E4FBC860];
              goto LABEL_45;
            }
          }
LABEL_42:
          __break(1u);
LABEL_43:
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        }
        swift_bridgeObjectRelease();
        unint64_t v20 = MEMORY[0x1E4FBC860];
LABEL_45:
        swift_bridgeObjectRelease();
        unint64_t v40 = v10;
        if (v20 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v21) {
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v21)
          {
LABEL_47:
            if (v21 >= 1)
            {
              uint64_t v22 = 0;
              uint64_t v36 = v21;
              do
              {
                if ((v20 & 0xC000000000000001) != 0) {
                  MEMORY[0x1E4E63150](v22, v20);
                }
                else {
                  swift_retain();
                }
                type metadata accessor for __RKEntityProximityTrigger();
                if (swift_dynamicCastClass() && dispatch thunk of __RKEntityProximityTrigger.__targetEntity.getter())
                {
                  type metadata accessor for Entity();
                  HasTransform.position(relativeTo:)();
                  long long v38 = v23;
                  HasTransform.position(relativeTo:)();
                  dispatch thunk of __RKEntityProximityTrigger.__targetEntity.getter();
                  dispatch thunk of __RKEntityProximityTrigger.type.getter();
                  swift_allocObject();
                  __RKEntityProximityTrigger.init(targetEntity:distance:type:)();
                  if ((dispatch thunk of __RKEntityInteractionManager.__performInteractions(matching:on:)() & 1) != 0
                    && dispatch thunk of __RKEntityProximityTrigger.targetEntity.getter())
                  {
                    uint64_t v24 = swift_retain();
                    MEMORY[0x1E4E62CE0](v24);
                    if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
                    swift_release();
                    swift_release();
                  }
                  else
                  {
                    swift_release();
                  }
                  swift_release();
                  uint64_t v21 = v36;
                }
                ++v22;
                swift_release();
              }
              while (v21 != v22);
              swift_bridgeObjectRelease();
              unint64_t v25 = v40;
LABEL_65:
              uint64_t v26 = v32;
              if (v25 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!v30) {
                  goto LABEL_70;
                }
              }
              else if (!*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                goto LABEL_70;
              }
              uint64_t v27 = v26 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
              swift_beginAccess();
              if (MEMORY[0x1E4E64ED0](v27))
              {
                uint64_t v28 = *(void *)(v27 + 8);
                uint64_t ObjectType = swift_getObjectType();
                (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v28 + 24))(v26, v25, ObjectType, v28);
                swift_release();
                swift_unknownObjectRelease();
LABEL_71:
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                return;
              }
LABEL_70:
              swift_release();
              goto LABEL_71;
            }
            __break(1u);
            goto LABEL_73;
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v25 = MEMORY[0x1E4FBC860];
        goto LABEL_65;
      }
    }
  }

  swift_unknownObjectRelease();
}

Swift::Void __swiftcall ARView.handleTapAtPoint(point:)(CGPoint point)
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  MEMORY[0x1F4188790](v3 - 8);
  long long v38 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CollisionCastHit();
  uint64_t v39 = *(void *)(v5 - 8);
  uint64_t v40 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v35 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for CollisionGroup();
  uint64_t v36 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  unint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Type = type metadata accessor for CollisionCastQueryType();
  uint64_t v41 = *(void *)(Type - 8);
  uint64_t v42 = Type;
  MEMORY[0x1F4188790](Type);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v1 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  if (MEMORY[0x1E4E64ED0](v16))
  {
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 8))(v1, ObjectType, v17);
    swift_unknownObjectRelease();
  }
  uint64_t v19 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_retain();
  dispatch thunk of Scene.anchors.getter();
  swift_release();
  lazy protocol witness table accessor for type Scene.AnchorCollection and conformance Scene.AnchorCollection();
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v20 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v20 < 1) {
    goto LABEL_14;
  }
  if (!*(void *)(v2 + v19)) {
    goto LABEL_29;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  if (!RESceneFindFirstCameraComponent()) {
    goto LABEL_14;
  }
  if (!*(void *)(v2 + v19))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  swift_retain();
  dispatch thunk of Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  if (swift_dynamicCastClass())
  {
    if (dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.getter())
    {
      unint64_t v21 = dispatch thunk of __RKEntityInteractionManager.__interactions.getter();
      char v22 = specialized ARView.hasTapInteractions(_:)(v21);
      swift_bridgeObjectRelease();
      if (v22)
      {
        (*(void (**)(char *, void, uint64_t))(v41 + 104))(v11, *MEMORY[0x1E4F3A9E0], v42);
        static CollisionGroup.all.getter();
        ARView.ray(through:)(v43);
        outlined init with take of vImage_CGImageFormat?((uint64_t)v43, (uint64_t)v44, &demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
        if (v45)
        {
          uint64_t v23 = MEMORY[0x1E4FBC860];
LABEL_20:
          uint64_t v27 = v39;
          uint64_t v26 = v40;
          uint64_t v28 = (uint64_t)v38;
          (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v37);
          (*(void (**)(char *, uint64_t))(v41 + 8))(v11, v42);
          if (*(void *)(v23 + 16))
          {
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 16))(v28, v23 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)), v26);
            uint64_t v29 = 0;
          }
          else
          {
            uint64_t v29 = 1;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v28, v29, 1, v26);
          swift_bridgeObjectRelease();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v26) != 1)
          {
            uint64_t v32 = v35;
            (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v35, v28, v26);
            uint64_t v33 = CollisionCastHit.entity.getter();
            ARView.handleTapForEntity(_:shouldNotifyDelegateAlways:)(v33, 1);
            swift_unknownObjectRelease();
            swift_release();
            (*(void (**)(char *, uint64_t))(v27 + 8))(v32, v26);
            return;
          }
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v28, &demangling cache variable for type metadata for CollisionCastHit?);
          if (MEMORY[0x1E4E64ED0](v16))
          {
            uint64_t v30 = *(void *)(v16 + 8);
            uint64_t v31 = swift_getObjectType();
            (*(void (**)(uint64_t, void, void, uint64_t, uint64_t))(v30 + 16))(v2, 0, 0, v31, v30);
            swift_unknownObjectRelease();
          }
          goto LABEL_16;
        }
        if (*(void *)(v2 + v19))
        {
          v34[1] = v44[1];
          v34[0] = v44[0];
          swift_retain();
          uint64_t v23 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();
          swift_release();
          goto LABEL_20;
        }
LABEL_31:
        __break(1u);
        return;
      }
    }
  }
  swift_unknownObjectRelease();
LABEL_14:
  if (!MEMORY[0x1E4E64ED0](v16)) {
    return;
  }
  uint64_t v24 = *(void *)(v16 + 8);
  uint64_t v25 = swift_getObjectType();
  (*(void (**)(uint64_t, void, void, uint64_t, uint64_t))(v24 + 16))(v2, 0, 0, v25, v24);
LABEL_16:
  swift_unknownObjectRelease();
}

void ARView.handleTapForEntity(_:shouldNotifyDelegateAlways:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
    return;
  }
  swift_retain();
  dispatch thunk of Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  if (!swift_dynamicCastClass()) {
    goto LABEL_13;
  }
  swift_retain();
  if (a1)
  {
    while (1)
    {
      swift_retain();
      Entity.__interactionIdentifier.getter();
      uint64_t v10 = type metadata accessor for UUID();
      int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
      if (v11 != 1)
      {
        type metadata accessor for __RKEntityTapTrigger();
        swift_allocObject();
        swift_retain();
        __RKEntityTapTrigger.init(targetEntity:reversible:)();
        char v12 = dispatch thunk of __RKEntityInteractionManager.__performInteractions(matching:on:)();
        swift_release();
        if (v12) {
          break;
        }
      }
      type metadata accessor for Entity();
      uint64_t v9 = HasHierarchy.parent.getter();
      swift_release_n();
      a1 = v9;
      if (!v9) {
        goto LABEL_9;
      }
    }
    swift_release();
    uint64_t v13 = 1;
    goto LABEL_11;
  }
LABEL_9:
  if ((a2 & 1) == 0)
  {
LABEL_13:
    swift_unknownObjectRelease();
    return;
  }
  a1 = 0;
  uint64_t v13 = 0;
LABEL_11:
  uint64_t v14 = v3 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  if (MEMORY[0x1E4E64ED0](v14))
  {
    uint64_t v15 = *(void *)(v14 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(v3, v13, a1, ObjectType, v15);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_release();
}

uint64_t ARView.DebugOptions.rawValue.getter()
{
  return *(void *)v0;
}

void static ARView.DebugOptions.none.getter(void *a1@<X8>)
{
  *a1 = 0;
}

RealityKit::ARView::DebugOptions __swiftcall ARView.DebugOptions.init(rawValue:)(RealityKit::ARView::DebugOptions rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static ARView.DebugOptions.showPhysics.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.DebugOptions.showStatistics.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.DebugOptions.showWorldOrigin.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static ARView.DebugOptions.showAnchorOrigins.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static ARView.DebugOptions.showAnchorGeometry.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void static ARView.DebugOptions.showFeaturePoints.getter(void *a1@<X8>)
{
  *a1 = 32;
}

void static ARView.DebugOptions.showSceneUnderstanding.getter(void *a1@<X8>)
{
  *a1 = 64;
}

uint64_t key path setter for ARView.__statisticsOptions : ARView(int *a1, void *a2)
{
  int v2 = *a1;
  uint64_t v3 = (int *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  swift_beginAccess();
  int v4 = *v3;
  *uint64_t v3 = v2;
  int v6 = v4;
  return ARView.__statisticsOptions.didset(&v6);
}

uint64_t ARView.__statisticsOptions.didset(int *a1)
{
  int v2 = *a1;
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  uint64_t result = swift_beginAccess();
  if (*v3 != v2)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    uint64_t result = REServiceLocatorGetFrameStatisticsHUD();
    if (result) {
      return REFrameStatisticsHUDSetStatisticsOptions();
    }
  }
  return result;
}

uint64_t ARView.__statisticsOptions.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t ARView.__statisticsOptions.setter(int *a1)
{
  int v2 = *a1;
  uint64_t v3 = (int *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  swift_beginAccess();
  int v4 = *v3;
  *uint64_t v3 = v2;
  int v6 = v4;
  return ARView.__statisticsOptions.didset(&v6);
}

void (*ARView.__statisticsOptions.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions;
  float32x4_t v3[3] = v1;
  v3[4] = v4;
  uint64_t v5 = (_DWORD *)(v1 + v4);
  swift_beginAccess();
  *((_DWORD *)v3 + 10) = *v5;
  return ARView.__statisticsOptions.modify;
}

void ARView.__statisticsOptions.modify(uint64_t a1, char a2)
{
  int v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24);
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  int v5 = *(_DWORD *)(v4 + v3);
  *(_DWORD *)(v4 + v3) = *(_DWORD *)(*(void *)a1 + 40);
  if (a2)
  {
    int v7 = v5;
    int v6 = &v7;
  }
  else
  {
    int v8 = v5;
    int v6 = &v8;
  }
  ARView.__statisticsOptions.didset(v6);

  free(v2);
}

Swift::Void __swiftcall ARView.__frameProfilerAddCustomStatistic(_:_:)(Swift::String a1, Swift::Float a2)
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t FrameStatisticsHUD = REServiceLocatorGetFrameStatisticsHUD();
  if (FrameStatisticsHUD)
  {
    uint64_t v4 = FrameStatisticsHUD;
    uint64_t v5 = String.utf8CString.getter();
    MEMORY[0x1E4E63A00](v4, v5 + 32, a2);
    swift_release();
  }
}

uint64_t ARView.__disableStatisticsRendering.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering);
  swift_beginAccess();
  return *v1;
}

uint64_t ARView.__disableStatisticsRendering.setter(char a1)
{
  int v3 = a1 & 1;
  uint64_t v4 = (unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering);
  uint64_t result = swift_beginAccess();
  int v6 = *v4;
  *uint64_t v4 = a1;
  if (v6 != v3)
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    uint64_t result = REServiceLocatorGetFrameStatisticsHUD();
    if (result) {
      return REFrameStatisticsHUDSetDisableRendering();
    }
  }
  return result;
}

void (*ARView.__disableStatisticsRendering.modify(void *a1))(uint64_t a1)
{
  int v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering;
  float32x4_t v3[3] = v1;
  v3[4] = v4;
  uint64_t v5 = (unsigned char *)(v1 + v4);
  swift_beginAccess();
  *((unsigned char *)v3 + 40) = *v5;
  return ARView.__disableStatisticsRendering.modify;
}

void ARView.__disableStatisticsRendering.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 24);
  uint64_t v2 = *(void *)(*(void *)a1 + 32);
  int v4 = *(unsigned __int8 *)(*(void *)a1 + 40);
  int v5 = *(unsigned __int8 *)(v3 + v2);
  *(unsigned char *)(v3 + v2) = v4;
  if ((v4 ^ v5))
  {
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
    swift_release();
    if (REServiceLocatorGetFrameStatisticsHUD()) {
      REFrameStatisticsHUDSetDisableRendering();
    }
  }

  free(v1);
}

uint64_t ARView.__getStatisticsStringForSingleOption(statisticOption:)()
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t result = REServiceLocatorGetFrameStatisticsHUD();
  if (result)
  {
    REFrameStatisticsHUDGetStatisticsForOption();
    return String.init(cString:)();
  }
  return result;
}

uint64_t ARView.__StatisticsOptions.rawValue.getter()
{
  return *v0;
}

uint64_t ARView.__StatisticsOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ARView.__StatisticsOptions.frameTimeStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.__StatisticsOptions.animationStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.__StatisticsOptions.assetPipelineStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 4;
}

void static ARView.__StatisticsOptions.audioStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 8;
}

void static ARView.__StatisticsOptions.ecsStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 16;
}

void static ARView.__StatisticsOptions.meshStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 32;
}

void static ARView.__StatisticsOptions.networkStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 64;
}

void static ARView.__StatisticsOptions.physicsStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 128;
}

void static ARView.__StatisticsOptions.renderingStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

void static ARView.__StatisticsOptions.memoryStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 512;
}

void static ARView.__StatisticsOptions.thermalStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static ARView.__StatisticsOptions.sceneUnderstandingStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static ARView.__StatisticsOptions.mtlCounterAPIStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 4096;
}

void static ARView.__StatisticsOptions.customStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x2000;
}

void static ARView.__StatisticsOptions.attributionStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

void static ARView.__StatisticsOptions.vfxStatistics.getter(_DWORD *a1@<X8>)
{
  *a1 = 0x20000;
}

uint64_t type metadata accessor for ARView()
{
  uint64_t result = type metadata singleton initialization cache for ARView;
  if (!type metadata singleton initialization cache for ARView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::Void __swiftcall ARView.__setProfilerUpdateInterval(newInterval:)(Swift::Float newInterval)
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (REServiceLocatorGetFrameStatisticsHUD())
  {
    JUMPOUT(0x1E4E63A60);
  }
}

Swift::Float __swiftcall ARView.__frameTime()()
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (REServiceLocatorGetFrameStatisticsHUD())
  {
    JUMPOUT(0x1E4E63A70);
  }
  return 0.0;
}

void ARView.snapshot(saveToHDR:completion:)(int a1, void (*a2)(void), uint64_t a3)
{
  int v4 = v3;
  int v95 = a1;
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = type metadata accessor for __SceneRef();
  uint64_t v87 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v86 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AntialiasingMode();
  uint64_t v89 = *(void *)(v9 - 8);
  uint64_t v90 = v9;
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for _Proto_AntialiasingMode_v1();
  uint64_t v91 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unsigned __int8 v88 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v77 - v15;
  uint64_t v17 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(void *)&v3[OBJC_IVAR____TtC10RealityKit6ARView__scene]) {
LABEL_49:
  }
    __break(1u);
  swift_retain();
  uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
  swift_release();
  swift_release();
  uint64_t v19 = *(void *)&v3[v17];
  if (active)
  {
    if (!v19)
    {
      __break(1u);
      goto LABEL_51;
    }
    swift_retain();
    uint64_t v20 = dispatch thunk of Scene.internalActiveCamera.getter();
  }
  else
  {
    if (!v19)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    swift_retain();
    uint64_t v20 = dispatch thunk of Scene.defaultCamera.getter();
  }
  uint64_t v21 = v20;
  swift_release();
  if (!v21)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    char v45 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    a2(0);
    return;
  }
  id v22 = objc_msgSend(v4, sel_layer);
  objc_msgSend(v22, sel_contentsScale);
  double v24 = v23;

  float v25 = v24;
  objc_msgSend(v4, sel_frame);
  float v27 = v26;
  float v28 = v25 * v27;
  objc_msgSend(v4, sel_frame);
  double v30 = v29;
  uint64_t v31 = self;
  if (v28 <= -9.2234e18)
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v28 >= 9.2234e18)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if ((LODWORD(v28) & 0x7F800000) == 0x7F800000) {
    goto LABEL_46;
  }
  float v32 = v30;
  float v33 = v25 * v32;
  if ((LODWORD(v33) & 0x7F800000) == 0x7F800000) {
    goto LABEL_46;
  }
  if (v33 <= -9.2234e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v33 >= 9.2234e18)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v85 = v7;
  uint64_t v92 = a2;
  uint64_t v93 = a3;
  uint64_t v94 = v21;
  id v34 = objc_msgSend(v31, sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, 115, (uint64_t)v28, (uint64_t)v33, 0);
  objc_msgSend(v34, sel_setUsage_, 22);
  objc_msgSend(v34, sel_setStorageMode_, 0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  uint64_t v35 = dispatch thunk of __Engine.services.getter();
  swift_release();
  if (!v35)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  uint64_t v36 = v98;
  uint64_t v37 = v99;
  __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v98);
  id v38 = objc_msgSend((id)(*((uint64_t (**)(void *, void (*)()))v37 + 1))(v36, v37), sel_newTextureWithDescriptor_, v34);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  if (!v38)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    uint64_t v46 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v92(0);
LABEL_28:
    swift_release();
    return;
  }
  static __ServiceLocator.shared.getter();
  uint64_t v39 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t v40 = MEMORY[0x1E4E640C0](v39);
  if (!v40
    || ((uint64_t v41 = v40,
         int WorkingColorGamut = REColorManagerGetWorkingColorGamut(),
         int TargetDisplayColorGamut = REColorManagerGetTargetDisplayColorGamut(),
         (v95 & 1) == 0)
      ? (LDRColorSpaceForColorGamut = (void *)REColorManagerGetLDRColorSpaceForColorGamut())
      : (LDRColorSpaceForColorGamut = (void *)REColorManagerGetWorkingColorSpace()),
        (id v47 = LDRColorSpaceForColorGamut) == 0))
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    double v52 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v92(0);
    swift_unknownObjectRelease();
    goto LABEL_28;
  }
  LODWORD(RenderGraphDataStruct) = WorkingColorGamut;
  int v81 = TargetDisplayColorGamut;
  id v82 = v47;
  swift_retain();
  Entity.coreEntity.getter();
  swift_release();
  RECameraViewDescriptorsComponentGetComponentType();
  uint64_t v80 = REEntityGetOrAddComponentByClass();
  uint64_t v48 = *(char **)&v4[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (!v48)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v49 = *(void *)&v48[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions];
  uint64_t v50 = v48;
  if ((v49 & 0x20) != 0) {
    uint64_t v51 = RKARSystem.postProcessingCombinedRenderGraph.getter();
  }
  else {
    uint64_t v51 = RKARSystem.postProcessingCombinedHDRRenderGraph.getter();
  }
  uint64_t v53 = v51;

  if (v95)
  {
    LOBYTE(aBlock[0]) = 0;
    RERenderGraphAssetSetRuntimeNodeSetting();
    REColorManagerSetTargetDisplayColorGamut();
  }
  uint64_t v79 = v53;
  id v83 = v38;
  uint64_t RenderGraphDataStruct = RERenderGraphCreateRenderGraphDataStruct();
  RERenderGraphDataStructAddFloat4();
  double v54 = &v4[OBJC_IVAR____TtC10RealityKit6ARView_antialiasingMode];
  swift_beginAccess();
  uint64_t v55 = v89;
  uint64_t v56 = v54;
  uint64_t v57 = v90;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v11, v56, v90);
  int v58 = (*(uint64_t (**)(char *, uint64_t))(v55 + 88))(v11, v57);
  BOOL v59 = v58 == *MEMORY[0x1E4F3AB38];
  id v78 = v34;
  if (v59)
  {
    uint64_t v60 = *MEMORY[0x1E4F3ADD8];
    uint64_t v61 = v91;
    id v62 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 104);
    id v63 = v16;
    v62(v16, v60, v12);
  }
  else
  {
    id v62 = *(void (**)(char *, uint64_t, uint64_t))(v91 + 104);
    if (v58 == *MEMORY[0x1E4F3AB30])
    {
      id v63 = v16;
      v62(v16, *MEMORY[0x1E4F3ADD0], v12);
      uint64_t v60 = *MEMORY[0x1E4F3ADD8];
    }
    else
    {
      uint64_t v60 = *MEMORY[0x1E4F3ADD8];
      id v63 = v16;
      v62(v16, v60, v12);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v11, v90);
    }
    uint64_t v61 = v91;
  }
  int64_t v64 = v88;
  v62(v88, v60, v12);
  char v65 = MEMORY[0x1E4E62A50](v63, v64);
  uint64_t v66 = *(void (**)(char *, uint64_t))(v61 + 8);
  v66(v64, v12);
  v66(v63, v12);
  MEMORY[0x1E4E63E70](RenderGraphDataStruct, "disableAA", v65 & 1);
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16) = v83;
  *(void *)(v67 + 24) = 16;
  uint64_t v68 = v93;
  *(void *)(v67 + 32) = v92;
  *(void *)(v67 + 40) = v68;
  *(unsigned char *)(v67 + 48) = v95 & 1;
  *(void *)(v67 + 56) = v79;
  *(void *)(v67 + 64) = 0xD000000000000015;
  *(void *)(v67 + 72) = 0x80000001E2AB9A10;
  *(void *)(v67 + 80) = v41;
  *(unsigned char *)(v67 + 88) = v81;
  uint64_t v69 = v82;
  *(void *)(v67 + 96) = v82;
  *(_DWORD *)(v67 + 104) = 4353;
  *(void *)(v67 + 112) = v4;
  v99 = partial apply for closure #1 in ARView.snapshot(saveToHDR:completion:);
  uint64_t v100 = v67;
  aBlock[0] = (uint64_t (*)())MEMORY[0x1E4F143A8];
  aBlock[1] = (uint64_t (*)())1107296256;
  uint64_t v97 = thunk for @escaping @callee_guaranteed () -> ();
  v98 = &block_descriptor_19;
  uint64_t v70 = _Block_copy(aBlock);
  swift_retain();
  v4;
  swift_unknownObjectRetain();
  id v71 = v69;
  swift_release();
  RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle();
  _Block_release(v70);
  ARView.renderCallbacks.getter(aBlock);
  uint64_t v72 = aBlock[0];
  float32x4_t v73 = v97;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?((uint64_t)v97);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v72);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v73);
  if (!v73)
  {
    uint64_t v75 = v78;
    goto LABEL_43;
  }
  outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v73);
  uint64_t v74 = *(void *)&v4[v17];
  uint64_t v75 = v78;
  if (v74)
  {
    swift_retain();
    v76 = v86;
    dispatch thunk of Scene.__coreScene.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v76, v85);
    REScenePostProcessRenderCallbackAddOneOffCameraViewHandle();
LABEL_43:
    RERelease();
    swift_release();

    swift_unknownObjectRelease();
    return;
  }
LABEL_54:
  __break(1u);
}

void closure #1 in ARView.snapshot(saveToHDR:completion:)(void *a1, int64_t a2, void (*a3)(id), uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, CGColorSpace *a11, uint32_t a12, uint64_t a13)
{
  *(void *)&long long v83 = a8;
  uint64_t v84 = a6;
  LODWORD(v86) = a5;
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = type metadata accessor for vImage.Size();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v74 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for vImage.PixelBuffer<vImage.Interleaved8x4>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v79 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for vImage.PixelBuffer<vImage.Interleaved16Fx4>?);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v75 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for vImage.PixelBuffer<vImage.Interleaved16Fx4>);
  uint64_t v24 = *(void *)(v77 - 8);
  *(void *)&double v25 = MEMORY[0x1F4188790](v77).n128_u64[0];
  uint64_t v80 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v27 = (int64_t)objc_msgSend(a1, sel_width, v25);
  if ((unint64_t)(v27 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v28 = 4 * v27 * a2;
  if ((unsigned __int128)(4 * v27 * (__int128)a2) >> 64 != v28 >> 63)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v78 = v24;
  uint64_t v73 = v20;
  int64_t v29 = v28 / 8;
  uint64_t v30 = (uint64_t)objc_msgSend(a1, sel_height);
  if ((unsigned __int128)(v30 * (__int128)v29) >> 64 != (v30 * v29) >> 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v31 = malloc(v30 * v29);
  if (!v31)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    double v52 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    a3(0);
    return;
  }
  uint64_t v72 = v19;
  int v81 = a3;
  id v82 = v31;
  uint64_t v85 = a4;
  int v76 = a10;
  MTLRegionMake2D((uint64_t)objc_msgSend(a1, sel_width), (uint64_t)objc_msgSend(a1, sel_height), &v90);
  long long v32 = v90;
  long long v33 = v91;
  long long v34 = v92;
  if (v86)
  {
    LOBYTE(v90) = 1;
    long long v83 = v32;
    long long v70 = v92;
    long long v71 = v91;
    String.utf8CString.getter();
    RERenderGraphAssetSetRuntimeNodeSetting();
    swift_release();
    REColorManagerSetTargetDisplayColorGamut();
    long long v34 = v70;
    long long v33 = v71;
    long long v32 = v83;
  }
  long long v90 = v32;
  long long v91 = v33;
  long long v92 = v34;
  uint64_t v35 = v82;
  objc_msgSend(a1, sel_getBytes_bytesPerRow_fromRegion_mipmapLevel_, v82, v29, &v90, 0);
  uint64_t v36 = CGBitmapContextCreate(v35, (size_t)objc_msgSend(a1, sel_width), (size_t)objc_msgSend(a1, sel_height), a2, v29, a11, a12);
  if (!v36)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    uint64_t v53 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v81(0);
LABEL_25:
    id v62 = v35;
    goto LABEL_26;
  }
  uint64_t v37 = v36;
  CGImageRef Image = CGBitmapContextCreateImage(v36);
  if (!Image)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    double v54 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v81(0);
LABEL_22:

    goto LABEL_25;
  }
  uint64_t v39 = Image;
  uint64_t v40 = a13 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
  swift_beginAccess();
  if (*(unsigned char *)(v40 + 24) != 2) {
    goto LABEL_12;
  }
  uint64_t v41 = *(void **)(v40 + 16);
  uint64_t v42 = v39;
  outlined copy of ARView.Environment.Background.Value(v41, 2);
  id v43 = objc_msgSend(a1, sel_width);
  CGFloat v44 = (double)(uint64_t)objc_msgSend(a1, sel_height);
  v101.origin.double x = 0.0;
  v101.origin.double y = 0.0;
  v101.size.width = (double)(uint64_t)v43;
  v101.size.height = v44;
  CGContextClearRect(v37, v101);
  char v45 = (CGColor *)objc_msgSend(v41, sel_CGColor);
  CGContextSetFillColorWithColor(v37, v45);

  v102.origin.double x = 0.0;
  v102.origin.double y = 0.0;
  v102.size.width = (double)(uint64_t)v43;
  v102.size.height = v44;
  CGContextFillRect(v37, v102);
  v103.origin.double x = 0.0;
  v103.origin.double y = 0.0;
  v103.size.width = (double)(uint64_t)v43;
  v103.size.height = v44;
  CGContextRef.draw(_:in:byTiling:)(v42, v103, 0);

  CGImageRef v46 = CGBitmapContextCreateImage(v37);
  if (!v46)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    int v58 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v81(0);
    outlined consume of ARView.Environment.Background.Value(v41, 2);
    goto LABEL_22;
  }
  uint64_t v39 = v46;

  outlined consume of ARView.Environment.Background.Value(v41, 2);
LABEL_12:
  uint64_t v48 = v78;
  id v47 = v79;
  uint64_t v49 = v80;
  if (v86)
  {
LABEL_13:
    id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_initWithCGImage_, v39);
    id v51 = v50;
    v81(v50);

LABEL_24:
    goto LABEL_25;
  }
  id v55 = (id)REColorManagerGetSRGBLDRColorSpaceForColorGamut();
  if (!v55)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    BOOL v59 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:type:_:)();

    v81(0);
    goto LABEL_24;
  }
  if ((unint64_t)(a2 - 0x2000000000000000) >> 62 != 3) {
LABEL_35:
  }
    __break(1u);
  id v56 = v55;
  vImage_CGImageFormat.init(bitsPerComponent:bitsPerPixel:colorSpace:bitmapInfo:renderingIntent:)();
  outlined init with take of vImage_CGImageFormat?((uint64_t)&v93, (uint64_t)&v90, &demangling cache variable for type metadata for vImage_CGImageFormat?);
  if (*((void *)&v90 + 1) != 1)
  {
    long long v87 = v90;
    long long v88 = v91;
    uint64_t v89 = v92;
    type metadata accessor for vImage.Interleaved16Fx4();
    id v60 = v39;
    uint64_t v61 = v75;
    vImage.PixelBuffer<>.init(cgImage:cgImageFormat:pixelFormat:)();
    id v86 = v60;
    uint64_t v63 = v77;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v61, 0, 1, v77);
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v49, v61, v63);
    vImage.PixelBuffer.size.getter();
    type metadata accessor for vImage.Interleaved8x4();
    vImage.PixelBuffer<>.init(size:pixelFormat:)();
    vImage.PixelBuffer<>.convert(to:)();
    id v64 = v56;
    vImage_CGImageFormat.init(bitsPerComponent:bitsPerPixel:colorSpace:bitmapInfo:renderingIntent:)();
    outlined init with take of vImage_CGImageFormat?((uint64_t)v94, (uint64_t)v95, &demangling cache variable for type metadata for vImage_CGImageFormat?);
    if (*((void *)&v95[0] + 1) == 1)
    {
      char v65 = v49;
      static os_log_type_t.error.getter();
      type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      uint64_t v66 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      v81(0);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v72);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v65, v63);
      id v62 = v82;
      goto LABEL_26;
    }
    long long v97 = v95[0];
    long long v98 = v95[1];
    uint64_t v99 = v96;
    uint64_t v67 = v72;
    uint64_t v68 = vImage.PixelBuffer<>.makeCGImage(cgImageFormat:)();
    uint64_t v35 = v82;
    if (!v68)
    {
      static os_log_type_t.error.getter();
      type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      uint64_t v69 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:type:_:)();

      v81(0);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v67);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v80, v77);
      goto LABEL_25;
    }
    uint64_t v39 = (void *)v68;

    (*(void (**)(char *, uint64_t))(v73 + 8))(v47, v67);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v80, v77);
    goto LABEL_13;
  }
  static os_log_type_t.error.getter();
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  uint64_t v57 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:type:_:)();

  v81(0);
  id v62 = v82;
LABEL_26:
  free(v62);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

Swift::Void __swiftcall ARView.__startAudioEngine()()
{
}

Swift::Void __swiftcall ARView.__stopAudioEngine()()
{
}

uint64_t ARView.__startAudioEngine()(uint64_t (*a1)(void))
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  __Engine.coreEngine.getter();
  swift_release();
  REEngineGetServiceLocator();
  uint64_t result = REServiceLocatorGetAudioService();
  if (result)
  {
    return a1();
  }
  return result;
}

void ARView.entityAccessibilityWrappers.getter()
{
  uint64_t v1 = type metadata accessor for Scene.AnchorCollection();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Scene.AnchorCollection>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    Scene.AnchorCollection.makeIterator()();
    Entity.ChildCollection.IndexingIterator.next()();
    while (v8)
    {
      swift_retain();
      unint64_t v6 = Entity.__accessibilityWrappers(rootEntityWrapper:)(0);
      swift_release();
      specialized Array.append<A>(contentsOf:)(v6);
      swift_release();
      Entity.ChildCollection.IndexingIterator.next()();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.__distanceInMetersFromEntity(_:)()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    uint64_t active = dispatch thunk of Scene.internalActiveCamera.getter();
    uint64_t result = swift_release();
    if (active)
    {
      type metadata accessor for Entity();
      HasTransform.position(relativeTo:)();
      HasTransform.position(relativeTo:)();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::UInt32 __swiftcall ARView.getLayerHandle()()
{
  return *(_DWORD *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_layerHandle);
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    uint64_t v4 = 8 * a2;
    int v5 = (char *)swift_allocObject();
    int64_t v6 = _swift_stdlib_malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    *((void *)v5 + 2) = a2;
    *((void *)v5 + 3) = 2 * (v7 >> 3);
    uint64_t v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ARView.__renderGraphEmitter.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter);
  swift_beginAccess();
  if (*v3)
  {
    type metadata accessor for __ServiceLocator();
    swift_retain();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)();
    swift_release();
    swift_release();
  }
  *uint64_t v3 = a1;
  swift_retain();
  uint64_t result = swift_release();
  if (*v3)
  {
    type metadata accessor for __ServiceLocator();
    swift_retain();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    dispatch thunk of __RERenderGraphEmitter.setup(mgr:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized ARView.commonInit(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for __AssetRef();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v61 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  REShadowsSetEnableDefaultShadows();
  id v12 = objc_msgSend(v0, sel_renderLayer);
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (!v13)
  {

    uint64_t v13 = 0;
  }
  uint64_t v14 = OBJC_IVAR____TtC10RealityKit6ARView_backingLayer;
  uint64_t v15 = *(void **)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer);
  *(void *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer) = v13;

  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1D38]), sel_initWithTarget_action_, v1, sel_handleSingleTapWithRecognizer_);
  uint64_t v17 = OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture;
  uint64_t v18 = *(void **)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture);
  *(void *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_singleTapGesture) = v16;

  uint64_t v19 = *(void **)((char *)v1 + v17);
  if (!v19)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  BOOL v59 = v8;
  uint64_t v60 = v9;
  objc_msgSend(v19, sel_setDelegate_, v1);
  if (!*(void *)((char *)v1 + v17))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  objc_msgSend(v1, sel_addGestureRecognizer_);
  *((unsigned char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_enablePresentsWithTransaction) = 1;
  objc_msgSend(v1, sel_setBackgroundColor_, 0);
  objc_msgSend(v1, sel_setMultipleTouchEnabled_, 0);
  uint64_t v20 = OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground;
  if ((*((unsigned char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground) & 1) == 0)
  {
    id v21 = objc_msgSend(self, sel_defaultCenter);
    objc_msgSend(v21, sel_addObserver_selector_name_object_, v1, sel_willResignActiveWithNotification_, *MEMORY[0x1E4FB2738], 0);
    objc_msgSend(v21, sel_addObserver_selector_name_object_, v1, sel_restartEngineWithNotification_, *MEMORY[0x1E4FB2628], 0);

    *((unsigned char *)v1 + v20) = 1;
  }
  ARView.setupMetalLayer()();
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  static __ServiceLocator.shared.getter();
  uint64_t v22 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  uint64_t HaveSharedSimulationByDefault = MEMORY[0x1E4E64110](v22);
  if (HaveSharedSimulationByDefault) {
    uint64_t HaveSharedSimulationByDefault = REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault();
  }
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x390))(HaveSharedSimulationByDefault);
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_useCAMetalLayer) != 1)
  {
LABEL_12:
    if (one-time initialization token for uniqueTokenGenerator != -1) {
      swift_once();
    }
    swift_beginAccess();
    OS_dispatch_semaphore.wait()();
    uint64_t v27 = static ARView.uniqueTokenGenerator + 1;
    if (!__OFADD__(static ARView.uniqueTokenGenerator, 1))
    {
      uint64_t v57 = v5;
      int v58 = v4;
      uint64_t v56 = v6;
      ++static ARView.uniqueTokenGenerator;
      OS_dispatch_semaphore.signal()();
      swift_endAccess();
      type metadata accessor for Scene();
      strcpy((char *)v65, "ARView.scene-");
      HIWORD(v65[1]) = -4864;
      *(void *)&long long v62 = v27;
      v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      uint64_t v29 = MEMORY[0x1E4E616D0](v65[0], v65[1]);
      uint64_t v30 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
      *(void *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene) = v29;
      swift_release();
      dispatch thunk of __ServiceLocator.sceneService.getter();
      uint64_t v32 = v66;
      uint64_t v31 = v67;
      __swift_project_boxed_opaque_existential_1(v65, v66);
      if (*(void *)((char *)v1 + v30))
      {
        long long v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
        uint64_t v34 = swift_retain();
        v33(v34, v32, v31);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
        if (*(void *)((char *)v1 + v30))
        {
          type metadata accessor for SceneEvents.Render();
          uint64_t v64 = 0;
          long long v62 = 0u;
          long long v63 = 0u;
          swift_allocObject();
          swift_unknownObjectWeakInit();
          swift_retain();
          Scene.subscribe<A>(to:on:_:)();
          swift_release();
          swift_release();
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)&v62, &demangling cache variable for type metadata for EventSource?);
          uint64_t v35 = (uint64_t)v1 + OBJC_IVAR____TtC10RealityKit6ARView_renderSubscription;
          swift_beginAccess();
          outlined assign with take of Cancellable?((uint64_t)v65, v35);
          swift_endAccess();
          if (*(void *)((char *)v1 + v30))
          {
            type metadata accessor for SceneEvents.Update();
            uint64_t v64 = 0;
            long long v62 = 0u;
            long long v63 = 0u;
            swift_allocObject();
            swift_unknownObjectWeakInit();
            swift_retain();
            Scene.subscribe<A>(to:on:_:)();
            swift_release();
            swift_release();
            outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)&v62, &demangling cache variable for type metadata for EventSource?);
            uint64_t v36 = (uint64_t)v1 + OBJC_IVAR____TtC10RealityKit6ARView_updateSubscription;
            swift_beginAccess();
            outlined assign with take of Cancellable?((uint64_t)v65, v36);
            swift_endAccess();
            *((unsigned char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_initialized) = 1;
            id v37 = objc_msgSend(self, sel_mainScreen);
            objc_msgSend(v37, sel_nativeScale);
            double v39 = v38;

            objc_msgSend(v1, sel_setContentScaleFactor_, v39);
            objc_msgSend(v1, sel_bounds);
            double v41 = v40;
            double v43 = v42;
            objc_msgSend(v1, sel_contentScaleFactor);
            ARView.resizeDrawable(size:scaleFactor:)(v41, v43, v44);
            type metadata accessor for Entity();
            swift_allocObject();
            uint64_t v45 = Entity.init()();
            CGImageRef v46 = (void *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
            swift_beginAccess();
            *CGImageRef v46 = v45;
            swift_release();
            if (*v46)
            {
              swift_retain();
              dispatch thunk of Entity.name.setter();
              swift_release();
              uint64_t v47 = (uint64_t)v58;
              if (*v46)
              {
                swift_retain();
                Entity.turnIntoNinja()();
                swift_release();
                if (*(void *)((char *)v1 + v30))
                {
                  swift_retain();
                  dispatch thunk of Scene.anchors.getter();
                  swift_release();
                  if (*v46)
                  {
                    swift_retain();
                    Scene.AnchorCollection.appendNinja(_:)();
                    swift_release();
                    (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v60);
                    ARView.updateEnvironment()();
                    ARView.setupAR()();
                    uint64_t v48 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
                    if (*(void *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem))
                    {
                      uint64_t v49 = swift_retain();
                      specialized ARView.__renderGraphEmitter.setter(v49);
                      swift_release();
                      id v50 = *(unsigned char **)((char *)v1 + v48);
                      if (v50)
                      {
                        v50[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 0;
                        swift_retain();
                        id v51 = v50;
                        double v52 = v59;
                        dispatch thunk of __RERenderGraphEmitter.__handle.getter();
                        swift_release();
                        __AssetRef.__as<A>(_:)();
                        (*(void (**)(char *, uint64_t))(v56 + 8))(v52, v57);
                        RERenderGraphEmitterAssetSetRuntimeSettingBool();
                        RERenderGraphEmitterAssetSetRuntimeSettingBool();

                        type metadata accessor for RKARSystemCore();
                        static RKARSystemCore.generateDecimatedMeshes.setter();
                        type metadata accessor for RealityFusionSession();
                        *(void *)&long long v62 = objc_msgSend(v1, sel_session);
                        type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARSession);
                        __AnyARKitObject.init<A>(_:)();
                        uint64_t v53 = type metadata accessor for __AnyARKitObject();
                        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v47, 0, 1, v53);
                        uint64_t v54 = MEMORY[0x1E4E61C70](v47);
                        outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v47, &demangling cache variable for type metadata for __AnyARKitObject?);
                        id v55 = (void *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
                        swift_beginAccess();
                        *id v55 = v54;
                        swift_release();
                        swift_release();
                        return;
                      }
                      goto LABEL_36;
                    }
LABEL_35:
                    __break(1u);
LABEL_36:
                    __break(1u);
                    goto LABEL_37;
                  }
LABEL_34:
                  __break(1u);
                  goto LABEL_35;
                }
LABEL_33:
                __break(1u);
                goto LABEL_34;
              }
LABEL_32:
              __break(1u);
              goto LABEL_33;
            }
LABEL_31:
            __break(1u);
            goto LABEL_32;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_26;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
  type metadata accessor for RERenderManager();
  swift_dynamicCast();
  uint64_t v24 = *(void **)((char *)v1 + v14);
  if (v24)
  {
    id v25 = v24;
    int v26 = dispatch thunk of RERenderManager.registerRenderLayer(_:)();

    swift_release();
    *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_layerHandle) = v26;
    goto LABEL_12;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_1E2A7F554()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

float partial apply for closure #1 in ARView.extendedDynamicRangeOutput.didset()
{
  return closure #1 in ARView.extendedDynamicRangeOutput.didset(v0);
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_1E2A7F5AC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 120, 7);
}

void partial apply for closure #1 in ARView.snapshot(saveToHDR:completion:)()
{
  closure #1 in ARView.snapshot(saveToHDR:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(id))(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88), *(CGColorSpace **)(v0 + 96), *(_DWORD *)(v0 + 104), *(void *)(v0 + 112));
}

unint64_t lazy protocol witness table accessor for type ARView.DebugOptions and conformance ARView.DebugOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions;
  if (!lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions;
  if (!lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions;
  if (!lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions;
  if (!lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.DebugOptions and conformance ARView.DebugOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions;
  if (!lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions;
  if (!lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions;
  if (!lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions;
  if (!lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.__StatisticsOptions and conformance ARView.__StatisticsOptions);
  }
  return result;
}

uint64_t sub_1E2A7F91C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures, a2);
}

uint64_t sub_1E2A7F928(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ARView._lastHitEntityForGestures : ARView(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView__lastHitEntityForGestures);
}

uint64_t sub_1E2A7F948@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1E4E64ED0](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1E2A7F9A4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView___delegatePrivate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

void *sub_1E2A7FA10@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *a2 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions);
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_1E2A7FA40(uint64_t *a1)
{
  uint64_t v1 = *a1;
  ARView.debugOptions.setter(&v1);
}

uint64_t sub_1E2A7FA88@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity, a2);
}

uint64_t sub_1E2A7FA94(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ARView._lastHitEntityForGestures : ARView(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
}

uint64_t sub_1E2A7FAB4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_32Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate, a2);
}

uint64_t sub_1E2A7FAC0(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_33Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate);
}

float sub_1E2A7FACC@<S0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = (float *)(*a1 + OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate);
  swift_beginAccess();
  float result = *v3;
  *a2 = *(_DWORD *)v3;
  return result;
}

uint64_t sub_1E2A7FB20(int *a1, void *a2)
{
  int v2 = *a1;
  uint64_t v3 = (_DWORD *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t sub_1E2A7FB78@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_32Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput, a2);
}

void sub_1E2A7FB84(char *a1)
{
}

uint64_t sub_1E2A7FBAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 4);
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(unsigned char *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_1E2A7FC08(int *a1, void *a2)
{
  int v2 = *a1;
  char v3 = *((unsigned char *)a1 + 4);
  uint64_t v4 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView_edrHeadroomPolicy;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v4 = v2;
  *(unsigned char *)(v4 + 4) = v3;
  return result;
}

uint64_t sub_1E2A7FC68@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___renderGraphEmitter, a2);
}

uint64_t sub_1E2A7FC74()
{
  uint64_t v0 = swift_retain();
  specialized ARView.__renderGraphEmitter.setter(v0);

  return swift_release();
}

uint64_t sub_1E2A7FCB8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_32Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes, a2);
}

uint64_t sub_1E2A7FCC4(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_33Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___forceLocalizedProbes);
}

uint64_t sub_1E2A7FCD0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_32Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe, a2);
}

uint64_t sub_1E2A7FCDC(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_33Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___parallaxBackgroundProbe);
}

uint64_t sub_1E2A7FCE8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession, a2);
}

uint64_t keypath_getTm@<X0>(void *a1@<X0>, void *a2@<X3>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_retain();
}

uint64_t sub_1E2A7FD48(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for ARView._lastHitEntityForGestures : ARView(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
}

uint64_t sub_1E2A7FD68@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_32Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation, a2);
}

uint64_t sub_1E2A7FD74(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_33Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___disableCounterRotation);
}

uint64_t sub_1E2A7FD80@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_32Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___disableComposition, a2);
}

uint64_t sub_1E2A7FD8C(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_33Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___disableComposition);
}

uint64_t sub_1E2A7FD98@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_32Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices, a2);
}

uint64_t sub_1E2A7FDA4(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_33Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit6ARView___nonARKitDevices);
}

uint64_t keypath_set_33Tm(char *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  char v5 = *a1;
  uint64_t v6 = (unsigned char *)(*a2 + *a5);
  uint64_t result = swift_beginAccess();
  *uint64_t v6 = v5;
  return result;
}

uint64_t sub_1E2A7FE0C@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  char v3 = (_DWORD *)(*a1 + OBJC_IVAR____TtC10RealityKit6ARView___statisticsOptions);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1E2A7FE64@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_32Tm(a1, &OBJC_IVAR____TtC10RealityKit6ARView___disableStatisticsRendering, a2);
}

uint64_t keypath_get_32Tm@<X0>(void *a1@<X0>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  uint64_t v4 = (unsigned char *)(*a1 + *a2);
  uint64_t result = swift_beginAccess();
  *a3 = *v4;
  return result;
}

uint64_t sub_1E2A7FEC0(char *a1)
{
  return ARView.__disableStatisticsRendering.setter(*a1);
}

uint64_t dispatch thunk of __ARViewDelegatePrivate.viewWillProcessTapInteraction(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of __ARViewDelegatePrivate.view(_:performedTapInteraction:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of __ARViewDelegatePrivate.view(_:performedProximityInteractionsForEntities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of __ARViewDelegatePrivate.update(_:deltaTime:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t ObjC metadata update function for ARView()
{
  return type metadata accessor for ARView();
}

uint64_t type metadata completion function for ARView()
{
  uint64_t result = type metadata accessor for AntialiasingMode();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for ARView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ARView);
}

uint64_t dispatch thunk of ARView.__services.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of ARView._lastHitEntityForGestures.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of ARView._lastHitEntityForGestures.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of ARView._lastHitEntityForGestures.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of ARView.scene.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of ARView.__delegatePrivate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of ARView.__delegatePrivate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ARView.__delegatePrivate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of ARView.__automaticallyInvokesStartTrigger.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of ARView.__automaticallyInvokesStartTrigger.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of ARView.__automaticallyInvokesStartTrigger.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of ARView.debugOptions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of ARView.debugOptions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of ARView.debugOptions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of ARView.environment.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of ARView.environment.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of ARView.environment.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of ARView.cameraTransform.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of ARView.audioListener.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of ARView.audioListener.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of ARView.audioListener.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of ARView.__environmentEntity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of ARView.__environmentEntity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of ARView.__environmentEntity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of ARView.__enableAutomaticFrameRate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of ARView.__enableAutomaticFrameRate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of ARView.__enableAutomaticFrameRate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of ARView.__preferredFrameRate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of ARView.__preferredFrameRate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of ARView.__preferredFrameRate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of ARView.__allocating_init(frame:cameraMode:automaticallyConfigureSession:)()
{
  return (*(uint64_t (**)(void))(v0 + 752))();
}

uint64_t dispatch thunk of ARView.__allocating_init(frame:forRealityView:)()
{
  return (*(uint64_t (**)(void))(v0 + 760))();
}

uint64_t dispatch thunk of ARView.extendedDynamicRangeOutput.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of ARView.extendedDynamicRangeOutput.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of ARView.extendedDynamicRangeOutput.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of ARView.edrHeadroomPolicy.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of ARView.edrHeadroomPolicy.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of ARView.edrHeadroomPolicy.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x330))();
}

uint64_t dispatch thunk of ARView.__renderGraphEmitter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of ARView.__renderGraphEmitter.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of ARView.__renderGraphEmitter.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of ARView.__setWireframeMode(displayWireframe:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of ARView.__forceLocalizedProbes.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of ARView.__forceLocalizedProbes.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of ARView.__forceLocalizedProbes.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of ARView.__parallaxBackgroundProbe.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of ARView.__parallaxBackgroundProbe.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of ARView.__parallaxBackgroundProbe.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of ARView.__targetIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of ARView.__didInitializeEngine()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of ARView.realityFusionSession.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of ARView.realityFusionSession.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of ARView.realityFusionSession.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of ARView.__interfaceOrientation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of ARView.__disableCounterRotation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of ARView.__disableCounterRotation.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of ARView.__disableCounterRotation.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of ARView.__disableComposition.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of ARView.__disableComposition.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of ARView.__disableComposition.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of ARView.__nonARKitDevices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of ARView.__nonARKitDevices.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of ARView.__nonARKitDevices.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of ARView.onDrawingManagerCreated()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x400))();
}

uint64_t dispatch thunk of ARView.__proto_antialiasingMode_v1.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of ARView.__proto_antialiasingMode_v1.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of ARView.__proto_antialiasingMode_v1.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x448))();
}

uint64_t dispatch thunk of ARView.antialiasingMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x450))();
}

uint64_t dispatch thunk of ARView.antialiasingMode.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x458))();
}

uint64_t dispatch thunk of ARView.antialiasingMode.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x460))();
}

uint64_t dispatch thunk of ARView.__handleTapAtPoint(point:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x468))();
}

uint64_t dispatch thunk of ARView.__statisticsOptions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of ARView.__statisticsOptions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x480))();
}

uint64_t dispatch thunk of ARView.__statisticsOptions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of ARView.__frameProfilerAddCustomStatistic(_:_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x490))();
}

uint64_t dispatch thunk of ARView.__disableStatisticsRendering.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x498))();
}

uint64_t dispatch thunk of ARView.__disableStatisticsRendering.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of ARView.__disableStatisticsRendering.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of ARView.__getStatisticsStringForSingleOption(statisticOption:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of ARView.__setProfilerUpdateInterval(newInterval:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of ARView.__frameTime()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of ARView.snapshot(saveToHDR:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of ARView.__startAudioEngine()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of ARView.__stopAudioEngine()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of ARView.__distanceInMetersFromEntity(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x4E8))();
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ARView.EDRHeadroomPolicy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.EDRHeadroomPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ARView.EDRHeadroomPolicy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u) {
    return *(unsigned __int8 *)(a1 + 4);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for ARView.EDRHeadroomPolicy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ARView.EDRHeadroomPolicy()
{
  return &type metadata for ARView.EDRHeadroomPolicy;
}

ValueMetadata *type metadata accessor for ARView.DebugOptions()
{
  return &type metadata for ARView.DebugOptions;
}

ValueMetadata *type metadata accessor for ARView.__StatisticsOptions()
{
  return &type metadata for ARView.__StatisticsOptions;
}

uint64_t getEnumTagSinglePayload for ARView.IBLType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ARView.IBLType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A816A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.IBLType()
{
  return &type metadata for ARView.IBLType;
}

unint64_t lazy protocol witness table accessor for type ARView.IBLType and conformance ARView.IBLType()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.IBLType and conformance ARView.IBLType;
  if (!lazy protocol witness table cache variable for type ARView.IBLType and conformance ARView.IBLType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.IBLType and conformance ARView.IBLType);
  }
  return result;
}

uint64_t outlined destroy of weak __ARViewDelegatePrivate?(uint64_t a1)
{
  return a1;
}

uint64_t MTLRegionMake2D@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = result;
  a3[4] = a2;
  a3[5] = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type Scene.AnchorCollection and conformance Scene.AnchorCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection;
  if (!lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection)
  {
    type metadata accessor for Scene.AnchorCollection();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Scene.AnchorCollection and conformance Scene.AnchorCollection);
  }
  return result;
}

uint64_t specialized ARView.hasTapInteractions(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_34;
  }
LABEL_3:
  unint64_t v4 = 0;
  unint64_t v5 = a1 & 0xC000000000000001;
  uint64_t v13 = v2;
  while (1)
  {
    if (v5)
    {
      MEMORY[0x1E4E63150](v4, a1);
      BOOL v6 = __OFADD__(v4++, 1);
      if (v6)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
    }
    else
    {
      if (v4 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      swift_retain();
      BOOL v6 = __OFADD__(v4++, 1);
      if (v6) {
        goto LABEL_32;
      }
    }
    dispatch thunk of __RKEntityInteraction.trigger.getter();
    type metadata accessor for __RKEntityTriggerGroup();
    if (!swift_dynamicCastClass()) {
      break;
    }
    unint64_t v7 = dispatch thunk of __RKEntityTriggerGroup.triggers.getter();
    unint64_t v8 = v7;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9)
      {
LABEL_15:
        uint64_t v10 = 4;
        do
        {
          uint64_t v11 = v10 - 4;
          if ((v8 & 0xC000000000000001) != 0)
          {
            MEMORY[0x1E4E63150](v10 - 4, v8);
            BOOL v6 = __OFADD__(v11, 1);
            uint64_t v12 = v10 - 3;
            if (v6) {
              goto LABEL_31;
            }
          }
          else
          {
            swift_retain();
            BOOL v6 = __OFADD__(v11, 1);
            uint64_t v12 = v10 - 3;
            if (v6)
            {
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
          }
          type metadata accessor for __RKEntityTapTrigger();
          if (swift_dynamicCastClass())
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            goto LABEL_29;
          }
          swift_release();
          ++v10;
        }
        while (v12 != v9);
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v9) {
        goto LABEL_15;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v5 = a1 & 0xC000000000000001;
    uint64_t v2 = v13;
LABEL_5:
    uint64_t result = swift_release();
    if (v4 == v2) {
      goto LABEL_34;
    }
  }
  swift_release();
  dispatch thunk of __RKEntityInteraction.trigger.getter();
  swift_release();
  type metadata accessor for __RKEntityTapTrigger();
  if (!swift_dynamicCastClass()) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
LABEL_29:
  swift_release();
  return 1;
}

uint64_t partial apply for closure #1 in ARView.commonInit(_:)(uint64_t a1)
{
  return closure #1 in ARView.commonInit(_:)(a1, v1);
}

uint64_t outlined assign with take of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in ARView.commonInit(_:)(uint64_t a1)
{
  return closure #2 in ARView.commonInit(_:)(a1, v1);
}

uint64_t outlined init with take of vImage_CGImageFormat?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t GroupActivitiesSynchronizationProtocolLayer.__allocating_init<A>(session:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1);
  return v2;
}

uint64_t GroupActivitiesSynchronizationMessage.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<GroupActivitiesSynchronizationMessage.CodingKeys>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance GroupActivitiesSynchronizationMessage.CodingKeys()
{
  return 1635017060;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance GroupActivitiesSynchronizationMessage.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance GroupActivitiesSynchronizationMessage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance GroupActivitiesSynchronizationMessage.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *protocol witness for Decodable.init(from:) in conformance GroupActivitiesSynchronizationMessage@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized GroupActivitiesSynchronizationMessage.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance GroupActivitiesSynchronizationMessage(void *a1)
{
  return GroupActivitiesSynchronizationMessage.encode(to:)(a1, *v1, v1[1]);
}

unint64_t protocol witness for static CustomMessageIdentifiable.messageIdentifier.getter in conformance GroupActivitiesSynchronizationMessage()
{
  return 0xD000000000000025;
}

uint64_t GroupActivitiesSynchronizationProtocolHandle.__deallocating_deinit()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant;
  uint64_t v2 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for GroupActivitiesSynchronizationProtocolHandle()
{
  return type metadata accessor for GroupActivitiesSynchronizationProtocolHandle();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationProtocolHandle()
{
  uint64_t result = type metadata singleton initialization cache for GroupActivitiesSynchronizationProtocolHandle;
  if (!type metadata singleton initialization cache for GroupActivitiesSynchronizationProtocolHandle) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for GroupActivitiesSynchronizationProtocolHandle()
{
  uint64_t result = type metadata accessor for Participant();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void one-time initialization function for useUnreliableMessenger()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  unint64_t v1 = (void *)MEMORY[0x1E4E62C20](0xD00000000000003BLL, 0x80000001E2ABA530);
  unsigned __int8 v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  static GroupActivitiesSynchronizationProtocolLayer.useUnreliableMessenger = v2;
}

uint64_t GroupActivitiesSynchronizationProtocolLayer.State.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1)
{
  unsigned __int8 v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  long long v63 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  long long v62 = (char *)&v61 - v7;
  uint64_t v8 = type metadata accessor for GroupSessionMessenger.DeliveryMode();
  uint64_t v65 = *(void *)(v8 - 8);
  uint64_t v66 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Participant();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for GroupActivitiesSynchronizationProtocolLayer.State();
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = MEMORY[0x1E4FBC860];
  v19[3] = dispatch_semaphore_create(0);
  v19[4] = 0;
  v2[2] = v19;
  v2[4] = 0;
  v2[5] = 0;
  uint64_t v64 = v2;
  GroupSession.localParticipant.getter();
  Participant.id.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t v20 = UUID.uuidString.getter();
  uint64_t v61 = v21;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  type metadata accessor for GroupSessionMessenger();
  swift_retain();
  uint64_t v22 = GroupSessionMessenger.__allocating_init<A>(session:)();
  (*(void (**)(char *, void, uint64_t))(v65 + 104))(v10, *MEMORY[0x1E4F293B0], v66);
  swift_retain();
  uint64_t v66 = a1;
  uint64_t v23 = GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)();
  uint64_t v24 = RESyncProtocolLayerObserverCreate();
  long long v71 = protocol witness for static Equatable.== infix(_:_:) in conformance GroupActivitiesSynchronizationComponent.CodingKeys;
  uint64_t v72 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v68 = 1107296256;
  uint64_t v69 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  long long v70 = &block_descriptor_7;
  id v25 = _Block_copy(&aBlock);
  RESyncProtocolLayerObserverOnInit();
  _Block_release(v25);
  if (v24)
  {
    int v26 = v64;
    uint64_t v27 = (void *)v64[2];
    long long v71 = partial apply for closure #2 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = v27;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed () -> ();
    long long v70 = &block_descriptor_33;
    Swift::String v28 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnDeinit();
    _Block_release(v28);
    uint64_t v29 = (void *)v26[2];
    long long v71 = (uint64_t (*)())partial apply for closure #3 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = v29;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> (@unowned OpaquePointer?);
    long long v70 = &block_descriptor_36;
    uint64_t v30 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnOpenNullable();
    _Block_release(v30);
    uint64_t v31 = (void *)v26[2];
    long long v71 = (uint64_t (*)())partial apply for closure #4 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = v31;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned Bool) -> ();
    long long v70 = &block_descriptor_39;
    uint64_t v32 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnClose();
    _Block_release(v32);
    long long v33 = (void *)v26[2];
    long long v71 = (uint64_t (*)())partial apply for closure #5 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = v33;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned Bool) -> ();
    long long v70 = &block_descriptor_42;
    uint64_t v34 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnDisconnect();
    _Block_release(v34);
    uint64_t v35 = v26[2];
    uint64_t v36 = (void *)swift_allocObject();
    v36[2] = v35;
    v36[3] = v23;
    v36[4] = v22;
    long long v71 = (uint64_t (*)())partial apply for closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = v36;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @guaranteed @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()) -> ();
    long long v70 = &block_descriptor_45;
    id v37 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnSend();
    _Block_release(v37);
    double v38 = (void *)v26[2];
    long long v71 = (uint64_t (*)())partial apply for closure #7 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = v38;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed () -> ();
    long long v70 = &block_descriptor_48;
    double v39 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnWait();
    _Block_release(v39);
    double v40 = (void *)v26[2];
    long long v71 = partial apply for closure #8 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = v40;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed () -> ();
    long long v70 = &block_descriptor_51;
    double v41 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    RESyncProtocolLayerObserverOnWakeup();
    _Block_release(v41);
    uint64_t v42 = swift_allocObject();
    uint64_t v43 = v61;
    *(void *)(v42 + 16) = v20;
    *(void *)(v42 + 24) = v43;
    long long v71 = partial apply for closure #9 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = (void *)v42;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed () -> (@unowned OpaquePointer);
    long long v70 = &block_descriptor_57;
    double v44 = _Block_copy(&aBlock);
    swift_release();
    RESyncProtocolLayerObserverOnLocalAddresses();
    _Block_release(v44);
    long long v71 = getEnumTag for GroupActivitiesSynchronizationComponent.CodingKeys;
    uint64_t v72 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutablePointer<RESyncProtocolConnectionStats>) -> (@unowned Bool);
    long long v70 = &block_descriptor_60;
    uint64_t v45 = _Block_copy(&aBlock);
    RESyncProtocolLayerObserverOnHostStats();
    _Block_release(v45);
    long long v71 = ARView.PostProcessContext.device.modify;
    uint64_t v72 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed (@unowned UInt32) -> ();
    long long v70 = &block_descriptor_63;
    CGImageRef v46 = _Block_copy(&aBlock);
    RESyncProtocolLayerObserverOnSetDisconnectTimeout();
    _Block_release(v46);
    long long v71 = closure #12 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v72 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v68 = 1107296256;
    uint64_t v69 = thunk for @escaping @callee_guaranteed () -> (@unowned UInt32);
    long long v70 = &block_descriptor_66;
    uint64_t v47 = _Block_copy(&aBlock);
    RESyncProtocolLayerObserverOnPreferredPacketSize();
    _Block_release(v47);
    uint64_t v48 = RESyncCustomProtocolLayerCreate();
    type metadata accessor for RESyncHandle();
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v48;
    v26[3] = v49;
    *(void *)(v26[2] + 32) = v48;
    uint64_t v50 = type metadata accessor for TaskPriority();
    uint64_t v51 = v22;
    double v52 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56);
    uint64_t v65 = v24;
    uint64_t v53 = v23;
    uint64_t v54 = (uint64_t)v62;
    v52(v62, 1, 1, v50);
    uint64_t v55 = swift_allocObject();
    swift_weakInit();
    uint64_t v56 = (void *)swift_allocObject();
    v56[2] = 0;
    v56[3] = 0;
    v56[4] = v51;
    v56[5] = v55;
    swift_retain();
    v26[4] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v54, (uint64_t)&async function pointer to partial apply for closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:), (uint64_t)v56);
    swift_release();
    uint64_t v57 = (uint64_t)v63;
    v52(v63, 1, 1, v50);
    uint64_t v58 = swift_allocObject();
    swift_weakInit();
    BOOL v59 = (void *)swift_allocObject();
    v59[2] = 0;
    v59[3] = 0;
    v59[4] = v53;
    v59[5] = v58;
    swift_retain();
    uint64_t v60 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v57, (uint64_t)&async function pointer to partial apply for closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:), (uint64_t)v59);
    swift_release();
    swift_release();
    swift_release();
    RESyncRelease();
    v26[5] = v60;
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #3 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v3 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v4 = String.init(cString:)();
  uint64_t v6 = specialized Sequence.first(where:)(v3, v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v6) {
    return v6;
  }
  uint64_t v7 = *(void *)(v6
                 + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle);
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(v7 + 16);
  swift_release();
  if (!v6) {
    return v6;
  }
  uint64_t result = *(void *)(a2 + 32);
  if (result)
  {
    RESyncCustomProtocolLayerOnConnected();
    return v6;
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<Int8>) -> (@unowned OpaquePointer?)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t closure #4 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  unint64_t v5 = *(void *)(a3 + 16);
  if (v5 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_19;
  }
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(MEMORY[0x1E4E63150](v7, v5)
                                 + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                     + 16);
      swift_unknownObjectRelease();
      if (v8 && v8 == a1) {
        break;
      }
      uint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        goto LABEL_23;
      }
      ++v7;
      if (v10 == v6) {
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)(*(void *)(v5 + 8 * v7 + 32)
                                  + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                      + 16);
      if (v11 && v11 == a1) {
        break;
      }
      uint64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      ++v7;
      if (v13 == v6) {
        goto LABEL_19;
      }
    }
  }
  swift_bridgeObjectRelease();
  specialized Array.remove(at:)(v7);
  swift_release();
  return swift_endAccess();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned Bool) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t closure #5 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  unint64_t v5 = *(void *)(a3 + 16);
  if (v5 >> 62) {
    goto LABEL_25;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v8 = MEMORY[0x1E4E63150](i, v5);
        uint64_t v9 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        uint64_t v10 = *(void *)(*(void *)(v8
                                    + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                        + 16);
        if (v10) {
          BOOL v11 = v10 == a1;
        }
        else {
          BOOL v11 = 0;
        }
        if (v11) {
          goto LABEL_21;
        }
        swift_unknownObjectRelease();
        if (v9 == v6) {
          return swift_bridgeObjectRelease_n();
        }
      }
      __break(1u);
    }
    else
    {
      for (uint64_t j = 0; ; ++j)
      {
        uint64_t v13 = j + 1;
        if (__OFADD__(j, 1)) {
          break;
        }
        uint64_t v14 = *(void *)(*(void *)(*(void *)(v5 + 8 * j + 32)
                                    + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                        + 16);
        if (v14) {
          BOOL v15 = v14 == a1;
        }
        else {
          BOOL v15 = 0;
        }
        if (v15)
        {
          swift_retain();
LABEL_21:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRetain();
          uint64_t result = swift_release();
          if (*(void *)(a3 + 32))
          {
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            RESyncCustomProtocolLayerOnDisconnected();
            return swift_release();
          }
          else
          {
            __break(1u);
          }
          return result;
        }
        if (v13 == v6) {
          return swift_bridgeObjectRelease_n();
        }
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, char *a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v10 = type metadata accessor for Participant();
  BOOL v11 = *(void **)(v10 - 8);
  uint64_t v12 = v11[8];
  MEMORY[0x1F4188790](v10);
  double v40 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  BOOL v15 = (char *)&v37 - v14;
  MEMORY[0x1F4188790](v16);
  double v41 = (char *)&v37 - v17;
  swift_beginAccess();
  unint64_t v18 = *(void *)(a4 + 16);
  if (v18 >> 62) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  for (; v19; uint64_t v19 = _CocoaArrayWrapper.endIndex.getter())
  {
    if ((v18 & 0xC000000000000001) != 0)
    {
      id v37 = v11;
      double v38 = a3;
      double v39 = a2;
      BOOL v11 = 0;
      a3 = &lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption;
      while (1)
      {
        uint64_t v20 = MEMORY[0x1E4E63150](v11, v18);
        a2 = (char *)v11 + 1;
        if (__OFADD__(v11, 1)) {
          break;
        }
        uint64_t v21 = v20;
        uint64_t v22 = *(void *)(*(void *)(v20
                                    + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                        + 16);
        if (v22) {
          BOOL v23 = v22 == a1;
        }
        else {
          BOOL v23 = 0;
        }
        if (v23)
        {
          BOOL v11 = v37;
          goto LABEL_22;
        }
        swift_unknownObjectRelease();
        BOOL v11 = (void *)((char *)v11 + 1);
        if (a2 == (char *)v19) {
          return swift_bridgeObjectRelease_n();
        }
      }
      __break(1u);
    }
    else
    {
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v25 = i + 1;
        if (__OFADD__(i, 1)) {
          break;
        }
        uint64_t v21 = *(void *)(v18 + 8 * i + 32);
        uint64_t v26 = *(void *)(*(void *)(v21
                                    + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                        + 16);
        if (v26) {
          BOOL v27 = v26 == a1;
        }
        else {
          BOOL v27 = 0;
        }
        if (v27)
        {
          swift_retain();
          double v38 = a3;
          double v39 = a2;
LABEL_22:
          swift_bridgeObjectRelease_n();
          uint64_t v29 = (void (*)(char *, uint64_t, uint64_t))v11[2];
          v29(v15, v21+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, v10);
          swift_release();
          uint64_t v30 = v11;
          uint64_t v31 = (void (*)(char *, char *, uint64_t))v11[4];
          uint64_t v32 = v41;
          v31(v41, v15, v10);
          long long v33 = v40;
          v29(v40, (uint64_t)v32, v10);
          unint64_t v34 = (*((unsigned __int8 *)v30 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v30 + 80);
          uint64_t v35 = swift_allocObject();
          uint64_t v36 = v43;
          *(void *)(v35 + 16) = v42;
          *(void *)(v35 + 24) = v36;
          v31((char *)(v35 + v34), v33, v10);
          swift_retain();
          swift_retain();
          ((void (*)(uint64_t (*)(uint64_t, uint64_t, unsigned int, int), uint64_t))v39)(partial apply for closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:), v35);
          swift_release();
          return ((uint64_t (*)(char *, uint64_t))v30[1])(v32, v10);
        }
        if (v25 == v19) {
          return swift_bridgeObjectRelease_n();
        }
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v25 = a7;
  v23[1] = a5;
  int v24 = a4;
  uint64_t v9 = type metadata accessor for Participants();
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  MEMORY[0x1F4188790](v9);
  BOOL v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Data.Deallocator();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t, __n128))(v13 + 104))(v16, *MEMORY[0x1E4F27740], v12, v14);
  Data.Deallocator._deallocator.getter();
  if (a3)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v17 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v18 = specialized Data._Representation.init(_:count:)(v17, a3);
    unint64_t v20 = v19;
    swift_release();
  }
  else
  {
    uint64_t v21 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
    v21(a2, 0);
    swift_release();
    swift_release();
    uint64_t v18 = 0;
    unint64_t v20 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  if (v24 && one-time initialization token for useUnreliableMessenger != -1) {
    swift_once();
  }
  uint64_t v28 = v18;
  unint64_t v29 = v20;
  swift_retain();
  outlined copy of Data._Representation(v18, v20);
  static Participants.only(_:)();
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  GroupSessionMessenger.send<A>(_:to:completion:)();
  swift_release();
  outlined consume of Data._Representation(v18, v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  outlined consume of Data._Representation(v28, v29);
  return 1;
}

void closure #1 in closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(void *a1)
{
  if (a1)
  {
    if (one-time initialization token for groupActivities != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.groupActivities);
    id v3 = a1;
    id v4 = a1;
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v11 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
      uint64_t v8 = Optional.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1E2A33000, oslog, v5, "Messenger send error: %s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E4E64DE0](v7, -1, -1);
      MEMORY[0x1E4E64DE0](v6, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @guaranteed @escaping @callee_guaranteed (@guaranteed @escaping @callee_guaranteed (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()) -> ()(uint64_t a1, uint64_t a2, void *aBlock)
{
  id v4 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t))(a1 + 32);
  os_log_type_t v5 = _Block_copy(aBlock);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  swift_retain();
  v4(a2, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned @escaping @callee_unowned @convention(block) (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> (), v6);
  swift_release();

  return swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned @escaping @callee_unowned @convention(block) (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[4] = a1;
  v7[5] = a2;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool);
  v7[3] = &block_descriptor_86;
  id v4 = _Block_copy(v7);
  os_log_type_t v5 = *(void (**)(uint64_t, void *))(a3 + 16);
  swift_retain();
  v5(a3, v4);
  _Block_release(v4);
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a5) = v9(a2, a3, a4, a5);
  swift_release();
  return a5 & 1;
}

uint64_t closure #9 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  uint64_t v0 = (void *)MEMORY[0x1E4E62C20]();
  id v1 = objc_msgSend(v0, sel_UTF8String);
  id v2 = v0;
  if (!v1) {
    __break(1u);
  }
  return RESyncAddressListCreate();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutablePointer<RESyncProtocolConnectionStats>) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  id v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UInt32) -> ()(uint64_t a1, uint64_t a2)
{
  id v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t closure #12 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  return 950;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt32)(uint64_t a1)
{
  id v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  uint64_t v6 = type metadata accessor for Participant();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v5[14] = v7;
  v5[15] = *(void *)(v7 - 8);
  v5[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupActivitiesSynchronizationMessage, GroupSessionMessenger.MessageContext)?);
  v5[17] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>);
  v5[18] = v8;
  v5[19] = *(void *)(v8 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator);
  v5[21] = v9;
  v5[22] = *(void *)(v9 - 8);
  v5[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:), 0, 0);
}

uint64_t closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  GroupSessionMessenger.messages<A>(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  unint64_t v4 = lazy protocol witness table accessor for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator();
  os_log_type_t v5 = (void *)swift_task_alloc();
  v0[24] = v5;
  *os_log_type_t v5 = v0;
  v5[1] = closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[17];
  return MEMORY[0x1F4187C78](v7, v6, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  }
  else {
    uint64_t v2 = closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  unint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = *(uint64_t **)(v0 + 136);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupActivitiesSynchronizationMessage, GroupSessionMessenger.MessageContext));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  uint64_t v6 = *v1;
  os_log_type_t v5 = v1[1];
  (*(void (**)(void, char *, void))(*(void *)(v0 + 120) + 32))(*(void *)(v0 + 128), (char *)v1 + *(int *)(v2 + 48), *(void *)(v0 + 112));
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    outlined consume of Data._Representation(v6, v5);
LABEL_55:
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    uint64_t v28 = lazy protocol witness table accessor for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator();
    unint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v29;
    *unint64_t v29 = v0;
    v29[1] = closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v30 = *(void *)(v0 + 168);
    uint64_t v31 = *(void *)(v0 + 136);
    return MEMORY[0x1F4187C78](v31, v30, v28);
  }
  uint64_t v8 = Strong;
  outlined copy of Data._Representation(v6, v5);
  GroupSessionMessenger.MessageContext.source.getter();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v32 = v8;
  if (v10 >> 62) {
    goto LABEL_59;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v11)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v6, v5);
LABEL_54:
    swift_release();
    outlined consume of Data._Representation(v6, v5);
    (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
    goto LABEL_55;
  }
LABEL_8:
  if ((v10 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = MEMORY[0x1E4E63150](0, v10);
  }
  else
  {
    uint64_t v12 = *(void *)(v10 + 32);
    swift_retain();
  }
  if ((MEMORY[0x1E4E61C20](v12+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, *(void *)(v0 + 104)) & 1) == 0)
  {
    swift_release();
    if (v11 == 1) {
      goto LABEL_25;
    }
    uint64_t v13 = 5;
    while (1)
    {
      __n128 v14 = v13 - 4;
      if ((v10 & 0xC000000000000001) != 0)
      {
        uint64_t v12 = MEMORY[0x1E4E63150](v13 - 4, v10);
        uint64_t v15 = __OFADD__(v14, 1);
        uint64_t v16 = v13 - 3;
        if (v15) {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(v10 + 8 * v13);
        swift_retain();
        uint64_t v15 = __OFADD__(v14, 1);
        uint64_t v16 = v13 - 3;
        if (v15)
        {
LABEL_58:
          __break(1u);
LABEL_59:
          swift_bridgeObjectRetain_n();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
          if (!v11) {
            goto LABEL_25;
          }
          goto LABEL_8;
        }
      }
      if (MEMORY[0x1E4E61C20](v12+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, *(void *)(v0 + 104)))break; {
      swift_release();
      }
      ++v13;
      if (v16 == v11) {
        goto LABEL_25;
      }
    }
  }
  swift_bridgeObjectRelease_n();
  switch(v5 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      outlined copy of Data._Representation(v6, v5);
      uint64_t v17 = __DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_30;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v6, v18)) {
LABEL_66:
      }
        __break(1u);
      v17 += (int)v6 - v18;
LABEL_30:
      unint64_t v19 = __DataStorage._length.getter();
      if (v19 >= (v6 >> 32) - (int)v6) {
        unint64_t v20 = (v6 >> 32) - (int)v6;
      }
      else {
        unint64_t v20 = v19;
      }
      if (!*(void *)(*(void *)(v32 + 24) + 16)) {
        goto LABEL_69;
      }
      if (!*(void *)(*(void *)(v12
                                  + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                      + 16))
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      if (!v17)
      {
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        JUMPOUT(0x1E2A84804);
      }
      if (v20 <= 0xFFFFFFFFLL)
      {
        RESyncCustomProtocolLayerOnReceiveData();
        outlined consume of Data._Representation(v6, v5);
        goto LABEL_53;
      }
      return _assertionFailure(_:_:file:line:flags:)();
    case 2uLL:
      uint64_t v21 = *(void *)(v6 + 16);
      uint64_t v22 = *(void *)(v6 + 24);
      swift_retain();
      swift_retain();
      BOOL v23 = __DataStorage._bytes.getter();
      if (!v23) {
        goto LABEL_41;
      }
      int v24 = __DataStorage._offset.getter();
      if (__OFSUB__(v21, v24)) {
        goto LABEL_65;
      }
      v23 += v21 - v24;
LABEL_41:
      uint64_t v15 = __OFSUB__(v22, v21);
      uint64_t v25 = v22 - v21;
      if (v15) {
        goto LABEL_64;
      }
      uint64_t v26 = __DataStorage._length.getter();
      if (v26 >= v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v26;
      }
      if (!*(void *)(*(void *)(v32 + 24) + 16)) {
        goto LABEL_72;
      }
      if (!*(void *)(*(void *)(v12
                                  + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                      + 16))
        goto LABEL_73;
      if (!v23) {
        goto LABEL_74;
      }
      if (v27 > 0xFFFFFFFFLL) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      RESyncCustomProtocolLayerOnReceiveData();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Data._Representation(v6, v5);
      goto LABEL_54;
    case 3uLL:
      *(void *)(v0 + 228) = 0;
      *(void *)(v0 + 222) = 0;
      if (!*(void *)(*(void *)(v32 + 24) + 16)) {
        goto LABEL_75;
      }
      if (*(void *)(*(void *)(v12
                                 + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                     + 16))
        goto LABEL_52;
      goto LABEL_76;
    default:
      *(void *)(v0 + 208) = v6;
      *(_WORD *)(v0 + 216) = v5;
      *(unsigned char *)(v0 + 218) = BYTE2(v5);
      *(unsigned char *)(v0 + 219) = BYTE3(v5);
      *(unsigned char *)(v0 + 220) = BYTE4(v5);
      *(unsigned char *)(v0 + 221) = BYTE5(v5);
      if (*(void *)(*(void *)(v32 + 24) + 16))
      {
        if (*(void *)(*(void *)(v12
                                   + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                       + 16))
        {
LABEL_52:
          RESyncCustomProtocolLayerOnReceiveData();
LABEL_53:
          swift_release();
          outlined consume of Data._Representation(v6, v5);
          goto LABEL_54;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(void *)(v0 + 64) = *(void *)(v0 + 200);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[9] = a4;
  v5[10] = a5;
  uint64_t v6 = type metadata accessor for Participant();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v5[14] = v7;
  v5[15] = *(void *)(v7 - 8);
  v5[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupActivitiesSynchronizationMessage, GroupSessionMessenger.MessageContext)?);
  v5[17] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>);
  v5[18] = v8;
  v5[19] = *(void *)(v8 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator);
  v5[21] = v9;
  v5[22] = *(void *)(v9 - 8);
  v5[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:), 0, 0);
}

uint64_t closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage();
  GroupSessionMessenger.messages<A>(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_beginAccess();
  unint64_t v4 = lazy protocol witness table accessor for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator();
  os_log_type_t v5 = (void *)swift_task_alloc();
  v0[24] = v5;
  *os_log_type_t v5 = v0;
  v5[1] = closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[17];
  return MEMORY[0x1F4187C78](v7, v6, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  }
  else {
    uint64_t v2 = closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  unint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = *(uint64_t **)(v0 + 136);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GroupActivitiesSynchronizationMessage, GroupSessionMessenger.MessageContext));
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 176) + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  uint64_t v6 = *v1;
  os_log_type_t v5 = v1[1];
  (*(void (**)(void, char *, void))(*(void *)(v0 + 120) + 32))(*(void *)(v0 + 128), (char *)v1 + *(int *)(v2 + 48), *(void *)(v0 + 112));
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    outlined consume of Data._Representation(v6, v5);
LABEL_55:
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
    uint64_t v28 = lazy protocol witness table accessor for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator();
    unint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v29;
    *unint64_t v29 = v0;
    v29[1] = closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:);
    uint64_t v30 = *(void *)(v0 + 168);
    uint64_t v31 = *(void *)(v0 + 136);
    return MEMORY[0x1F4187C78](v31, v30, v28);
  }
  uint64_t v8 = Strong;
  outlined copy of Data._Representation(v6, v5);
  GroupSessionMessenger.MessageContext.source.getter();
  uint64_t v9 = *(void *)(v8 + 16);
  swift_beginAccess();
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v32 = v8;
  if (v10 >> 62) {
    goto LABEL_59;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v11)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v6, v5);
LABEL_54:
    swift_release();
    outlined consume of Data._Representation(v6, v5);
    (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 88));
    goto LABEL_55;
  }
LABEL_8:
  if ((v10 & 0xC000000000000001) != 0)
  {
    uint64_t v12 = MEMORY[0x1E4E63150](0, v10);
  }
  else
  {
    uint64_t v12 = *(void *)(v10 + 32);
    swift_retain();
  }
  if ((MEMORY[0x1E4E61C20](v12+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, *(void *)(v0 + 104)) & 1) == 0)
  {
    swift_release();
    if (v11 == 1) {
      goto LABEL_25;
    }
    uint64_t v13 = 5;
    while (1)
    {
      __n128 v14 = v13 - 4;
      if ((v10 & 0xC000000000000001) != 0)
      {
        uint64_t v12 = MEMORY[0x1E4E63150](v13 - 4, v10);
        uint64_t v15 = __OFADD__(v14, 1);
        uint64_t v16 = v13 - 3;
        if (v15) {
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v12 = *(void *)(v10 + 8 * v13);
        swift_retain();
        uint64_t v15 = __OFADD__(v14, 1);
        uint64_t v16 = v13 - 3;
        if (v15)
        {
LABEL_58:
          __break(1u);
LABEL_59:
          swift_bridgeObjectRetain_n();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
          if (!v11) {
            goto LABEL_25;
          }
          goto LABEL_8;
        }
      }
      if (MEMORY[0x1E4E61C20](v12+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, *(void *)(v0 + 104)))break; {
      swift_release();
      }
      ++v13;
      if (v16 == v11) {
        goto LABEL_25;
      }
    }
  }
  swift_bridgeObjectRelease_n();
  switch(v5 >> 62)
  {
    case 1uLL:
      if (v6 >> 32 < (int)v6)
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      outlined copy of Data._Representation(v6, v5);
      uint64_t v17 = __DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_30;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v6, v18)) {
LABEL_66:
      }
        __break(1u);
      v17 += (int)v6 - v18;
LABEL_30:
      unint64_t v19 = __DataStorage._length.getter();
      if (v19 >= (v6 >> 32) - (int)v6) {
        unint64_t v20 = (v6 >> 32) - (int)v6;
      }
      else {
        unint64_t v20 = v19;
      }
      if (!*(void *)(*(void *)(v32 + 24) + 16)) {
        goto LABEL_69;
      }
      if (!*(void *)(*(void *)(v12
                                  + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                      + 16))
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      if (!v17)
      {
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
        JUMPOUT(0x1E2A854CCLL);
      }
      if (v20 <= 0xFFFFFFFFLL)
      {
        RESyncCustomProtocolLayerOnReceiveData();
        outlined consume of Data._Representation(v6, v5);
        goto LABEL_53;
      }
      return _assertionFailure(_:_:file:line:flags:)();
    case 2uLL:
      uint64_t v21 = *(void *)(v6 + 16);
      uint64_t v22 = *(void *)(v6 + 24);
      swift_retain();
      swift_retain();
      BOOL v23 = __DataStorage._bytes.getter();
      if (!v23) {
        goto LABEL_41;
      }
      int v24 = __DataStorage._offset.getter();
      if (__OFSUB__(v21, v24)) {
        goto LABEL_65;
      }
      v23 += v21 - v24;
LABEL_41:
      uint64_t v15 = __OFSUB__(v22, v21);
      uint64_t v25 = v22 - v21;
      if (v15) {
        goto LABEL_64;
      }
      uint64_t v26 = __DataStorage._length.getter();
      if (v26 >= v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v26;
      }
      if (!*(void *)(*(void *)(v32 + 24) + 16)) {
        goto LABEL_72;
      }
      if (!*(void *)(*(void *)(v12
                                  + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                      + 16))
        goto LABEL_73;
      if (!v23) {
        goto LABEL_74;
      }
      if (v27 > 0xFFFFFFFFLL) {
        return _assertionFailure(_:_:file:line:flags:)();
      }
      RESyncCustomProtocolLayerOnReceiveData();
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Data._Representation(v6, v5);
      goto LABEL_54;
    case 3uLL:
      *(void *)(v0 + 228) = 0;
      *(void *)(v0 + 222) = 0;
      if (!*(void *)(*(void *)(v32 + 24) + 16)) {
        goto LABEL_75;
      }
      if (*(void *)(*(void *)(v12
                                 + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                     + 16))
        goto LABEL_52;
      goto LABEL_76;
    default:
      *(void *)(v0 + 208) = v6;
      *(_WORD *)(v0 + 216) = v5;
      *(unsigned char *)(v0 + 218) = BYTE2(v5);
      *(unsigned char *)(v0 + 219) = BYTE3(v5);
      *(unsigned char *)(v0 + 220) = BYTE4(v5);
      *(unsigned char *)(v0 + 221) = BYTE5(v5);
      if (*(void *)(*(void *)(v32 + 24) + 16))
      {
        if (*(void *)(*(void *)(v12
                                   + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle)
                       + 16))
        {
LABEL_52:
          RESyncCustomProtocolLayerOnReceiveData();
LABEL_53:
          swift_release();
          outlined consume of Data._Representation(v6, v5);
          goto LABEL_54;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
  }
}

{
  uint64_t v1;

  return closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)();
}

void GroupActivitiesSynchronizationProtocolLayer.__deallocating_deinit()
{
  if (!*(void *)(v0 + 32))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v1 = swift_retain();
  uint64_t v2 = MEMORY[0x1E4FBC848] + 8;
  MEMORY[0x1E4E62DB0](v1, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
  swift_release();
  if (!*(void *)(v0 + 40))
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v3 = swift_retain();
  MEMORY[0x1E4E62DB0](v3, v2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_deallocClassInstance();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationProtocolLayer()
{
  return self;
}

uint64_t GroupActivitiesSynchronizationProtocolLayer.add(participant:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v13(v11, a1, v7, v9);
  type metadata accessor for GroupActivitiesSynchronizationProtocolHandle();
  uint64_t v14 = swift_allocObject();
  ((void (*)(uint64_t, char *, uint64_t))v13)(v14+ OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_participant, v11, v7);
  swift_retain();
  Participant.id.getter();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v18 = (uint64_t *)(v14
                  + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_address);
  *uint64_t v18 = v15;
  v18[1] = v17;
  uint64_t v19 = RESyncProtocolHandleCreate();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  type metadata accessor for RESyncHandle();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v14
            + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_handle) = v20;
  uint64_t v21 = swift_beginAccess();
  MEMORY[0x1E4E62CE0](v21);
  if (*(void *)((*(void *)(v12 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v12 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  return swift_release();
}

uint64_t type metadata accessor for GroupActivitiesSynchronizationProtocolLayer.State()
{
  return self;
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t partial apply for closure #2 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  swift_beginAccess();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #3 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1)
{
  return closure #3 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, v1);
}

uint64_t partial apply for closure #4 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2)
{
  return closure #4 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, a2, v2);
}

uint64_t partial apply for closure #5 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2)
{
  return closure #5 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, a2, v2);
}

uint64_t sub_1E2A858F8()
{
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, char *a2, unint64_t *a3)
{
  return closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, a2, a3, v3[2], v3[3], v3[4]);
}

void partial apply for closure #7 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
}

Swift::Int partial apply for closure #8 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1E2A85994()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #9 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)()
{
  return closure #9 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)();
}

uint64_t sub_1E2A859D4()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for ARKitRunnable.runARKitSession(withSupportedCapabilities:) in conformance ARSessionManager;
  return closure #13 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_71Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TATQ0_;
  return closure #14 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, v4, v5, v7, v6);
}

unint64_t lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage and conformance GroupActivitiesSynchronizationMessage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator;
  if (!lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<GroupActivitiesSynchronizationMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1E2A85D38()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned @escaping @callee_unowned @convention(block) (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned @escaping @callee_unowned @convention(block) (@unowned RESyncChannelId, @unowned UnsafeRawPointer, @unowned UInt32, @unowned RESyncPacketDeliveryMethodType) -> (@unowned Bool)) -> ()(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1E2A85D78()
{
  uint64_t v1 = type metadata accessor for Participant();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for Participant() - 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = v4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in closure #6 in GroupActivitiesSynchronizationProtocolLayer.init<A>(session:)(a1, a2, a3, a4, v10, v11, v12);
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  _OWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x1E4E63150](v7 - 4, a1);
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * v7);
          swift_retain();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10)
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        BOOL v12 = *(void *)(v9
                        + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_address) == a2
           && *(void *)(v9
                        + OBJC_IVAR____TtC10RealityKitP33_C8ACE28DEBEF4D337B220B077987CB7144GroupActivitiesSynchronizationProtocolHandle_address
                        + 8) == a3;
        if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void *specialized GroupActivitiesSynchronizationMessage.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<GroupActivitiesSynchronizationMessage.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

uint64_t specialized Data._Representation.init(_:count:)(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = __DataStorage._length.getter();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = specialized Data.InlineData.init(_:)(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupActivitiesSynchronizationMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for GroupActivitiesSynchronizationMessage(uint64_t a1)
{
  return outlined consume of Data._Representation(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for GroupActivitiesSynchronizationMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

uint64_t *assignWithTake for GroupActivitiesSynchronizationMessage(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivitiesSynchronizationMessage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GroupActivitiesSynchronizationMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupActivitiesSynchronizationMessage()
{
  return &type metadata for GroupActivitiesSynchronizationMessage;
}

unint64_t lazy protocol witness table accessor for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupActivitiesSynchronizationMessage.CodingKeys and conformance GroupActivitiesSynchronizationMessage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for GroupActivitiesSynchronizationMessage.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1E2A86C00);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for GroupActivitiesSynchronizationMessage.CodingKeys()
{
  return &unk_1F3E02D00;
}

uint64_t SpatialTrackingSession.run(_:session:arConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  uint64_t v5 = type metadata accessor for SpatialTrackingSession.UnavailableCapabilities();
  v4[15] = v5;
  v4[16] = *(void *)(v5 - 8);
  v4[17] = swift_task_alloc();
  type metadata accessor for SpatialTrackingSession.Configuration.Camera();
  v4[18] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration?);
  v4[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SpatialTrackingSession.Configuration();
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = type metadata accessor for MainActor();
  v4[25] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[26] = v8;
  v4[27] = v7;
  return MEMORY[0x1F4188298](SpatialTrackingSession.run(_:session:arConfiguration:), v8, v7);
}

uint64_t SpatialTrackingSession.run(_:session:arConfiguration:)()
{
  type metadata accessor for SpatialTrackingManager();
  uint64_t v1 = static SpatialTrackingManager.shared.getter();
  *(void *)(v0 + 224) = v1;
  if (!v1)
  {
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v9 = *(void *)(v0 + 120);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 88);
    uint64_t v11 = *(void *)(v0 + 96);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v11, v8);
    SpatialTrackingSession.UnavailableCapabilities.init(unsupportedConfiguration:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
    return v32();
  }
  dispatch thunk of SpatialTrackingManager.isRunningUserSession.setter();
  SpatialTrackingManager.arkitRunnable.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ARKitRunnable);
  type metadata accessor for ARSessionManager();
  if (!swift_dynamicCast())
  {
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v16 = *(void *)(v0 + 120);
    uint64_t v17 = *(void *)(v0 + 128);
    uint64_t v19 = *(void *)(v0 + 88);
    uint64_t v18 = *(void *)(v0 + 96);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v18, v15);
    SpatialTrackingSession.UnavailableCapabilities.init(unsupportedConfiguration:)();
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, v16);
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)(v0 + 80);
  *(void *)(v0 + 232) = v2;
  swift_beginAccess();
  *(unsigned char *)(v2 + 40) = 1;
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v3 = *(void *)(v0 + 152);
    uint64_t v4 = *(void *)(v0 + 96);
    id v5 = *(id *)(v0 + 112);
    ARWorldTrackingConfiguration.filterConfiguration(_:)(v4, v3);
  }
  else
  {
    self;
    if (swift_dynamicCastObjCClass())
    {
      uint64_t v20 = *(void *)(v0 + 152);
      uint64_t v21 = *(void *)(v0 + 96);
      id v22 = *(id *)(v0 + 112);
      ARBodyTrackingConfiguration.filterConfiguration(_:)(v21, v20);
    }
    else
    {
      self;
      if (!swift_dynamicCastObjCClass())
      {
        uint64_t v34 = *(void *)(v0 + 160);
        uint64_t v35 = *(void *)(v0 + 168);
        uint64_t v36 = *(void *)(v0 + 152);
        SpatialTrackingSession.Configuration.camera.getter();
        SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v36, 0, 1, v34);
        goto LABEL_17;
      }
      uint64_t v23 = *(void *)(v0 + 152);
      id v24 = *(id *)(v0 + 112);
      ARFaceTrackingConfiguration.filterConfiguration(_:)(v23);
    }
  }
  uint64_t v25 = *(void *)(v0 + 160);
  uint64_t v26 = *(void *)(v0 + 168);
  uint64_t v27 = *(void *)(v0 + 152);

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v25) == 1)
  {
    uint64_t v28 = *(void *)(v0 + 152);
    uint64_t v29 = *(void *)(v0 + 120);
    uint64_t v30 = *(void *)(v0 + 128);
    uint64_t v31 = *(void *)(v0 + 88);
    swift_release();
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v28, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration?);
    SpatialTrackingSession.UnavailableCapabilities.init()();
    SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
    SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter();
    SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
    SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v29);
    goto LABEL_13;
  }
LABEL_17:
  (*(void (**)(void, void, void))(*(void *)(v0 + 168) + 32))(*(void *)(v0 + 184), *(void *)(v0 + 152), *(void *)(v0 + 160));
  return MEMORY[0x1F4188298](SpatialTrackingSession.run(_:session:arConfiguration:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 240) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](SpatialTrackingSession.run(_:session:arConfiguration:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 104);
  swift_release();
  closure #1 in ARSessionManager.configureViewUsingSession(_:supportedCapabilities:)(v1, v2);
  return MEMORY[0x1F4188298](SpatialTrackingSession.run(_:session:arConfiguration:), 0, 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](SpatialTrackingSession.run(_:session:arConfiguration:), *(void *)(v0 + 208), *(void *)(v0 + 216));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  swift_release();
  SpatialTrackingSession.UnavailableCapabilities.init()();
  uint64_t v1 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  uint64_t v2 = SpatialTrackingSession.Configuration.anchorCapabilitySet.getter();
  if (*(void *)(v2 + 16) <= *(void *)(v1 + 16) >> 3) {
    specialized Set._subtract<A>(_:)(v2);
  }
  else {
    specialized _NativeSet.subtracting<A>(_:)(v2, v1);
  }
  swift_bridgeObjectRelease();
  SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter();
  uint64_t v3 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  uint64_t v4 = SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter();
  if (*(void *)(v4 + 16) <= *(void *)(v3 + 16) >> 3) {
    specialized Set._subtract<A>(_:)(v4);
  }
  else {
    specialized _NativeSet.subtracting<A>(_:)(v4, v3);
  }
  swift_bridgeObjectRelease();
  id v5 = v0[23];
  uint64_t v6 = v0[20];
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[16];
  SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter();
  uint64_t v9 = SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[15];
  uint64_t v12 = v0[11];
  if (v9)
  {
    (*(void (**)(void, void, void))(v10 + 32))(v0[11], v0[17], v0[15]);
    uint64_t v13 = 0;
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[17], v0[15]);
    uint64_t v13 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v12, v13, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  BOOL v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  uint64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  uint64_t v58 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      outlined consume of Set<UITouch>.Iterator._Variant();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v26, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?);
      return v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    double v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  double v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    double v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    uint64_t v45 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    return v45;
  }
  else
  {
    uint64_t v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    uint64_t v48 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    MEMORY[0x1E4E64DE0](v47, -1, -1);
    return v48;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(char *, uint64_t);
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (**v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  unsigned int (**v53)(uint64_t, uint64_t, uint64_t);
  void (**v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  BOOL v59 = (char *)&v49 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = a1 + 56;
  uint64_t v54 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v55 = v6;
  uint64_t v62 = v14;
  uint64_t v63 = 0;
  unint64_t v64 = v18;
  uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v51 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v57 = v8 + 16;
  uint64_t v58 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v56 = v8;
  uint64_t v52 = a2;
  uint64_t v50 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v55;
  v25(v55, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v54)(v26, v27, 1, v7);
    uint64_t v60 = a1;
    uint64_t v61 = v15;
    uint64_t v62 = v14;
    uint64_t v63 = v23;
    unint64_t v64 = v21;
    if ((*v53)(v26, 1, v7) == 1)
    {
      outlined consume of Set<UITouch>.Iterator._Variant();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v26, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
      return v52;
    }
    (*v51)(v59, v26, v7);
    uint64_t v31 = v52;
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    double v40 = *v19;
    uint64_t v8 = v56;
LABEL_35:
    v40(v59, v7);
    int64_t v20 = v63;
    unint64_t v18 = v64;
    a1 = v60;
    uint64_t v15 = v61;
    uint64_t v14 = v62;
    uint64_t v50 = v63;
    if (v64) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v50 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v55;
  }
  uint64_t v50 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v56 + 72);
  double v38 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
  while (1)
  {
    v38(v11, *(void *)(v35 + 48) + v37 * v34, v7);
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    double v40 = *v19;
    (*v19)(v11, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v58[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v56;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v59, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    memcpy((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v58, v44);
    uint64_t v45 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v49 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v60);
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    return v45;
  }
  else
  {
    uint64_t v47 = (void *)swift_slowAlloc();
    memcpy(v47, v58, v44);
    uint64_t v48 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v47, v43, v35, v34, &v60);
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    MEMORY[0x1E4E64DE0](v47, -1, -1);
    return v48;
  }
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(char *, uint64_t);
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (**v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  unsigned int (**v55)(uint64_t, uint64_t, uint64_t);
  void (**v56)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v61 = (char *)&v51 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = ~v13;
  uint64_t v15 = a1 + 56;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & *(void *)(a1 + 56);
  uint64_t v62 = a1;
  uint64_t v63 = a1 + 56;
  uint64_t v56 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v57 = v6;
  unint64_t v64 = v14;
  uint64_t v65 = 0;
  uint64_t v66 = v18;
  uint64_t v55 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  BOOL v59 = v8 + 16;
  uint64_t v60 = (char *)(a2 + 56);
  uint64_t v19 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v58 = v8;
  uint64_t v54 = a2;
  uint64_t v52 = 0;
  if (!v18) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v21 = (v18 - 1) & v18;
  unint64_t v22 = __clz(__rbit64(v18)) | (v20 << 6);
  int64_t v23 = v20;
LABEL_7:
  unint64_t v24 = *(void *)(a1 + 48) + *(void *)(v8 + 72) * v22;
  uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = (uint64_t)v57;
  v25(v57, v24, v7);
  uint64_t v27 = 0;
  while (1)
  {
    (*v56)(v26, v27, 1, v7);
    uint64_t v62 = a1;
    uint64_t v63 = v15;
    unint64_t v64 = v14;
    uint64_t v65 = v23;
    uint64_t v66 = v21;
    if ((*v55)(v26, 1, v7) == 1)
    {
      outlined consume of Set<UITouch>.Iterator._Variant();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v26, &demangling cache variable for type metadata for Participant?);
      return v54;
    }
    (*v53)(v61, v26, v7);
    uint64_t v31 = v54;
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);
    uint64_t v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
    unint64_t v34 = v32 & ~v33;
    if ((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34)) {
      break;
    }
    double v40 = *v19;
    uint64_t v8 = v58;
LABEL_35:
    v40(v61, v7);
    int64_t v20 = v65;
    unint64_t v18 = v66;
    a1 = v62;
    uint64_t v15 = v63;
    uint64_t v14 = v64;
    uint64_t v52 = v65;
    if (v66) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      __break(1u);
    }
    int64_t v28 = (unint64_t)(v14 + 64) >> 6;
    if (v23 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v23);
    if (v29) {
      goto LABEL_11;
    }
    v20 += 2;
    if (v23 + 1 >= v28) {
      goto LABEL_37;
    }
    unint64_t v29 = *(void *)(v15 + 8 * v20);
    if (v29) {
      goto LABEL_14;
    }
    if (v23 + 2 >= v28) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v15 + 8 * (v23 + 2));
    if (v29)
    {
      v23 += 2;
      goto LABEL_11;
    }
    int64_t v20 = v23 + 3;
    if (v23 + 3 < v28)
    {
      unint64_t v29 = *(void *)(v15 + 8 * v20);
      if (v29)
      {
LABEL_14:
        int64_t v23 = v20;
LABEL_11:
        uint64_t v21 = (v29 - 1) & v29;
        unint64_t v22 = __clz(__rbit64(v29)) + (v23 << 6);
        goto LABEL_7;
      }
      v23 += 4;
      if (v23 >= v28)
      {
LABEL_26:
        uint64_t v21 = 0;
        uint64_t v27 = 1;
        int64_t v23 = v20;
        goto LABEL_27;
      }
      unint64_t v29 = *(void *)(v15 + 8 * v23);
      if (v29) {
        goto LABEL_11;
      }
      int64_t v23 = v28 - 1;
      uint64_t v30 = v52 + 6;
      while (v28 != v30)
      {
        unint64_t v29 = *(void *)(v15 + 8 * v30++);
        if (v29)
        {
          int64_t v23 = v30 - 1;
          goto LABEL_11;
        }
      }
LABEL_37:
      uint64_t v21 = 0;
      uint64_t v27 = 1;
      goto LABEL_27;
    }
    uint64_t v21 = 0;
    uint64_t v27 = 1;
    v23 += 2;
LABEL_27:
    uint64_t v26 = (uint64_t)v57;
  }
  uint64_t v52 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v31;
  uint64_t v36 = ~v33;
  uint64_t v37 = *(void *)(v58 + 72);
  double v38 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
  while (1)
  {
    v38(v10, *(void *)(v35 + 48) + v37 * v34, v7);
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);
    char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
    double v40 = *v19;
    (*v19)(v10, v7);
    if (v39) {
      break;
    }
    unint64_t v34 = (v34 + 1) & v36;
    if (((*(void *)&v60[(v34 >> 3) & 0xFFFFFFFFFFFFFF8] >> v34) & 1) == 0)
    {
      uint64_t v8 = v58;
      goto LABEL_35;
    }
  }
  uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v40)(v61, v7);
  char v42 = *(unsigned char *)(v35 + 32);
  unint64_t v43 = (unint64_t)((1 << v42) + 63) >> 6;
  size_t v44 = 8 * v43;
  if ((v42 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    memcpy((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0), v60, v44);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v51 - ((v44 + 15) & 0x3FFFFFFFFFFFFFF0)), v43, v35, v34, &v62);
    CGImageRef v46 = v45;
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    return v46;
  }
  else
  {
    uint64_t v48 = (void *)swift_slowAlloc();
    memcpy(v48, v60, v44);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v48, v43, v35, v34, &v62);
    uint64_t v50 = v49;
    swift_release();
    outlined consume of Set<UITouch>.Iterator._Variant();
    MEMORY[0x1E4E64DE0](v48, -1, -1);
    return v50;
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v49 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v13);
  uint64_t v63 = (char *)&v48 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v51 = a1;
  uint64_t v52 = v21;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v61 = v21 + 16;
  uint64_t v62 = a3;
  uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v57 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v54 = a5;
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v60 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v53 = v11;
  while (2)
  {
    uint64_t v50 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v28 = a5[2];
        int64_t v29 = a5[3];
        unint64_t v30 = a5[4];
        uint64_t v59 = v28;
        if (v30)
        {
          uint64_t v58 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v29 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v11, *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31, v12);
          uint64_t v32 = 0;
          goto LABEL_8;
        }
        int64_t v41 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        int64_t v42 = (unint64_t)(v28 + 64) >> 6;
        if (v41 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * v41);
        if (v43) {
          goto LABEL_17;
        }
        if (v29 + 2 >= v42) {
          goto LABEL_34;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 2));
        if (v43)
        {
          int64_t v41 = v29 + 2;
LABEL_17:
          uint64_t v58 = (v43 - 1) & v43;
          unint64_t v31 = __clz(__rbit64(v43)) + (v41 << 6);
          int64_t v29 = v41;
          goto LABEL_7;
        }
        if (v29 + 3 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          v29 += 2;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 3));
        if (v43)
        {
          int64_t v41 = v29 + 3;
          goto LABEL_17;
        }
        int64_t v41 = v29 + 4;
        if (v29 + 4 < v42)
        {
          unint64_t v43 = *(void *)(v27 + 8 * v41);
          if (v43) {
            goto LABEL_17;
          }
          int64_t v41 = v42 - 1;
          int64_t v46 = v29 + 5;
          while (v42 != v46)
          {
            unint64_t v43 = *(void *)(v27 + 8 * v46++);
            if (v43)
            {
              int64_t v41 = v46 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          int64_t v29 = v41;
          goto LABEL_8;
        }
        uint64_t v58 = 0;
        uint64_t v32 = 1;
        v29 += 3;
LABEL_8:
        (*v57)(v11, v32, 1, v12);
        *a5 = v26;
        a5[1] = v27;
        a5[2] = v59;
        a5[3] = v29;
        a5[4] = v58;
        if ((*v56)(v11, 1, v12) == 1)
        {
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v11, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.SceneUnderstandingCapability?);
          uint64_t v47 = v62;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v51, v49, v50, v47);
        }
        (*v55)(v63, v11, v12);
        uint64_t v33 = v62;
        lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
        uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v35 = -1 << *(unsigned char *)(v33 + 32);
        unint64_t v36 = v34 & ~v35;
        if ((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36)) {
          break;
        }
        uint64_t v25 = *v24;
LABEL_4:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v63, v12);
      }
      uint64_t v59 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v37 = ~v35;
      uint64_t v38 = *(void *)(v22 + 72);
      char v39 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
      while (1)
      {
        v39(v15, *(void *)(v62 + 48) + v38 * v36, v12);
        lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v24;
        (*v24)(v15, v12);
        if (v40) {
          break;
        }
        unint64_t v36 = (v36 + 1) & v37;
        if (((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        {
          uint64_t v11 = v53;
          a5 = v54;
          uint64_t v22 = v52;
          goto LABEL_4;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v63, v12);
      uint64_t v44 = (v36 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v22 = v52;
      uint64_t v45 = *(unint64_t *)((char *)v51 + v44);
      *(unint64_t *)((char *)v51 + v44) = v45 & ~(1 << v36);
      uint64_t v11 = v53;
      a5 = v54;
    }
    while ((v45 & (1 << v36)) == 0);
    uint64_t v23 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v50 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (**v24)(char *, uint64_t);
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  char v40;
  int64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  char *v53;
  void *v54;
  void (**v55)(char *, char *, uint64_t);
  unsigned int (**v56)(char *, uint64_t, uint64_t);
  void (**v57)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;

  uint64_t v49 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v13);
  uint64_t v63 = (char *)&v48 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v51 = a1;
  uint64_t v52 = v21;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v61 = v21 + 16;
  uint64_t v62 = a3;
  uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v57 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v54 = a5;
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v60 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v53 = v11;
  while (2)
  {
    uint64_t v50 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v28 = a5[2];
        int64_t v29 = a5[3];
        unint64_t v30 = a5[4];
        uint64_t v59 = v28;
        if (v30)
        {
          uint64_t v58 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v29 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v11, *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31, v12);
          uint64_t v32 = 0;
          goto LABEL_8;
        }
        int64_t v41 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        int64_t v42 = (unint64_t)(v28 + 64) >> 6;
        if (v41 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * v41);
        if (v43) {
          goto LABEL_17;
        }
        if (v29 + 2 >= v42) {
          goto LABEL_34;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 2));
        if (v43)
        {
          int64_t v41 = v29 + 2;
LABEL_17:
          uint64_t v58 = (v43 - 1) & v43;
          unint64_t v31 = __clz(__rbit64(v43)) + (v41 << 6);
          int64_t v29 = v41;
          goto LABEL_7;
        }
        if (v29 + 3 >= v42)
        {
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          v29 += 2;
          goto LABEL_8;
        }
        unint64_t v43 = *(void *)(v27 + 8 * (v29 + 3));
        if (v43)
        {
          int64_t v41 = v29 + 3;
          goto LABEL_17;
        }
        int64_t v41 = v29 + 4;
        if (v29 + 4 < v42)
        {
          unint64_t v43 = *(void *)(v27 + 8 * v41);
          if (v43) {
            goto LABEL_17;
          }
          int64_t v41 = v42 - 1;
          int64_t v46 = v29 + 5;
          while (v42 != v46)
          {
            unint64_t v43 = *(void *)(v27 + 8 * v46++);
            if (v43)
            {
              int64_t v41 = v46 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          uint64_t v58 = 0;
          uint64_t v32 = 1;
          int64_t v29 = v41;
          goto LABEL_8;
        }
        uint64_t v58 = 0;
        uint64_t v32 = 1;
        v29 += 3;
LABEL_8:
        (*v57)(v11, v32, 1, v12);
        *a5 = v26;
        a5[1] = v27;
        a5[2] = v59;
        a5[3] = v29;
        a5[4] = v58;
        if ((*v56)(v11, 1, v12) == 1)
        {
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v11, &demangling cache variable for type metadata for SpatialTrackingSession.Configuration.AnchorCapability?);
          uint64_t v47 = v62;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v51, v49, v50, v47);
        }
        (*v55)(v63, v11, v12);
        uint64_t v33 = v62;
        lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
        uint64_t v34 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v35 = -1 << *(unsigned char *)(v33 + 32);
        unint64_t v36 = v34 & ~v35;
        if ((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36)) {
          break;
        }
        uint64_t v25 = *v24;
LABEL_4:
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v63, v12);
      }
      uint64_t v59 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v37 = ~v35;
      uint64_t v38 = *(void *)(v22 + 72);
      char v39 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
      while (1)
      {
        v39(v15, *(void *)(v62 + 48) + v38 * v36, v12);
        lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
        char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v24;
        (*v24)(v15, v12);
        if (v40) {
          break;
        }
        unint64_t v36 = (v36 + 1) & v37;
        if (((*(void *)(v60 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0)
        {
          uint64_t v11 = v53;
          a5 = v54;
          uint64_t v22 = v52;
          goto LABEL_4;
        }
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v63, v12);
      uint64_t v44 = (v36 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v22 = v52;
      uint64_t v45 = *(unint64_t *)((char *)v51 + v44);
      *(unint64_t *)((char *)v51 + v44) = v45 & ~(1 << v36);
      uint64_t v11 = v53;
      a5 = v54;
    }
    while ((v45 & (1 << v36)) == 0);
    uint64_t v23 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v50 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Participant();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v16 = MEMORY[0x1F4188790](v15);
  uint64_t v65 = (char *)&v52 - v17;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  uint64_t v20 = *(unint64_t *)((char *)a1 + v19);
  uint64_t v54 = a1;
  uint64_t v55 = v11;
  *(unint64_t *)((char *)a1 + v19) = v20 & ((-1 << a4) - 1);
  uint64_t v22 = v21;
  uint64_t v23 = v18 - 1;
  uint64_t v63 = v21 + 16;
  uint64_t v64 = a3;
  uint64_t v58 = (unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  uint64_t v56 = a5;
  uint64_t v57 = (void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v62 = a3 + 56;
  unint64_t v24 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v60 = v21;
  while (2)
  {
    uint64_t v53 = v23;
    do
    {
      while (1)
      {
        uint64_t v26 = *a5;
        uint64_t v27 = a5[1];
        uint64_t v29 = a5[2];
        int64_t v28 = a5[3];
        unint64_t v30 = a5[4];
        if (v30)
        {
          uint64_t v61 = (v30 - 1) & v30;
          unint64_t v31 = __clz(__rbit64(v30)) | (v28 << 6);
LABEL_7:
          unint64_t v32 = *(void *)(v26 + 48) + *(void *)(v22 + 72) * v31;
          uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v22 + 16);
          uint64_t v34 = v26;
          v33(v11, v32, v12, v16);
          uint64_t v35 = 0;
          goto LABEL_8;
        }
        int64_t v44 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_43;
        }
        int64_t v45 = (unint64_t)(v29 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v44);
        if (v46) {
          goto LABEL_17;
        }
        int64_t v49 = v28 + 2;
        if (v28 + 2 >= v45) {
          goto LABEL_35;
        }
        unint64_t v46 = *(void *)(v27 + 8 * v49);
        if (v46) {
          goto LABEL_23;
        }
        if (v28 + 3 >= v45) {
          goto LABEL_36;
        }
        unint64_t v46 = *(void *)(v27 + 8 * (v28 + 3));
        if (v46)
        {
          int64_t v44 = v28 + 3;
          goto LABEL_17;
        }
        int64_t v49 = v28 + 4;
        if (v28 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v27 + 8 * v49);
          if (v46)
          {
LABEL_23:
            int64_t v44 = v49;
LABEL_17:
            uint64_t v61 = (v46 - 1) & v46;
            unint64_t v31 = __clz(__rbit64(v46)) + (v44 << 6);
            int64_t v28 = v44;
            goto LABEL_7;
          }
          int64_t v44 = v28 + 5;
          if (v28 + 5 < v45)
          {
            unint64_t v46 = *(void *)(v27 + 8 * v44);
            if (v46) {
              goto LABEL_17;
            }
            int64_t v44 = v45 - 1;
            int64_t v50 = v28 + 6;
            while (v45 != v50)
            {
              unint64_t v46 = *(void *)(v27 + 8 * v50++);
              if (v46)
              {
                int64_t v44 = v50 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            uint64_t v61 = 0;
            uint64_t v35 = 1;
            int64_t v28 = v44;
            uint64_t v34 = v26;
            goto LABEL_8;
          }
LABEL_36:
          uint64_t v61 = 0;
          uint64_t v35 = 1;
          int64_t v28 = v49;
          uint64_t v34 = v26;
          goto LABEL_8;
        }
        uint64_t v61 = 0;
        uint64_t v35 = 1;
        v28 += 3;
        uint64_t v34 = v26;
LABEL_8:
        (*v59)(v11, v35, 1, v12);
        *a5 = v34;
        a5[1] = v27;
        a5[2] = v29;
        a5[3] = v28;
        a5[4] = v61;
        if ((*v58)(v11, 1, v12) == 1)
        {
          outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v11, &demangling cache variable for type metadata for Participant?);
          uint64_t v51 = v64;
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(v54, v52, v53, v51);
          return;
        }
        (*v57)(v65, v11, v12);
        uint64_t v36 = v64;
        lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);
        uint64_t v37 = dispatch thunk of Hashable._rawHashValue(seed:)();
        uint64_t v38 = -1 << *(unsigned char *)(v36 + 32);
        unint64_t v39 = v37 & ~v38;
        if ((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39)) {
          break;
        }
        uint64_t v25 = *v24;
        uint64_t v22 = v60;
LABEL_4:
        v25(v65, v12);
      }
      uint64_t v61 = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v40 = ~v38;
      uint64_t v41 = *(void *)(v60 + 72);
      int64_t v42 = *(void (**)(char *, unint64_t, uint64_t))(v60 + 16);
      while (1)
      {
        v42(v14, *(void *)(v64 + 48) + v41 * v39, v12);
        lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);
        char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v24;
        (*v24)(v14, v12);
        if (v43) {
          break;
        }
        unint64_t v39 = (v39 + 1) & v40;
        if (((*(void *)(v62 + ((v39 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        {
          uint64_t v11 = v55;
          a5 = v56;
          uint64_t v22 = v60;
          goto LABEL_4;
        }
      }
      v25(v65, v12);
      uint64_t v47 = (v39 >> 3) & 0x1FFFFFFFFFFFFFF8;
      uint64_t v11 = v55;
      uint64_t v48 = *(unint64_t *)((char *)v54 + v47);
      *(unint64_t *)((char *)v54 + v47) = v48 & ~(1 << v39);
      a5 = v56;
      uint64_t v22 = v60;
    }
    while ((v48 & (1 << v39)) == 0);
    uint64_t v23 = v53 - 1;
    if (__OFSUB__(v53, 1))
    {
LABEL_43:
      __break(1u);
      return;
    }
    if (v53 != 1) {
      continue;
    }
    break;
  }
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.SceneUnderstandingCapability and conformance SpatialTrackingSession.Configuration.SceneUnderstandingCapability, MEMORY[0x1E4F3AC60]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t (**v35)(unint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;

  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t (**v35)(unint64_t, char *, uint64_t);
  uint64_t v36;
  uint64_t v37;

  uint64_t v34 = a1;
  uint64_t v7 = type metadata accessor for Participant();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    lazy protocol witness table accessor for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability(&lazy protocol witness table cache variable for type Participant and conformance Participant, MEMORY[0x1E4F294B8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _SetStorage<UITouch>);
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _SetStorage<ARReferenceImage>);
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _SetStorage<ARReferenceObject>);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    uint64_t v10 = MEMORY[0x1E4FBC870];
LABEL_36:
    swift_release();
    return v10;
  }
  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = result;
  uint64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v10 + 40);
    id v20 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v24 = __clz(__rbit64((-1 << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v27 = v23 == v26;
        if (v23 == v26) {
          unint64_t v23 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v13 + 8 * v23);
      }
      while (v28 == -1);
      unint64_t v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(void *)(v13 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(void *)(*(void *)(v10 + 48) + 8 * v24) = v20;
    ++*(void *)(v10 + 16);
    if (__OFSUB__(v6--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v6) {
      goto LABEL_36;
    }
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= a2) {
    goto LABEL_36;
  }
  unint64_t v17 = v30[v18];
  if (v17)
  {
    uint64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v12];
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t destroy for ARView.ARSessionComponents(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 48)) {
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 64))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for ARView.ARSessionComponents(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = (_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  id v9 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *v8;
  }
  uint64_t v11 = *(void *)(a2 + 64);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t assignWithCopy for ARView.ARSessionComponents(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  id v6 = v5;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v8;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v9;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_8:
  uint64_t v10 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v10)
    {
      uint64_t v12 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v10;
      *(void *)(a1 + 72) = v12;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v10)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for ARView.ARSessionComponents(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v4;
      *(void *)(a1 + 56) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = v9;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ARView.ARSessionComponents(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ARView.ARSessionComponents(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.ARSessionComponents()
{
  return &type metadata for ARView.ARSessionComponents;
}

Swift::Void __swiftcall ARView.updateARSession(restartIfPaused:)(Swift::Bool restartIfPaused)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  MEMORY[0x1F4188790](v4 - 8);
  static __REOSLog.UpdateLoop.getter();
  static __RESignpostID.UpdateLoop.getter();
  type metadata accessor for __REOSSignpostScope();
  swift_allocObject();
  __REOSSignpostScope.init(osLog:signpostID:name:)();
  swift_release();
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (!v5)
  {
    __break(1u);
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v5 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) == 0)
  {
    uint64_t v6 = &v1[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
    swift_beginAccess();
    if ((v6[1] & 1) != 0 || *v6 == 1) {
      ARView.updateReferenceObjectsAndImages()();
    }
    if (v6[2] == 1)
    {
      v6[3] = 1;
      unint64_t v14 = (void *)*((void *)v6 + 1);
      id v7 = v14;
      if ((ARView.requiredSessionConfiguration(currentConfig:)(&v14) & 1) == 0)
      {
        if (!restartIfPaused
          || (id v12 = objc_msgSend(v1, sel_session),
              id v13 = objc_msgSend(v12, sel_state),
              v12,
              v13))
        {
          uint64_t v11 = v14;
          goto LABEL_13;
        }
      }
      id v8 = objc_msgSend(v2, sel_session, v14);
      uint64_t v9 = v14;
      if (v14)
      {
        uint64_t v10 = v8;
        objc_msgSend(v8, sel_runWithConfiguration_options_, v14, 0);

        uint64_t v11 = (void *)*((void *)v6 + 1);
        *((void *)v6 + 1) = v9;
LABEL_13:

        v6[3] = 0;
        return;
      }
LABEL_16:
      __break(1u);
    }
  }
}

uint64_t ARView.updateReferenceObjectsAndImages()()
{
  uint64_t v1 = type metadata accessor for AnchoringComponent();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for AnchoringComponent.Target();
  uint64_t v5 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v99 = (uint64_t *)((char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  long long v98 = (uint64_t *)((char *)&v90 - v8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v90 - v10;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v108 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v12);
  uint64_t v91 = v0;
  if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
    goto LABEL_65;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  ComponentsOfuint64_t Type = RESceneGetComponentsOfType();
  if (v15 < 0) {
    goto LABEL_64;
  }
  uint64_t v16 = v15;
  unint64_t v105 = v13;
  if (!v15)
  {
LABEL_53:
    uint64_t v76 = v91 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
    swift_beginAccess();
    unint64_t v77 = v105;
    if (*(unsigned char *)v76 == 1)
    {
      uint64_t v78 = swift_bridgeObjectRetain();
      char v79 = ARView.compareReferenceImageNamesAndWidthByGroup(referenceImageNamesAndWidthByGroup:)(v78);
      swift_bridgeObjectRelease();
      if ((v79 & 1) == 0)
      {
        *(void *)(v76 + 16) = v77;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v80 = *(void (**)(uint64_t))(v76 + 64);
        if (v80)
        {
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?(*(void *)(v76 + 64));
          uint64_t v81 = swift_bridgeObjectRetain();
          uint64_t v82 = ARView.loadReferenceImages(_:)(v81);
          swift_bridgeObjectRelease();
          v80(v82);
          swift_bridgeObjectRelease();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v80);
        }
      }
    }
    long long v83 = v108;
    if (*(unsigned char *)(v76 + 1) == 1)
    {
      uint64_t v84 = swift_bridgeObjectRetain();
      char v85 = ARView.compareReferenceObjectNamesByGroup(referenceObjectNamesByGroup:)(v84);
      swift_bridgeObjectRelease();
      if ((v85 & 1) == 0)
      {
        *(void *)(v76 + 24) = v83;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        id v86 = *(void (**)(uint64_t))(v76 + 48);
        if (v86)
        {
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed ARView.PostProcessContext) -> ())?((uint64_t)v86);
          uint64_t v87 = swift_bridgeObjectRetain();
          uint64_t v88 = ARView.loadReferenceObjects(_:)(v87);
          swift_bridgeObjectRelease();
          v86(v88);
          swift_bridgeObjectRelease();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed Set<ARReferenceImage>) -> ())?((uint64_t)v86);
        }
      }
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = ComponentsOfType;
  uint64_t v107 = type metadata accessor for Entity();
  uint64_t v18 = (unsigned char *)(v91 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents);
  swift_beginAccess();
  CGRect v102 = (void (**)(char *, char *, uint64_t))(v5 + 16);
  CGRect v103 = (void (**)(char *, uint64_t))(v2 + 8);
  CGRect v101 = (uint64_t (**)(uint64_t *, uint64_t))(v5 + 88);
  int v97 = *MEMORY[0x1E4F3A930];
  uint64_t v104 = (void (**)(uint64_t *, uint64_t))(v5 + 8);
  int v95 = (void (**)(uint64_t *, uint64_t))(v5 + 96);
  int v96 = *MEMORY[0x1E4F3A958];
  uint64_t v93 = v1;
  uint64_t v94 = v4;
  uint64_t v100 = v18;
  uint64_t v106 = v11;
  while (1)
  {
    REComponentGetEntity();
    uint64_t v19 = static Entity.fromCore(_:ignoringEntityInfo:)();
    if (swift_conformsToProtocol2()) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    if (!v20)
    {
      swift_release();
      goto LABEL_6;
    }
    swift_retain();
    uint64_t v21 = v106;
    HasAnchoring.anchoring.getter();
    AnchoringComponent.target.getter();
    (*v103)(v4, v1);
    if (*v18 == 1)
    {
      unint64_t v22 = v98;
      uint64_t v23 = v109;
      (*v102)((char *)v98, v21, v109);
      int v24 = (*v101)(v22, v23);
      if (v24 == v97)
      {
        (*v95)(v22, v23);
        uint64_t v26 = *v22;
        uint64_t v25 = v22[1];
        uint64_t v27 = v22[2];
        uint64_t v92 = v22[3];
        unint64_t v28 = v105;
        if (*(void *)(v105 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
          uint64_t v30 = (void *)MEMORY[0x1E4FBC860];
          if (v31)
          {
            uint64_t v30 = *(void **)(*(void *)(v28 + 56) + 8 * v29);
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v30 = (void *)MEMORY[0x1E4FBC860];
        }
        type metadata accessor for __RealityFileURLResolver();
        v32._countAndFlagsBits = static __RealityFileURLResolver.schemePrefix.getter();
        Swift::Bool v33 = String.hasPrefix(_:)(v32);
        swift_bridgeObjectRelease();
        double v34 = 0.0;
        if (v33)
        {
          swift_retain();
          double v35 = COERCE_DOUBLE(ARView.findPhysicalWidthForImageAnchoredEntity(root:)());
          char v37 = v36;
          swift_release();
          if (v37) {
            double v34 = 0.0;
          }
          else {
            double v34 = v35;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
        }
        uint64_t v38 = (void *)v105;
        unint64_t v40 = v30[2];
        unint64_t v39 = v30[3];
        if (v40 >= v39 >> 1) {
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v39 > 1), v40 + 1, 1, v30);
        }
        v30[2] = v40 + 1;
        uint64_t v41 = (double *)&v30[3 * v40];
        uint64_t v42 = v92;
        *((void *)v41 + 4) = v27;
        *((void *)v41 + 5) = v42;
        v41[6] = v34;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v110 = v38;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v30, v26, v25, isUniquelyReferenced_nonNull_native);
        unint64_t v105 = (unint64_t)v110;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v1 = v93;
        uint64_t v4 = v94;
        uint64_t v21 = v106;
      }
      else
      {
        (*v104)(v22, v23);
      }
      uint64_t v18 = v100;
    }
    if (v18[1] != 1)
    {
      (*v104)((uint64_t *)v21, v109);
      swift_release_n();
      goto LABEL_6;
    }
    int64_t v44 = v99;
    uint64_t v45 = v109;
    (*v102)((char *)v99, v21, v109);
    int v46 = (*v101)(v44, v45);
    if (v46 != v96)
    {
      uint64_t v55 = *v104;
      (*v104)((uint64_t *)v21, v45);
      swift_release_n();
      uint64_t v56 = v45;
      uint64_t v18 = v100;
      v55(v44, v56);
      goto LABEL_6;
    }
    (*v95)(v44, v45);
    uint64_t v47 = *v44;
    uint64_t v48 = v44[1];
    uint64_t v49 = v44[2];
    uint64_t v50 = v44[3];
    if (v108[2])
    {
      swift_bridgeObjectRetain();
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v48);
      uint64_t v52 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v53 = v105;
      if (v54)
      {
        uint64_t v52 = *(void **)(v108[7] + 8 * v51);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v52 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v53 = v105;
    }
    char v57 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v105 = v53;
    if ((v57 & 1) == 0) {
      uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
    }
    unint64_t v59 = v52[2];
    unint64_t v58 = v52[3];
    if (v59 >= v58 >> 1) {
      uint64_t v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v58 > 1), v59 + 1, 1, v52);
    }
    v52[2] = v59 + 1;
    uint64_t v60 = &v52[2 * v59];
    v60[4] = v49;
    v60[5] = v50;
    char v61 = swift_isUniquelyReferenced_nonNull_native();
    v110 = v108;
    unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v48);
    uint64_t v64 = v108[2];
    BOOL v65 = (v62 & 1) == 0;
    uint64_t v66 = v64 + v65;
    if (__OFADD__(v64, v65)) {
      break;
    }
    char v67 = v62;
    if (v108[3] >= v66)
    {
      if ((v61 & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v66, v61);
      unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v48);
      if ((v67 & 1) != (v69 & 1)) {
        goto LABEL_66;
      }
      unint64_t v63 = v68;
    }
    uint64_t v4 = v94;
    long long v70 = v110;
    uint64_t v108 = v110;
    if (v67)
    {
      uint64_t v71 = v110[7];
      swift_bridgeObjectRelease();
      *(void *)(v71 + 8 * v63) = v52;
    }
    else
    {
      v110[(v63 >> 6) + 8] |= 1 << v63;
      uint64_t v72 = (uint64_t *)(v70[6] + 16 * v63);
      *uint64_t v72 = v47;
      v72[1] = v48;
      *(void *)(v70[7] + 8 * v63) = v52;
      uint64_t v73 = v70[2];
      BOOL v74 = __OFADD__(v73, 1);
      uint64_t v75 = v73 + 1;
      if (v74) {
        goto LABEL_63;
      }
      v70[2] = v75;
      swift_bridgeObjectRetain();
    }
    swift_release_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*v104)((uint64_t *)v106, v109);
    uint64_t v1 = v93;
    uint64_t v18 = v100;
LABEL_6:
    v17 += 8;
    if (!--v16) {
      goto LABEL_53;
    }
  }
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t ARView.requiredSessionConfiguration(currentConfig:)(void **a1)
{
  uint64_t v124 = a1;
  uint64_t v137 = type metadata accessor for AnchoringComponent.Target.Alignment();
  uint64_t v2 = *(void *)(v137 - 8);
  MEMORY[0x1F4188790](v137);
  v136 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  v135 = (char *)&v123 - v5;
  uint64_t v146 = type metadata accessor for AnchoringComponent();
  uint64_t v6 = *(void *)(v146 - 8);
  MEMORY[0x1F4188790](v146);
  v145 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AnchoringComponent.Target();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  v144 = (uint64_t *)((char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  v134 = (uint64_t *)((char *)&v123 - v12);
  MEMORY[0x1F4188790](v13);
  v143 = (char *)&v123 - v14;
  MEMORY[0x1F4188790](v15);
  v150 = (char *)&v123 - v16;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v158 = specialized Dictionary.init(dictionaryLiteral:)(v17);
  uint64_t v125 = v1;
  if (!*(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
    goto LABEL_89;
  }
  swift_retain();
  Scene.coreScene.getter();
  swift_release();
  ComponentsOfuint64_t Type = RESceneGetComponentsOfType();
  if (v20 < 0) {
    goto LABEL_88;
  }
  uint64_t v21 = v20;
  unint64_t v139 = v18;
  if (v20)
  {
    uint64_t v22 = ComponentsOfType;
    uint64_t v152 = type metadata accessor for Entity();
    int v148 = 0;
    int v147 = 0;
    v142 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v23 = (uint64_t (**)(char *, uint64_t))(v9 + 88);
    int v141 = *MEMORY[0x1E4F3A938];
    int v24 = (void (**)(char *, uint64_t))(v9 + 8);
    int v133 = *MEMORY[0x1E4F3A930];
    v149 = (void (**)(char *, uint64_t))(v9 + 96);
    v132 = (void (**)(char *, char *, uint64_t))(v2 + 32);
    uint64_t v131 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v25 = (void (**)(char *, char *, uint64_t))(v9 + 16);
    int v140 = *MEMORY[0x1E4F3A958];
    uint64_t v26 = v150;
    v155 = v23;
    v156 = v25;
    v151 = v24;
    while (1)
    {
      REComponentGetEntity();
      uint64_t v27 = static Entity.fromCore(_:ignoringEntityInfo:)();
      if (swift_conformsToProtocol2()) {
        uint64_t v28 = v27;
      }
      else {
        uint64_t v28 = 0;
      }
      if (v28)
      {
        uint64_t v153 = v22;
        uint64_t v154 = v21;
        uint64_t v157 = v27;
        swift_retain();
        unint64_t v29 = v145;
        HasAnchoring.anchoring.getter();
        AnchoringComponent.target.getter();
        uint64_t v30 = v156;
        (*v142)(v29, v146);
        char v31 = *v30;
        Swift::String v32 = v143;
        (*v30)(v143, v26, v8);
        Swift::Bool v33 = *v155;
        int v34 = (*v155)(v32, v8);
        if (v34 == v141)
        {
          (*v149)(v32, v8);
          double v35 = &v32[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AnchoringComponent.Target.Alignment, classification: AnchoringComponent.Target.Classification, minimumBounds: SIMD2<Float>))
                            + 48)];
          char v36 = v135;
          uint64_t v37 = v137;
          (*v132)(v135, v32, v137);
          uint64_t v38 = type metadata accessor for AnchoringComponent.Target.Classification();
          (*(void (**)(char *, uint64_t))(*(void *)(v38 - 8) + 8))(v35, v38);
          unint64_t v39 = v136;
          static AnchoringComponent.Target.Alignment.horizontal.getter();
          lazy protocol witness table accessor for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment();
          int v40 = dispatch thunk of SetAlgebra.isSuperset(of:)();
          uint64_t v41 = *v131;
          (*v131)(v39, v37);
          v147 |= v40;
          static AnchoringComponent.Target.Alignment.vertical.getter();
          LODWORD(v35) = dispatch thunk of SetAlgebra.isSuperset(of:)();
          uint64_t v42 = v39;
          char v43 = v144;
          v41(v42, v37);
          v41(v36, v37);
          uint64_t v26 = v150;
          v148 |= v35;
          uint64_t v21 = v154;
        }
        else
        {
          int64_t v44 = *v151;
          (*v151)(v32, v8);
          uint64_t v45 = v134;
          v31((char *)v134, v26, v8);
          int v46 = v33((char *)v45, v8);
          if (v46 == v133)
          {
            (*v149)((char *)v45, v8);
            uint64_t v48 = *v45;
            uint64_t v47 = v45[1];
            uint64_t v130 = v45[2];
            uint64_t v127 = v45[3];
            uint64_t v49 = *(void *)(v139 + 16);
            uint64_t v129 = v31;
            uint64_t v128 = v33;
            uint64_t v138 = v48;
            if (v49)
            {
              swift_bridgeObjectRetain();
              uint64_t v126 = v47;
              unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v47);
              unint64_t v51 = (void *)MEMORY[0x1E4FBC860];
              uint64_t v21 = v154;
              char v43 = v144;
              if (v52)
              {
                unint64_t v51 = *(void **)(*(void *)(v139 + 56) + 8 * v50);
                swift_bridgeObjectRetain();
              }
              uint64_t v53 = v126;
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v51 = (void *)MEMORY[0x1E4FBC860];
              uint64_t v21 = v154;
              char v43 = v144;
              uint64_t v53 = v47;
            }
            type metadata accessor for __RealityFileURLResolver();
            v54._countAndFlagsBits = static __RealityFileURLResolver.schemePrefix.getter();
            Swift::Bool v55 = String.hasPrefix(_:)(v54);
            swift_bridgeObjectRelease();
            double v56 = 0.0;
            if (v55)
            {
              swift_retain();
              double v57 = COERCE_DOUBLE(ARView.findPhysicalWidthForImageAnchoredEntity(root:)());
              char v59 = v58;
              swift_release();
              if (v59) {
                double v56 = 0.0;
              }
              else {
                double v56 = v57;
              }
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
            }
            uint64_t v60 = (void *)v139;
            uint64_t v61 = v130;
            unint64_t v63 = v51[2];
            unint64_t v62 = v51[3];
            if (v63 >= v62 >> 1) {
              unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v62 > 1), v63 + 1, 1, v51);
            }
            v51[2] = v63 + 1;
            uint64_t v64 = (double *)&v51[3 * v63];
            uint64_t v65 = v127;
            *((void *)v64 + 4) = v61;
            *((void *)v64 + 5) = v65;
            v64[6] = v56;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v161 = v60;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v51, v138, v53, isUniquelyReferenced_nonNull_native);
            unint64_t v139 = (unint64_t)v161;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v26 = v150;
            char v31 = v129;
            Swift::Bool v33 = v128;
          }
          else
          {
            v44((char *)v45, v8);
            uint64_t v21 = v154;
            char v43 = v144;
          }
        }
        v31((char *)v43, v26, v8);
        int v67 = v33((char *)v43, v8);
        if (v67 == v140)
        {
          (*v149)((char *)v43, v8);
          uint64_t v68 = *v43;
          uint64_t v69 = v43[1];
          uint64_t v70 = v43[2];
          uint64_t v71 = v43[3];
          uint64_t v22 = v153;
          if (*(void *)(v158 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
            uint64_t v73 = (void *)MEMORY[0x1E4FBC860];
            if (v74)
            {
              uint64_t v73 = *(void **)(*(void *)(v158 + 56) + 8 * v72);
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v73 = (void *)MEMORY[0x1E4FBC860];
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73[2] + 1, 1, v73);
          }
          unint64_t v77 = v73[2];
          unint64_t v76 = v73[3];
          if (v77 >= v76 >> 1) {
            uint64_t v73 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v76 > 1), v77 + 1, 1, v73);
          }
          v73[2] = v77 + 1;
          uint64_t v78 = &v73[2 * v77];
          v78[4] = v70;
          v78[5] = v71;
          unint64_t v79 = v158;
          char v80 = swift_isUniquelyReferenced_nonNull_native();
          v161 = (void *)v79;
          unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
          uint64_t v83 = *(void *)(v79 + 16);
          BOOL v84 = (v81 & 1) == 0;
          uint64_t v85 = v83 + v84;
          if (__OFADD__(v83, v84))
          {
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
            goto LABEL_92;
          }
          char v86 = v81;
          if (*(void *)(v79 + 24) >= v85)
          {
            if ((v80 & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v85, v80);
            unint64_t v87 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
            if ((v86 & 1) != (v88 & 1)) {
              goto LABEL_96;
            }
            unint64_t v82 = v87;
          }
          uint64_t v89 = v161;
          unint64_t v158 = (unint64_t)v161;
          if (v86)
          {
            uint64_t v90 = v161[7];
            swift_bridgeObjectRelease();
            *(void *)(v90 + 8 * v82) = v73;
          }
          else
          {
            v161[(v82 >> 6) + 8] |= 1 << v82;
            uint64_t v91 = (uint64_t *)(v89[6] + 16 * v82);
            *uint64_t v91 = v68;
            v91[1] = v69;
            *(void *)(v89[7] + 8 * v82) = v73;
            uint64_t v92 = v89[2];
            BOOL v93 = __OFADD__(v92, 1);
            uint64_t v94 = v92 + 1;
            if (v93) {
              goto LABEL_87;
            }
            v89[2] = v94;
            swift_bridgeObjectRetain();
          }
          swift_release_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v26 = v150;
          (*v151)(v150, v8);
        }
        else
        {
          uint64_t v75 = *v151;
          (*v151)(v26, v8);
          swift_release_n();
          v75((char *)v43, v8);
          uint64_t v22 = v153;
        }
      }
      else
      {
        swift_release();
      }
      v22 += 8;
      if (!--v21) {
        goto LABEL_52;
      }
    }
  }
  int v148 = 0;
  int v147 = 0;
LABEL_52:
  int v95 = v124;
  int v96 = *v124;
  if (*v124 && (self, swift_dynamicCastObjCClass()))
  {
    uint64_t v97 = 0;
    id v98 = v96;
  }
  else
  {
    id v98 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F14F28]), sel_init);

    char *v95 = v98;
    objc_msgSend(v98, sel_setEnvironmentTexturing_, 2);
    uint64_t v97 = 1;
  }
  uint64_t v99 = v125;
  uint64_t v100 = v139;
  self;
  CGRect v101 = (void *)swift_dynamicCastObjCClass();
  if (v101) {
    id v102 = v98;
  }
  uint64_t v103 = swift_bridgeObjectRetain();
  char v104 = ARView.compareReferenceImageNamesAndWidthByGroup(referenceImageNamesAndWidthByGroup:)(v103);
  swift_bridgeObjectRelease();
  if ((v104 & 1) == 0)
  {
    if (!v101) {
      goto LABEL_91;
    }
    swift_bridgeObjectRetain();
    id v105 = v101;
    ARView.loadReferenceImages(_:)(v100);
    swift_bridgeObjectRelease();
    type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
    lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, &lazy cache variable for type metadata for ARReferenceImage);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v105, sel_setDetectionImages_, isa);

    id v107 = v105;
    id v108 = objc_msgSend(v107, sel_detectionImages);
    if (!v108)
    {
LABEL_92:
      __break(1u);
      goto LABEL_93;
    }
    uint64_t v109 = v108;
    uint64_t v110 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v110 & 0xC000000000000001) != 0) {
      uint64_t v111 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v111 = *(void *)(v110 + 16);
    }
    swift_bridgeObjectRelease();
    objc_msgSend(v107, sel_setMaximumNumberOfTrackedImages_, v111);

    uint64_t v112 = v99 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
    uint64_t v97 = 1;
    swift_beginAccess();
    *(void *)(v112 + 16) = v100;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v113 = swift_bridgeObjectRetain();
  char v114 = ARView.compareReferenceObjectNamesByGroup(referenceObjectNamesByGroup:)(v113);
  swift_bridgeObjectRelease();
  if (v114)
  {
    if ((v147 & 1) == 0) {
      goto LABEL_76;
    }
    if (v101)
    {
      id v115 = v101;
      goto LABEL_72;
    }
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  if (!v101)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  id v115 = v101;
  unint64_t v116 = v158;
  uint64_t v117 = swift_bridgeObjectRetain();
  ARView.loadReferenceObjects(_:)(v117);
  swift_bridgeObjectRelease();
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
  lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceObject and conformance NSObject, &lazy cache variable for type metadata for ARReferenceObject);
  Class v118 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v115, sel_setDetectionObjects_, v118);

  uint64_t v119 = v99 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  *(void *)(v119 + 24) = v116;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((v147 & 1) == 0) {
    goto LABEL_74;
  }
  uint64_t v97 = 1;
LABEL_72:
  if ((objc_msgSend(v115, sel_planeDetection) & 1) == 0)
  {
    id v115 = v101;
    objc_msgSend(v115, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v115, sel_planeDetection) | 1);

LABEL_74:
    uint64_t v97 = 1;
    if ((v148 & 1) == 0) {
      goto LABEL_81;
    }
LABEL_79:
    if ((objc_msgSend(v115, sel_planeDetection) & 2) == 0)
    {
      id v120 = v101;
      objc_msgSend(v120, sel_setPlaneDetection_, (unint64_t)objc_msgSend(v120, sel_planeDetection) | 2);

      uint64_t v97 = 1;
    }
    goto LABEL_81;
  }
LABEL_76:
  if (v148)
  {
    if (v101)
    {
      id v115 = v101;
      goto LABEL_79;
    }
LABEL_95:
    __break(1u);
LABEL_96:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_81:
  swift_beginAccess();
  ARView.Environment.sceneUnderstanding.getter((uint64_t)v159);
  int v121 = v160;
  ARView.updateEnvironment()();
  if (v121)
  {
    if (!v101) {
      goto LABEL_90;
    }
    if (objc_msgSend(v101, sel_sceneReconstruction) != (id)1)
    {
      uint64_t v97 = 1;
      objc_msgSend(v101, sel_setSceneReconstruction_, 1);
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v97;
}

uint64_t ARView.compareReferenceImageNamesAndWidthByGroup(referenceImageNamesAndWidthByGroup:)(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  if (v3 != *(void *)(*(void *)(v4 + 16) + 16)) {
    return 0;
  }
  uint64_t v49 = v2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  uint64_t v52 = v2;
  int64_t v47 = v8;
  uint64_t v48 = v4;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      uint64_t v11 = (v7 - 1) & v7;
      unint64_t v12 = v10 | (v9 << 6);
      goto LABEL_21;
    }
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_61;
    }
    if (v13 >= v8) {
      goto LABEL_58;
    }
    unint64_t v14 = *(void *)(v49 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_58;
      }
      unint64_t v14 = *(void *)(v49 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_58;
        }
        unint64_t v14 = *(void *)(v49 + 8 * v9);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v11 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v9 << 6);
LABEL_21:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v12);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + 8 * v12);
    swift_beginAccess();
    uint64_t v20 = *(void *)(*(void *)(v4 + 16) + 16);
    swift_bridgeObjectRetain();
    if (!v20)
    {
      swift_bridgeObjectRetain();
LABEL_54:
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    if ((v21 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v22 = *(void *)(v4 + 16);
    if (!*(void *)(v22 + 16))
    {
      swift_endAccess();
LABEL_56:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    if ((v24 & 1) == 0)
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_50;
    }
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void *)(v25 + 16);
    swift_bridgeObjectRelease();
    if (v26 != *(void *)(v19 + 16)) {
      goto LABEL_56;
    }
    swift_beginAccess();
    uint64_t v27 = *(void *)(v4 + 16);
    if (!*(void *)(v27 + 16)) {
      goto LABEL_63;
    }
    unint64_t v50 = v11;
    int64_t v51 = v9;
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    if ((v29 & 1) == 0) {
      goto LABEL_64;
    }
    uint64_t v30 = *(void *)(*(void *)(v27 + 56) + 8 * v28);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    unint64_t v31 = *(void *)(v30 + 16);
    uint64_t v32 = *(void *)(v19 + 16);
    uint64_t v53 = v30 + 32;
    swift_bridgeObjectRetain();
    uint64_t v54 = v30;
    swift_bridgeObjectRetain();
    unint64_t v33 = 0;
    uint64_t v34 = v19;
    unint64_t v35 = 0;
    uint64_t v36 = v34;
    uint64_t v37 = (double *)(v34 + 48);
    if (!v31)
    {
LABEL_29:
      uint64_t v38 = 0;
      double v39 = 0.0;
      uint64_t v40 = 0;
      double v41 = 0.0;
      unint64_t v35 = v31;
      if (v32 == v33) {
        goto LABEL_46;
      }
      goto LABEL_34;
    }
    while (1)
    {
      if (v35 >= *(void *)(v54 + 16)) {
        goto LABEL_60;
      }
      uint64_t v42 = (double *)(v53 + 24 * v35);
      double v41 = v42[2];
      double v39 = *v42;
      uint64_t v38 = *((void *)v42 + 1);
      swift_bridgeObjectRetain();
      if (v32 == v33) {
        break;
      }
      ++v35;
LABEL_34:
      if (v33 >= *(void *)(v36 + 16))
      {
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        swift_endAccess();
        __break(1u);
LABEL_64:
        swift_endAccess();
        uint64_t result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      double v43 = *v37;
      uint64_t v44 = *((void *)v37 - 2);
      uint64_t v40 = *((void *)v37 - 1);
      swift_bridgeObjectRetain();
      if (!v38) {
        goto LABEL_46;
      }
      if (!v40) {
        goto LABEL_48;
      }
      if (*(void *)&v39 == v44 && v38 == v40)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v45 & 1) == 0) {
          goto LABEL_49;
        }
      }
      if (v41 != v43)
      {
LABEL_49:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        goto LABEL_50;
      }
      v37 += 3;
      ++v33;
      if (v35 == v31) {
        goto LABEL_29;
      }
    }
    if (v38)
    {
LABEL_48:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
    uint64_t v40 = 0;
LABEL_46:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    int64_t v9 = v51;
    uint64_t v2 = v52;
    int64_t v8 = v47;
    uint64_t v4 = v48;
    unint64_t v7 = v50;
    if (v40)
    {
      swift_bridgeObjectRelease();
LABEL_50:
      swift_release();
      return 0;
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v8) {
    goto LABEL_58;
  }
  unint64_t v14 = *(void *)(v49 + 8 * v15);
  if (v14)
  {
    int64_t v9 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_62;
    }
    if (v9 >= v8) {
      break;
    }
    unint64_t v14 = *(void *)(v49 + 8 * v9);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_58:
  swift_release();
  return 1;
}

uint64_t ARView.compareReferenceObjectNamesByGroup(referenceObjectNamesByGroup:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  if (v3 != *(void *)(*(void *)(v4 + 24) + 16)) {
    return 0;
  }
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v32 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_21;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v12 >= v32) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v32) {
        goto LABEL_39;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v32) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_21:
    int64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    swift_beginAccess();
    uint64_t v19 = *(void *)(*(void *)(v4 + 24) + 16);
    swift_bridgeObjectRetain();
    if (!v19)
    {
      swift_bridgeObjectRetain();
LABEL_32:
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v21 = *(void *)(v4 + 24);
    if (!*(void *)(v21 + 16))
    {
      swift_endAccess();
LABEL_34:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_36:
      swift_release();
      return 0;
    }
    swift_bridgeObjectRetain();
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    if ((v23 & 1) == 0)
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      goto LABEL_36;
    }
    uint64_t v24 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)(v24 + 16);
    swift_bridgeObjectRelease();
    if (v25 != *(void *)(v18 + 16)) {
      goto LABEL_34;
    }
    swift_beginAccess();
    uint64_t v26 = *(void *)(v4 + 24);
    if (!*(void *)(v26 + 16)) {
      goto LABEL_42;
    }
    swift_bridgeObjectRetain();
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    if ((v28 & 1) == 0) {
      goto LABEL_43;
    }
    uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    char v30 = specialized Sequence<>.elementsEqual<A>(_:)(v18, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      goto LABEL_36;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v32)
  {
LABEL_39:
    swift_release();
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v9 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v9 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v9 >= v32) {
      goto LABEL_39;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_41:
  __break(1u);
LABEL_42:
  swift_endAccess();
  __break(1u);
LABEL_43:
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2 + 32;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  unint64_t v8 = (uint64_t *)(a1 + 40);
  while (v7 == v3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v7 = v3;
    if (!v4) {
      goto LABEL_19;
    }
LABEL_10:
    uint64_t v14 = *(v8 - 1);
    uint64_t v12 = *v8;
    swift_bridgeObjectRetain();
    if (!v10) {
      goto LABEL_19;
    }
    if (!v12) {
      goto LABEL_16;
    }
    if (v11 == v14 && v10 == v12)
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    --v4;
    v8 += 2;
  }
  if (v7 >= v3)
  {
    __break(1u);
    return result;
  }
  unint64_t v13 = (uint64_t *)(v5 + 16 * v7);
  uint64_t v11 = *v13;
  uint64_t v10 = v13[1];
  swift_bridgeObjectRetain();
  if (v4)
  {
    ++v7;
    goto LABEL_10;
  }
  if (v10)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v12 = 0;
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  return 1;
}

uint64_t ARView.findPhysicalWidthForImageAnchoredEntity(root:)()
{
  uint64_t v0 = type metadata accessor for Entity.ChildCollection();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
  uint64_t v37 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v33 = (char *)&v33 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for __REAnchoringType();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v33 - v16;
  Entity.__anchoringType.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
    if ((*(unsigned int (**)(char *, uint64_t))(v12 + 88))(v14, v11) == *MEMORY[0x1E4F3A8F8])
    {
      (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>));
      uint64_t v20 = v35;
      uint64_t v19 = v36;
      uint64_t v21 = v33;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v33, &v14[*(int *)(v18 + 48)], v36);
      uint64_t v22 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t))(*(void *)(v22 - 8) + 8))(v14, v22);
      id v23 = objc_msgSend(self, sel_meters);
      uint64_t v24 = v34;
      Measurement<>.converted(to:)();

      Measurement.value.getter();
      uint64_t v26 = v25;
      unint64_t v27 = *(void (**)(char *, uint64_t))(v20 + 8);
      v27(v24, v19);
      v27(v21, v19);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      return v26;
    }
    uint64_t v29 = *(void (**)(char *, uint64_t))(v12 + 8);
    v29(v17, v11);
    v29(v14, v11);
  }
  type metadata accessor for Entity();
  HasHierarchy.children.getter();
  Entity.ChildCollection.makeIterator()();
  while (1)
  {
    Entity.ChildCollection.IndexingIterator.next()();
    if (!v38) {
      break;
    }
    uint64_t v28 = ARView.findPhysicalWidthForImageAnchoredEntity(root:)(v38);
    char v31 = v30;
    swift_release();
    if ((v31 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v3, v1);
      return v28;
    }
  }
  (*(void (**)(char *, uint64_t))(v37 + 8))(v3, v1);
  return 0;
}

uint64_t ARView.loadReferenceImages(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for __AnyARKitObject();
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v56 = a1 + 64;
  uint64_t v70 = MEMORY[0x1E4FBC870];
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  uint64_t v59 = a1;
  uint64_t v60 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  int64_t v57 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v64 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v65 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  unint64_t v63 = (void (**)(char *, uint64_t))(v7 + 8);
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v58 = 0;
  uint64_t v54 = v9;
  uint64_t v53 = v6;
  while (1)
  {
    if (v13)
    {
      uint64_t v61 = (v13 - 1) & v13;
      int64_t v62 = v14;
      unint64_t v15 = __clz(__rbit64(v13)) | (v14 << 6);
      goto LABEL_19;
    }
    BOOL v16 = __OFADD__(v14, 1);
    int64_t v17 = v14 + 1;
    if (v16)
    {
      __break(1u);
      goto LABEL_49;
    }
    if (v17 >= v57) {
      goto LABEL_47;
    }
    unint64_t v18 = *(void *)(v56 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    uint64_t v61 = (v18 - 1) & v18;
    int64_t v62 = v17;
    unint64_t v15 = __clz(__rbit64(v18)) + (v17 << 6);
LABEL_19:
    uint64_t v20 = (uint64_t *)(*(void *)(v59 + 48) + 16 * v15);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v59 + 56) + 8 * v15);
    type metadata accessor for __ARReferenceProvider();
    type metadata accessor for __ServiceLocator();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.assetService.getter();
    swift_release();
    uint64_t v24 = static __ARReferenceProvider.instance(for:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
    uint64_t v66 = v24;
    uint64_t v67 = v22;
    if (dispatch thunk of __ARReferenceProvider.supportsGroup(named:)())
    {
      uint64_t v25 = *(void *)(v23 + 16);
      if (v25)
      {
        uint64_t v26 = v23 + 48;
        do
        {
          swift_bridgeObjectRetain();
          dispatch thunk of __ARReferenceProvider.__fetchReferenceImage(group:name:physicalWidth:)();
          swift_bridgeObjectRelease();
          if ((*v65)(v5, 1, v6) == 1)
          {
            outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for __AnyARKitObject?);
          }
          else
          {
            (*v64)(v9, v5, v6);
            type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
            __AnyARKitObject.as<A>(type:)();
            specialized Set._Variant.insert(_:)(v69, v68);

            (*v63)(v9, v6);
          }
          v26 += 24;
          --v25;
        }
        while (v25);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t v27 = v60;
    swift_beginAccess();
    if (*(void *)(*(void *)(v27 + 32) + 16))
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v67, v21);
      if (v28)
      {
        swift_endAccess();
        swift_bridgeObjectRelease();
        int64_t v29 = *(void *)(v23 + 16);
        if (v29) {
          goto LABEL_35;
        }
        goto LABEL_29;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v31 = v23;
    swift_endAccess();
    int64_t v32 = self;
    unint64_t v33 = (void *)MEMORY[0x1E4E62C20](v67, v21);
    id v34 = objc_msgSend(v32, sel_referenceImagesInGroupNamed_bundle_, v33, 0);

    if (v34)
    {
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceImage);
      lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, &lazy cache variable for type metadata for ARReferenceImage);
      uint64_t v35 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v35 = MEMORY[0x1E4FBC870];
    }
    uint64_t v36 = v60;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = *(void **)(v36 + 32);
    *(void *)(v36 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, v67, v21, isUniquelyReferenced_nonNull_native);
    *(void *)(v36 + 32) = v68;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v23 = v31;
    int64_t v29 = *(void *)(v31 + 16);
    if (v29)
    {
LABEL_35:
      v69[0] = (id)MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29, 0);
      uint64_t v38 = v23;
      char v30 = v69[0];
      uint64_t v55 = v38;
      double v39 = (uint64_t *)(v38 + 40);
      do
      {
        uint64_t v41 = *(v39 - 1);
        uint64_t v40 = *v39;
        v69[0] = v30;
        unint64_t v43 = v30[2];
        unint64_t v42 = v30[3];
        swift_bridgeObjectRetain();
        if (v43 >= v42 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
          char v30 = v69[0];
        }
        v39 += 3;
        v30[2] = v43 + 1;
        uint64_t v44 = &v30[2 * v43];
        v44[4] = v41;
        v44[5] = v40;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
      uint64_t v6 = v53;
      goto LABEL_40;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    char v30 = (void *)MEMORY[0x1E4FBC860];
LABEL_40:
    uint64_t v45 = v60;
    swift_beginAccess();
    uint64_t v46 = *(void *)(v45 + 32);
    uint64_t v9 = v54;
    if (!*(void *)(v46 + 16)) {
      goto LABEL_51;
    }
    swift_bridgeObjectRetain();
    unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v67, v21);
    if ((v48 & 1) == 0) {
      goto LABEL_50;
    }
    uint64_t v49 = *(void *)(*(void *)(v46 + 56) + 8 * v47);
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    uint64_t v50 = v58;
    Swift::Int v51 = specialized Set._Variant.filter(_:)(v49, v30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeSet.extractSubset(using:count:), &lazy cache variable for type metadata for ARReferenceImage, 0x1E4F14F08, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
    uint64_t v58 = v50;
    swift_bridgeObjectRelease();
    specialized Set.formUnion<A>(_:)(v51, &lazy cache variable for type metadata for ARReferenceImage, 0x1E4F14F08, &lazy protocol witness table cache variable for type ARReferenceImage and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
    swift_release();
LABEL_5:
    unint64_t v13 = v61;
    int64_t v14 = v62;
  }
  int64_t v19 = v17 + 1;
  if (v17 + 1 >= v57) {
    goto LABEL_47;
  }
  unint64_t v18 = *(void *)(v56 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v57) {
    goto LABEL_47;
  }
  unint64_t v18 = *(void *)(v56 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v19 = v17 + 3;
  if (v17 + 3 >= v57)
  {
LABEL_47:
    swift_release();
    return v70;
  }
  unint64_t v18 = *(void *)(v56 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v57) {
      goto LABEL_47;
    }
    unint64_t v18 = *(void *)(v56 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_49:
  __break(1u);
LABEL_50:
  swift_bridgeObjectRelease();
LABEL_51:
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t ARView.loadReferenceObjects(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __AnyARKitObject?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for __AnyARKitObject();
  MEMORY[0x1F4188790](v54 - 8);
  uint64_t v53 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v44 = a1 + 64;
  uint64_t v57 = MEMORY[0x1E4FBC870];
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  uint64_t v12 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  int64_t v45 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  Swift::Int v51 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = v12;
  uint64_t v43 = a1;
  if (v11) {
    goto LABEL_6;
  }
LABEL_7:
  BOOL v16 = __OFADD__(v14, 1);
  int64_t v17 = v14 + 1;
  if (!v16)
  {
    if (v17 >= v45) {
      goto LABEL_41;
    }
    unint64_t v18 = *(void *)(v44 + 8 * v17);
    if (v18)
    {
LABEL_17:
      uint64_t v49 = (v18 - 1) & v18;
      int64_t v50 = v17;
      for (unint64_t i = __clz(__rbit64(v18)) + (v17 << 6); ; unint64_t i = __clz(__rbit64(v11)) | (v14 << 6))
      {
        uint64_t v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
        uint64_t v22 = *v20;
        uint64_t v21 = v20[1];
        uint64_t v23 = *(void **)(*(void *)(a1 + 56) + 8 * i);
        type metadata accessor for __ARReferenceProvider();
        type metadata accessor for __ServiceLocator();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        static __ServiceLocator.shared.getter();
        dispatch thunk of __ServiceLocator.assetService.getter();
        swift_release();
        static __ARReferenceProvider.instance(for:)();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
        char v24 = dispatch thunk of __ARReferenceProvider.supportsGroup(named:)();
        char v48 = v23;
        if (v24)
        {
          uint64_t v25 = v23[2];
          if (v25)
          {
            uint64_t v26 = v23 + 5;
            do
            {
              swift_bridgeObjectRetain();
              dispatch thunk of __ARReferenceProvider.__fetchReferenceObject(group:name:)();
              swift_bridgeObjectRelease();
              uint64_t v27 = v54;
              if ((*v13)(v5, 1, v54) == 1)
              {
                outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for __AnyARKitObject?);
              }
              else
              {
                char v28 = v53;
                (*v52)(v53, v5, v27);
                type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
                __AnyARKitObject.as<A>(type:)();
                specialized Set._Variant.insert(_:)(v56, v55);

                (*v51)(v28, v27);
              }
              v26 += 2;
              --v25;
            }
            while (v25);
          }
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v43;
          uint64_t v12 = v47;
          unint64_t v11 = v49;
          int64_t v14 = v50;
          if (!v49) {
            goto LABEL_7;
          }
          goto LABEL_6;
        }
        swift_beginAccess();
        if (!*(void *)(*(void *)(v12 + 40) + 16)) {
          goto LABEL_29;
        }
        swift_bridgeObjectRetain();
        specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
        if ((v29 & 1) == 0) {
          break;
        }
        swift_endAccess();
        swift_bridgeObjectRelease();
LABEL_33:
        swift_beginAccess();
        uint64_t v35 = *(void *)(v12 + 40);
        if (!*(void *)(v35 + 16)) {
          goto LABEL_45;
        }
        swift_bridgeObjectRetain();
        unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
        if ((v37 & 1) == 0) {
          goto LABEL_44;
        }
        uint64_t v38 = *(void *)(*(void *)(v35 + 56) + 8 * v36);
        swift_endAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease_n();
        uint64_t v39 = v46;
        Swift::Int v40 = specialized Set._Variant.filter(_:)(v38, v48, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeSet.extractSubset(using:count:), &lazy cache variable for type metadata for ARReferenceObject, 0x1E4F14F10, (void (*)(unint64_t))specialized _NativeSet.resize(capacity:));
        uint64_t v46 = v39;
        swift_bridgeObjectRelease();
        specialized Set.formUnion<A>(_:)(v40, &lazy cache variable for type metadata for ARReferenceObject, 0x1E4F14F10, &lazy protocol witness table cache variable for type ARReferenceObject and conformance NSObject, (void (*)(id *, id))specialized Set._Variant.insert(_:));
        swift_release();
        unint64_t v11 = v49;
        int64_t v14 = v50;
        uint64_t v12 = v47;
        if (!v49) {
          goto LABEL_7;
        }
LABEL_6:
        uint64_t v49 = (v11 - 1) & v11;
        int64_t v50 = v14;
      }
      swift_bridgeObjectRelease();
LABEL_29:
      swift_endAccess();
      char v30 = self;
      uint64_t v31 = (void *)MEMORY[0x1E4E62C20](v22, v21);
      id v32 = objc_msgSend(v30, sel_referenceObjectsInGroupNamed_bundle_, v31, 0);

      if (v32)
      {
        type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARReferenceObject);
        lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(&lazy protocol witness table cache variable for type ARReferenceObject and conformance NSObject, &lazy cache variable for type metadata for ARReferenceObject);
        uint64_t v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v33 = MEMORY[0x1E4FBC870];
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v22, v21, isUniquelyReferenced_nonNull_native);
      *(void *)(v12 + 40) = v55;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      goto LABEL_33;
    }
    int64_t v19 = v17 + 1;
    if (v17 + 1 >= v45) {
      goto LABEL_41;
    }
    unint64_t v18 = *(void *)(v44 + 8 * v19);
    if (!v18)
    {
      int64_t v19 = v17 + 2;
      if (v17 + 2 >= v45) {
        goto LABEL_41;
      }
      unint64_t v18 = *(void *)(v44 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v17 + 3;
        if (v17 + 3 < v45)
        {
          unint64_t v18 = *(void *)(v44 + 8 * v19);
          if (v18) {
            goto LABEL_16;
          }
          while (1)
          {
            int64_t v17 = v19 + 1;
            if (__OFADD__(v19, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v45) {
              break;
            }
            unint64_t v18 = *(void *)(v44 + 8 * v17);
            ++v19;
            if (v18) {
              goto LABEL_17;
            }
          }
        }
LABEL_41:
        swift_release();
        return v57;
      }
    }
LABEL_16:
    int64_t v17 = v19;
    goto LABEL_17;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  swift_bridgeObjectRelease();
LABEL_45:
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void specialized Set.formUnion<A>(_:)(unint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4, void (*a5)(id *, id))
{
  unint64_t v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for ARReferenceObject(0, a2);
    lazy protocol witness table accessor for type ARReferenceImage and conformance NSObject(a4, a2);
    Set.Iterator.init(_cocoa:)();
    unint64_t v6 = (unint64_t)v25[1];
    char v24 = v25[2];
    uint64_t v9 = (uint64_t)v25[3];
    id v10 = v25[4];
    unint64_t v11 = (unint64_t)v25[5];
  }
  else
  {
    id v10 = 0;
    uint64_t v12 = -1 << *(unsigned char *)(a1 + 32);
    char v24 = (void *)(a1 + 56);
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
  }
  int64_t v15 = (unint64_t)(v9 + 64) >> 6;
  if ((v6 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v11)
    {
      uint64_t v16 = (v11 - 1) & v11;
      unint64_t v17 = __clz(__rbit64(v11)) | ((void)v10 << 6);
      unint64_t v18 = (char *)v10;
      goto LABEL_29;
    }
    uint64_t v20 = (uint64_t)v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v20 >= v15) {
      goto LABEL_32;
    }
    unint64_t v21 = v24[v20];
    unint64_t v18 = (char *)v10 + 1;
    if (!v21)
    {
      unint64_t v18 = (char *)v10 + 2;
      if ((uint64_t)v10 + 2 >= v15) {
        goto LABEL_32;
      }
      unint64_t v21 = v24[(void)v18];
      if (!v21)
      {
        unint64_t v18 = (char *)v10 + 3;
        if ((uint64_t)v10 + 3 >= v15) {
          goto LABEL_32;
        }
        unint64_t v21 = v24[(void)v18];
        if (!v21)
        {
          unint64_t v18 = (char *)v10 + 4;
          if ((uint64_t)v10 + 4 >= v15) {
            goto LABEL_32;
          }
          unint64_t v21 = v24[(void)v18];
          if (!v21)
          {
            unint64_t v18 = (char *)v10 + 5;
            if ((uint64_t)v10 + 5 >= v15) {
              goto LABEL_32;
            }
            unint64_t v21 = v24[(void)v18];
            if (!v21)
            {
              uint64_t v22 = (char *)v10 + 6;
              while ((char *)v15 != v22)
              {
                unint64_t v21 = v24[(void)v22++];
                if (v21)
                {
                  unint64_t v18 = v22 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of Set<UITouch>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v16 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + ((void)v18 << 6);
LABEL_29:
    id v19 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
    if (!v19) {
      goto LABEL_32;
    }
    while (1)
    {
      a5(v25, v19);

      id v10 = v18;
      unint64_t v11 = v16;
      if ((v6 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for ARReferenceObject(0, a2);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v19 = v25[0];
        swift_unknownObjectRelease();
        unint64_t v18 = (char *)v10;
        uint64_t v16 = v11;
        if (v19) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

uint64_t specialized closure #1 in _NativeSet.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  int64_t v5 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v32 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v28 = result;
  char v29 = a4 + 7;
  while (1)
  {
    while (1)
    {
      if (v8)
      {
        unint64_t v9 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v10 = v9 | (v5 << 6);
      }
      else
      {
        int64_t v11 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_43;
        }
        if (v11 >= v32) {
          goto LABEL_41;
        }
        unint64_t v12 = *(void *)(v31 + 8 * v11);
        ++v5;
        if (!v12)
        {
          int64_t v5 = v11 + 1;
          if (v11 + 1 >= v32) {
            goto LABEL_41;
          }
          unint64_t v12 = *(void *)(v31 + 8 * v5);
          if (!v12)
          {
            int64_t v5 = v11 + 2;
            if (v11 + 2 >= v32) {
              goto LABEL_41;
            }
            unint64_t v12 = *(void *)(v31 + 8 * v5);
            if (!v12)
            {
              int64_t v13 = v11 + 3;
              if (v13 >= v32) {
                goto LABEL_41;
              }
              unint64_t v12 = *(void *)(v31 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  int64_t v5 = v13 + 1;
                  if (__OFADD__(v13, 1)) {
                    goto LABEL_44;
                  }
                  if (v5 >= v32) {
                    goto LABEL_41;
                  }
                  unint64_t v12 = *(void *)(v31 + 8 * v5);
                  ++v13;
                  if (v12) {
                    goto LABEL_20;
                  }
                }
              }
              int64_t v5 = v13;
            }
          }
        }
LABEL_20:
        unint64_t v8 = (v12 - 1) & v12;
        unint64_t v10 = __clz(__rbit64(v12)) + (v5 << 6);
      }
      id v14 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
      uint64_t result = (uint64_t)objc_msgSend(v14, sel_name);
      if (!result) {
        goto LABEL_45;
      }
      int64_t v15 = (void *)result;
      int64_t v35 = v5;
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      uint64_t v19 = a4[2];
      if (v19) {
        break;
      }
LABEL_4:

      uint64_t result = swift_bridgeObjectRelease();
      int64_t v5 = v35;
    }
    if (a4[4] != v16 || a4[5] != v18)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        break;
      }
    }
LABEL_38:

    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v28 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    BOOL v25 = __OFADD__(v30++, 1);
    int64_t v5 = v35;
    if (v25)
    {
      __break(1u);
LABEL_41:
      swift_retain();
      return a5(v28, a2, v30, a3);
    }
  }
  if (v19 == 1) {
    goto LABEL_4;
  }
  unint64_t v21 = v29;
  uint64_t v22 = 1;
  while (1)
  {
    uint64_t v23 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (*(v21 - 1) == v16 && *v21 == v18) {
      goto LABEL_38;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_38;
    }
    v21 += 2;
    ++v22;
    if (v23 == v19) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  v15[1] = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, a1, a2, a3);
    swift_release();
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    int64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized closure #1 in _NativeSet.filter(_:)((uint64_t)v13, v9, a1, a2, a3);
    swift_release();
    swift_bridgeObjectRelease();
    MEMORY[0x1E4E64DE0](v13, -1, -1);
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

Swift::Int specialized Set._Variant.filter(_:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), unint64_t *a4, uint64_t a5, void (*a6)(unint64_t))
{
  if ((a1 & 0xC000000000000001) == 0) {
    return specialized _NativeSet.filter(_:)(a1, a2, a3);
  }
  uint64_t v8 = MEMORY[0x1E4FBC870];
  uint64_t v33 = MEMORY[0x1E4FBC870];
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()())
  {
LABEL_38:
    swift_bridgeObjectRelease();
    swift_release();
    return v8;
  }
  type metadata accessor for ARReferenceObject(0, a4);
  while (1)
  {
    swift_dynamicCast();
    Swift::Int result = (Swift::Int)objc_msgSend(v32, sel_name);
    if (!result) {
      break;
    }
    size_t v10 = (void *)result;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    uint64_t v14 = a2[2];
    if (v14)
    {
      BOOL v15 = a2[4] == v11 && a2[5] == v13;
      if (v15 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_13:
        swift_bridgeObjectRelease();
        uint64_t v16 = v33;
        unint64_t v17 = *(void *)(v33 + 16);
        if (*(void *)(v33 + 24) <= v17)
        {
          a6(v17 + 1);
          uint64_t v16 = v33;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v16 + 40));
        uint64_t v18 = v16 + 56;
        uint64_t v19 = -1 << *(unsigned char *)(v16 + 32);
        unint64_t v20 = result & ~v19;
        unint64_t v21 = v20 >> 6;
        if (((-1 << v20) & ~*(void *)(v16 + 56 + 8 * (v20 >> 6))) != 0)
        {
          unint64_t v22 = __clz(__rbit64((-1 << v20) & ~*(void *)(v16 + 56 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v19) >> 6;
          do
          {
            if (++v21 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              goto LABEL_40;
            }
            BOOL v25 = v21 == v24;
            if (v21 == v24) {
              unint64_t v21 = 0;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v18 + 8 * v21);
          }
          while (v26 == -1);
          unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
        }
        *(void *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
        *(void *)(*(void *)(v16 + 48) + 8 * v22) = v32;
        ++*(void *)(v16 + 16);
        goto LABEL_5;
      }
      if (v14 != 1)
      {
        uint64_t v27 = a2 + 7;
        uint64_t v28 = 1;
        while (1)
        {
          uint64_t v29 = v28 + 1;
          if (__OFADD__(v28, 1)) {
            break;
          }
          if (*(v27 - 1) == v11 && *v27 == v13) {
            goto LABEL_13;
          }
          Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_13;
          }
          v27 += 2;
          ++v28;
          if (v29 == v14) {
            goto LABEL_4;
          }
        }
LABEL_40:
        __break(1u);
        break;
      }
    }
LABEL_4:
    swift_bridgeObjectRelease();

LABEL_5:
    if (!__CocoaSet.Iterator.next()())
    {
      uint64_t v8 = v33;
      goto LABEL_38;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment()
{
  unint64_t result = lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment;
  if (!lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment)
  {
    type metadata accessor for AnchoringComponent.Target.Alignment();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnchoringComponent.Target.Alignment and conformance AnchoringComponent.Target.Alignment);
  }
  return result;
}

uint64_t static ParticleEmitterComponent.Presets.rain.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v90 = (char *)&v77 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  uint64_t v100 = *(void *)(v87 - 8);
  MEMORY[0x1F4188790](v87);
  char v86 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  uint64_t v99 = *(void *)(v96 - 8);
  MEMORY[0x1F4188790](v96);
  uint64_t v85 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  uint64_t v97 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v91 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  uint64_t v98 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  uint64_t v92 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v84 = (void *)type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  uint64_t v83 = *(v84 - 1);
  MEMORY[0x1F4188790](v84);
  unint64_t v82 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  char v80 = *(void (**)(void))(v81 - 8);
  MEMORY[0x1F4188790](v81);
  unint64_t v79 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  uint64_t v8 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  size_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter();
  uint64_t v88 = *(void *)(v89 - 8);
  MEMORY[0x1F4188790](v89);
  unint64_t v20 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.init()();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4F3ADB8], v15);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4F3AD90], v11);
  ParticleEmitterComponent.birthLocation.setter();
  long long v93 = xmmword_1E2ABE4F0;
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4F3AD10], v78);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  (*((void (**)(char *, void, uint64_t))v80 + 13))(v79, *MEMORY[0x1E4F3ADC8], v81);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, void, void *))(v83 + 104))(v82, *MEMORY[0x1E4F3ADA0], v84);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  unint64_t v21 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v21(v101, 0);
  unint64_t v22 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v22(v101, 0);
  char v23 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v23(v101, 0);
  unint64_t v24 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v24(v101, 0);
  BOOL v25 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v25(v101, 0);
  uint64_t v26 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v26(v101, 0);
  uint64_t v27 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v27(v101, 0);
  LODWORD(v83) = *MEMORY[0x1E4F3AD48];
  uint64_t v28 = *(void (**)(void))(v98 + 104);
  v98 += 104;
  BOOL v84 = v28;
  v28(v92);
  uint64_t v29 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v29(v101, 0);
  uint64_t v30 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v30(v101, 0);
  uint64_t v31 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v31(v101, 0);
  LODWORD(v81) = *MEMORY[0x1E4F3AD70];
  id v32 = *(char **)(v97 + 104);
  v97 += 104;
  unint64_t v82 = v32;
  ((void (*)(char *))v32)(v91);
  uint64_t v33 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v33(v101, 0);
  id v34 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v34(v101, 0);
  int64_t v35 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v35(v101, 0);
  unint64_t v36 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v36(v101, 0);
  char v37 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v37(v101, 0);
  uint64_t v38 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v38(v101, 0);
  uint64_t v39 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v39(v101, 0);
  Swift::Int v40 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v40(v101, 0);
  uint64_t v41 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v41(v101, 0);
  uint64_t v42 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v42(v101, 0);
  uint64_t v43 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v43(v101, 0);
  uint64_t v44 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v44(v101, 0);
  int64_t v45 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v45(v101, 0);
  uint64_t v46 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v46(v101, 0);
  LODWORD(v79) = *MEMORY[0x1E4F3AD40];
  uint64_t v47 = *(void (**)(void))(v99 + 104);
  v99 += 104;
  char v80 = v47;
  char v48 = v85;
  v47(v85);
  uint64_t v49 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v49(v101, 0);
  int64_t v50 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v50(v101, 0);
  Swift::Int v51 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v51(v101, 0);
  uint64_t v52 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v52(v101, 0);
  uint64_t v53 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v53(v101, 0);
  uint64_t v54 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v54(v101, 0);
  uint64_t v55 = *MEMORY[0x1E4F3AD88];
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 104);
  v100 += 104;
  uint64_t v57 = v86;
  uint64_t v58 = v87;
  v56(v86, v55, v87);
  uint64_t v59 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v59(v101, 0);
  uint64_t v60 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v60(v101, 0);
  uint64_t v61 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v61(v101, 0);
  int64_t v62 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v62(v101, 0);
  CGColorCreateGenericRGB(228.0, 245.0, 255.0, 0.19);
  unint64_t v63 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v63(v101, 0);
  CGColorCreateGenericRGB(245.0, 250.0, 255.0, 0.14);
  uint64_t v64 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v64(v101, 0);
  uint64_t v65 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v65(v101, 0);
  uint64_t v66 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v66(v101, 0);
  uint64_t v67 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v67(v101, 0);
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  ((void (*)(char *, void, uint64_t))v84)(v92, v83, v94);
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  ((void (*)(char *, void, uint64_t))v82)(v91, v81, v95);
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  ((void (*)(char *, void, uint64_t))v80)(v48, v79, v96);
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v56(v57, *MEMORY[0x1E4F3AD78], v58);
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  CGColorCreateGenericRGB(240.0, 243.0, 236.0, 0.42);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  CGColorCreateGenericRGB(97.0, 184.0, 26.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  type metadata accessor for TextureResource();
  uint64_t v68 = (void *)MEMORY[0x1E4E62C20](0xD000000000000010, 0x80000001E2AB8BE0);
  id v69 = objc_msgSend(self, sel_bundleWithIdentifier_, v68);

  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  uint64_t v70 = (void *)textureLoader;
  v101[3] = &type metadata for TextureLoader;
  v101[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v101[0] = v70;
  id v71 = v70;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);

  unint64_t v72 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v72(v101, 0);
  uint64_t v73 = v88;
  uint64_t v75 = v89;
  char v74 = v90;
  (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v90, v20, v89);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, v75);
  ParticleEmitterComponent.spawnedEmitter.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v20, v75);
}

char *RKAREnvironmentProbeAnchor.init(anchor:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = 0x4008000000000000;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight] = 1065353216;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for RKAREnvironmentProbeAnchor();
  uint64_t v3 = (char *)objc_msgSendSuper2(&v7, sel_initWithAnchor_, a1);
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    *(void *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = *(void *)(v4 + OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval);
    *(_DWORD *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = *(_DWORD *)(v4
                                                                                                  + OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority);
    float v5 = *(float *)(v4 + OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight);
  }
  else
  {

    *(void *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = 0x4008000000000000;
    *(_DWORD *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = 0;
    float v5 = 1.0;
  }
  *(float *)&v3[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight] = v5;
  return v3;
}

uint64_t RKAREnvironmentProbeAnchor.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = 0x4008000000000000;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = 0;
  *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight] = 1065353216;
  *(void *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for RKAREnvironmentProbeAnchor();
  id v3 = objc_msgSendSuper2(&v15, sel_initWithCoder_, a1);
  id v4 = v3;
  if (!v3)
  {

    return (uint64_t)v4;
  }
  float v5 = (char *)v3;
  uint64_t v6 = (void *)MEMORY[0x1E4E62C20](0x4968736572666572, 0xEF6C61767265746ELL);
  objc_msgSend(a1, sel_decodeDoubleForKey_, v6);
  uint64_t v8 = v7;

  *(void *)&v5[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval] = v8;
  uint64_t v9 = (void *)MEMORY[0x1E4E62C20](0x797469726F697270, 0xE800000000000000);
  unsigned int v10 = objc_msgSend(a1, sel_decodeInt32ForKey_, v9);

  if ((v10 & 0x80000000) == 0)
  {
    *(_DWORD *)&v5[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_priority] = v10;
    uint64_t v11 = (void *)MEMORY[0x1E4E62C20](0x746867696577, 0xE600000000000000);
    objc_msgSend(a1, sel_decodeFloatForKey_, v11);
    int v13 = v12;

    *(_DWORD *)&v5[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight] = v13;
    return (uint64_t)v4;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall RKAREnvironmentProbeAnchor.encode(with:)(NSCoder with)
{
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for RKAREnvironmentProbeAnchor();
  objc_msgSendSuper2(&v9, sel_encodeWithCoder_, with.super.isa);
  double v3 = *(double *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_refreshInterval];
  id v4 = (void *)MEMORY[0x1E4E62C20](0x4968736572666572, 0xEF6C61767265746ELL);
  [(objc_class *)with.super.isa encodeDouble:v4 forKey:v3];

  Class isa = UInt32._bridgeToObjectiveC()().super.super.isa;
  uint64_t v6 = (void *)MEMORY[0x1E4E62C20](0x797469726F697270, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v6];

  LODWORD(v3) = *(_DWORD *)&v1[OBJC_IVAR____TtC10RealityKit26RKAREnvironmentProbeAnchor_weight];
  uint64_t v7 = (void *)MEMORY[0x1E4E62C20](0x746867696577, 0xE600000000000000);
  LODWORD(v8) = LODWORD(v3);
  [(objc_class *)with.super.isa encodeFloat:v7 forKey:v8];
}

id RKAREnvironmentProbeAnchor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKAREnvironmentProbeAnchor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for RKAREnvironmentProbeAnchor()
{
  return self;
}

void destroy for REARCapturedFrame(id *a1)
{
}

uint64_t initializeWithCopy for REARCapturedFrame(uint64_t a1, uint64_t a2)
{
  double v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for REARCapturedFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for REARCapturedFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for REARCapturedFrame(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for REARCapturedFrame(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REARCapturedFrame()
{
  return &type metadata for REARCapturedFrame;
}

uint64_t closure #1 in static ARView.fulfillPixelCastRequest(renderManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(uint64_t *))(a3 + 64);
  uint64_t v21 = *(void *)(a3 + 72);
  unint64_t v22 = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PixelCastHit?, Error>);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PixelCastHit?);
  MEMORY[0x1F4188790](v8 - 8);
  unsigned int v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v21 - v12;
  uint64_t v14 = type metadata accessor for PixelCastHit();
  objc_super v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  if (a2 >= 1)
  {
    Scene.coreScene.getter();
    if (!RESceneFindEntity())
    {
      uint64_t v16 = type metadata accessor for Scene.PixelCastError();
      lazy protocol witness table accessor for type Scene.PixelCastError and conformance Scene.PixelCastError();
      uint64_t v17 = swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4F3AA30], v16);
      uint64_t *v7 = v17;
      goto LABEL_8;
    }
    RESceneUnderstandingComponentGetComponentType();
    if (!REEntityGetComponentByClass() || RESceneUnderstandingComponentGetSourceType() != 1)
    {
      type metadata accessor for Entity();
      static Entity.fromCore(_:ignoringEntityInfo:)();
      PixelCastHit.init(entity:normal:position:meshPart:instance:primitive:barycentric:)();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v13, &demangling cache variable for type metadata for PixelCastHit?);
      v15(v10, 0, 1, v14);
      outlined init with take of vImage_CGImageFormat?((uint64_t)v10, (uint64_t)v13, &demangling cache variable for type metadata for PixelCastHit?);
    }
  }
  outlined init with copy of PixelCastHit?((uint64_t)v13, (uint64_t)v7);
LABEL_8:
  uint64_t v19 = v22;
  swift_storeEnumTagMultiPayload();
  v19(v7);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v7, &demangling cache variable for type metadata for Result<PixelCastHit?, Error>);
  return outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v13, &demangling cache variable for type metadata for PixelCastHit?);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<RERenderGraphSelectionConcludeResult>, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

void closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void (**)(unint64_t, uint64_t))(a3 + 64);
  uint64_t v5 = type metadata accessor for PixelCastHit();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < 1)
  {
    unint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_7:
    v4(v9, 0);
    swift_bridgeObjectRelease();
    return;
  }
  Scene.coreScene.getter();
  if (RESceneFindEntity())
  {
    type metadata accessor for Entity();
    static Entity.fromCore(_:ignoringEntityInfo:)();
    PixelCastHit.init(entity:normal:position:meshPart:instance:primitive:barycentric:)();
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v11 = *(void *)(v9 + 16);
    unint64_t v10 = *(void *)(v9 + 24);
    if (v11 >= v10 >> 1) {
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1, v9);
    }
    *(void *)(v9 + 16) = v11 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v9+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v11, v8, v5);
    goto LABEL_7;
  }
  uint64_t v12 = type metadata accessor for Scene.PixelCastError();
  lazy protocol witness table accessor for type Scene.PixelCastError and conformance Scene.PixelCastError();
  int v13 = (void *)swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4F3AA30], v12);
  v4((unint64_t)v13, 1);
}

uint64_t specialized static ARView.fulfillPixelCastRequest(renderManager:)()
{
  uint64_t v0 = type metadata accessor for __SceneRef();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  double v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __AssetRef();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Scene();
  static Scene.pixelCastRequest.getter();
  uint64_t result = outlined init with take of vImage_CGImageFormat?((uint64_t)v22, (uint64_t)&v23, &demangling cache variable for type metadata for (scene: Scene, ray: RERay, completion: ())?);
  uint64_t v10 = v23;
  if (v23)
  {
    long long v21 = v24;
    long long v20 = v25;
    int v11 = v26;
    uint64_t v17 = v27;
    uint64_t v16 = v28;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    uint64_t v18 = v0;
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    uint64_t v19 = v8;
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphSelectionEmitterSetConcludeParams();
    dispatch thunk of RERenderManager.__coreRenderManager.getter();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v10;
    long long v13 = v20;
    *(_OWORD *)(v12 + 32) = v21;
    *(_OWORD *)(v12 + 48) = v13;
    *(_DWORD *)(v12 + 64) = v11;
    uint64_t v14 = v16;
    *(void *)(v12 + 80) = v17;
    *(void *)(v12 + 88) = v14;
    *(void *)&long long v31 = partial apply for closure #1 in static ARView.fulfillPixelCastRequest(renderManager:);
    *((void *)&v31 + 1) = v12;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v30 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<RERenderGraphSelectionConcludeResult>, @unowned Int) -> ();
    *((void *)&v30 + 1) = &block_descriptor_6;
    uint64_t v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    RERenderGraphSelectionEmitterAddConcludeCallback();
    _Block_release(v15);
    swift_retain();
    dispatch thunk of Scene.__coreScene.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v18);
    RERenderGraphSelectionEmitterSetScene();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.setup(mgr:)();
    swift_release();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.execute(mgr:)();
    swift_release();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)();
    swift_release();
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long aBlock = 0u;
    static Scene.pixelCastRequest.setter();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized static ARView.fulfillPixelCastArrayRequest(renderManager:)()
{
  uint64_t v0 = type metadata accessor for __SceneRef();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  double v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for __AssetRef();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Scene();
  static Scene.pixelCastArrayRequest.getter();
  uint64_t result = outlined init with take of vImage_CGImageFormat?((uint64_t)v22, (uint64_t)&v23, &demangling cache variable for type metadata for (scene: Scene, ray: RERay, completion: ())?);
  uint64_t v10 = v23;
  if (v23)
  {
    long long v21 = v24;
    long long v20 = v25;
    int v11 = v26;
    uint64_t v17 = v27;
    uint64_t v16 = v28;
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.renderService.getter();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
    type metadata accessor for RERenderManager();
    swift_dynamicCast();
    uint64_t v18 = v0;
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    uint64_t v19 = v8;
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphSelectionEmitterSetConcludeParams();
    dispatch thunk of RERenderManager.__coreRenderManager.getter();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v10;
    long long v13 = v20;
    *(_OWORD *)(v12 + 32) = v21;
    *(_OWORD *)(v12 + 48) = v13;
    *(_DWORD *)(v12 + 64) = v11;
    uint64_t v14 = v16;
    *(void *)(v12 + 80) = v17;
    *(void *)(v12 + 88) = v14;
    *(void *)&long long v31 = partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:);
    *((void *)&v31 + 1) = v12;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v30 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<RERenderGraphSelectionConcludeResult>, @unowned Int) -> ();
    *((void *)&v30 + 1) = &block_descriptor_8;
    uint64_t v15 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    RERenderGraphSelectionEmitterAddConcludeCallback();
    _Block_release(v15);
    swift_retain();
    dispatch thunk of Scene.__coreScene.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v18);
    RERenderGraphSelectionEmitterSetScene();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.setup(mgr:)();
    swift_release();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.execute(mgr:)();
    swift_release();
    pickingEmitter.getter();
    dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)();
    swift_release();
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long aBlock = 0u;
    static Scene.pixelCastArrayRequest.setter();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Scene.PixelCastError and conformance Scene.PixelCastError()
{
  unint64_t result = lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError;
  if (!lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError)
  {
    type metadata accessor for Scene.PixelCastError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Scene.PixelCastError and conformance Scene.PixelCastError);
  }
  return result;
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 96, 15);
}

uint64_t partial apply for closure #1 in static ARView.fulfillPixelCastRequest(renderManager:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))closure #1 in static ARView.fulfillPixelCastRequest(renderManager:));
}

uint64_t partial apply for closure #1 in static ARView.fulfillPixelCastArrayRequest(renderManager:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t *))
{
  long long v4 = *(_OWORD *)(v3 + 32);
  long long v5 = *(_OWORD *)(v3 + 48);
  int v6 = *(_DWORD *)(v3 + 64);
  uint64_t v8 = *(void *)(v3 + 16);
  long long v9 = v4;
  long long v10 = v5;
  int v11 = v6;
  long long v12 = *(_OWORD *)(v3 + 80);
  return a3(a1, a2, &v8);
}

uint64_t outlined init with copy of PixelCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PixelCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id DirectionalLightComponent.color.getter()
{
  uint64_t v0 = (void *)DirectionalLightComponent.__color.getter();
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v0);

  return v1;
}

void key path getter for DirectionalLightComponent.color : DirectionalLightComponent(void *a1@<X8>)
{
  uint64_t v2 = (void *)DirectionalLightComponent.__color.getter();
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v2);

  *a1 = v3;
}

void key path setter for DirectionalLightComponent.color : DirectionalLightComponent(id *a1)
{
  id v2 = *a1;
  id v1 = objc_msgSend(v2, sel_CGColor);
  DirectionalLightComponent.__color.setter();
}

void DirectionalLightComponent.color.setter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  DirectionalLightComponent.__color.setter();
}

void (*DirectionalLightComponent.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  id v3 = (void *)DirectionalLightComponent.__color.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return DirectionalLightComponent.color.modify;
}

void DirectionalLightComponent.color.modify(void **a1, char a2)
{
  id v2 = *a1;
  id v6 = *a1;
  if (a2)
  {
    id v3 = v2;
    id v4 = objc_msgSend(v3, sel_CGColor);
    DirectionalLightComponent.__color.setter();
  }
  else
  {
    id v5 = objc_msgSend(v2, sel_CGColor);
    DirectionalLightComponent.__color.setter();
  }
}

void DirectionalLightComponent.init(color:intensity:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)();
}

void DirectionalLightComponent.init(color:intensity:isRealWorldProxy:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)();
}

uint64_t DirectionalLightComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v22[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DirectionalLightComponent();
  __n128 v10 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1E2ABF570;
  *(void *)(v13 + 32) = 0x726F6C6F63;
  *(void *)(v13 + 40) = 0xE500000000000000;
  uint64_t v14 = (void *)DirectionalLightComponent.__color.getter();
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v14);

  unint64_t v16 = type metadata accessor for UIColor();
  *(void *)(v13 + 48) = v15;
  *(void *)(v13 + 72) = v16;
  *(void *)(v13 + 80) = 0x7469736E65746E69;
  *(void *)(v13 + 88) = 0xE900000000000079;
  DirectionalLightComponent.intensity.getter();
  uint64_t v17 = MEMORY[0x1E4FBB470];
  *(_DWORD *)(v13 + 96) = v18;
  *(void *)(v13 + 120) = v17;
  *(void *)(v13 + 128) = 0xD000000000000010;
  *(void *)(v13 + 136) = 0x80000001E2ABA840;
  char v19 = DirectionalLightComponent.isRealWorldProxy.getter();
  *(void *)(v13 + 168) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v13 + 144) = v19 & 1;
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = __CocoaSet.startIndex.getter();
    uint64_t v5 = v4;
    uint64_t v6 = __CocoaSet.endIndex.getter();
    char v8 = MEMORY[0x1E4E63030](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    uint64_t v9 = v13;
    outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  uint64_t result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    uint64_t v5 = v11;
    if (*(_DWORD *)(a1 + 36) == v11)
    {
      uint64_t v3 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall ARView.setupMetalLayer()()
{
  uint64_t v1 = (unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_extendedDynamicRangeOutput);
  swift_beginAccess();
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_backingLayer;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer);
  if (*v1 == 1)
  {
    if (!v3)
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    objc_msgSend(v3, sel_setPixelFormat_, 115);
    uint64_t v4 = *(void **)(v0 + v2);
    if (!v4)
    {
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
    CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1DBC8];
    id v6 = v4;
    CGColorSpaceRef v7 = CGColorSpaceCreateWithName(v5);
    objc_msgSend(v6, sel_setColorspace_, v7);

    char v8 = *(void **)(v0 + v2);
    if (!v8)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
    objc_msgSend(v8, sel_setWantsExtendedDynamicRangeContent_, 1);
LABEL_9:
    __n128 v10 = *(void **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_backingLayer);
    if (v10)
    {
      objc_msgSend(v10, sel_setFramebufferOnly_, 0);
      return;
    }
    __break(1u);
    goto LABEL_12;
  }
  if (!v3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  objc_msgSend(v3, sel_setPixelFormat_, 553);
  uint64_t v9 = *(void **)(v0 + v2);
  if (v9)
  {
    objc_msgSend(v9, sel_setColorspace_, 0);
    goto LABEL_9;
  }
LABEL_16:
  __break(1u);
}

uint64_t static ARView.layerClass.getter()
{
  return type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for CALayer);
}

Swift::Void __swiftcall ARView.__enablePauseEngineOnLeaveForeground()()
{
  uint64_t v1 = OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground;
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground) & 1) == 0)
  {
    id v2 = objc_msgSend(self, sel_defaultCenter);
    objc_msgSend(v2, sel_addObserver_selector_name_object_, v0, sel_willResignActiveWithNotification_, *MEMORY[0x1E4FB2738], 0);
    objc_msgSend(v2, sel_addObserver_selector_name_object_, v0, sel_restartEngineWithNotification_, *MEMORY[0x1E4FB2628], 0);

    *(unsigned char *)(v0 + v1) = 1;
  }
}

id ARView.contentScaleFactor.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ARView();
  return objc_msgSendSuper2(&v2, sel_contentScaleFactor);
}

void ARView.contentScaleFactor.setter(double a1)
{
  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for ARView();
  objc_msgSendSuper2(&v8, sel_setContentScaleFactor_, a1);
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC10RealityKit6ARView_initialized) == 1)
  {
    objc_msgSend(v1, sel_bounds);
    double v4 = v3;
    double v6 = v5;
    objc_msgSend(v1, sel_contentScaleFactor);
    ARView.resizeDrawable(size:scaleFactor:)(v4, v6, v7);
  }
}

Swift::Void __swiftcall ARView.__disablePauseEngineOnLeaveForeground()()
{
  uint64_t v1 = OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground;
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_pauseEngineOnLeaveForeground) == 1)
  {
    id v2 = objc_msgSend(self, sel_defaultCenter);
    objc_msgSend(v2, sel_removeObserver_name_object_, v0, *MEMORY[0x1E4FB2738], 0);
    objc_msgSend(v2, sel_removeObserver_name_object_, v0, *MEMORY[0x1E4FB2628], 0);

    *(unsigned char *)(v0 + v1) = 0;
  }
}

Swift::Void __swiftcall ARView.didMoveToSuperview()()
{
  uint64_t v1 = v0;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for ARView();
  objc_msgSendSuper2(&v5, sel_didMoveToSuperview);
  id v2 = objc_msgSend(v0, sel_superview);

  uint64_t v3 = OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView;
  if (v2)
  {
    if (v1[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView]) {
      return;
    }
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.__start()();
    char v4 = 1;
  }
  else
  {
    if (!v1[OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView]) {
      return;
    }
    type metadata accessor for __ServiceLocator();
    static __ServiceLocator.shared.getter();
    dispatch thunk of __ServiceLocator.engine.getter();
    swift_release();
    dispatch thunk of __Engine.__stop()();
    char v4 = 0;
  }
  swift_release();
  v1[v3] = v4;
}

Swift::Void __swiftcall ARView.layoutSubviews()()
{
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for ARView();
  objc_msgSendSuper2(&v6, sel_layoutSubviews);
  objc_msgSend(v0, sel_bounds);
  double v2 = v1;
  double v4 = v3;
  objc_msgSend(v0, sel_contentScaleFactor);
  ARView.resizeDrawable(size:scaleFactor:)(v2, v4, v5);
}

void ARView.touchesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    type metadata accessor for ARReferenceObject(255, (unint64_t *)&lazy cache variable for type metadata for UITouch);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

void ARView.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
}

void ARView.touchesBegan(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  double v7 = v4;
  uint64_t v9 = swift_bridgeObjectRetain();
  __n128 v10 = (void *)specialized Collection.first.getter(v9);
  swift_bridgeObjectRelease();
  if (!v10) {
    goto LABEL_11;
  }
  objc_msgSend(v10, sel_locationInView_, v4);
  double v12 = v11;
  double v14 = v13;
  type metadata accessor for InputManager();
  if (v12 <= -2147483650.0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v12 >= 2147483650.0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((*(void *)&v12 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(void *)&v14 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_14;
  }
  if (v14 <= -2147483650.0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v14 < 2147483650.0)
  {
    MEMORY[0x1E4E60B90](a3, (int)v12, (int)v14, 0);

LABEL_11:
    type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UITouch and conformance NSObject();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    v17.receiver = v7;
    v17.super_class = (Class)type metadata accessor for ARView();
    objc_msgSendSuper2(&v17, *a4, isa, a2);

    return;
  }
LABEL_16:
  __break(1u);
}

void ARView.touchesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
}

void ARView.touchesCancelled(_:with:)(uint64_t a1, uint64_t a2)
{
}

uint64_t @objc ARView.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, a4);

  return swift_bridgeObjectRelease();
}

id ARRenderView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ARRenderView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ARRenderView()
{
  return self;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      if (a4 < 0) {
        uint64_t v7 = a4;
      }
      else {
        uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8;
      }
      MEMORY[0x1E4E63080](a1, a2, v7);
      type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
LABEL_27:
    __break(1u);
    return;
  }
  if (a3) {
    goto LABEL_13;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_13:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  __CocoaSet.Index.element.getter();
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  double v4 = v17;
  swift_unknownObjectRelease();
  Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v9 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v8 & ~v9;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_26:

    __break(1u);
    goto LABEL_27;
  }
  id v10 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v6 = (v6 + 1) & v12;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_26;
      }
      id v13 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v14 = static NSObject.== infix(_:_:)();
    }
    while ((v14 & 1) == 0);
  }

LABEL_20:
  id v15 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v16 = v15;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized ARView.willResignActive(notification:)()
{
  uint64_t v1 = v0;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  char v2 = dispatch thunk of __Engine.isRunning.getter();
  swift_release();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground) = v2 & 1;
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  char v3 = dispatch thunk of __Engine.isRunning.getter();
  uint64_t result = swift_release();
  if (v3)
  {
    uint64_t v5 = OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView) == 1)
    {
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.engine.getter();
      swift_release();
      dispatch thunk of __Engine.__stop()();
      uint64_t result = swift_release();
      *(unsigned char *)(v1 + v5) = 0;
    }
  }
  return result;
}

void specialized ARView.restartEngine(notification:)()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_engineWasRunningWhenLastInTheForeground) == 1)
  {
    uint64_t v1 = OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView;
    if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_engineStartedByThisView) & 1) == 0)
    {
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.engine.getter();
      swift_release();
      dispatch thunk of __Engine.__start()();
      swift_release();
      *(unsigned char *)(v0 + v1) = 1;
    }
  }
}

uint64_t static TextureResource.load(named:in:)()
{
  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)textureLoader;
  v4[3] = &type metadata for TextureLoader;
  v4[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v4[0] = v0;
  id v1 = v0;
  uint64_t v2 = static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t static TextureResource.loadAsync(named:in:)()
{
  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)textureLoader;
  v4[3] = &type metadata for TextureLoader;
  v4[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v4[0] = v0;
  id v1 = v0;
  uint64_t v2 = static TextureResource.loadAsync(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t static TextureResource.load(named:in:options:)()
{
  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)textureLoader;
  v4[3] = &type metadata for TextureLoader;
  v4[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v4[0] = v0;
  id v1 = v0;
  uint64_t v2 = static TextureResource.load(named:in:options:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t static TextureResource.loadAsync(named:in:options:)()
{
  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)textureLoader;
  v4[3] = &type metadata for TextureLoader;
  v4[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v4[0] = v0;
  id v1 = v0;
  uint64_t v2 = static TextureResource.loadAsync(named:in:options:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return v2;
}

uint64_t TextureResource.__allocating_init(named:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for TextureResource.MipmapsMode();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextureResource.Semantic?);
  v4[9] = swift_task_alloc();
  type metadata accessor for TextureResource.CreateOptions();
  v4[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[11] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  v4[12] = v7;
  v4[13] = v6;
  return MEMORY[0x1F4188298](TextureResource.__allocating_init(named:in:), v7, v6);
}

uint64_t TextureResource.__allocating_init(named:in:)()
{
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)v0[4];
  uint64_t v6 = type metadata accessor for TextureResource.Semantic();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 1, 1, v6);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, *MEMORY[0x1E4F3A8B8], v4);
  id v7 = v5;
  TextureResource.CreateOptions.init(semantic:mipmapsMode:)();
  char v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized TextureResource.__allocating_init(named:in:options:)
                                                                   + async function pointer to specialized TextureResource.__allocating_init(named:in:options:));
  unint64_t v8 = (void *)swift_task_alloc();
  v0[14] = v8;
  *unint64_t v8 = v0;
  v8[1] = TextureResource.__allocating_init(named:in:);
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[4];
  uint64_t v12 = v0[2];
  uint64_t v11 = v0[3];
  return v14(v12, v11, v10, v9);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)v0[4];
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v3 = v0[16];
  return v2(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void **)(v0 + 32);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t TextureResource.__allocating_init(named:in:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void **)(*(void *)v2 + 32);
  *(void *)(*(void *)v2 + 120) = v1;
  swift_task_dealloc();

  if (v1)
  {
    uint64_t v6 = v4[12];
    uint64_t v7 = v4[13];
    unint64_t v8 = TextureResource.__allocating_init(named:in:);
  }
  else
  {
    v4[16] = a1;
    uint64_t v6 = v4[12];
    uint64_t v7 = v4[13];
    unint64_t v8 = TextureResource.__allocating_init(named:in:);
  }
  return MEMORY[0x1F4188298](v8, v6, v7);
}

uint64_t TextureResource.__allocating_init(named:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a3;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized TextureResource.__allocating_init(named:in:options:)
                                                                   + async function pointer to specialized TextureResource.__allocating_init(named:in:options:));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v9;
  *uint64_t v9 = v4;
  v9[1] = TextureResource.__allocating_init(named:in:options:);
  return v11(a1, a2, a3, a4);
}

uint64_t TextureResource.__allocating_init(named:in:options:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();

  uint64_t v7 = *(uint64_t (**)(uint64_t))(v5 + 8);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return v7(v6);
}

uint64_t createMTLTextureLoaderOptions(from:)(uint64_t a1)
{
  uint64_t Options = type metadata accessor for TextureResource.CreateOptions();
  uint64_t v85 = *(void *)(Options - 8);
  MEMORY[0x1F4188790](Options);
  uint64_t v87 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TextureResource.Semantic();
  uint64_t v88 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v77 = (char *)&v75 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TextureResource.Semantic?, TextureResource.Semantic?));
  MEMORY[0x1F4188790](v92);
  uint64_t v83 = (uint64_t)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v93 = (uint64_t)&v75 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextureResource.Semantic?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v76 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v84 = (uint64_t)&v75 - v11;
  MEMORY[0x1F4188790](v12);
  unint64_t v82 = (char *)&v75 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v78 = (uint64_t)&v75 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v89 = (uint64_t)&v75 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v90 = (uint64_t)&v75 - v19;
  uint64_t v20 = type metadata accessor for TextureResource.MipmapsMode();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  int v26 = (char *)&v75 - v25;
  TextureResource.CreateOptions.mipmapsMode.getter();
  uint64_t v27 = *(void (**)(char *, void, uint64_t))(v21 + 104);
  v27(v23, *MEMORY[0x1E4F3A8B0], v20);
  char v28 = MEMORY[0x1E4E60DC0](v26, v23);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v21 + 8);
  v29(v23, v20);
  v29(v26, v20);
  uint64_t v94 = a1;
  if (v28)
  {
    long long v30 = (void *)*MEMORY[0x1E4F35368];
    uint64_t v98 = MEMORY[0x1E4FBB390];
    LOBYTE(v97) = 1;
    outlined init with take of Any(&v97, v96);
    id v31 = v30;
    uint64_t v32 = MEMORY[0x1E4FBC868];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v95 = v32;
  }
  else
  {
    TextureResource.CreateOptions.mipmapsMode.getter();
    v27(v23, *MEMORY[0x1E4F3A8B8], v20);
    char v34 = MEMORY[0x1E4E60DC0](v26, v23);
    v29(v23, v20);
    v29(v26, v20);
    uint64_t v35 = MEMORY[0x1E4FBC868];
    if ((v34 & 1) == 0) {
      goto LABEL_6;
    }
    unint64_t v36 = (void *)*MEMORY[0x1E4F35370];
    uint64_t v98 = MEMORY[0x1E4FBB390];
    LOBYTE(v97) = 1;
    outlined init with take of Any(&v97, v96);
    id v31 = v36;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v95 = v35;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v96, v31, isUniquelyReferenced_nonNull_native);
  uint64_t v35 = v95;

  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v37 = v90;
  TextureResource.CreateOptions.semantic.getter();
  uint64_t v38 = *MEMORY[0x1E4F3A8C0];
  uint64_t v39 = v88;
  uint64_t v40 = v89;
  unint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 104);
  v79(v89, v38, v3);
  uint64_t v41 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56);
  uint64_t v81 = v39 + 56;
  char v80 = v41;
  v41(v40, 0, 1, v3);
  uint64_t v42 = v93;
  uint64_t v43 = v93 + *(int *)(v92 + 48);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v37, v93, &demangling cache variable for type metadata for TextureResource.Semantic?);
  uint64_t v44 = v42;
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v40, v43, &demangling cache variable for type metadata for TextureResource.Semantic?);
  int64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  unsigned int v46 = v45(v44, 1, v3);
  uint64_t v86 = v35;
  if (v46 == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v40, &demangling cache variable for type metadata for TextureResource.Semantic?);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v37, &demangling cache variable for type metadata for TextureResource.Semantic?);
    unsigned int v47 = v45(v43, 1, v3);
    uint64_t v48 = v85;
    if (v47 == 1)
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v93, &demangling cache variable for type metadata for TextureResource.Semantic?);
      uint64_t v49 = v87;
      uint64_t v50 = Options;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v87, v94, Options);
LABEL_19:
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  Swift::Int v51 = v45;
  uint64_t v52 = v78;
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v44, v78, &demangling cache variable for type metadata for TextureResource.Semantic?);
  uint64_t v53 = v51;
  if (v51(v43, 1, v3) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v89, &demangling cache variable for type metadata for TextureResource.Semantic?);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v90, &demangling cache variable for type metadata for TextureResource.Semantic?);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v52, v3);
    uint64_t v48 = v85;
    int64_t v45 = v51;
LABEL_11:
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v93, &demangling cache variable for type metadata for (TextureResource.Semantic?, TextureResource.Semantic?));
    uint64_t v49 = v87;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v87, v94, Options);
    goto LABEL_12;
  }
  uint64_t v63 = v44;
  uint64_t v64 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v77, v43, v3);
  lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption(&lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic, MEMORY[0x1E4F3A8D0]);
  char v65 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v66 = *(void (**)(char *, uint64_t))(v39 + 8);
  v66(v64, v3);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v89, &demangling cache variable for type metadata for TextureResource.Semantic?);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v90, &demangling cache variable for type metadata for TextureResource.Semantic?);
  v66((char *)v52, v3);
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v63, &demangling cache variable for type metadata for TextureResource.Semantic?);
  uint64_t v48 = v85;
  uint64_t v49 = v87;
  uint64_t v50 = Options;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v87, v94, Options);
  int64_t v45 = v53;
  if (v65) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v54 = (uint64_t)v82;
  TextureResource.CreateOptions.semantic.getter();
  uint64_t v55 = v84;
  v79(v84, *MEMORY[0x1E4F3A8C8], v3);
  v80(v55, 0, 1, v3);
  uint64_t v56 = v83;
  uint64_t v57 = v83 + *(int *)(v92 + 48);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v54, v83, &demangling cache variable for type metadata for TextureResource.Semantic?);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v55, v57, &demangling cache variable for type metadata for TextureResource.Semantic?);
  if (v45(v56, 1, v3) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v55, &demangling cache variable for type metadata for TextureResource.Semantic?);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v54, &demangling cache variable for type metadata for TextureResource.Semantic?);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, Options);
    if (v45(v57, 1, v3) == 1)
    {
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v56, &demangling cache variable for type metadata for TextureResource.Semantic?);
LABEL_20:
      uint64_t v62 = v86;
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v58 = v76;
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v56, v76, &demangling cache variable for type metadata for TextureResource.Semantic?);
    unsigned int v59 = v45(v57, 1, v3);
    uint64_t v60 = v88;
    uint64_t v61 = (void (**)(uint64_t, uint64_t))(v88 + 8);
    if (v59 != 1)
    {
      uint64_t v67 = v54;
      uint64_t v68 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v77, v57, v3);
      lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption(&lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic, MEMORY[0x1E4F3A8D0]);
      LODWORD(v94) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v69 = v48;
      uint64_t v70 = *(void (**)(char *, uint64_t))(v60 + 8);
      v70(v68, v3);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v84, &demangling cache variable for type metadata for TextureResource.Semantic?);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v67, &demangling cache variable for type metadata for TextureResource.Semantic?);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v87, Options);
      v70((char *)v58, v3);
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v56, &demangling cache variable for type metadata for TextureResource.Semantic?);
      uint64_t v62 = v86;
      if (v94) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v84, &demangling cache variable for type metadata for TextureResource.Semantic?);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v54, &demangling cache variable for type metadata for TextureResource.Semantic?);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v87, Options);
    (*v61)(v58, v3);
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v56, &demangling cache variable for type metadata for (TextureResource.Semantic?, TextureResource.Semantic?));
  uint64_t v62 = v86;
LABEL_22:
  id v71 = (void *)*MEMORY[0x1E4F35380];
  uint64_t v98 = MEMORY[0x1E4FBB390];
  LOBYTE(v97) = 0;
  outlined init with take of Any(&v97, v96);
  id v72 = v71;
  char v73 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v95 = v62;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v96, v72, v73);
  uint64_t v62 = v95;

  swift_bridgeObjectRelease();
LABEL_23:
  if (!*(void *)(v62 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v62;
}

id TextureLoader.loadTexture(name:bundle:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v19[1] = *(id *)MEMORY[0x1E4F143B8];
  id v10 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v10, sel_scale);
  double v12 = v11;

  uint64_t v13 = (void *)MEMORY[0x1E4E62C20](a1, a2);
  if (createMTLTextureLoaderOptions(from:)(a4))
  {
    type metadata accessor for MTKTextureLoaderOption(0);
    lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, type metadata accessor for MTKTextureLoaderOption);
    v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.Class isa = 0;
  }
  v19[0] = 0;
  id v15 = objc_msgSend(a5, sel_newTextureWithName_scaleFactor_bundle_options_error_, v13, a3, v14.super.isa, v19, v12);

  if (v15)
  {
    id v16 = v19[0];
  }
  else
  {
    id v17 = v19[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v15;
}

void TextureLoader.loadTexture(name:bundle:options:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v14 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v14, sel_scale);
  double v16 = v15;

  id v17 = (void *)MEMORY[0x1E4E62C20](a1, a2);
  if (createMTLTextureLoaderOptions(from:)(a4))
  {
    type metadata accessor for MTKTextureLoaderOption(0);
    lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption(&lazy protocol witness table cache variable for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption, type metadata accessor for MTKTextureLoaderOption);
    v18.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.Class isa = 0;
  }
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  v21[4] = partial apply for closure #1 in TextureLoader.loadTexture(name:bundle:options:completionHandler:);
  v21[5] = v19;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 1107296256;
  v21[2] = thunk for @escaping @callee_guaranteed (@guaranteed MTLTexture?, @guaranteed Error?) -> ();
  float32x4_t v21[3] = &block_descriptor_9;
  uint64_t v20 = _Block_copy(v21);
  swift_retain();
  swift_release();
  objc_msgSend(a7, sel_newTextureWithName_scaleFactor_bundle_options_completionHandler_, v17, a3, v18.super.isa, v20, v16);
  _Block_release(v20);
}

void closure #1 in TextureLoader.loadTexture(name:bundle:options:completionHandler:)(uint64_t a1, id a2, void (*a3)(uint64_t, uint64_t))
{
  if (a1)
  {
    uint64_t v5 = swift_unknownObjectRetain();
    a3(v5, 0);
    swift_unknownObjectRelease();
  }
  if (a2)
  {
    id v6 = a2;
    a3((uint64_t)a2, 1);
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MTLTexture?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

id protocol witness for TextureLoaderProtocol.loadTexture(name:bundle:options:) in conformance TextureLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TextureLoader.loadTexture(name:bundle:options:)(a1, a2, a3, a4, *v4);
}

void protocol witness for TextureLoaderProtocol.loadTexture(name:bundle:options:completionHandler:) in conformance TextureLoader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  TextureLoader.loadTexture(name:bundle:options:completionHandler:)(a1, a2, a3, a4, a5, a6, *v6);
}

uint64_t one-time initialization function for textureLoader()
{
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  uint64_t v0 = v5;
  uint64_t v1 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F353B8]), sel_initWithDevice_, (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v1));
  swift_unknownObjectRelease();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  textureLoader = (uint64_t)v2;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1, double a2)
{
  Hasher.init(_seed:)();
  RKARSystem.HitTestScreenPoint.hash(into:)(a1, a2);
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v4, a1, a2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      uint64_t v7 = (double *)(*(void *)(v3 + 48) + 16 * result);
      double v8 = v7[1];
      BOOL v9 = *v7 == a2;
      if (v8 == a3 && v9) {
        break;
      }
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1E4E630D0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t, __n128);
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = a1;
  unint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  double v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  BOOL v9 = -1 << *(unsigned char *)(v2 + 32);
  id v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    double v11 = ~v9;
    id v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v13 = v5 + 16;
    double v12 = v14;
    double v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4, v6);
      lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      double v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      id v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  unint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    double v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    double v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      double v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          double v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          NSDictionary v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RKARSystem.HitTestScreenPoint, CollisionCastHit?>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    unint64_t v36 = v2;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v11 << 6);
      }
      else
      {
        int64_t v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v20 >= v37) {
          goto LABEL_40;
        }
        unint64_t v21 = v38[v20];
        ++v11;
        if (!v21)
        {
          int64_t v11 = v20 + 1;
          if (v20 + 1 >= v37) {
            goto LABEL_40;
          }
          unint64_t v21 = v38[v11];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v37)
            {
LABEL_40:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_47;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v11 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_49;
                }
                if (v11 >= v37) {
                  goto LABEL_40;
                }
                unint64_t v21 = v38[v11];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v22;
          }
        }
LABEL_21:
        unint64_t v15 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      uint64_t v23 = *(void *)(v8 + 56);
      long long v40 = *(_OWORD *)(*(void *)(v8 + 48) + 16 * v19);
      uint64_t v24 = *(void *)(v39 + 72);
      uint64_t v25 = v23 + v24 * v19;
      if (a2) {
        outlined init with take of CollisionCastHit?(v25, (uint64_t)v7);
      }
      else {
        outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v25, (uint64_t)v7, &demangling cache variable for type metadata for CollisionCastHit?);
      }
      Hasher.init(_seed:)();
      if ((v40 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v26 = v40;
      }
      else {
        Swift::UInt64 v26 = 0;
      }
      Hasher._combine(_:)(v26);
      if ((*((void *)&v40 + 1) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v27 = *((void *)&v40 + 1);
      }
      else {
        Swift::UInt64 v27 = 0;
      }
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_48;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v16 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(void *)(v10 + 48) + 16 * v17) = v40;
      uint64_t result = outlined init with take of CollisionCastHit?((uint64_t)v7, *(void *)(v10 + 56) + v24 * v17);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_47:
  *uint64_t v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MTKTextureLoaderOption, Any>);
  uint64_t v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  char v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    BOOL v9 = ~(-1 << v8);
  }
  else {
    BOOL v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  BOOL v33 = (unint64_t)(v8 + 63) >> 6;
  int64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            uint64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v20;
      }
    }
LABEL_21:
    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    unint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    int64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      outlined init with take of Any(v22, v36);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v22, (uint64_t)v36);
      uint64_t v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    Swift::UInt64 v26 = v24 & ~v25;
    Swift::UInt64 v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      uint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        unint64_t v30 = v27 == v29;
        if (v27 == v29) {
          Swift::UInt64 v27 = 0;
        }
        v28 |= v30;
        char v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      uint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)outlined init with take of Any(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ARAnchor>);
  unsigned int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  int64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  else {
    unint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  long long v40 = v3;
  uint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  unint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; int64_t v11 = i)
  {
    if (v16)
    {
      int64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    Swift::UInt64 v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      Swift::UInt64 v26 = v42[v20];
      if (!v26)
      {
        Swift::UInt64 v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        Swift::UInt64 v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            Swift::UInt64 v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    uint64_t v16 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      unint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      unint64_t v30 = *(id *)(*(void *)(v11 + 56) + 8 * v23);
    }
    lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    char v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    BOOL v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        unint64_t v36 = v33 == v35;
        if (v33 == v35) {
          BOOL v33 = 0;
        }
        v34 |= v36;
        int64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  int64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    Swift::UInt64 v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  Swift::UInt64 v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *Swift::UInt64 v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v5 = v14;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, double a3, double a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a2 & 1) == 0)
  {
    if (v17 >= v15 && (a2 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
    unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = v19
        + *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?)
                                - 8)
                    + 72)
        * v12;
    return outlined assign with take of CollisionCastHit?(a1, v20);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v12, a1, v18, a3, a4);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, &demangling cache variable for type metadata for _DictionaryStorage<UUID, ModelEntity>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, __RKFaceMeshEntity>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceImage>>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<ARReferenceObject>>);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [(String, CGFloat)]>);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a5);
LABEL_7:
    uint64_t v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a4 & 1, a5);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v20[2] = v28;

  return swift_bridgeObjectRetain();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v6 = (void **)v4;
  uint64_t v27 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v6;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_release();
      *(void *)(v22 + 8 * v15) = v27;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()(a4);
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1, a4);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  uint64_t v21 = *v6;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, v27, v21);
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, void *a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, a3 & 1);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      unint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for MTKTextureLoaderOption(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    uint64_t v16 = (_OWORD *)(v15[7] + 32 * v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return outlined init with take of Any(a1, v16);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  a3[(a1 >> 6) + 8] |= 1 << a1;
  char v8 = (double *)(a3[6] + 16 * a1);
  *char v8 = a4;
  v8[1] = a5;
  uint64_t v9 = a3[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  uint64_t result = outlined init with take of CollisionCastHit?(a2, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1);
  uint64_t v12 = a3[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a3[2] = v14;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RKARSystem.HitTestScreenPoint, CollisionCastHit?>);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v26 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v16) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v10 + 8 * v12);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_9:
    uint64_t v19 = 16 * v18;
    unint64_t v20 = *(void *)(v3 + 72) * v18;
    uint64_t v21 = *(void *)(v6 + 56) + v20;
    long long v27 = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v18);
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v21, (uint64_t)v5, &demangling cache variable for type metadata for CollisionCastHit?);
    *(_OWORD *)(*(void *)(v8 + 48) + v19) = v27;
    uint64_t result = (void *)outlined init with take of CollisionCastHit?((uint64_t)v5, *(void *)(v8 + 56) + v20);
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v26;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v10 + 8 * v24);
  if (v23)
  {
    int64_t v12 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v10 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ModelEntity>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, __RKFaceMeshEntity>);
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v26 = v1;
  uint64_t v7 = *v1;
  unint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v26 = v9;
    return result;
  }
  uint64_t result = (void *)(v8 + 64);
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  unint64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  int64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  long long v27 = v7 + 64;
  uint64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      uint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      unint64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      int64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    uint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  int64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    unint64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ARAnchor>);
  int64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *int64_t v23 = v7;
    return result;
  }
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    unint64_t v18 = *(void **)(*(void *)(v5 + 56) + v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MTKTextureLoaderOption, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  unint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 64);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      unint64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    uint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t v18 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    unint64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized TextureResource.__allocating_init(named:in:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a4;
  v5[7] = v4;
  uint64_t v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  uint64_t Options = type metadata accessor for TextureResource.CreateOptions();
  v5[8] = Options;
  v5[9] = *(void *)(Options - 8);
  v5[10] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[12] = v8;
  v5[13] = v7;
  return MEMORY[0x1F4188298](specialized TextureResource.__allocating_init(named:in:options:), v8, v7);
}

uint64_t specialized TextureResource.__allocating_init(named:in:options:)()
{
  uint64_t v1 = (void *)v0[5];
  (*(void (**)(void, void, void))(v0[9] + 16))(v0[10], v0[6], v0[8]);
  uint64_t v2 = one-time initialization token for textureLoader;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)textureLoader;
  v0[2] = textureLoader;
  id v5 = v4;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[14] = v6;
  unint64_t v7 = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  *uint64_t v6 = v0;
  v6[1] = specialized TextureResource.__allocating_init(named:in:options:);
  uint64_t v8 = v0[10];
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[5];
  uint64_t v11 = v0[3];
  return MEMORY[0x1F40F5230](v11, v9, v10, v8, v0 + 2, &type metadata for TextureLoader, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  id v3 = v0[6];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t))v0[1];
  id v5 = v0[16];
  return v4(v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  id v3 = v0[6];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t specialized TextureResource.__allocating_init(named:in:options:)(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[12];
    uint64_t v6 = v4[13];
    unint64_t v7 = specialized TextureResource.__allocating_init(named:in:options:);
  }
  else
  {
    v4[16] = a1;
    uint64_t v5 = v4[12];
    uint64_t v6 = v4[13];
    unint64_t v7 = specialized TextureResource.__allocating_init(named:in:options:);
  }
  return MEMORY[0x1F4188298](v7, v5, v6);
}

ValueMetadata *type metadata accessor for TextureLoader()
{
  return &type metadata for TextureLoader;
}

uint64_t sub_1E2A98760()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in TextureLoader.loadTexture(name:bundle:options:completionHandler:)(uint64_t a1, void *a2)
{
  closure #1 in TextureLoader.loadTexture(name:bundle:options:completionHandler:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t lazy protocol witness table accessor for type MTKTextureLoaderOption and conformance MTKTextureLoaderOption(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of CollisionCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CollisionCastHit?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static ParticleEmitterComponent.Presets.fireworks.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v117 = (char *)&v100 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParticleEmitterComponent.ParticleEmitter.ImageSequence?);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v116 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode();
  uint64_t v128 = *(char **)(v111 - 8);
  MEMORY[0x1F4188790](v111);
  uint64_t v110 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder();
  v132 = *(char **)(v121 - 8);
  MEMORY[0x1F4188790](v121);
  uint64_t v109 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve();
  uint64_t v131 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126);
  id v120 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode();
  uint64_t v129 = *(void *)(v125 - 8);
  MEMORY[0x1F4188790](v125);
  Class v118 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode();
  uint64_t v130 = *(void *)(v123 - 8);
  MEMORY[0x1F4188790](v123);
  uint64_t v119 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v108 = (void *)type metadata accessor for ParticleEmitterComponent.SpawnOccasion();
  uint64_t v107 = *(v108 - 1);
  MEMORY[0x1F4188790](v108);
  uint64_t v106 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for ParticleEmitterComponent.SimulationSpace();
  char v104 = *(void (***)(char *, void, uint64_t))(v105 - 8);
  MEMORY[0x1F4188790](v105);
  uint64_t v103 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for ParticleEmitterComponent.EmitterShape();
  uint64_t v101 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  unint64_t v14 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v122 = type metadata accessor for ParticleEmitterComponent.BirthLocation();
  uint64_t v15 = *(void *)(v122 - 8);
  MEMORY[0x1F4188790](v122);
  uint64_t v17 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ParticleEmitterComponent.BirthDirection();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  int64_t v21 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence();
  uint64_t v114 = *(void *)(v115 - 8);
  MEMORY[0x1F4188790](v115);
  uint64_t v124 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  int64_t v25 = (char *)&v100 - v24;
  uint64_t v127 = type metadata accessor for ParticleEmitterComponent.ParticleEmitter();
  uint64_t v113 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  uint64_t v112 = (char *)&v100 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v100 - v28;
  ParticleEmitterComponent.init()();
  ParticleEmitterComponent.ParticleEmitter.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()();
  (*(void (**)(char *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4F3ADC0], v18);
  ParticleEmitterComponent.birthDirection.setter();
  (*(void (**)(char *, void, void))(v15 + 104))(v17, *MEMORY[0x1E4F3AD98], v122);
  ParticleEmitterComponent.birthLocation.setter();
  long long v122 = xmmword_1E2ABE4F0;
  ParticleEmitterComponent.emissionDirection.setter();
  ParticleEmitterComponent.emissionDuration.setter();
  ParticleEmitterComponent.emissionDurationVariation.setter();
  (*(void (**)(char *, void, uint64_t))(v101 + 104))(v14, *MEMORY[0x1E4F3AD10], v102);
  ParticleEmitterComponent.emitterShape.setter();
  ParticleEmitterComponent.emitterShapeSize.setter();
  ParticleEmitterComponent.idleDuration.setter();
  ParticleEmitterComponent.idleDurationVariation.setter();
  ParticleEmitterComponent.shouldLoop.setter();
  ParticleEmitterComponent.particlesInheritTransform.setter();
  v104[13](v103, *MEMORY[0x1E4F3ADC8], v105);
  ParticleEmitterComponent.fieldSimulationSpace.setter();
  ParticleEmitterComponent.spawnInheritsParentColor.setter();
  (*(void (**)(char *, void, void *))(v107 + 104))(v106, *MEMORY[0x1E4F3ADA8], v108);
  ParticleEmitterComponent.spawnOccasion.setter();
  ParticleEmitterComponent.spawnSpreadFactor.setter();
  ParticleEmitterComponent.spawnSpreadFactorVariation.setter();
  ParticleEmitterComponent.spawnVelocityFactor.setter();
  ParticleEmitterComponent.speed.setter();
  ParticleEmitterComponent.speedVariation.setter();
  ParticleEmitterComponent.warmupDuration.setter();
  ParticleEmitterComponent.resetSimulation()();
  uint64_t v30 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  v30(v133, 0);
  uint64_t v31 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  v31(v133, 0);
  uint64_t v32 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  v32(v133, 0);
  uint64_t v33 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  v33(v133, 0);
  uint64_t v34 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  v34(v133, 0);
  int64_t v35 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  v35(v133, 0);
  uint64_t v36 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  v36(v133, 0);
  LODWORD(v107) = *MEMORY[0x1E4F3AD48];
  char v37 = *(void (**)(void))(v130 + 104);
  v130 += 104;
  id v108 = v37;
  v37(v119);
  BOOL v38 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  v38(v133, 0);
  uint64_t v39 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  v39(v133, 0);
  uint64_t v40 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  v40(v133, 0);
  LODWORD(v105) = *MEMORY[0x1E4F3AD70];
  uint64_t v41 = *(char **)(v129 + 104);
  v129 += 104;
  uint64_t v106 = v41;
  ((void (*)(char *))v41)(v118);
  uint64_t v42 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  v42(v133, 0);
  int64_t v43 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  v43(v133, 0);
  uint64_t v44 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  v44(v133, 0);
  int64_t v45 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  v45(v133, 0);
  unsigned int v46 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  v46(v133, 0);
  uint64_t v47 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  v47(v133, 0);
  int v48 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  v48(v133, 0);
  uint64_t v49 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  v49(v133, 0);
  uint64_t v50 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  v50(v133, 0);
  Swift::Int v51 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  v51(v133, 0);
  uint64_t v52 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  v52(v133, 0);
  uint64_t v53 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  v53(v133, 0);
  uint64_t v54 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  v54(v133, 0);
  uint64_t v55 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  v55(v133, 0);
  uint64_t v56 = *MEMORY[0x1E4F3AD40];
  uint64_t v57 = *(void (***)(char *, void, uint64_t))(v131 + 104);
  v131 += 104;
  char v104 = v57;
  ((void (*)(char *, uint64_t, uint64_t))v57)(v120, v56, v126);
  uint64_t v58 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  v58(v133, 0);
  unsigned int v59 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  v59(v133, 0);
  uint64_t v60 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  v60(v133, 0);
  uint64_t v61 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  v61(v133, 0);
  uint64_t v62 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  v62(v133, 0);
  uint64_t v63 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  v63(v133, 0);
  uint64_t v64 = *MEMORY[0x1E4F3AD88];
  char v65 = (char *)*((void *)v132 + 13);
  v132 += 104;
  uint64_t v103 = v65;
  uint64_t v66 = v109;
  ((void (*)(char *, uint64_t, uint64_t))v65)(v109, v64, v121);
  uint64_t v67 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  v67(v133, 0);
  uint64_t v68 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  v68(v133, 0);
  uint64_t v69 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  v69(v133, 0);
  uint64_t v70 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  v70(v133, 0);
  CGColorCreateGenericRGB(226.0, 0.0, 27.0, 1.0);
  id v71 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  v71(v133, 0);
  CGColorCreateGenericRGB(0.0, 104.0, 184.0, 1.0);
  id v72 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  v72(v133, 0);
  char v73 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  v73(v133, 0);
  char v74 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  v74(v133, 0);
  uint64_t v75 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  v75(v133, 0);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  uint64_t v76 = *MEMORY[0x1E4F3AD58];
  uint64_t v77 = (void (*)(char *, uint64_t, uint64_t))*((void *)v128 + 13);
  uint64_t v78 = v110;
  uint64_t v79 = v111;
  v77(v110, v76, v111);
  uint64_t v128 = v25;
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  ParticleEmitterComponent.ParticleEmitter.acceleration.setter();
  ParticleEmitterComponent.ParticleEmitter.angle.setter();
  ParticleEmitterComponent.ParticleEmitter.angleVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter();
  ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter();
  ((void (*)(char *, void, uint64_t))v108)(v119, v107, v123);
  ParticleEmitterComponent.ParticleEmitter.billboardMode.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRate.setter();
  ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter();
  ((void (*)(char *, void, uint64_t))v106)(v118, v105, v125);
  ParticleEmitterComponent.ParticleEmitter.blendMode.setter();
  ParticleEmitterComponent.ParticleEmitter.bounce.setter();
  ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter();
  ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.friction.setter();
  ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter();
  ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.mass.setter();
  ParticleEmitterComponent.ParticleEmitter.massVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseScale.setter();
  ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter();
  ((void (*)(char *, void, uint64_t))v104)(v120, *MEMORY[0x1E4F3AD30], v126);
  ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter();
  ParticleEmitterComponent.ParticleEmitter.size.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter();
  ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter();
  ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter();
  ((void (*)(char *, void, uint64_t))v103)(v66, *MEMORY[0x1E4F3AD78], v121);
  ParticleEmitterComponent.ParticleEmitter.sortOrder.setter();
  ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter();
  ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter();
  CGColorCreateGenericRGB(244.0, 129.0, 29.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorA.setter();
  CGColorCreateGenericRGB(97.0, 184.0, 26.0, 1.0);
  ParticleEmitterComponent.ParticleEmitter.startColorB.setter();
  ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColor.setter();
  ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter();
  char v80 = v124;
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter();
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter();
  v77(v78, v76, v79);
  ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter();
  type metadata accessor for TextureResource();
  uint64_t v81 = (void *)MEMORY[0x1E4E62C20](0xD000000000000010, 0x80000001E2AB8BE0);
  id v82 = objc_msgSend(self, sel_bundleWithIdentifier_, v81);

  if (one-time initialization token for textureLoader != -1) {
    swift_once();
  }
  uint64_t v83 = (void *)textureLoader;
  v133[3] = &type metadata for TextureLoader;
  v133[4] = lazy protocol witness table accessor for type TextureLoader and conformance TextureLoader();
  v133[0] = v83;
  id v84 = v83;
  static TextureResource.load(named:in:textureLoader:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);

  uint64_t v85 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  v85(v133, 0);
  uint64_t v86 = v112;
  ParticleEmitterComponent.mainEmitter.getter();
  ParticleEmitterComponent.ParticleEmitter.image.getter();
  uint64_t v130 = a1;
  uint64_t v87 = v113;
  uint64_t v88 = *(char **)(v113 + 8);
  uint64_t v131 = v113 + 8;
  v132 = v88;
  ((void (*)(char *, uint64_t))v88)(v86, v127);
  uint64_t v89 = v29;
  ParticleEmitterComponent.ParticleEmitter.image.setter();
  uint64_t v90 = v114;
  uint64_t v91 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
  uint64_t v92 = v116;
  uint64_t v93 = v115;
  v91(v116, v80, v115);
  uint64_t v94 = *(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56);
  v94(v92, 0, 1, v93);
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v91(v92, v128, v93);
  v94(v92, 0, 1, v93);
  uint64_t v95 = (void (*)(void *, void))ParticleEmitterComponent.mainEmitter.modify();
  ParticleEmitterComponent.ParticleEmitter.imageSequence.setter();
  v95(v133, 0);
  uint64_t v96 = v117;
  uint64_t v97 = v127;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v117, v89, v127);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v96, 0, 1, v97);
  ParticleEmitterComponent.spawnedEmitter.setter();
  uint64_t v98 = *(void (**)(char *, uint64_t))(v90 + 8);
  v98(v124, v93);
  v98(v128, v93);
  return ((uint64_t (*)(char *, uint64_t))v132)(v89, v97);
}

uint64_t MultipeerConnectivityService.coreMultipeerConnectivityService.getter()
{
  return *(void *)(v0 + 24);
}

id MultipeerConnectivityService.session.getter()
{
  return *(id *)(v0 + 56);
}

uint64_t MultipeerConnectivityService.__allocating_init(session:)(void *a1)
{
  uint64_t v2 = swift_allocObject();
  MultipeerConnectivityService.init(session:)(a1);
  return v2;
}

uint64_t MultipeerConnectivityService.init(session:)(void *a1)
{
  uint64_t v2 = v1;
  v2[2] = 0;
  v2[6] = 0x61A800000002;
  if (objc_msgSend(a1, sel_encryptionPreference) != (id)1)
  {
    lazy protocol witness table accessor for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError();
    swift_allocError();
    *uint64_t v8 = 0;
    swift_willThrow();

    type metadata accessor for MultipeerConnectivityService();
    swift_deallocPartialClassInstance();
    return (uint64_t)v2;
  }
  v2[7] = a1;
  type metadata accessor for __ServiceLocator();
  id v4 = a1;
  static __ServiceLocator.shared.getter();
  uint64_t v5 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  v2[4] = v5;
  uint64_t result = MEMORY[0x1E4E64100](v5);
  if (result)
  {
    v2[5] = result;
    uint64_t v7 = RENetworkSystemEnableMultipeerConnectivity();

    v2[3] = v7;
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall MultipeerConnectivityService.setHandshake(count:timeoutMs:)(Swift::UInt32 count, Swift::UInt32 timeoutMs)
{
  *(_DWORD *)(v2 + 48) = count;
  *(_DWORD *)(v2 + 52) = timeoutMs;
}

uint64_t MultipeerConnectivityService.entity(for:)()
{
  uint64_t result = RENetworkSystemFindEntityWithGuid();
  if (result)
  {
    type metadata accessor for Entity();
    return static Entity.fromCore(_:ignoringEntityInfo:)();
  }
  return result;
}

double MultipeerConnectivityService.owner(of:)@<D0>(uint64_t a1@<X8>)
{
  Entity.coreEntity.getter();
  RENetworkComponentGetComponentType();
  if (REEntityGetComponentByClass()
    && (uint64_t v3 = RENetworkComponentOwnerPeerID(),
        id v4 = (id)MEMORY[0x1E4E63B10](*(void *)(v1 + 24), v3),
        _bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        unint64_t v5 = type metadata accessor for MCPeerID(),
        swift_dynamicCast()))
  {
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = &protocol witness table for MCPeerID;
    *(void *)a1 = v7;
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t MultipeerConnectivityService.giveOwnership(of:toPeer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Entity.coreEntity.getter();
  RENetworkComponentGetComponentType();
  uint64_t result = REEntityGetComponentByClass();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t result = RENetworkComponentIsAuthoritative();
    if (result)
    {
      outlined init with copy of SynchronizationPeerID(a2, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID);
      type metadata accessor for MCPeerID();
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v7 = MEMORY[0x1E4E63B00](*(void *)(v3 + 24));
        if (v7)
        {
          MEMORY[0x1E4E63C20](v6, v7);

          return 1;
        }
        else
        {

          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t MultipeerConnectivityService.__fromCore(peerID:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 24);
  __PeerIDRef.__as<A>(_:)();
  id v4 = (id)MEMORY[0x1E4E63B10](v3);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  unint64_t v5 = type metadata accessor for MCPeerID();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v7 = v8;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = &protocol witness table for MCPeerID;
  }
  else
  {
    uint64_t v7 = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(void *)a1 = v7;
  return result;
}

uint64_t MultipeerConnectivityService.__toCore(peerID:)(uint64_t a1)
{
  outlined init with copy of SynchronizationPeerID(a1, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SynchronizationPeerID);
  type metadata accessor for MCPeerID();
  if (swift_dynamicCast())
  {
    uint64_t v2 = MEMORY[0x1E4E63B00](*(void *)(v1 + 24));
    uint64_t v6 = MEMORY[0x1E4FBC538];
    v5[0] = v2;
    static __PeerIDRef.__fromCore(_:)();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC538];
    v5[0] = 0;
    static __PeerIDRef.__fromCore(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

Swift::Void __swiftcall MultipeerConnectivityService.startSync()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  MEMORY[0x1E4E63B20](v1, *(unsigned int *)(v0 + 48), *(unsigned int *)(v0 + 52));
  MEMORY[0x1E4E63B30](v1, *(void *)(v0 + 56));
  uint64_t v2 = *(void *)(v0 + 32);
  MEMORY[0x1E4E63AF0](v1);
  REAssetRegisterAssetSyncNetworkSession();
  if (MEMORY[0x1E4E64150](v2))
  {
    MEMORY[0x1E4E63AF0](v1);
    RESharedClockServiceSetSession();
  }
}

Swift::Void __swiftcall MultipeerConnectivityService.stopSync()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  REAssetUnregisterAssetSyncNetworkSession();
  MEMORY[0x1E4E63B40](*(void *)(v0 + 24));
  if (MEMORY[0x1E4E64150](v1))
  {
    RESharedClockServiceSetSession();
  }
}

uint64_t MultipeerConnectivityService.deinit()
{
  return v0;
}

uint64_t MultipeerConnectivityService.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError()
{
  unint64_t result = lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError;
  if (!lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError;
  if (!lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultipeerConnectivityService.SynchronizationError and conformance MultipeerConnectivityService.SynchronizationError);
  }
  return result;
}

uint64_t type metadata accessor for MultipeerConnectivityService()
{
  return self;
}

unint64_t type metadata accessor for MCPeerID()
{
  unint64_t result = lazy cache variable for type metadata for MCPeerID;
  if (!lazy cache variable for type metadata for MCPeerID)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MCPeerID);
  }
  return result;
}

uint64_t method lookup function for MultipeerConnectivityService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MultipeerConnectivityService);
}

uint64_t dispatch thunk of MultipeerConnectivityService.__allocating_init(session:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.setHandshake(count:timeoutMs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.entity(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.owner(of:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.giveOwnership(of:toPeer:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.__fromCore(peerID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.__toCore(peerID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.startSync()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MultipeerConnectivityService.stopSync()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

unsigned char *storeEnumTagSinglePayload for MultipeerConnectivityService.SynchronizationError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2A9AABCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MultipeerConnectivityService.SynchronizationError()
{
  return &type metadata for MultipeerConnectivityService.SynchronizationError;
}

uint64_t type metadata accessor for __RKFaceMeshEntity(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for __RKFaceMeshEntity);
}

uint64_t type metadata completion function for __RKFaceMeshEntity()
{
  return swift_initClassMetadata2();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, double a2, double a3)
{
  unsigned int v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit??);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(a1, 1, v11) == 1)
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a1, &demangling cache variable for type metadata for CollisionCastHit??);
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v16)
    {
      unint64_t v17 = v15;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v19 = *v4;
      uint64_t v23 = *v4;
      *unsigned int v4 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v19 = v23;
      }
      outlined init with take of vImage_CGImageFormat?(*(void *)(v19 + 56) + *(void *)(v12 + 72) * v17, (uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit?);
      specialized _NativeDictionary._delete(at:)(v17, v19);
      *unsigned int v4 = v19;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    }
    return outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v10, &demangling cache variable for type metadata for CollisionCastHit??);
  }
  else
  {
    outlined init with take of vImage_CGImageFormat?(a1, (uint64_t)v14, &demangling cache variable for type metadata for CollisionCastHit?);
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v4;
    *unsigned int v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, v20, a2, a3);
    *unsigned int v4 = v23;
    return swift_bridgeObjectRelease();
  }
}

uint64_t RKARSystem.debugAnchorPlaneMaterial.getter@<X0>(uint64_t a1@<X8>)
{
  return RKARSystem.debugAnchorPlaneMaterial.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugAnchorPlaneMaterial, a1, 1.0, 0.0);
}

uint64_t RKARSystem.debugProbeMaterial.getter@<X0>(uint64_t a1@<X8>)
{
  return RKARSystem.debugAnchorPlaneMaterial.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugProbeMaterial, a1, 0.0, 1.0);
}

uint64_t RKARSystem.debugAnchorPlaneMaterial.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>, Swift::Float a3@<S0>, Swift::Float a4@<S1>)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnlitMaterial?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = &v21[-v13];
  uint64_t v15 = v4 + *a1;
  swift_beginAccess();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v15, (uint64_t)v14, &demangling cache variable for type metadata for UnlitMaterial?);
  uint64_t v16 = type metadata accessor for UnlitMaterial();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v17 + 32))(a2, v14, v16);
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v14, &demangling cache variable for type metadata for UnlitMaterial?);
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  Class isa = UIColor.init(_colorLiteralRed:green:blue:alpha:)(0.0, a3, a4, 0.6).super.isa;
  id v19 = [(objc_class *)isa CGColor];
  UnlitMaterial.init(color:)();

  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v11, a2, v16);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)v11, v15, &demangling cache variable for type metadata for UnlitMaterial?);
  return swift_endAccess();
}

uint64_t RKARSystem.cameraRenderGraph.getter()
{
  return RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___cameraRenderGraph);
}

uint64_t RKARSystem.cachedGestureHitTest(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v4 = v3;
  uint64_t v43 = a1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit??);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v42 = (uint64_t)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CollisionGroup();
  uint64_t v39 = *(void *)(v9 - 8);
  uint64_t v40 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Type = type metadata accessor for CollisionCastQueryType();
  uint64_t v13 = *(void *)(Type - 8);
  MEMORY[0x1F4188790](Type);
  uint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?);
  uint64_t v16 = *(void *)(v41 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v41);
  id v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  int64_t v21 = (char *)v38 - v20;
  uint64_t v22 = (uint64_t *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cachedGestureHitTestResults);
  swift_beginAccess();
  uint64_t v23 = *v22;
  if (*(void *)(*v22 + 16))
  {
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v25)
    {
      outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(*(void *)(v23 + 56) + *(void *)(v16 + 72) * v24, (uint64_t)v21, &demangling cache variable for type metadata for CollisionCastHit?);
      outlined init with take of vImage_CGImageFormat?((uint64_t)v21, v43, &demangling cache variable for type metadata for CollisionCastHit?);
      return swift_endAccess();
    }
  }
  swift_endAccess();
  uint64_t v27 = MEMORY[0x1E4E64ED0](v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!v27)
  {
    uint64_t v30 = type metadata accessor for CollisionCastHit();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v19, 1, 1, v30);
LABEL_14:
    uint64_t v35 = v42;
    uint64_t v36 = v43;
    uint64_t v37 = v41;
    outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v19, v42, &demangling cache variable for type metadata for CollisionCastHit?);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v35, 0, 1, v37);
    swift_beginAccess();
    specialized Dictionary.subscript.setter(v35, a2, a3);
    swift_endAccess();
    return outlined init with take of vImage_CGImageFormat?((uint64_t)v19, v36, &demangling cache variable for type metadata for CollisionCastHit?);
  }
  uint64_t v28 = (char *)v27;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4F3A9E0], Type);
  static CollisionGroup.all.getter();
  ARView.ray(through:)(v44);
  uint64_t result = outlined init with take of vImage_CGImageFormat?((uint64_t)v44, (uint64_t)v45, &demangling cache variable for type metadata for (origin: SIMD3<Float>, direction: SIMD3<Float>)?);
  if (v46)
  {

    uint64_t v29 = MEMORY[0x1E4FBC860];
LABEL_10:
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v40);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, Type);
    uint64_t v31 = *(void *)(v29 + 16);
    uint64_t v32 = type metadata accessor for CollisionCastHit();
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = v33;
    if (v31)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v19, v29 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80)), v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v19, 0, 1, v32);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v19, 1, 1, v32);
    }
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (*(void *)&v28[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
    v38[1] = v45[1];
    v38[0] = v45[0];
    swift_retain();
    uint64_t v29 = Scene.raycast(origin:direction:length:query:mask:relativeTo:)();

    swift_release();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void RKARSystem.update(engine:viewportSize:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for OSSignpostID();
  MEMORY[0x1F4188790](v8 - 8);
  CFTimeInterval v9 = CACurrentMediaTime();
  id v10 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_configuration);
  if (v10)
  {
    uint64_t v11 = v10;
    self;
    id v10 = (id)swift_dynamicCastObjCClass();
    if (!v10)
    {

      id v10 = 0;
    }
  }
  int v12 = v10 != 0;

  int v13 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_isFaceSession);
  *(unsigned char *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_isFaceSession) = v12;
  if (v12 != v13)
  {
    uint64_t v14 = MEMORY[0x1E4E64ED0](v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      ARView.updateEnvironment()();
    }
  }
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) == 1 || a2 <= 0.0 || a3 <= 0.0)
  {
    static __REOSLog.UpdateLoop.getter();
    static __RESignpostID.UpdateLoop.getter();
    type metadata accessor for __REOSSignpostScope();
    swift_allocObject();
    __REOSSignpostScope.init(osLog:signpostID:name:)();
    swift_release();
    RKARSystem.updateLighting()();
    RKARSystem.updateCollaborationState()();
    RKARSystem.updateSceneUnderstandingOptions()();
  }
  else
  {
    specialized RKARSystem.updateAR(engine:viewportSize:timeDelta:)(a1, a2, a3);
  }
  uint64_t v16 = OBJC_IVAR____TtC10RealityKit10RKARSystem_lastUpdateTime;
  specialized RKARSystem.updateCommon(engine:viewportSize:timeDelta:)();
  *(CFTimeInterval *)(v4 + v16) = v9;
}

uint64_t RKARSystem.postProcessingCombinedRenderGraph.getter()
{
  return RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedRenderGraph);
}

uint64_t RKARSystem.cameraRenderGraph.getter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = *(void *)(v1 + *a1);
  if (!result)
  {
    uint64_t v4 = v1;
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v5 = dispatch thunk of __Engine.services.getter();
      uint64_t result = swift_release();
      if (v5)
      {
        dispatch thunk of __ServiceLocator.assetService.getter();
        swift_release();
        uint64_t v6 = v9;
        uint64_t v7 = v10;
        __swift_project_boxed_opaque_existential_1(v8, v9);
        (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        uint64_t result = REAssetManagerCreateAssetHandle();
        if (result)
        {
          *(void *)(v4 + v2) = result;
          return result;
        }
LABEL_9:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t RKARSystem.postProcessingCombinedHDRRenderGraph.getter()
{
  return RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedHDRRenderGraph);
}

uint64_t __RKFaceMeshEntity.__allocating_init()()
{
  return Entity.init()();
}

uint64_t __RKFaceMeshEntity.__deallocating_deinit()
{
  Entity.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for __RKFaceMeshEntity()
{
  return type metadata accessor for __RKFaceMeshEntity(0);
}

void @objc RKARSystem.SessionDelegate.session(_:didAdd:)(char *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for ARAnchor);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = MEMORY[0x1E4E64ED0](&a1[OBJC_IVAR____TtCC10RealityKit10RKARSystemP33_7C42569567E429B6AB2725E2C535D52915SessionDelegate_system]);
  if (v9)
  {
    id v12 = (id)v9;
    id v10 = a3;
    uint64_t v11 = a1;
    a5(v8);

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id RKARSystem.SessionDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RKARSystem.SessionDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void RKARSystem.session.didset(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __AnyARKitObject();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = MEMORY[0x1F4188790](v4).n128_u64[0];
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_forceEnvironmentTexturingToManualMode_, 1, v6);
  uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_delegate);
  objc_msgSend(a1, sel__removeObserver_, v10);
  objc_msgSend(*(id *)(v2 + v9), sel__addObserver_, v10);
  uint64_t v11 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  uint64_t v12 = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v12)
  {
    int v13 = (void *)v12;
    uint64_t v14 = (uint64_t *)(v12 + OBJC_IVAR____TtC10RealityKit6ARView_realityFusionSession);
    swift_beginAccess();
    uint64_t v15 = *v14;
    swift_retain();

    if (v15)
    {
      unint64_t v24 = *(void **)(v2 + v9);
      uint64_t v16 = v24;
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARSession);
      id v17 = v16;
      __AnyARKitObject.init<A>(_:)();
      RealityFusionSession.configure(with:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  uint64_t v18 = MEMORY[0x1E4E64ED0](v11);
  if (v18)
  {
    id v19 = (void *)v18;
    if (!*(void *)(v18 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      __break(1u);
      return;
    }
    swift_retain();

    id v20 = *(id *)(v2 + v9);
    dispatch thunk of Scene.session.setter();
    swift_release();
  }
  uint64_t v21 = MEMORY[0x1E4E64ED0](v11);
  if (v21)
  {
    uint64_t v22 = (void *)v21;
    uint64_t v23 = v21 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
    swift_beginAccess();
    *(unsigned char *)(v23 + 2) = 0;
  }
}

void RKARSystem.cameraMode.didset(unsigned __int8 *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode;
  int v4 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode);
  if (*a1 != v4)
  {
    uint64_t v8 = (char *)MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v8)
    {
      uint64_t v5 = swift_retain();
      specialized ARView.__renderGraphEmitter.setter(v5);
      swift_release();
      ARView.updateEnvironment()();
      if (*(unsigned char *)(v2 + v3) == 1)
      {
        double v6 = &v8[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
        swift_beginAccess();
        if (v6[2] == 1)
        {
          id v7 = objc_msgSend(v8, sel_session);
          objc_msgSend(v7, sel_pause);

          return;
        }
      }
      else
      {
        ARView.updateARSession(restartIfPaused:)(1);
      }
    }
  }
}

uint64_t RKARSystem.orientation.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  uint64_t v2 = (char *)MEMORY[0x1E4E64ED0](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v2)
  {
    if (v2[OBJC_IVAR____TtC10RealityKit6ARView_viewCounterRotating] == 1)
    {
      id v3 = *(id *)&v2[OBJC_IVAR____TtC10RealityKit6ARView_lastInterfaceOrientation];

      return (uint64_t)v3;
    }
  }
  int v4 = (void *)MEMORY[0x1E4E64ED0](v1);
  if (!v4) {
    return 3;
  }
  uint64_t v5 = v4;
  id v6 = objc_msgSend(v4, sel_window);

  if (!v6) {
    return 3;
  }
  id v7 = objc_msgSend(v6, sel_windowScene);

  if (!v7) {
    return 3;
  }
  id v3 = objc_msgSend(v7, sel_interfaceOrientation);

  if (!v3) {
    return 3;
  }
  return (uint64_t)v3;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RKARSystem.HashableARAnchor()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  int v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  Hasher.init(_seed:)();
  id v6 = objc_msgSend(v5, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RKARSystem.HashableARAnchor()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  *(void *)&double v3 = MEMORY[0x1F4188790](v1).n128_u64[0];
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(*v0, sel_identifier, v3);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RKARSystem.HashableARAnchor()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  Hasher.init(_seed:)();
  id v6 = objc_msgSend(v5, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RKARSystem.HashableARAnchor(id *a1, void **a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v9 = MEMORY[0x1F4188790](v8).n128_u64[0];
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = *a2;
  id v13 = objc_msgSend(*a1, sel_identifier, v9);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v14 = objc_msgSend(v12, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v14) = static UUID.== infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v7, v4);
  v15(v11, v4);
  return v14 & 1;
}

CGColorRef one-time initialization function for defaultAmbientColor()
{
  CGColorRef result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  static RKARSystem.defaultAmbientColor = (uint64_t)result;
  return result;
}

uint64_t one-time initialization function for __useARQuickLookFeatheringSettings()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1
    && (uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        uint64_t v4 = v3,
        v1,
        v2 == 0xD000000000000024)
    && v4 == 0x80000001E2ABB710)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v6 = 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
  }
  static RKARSystem.__useARQuickLookFeatheringSettings = v6 & 1;
  return result;
}

void RKARSystem.renderOptions.didset(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for __AssetRef();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v15[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  uint64_t v9 = OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions;
  unint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
  if (((*a1 & 0x100) == 0) != ((v10 >> 8) & 1)) {
    goto LABEL_5;
  }
  if (!swift_weakLoadStrong())
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v11 = dispatch thunk of __Engine.services.getter();
  swift_release();
  if (!v11)
  {
LABEL_15:
    __break(1u);
    return;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  uint64_t v12 = v16;
  uint64_t v13 = v17;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  RERenderManagerSetEnableProbeLighting();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  unint64_t v10 = *(void *)(v2 + v9);
LABEL_5:
  if (((v8 & 4) == 0) == ((v10 >> 2) & 1))
  {
    RKARSystem.showGroundingShadow(_:)((v10 & 4) == 0);
    unint64_t v10 = *(void *)(v2 + v9);
  }
  if (((v8 & 8) == 0) == ((v10 >> 3) & 1))
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    unint64_t v10 = *(void *)(v2 + v9);
  }
  if (((v8 & 0x10) == 0) == ((v10 >> 4) & 1))
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    unint64_t v10 = *(void *)(v2 + v9);
  }
  if (((v8 & 0x20) == 0) == ((v10 >> 5) & 1))
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
  }
}

uint64_t RKARSystem.init(engine:arView:)(uint64_t a1, char *a2)
{
  uint64_t v83 = a2;
  uint64_t v84 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v82 = type metadata accessor for __AssetRef();
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  char v80 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RKARSegmentationComponent?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v79 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PerspectiveCameraComponent?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v78 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  uint64_t v8 = OBJC_IVAR____TtC10RealityKit10RKARSystem_delegate;
  id v9 = objc_allocWithZone((Class)type metadata accessor for RKARSystem.SessionDelegate());
  unint64_t v10 = v2;
  *(void *)&v2[v8] = objc_msgSend(v9, sel_init);
  uint64_t v76 = OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v11 = &v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame];
  *(_OWORD *)uint64_t v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_isFaceSession] = 0;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_useLowSampleAA] = 0;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_updateCameraViewDescriptorSettings] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_prevOrientation] = 0;
  uint64_t v12 = &v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_suDepthFeatheringMaterial];
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  uint64_t v75 = (uint64_t)v12;
  *((void *)v12 + 4) = 0;
  uint64_t v13 = &v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraPassthroughMaterial];
  *((void *)v13 + 4) = 0;
  *(_OWORD *)uint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  uint64_t v74 = (uint64_t)v13;
  id v14 = &v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraSegmentationCompositeMaterial];
  *(_OWORD *)id v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  uint64_t v73 = (uint64_t)v14;
  *((void *)v14 + 4) = 0;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v72 = OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraCombinedPostProcessMaterials;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraCombinedPostProcessMaterials] = MEMORY[0x1E4FBC860];
  uint64_t v16 = MEMORY[0x1E4FBC870];
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_addedAnchors] = MEMORY[0x1E4FBC870];
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_updatedAnchors] = v16;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_removedAnchors] = v16;
  uint64_t v17 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
  *(void *)&v10[v17] = dispatch_semaphore_create(1);
  uint64_t v18 = OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier;
  *(void *)&v10[v18] = specialized Dictionary.init(dictionaryLiteral:)(v15);
  uint64_t v19 = OBJC_IVAR____TtC10RealityKit10RKARSystem_shadowReceiverEntitiesByAnchorIdentifier;
  *(void *)&v10[v19] = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_lastUpdateTime] = 0;
  *(_DWORD *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientIntensity] = 0;
  uint64_t v20 = OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor;
  if (one-time initialization token for defaultAmbientColor != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)static RKARSystem.defaultAmbientColor;
  *(void *)&v10[v20] = static RKARSystem.defaultAmbientColor;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_zNear] = 0x3F847AE147AE147BLL;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_zFar] = 0x408F400000000000;
  uint64_t v22 = &v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix];
  long long v23 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 16);
  long long v24 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 32);
  long long v25 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 48);
  *(_OWORD *)uint64_t v22 = *MEMORY[0x1E4F149A0];
  *((_OWORD *)v22 + 1) = v23;
  *((_OWORD *)v22 + 2) = v24;
  *((_OWORD *)v22 + 3) = v25;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraNoiseRandomTranslation] = 0;
  *(_DWORD *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent] = 0;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame] = 1;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame] = 1;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement] = 1;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted] = 0;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_needInitialCollaborationData] = 1;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_netSessionObserver] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_connectedPeers] = v15;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___cameraRenderGraph] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___depthOfFieldRenderGraph] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___motionBlurRenderGraph] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedRenderGraph] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedHDRRenderGraph] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] = 0;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugAxisEntity] = 0;
  uint64_t v26 = &v10[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugAnchorPlaneMaterial];
  uint64_t v27 = type metadata accessor for UnlitMaterial();
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
  v28(v26, 1, 1, v27);
  v28(&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugProbeMaterial], 1, 1, v27);
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_worldOrigin] = 0;
  uint64_t v29 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier;
  id v30 = v21;
  *(void *)&v10[v29] = specialized Dictionary.init(dictionaryLiteral:)(v15);
  uint64_t v31 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier;
  *(void *)&v10[v31] = specialized Dictionary.init(dictionaryLiteral:)(v15);
  uint64_t v32 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier;
  *(void *)&v10[v32] = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugFeaturePointUpdateRate] = 0x3FB999999999999ALL;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_timeSinceLastDebugFeaturePointUpdate] = 0x3FF0000000000000;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_debugFeaturePoints] = v15;
  uint64_t v33 = OBJC_IVAR____TtC10RealityKit10RKARSystem_cachedGestureHitTestResults;
  *(void *)&v10[v33] = specialized Dictionary.init(dictionaryLiteral:)(v15);
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem___renderQuality] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_lastARFrameTimeStamp] = 0;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_maxNumberOfAttemptsToGetARFrameInDuplicateCase] = 5;
  *(_DWORD *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_sleepDurationInDuplicateARFrameCase] = 500;
  v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_shouldRenderCameraFeed] = 1;
  swift_weakAssign();
  uint64_t v34 = v83;
  swift_unknownObjectWeakAssign();
  id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F14F20]), sel_init);
  uint64_t v36 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_session] = v35;
  uint64_t v37 = v34;
  if (!specialized static RKARSystem.cameraUsageDescriptionInPlist.getter()) {
    v10[v76] = 1;
  }
  uint64_t result = dispatch thunk of __Engine.services.getter();
  if (!result)
  {
    __break(1u);
    goto LABEL_25;
  }
  dispatch thunk of __ServiceLocator.renderService.getter();
  swift_release();
  uint64_t v39 = v91;
  uint64_t v40 = v92;
  __swift_project_boxed_opaque_existential_1(v90, v91);
  uint64_t v41 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v39, v40);
  type metadata accessor for RKARTextureCache();
  swift_allocObject();
  uint64_t result = RKARTextureCache.init(device:)(v41);
  *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache] = result;
  uint64_t v42 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  if (!*(void *)&v37[OBJC_IVAR____TtC10RealityKit6ARView__scene])
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v43 = *(id *)&v10[v36];
  swift_retain();
  dispatch thunk of Scene.session.setter();
  uint64_t result = swift_release();
  if (!*(void *)&v37[v42])
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_retain();
  uint64_t v44 = dispatch thunk of Scene.defaultCamera.getter();
  swift_release();
  uint64_t result = swift_release();
  if (v44) {
    goto LABEL_11;
  }
  if (*(void *)&v37[v42])
  {
    swift_retain();
    dispatch thunk of Scene.addDefaultCamera()();
    uint64_t result = swift_release();
LABEL_11:
    if (*(void *)&v37[v42])
    {
      swift_retain();
      uint64_t v45 = dispatch thunk of Scene.defaultCamera.getter();
      uint64_t result = swift_release();
      if (v45)
      {
        uint64_t v46 = type metadata accessor for PerspectiveCameraComponent();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v78, 1, 1, v46);
        uint64_t v47 = (void (*)(long long *, void))dispatch thunk of Entity.components.modify();
        Entity.ComponentSet.subscript.setter();
        v47(&v87, 0);
        Entity.coreEntity.getter();
        RECustomMatrixCameraComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        Entity.coreEntity.getter();
        REAnchorComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          Entity.coreEntity.getter();
          REAnchorComponentGetComponentType();
          REEntityRemoveComponentByClass();
        }
        Entity.coreEntity.getter();
        REAnchorComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        int v48 = v79;
        RKARSegmentationComponent.init()();
        uint64_t v49 = type metadata accessor for RKARSegmentationComponent();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 0, 1, v49);
        uint64_t v50 = (void (*)(long long *, void))dispatch thunk of Entity.components.modify();
        Entity.ComponentSet.subscript.setter();
        v50(&v87, 0);
        dispatch thunk of Entity.name.setter();
        *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity] = 0;
        type metadata accessor for __MaterialResource();
        static __MaterialResource.createMaterial(assetPath:in:)();
        uint64_t v51 = v75;
        swift_beginAccess();
        outlined assign with take of Material?((uint64_t)&v87, v51, &demangling cache variable for type metadata for Material?);
        swift_endAccess();
        static __MaterialResource.createMaterial(assetPath:in:)();
        uint64_t v52 = v74;
        swift_beginAccess();
        outlined assign with take of Material?((uint64_t)&v87, v52, &demangling cache variable for type metadata for Material?);
        swift_endAccess();
        static __MaterialResource.createMaterial(assetPath:in:)();
        uint64_t v66 = v73;
        swift_beginAccess();
        outlined assign with take of Material?((uint64_t)&v87, v66, &demangling cache variable for type metadata for Material?);
        swift_endAccess();
        uint64_t v85 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 16, 0);
        uint64_t v67 = 0;
        uint64_t v68 = v85;
        do
        {
          swift_bridgeObjectRetain();
          static __MaterialResource.createMaterial(assetPath:in:)();
          swift_bridgeObjectRelease();
          uint64_t v85 = v68;
          unint64_t v70 = *(void *)(v68 + 16);
          unint64_t v69 = *(void *)(v68 + 24);
          if (v70 >= v69 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
            uint64_t v68 = v85;
          }
          *(void *)(v68 + 16) = v70 + 1;
          outlined init with take of Material(&v87, v68 + 40 * v70 + 32);
          v67 += 16;
        }
        while (v67 != 256);
        swift_arrayDestroy();
        *(void *)&v10[v72] = v68;
        swift_bridgeObjectRelease();
        uint64_t v71 = v82;
        uint64_t result = dispatch thunk of __Engine.services.getter();
        uint64_t v53 = v81;
        uint64_t v54 = v80;
        if (result)
        {
          uint64_t v82 = v45;
          dispatch thunk of __ServiceLocator.assetService.getter();
          swift_release();
          uint64_t v55 = v88;
          uint64_t v56 = v89;
          __swift_project_boxed_opaque_existential_1(&v87, v88);
          (*(void (**)(uint64_t, uint64_t))(v56 + 32))(v55, v56);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
          uint64_t result = REAssetManagerCreateAssetHandle();
          if (result)
          {
            uint64_t v57 = result;
            type metadata accessor for __REAsset();
            uint64_t v58 = MEMORY[0x1E4FBBAB8];
            uint64_t v88 = MEMORY[0x1E4FBBAB8];
            *(void *)&long long v87 = v57;
            static __AssetRef.__fromCore(_:)();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            static __REAsset.__fromHandleTransfer(_:)();
            unsigned int v59 = *(void (**)(char *, uint64_t))(v53 + 8);
            v59(v54, v71);
            type metadata accessor for __RERenderGraphEmitter();
            uint64_t v60 = v71;
            swift_allocObject();
            *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_simpleForwardEmitter] = __RERenderGraphEmitter.init(_:)();
            uint64_t result = REAssetManagerCreateAssetHandle();
            if (result)
            {
              uint64_t v88 = v58;
              *(void *)&long long v87 = result;
              static __AssetRef.__fromCore(_:)();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
              static __REAsset.__fromHandleTransfer(_:)();
              v59(v54, v71);
              swift_allocObject();
              *(void *)&v10[OBJC_IVAR____TtC10RealityKit10RKARSystem_arEmitter] = __RERenderGraphEmitter.init(_:)();

              v86.receiver = v10;
              v86.super_class = ObjectType;
              uint64_t v61 = objc_msgSendSuper2(&v86, sel_init);
              uint64_t v62 = *(void *)&v61[OBJC_IVAR____TtC10RealityKit10RKARSystem_delegate];
              swift_unknownObjectWeakAssign();
              v61[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 0;
              uint64_t v63 = v61;
              swift_retain();
              dispatch thunk of __RERenderGraphEmitter.__handle.getter();
              swift_release();
              __AssetRef.__as<A>(_:)();
              v59(v54, v60);
              RERenderGraphEmitterAssetSetRuntimeSettingBool();
              RERenderGraphEmitterAssetSetRuntimeSettingBool();
              RKARSystem.setDefaultRenderSettings()();
              uint64_t v64 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
              objc_msgSend(*(id *)&v63[OBJC_IVAR____TtC10RealityKit10RKARSystem_session], sel__addObserver_, v62);
              objc_msgSend(*(id *)&v63[v64], sel_forceEnvironmentTexturingToManualMode_, 1);
              CFTimeInterval v65 = CACurrentMediaTime();
              swift_release();

              swift_release();
              *(CFTimeInterval *)&v63[OBJC_IVAR____TtC10RealityKit10RKARSystem_lastUpdateTime] = v65;
              *(void *)&v63[OBJC_IVAR____TtC10RealityKit10RKARSystem_lastARFrameTimeStamp] = 0;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
              return (uint64_t)v63;
            }
            goto LABEL_31;
          }
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
LABEL_32:
  __break(1u);
  return result;
}

id RKARSystem.__deallocating_deinit()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = &v0[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraPassthroughMaterial];
  swift_beginAccess();
  uint64_t v4 = *((void *)v3 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)v3 + 4);
    uint64_t v6 = __swift_project_boxed_opaque_existential_1(v3, *((void *)v3 + 3));
    uint64_t v7 = *(void *)(v4 - 8);
    __n128 v8 = MEMORY[0x1F4188790](v6);
    unint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v7 + 16))(v10, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v4);
    dispatch thunk of __MaterialResource.coreAsset.getter();
    swift_release();
    REMaterialAssetClearParameter();
    REMaterialAssetClearParameter();
  }
  RKARSystem.endCollaborativeMapBuilding()();
  v13.receiver = v1;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_dealloc);
}

uint64_t ObjC metadata update function for RKARSystem()
{
  return type metadata accessor for RKARSystem(0);
}

uint64_t type metadata accessor for RKARSystem(uint64_t a1)
{
  return type metadata accessor for AccessibilityComponent.RotorType(a1, (uint64_t *)&type metadata singleton initialization cache for RKARSystem);
}

Swift::Void __swiftcall RKARSystem.updateGuidedFilterOcclusion(viewportSize:)(CGSize viewportSize)
{
  uint64_t v2 = v1;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v3 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
  swift_release();
  if (!MEMORY[0x1E4E64130](v3)) {
    return;
  }
  if (!RESceneUnderstandingServiceIsGuidedFilterOcclusionEnabled()) {
    return;
  }
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
  uint64_t v5 = *(void **)(v4 + 32);
  if (!v5) {
    return;
  }
  uint64_t v6 = *(void **)(v4 + 40);
  id image = v5;
  uint64_t v7 = v6;
  if (CVMetalTextureGetTexture((CVMetalTextureRef)image))
  {
    id v8 = CVMetalTextureGetTexture(v7);

    if (!v8 || (swift_unknownObjectRelease(), (uint64_t v9 = *(void **)(v4 + 32)) == 0))
    {
LABEL_14:
      swift_unknownObjectRelease();
      return;
    }
    unint64_t v10 = *(void **)(v4 + 40);
    id image = v9;
    uint64_t v7 = v10;
    if (CVMetalTextureGetTexture((CVMetalTextureRef)image))
    {
      id v11 = CVMetalTextureGetTexture(v7);

      if (v11)
      {
        swift_unknownObjectRelease();
        uint64_t v12 = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
        if (v12)
        {
          objc_super v13 = (void *)v12;
          if (!*(void *)(v12 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
          {
            __break(1u);
            return;
          }
          swift_retain();

          uint64_t v14 = dispatch thunk of Scene.defaultCamera.getter();
          swift_release();
          if (v14)
          {
            type metadata accessor for Entity();
            HasTransform.transformMatrix(relativeTo:)();
            RESceneUnderstandingServiceSetGuidedFilterOcclusionCameraFeed();
            swift_release();
          }
        }
      }
      swift_unknownObjectRelease();
      goto LABEL_14;
    }
    swift_unknownObjectRelease();
  }
}

uint64_t RKARSystem.updateCameraWorldMatrix(from:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_camera);
  objc_msgSend(v2, sel_viewMatrixForOrientation_, RKARSystem.orientation.getter());
  simd_float4 v13 = v3;
  simd_float4 v11 = v5;
  simd_float4 v12 = v4;
  simd_float4 v10 = v6;

  uint64_t result = MEMORY[0x1E4E64ED0](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (result)
  {
    id v8 = (void *)result;
    if (*(void *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      swift_retain();

      uint64_t v9 = dispatch thunk of Scene.defaultCamera.getter();
      uint64_t result = swift_release();
      if (v9)
      {
        v15.columns[0] = v13;
        v15.columns[2] = v11;
        v15.columns[1] = v12;
        v15.columns[3] = v10;
        __invert_f4(v15);
        type metadata accessor for Entity();
        HasTransform.setTransformMatrix(_:relativeTo:)();
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t RKARSystem.updateCameraProjectionMatrix(from:viewportSize:)(void *a1, double a2, double a3)
{
  uint64_t v7 = type metadata accessor for __EntityRef();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x1F4188790](v7);
  simd_float4 v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1E4E64ED0](v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView, v9);
  if (result)
  {
    simd_float4 v13 = (void *)result;
    if (*(void *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      swift_retain();

      uint64_t v14 = dispatch thunk of Scene.defaultCamera.getter();
      uint64_t result = swift_release();
      if (!v14) {
        return result;
      }
      dispatch thunk of Entity.__coreEntity.getter();
      __AssetRef.__as<A>(_:)();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      RECustomMatrixCameraComponentGetComponentType();
      uint64_t result = REEntityGetComponentByClass();
      if (!result) {
        return swift_release();
      }
      if (a2 > 0.0 && a3 > 0.0)
      {
        id v15 = objc_msgSend(a1, sel_camera);
        objc_msgSend(v15, sel_projectionMatrixForOrientation_viewportSize_zNear_zFar_, RKARSystem.orientation.getter(), a2, a3, 0.01, *(double *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_zFar));
        v20[0] = v16;
        v20[1] = v17;
        _OWORD v20[2] = v18;
        void v20[3] = v19;

        RECustomMatrixCameraComponentSetProjectionFromMatrix();
        return swift_release();
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void RKARSystem.updateLighting(_:)(void *a1)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 2) == 0)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(a1, sel_lightEstimate);
    if (v3)
    {
      if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode))
      {
      }
      else
      {
        uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity);
        id v24 = v3;
        if (v4)
        {
          objc_msgSend(v3, sel_ambientIntensity);
          type metadata accessor for AmbientLight();
          simd_float4 v5 = (void (*)(_OWORD *, void))HasAmbientLight.light.modify();
          __AmbientLightComponent.intensity.setter();
          v5(v26, 0);
          id v3 = v24;
        }
        objc_msgSend(v3, sel_ambientIntensity);
        float v7 = v6;
        uint64_t v8 = v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
        uint64_t v9 = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
        if (v9)
        {
          uint64_t v10 = (void *)v9;
          swift_beginAccess();
        }
        float v11 = 1.0;
        if (v7 < 1000.0) {
          float v11 = (float)((float)(v7 + -1000.0) / 1000.0) + 1.0;
        }
        powf(v11, 0.25);
        uint64_t v12 = MEMORY[0x1E4E64ED0](v8);
        if (v12)
        {
          simd_float4 v13 = (void *)v12;
          uint64_t v14 = (uint64_t *)(v12 + OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
          swift_beginAccess();
          uint64_t v15 = *v14;
          swift_retain();

          if (!v15)
          {
            __break(1u);
            return;
          }
          long long v16 = (void (*)(_OWORD *, void))dispatch thunk of Entity.components.modify();
          uint64_t v17 = type metadata accessor for ImageBasedLightComponent();
          long long v18 = (void (*)(unsigned char *, void))Entity.ComponentSet.subscript.modify();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v19, 1, v17)) {
            ImageBasedLightComponent.intensityExponent.setter();
          }
          v18(v25, 0);
          v16(v26, 0);
          swift_release();
        }
        if (v4)
        {
          objc_msgSend(v24, sel_ambientColorTemperature);
          *(float *)&double v20 = v20;
          *(float32x2_t *)&long long v22 = specialized RKARSystem.colorTemperatureToSRGB(_:)(*(float *)&v20, v21);
          v26[0] = v22;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
          lazy protocol witness table accessor for type Float and conformance Float();
          SIMD3<>.cgColor.getter();
          type metadata accessor for AmbientLight();
          long long v23 = (void (*)(_OWORD *, void))HasAmbientLight.light.modify();
          __AmbientLightComponent.color.setter();
          v23(v26, 0);
        }
      }
    }
  }
}

void RKARSystem.removeAnchors(_:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v4 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v39 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v45 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v37 - v9;
  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v11)
    {
LABEL_3:
      uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier);
      uint64_t v43 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
      unint64_t v48 = a1 & 0xC000000000000001;
      simd_float4 v13 = (void (**)(char *, uint64_t))(v38 + 8);
      uint64_t v37 = (void (**)(char *, uint64_t))(v4 + 8);
      swift_bridgeObjectRetain();
      uint64_t v14 = 4;
      uint64_t v47 = v11;
      uint64_t v41 = v2;
      unint64_t v42 = a1;
      uint64_t v44 = v6;
      while (1)
      {
        uint64_t v4 = v14 - 4;
        if (v48) {
          id v15 = (id)MEMORY[0x1E4E63150](v14 - 4, a1);
        }
        else {
          id v15 = *(id *)(a1 + 8 * v14);
        }
        long long v16 = v15;
        uint64_t v17 = v14 - 3;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        RKARSystem.removeAnchorDebugVisualization(for:)(v15);
        self;
        uint64_t v18 = swift_dynamicCastObjCClass();
        if (v18) {
          break;
        }
        self;
        uint64_t v21 = swift_dynamicCastObjCClass();
        if (v21)
        {
          long long v22 = (void *)v21;
          id v23 = v16;
          RKARSystem.removeProbeDebugVisualization(for:)(v22);
          goto LABEL_14;
        }
LABEL_15:
        id v24 = objc_msgSend(v16, sel_identifier);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        swift_beginAccess();
        if (*(void *)(*v12 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10), (v25 & 1) != 0))
        {
          swift_endAccess();
          uint64_t v26 = *v13;
          swift_retain();
          uint64_t v46 = v26;
          v26(v10, v6);
          uint64_t v27 = MEMORY[0x1E4E64ED0](v43);
          if (v27)
          {
            uint64_t v28 = (void *)v27;
            if (!*(void *)(v27 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
            {
              __break(1u);
              return;
            }
            swift_retain();

            uint64_t v29 = v39;
            dispatch thunk of Scene.anchors.getter();
            swift_release();
            swift_retain();
            Scene.AnchorCollection.remove(_:)();
            swift_release();
            (*v37)(v29, v40);
          }
          id v30 = objc_msgSend(v16, sel_identifier);
          uint64_t v31 = (uint64_t)v45;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          swift_beginAccess();
          swift_bridgeObjectRetain();
          unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v31);
          LOBYTE(v31) = v33;
          swift_bridgeObjectRelease();
          if (v31)
          {
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v35 = *v12;
            uint64_t v49 = *v12;
            *uint64_t v12 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v35 = v49;
            }
            v46((char *)(*(void *)(v35 + 48) + *(void *)(v38 + 72) * v32), v44);
            uint64_t v36 = v49;
            specialized _NativeDictionary._delete(at:)(v32, v49);
            *uint64_t v12 = v36;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          uint64_t v6 = v44;
          v46(v45, v44);

          swift_release();
          uint64_t v2 = v41;
          a1 = v42;
        }
        else
        {
          swift_endAccess();
          (*v13)(v10, v6);
        }
        ++v14;
        if (v17 == v47)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      uint64_t v19 = (void *)v18;
      id v20 = v16;
      RKARSystem.removePlaneDebugVisualization(for:)(v19);
LABEL_14:

      goto LABEL_15;
    }
  }
}

void RKARSystem.addAnchors(_:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v57 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v4 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v56 = (char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v63 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v8) {
      return;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v8) {
      return;
    }
  }
  uint64_t v62 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  uint64_t v58 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier);
  unint64_t v65 = a1 & 0xC000000000000001;
  uint64_t v66 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions;
  v50[0] = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier;
  v50[2] = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier;
  uint64_t v55 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v61 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  uint64_t v9 = 4;
  long long v51 = xmmword_1E2ABE6A0;
  v50[1] = 0x80000001E2AB90C0;
  v50[3] = 0x80000001E2AB9130;
  long long v59 = xmmword_1E2ABE690;
  unint64_t v53 = a1;
  uint64_t v60 = v2;
  uint64_t v54 = v8;
  while (1)
  {
    uint64_t v4 = v9 - 4;
    if (v65) {
      id v10 = (id)MEMORY[0x1E4E63150](v9 - 4, a1);
    }
    else {
      id v10 = *(id *)(a1 + 8 * v9);
    }
    uint64_t v11 = v10;
    uint64_t v12 = v9 - 3;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if ((*(unsigned char *)(v2 + v66) & 8) != 0)
    {
      uint64_t v13 = specialized RKARSystem.createDebugAxis()();
      type metadata accessor for Entity();
      HasTransform.position.setter();
      objc_msgSend(v11, sel_transform);
      HasTransform.setTransformMatrix(_:relativeTo:)();
      Entity.turnIntoNinja()();
      uint64_t v14 = MEMORY[0x1E4E64ED0](v62);
      if (v14)
      {
        id v15 = (void *)v14;
        if (!*(void *)(v14 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
        {
          __break(1u);
LABEL_41:
          __break(1u);
        }
        swift_retain();

        long long v16 = v56;
        dispatch thunk of Scene.anchors.getter();
        swift_release();
        Scene.AnchorCollection.appendNinja(_:)();
        (*v55)(v16, v57);
      }
      id v17 = objc_msgSend(v11, sel_identifier);
      uint64_t v18 = (uint64_t)v63;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = v58;
      swift_beginAccess();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = *v19;
      *uint64_t v19 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, v18, isUniquelyReferenced_nonNull_native);
      *uint64_t v19 = v67;
      swift_bridgeObjectRelease();
      (*v61)(v18, v64);
      swift_endAccess();
      swift_release();
    }
    self;
    uint64_t v21 = swift_dynamicCastObjCClass();
    if (!v21) {
      break;
    }
    if ((*(unsigned char *)(v2 + v66) & 0x10) == 0) {
      goto LABEL_7;
    }
    long long v22 = (void *)v21;
    id v23 = v11;
    id v24 = objc_msgSend(v22, sel_geometry);
    if (*(void *)(ARPlaneGeometry.vertices.getter() + 16) >= 0x100uLL) {
      goto LABEL_43;
    }
    uint64_t v25 = REGeomMeshCreateFromPolygon();
    swift_bridgeObjectRelease();
    if (v25)
    {
      uint64_t v67 = v25;
      type metadata accessor for __ServiceLocator();
      static __ServiceLocator.shared.getter();
      dispatch thunk of __ServiceLocator.assetService.getter();
      swift_release();
      uint64_t v26 = v72;
      uint64_t v27 = v73;
      __swift_project_boxed_opaque_existential_1(&v68, v72);
      (*(void (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
      if (REAssetManagerMeshMemoryAssetCreate())
      {
        type metadata accessor for MeshResource();
        swift_allocObject();
        MeshResource.init(_:)();
        RERelease();
        RERelease();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v51;
        *(void *)(v28 + 56) = type metadata accessor for UnlitMaterial();
        *(void *)(v28 + 64) = MEMORY[0x1E4F3A820];
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v28 + 32));
        swift_retain();
        RKARSystem.debugAnchorPlaneMaterial.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugAnchorPlaneMaterial, (uint64_t)boxed_opaque_existential_0, 1.0, 0.0);
        type metadata accessor for ModelEntity();
        swift_allocObject();
        uint64_t v30 = ModelEntity.init(mesh:materials:)();
        swift_retain();
        dispatch thunk of Entity.name.setter();
        swift_release();
        objc_msgSend(v22, sel_transform);
        HasTransform.setTransformMatrix(_:relativeTo:)();
        Entity.turnIntoNinja()();
        uint64_t v31 = MEMORY[0x1E4E64ED0](v62);
        if (v31)
        {
          unint64_t v32 = (void *)v31;
          if (!*(void *)(v31 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
            goto LABEL_41;
          }
          swift_retain();

          char v33 = v56;
          dispatch thunk of Scene.anchors.getter();
          swift_release();
          Scene.AnchorCollection.appendNinja(_:)();
          (*v55)(v33, v57);
        }
        id v34 = objc_msgSend(v22, sel_identifier);
        uint64_t v35 = (uint64_t)v63;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v36 = &v76;
        goto LABEL_33;
      }
      RERelease();
      a1 = v53;
    }

LABEL_6:
    uint64_t v2 = v60;
    uint64_t v8 = v54;
LABEL_7:
    uint64_t v6 = v2;
    RKARSystem.createFaceGeometry(for:)((char *)v11);

    swift_release();
    ++v9;
    if (v12 == v8)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  self;
  uint64_t v37 = swift_dynamicCastObjCClass();
  if (!v37 || (*(unsigned char *)(v2 + v66) & 0x10) == 0) {
    goto LABEL_7;
  }
  uint64_t v38 = (void *)v37;
  id v23 = v11;
  objc_msgSend(v38, sel_extent);
  long long v52 = v39;
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  dispatch thunk of __ServiceLocator.assetService.getter();
  swift_release();
  uint64_t v40 = v72;
  uint64_t v41 = v73;
  __swift_project_boxed_opaque_existential_1(&v68, v72);
  (*(void (**)(uint64_t, uint64_t))(v41 + 32))(v40, v41);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  uint64_t v68 = 0x1000100010001;
  int v69 = 0;
  uint64_t v70 = v52;
  int v71 = DWORD2(v52);
  LOWORD(v72) = 257;
  BYTE2(v72) = 1;
  if (!REAssetManagerMeshMemoryAssetCreateBox())
  {

    goto LABEL_6;
  }
  type metadata accessor for MeshResource();
  swift_allocObject();
  MeshResource.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = v51;
  *(void *)(v42 + 56) = type metadata accessor for UnlitMaterial();
  *(void *)(v42 + 64) = MEMORY[0x1E4F3A820];
  uint64_t v43 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v42 + 32));
  swift_retain();
  RKARSystem.debugAnchorPlaneMaterial.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___debugProbeMaterial, (uint64_t)v43, 0.0, 1.0);
  type metadata accessor for ModelEntity();
  swift_allocObject();
  uint64_t v30 = ModelEntity.init(mesh:materials:)();
  swift_retain();
  dispatch thunk of Entity.name.setter();
  swift_release();
  objc_msgSend(v38, sel_transform);
  HasTransform.setTransformMatrix(_:relativeTo:)();
  Entity.turnIntoNinja()();
  uint64_t v44 = MEMORY[0x1E4E64ED0](v62);
  if (!v44)
  {
LABEL_32:
    id v47 = objc_msgSend(v38, sel_identifier);
    uint64_t v35 = (uint64_t)v63;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v36 = &v75;
LABEL_33:
    unint64_t v48 = (uint64_t *)*(v36 - 32);
    swift_beginAccess();
    swift_retain();
    char v49 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v67 = *v48;
    *unint64_t v48 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v30, v35, v49);
    *unint64_t v48 = v67;
    swift_bridgeObjectRelease();
    (*v61)(v35, v64);
    swift_endAccess();

    swift_release();
    swift_release();
    a1 = v53;
    goto LABEL_6;
  }
  uint64_t v45 = (void *)v44;
  if (*(void *)(v44 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    uint64_t v46 = v56;
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    Scene.AnchorCollection.appendNinja(_:)();
    (*v55)(v46, v57);
    goto LABEL_32;
  }
  __break(1u);
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *RKARSystem.updateDepthOfField(for:)(void *result)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 0x10) == 0)
  {
    uint64_t v2 = result;
    id v3 = objc_msgSend(result, sel_camera);
    objc_msgSend(v3, sel_focalLength);

    id v4 = objc_msgSend(v2, sel_camera);
    objc_msgSend(v4, sel_imageResolution);

    uint64_t v5 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
    id v6 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_configuration);
    uint64_t v7 = v6;
    if (v6)
    {
      id v8 = objc_msgSend(v6, sel_videoFormat);

      id v9 = objc_msgSend(v8, sel_device);
      objc_msgSend(v9, sel_lensAperture);
    }
    id v10 = objc_msgSend(*(id *)(v1 + v5), sel_configuration);
    if (v10)
    {
      uint64_t v11 = v10;
      id v12 = objc_msgSend(v10, sel_videoFormat);

      id v13 = objc_msgSend(v12, sel_device);
      objc_msgSend(v13, sel_lensPosition);
      float v15 = v14;

      float v16 = v15 * 7.5;
    }
    else
    {
      float v16 = 7.5;
    }
    expf(v16);
    RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___depthOfFieldRenderGraph);
    RERenderGraphAssetSetRuntimeNodeSetting();
    RERenderGraphAssetSetRuntimeNodeSetting();
    RERenderGraphAssetSetRuntimeNodeSetting();
    return (void *)RERenderGraphAssetSetRuntimeNodeSetting();
  }
  return result;
}

void RKARSystem.updateMotionBlur(for:)(void *a1)
{
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 8) == 0)
  {
    id v2 = objc_msgSend(a1, sel_camera);
    objc_msgSend(v2, sel_exposureDuration);

    RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___motionBlurRenderGraph);
    RERenderGraphAssetSetRuntimeNodeSettingFloat();
    id v3 = (void *)MEMORY[0x1E4E64ED0](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (v3)
    {
      id v4 = v3;
      id v5 = objc_msgSend(v3, sel_session);

      id v7 = objc_msgSend(v5, sel_configuration);
      if (v7)
      {
        id v6 = objc_msgSend(v7, sel_videoFormat);
        objc_msgSend(v6, sel_framesPerSecond);

        RERenderGraphAssetSetRuntimeNodeSettingUInt32();
      }
    }
  }
}

void RKARSystem.updateCameraNoise(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4E64ED0](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v4)
  {
    id v5 = (char *)v4;
    uint64_t v6 = OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions;
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 0x20) != 0) {
      id v7 = &OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedRenderGraph;
    }
    else {
      id v7 = &OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedHDRRenderGraph;
    }
    RKARSystem.cameraRenderGraph.getter(v7);
    if ((*(unsigned char *)(v1 + v6) & 1) == 0)
    {
      objc_msgSend(a1, sel_cameraGrainIntensity);
      if (v8 > 0.0)
      {
        id v9 = objc_msgSend(a1, sel_cameraGrainTexture);
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void **)&v5[OBJC_IVAR____TtC10RealityKit6ARView_backingLayer];
          if (!v11)
          {
            __break(1u);
            return;
          }
          objc_msgSend(v11, sel_drawableSize);
          double v13 = v12;
          double v15 = v14;
          id v16 = objc_msgSend(a1, sel_camera);
          objc_msgSend(v16, sel_imageResolution);

          id v17 = objc_msgSend(a1, sel_camera);
          objc_msgSend(v17, sel_imageResolution);

          if (v15 >= v13) {
            uint64_t v18 = &selRef_height;
          }
          else {
            uint64_t v18 = &selRef_width;
          }
          if (v15 >= v13) {
            uint64_t v19 = &selRef_width;
          }
          else {
            uint64_t v19 = &selRef_height;
          }
          [v10 *v18];
          id v20 = [v10 *v19];
          long long v39 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix);
          long long v37 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix + 32);
          long long v38 = *(_OWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix + 48);
          uint64_t v21 = specialized static BinaryFloatingPoint<>.random<A>(in:using:)((uint64_t)v20, 0.0, 6.2832);
          float v23 = v22;
          specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v21, 0.0, 0.8);
          float v40 = v24 + 0.1;
          __float2 v25 = __sincosf_stret(v23);
          *(float32x2_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraNoiseRandomTranslation) = vadd_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v25.__sinval), LODWORD(v25.__cosval)), v40), *(float32x2_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraNoiseRandomTranslation));
          uint64_t v26 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraCombinedPostProcessMaterials);
          uint64_t v27 = *(void *)(v26 + 16);
          if (v27)
          {
            uint64_t v28 = v26 + 32;
            swift_bridgeObjectRetain();
            do
            {
              outlined init with copy of SynchronizationPeerID(v28, (uint64_t)v41);
              uint64_t v29 = v42;
              uint64_t v30 = v43;
              __swift_project_boxed_opaque_existential_1(v41, v42);
              (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v30);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              REMaterialAssetSetFloat2F();
              uint64_t v31 = v42;
              uint64_t v32 = v43;
              __swift_project_boxed_opaque_existential_1(v41, v42);
              (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              REMaterialAssetSetFloat2F();
              uint64_t v33 = v42;
              uint64_t v34 = v43;
              __swift_project_boxed_opaque_existential_1(v41, v42);
              (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              objc_msgSend(a1, sel_cameraGrainIntensity, v37, v38, v39);
              REMaterialAssetSetFloat();
              uint64_t v35 = v42;
              uint64_t v36 = v43;
              __swift_project_boxed_opaque_existential_1(v41, v42);
              (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              REMaterialAssetSetTexture();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
              v28 += 40;
              --v27;
            }
            while (v27);
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();
          }
        }
      }
    }
    RERenderGraphAssetSetRuntimeNodeSettingBool();
  }
}

Swift::Void __swiftcall RKARSystem.updateSceneUnderstandingOptions()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  uint64_t v3 = MEMORY[0x1E4E64ED0](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t v4 = (void *)v3;
  if (!*(void *)(v3 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    __break(1u);
    return;
  }
  swift_retain();

  uint64_t v5 = dispatch thunk of Scene.synchronizationService.getter();
  swift_release();
  if (v5)
  {
    type metadata accessor for MultipeerConnectivityService();
    uint64_t v6 = swift_dynamicCastClass();
    swift_unknownObjectRelease();
    BOOL v7 = v6 != 0;
    if (v6) {
      int v8 = 12;
    }
    else {
      int v8 = 0;
    }
  }
  else
  {
LABEL_7:
    BOOL v7 = 0;
    int v8 = 0;
  }
  if (v7 || (*(unsigned char *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_collaborationStarted) & 1) == 0) {
    int v9 = v8;
  }
  else {
    int v9 = 12;
  }
  uint64_t v10 = MEMORY[0x1E4E64ED0](v2);
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    uint64_t v12 = v10 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
    swift_beginAccess();
    ARView.Environment.sceneUnderstanding.getter((uint64_t)v23);
    int v13 = v23[0];
    ARView.updateEnvironment()();
    if (v9 != v13)
    {
      swift_beginAccess();
      ARView.Environment.sceneUnderstanding.getter((uint64_t)&v20);
      unsigned int v20 = v9;
      int v14 = v22;
      int v15 = v22;
      if ((v22 & v9) != 0)
      {
        static os_log_type_t.debug.getter();
        type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        id v16 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:type:_:)();

        int v15 = v14 & ~v9;
      }
      int v22 = v15;
      int v19 = v14;
      ARView.Environment.SceneUnderstanding.options.didset(&v19);
      int v17 = v22;
      uint64_t v18 = 0x100000000;
      if (!v21) {
        uint64_t v18 = 0;
      }
      *(void *)uint64_t v12 = v18 | v20;
      *(_DWORD *)(v12 + 8) = v17;
      swift_endAccess();
      ARView.updateEnvironment()();
    }
  }
}

void RKARSystem.updateLighting()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity))
  {
    type metadata accessor for AmbientLight();
    uint64_t v1 = (void (*)(unsigned char *, void))HasAmbientLight.light.modify();
    __AmbientLightComponent.intensity.setter();
    v1(v14, 0);
  }
  uint64_t v2 = v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  uint64_t v3 = MEMORY[0x1E4E64ED0](v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    swift_beginAccess();
  }
  uint64_t v5 = MEMORY[0x1E4E64ED0](v2);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    BOOL v7 = (uint64_t *)(v5 + OBJC_IVAR____TtC10RealityKit6ARView___environmentEntity);
    swift_beginAccess();
    uint64_t v8 = *v7;
    swift_retain();

    if (v8)
    {
      int v9 = (void (*)(unsigned char *, void))dispatch thunk of Entity.components.modify();
      uint64_t v10 = type metadata accessor for ImageBasedLightComponent();
      uint64_t v11 = (void (*)(uint64_t *, void))Entity.ComponentSet.subscript.modify();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v12, 1, v10)) {
        ImageBasedLightComponent.intensityExponent.setter();
      }
      v11(&v13, 0);
      v9(v14, 0);
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
}

void RKARSystem.updateBodyTracking(with:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v69 = type metadata accessor for UUID();
  uint64_t v4 = *(void (***)(void, void))(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v67 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v68 = (char *)&v46 - v7;
  uint64_t v8 = type metadata accessor for BodyTrackingComponent.Target();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BodyTrackingComponent();
  uint64_t i = *(char **)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v64 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v70 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_82;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v60 = v11;
    uint64_t v61 = i;
    unint64_t v66 = (unint64_t)v4;
    uint64_t v62 = (char *)v9;
    if (!v15) {
      goto LABEL_20;
    }
    if (v15 < 1) {
      break;
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != (char *)v15; ++i)
      {
        MEMORY[0x1E4E63150](i, a1);
        self;
        uint64_t v16 = swift_dynamicCastObjCClass();
        if (v16)
        {
          uint64_t v9 = v16;
          MEMORY[0x1E4E62CE0]();
          if (*(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
    else
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        uint64_t v18 = *(void **)(a1 + 8 * j + 32);
        self;
        uint64_t v19 = swift_dynamicCastObjCClass();
        if (v19)
        {
          uint64_t v9 = v19;
          MEMORY[0x1E4E62CE0](v18);
          uint64_t i = *(char **)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if ((unint64_t)i >= *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v20 = v70;
    uint64_t v4 = (void (**)(void, void))(v70 >> 62);
    if (v70 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v45 <= 0)
      {
LABEL_84:
        swift_bridgeObjectRelease();
        return;
      }
    }
    else if (*(uint64_t *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10) <= 0)
    {
      goto LABEL_84;
    }
    char v21 = (char *)MEMORY[0x1E4E64ED0](&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_arView]);
    if (!v21) {
      goto LABEL_84;
    }
    id v54 = v21;
    uint64_t v11 = *(char **)&v21[OBJC_IVAR____TtC10RealityKit6ARView__scene];
    if (!v11) {
      goto LABEL_90;
    }
    swift_retain();
    Scene.coreScene.getter();
    swift_release();
    ComponentsOfuint64_t Type = RESceneGetComponentsOfType();
    if ((v23 & 0x8000000000000000) != 0) {
      goto LABEL_88;
    }
    a1 = v23;
    if (!v23)
    {
      swift_bridgeObjectRelease();
      id v44 = v54;

      return;
    }
    float v24 = (void (*)(void, void))ComponentsOfType;
    uint64_t v58 = v8;
    uint64_t v63 = type metadata accessor for Entity();
    uint64_t v8 = 0;
    uint64_t v57 = (uint64_t (**)(char *, uint64_t))(v62 + 88);
    int v56 = *MEMORY[0x1E4F3A9B8];
    uint64_t v55 = v20 & 0xFFFFFFFFFFFFFF8;
    if (v20 < 0) {
      uint64_t v25 = v20;
    }
    else {
      uint64_t v25 = v20 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t v52 = v25;
    int v51 = *MEMORY[0x1E4F3A9B0];
    unint64_t v65 = v20 & 0xC000000000000001;
    uint64_t v50 = (void (**)(char *, uint64_t))(v62 + 96);
    char v49 = (void (**)(char *, char *, uint64_t))(v66 + 32);
    v66 += 8;
    long long v59 = (void (**)(char *, uint64_t))(v61 + 8);
    unint64_t v53 = (unint64_t)v20 >> 62;
    uint64_t v48 = v12;
    id v47 = v24;
    uint64_t v46 = (void (*)(void, void))a1;
    while (v8 != a1)
    {
      REComponentGetEntity();
      uint64_t v9 = static Entity.fromCore(_:ignoringEntityInfo:)();
      uint64_t v27 = swift_conformsToProtocol2();
      if (v27) {
        uint64_t v2 = (char *)v27;
      }
      else {
        uint64_t v2 = 0;
      }
      if (v27) {
        uint64_t v11 = (char *)v9;
      }
      else {
        uint64_t v11 = 0;
      }
      if (v11)
      {
        uint64_t i = (char *)a1;
        a1 = (unint64_t)v24;
        uint64_t v28 = v12;
        swift_retain();
        uint64_t v29 = v64;
        uint64_t v62 = v11;
        HasBodyTracking.bodyTracking.getter();
        uint64_t v11 = v29;
        if (BodyTrackingComponent.isPaused.getter())
        {
          uint64_t v26 = v29;
          uint64_t v12 = v28;
          (*v59)(v26, v28);
          swift_release();
          float v24 = (void (*)(void, void))a1;
          a1 = (unint64_t)i;
        }
        else
        {
          uint64_t v61 = (char *)v9;
          uint64_t v30 = v60;
          BodyTrackingComponent.target.getter();
          uint64_t v31 = v58;
          int v32 = (*v57)(v30, v58);
          if (v32 == v56)
          {
            (*v50)(v30, v31);
            (*v49)(v68, v30, v69);
            if (v4)
            {
              swift_bridgeObjectRetain_n();
              uint64_t v11 = (char *)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v11 = *(char **)(v55 + 16);
              swift_bridgeObjectRetain();
            }
            uint64_t v4 = (void (**)(void, void))(v66 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
            if (!v11)
            {
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))v66)(v68, v69);
LABEL_71:
              swift_bridgeObjectRelease();
              swift_release_n();

              uint64_t v12 = v48;
              goto LABEL_72;
            }
            uint64_t v12 = 4;
            while (1)
            {
              uint64_t v9 = v12 - 4;
              if (v65) {
                uint64_t v34 = (char *)MEMORY[0x1E4E63150](v12 - 4, v20);
              }
              else {
                uint64_t v34 = (char *)*(id *)(v20 + 8 * v12);
              }
              uint64_t i = v34;
              uint64_t v2 = (char *)(v12 - 3);
              if (__OFADD__(v9, 1))
              {
                __break(1u);
                goto LABEL_81;
              }
              uint64_t v35 = v20;
              id v36 = objc_msgSend(v34, sel_identifier);
              long long v37 = v67;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              LOBYTE(v36) = static UUID.== infix(_:_:)();
              a1 = *(void *)v66;
              (*(void (**)(char *, uint64_t))v66)(v37, v69);
              if (v36) {
                break;
              }

              ++v12;
              uint64_t v20 = v35;
              if (v2 == v11)
              {
                swift_bridgeObjectRelease();
                ((void (*)(char *, uint64_t))a1)(v68, v69);
                goto LABEL_71;
              }
            }
            uint64_t v20 = v35;
            swift_bridgeObjectRelease();
            id v42 = objc_msgSend(i, sel_skeleton);
            id v41 = objc_msgSend(v42, sel_coreRESkeleton);

            ((void (*)(char *, uint64_t))a1)(v68, v69);
            uint64_t v12 = v48;
            float v24 = v47;
            a1 = (unint64_t)v46;
            if (!v41) {
              goto LABEL_77;
            }
          }
          else
          {
            if (v32 != v51) {
              goto LABEL_91;
            }
            uint64_t v12 = v28;
            float v24 = (void (*)(void, void))a1;
            a1 = (unint64_t)i;
            if (v4)
            {
              swift_bridgeObjectRetain_n();
              uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v33 = *(void *)(v55 + 16);
              swift_bridgeObjectRetain();
            }
            if (!v33)
            {
              swift_release_n();

              swift_bridgeObjectRelease_n();
              goto LABEL_72;
            }
            if (v65)
            {
              id v38 = (id)MEMORY[0x1E4E63150](0, v20);
            }
            else
            {
              if (!*(void *)(v55 + 16)) {
                goto LABEL_89;
              }
              id v38 = *(id *)(v20 + 32);
            }
            long long v39 = v38;
            swift_bridgeObjectRelease();
            id v40 = objc_msgSend(v39, sel_skeleton);

            id v41 = objc_msgSend(v40, sel_coreRESkeleton);
            if (!v41)
            {
LABEL_77:
              swift_bridgeObjectRelease();
              swift_release_n();

LABEL_72:
              (*v59)(v64, v12);
              return;
            }
          }
          uint64_t i = (char *)v41;
          objc_msgSend(i, sel_localJointTransformsSRT);
          objc_msgSend(i, sel_jointTransformCount);
          Entity.coreEntity.getter();
          if ((REEntityCharacterSetSkeletalPoseLocalRotations() & 1) == 0)
          {
            static os_log_type_t.error.getter();
            type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
            uint64_t v43 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:type:_:)();
          }
          uint64_t v11 = v62;
          Entity.coreEntity.getter();
          if ((REEntityCharacterSetSkeletalPoseJointLocalSpace() & 1) == 0)
          {
            static os_log_type_t.error.getter();
            type metadata accessor for ARReferenceObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
            uint64_t v11 = (char *)static OS_os_log.default.getter();
            os_log(_:dso:log:type:_:)();
          }
          uint64_t v9 = (uint64_t)v61;
          swift_release();

          (*v59)(v64, v12);
          uint64_t v4 = (void (**)(void, void))v53;
        }
      }
      ++v8;
      swift_release();
      if (v8 == a1)
      {
        swift_bridgeObjectRelease();

        return;
      }
    }
LABEL_81:
    __break(1u);
LABEL_82:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  }
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

Swift::Void __swiftcall RKARSystem.removeFaceGeometry(for:)(ARAnchor *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v24 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v12 = MEMORY[0x1F4188790](v11).n128_u64[0];
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = [(ARAnchor *)a1 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v16 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier;
  swift_beginAccess();
  if (*(void *)(*(void *)v16 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14), (v17 & 1) != 0))
  {
    uint64_t v22 = v4;
    swift_endAccess();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    swift_retain();
    unint64_t v23 = v18;
    v18(v14, v7);
    uint64_t v19 = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
    if (!v19)
    {
LABEL_6:
      char v21 = [(ARAnchor *)a1 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v10, (void (*)(void))specialized _NativeDictionary.copy());
      swift_endAccess();
      swift_release();
      v23(v10, v7);
      swift_release();
      return;
    }
    uint64_t v20 = (void *)v19;
    if (*(void *)(v19 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
    {
      swift_retain();

      dispatch thunk of Scene.anchors.getter();
      swift_release();
      swift_retain();
      Scene.AnchorCollection.remove(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v22);
      goto LABEL_6;
    }
    __break(1u);
  }
  else
  {
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  }
}

uint64_t RKARSystem.createFaceGeometry(for:)(char *a1)
{
  uint64_t v98 = a1;
  uint64_t v2 = type metadata accessor for Scene.AnchorCollection();
  uint64_t v91 = *(void *)(v2 - 8);
  uint64_t v92 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v90 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AnchoringComponent.Target();
  uint64_t v94 = *(void *)(v4 - 8);
  uint64_t v95 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v93 = (_OWORD *)((char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v96 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent.EntityType?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModelComponent?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OcclusionMaterial();
  uint64_t v97 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for __AnyARKitObject();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v23 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v24);
  MEMORY[0x1F4188790](v25);
  uint64_t v30 = (char *)&v77 - v29;
  uint64_t v31 = 0;
  if ((*(_WORD *)&v1[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] & 0x440) != 0) {
    return v31;
  }
  char v80 = v23;
  uint64_t v81 = v21;
  uint64_t v82 = v20;
  uint64_t v83 = v16;
  uint64_t v84 = v10;
  uint64_t v85 = v13;
  uint64_t v86 = v28;
  uint64_t v88 = v26;
  uint64_t v89 = v27;
  long long v87 = v19;
  int v32 = v1;
  self;
  uint64_t v33 = v98;
  uint64_t v34 = swift_dynamicCastObjCClass();
  if (!v34) {
    return 0;
  }
  uint64_t v35 = (void *)v34;
  id v36 = v33;
  id v37 = objc_msgSend(v35, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v38 = &v32[OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier];
  swift_beginAccess();
  uint64_t v39 = *(void *)v38;
  if (*(void *)(*(void *)v38 + 16))
  {
    unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v30);
    if (v41)
    {
      uint64_t v42 = *(void *)(*(void *)(v39 + 56) + 8 * v40);
      swift_endAccess();
      swift_retain();

      (*(void (**)(char *, uint64_t))(v89 + 8))(v30, v88);
      return v42;
    }
  }
  id v78 = v36;
  swift_endAccess();
  uint64_t v98 = v32;
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
  v89 += 8;
  uint64_t v79 = v43;
  v43((uint64_t)v30, v88);
  type metadata accessor for __RKFaceMeshEntity(0);
  swift_allocObject();
  uint64_t v44 = Entity.init()();
  type metadata accessor for MeshResource();
  v100[0] = objc_msgSend(v35, sel_geometry);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARFaceGeometry);
  uint64_t v45 = v80;
  __AnyARKitObject.init<A>(_:)();
  uint64_t v46 = static MeshResource.__generateFace(from:fillMesh:)();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v45, v82);
  id v47 = v87;
  OcclusionMaterial.init(receivesDynamicLighting:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Material>);
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1E2ABE6A0;
  uint64_t v49 = MEMORY[0x1E4F3A8F0];
  *(void *)(v48 + 56) = v17;
  *(void *)(v48 + 64) = v49;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v48 + 32));
  uint64_t v51 = v97;
  uint64_t v52 = *(void (**)(uint64_t *, char *, uint64_t))(v97 + 16);
  uint64_t v81 = v17;
  v52(boxed_opaque_existential_0, v47, v17);
  swift_retain();
  unint64_t v53 = v83;
  uint64_t v82 = v46;
  ModelComponent.init(mesh:materials:)();
  uint64_t v54 = type metadata accessor for ModelComponent();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 0, 1, v54);
  HasModel.model.setter();
  uint64_t v55 = *MEMORY[0x1E4F3AA18];
  uint64_t v56 = type metadata accessor for SceneUnderstandingComponent.EntityType();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = v84;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 104))(v84, v55, v56);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v56);
  swift_retain();
  long long v59 = v85;
  SceneUnderstandingComponent.init(entityType:)();
  uint64_t v60 = type metadata accessor for SceneUnderstandingComponent();
  uint64_t v61 = v35;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v59, 0, 1, v60);
  uint64_t v62 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v62(v100, 0);
  swift_release();
  objc_msgSend(v35, sel_transform);
  HasTransform.setTransformMatrix(_:relativeTo:)();
  HasTransform.setScale(_:relativeTo:)();
  long long v63 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 16);
  long long v64 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 32);
  long long v65 = *(_OWORD *)(MEMORY[0x1E4F149A0] + 48);
  uint64_t v67 = v93;
  uint64_t v66 = v94;
  *uint64_t v93 = *MEMORY[0x1E4F149A0];
  v67[1] = v63;
  v67[2] = v64;
  v67[3] = v65;
  (*(void (**)(_OWORD *, void, uint64_t))(v66 + 104))(v67, *MEMORY[0x1E4F3A940], v95);
  swift_retain();
  uint64_t v68 = v96;
  AnchoringComponent.init(_:)();
  uint64_t v69 = type metadata accessor for AnchoringComponent();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 0, 1, v69);
  unint64_t v70 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
  Entity.ComponentSet.subscript.setter();
  v70(v100, 0);
  swift_release();
  id v71 = objc_msgSend(v61, sel_identifier);
  uint64_t v72 = v86;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v99 = *(void *)v38;
  *(void *)id v38 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v44, v72, isUniquelyReferenced_nonNull_native);
  *(void *)id v38 = v99;
  swift_bridgeObjectRelease();
  v79(v72, v88);
  swift_endAccess();
  uint64_t result = MEMORY[0x1E4E64ED0](&v98[OBJC_IVAR____TtC10RealityKit10RKARSystem_arView]);
  if (!result)
  {

    swift_release();
    goto LABEL_11;
  }
  uint64_t v75 = (void *)result;
  if (*(void *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();

    uint64_t v76 = v90;
    dispatch thunk of Scene.anchors.getter();
    swift_release();
    swift_retain();
    Scene.AnchorCollection.append(_:)();

    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v76, v92);
LABEL_11:
    (*(void (**)(char *, uint64_t))(v51 + 8))(v87, v81);
    return v44;
  }
  __break(1u);
  return result;
}

uint64_t RKARSystem.updateFaceGeometry(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent.EntityType?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v50 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for __AnyARKitObject();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v49 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Scene.AnchorCollection();
  *(void *)&long long v47 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v20 = (void *)result;
    id v51 = a1;
    id v21 = objc_msgSend(v51, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_faceMeshEntitiesByAnchorIdentifier;
    swift_beginAccess();
    if (*(void *)(*(void *)v22 + 16)
      && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18), (v23 & 1) != 0))
    {
      uint64_t v46 = v6;
      swift_endAccess();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v16 + 8);
      swift_retain();
      v24(v18, v15);
      uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 0x440;
      swift_retain();
      uint64_t v26 = dispatch thunk of Entity.scene.getter();
      swift_release();
      swift_release();
      if (v25)
      {
        if (!v26 || (uint64_t result = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView)) == 0)
        {

          return swift_release();
        }
        uint64_t v27 = (void *)result;
        if (*(void *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
        {
          swift_retain();

          dispatch thunk of Scene.anchors.getter();
          swift_release();
          swift_retain();
          Scene.AnchorCollection.remove(_:)();

          swift_release_n();
          return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v14, v12);
        }
        __break(1u);
        goto LABEL_22;
      }
      if (!v26)
      {
        uint64_t result = MEMORY[0x1E4E64ED0](v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
        if (result)
        {
          uint64_t v28 = (void *)result;
          if (!*(void *)(result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
          {
LABEL_22:
            __break(1u);
            return result;
          }
          swift_retain();

          dispatch thunk of Scene.anchors.getter();
          swift_release();
          swift_retain();
          Scene.AnchorCollection.append(_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v12);
        }
      }
      type metadata accessor for __RKFaceMeshEntity(0);
      HasTransform.scale(relativeTo:)();
      long long v47 = v29;
      objc_msgSend(v20, sel_transform);
      HasTransform.setTransformMatrix(_:relativeTo:)();
      HasTransform.setScale(_:relativeTo:)();
      type metadata accessor for MeshResource();
      v53[0] = objc_msgSend(v20, sel_geometry);
      type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for ARFaceGeometry);
      __AnyARKitObject.init<A>(_:)();
      static MeshResource.__generateFace(from:fillMesh:)();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v49);
      uint64_t v30 = (void (*)(void *, void))HasModel.model.modify();
      uint64_t v32 = v31;
      uint64_t v33 = type metadata accessor for ModelComponent();
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33))
      {
        swift_retain();
        ModelComponent.mesh.setter();
      }
      v30(v53, 0);
      uint64_t v35 = v50;
      id v34 = v51;
      uint64_t v36 = *MEMORY[0x1E4F3AA18];
      uint64_t v37 = type metadata accessor for SceneUnderstandingComponent.EntityType();
      uint64_t v38 = *(void *)(v37 - 8);
      uint64_t v39 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v46, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v37);
      swift_retain();
      SceneUnderstandingComponent.init(entityType:)();
      uint64_t v40 = type metadata accessor for SceneUnderstandingComponent();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v35, 0, 1, v40);
      char v41 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
      Entity.ComponentSet.subscript.setter();
      v41(v53, 0);
      swift_release();
      uint64_t v52 = &unk_1F3E1E8F0;
      uint64_t v42 = swift_dynamicCastObjCProtocolConditional();
      if (v42)
      {
        uint64_t v43 = (void *)v42;
        id v44 = v34;
        swift_retain();
        objc_msgSend(v43, sel_isTracked);
        dispatch thunk of Entity.isEnabled.setter();
        swift_release();

        return swift_release_n();
      }
      else
      {
        swift_release();

        return swift_release();
      }
    }
    else
    {
      swift_endAccess();

      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    }
  }
  return result;
}

void closure #1 in RKARSystem.session(_:didUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x1E4E64ED0](a1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);
  if (v4)
  {
    uint64_t v10 = (char *)v4;
    if (swift_weakLoadStrong())
    {
      uint64_t v5 = (void *)(a1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cachedGestureHitTestResults);
      swift_beginAccess();
      *uint64_t v5 = MEMORY[0x1E4FBC868];
      swift_bridgeObjectRelease();
      uint64_t v6 = (float *)&v10[OBJC_IVAR____TtC10RealityKit6ARView___preferredFrameRate];
      swift_beginAccess();
      float v7 = *v6;
      uint64_t v8 = &v10[OBJC_IVAR____TtC10RealityKit6ARView___enableAutomaticFrameRate];
      swift_beginAccess();
      if (*v8) {
        float v7 = (float)a2;
      }
      uint64_t v9 = __Engine.coreEngine.getter();
      MEMORY[0x1E4E63950](v9, v7);

      swift_release();
    }
    else
    {
    }
  }
}

void type metadata completion function for RKARSystem()
{
  type metadata accessor for UnlitMaterial?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for UnlitMaterial?()
{
  if (!lazy cache variable for type metadata for UnlitMaterial?)
  {
    type metadata accessor for UnlitMaterial();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnlitMaterial?);
    }
  }
}

uint64_t type metadata accessor for RKARSystem.SessionDelegate()
{
  return self;
}

ValueMetadata *type metadata accessor for RKARSystem.HitTestScreenPoint()
{
  return &type metadata for RKARSystem.HitTestScreenPoint;
}

void *type metadata accessor for RKARSystem.HashableARAnchor()
{
  return &unk_1F3E030C0;
}

unint64_t lazy protocol witness table accessor for type RKARSystem.HashableARAnchor and conformance RKARSystem.HashableARAnchor()
{
  unint64_t result = lazy protocol witness table cache variable for type RKARSystem.HashableARAnchor and conformance RKARSystem.HashableARAnchor;
  if (!lazy protocol witness table cache variable for type RKARSystem.HashableARAnchor and conformance RKARSystem.HashableARAnchor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RKARSystem.HashableARAnchor and conformance RKARSystem.HashableARAnchor);
  }
  return result;
}

void RKARSystem.HitTestScreenPoint.hash(into:)(double a1, double a2)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = *(void *)&a1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = *(void *)&a2;
  }
  else {
    Swift::UInt64 v4 = 0;
  }
  Hasher._combine(_:)(v4);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RKARSystem.HitTestScreenPoint()
{
  double v1 = *v0;
  double v2 = v0[1];
  Hasher.init(_seed:)();
  RKARSystem.HitTestScreenPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RKARSystem.HitTestScreenPoint()
{
  RKARSystem.HitTestScreenPoint.hash(into:)(*v0, v0[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RKARSystem.HitTestScreenPoint()
{
  double v1 = *v0;
  double v2 = v0[1];
  Hasher.init(_seed:)();
  RKARSystem.HitTestScreenPoint.hash(into:)(v1, v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance RKARSystem.HitTestScreenPoint(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

unint64_t lazy protocol witness table accessor for type RKARSystem.HitTestScreenPoint and conformance RKARSystem.HitTestScreenPoint()
{
  unint64_t result = lazy protocol witness table cache variable for type RKARSystem.HitTestScreenPoint and conformance RKARSystem.HitTestScreenPoint;
  if (!lazy protocol witness table cache variable for type RKARSystem.HitTestScreenPoint and conformance RKARSystem.HitTestScreenPoint)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RKARSystem.HitTestScreenPoint and conformance RKARSystem.HitTestScreenPoint);
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(MEMORY[0x1E4F3AC40], (uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
}

{
  return specialized _NativeSet.copy()(MEMORY[0x1E4F3AC60], &demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>);
}

{
  return specialized _NativeSet.copy()(MEMORY[0x1E4F294B8], &demangling cache variable for type metadata for _SetStorage<Participant>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  double v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Entity>);
  double v2 = *v0;
  Swift::UInt64 v3 = static _SetStorage.copy(original:)();
  Swift::UInt64 v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    *double v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  float v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      uint64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        uint64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    unint64_t result = (void *)swift_retain();
  }
  uint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  uint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  Swift::UInt64 v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_30:
    *Swift::UInt64 v4 = v11;
    return result;
  }
  unint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  uint64_t v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    unint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    unint64_t result = (void *)swift_release();
    Swift::UInt64 v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ARReferenceImage>);
}

{
  return specialized _NativeSet.copy()(&demangling cache variable for type metadata for _SetStorage<ARReferenceObject>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  double v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RKARSystem.HashableARAnchor>);
  double v2 = *v0;
  Swift::UInt64 v3 = static _SetStorage.copy(original:)();
  Swift::UInt64 v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    unint64_t result = (id)swift_release();
    *double v1 = v4;
    return result;
  }
  unint64_t result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  uint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  uint64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v12 = v11 & *(void *)(v2 + 56);
  unint64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      uint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      uint64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        uint64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v12 = (v19 - 1) & v19;
    int64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t result = v17;
  }
  unint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()(uint64_t *a1)
{
  double v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *double v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  double v1 = v0;
  uint64_t v2 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *double v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  id v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    double v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;

  double v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Entity>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *double v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v25 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  uint64_t v7 = v6 & *(void *)(v2 + 56);
  uint64_t v26 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  uint64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      uint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v14);
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v26) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v25 + 8 * v10);
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v26) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v25 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    type metadata accessor for Entity();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
    swift_retain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v19 = result & ~v18;
    int64_t v20 = v19 >> 6;
    if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v21 = 0;
      int64_t v22 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v23 = v20 == v22;
        if (v20 == v22) {
          int64_t v20 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)(v8 + 8 * v20);
      }
      while (v24 == -1);
      uint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v26)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    double v1 = v0;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v25 + 8 * v16);
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v26) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v25 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;

  double v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RKARSystem.HashableARAnchor>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *double v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v33 = v0;
  id v34 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = (void (**)(char *, uint64_t))(v3 + 8);
  int64_t v14 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v35) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v34 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v34 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v35) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v34 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = *(void **)(*(void *)(v6 + 48) + 8 * v19);
    Hasher.init(_seed:)();
    uint64_t v24 = v23;
    uint64_t v25 = objc_msgSend(v24, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    dispatch thunk of Hashable.hash(into:)();
    (*v13)(v5, v2);
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v14 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v8 + 48) + 8 * v17) = v24;
    ++*(void *)(v8 + 16);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v35)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    double v1 = v33;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v34 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v35) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v34 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.copyAndResize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ARReferenceImage>);
}

{
  return specialized _NativeSet.copyAndResize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ARReferenceObject>);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  unint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  double v1 = v0;
  uint64_t v42 = type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  char v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<SpatialTrackingSession.Configuration.AnchorCapability>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                double v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      char v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type SpatialTrackingSession.Configuration.AnchorCapability and conformance SpatialTrackingSession.Configuration.AnchorCapability, MEMORY[0x1E4F3AC40]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *double v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void *v27;

  double v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Entity>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v27 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    char v26 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    unint64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        uint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        int64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v26) {
          goto LABEL_33;
        }
        uint64_t v15 = v27[v14];
        ++v10;
        if (!v15)
        {
          unint64_t v10 = v14 + 1;
          if (v14 + 1 >= v26) {
            goto LABEL_33;
          }
          uint64_t v15 = v27[v10];
          if (!v15)
          {
            unint64_t v10 = v14 + 2;
            if (v14 + 2 >= v26) {
              goto LABEL_33;
            }
            uint64_t v15 = v27[v10];
            if (!v15)
            {
              unint64_t v16 = v14 + 3;
              if (v16 >= v26)
              {
LABEL_33:
                swift_release();
                double v1 = v0;
                uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero(v27, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v27 = -1 << v25;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              uint64_t v15 = v27[v16];
              if (!v15)
              {
                while (1)
                {
                  unint64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v26) {
                    goto LABEL_33;
                  }
                  uint64_t v15 = v27[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v10 = v16;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v15 - 1) & v15;
        int64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      type metadata accessor for Entity();
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity, MEMORY[0x1E4F3AAD8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      int64_t v19 = result & ~v18;
      unint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6))) != 0)
      {
        uint64_t v11 = __clz(__rbit64((-1 << v19) & ~*(void *)(v8 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v21 = 0;
        uint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v23 = v20 == v22;
          if (v20 == v22) {
            unint64_t v20 = 0;
          }
          v21 |= v23;
          uint64_t v24 = *(void *)(v8 + 8 * v20);
        }
        while (v24 == -1);
        uint64_t v11 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *double v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;

  double v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RKARSystem.HashableARAnchor>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    unint64_t v10 = *(void *)(v6 + 56);
    int64_t v36 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    uint64_t v12 = v11 & v10;
    uint64_t v34 = v0;
    uint64_t v35 = (unint64_t)(v9 + 63) >> 6;
    int64_t v13 = (void (**)(char *, uint64_t))(v3 + 8);
    int64_t v14 = v7 + 56;
    uint64_t result = swift_retain();
    unint64_t v16 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v19 = v18 | (v16 << 6);
      }
      else
      {
        unint64_t v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v35) {
          goto LABEL_33;
        }
        int64_t v21 = v36[v20];
        ++v16;
        if (!v21)
        {
          unint64_t v16 = v20 + 1;
          if (v20 + 1 >= v35) {
            goto LABEL_33;
          }
          int64_t v21 = v36[v16];
          if (!v21)
          {
            unint64_t v16 = v20 + 2;
            if (v20 + 2 >= v35) {
              goto LABEL_33;
            }
            int64_t v21 = v36[v16];
            if (!v21)
            {
              uint64_t v22 = v20 + 3;
              if (v22 >= v35)
              {
LABEL_33:
                swift_release();
                double v1 = v34;
                uint64_t v33 = 1 << *(unsigned char *)(v6 + 32);
                if (v33 > 63) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v36 = -1 << v33;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              int64_t v21 = v36[v22];
              if (!v21)
              {
                while (1)
                {
                  unint64_t v16 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v16 >= v35) {
                    goto LABEL_33;
                  }
                  int64_t v21 = v36[v16];
                  ++v22;
                  if (v21) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v16 = v22;
            }
          }
        }
LABEL_23:
        uint64_t v12 = (v21 - 1) & v21;
        int64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      uint64_t v23 = v6;
      uint64_t v24 = *(void **)(*(void *)(v6 + 48) + 8 * v19);
      Hasher.init(_seed:)();
      uint64_t v25 = objc_msgSend(v24, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      dispatch thunk of Hashable.hash(into:)();
      (*v13)(v5, v2);
      uint64_t result = Hasher._finalize()();
      char v26 = -1 << *(unsigned char *)(v8 + 32);
      uint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        char v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          BOOL v32 = *(void *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v8 + 48) + 8 * v17) = v24;
      ++*(void *)(v8 + 16);
      uint64_t v6 = v23;
    }
  }
  uint64_t result = swift_release();
  *double v1 = v8;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1)
{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<UITouch>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ARReferenceImage>);
}

{
  return specialized _NativeSet.resize(capacity:)(a1, &demangling cache variable for type metadata for _SetStorage<ARReferenceObject>);
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    char v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, (void (*)(void))specialized _NativeDictionary.copy());
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v4;
  uint64_t v14 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a2();
    uint64_t v9 = v14;
  }
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
  uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        uint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        Swift::UInt64 v12 = (v10 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? v10 : 0;
        Hasher._combine(_:)(v12);
        Swift::UInt64 v13 = (v11 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? v11 : 0;
        Hasher._combine(_:)(v13);
        uint64_t result = Hasher._finalize()();
        unint64_t v14 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v14 < v8) {
          goto LABEL_17;
        }
LABEL_18:
        uint64_t v15 = *(void *)(a2 + 48);
        unint64_t v16 = (_OWORD *)(v15 + 16 * v3);
        unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
        if (v3 != v6 || v16 >= v17 + 1) {
          *unint64_t v16 = *v17;
        }
        uint64_t v18 = *(void *)(a2 + 56);
        uint64_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollisionCastHit?)
                                    - 8)
                        + 72);
        int64_t v20 = v19 * v3;
        uint64_t result = v18 + v19 * v3;
        int64_t v21 = v19 * v6;
        unint64_t v22 = v18 + v19 * v6 + v19;
        if (v20 < v21 || result >= v22)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v20 == v21) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_27;
        }
      }
      if (v14 < v8) {
        goto LABEL_6;
      }
LABEL_17:
      if (v3 < (uint64_t)v14) {
        goto LABEL_6;
      }
      goto LABEL_18;
    }
LABEL_27:
    unint64_t v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << result) - 1;
  }
  *unint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v30 = (v11 + 1) & v10;
      unint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      Swift::UInt64 v13 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        unint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v21 = *(void *)(a2 + 56);
            unint64_t v22 = (void *)(v21 + 8 * a1);
            unint64_t v23 = (void *)(v21 + 8 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *unint64_t v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    unint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    uint64_t v25 = (-1 << a1) - 1;
  }
  *unint64_t v24 = v26 & v25;
  uint64_t v27 = *(void *)(a2 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    return;
  }
  LODWORD(v59) = a2;
  uint64_t v17 = *(int *)(v12 + 48);
  v56[0] = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v56[1] = v3;
  uint64_t v18 = a1 + v56[0];
  uint64_t v61 = *(void *)(v13 + 72);
  uint64_t v58 = a1;
  swift_bridgeObjectRetain();
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v18, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
  uint64_t v57 = v8;
  uint64_t v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v62 = v7;
  long long v63 = v19;
  v19((unint64_t)v10, v15, v7);
  uint64_t v60 = v17;
  int64_t v20 = *(void **)&v15[v17];
  long long v64 = a3;
  uint64_t v21 = *a3;
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  uint64_t v24 = *(void *)(v21 + 16);
  BOOL v25 = (v22 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_24;
  }
  char v27 = v22;
  if (*(void *)(v21 + 24) >= v26)
  {
    if (v59)
    {
      if (v22) {
        goto LABEL_10;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v27) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v34 = (void *)*v64;
    *(void *)(*v64 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    uint64_t v35 = v34[6];
    uint64_t v59 = *(void *)(v57 + 72);
    uint64_t v36 = v62;
    v63(v35 + v59 * v23, v10, v62);
    *(void *)(v34[7] + 8 * v23) = v20;
    uint64_t v37 = v34[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    _OWORD v34[2] = v39;
    uint64_t v40 = v16 - 1;
    if (v16 == 1)
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v41 = v58 + v61 + v56[0];
    while (1)
    {
      outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(v41, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
      v63((unint64_t)v10, v15, v36);
      int64_t v20 = *(void **)&v15[v60];
      uint64_t v42 = (void *)*v64;
      unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
      uint64_t v45 = v42[2];
      BOOL v46 = (v43 & 1) == 0;
      uint64_t v47 = v45 + v46;
      if (__OFADD__(v45, v46)) {
        break;
      }
      char v48 = v43;
      if (v42[3] < v47)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, 1);
        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
        if ((v48 & 1) != (v50 & 1)) {
          goto LABEL_26;
        }
        unint64_t v44 = v49;
      }
      if (v48) {
        goto LABEL_10;
      }
      id v51 = (void *)*v64;
      *(void *)(*v64 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      uint64_t v36 = v62;
      v63(v51[6] + v59 * v44, v10, v62);
      *(void *)(v51[7] + 8 * v44) = v20;
      uint64_t v52 = v51[2];
      BOOL v38 = __OFADD__(v52, 1);
      uint64_t v53 = v52 + 1;
      if (v38) {
        goto LABEL_25;
      }
      v51[2] = v53;
      v41 += v61;
      if (!--v40) {
        goto LABEL_23;
      }
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, v59 & 1);
  unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    unint64_t v23 = v28;
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    unint64_t v30 = (void *)swift_allocError();
    swift_willThrow();
    id v67 = v30;
    id v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    char v32 = swift_dynamicCast();
    uint64_t v33 = v62;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v33);
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v54._object = (void *)0x80000001E2ABB910;
  v54._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v54);
  _print_unlocked<A, B>(_:_:)();
  v55._countAndFlagsBits = 39;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, float a2, float a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  float v5 = a3 - a2;
  if ((~COERCE_INT(a3 - a2) & 0x7F800000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t result = MEMORY[0x1E4E64E00](&v7, 8);
  if ((float)((float)(v5 * (float)((float)(v7 & 0xFFFFFF) * 0.000000059605)) + a2) == a3) {
    return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v6, a2, a3);
  }
  return result;
}

uint64_t specialized _NativeSet.update(with:isUnique:)(void *a1, int a2)
{
  LODWORD(v51) = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v49 - v9;
  char v50 = v2;
  uint64_t v11 = *v2;
  Hasher.init(_seed:)();
  id v56 = a1;
  id v12 = objc_msgSend(a1, sel_identifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  v49[1] = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v54 = v4;
  uint64_t v55 = v5 + 8;
  uint64_t v53 = v13;
  v13(v10, v4);
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v11 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v52 = v11;
  uint64_t v17 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v18 = ~v15;
    int64_t v20 = v53;
    uint64_t v19 = v54;
    do
    {
      id v21 = *(id *)(*(void *)(v52 + 48) + 8 * v16);
      id v22 = objc_msgSend(v21, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v23 = objc_msgSend(v56, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      char v24 = static UUID.== infix(_:_:)();
      v20(v7, v19);
      v20(v10, v19);

      if (v24) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v18;
    }
    while (((*(void *)(v17 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  else
  {
    char v24 = 0;
  }
  BOOL v25 = v50;
  uint64_t v26 = *(void *)(*v50 + 16);
  BOOL v27 = (v24 & 1) == 0;
  uint64_t v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v29 = *(void *)(*v50 + 24);
  if (v29 < v28 || (v51 & 1) == 0)
  {
    if (v51)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v29 >= v28)
      {
        specialized _NativeSet.copy()();
        if ((v24 & 1) == 0) {
          goto LABEL_11;
        }
        goto LABEL_27;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v32 = *v25;
    Hasher.init(_seed:)();
    id v33 = objc_msgSend(v56, sel_identifier);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = v54;
    dispatch thunk of Hashable.hash(into:)();
    v53(v10, v34);
    Swift::Int v35 = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v32 + 32);
    unint64_t v16 = v35 & ~v36;
    unint64_t v30 = v16 >> 6;
    uint64_t v52 = v32 + 56;
    uint64_t v31 = 1 << v16;
    if (((1 << v16) & *(void *)(v32 + 56 + 8 * (v16 >> 6))) == 0)
    {
LABEL_23:
      if (v24)
      {
LABEL_31:
        uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      goto LABEL_24;
    }
    uint64_t v37 = v32;
    uint64_t v51 = ~v36;
    BOOL v38 = v53;
    uint64_t v39 = v54;
    while (1)
    {
      id v40 = *(id *)(*(void *)(v37 + 48) + 8 * v16);
      id v41 = objc_msgSend(v40, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v42 = objc_msgSend(v56, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v42) = static UUID.== infix(_:_:)();
      v38(v7, v39);
      v38(v10, v39);

      if (v42) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v51;
      unint64_t v30 = v16 >> 6;
      uint64_t v31 = 1 << v16;
      if ((*(void *)(v52 + 8 * (v16 >> 6)) & (1 << v16)) == 0)
      {
        BOOL v25 = v50;
        goto LABEL_23;
      }
    }
    BOOL v25 = v50;
    if ((v24 & 1) == 0) {
      goto LABEL_31;
    }
    goto LABEL_27;
  }
  if ((v24 & 1) == 0)
  {
LABEL_11:
    unint64_t v30 = v16 >> 6;
    uint64_t v31 = 1 << v16;
LABEL_24:
    uint64_t v43 = *v25;
    *(void *)(*v25 + 8 * v30 + 56) |= v31;
    *(void *)(*(void *)(v43 + 48) + 8 * v16) = v56;
    uint64_t v44 = *(void *)(v43 + 16);
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (!v45)
    {
      uint64_t result = 0;
      *(void *)(v43 + 16) = v46;
      return result;
    }
    goto LABEL_30;
  }
LABEL_27:
  uint64_t v48 = *(void *)(*v25 + 48);
  uint64_t result = *(void *)(v48 + 8 * v16);
  *(void *)(v48 + 8 * v16) = v56;
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

BOOL specialized static RKARSystem.cameraUsageDescriptionInPlist.getter()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  unint64_t v1 = (void *)MEMORY[0x1E4E62C20](0xD000000000000018, 0x80000001E2ABB530);
  id v2 = objc_msgSend(v0, sel_objectForInfoDictionaryKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v4, &demangling cache variable for type metadata for Any?);
  return v2 != 0;
}

float32x2_t specialized RKARSystem.colorTemperatureToSRGB(_:)(float a1, double a2)
{
  float v2 = fminf(fmaxf(a1, 1000.0), 30000.0);
  *(float *)&a2 = v2 * 0.01;
  if (v2 < 6600.0)
  {
    float v7 = (float)((float)(*(float *)&a2 + -2.0) * -0.44597) + -155.25;
    float v8 = logf(*(float *)&a2 + -2.0);
    v6.i32[0] = 1132396544;
    v6.f32[1] = v7 + (float)(v8 * 104.49);
  }
  else
  {
    float32x2_t v3 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a2, 0), (float32x2_t)0xC2480000C25C0000);
    float v10 = v3.f32[0];
    float32x2_t v4 = vadd_f32(vmul_f32(v3, (float32x2_t)0x3DA2AE973DE9E513), (float32x2_t)0x43A2B98643AFFD0BLL);
    float v11 = logf(v3.f32[1]);
    v5.f32[0] = logf(v10);
    v5.f32[1] = v11;
    float32x2_t v6 = vadd_f32(v4, vmul_f32(v5, (float32x2_t)0xC1E0AEB0C22103C0));
  }
  if (v2 >= 2000.0 && v2 < 6600.0)
  {
    float32x2_t v12 = v6;
    logf((float)(v2 * 0.01) + -10.0);
    float32x2_t v6 = v12;
  }
  return vmul_f32(v6, (float32x2_t)vdup_n_s32(0x3B808081u));
}

void specialized RKARSystem.updateAnchors(_:frame:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  float v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  float v10 = (char *)&v66 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v66 - v12;
  uint64_t v75 = v7;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    float v7 = v75;
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v14)
    {
LABEL_3:
      if (v14 < 1) {
        __break(1u);
      }
      uint64_t v82 = OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions;
      uint64_t v77 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugAnchorsByAnchorIdentifier;
      uint64_t v68 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugProbesByAnchorIdentifier;
      uint64_t v76 = v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugPlanesByAnchorIdentifier;
      uint64_t v79 = (void (**)(char *, uint64_t))(v5 + 8);
      unint64_t v80 = a1 & 0xC000000000000001;
      swift_bridgeObjectRetain();
      uint64_t v15 = 0;
      unint64_t v69 = a1;
      uint64_t v67 = v4;
      id v71 = v10;
      uint64_t v81 = v14;
      while (1)
      {
        if (v80) {
          id v16 = (id)MEMORY[0x1E4E63150](v15, a1);
        }
        else {
          id v16 = *(id *)(a1 + 8 * v15 + 32);
        }
        uint64_t v17 = v16;
        if ((*(unsigned char *)(v2 + v82) & 8) != 0)
        {
          id v18 = objc_msgSend(v16, sel_identifier);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v19 = v77;
          swift_beginAccess();
          if (*(void *)(*(void *)v19 + 16)
            && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13), (v20 & 1) != 0))
          {
            swift_endAccess();
            id v21 = *v79;
            swift_retain();
            v21(v13, v4);
            float v7 = v75;
            objc_msgSend(v17, sel_transform);
            long long v78 = v22;
            long long v74 = v23;
            long long v73 = v24;
            long long v72 = v25;
            type metadata accessor for Entity();
            HasTransform.setTransformMatrix(_:relativeTo:)();
            swift_release();
          }
          else
          {
            swift_endAccess();
            (*v79)(v13, v4);
          }
        }
        uint64_t v26 = v13;
        self;
        uint64_t v27 = swift_dynamicCastObjCClass();
        if (!v27) {
          break;
        }
        if ((*(unsigned char *)(v2 + v82) & 0x10) != 0)
        {
          uint64_t v28 = (void *)v27;
          *(void *)&long long v78 = v17;
          id v29 = objc_msgSend(v28, sel_identifier);
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v30 = v76;
          swift_beginAccess();
          if (*(void *)(*(void *)v30 + 16))
          {
            specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
            if (v31)
            {
              swift_endAccess();
              uint64_t v32 = *v79;
              swift_retain();
              v32(v10, v4);
              objc_msgSend(v28, sel_transform);
              long long v74 = v33;
              long long v73 = v34;
              long long v72 = v35;
              long long v70 = v36;
              type metadata accessor for ModelEntity();
              HasTransform.setTransformMatrix(_:relativeTo:)();
              id v37 = objc_msgSend(v28, sel_geometry);
              if (*(void *)(ARPlaneGeometry.vertices.getter() + 16) >= 0x100uLL)
              {
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
                return;
              }
              uint64_t v38 = REGeomMeshCreateFromPolygon();
              swift_bridgeObjectRelease();
              if (v38)
              {
                uint64_t v83 = v38;
                type metadata accessor for __ServiceLocator();
                static __ServiceLocator.shared.getter();
                dispatch thunk of __ServiceLocator.assetService.getter();
                swift_release();
                uint64_t v39 = v88;
                uint64_t v40 = v89;
                __swift_project_boxed_opaque_existential_1(&v84, v88);
                (*(void (**)(uint64_t, uint64_t))(v40 + 32))(v39, v40);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
                if (REAssetManagerMeshMemoryAssetCreate())
                {
                  type metadata accessor for MeshResource();
                  swift_allocObject();
                  *(void *)&long long v74 = MeshResource.init(_:)();
                  RERelease();
                  RERelease();

                  id v41 = (void (*)(uint64_t *, void))HasModel.model.modify();
                  uint64_t v43 = v42;
                  uint64_t v44 = type metadata accessor for ModelComponent();
                  int v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48))(v43, 1, v44);
                  uint64_t v4 = v67;
                  if (!v45)
                  {
                    swift_retain();
                    ModelComponent.mesh.setter();
                  }
                  v41(&v84, 0);

                  swift_release();
                  swift_release();
LABEL_37:
                  a1 = v69;
LABEL_40:
                  float v7 = v75;
                  goto LABEL_41;
                }
                RERelease();
                uint64_t v4 = v67;
              }
              swift_release();

              goto LABEL_37;
            }
          }
          swift_endAccess();
          (*v79)(v10, v4);
        }
LABEL_6:
        ++v15;
        RKARSystem.updateFaceGeometry(for:)(v17);

        uint64_t v13 = v26;
        if (v81 == v15)
        {
          swift_bridgeObjectRelease();
          RKARSystem.updateBodyTracking(with:)(a1);
          return;
        }
      }
      self;
      uint64_t v46 = swift_dynamicCastObjCClass();
      if (!v46 || (*(unsigned char *)(v2 + v82) & 0x10) == 0) {
        goto LABEL_6;
      }
      uint64_t v47 = (void *)v46;
      id v48 = v17;
      id v49 = objc_msgSend(v47, sel_identifier);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v50 = v68;
      swift_beginAccess();
      if (*(void *)(*(void *)v50 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
        if (v51)
        {
          *(void *)&long long v78 = v48;
          swift_endAccess();
          uint64_t v52 = *v79;
          swift_retain();
          v52(v7, v4);
          objc_msgSend(v47, sel_transform);
          long long v74 = v53;
          long long v73 = v54;
          long long v72 = v55;
          long long v70 = v56;
          type metadata accessor for ModelEntity();
          HasTransform.setTransformMatrix(_:relativeTo:)();
          objc_msgSend(v47, sel_extent);
          long long v74 = v57;
          type metadata accessor for __ServiceLocator();
          static __ServiceLocator.shared.getter();
          dispatch thunk of __ServiceLocator.assetService.getter();
          swift_release();
          uint64_t v58 = v88;
          uint64_t v59 = v89;
          __swift_project_boxed_opaque_existential_1(&v84, v88);
          (*(void (**)(uint64_t, uint64_t))(v59 + 32))(v58, v59);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v84);
          uint64_t v84 = 0x1000100010001;
          int v85 = 0;
          uint64_t v86 = v74;
          int v87 = DWORD2(v74);
          LOWORD(v88) = 257;
          BYTE2(v88) = 1;
          if (REAssetManagerMeshMemoryAssetCreateBox())
          {
            type metadata accessor for MeshResource();
            swift_allocObject();
            MeshResource.init(_:)();
            uint64_t v60 = (void (*)(uint64_t *, void))HasModel.model.modify();
            uint64_t v62 = v61;
            uint64_t v63 = type metadata accessor for ModelComponent();
            int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v62, 1, v63);
            uint64_t v65 = (void *)v78;
            if (!v64)
            {
              swift_retain();
              ModelComponent.mesh.setter();
            }
            v60(&v84, 0);

            swift_release();
          }
          else
          {
          }
          swift_release();
          a1 = v69;
          uint64_t v4 = v67;
          goto LABEL_40;
        }
      }
      swift_endAccess();
      (*v79)(v7, v4);

LABEL_41:
      float v10 = v71;
      goto LABEL_6;
    }
  }
}

void specialized RKARSystem.updateAR(engine:viewportSize:timeDelta:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
  uint64_t v258 = *(void *)(v8 - 8);
  uint64_t v259 = v8;
  MEMORY[0x1F4188790](v8);
  v256 = (char *)&v247 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  v257 = (char *)&v247 - v11;
  uint64_t v12 = type metadata accessor for __AssetRef();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v247 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for OSSignpostID();
  MEMORY[0x1F4188790](v16 - 8);
  static __REOSLog.UpdateLoop.getter();
  static __RESignpostID.UpdateLoop.getter();
  type metadata accessor for __REOSSignpostScope();
  swift_allocObject();
  __REOSSignpostScope.init(osLog:signpostID:name:)();
  swift_release();
  uint64_t v17 = OBJC_IVAR____TtC10RealityKit10RKARSystem_session;
  id v18 = objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_currentFrame);
  if (!v18) {
    goto LABEL_30;
  }
  uint64_t v19 = v18;
  uint64_t v255 = v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
  char v20 = (void *)MEMORY[0x1E4E64ED0]();
  id v21 = v19;

  if (!v20)
  {

LABEL_30:
    uint64_t v59 = v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame;
    goto LABEL_31;
  }
  uint64_t CameraStreamManager = a1;
  uint64_t v22 = OBJC_IVAR____TtC10RealityKit10RKARSystem_lastARFrameTimeStamp;
  double v23 = *(double *)(v4 + OBJC_IVAR____TtC10RealityKit10RKARSystem_lastARFrameTimeStamp);
  uint64_t v254 = v4;
  if (v23 <= 0.0) {
    goto LABEL_24;
  }
  uint64_t v24 = v4;
  objc_msgSend(v21, sel_timestamp);
  if (v25 != *(double *)(v4 + v22)) {
    goto LABEL_24;
  }
  usleep(0x1F4u);
  id v26 = objc_msgSend(*(id *)(v4 + v17), sel_currentFrame);
  if (v26)
  {
    uint64_t v27 = v26;
    objc_msgSend(v26, sel_timestamp);
    if (v28 != *(double *)(v24 + v22)) {
      goto LABEL_80;
    }

    objc_msgSend(v21, sel_timestamp);
    if (v29 != *(double *)(v24 + v22)) {
      goto LABEL_24;
    }
    usleep(0x1F4u);
    id v30 = objc_msgSend(*(id *)(v24 + v17), sel_currentFrame);
    if (v30)
    {
      uint64_t v27 = v30;
      objc_msgSend(v30, sel_timestamp);
      if (v31 != *(double *)(v24 + v22)) {
        goto LABEL_80;
      }

      objc_msgSend(v21, sel_timestamp);
      if (v32 != *(double *)(v24 + v22)) {
        goto LABEL_24;
      }
      usleep(0x1F4u);
      id v33 = objc_msgSend(*(id *)(v24 + v17), sel_currentFrame);
      if (v33)
      {
        uint64_t v27 = v33;
        objc_msgSend(v33, sel_timestamp);
        if (v34 != *(double *)(v24 + v22)) {
          goto LABEL_80;
        }

        objc_msgSend(v21, sel_timestamp);
        if (v35 != *(double *)(v24 + v22)) {
          goto LABEL_24;
        }
        usleep(0x1F4u);
        id v36 = objc_msgSend(*(id *)(v24 + v17), sel_currentFrame);
        if (v36)
        {
          uint64_t v27 = v36;
          objc_msgSend(v36, sel_timestamp);
          if (v37 == *(double *)(v24 + v22))
          {

            objc_msgSend(v21, sel_timestamp);
            if (v38 == *(double *)(v24 + v22))
            {
              usleep(0x1F4u);
              id v39 = objc_msgSend(*(id *)(v24 + v17), sel_currentFrame);
              if (v39)
              {
                uint64_t v27 = v39;
                objc_msgSend(v39, sel_timestamp);
                double v41 = *(double *)(v24 + v22);
                if (v40 == v41) {
                  id v42 = v27;
                }
                else {
                  id v42 = v21;
                }
                if (v40 == v41) {
                  uint64_t v27 = v21;
                }
                goto LABEL_81;
              }
              goto LABEL_34;
            }
LABEL_24:
            uint64_t v27 = v21;
            goto LABEL_25;
          }
LABEL_80:
          id v42 = v21;
LABEL_81:

          id v21 = v42;
LABEL_25:

          objc_msgSend(v27, sel_timestamp);
          uint64_t v43 = v254;
          *(void *)(v254 + v22) = v44;
          uint64_t v45 = v43;
          uint64_t v46 = v27;
          v253.super.Class isa = v46;
          uint64_t v47 = RKARSystem.orientation.getter();
          uint64_t v48 = v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame;
          id v49 = *(void **)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame);
          *(void *)uint64_t v48 = v46;
          *(void *)(v48 + 8) = v47;
          *(double *)(v48 + 16) = a2;
          *(double *)(v48 + 24) = a3;

          swift_retain();
          dispatch thunk of __RERenderGraphEmitter.__handle.getter();
          swift_release();
          __AssetRef.__as<A>(_:)();
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          RERenderGraphEmitterAssetSetRuntimeSettingUInt32();
          id v50 = objc_msgSend(*(id *)(v45 + v17), sel_configuration);
          unint64_t v51 = v255;
          if (v50)
          {
            uint64_t v52 = v50;
            uint64_t v53 = ~objc_msgSend(v50, sel_frameSemantics) & 3;
            unsigned int v54 = objc_msgSend(v52, sel_frameSemantics);

            if (v53)
            {
              LODWORD(v57) = 0;
              int v58 = v54 & 1;
            }
            else
            {
              long long v55 = *(__CVBuffer **)(*(void *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 56);
              if (v55)
              {
                id v56 = CVMetalTextureGetTexture(v55);
                swift_unknownObjectRelease();
                LODWORD(v57) = v56 != 0;
                int v58 = (v56 == 0) | v54;
              }
              else
              {
                LODWORD(v57) = 0;
                int v58 = 1;
              }
            }
            LODWORD(v250) = v58;
          }
          else
          {
            LODWORD(v250) = 0;
            LODWORD(v57) = 0;
          }
          uint64_t v61 = MEMORY[0x1E4E64ED0](v51);
          if (!v61)
          {
            __break(1u);
LABEL_198:
            __break(1u);
LABEL_199:
            __break(1u);
            goto LABEL_200;
          }
          uint64_t v62 = (void *)v61;
          uint64_t v63 = (unsigned __int8 *)(v61 + OBJC_IVAR____TtC10RealityKit6ARView___disableComposition);
          swift_beginAccess();
          int v64 = *v63;

          uint64_t v65 = MEMORY[0x1E4E64ED0](v51);
          LODWORD(v251) = v64;
          if (v65)
          {
            uint64_t v66 = (void *)v65;
            char v67 = v64 ^ 1;
            uint64_t v68 = v65 + OBJC_IVAR____TtC10RealityKit6ARView_environment;
            swift_beginAccess();
            unint64_t v69 = *(void **)(v68 + 16);
            int v70 = *(unsigned __int8 *)(v68 + 24);
            outlined copy of ARView.Environment.Background.Value(v69, v70);
            swift_retain();

            outlined copy of ARView.Environment.Background.Value(v69, v70);
            outlined consume of ARView.Environment.Background.Value(v69, v70);
            swift_release();
            if (!v70) {
              goto LABEL_44;
            }
            if (v70 == 1)
            {
              outlined consume of ARView.Environment.Background.Value(v69, 1);
              v67 &= v57 | v250;
              goto LABEL_44;
            }
            outlined consume of ARView.Environment.Background.Value(v69, 2);
          }
          char v67 = 0;
LABEL_44:
          uint64_t v71 = OBJC_IVAR____TtC10RealityKit10RKARSystem_shouldRenderCameraFeed;
          *(unsigned char *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_shouldRenderCameraFeed) = v67;
          char v72 = *(unsigned char *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions);
          uint64_t v252 = OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions;
          if ((v72 & 0x20) != 0) {
            long long v73 = &OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedRenderGraph;
          }
          else {
            long long v73 = &OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___postProcessingCombinedHDRRenderGraph;
          }
          RKARSystem.cameraRenderGraph.getter(v73);
          RERenderGraphAssetSetRuntimeNodeSettingBool();
          if (*(unsigned char *)(v45 + v71) != 1)
          {
LABEL_59:
            type metadata accessor for __ServiceLocator();
            static __ServiceLocator.shared.getter();
            dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
            swift_release();
            if (!RFGetSceneUnderstandingServiceFromRE()) {
              goto LABEL_68;
            }
            static __ServiceLocator.shared.getter();
            uint64_t v106 = dispatch thunk of __ServiceLocator.coreServiceLocator.getter();
            swift_release();
            if (!MEMORY[0x1E4E64130](v106)) {
              goto LABEL_68;
            }
            char IsDepthFeatheringEnabled = RFSceneUnderstandingServiceIsDepthFeatheringEnabled();
            RESceneUnderstandingServiceIsGuidedFilterOcclusionEnabled();
            id v108 = (char *)MEMORY[0x1E4E64ED0](v51);
            if (!v108)
            {
              if ((IsDepthFeatheringEnabled & 1) == 0) {
                goto LABEL_68;
              }
LABEL_67:
              if (one-time initialization token for __useARQuickLookFeatheringSettings != -1) {
                goto LABEL_196;
              }
              while (1)
              {
LABEL_68:
                uint64_t v111 = (void *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_suDepthFeatheringMaterial);
                swift_beginAccess();
                uint64_t v112 = v111[3];
                if (!v112) {
                  goto LABEL_198;
                }
                uint64_t v113 = v111[4];
                uint64_t v114 = __swift_project_boxed_opaque_existential_1(v111, v111[3]);
                uint64_t v115 = *(void *)(v112 - 8);
                __n128 v116 = MEMORY[0x1F4188790](v114);
                Class v118 = (char *)&v247 - ((v117 + 15) & 0xFFFFFFFFFFFFFFF0);
                (*(void (**)(char *, __n128))(v115 + 16))(v118, v116);
                (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v112, v113);
                (*(void (**)(char *, uint64_t))(v115 + 8))(v118, v112);
                dispatch thunk of __MaterialResource.coreAsset.getter();
                swift_release();
                REMaterialAssetSetFloat();
                unint64_t v119 = v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraPassthroughMaterial;
                swift_beginAccess();
                uint64_t v120 = *(void *)(v119 + 24);
                if (!v120) {
                  goto LABEL_199;
                }
                uint64_t v121 = *(void *)(v119 + 32);
                long long v122 = __swift_project_boxed_opaque_existential_1((void *)v119, *(void *)(v119 + 24));
                uint64_t v123 = *(void *)(v120 - 8);
                __n128 v124 = MEMORY[0x1F4188790](v122);
                uint64_t v126 = (char *)&v247 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
                (*(void (**)(char *, __n128))(v123 + 16))(v126, v124);
                (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v120, v121);
                (*(void (**)(char *, uint64_t))(v123 + 8))(v126, v120);
                dispatch thunk of __MaterialResource.coreAsset.getter();
                swift_release();
                REMaterialAssetSetFloat();
                RKARSystem.updateGuidedFilterOcclusion(viewportSize:)((CGSize)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));
                uint64_t v127 = *(void *)(v45 + v252);
                RKARSystem.cameraRenderGraph.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem____lazy_storage___cameraRenderGraph);
                if ((v127 & 0x80) != 0 || ((v57 | v250) & 1) == 0)
                {
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                }
                else
                {
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  uint64_t v128 = (void *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraSegmentationCompositeMaterial);
                  swift_beginAccess();
                  uint64_t v129 = v128[3];
                  if (v129)
                  {
                    uint64_t v130 = v128[4];
                    uint64_t v131 = __swift_project_boxed_opaque_existential_1(v128, v128[3]);
                    uint64_t v132 = *(void *)(v129 - 8);
                    __n128 v133 = MEMORY[0x1F4188790](v131);
                    v135 = (char *)&v247 - ((v134 + 15) & 0xFFFFFFFFFFFFFFF0);
                    (*(void (**)(char *, __n128))(v132 + 16))(v135, v133);
                    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v129, v130);
                    (*(void (**)(char *, uint64_t))(v132 + 8))(v135, v129);
                    dispatch thunk of __MaterialResource.coreAsset.getter();
                    swift_release();
                    REMaterialAssetSetFloat4x4F();
                  }
                  unint64_t v136 = v255;
                  uint64_t v137 = MEMORY[0x1E4E64ED0](v255);
                  if (v137)
                  {
                    uint64_t v138 = (void *)v137;
                    if (!*(void *)(v137 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
                      goto LABEL_203;
                    }
                    swift_retain();

                    uint64_t v139 = dispatch thunk of Scene.defaultCamera.getter();
                    swift_release();
                    if (v139)
                    {
                      int v140 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
                      uint64_t v141 = type metadata accessor for RKARSegmentationComponent();
                      unint64_t v57 = (unint64_t)v263;
                      v142 = (void (*)(void *, void))Entity.ComponentSet.subscript.modify();
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 48))(v143, 1, v141))
                      {
                        v142(v263, 0);
                        v140(v260, 0);
                        uint64_t v45 = v254;
                        unint64_t v136 = v255;
                      }
                      else
                      {
                        uint64_t v45 = v254;
                        v144 = *(__CVBuffer **)(*(void *)(v254 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache)
                                              + 48);
                        if (v144) {
                          id v145 = CVMetalTextureGetTexture(v144);
                        }
                        unint64_t v136 = v255;
                        RKARSegmentationComponent.segmentationBuffer.setter();
                        v142(v263, 0);
                        v140(v260, 0);
                      }
                      swift_release();
                    }
                  }
                  uint64_t v146 = MEMORY[0x1E4E64ED0](v136);
                  if (v146)
                  {
                    int v147 = (void *)v146;
                    if (!*(void *)(v146 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
                      goto LABEL_204;
                    }
                    swift_retain();

                    uint64_t v148 = dispatch thunk of Scene.defaultCamera.getter();
                    swift_release();
                    if (v148)
                    {
                      v149 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
                      uint64_t v150 = type metadata accessor for RKARSegmentationComponent();
                      unint64_t v57 = (unint64_t)v263;
                      v151 = (void (*)(void *, void))Entity.ComponentSet.subscript.modify();
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 48))(v152, 1, v150))
                      {
                        v151(v263, 0);
                        v149(v260, 0);
                        uint64_t v45 = v254;
                        unint64_t v136 = v255;
                      }
                      else
                      {
                        uint64_t v45 = v254;
                        uint64_t v153 = *(__CVBuffer **)(*(void *)(v254 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache)
                                              + 56);
                        if (v153) {
                          id v154 = CVMetalTextureGetTexture(v153);
                        }
                        unint64_t v136 = v255;
                        RKARSegmentationComponent.estimatedDepthData.setter();
                        v151(v263, 0);
                        v149(v260, 0);
                      }
                      swift_release();
                    }
                  }
                  uint64_t v155 = MEMORY[0x1E4E64ED0](v136);
                  if (v155)
                  {
                    v156 = (void *)v155;
                    if (!*(void *)(v155 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
                      goto LABEL_205;
                    }
                    swift_retain();

                    uint64_t v157 = dispatch thunk of Scene.defaultCamera.getter();
                    swift_release();
                    if (v157)
                    {
                      unint64_t v158 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
                      uint64_t v159 = type metadata accessor for RKARSegmentationComponent();
                      unint64_t v57 = (unint64_t)v263;
                      int v160 = (void (*)(void *, void))Entity.ComponentSet.subscript.modify();
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 48))(v161, 1, v159))
                      {
                        v160(v263, 0);
                        v158(v260, 0);
                      }
                      else
                      {
                        uint64_t v162 = *(void *)(v254 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
                        v163 = *(void **)(v162 + 32);
                        if (v163)
                        {
                          v164 = *(void **)(v162 + 40);
                          id v165 = v163;
                          unint64_t v57 = v164;
                          if (CVMetalTextureGetTexture((CVMetalTextureRef)v165))
                          {
                            CVMetalTextureGetTexture((CVMetalTextureRef)v57);

                            swift_unknownObjectRelease();
                          }
                          else
                          {
                          }
                        }
                        RKARSegmentationComponent.cameraTextureY.setter();
                        v160(v263, 0);
                        v158(v260, 0);
                      }
                      swift_release();
                      uint64_t v45 = v254;
                      unint64_t v136 = v255;
                    }
                  }
                  uint64_t v166 = MEMORY[0x1E4E64ED0](v136);
                  if (v166)
                  {
                    v167 = (void *)v166;
                    if (!*(void *)(v166 + OBJC_IVAR____TtC10RealityKit6ARView__scene)) {
                      goto LABEL_206;
                    }
                    swift_retain();

                    uint64_t v168 = dispatch thunk of Scene.defaultCamera.getter();
                    swift_release();
                    if (v168)
                    {
                      v169 = (void (*)(void *, void))dispatch thunk of Entity.components.modify();
                      uint64_t v170 = type metadata accessor for RKARSegmentationComponent();
                      v171 = (void (*)(void *, void))Entity.ComponentSet.subscript.modify();
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v170 - 8) + 48))(v172, 1, v170))
                      {
                        v171(v263, 0);
                        v169(v260, 0);
                      }
                      else
                      {
                        uint64_t v173 = *(void *)(v254 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
                        v174 = *(void **)(v173 + 32);
                        if (v174)
                        {
                          v175 = *(void **)(v173 + 40);
                          v176 = v174;
                          v177 = v175;
                          id v178 = CVMetalTextureGetTexture(v176);
                          if (v178)
                          {
                            LODWORD(v57) = v178;
                            id v179 = CVMetalTextureGetTexture(v177);

                            swift_unknownObjectRelease();
                          }
                          else
                          {
                          }
                        }
                        RKARSegmentationComponent.cameraTextureCbCr.setter();
                        v171(v263, 0);
                        v169(v260, 0);
                      }
                      swift_release();
                      uint64_t v45 = v254;
                    }
                  }
                }
                if ((v251 & 1) == 0)
                {
                  uint64_t v180 = *(void *)(v119 + 24);
                  if (!v180) {
                    goto LABEL_202;
                  }
                  uint64_t v181 = *(void *)(v119 + 32);
                  v182 = __swift_project_boxed_opaque_existential_1((void *)v119, *(void *)(v119 + 24));
                  uint64_t v183 = *(void *)(v180 - 8);
                  __n128 v184 = MEMORY[0x1F4188790](v182);
                  v186 = (char *)&v247 - ((v185 + 15) & 0xFFFFFFFFFFFFFFF0);
                  (*(void (**)(char *, __n128))(v183 + 16))(v186, v184);
                  (*(void (**)(uint64_t, uint64_t))(v181 + 8))(v180, v181);
                  (*(void (**)(char *, uint64_t))(v183 + 8))(v186, v180);
                  dispatch thunk of __MaterialResource.coreAsset.getter();
                  swift_release();
                  REMaterialAssetSetFloat();
                }
                Class isa = v253.super.isa;
                if (*(unsigned char *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame) == 1) {
                  RKARSystem.updateCameraWorldMatrix(from:)(v253.super.isa);
                }
                if (*(unsigned char *)(v45
                              + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame) == 1)
                  RKARSystem.updateCameraProjectionMatrix(from:viewportSize:)(isa, a2, a3);
                RKARSystem.updateLighting(_:)(isa);
                uint64_t v252 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
                id v188 = *(id *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore);
                OS_dispatch_semaphore.wait()();

                v189 = (void *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_removedAnchors);
                swift_beginAccess();
                v251 = v189;
                uint64_t v190 = *v189;
                uint64_t v191 = *(void *)(*v189 + 16);
                unint64_t v192 = MEMORY[0x1E4FBC860];
                if (v191) {
                  break;
                }
LABEL_134:
                uint64_t v255 = v192;
                v200 = (uint64_t *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_addedAnchors);
                swift_beginAccess();
                v250 = v200;
                uint64_t v201 = *v200;
                uint64_t v45 = *(void *)(*v200 + 16);
                unint64_t v202 = MEMORY[0x1E4FBC860];
                if (v45)
                {
                  unint64_t v265 = MEMORY[0x1E4FBC860];
                  swift_bridgeObjectRetain();
                  specialized ContiguousArray.reserveCapacity(_:)();
                  int64_t v203 = specialized Set.startIndex.getter(v201);
                  int v205 = v204;
                  unint64_t v119 = v206 & 1;
                  unint64_t v57 = v201 + 56;
                  while ((v203 & 0x8000000000000000) == 0 && v203 < 1 << *(unsigned char *)(v201 + 32))
                  {
                    if (((*(void *)(v57 + (((unint64_t)v203 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v203) & 1) == 0) {
                      goto LABEL_166;
                    }
                    if (*(_DWORD *)(v201 + 36) != v205) {
                      goto LABEL_167;
                    }
                    id v207 = *(id *)(*(void *)(v201 + 48) + 8 * v203);
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                    int64_t v208 = specialized _NativeSet.index(after:)(v203, v205, v119 & 1, v201);
                    int64_t v203 = v208;
                    int v205 = v209;
                    unint64_t v119 = v210 & 1;
                    if (!--v45)
                    {
                      outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v208, v209, v210 & 1);
                      unint64_t v202 = v265;
                      swift_bridgeObjectRelease();
                      goto LABEL_142;
                    }
                  }
LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
                  goto LABEL_168;
                }
LABEL_142:
                v211 = (uint64_t *)(v254 + OBJC_IVAR____TtC10RealityKit10RKARSystem_updatedAnchors);
                swift_beginAccess();
                uint64_t v45 = *v211;
                unint64_t v119 = *(void *)(*v211 + 16);
                if (v119)
                {
                  v248 = v211;
                  uint64_t CameraStreamManager = v202;
                  unint64_t v264 = MEMORY[0x1E4FBC860];
                  swift_bridgeObjectRetain();
                  specialized ContiguousArray.reserveCapacity(_:)();
                  int64_t v212 = specialized Set.startIndex.getter(v45);
                  int v214 = v213;
                  char v216 = v215 & 1;
                  unint64_t v57 = v45 + 56;
                  while ((v212 & 0x8000000000000000) == 0 && v212 < 1 << *(unsigned char *)(v45 + 32))
                  {
                    if (((*(void *)(v57 + (((unint64_t)v212 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v212) & 1) == 0) {
                      goto LABEL_169;
                    }
                    if (*(_DWORD *)(v45 + 36) != v214) {
                      goto LABEL_170;
                    }
                    *(id *)(*(void *)(v45 + 48) + 8 * v212);
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                    int64_t v217 = specialized _NativeSet.index(after:)(v212, v214, v216 & 1, v45);
                    int64_t v212 = v217;
                    int v214 = v218;
                    char v216 = v219 & 1;
                    if (!--v119)
                    {
                      outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v217, v218, v219 & 1);
                      unint64_t v119 = v264;
                      swift_bridgeObjectRelease();
                      v211 = v248;
                      unint64_t v202 = CameraStreamManager;
                      goto LABEL_151;
                    }
                  }
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
                  goto LABEL_171;
                }
                unint64_t v119 = MEMORY[0x1E4FBC860];
LABEL_151:
                uint64_t v220 = MEMORY[0x1E4FBC870];
                void *v251 = MEMORY[0x1E4FBC870];
                swift_bridgeObjectRelease();
                uint64_t *v250 = v220;
                swift_bridgeObjectRelease();
                uint64_t *v211 = v220;
                swift_bridgeObjectRelease();
                id v221 = *(id *)(v254 + v252);
                OS_dispatch_semaphore.signal()();

                RKARSystem.removeAnchors(_:)(v255);
                RKARSystem.addAnchors(_:)(v202);
                swift_bridgeObjectRelease();
                specialized RKARSystem.updateAnchors(_:frame:)(v119);
                if (!(v119 >> 62))
                {
                  uint64_t v222 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (!v222) {
                    goto LABEL_172;
                  }
                  goto LABEL_153;
                }
LABEL_171:
                swift_bridgeObjectRetain();
                uint64_t v222 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!v222)
                {
LABEL_172:
                  swift_bridgeObjectRelease();
                  unint64_t v223 = MEMORY[0x1E4FBC860];
                  goto LABEL_173;
                }
LABEL_153:
                unint64_t v264 = MEMORY[0x1E4FBC860];
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v222 & ~(v222 >> 63), 0);
                if (v222 < 0)
                {
                  __break(1u);
                  goto LABEL_195;
                }
                uint64_t v45 = 0;
                unint64_t v223 = v264;
                do
                {
                  if ((v119 & 0xC000000000000001) != 0) {
                    id v224 = (id)MEMORY[0x1E4E63150](v45, v119);
                  }
                  else {
                    id v224 = *(id *)(v119 + 8 * v45 + 32);
                  }
                  id v225 = v224;
                  uint64_t v226 = *(int *)(v259 + 48);
                  id v227 = objc_msgSend(v224, sel_identifier);
                  uint64_t v228 = (uint64_t)v257;
                  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                  *(void *)(v228 + v226) = v225;
                  unint64_t v264 = v223;
                  unint64_t v57 = *(void *)(v223 + 16);
                  unint64_t v229 = *(void *)(v223 + 24);
                  if (v57 >= v229 >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v229 > 1, v57 + 1, 1);
                    uint64_t v228 = (uint64_t)v257;
                    unint64_t v223 = v264;
                  }
                  ++v45;
                  *(void *)(v223 + 16) = v57 + 1;
                  outlined init with take of vImage_CGImageFormat?(v228, v223+ ((*(unsigned __int8 *)(v258 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v258 + 80))+ *(void *)(v258 + 72) * v57, (uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
                }
                while (v222 != v45);
                swift_bridgeObjectRelease();
LABEL_173:
                unint64_t v230 = v255;
                if (*(void *)(v223 + 16))
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ARAnchor>);
                  uint64_t v231 = static _DictionaryStorage.allocate(capacity:)();
                }
                else
                {
                  uint64_t v231 = MEMORY[0x1E4FBC868];
                }
                unint64_t v264 = v231;
                uint64_t v232 = swift_bridgeObjectRetain();
                v233 = 0;
                specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v232, 1, &v264);
                swift_bridgeObjectRelease();
                swift_release();
                if (v230 >> 62)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v234 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  if (!v234)
                  {
LABEL_189:
                    swift_bridgeObjectRelease();
                    if (!*(void *)(MEMORY[0x1E4FBC860] + 16)) {
                      goto LABEL_190;
                    }
LABEL_187:
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, ARAnchor>);
                    uint64_t v245 = static _DictionaryStorage.allocate(capacity:)();
LABEL_191:
                    unint64_t v264 = v245;
                    uint64_t v246 = swift_bridgeObjectRetain();
                    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v246, 1, &v264);
                    if (v233) {
                      goto LABEL_208;
                    }
                    swift_bridgeObjectRelease();
                    swift_release();
                    Class v60 = v253.super.isa;
                    RKARSystem.updateDepthOfField(for:)(v253.super.isa);
                    RKARSystem.updateMotionBlur(for:)(v60);
                    RKARSystem.updateCameraNoise(for:)(v60);
                    RKARSystem.updateFeaturePointDebugVisualization(for:)((ARFrame)v60);
                    RKARSystem.updateCollaborationState()();
                    RKARSystem.updateSceneUnderstandingOptions()();
                    goto LABEL_193;
                  }
                }
                else
                {
                  uint64_t v234 = *(void *)((v230 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  if (!v234) {
                    goto LABEL_189;
                  }
                }
                v257 = 0;
                unint64_t v264 = MEMORY[0x1E4FBC860];
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v234 & ~(v234 >> 63), 0);
                if ((v234 & 0x8000000000000000) == 0)
                {
                  uint64_t v235 = 0;
                  unint64_t v236 = v264;
                  unint64_t v237 = v230 & 0xC000000000000001;
                  do
                  {
                    if (v237) {
                      id v238 = (id)MEMORY[0x1E4E63150](v235, v230);
                    }
                    else {
                      id v238 = *(id *)(v230 + 8 * v235 + 32);
                    }
                    id v239 = v238;
                    uint64_t v240 = *(int *)(v259 + 48);
                    id v241 = objc_msgSend(v238, sel_identifier);
                    uint64_t v242 = (uint64_t)v256;
                    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                    *(void *)(v242 + v240) = v239;
                    unint64_t v264 = v236;
                    unint64_t v244 = *(void *)(v236 + 16);
                    unint64_t v243 = *(void *)(v236 + 24);
                    if (v244 >= v243 >> 1)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v243 > 1, v244 + 1, 1);
                      uint64_t v242 = (uint64_t)v256;
                      unint64_t v236 = v264;
                    }
                    ++v235;
                    *(void *)(v236 + 16) = v244 + 1;
                    outlined init with take of vImage_CGImageFormat?(v242, v236+ ((*(unsigned __int8 *)(v258 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v258 + 80))+ *(void *)(v258 + 72) * v244, (uint64_t *)&demangling cache variable for type metadata for (UUID, ARAnchor));
                    unint64_t v230 = v255;
                  }
                  while (v234 != v235);
                  swift_bridgeObjectRelease();
                  v233 = v257;
                  if (*(void *)(v236 + 16)) {
                    goto LABEL_187;
                  }
LABEL_190:
                  uint64_t v245 = MEMORY[0x1E4FBC868];
                  goto LABEL_191;
                }
LABEL_195:
                __break(1u);
LABEL_196:
                swift_once();
              }
              v263[0] = MEMORY[0x1E4FBC860];
              swift_bridgeObjectRetain();
              specialized ContiguousArray.reserveCapacity(_:)();
              int64_t v193 = specialized Set.startIndex.getter(v190);
              uint64_t v45 = v194;
              LODWORD(v57) = v195 & 1;
              while ((v193 & 0x8000000000000000) == 0 && v193 < 1 << *(unsigned char *)(v190 + 32))
              {
                if (((*(void *)(v190 + 56 + (((unint64_t)v193 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v193) & 1) == 0) {
                  goto LABEL_163;
                }
                if (*(_DWORD *)(v190 + 36) != v45) {
                  goto LABEL_164;
                }
                id v196 = *(id *)(*(void *)(v190 + 48) + 8 * v193);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                unint64_t v119 = *(void *)(v263[0] + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
                int64_t v197 = specialized _NativeSet.index(after:)(v193, v45, v57 & 1, v190);
                int64_t v193 = v197;
                uint64_t v45 = v198;
                LODWORD(v57) = v199 & 1;
                if (!--v191)
                {
                  outlined consume of Set<SpatialTrackingSession.Configuration.SceneUnderstandingCapability>.Index._Variant(v197, v198, v199 & 1);
                  unint64_t v192 = v263[0];
                  swift_bridgeObjectRelease();
                  uint64_t v45 = v254;
                  goto LABEL_134;
                }
              }
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
              goto LABEL_165;
            }
            uint64_t v109 = *(void *)&v108[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
            if (v109)
            {
              uint64_t v110 = *(void *)(v109 + OBJC_IVAR____TtC10RealityKit10RKARSystem_debugOptions);

              if ((IsDepthFeatheringEnabled & 1) == 0 || (v110 & 0x40) != 0) {
                goto LABEL_68;
              }
              goto LABEL_67;
            }
            goto LABEL_207;
          }
          if (dispatch thunk of __Engine.services.getter())
          {
            dispatch thunk of __ServiceLocator.renderService.getter();
            swift_release();
            uint64_t v74 = v261;
            uint64_t v75 = v262;
            __swift_project_boxed_opaque_existential_1(v260, v261);
            (*(void (**)(uint64_t, uint64_t))(v75 + 24))(v74, v75);
            uint64_t CameraStreamManager = RERenderManagerGetCameraStreamManager();
            uint64_t v76 = *(void *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
            RKARTextureCache.extractTextures(from:)(v253);
            uint64_t v77 = RKARSystem.orientation.getter();
            *(double *)&long long v78 = ARFrame.displayToCameraMatrix(for:viewportSize:)(v77);
            uint64_t v79 = v45;
            unint64_t v80 = (_OWORD *)(v45 + OBJC_IVAR____TtC10RealityKit10RKARSystem_displayToCameraMatrix);
            *unint64_t v80 = v78;
            v80[1] = v81;
            v80[2] = v82;
            v80[3] = v83;
            exp2f(*(float *)(v79 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent));
            uint64_t v84 = (void *)(v79 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraPassthroughMaterial);
            swift_beginAccess();
            uint64_t v85 = v84[3];
            if (v85)
            {
              uint64_t v86 = v84[4];
              int v87 = __swift_project_boxed_opaque_existential_1(v84, v84[3]);
              uint64_t v88 = *(void *)(v85 - 8);
              __n128 v89 = MEMORY[0x1F4188790](v87);
              uint64_t v91 = (char *)&v247 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, __n128))(v88 + 16))(v91, v89);
              (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v86);
              (*(void (**)(char *, uint64_t))(v88 + 8))(v91, v85);
              dispatch thunk of __MaterialResource.coreAsset.getter();
              swift_release();
              REMaterialAssetSetFloat();
              uint64_t v92 = *(void **)(v76 + 32);
              unint64_t v51 = v255;
              if (v92)
              {
                uint64_t v93 = *(void **)(v76 + 40);
                id v94 = v92;
                uint64_t v95 = v93;
                if (CVMetalTextureGetTexture((CVMetalTextureRef)v94))
                {
                  id v96 = CVMetalTextureGetTexture(v95);

                  if (v96)
                  {
                    uint64_t v97 = v84[3];
                    if (v97)
                    {
                      uint64_t v98 = v84[4];
                      uint64_t v99 = __swift_project_boxed_opaque_existential_1(v84, v84[3]);
                      v248 = &v247;
                      uint64_t v100 = *(void *)(v97 - 8);
                      __n128 v101 = MEMORY[0x1F4188790](v99);
                      uint64_t v103 = (char *)&v247 - ((v102 + 15) & 0xFFFFFFFFFFFFFFF0);
                      (*(void (**)(char *, __n128))(v100 + 16))(v103, v101);
                      char v104 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
                      uint64_t v105 = v98;
                      unint64_t v51 = v255;
                      v104(v97, v105);
                      (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v97);
                      dispatch thunk of __MaterialResource.coreAsset.getter();
                      swift_release();
                      RECameraStreamManagerSetARKitPassthrough();
                      REMaterialAssetSetTexture();
                      REMaterialAssetSetTexture();
                      REMaterialAssetSetFloat4x4F();
                    }
                    swift_unknownObjectRelease();
                  }
                  swift_unknownObjectRelease();
                }
                else
                {
                }
              }
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v260);
              uint64_t v45 = v254;
              goto LABEL_59;
            }
LABEL_201:
            __break(1u);
LABEL_202:
            __break(1u);
LABEL_203:
            __break(1u);
LABEL_204:
            __break(1u);
LABEL_205:
            __break(1u);
LABEL_206:
            __break(1u);
LABEL_207:
            __break(1u);
LABEL_208:
            swift_unexpectedError();
            __break(1u);
            return;
          }
LABEL_200:
          __break(1u);
          goto LABEL_201;
        }
      }
    }
  }
LABEL_34:

  uint64_t v59 = v24 + OBJC_IVAR____TtC10RealityKit10RKARSystem_capturedFrame;
LABEL_31:
  Class v60 = *(Class *)v59;
  *(_OWORD *)uint64_t v59 = 0u;
  *(_OWORD *)(v59 + 16) = 0u;
LABEL_193:
}

void specialized RKARSystem.updateCommon(engine:viewportSize:timeDelta:)()
{
  uint64_t v1 = type metadata accessor for __AssetRef();
  uint64_t v11 = *(void *)(v1 - 8);
  uint64_t v2 = v11;
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = OBJC_IVAR____TtC10RealityKit10RKARSystem_prevOrientation;
  RKARSystem.orientation.getter();
  *(void *)(v0 + v5) = RKARSystem.orientation.getter();
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v2 + 8);
  v6(v4, v1);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();
  swift_retain();
  dispatch thunk of __RERenderGraphEmitter.__handle.getter();
  swift_release();
  __AssetRef.__as<A>(_:)();
  v6(v4, v1);
  RERenderGraphEmitterAssetSetRuntimeSettingBool();
  id v7 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session), sel_configuration);
  if (v7
    && (uint64_t v8 = v7,
        id v9 = objc_msgSend(v7, sel_videoFormat),
        v8,
        id v10 = objc_msgSend(v9, sel_device),
        v9,
        v10))
  {
  }
  else
  {
    swift_retain();
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    v6(v4, v1);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
  }
}

uint64_t specialized RKARSystem.session(_:didUpdate:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = MEMORY[0x1F4188790](v8).n128_u64[0];
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(a1, sel_renderFramesPerSecond, v10);
  type metadata accessor for ARReferenceObject(0, &lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v14 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v2;
  *(void *)(v15 + 24) = v13;
  aBlock[4] = partial apply for closure #1 in RKARSystem.session(_:didUpdate:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_10;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v2;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1E4E62EC0](0, v12, v7, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

void specialized RKARSystem.session(_:didAdd:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
  id v5 = *(id *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore);
  OS_dispatch_semaphore.wait()();

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v29 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = v8 + 1;
        MEMORY[0x1E4E63150]();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v8 = v9;
      }
      while (v6 != v9);
    }
    else
    {
      double v10 = (void **)(a1 + 32);
      do
      {
        uint64_t v11 = *v10++;
        id v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v6;
      }
      while (v6);
    }
    uint64_t v7 = v29;
  }
  uint64_t v13 = *(void *)(v7 + 16);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_updatedAnchors);
    uint64_t v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_addedAnchors);
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    do
    {
      id v17 = *(void **)(v7 + 8 * v16++ + 32);
      swift_beginAccess();
      id v18 = v17;
      uint64_t v19 = (void *)specialized Set._Variant.remove(_:)(v18);
      swift_endAccess();

      swift_beginAccess();
      id v20 = v18;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *v14;
      uint64_t *v14 = 0x8000000000000000;
      uint64_t v22 = (void *)specialized _NativeSet.update(with:isUnique:)(v20, isUniquelyReferenced_nonNull_native);
      uint64_t *v14 = v27;
      swift_bridgeObjectRelease();
      swift_endAccess();

      swift_beginAccess();
      id v23 = v20;
      int v24 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = *v15;
      *uint64_t v15 = 0x8000000000000000;
      double v25 = (void *)specialized _NativeSet.update(with:isUnique:)(v23, v24);
      *uint64_t v15 = v28;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
    while (v13 != v16);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v26 = *(id *)(v2 + v4);
  OS_dispatch_semaphore.signal()();
}

void specialized RKARSystem.session(_:didUpdate:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
  id v5 = *(id *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore);
  OS_dispatch_semaphore.wait()();

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = v8 + 1;
        MEMORY[0x1E4E63150]();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v8 = v9;
      }
      while (v6 != v9);
    }
    else
    {
      double v10 = (void **)(a1 + 32);
      do
      {
        uint64_t v11 = *v10++;
        id v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v6;
      }
      while (v6);
    }
    uint64_t v7 = v22;
  }
  uint64_t v13 = *(void *)(v7 + 16);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_updatedAnchors);
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void **)(v7 + 8 * v15++ + 32);
      swift_beginAccess();
      id v17 = v16;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v21 = *v14;
      uint64_t *v14 = 0x8000000000000000;
      uint64_t v19 = (void *)specialized _NativeSet.update(with:isUnique:)(v17, isUniquelyReferenced_nonNull_native);
      uint64_t *v14 = v21;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
    while (v13 != v15);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v20 = *(id *)(v2 + v4);
  OS_dispatch_semaphore.signal()();
}

void specialized RKARSystem.session(_:didRemove:)(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore;
  id v5 = *(id *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_anchorSemaphore);
  OS_dispatch_semaphore.wait()();

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v25 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      return;
    }
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = v8 + 1;
        MEMORY[0x1E4E63150]();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v8 = v9;
      }
      while (v6 != v9);
    }
    else
    {
      double v10 = (void **)(a1 + 32);
      do
      {
        uint64_t v11 = *v10++;
        id v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v6;
      }
      while (v6);
    }
    uint64_t v7 = v25;
  }
  uint64_t v13 = *(void *)(v7 + 16);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_removedAnchors);
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = *(void **)(v7 + 8 * v15++ + 32);
      swift_beginAccess();
      id v17 = v16;
      id v18 = (void *)specialized Set._Variant.remove(_:)(v17);
      swift_endAccess();

      swift_beginAccess();
      uint64_t v19 = (void *)specialized Set._Variant.remove(_:)(v17);
      swift_endAccess();

      swift_beginAccess();
      id v20 = v17;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *v14;
      uint64_t *v14 = 0x8000000000000000;
      uint64_t v22 = (void *)specialized _NativeSet.update(with:isUnique:)(v20, isUniquelyReferenced_nonNull_native);
      uint64_t *v14 = v24;
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
    while (v13 != v15);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v23 = *(id *)(v2 + v4);
  OS_dispatch_semaphore.signal()();
}

void specialized RKARSystem.SessionDelegate.session(_:didOutputCollaborationData:)(void *a1)
{
  v16[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v3 = MEMORY[0x1E4E64ED0](v1 + OBJC_IVAR____TtCC10RealityKit10RKARSystemP33_7C42569567E429B6AB2725E2C535D52915SessionDelegate_system);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    id v5 = self;
    v16[0] = 0;
    id v6 = a1;
    id v7 = objc_msgSend(v5, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v6, 1, v16);
    id v8 = v16[0];
    if (v7)
    {
      uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;

      char v12 = objc_msgSend(v6, sel_vioDataType) == (id)7;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      RKARSystem.sendDataToPeers(_:sendUnreliably:)(isa, v12);

      outlined consume of Data._Representation(v9, v11);
    }
    else
    {
      uint64_t v14 = v8;
      uint64_t v15 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      id v6 = v4;
    }
  }
}

void specialized RKARSystem.SessionDelegate.session(_:requestedRunWith:options:)()
{
  uint64_t v1 = MEMORY[0x1E4E64ED0](v0 + OBJC_IVAR____TtCC10RealityKit10RKARSystemP33_7C42569567E429B6AB2725E2C535D52915SessionDelegate_system);
  if (v1)
  {
    uint64_t v2 = v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView;
    id v13 = (id)v1;
    uint64_t v3 = (void *)MEMORY[0x1E4E64ED0](v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_arView);

    if (v3)
    {
      uint64_t v4 = MEMORY[0x1E4E64ED0](v2);
      if (!v4)
      {
        __break(1u);
        goto LABEL_14;
      }
      id v5 = (void *)v4;
      uint64_t v6 = v4 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
      swift_beginAccess();
      LOBYTE(v6) = *(unsigned char *)(v6 + 2);

      if (v6)
      {
        uint64_t v7 = MEMORY[0x1E4E64ED0](v2);
        if (v7)
        {
          id v8 = (char *)v7;
          uint64_t v9 = MEMORY[0x1E4E64ED0](v2);
          if (v9)
          {
            unint64_t v10 = (void *)v9;
            uint64_t v11 = v9 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
            swift_beginAccess();
            LOBYTE(v11) = *(unsigned char *)(v11 + 3);

            char v12 = &v8[OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents];
            swift_beginAccess();
            v12[2] = v11;

            return;
          }
          goto LABEL_15;
        }
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        return;
      }
    }
    else
    {
    }
  }
}

uint64_t sub_1E2AA9F48()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in RKARSystem.session(_:didUpdate:)()
{
  closure #1 in RKARSystem.session(_:didUpdate:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

void specialized RKARSystem.fallbackAmbientColor.setter(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor);
  *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor) = a1;
  id v5 = a1;

  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions) & 2) != 0)
  {
    if (*(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity))
    {
      type metadata accessor for AmbientLight();
      uint64_t v6 = (void (*)(unsigned char *, void))HasAmbientLight.light.modify();
      __AmbientLightComponent.intensity.setter();
      v6(v9, 0);
      id v7 = *(id *)(v2 + v3);
      id v8 = (void (*)(unsigned char *, void))HasAmbientLight.light.modify();
      __AmbientLightComponent.color.setter();
      v8(v9, 0);
    }
  }
}

uint64_t outlined init with take of Material(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined assign with take of Material?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Entity.__accessibilityWrappers(rootEntityWrapper:)(id a1)
{
  uint64_t v2 = type metadata accessor for Entity.ChildCollection();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.ChildCollection.IndexingIterator<Entity.ChildCollection>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v28 = MEMORY[0x1E4FBC860];
  if ((Entity.__isAccessibilityEnabled.getter() & 1) == 0)
  {
    if (Entity.__isAccessibilityRoot.getter())
    {
      uint64_t v11 = (objc_class *)type metadata accessor for __EntityAccessibilityWrapper();
      char v12 = (char *)objc_allocWithZone(v11);
      swift_weakInit();
      swift_weakAssign();
      *(void *)&v12[OBJC_IVAR____TtC10RealityKit28__EntityAccessibilityWrapper_rootEntityWrapper] = a1;
      v25.receiver = v12;
      v25.super_class = v11;
      id v13 = a1;
      a1 = objc_msgSendSuper2(&v25, sel_init);
      id v14 = a1;
    }
    else
    {
      id v14 = 0;
    }
    id v15 = a1;
    unint64_t v27 = v7;
    type metadata accessor for Entity();
    HasHierarchy.children.getter();
    Entity.ChildCollection.makeIterator()();
    while (1)
    {
      Entity.ChildCollection.IndexingIterator.next()();
      if (!v26) {
        break;
      }
      unint64_t v16 = Entity.__accessibilityWrappers(rootEntityWrapper:)(a1);
      specialized Array.append<A>(contentsOf:)(v16);
      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v17 = v27;
    if (!v14) {
      goto LABEL_15;
    }
    if (v27 >> 62)
    {
      id v20 = v14;
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v21) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v19 = v14;
      if (v18)
      {
LABEL_14:

LABEL_15:
        specialized Array.append<A>(contentsOf:)(v17);
LABEL_20:

        return v28;
      }
    }
    swift_bridgeObjectRelease();
    id v14 = v14;
    MEMORY[0x1E4E62CE0]();
    if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    goto LABEL_20;
  }
  id v8 = (objc_class *)type metadata accessor for __EntityAccessibilityWrapper();
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  swift_weakInit();
  swift_weakAssign();
  *(void *)&v9[OBJC_IVAR____TtC10RealityKit28__EntityAccessibilityWrapper_rootEntityWrapper] = a1;
  v24.receiver = v9;
  v24.super_class = v8;
  id v10 = a1;
  objc_msgSendSuper2(&v24, sel_init);
  MEMORY[0x1E4E62CE0]();
  if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return v28;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1E4E63160](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t type metadata accessor for __EntityAccessibilityWrapper()
{
  return self;
}

_OWORD *Entity.__calculateScreenBoundingRect(in:)(char *a1)
{
  type metadata accessor for Entity();
  HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)();
  long long v22 = v2;
  long long v23 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
  uint64_t result = (_OWORD *)swift_allocObject();
  int32x4_t v5 = vdupq_lane_s32(0, 0);
  int32x4_t v6 = v5;
  v6.i32[0] = v22;
  int32x4_t v7 = v6;
  v7.i32[1] = DWORD1(v23);
  v7.i32[2] = DWORD2(v22);
  v5.i32[0] = v23;
  int32x4_t v8 = v5;
  v8.i32[1] = DWORD1(v23);
  v8.i32[2] = DWORD2(v22);
  result[2] = v23;
  result[3] = v7;
  long long v9 = v23;
  LODWORD(v9) = v22;
  HIDWORD(v9) = v6.i32[3];
  long long v10 = v22;
  LODWORD(v10) = v23;
  HIDWORD(v10) = v5.i32[3];
  result[4] = v8;
  result[5] = v9;
  v5.i32[1] = DWORD1(v22);
  v6.i32[1] = DWORD1(v22);
  result[6] = v22;
  result[7] = v10;
  v6.i32[2] = DWORD2(v23);
  v5.i32[2] = DWORD2(v23);
  result[8] = v6;
  result[9] = v5;
  uint64_t v11 = *(void *)&a1[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  if (v11)
  {
    if ((*(unsigned char *)(v11 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode) & 1) != 0
      || *(unsigned char *)(v11 + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame) != 1)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = *(unsigned __int8 *)(v11
                               + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
    }
    double v13 = 1.79769313e308;
    double v14 = -1.79769313e308;
    uint64_t v15 = 32;
    double v16 = -1.79769313e308;
    double v17 = 1.79769313e308;
    do
    {
      HasTransform.convert(position:to:)();
      double v19 = COERCE_DOUBLE(ARView.project(_:isAR:)(v12, v18));
      if ((v21 & 1) == 0)
      {
        if (v17 > v19) {
          double v17 = v19;
        }
        if (v13 > v20) {
          double v13 = v20;
        }
        if (v16 <= v19) {
          double v16 = v19;
        }
        if (v14 <= v20) {
          double v14 = v20;
        }
      }
      v15 += 16;
    }
    while (v15 != 160);
    swift_setDeallocating();
    swift_deallocClassInstance();
    objc_msgSend(a1, sel_bounds);
    v25.origin.double x = v17;
    v25.origin.double y = v13;
    v25.size.width = v16 - v17;
    v25.size.height = v14 - v13;
    return (_OWORD *)CGRectIntersectsRect(v24, v25);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __EntityAccessibilityWrapper.entityLabel.getter()
{
  uint64_t v16 = type metadata accessor for AccessibilityComponent();
  uint64_t v0 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  long long v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x1F4188790](v3 - 8);
  int32x4_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LocalizedStringResource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v15 - v11;
  if (swift_weakLoadStrong())
  {
    Entity.accessibilityComponent.getter((uint64_t)v2);
    AccessibilityComponent.label.getter();
    (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v16);
    swift_release();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
      uint64_t v13 = String.init(localized:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      return v13;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v5, &demangling cache variable for type metadata for LocalizedStringResource?);
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  uint64_t v13 = Entity.__accessibilityLabel.getter();
  swift_release();
  return v13;
}

id @objc __EntityAccessibilityWrapper.entityLabel.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x1E4E62C20](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t __EntityAccessibilityWrapper.entityValue.getter()
{
  uint64_t v0 = type metadata accessor for AccessibilityComponent();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedStringResource?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LocalizedStringResource();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v16 - v12;
  if (!swift_weakLoadStrong())
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_5;
  }
  Entity.accessibilityComponent.getter((uint64_t)v3);
  AccessibilityComponent.value.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_5:
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v6, &demangling cache variable for type metadata for LocalizedStringResource?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
  uint64_t v14 = String.init(localized:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  return v14;
}

uint64_t @objc __EntityAccessibilityWrapper.isEntityRoot.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (swift_weakLoadStrong())
  {
    id v5 = a1;
    char v6 = a3();

    swift_release();
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

id closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a3;
  uint64_t v4 = type metadata accessor for AccessibilityComponent.RotorType(0);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for AccessibilityEvents.RotorNavigation(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  id v12 = objc_msgSend(a1, sel_currentItem);
  id v13 = objc_msgSend(v12, sel_targetElement);

  memset(v30, 0, sizeof(v30));
  if (v13)
  {
    type metadata accessor for __EntityAccessibilityWrapper();
    if (!swift_dynamicCastClass())
    {
      *((void *)&v28 + 1) = swift_getObjectType();
      *(void *)&long long v27 = v13;
      swift_unknownObjectRetain();
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
      goto LABEL_8;
    }
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v15 = Strong;
      *((void *)&v28 + 1) = type metadata accessor for Entity();
      *(void *)&long long v27 = v15;
      outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
      goto LABEL_8;
    }
  }
  outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
  long long v27 = 0u;
  long long v28 = 0u;
LABEL_8:
  outlined init with take of Any?((uint64_t)&v27, (uint64_t)v30);
  uint64_t v16 = swift_weakLoadStrong();
  if (v16)
  {
    uint64_t v17 = v16;
    outlined init with copy of AccessibilityEvents.CustomAction(v26, (uint64_t)v6, type metadata accessor for AccessibilityComponent.RotorType);
    outlined init with copy of Any?((uint64_t)v30, (uint64_t)&v27);
    swift_retain();
    id v18 = objc_msgSend(a1, sel_searchDirection);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v10;
    *(void *)(v19 + 24) = v11;
    outlined init with take of AccessibilityComponent.RotorType((uint64_t)v6, (uint64_t)v9);
    *(void *)&v9[v7[5]] = v17;
    outlined init with take of Any?((uint64_t)&v27, (uint64_t)&v9[v7[6]]);
    *(void *)&v9[v7[7]] = v18;
    double v20 = (Swift::Int (**)(uint64_t))&v9[v7[8]];
    *double v20 = partial apply for closure #1 in closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter;
    v20[1] = (Swift::Int (*)(uint64_t))v19;
    *((void *)&v28 + 1) = v7;
    uint64_t v29 = &protocol witness table for AccessibilityEvents.RotorNavigation;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v27);
    outlined init with copy of AccessibilityEvents.CustomAction((uint64_t)v9, (uint64_t)boxed_opaque_existential_0, type metadata accessor for AccessibilityEvents.RotorNavigation);
    swift_retain();
    long long v22 = v11;
    Entity.sendEvent(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v27);
    OS_dispatch_semaphore.wait()();
    swift_beginAccess();
    id v23 = *(id *)(v10 + 16);
    if (v23) {
      id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB13C8]), sel_initWithTargetElement_targetRange_, v23, 0);
    }
    swift_unknownObjectRelease();
    swift_release();

    outlined destroy of AccessibilityEvents.CustomAction((uint64_t)v9, type metadata accessor for AccessibilityEvents.RotorNavigation);
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
    swift_release();
  }
  else
  {
    outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?((uint64_t)v30, &demangling cache variable for type metadata for Any?);
    swift_release();

    swift_unknownObjectRelease();
    return 0;
  }
  return v23;
}

Swift::Int closure #1 in closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 16);
  outlined init with copy of Any(a1, (uint64_t)v10);
  type metadata accessor for Entity();
  if (swift_dynamicCast())
  {
    uint64_t v4 = (objc_class *)type metadata accessor for __EntityAccessibilityWrapper();
    uint64_t v5 = (char *)objc_allocWithZone(v4);
    swift_weakInit();
    swift_weakAssign();
    *(void *)&v5[OBJC_IVAR____TtC10RealityKit28__EntityAccessibilityWrapper_rootEntityWrapper] = 0;
    v8.receiver = v5;
    v8.super_class = v4;
    id v6 = objc_msgSendSuper2(&v8, sel_init);
    swift_release();
    swift_beginAccess();
    *uint64_t v3 = v6;
LABEL_5:
    swift_unknownObjectRelease();
    return OS_dispatch_semaphore.signal()();
  }
  outlined init with copy of Any(a1, (uint64_t)v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject);
  if (swift_dynamicCast())
  {
    swift_beginAccess();
    *uint64_t v3 = v9;
    goto LABEL_5;
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomActions.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for AccessibilityEvents.CustomAction(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v12[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LocalizedStringResource();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, a2, v8);
  *(void *)&v7[*(int *)(v5 + 20)] = a3;
  uint64_t v12[3] = v5;
  v12[4] = (uint64_t)&protocol witness table for AccessibilityEvents.CustomAction;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  outlined init with copy of AccessibilityEvents.CustomAction((uint64_t)v7, (uint64_t)boxed_opaque_existential_0, type metadata accessor for AccessibilityEvents.CustomAction);
  swift_retain();
  Entity.sendEvent(_:)();
  outlined destroy of AccessibilityEvents.CustomAction((uint64_t)v7, type metadata accessor for AccessibilityEvents.CustomAction);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return 1;
}

uint64_t __EntityAccessibilityWrapper.entityAccessibilityCustomContent.getter()
{
  uint64_t v0 = type metadata accessor for LocalizedStringResource();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v1 = type metadata accessor for AccessibilityComponent.CustomContent();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AccessibilityComponent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (Strong)
  {
    Entity.accessibilityComponent.getter((uint64_t)v8);
    uint64_t v11 = AccessibilityComponent.customContent.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_release();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v34 = v10;
      specialized ContiguousArray.reserveCapacity(_:)();
      id v13 = self;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
      uint64_t v14 = v2 + 16;
      double v32 = v15;
      id v33 = v13;
      unint64_t v16 = v11 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
      uint64_t v31 = *(void *)(v14 + 56);
      uint64_t v29 = v11;
      id v30 = (void (**)(char *, uint64_t))(v14 - 8);
      do
      {
        v32(v4, v16, v1);
        AccessibilityComponent.CustomContent.label.getter();
        uint64_t v17 = String.init(localized:)();
        uint64_t v18 = v1;
        uint64_t v19 = v14;
        uint64_t v21 = v20;
        AccessibilityComponent.CustomContent.value.getter();
        uint64_t v22 = String.init(localized:)();
        uint64_t v24 = v23;
        uint64_t v25 = (void *)MEMORY[0x1E4E62C20](v17, v21);
        uint64_t v14 = v19;
        uint64_t v1 = v18;
        swift_bridgeObjectRelease();
        uint64_t v26 = (void *)MEMORY[0x1E4E62C20](v22, v24);
        swift_bridgeObjectRelease();
        id v27 = objc_msgSend(v33, sel_customContentWithLabel_value_, v25, v26, v29);

        (*v30)(v4, v18);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v16 += v31;
        --v12;
      }
      while (v12);
      uint64_t v10 = v34;
    }
    swift_bridgeObjectRelease();
  }
  return v10;
}

uint64_t __EntityAccessibilityWrapper.entitySupportsAccessibilityActivateAction.getter()
{
  uint64_t v0 = type metadata accessor for AccessibilityComponent();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AccessibilityComponent.SupportedActions();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v14 - v9;
  if (swift_weakLoadStrong())
  {
    Entity.accessibilityComponent.getter((uint64_t)v3);
    AccessibilityComponent.systemActions.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    swift_release();
    static AccessibilityComponent.SupportedActions.activate.getter();
    lazy protocol witness table accessor for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions();
    char v11 = dispatch thunk of SetAlgebra.isSuperset(of:)();
    uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
    v12(v7, v4);
    v12(v10, v4);
  }
  else
  {
    char v11 = 0;
  }
  return v11 & 1;
}

void @objc __EntityAccessibilityWrapper.entityPerformAccessibilityActivate()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v9[3] = a3;
    uint64_t v9[4] = a4;
    v9[0] = Strong;
    id v8 = a1;
    swift_retain();
    Entity.sendEvent(_:)();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
}

id __EntityAccessibilityWrapper.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void __EntityAccessibilityWrapper.init()()
{
}

id __EntityAccessibilityWrapper.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __EntityAccessibilityWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for __EntityAccessibilityWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for __EntityAccessibilityWrapper);
}

unint64_t lazy protocol witness table accessor for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions;
  if (!lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions)
  {
    type metadata accessor for AccessibilityComponent.SupportedActions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityComponent.SupportedActions and conformance AccessibilityComponent.SupportedActions);
  }
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = (void *)v3();
  swift_release();

  return v5;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [__EntityAccessibilityWrapper] and conformance [A]();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__EntityAccessibilityWrapper]);
          uint64_t v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for __EntityAccessibilityWrapper();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1E4E63150](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for REARCapturedFrame;
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation22AccessibilityComponentV0D3KitE9RotorTypeOG_So021UIAccessibilityCustomI0Cs5NeverOTg504_s10d13Kit28__Entityf19WrapperC06entityD12l14RotorsSaySo015k2G5i23CGvgAF0A10Foundation0D9g7VAAE0J4J6OXEfU_AI02__pfQ0CTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  uint64_t v48 = type metadata accessor for LocalizedStringResource();
  uint64_t v5 = *(void (***)(char *, uint64_t))(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v47 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v46 = (char *)v39 - v8;
  uint64_t v9 = type metadata accessor for AccessibilityComponent.RotorType(0);
  uint64_t v10 = *(void *)(*(void *)(v9 - 8) + 64);
  MEMORY[0x1F4188790](v9);
  char v11 = (void *)((char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v39 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v16)
  {
    v39[1] = v2;
    uint64_t v60 = MEMORY[0x1E4FBC860];
    double v40 = v5;
    uint64_t v18 = v13;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
    uint64_t v20 = a1 + ((v19 + 32) & ~v19);
    uint64_t v21 = *(void *)(v18 + 72);
    uint64_t v52 = (v19 + 24) & ~v19;
    uint64_t v53 = v21;
    uint64_t v50 = v19 | 7;
    uint64_t v51 = v52 + v10;
    id v49 = &v56;
    double v41 = (void (**)(char *, char *, uint64_t))(v40 + 2);
    id v42 = (void (**)(char *, uint64_t *, uint64_t))(v40 + 4);
    ++v40;
    uint64_t v44 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v45 = v9;
    uint64_t v43 = v15;
    do
    {
      outlined init with copy of AccessibilityEvents.CustomAction(v20, (uint64_t)v15, type metadata accessor for AccessibilityComponent.RotorType);
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = a2;
      outlined init with take of AccessibilityComponent.RotorType((uint64_t)v15, v34 + v52);
      outlined init with copy of AccessibilityEvents.CustomAction(v20, (uint64_t)v11, type metadata accessor for AccessibilityComponent.RotorType);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v22 = v46;
        uint64_t v23 = v48;
        (*v42)(v46, v11, v48);
        (*v41)(v47, v22, v23);
        id v24 = a2;
        uint64_t v25 = String.init(localized:)();
        uint64_t v27 = v26;
        long long v28 = a2;
        id v29 = objc_allocWithZone(MEMORY[0x1E4FB13C0]);
        id v30 = (void *)MEMORY[0x1E4E62C20](v25, v27);
        swift_bridgeObjectRelease();
        int v58 = partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter;
        uint64_t v59 = v34;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v55 = 1107296256;
        id v56 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
        unint64_t v57 = &block_descriptor_23;
        uint64_t v31 = _Block_copy(&aBlock);
        double v32 = v29;
        a2 = v28;
        char v11 = (uint64_t *)v44;
        objc_msgSend(v32, sel_initWithName_itemSearchBlock_, v30, v31);

        _Block_release(v31);
        swift_release();
        id v33 = v22;
        uint64_t v15 = v43;
        (*v40)(v33, v23);
      }
      else
      {
        uint64_t v35 = *v11;
        id v36 = objc_allocWithZone(MEMORY[0x1E4FB13C0]);
        int v58 = partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter;
        uint64_t v59 = v34;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v55 = 1107296256;
        id v56 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
        unint64_t v57 = &block_descriptor_26;
        double v37 = _Block_copy(&aBlock);
        id v38 = a2;
        objc_msgSend(v36, sel_initWithSystemType_itemSearchBlock_, v35, v37);
        _Block_release(v37);
        swift_release();
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v20 += v53;
      --v16;
    }
    while (v16);
    return v60;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation23LocalizedStringResourceVG_So27UIAccessibilityCustomActionCs5NeverOTg5056_s10RealityKit28__EntityAccessibilityWrapperC06entityD13i15ActionsSaySo015h2G6j20CGvgAF10Foundation23efG6VXEfU_0M3Kit0O0CTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for LocalizedStringResource();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v9)
  {
    v23[1] = v2;
    uint64_t v34 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v11 = v6 + 16;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v14 = a1 + ((v13 + 32) & ~v13);
    uint64_t v29 = *(void *)(v11 + 56);
    id v30 = v12;
    uint64_t v27 = v13 | 7;
    uint64_t v28 = (v13 + 16) & ~v13;
    unint64_t v26 = (v7 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v31 = v11;
    id v24 = (void (**)(uint64_t, char *, uint64_t))(v11 + 16);
    unint64_t v25 = v26 + 8;
    void v23[2] = v33;
    do
    {
      uint64_t v15 = v30;
      v30(v8, v14, v5);
      uint64_t v16 = String.init(localized:)();
      uint64_t v18 = v17;
      v15(v8, v14, v5);
      uint64_t v19 = swift_allocObject();
      (*v24)(v19 + v28, v8, v5);
      *(void *)(v19 + v26) = a2;
      id v20 = objc_allocWithZone(MEMORY[0x1E4FB13B8]);
      swift_retain();
      uint64_t v21 = (void *)MEMORY[0x1E4E62C20](v16, v18);
      swift_bridgeObjectRelease();
      _OWORD v33[2] = partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomActions.getter;
      v33[3] = v19;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      v33[0] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
      v33[1] = &block_descriptor_11;
      uint64_t v22 = _Block_copy(aBlock);
      objc_msgSend(v20, sel_initWithName_actionHandler_, v21, v22);

      _Block_release(v22);
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v14 += v29;
      --v9;
    }
    while (v9);
    return v34;
  }
  return result;
}

uint64_t sub_1E2AAD158()
{
  uint64_t v1 = type metadata accessor for LocalizedStringResource();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomActions.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocalizedStringResource() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomActions.getter(a1, v1 + v4, v5);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t sub_1E2AAD2B0()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessibilityComponent.RotorType(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for LocalizedStringResource();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

id partial apply for closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessibilityComponent.RotorType(0) - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(a1, v4, v5);
}

uint64_t sub_1E2AAD420()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1E2AAD458()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

Swift::Int partial apply for closure #1 in closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in __EntityAccessibilityWrapper.entityAccessibilityCustomRotors.getter(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with copy of AccessibilityEvents.CustomAction(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AccessibilityEvents.CustomAction(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [__EntityAccessibilityWrapper] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [__EntityAccessibilityWrapper] and conformance [A];
  if (!lazy protocol witness table cache variable for type [__EntityAccessibilityWrapper] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__EntityAccessibilityWrapper]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__EntityAccessibilityWrapper] and conformance [A]);
  }
  return result;
}

void ARView.physicsOrigin.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    Scene.physicsOrigin.getter();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void *key path getter for ARView.physicsOrigin : ARView@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    uint64_t v3 = Scene.physicsOrigin.getter();
    unint64_t result = (void *)swift_release();
    *a2 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t key path setter for ARView.physicsOrigin : ARView(uint64_t a1, void *a2)
{
  if (*(void *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    swift_retain();
    Scene.physicsOrigin.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.physicsOrigin.setter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView__scene))
  {
    swift_retain();
    Scene.physicsOrigin.setter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t (*ARView.physicsOrigin.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView__scene;
  *((void *)result + 1) = v1;
  *((void *)result + 2) = v2;
  if (*(void *)(v1 + v2))
  {
    uint64_t v3 = (uint64_t *)result;
    swift_retain();
    uint64_t v4 = Scene.physicsOrigin.getter();
    swift_release();
    *uint64_t v3 = v4;
    return ARView.physicsOrigin.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.physicsOrigin.modify(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 8) + *(void *)(result + 16));
  if ((a2 & 1) == 0)
  {
    if (v2)
    {
      swift_retain();
      Scene.physicsOrigin.setter();
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    return result;
  }
  if (!v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  swift_retain();
  swift_retain();
  Scene.physicsOrigin.setter();
  swift_release();
LABEL_6:

  return swift_release();
}

void UnlitMaterial.init(color:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  UnlitMaterial.init(color:)();
}

id SimpleMaterial.tintColor.getter()
{
  return SimpleMaterial.tintColor.getter(MEMORY[0x1E4F3A848]);
}

void SimpleMaterial.tintColor.setter(void *a1)
{
}

void (*SimpleMaterial.tintColor.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)SimpleMaterial.__tintColor.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return SimpleMaterial.tintColor.modify;
}

void SimpleMaterial.tintColor.modify(void **a1, char a2)
{
}

uint64_t SimpleMaterial.baseColor.getter@<X0>(uint64_t a1@<X8>)
{
  return SimpleMaterial.baseColor.getter(MEMORY[0x1E4F3A838], a1);
}

uint64_t SimpleMaterial.baseColor.setter(uint64_t a1)
{
  return SimpleMaterial.baseColor.setter(a1, MEMORY[0x1E4F3A840]);
}

uint64_t MaterialColorParameter.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for __MaterialColorParameter();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  int v9 = (*(uint64_t (**)(void *, uint64_t))(v5 + 88))(v8, v4);
  int v10 = v9;
  int v11 = *MEMORY[0x1E4F3A9F0];
  if (v9 == *MEMORY[0x1E4F3A9F0])
  {
    (*(void (**)(void *, uint64_t))(v5 + 96))(v8, v4);
    uint64_t v14 = (void *)*v8;
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, *v8);

    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_5;
  }
  if (v9 == *MEMORY[0x1E4F3A9F8])
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 96))(v8, v4);
    id v13 = (id)*v8;
LABEL_5:
    *(void *)a2 = v13;
    *(unsigned char *)(a2 + 8) = v10 != v11;
    return result;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void outlined consume of MaterialColorParameter(void *a1, char a2)
{
  if (a2) {
    swift_release();
  }
  else {
}
  }

void (*SimpleMaterial.baseColor.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[2] = v1;
  uint64_t v4 = type metadata accessor for __MaterialColorParameter();
  float32x4_t v3[3] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[4] = v5;
  size_t v7 = *(void *)(v5 + 64);
  v3[5] = malloc(v7);
  v3[6] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[7] = v8;
  int v9 = malloc(v7);
  v3[8] = v9;
  SimpleMaterial.__baseColor.getter();
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, v4);
  int v10 = (*(uint64_t (**)(void *, uint64_t))(v6 + 88))(v8, v4);
  int v11 = v10;
  int v12 = *MEMORY[0x1E4F3A9F0];
  *((_DWORD *)v3 + 3) = *MEMORY[0x1E4F3A9F0];
  if (v10 == v12)
  {
    (*(void (**)(void *, uint64_t))(v6 + 96))(v8, v4);
    uint64_t v14 = (void *)*v8;
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, *v8);

    (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v4);
    goto LABEL_5;
  }
  if (v10 == *MEMORY[0x1E4F3A9F8])
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v4);
    (*(void (**)(void *, uint64_t))(v6 + 96))(v8, v4);
    id v13 = (id)*v8;
LABEL_5:
    *uint64_t v3 = v13;
    *((unsigned char *)v3 + 8) = v11 != v12;
    return SimpleMaterial.baseColor.modify;
  }
  uint64_t result = (void (*)(id **, char))_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void SimpleMaterial.baseColor.modify(id **a1, char a2)
{
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MaterialScalarParameter();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = MEMORY[0x1F4188790](v4).n128_u64[0];
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = objc_msgSend(a1, sel_CGColor, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  SimpleMaterial.init(color:roughness:isMetallic:)();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:assetService:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for MaterialScalarParameter();
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)&double v9 = MEMORY[0x1F4188790](v7).n128_u64[0];
  uint64_t v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  id v12 = objc_msgSend(a1, sel_CGColor, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
  outlined init with copy of SynchronizationPeerID(a4, (uint64_t)v15);
  SimpleMaterial.init(color:roughness:isMetallic:assetService:)();

  __swift_destroy_boxed_opaque_existential_1(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
}

id UnlitMaterial.tintColor.getter()
{
  return SimpleMaterial.tintColor.getter(MEMORY[0x1E4F3A810]);
}

void UnlitMaterial.tintColor.setter(void *a1)
{
}

void (*UnlitMaterial.tintColor.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)UnlitMaterial.__tintColor.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return UnlitMaterial.tintColor.modify;
}

void UnlitMaterial.tintColor.modify(void **a1, char a2)
{
}

uint64_t UnlitMaterial.baseColor.getter@<X0>(uint64_t a1@<X8>)
{
  return SimpleMaterial.baseColor.getter(MEMORY[0x1E4F3A800], a1);
}

uint64_t SimpleMaterial.baseColor.getter@<X0>(void (*a1)(__n128)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for __MaterialColorParameter();
  __n128 v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v5);
  return MaterialColorParameter.init(_:)((uint64_t)v7, a2);
}

uint64_t key path getter for SimpleMaterial.baseColor : SimpleMaterial@<X0>(void (*a1)(__n128)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for __MaterialColorParameter();
  __n128 v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(v5);
  uint64_t result = MaterialColorParameter.init(_:)((uint64_t)v7, (uint64_t)&v10);
  char v9 = v11;
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = v9;
  return result;
}

uint64_t key path setter for SimpleMaterial.baseColor : SimpleMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void *))
{
  uint64_t v7 = type metadata accessor for __MaterialColorParameter();
  uint64_t v8 = *(void *)(v7 - 8);
  __n128 v9 = MEMORY[0x1F4188790](v7);
  char v11 = (uint64_t *)((char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = *(void **)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    *char v11 = v12;
    (*(void (**)(void *, void, uint64_t, __n128))(v8 + 104))(v11, *MEMORY[0x1E4F3A9F8], v7, v9);
    swift_retain();
  }
  else
  {
    *char v11 = objc_msgSend(v12, sel_CGColor);
    (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E4F3A9F0], v7);
    outlined consume of MaterialColorParameter(v12, 0);
  }
  return a5(v11);
}

uint64_t UnlitMaterial.baseColor.setter(uint64_t a1)
{
  return SimpleMaterial.baseColor.setter(a1, MEMORY[0x1E4F3A808]);
}

uint64_t SimpleMaterial.baseColor.setter(uint64_t a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = type metadata accessor for __MaterialColorParameter();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v9 = *(id *)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    *uint64_t v8 = v9;
    (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v8, *MEMORY[0x1E4F3A9F8], v4, v6);
  }
  else
  {
    *uint64_t v8 = objc_msgSend(*(id *)a1, sel_CGColor, v6.n128_f64[0]);
    (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4F3A9F0], v4);
    outlined consume of MaterialColorParameter(v9, 0);
  }
  return a2(v8);
}

void (*UnlitMaterial.baseColor.modify(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[2] = v1;
  uint64_t v4 = type metadata accessor for __MaterialColorParameter();
  float32x4_t v3[3] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  v3[4] = v5;
  size_t v7 = *(void *)(v5 + 64);
  v3[5] = malloc(v7);
  v3[6] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v3[7] = v8;
  id v9 = malloc(v7);
  v3[8] = v9;
  UnlitMaterial.__baseColor.getter();
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, v4);
  int v10 = (*(uint64_t (**)(void *, uint64_t))(v6 + 88))(v8, v4);
  int v11 = v10;
  int v12 = *MEMORY[0x1E4F3A9F0];
  *((_DWORD *)v3 + 3) = *MEMORY[0x1E4F3A9F0];
  if (v10 == v12)
  {
    (*(void (**)(void *, uint64_t))(v6 + 96))(v8, v4);
    uint64_t v14 = (void *)*v8;
    id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, *v8);

    (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v4);
    goto LABEL_5;
  }
  if (v10 == *MEMORY[0x1E4F3A9F8])
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v4);
    (*(void (**)(void *, uint64_t))(v6 + 96))(v8, v4);
    id v13 = (id)*v8;
LABEL_5:
    *uint64_t v3 = v13;
    *((unsigned char *)v3 + 8) = v11 != v12;
    return UnlitMaterial.baseColor.modify;
  }
  uint64_t result = (void (*)(id **, char))_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void UnlitMaterial.baseColor.modify(id **a1, char a2)
{
}

void SimpleMaterial.baseColor.modify(id **a1, char a2, void (*a3)(void *))
{
  uint64_t v4 = *a1;
  id v5 = **a1;
  if (a2)
  {
    if ((_BYTE)(*a1)[1])
    {
      uint64_t v6 = (void (**)(void))v4[4];
      *(void *)void v4[5] = v5;
      v6[13]();
      swift_retain();
    }
    else
    {
      uint64_t v8 = *((unsigned int *)v4 + 3);
      int v10 = (void (**)(void *, uint64_t, void *))v4[4];
      id v9 = v4[5];
      int v11 = v4[3];
      *id v9 = objc_msgSend(v5, sel_CGColor);
      v10[13](v9, v8, v11);
      outlined consume of MaterialColorParameter(v5, 0);
    }
    id v13 = v4[7];
    int v12 = v4[8];
    uint64_t v14 = v4[5];
    uint64_t v15 = v4[6];
    a3(v14);
    outlined consume of MaterialColorParameter(*v4, *((unsigned char *)v4 + 8));
  }
  else
  {
    if ((_BYTE)(*a1)[1])
    {
      size_t v7 = (void (**)(void))v4[4];
      *(void *)v4[6] = v5;
      v7[13]();
    }
    else
    {
      uint64_t v16 = *((unsigned int *)v4 + 3);
      uint64_t v17 = v4[6];
      uint64_t v18 = v4[3];
      uint64_t v19 = (void (**)(void *, uint64_t, void *))v4[4];
      *uint64_t v17 = objc_msgSend(**a1, sel_CGColor);
      v19[13](v17, v16, v18);
      outlined consume of MaterialColorParameter(v5, 0);
    }
    id v13 = v4[7];
    int v12 = v4[8];
    uint64_t v14 = v4[5];
    uint64_t v15 = v4[6];
    a3(v15);
  }
  free(v12);
  free(v13);
  free(v15);
  free(v14);

  free(v4);
}

void UnlitMaterial.init(color:applyPostProcessToneMap:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  UnlitMaterial.init(color:applyPostProcessToneMap:)();
}

id MaterialParameters.Value.colorValue.getter()
{
  uint64_t v0 = MaterialParameters.Value.cgColorValue.getter();
  if (!v0) {
    return 0;
  }
  id v1 = (void *)v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v0);

  return v2;
}

void static MaterialParameters.Value.color(_:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_CGColor);
  MEMORY[0x1E4E61E70]();
}

uint64_t PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for MaterialParameters.Texture?, MEMORY[0x1E4F3ACD8]);
}

id PhysicallyBasedMaterial.BaseColor.tint.getter()
{
  return SimpleMaterial.tintColor.getter(MEMORY[0x1E4F3ACE0]);
}

void PhysicallyBasedMaterial.BaseColor.tint.setter(void *a1)
{
}

void (*PhysicallyBasedMaterial.BaseColor.tint.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)PhysicallyBasedMaterial.SheenColor.__tint.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return PhysicallyBasedMaterial.BaseColor.tint.modify;
}

void PhysicallyBasedMaterial.BaseColor.tint.modify(void **a1, char a2)
{
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.init(color:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for MaterialParameters.Texture?, MEMORY[0x1E4F3ACC0]);
}

uint64_t PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(void *a1, uint64_t a2, uint64_t *a3, void (*a4)(id, char *))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  *(void *)&double v9 = MEMORY[0x1F4188790](v8 - 8).n128_u64[0];
  int v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(a1, sel_CGColor, v9);
  outlined init with copy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a2, (uint64_t)v11, a3);
  a4(v12, v11);

  return outlined destroy of CheckedContinuation<related decl 'e' for ARErrorCode?, Never>?(a2, a3);
}

id PhysicallyBasedMaterial.EmissiveColor.color.getter()
{
  return SimpleMaterial.tintColor.getter(MEMORY[0x1E4F3ACC8]);
}

void PhysicallyBasedMaterial.EmissiveColor.color.setter(void *a1)
{
}

void (*PhysicallyBasedMaterial.EmissiveColor.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)PhysicallyBasedMaterial.SheenColor.__tint.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return PhysicallyBasedMaterial.EmissiveColor.color.modify;
}

void PhysicallyBasedMaterial.EmissiveColor.color.modify(void **a1, char a2)
{
}

uint64_t PhysicallyBasedMaterial.SheenColor.init(tint:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for MaterialParameters.Texture?, MEMORY[0x1E4F3AC98]);
}

id PhysicallyBasedMaterial.SheenColor.tint.getter()
{
  return SimpleMaterial.tintColor.getter(MEMORY[0x1E4F3ACA0]);
}

void PhysicallyBasedMaterial.SheenColor.tint.setter(void *a1)
{
}

void (*PhysicallyBasedMaterial.SheenColor.tint.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)PhysicallyBasedMaterial.SheenColor.__tint.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return PhysicallyBasedMaterial.SheenColor.tint.modify;
}

void PhysicallyBasedMaterial.SheenColor.tint.modify(void **a1, char a2)
{
}

uint64_t CustomMaterial.BaseColor.init(tint:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for CustomMaterial.CustomMaterialTexture?, MEMORY[0x1E4F3AB18]);
}

id CustomMaterial.BaseColor.tint.getter()
{
  return SimpleMaterial.tintColor.getter(MEMORY[0x1E4F3AB20]);
}

void CustomMaterial.BaseColor.tint.setter(void *a1)
{
}

void (*CustomMaterial.BaseColor.tint.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)CustomMaterial.EmissiveColor.__color.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return CustomMaterial.BaseColor.tint.modify;
}

void CustomMaterial.BaseColor.tint.modify(void **a1, char a2)
{
}

uint64_t CustomMaterial.EmissiveColor.init(color:texture:)(void *a1, uint64_t a2)
{
  return PhysicallyBasedMaterial.BaseColor.init(tint:texture:)(a1, a2, &demangling cache variable for type metadata for CustomMaterial.CustomMaterialTexture?, MEMORY[0x1E4F3AB00]);
}

id CustomMaterial.EmissiveColor.color.getter()
{
  return SimpleMaterial.tintColor.getter(MEMORY[0x1E4F3AB08]);
}

id SimpleMaterial.tintColor.getter(uint64_t (*a1)(void))
{
  uint64_t v1 = (void *)a1();
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v1);

  return v2;
}

void key path getter for SimpleMaterial.tintColor : SimpleMaterial(uint64_t (*a1)(void)@<X3>, void *a2@<X8>)
{
  uint64_t v3 = (void *)a1();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a2 = v4;
}

void key path setter for SimpleMaterial.tintColor : SimpleMaterial(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id))
{
  id v6 = *a1;
  a5(objc_msgSend(v6, sel_CGColor));
}

void CustomMaterial.EmissiveColor.color.setter(void *a1)
{
}

void SimpleMaterial.tintColor.setter(void *a1, void (*a2)(id))
{
  a2(objc_msgSend(a1, sel_CGColor));
}

void (*CustomMaterial.EmissiveColor.color.modify(void *a1))(void **a1, char a2)
{
  a1[1] = v1;
  uint64_t v3 = (void *)CustomMaterial.EmissiveColor.__color.getter();
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v3);

  *a1 = v4;
  return CustomMaterial.EmissiveColor.color.modify;
}

void CustomMaterial.EmissiveColor.color.modify(void **a1, char a2)
{
}

void SimpleMaterial.tintColor.modify(void **a1, char a2, void (*a3)(id))
{
  id v4 = *a1;
  id v6 = *a1;
  if (a2)
  {
    id v5 = v4;
    a3(objc_msgSend(v5, sel_CGColor));
  }
  else
  {
    a3(objc_msgSend(v4, sel_CGColor));
  }
}

id MaterialColorParameter.init(_colorLiteralRed:green:blue:alpha:)@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, a2, a3, a4, a5);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t MaterialColorParameter.hash(into:)()
{
  uint64_t v1 = type metadata accessor for __MaterialColorParameter();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = MEMORY[0x1F4188790](v1);
  id v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v6 = *(void **)v0;
  if (*(unsigned char *)(v0 + 8))
  {
    *id v5 = v6;
    (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, *MEMORY[0x1E4F3A9F8], v1, v3);
    swift_retain();
  }
  else
  {
    *id v5 = objc_msgSend(v6, sel_CGColor);
    (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, *MEMORY[0x1E4F3A9F0], v1);
    outlined consume of MaterialColorParameter(v6, 0);
  }
  __MaterialColorParameter.hash(into:)();
  return (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
}

Swift::Int MaterialColorParameter.hashValue.getter()
{
  uint64_t v1 = type metadata accessor for __MaterialColorParameter();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)v0;
  char v6 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v6)
  {
    *uint64_t v4 = v5;
    (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4F3A9F8], v1);
    swift_retain();
  }
  else
  {
    *uint64_t v4 = objc_msgSend(v5, sel_CGColor);
    (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4F3A9F0], v1);
    outlined consume of MaterialColorParameter(v5, 0);
  }
  __MaterialColorParameter.hash(into:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  return Hasher._finalize()();
}

id protocol witness for _ExpressibleByColorLiteral.init(_colorLiteralRed:green:blue:alpha:) in conformance MaterialColorParameter@<X0>(uint64_t a1@<X8>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>)
{
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithRed_green_blue_alpha_, a2, a3, a4, a5);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MaterialColorParameter()
{
  uint64_t v1 = type metadata accessor for __MaterialColorParameter();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v5 = *(void **)v0;
  char v6 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v6)
  {
    *uint64_t v4 = v5;
    (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4F3A9F8], v1);
    swift_retain();
  }
  else
  {
    *uint64_t v4 = objc_msgSend(v5, sel_CGColor);
    (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4F3A9F0], v1);
    outlined consume of MaterialColorParameter(v5, 0);
  }
  __MaterialColorParameter.hash(into:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  return Hasher._finalize()();
}

uint64_t PhysicallyBasedMaterial.BaseColor.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterial.BaseColor.customMirror.getter(MEMORY[0x1E4F3ACF8], MEMORY[0x1E4F3ACE0], MEMORY[0x1E4F3ACF0], a1);
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v19[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PhysicallyBasedMaterial.EmissiveColor();
  __n128 v10 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v1, v9, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1E2ABFA10;
  *(void *)(v13 + 32) = 0x726F6C6F63;
  *(void *)(v13 + 40) = 0xE500000000000000;
  uint64_t v14 = (void *)PhysicallyBasedMaterial.SheenColor.__tint.getter();
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1618]), sel_initWithCGColor_, v14);

  unint64_t v16 = type metadata accessor for UIColor();
  *(void *)(v13 + 48) = v15;
  *(void *)(v13 + 72) = v16;
  *(void *)(v13 + 80) = 0x65727574786574;
  *(void *)(v13 + 88) = 0xE700000000000000;
  *(void *)(v13 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameters.Texture?);
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v13 + 96));
  MEMORY[0x1E4E62360]();
  uint64_t v17 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v8, 1, 1, v17);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PhysicallyBasedMaterial.SheenColor.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  return PhysicallyBasedMaterial.BaseColor.customMirror.getter(MEMORY[0x1E4F3ACB8], MEMORY[0x1E4F3ACA0], MEMORY[0x1E4F3ACB0], a1);
}

uint64_t PhysicallyBasedMaterial.BaseColor.customMirror.getter@<X0>(uint64_t (*a1)(void, __n128)@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v7 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  __n128 v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  __n128 v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1(0, v12);
  __n128 v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))((char *)&v27 - v17, v4, v15, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1E2ABFA10;
  *(void *)(v19 + 32) = 1953393012;
  *(void *)(v19 + 40) = 0xE400000000000000;
  uint64_t v21 = (void *)a2(v19, v20);
  id v22 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  id v23 = objc_msgSend(v22, sel_initWithCGColor_, v21, v27, v28);

  unint64_t v24 = type metadata accessor for UIColor();
  *(void *)(v19 + 48) = v23;
  *(void *)(v19 + 72) = v24;
  *(void *)(v19 + 80) = 0x65727574786574;
  *(void *)(v19 + 88) = 0xE700000000000000;
  *(void *)(v19 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameters.Texture?);
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v19 + 96));
  v27();
  uint64_t v25 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v14, 1, 1, v25);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBC430], v7);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static MaterialColorParameter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for __MaterialColorParameter();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __n128 v10 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v25 - v9);
  __n128 v12 = *(void **)a1;
  char v13 = *(unsigned char *)(a1 + 8);
  uint64_t v14 = *(void **)a2;
  char v15 = *(unsigned char *)(a2 + 8);
  __n128 v16 = (unsigned int *)MEMORY[0x1E4F3A9F0];
  uint64_t v17 = (unsigned int *)MEMORY[0x1E4F3A9F8];
  if ((v13 & 1) == 0)
  {
    uint64_t v19 = (unsigned int *)MEMORY[0x1E4F3A9F8];
    *uint64_t v11 = objc_msgSend(v12, sel_CGColor);
    uint64_t v18 = v16;
    uint64_t v21 = *v16;
    uint64_t v20 = *(void (**)(char *, void, uint64_t, __n128))(v5 + 104);
    ((void (*)(void *, uint64_t, uint64_t))v20)(v11, v21, v4);
    outlined consume of MaterialColorParameter(v12, 0);
    if ((v15 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    void *v7 = v14;
    ((void (*)(void *, void, uint64_t))v20)(v7, *v19, v4);
    swift_retain();
    goto LABEL_6;
  }
  uint64_t v18 = (unsigned int *)MEMORY[0x1E4F3A9F0];
  *uint64_t v11 = v12;
  uint64_t v19 = v17;
  uint64_t v20 = *(void (**)(char *, void, uint64_t, __n128))(v5 + 104);
  v20((char *)&v25 - v9, *v17, v4, v10);
  swift_retain();
  if (v15) {
    goto LABEL_5;
  }
LABEL_3:
  void *v7 = objc_msgSend(v14, sel_CGColor);
  ((void (*)(void *, void, uint64_t))v20)(v7, *v18, v4);
  outlined consume of MaterialColorParameter(v14, 0);
LABEL_6:
  char v22 = MEMORY[0x1E4E61370](v11, v7);
  id v23 = *(void (**)(void *, uint64_t))(v5 + 8);
  v23(v7, v4);
  v23(v11, v4);
  return v22 & 1;
}

unint64_t lazy protocol witness table accessor for type MaterialColorParameter and conformance MaterialColorParameter()
{
  unint64_t result = lazy protocol witness table cache variable for type MaterialColorParameter and conformance MaterialColorParameter;
  if (!lazy protocol witness table cache variable for type MaterialColorParameter and conformance MaterialColorParameter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialColorParameter and conformance MaterialColorParameter);
  }
  return result;
}

void sub_1E2AB0018(void *a1@<X8>)
{
}

void sub_1E2AB0044(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1E2AB0070@<X0>(uint64_t a1@<X8>)
{
  return key path getter for SimpleMaterial.baseColor : SimpleMaterial(MEMORY[0x1E4F3A838], a1);
}

uint64_t sub_1E2AB009C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SimpleMaterial.baseColor : SimpleMaterial(a1, a2, a3, a4, MEMORY[0x1E4F3A840]);
}

void sub_1E2AB00C8(void *a1@<X8>)
{
}

void sub_1E2AB00F4(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1E2AB0120@<X0>(uint64_t a1@<X8>)
{
  return key path getter for SimpleMaterial.baseColor : SimpleMaterial(MEMORY[0x1E4F3A800], a1);
}

uint64_t sub_1E2AB014C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for SimpleMaterial.baseColor : SimpleMaterial(a1, a2, a3, a4, MEMORY[0x1E4F3A808]);
}

void sub_1E2AB0178(void *a1@<X8>)
{
}

void sub_1E2AB01A4(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1E2AB01D0(void *a1@<X8>)
{
}

void sub_1E2AB01FC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1E2AB0228(void *a1@<X8>)
{
}

void sub_1E2AB0254(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1E2AB0280(void *a1@<X8>)
{
}

void sub_1E2AB02AC(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1E2AB02D8(void *a1@<X8>)
{
}

void sub_1E2AB0304(id *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t initializeBufferWithCopyOfBuffer for MaterialColorParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of MaterialColorParameter(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id outlined copy of MaterialColorParameter(void *a1, char a2)
{
  if (a2) {
    return (id)swift_retain();
  }
  else {
    return a1;
  }
}

void destroy for MaterialColorParameter(uint64_t a1)
{
}

uint64_t assignWithCopy for MaterialColorParameter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of MaterialColorParameter(*(void **)a2, v4);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of MaterialColorParameter(v5, v6);
  return a1;
}

uint64_t assignWithTake for MaterialColorParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void **)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of MaterialColorParameter(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialColorParameter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialColorParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for MaterialColorParameter(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MaterialColorParameter()
{
  return &type metadata for MaterialColorParameter;
}

uint64_t ARView.automaticallyConfigureSession.setter(char a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 2) = a1;
  return result;
}

BOOL static ARView.CameraMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ARView.cameraMode.getter(unsigned char *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *a1 = *(unsigned char *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode);
  }
  else {
    __break(1u);
  }
}

Swift::Void __swiftcall ARView.__enableRayTracedGroundingShadow()()
{
  uint64_t v1 = type metadata accessor for __AssetRef();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  int v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(unsigned char **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v5)
  {
    v5[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 1;
    swift_retain();
    char v6 = v5;
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    RERenderGraphEmitterAssetSetRuntimeSettingBool();

    type metadata accessor for RKARSystemCore();
    static RKARSystemCore.generateDecimatedMeshes.setter();
  }
  else
  {
    __break(1u);
  }
}

void ARView.cameraMode.setter(unsigned char *a1)
{
  uint64_t v2 = *(unsigned char **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    unsigned __int8 v3 = v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
    v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = *a1;
    unsigned __int8 v5 = v3;
    int v4 = v2;
    RKARSystem.cameraMode.didset(&v5);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall ARView.setupAR()()
{
  uint64_t v1 = v0;
  objc_msgSend(self, sel_setRenderType_, 2);
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_renderView;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10RealityKit6ARView_renderView], sel_setContentMode_, 4);
  objc_msgSend(v1, sel_insertSubview_atIndex_, *(void *)&v1[v2], 0);
  type metadata accessor for __ServiceLocator();
  static __ServiceLocator.shared.getter();
  uint64_t v3 = dispatch thunk of __ServiceLocator.engine.getter();
  swift_release();
  id v4 = objc_allocWithZone((Class)type metadata accessor for RKARSystem(0));
  unsigned __int8 v5 = v1;
  uint64_t v6 = RKARSystem.init(engine:arView:)(v3, v5);
  uint64_t v7 = *(void **)&v5[OBJC_IVAR____TtC10RealityKit6ARView_arSystem];
  *(void *)&v5[OBJC_IVAR____TtC10RealityKit6ARView_arSystem] = v6;

  objc_msgSend(v5, sel_setMultipleTouchEnabled_, 1);
}

Swift::Void __swiftcall ARView.__disableRayTracedGroundingShadow()()
{
  uint64_t v1 = type metadata accessor for __AssetRef();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  id v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v5 = *(unsigned char **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v5)
  {
    v5[OBJC_IVAR____TtC10RealityKit10RKARSystem_groundingShadowMode] = 0;
    swift_retain();
    uint64_t v6 = v5;
    dispatch thunk of __RERenderGraphEmitter.__handle.getter();
    swift_release();
    __AssetRef.__as<A>(_:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    RERenderGraphEmitterAssetSetRuntimeSettingBool();
    RERenderGraphEmitterAssetSetRuntimeSettingBool();

    type metadata accessor for RKARSystemCore();
    static RKARSystemCore.generateDecimatedMeshes.setter();
  }
  else
  {
    __break(1u);
  }
}

void *ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter()
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
}

void *ARView.__enableUpdateCameraProjectionMatrixFromARFrame.getter()
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
}

void *ARView.session.getter()
{
  return ARView.session.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem_session);
}

void ARView.session.setter(void *a1)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (!v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = v1;
  type metadata accessor for NSObject();
  id v5 = *(id *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_session);
  char v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) == 0)
  {
    uint64_t v7 = *(char **)(v4 + v2);
    if (v7)
    {
      uint64_t v8 = *(void **)&v7[OBJC_IVAR____TtC10RealityKit10RKARSystem_session];
      *(void *)&v7[OBJC_IVAR____TtC10RealityKit10RKARSystem_session] = a1;
      uint64_t v9 = v7;
      id v10 = a1;
      RKARSystem.session.didset(v8);

      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
    return;
  }
LABEL_5:
}

void ARView.CameraMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ARView.CameraMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void (*ARView.cameraMode.modify(void (*result)(void *a1, char a2)))(void *a1, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(void *)uint64_t result = v1;
  *((void *)result + 1) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *((unsigned char *)result + 16) = *(unsigned char *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode);
    return ARView.cameraMode.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.cameraMode.modify(void *a1, char a2)
{
  uint64_t v2 = a1 + 2;
  uint64_t v3 = *(unsigned char **)(*a1 + a1[1]);
  if (a2)
  {
    if (v3)
    {
      char v4 = v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
      v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = *v2;
      char v8 = v4;
      id v5 = v3;
      char v6 = (unsigned __int8 *)&v8;
LABEL_6:
      RKARSystem.cameraMode.didset(v6);

      return;
    }
    __break(1u);
  }
  else if (v3)
  {
    char v7 = v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode];
    v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode] = *v2;
    char v9 = v7;
    id v5 = v3;
    char v6 = (unsigned __int8 *)&v9;
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t ARView.automaticallyConfigureSession.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 2);
}

void (*ARView.automaticallyConfigureSession.modify(void *a1))(uint64_t *a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  float32x4_t v3[3] = v1;
  v3[4] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  *((unsigned char *)v3 + 40) = *(unsigned char *)(v5 + 2);
  return ARView.automaticallyConfigureSession.modify;
}

void ARView.automaticallyConfigureSession.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *(unsigned char *)(*(void *)(v1 + 24) + *(void *)(v1 + 32) + 2) = *(unsigned char *)(v1 + 40);
  free((void *)v1);
}

void ARView.__passthroughTextureY.getter()
{
  uint64_t v1 = *(char **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v1)
  {
    uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache];
    uint64_t v3 = *(void **)(v2 + 32);
    if (v3)
    {
      uint64_t v4 = *(void **)(v2 + 40);
      id v5 = v3;
      char v6 = v4;
      char v7 = v1;
      if (CVMetalTextureGetTexture((CVMetalTextureRef)v5))
      {
        id v8 = CVMetalTextureGetTexture(v6);

        if (v8) {
          swift_unknownObjectRelease();
        }
        else {
          swift_unknownObjectRelease();
        }
      }
      else
      {
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void ARView.__passthroughTextureCbCr.getter()
{
  uint64_t v1 = *(char **)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v1)
  {
    uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache];
    uint64_t v3 = *(void **)(v2 + 32);
    if (v3)
    {
      uint64_t v4 = *(void **)(v2 + 40);
      id v5 = v3;
      char v6 = v4;
      char v7 = v1;
      if (CVMetalTextureGetTexture((CVMetalTextureRef)v5))
      {
        CVMetalTextureGetTexture(v6);

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void ARView.__passthroughCorrectionMatrix.getter()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem)) {
    __break(1u);
  }
}

void ARView.__passthroughIntensityExponent.getter()
{
}

{
  uint64_t v0;

  if (!*(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem)) {
    __break(1u);
  }
}

void ARView.__passthroughIntensityExponent.setter(float a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *(float *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent) = a1;
  }
  else {
    __break(1u);
  }
}

uint64_t (*ARView.__passthroughIntensityExponent.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(void *)uint64_t result = v1;
  *((void *)result + 1) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *((_DWORD *)result + 4) = *(_DWORD *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent);
    return ARView.__passthroughIntensityExponent.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__passthroughIntensityExponent.modify(uint64_t result, char a2)
{
  uint64_t v2 = *(void *)(*(void *)result + *(void *)(result + 8));
  if (a2)
  {
    if (v2)
    {
LABEL_5:
      *(_DWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent) = *(_DWORD *)(result + 16);
      return result;
    }
    __break(1u);
  }
  if (v2) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void *ARView.__backgroundReplacementBuffer.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v1)
  {
    uint64_t v2 = *(void **)(*(void *)(v1 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 16);
    id v3 = v2;
    return v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void key path setter for ARView.__backgroundReplacementBuffer : ARView(void **a1, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    id v3 = *a1;
    uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
    id v6 = *(id *)(v4 + 16);
    *(void *)(v4 + 16) = *a1;
    id v5 = v3;
  }
  else
  {
    __break(1u);
  }
}

uint64_t ARView.__backgroundReplacementBuffer.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *(void *)(*(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 16) = a1;
  }
  else {
    __break(1u);
  }
  return MEMORY[0x1F41817F8]();
}

void (*ARView.__backgroundReplacementBuffer.modify(void (*result)(uint64_t *a1, char a2)))(uint64_t *a1, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *((void *)result + 1) = v1;
  *((void *)result + 2) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    uint64_t v4 = *(void **)(*(void *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 16);
    *(void *)uint64_t result = v4;
    id v5 = v4;
    return ARView.__backgroundReplacementBuffer.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__backgroundReplacementBuffer.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *(void *)(a1[1] + a1[2]);
  if (a2)
  {
    if (v2)
    {
LABEL_5:
      uint64_t v3 = *a1;
      uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache);
      id v5 = *(void **)(v4 + 16);
      *(void *)(v4 + 16) = v3;

      return;
    }
    __break(1u);
  }
  if (v2) {
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(uint64_t a1)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
}

uint64_t (*ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(uint64_t (*result)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(void *)uint64_t result = v1;
  *((void *)result + 1) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *((unsigned char *)result + 16) = *(unsigned char *)(v3
                                       + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
    return ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(uint64_t a1, char a2)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(a1, a2, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
}

uint64_t ARView.__enableUpdateCameraProjectionMatrixFromARFrame.setter(uint64_t a1)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
}

uint64_t (*ARView.__enableUpdateCameraProjectionMatrixFromARFrame.modify(uint64_t (*result)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(void *)uint64_t result = v1;
  *((void *)result + 1) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *((unsigned char *)result + 16) = *(unsigned char *)(v3
                                       + OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
    return ARView.__enableUpdateCameraProjectionMatrixFromARFrame.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__enableUpdateCameraProjectionMatrixFromARFrame.modify(uint64_t a1, char a2)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(a1, a2, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
}

void ARView.__fallbackAmbientIntensity.getter()
{
}

void ARView.__fallbackAmbientIntensity.setter(float a1)
{
  uint64_t v2 = *(char **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    *(float *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientIntensity] = a1;
    if ((v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_renderOptions] & 2) != 0)
    {
      if (*(void *)&v2[OBJC_IVAR____TtC10RealityKit10RKARSystem_lightEntity])
      {
        uint64_t v3 = v2;
        type metadata accessor for AmbientLight();
        uint64_t v4 = (void (*)(unsigned char *, void))HasAmbientLight.light.modify();
        __AmbientLightComponent.intensity.setter();
        v4(v7, 0);
        id v5 = *(id *)&v3[OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor];
        id v6 = (void (*)(unsigned char *, void))HasAmbientLight.light.modify();
        __AmbientLightComponent.color.setter();
        v6(v7, 0);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void (*ARView.__fallbackAmbientIntensity.modify(void (*result)(uint64_t a1)))(uint64_t a1)
{
  *(void *)uint64_t result = v1;
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    *((_DWORD *)result + 2) = *(_DWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientIntensity);
    return ARView.__fallbackAmbientIntensity.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__fallbackAmbientIntensity.modify(uint64_t a1)
{
}

void *ARView.__fallbackAmbientColor.getter()
{
  return ARView.session.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor);
}

void *ARView.session.getter(void *result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    return *(id *)(v2 + *result);
  }
  __break(1u);
  return result;
}

void key path setter for ARView.__fallbackAmbientColor : ARView(id *a1, void *a2)
{
  uint64_t v2 = *(void **)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    id v4 = *a1;
    id v3 = v2;
    specialized RKARSystem.fallbackAmbientColor.setter(v4);
  }
  else
  {
    __break(1u);
  }
}

void ARView.__fallbackAmbientColor.setter(void *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    id v3 = v2;
    specialized RKARSystem.fallbackAmbientColor.setter(a1);
  }
  else
  {
    __break(1u);
  }
}

void (*ARView.__fallbackAmbientColor.modify(void (*result)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *((void *)result + 1) = v1;
  *((void *)result + 2) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    id v4 = *(void **)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor);
    *(void *)uint64_t result = v4;
    id v5 = v4;
    return ARView.__fallbackAmbientColor.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ARView.__fallbackAmbientColor.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 8) + *(void *)(a1 + 16));
  if ((a2 & 1) == 0)
  {
    if (v2)
    {
      id v3 = *(id *)a1;
      id v4 = v2;
      specialized RKARSystem.fallbackAmbientColor.setter(v3);
      goto LABEL_6;
    }
LABEL_10:
    __break(1u);
    return;
  }
  if (!v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  id v3 = *(id *)a1;
  id v4 = v2;
  specialized RKARSystem.fallbackAmbientColor.setter(v3);

LABEL_6:
}

void *ARView.__autoFireStartTriggerOnPlacement.getter()
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter(&OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
}

void *ARView.__enableUpdateCameraWorldMatrixFromARFrame.getter(void *result)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    return (void *)*(unsigned __int8 *)(v2 + *result);
  }
  __break(1u);
  return result;
}

uint64_t ARView.__autoFireStartTriggerOnPlacement.setter(uint64_t a1)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
}

uint64_t ARView.__enableUpdateCameraWorldMatrixFromARFrame.setter(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v3) {
    *(unsigned char *)(v3 + *a2) = result & 1;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t (*ARView.__autoFireStartTriggerOnPlacement.modify(uint64_t (*result)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v2 = OBJC_IVAR____TtC10RealityKit6ARView_arSystem;
  *(void *)uint64_t result = v1;
  *((void *)result + 1) = v2;
  uint64_t v3 = *(void *)(v1 + v2);
  if (v3)
  {
    *((unsigned char *)result + 16) = *(unsigned char *)(v3 + OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
    return ARView.__autoFireStartTriggerOnPlacement.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ARView.__autoFireStartTriggerOnPlacement.modify(uint64_t a1, char a2)
{
  return ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(a1, a2, &OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
}

uint64_t ARView.__enableUpdateCameraWorldMatrixFromARFrame.modify(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)result + *(void *)(result + 8));
  if (a2)
  {
    if (v3)
    {
LABEL_5:
      *(unsigned char *)(v3 + *a3) = *(unsigned char *)(result + 16);
      return result;
    }
    __break(1u);
  }
  if (v3) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

char *ARView.__occlusionEntity(for:)(char *result)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    uint64_t v3 = result;
    id v4 = v2;
    uint64_t v5 = RKARSystem.createFaceGeometry(for:)(v3);

    return (char *)v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall ARView.__removeOcclusionEntity(for:)(ARFaceAnchor *a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    id v4 = v2;
    RKARSystem.removeFaceGeometry(for:)(&a1->super);
  }
  else
  {
    __break(1u);
  }
}

unint64_t lazy protocol witness table accessor for type ARView.CameraMode and conformance ARView.CameraMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.CameraMode and conformance ARView.CameraMode;
  if (!lazy protocol witness table cache variable for type ARView.CameraMode and conformance ARView.CameraMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.CameraMode and conformance ARView.CameraMode);
  }
  return result;
}

char *keypath_get_selector_session()
{
  return sel_session;
}

id sub_1E2AB18FC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_session);
  *a2 = result;
  return result;
}

id sub_1E2AB1938(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSession_, *a1);
}

void *sub_1E2AB194C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_5Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem_cameraMode, a2);
}

void sub_1E2AB1958(char *a1)
{
  char v1 = *a1;
  ARView.cameraMode.setter(&v1);
}

uint64_t sub_1E2AB1990@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 2);
  return result;
}

uint64_t sub_1E2AB19E8(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2 + OBJC_IVAR____TtC10RealityKit6ARView_sessionComponents;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 2) = v2;
  return result;
}

void *sub_1E2AB1A3C@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent, a2);
}

_DWORD *sub_1E2AB1A48(_DWORD *result, void *a2)
{
  uint64_t v2 = *(void *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2) {
    *(_DWORD *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem___passthroughIntensityExponent) = *result;
  }
  else {
    __break(1u);
  }
  return result;
}

void *sub_1E2AB1A7C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    uint64_t v3 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_textureCache) + 16);
    *a2 = v3;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1E2AB1AB8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_5Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame, a2);
}

unsigned char *sub_1E2AB1AC4(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_14Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraWorldMatrixFromARFrame);
}

void *sub_1E2AB1AD0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_5Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame, a2);
}

unsigned char *sub_1E2AB1ADC(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_14Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit10RKARSystem___enableUpdateCameraProjectionMatrixFromARFrame);
}

void *sub_1E2AB1AE8@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientIntensity, a2);
}

void *keypath_get_9Tm@<X0>(void *result@<X0>, void *a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t v3 = *(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v3) {
    *a3 = *(_DWORD *)(v3 + *a2);
  }
  else {
    __break(1u);
  }
  return result;
}

void sub_1E2AB1B20(float *a1)
{
}

void *sub_1E2AB1B48@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC10RealityKit10RKARSystem_fallbackAmbientColor);
    *a2 = v3;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1E2AB1B80@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_5Tm(a1, &OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement, a2);
}

void *keypath_get_5Tm@<X0>(void *result@<X0>, void *a2@<X3>, unsigned char *a3@<X8>)
{
  uint64_t v3 = *(void *)(*result + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v3) {
    *a3 = *(unsigned char *)(v3 + *a2);
  }
  else {
    __break(1u);
  }
  return result;
}

unsigned char *sub_1E2AB1BB8(unsigned char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_14Tm(a1, a2, a3, a4, &OBJC_IVAR____TtC10RealityKit10RKARSystem___autoFireStartTriggerOnPlacement);
}

unsigned char *keypath_set_14Tm(unsigned char *result, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *(void *)(*a2 + OBJC_IVAR____TtC10RealityKit6ARView_arSystem);
  if (v5) {
    *(unsigned char *)(v5 + *a5) = *result;
  }
  else {
    __break(1u);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ARView.CameraMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1E2AB1CBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.CameraMode()
{
  return &type metadata for ARView.CameraMode;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = (int *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t ARView.EntityGestures.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t ARView.EntityGestures.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ARView.EntityGestures.translation.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static ARView.EntityGestures.rotation.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ARView.EntityGestures.scale.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void one-time initialization function for all()
{
  uint64_t v0 = unk_1F3E00878;
  if ((unk_1F3E00878 & ~qword_1F3E00870) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = qword_1F3E00880;
  if ((qword_1F3E00880 & ~(v0 | qword_1F3E00870)) == 0) {
    uint64_t v1 = 0;
  }
  static ARView.EntityGestures.all = v1 | v0 | qword_1F3E00870;
}

uint64_t static ARView.EntityGestures.all.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ARView.EntityGestures.all;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ARView.EntityGestures@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized SetAlgebra<>.init(arrayLiteral:)(a1, a2);
}

void *ARView.installGestures(_:for:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *a1;
  if (*a1)
  {
    id v9 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EntityTranslationGestureRecognizer()), sel_initWithTarget_action_, v3, sel_handleTranslation_);
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v11 = v7[2];
    unint64_t v10 = v7[3];
    if (v11 >= v10 >> 1) {
      uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v7);
    }
    v7[2] = v11 + 1;
    __n128 v12 = &v7[2 * v11];
    v12[4] = v9;
    uint64_t v12[5] = &protocol witness table for EntityTranslationGestureRecognizer;
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
  }
  id v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EntityRotationGestureRecognizer()), sel_initWithTarget_action_, v4, sel_handleRotation_);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  unint64_t v15 = v7[2];
  unint64_t v14 = v7[3];
  if (v15 >= v14 >> 1) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v7);
  }
  v7[2] = v15 + 1;
  __n128 v16 = &v7[2 * v15];
  v16[4] = v13;
  v16[5] = &protocol witness table for EntityRotationGestureRecognizer;
  if ((v6 & 4) == 0)
  {
LABEL_4:
    unint64_t v8 = v7[2];
    if (!v8) {
      return v7;
    }
    goto LABEL_19;
  }
LABEL_14:
  id v17 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EntityScaleGestureRecognizer()), sel_initWithTarget_action_, v4, sel_handleScale_);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  unint64_t v19 = v7[2];
  unint64_t v18 = v7[3];
  unint64_t v8 = v19 + 1;
  if (v19 >= v18 >> 1) {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v7);
  }
  v7[2] = v8;
  uint64_t v20 = &v7[2 * v19];
  _OWORD v20[4] = v17;
  v20[5] = &protocol witness table for EntityScaleGestureRecognizer;
LABEL_19:
  swift_bridgeObjectRetain_n();
  uint64_t v21 = a3;
  id v30 = v7;
  char v22 = v7 + 5;
  do
  {
    id v23 = (void *)*(v22 - 1);
    uint64_t v24 = *v22;
    uint64_t ObjectType = swift_getObjectType();
    id v26 = v23;
    objc_msgSend(v4, sel_addGestureRecognizer_, v26);
    objc_msgSend(v26, sel_setDelegate_, v4);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 16);
    uint64_t v28 = swift_retain();
    v27(v28, v21, ObjectType, v24);

    v22 += 2;
    --v8;
  }
  while (v8);
  uint64_t v7 = v30;
  swift_bridgeObjectRelease_n();
  return v7;
}

Swift::Bool __swiftcall ARView.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer *_, UITouch shouldReceive)
{
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    uint64_t v5 = _;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!v5) {
    return 1;
  }
  id v6 = [(objc_class *)shouldReceive.super.isa view];
  if (!v6) {
    return 1;
  }
  if (v6 == *(id *)(v2 + OBJC_IVAR____TtC10RealityKit6ARView_renderView))
  {

    return 1;
  }
  else
  {
    uint64_t v7 = (UIView *)v6;
    unint64_t v8 = [(UIGestureRecognizer *)_ view];
    if (v8)
    {
      id v9 = v8;

      return v7 == v9;
    }
    else
    {

      return 0;
    }
  }
}

void specialized ARView.handleTranslation(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for AnchoringComponent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnchoringComponent.Target?);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (char *)&v59 - v10;
  type metadata accessor for EntityTranslationGestureRecognizer();
  uint64_t v12 = swift_dynamicCastClass();
  if (v12)
  {
    id v13 = (void *)v12;
    id v62 = a1;
    if (objc_msgSend(v13, sel_state) == (id)1 || objc_msgSend(v13, sel_state) == (id)2)
    {
      unint64_t v14 = (void *)((char *)v13 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_entity);
      swift_beginAccess();
      if (!*v14)
      {

        return;
      }
      swift_retain();
      if (Entity.anchor.getter())
      {
        HasAnchoring.anchoring.getter();
        swift_release();
        AnchoringComponent.target.getter();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        uint64_t v15 = type metadata accessor for AnchoringComponent.Target();
        uint64_t v16 = *(void *)(v15 - 8);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
        outlined init with copy of AnchoringComponent.Target?((uint64_t)v11, (uint64_t)v8);
        if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v8, v15) == *MEMORY[0x1E4F3A950])
        {
          id v17 = objc_msgSend(v13, sel_view);
          objc_msgSend(v13, sel_locationInView_, v17);
          double v19 = v18;
          double v21 = v20;

          char v22 = (double *)((char *)v13
                         + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation);
          if ((*((unsigned char *)v13 + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_lastScreenLocation
                               + 16) & 1) == 0)
          {
            double v24 = *v22;
            double v23 = v22[1];
            uint64_t v25 = HasHierarchy.parent.getter();
            id v26 = objc_msgSend(v13, sel_view);
            if (v26)
            {
              uint64_t v27 = v26;
              uint64_t v28 = type metadata accessor for ARView();
              if (!swift_dynamicCastClass()
                || (v61.i64[0] = v28,
                    uint64_t v29 = *(unsigned int *)((char *)v13
                                          + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight),
                    v60.i64[0] = (uint64_t)v13
                               + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight,
                    LOBYTE(v71[0]) = *((unsigned char *)v13
                                     + OBJC_IVAR____TtC10RealityKit34EntityTranslationGestureRecognizer_touchHeight
                                     + 4),
                    specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v29 | ((unint64_t)LOBYTE(v71[0]) << 32), v64), outlined init with take of simd_float4x4?((uint64_t)v64, (uint64_t)v71), (v75 & 1) != 0)|| (uint64_t v30 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v24, v23, v71[0], v72, v73, v74), (v32 & 1) != 0))
              {
LABEL_34:

                swift_release();
                goto LABEL_31;
              }
              v33.i64[0] = v30;
              v33.i64[1] = v31;
              float32x4_t v59 = v33;
              if (v25)
              {
                type metadata accessor for Entity();
                HasTransform.convert(position:from:)();
                float32x4_t v59 = v34;
                swift_release();
              }

              uint64_t v35 = HasHierarchy.parent.getter();
              id v36 = objc_msgSend(v13, sel_view);
              if (v36)
              {
                uint64_t v27 = v36;
                if (swift_dynamicCastClass())
                {
                  uint64_t v37 = *(unsigned int *)v60.i64[0];
                  LOBYTE(v66) = *(unsigned char *)(v60.i64[0] + 4);
                  specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(v37 | ((unint64_t)LOBYTE(v66) << 32), v65);
                  outlined init with take of simd_float4x4?((uint64_t)v65, (uint64_t)&v66);
                  if ((v70 & 1) == 0)
                  {
                    uint64_t v38 = ARView.unproject(_:ontoPlane:relativeToCamera:)(0, v19, v21, v66, v67, v68, v69);
                    if ((v40 & 1) == 0)
                    {
                      v41.i64[0] = v38;
                      v41.i64[1] = v39;
                      float32x4_t v61 = v41;
                      if (v35)
                      {
                        type metadata accessor for Entity();
                        HasTransform.convert(position:from:)();
                        float32x4_t v61 = v42;
                        swift_release();
                      }

                      float32x4_t v61 = vsubq_f32(v61, v59);
                      float v43 = v61.f32[2];
                      uint64_t v44 = (void (*)(uint64_t *, void))HasTransform.position.modify();
                      *(float32x2_t *)&long long v46 = vadd_f32(*(float32x2_t *)v61.f32, *v45);
                      *((float *)&v46 + 2) = v43 + v45[1].f32[0];
                      HIDWORD(v46) = 0;
                      *(_OWORD *)v45->f32 = v46;
                      v44(&v63, 0);
                      goto LABEL_29;
                    }
                  }
                }
                goto LABEL_34;
              }
            }

            swift_release();
            goto LABEL_31;
          }
LABEL_30:

LABEL_31:
          swift_release();
          goto LABEL_32;
        }
        (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v15);
      }
      else
      {
        uint64_t v48 = type metadata accessor for AnchoringComponent.Target();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v11, 1, 1, v48);
      }
      HasHierarchy.parent.getter();
      id v49 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v50 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v13) + 0xB8))();
      uint64_t v52 = v51;
      char v54 = v53;
      swift_release();
      if ((v54 & 1) == 0)
      {
        v55.i64[0] = v50;
        float32x4_t v60 = v55;
        v55.i64[1] = v52;
        float32x4_t v61 = v55;
        HasHierarchy.parent.getter();
        (*(void (**)(__n128))((*v49 & *v13) + 0xC0))((__n128)0);
        swift_release();
        id v56 = (void (*)(double *, void))HasTransform.position.modify();
        *(float32x2_t *)&long long v58 = vadd_f32(*v57, (float32x2_t)__PAIR64__(v60.u32[1], v50));
        *((float *)&v58 + 2) = v61.f32[2] + v57[1].f32[0];
        HIDWORD(v58) = 0;
        *(_OWORD *)v57->f32 = v58;
        v56(v71, 0);
LABEL_29:
        swift_release();

LABEL_32:
        outlined destroy of AnchoringComponent.Target?((uint64_t)v11);
        return;
      }
      goto LABEL_30;
    }
    id v47 = v62;
  }
}

void specialized ARView.handleRotation(_:)(void *a1)
{
  type metadata accessor for EntityRotationGestureRecognizer();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    id v21 = a1;
    if (objc_msgSend(v3, sel_state) == (id)1 || objc_msgSend(v3, sel_state) == (id)2)
    {
      uint64_t v4 = &v3[OBJC_IVAR____TtC10RealityKit31EntityRotationGestureRecognizer_entity];
      swift_beginAccess();
      if (*(void *)v4)
      {
        swift_retain();
        v24[0] = 1;
        specialized EntityGestureRecognizer.planeForUnprojection(heightOffset:)(0x100000000, v23);
        outlined init with take of simd_float4x4?((uint64_t)v23, (uint64_t)v24);
        if ((v24[64] & 1) == 0)
        {
          objc_msgSend(v3, sel_rotation);
          float v6 = v5;
          objc_msgSend(v3, sel_setRotation_, 0.0);
          specialized SIMD.subscript.getter((__n128)xmmword_1E2ABE430, COERCE_DOUBLE(2));
          HasTransform.convert(normal:from:)();
          int32x4_t v8 = (int32x4_t)vmulq_f32(v7, v7);
          v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
          float32x2_t v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
          float32x2_t v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)));
          float32x4_t v19 = vmulq_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
          __float2 v11 = __sincosf_stret(v6 * -0.5);
          float32x4_t v12 = vmulq_n_f32(v19, v11.__sinval);
          v12.i32[3] = LODWORD(v11.__cosval);
          float32x4_t v20 = v12;
          id v13 = (void (*)(char *, void))HasTransform.orientation.modify();
          int32x4_t v15 = (int32x4_t)vnegq_f32(v20);
          int8x16_t v16 = (int8x16_t)vtrn2q_s32((int32x4_t)v20, vtrn1q_s32((int32x4_t)v20, v15));
          float32x4_t v17 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v15, 8uLL), *v14, 1), (float32x4_t)vextq_s8(v16, v16, 8uLL), COERCE_FLOAT(*(_OWORD *)v14->f32));
          float32x4_t v18 = (float32x4_t)vrev64q_s32((int32x4_t)v20);
          v18.i32[0] = v15.i32[1];
          v18.i32[3] = v15.i32[2];
          *(float32x4_t *)v14->f32 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v20, *(float32x4_t *)v14->f32, 3), v18, *(float32x4_t *)v14->f32, 2), v17);
          v13(v22, 0);
        }

        swift_release();
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

void specialized ARView.handleScale(_:)(void *a1)
{
  type metadata accessor for EntityScaleGestureRecognizer();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    id v12 = a1;
    if (objc_msgSend(v3, sel_state) == (id)1 || objc_msgSend(v3, sel_state) == (id)2)
    {
      uint64_t v4 = &v3[OBJC_IVAR____TtC10RealityKit28EntityScaleGestureRecognizer_entity];
      swift_beginAccess();
      if (*(void *)v4)
      {
        swift_retain();
        objc_msgSend(v3, sel_scale);
        double v6 = v5;
        objc_msgSend(v3, sel_setScale_, 1.0);
        float v7 = v6;
        float v11 = v7;
        int32x4_t v8 = (void (*)(char *, void))HasTransform.scale.modify();
        *(float32x2_t *)&long long v10 = vmul_n_f32(*v9, v11);
        *((float *)&v10 + 2) = v9[1].f32[0] * v11;
        HIDWORD(v10) = 0;
        *(_OWORD *)v9->f32 = v10;
        v8(v13, 0);

        swift_release();
      }
      else
      {
      }
    }
    else
    {
    }
  }
}

uint64_t specialized ARView.gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)(void *a1, void *a2)
{
  self;
  if (swift_dynamicCastObjCClass())
  {
    self;
    if (swift_dynamicCastObjCClass()) {
      goto LABEL_3;
    }
  }
  swift_getObjectType();
  uint64_t v5 = swift_conformsToProtocol2();
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v5) {
    float v7 = a1;
  }
  else {
    float v7 = 0;
  }
  if (!v7
    || ((swift_getObjectType(), (uint64_t v8 = swift_conformsToProtocol2()) != 0) ? (v9 = v8) : (v9 = 0),
        v8 ? (long long v10 = a2) : (long long v10 = 0),
        !v10))
  {
LABEL_24:
    char v4 = 0;
    return v4 & 1;
  }
  uint64_t ObjectType = swift_getObjectType();
  id v12 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  id v13 = a1;
  id v14 = a2;
  uint64_t v15 = v12(ObjectType, v6);
  uint64_t v16 = swift_getObjectType();
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v16, v9);
  uint64_t v18 = v17;
  if (v15)
  {
    if (v17)
    {
      type metadata accessor for Entity();
      lazy protocol witness table accessor for type Entity and conformance Entity();
      swift_retain();
      char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();

      swift_release();
      swift_release();
      return v4 & 1;
    }
    swift_release();

    goto LABEL_24;
  }

  if (v18)
  {
    swift_release();
    goto LABEL_24;
  }
LABEL_3:
  char v4 = 1;
  return v4 & 1;
}

unint64_t lazy protocol witness table accessor for type ARView.EntityGestures and conformance ARView.EntityGestures()
{
  unint64_t result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures;
  if (!lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ARView.EntityGestures and conformance ARView.EntityGestures);
  }
  return result;
}

ValueMetadata *type metadata accessor for ARView.EntityGestures()
{
  return &type metadata for ARView.EntityGestures;
}

uint64_t outlined destroy of AnchoringComponent.Target?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnchoringComponent.Target?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AnchoringComponent.Target?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnchoringComponent.Target?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Entity and conformance Entity()
{
  unint64_t result = lazy protocol witness table cache variable for type Entity and conformance Entity;
  if (!lazy protocol witness table cache variable for type Entity and conformance Entity)
  {
    type metadata accessor for Entity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity and conformance Entity);
  }
  return result;
}

uint64_t vImage.PixelBuffer.size.getter()
{
  return MEMORY[0x1F4183090]();
}

uint64_t vImage.PixelBuffer<>.makeCGImage(cgImageFormat:)()
{
  return MEMORY[0x1F41830B8]();
}

uint64_t vImage.PixelBuffer<>.init(size:pixelFormat:)()
{
  return MEMORY[0x1F41830C8]();
}

uint64_t vImage.PixelBuffer<>.init(cgImage:cgImageFormat:pixelFormat:)()
{
  return MEMORY[0x1F41830D8]();
}

uint64_t vImage.PixelBuffer<>.convert(to:)()
{
  return MEMORY[0x1F41830E0]();
}

uint64_t type metadata accessor for vImage.Interleaved8x4()
{
  return MEMORY[0x1F41830E8]();
}

uint64_t type metadata accessor for vImage.Interleaved16Fx4()
{
  return MEMORY[0x1F41830F0]();
}

uint64_t type metadata accessor for vImage.Size()
{
  return MEMORY[0x1F41830F8]();
}

uint64_t Measurement.value.getter()
{
  return MEMORY[0x1F40E31D0]();
}

uint64_t Measurement<>.converted(to:)()
{
  return MEMORY[0x1F40E3250]();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return MEMORY[0x1F40E44C8]();
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)()
{
  return MEMORY[0x1F40E44F8]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t static LocalizedStringResource.== infix(_:_:)()
{
  return MEMORY[0x1F40E45A0]();
}

uint64_t type metadata accessor for LocalizedStringResource()
{
  return MEMORY[0x1F40E45B8]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t Data.Deallocator._deallocator.getter()
{
  return MEMORY[0x1F40E4BF0]();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return MEMORY[0x1F40E4C00]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x1F40E4C80]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1F40E4D48]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x1F40E50E0]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1F40E52F0]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E53F8]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t static __RealityFileURLResolver.schemePrefix.getter()
{
  return MEMORY[0x1F40F4E40]();
}

uint64_t type metadata accessor for __RealityFileURLResolver()
{
  return MEMORY[0x1F40F4E48]();
}

uint64_t static __AssetRef.__fromCore(_:)()
{
  return MEMORY[0x1F40F4E58]();
}

uint64_t __AssetRef.__as<A>(_:)()
{
  return MEMORY[0x1F40F4E60]();
}

uint64_t type metadata accessor for __AssetRef()
{
  return MEMORY[0x1F40F4E68]();
}

uint64_t __SceneRef.__as<A>(_:)()
{
  return MEMORY[0x1F40F4E78]();
}

uint64_t type metadata accessor for __SceneRef()
{
  return MEMORY[0x1F40F4E80]();
}

uint64_t ModelEntity.init(mesh:materials:)()
{
  return MEMORY[0x1F40F4EB0]();
}

uint64_t type metadata accessor for ModelEntity()
{
  return MEMORY[0x1F40F4EB8]();
}

uint64_t type metadata accessor for SceneEvents.Render()
{
  return MEMORY[0x1F40F4EC0]();
}

uint64_t SceneEvents.Update.deltaTime.getter()
{
  return MEMORY[0x1F40F4EC8]();
}

uint64_t type metadata accessor for SceneEvents.Update()
{
  return MEMORY[0x1F40F4ED0]();
}

uint64_t __EntityRef.__as<A>(_:)()
{
  return MEMORY[0x1F40F4EF0]();
}

uint64_t type metadata accessor for __EntityRef()
{
  return MEMORY[0x1F40F4EF8]();
}

uint64_t static __PeerIDRef.__fromCore(_:)()
{
  return MEMORY[0x1F40F4F00]();
}

uint64_t __PeerIDRef.__as<A>(_:)()
{
  return MEMORY[0x1F40F4F08]();
}

uint64_t type metadata accessor for AmbientLight()
{
  return MEMORY[0x1F40F4F18]();
}

uint64_t HasAnchoring.anchoring.getter()
{
  return MEMORY[0x1F40F4F40]();
}

Swift::Void __swiftcall HasHierarchy.removeFromParent(preservingWorldTransform:)(Swift::Bool preservingWorldTransform)
{
}

uint64_t HasHierarchy.parent.getter()
{
  return MEMORY[0x1F40F4F68]();
}

uint64_t HasHierarchy.children.getter()
{
  return MEMORY[0x1F40F4F78]();
}

uint64_t HasTransform.setTransformMatrix(_:relativeTo:)()
{
  return MEMORY[0x1F40F4F88]();
}

uint64_t HasTransform.orientation.modify()
{
  return MEMORY[0x1F40F4F98]();
}

uint64_t HasTransform.visualBounds(recursive:relativeTo:excludeInactive:)()
{
  return MEMORY[0x1F40F4FB8]();
}

uint64_t HasTransform.transformMatrix(relativeTo:)()
{
  return MEMORY[0x1F40F4FC8]();
}

uint64_t HasTransform.scale(relativeTo:)()
{
  return MEMORY[0x1F40F4FD0]();
}

uint64_t HasTransform.scale.modify()
{
  return MEMORY[0x1F40F4FD8]();
}

uint64_t HasTransform.convert(normal:from:)()
{
  return MEMORY[0x1F40F4FF0]();
}

uint64_t HasTransform.convert(position:to:)()
{
  return MEMORY[0x1F40F4FF8]();
}

uint64_t HasTransform.convert(position:from:)()
{
  return MEMORY[0x1F40F5000]();
}

uint64_t HasTransform.convert(direction:to:)()
{
  return MEMORY[0x1F40F5008]();
}

uint64_t HasTransform.convert(direction:from:)()
{
  return MEMORY[0x1F40F5010]();
}

uint64_t HasTransform.position(relativeTo:)()
{
  return MEMORY[0x1F40F5020]();
}

uint64_t HasTransform.position.modify()
{
  return MEMORY[0x1F40F5028]();
}

uint64_t HasTransform.position.setter()
{
  return MEMORY[0x1F40F5038]();
}

uint64_t HasTransform.setScale(_:relativeTo:)()
{
  return MEMORY[0x1F40F5040]();
}

uint64_t static InputManager.notify(_:val0:val1:val2:)()
{
  return MEMORY[0x1F40F5060]();
}

uint64_t type metadata accessor for InputManager()
{
  return MEMORY[0x1F40F5068]();
}

uint64_t static MeshResource.__generateFace(from:fillMesh:)()
{
  return MEMORY[0x1F40F5070]();
}

uint64_t static MeshResource.generateBox(size:cornerRadius:)()
{
  return MEMORY[0x1F40F5078]();
}

uint64_t type metadata accessor for MeshResource()
{
  return MEMORY[0x1F40F5090]();
}

uint64_t MeshResource.init(_:)()
{
  return MEMORY[0x1F40F5098]();
}

uint64_t UnlitMaterial.init(color:applyPostProcessToneMap:)()
{
  return MEMORY[0x1F40F50B8]();
}

uint64_t UnlitMaterial.__baseColor.getter()
{
  return MEMORY[0x1F40F50C0]();
}

uint64_t UnlitMaterial.__tintColor.getter()
{
  return MEMORY[0x1F40F50C8]();
}

uint64_t UnlitMaterial.__tintColor.setter()
{
  return MEMORY[0x1F40F50D0]();
}

uint64_t UnlitMaterial.init(color:)()
{
  return MEMORY[0x1F40F50D8]();
}

uint64_t UnlitMaterial.init()()
{
  return MEMORY[0x1F40F50E0]();
}

uint64_t type metadata accessor for UnlitMaterial()
{
  return MEMORY[0x1F40F50E8]();
}

uint64_t static CollisionGroup.all.getter()
{
  return MEMORY[0x1F40F50F8]();
}

uint64_t type metadata accessor for CollisionGroup()
{
  return MEMORY[0x1F40F5118]();
}

uint64_t ModelComponent.init(mesh:materials:)()
{
  return MEMORY[0x1F40F5138]();
}

uint64_t ModelComponent.mesh.setter()
{
  return MEMORY[0x1F40F5140]();
}

uint64_t type metadata accessor for ModelComponent()
{
  return MEMORY[0x1F40F5150]();
}

uint64_t SimpleMaterial.__baseColor.getter()
{
  return MEMORY[0x1F40F5158]();
}

uint64_t SimpleMaterial.__tintColor.getter()
{
  return MEMORY[0x1F40F5160]();
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:assetService:)()
{
  return MEMORY[0x1F40F5168]();
}

uint64_t SimpleMaterial.init(color:roughness:isMetallic:)()
{
  return MEMORY[0x1F40F5170]();
}

uint64_t static __RESignpostID.UpdateLoop.getter()
{
  return MEMORY[0x1F40F5198]();
}

uint64_t HasBodyTracking.bodyTracking.getter()
{
  return MEMORY[0x1F40F51D8]();
}

uint64_t dispatch thunk of RERenderManager.__coreRenderManager.getter()
{
  return MEMORY[0x1F40F51E8]();
}

uint64_t dispatch thunk of RERenderManager.getLayerSize(_:)()
{
  return MEMORY[0x1F40F51F0]();
}

uint64_t dispatch thunk of RERenderManager.setLayerSize(_:_:_:)()
{
  return MEMORY[0x1F40F51F8]();
}

uint64_t dispatch thunk of RERenderManager.waitUntilScheduled()()
{
  return MEMORY[0x1F40F5200]();
}

uint64_t dispatch thunk of RERenderManager.registerRenderLayer(_:)()
{
  return MEMORY[0x1F40F5208]();
}

uint64_t dispatch thunk of RERenderManager.unregisterRenderLayer(_:)()
{
  return MEMORY[0x1F40F5210]();
}

uint64_t dispatch thunk of RERenderManager.createRenderFrameSettings()()
{
  return MEMORY[0x1F40F5218]();
}

uint64_t dispatch thunk of RERenderManager.createRenderFrameWorkload()()
{
  return MEMORY[0x1F40F5220]();
}

uint64_t type metadata accessor for RERenderManager()
{
  return MEMORY[0x1F40F5228]();
}

uint64_t static TextureResource.MipmapsMode.== infix(_:_:)()
{
  return MEMORY[0x1F40F5238]();
}

uint64_t type metadata accessor for TextureResource.MipmapsMode()
{
  return MEMORY[0x1F40F5240]();
}

uint64_t TextureResource.CreateOptions.mipmapsMode.getter()
{
  return MEMORY[0x1F40F5248]();
}

uint64_t TextureResource.CreateOptions.init(semantic:mipmapsMode:)()
{
  return MEMORY[0x1F40F5250]();
}

uint64_t TextureResource.CreateOptions.semantic.getter()
{
  return MEMORY[0x1F40F5258]();
}

uint64_t type metadata accessor for TextureResource.CreateOptions()
{
  return MEMORY[0x1F40F5260]();
}

uint64_t static TextureResource.load(named:in:textureLoader:)()
{
  return MEMORY[0x1F40F5268]();
}

uint64_t static TextureResource.load(named:in:options:textureLoader:)()
{
  return MEMORY[0x1F40F5270]();
}

uint64_t type metadata accessor for TextureResource.Semantic()
{
  return MEMORY[0x1F40F5278]();
}

uint64_t static TextureResource.loadAsync(named:in:textureLoader:)()
{
  return MEMORY[0x1F40F5280]();
}

uint64_t static TextureResource.loadAsync(named:in:options:textureLoader:)()
{
  return MEMORY[0x1F40F5288]();
}

uint64_t type metadata accessor for TextureResource()
{
  return MEMORY[0x1F40F5290]();
}

uint64_t CollisionCastHit.entity.getter()
{
  return MEMORY[0x1F40F5298]();
}

uint64_t CollisionCastHit.position.getter()
{
  return MEMORY[0x1F40F52A8]();
}

uint64_t type metadata accessor for CollisionCastHit()
{
  return MEMORY[0x1F40F52B0]();
}

uint64_t static TextMeshResource.makeMeshResource(_:extrusionDepth:font:containerFrame:alignment:lineBreakMode:segmentDensity:)()
{
  return MEMORY[0x1F40F52B8]();
}

uint64_t type metadata accessor for TextMeshResource()
{
  return MEMORY[0x1F40F52C0]();
}

uint64_t dispatch thunk of __ServiceLocator.coreServiceLocator.getter()
{
  return MEMORY[0x1F40F5310]();
}

uint64_t dispatch thunk of __ServiceLocator.assetService.getter()
{
  return MEMORY[0x1F40F5318]();
}

uint64_t dispatch thunk of __ServiceLocator.sceneService.getter()
{
  return MEMORY[0x1F40F5320]();
}

uint64_t dispatch thunk of __ServiceLocator.renderService.getter()
{
  return MEMORY[0x1F40F5328]();
}

uint64_t dispatch thunk of __ServiceLocator.engine.getter()
{
  return MEMORY[0x1F40F5350]();
}

uint64_t static __ServiceLocator.shared.getter()
{
  return MEMORY[0x1F40F5358]();
}

uint64_t type metadata accessor for __ServiceLocator()
{
  return MEMORY[0x1F40F5360]();
}

uint64_t OcclusionMaterial.init(receivesDynamicLighting:)()
{
  return MEMORY[0x1F40F5380]();
}

uint64_t type metadata accessor for OcclusionMaterial()
{
  return MEMORY[0x1F40F5388]();
}

uint64_t __REAnchoringType.isEqualToARAnchor(anchor:)()
{
  return MEMORY[0x1F40F5390]();
}

uint64_t type metadata accessor for __REAnchoringType()
{
  return MEMORY[0x1F40F53B0]();
}

uint64_t __REECSManagerRef.__as<A>(_:)()
{
  return MEMORY[0x1F40F53B8]();
}

uint64_t type metadata accessor for __REECSManagerRef()
{
  return MEMORY[0x1F40F53C0]();
}

uint64_t type metadata accessor for AnchoringComponent.Target.Classification()
{
  return MEMORY[0x1F40F53D8]();
}

uint64_t static AnchoringComponent.Target.Alignment.horizontal.getter()
{
  return MEMORY[0x1F40F53E0]();
}

uint64_t static AnchoringComponent.Target.Alignment.vertical.getter()
{
  return MEMORY[0x1F40F53F0]();
}

uint64_t type metadata accessor for AnchoringComponent.Target.Alignment()
{
  return MEMORY[0x1F40F53F8]();
}

uint64_t type metadata accessor for AnchoringComponent.Target()
{
  return MEMORY[0x1F40F5400]();
}

uint64_t AnchoringComponent.target.getter()
{
  return MEMORY[0x1F40F5408]();
}

uint64_t type metadata accessor for AnchoringComponent()
{
  return MEMORY[0x1F40F5410]();
}

uint64_t AnchoringComponent.init(_:)()
{
  return MEMORY[0x1F40F5418]();
}

{
  return MEMORY[0x1F40F5420]();
}

uint64_t HasSynchronization.isOwner.getter()
{
  return MEMORY[0x1F40F5450]();
}

uint64_t SpotLightComponent.attenuationFalloffExponent.getter()
{
  return MEMORY[0x1F40F5458]();
}

uint64_t SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:attenuationFalloffExponent:)()
{
  return MEMORY[0x1F40F5460]();
}

uint64_t SpotLightComponent.attenuationRadius.getter()
{
  return MEMORY[0x1F40F5468]();
}

uint64_t SpotLightComponent.innerAngleInDegrees.getter()
{
  return MEMORY[0x1F40F5470]();
}

uint64_t SpotLightComponent.outerAngleInDegrees.getter()
{
  return MEMORY[0x1F40F5478]();
}

uint64_t SpotLightComponent.__color.getter()
{
  return MEMORY[0x1F40F5480]();
}

uint64_t SpotLightComponent.__color.setter()
{
  return MEMORY[0x1F40F5488]();
}

uint64_t SpotLightComponent.init(cgColor:intensity:innerAngleInDegrees:outerAngleInDegrees:attenuationRadius:)()
{
  return MEMORY[0x1F40F5490]();
}

uint64_t SpotLightComponent.intensity.getter()
{
  return MEMORY[0x1F40F5498]();
}

uint64_t type metadata accessor for SpotLightComponent()
{
  return MEMORY[0x1F40F54A0]();
}

uint64_t static __MaterialResource.createMaterial(assetPath:in:)()
{
  return MEMORY[0x1F40F54E0]();
}

uint64_t dispatch thunk of __MaterialResource.coreAsset.getter()
{
  return MEMORY[0x1F40F54F8]();
}

uint64_t type metadata accessor for __MaterialResource()
{
  return MEMORY[0x1F40F5500]();
}

uint64_t static EnvironmentResource.defaultObject()()
{
  return MEMORY[0x1F40F5510]();
}

uint64_t dispatch thunk of EnvironmentResource.coreSkyboxAsset.getter()
{
  return MEMORY[0x1F40F5518]();
}

uint64_t static EnvironmentResource.defaultAR()()
{
  return MEMORY[0x1F40F5528]();
}

uint64_t type metadata accessor for EnvironmentResource()
{
  return MEMORY[0x1F40F5530]();
}

uint64_t PointLightComponent.attenuationFalloffExponent.getter()
{
  return MEMORY[0x1F40F5538]();
}

uint64_t PointLightComponent.init(cgColor:intensity:attenuationRadius:attenuationFalloffExponent:)()
{
  return MEMORY[0x1F40F5540]();
}

uint64_t PointLightComponent.attenuationRadius.getter()
{
  return MEMORY[0x1F40F5548]();
}

uint64_t PointLightComponent.__color.getter()
{
  return MEMORY[0x1F40F5550]();
}

uint64_t PointLightComponent.__color.setter()
{
  return MEMORY[0x1F40F5558]();
}

uint64_t PointLightComponent.init(cgColor:intensity:attenuationRadius:)()
{
  return MEMORY[0x1F40F5560]();
}

uint64_t PointLightComponent.intensity.getter()
{
  return MEMORY[0x1F40F5568]();
}

uint64_t type metadata accessor for PointLightComponent()
{
  return MEMORY[0x1F40F5570]();
}

uint64_t __REOSSignpostScope.init(osLog:signpostID:name:)()
{
  return MEMORY[0x1F40F5578]();
}

uint64_t type metadata accessor for __REOSSignpostScope()
{
  return MEMORY[0x1F40F5580]();
}

uint64_t __RKEntityTapTrigger.init(targetEntity:reversible:)()
{
  return MEMORY[0x1F40F55B8]();
}

uint64_t type metadata accessor for __RKEntityTapTrigger()
{
  return MEMORY[0x1F40F55C8]();
}

uint64_t type metadata accessor for BodyTrackingComponent.Target()
{
  return MEMORY[0x1F40F55E8]();
}

uint64_t BodyTrackingComponent.target.getter()
{
  return MEMORY[0x1F40F55F0]();
}

uint64_t BodyTrackingComponent.isPaused.getter()
{
  return MEMORY[0x1F40F55F8]();
}

uint64_t type metadata accessor for BodyTrackingComponent()
{
  return MEMORY[0x1F40F5600]();
}

uint64_t dispatch thunk of RERenderFrameSettings.setTotalTime(_:)()
{
  return MEMORY[0x1F40F5608]();
}

uint64_t dispatch thunk of RERenderFrameWorkload.commitWithImmediatePresent()()
{
  return MEMORY[0x1F40F5610]();
}

uint64_t dispatch thunk of RERenderFrameWorkload.commit()()
{
  return MEMORY[0x1F40F5618]();
}

uint64_t dispatch thunk of RERenderFrameWorkload.configure(_:)()
{
  return MEMORY[0x1F40F5620]();
}

uint64_t dispatch thunk of __RKEntityInteraction.trigger.getter()
{
  return MEMORY[0x1F40F5698]();
}

uint64_t type metadata accessor for CollisionCastQueryType()
{
  return MEMORY[0x1F40F56A8]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.setWireframeMode(displayWireframe:)()
{
  return MEMORY[0x1F40F56D0]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.setup(mgr:)()
{
  return MEMORY[0x1F40F56D8]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.execute(mgr:)()
{
  return MEMORY[0x1F40F56E8]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.unsetup(mgr:)()
{
  return MEMORY[0x1F40F56F0]();
}

uint64_t dispatch thunk of __RERenderGraphEmitter.__handle.getter()
{
  return MEMORY[0x1F40F56F8]();
}

uint64_t type metadata accessor for __RERenderGraphEmitter()
{
  return MEMORY[0x1F40F5700]();
}

uint64_t __RERenderGraphEmitter.init(_:)()
{
  return MEMORY[0x1F40F5708]();
}

uint64_t dispatch thunk of __RKEntityTriggerGroup.triggers.getter()
{
  return MEMORY[0x1F40F5710]();
}

uint64_t type metadata accessor for __RKEntityTriggerGroup()
{
  return MEMORY[0x1F40F5718]();
}

uint64_t type metadata accessor for MaterialScalarParameter()
{
  return MEMORY[0x1F40F5760]();
}

uint64_t __AmbientLightComponent.color.setter()
{
  return MEMORY[0x1F40F5778]();
}

uint64_t __AmbientLightComponent.intensity.setter()
{
  return MEMORY[0x1F40F5780]();
}

uint64_t static __MaterialColorParameter.== infix(_:_:)()
{
  return MEMORY[0x1F40F5788]();
}

uint64_t __MaterialColorParameter.hash(into:)()
{
  return MEMORY[0x1F40F5790]();
}

uint64_t type metadata accessor for __MaterialColorParameter()
{
  return MEMORY[0x1F40F5798]();
}

uint64_t DirectionalLightComponent.isRealWorldProxy.getter()
{
  return MEMORY[0x1F40F57A0]();
}

uint64_t DirectionalLightComponent.__color.getter()
{
  return MEMORY[0x1F40F57A8]();
}

uint64_t DirectionalLightComponent.__color.setter()
{
  return MEMORY[0x1F40F57B0]();
}

uint64_t DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)()
{
  return MEMORY[0x1F40F57B8]();
}

uint64_t DirectionalLightComponent.intensity.getter()
{
  return MEMORY[0x1F40F57C0]();
}

uint64_t type metadata accessor for DirectionalLightComponent()
{
  return MEMORY[0x1F40F57C8]();
}

uint64_t RKARSegmentationComponent.cameraTextureY.setter()
{
  return MEMORY[0x1F40F57D0]();
}

uint64_t RKARSegmentationComponent.cameraTextureCbCr.setter()
{
  return MEMORY[0x1F40F57D8]();
}

uint64_t RKARSegmentationComponent.estimatedDepthData.setter()
{
  return MEMORY[0x1F40F57E0]();
}

uint64_t RKARSegmentationComponent.segmentationBuffer.setter()
{
  return MEMORY[0x1F40F57E8]();
}

uint64_t RKARSegmentationComponent.init()()
{
  return MEMORY[0x1F40F57F0]();
}

uint64_t type metadata accessor for RKARSegmentationComponent()
{
  return MEMORY[0x1F40F57F8]();
}

uint64_t type metadata accessor for PerspectiveCameraComponent()
{
  return MEMORY[0x1F40F5848]();
}

uint64_t __RKEntityProximityTrigger.init(targetEntity:distance:type:)()
{
  return MEMORY[0x1F40F5850]();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.targetEntity.getter()
{
  return MEMORY[0x1F40F5858]();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.__targetEntity.getter()
{
  return MEMORY[0x1F40F5860]();
}

uint64_t dispatch thunk of __RKEntityProximityTrigger.type.getter()
{
  return MEMORY[0x1F40F5868]();
}

uint64_t type metadata accessor for __RKEntityProximityTrigger.ExitType()
{
  return MEMORY[0x1F40F5870]();
}

uint64_t type metadata accessor for __RKEntityProximityTrigger()
{
  return MEMORY[0x1F40F5878]();
}

uint64_t type metadata accessor for SceneUnderstandingComponent.EntityType()
{
  return MEMORY[0x1F40F58C8]();
}

uint64_t SceneUnderstandingComponent.init(entityType:)()
{
  return MEMORY[0x1F40F58D0]();
}

uint64_t type metadata accessor for SceneUnderstandingComponent()
{
  return MEMORY[0x1F40F58D8]();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__interactions.getter()
{
  return MEMORY[0x1F40F58F0]();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.proximityEnabled.getter()
{
  return MEMORY[0x1F40F58F8]();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.__performInteractions(matching:on:)()
{
  return MEMORY[0x1F40F5908]();
}

uint64_t dispatch thunk of __RKEntityInteractionManager.areInteractionsEnabled.getter()
{
  return MEMORY[0x1F40F5910]();
}

uint64_t type metadata accessor for __RKEntityInteractionManager()
{
  return MEMORY[0x1F40F5938]();
}

uint64_t Scene.coreScene.getter()
{
  return MEMORY[0x1F40F5960]();
}

uint64_t dispatch thunk of Scene.__coreScene.getter()
{
  return MEMORY[0x1F40F5968]();
}

uint64_t type metadata accessor for Scene.PixelCastError()
{
  return MEMORY[0x1F40F5970]();
}

uint64_t static Scene.pixelCastRequest.getter()
{
  return MEMORY[0x1F40F5978]();
}

uint64_t static Scene.pixelCastRequest.setter()
{
  return MEMORY[0x1F40F5980]();
}

uint64_t static Scene.pixelCastArrayRequest.getter()
{
  return MEMORY[0x1F40F5988]();
}

uint64_t static Scene.pixelCastArrayRequest.setter()
{
  return MEMORY[0x1F40F5990]();
}

uint64_t dispatch thunk of Scene.defaultCamera.getter()
{
  return MEMORY[0x1F40F59A0]();
}

uint64_t Scene.physicsOrigin.getter()
{
  return MEMORY[0x1F40F59A8]();
}

uint64_t Scene.physicsOrigin.setter()
{
  return MEMORY[0x1F40F59B0]();
}

uint64_t dispatch thunk of Scene.__audioListener.getter()
{
  return MEMORY[0x1F40F59C0]();
}

uint64_t dispatch thunk of Scene.__audioListener.setter()
{
  return MEMORY[0x1F40F59C8]();
}

uint64_t Scene.AnchorCollection.appendNinja(_:)()
{
  return MEMORY[0x1F40F59D8]();
}

uint64_t Scene.AnchorCollection.removeNinja(_:)()
{
  return MEMORY[0x1F40F59E0]();
}

uint64_t Scene.AnchorCollection.makeIterator()()
{
  return MEMORY[0x1F40F59E8]();
}

uint64_t Scene.AnchorCollection.append(_:)()
{
  return MEMORY[0x1F40F59F0]();
}

uint64_t Scene.AnchorCollection.remove(_:)()
{
  return MEMORY[0x1F40F59F8]();
}

uint64_t type metadata accessor for Scene.AnchorCollection()
{
  return MEMORY[0x1F40F5A00]();
}

uint64_t dispatch thunk of Scene.addDefaultCamera()()
{
  return MEMORY[0x1F40F5A08]();
}

uint64_t dispatch thunk of Scene.applyReverbPreset(_:)()
{
  return MEMORY[0x1F40F5A10]();
}

uint64_t dispatch thunk of Scene.__interactionService.getter()
{
  return MEMORY[0x1F40F5A18]();
}

uint64_t dispatch thunk of Scene.internalActiveCamera.getter()
{
  return MEMORY[0x1F40F5A20]();
}

uint64_t dispatch thunk of Scene.synchronizationService.getter()
{
  return MEMORY[0x1F40F5A28]();
}

uint64_t dispatch thunk of Scene.setReverbPresetPriority(_:)()
{
  return MEMORY[0x1F40F5A30]();
}

uint64_t Scene.__allocating_init(name:)()
{
  return MEMORY[0x1F40F5A38]();
}

uint64_t dispatch thunk of Scene.anchors.getter()
{
  return MEMORY[0x1F40F5A48]();
}

uint64_t Scene.raycast(origin:direction:length:query:mask:relativeTo:)()
{
  return MEMORY[0x1F40F5A50]();
}

uint64_t dispatch thunk of Scene.session.setter()
{
  return MEMORY[0x1F40F5A58]();
}

uint64_t Scene.subscribe<A>(to:on:_:)()
{
  return MEMORY[0x1F40F5A70]();
}

uint64_t type metadata accessor for Scene()
{
  return MEMORY[0x1F40F5A78]();
}

uint64_t Entity.coreEntity.getter()
{
  return MEMORY[0x1F40F5A80]();
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  return MEMORY[0x1F40F5A88]();
}

uint64_t static Entity.ConfigurationCatalog.resolveRealityFileURL(_:)()
{
  return MEMORY[0x1F40F5AA0]();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.LoadOptions()
{
  return MEMORY[0x1F40F5AF0]();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReaderError()
{
  return MEMORY[0x1F40F5B10]();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog()
{
  return MEMORY[0x1F40F5B18]();
}

uint64_t Entity.sendEvent(_:)()
{
  return MEMORY[0x1F40F5B28]();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  return MEMORY[0x1F40F5B30]();
}

uint64_t dispatch thunk of Entity.components.getter()
{
  return MEMORY[0x1F40F5B38]();
}

uint64_t Entity.ComponentSet.set<A>(_:)()
{
  return MEMORY[0x1F40F5B40]();
}

uint64_t type metadata accessor for Entity.ComponentSet()
{
  return MEMORY[0x1F40F5B48]();
}

uint64_t Entity.ComponentSet.subscript.modify()
{
  return MEMORY[0x1F40F5B50]();
}

uint64_t Entity.ComponentSet.subscript.getter()
{
  return MEMORY[0x1F40F5B58]();
}

uint64_t Entity.ComponentSet.subscript.setter()
{
  return MEMORY[0x1F40F5B60]();
}

Swift::Void __swiftcall Entity.turnIntoNinja()()
{
}

uint64_t Entity.ChildCollection.makeIterator()()
{
  return MEMORY[0x1F40F5B98]();
}

uint64_t Entity.ChildCollection.IndexingIterator.next()()
{
  return MEMORY[0x1F40F5BA0]();
}

Swift::Void __swiftcall Entity.ChildCollection.append(contentsOf:preservingWorldTransforms:)(Swift::OpaquePointer contentsOf, Swift::Bool preservingWorldTransforms)
{
}

uint64_t type metadata accessor for Entity.ChildCollection()
{
  return MEMORY[0x1F40F5BB8]();
}

uint64_t Entity.__anchoringType.getter()
{
  return MEMORY[0x1F40F5BC8]();
}

uint64_t Entity.__accessibilityLabel.getter()
{
  return MEMORY[0x1F40F5BF0]();
}

uint64_t Entity.__isAccessibilityRoot.getter()
{
  return MEMORY[0x1F40F5BF8]();
}

uint64_t Entity.__interactionIdentifier.getter()
{
  return MEMORY[0x1F40F5C00]();
}

uint64_t Entity.__isAccessibilityEnabled.getter()
{
  return MEMORY[0x1F40F5C08]();
}

uint64_t Entity.__accessibilityDescription.getter()
{
  return MEMORY[0x1F40F5C10]();
}

uint64_t Entity.id.getter()
{
  return MEMORY[0x1F40F5C20]();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  return MEMORY[0x1F40F5C40]();
}

uint64_t dispatch thunk of Entity.scene.getter()
{
  return MEMORY[0x1F40F5C48]();
}

uint64_t Entity.anchor.getter()
{
  return MEMORY[0x1F40F5C58]();
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:)()
{
  return MEMORY[0x1F40F5C60]();
}

uint64_t dispatch thunk of Entity.isEnabled.setter()
{
  return MEMORY[0x1F40F5C68]();
}

uint64_t Entity.init()()
{
  return MEMORY[0x1F40F5C70]();
}

uint64_t type metadata accessor for Entity()
{
  return MEMORY[0x1F40F5C78]();
}

uint64_t Entity.deinit()
{
  return MEMORY[0x1F40F5C80]();
}

uint64_t HasModel.model.modify()
{
  return MEMORY[0x1F40F5C90]();
}

uint64_t HasModel.model.setter()
{
  return MEMORY[0x1F40F5C98]();
}

uint64_t __Engine.coreEngine.getter()
{
  return MEMORY[0x1F40F5CA8]();
}

uint64_t dispatch thunk of __Engine.asyncOnEngineQueue(_:)()
{
  return MEMORY[0x1F40F5CB0]();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.getter()
{
  return MEMORY[0x1F40F5CF8]();
}

uint64_t dispatch thunk of __Engine.hasRenderedThisFrame.setter()
{
  return MEMORY[0x1F40F5D00]();
}

uint64_t dispatch thunk of __Engine.__stop()()
{
  return MEMORY[0x1F40F5D30]();
}

uint64_t dispatch thunk of __Engine.__start()()
{
  return MEMORY[0x1F40F5D38]();
}

uint64_t dispatch thunk of __Engine.services.getter()
{
  return MEMORY[0x1F40F5D40]();
}

uint64_t dispatch thunk of __Engine.isRunning.getter()
{
  return MEMORY[0x1F40F5D48]();
}

uint64_t static Component.registerComponent()()
{
  return MEMORY[0x1F40F5D80]();
}

uint64_t Transform.init(matrix:)()
{
  return MEMORY[0x1F40F5DD8]();
}

uint64_t Transform.init()()
{
  return MEMORY[0x1F40F5DF0]();
}

uint64_t static __REAsset.__fromHandleTransfer(_:)()
{
  return MEMORY[0x1F40F5DF8]();
}

uint64_t type metadata accessor for __REAsset()
{
  return MEMORY[0x1F40F5E08]();
}

uint64_t static __REOSLog.UpdateLoop.getter()
{
  return MEMORY[0x1F40F5E10]();
}

uint64_t _CGColorInitTrampoline.init(_colorLiteralRed:green:blue:alpha:)()
{
  return MEMORY[0x1F40D9650]();
}

uint64_t type metadata accessor for GroupSessionMessenger.DeliveryMode()
{
  return MEMORY[0x1F40E75E8]();
}

uint64_t GroupSessionMessenger.MessageContext.source.getter()
{
  return MEMORY[0x1F40E75F0]();
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageContext()
{
  return MEMORY[0x1F40E75F8]();
}

uint64_t GroupSessionMessenger.send<A>(_:to:completion:)()
{
  return MEMORY[0x1F40E7600]();
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:deliveryMode:)()
{
  return MEMORY[0x1F40E7620]();
}

uint64_t GroupSessionMessenger.__allocating_init<A>(session:)()
{
  return MEMORY[0x1F40E7630]();
}

uint64_t GroupSessionMessenger.Messages.makeAsyncIterator()()
{
  return MEMORY[0x1F40E7640]();
}

uint64_t GroupSessionMessenger.messages<A>(of:)()
{
  return MEMORY[0x1F40E7660]();
}

uint64_t type metadata accessor for GroupSessionMessenger()
{
  return MEMORY[0x1F40E7668]();
}

uint64_t GroupSession.localParticipant.getter()
{
  return MEMORY[0x1F40E7690]();
}

uint64_t GroupSession.activeParticipants.getter()
{
  return MEMORY[0x1F40E7698]();
}

uint64_t GroupSession.$activeParticipants.getter()
{
  return MEMORY[0x1F40E76A8]();
}

uint64_t GroupSession.id.getter()
{
  return MEMORY[0x1F40E76C0]();
}

uint64_t type metadata accessor for GroupSession.State()
{
  return MEMORY[0x1F40E76E8]();
}

uint64_t GroupSession.$state.getter()
{
  return MEMORY[0x1F40E7700]();
}

uint64_t static Participant.== infix(_:_:)()
{
  return MEMORY[0x1F40E7780]();
}

uint64_t Participant.id.getter()
{
  return MEMORY[0x1F40E7788]();
}

uint64_t type metadata accessor for Participant()
{
  return MEMORY[0x1F40E7798]();
}

uint64_t static Participants.only(_:)()
{
  return MEMORY[0x1F40E77A0]();
}

uint64_t type metadata accessor for Participants()
{
  return MEMORY[0x1F40E77A8]();
}

uint64_t static RealityFusionSession.createRealityFusionSession(arSession:)()
{
  return MEMORY[0x1F40F5E18]();
}

uint64_t static RealityFusionSession.sharedSession.getter()
{
  return MEMORY[0x1F40F5E20]();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.modify()
{
  return MEMORY[0x1F40F5E28]();
}

uint64_t dispatch thunk of RealityFusionSession.sharedCount.getter()
{
  return MEMORY[0x1F40F5E30]();
}

uint64_t dispatch thunk of RealityFusionSession.serviceManager.getter()
{
  return MEMORY[0x1F40F5E38]();
}

uint64_t RealityFusionSession.configure(with:)()
{
  return MEMORY[0x1F40F5E40]();
}

uint64_t type metadata accessor for RealityFusionSession()
{
  return MEMORY[0x1F40F5E48]();
}

uint64_t PixelCastHit.init(entity:normal:position:meshPart:instance:primitive:barycentric:)()
{
  return MEMORY[0x1F40F5E50]();
}

uint64_t type metadata accessor for PixelCastHit()
{
  return MEMORY[0x1F40F5E58]();
}

uint64_t TextComponent.cornerRadius.getter()
{
  return MEMORY[0x1F40F5E60]();
}

uint64_t TextComponent.coreEdgeInsets.modify()
{
  return MEMORY[0x1F40F5E68]();
}

uint64_t TextComponent.coreEdgeInsets.getter()
{
  return MEMORY[0x1F40F5E70]();
}

uint64_t TextComponent.backgroundColor.getter()
{
  return MEMORY[0x1F40F5E78]();
}

uint64_t TextComponent.size.getter()
{
  return MEMORY[0x1F40F5E80]();
}

uint64_t TextComponent.text.getter()
{
  return MEMORY[0x1F40F5E88]();
}

uint64_t type metadata accessor for TextComponent()
{
  return MEMORY[0x1F40F5E90]();
}

uint64_t CustomMaterial.EmissiveColor.__color.getter()
{
  return MEMORY[0x1F40F5E98]();
}

uint64_t CustomMaterial.BaseColor.__tint.getter()
{
  return MEMORY[0x1F40F5EA0]();
}

uint64_t static RKARSystemCore.generateDecimatedMeshes.setter()
{
  return MEMORY[0x1F40F5EA8]();
}

uint64_t type metadata accessor for RKARSystemCore()
{
  return MEMORY[0x1F40F5EB0]();
}

uint64_t pickingEmitter.getter()
{
  return MEMORY[0x1F40F5EB8]();
}

uint64_t HasAmbientLight.light.modify()
{
  return MEMORY[0x1F40F5EC0]();
}

uint64_t type metadata accessor for AntialiasingMode()
{
  return MEMORY[0x1F40F5EC8]();
}

uint64_t __AnyARKitObject.as<A>(type:)()
{
  return MEMORY[0x1F40F5ED0]();
}

uint64_t type metadata accessor for __AnyARKitObject()
{
  return MEMORY[0x1F40F5ED8]();
}

uint64_t __AnyARKitObject.init<A>(_:)()
{
  return MEMORY[0x1F40F5EE0]();
}

uint64_t __SkyboxMaterial.__resource.getter()
{
  return MEMORY[0x1F40F5EE8]();
}

uint64_t __SkyboxMaterial.init()()
{
  return MEMORY[0x1F40F5EF0]();
}

uint64_t type metadata accessor for __SkyboxMaterial()
{
  return MEMORY[0x1F40F5EF8]();
}

uint64_t __SkyboxComponent.init(environment:)()
{
  return MEMORY[0x1F40F5F00]();
}

uint64_t type metadata accessor for __SkyboxComponent()
{
  return MEMORY[0x1F40F5F08]();
}

uint64_t MaterialParameters.Value.cgColorValue.getter()
{
  return MEMORY[0x1F40F5F10]();
}

uint64_t static MaterialParameters.Value.cgColor(_:)()
{
  return MEMORY[0x1F40F5F18]();
}

uint64_t HoverEffectComponent.hoverEffect.getter()
{
  return MEMORY[0x1F40F5F20]();
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.fadeInDuration.getter()
{
  return MEMORY[0x1F40F5F28]();
}

uint64_t HoverEffectComponent.ShaderHoverEffectInputs.fadeOutDuration.getter()
{
  return MEMORY[0x1F40F5F30]();
}

uint64_t type metadata accessor for HoverEffectComponent.ShaderHoverEffectInputs()
{
  return MEMORY[0x1F40F5F38]();
}

uint64_t HoverEffectComponent.HighlightHoverEffectStyle._color.getter()
{
  return MEMORY[0x1F40F5F40]();
}

uint64_t HoverEffectComponent.SpotlightHoverEffectStyle._color.getter()
{
  return MEMORY[0x1F40F5F48]();
}

uint64_t type metadata accessor for HoverEffectComponent.HoverEffect()
{
  return MEMORY[0x1F40F5F50]();
}

uint64_t type metadata accessor for HoverEffectComponent.OpacityFunction()
{
  return MEMORY[0x1F40F5F58]();
}

uint64_t type metadata accessor for HoverEffectComponent()
{
  return MEMORY[0x1F40F5F60]();
}

uint64_t InputTargetComponent.isEnabled.getter()
{
  return MEMORY[0x1F40F5F68]();
}

uint64_t type metadata accessor for InputTargetComponent()
{
  return MEMORY[0x1F40F5F70]();
}

uint64_t dispatch thunk of __ARReferenceProvider.supportsGroup(named:)()
{
  return MEMORY[0x1F40F5FA0]();
}

uint64_t dispatch thunk of __ARReferenceProvider.__fetchReferenceImage(group:name:physicalWidth:)()
{
  return MEMORY[0x1F40F5FA8]();
}

uint64_t dispatch thunk of __ARReferenceProvider.__fetchReferenceObject(group:name:)()
{
  return MEMORY[0x1F40F5FB0]();
}

uint64_t static __ARReferenceProvider.instance(for:)()
{
  return MEMORY[0x1F40F5FB8]();
}

uint64_t type metadata accessor for __ARReferenceProvider()
{
  return MEMORY[0x1F40F5FC0]();
}

uint64_t AccessibilityComponent.isAccessibilityElement.getter()
{
  return MEMORY[0x1F40F5FC8]();
}

uint64_t AccessibilityComponent.CustomContent.label.getter()
{
  return MEMORY[0x1F40F5FD0]();
}

uint64_t AccessibilityComponent.CustomContent.value.getter()
{
  return MEMORY[0x1F40F5FD8]();
}

uint64_t type metadata accessor for AccessibilityComponent.CustomContent()
{
  return MEMORY[0x1F40F5FE0]();
}

uint64_t AccessibilityComponent.customActions.getter()
{
  return MEMORY[0x1F40F5FE8]();
}

uint64_t AccessibilityComponent.customContent.getter()
{
  return MEMORY[0x1F40F5FF0]();
}

uint64_t AccessibilityComponent.systemActions.getter()
{
  return MEMORY[0x1F40F5FF8]();
}

uint64_t AccessibilityComponent.systemActions.setter()
{
  return MEMORY[0x1F40F6000]();
}

uint64_t AccessibilityComponent.traitsRawValue.getter()
{
  return MEMORY[0x1F40F6008]();
}

uint64_t AccessibilityComponent.traitsRawValue.setter()
{
  return MEMORY[0x1F40F6010]();
}

uint64_t static AccessibilityComponent.SupportedActions.activate.getter()
{
  return MEMORY[0x1F40F6018]();
}

uint64_t type metadata accessor for AccessibilityComponent.SupportedActions()
{
  return MEMORY[0x1F40F6020]();
}

uint64_t type metadata accessor for AccessibilityComponent.RotorTypeInternal()
{
  return MEMORY[0x1F40F6028]();
}

uint64_t AccessibilityComponent.customRotorsRawValue.getter()
{
  return MEMORY[0x1F40F6030]();
}

uint64_t AccessibilityComponent.customRotorsRawValue.setter()
{
  return MEMORY[0x1F40F6038]();
}

uint64_t AccessibilityComponent.label.getter()
{
  return MEMORY[0x1F40F6040]();
}

uint64_t AccessibilityComponent.value.getter()
{
  return MEMORY[0x1F40F6048]();
}

uint64_t AccessibilityComponent.init()()
{
  return MEMORY[0x1F40F6050]();
}

uint64_t type metadata accessor for AccessibilityComponent()
{
  return MEMORY[0x1F40F6058]();
}

uint64_t SpatialTrackingManager.arkitRunnable.getter()
{
  return MEMORY[0x1F40F6060]();
}

uint64_t dispatch thunk of SpatialTrackingManager.isRunningUserSession.setter()
{
  return MEMORY[0x1F40F6068]();
}

uint64_t static SpatialTrackingManager.shared.getter()
{
  return MEMORY[0x1F40F6070]();
}

uint64_t type metadata accessor for SpatialTrackingManager()
{
  return MEMORY[0x1F40F6078]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.body.getter()
{
  return MEMORY[0x1F40F6080]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.face.getter()
{
  return MEMORY[0x1F40F6088]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.image.getter()
{
  return MEMORY[0x1F40F6090]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.plane.getter()
{
  return MEMORY[0x1F40F6098]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.world.getter()
{
  return MEMORY[0x1F40F60A0]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.camera.getter()
{
  return MEMORY[0x1F40F60A8]();
}

uint64_t static SpatialTrackingSession.Configuration.AnchorCapability.object.getter()
{
  return MEMORY[0x1F40F60B0]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.AnchorCapability()
{
  return MEMORY[0x1F40F60B8]();
}

uint64_t SpatialTrackingSession.Configuration.anchorCapabilitySet.modify()
{
  return MEMORY[0x1F40F60C0]();
}

uint64_t SpatialTrackingSession.Configuration.anchorCapabilitySet.getter()
{
  return MEMORY[0x1F40F60C8]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.shadow.getter()
{
  return MEMORY[0x1F40F60D0]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.physics.getter()
{
  return MEMORY[0x1F40F60D8]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.collision.getter()
{
  return MEMORY[0x1F40F60E0]();
}

uint64_t static SpatialTrackingSession.Configuration.SceneUnderstandingCapability.occlusion.getter()
{
  return MEMORY[0x1F40F60E8]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.SceneUnderstandingCapability()
{
  return MEMORY[0x1F40F60F0]();
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.modify()
{
  return MEMORY[0x1F40F60F8]();
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.getter()
{
  return MEMORY[0x1F40F6100]();
}

uint64_t SpatialTrackingSession.Configuration.sceneUnderstandingCapabilities.setter()
{
  return MEMORY[0x1F40F6108]();
}

uint64_t static SpatialTrackingSession.Configuration.Camera.== infix(_:_:)()
{
  return MEMORY[0x1F40F6110]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration.Camera()
{
  return MEMORY[0x1F40F6118]();
}

uint64_t SpatialTrackingSession.Configuration.camera.getter()
{
  return MEMORY[0x1F40F6120]();
}

uint64_t SpatialTrackingSession.Configuration.init(tracking:sceneUnderstanding:camera:)()
{
  return MEMORY[0x1F40F6128]();
}

uint64_t type metadata accessor for SpatialTrackingSession.Configuration()
{
  return MEMORY[0x1F40F6130]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedAnchorCapabilities.setter()
{
  return MEMORY[0x1F40F6138]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedAnchorCapabilities.setter()
{
  return MEMORY[0x1F40F6140]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnsupportedSceneUnderstandingCapabilities.setter()
{
  return MEMORY[0x1F40F6148]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalUnauthorizedSceneUnderstandingCapabilities.setter()
{
  return MEMORY[0x1F40F6150]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.anyUnavailableCapabilities.getter()
{
  return MEMORY[0x1F40F6158]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.sceneUnderstanding.getter()
{
  return MEMORY[0x1F40F6160]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.init(unsupportedConfiguration:)()
{
  return MEMORY[0x1F40F6168]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.internalCameraUnauthorized.setter()
{
  return MEMORY[0x1F40F6170]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.missingCameraAuthorization.getter()
{
  return MEMORY[0x1F40F6178]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.anchor.getter()
{
  return MEMORY[0x1F40F6180]();
}

uint64_t SpatialTrackingSession.UnavailableCapabilities.init()()
{
  return MEMORY[0x1F40F6188]();
}

uint64_t type metadata accessor for SpatialTrackingSession.UnavailableCapabilities()
{
  return MEMORY[0x1F40F6190]();
}

uint64_t dispatch thunk of __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:)()
{
  return MEMORY[0x1F40F6198]();
}

uint64_t dispatch thunk of __ARReferenceProviding.__fetchReferenceObject(group:name:)()
{
  return MEMORY[0x1F40F61A0]();
}

uint64_t PhysicallyBasedMaterial.SheenColor.__tint.getter()
{
  return MEMORY[0x1F40F61A8]();
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.__color.getter()
{
  return MEMORY[0x1F40F61B0]();
}

uint64_t PhysicallyBasedMaterial.EmissiveColor.texture.getter()
{
  return MEMORY[0x1F40F61B8]();
}

uint64_t type metadata accessor for PhysicallyBasedMaterial.EmissiveColor()
{
  return MEMORY[0x1F40F61C0]();
}

uint64_t PhysicallyBasedMaterial.BaseColor.__tint.getter()
{
  return MEMORY[0x1F40F61C8]();
}

uint64_t ImageBasedLightComponent.inheritsRotation.setter()
{
  return MEMORY[0x1F40F61D0]();
}

uint64_t ImageBasedLightComponent.intensityExponent.setter()
{
  return MEMORY[0x1F40F61D8]();
}

uint64_t type metadata accessor for ImageBasedLightComponent.Source()
{
  return MEMORY[0x1F40F61E0]();
}

uint64_t ImageBasedLightComponent.init(source:intensityExponent:global:)()
{
  return MEMORY[0x1F40F61E8]();
}

uint64_t type metadata accessor for ImageBasedLightComponent()
{
  return MEMORY[0x1F40F61F0]();
}

uint64_t ParticleEmitterComponent.mainEmitter.modify()
{
  return MEMORY[0x1F40F61F8]();
}

uint64_t ParticleEmitterComponent.mainEmitter.getter()
{
  return MEMORY[0x1F40F6200]();
}

uint64_t ParticleEmitterComponent.spawnedEmitter.setter()
{
  return MEMORY[0x1F40F6208]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.EmitterShape()
{
  return MEMORY[0x1F40F6210]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.noiseScale.setter()
{
  return MEMORY[0x1F40F6218]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.startColorA.getter()
{
  return MEMORY[0x1F40F6220]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.startColorA.setter()
{
  return MEMORY[0x1F40F6228]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.startColorB.getter()
{
  return MEMORY[0x1F40F6230]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.startColorB.setter()
{
  return MEMORY[0x1F40F6238]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColor.getter()
{
  return MEMORY[0x1F40F6240]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColor.setter()
{
  return MEMORY[0x1F40F6248]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.OpacityCurve()
{
  return MEMORY[0x1F40F6250]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.acceleration.setter()
{
  return MEMORY[0x1F40F6258]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.angularSpeed.setter()
{
  return MEMORY[0x1F40F6260]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.opacityCurve.setter()
{
  return MEMORY[0x1F40F6268]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BillboardMode()
{
  return MEMORY[0x1F40F6270]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.columnCount.setter()
{
  return MEMORY[0x1F40F6278]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrame.setter()
{
  return MEMORY[0x1F40F6280]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.animationMode.setter()
{
  return MEMORY[0x1F40F6288]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRateVariation.setter()
{
  return MEMORY[0x1F40F6290]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence.AnimationRepeatMode()
{
  return MEMORY[0x1F40F6298]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.initialFrameVariation.setter()
{
  return MEMORY[0x1F40F62A0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.rowCount.setter()
{
  return MEMORY[0x1F40F62A8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.frameRate.setter()
{
  return MEMORY[0x1F40F62B0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.ImageSequence.init()()
{
  return MEMORY[0x1F40F62B8]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.ImageSequence()
{
  return MEMORY[0x1F40F62C0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.billboardMode.setter()
{
  return MEMORY[0x1F40F62C8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.dampingFactor.setter()
{
  return MEMORY[0x1F40F62D0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.imageSequence.setter()
{
  return MEMORY[0x1F40F62D8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.massVariation.setter()
{
  return MEMORY[0x1F40F62E0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.noiseStrength.setter()
{
  return MEMORY[0x1F40F62E8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.sizeVariation.setter()
{
  return MEMORY[0x1F40F62F0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.stretchFactor.setter()
{
  return MEMORY[0x1F40F62F8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.angleVariation.setter()
{
  return MEMORY[0x1F40F6300]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.spreadingAngle.setter()
{
  return MEMORY[0x1F40F6308]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.vortexStrength.setter()
{
  return MEMORY[0x1F40F6310]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.vortexDirection.setter()
{
  return MEMORY[0x1F40F6318]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.attractionCenter.setter()
{
  return MEMORY[0x1F40F6320]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColorRange.getter()
{
  return MEMORY[0x1F40F6328]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useEndColorRange.setter()
{
  return MEMORY[0x1F40F6330]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.isLightingEnabled.setter()
{
  return MEMORY[0x1F40F6338]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.lifeSpanVariation.setter()
{
  return MEMORY[0x1F40F6340]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.attractionStrength.setter()
{
  return MEMORY[0x1F40F6348]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.birthRateVariation.setter()
{
  return MEMORY[0x1F40F6350]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useStartColorRange.getter()
{
  return MEMORY[0x1F40F6358]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.useStartColorRange.setter()
{
  return MEMORY[0x1F40F6360]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.colorEvolutionPower.setter()
{
  return MEMORY[0x1F40F6368]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.noiseAnimationSpeed.setter()
{
  return MEMORY[0x1F40F6370]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.areCollisionsEnabled.setter()
{
  return MEMORY[0x1F40F6378]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.angularSpeedVariation.setter()
{
  return MEMORY[0x1F40F6380]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespan.setter()
{
  return MEMORY[0x1F40F6388]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.sizeMultiplierAtEndOfLifespanPower.setter()
{
  return MEMORY[0x1F40F6390]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.mass.setter()
{
  return MEMORY[0x1F40F6398]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.size.setter()
{
  return MEMORY[0x1F40F63A0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.angle.setter()
{
  return MEMORY[0x1F40F63A8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.image.getter()
{
  return MEMORY[0x1F40F63B0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.image.setter()
{
  return MEMORY[0x1F40F63B8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.bounce.setter()
{
  return MEMORY[0x1F40F63C0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.friction.setter()
{
  return MEMORY[0x1F40F63C8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.lifeSpan.setter()
{
  return MEMORY[0x1F40F63D0]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.BlendMode()
{
  return MEMORY[0x1F40F63D8]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter.SortOrder()
{
  return MEMORY[0x1F40F63E0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.birthRate.setter()
{
  return MEMORY[0x1F40F63E8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.blendMode.setter()
{
  return MEMORY[0x1F40F63F0]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.endColorA.getter()
{
  return MEMORY[0x1F40F63F8]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.endColorA.setter()
{
  return MEMORY[0x1F40F6400]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.endColorB.getter()
{
  return MEMORY[0x1F40F6408]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.endColorB.setter()
{
  return MEMORY[0x1F40F6410]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.sortOrder.setter()
{
  return MEMORY[0x1F40F6418]();
}

uint64_t ParticleEmitterComponent.ParticleEmitter.init()()
{
  return MEMORY[0x1F40F6420]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.ParticleEmitter()
{
  return MEMORY[0x1F40F6428]();
}

uint64_t ParticleEmitterComponent.shouldLoop.getter()
{
  return MEMORY[0x1F40F6430]();
}

uint64_t ParticleEmitterComponent.shouldLoop.setter()
{
  return MEMORY[0x1F40F6438]();
}

uint64_t ParticleEmitterComponent.emitterShape.setter()
{
  return MEMORY[0x1F40F6440]();
}

uint64_t ParticleEmitterComponent.idleDuration.getter()
{
  return MEMORY[0x1F40F6448]();
}

uint64_t ParticleEmitterComponent.idleDuration.setter()
{
  return MEMORY[0x1F40F6450]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.BirthLocation()
{
  return MEMORY[0x1F40F6458]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.SpawnOccasion()
{
  return MEMORY[0x1F40F6460]();
}

uint64_t ParticleEmitterComponent.birthLocation.setter()
{
  return MEMORY[0x1F40F6468]();
}

uint64_t ParticleEmitterComponent.spawnOccasion.setter()
{
  return MEMORY[0x1F40F6470]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.BirthDirection()
{
  return MEMORY[0x1F40F6478]();
}

uint64_t ParticleEmitterComponent.birthDirection.setter()
{
  return MEMORY[0x1F40F6480]();
}

uint64_t ParticleEmitterComponent.speedVariation.setter()
{
  return MEMORY[0x1F40F6488]();
}

uint64_t ParticleEmitterComponent.warmupDuration.getter()
{
  return MEMORY[0x1F40F6490]();
}

uint64_t ParticleEmitterComponent.warmupDuration.setter()
{
  return MEMORY[0x1F40F6498]();
}

uint64_t type metadata accessor for ParticleEmitterComponent.SimulationSpace()
{
  return MEMORY[0x1F40F64A0]();
}

Swift::Void __swiftcall ParticleEmitterComponent.resetSimulation()()
{
}

uint64_t ParticleEmitterComponent.emissionDuration.getter()
{
  return MEMORY[0x1F40F64B0]();
}

uint64_t ParticleEmitterComponent.emissionDuration.setter()
{
  return MEMORY[0x1F40F64B8]();
}

uint64_t ParticleEmitterComponent.emitterShapeSize.setter()
{
  return MEMORY[0x1F40F64C0]();
}

uint64_t ParticleEmitterComponent.emissionDirection.setter()
{
  return MEMORY[0x1F40F64C8]();
}

uint64_t ParticleEmitterComponent.spawnSpreadFactor.setter()
{
  return MEMORY[0x1F40F64D0]();
}

uint64_t ParticleEmitterComponent.spawnVelocityFactor.setter()
{
  return MEMORY[0x1F40F64D8]();
}

uint64_t ParticleEmitterComponent.fieldSimulationSpace.setter()
{
  return MEMORY[0x1F40F64E0]();
}

uint64_t ParticleEmitterComponent.idleDurationVariation.getter()
{
  return MEMORY[0x1F40F64E8]();
}

uint64_t ParticleEmitterComponent.idleDurationVariation.setter()
{
  return MEMORY[0x1F40F64F0]();
}

uint64_t ParticleEmitterComponent.spawnInheritsParentColor.setter()
{
  return MEMORY[0x1F40F64F8]();
}

uint64_t ParticleEmitterComponent.emissionDurationVariation.getter()
{
  return MEMORY[0x1F40F6500]();
}

uint64_t ParticleEmitterComponent.emissionDurationVariation.setter()
{
  return MEMORY[0x1F40F6508]();
}

uint64_t ParticleEmitterComponent.particlesInheritTransform.setter()
{
  return MEMORY[0x1F40F6510]();
}

uint64_t ParticleEmitterComponent.spawnSpreadFactorVariation.setter()
{
  return MEMORY[0x1F40F6518]();
}

uint64_t ParticleEmitterComponent.speed.setter()
{
  return MEMORY[0x1F40F6520]();
}

uint64_t ParticleEmitterComponent.init()()
{
  return MEMORY[0x1F40F6528]();
}

uint64_t static _Proto_AntialiasingMode_v1.== infix(_:_:)()
{
  return MEMORY[0x1F40F6530]();
}

uint64_t type metadata accessor for _Proto_AntialiasingMode_v1()
{
  return MEMORY[0x1F40F6538]();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return MEMORY[0x1F41884F0]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1F4188580]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1F4188670]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x1F4188680]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t dispatch thunk of Cancellable.cancel()()
{
  return MEMORY[0x1F40D68C8]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x1F40D6B80]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x1F40D6B88]();
}

uint64_t Published.projectedValue.setter()
{
  return MEMORY[0x1F40D6B90]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x1F40D6B98]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x1F40D6BA0]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x1F40D6BA8]();
}

uint64_t type metadata accessor for Published.Publisher()
{
  return MEMORY[0x1F40D6BB0]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x1F40D6BB8]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x1F40D6E18]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t ImportSession.core.getter()
{
  return MEMORY[0x1F4147A30]();
}

uint64_t ImportSession.__allocating_init<A>(from:serviceLocator:pipelineVersion:threading:entityType:)()
{
  return MEMORY[0x1F4147A38]();
}

uint64_t type metadata accessor for ImportSession()
{
  return MEMORY[0x1F4147A50]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1F40E6000]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1F4183730]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1F40E6190]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t String.init(localized:)()
{
  return MEMORY[0x1F40E62E0]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return MEMORY[0x1F4183958]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return MEMORY[0x1F4183A60]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1F4183A80]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1F4183B30](a1._countAndFlagsBits, a1._object);
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4183E80]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1F40E6338]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x1F4187C98]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x1F4187CA0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1F4187D00]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1F40E6430]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1F41841D0]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return MEMORY[0x1F4184328]();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return MEMORY[0x1F4184330]();
}

uint64_t ARPointCloud.points.getter()
{
  return MEMORY[0x1F4182D08]();
}

Swift::Void __swiftcall CGContextRef.draw(_:in:byTiling:)(CGImageRef _, CGRect in, Swift::Bool byTiling)
{
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1F4188700]();
}

uint64_t simd_float4x4.scale(_:)()
{
  return MEMORY[0x1F40F6540]();
}

uint64_t simd_float4x4.transform(position:)()
{
  return MEMORY[0x1F40F6548]();
}

uint64_t ARPlaneGeometry.vertices.getter()
{
  return MEMORY[0x1F4182D10]();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return MEMORY[0x1F40E66C8]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x1F41870E0]();
}

uint64_t vImage_CGImageFormat.init(bitsPerComponent:bitsPerPixel:colorSpace:bitmapInfo:renderingIntent:)()
{
  return MEMORY[0x1F4183158]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x1F4187288]();
}

UIColor __swiftcall UIColor.init(_colorLiteralRed:green:blue:alpha:)(Swift::Float _colorLiteralRed, Swift::Float green, Swift::Float blue, Swift::Float alpha)
{
  return (UIColor)MEMORY[0x1F4166800](_colorLiteralRed, green, blue, alpha);
}

uint64_t ARCamera.unprojectPoint(_:ontoPlane:orientation:viewportSize:)()
{
  return MEMORY[0x1F4182D30]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F41874A8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t NSObject.hashValue.getter()
{
  return MEMORY[0x1F41874E0]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x1F4188728]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x1F4184628]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1F4184820]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x1F4184A78]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1F4184B30]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x1F4184B58]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x1F4184B78]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x1F4184B80]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x1F4184B88]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x1F4184BB0]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x1F4184BC8]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x1F4184BD0]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F4184C18](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4184CA8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x1F4184DD0]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x1F4184DF0]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1F4184ED8]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x1F4184FF8]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4185380]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x1F41853A8]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x1F4185450]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F41854D8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x1F41854E0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185508]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185528]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F4185578]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x1F41855E0]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F4185608]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x1F4185638]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1F4185658]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F41856A0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x1F4185A38]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t SIMD3<>.cgColor.getter()
{
  return MEMORY[0x1F40F6550]();
}

uint64_t SIMD4<>._xyz.getter()
{
  return MEMORY[0x1F40F6558]();
}

uint64_t SIMD4<>._xyz.setter()
{
  return MEMORY[0x1F40F6560]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t Mirror.init(reflecting:)()
{
  return MEMORY[0x1F4185F10]();
}

uint64_t type metadata accessor for Mirror.DisplayStyle()
{
  return MEMORY[0x1F4185F28]();
}

uint64_t type metadata accessor for Mirror.AncestorRepresentation()
{
  return MEMORY[0x1F4185F38]();
}

uint64_t Mirror.children.getter()
{
  return MEMORY[0x1F4185F40]();
}

uint64_t type metadata accessor for Mirror()
{
  return MEMORY[0x1F4185F48]();
}

uint64_t Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)()
{
  return MEMORY[0x1F4185F60]();
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6EA8]();
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6ED8]();
}

uint64_t static UInt64._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6EE0]();
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6EE8]();
}

uint64_t static UInt64._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6EF0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t ARCameraToDisplayRotation()
{
  return MEMORY[0x1F40D0E20]();
}

uint64_t ARViewToCameraImageTransform()
{
  return MEMORY[0x1F40D0E28]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x1F40F4A98]();
  return result;
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97C8](retstr, angle);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1F40D99A8](red, green, blue, alpha);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x1F40D99F0](color);
  return result;
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  MEMORY[0x1F40DB1F8](t, (__n128)point, *(__n128 *)&point.y);
  result.double y = v3;
  result.double x = v2;
  return result;
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x1F40DFC78](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x1F40DFC80](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1F40DFC98](image);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD70](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD88](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFDA0](pixelBuffer, planeIndex);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1F40EDE00]();
}

uint64_t REAnchorComponentGetComponentType()
{
  return MEMORY[0x1F41142D8]();
}

uint64_t REAssetManagerCreateAssetHandle()
{
  return MEMORY[0x1F4114330]();
}

uint64_t REAssetManagerMeshMemoryAssetCreate()
{
  return MEMORY[0x1F4114340]();
}

uint64_t REAssetManagerMeshMemoryAssetCreateBox()
{
  return MEMORY[0x1F4114348]();
}

uint64_t REAssetRegisterAssetSyncNetworkSession()
{
  return MEMORY[0x1F4114350]();
}

uint64_t REAssetUnregisterAssetSyncNetworkSession()
{
  return MEMORY[0x1F4114358]();
}

uint64_t RECameraStreamManagerSetARKitPassthrough()
{
  return MEMORY[0x1F41143A8]();
}

uint64_t RECameraViewDescriptorsComponentAddSpecifyCommandFromLayer()
{
  return MEMORY[0x1F41143B0]();
}

uint64_t RECameraViewDescriptorsComponentAddViewDescriptor()
{
  return MEMORY[0x1F41143B8]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct()
{
  return MEMORY[0x1F41143C0]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorCount()
{
  return MEMORY[0x1F41143C8]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorHandleByIndex()
{
  return MEMORY[0x1F41143D0]();
}

uint64_t RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct()
{
  return MEMORY[0x1F41143D8]();
}

uint64_t RECameraViewDescriptorsComponentClearCameraViewDescriptors()
{
  return MEMORY[0x1F41143E0]();
}

uint64_t RECameraViewDescriptorsComponentGetComponentType()
{
  return MEMORY[0x1F41143E8]();
}

uint64_t RECameraViewDescriptorsComponentSnapshotNextFrameWithSettingsAndReturnHandle()
{
  return MEMORY[0x1F41143F8]();
}

uint64_t REColorManagerGetLDRColorSpaceForColorGamut()
{
  return MEMORY[0x1F4114410]();
}

uint64_t REColorManagerGetSRGBLDRColorSpaceForColorGamut()
{
  return MEMORY[0x1F4114418]();
}

uint64_t REColorManagerGetTargetDisplayColorGamut()
{
  return MEMORY[0x1F4114420]();
}

uint64_t REColorManagerGetWorkingColorGamut()
{
  return MEMORY[0x1F4114428]();
}

uint64_t REColorManagerGetWorkingColorSpace()
{
  return MEMORY[0x1F4114430]();
}

uint64_t REColorManagerSetTargetDisplayColorGamut()
{
  return MEMORY[0x1F4114438]();
}

uint64_t REComponentGetEntity()
{
  return MEMORY[0x1F4114458]();
}

uint64_t REConvertProjectionToMatrix4x4()
{
  return MEMORY[0x1F4114470]();
}

uint64_t RECustomMatrixCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x1F4114488]();
}

uint64_t RECustomMatrixCameraComponentCalculateProjection()
{
  return MEMORY[0x1F4114490]();
}

uint64_t RECustomMatrixCameraComponentGetComponentType()
{
  return MEMORY[0x1F4114498]();
}

uint64_t RECustomMatrixCameraComponentSetProjectionFromMatrix()
{
  return MEMORY[0x1F41144A8]();
}

uint64_t REDebugRendererDrawAxisWithWorldTransform()
{
  return MEMORY[0x1F41144B0]();
}

uint64_t REDebugRendererDrawCollisionWorld()
{
  return MEMORY[0x1F41144B8]();
}

uint64_t REECSManagerGetScene()
{
  return MEMORY[0x1F41144D0]();
}

uint64_t REEDRColorManagementComponentSetHeadroomCallback()
{
  return MEMORY[0x1F41144E8]();
}

uint64_t REEngineGetCurrentTime()
{
  return MEMORY[0x1F4114508]();
}

uint64_t REEngineGetServiceLocator()
{
  return MEMORY[0x1F4114510]();
}

uint64_t REEngineSetPreferredFramesPerSecond()
{
  return MEMORY[0x1F4114520]();
}

uint64_t REEntityCharacterSetSkeletalPoseJointLocalSpace()
{
  return MEMORY[0x1F4114548]();
}

uint64_t REEntityCharacterSetSkeletalPoseLocalRotations()
{
  return MEMORY[0x1F4114550]();
}

uint64_t REEntityCreate()
{
  return MEMORY[0x1F4114560]();
}

uint64_t REEntityGetComponentByClass()
{
  return MEMORY[0x1F4114570]();
}

uint64_t REEntityGetOrAddComponentByClass()
{
  return MEMORY[0x1F4114588]();
}

uint64_t REEntityIsNonHiddenAndInHierarchy()
{
  return MEMORY[0x1F4114590]();
}

uint64_t REEntityRemoveComponentByClass()
{
  return MEMORY[0x1F41145A0]();
}

uint64_t REEntityRemoveFromSceneOrParent()
{
  return MEMORY[0x1F41145A8]();
}

uint64_t REEntitySetName()
{
  return MEMORY[0x1F41145B0]();
}

uint64_t REEntitySetParent()
{
  return MEMORY[0x1F41145B8]();
}

uint64_t REFrameStatisticsHUDAddCustomStat()
{
  return MEMORY[0x1F41145D0]();
}

uint64_t REFrameStatisticsHUDGetStatisticsForOption()
{
  return MEMORY[0x1F41145D8]();
}

uint64_t REFrameStatisticsHUDSetDisableRendering()
{
  return MEMORY[0x1F41145E0]();
}

uint64_t REFrameStatisticsHUDSetOverlayEnabled()
{
  return MEMORY[0x1F41145E8]();
}

uint64_t REFrameStatisticsHUDSetRenderLayer()
{
  return MEMORY[0x1F41145F0]();
}

uint64_t REFrameStatisticsHUDSetStatisticsOptions()
{
  return MEMORY[0x1F41145F8]();
}

uint64_t REFrameStatisticsHUDSetUpdateInterval()
{
  return MEMORY[0x1F4114600]();
}

uint64_t REFrameStatisticsHUDTotalFrameTime()
{
  return MEMORY[0x1F4114608]();
}

uint64_t REGeomMeshCreateFromPolygon()
{
  return MEMORY[0x1F4114610]();
}

uint64_t REMaterialAssetClearParameter()
{
  return MEMORY[0x1F4114680]();
}

uint64_t REMaterialAssetSetFloat()
{
  return MEMORY[0x1F4114688]();
}

uint64_t REMaterialAssetSetFloat2F()
{
  return MEMORY[0x1F4114690]();
}

uint64_t REMaterialAssetSetFloat4x4F()
{
  return MEMORY[0x1F41146A0]();
}

uint64_t REMaterialAssetSetTexture()
{
  return MEMORY[0x1F41146A8]();
}

uint64_t REMaterialAssetSetTextureFromAsset()
{
  return MEMORY[0x1F41146B0]();
}

uint64_t REMultipeerConnectivityGetInternalSession()
{
  return MEMORY[0x1F41146C8]();
}

uint64_t REMultipeerConnectivityManagerGetInternalPeerID()
{
  return MEMORY[0x1F41146D0]();
}

uint64_t REMultipeerConnectivityManagerGetMCPeerID()
{
  return MEMORY[0x1F41146D8]();
}

uint64_t REMultipeerConnectivityManagerSetHandshakeCountAndTimeoutMs()
{
  return MEMORY[0x1F41146E0]();
}

uint64_t REMultipeerConnectivityManagerStartSyncWithMCSession()
{
  return MEMORY[0x1F41146E8]();
}

uint64_t REMultipeerConnectivityManagerStopSync()
{
  return MEMORY[0x1F41146F0]();
}

uint64_t RENetGetEntityFromSyncObject()
{
  return MEMORY[0x1F41146F8]();
}

uint64_t RENetParticipantGetPeerID()
{
  return MEMORY[0x1F4114700]();
}

uint64_t RENetSessionAddObserver()
{
  return MEMORY[0x1F4114708]();
}

uint64_t RENetSessionObserverCreateEx()
{
  return MEMORY[0x1F4114710]();
}

uint64_t RENetSessionObserverOnParticipantJoin()
{
  return MEMORY[0x1F4114718]();
}

uint64_t RENetSessionObserverOnParticipantLeave()
{
  return MEMORY[0x1F4114720]();
}

uint64_t RENetSessionObserverOnReceiveUserData()
{
  return MEMORY[0x1F4114728]();
}

uint64_t RENetSessionObserverOnStart()
{
  return MEMORY[0x1F4114730]();
}

uint64_t RENetSessionObserverOnStop()
{
  return MEMORY[0x1F4114738]();
}

uint64_t RENetSessionRemoveObserver()
{
  return MEMORY[0x1F4114740]();
}

uint64_t RENetSessionSendData()
{
  return MEMORY[0x1F4114748]();
}

uint64_t RENetSessionSendDataUnreliableUnordered()
{
  return MEMORY[0x1F4114750]();
}

uint64_t RENetworkComponentGetComponentType()
{
  return MEMORY[0x1F4114758]();
}

uint64_t RENetworkComponentHandOff()
{
  return MEMORY[0x1F4114760]();
}

uint64_t RENetworkComponentIsAuthoritative()
{
  return MEMORY[0x1F4114768]();
}

uint64_t RENetworkComponentOwnerPeerID()
{
  return MEMORY[0x1F4114770]();
}

uint64_t RENetworkComponentSetNetworkShareMode()
{
  return MEMORY[0x1F4114778]();
}

uint64_t RENetworkSystemAddObserver()
{
  return MEMORY[0x1F4114780]();
}

uint64_t RENetworkSystemEnableMultipeerConnectivity()
{
  return MEMORY[0x1F4114788]();
}

uint64_t RENetworkSystemFindEntityWithGuid()
{
  return MEMORY[0x1F4114790]();
}

uint64_t RENetworkSystemObserverCreateEx()
{
  return MEMORY[0x1F4114798]();
}

uint64_t RENetworkSystemObserverOnEntityWillDestroy()
{
  return MEMORY[0x1F41147A0]();
}

uint64_t RENetworkSystemObserverOnTopLevelEntityDidCreate()
{
  return MEMORY[0x1F41147A8]();
}

uint64_t RENetworkSystemRemoveObserver()
{
  return MEMORY[0x1F41147B0]();
}

uint64_t REOrthographicCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x1F41147B8]();
}

uint64_t REOrthographicCameraComponentCalculateProjectionWithAspectRatio()
{
  return MEMORY[0x1F41147C0]();
}

uint64_t REOrthographicCameraComponentGetComponentType()
{
  return MEMORY[0x1F41147C8]();
}

uint64_t REPerspectiveCameraComponentAdjustProjectionAspect()
{
  return MEMORY[0x1F41147D0]();
}

uint64_t REPerspectiveCameraComponentCalculateProjectionWithAspectRatio()
{
  return MEMORY[0x1F41147D8]();
}

uint64_t REPerspectiveCameraComponentGetComponentType()
{
  return MEMORY[0x1F41147E0]();
}

uint64_t REPhysicsDebugRendererIsEnabled()
{
  return MEMORY[0x1F4114800]();
}

uint64_t REPhysicsSimulationServiceSetAnchorShouldHaveSharedSimulationByDefault()
{
  return MEMORY[0x1F4114820]();
}

uint64_t REProjectionClipSpaceNearZ()
{
  return MEMORY[0x1F4114828]();
}

uint64_t REProjectionProjectPoint()
{
  return MEMORY[0x1F4114830]();
}

uint64_t REProjectionUnprojectPoint()
{
  return MEMORY[0x1F4114838]();
}

uint64_t RERayTracedShadowReceiverSetVisibleForScene()
{
  return MEMORY[0x1F4114880]();
}

uint64_t RERelease()
{
  return MEMORY[0x1F4114888]();
}

uint64_t RERenderCallbacksPostProcessGetCommandBuffer()
{
  return MEMORY[0x1F4114890]();
}

uint64_t RERenderCallbacksPostProcessGetDevice()
{
  return MEMORY[0x1F4114898]();
}

uint64_t RERenderCallbacksPostProcessGetProjection()
{
  return MEMORY[0x1F41148A0]();
}

uint64_t RERenderCallbacksPostProcessGetSimulationTime()
{
  return MEMORY[0x1F41148A8]();
}

uint64_t RERenderCallbacksPostProcessGetSourceColorTexture()
{
  return MEMORY[0x1F41148B0]();
}

uint64_t RERenderCallbacksPostProcessGetSourceDepthTexture()
{
  return MEMORY[0x1F41148B8]();
}

uint64_t RERenderCallbacksPostProcessGetTargetColorTexture()
{
  return MEMORY[0x1F41148C0]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSetting()
{
  return MEMORY[0x1F41148D8]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingBool()
{
  return MEMORY[0x1F41148E0]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingFloat()
{
  return MEMORY[0x1F41148E8]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeSettingUInt32()
{
  return MEMORY[0x1F41148F0]();
}

uint64_t RERenderGraphAssetSetRuntimeNodeStringSetting()
{
  return MEMORY[0x1F41148F8]();
}

uint64_t RERenderGraphCreateRenderGraphDataStruct()
{
  return MEMORY[0x1F4114900]();
}

uint64_t RERenderGraphDataStructAddBool()
{
  return MEMORY[0x1F4114908]();
}

uint64_t RERenderGraphDataStructAddFloat4()
{
  return MEMORY[0x1F4114910]();
}

uint64_t RERenderGraphDataStructGetBool()
{
  return MEMORY[0x1F4114918]();
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingBool()
{
  return MEMORY[0x1F4114938]();
}

uint64_t RERenderGraphEmitterAssetSetRuntimeSettingUInt32()
{
  return MEMORY[0x1F4114940]();
}

uint64_t RERenderGraphSelectionEmitterAddConcludeCallback()
{
  return MEMORY[0x1F4114948]();
}

uint64_t RERenderGraphSelectionEmitterSetConcludeParams()
{
  return MEMORY[0x1F4114950]();
}

uint64_t RERenderGraphSelectionEmitterSetScene()
{
  return MEMORY[0x1F4114958]();
}

uint64_t RERenderManagerGetCameraStreamManager()
{
  return MEMORY[0x1F4114970]();
}

uint64_t RERenderManagerSetEnableProbeLighting()
{
  return MEMORY[0x1F4114988]();
}

uint64_t RERetain()
{
  return MEMORY[0x1F4114998]();
}

uint64_t RESceneAddEDRColorManagementComponent()
{
  return MEMORY[0x1F41149A8]();
}

uint64_t RESceneAddEntity()
{
  return MEMORY[0x1F41149B0]();
}

uint64_t RESceneFindEntity()
{
  return MEMORY[0x1F41149C0]();
}

uint64_t RESceneFindFirstCameraComponent()
{
  return MEMORY[0x1F41149C8]();
}

uint64_t RESceneGetAllEntitiesArray()
{
  return MEMORY[0x1F41149D0]();
}

uint64_t RESceneGetComponentsOfType()
{
  return MEMORY[0x1F41149D8]();
}

uint64_t RESceneGetPostProcessRenderCallback()
{
  return MEMORY[0x1F41149E8]();
}

uint64_t RESceneGetPrepareWithDeviceRenderCallback()
{
  return MEMORY[0x1F41149F0]();
}

uint64_t REScenePostProcessRenderCallbackAddCameraViewHandle()
{
  return MEMORY[0x1F4114A38]();
}

uint64_t REScenePostProcessRenderCallbackAddOneOffCameraViewHandle()
{
  return MEMORY[0x1F4114A40]();
}

uint64_t REScenePostProcessRenderCallbackClearCameraViewHandles()
{
  return MEMORY[0x1F4114A48]();
}

uint64_t RESceneRemoveEDRColorManagementComponent()
{
  return MEMORY[0x1F4114A50]();
}

uint64_t RESceneRemovePhysicsDebugComponent()
{
  return MEMORY[0x1F4114A60]();
}

uint64_t RESceneSetPhysicsDebugDrawLevel()
{
  return MEMORY[0x1F4114A68]();
}

uint64_t RESceneSetPostProcessRenderCallback()
{
  return MEMORY[0x1F4114A70]();
}

uint64_t RESceneSetPrepareWithDeviceRenderCallback()
{
  return MEMORY[0x1F4114A78]();
}

uint64_t RESceneUnderstandingComponentGetComponentType()
{
  return MEMORY[0x1F4114A88]();
}

uint64_t RESceneUnderstandingComponentGetSourceType()
{
  return MEMORY[0x1F4114A90]();
}

uint64_t RESceneUnderstandingServiceIsGuidedFilterOcclusionEnabled()
{
  return MEMORY[0x1F4114A98]();
}

uint64_t RESceneUnderstandingServiceSetDepthFeatheringEnabled()
{
  return MEMORY[0x1F4114AA0]();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionCameraFeed()
{
  return MEMORY[0x1F4114AA8]();
}

uint64_t RESceneUnderstandingServiceSetGuidedFilterOcclusionSupportEnabled()
{
  return MEMORY[0x1F4114AB8]();
}

uint64_t REServiceLocatorGetAudioService()
{
  return MEMORY[0x1F4114AD0]();
}

uint64_t REServiceLocatorGetCollisionWorld()
{
  return MEMORY[0x1F4114AD8]();
}

uint64_t REServiceLocatorGetColorManager()
{
  return MEMORY[0x1F4114AE0]();
}

uint64_t REServiceLocatorGetECSService()
{
  return MEMORY[0x1F4114AE8]();
}

uint64_t REServiceLocatorGetFrameStatisticsHUD()
{
  return MEMORY[0x1F4114AF0]();
}

uint64_t REServiceLocatorGetNetworkSyncManager()
{
  return MEMORY[0x1F4114AF8]();
}

uint64_t REServiceLocatorGetNetworkSystem()
{
  return MEMORY[0x1F4114B00]();
}

uint64_t REServiceLocatorGetPhysicsSimulationService()
{
  return MEMORY[0x1F4114B10]();
}

uint64_t REServiceLocatorGetRenderManager()
{
  return MEMORY[0x1F4114B18]();
}

uint64_t REServiceLocatorGetSceneUnderstandingService()
{
  return MEMORY[0x1F4114B20]();
}

uint64_t REServiceLocatorGetShadowService()
{
  return MEMORY[0x1F4114B28]();
}

uint64_t REServiceLocatorGetSharedClockService()
{
  return MEMORY[0x1F4114B30]();
}

uint64_t REShadowsSetEnableDefaultShadows()
{
  return MEMORY[0x1F4114B50]();
}

uint64_t RESharedClockServiceSetSession()
{
  return MEMORY[0x1F4114B58]();
}

uint64_t RESyncAddressListCreate()
{
  return MEMORY[0x1F4147708]();
}

uint64_t RESyncCustomProtocolLayerCreate()
{
  return MEMORY[0x1F4147710]();
}

uint64_t RESyncCustomProtocolLayerOnConnected()
{
  return MEMORY[0x1F4147718]();
}

uint64_t RESyncCustomProtocolLayerOnDisconnected()
{
  return MEMORY[0x1F4147720]();
}

uint64_t RESyncCustomProtocolLayerOnReceiveData()
{
  return MEMORY[0x1F4147728]();
}

uint64_t RESyncDiscoveryIdentityObserverCreate()
{
  return MEMORY[0x1F4147730]();
}

uint64_t RESyncDiscoveryIdentityObserverOnGetAddress()
{
  return MEMORY[0x1F4147738]();
}

uint64_t RESyncDiscoveryIdentityObserverOnGetDisplayName()
{
  return MEMORY[0x1F4147740]();
}

uint64_t RESyncDiscoveryIdentityObserverOnIsLocal()
{
  return MEMORY[0x1F4147748]();
}

uint64_t RESyncDiscoveryViewCreateWithObserver()
{
  return MEMORY[0x1F4147750]();
}

uint64_t RESyncDiscoveryViewNotifyJoin()
{
  return MEMORY[0x1F4147758]();
}

uint64_t RESyncDiscoveryViewNotifyLeave()
{
  return MEMORY[0x1F4147760]();
}

uint64_t RESyncDiscoveryViewObserverCreate()
{
  return MEMORY[0x1F4147768]();
}

uint64_t RESyncDiscoveryViewObserverOnCreateProtocolLayer()
{
  return MEMORY[0x1F4147770]();
}

uint64_t RESyncDiscoveryViewObserverOnGetAuthData()
{
  return MEMORY[0x1F4147778]();
}

uint64_t RESyncDiscoveryViewObserverOnGetIdentitiesCount()
{
  return MEMORY[0x1F4147780]();
}

uint64_t RESyncDiscoveryViewObserverOnGetIdentityAtIndex()
{
  return MEMORY[0x1F4147788]();
}

uint64_t RESyncDiscoveryViewObserverOnRequestIdentity()
{
  return MEMORY[0x1F4147790]();
}

uint64_t RESyncIdentityCreateWithObserver()
{
  return MEMORY[0x1F4147798]();
}

uint64_t RESyncNetSessionAddObserver()
{
  return MEMORY[0x1F41477A0]();
}

uint64_t RESyncNetSessionConfigurationCreate()
{
  return MEMORY[0x1F41477A8]();
}

uint64_t RESyncNetSessionConfigurationSetDiscoveryView()
{
  return MEMORY[0x1F41477B0]();
}

uint64_t RESyncNetSessionConfigurationSetIsLocal()
{
  return MEMORY[0x1F41477B8]();
}

uint64_t RESyncNetSessionConfigurationSetUnreliableSyncEnabled()
{
  return MEMORY[0x1F41477C0]();
}

uint64_t RESyncNetSessionObserverCreate()
{
  return MEMORY[0x1F41477C8]();
}

uint64_t RESyncNetSessionObserverOnParticipantJoin()
{
  return MEMORY[0x1F41477D0]();
}

uint64_t RESyncNetSessionRemoveObserver()
{
  return MEMORY[0x1F41477D8]();
}

uint64_t RESyncParticipantGetAddress()
{
  return MEMORY[0x1F41477E0]();
}

uint64_t RESyncParticipantGetPeerID()
{
  return MEMORY[0x1F41477E8]();
}

uint64_t RESyncProtocolHandleCreate()
{
  return MEMORY[0x1F41477F0]();
}

uint64_t RESyncProtocolLayerObserverCreate()
{
  return MEMORY[0x1F41477F8]();
}

uint64_t RESyncProtocolLayerObserverOnClose()
{
  return MEMORY[0x1F4147800]();
}

uint64_t RESyncProtocolLayerObserverOnDeinit()
{
  return MEMORY[0x1F4147808]();
}

uint64_t RESyncProtocolLayerObserverOnDisconnect()
{
  return MEMORY[0x1F4147810]();
}

uint64_t RESyncProtocolLayerObserverOnHostStats()
{
  return MEMORY[0x1F4147818]();
}

uint64_t RESyncProtocolLayerObserverOnInit()
{
  return MEMORY[0x1F4147820]();
}

uint64_t RESyncProtocolLayerObserverOnLocalAddresses()
{
  return MEMORY[0x1F4147828]();
}

uint64_t RESyncProtocolLayerObserverOnOpenNullable()
{
  return MEMORY[0x1F4147830]();
}

uint64_t RESyncProtocolLayerObserverOnPreferredPacketSize()
{
  return MEMORY[0x1F4147838]();
}

uint64_t RESyncProtocolLayerObserverOnSend()
{
  return MEMORY[0x1F4147840]();
}

uint64_t RESyncProtocolLayerObserverOnSetDisconnectTimeout()
{
  return MEMORY[0x1F4147848]();
}

uint64_t RESyncProtocolLayerObserverOnWait()
{
  return MEMORY[0x1F4147850]();
}

uint64_t RESyncProtocolLayerObserverOnWakeup()
{
  return MEMORY[0x1F4147858]();
}

uint64_t RESyncRelease()
{
  return MEMORY[0x1F4147860]();
}

uint64_t RESyncRetain()
{
  return MEMORY[0x1F4147868]();
}

uint64_t RESyncServiceCreateSessionAndStartSync()
{
  return MEMORY[0x1F4147870]();
}

uint64_t RESyncServiceGetSyncSession()
{
  return MEMORY[0x1F4147878]();
}

uint64_t RESyncServiceStopSyncWithSession()
{
  return MEMORY[0x1F4147880]();
}

uint64_t RESyncSessionSetViewFilterCB()
{
  return MEMORY[0x1F4147888]();
}

uint64_t RESyncViewEnumerateObjects()
{
  return MEMORY[0x1F4147890]();
}

uint64_t RETransformComponentGetComponentType()
{
  return MEMORY[0x1F4114BB8]();
}

uint64_t RETransformComponentGetWorldMatrix4x4F()
{
  return MEMORY[0x1F4114BC0]();
}

uint64_t RFARKitDataProviderGetARSession()
{
  return MEMORY[0x1F41478A8]();
}

uint64_t RFAnchorCreateCamera()
{
  return MEMORY[0x1F41478B0]();
}

uint64_t RFAnchorDataProviderUpdateLocalAnchor()
{
  return MEMORY[0x1F41478B8]();
}

uint64_t RFAnchorManagementServiceUpdateByDeltaTime()
{
  return MEMORY[0x1F41478C0]();
}

uint64_t RFAtmospherePlacementServiceUpdateByDeltaTime()
{
  return MEMORY[0x1F41478C8]();
}

uint64_t RFDebugServiceUpdateByDeltaTime()
{
  return MEMORY[0x1F41478D0]();
}

uint64_t RFEnvironmentProbePlacementServiceSetBackgroundParallaxEnabled()
{
  return MEMORY[0x1F41478D8]();
}

uint64_t RFEnvironmentProbePlacementServiceSetLocalizedProbeEnabled()
{
  return MEMORY[0x1F41478E0]();
}

uint64_t RFEnvironmentProbePlacementServiceUpdateByDeltaTime()
{
  return MEMORY[0x1F41478E8]();
}

uint64_t RFGetSceneUnderstandingServiceFromRE()
{
  return MEMORY[0x1F41478F0]();
}

uint64_t RFLoggingServiceUpdateByDeltaTime()
{
  return MEMORY[0x1F41478F8]();
}

uint64_t RFMeshReconstructionServiceSetCollisionEnabled()
{
  return MEMORY[0x1F4147900]();
}

uint64_t RFMeshReconstructionServiceSetDynamicLightingEnabled()
{
  return MEMORY[0x1F4147908]();
}

uint64_t RFMeshReconstructionServiceSetLightingEnabled()
{
  return MEMORY[0x1F4147910]();
}

uint64_t RFMeshReconstructionServiceSetOcclusionEnabled()
{
  return MEMORY[0x1F4147918]();
}

uint64_t RFMeshReconstructionServiceSetPhysicsEnabled()
{
  return MEMORY[0x1F4147920]();
}

uint64_t RFMeshReconstructionServiceSetWireframeEnabled()
{
  return MEMORY[0x1F4147928]();
}

uint64_t RFMeshReconstructionServiceUpdateByDeltaTime()
{
  return MEMORY[0x1F4147930]();
}

uint64_t RFSceneUnderstandingServiceIsDepthFeatheringEnabled()
{
  return MEMORY[0x1F4147938]();
}

uint64_t RFServiceManagerGetARKitDataProvider()
{
  return MEMORY[0x1F4147940]();
}

uint64_t RFServiceManagerGetAnchorDataProvider()
{
  return MEMORY[0x1F4147948]();
}

uint64_t RFServiceManagerGetAnchorManagementService()
{
  return MEMORY[0x1F4147950]();
}

uint64_t RFServiceManagerGetAtmospherePlacementService()
{
  return MEMORY[0x1F4147958]();
}

uint64_t RFServiceManagerGetDebugService()
{
  return MEMORY[0x1F4147960]();
}

uint64_t RFServiceManagerGetEnvironmentProbePlacementService()
{
  return MEMORY[0x1F4147968]();
}

uint64_t RFServiceManagerGetLoggingService()
{
  return MEMORY[0x1F4147970]();
}

uint64_t RFServiceManagerGetMeshReconstructionService()
{
  return MEMORY[0x1F4147978]();
}

uint64_t RFServiceManagerGetSyntheticEnvironmentService()
{
  return MEMORY[0x1F4147980]();
}

uint64_t RFServiceManagerUpdate()
{
  return MEMORY[0x1F4147988]();
}

uint64_t RFSyntheticEnvironmentServiceUpdateByDeltaTime()
{
  return MEMORY[0x1F4147990]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_release(const void *aBlock)
{
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  MEMORY[0x1F40C9C00]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

float exp2f(float a1)
{
  MEMORY[0x1F40CBFF0](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

void free(void *a1)
{
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1F41864F0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isUniquelyReferenced()
{
  return MEMORY[0x1F41866D8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1F41867B0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_unownedRelease()
{
  return MEMORY[0x1F4186880]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

int uname(utsname *a1)
{
  return MEMORY[0x1F40CE5C8](a1);
}