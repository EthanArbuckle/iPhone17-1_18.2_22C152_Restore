void sub_20B04E4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20B04E5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float32x2_t sub_20B04E6CC(uint64_t a1, uint64_t a2, int a3, int a4, float32x2_t result)
{
  v5 = (float *)(a1 + 12 * a3 + 4 * a4);
  float v6 = *v5;
  if (*v5 != 0.0)
  {
    uint64_t v7 = a1 + 12 * a3;
    float v8 = *(float *)(v7 + 4 * a3);
    uint64_t v9 = a1 + 12 * a4;
    float v10 = *(float *)(v9 + 4 * a4);
    float v11 = (float)(v10 - v8) / (float)(v6 + v6);
    float v12 = sqrtf((float)(v11 * v11) + 1.0);
    if (v11 < 0.0) {
      float v12 = -v12;
    }
    float v13 = 1.0 / (float)(v12 + v11);
    *(float *)&unsigned int v14 = (float)(v13 * v13) + 1.0;
    float32x2_t v15 = vrsqrte_f32((float32x2_t)v14);
    float32x2_t v16 = vmul_f32(vrsqrts_f32((float32x2_t)v14, vmul_f32(v15, v15)), v15);
    result = vmul_f32(v16, vrsqrts_f32((float32x2_t)v14, vmul_f32(v16, v16)));
    float v17 = v13 * result.f32[0];
    float v18 = vmul_f32(result, result).f32[0];
    float v19 = v6 * v17 * (result.f32[0] + result.f32[0]);
    *(float *)(v7 + 4 * a3) = (float)((float)(v8 * v18) + (float)((float)(v17 * v17) * v10)) - v19;
    *(float *)(v9 + 4 * a4) = vmlas_n_f32(v19, v10, v18) + (float)((float)(v17 * v17) * v8);
    float *v5 = v6;
    float v20 = *(float *)(a1 + 4 * (3 - a4));
    uint64_t v21 = a1 - 12 * a3;
    float v22 = *(float *)(v21 + 20);
    *(float *)(a1 + 4 * (3 - a4)) = vmlas_n_f32(-(float)(v17 * v22), v20, result.f32[0]);
    *(float *)(v21 + 20) = (float)(v22 * result.f32[0]) + (float)(v17 * v20);
    float *v5 = 0.0;
    float v23 = *(float *)(a2 + 4 * a3);
    float v24 = *(float *)(a2 + 4 * a4);
    *(float *)(a2 + 4 * a3) = vmlas_n_f32(-(float)(v24 * v17), v23, result.f32[0]);
    *(float *)(a2 + 4 * a4) = vmlas_n_f32(v23 * v17, v24, result.f32[0]);
    float v25 = *(float *)(a2 + 12 + 4 * a3);
    float v26 = *(float *)(a2 + 12 + 4 * a4);
    *(float *)(a2 + 12 + 4 * a3) = vmlas_n_f32(-(float)(v26 * v17), v25, result.f32[0]);
    *(float *)(a2 + 12 + 4 * a4) = vmlas_n_f32(v25 * v17, v26, result.f32[0]);
    float v27 = *(float *)(a2 + 24 + 4 * a3);
    float v28 = *(float *)(a2 + 24 + 4 * a4);
    *(float *)(a2 + 24 + 4 * a3) = vmlas_n_f32(-(float)(v28 * v17), v27, result.f32[0]);
    *(float *)(a2 + 24 + 4 * a4) = vmlas_n_f32(v27 * v17, v28, result.f32[0]);
  }
  return result;
}

__n128 sub_20B04E840(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v10 = *a1;
  int v11 = *((_DWORD *)a1 + 2);
  int v12 = 0;
  *(void *)&long long v5 = *(uint64_t *)((char *)a1 + 12);
  uint64_t v13 = v5;
  uint64_t v14 = 0;
  LODWORD(v5) = *((_DWORD *)a1 + 5);
  int v15 = v5;
  int v6 = 5;
  do
  {
    float32x2_t v7 = sub_20B04E6CC((uint64_t)&v10, a3, 0, 1, *(float32x2_t *)&v5);
    float32x2_t v8 = sub_20B04E6CC((uint64_t)&v10, a3, 0, 2, v7);
    *(float32x2_t *)&long long v5 = sub_20B04E6CC((uint64_t)&v10, a3, 1, 2, v8);
    --v6;
  }
  while (v6);
  *(void *)&long long v5 = __PAIR64__(v13, v10);
  DWORD2(v5) = v15;
  *a2 = v5;
  result.n128_u64[0] = v5;
  result.n128_u32[2] = DWORD2(v5);
  return result;
}

float sub_20B04E92C(float *a1, float *a2, __n128 a3)
{
  float v3 = 0.0;
  float v4 = 0.0;
  if (fabsf(a3.n128_f32[0]) >= 0.1)
  {
    double v5 = 1.0 / a3.n128_f32[0];
    double v6 = fabs(v5);
    float v4 = v5;
    if (v6 < 0.100000001) {
      float v4 = 0.0;
    }
  }
  if (fabsf(a3.n128_f32[1]) >= 0.1)
  {
    double v7 = 1.0 / a3.n128_f32[1];
    if (fabs(v7) >= 0.100000001) {
      float v3 = v7;
    }
  }
  a3.n128_u32[0] = 0;
  if (fabsf(a3.n128_f32[2]) >= 0.1)
  {
    double v8 = 1.0 / a3.n128_f32[2];
    if (fabs(v8) >= 0.100000001) {
      a3.n128_f32[0] = v8;
    }
  }
  *a1 = (float)((float)((float)(*a2 * *a2) * v4) + (float)((float)(a2[1] * a2[1]) * v3))
      + (float)((float)(a2[2] * a2[2]) * a3.n128_f32[0]);
  a1[1] = (float)((float)((float)(*a2 * v4) * a2[3]) + (float)((float)(a2[1] * v3) * a2[4]))
        + (float)((float)(a2[2] * a3.n128_f32[0]) * a2[5]);
  a1[2] = (float)((float)((float)(*a2 * v4) * a2[6]) + (float)((float)(a2[1] * v3) * a2[7]))
        + (float)((float)(a2[2] * a3.n128_f32[0]) * a2[8]);
  a1[3] = (float)((float)((float)(a2[3] * v4) * *a2) + (float)((float)(a2[4] * v3) * a2[1]))
        + (float)((float)(a2[5] * a3.n128_f32[0]) * a2[2]);
  a1[4] = (float)((float)((float)(a2[3] * a2[3]) * v4) + (float)((float)(a2[4] * a2[4]) * v3))
        + (float)((float)(a2[5] * a2[5]) * a3.n128_f32[0]);
  a1[5] = (float)((float)((float)(a2[3] * v4) * a2[6]) + (float)((float)(a2[4] * v3) * a2[7]))
        + (float)((float)(a2[5] * a3.n128_f32[0]) * a2[8]);
  a1[6] = (float)((float)((float)(a2[6] * v4) * *a2) + (float)((float)(a2[7] * v3) * a2[1]))
        + (float)((float)(a2[8] * a3.n128_f32[0]) * a2[2]);
  a1[7] = (float)((float)((float)(a2[6] * v4) * a2[3]) + (float)((float)(a2[7] * v3) * a2[4]))
        + (float)((float)(a2[8] * a3.n128_f32[0]) * a2[5]);
  float result = (float)((float)((float)(a2[6] * a2[6]) * v4) + (float)((float)(a2[7] * a2[7]) * v3))
         + (float)((float)(a2[8] * a2[8]) * a3.n128_f32[0]);
  a1[8] = result;
  return result;
}

float sub_20B04EB3C(uint64_t *a1, _OWORD *a2, float32x4_t a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v15[0] = xmmword_20B1E6130;
  v15[1] = xmmword_20B1E6130;
  int v16 = 1065353216;
  __n128 v12 = 0uLL;
  sub_20B04E840(a1, &v12, (uint64_t)v15);
  unsigned int v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_20B04E92C((float *)v13, (float *)v15, v12);
  v4.i64[0] = *(void *)&v13[0];
  v4.i64[1] = DWORD2(v13[0]);
  int8x16_t v5 = (int8x16_t)vmulq_f32(v4, a3);
  *(float32x2_t *)v5.i8 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  v6.i64[0] = *(void *)((char *)v13 + 12);
  v6.i64[1] = DWORD1(v13[1]);
  float32x4_t v7 = vmulq_f32(v6, a3);
  *(float32x2_t *)v7.f32 = vadd_f32(*(float32x2_t *)v7.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL));
  *(float32x2_t *)&long long v9 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v7.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v7.f32));
  v7.i64[0] = *((void *)&v13[1] + 1);
  v7.i64[1] = v14;
  int8x16_t v8 = (int8x16_t)vmulq_f32(v7, a3);
  *(float32x2_t *)v8.i8 = vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
  *((void *)&v9 + 1) = vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)).u32[0];
  *a2 = v9;
  return *(float *)&v9;
}

float32x4_t sub_20B04EC5C(uint64_t a1, float32x2_t *a2, float32x4_t *a3, int32x4_t _Q0, float32x4_t a5)
{
  *(float32x4_t *)a1 = vmlaq_f32(*(float32x4_t *)a1, (float32x4_t)vtrn1q_s32(_Q0, vzip1q_s32(_Q0, _Q0)), (float32x4_t)vdupq_lane_s64(_Q0.i64[0], 0));
  *(float32x2_t *)(a1 + 16) = vmla_laneq_f32(*(float32x2_t *)(a1 + 16), (float32x2_t)vext_s8(*(int8x8_t *)_Q0.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL), 4uLL), (float32x4_t)_Q0, 2);
  _Q2 = (int8x16_t)vmulq_f32(a5, (float32x4_t)_Q0);
  *(float32x2_t *)_Q2.i8 = vadd_f32(*(float32x2_t *)_Q2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(_Q2, _Q2, 8uLL));
  *(float32x2_t *)&long long v6 = vmla_n_f32(*a2, *(float32x2_t *)_Q0.i8, vadd_f32(*(float32x2_t *)_Q2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q2.i8, 1)).f32[0]);
  *(float *)_Q2.i32 = vaddv_f32(*(float32x2_t *)_Q2.i8);
  __asm { FMLA            S6, S2, V0.S[2] }
  *((void *)&v6 + 1) = __PAIR64__(vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL).u32[1], _S6);
  *(_OWORD *)a2->f32 = v6;
  a5.i32[3] = 1.0;
  float32x4_t result = vaddq_f32(*a3, a5);
  *a3 = result;
  return result;
}

float sub_20B04ECD8(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  v3.i32[3] = 0;
  v3.i32[0] = *(_DWORD *)a1;
  *(uint64_t *)((char *)v3.i64 + 4) = *(void *)(a1 + 4);
  float32x4_t v4 = vmulq_f32(v3, a2);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v4.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL));
  v4.i32[0] = vadd_f32(*(float32x2_t *)v4.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.f32, 1)).u32[0];
  v5.i32[1] = HIDWORD(*(void *)(a1 + 12));
  v5.i32[0] = *(_DWORD *)(a1 + 20);
  float32x2_t v6 = vmla_lane_f32(vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_laneq_f32(v5, a2, 2)), *(float32x2_t *)(a1 + 4), a2.f32[0]), *(float32x2_t *)(a1 + 12), *(float32x2_t *)a2.f32, 1);
  v4.i32[1] = v6.i32[0];
  v4.i64[1] = v6.u32[1];
  float32x4_t v7 = vsubq_f32(a3, v4);
  int8x16_t v8 = (int8x16_t)vmulq_f32(v7, v7);
  return vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
}

void sub_20B04ED48(uint64_t a1, float32x4_t *a2, float32x4_t a3, float32x4_t a4)
{
  __asm { FMOV            V2.4S, #1.0 }
  v11.i32[3] = 0;
  v11.i32[0] = *(_DWORD *)a1;
  *(uint64_t *)((char *)v11.i64 + 4) = *(void *)(a1 + 4);
  float32x4_t v16 = vmulq_f32(a4, vdivq_f32(_Q2, (float32x4_t)vdupq_laneq_s32((int32x4_t)a4, 3)));
  int8x16_t v12 = (int8x16_t)vmulq_f32(v11, v16);
  *(float32x2_t *)v12.i8 = vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  v13.i32[0] = vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0];
  v12.i32[1] = HIDWORD(*(void *)(a1 + 12));
  v12.i32[0] = *(_DWORD *)(a1 + 20);
  *(float32x2_t *)v12.i8 = vmla_lane_f32(vmla_n_f32((float32x2_t)vrev64_s32((int32x2_t)vmul_laneq_f32(*(float32x2_t *)v12.i8, v16, 2)), *(float32x2_t *)(a1 + 4), v16.f32[0]), *(float32x2_t *)(a1 + 12), *(float32x2_t *)v16.f32, 1);
  v13.i32[1] = v12.i32[0];
  v13.i64[1] = v12.u32[1];
  sub_20B04EB3C((uint64_t *)a1, a2, vsubq_f32(a3, v13));
  float32x4_t v14 = *a2;
  sub_20B04ECD8(a1, *a2, a3);
  *a2 = vaddq_f32(v14, v16);
}

double sub_20B04EE10(float32x4_t *a1, int32x4_t *a2, uint64_t a3, _DWORD *a4, float32x4_t *a5)
{
  v18[3] = *MEMORY[0x263EF8340];
  float32x4_t v7 = 0uLL;
  float32x4_t v17 = 0u;
  memset(v18, 0, 24);
  if (a3)
  {
    uint64_t v8 = a3;
    do
    {
      int32x4_t v11 = *a2++;
      int32x4_t v12 = v11;
      float32x4_t v13 = *a1++;
      sub_20B04EC5C((uint64_t)v18, (float32x2_t *)&v17, a5, v12, v13);
      --v8;
    }
    while (v8);
    float32x4_t v7 = v17;
  }
  float32x4_t v16 = 0uLL;
  sub_20B04ED48((uint64_t)v18, &v16, v7, *a5);
  *a4 = v14;
  return *(double *)v16.i64;
}

uint64_t sub_20B04EED8(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, float32x4_t a6, float32x4_t a7)
{
  if ((vmaxvq_u32((uint32x4_t)vcltzq_f32(a7)) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 112))
    {
      v12.i64[0] = 0x3F0000003F000000;
      v12.i64[1] = 0x3F0000003F000000;
      int8x16_t v13 = (int8x16_t)vmulq_f32(vaddq_f32(a7, a6), v12);
      int v14 = 4 * (*(float *)v13.i32 < a6.f32[2]);
      if (*(float *)&v13.i32[1] < a6.f32[2]) {
        v14 |= 2u;
      }
      int v15 = 4 * (*(float *)v13.i32 < a6.f32[1]);
      if (*(float *)&v13.i32[2] < a6.f32[1]) {
        v15 |= 1u;
      }
      if (a6.f32[1] < a6.f32[2]) {
        int v14 = v15;
      }
      v16.i32[1] = v13.i32[1];
      v16.i32[0] = vextq_s8(v13, v13, 8uLL).u32[0];
      int32x2_t v17 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a6.f32, 0), v16);
      if (v17.i8[4]) {
        int v18 = 2;
      }
      else {
        int v18 = 0;
      }
      if (v17.i8[0]) {
        v18 |= 1u;
      }
      if (a6.f32[0] < a6.f32[1] && a6.f32[0] < a6.f32[2]) {
        int v14 = v18;
      }
      int8x16_t v54 = v13;
      while (1)
      {
        uint64_t v20 = v14;
        __n128 v21 = (__n128)vbslq_s8((int8x16_t)vcltzq_s32(xmmword_20B1E6210[v14]), (int8x16_t)a7, v13);
        uint64_t v22 = *(void *)(a1 + 8 * (int)(v14 ^ a5) + 48);
        if (v22)
        {
          __n128 v57 = v21;
          char v23 = sub_20B04EED8(v22, a2, a3, a4, a5, (__n128)vbslq_s8((int8x16_t)vcltzq_s32(xmmword_20B1E6190[v14]), (int8x16_t)a6, v13), v21);
          __n128 v21 = v57;
          int8x16_t v13 = v54;
          if (v23) {
            break;
          }
        }
        float v24 = (int *)((char *)&unk_20B1E6290 + 16 * v20);
        float v25 = v24 + 1;
        if (v21.n128_f32[1] >= v21.n128_f32[2]) {
          float v25 = v24 + 2;
        }
        if (v21.n128_f32[0] >= v21.n128_f32[2] || v21.n128_f32[0] >= v21.n128_f32[1]) {
          float v24 = v25;
        }
        int v14 = *v24;
        if (v14 >= 8) {
          return 0;
        }
      }
      return 1;
    }
    float v27 = *(float32x4_t ***)a1;
    if (*(void *)a1)
    {
      float v58 = *(float *)a4;
      float v28 = *v27;
      v29 = v27[1];
      if (*v27 != v29)
      {
        v30 = 0;
        do
        {
          if (sub_20B199F34(v28, &v58, *a3, a3[1])) {
            v30 = v28;
          }
          v28 += 14;
        }
        while (v28 != v29);
        if (v30)
        {
          float32x4_t v31 = vmlaq_n_f32(*a3, a3[1], v58);
          *(float *)a4 = v58;
          *(float32x4_t *)(a4 + 80) = v31;
          *(__n64 *)v32.i8 = sub_20B199C5C(v30, v31);
          float32x2_t v33 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1).u64[0];
          float32x2_t v34 = (float32x2_t)vdupq_laneq_s32(v32, 2).u64[0];
          *(float32x2_t *)(a4 + 96) = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v30[11].f32, *(float *)v32.i32), v33, *(float32x2_t *)&v30[11].u32[2]), v34, *(float32x2_t *)v30[12].f32);
          *(float32x2_t *)(a4 + 104) = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)&v30[12].u32[2], *(float *)v32.i32), v33, *(float32x2_t *)v30[13].f32), v34, *(float32x2_t *)&v30[13].u32[2]);
          float32x4_t v35 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v30[4], *(float *)v32.i32), v30[5], *(float32x2_t *)v32.i8, 1), v30[6], (float32x4_t)v32, 2);
          int32x4_t v36 = (int32x4_t)vmulq_f32(v35, v35);
          v36.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v36.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v36, 2)).u32[0];
          float32x2_t v37 = vrsqrte_f32((float32x2_t)v36.u32[0]);
          int32x4_t v38 = (int32x4_t)vmulq_n_f32(v35, vmul_f32(vrsqrts_f32((float32x2_t)v36.u32[0], vmul_f32(v37, v37)), v37).f32[0]);
          *(int32x4_t *)(a4 + 16) = v38;
          *(void *)(a4 + 112) = v30->i64[1];
          float32x4_t v39 = vsubq_f32(v30[2], v30[1]);
          int32x4_t v40 = (int32x4_t)vmulq_f32(v39, v39);
          v40.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v40, 2)).u32[0];
          float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
          float32x2_t v42 = vmul_f32(vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)), v41);
          float32x4_t v43 = vmlaq_n_f32((float32x4_t)xmmword_20B1E6140, v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
          int32x4_t v44 = (int32x4_t)vmulq_f32(v43, v43);
          v44.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v44, 2)).u32[0];
          *(float32x2_t *)v40.i8 = vrsqrte_f32((float32x2_t)v44.u32[0]);
          int32x4_t v45 = (int32x4_t)vmulq_n_f32(v43, vmul_f32(vrsqrts_f32((float32x2_t)v44.u32[0], vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8)), *(float32x2_t *)v40.i8).f32[0]);
          float32x4_t v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
          int32x4_t v47 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v45, v46)), (float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL));
          int32x4_t v48 = (int32x4_t)vmulq_f32((float32x4_t)v47, (float32x4_t)v47);
          v48.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v48, 2), *(float32x2_t *)v48.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.i8, 1)).u32[0];
          *(float32x2_t *)v40.i8 = vrsqrte_f32((float32x2_t)v48.u32[0]);
          int32x4_t v49 = (int32x4_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v47, v47), (int8x16_t)v47, 0xCuLL), vmul_f32(vrsqrts_f32((float32x2_t)v48.u32[0], vmul_f32(*(float32x2_t *)v40.i8, *(float32x2_t *)v40.i8)), *(float32x2_t *)v40.i8).f32[0]);
          int32x4_t v50 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v49, v46)), (float32x4_t)v38, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL));
          float32x4_t v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL);
          int32x4_t v52 = (int32x4_t)vmulq_f32((float32x4_t)v50, (float32x4_t)v50);
          v52.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v52, 2), *(float32x2_t *)v52.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v52.i8, 1)).u32[0];
          *(float32x2_t *)v50.i8 = vrsqrte_f32((float32x2_t)v52.u32[0]);
          *(float32x4_t *)(a4 + 32) = vmulq_n_f32(v51, vmul_f32(vrsqrts_f32((float32x2_t)v52.u32[0], vmul_f32(*(float32x2_t *)v50.i8, *(float32x2_t *)v50.i8)), *(float32x2_t *)v50.i8).f32[0]);
          *(int32x4_t *)(a4 + 48) = v49;
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_20B04F29C(uint64_t *a1, float32x4_t *a2, uint64_t a3, double a4, float32x4_t _Q1)
{
  uint64_t result = *a1;
  if (result)
  {
    float32x4_t v6 = *a2;
    float32x4_t v18 = *a2;
    v7.i32[0] = a2[1].i32[0];
    _Q1.i32[0] = a2[1].i32[1];
    if (v7.f32[0] >= 0.0)
    {
      uint64_t v8 = 0;
    }
    else
    {
      v18.f32[0] = -v6.f32[0];
      v7.f32[0] = -v7.f32[0];
      uint64_t v8 = 4;
    }
    float v9 = a2[1].f32[2];
    if (_Q1.f32[0] < 0.0)
    {
      v18.f32[1] = -v6.f32[1];
      _Q1.f32[0] = -_Q1.f32[0];
      uint64_t v8 = v8 | 2;
    }
    float32x4_t v10 = *(float32x4_t *)(result + 16);
    float32x4_t v11 = *(float32x4_t *)(result + 32);
    if (v9 < 0.0)
    {
      v18.f32[2] = -v6.f32[2];
      float v9 = -v9;
      uint64_t v8 = v8 | 1;
    }
    v7.i32[1] = _Q1.i32[0];
    __asm { FMOV            V1.2S, #1.0 }
    *(float32x2_t *)_Q1.f32 = vdiv_f32(*(float32x2_t *)_Q1.f32, v7);
    _Q1.f32[2] = 1.0 / v9;
    float32x4_t v16 = vmulq_f32(vsubq_f32(v11, v18), _Q1);
    float32x4_t v17 = vmulq_f32(vsubq_f32(v10, v18), _Q1);
    if (fmaxf(v16.f32[0], fmaxf(v16.f32[1], v16.f32[2])) >= fminf(v17.f32[0], fminf(v17.f32[1], v17.f32[2])))
    {
      return 0;
    }
    else
    {
      v16.i32[3] = 0;
      v17.i32[3] = 0;
      return sub_20B04EED8(result, (uint64_t)&v18, a2, a3, v8, v16, v17);
    }
  }
  return result;
}

id sub_20B04F3A0(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  v189[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if (!*a1)
  {
    int v15 = 0;
    goto LABEL_89;
  }
  v186 = 0;
  v187 = 0;
  uint64_t v188 = 0;
  v183 = 0;
  v184 = 0;
  float v9 = (void **)(a1 + 6);
  float32x4_t v10 = (_DWORD *)a1[6];
  uint64_t v185 = 0;
  __p = 0;
  v181 = 0;
  uint64_t v182 = 0;
  a1[7] = (uint64_t)v10;
  __n128 v11 = *(__n128 *)(v4 + 32);
  if ((a3 & 1) == 0)
  {
    __n128 v177 = *(__n128 *)(v4 + 32);
    sub_20B04FF20(0, (uint64_t)&v186, (char **)&v183, v11, *(__n128 *)(v4 + 16));
    unint64_t v16 = a1[8];
    float32x4_t v17 = (char *)a1[7];
    if ((unint64_t)v17 < v16)
    {
      *(_DWORD *)float32x4_t v17 = 1;
      int v14 = v17 + 4;
LABEL_32:
      __n128 v11 = v177;
      goto LABEL_33;
    }
    float v27 = (char *)*v9;
    uint64_t v28 = (v17 - (unsigned char *)*v9) >> 2;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62) {
      sub_20B05D0BC();
    }
    uint64_t v30 = v16 - (void)v27;
    if (v30 >> 1 > v29) {
      unint64_t v29 = v30 >> 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      int32x4_t v32 = (char *)sub_20B05D1AC((uint64_t)(a1 + 8), v31);
      float v27 = (char *)a1[6];
      float32x4_t v17 = (char *)a1[7];
    }
    else
    {
      int32x4_t v32 = 0;
    }
    float32x2_t v33 = &v32[4 * v28];
    float32x2_t v34 = &v32[4 * v31];
    *(_DWORD *)float32x2_t v33 = 1;
    int v14 = v33 + 4;
    while (v17 != v27)
    {
      int v35 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *((_DWORD *)v33 - 1) = v35;
      v33 -= 4;
    }
    a1[6] = (uint64_t)v33;
    a1[7] = (uint64_t)v14;
    a1[8] = (uint64_t)v34;
    if (!v27) {
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v27);
    goto LABEL_32;
  }
  uint64_t v12 = (uint64_t)(a1 + 8);
  unint64_t v13 = a1[8];
  if ((unint64_t)v10 >= v13)
  {
    __n128 v177 = v11;
    uint64_t v18 = v13 - (void)v10;
    uint64_t v19 = v18 >> 1;
    if ((unint64_t)(v18 >> 1) <= 1) {
      uint64_t v19 = 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    __n128 v21 = sub_20B05D1AC(v12, v20);
    uint64_t v22 = (char *)a1[6];
    uint64_t v23 = a1[7];
    float v25 = &v21[v24];
    *__n128 v21 = 0;
    int v14 = v21 + 1;
    while ((char *)v23 != v22)
    {
      int v26 = *(_DWORD *)(v23 - 4);
      v23 -= 4;
      *--__n128 v21 = v26;
    }
    a1[6] = (uint64_t)v21;
    a1[7] = (uint64_t)v14;
    a1[8] = (uint64_t)v25;
    if (!v22) {
      goto LABEL_32;
    }
    float v27 = v22;
    goto LABEL_31;
  }
  *float32x4_t v10 = 0;
  int v14 = v10 + 1;
LABEL_33:
  a1[7] = (uint64_t)v14;
  sub_20B0567B4((uint64_t)&__p, *a1, a2 - 1, a3 | a4, a3, vsubq_f32(*(float32x4_t *)(*a1 + 16), *(float32x4_t *)(*a1 + 32)), (int8x16_t)v11);
  float32x2_t v37 = (__n128 **)__p;
  int32x4_t v36 = v181;
  if (v181 != __p)
  {
    sub_20B05E3D0((uint64_t)__p, v181, 126 - 2 * __clz(((char *)v181 - (unsigned char *)__p) >> 3), 1);
    __n128 v178 = (*v37)[1];
    unint64_t v38 = a1[8];
    int32x4_t v40 = (_DWORD *)a1[6];
    float32x4_t v39 = (_DWORD *)a1[7];
    if ((unint64_t)v39 >= v38)
    {
      uint64_t v42 = v39 - v40;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 62) {
        sub_20B05D0BC();
      }
      uint64_t v44 = v38 - (void)v40;
      if (v44 >> 1 > v43) {
        unint64_t v43 = v44 >> 1;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45)
      {
        float32x4_t v46 = (char *)sub_20B05D1AC((uint64_t)(a1 + 8), v45);
        int32x4_t v47 = (_DWORD *)a1[6];
        float32x4_t v39 = (_DWORD *)a1[7];
      }
      else
      {
        float32x4_t v46 = 0;
        int32x4_t v47 = (_DWORD *)a1[6];
      }
      int32x4_t v48 = &v46[4 * v42];
      int32x4_t v49 = &v46[4 * v45];
      *(_DWORD *)int32x4_t v48 = *v40;
      float32x2_t v41 = v48 + 4;
      while (v39 != v47)
      {
        int v50 = *--v39;
        *((_DWORD *)v48 - 1) = v50;
        v48 -= 4;
      }
      a1[6] = (uint64_t)v48;
      a1[7] = (uint64_t)v41;
      a1[8] = (uint64_t)v49;
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *float32x4_t v39 = *v40;
      float32x2_t v41 = v39 + 1;
    }
    a1[7] = (uint64_t)v41;
    float v51 = v178.n128_f32[1];
    int v52 = 1;
    do
    {
      v53 = *v37;
      sub_20B04FF20(a3, (uint64_t)&v186, (char **)&v183, (*v37)[1], (*v37)[2]);
      float v54 = v53[1].n128_f32[1];
      v55 = *v9;
      if (v51 < v54)
      {
        __n128 v57 = (_DWORD *)a1[7];
        unint64_t v56 = a1[8];
        if ((unint64_t)v57 >= v56)
        {
          uint64_t v59 = ((char *)v57 - v55) >> 2;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62) {
            sub_20B05D0BC();
          }
          uint64_t v61 = v56 - (void)v55;
          if (v61 >> 1 > v60) {
            unint64_t v60 = v61 >> 1;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62)
          {
            v63 = (char *)sub_20B05D1AC((uint64_t)(a1 + 8), v62);
            v64 = (_DWORD *)a1[6];
            __n128 v57 = (_DWORD *)a1[7];
          }
          else
          {
            v63 = 0;
            v64 = *v9;
          }
          v65 = &v63[4 * v59];
          *(_DWORD *)v65 = *(_DWORD *)&v55[4 * v52];
          float v58 = v65 + 4;
          while (v57 != v64)
          {
            int v66 = *--v57;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          a1[6] = (uint64_t)v65;
          a1[7] = (uint64_t)v58;
          a1[8] = (uint64_t)&v63[4 * v62];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *__n128 v57 = *(_DWORD *)&v55[4 * v52];
          float v58 = v57 + 1;
        }
        ++v52;
        a1[7] = (uint64_t)v58;
        v55 = (unsigned char *)a1[6];
        float v51 = v54;
      }
      ++*(_DWORD *)&v55[4 * v52];
      ++v37;
    }
    while (v37 != (__n128 **)v36);
  }
  v67 = objc_alloc_init(MDLMeshBufferAllocatorDefault);
  v69 = v183;
  v68 = v184;
  v175 = v67;
  id v70 = objc_alloc(MEMORY[0x263EFF8F8]);
  v173 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v70, v71, (uint64_t)v183, v68 - v69, 0);
  v179 = objc_msgSend_newBufferWithData_type_(v67, v72, (uint64_t)v173, 2);
  if (objc_msgSend_conformsToProtocol_(v179, v73, (uint64_t)&unk_26BF5ED88))
  {
    id v75 = v179;
    v78 = objc_msgSend_name(0, v76, v77);
    v80 = objc_msgSend_stringByAppendingString_(v78, v79, @"-Indices");
    objc_msgSend_setName_(v75, v81, (uint64_t)v80);
  }
  v176 = objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x263EFF8F8], v74, (uint64_t)v186, v187 - (unsigned char *)v186, 0);
  v82 = objc_opt_new();
  v174 = v82;
  v85 = objc_msgSend_attributes(v82, v83, v84);
  v87 = objc_msgSend_objectAtIndexedSubscript_(v85, v86, 0);
  objc_msgSend_setName_(v87, v88, @"position");

  v91 = objc_msgSend_attributes(v82, v89, v90);
  v93 = objc_msgSend_objectAtIndexedSubscript_(v91, v92, 0);
  objc_msgSend_setFormat_(v93, v94, 786435);

  v97 = objc_msgSend_attributes(v82, v95, v96);
  v99 = objc_msgSend_objectAtIndexedSubscript_(v97, v98, 0);
  objc_msgSend_setOffset_(v99, v100, 0);

  v103 = objc_msgSend_attributes(v82, v101, v102);
  v105 = objc_msgSend_objectAtIndexedSubscript_(v103, v104, 0);
  objc_msgSend_setBufferIndex_(v105, v106, 0);

  if (a3)
  {
    v109 = objc_msgSend_attributes(v82, v107, v108);
    v111 = objc_msgSend_objectAtIndexedSubscript_(v109, v110, 1);
    objc_msgSend_setName_(v111, v112, @"normal");

    v115 = objc_msgSend_attributes(v82, v113, v114);
    v117 = objc_msgSend_objectAtIndexedSubscript_(v115, v116, 1);
    objc_msgSend_setFormat_(v117, v118, 786435);

    v121 = objc_msgSend_attributes(v82, v119, v120);
    v123 = objc_msgSend_objectAtIndexedSubscript_(v121, v122, 1);
    objc_msgSend_setOffset_(v123, v124, 12);

    v127 = objc_msgSend_attributes(v82, v125, v126);
    v129 = objc_msgSend_objectAtIndexedSubscript_(v127, v128, 1);
    objc_msgSend_setBufferIndex_(v129, v130, 0);

    unint64_t v131 = 6;
  }
  else
  {
    unint64_t v131 = 3;
  }
  v132 = objc_msgSend_layouts(v82, v107, v108);
  v134 = objc_msgSend_objectAtIndexedSubscript_(v132, v133, 0);
  objc_msgSend_setStride_(v134, v135, 4 * v131);

  v137 = objc_msgSend_newBufferWithData_type_(v175, v136, (uint64_t)v176, 1);
  if (objc_msgSend_conformsToProtocol_(v137, v138, (uint64_t)&unk_26BF5ED88))
  {
    id v140 = v137;
    v141 = NSString;
    v144 = objc_msgSend_name(0, v142, v143);
    v146 = objc_msgSend_stringWithFormat_(v141, v145, @"%@-%@", v144, @"position");
    objc_msgSend_setName_(v140, v147, (uint64_t)v146);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267690C78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267690C78))
  {
    v170 = [MDLMaterial alloc];
    v171 = objc_opt_new();
    qword_267690C70 = objc_msgSend_initWithName_scatteringFunction_(v170, v172, @"Octree material", v171);

    __cxa_guard_release(&qword_267690C78);
  }
  v148 = objc_msgSend_propertyWithSemantic_((void *)qword_267690C70, v139, 2);
  objc_msgSend_setFloatValue_(v148, v149, v150, 0.0);
  v152 = objc_msgSend_propertyWithSemantic_((void *)qword_267690C70, v151, 6);

  LODWORD(v153) = 1.0;
  objc_msgSend_setFloatValue_(v152, v154, v155, v153);
  v156 = [MDLSubmesh alloc];
  uint64_t v158 = (v184 - (unsigned char *)v183) >> 2;
  if (a3) {
    uint64_t v159 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v156, v157, (uint64_t)v179, v158, 32, 2, qword_267690C70);
  }
  else {
    uint64_t v159 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v156, v157, (uint64_t)v179, v158, 32, 1, qword_267690C70);
  }
  v160 = (void *)v159;
  v162 = v186;
  v161 = v187;
  v163 = [MDLMesh alloc];
  v189[0] = v160;
  v165 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v164, (uint64_t)v189, 1);
  int v15 = objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v163, v166, (uint64_t)v137, ((v161 - v162) >> 2) / v131, v174, v165);

  if (a3)
  {
    LODWORD(v168) = 1045220557;
    objc_msgSend_addNormalsWithAttributeNamed_creaseThreshold_(v15, v167, @"normal", v168);
  }

  if (__p) {
    operator delete(__p);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
LABEL_89:

  return v15;
}

void sub_20B04FCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  __cxa_guard_abort(&qword_267690C78);
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void sub_20B04FF20(int a1, uint64_t a2, char **a3, __n128 a4, __n128 a5)
{
  __n128 v1527 = a4;
  float v9 = (unsigned __int32 **)(a2 + 8);
  uint64_t v8 = *(unsigned __int32 **)(a2 + 8);
  float32x4_t v10 = *(unsigned __int32 **)a2;
  unint64_t v11 = ((uint64_t)v8 - *(void *)a2) >> 2;
  unint64_t v13 = (char **)(a2 + 16);
  uint64_t v12 = *(char **)(a2 + 16);
  if (!a1)
  {
    if (v8 >= (unsigned __int32 *)v12)
    {
      unint64_t v21 = v11 + 1;
      if ((v11 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v22 = v12 - (char *)v10;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)sub_20B05D1AC((uint64_t)v13, v23);
        a4.n128_u64[0] = v1527.n128_u64[0];
        float v25 = v24;
        float32x4_t v10 = *(unsigned __int32 **)a2;
        uint64_t v8 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        float v25 = 0;
      }
      int32x4_t v36 = &v25[4 * v11];
      uint64_t v12 = &v25[4 * v23];
      *(_DWORD *)int32x4_t v36 = a4.n128_u32[0];
      int v15 = (unsigned __int32 *)(v36 + 4);
      while (v8 != v10)
      {
        int v37 = *--v8;
        *((_DWORD *)v36 - 1) = v37;
        v36 -= 4;
      }
      *(void *)a2 = v36;
      *(void *)(a2 + 8) = v15;
      *(void *)(a2 + 16) = v12;
      if (v10)
      {
        operator delete(v10);
        a4.n128_u32[1] = v1527.n128_u32[1];
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *uint64_t v8 = a4.n128_u32[0];
      int v15 = v8 + 1;
    }
    *float v9 = v15;
    unsigned __int32 v38 = a4.n128_u32[1];
    if (v15 >= (unsigned __int32 *)v12)
    {
      int32x4_t v40 = *(unsigned __int32 **)a2;
      uint64_t v41 = ((uint64_t)v15 - *(void *)a2) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v43 = v12 - (char *)v40;
      if (v43 >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        unint64_t v45 = (char *)sub_20B05D1AC((uint64_t)v13, v44);
        int32x4_t v40 = *(unsigned __int32 **)a2;
        int v15 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        unint64_t v45 = 0;
      }
      unint64_t v56 = (unsigned __int32 *)&v45[4 * v41];
      uint64_t v12 = &v45[4 * v44];
      *unint64_t v56 = v38;
      float32x4_t v39 = v56 + 1;
      while (v15 != v40)
      {
        unsigned __int32 v57 = *--v15;
        *--unint64_t v56 = v57;
      }
      *(void *)a2 = v56;
      *(void *)(a2 + 8) = v39;
      *(void *)(a2 + 16) = v12;
      if (v40)
      {
        operator delete(v40);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *int v15 = a4.n128_u32[1];
      float32x4_t v39 = v15 + 1;
    }
    *float v9 = v39;
    if (v39 >= (unsigned __int32 *)v12)
    {
      uint64_t v59 = *(unsigned __int32 **)a2;
      uint64_t v60 = ((uint64_t)v39 - *(void *)a2) >> 2;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v62 = v12 - (char *)v59;
      if (v62 >> 1 > v61) {
        unint64_t v61 = v62 >> 1;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        v64 = (char *)sub_20B05D1AC((uint64_t)v13, v63);
        uint64_t v59 = *(unsigned __int32 **)a2;
        float32x4_t v39 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v64 = 0;
      }
      v74 = &v64[4 * v60];
      uint64_t v12 = &v64[4 * v63];
      *(_DWORD *)v74 = v1527.n128_u32[2];
      float v58 = (unsigned __int32 *)(v74 + 4);
      while (v39 != v59)
      {
        int v75 = *--v39;
        *((_DWORD *)v74 - 1) = v75;
        v74 -= 4;
      }
      *(void *)a2 = v74;
      *(void *)(a2 + 8) = v58;
      *(void *)(a2 + 16) = v12;
      if (v59)
      {
        operator delete(v59);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *float32x4_t v39 = v1527.n128_u32[2];
      float v58 = v39 + 1;
    }
    *float v9 = v58;
    if (v58 >= (unsigned __int32 *)v12)
    {
      uint64_t v77 = *(unsigned __int32 **)a2;
      uint64_t v78 = ((uint64_t)v58 - *(void *)a2) >> 2;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v80 = v12 - (char *)v77;
      if (v80 >> 1 > v79) {
        unint64_t v79 = v80 >> 1;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81)
      {
        v82 = (char *)sub_20B05D1AC((uint64_t)v13, v81);
        uint64_t v77 = *(unsigned __int32 **)a2;
        float v58 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v82 = 0;
      }
      v92 = &v82[4 * v78];
      uint64_t v12 = &v82[4 * v81];
      *(_DWORD *)v92 = a5.n128_u32[0];
      v76 = (unsigned __int32 *)(v92 + 4);
      while (v58 != v77)
      {
        int v93 = *--v58;
        *((_DWORD *)v92 - 1) = v93;
        v92 -= 4;
      }
      *(void *)a2 = v92;
      *(void *)(a2 + 8) = v76;
      *(void *)(a2 + 16) = v12;
      if (v77)
      {
        operator delete(v77);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *float v58 = a5.n128_u32[0];
      v76 = v58 + 1;
    }
    *float v9 = v76;
    if (v76 >= (unsigned __int32 *)v12)
    {
      v95 = *(unsigned __int32 **)a2;
      uint64_t v96 = ((uint64_t)v76 - *(void *)a2) >> 2;
      unint64_t v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v98 = v12 - (char *)v95;
      if (v98 >> 1 > v97) {
        unint64_t v97 = v98 >> 1;
      }
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v99 = v97;
      }
      if (v99)
      {
        v100 = (char *)sub_20B05D1AC((uint64_t)v13, v99);
        v95 = *(unsigned __int32 **)a2;
        v76 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v100 = 0;
      }
      v110 = (unsigned __int32 *)&v100[4 * v96];
      uint64_t v12 = &v100[4 * v99];
      unsigned __int32 *v110 = v38;
      v94 = v110 + 1;
      while (v76 != v95)
      {
        unsigned __int32 v111 = *--v76;
        *--v110 = v111;
      }
      *(void *)a2 = v110;
      *(void *)(a2 + 8) = v94;
      *(void *)(a2 + 16) = v12;
      if (v95)
      {
        operator delete(v95);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v76 = v38;
      v94 = v76 + 1;
    }
    *float v9 = v94;
    if (v94 >= (unsigned __int32 *)v12)
    {
      v113 = *(unsigned __int32 **)a2;
      uint64_t v114 = ((uint64_t)v94 - *(void *)a2) >> 2;
      unint64_t v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v116 = v12 - (char *)v113;
      if (v116 >> 1 > v115) {
        unint64_t v115 = v116 >> 1;
      }
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v117 = v115;
      }
      if (v117)
      {
        v118 = (char *)sub_20B05D1AC((uint64_t)v13, v117);
        v113 = *(unsigned __int32 **)a2;
        v94 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v118 = 0;
      }
      v128 = &v118[4 * v114];
      uint64_t v12 = &v118[4 * v117];
      *(_DWORD *)v128 = v1527.n128_u32[2];
      v112 = (unsigned __int32 *)(v128 + 4);
      while (v94 != v113)
      {
        int v129 = *--v94;
        *((_DWORD *)v128 - 1) = v129;
        v128 -= 4;
      }
      *(void *)a2 = v128;
      *(void *)(a2 + 8) = v112;
      *(void *)(a2 + 16) = v12;
      if (v113)
      {
        operator delete(v113);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v94 = v1527.n128_u32[2];
      v112 = v94 + 1;
    }
    *float v9 = v112;
    if (v112 >= (unsigned __int32 *)v12)
    {
      unint64_t v131 = *(unsigned __int32 **)a2;
      uint64_t v132 = ((uint64_t)v112 - *(void *)a2) >> 2;
      unint64_t v133 = v132 + 1;
      if ((unint64_t)(v132 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v134 = v12 - (char *)v131;
      if (v134 >> 1 > v133) {
        unint64_t v133 = v134 >> 1;
      }
      if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v135 = v133;
      }
      if (v135)
      {
        v136 = (char *)sub_20B05D1AC((uint64_t)v13, v135);
        unint64_t v131 = *(unsigned __int32 **)a2;
        v112 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v136 = 0;
      }
      v146 = &v136[4 * v132];
      uint64_t v12 = &v136[4 * v135];
      *(_DWORD *)v146 = v1527.n128_u32[0];
      v130 = (unsigned __int32 *)(v146 + 4);
      while (v112 != v131)
      {
        int v147 = *--v112;
        *((_DWORD *)v146 - 1) = v147;
        v146 -= 4;
      }
      *(void *)a2 = v146;
      *(void *)(a2 + 8) = v130;
      *(void *)(a2 + 16) = v12;
      if (v131)
      {
        operator delete(v131);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v112 = v1527.n128_u32[0];
      v130 = v112 + 1;
    }
    *float v9 = v130;
    if (v130 >= (unsigned __int32 *)v12)
    {
      v149 = *(unsigned __int32 **)a2;
      uint64_t v150 = ((uint64_t)v130 - *(void *)a2) >> 2;
      unint64_t v151 = v150 + 1;
      if ((unint64_t)(v150 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v152 = v12 - (char *)v149;
      if (v152 >> 1 > v151) {
        unint64_t v151 = v152 >> 1;
      }
      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v153 = v151;
      }
      if (v153)
      {
        v154 = (char *)sub_20B05D1AC((uint64_t)v13, v153);
        v149 = *(unsigned __int32 **)a2;
        v130 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v154 = 0;
      }
      v164 = &v154[4 * v150];
      uint64_t v12 = &v154[4 * v153];
      *(_DWORD *)v164 = a5.n128_u32[1];
      v148 = (unsigned __int32 *)(v164 + 4);
      while (v130 != v149)
      {
        int v165 = *--v130;
        *((_DWORD *)v164 - 1) = v165;
        v164 -= 4;
      }
      *(void *)a2 = v164;
      *(void *)(a2 + 8) = v148;
      *(void *)(a2 + 16) = v12;
      if (v149)
      {
        operator delete(v149);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v130 = a5.n128_u32[1];
      v148 = v130 + 1;
    }
    *float v9 = v148;
    if (v148 >= (unsigned __int32 *)v12)
    {
      v167 = *(unsigned __int32 **)a2;
      uint64_t v168 = ((uint64_t)v148 - *(void *)a2) >> 2;
      unint64_t v169 = v168 + 1;
      if ((unint64_t)(v168 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v170 = v12 - (char *)v167;
      if (v170 >> 1 > v169) {
        unint64_t v169 = v170 >> 1;
      }
      if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v171 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v171 = v169;
      }
      if (v171)
      {
        v172 = (char *)sub_20B05D1AC((uint64_t)v13, v171);
        v167 = *(unsigned __int32 **)a2;
        v148 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v172 = 0;
      }
      uint64_t v182 = &v172[4 * v168];
      uint64_t v12 = &v172[4 * v171];
      *(_DWORD *)uint64_t v182 = v1527.n128_u32[2];
      v166 = (unsigned __int32 *)(v182 + 4);
      while (v148 != v167)
      {
        int v183 = *--v148;
        *((_DWORD *)v182 - 1) = v183;
        v182 -= 4;
      }
      *(void *)a2 = v182;
      *(void *)(a2 + 8) = v166;
      *(void *)(a2 + 16) = v12;
      if (v167)
      {
        operator delete(v167);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v148 = v1527.n128_u32[2];
      v166 = v148 + 1;
    }
    *float v9 = v166;
    if (v166 >= (unsigned __int32 *)v12)
    {
      uint64_t v185 = *(unsigned __int32 **)a2;
      uint64_t v186 = ((uint64_t)v166 - *(void *)a2) >> 2;
      unint64_t v187 = v186 + 1;
      if ((unint64_t)(v186 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v188 = v12 - (char *)v185;
      if (v188 >> 1 > v187) {
        unint64_t v187 = v188 >> 1;
      }
      if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v189 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v189 = v187;
      }
      if (v189)
      {
        v190 = (char *)sub_20B05D1AC((uint64_t)v13, v189);
        uint64_t v185 = *(unsigned __int32 **)a2;
        v166 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v190 = 0;
      }
      v200 = &v190[4 * v186];
      uint64_t v12 = &v190[4 * v189];
      *(_DWORD *)v200 = a5.n128_u32[0];
      v184 = (unsigned __int32 *)(v200 + 4);
      while (v166 != v185)
      {
        int v201 = *--v166;
        *((_DWORD *)v200 - 1) = v201;
        v200 -= 4;
      }
      *(void *)a2 = v200;
      *(void *)(a2 + 8) = v184;
      *(void *)(a2 + 16) = v12;
      if (v185)
      {
        operator delete(v185);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v166 = a5.n128_u32[0];
      v184 = v166 + 1;
    }
    *float v9 = v184;
    if (v184 >= (unsigned __int32 *)v12)
    {
      v203 = *(unsigned __int32 **)a2;
      uint64_t v204 = ((uint64_t)v184 - *(void *)a2) >> 2;
      unint64_t v205 = v204 + 1;
      if ((unint64_t)(v204 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v206 = v12 - (char *)v203;
      if (v206 >> 1 > v205) {
        unint64_t v205 = v206 >> 1;
      }
      if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v207 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v207 = v205;
      }
      if (v207)
      {
        v208 = (char *)sub_20B05D1AC((uint64_t)v13, v207);
        v203 = *(unsigned __int32 **)a2;
        v184 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v208 = 0;
      }
      v218 = &v208[4 * v204];
      uint64_t v12 = &v208[4 * v207];
      *(_DWORD *)v218 = a5.n128_u32[1];
      v202 = (unsigned __int32 *)(v218 + 4);
      while (v184 != v203)
      {
        int v219 = *--v184;
        *((_DWORD *)v218 - 1) = v219;
        v218 -= 4;
      }
      *(void *)a2 = v218;
      *(void *)(a2 + 8) = v202;
      *(void *)(a2 + 16) = v12;
      if (v203)
      {
        operator delete(v203);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v184 = a5.n128_u32[1];
      v202 = v184 + 1;
    }
    *float v9 = v202;
    if (v202 >= (unsigned __int32 *)v12)
    {
      v221 = *(unsigned __int32 **)a2;
      uint64_t v222 = ((uint64_t)v202 - *(void *)a2) >> 2;
      unint64_t v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v224 = v12 - (char *)v221;
      if (v224 >> 1 > v223) {
        unint64_t v223 = v224 >> 1;
      }
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v225 = v223;
      }
      if (v225)
      {
        v226 = (char *)sub_20B05D1AC((uint64_t)v13, v225);
        v221 = *(unsigned __int32 **)a2;
        v202 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v226 = 0;
      }
      v241 = &v226[4 * v222];
      uint64_t v12 = &v226[4 * v225];
      *(_DWORD *)v241 = v1527.n128_u32[2];
      v220 = (unsigned __int32 *)(v241 + 4);
      while (v202 != v221)
      {
        int v242 = *--v202;
        *((_DWORD *)v241 - 1) = v242;
        v241 -= 4;
      }
      *(void *)a2 = v241;
      *(void *)(a2 + 8) = v220;
      *(void *)(a2 + 16) = v12;
      if (v221)
      {
        operator delete(v221);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v202 = v1527.n128_u32[2];
      v220 = v202 + 1;
    }
    *float v9 = v220;
    if (v220 >= (unsigned __int32 *)v12)
    {
      v244 = *(unsigned __int32 **)a2;
      uint64_t v245 = ((uint64_t)v220 - *(void *)a2) >> 2;
      unint64_t v246 = v245 + 1;
      if ((unint64_t)(v245 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v247 = v12 - (char *)v244;
      if (v247 >> 1 > v246) {
        unint64_t v246 = v247 >> 1;
      }
      if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v248 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v248 = v246;
      }
      if (v248)
      {
        v249 = (char *)sub_20B05D1AC((uint64_t)v13, v248);
        v244 = *(unsigned __int32 **)a2;
        v220 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v249 = 0;
      }
      v260 = &v249[4 * v245];
      uint64_t v12 = &v249[4 * v248];
      *(_DWORD *)v260 = v1527.n128_u32[0];
      v243 = (unsigned __int32 *)(v260 + 4);
      while (v220 != v244)
      {
        int v261 = *--v220;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *(void *)a2 = v260;
      *(void *)(a2 + 8) = v243;
      *(void *)(a2 + 16) = v12;
      if (v244)
      {
        operator delete(v244);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v220 = v1527.n128_u32[0];
      v243 = v220 + 1;
    }
    *float v9 = v243;
    if (v243 >= (unsigned __int32 *)v12)
    {
      v263 = *(unsigned __int32 **)a2;
      uint64_t v264 = ((uint64_t)v243 - *(void *)a2) >> 2;
      unint64_t v265 = v264 + 1;
      if ((unint64_t)(v264 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v266 = v12 - (char *)v263;
      if (v266 >> 1 > v265) {
        unint64_t v265 = v266 >> 1;
      }
      if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v267 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v267 = v265;
      }
      if (v267)
      {
        v268 = (char *)sub_20B05D1AC((uint64_t)v13, v267);
        v263 = *(unsigned __int32 **)a2;
        v243 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v268 = 0;
      }
      v279 = (unsigned __int32 *)&v268[4 * v264];
      uint64_t v12 = &v268[4 * v267];
      unsigned __int32 *v279 = v38;
      v262 = v279 + 1;
      while (v243 != v263)
      {
        unsigned __int32 v280 = *--v243;
        *--v279 = v280;
      }
      *(void *)a2 = v279;
      *(void *)(a2 + 8) = v262;
      *(void *)(a2 + 16) = v12;
      if (v263)
      {
        operator delete(v263);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v243 = v38;
      v262 = v243 + 1;
    }
    *float v9 = v262;
    if (v262 >= (unsigned __int32 *)v12)
    {
      v282 = *(unsigned __int32 **)a2;
      uint64_t v283 = ((uint64_t)v262 - *(void *)a2) >> 2;
      unint64_t v284 = v283 + 1;
      if ((unint64_t)(v283 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v285 = v12 - (char *)v282;
      if (v285 >> 1 > v284) {
        unint64_t v284 = v285 >> 1;
      }
      if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v286 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v286 = v284;
      }
      if (v286)
      {
        v287 = (char *)sub_20B05D1AC((uint64_t)v13, v286);
        v282 = *(unsigned __int32 **)a2;
        v262 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v287 = 0;
      }
      v297 = &v287[4 * v283];
      uint64_t v12 = &v287[4 * v286];
      *(_DWORD *)v297 = a5.n128_u32[2];
      v281 = (unsigned __int32 *)(v297 + 4);
      while (v262 != v282)
      {
        int v298 = *--v262;
        *((_DWORD *)v297 - 1) = v298;
        v297 -= 4;
      }
      *(void *)a2 = v297;
      *(void *)(a2 + 8) = v281;
      *(void *)(a2 + 16) = v12;
      if (v282)
      {
        operator delete(v282);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v262 = a5.n128_u32[2];
      v281 = v262 + 1;
    }
    *float v9 = v281;
    if (v281 >= (unsigned __int32 *)v12)
    {
      v300 = *(unsigned __int32 **)a2;
      uint64_t v301 = ((uint64_t)v281 - *(void *)a2) >> 2;
      unint64_t v302 = v301 + 1;
      if ((unint64_t)(v301 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v303 = v12 - (char *)v300;
      if (v303 >> 1 > v302) {
        unint64_t v302 = v303 >> 1;
      }
      if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v304 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v304 = v302;
      }
      if (v304)
      {
        v305 = (char *)sub_20B05D1AC((uint64_t)v13, v304);
        v300 = *(unsigned __int32 **)a2;
        v281 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v305 = 0;
      }
      v316 = &v305[4 * v301];
      uint64_t v12 = &v305[4 * v304];
      *(_DWORD *)v316 = a5.n128_u32[0];
      v299 = (unsigned __int32 *)(v316 + 4);
      while (v281 != v300)
      {
        int v317 = *--v281;
        *((_DWORD *)v316 - 1) = v317;
        v316 -= 4;
      }
      *(void *)a2 = v316;
      *(void *)(a2 + 8) = v299;
      *(void *)(a2 + 16) = v12;
      if (v300)
      {
        operator delete(v300);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v281 = a5.n128_u32[0];
      v299 = v281 + 1;
    }
    *float v9 = v299;
    if (v299 >= (unsigned __int32 *)v12)
    {
      v319 = *(unsigned __int32 **)a2;
      uint64_t v320 = ((uint64_t)v299 - *(void *)a2) >> 2;
      unint64_t v321 = v320 + 1;
      if ((unint64_t)(v320 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v322 = v12 - (char *)v319;
      if (v322 >> 1 > v321) {
        unint64_t v321 = v322 >> 1;
      }
      if ((unint64_t)v322 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v323 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v323 = v321;
      }
      if (v323)
      {
        v324 = (char *)sub_20B05D1AC((uint64_t)v13, v323);
        v319 = *(unsigned __int32 **)a2;
        v299 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v324 = 0;
      }
      v335 = (unsigned __int32 *)&v324[4 * v320];
      uint64_t v12 = &v324[4 * v323];
      unsigned __int32 *v335 = v38;
      v318 = v335 + 1;
      while (v299 != v319)
      {
        unsigned __int32 v336 = *--v299;
        *--v335 = v336;
      }
      *(void *)a2 = v335;
      *(void *)(a2 + 8) = v318;
      *(void *)(a2 + 16) = v12;
      if (v319)
      {
        operator delete(v319);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v299 = v38;
      v318 = v299 + 1;
    }
    *float v9 = v318;
    unsigned __int32 v337 = v1527.n128_u32[0];
    if (v318 >= (unsigned __int32 *)v12)
    {
      v339 = *(unsigned __int32 **)a2;
      uint64_t v340 = ((uint64_t)v318 - *(void *)a2) >> 2;
      unint64_t v341 = v340 + 1;
      if ((unint64_t)(v340 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v342 = v12 - (char *)v339;
      if (v342 >> 1 > v341) {
        unint64_t v341 = v342 >> 1;
      }
      if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v343 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v343 = v341;
      }
      if (v343)
      {
        v344 = (char *)sub_20B05D1AC((uint64_t)v13, v343);
        v339 = *(unsigned __int32 **)a2;
        v318 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v344 = 0;
      }
      v357 = &v344[4 * v340];
      uint64_t v12 = &v344[4 * v343];
      *(_DWORD *)v357 = a5.n128_u32[2];
      v338 = (unsigned __int32 *)(v357 + 4);
      while (v318 != v339)
      {
        int v358 = *--v318;
        *((_DWORD *)v357 - 1) = v358;
        v357 -= 4;
      }
      *(void *)a2 = v357;
      *(void *)(a2 + 8) = v338;
      *(void *)(a2 + 16) = v12;
      if (v339)
      {
        operator delete(v339);
        uint64_t v12 = *v13;
      }
      unsigned __int32 v337 = v1527.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v318 = a5.n128_u32[2];
      v338 = v318 + 1;
    }
    *float v9 = v338;
    if (v338 >= (unsigned __int32 *)v12)
    {
      v360 = *(unsigned __int32 **)a2;
      uint64_t v361 = ((uint64_t)v338 - *(void *)a2) >> 2;
      unint64_t v362 = v361 + 1;
      if ((unint64_t)(v361 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v363 = v12 - (char *)v360;
      if (v363 >> 1 > v362) {
        unint64_t v362 = v363 >> 1;
      }
      if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v364 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v364 = v362;
      }
      if (v364)
      {
        v365 = (char *)sub_20B05D1AC((uint64_t)v13, v364);
        unsigned __int32 v337 = v1527.n128_u32[0];
        v366 = v365;
        v360 = *(unsigned __int32 **)a2;
        v338 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v366 = 0;
      }
      v376 = (unsigned __int32 *)&v366[4 * v361];
      uint64_t v12 = &v366[4 * v364];
      unsigned __int32 *v376 = v337;
      v359 = v376 + 1;
      while (v338 != v360)
      {
        unsigned __int32 v377 = *--v338;
        *--v376 = v377;
      }
      *(void *)a2 = v376;
      *(void *)(a2 + 8) = v359;
      *(void *)(a2 + 16) = v12;
      if (v360)
      {
        operator delete(v360);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v338 = v337;
      v359 = v338 + 1;
    }
    *float v9 = v359;
    if (v359 >= (unsigned __int32 *)v12)
    {
      v379 = *(unsigned __int32 **)a2;
      uint64_t v380 = ((uint64_t)v359 - *(void *)a2) >> 2;
      unint64_t v381 = v380 + 1;
      if ((unint64_t)(v380 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v382 = v12 - (char *)v379;
      if (v382 >> 1 > v381) {
        unint64_t v381 = v382 >> 1;
      }
      if ((unint64_t)v382 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v383 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v383 = v381;
      }
      if (v383)
      {
        v384 = (char *)sub_20B05D1AC((uint64_t)v13, v383);
        v379 = *(unsigned __int32 **)a2;
        v359 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v384 = 0;
      }
      v394 = &v384[4 * v380];
      uint64_t v12 = &v384[4 * v383];
      *(_DWORD *)v394 = a5.n128_u32[1];
      v378 = (unsigned __int32 *)(v394 + 4);
      while (v359 != v379)
      {
        int v395 = *--v359;
        *((_DWORD *)v394 - 1) = v395;
        v394 -= 4;
      }
      *(void *)a2 = v394;
      *(void *)(a2 + 8) = v378;
      *(void *)(a2 + 16) = v12;
      if (v379)
      {
        operator delete(v379);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v359 = a5.n128_u32[1];
      v378 = v359 + 1;
    }
    *float v9 = v378;
    if (v378 >= (unsigned __int32 *)v12)
    {
      v397 = *(unsigned __int32 **)a2;
      uint64_t v398 = ((uint64_t)v378 - *(void *)a2) >> 2;
      unint64_t v399 = v398 + 1;
      if ((unint64_t)(v398 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v400 = v12 - (char *)v397;
      if (v400 >> 1 > v399) {
        unint64_t v399 = v400 >> 1;
      }
      if ((unint64_t)v400 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v401 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v401 = v399;
      }
      if (v401)
      {
        v402 = (char *)sub_20B05D1AC((uint64_t)v13, v401);
        v397 = *(unsigned __int32 **)a2;
        v378 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v402 = 0;
      }
      v412 = &v402[4 * v398];
      uint64_t v12 = &v402[4 * v401];
      *(_DWORD *)v412 = a5.n128_u32[2];
      v396 = (unsigned __int32 *)(v412 + 4);
      while (v378 != v397)
      {
        int v413 = *--v378;
        *((_DWORD *)v412 - 1) = v413;
        v412 -= 4;
      }
      *(void *)a2 = v412;
      *(void *)(a2 + 8) = v396;
      *(void *)(a2 + 16) = v12;
      if (v397)
      {
        operator delete(v397);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v378 = a5.n128_u32[2];
      v396 = v378 + 1;
    }
    *float v9 = v396;
    if (v396 >= (unsigned __int32 *)v12)
    {
      v415 = *(unsigned __int32 **)a2;
      uint64_t v416 = ((uint64_t)v396 - *(void *)a2) >> 2;
      unint64_t v417 = v416 + 1;
      if ((unint64_t)(v416 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v418 = v12 - (char *)v415;
      if (v418 >> 1 > v417) {
        unint64_t v417 = v418 >> 1;
      }
      if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v419 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v419 = v417;
      }
      if (v419)
      {
        v420 = (char *)sub_20B05D1AC((uint64_t)v13, v419);
        v415 = *(unsigned __int32 **)a2;
        v396 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v420 = 0;
      }
      v430 = &v420[4 * v416];
      uint64_t v12 = &v420[4 * v419];
      *(_DWORD *)v430 = a5.n128_u32[0];
      v414 = (unsigned __int32 *)(v430 + 4);
      while (v396 != v415)
      {
        int v431 = *--v396;
        *((_DWORD *)v430 - 1) = v431;
        v430 -= 4;
      }
      *(void *)a2 = v430;
      *(void *)(a2 + 8) = v414;
      *(void *)(a2 + 16) = v12;
      if (v415)
      {
        operator delete(v415);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v396 = a5.n128_u32[0];
      v414 = v396 + 1;
    }
    *float v9 = v414;
    if (v414 >= (unsigned __int32 *)v12)
    {
      v433 = *(unsigned __int32 **)a2;
      uint64_t v434 = ((uint64_t)v414 - *(void *)a2) >> 2;
      unint64_t v435 = v434 + 1;
      if ((unint64_t)(v434 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v436 = v12 - (char *)v433;
      if (v436 >> 1 > v435) {
        unint64_t v435 = v436 >> 1;
      }
      if ((unint64_t)v436 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v437 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v437 = v435;
      }
      if (v437)
      {
        v438 = (char *)sub_20B05D1AC((uint64_t)v13, v437);
        v433 = *(unsigned __int32 **)a2;
        v414 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v438 = 0;
      }
      v448 = &v438[4 * v434];
      uint64_t v12 = &v438[4 * v437];
      *(_DWORD *)v448 = a5.n128_u32[1];
      v432 = (unsigned __int32 *)(v448 + 4);
      while (v414 != v433)
      {
        int v449 = *--v414;
        *((_DWORD *)v448 - 1) = v449;
        v448 -= 4;
      }
      *(void *)a2 = v448;
      *(void *)(a2 + 8) = v432;
      *(void *)(a2 + 16) = v12;
      if (v433)
      {
        operator delete(v433);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v414 = a5.n128_u32[1];
      v432 = v414 + 1;
    }
    *float v9 = v432;
    if (v432 >= (unsigned __int32 *)v12)
    {
      v451 = *(unsigned __int32 **)a2;
      uint64_t v452 = ((uint64_t)v432 - *(void *)a2) >> 2;
      unint64_t v453 = v452 + 1;
      if ((unint64_t)(v452 + 1) >> 62) {
        goto LABEL_2554;
      }
      uint64_t v454 = v12 - (char *)v451;
      if (v454 >> 1 > v453) {
        unint64_t v453 = v454 >> 1;
      }
      if ((unint64_t)v454 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v455 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v455 = v453;
      }
      if (v455)
      {
        v456 = (char *)sub_20B05D1AC((uint64_t)v13, v455);
        v451 = *(unsigned __int32 **)a2;
        v432 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        v456 = 0;
      }
      v466 = &v456[4 * v452];
      v467 = &v456[4 * v455];
      *(_DWORD *)v466 = a5.n128_u32[2];
      v450 = (unsigned __int32 *)(v466 + 4);
      while (v432 != v451)
      {
        int v468 = *--v432;
        *((_DWORD *)v466 - 1) = v468;
        v466 -= 4;
      }
      *(void *)a2 = v466;
      *(void *)(a2 + 8) = v450;
      *(void *)(a2 + 16) = v467;
      if (v451) {
        operator delete(v451);
      }
    }
    else
    {
      unsigned __int32 *v432 = a5.n128_u32[2];
      v450 = v432 + 1;
    }
    unint64_t v469 = v11 / 3;
    *float v9 = v450;
    v471 = a3 + 2;
    v470 = a3[2];
    v472 = a3[1];
    if (v472 >= v470)
    {
      v474 = *a3;
      uint64_t v475 = (v472 - *a3) >> 2;
      unint64_t v476 = v475 + 1;
      if ((unint64_t)(v475 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v477 = v470 - v474;
      if (v477 >> 1 > v476) {
        unint64_t v476 = v477 >> 1;
      }
      if ((unint64_t)v477 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v478 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v478 = v476;
      }
      if (v478)
      {
        v479 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v478);
        v474 = *a3;
        v472 = a3[1];
      }
      else
      {
        v479 = 0;
      }
      v489 = &v479[4 * v475];
      v470 = &v479[4 * v478];
      *(_DWORD *)v489 = v469;
      v473 = v489 + 4;
      while (v472 != v474)
      {
        int v490 = *((_DWORD *)v472 - 1);
        v472 -= 4;
        *((_DWORD *)v489 - 1) = v490;
        v489 -= 4;
      }
      *a3 = v489;
      a3[1] = v473;
      a3[2] = v470;
      if (v474)
      {
        operator delete(v474);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v472 = v469;
      v473 = v472 + 4;
    }
    a3[1] = v473;
    int v491 = v469 + 1;
    if (v473 >= v470)
    {
      v493 = *a3;
      uint64_t v494 = (v473 - *a3) >> 2;
      unint64_t v495 = v494 + 1;
      if ((unint64_t)(v494 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v496 = v470 - v493;
      if (v496 >> 1 > v495) {
        unint64_t v495 = v496 >> 1;
      }
      if ((unint64_t)v496 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v497 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v497 = v495;
      }
      if (v497)
      {
        v498 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v497);
        v493 = *a3;
        v473 = a3[1];
      }
      else
      {
        v498 = 0;
      }
      v508 = &v498[4 * v494];
      v470 = &v498[4 * v497];
      *(_DWORD *)v508 = v491;
      v492 = v508 + 4;
      while (v473 != v493)
      {
        int v509 = *((_DWORD *)v473 - 1);
        v473 -= 4;
        *((_DWORD *)v508 - 1) = v509;
        v508 -= 4;
      }
      *a3 = v508;
      a3[1] = v492;
      a3[2] = v470;
      if (v493)
      {
        operator delete(v493);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v473 = v491;
      v492 = v473 + 4;
    }
    a3[1] = v492;
    if (v492 >= v470)
    {
      v511 = *a3;
      uint64_t v512 = (v492 - *a3) >> 2;
      unint64_t v513 = v512 + 1;
      if ((unint64_t)(v512 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v514 = v470 - v511;
      if (v514 >> 1 > v513) {
        unint64_t v513 = v514 >> 1;
      }
      if ((unint64_t)v514 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v515 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v515 = v513;
      }
      if (v515)
      {
        v516 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v515);
        v511 = *a3;
        v492 = a3[1];
      }
      else
      {
        v516 = 0;
      }
      v526 = &v516[4 * v512];
      v470 = &v516[4 * v515];
      *(_DWORD *)v526 = v469;
      v510 = v526 + 4;
      while (v492 != v511)
      {
        int v527 = *((_DWORD *)v492 - 1);
        v492 -= 4;
        *((_DWORD *)v526 - 1) = v527;
        v526 -= 4;
      }
      *a3 = v526;
      a3[1] = v510;
      a3[2] = v470;
      if (v511)
      {
        operator delete(v511);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v492 = v469;
      v510 = v492 + 4;
    }
    a3[1] = v510;
    int v528 = v469 + 2;
    if (v510 >= v470)
    {
      v530 = *a3;
      uint64_t v531 = (v510 - *a3) >> 2;
      unint64_t v532 = v531 + 1;
      if ((unint64_t)(v531 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v533 = v470 - v530;
      if (v533 >> 1 > v532) {
        unint64_t v532 = v533 >> 1;
      }
      if ((unint64_t)v533 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v534 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v534 = v532;
      }
      if (v534)
      {
        v535 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v534);
        v530 = *a3;
        v510 = a3[1];
      }
      else
      {
        v535 = 0;
      }
      v545 = &v535[4 * v531];
      v470 = &v535[4 * v534];
      *(_DWORD *)v545 = v528;
      v529 = v545 + 4;
      while (v510 != v530)
      {
        int v546 = *((_DWORD *)v510 - 1);
        v510 -= 4;
        *((_DWORD *)v545 - 1) = v546;
        v545 -= 4;
      }
      *a3 = v545;
      a3[1] = v529;
      a3[2] = v470;
      if (v530)
      {
        operator delete(v530);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v510 = v528;
      v529 = v510 + 4;
    }
    a3[1] = v529;
    if (v529 >= v470)
    {
      v548 = *a3;
      uint64_t v549 = (v529 - *a3) >> 2;
      unint64_t v550 = v549 + 1;
      if ((unint64_t)(v549 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v551 = v470 - v548;
      if (v551 >> 1 > v550) {
        unint64_t v550 = v551 >> 1;
      }
      if ((unint64_t)v551 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v552 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v552 = v550;
      }
      if (v552)
      {
        v553 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v552);
        v548 = *a3;
        v529 = a3[1];
      }
      else
      {
        v553 = 0;
      }
      v563 = &v553[4 * v549];
      v470 = &v553[4 * v552];
      *(_DWORD *)v563 = v469;
      v547 = v563 + 4;
      while (v529 != v548)
      {
        int v564 = *((_DWORD *)v529 - 1);
        v529 -= 4;
        *((_DWORD *)v563 - 1) = v564;
        v563 -= 4;
      }
      *a3 = v563;
      a3[1] = v547;
      a3[2] = v470;
      if (v548)
      {
        operator delete(v548);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v529 = v469;
      v547 = v529 + 4;
    }
    a3[1] = v547;
    int v565 = v469 + 4;
    if (v547 >= v470)
    {
      v567 = *a3;
      uint64_t v568 = (v547 - *a3) >> 2;
      unint64_t v569 = v568 + 1;
      if ((unint64_t)(v568 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v570 = v470 - v567;
      if (v570 >> 1 > v569) {
        unint64_t v569 = v570 >> 1;
      }
      if ((unint64_t)v570 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v571 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v571 = v569;
      }
      if (v571)
      {
        v572 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v571);
        v567 = *a3;
        v547 = a3[1];
      }
      else
      {
        v572 = 0;
      }
      v586 = &v572[4 * v568];
      v470 = &v572[4 * v571];
      *(_DWORD *)v586 = v565;
      v566 = v586 + 4;
      while (v547 != v567)
      {
        int v587 = *((_DWORD *)v547 - 1);
        v547 -= 4;
        *((_DWORD *)v586 - 1) = v587;
        v586 -= 4;
      }
      *a3 = v586;
      a3[1] = v566;
      a3[2] = v470;
      if (v567)
      {
        operator delete(v567);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v547 = v565;
      v566 = v547 + 4;
    }
    a3[1] = v566;
    if (v566 >= v470)
    {
      v589 = *a3;
      uint64_t v590 = (v566 - *a3) >> 2;
      unint64_t v591 = v590 + 1;
      if ((unint64_t)(v590 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v592 = v470 - v589;
      if (v592 >> 1 > v591) {
        unint64_t v591 = v592 >> 1;
      }
      if ((unint64_t)v592 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v593 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v593 = v591;
      }
      if (v593)
      {
        v594 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v593);
        v589 = *a3;
        v566 = a3[1];
      }
      else
      {
        v594 = 0;
      }
      v605 = &v594[4 * v590];
      v470 = &v594[4 * v593];
      *(_DWORD *)v605 = v491;
      v588 = v605 + 4;
      while (v566 != v589)
      {
        int v606 = *((_DWORD *)v566 - 1);
        v566 -= 4;
        *((_DWORD *)v605 - 1) = v606;
        v605 -= 4;
      }
      *a3 = v605;
      a3[1] = v588;
      a3[2] = v470;
      if (v589)
      {
        operator delete(v589);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v566 = v491;
      v588 = v566 + 4;
    }
    a3[1] = v588;
    int v607 = v469 + 3;
    if (v588 >= v470)
    {
      v609 = *a3;
      uint64_t v610 = (v588 - *a3) >> 2;
      unint64_t v611 = v610 + 1;
      if ((unint64_t)(v610 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v612 = v470 - v609;
      if (v612 >> 1 > v611) {
        unint64_t v611 = v612 >> 1;
      }
      if ((unint64_t)v612 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v613 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v613 = v611;
      }
      if (v613)
      {
        v614 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v613);
        v609 = *a3;
        v588 = a3[1];
      }
      else
      {
        v614 = 0;
      }
      v625 = &v614[4 * v610];
      v470 = &v614[4 * v613];
      *(_DWORD *)v625 = v607;
      v608 = v625 + 4;
      while (v588 != v609)
      {
        int v626 = *((_DWORD *)v588 - 1);
        v588 -= 4;
        *((_DWORD *)v625 - 1) = v626;
        v625 -= 4;
      }
      *a3 = v625;
      a3[1] = v608;
      a3[2] = v470;
      if (v609)
      {
        operator delete(v609);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v588 = v607;
      v608 = v588 + 4;
    }
    a3[1] = v608;
    if (v608 >= v470)
    {
      v628 = *a3;
      uint64_t v629 = (v608 - *a3) >> 2;
      unint64_t v630 = v629 + 1;
      if ((unint64_t)(v629 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v631 = v470 - v628;
      if (v631 >> 1 > v630) {
        unint64_t v630 = v631 >> 1;
      }
      if ((unint64_t)v631 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v632 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v632 = v630;
      }
      if (v632)
      {
        v633 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v632);
        v628 = *a3;
        v608 = a3[1];
      }
      else
      {
        v633 = 0;
      }
      v643 = &v633[4 * v629];
      v470 = &v633[4 * v632];
      *(_DWORD *)v643 = v491;
      v627 = v643 + 4;
      while (v608 != v628)
      {
        int v644 = *((_DWORD *)v608 - 1);
        v608 -= 4;
        *((_DWORD *)v643 - 1) = v644;
        v643 -= 4;
      }
      *a3 = v643;
      a3[1] = v627;
      a3[2] = v470;
      if (v628)
      {
        operator delete(v628);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v608 = v491;
      v627 = v608 + 4;
    }
    a3[1] = v627;
    int v645 = v469 + 5;
    if (v627 >= v470)
    {
      v647 = *a3;
      uint64_t v648 = (v627 - *a3) >> 2;
      unint64_t v649 = v648 + 1;
      if ((unint64_t)(v648 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v650 = v470 - v647;
      if (v650 >> 1 > v649) {
        unint64_t v649 = v650 >> 1;
      }
      if ((unint64_t)v650 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v651 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v651 = v649;
      }
      if (v651)
      {
        v652 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v651);
        v647 = *a3;
        v627 = a3[1];
      }
      else
      {
        v652 = 0;
      }
      v663 = &v652[4 * v648];
      v470 = &v652[4 * v651];
      *(_DWORD *)v663 = v645;
      v646 = v663 + 4;
      while (v627 != v647)
      {
        int v664 = *((_DWORD *)v627 - 1);
        v627 -= 4;
        *((_DWORD *)v663 - 1) = v664;
        v663 -= 4;
      }
      *a3 = v663;
      a3[1] = v646;
      a3[2] = v470;
      if (v647)
      {
        operator delete(v647);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v627 = v645;
      v646 = v627 + 4;
    }
    a3[1] = v646;
    if (v646 >= v470)
    {
      v666 = *a3;
      uint64_t v667 = (v646 - *a3) >> 2;
      unint64_t v668 = v667 + 1;
      if ((unint64_t)(v667 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v669 = v470 - v666;
      if (v669 >> 1 > v668) {
        unint64_t v668 = v669 >> 1;
      }
      if ((unint64_t)v669 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v670 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v670 = v668;
      }
      if (v670)
      {
        v671 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v670);
        v666 = *a3;
        v646 = a3[1];
      }
      else
      {
        v671 = 0;
      }
      v682 = &v671[4 * v667];
      v470 = &v671[4 * v670];
      *(_DWORD *)v682 = v528;
      v665 = v682 + 4;
      while (v646 != v666)
      {
        int v683 = *((_DWORD *)v646 - 1);
        v646 -= 4;
        *((_DWORD *)v682 - 1) = v683;
        v682 -= 4;
      }
      *a3 = v682;
      a3[1] = v665;
      a3[2] = v470;
      if (v666)
      {
        operator delete(v666);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v646 = v528;
      v665 = v646 + 4;
    }
    a3[1] = v665;
    if (v665 >= v470)
    {
      v685 = *a3;
      uint64_t v686 = (v665 - *a3) >> 2;
      unint64_t v687 = v686 + 1;
      if ((unint64_t)(v686 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v688 = v470 - v685;
      if (v688 >> 1 > v687) {
        unint64_t v687 = v688 >> 1;
      }
      if ((unint64_t)v688 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v689 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v689 = v687;
      }
      if (v689)
      {
        v690 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v689);
        v685 = *a3;
        v665 = a3[1];
      }
      else
      {
        v690 = 0;
      }
      v703 = &v690[4 * v686];
      v470 = &v690[4 * v689];
      *(_DWORD *)v703 = v607;
      v684 = v703 + 4;
      while (v665 != v685)
      {
        int v704 = *((_DWORD *)v665 - 1);
        v665 -= 4;
        *((_DWORD *)v703 - 1) = v704;
        v703 -= 4;
      }
      *a3 = v703;
      a3[1] = v684;
      a3[2] = v470;
      if (v685)
      {
        operator delete(v685);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v665 = v607;
      v684 = v665 + 4;
    }
    a3[1] = v684;
    if (v684 >= v470)
    {
      v706 = *a3;
      uint64_t v707 = (v684 - *a3) >> 2;
      unint64_t v708 = v707 + 1;
      if ((unint64_t)(v707 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v709 = v470 - v706;
      if (v709 >> 1 > v708) {
        unint64_t v708 = v709 >> 1;
      }
      if ((unint64_t)v709 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v710 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v710 = v708;
      }
      if (v710)
      {
        v711 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v710);
        v706 = *a3;
        v684 = a3[1];
      }
      else
      {
        v711 = 0;
      }
      v721 = &v711[4 * v707];
      v470 = &v711[4 * v710];
      *(_DWORD *)v721 = v528;
      v705 = v721 + 4;
      while (v684 != v706)
      {
        int v722 = *((_DWORD *)v684 - 1);
        v684 -= 4;
        *((_DWORD *)v721 - 1) = v722;
        v721 -= 4;
      }
      *a3 = v721;
      a3[1] = v705;
      a3[2] = v470;
      if (v706)
      {
        operator delete(v706);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v684 = v528;
      v705 = v684 + 4;
    }
    a3[1] = v705;
    int v723 = v469 + 6;
    if (v705 >= v470)
    {
      v725 = *a3;
      uint64_t v726 = (v705 - *a3) >> 2;
      unint64_t v727 = v726 + 1;
      if ((unint64_t)(v726 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v728 = v470 - v725;
      if (v728 >> 1 > v727) {
        unint64_t v727 = v728 >> 1;
      }
      if ((unint64_t)v728 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v729 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v729 = v727;
      }
      if (v729)
      {
        v730 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v729);
        v725 = *a3;
        v705 = a3[1];
      }
      else
      {
        v730 = 0;
      }
      v740 = &v730[4 * v726];
      v470 = &v730[4 * v729];
      *(_DWORD *)v740 = v723;
      v724 = v740 + 4;
      while (v705 != v725)
      {
        int v741 = *((_DWORD *)v705 - 1);
        v705 -= 4;
        *((_DWORD *)v740 - 1) = v741;
        v740 -= 4;
      }
      *a3 = v740;
      a3[1] = v724;
      a3[2] = v470;
      if (v725)
      {
        operator delete(v725);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v705 = v723;
      v724 = v705 + 4;
    }
    a3[1] = v724;
    if (v724 >= v470)
    {
      v743 = *a3;
      uint64_t v744 = (v724 - *a3) >> 2;
      unint64_t v745 = v744 + 1;
      if ((unint64_t)(v744 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v746 = v470 - v743;
      if (v746 >> 1 > v745) {
        unint64_t v745 = v746 >> 1;
      }
      if ((unint64_t)v746 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v747 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v747 = v745;
      }
      if (v747)
      {
        v748 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v747);
        v743 = *a3;
        v724 = a3[1];
      }
      else
      {
        v748 = 0;
      }
      v758 = &v748[4 * v744];
      v470 = &v748[4 * v747];
      *(_DWORD *)v758 = v607;
      v742 = v758 + 4;
      while (v724 != v743)
      {
        int v759 = *((_DWORD *)v724 - 1);
        v724 -= 4;
        *((_DWORD *)v758 - 1) = v759;
        v758 -= 4;
      }
      *a3 = v758;
      a3[1] = v742;
      a3[2] = v470;
      if (v743)
      {
        operator delete(v743);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v724 = v607;
      v742 = v724 + 4;
    }
    a3[1] = v742;
    int v760 = v469 + 7;
    if (v742 >= v470)
    {
      v762 = *a3;
      uint64_t v763 = (v742 - *a3) >> 2;
      unint64_t v764 = v763 + 1;
      if ((unint64_t)(v763 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v765 = v470 - v762;
      if (v765 >> 1 > v764) {
        unint64_t v764 = v765 >> 1;
      }
      if ((unint64_t)v765 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v766 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v766 = v764;
      }
      if (v766)
      {
        v767 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v766);
        v762 = *a3;
        v742 = a3[1];
      }
      else
      {
        v767 = 0;
      }
      v777 = &v767[4 * v763];
      v470 = &v767[4 * v766];
      *(_DWORD *)v777 = v760;
      v761 = v777 + 4;
      while (v742 != v762)
      {
        int v778 = *((_DWORD *)v742 - 1);
        v742 -= 4;
        *((_DWORD *)v777 - 1) = v778;
        v777 -= 4;
      }
      *a3 = v777;
      a3[1] = v761;
      a3[2] = v470;
      if (v762)
      {
        operator delete(v762);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v742 = v760;
      v761 = v742 + 4;
    }
    a3[1] = v761;
    if (v761 >= v470)
    {
      v780 = *a3;
      uint64_t v781 = (v761 - *a3) >> 2;
      unint64_t v782 = v781 + 1;
      if ((unint64_t)(v781 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v783 = v470 - v780;
      if (v783 >> 1 > v782) {
        unint64_t v782 = v783 >> 1;
      }
      if ((unint64_t)v783 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v784 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v784 = v782;
      }
      if (v784)
      {
        v785 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v784);
        v780 = *a3;
        v761 = a3[1];
      }
      else
      {
        v785 = 0;
      }
      v795 = &v785[4 * v781];
      v470 = &v785[4 * v784];
      *(_DWORD *)v795 = v565;
      v779 = v795 + 4;
      while (v761 != v780)
      {
        int v796 = *((_DWORD *)v761 - 1);
        v761 -= 4;
        *((_DWORD *)v795 - 1) = v796;
        v795 -= 4;
      }
      *a3 = v795;
      a3[1] = v779;
      a3[2] = v470;
      if (v780)
      {
        operator delete(v780);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v761 = v565;
      v779 = v761 + 4;
    }
    a3[1] = v779;
    if (v779 >= v470)
    {
      v798 = *a3;
      uint64_t v799 = (v779 - *a3) >> 2;
      unint64_t v800 = v799 + 1;
      if ((unint64_t)(v799 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v801 = v470 - v798;
      if (v801 >> 1 > v800) {
        unint64_t v800 = v801 >> 1;
      }
      if ((unint64_t)v801 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v802 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v802 = v800;
      }
      if (v802)
      {
        v803 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v802);
        v798 = *a3;
        v779 = a3[1];
      }
      else
      {
        v803 = 0;
      }
      v813 = &v803[4 * v799];
      v470 = &v803[4 * v802];
      *(_DWORD *)v813 = v645;
      v797 = v813 + 4;
      while (v779 != v798)
      {
        int v814 = *((_DWORD *)v779 - 1);
        v779 -= 4;
        *((_DWORD *)v813 - 1) = v814;
        v813 -= 4;
      }
      *a3 = v813;
      a3[1] = v797;
      a3[2] = v470;
      if (v798)
      {
        operator delete(v798);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v779 = v645;
      v797 = v779 + 4;
    }
    a3[1] = v797;
    if (v797 >= v470)
    {
      v816 = *a3;
      uint64_t v817 = (v797 - *a3) >> 2;
      unint64_t v818 = v817 + 1;
      if ((unint64_t)(v817 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v819 = v470 - v816;
      if (v819 >> 1 > v818) {
        unint64_t v818 = v819 >> 1;
      }
      if ((unint64_t)v819 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v820 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v820 = v818;
      }
      if (v820)
      {
        v821 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v820);
        v816 = *a3;
        v797 = a3[1];
      }
      else
      {
        v821 = 0;
      }
      v831 = &v821[4 * v817];
      v470 = &v821[4 * v820];
      *(_DWORD *)v831 = v565;
      v815 = v831 + 4;
      while (v797 != v816)
      {
        int v832 = *((_DWORD *)v797 - 1);
        v797 -= 4;
        *((_DWORD *)v831 - 1) = v832;
        v831 -= 4;
      }
      *a3 = v831;
      a3[1] = v815;
      a3[2] = v470;
      if (v816)
      {
        operator delete(v816);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v797 = v565;
      v815 = v797 + 4;
    }
    a3[1] = v815;
    if (v815 >= v470)
    {
      v834 = *a3;
      uint64_t v835 = (v815 - *a3) >> 2;
      unint64_t v836 = v835 + 1;
      if ((unint64_t)(v835 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v837 = v470 - v834;
      if (v837 >> 1 > v836) {
        unint64_t v836 = v837 >> 1;
      }
      if ((unint64_t)v837 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v838 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v838 = v836;
      }
      if (v838)
      {
        v839 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v838);
        v834 = *a3;
        v815 = a3[1];
      }
      else
      {
        v839 = 0;
      }
      v849 = &v839[4 * v835];
      v470 = &v839[4 * v838];
      *(_DWORD *)v849 = v723;
      v833 = v849 + 4;
      while (v815 != v834)
      {
        int v850 = *((_DWORD *)v815 - 1);
        v815 -= 4;
        *((_DWORD *)v849 - 1) = v850;
        v849 -= 4;
      }
      *a3 = v849;
      a3[1] = v833;
      a3[2] = v470;
      if (v834)
      {
        operator delete(v834);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v815 = v723;
      v833 = v815 + 4;
    }
    a3[1] = v833;
    if (v833 >= v470)
    {
      v852 = *a3;
      uint64_t v853 = (v833 - *a3) >> 2;
      unint64_t v854 = v853 + 1;
      if ((unint64_t)(v853 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v855 = v470 - v852;
      if (v855 >> 1 > v854) {
        unint64_t v854 = v855 >> 1;
      }
      if ((unint64_t)v855 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v856 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v856 = v854;
      }
      if (v856)
      {
        v857 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v856);
        v852 = *a3;
        v833 = a3[1];
      }
      else
      {
        v857 = 0;
      }
      v867 = &v857[4 * v853];
      v470 = &v857[4 * v856];
      *(_DWORD *)v867 = v645;
      v851 = v867 + 4;
      while (v833 != v852)
      {
        int v868 = *((_DWORD *)v833 - 1);
        v833 -= 4;
        *((_DWORD *)v867 - 1) = v868;
        v867 -= 4;
      }
      *a3 = v867;
      a3[1] = v851;
      a3[2] = v470;
      if (v852)
      {
        operator delete(v852);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v833 = v645;
      v851 = v833 + 4;
    }
    a3[1] = v851;
    if (v851 >= v470)
    {
      v870 = *a3;
      uint64_t v871 = (v851 - *a3) >> 2;
      unint64_t v872 = v871 + 1;
      if ((unint64_t)(v871 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v873 = v470 - v870;
      if (v873 >> 1 > v872) {
        unint64_t v872 = v873 >> 1;
      }
      if ((unint64_t)v873 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v874 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v874 = v872;
      }
      if (v874)
      {
        v875 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v874);
        v870 = *a3;
        v851 = a3[1];
      }
      else
      {
        v875 = 0;
      }
      v885 = &v875[4 * v871];
      v470 = &v875[4 * v874];
      *(_DWORD *)v885 = v760;
      v869 = v885 + 4;
      while (v851 != v870)
      {
        int v886 = *((_DWORD *)v851 - 1);
        v851 -= 4;
        *((_DWORD *)v885 - 1) = v886;
        v885 -= 4;
      }
      *a3 = v885;
      a3[1] = v869;
      a3[2] = v470;
      if (v870)
      {
        operator delete(v870);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v851 = v760;
      v869 = v851 + 4;
    }
    a3[1] = v869;
    if (v869 >= v470)
    {
      v888 = *a3;
      uint64_t v889 = (v869 - *a3) >> 2;
      unint64_t v890 = v889 + 1;
      if ((unint64_t)(v889 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v891 = v470 - v888;
      if (v891 >> 1 > v890) {
        unint64_t v890 = v891 >> 1;
      }
      if ((unint64_t)v891 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v892 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v892 = v890;
      }
      if (v892)
      {
        v893 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v892);
        v888 = *a3;
        v869 = a3[1];
      }
      else
      {
        v893 = 0;
      }
      v903 = &v893[4 * v889];
      v470 = &v893[4 * v892];
      *(_DWORD *)v903 = v723;
      v887 = v903 + 4;
      while (v869 != v888)
      {
        int v904 = *((_DWORD *)v869 - 1);
        v869 -= 4;
        *((_DWORD *)v903 - 1) = v904;
        v903 -= 4;
      }
      *a3 = v903;
      a3[1] = v887;
      a3[2] = v470;
      if (v888)
      {
        operator delete(v888);
        v470 = *v471;
      }
    }
    else
    {
      *(_DWORD *)v869 = v723;
      v887 = v869 + 4;
    }
    a3[1] = v887;
    if (v887 >= v470)
    {
      v906 = *a3;
      uint64_t v907 = (v887 - *a3) >> 2;
      unint64_t v908 = v907 + 1;
      if ((unint64_t)(v907 + 1) >> 62) {
        goto LABEL_2555;
      }
      uint64_t v909 = v470 - v906;
      if (v909 >> 1 > v908) {
        unint64_t v908 = v909 >> 1;
      }
      if ((unint64_t)v909 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v910 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v910 = v908;
      }
      if (v910)
      {
        v911 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v910);
        v906 = *a3;
        v887 = a3[1];
      }
      else
      {
        v911 = 0;
      }
      v921 = &v911[4 * v907];
      v922 = &v911[4 * v910];
      *(_DWORD *)v921 = v760;
      v905 = v921 + 4;
      while (v887 != v906)
      {
        int v923 = *((_DWORD *)v887 - 1);
        v887 -= 4;
        *((_DWORD *)v921 - 1) = v923;
        v921 -= 4;
      }
      *a3 = v921;
      a3[1] = v905;
      a3[2] = v922;
      if (v906) {
        operator delete(v906);
      }
    }
    else
    {
      *(_DWORD *)v887 = v760;
      v905 = v887 + 4;
    }
    a3[1] = v905;
    return;
  }
  if (v8 >= (unsigned __int32 *)v12)
  {
    unint64_t v16 = v11 + 1;
    if ((v11 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v17 = v12 - (char *)v10;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      uint64_t v19 = (char *)sub_20B05D1AC((uint64_t)v13, v18);
      a4 = v1527;
      unint64_t v20 = v19;
      float32x4_t v10 = *(unsigned __int32 **)a2;
      uint64_t v8 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v20 = 0;
    }
    int v26 = &v20[4 * v11];
    uint64_t v12 = &v20[4 * v18];
    *(_DWORD *)int v26 = a4.n128_u32[0];
    int v14 = (unsigned __int32 *)(v26 + 4);
    while (v8 != v10)
    {
      int v27 = *--v8;
      *((_DWORD *)v26 - 1) = v27;
      v26 -= 4;
    }
    *(void *)a2 = v26;
    *(void *)(a2 + 8) = v14;
    *(void *)(a2 + 16) = v12;
    if (v10)
    {
      operator delete(v10);
      a4 = v1527;
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *uint64_t v8 = a4.n128_u32[0];
    int v14 = v8 + 1;
  }
  *float v9 = v14;
  unsigned __int32 v28 = a4.n128_u32[1];
  if (v14 >= (unsigned __int32 *)v12)
  {
    uint64_t v30 = *(unsigned __int32 **)a2;
    uint64_t v31 = ((uint64_t)v14 - *(void *)a2) >> 2;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v33 = v12 - (char *)v30;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      int v35 = (char *)sub_20B05D1AC((uint64_t)v13, v34);
      uint64_t v30 = *(unsigned __int32 **)a2;
      int v14 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v35 = 0;
    }
    float32x4_t v46 = (unsigned __int32 *)&v35[4 * v31];
    uint64_t v12 = &v35[4 * v34];
    *float32x4_t v46 = v28;
    unint64_t v29 = v46 + 1;
    while (v14 != v30)
    {
      unsigned __int32 v47 = *--v14;
      *--float32x4_t v46 = v47;
    }
    *(void *)a2 = v46;
    *(void *)(a2 + 8) = v29;
    *(void *)(a2 + 16) = v12;
    if (v30)
    {
      operator delete(v30);
      uint64_t v12 = *v13;
    }
    a4.n128_u32[2] = v1527.n128_u32[2];
  }
  else
  {
    *int v14 = a4.n128_u32[1];
    unint64_t v29 = v14 + 1;
  }
  *float v9 = v29;
  unsigned __int32 v48 = a4.n128_u32[2];
  if (v29 >= (unsigned __int32 *)v12)
  {
    int v50 = *(unsigned __int32 **)a2;
    uint64_t v51 = ((uint64_t)v29 - *(void *)a2) >> 2;
    unint64_t v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v53 = v12 - (char *)v50;
    if (v53 >> 1 > v52) {
      unint64_t v52 = v53 >> 1;
    }
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v52;
    }
    if (v54)
    {
      v55 = (char *)sub_20B05D1AC((uint64_t)v13, v54);
      int v50 = *(unsigned __int32 **)a2;
      unint64_t v29 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v55 = 0;
    }
    v65 = (unsigned __int32 *)&v55[4 * v51];
    uint64_t v12 = &v55[4 * v54];
    unsigned __int32 *v65 = v48;
    int32x4_t v49 = v65 + 1;
    while (v29 != v50)
    {
      unsigned __int32 v66 = *--v29;
      *--v65 = v66;
    }
    *(void *)a2 = v65;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = v12;
    if (v50)
    {
      operator delete(v50);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v29 = a4.n128_u32[2];
    int32x4_t v49 = v29 + 1;
  }
  *float v9 = v49;
  if (v49 >= (unsigned __int32 *)v12)
  {
    v68 = *(unsigned __int32 **)a2;
    uint64_t v69 = ((uint64_t)v49 - *(void *)a2) >> 2;
    unint64_t v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v71 = v12 - (char *)v68;
    if (v71 >> 1 > v70) {
      unint64_t v70 = v71 >> 1;
    }
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v72 = v70;
    }
    if (v72)
    {
      v73 = (char *)sub_20B05D1AC((uint64_t)v13, v72);
      v68 = *(unsigned __int32 **)a2;
      int32x4_t v49 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v73 = 0;
    }
    v83 = &v73[4 * v69];
    uint64_t v12 = &v73[4 * v72];
    *(_DWORD *)v83 = a5.n128_u32[0];
    v67 = (unsigned __int32 *)(v83 + 4);
    while (v49 != v68)
    {
      int v84 = *--v49;
      *((_DWORD *)v83 - 1) = v84;
      v83 -= 4;
    }
    *(void *)a2 = v83;
    *(void *)(a2 + 8) = v67;
    *(void *)(a2 + 16) = v12;
    if (v68)
    {
      operator delete(v68);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *int32x4_t v49 = a5.n128_u32[0];
    v67 = v49 + 1;
  }
  *float v9 = v67;
  if (v67 >= (unsigned __int32 *)v12)
  {
    v86 = *(unsigned __int32 **)a2;
    uint64_t v87 = ((uint64_t)v67 - *(void *)a2) >> 2;
    unint64_t v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v89 = v12 - (char *)v86;
    if (v89 >> 1 > v88) {
      unint64_t v88 = v89 >> 1;
    }
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v90 = v88;
    }
    if (v90)
    {
      v91 = (char *)sub_20B05D1AC((uint64_t)v13, v90);
      v86 = *(unsigned __int32 **)a2;
      v67 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v91 = 0;
    }
    v101 = (unsigned __int32 *)&v91[4 * v87];
    uint64_t v12 = &v91[4 * v90];
    unsigned __int32 *v101 = v28;
    v85 = v101 + 1;
    while (v67 != v86)
    {
      unsigned __int32 v102 = *--v67;
      *--v101 = v102;
    }
    *(void *)a2 = v101;
    *(void *)(a2 + 8) = v85;
    *(void *)(a2 + 16) = v12;
    if (v86)
    {
      operator delete(v86);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v67 = v28;
    v85 = v67 + 1;
  }
  *float v9 = v85;
  if (v85 >= (unsigned __int32 *)v12)
  {
    v104 = *(unsigned __int32 **)a2;
    uint64_t v105 = ((uint64_t)v85 - *(void *)a2) >> 2;
    unint64_t v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v107 = v12 - (char *)v104;
    if (v107 >> 1 > v106) {
      unint64_t v106 = v107 >> 1;
    }
    if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v108 = v106;
    }
    if (v108)
    {
      v109 = (char *)sub_20B05D1AC((uint64_t)v13, v108);
      v104 = *(unsigned __int32 **)a2;
      v85 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v109 = 0;
    }
    v119 = (unsigned __int32 *)&v109[4 * v105];
    uint64_t v12 = &v109[4 * v108];
    unsigned __int32 *v119 = v48;
    v103 = v119 + 1;
    while (v85 != v104)
    {
      unsigned __int32 v120 = *--v85;
      *--v119 = v120;
    }
    *(void *)a2 = v119;
    *(void *)(a2 + 8) = v103;
    *(void *)(a2 + 16) = v12;
    if (v104)
    {
      operator delete(v104);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v85 = v48;
    v103 = v85 + 1;
  }
  *float v9 = v103;
  if (v103 >= (unsigned __int32 *)v12)
  {
    v122 = *(unsigned __int32 **)a2;
    uint64_t v123 = ((uint64_t)v103 - *(void *)a2) >> 2;
    unint64_t v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v125 = v12 - (char *)v122;
    if (v125 >> 1 > v124) {
      unint64_t v124 = v125 >> 1;
    }
    if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v126 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v126 = v124;
    }
    if (v126)
    {
      v127 = (char *)sub_20B05D1AC((uint64_t)v13, v126);
      v122 = *(unsigned __int32 **)a2;
      v103 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v127 = 0;
    }
    v137 = &v127[4 * v123];
    uint64_t v12 = &v127[4 * v126];
    *(_DWORD *)v137 = v1527.n128_u32[0];
    v121 = (unsigned __int32 *)(v137 + 4);
    while (v103 != v122)
    {
      int v138 = *--v103;
      *((_DWORD *)v137 - 1) = v138;
      v137 -= 4;
    }
    *(void *)a2 = v137;
    *(void *)(a2 + 8) = v121;
    *(void *)(a2 + 16) = v12;
    if (v122)
    {
      operator delete(v122);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v103 = v1527.n128_u32[0];
    v121 = v103 + 1;
  }
  *float v9 = v121;
  if (v121 >= (unsigned __int32 *)v12)
  {
    id v140 = *(unsigned __int32 **)a2;
    uint64_t v141 = ((uint64_t)v121 - *(void *)a2) >> 2;
    unint64_t v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v143 = v12 - (char *)v140;
    if (v143 >> 1 > v142) {
      unint64_t v142 = v143 >> 1;
    }
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v144 = v142;
    }
    if (v144)
    {
      v145 = (char *)sub_20B05D1AC((uint64_t)v13, v144);
      id v140 = *(unsigned __int32 **)a2;
      v121 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v145 = 0;
    }
    uint64_t v155 = &v145[4 * v141];
    uint64_t v12 = &v145[4 * v144];
    *(_DWORD *)uint64_t v155 = a5.n128_u32[1];
    v139 = (unsigned __int32 *)(v155 + 4);
    while (v121 != v140)
    {
      int v156 = *--v121;
      *((_DWORD *)v155 - 1) = v156;
      v155 -= 4;
    }
    *(void *)a2 = v155;
    *(void *)(a2 + 8) = v139;
    *(void *)(a2 + 16) = v12;
    if (v140)
    {
      operator delete(v140);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v121 = a5.n128_u32[1];
    v139 = v121 + 1;
  }
  *float v9 = v139;
  if (v139 >= (unsigned __int32 *)v12)
  {
    uint64_t v158 = *(unsigned __int32 **)a2;
    uint64_t v159 = ((uint64_t)v139 - *(void *)a2) >> 2;
    unint64_t v160 = v159 + 1;
    if ((unint64_t)(v159 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v161 = v12 - (char *)v158;
    if (v161 >> 1 > v160) {
      unint64_t v160 = v161 >> 1;
    }
    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v162 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v162 = v160;
    }
    if (v162)
    {
      v163 = (char *)sub_20B05D1AC((uint64_t)v13, v162);
      uint64_t v158 = *(unsigned __int32 **)a2;
      v139 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v163 = 0;
    }
    v173 = (unsigned __int32 *)&v163[4 * v159];
    uint64_t v12 = &v163[4 * v162];
    unsigned __int32 *v173 = v48;
    v157 = v173 + 1;
    while (v139 != v158)
    {
      unsigned __int32 v174 = *--v139;
      *--v173 = v174;
    }
    *(void *)a2 = v173;
    *(void *)(a2 + 8) = v157;
    *(void *)(a2 + 16) = v12;
    if (v158)
    {
      operator delete(v158);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v139 = v48;
    v157 = v139 + 1;
  }
  *float v9 = v157;
  if (v157 >= (unsigned __int32 *)v12)
  {
    v176 = *(unsigned __int32 **)a2;
    uint64_t v177 = ((uint64_t)v157 - *(void *)a2) >> 2;
    unint64_t v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v179 = v12 - (char *)v176;
    if (v179 >> 1 > v178) {
      unint64_t v178 = v179 >> 1;
    }
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v180 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v180 = v178;
    }
    if (v180)
    {
      v181 = (char *)sub_20B05D1AC((uint64_t)v13, v180);
      v176 = *(unsigned __int32 **)a2;
      v157 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v181 = 0;
    }
    v191 = &v181[4 * v177];
    uint64_t v12 = &v181[4 * v180];
    *(_DWORD *)v191 = a5.n128_u32[0];
    v175 = (unsigned __int32 *)(v191 + 4);
    while (v157 != v176)
    {
      int v192 = *--v157;
      *((_DWORD *)v191 - 1) = v192;
      v191 -= 4;
    }
    *(void *)a2 = v191;
    *(void *)(a2 + 8) = v175;
    *(void *)(a2 + 16) = v12;
    if (v176)
    {
      operator delete(v176);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v157 = a5.n128_u32[0];
    v175 = v157 + 1;
  }
  *float v9 = v175;
  if (v175 >= (unsigned __int32 *)v12)
  {
    v194 = *(unsigned __int32 **)a2;
    uint64_t v195 = ((uint64_t)v175 - *(void *)a2) >> 2;
    unint64_t v196 = v195 + 1;
    if ((unint64_t)(v195 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v197 = v12 - (char *)v194;
    if (v197 >> 1 > v196) {
      unint64_t v196 = v197 >> 1;
    }
    if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v198 = v196;
    }
    if (v198)
    {
      v199 = (char *)sub_20B05D1AC((uint64_t)v13, v198);
      v194 = *(unsigned __int32 **)a2;
      v175 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v199 = 0;
    }
    v209 = &v199[4 * v195];
    uint64_t v12 = &v199[4 * v198];
    *(_DWORD *)v209 = a5.n128_u32[1];
    v193 = (unsigned __int32 *)(v209 + 4);
    while (v175 != v194)
    {
      int v210 = *--v175;
      *((_DWORD *)v209 - 1) = v210;
      v209 -= 4;
    }
    *(void *)a2 = v209;
    *(void *)(a2 + 8) = v193;
    *(void *)(a2 + 16) = v12;
    if (v194)
    {
      operator delete(v194);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v175 = a5.n128_u32[1];
    v193 = v175 + 1;
  }
  *float v9 = v193;
  if (v193 >= (unsigned __int32 *)v12)
  {
    v212 = *(unsigned __int32 **)a2;
    uint64_t v213 = ((uint64_t)v193 - *(void *)a2) >> 2;
    unint64_t v214 = v213 + 1;
    if ((unint64_t)(v213 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v215 = v12 - (char *)v212;
    if (v215 >> 1 > v214) {
      unint64_t v214 = v215 >> 1;
    }
    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v216 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v216 = v214;
    }
    if (v216)
    {
      v217 = (char *)sub_20B05D1AC((uint64_t)v13, v216);
      v212 = *(unsigned __int32 **)a2;
      v193 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v217 = 0;
    }
    v227 = (unsigned __int32 *)&v217[4 * v213];
    v228 = &v217[4 * v216];
    unsigned __int32 *v227 = v48;
    v211 = v227 + 1;
    while (v193 != v212)
    {
      unsigned __int32 v229 = *--v193;
      *--v227 = v229;
    }
    *(void *)a2 = v227;
    *(void *)(a2 + 8) = v211;
    *(void *)(a2 + 16) = v228;
    if (v212) {
      operator delete(v212);
    }
  }
  else
  {
    unsigned __int32 *v193 = v48;
    v211 = v193 + 1;
  }
  unint64_t v230 = v11 / 6;
  *float v9 = v211;
  v232 = a3 + 2;
  v231 = a3[2];
  v233 = a3[1];
  if (v233 >= v231)
  {
    v235 = *a3;
    uint64_t v236 = (v233 - *a3) >> 2;
    unint64_t v237 = v236 + 1;
    if ((unint64_t)(v236 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v238 = v231 - v235;
    if (v238 >> 1 > v237) {
      unint64_t v237 = v238 >> 1;
    }
    if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v239 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v239 = v237;
    }
    if (v239)
    {
      v240 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v239);
      v235 = *a3;
      v233 = a3[1];
    }
    else
    {
      v240 = 0;
    }
    v250 = &v240[4 * v236];
    v231 = &v240[4 * v239];
    *(_DWORD *)v250 = v230;
    v234 = v250 + 4;
    while (v233 != v235)
    {
      int v251 = *((_DWORD *)v233 - 1);
      v233 -= 4;
      *((_DWORD *)v250 - 1) = v251;
      v250 -= 4;
    }
    *a3 = v250;
    a3[1] = v234;
    a3[2] = v231;
    if (v235)
    {
      operator delete(v235);
      v231 = *v232;
    }
  }
  else
  {
    *(_DWORD *)v233 = v230;
    v234 = v233 + 4;
  }
  a3[1] = v234;
  int v252 = v230 + 2;
  if (v234 >= v231)
  {
    v254 = *a3;
    uint64_t v255 = (v234 - *a3) >> 2;
    unint64_t v256 = v255 + 1;
    if ((unint64_t)(v255 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v257 = v231 - v254;
    if (v257 >> 1 > v256) {
      unint64_t v256 = v257 >> 1;
    }
    if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v258 = v256;
    }
    if (v258)
    {
      v259 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v258);
      v254 = *a3;
      v234 = a3[1];
    }
    else
    {
      v259 = 0;
    }
    v269 = &v259[4 * v255];
    v231 = &v259[4 * v258];
    *(_DWORD *)v269 = v252;
    v253 = v269 + 4;
    while (v234 != v254)
    {
      int v270 = *((_DWORD *)v234 - 1);
      v234 -= 4;
      *((_DWORD *)v269 - 1) = v270;
      v269 -= 4;
    }
    *a3 = v269;
    a3[1] = v253;
    a3[2] = v231;
    if (v254)
    {
      operator delete(v254);
      v231 = *v232;
    }
  }
  else
  {
    *(_DWORD *)v234 = v252;
    v253 = v234 + 4;
  }
  a3[1] = v253;
  int v271 = v230 + 1;
  v1526 = a3 + 2;
  if (v253 >= v231)
  {
    v273 = *a3;
    uint64_t v274 = (v253 - *a3) >> 2;
    unint64_t v275 = v274 + 1;
    if ((unint64_t)(v274 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v276 = v231 - v273;
    if (v276 >> 1 > v275) {
      unint64_t v275 = v276 >> 1;
    }
    if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v277 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v277 = v275;
    }
    if (v277)
    {
      v278 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v277);
      v273 = *a3;
      v253 = a3[1];
    }
    else
    {
      v278 = 0;
    }
    v288 = &v278[4 * v274];
    v231 = &v278[4 * v277];
    *(_DWORD *)v288 = v271;
    v272 = v288 + 4;
    while (v253 != v273)
    {
      int v289 = *((_DWORD *)v253 - 1);
      v253 -= 4;
      *((_DWORD *)v288 - 1) = v289;
      v288 -= 4;
    }
    *a3 = v288;
    a3[1] = v272;
    a3[2] = v231;
    if (v273)
    {
      operator delete(v273);
      v231 = *v1526;
    }
  }
  else
  {
    *(_DWORD *)v253 = v271;
    v272 = v253 + 4;
  }
  a3[1] = v272;
  if (v272 >= v231)
  {
    v291 = *a3;
    uint64_t v292 = (v272 - *a3) >> 2;
    unint64_t v293 = v292 + 1;
    if ((unint64_t)(v292 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v294 = v231 - v291;
    if (v294 >> 1 > v293) {
      unint64_t v293 = v294 >> 1;
    }
    if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v295 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v295 = v293;
    }
    if (v295)
    {
      v296 = (char *)sub_20B05D1AC((uint64_t)v1526, v295);
      v291 = *a3;
      v272 = a3[1];
    }
    else
    {
      v296 = 0;
    }
    v306 = &v296[4 * v292];
    v231 = &v296[4 * v295];
    *(_DWORD *)v306 = v271;
    v290 = v306 + 4;
    while (v272 != v291)
    {
      int v307 = *((_DWORD *)v272 - 1);
      v272 -= 4;
      *((_DWORD *)v306 - 1) = v307;
      v306 -= 4;
    }
    *a3 = v306;
    a3[1] = v290;
    a3[2] = v231;
    if (v291)
    {
      operator delete(v291);
      v308 = a3 + 2;
      v231 = *v1526;
      goto LABEL_510;
    }
  }
  else
  {
    *(_DWORD *)v272 = v271;
    v290 = v272 + 4;
  }
  v308 = a3 + 2;
LABEL_510:
  a3[1] = v290;
  if (v290 >= v231)
  {
    v310 = *a3;
    uint64_t v311 = (v290 - *a3) >> 2;
    unint64_t v312 = v311 + 1;
    if ((unint64_t)(v311 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v313 = v231 - v310;
    if (v313 >> 1 > v312) {
      unint64_t v312 = v313 >> 1;
    }
    if ((unint64_t)v313 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v314 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v314 = v312;
    }
    if (v314)
    {
      v315 = (char *)sub_20B05D1AC((uint64_t)v308, v314);
      v310 = *a3;
      v290 = a3[1];
    }
    else
    {
      v315 = 0;
    }
    v325 = &v315[4 * v311];
    v231 = &v315[4 * v314];
    *(_DWORD *)v325 = v252;
    v309 = v325 + 4;
    while (v290 != v310)
    {
      int v326 = *((_DWORD *)v290 - 1);
      v290 -= 4;
      *((_DWORD *)v325 - 1) = v326;
      v325 -= 4;
    }
    *a3 = v325;
    a3[1] = v309;
    a3[2] = v231;
    if (v310)
    {
      operator delete(v310);
      v231 = *v308;
    }
  }
  else
  {
    *(_DWORD *)v290 = v252;
    v309 = v290 + 4;
  }
  a3[1] = v309;
  int v327 = v230 + 3;
  if (v309 >= v231)
  {
    v329 = *a3;
    uint64_t v330 = (v309 - *a3) >> 2;
    unint64_t v331 = v330 + 1;
    if ((unint64_t)(v330 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v332 = v231 - v329;
    if (v332 >> 1 > v331) {
      unint64_t v331 = v332 >> 1;
    }
    if ((unint64_t)v332 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v333 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v333 = v331;
    }
    if (v333)
    {
      v334 = (char *)sub_20B05D1AC((uint64_t)v308, v333);
      v329 = *a3;
      v309 = a3[1];
    }
    else
    {
      v334 = 0;
    }
    v345 = &v334[4 * v330];
    v346 = &v334[4 * v333];
    *(_DWORD *)v345 = v327;
    v328 = v345 + 4;
    while (v309 != v329)
    {
      int v347 = *((_DWORD *)v309 - 1);
      v309 -= 4;
      *((_DWORD *)v345 - 1) = v347;
      v345 -= 4;
    }
    *a3 = v345;
    a3[1] = v328;
    a3[2] = v346;
    if (v329) {
      operator delete(v329);
    }
  }
  else
  {
    *(_DWORD *)v309 = v327;
    v328 = v309 + 4;
  }
  a3[1] = v328;
  v348 = *v9;
  v349 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v351 = *(unsigned __int32 **)a2;
    uint64_t v352 = ((uint64_t)v348 - *(void *)a2) >> 2;
    unint64_t v353 = v352 + 1;
    if ((unint64_t)(v352 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v354 = v349 - (char *)v351;
    if (v354 >> 1 > v353) {
      unint64_t v353 = v354 >> 1;
    }
    if ((unint64_t)v354 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v355 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v355 = v353;
    }
    if (v355)
    {
      v356 = (char *)sub_20B05D1AC((uint64_t)v13, v355);
      v351 = *(unsigned __int32 **)a2;
      v348 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v356 = 0;
    }
    v367 = &v356[4 * v352];
    v349 = &v356[4 * v355];
    *(_DWORD *)v367 = v1527.n128_u32[0];
    v350 = (unsigned __int32 *)(v367 + 4);
    while (v348 != v351)
    {
      int v368 = *--v348;
      *((_DWORD *)v367 - 1) = v368;
      v367 -= 4;
    }
    *(void *)a2 = v367;
    *(void *)(a2 + 8) = v350;
    *(void *)(a2 + 16) = v349;
    if (v351)
    {
      operator delete(v351);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v348 = v1527.n128_u32[0];
    v350 = v348 + 1;
  }
  *float v9 = v350;
  if (v350 >= (unsigned __int32 *)v349)
  {
    v370 = *(unsigned __int32 **)a2;
    uint64_t v371 = ((uint64_t)v350 - *(void *)a2) >> 2;
    unint64_t v372 = v371 + 1;
    if ((unint64_t)(v371 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v373 = v349 - (char *)v370;
    if (v373 >> 1 > v372) {
      unint64_t v372 = v373 >> 1;
    }
    if ((unint64_t)v373 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v374 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v374 = v372;
    }
    if (v374)
    {
      v375 = (char *)sub_20B05D1AC((uint64_t)v13, v374);
      v370 = *(unsigned __int32 **)a2;
      v350 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v375 = 0;
    }
    v385 = (unsigned __int32 *)&v375[4 * v371];
    v349 = &v375[4 * v374];
    unsigned __int32 *v385 = v28;
    v369 = v385 + 1;
    while (v350 != v370)
    {
      unsigned __int32 v386 = *--v350;
      *--v385 = v386;
    }
    *(void *)a2 = v385;
    *(void *)(a2 + 8) = v369;
    *(void *)(a2 + 16) = v349;
    if (v370)
    {
      operator delete(v370);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v350 = v28;
    v369 = v350 + 1;
  }
  *float v9 = v369;
  if (v369 >= (unsigned __int32 *)v349)
  {
    v388 = *(unsigned __int32 **)a2;
    uint64_t v389 = ((uint64_t)v369 - *(void *)a2) >> 2;
    unint64_t v390 = v389 + 1;
    if ((unint64_t)(v389 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v391 = v349 - (char *)v388;
    if (v391 >> 1 > v390) {
      unint64_t v390 = v391 >> 1;
    }
    if ((unint64_t)v391 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v392 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v392 = v390;
    }
    if (v392)
    {
      v393 = (char *)sub_20B05D1AC((uint64_t)v13, v392);
      v388 = *(unsigned __int32 **)a2;
      v369 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v393 = 0;
    }
    v403 = (unsigned __int32 *)&v393[4 * v389];
    v349 = &v393[4 * v392];
    unsigned __int32 *v403 = v48;
    v387 = v403 + 1;
    while (v369 != v388)
    {
      unsigned __int32 v404 = *--v369;
      *--v403 = v404;
    }
    *(void *)a2 = v403;
    *(void *)(a2 + 8) = v387;
    *(void *)(a2 + 16) = v349;
    if (v388)
    {
      operator delete(v388);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v369 = v48;
    v387 = v369 + 1;
  }
  *float v9 = v387;
  if (v387 >= (unsigned __int32 *)v349)
  {
    v406 = *(unsigned __int32 **)a2;
    uint64_t v407 = ((uint64_t)v387 - *(void *)a2) >> 2;
    unint64_t v408 = v407 + 1;
    if ((unint64_t)(v407 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v409 = v349 - (char *)v406;
    if (v409 >> 1 > v408) {
      unint64_t v408 = v409 >> 1;
    }
    if ((unint64_t)v409 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v410 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v410 = v408;
    }
    if (v410)
    {
      v411 = (char *)sub_20B05D1AC((uint64_t)v13, v410);
      v406 = *(unsigned __int32 **)a2;
      v387 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v411 = 0;
    }
    v421 = &v411[4 * v407];
    v349 = &v411[4 * v410];
    *(_DWORD *)v421 = v1527.n128_u32[0];
    v405 = (unsigned __int32 *)(v421 + 4);
    while (v387 != v406)
    {
      int v422 = *--v387;
      *((_DWORD *)v421 - 1) = v422;
      v421 -= 4;
    }
    *(void *)a2 = v421;
    *(void *)(a2 + 8) = v405;
    *(void *)(a2 + 16) = v349;
    if (v406)
    {
      operator delete(v406);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v387 = v1527.n128_u32[0];
    v405 = v387 + 1;
  }
  *float v9 = v405;
  if (v405 >= (unsigned __int32 *)v349)
  {
    v424 = *(unsigned __int32 **)a2;
    uint64_t v425 = ((uint64_t)v405 - *(void *)a2) >> 2;
    unint64_t v426 = v425 + 1;
    if ((unint64_t)(v425 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v427 = v349 - (char *)v424;
    if (v427 >> 1 > v426) {
      unint64_t v426 = v427 >> 1;
    }
    if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v428 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v428 = v426;
    }
    if (v428)
    {
      v429 = (char *)sub_20B05D1AC((uint64_t)v13, v428);
      v424 = *(unsigned __int32 **)a2;
      v405 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v429 = 0;
    }
    v439 = &v429[4 * v425];
    v349 = &v429[4 * v428];
    *(_DWORD *)v439 = a5.n128_u32[1];
    v423 = (unsigned __int32 *)(v439 + 4);
    while (v405 != v424)
    {
      int v440 = *--v405;
      *((_DWORD *)v439 - 1) = v440;
      v439 -= 4;
    }
    *(void *)a2 = v439;
    *(void *)(a2 + 8) = v423;
    *(void *)(a2 + 16) = v349;
    if (v424)
    {
      operator delete(v424);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v405 = a5.n128_u32[1];
    v423 = v405 + 1;
  }
  *float v9 = v423;
  if (v423 >= (unsigned __int32 *)v349)
  {
    v442 = *(unsigned __int32 **)a2;
    uint64_t v443 = ((uint64_t)v423 - *(void *)a2) >> 2;
    unint64_t v444 = v443 + 1;
    if ((unint64_t)(v443 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v445 = v349 - (char *)v442;
    if (v445 >> 1 > v444) {
      unint64_t v444 = v445 >> 1;
    }
    if ((unint64_t)v445 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v446 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v446 = v444;
    }
    if (v446)
    {
      v447 = (char *)sub_20B05D1AC((uint64_t)v13, v446);
      v442 = *(unsigned __int32 **)a2;
      v423 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v447 = 0;
    }
    v457 = (unsigned __int32 *)&v447[4 * v443];
    v349 = &v447[4 * v446];
    unsigned __int32 *v457 = v48;
    v441 = v457 + 1;
    while (v423 != v442)
    {
      unsigned __int32 v458 = *--v423;
      *--v457 = v458;
    }
    *(void *)a2 = v457;
    *(void *)(a2 + 8) = v441;
    *(void *)(a2 + 16) = v349;
    if (v442)
    {
      operator delete(v442);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v423 = v48;
    v441 = v423 + 1;
  }
  *float v9 = v441;
  if (v441 >= (unsigned __int32 *)v349)
  {
    v460 = *(unsigned __int32 **)a2;
    uint64_t v461 = ((uint64_t)v441 - *(void *)a2) >> 2;
    unint64_t v462 = v461 + 1;
    if ((unint64_t)(v461 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v463 = v349 - (char *)v460;
    if (v463 >> 1 > v462) {
      unint64_t v462 = v463 >> 1;
    }
    if ((unint64_t)v463 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v464 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v464 = v462;
    }
    if (v464)
    {
      v465 = (char *)sub_20B05D1AC((uint64_t)v13, v464);
      v460 = *(unsigned __int32 **)a2;
      v441 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v465 = 0;
    }
    v480 = &v465[4 * v461];
    v349 = &v465[4 * v464];
    *(_DWORD *)v480 = v1527.n128_u32[0];
    v459 = (unsigned __int32 *)(v480 + 4);
    while (v441 != v460)
    {
      int v481 = *--v441;
      *((_DWORD *)v480 - 1) = v481;
      v480 -= 4;
    }
    *(void *)a2 = v480;
    *(void *)(a2 + 8) = v459;
    *(void *)(a2 + 16) = v349;
    if (v460)
    {
      operator delete(v460);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v441 = v1527.n128_u32[0];
    v459 = v441 + 1;
  }
  *float v9 = v459;
  if (v459 >= (unsigned __int32 *)v349)
  {
    v483 = *(unsigned __int32 **)a2;
    uint64_t v484 = ((uint64_t)v459 - *(void *)a2) >> 2;
    unint64_t v485 = v484 + 1;
    if ((unint64_t)(v484 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v486 = v349 - (char *)v483;
    if (v486 >> 1 > v485) {
      unint64_t v485 = v486 >> 1;
    }
    if ((unint64_t)v486 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v487 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v487 = v485;
    }
    if (v487)
    {
      v488 = (char *)sub_20B05D1AC((uint64_t)v13, v487);
      v483 = *(unsigned __int32 **)a2;
      v459 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v488 = 0;
    }
    v499 = (unsigned __int32 *)&v488[4 * v484];
    v349 = &v488[4 * v487];
    unsigned __int32 *v499 = v28;
    v482 = v499 + 1;
    while (v459 != v483)
    {
      unsigned __int32 v500 = *--v459;
      *--v499 = v500;
    }
    *(void *)a2 = v499;
    *(void *)(a2 + 8) = v482;
    *(void *)(a2 + 16) = v349;
    if (v483)
    {
      operator delete(v483);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v459 = v28;
    v482 = v459 + 1;
  }
  *float v9 = v482;
  if (v482 >= (unsigned __int32 *)v349)
  {
    v502 = *(unsigned __int32 **)a2;
    uint64_t v503 = ((uint64_t)v482 - *(void *)a2) >> 2;
    unint64_t v504 = v503 + 1;
    if ((unint64_t)(v503 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v505 = v349 - (char *)v502;
    if (v505 >> 1 > v504) {
      unint64_t v504 = v505 >> 1;
    }
    if ((unint64_t)v505 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v506 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v506 = v504;
    }
    if (v506)
    {
      v507 = (char *)sub_20B05D1AC((uint64_t)v13, v506);
      v502 = *(unsigned __int32 **)a2;
      v482 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v507 = 0;
    }
    v517 = &v507[4 * v503];
    v349 = &v507[4 * v506];
    *(_DWORD *)v517 = a5.n128_u32[2];
    v501 = (unsigned __int32 *)(v517 + 4);
    while (v482 != v502)
    {
      int v518 = *--v482;
      *((_DWORD *)v517 - 1) = v518;
      v517 -= 4;
    }
    *(void *)a2 = v517;
    *(void *)(a2 + 8) = v501;
    *(void *)(a2 + 16) = v349;
    if (v502)
    {
      operator delete(v502);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v482 = a5.n128_u32[2];
    v501 = v482 + 1;
  }
  *float v9 = v501;
  if (v501 >= (unsigned __int32 *)v349)
  {
    v520 = *(unsigned __int32 **)a2;
    uint64_t v521 = ((uint64_t)v501 - *(void *)a2) >> 2;
    unint64_t v522 = v521 + 1;
    if ((unint64_t)(v521 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v523 = v349 - (char *)v520;
    if (v523 >> 1 > v522) {
      unint64_t v522 = v523 >> 1;
    }
    if ((unint64_t)v523 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v524 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v524 = v522;
    }
    if (v524)
    {
      v525 = (char *)sub_20B05D1AC((uint64_t)v13, v524);
      v520 = *(unsigned __int32 **)a2;
      v501 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v525 = 0;
    }
    v536 = &v525[4 * v521];
    v349 = &v525[4 * v524];
    *(_DWORD *)v536 = v1527.n128_u32[0];
    v519 = (unsigned __int32 *)(v536 + 4);
    while (v501 != v520)
    {
      int v537 = *--v501;
      *((_DWORD *)v536 - 1) = v537;
      v536 -= 4;
    }
    *(void *)a2 = v536;
    *(void *)(a2 + 8) = v519;
    *(void *)(a2 + 16) = v349;
    if (v520)
    {
      operator delete(v520);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v501 = v1527.n128_u32[0];
    v519 = v501 + 1;
  }
  *float v9 = v519;
  if (v519 >= (unsigned __int32 *)v349)
  {
    v539 = *(unsigned __int32 **)a2;
    uint64_t v540 = ((uint64_t)v519 - *(void *)a2) >> 2;
    unint64_t v541 = v540 + 1;
    if ((unint64_t)(v540 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v542 = v349 - (char *)v539;
    if (v542 >> 1 > v541) {
      unint64_t v541 = v542 >> 1;
    }
    if ((unint64_t)v542 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v543 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v543 = v541;
    }
    if (v543)
    {
      v544 = (char *)sub_20B05D1AC((uint64_t)v13, v543);
      v539 = *(unsigned __int32 **)a2;
      v519 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v544 = 0;
    }
    v554 = &v544[4 * v540];
    v349 = &v544[4 * v543];
    *(_DWORD *)v554 = a5.n128_u32[1];
    v538 = (unsigned __int32 *)(v554 + 4);
    while (v519 != v539)
    {
      int v555 = *--v519;
      *((_DWORD *)v554 - 1) = v555;
      v554 -= 4;
    }
    *(void *)a2 = v554;
    *(void *)(a2 + 8) = v538;
    *(void *)(a2 + 16) = v349;
    if (v539)
    {
      operator delete(v539);
      v349 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v519 = a5.n128_u32[1];
    v538 = v519 + 1;
  }
  *float v9 = v538;
  if (v538 >= (unsigned __int32 *)v349)
  {
    v557 = *(unsigned __int32 **)a2;
    uint64_t v558 = ((uint64_t)v538 - *(void *)a2) >> 2;
    unint64_t v559 = v558 + 1;
    if ((unint64_t)(v558 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v560 = v349 - (char *)v557;
    if (v560 >> 1 > v559) {
      unint64_t v559 = v560 >> 1;
    }
    if ((unint64_t)v560 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v561 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v561 = v559;
    }
    if (v561)
    {
      v562 = (char *)sub_20B05D1AC((uint64_t)v13, v561);
      v557 = *(unsigned __int32 **)a2;
      v538 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v562 = 0;
    }
    v573 = &v562[4 * v558];
    v574 = &v562[4 * v561];
    *(_DWORD *)v573 = a5.n128_u32[2];
    v556 = (unsigned __int32 *)(v573 + 4);
    while (v538 != v557)
    {
      int v575 = *--v538;
      *((_DWORD *)v573 - 1) = v575;
      v573 -= 4;
    }
    *(void *)a2 = v573;
    *(void *)(a2 + 8) = v556;
    *(void *)(a2 + 16) = v574;
    if (v557) {
      operator delete(v557);
    }
  }
  else
  {
    unsigned __int32 *v538 = a5.n128_u32[2];
    v556 = v538 + 1;
  }
  *float v9 = v556;
  int v576 = v230 + 4;
  v578 = a3[1];
  v577 = a3[2];
  if (v578 >= v577)
  {
    v580 = *a3;
    uint64_t v581 = (v578 - *a3) >> 2;
    unint64_t v582 = v581 + 1;
    if ((unint64_t)(v581 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v583 = v577 - v580;
    if (v583 >> 1 > v582) {
      unint64_t v582 = v583 >> 1;
    }
    if ((unint64_t)v583 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v584 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v584 = v582;
    }
    if (v584)
    {
      v585 = (char *)sub_20B05D1AC((uint64_t)v308, v584);
      v580 = *a3;
      v578 = a3[1];
    }
    else
    {
      v585 = 0;
    }
    v595 = &v585[4 * v581];
    v577 = &v585[4 * v584];
    *(_DWORD *)v595 = v576;
    v579 = v595 + 4;
    while (v578 != v580)
    {
      int v596 = *((_DWORD *)v578 - 1);
      v578 -= 4;
      *((_DWORD *)v595 - 1) = v596;
      v595 -= 4;
    }
    *a3 = v595;
    a3[1] = v579;
    a3[2] = v577;
    if (v580)
    {
      operator delete(v580);
      v577 = *v308;
    }
  }
  else
  {
    *(_DWORD *)v578 = v576;
    v579 = v578 + 4;
  }
  a3[1] = v579;
  int v597 = v230 + 6;
  if (v579 >= v577)
  {
    v599 = *a3;
    uint64_t v600 = (v579 - *a3) >> 2;
    unint64_t v601 = v600 + 1;
    if ((unint64_t)(v600 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v602 = v577 - v599;
    if (v602 >> 1 > v601) {
      unint64_t v601 = v602 >> 1;
    }
    if ((unint64_t)v602 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v603 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v603 = v601;
    }
    if (v603)
    {
      v604 = (char *)sub_20B05D1AC((uint64_t)v308, v603);
      v599 = *a3;
      v579 = a3[1];
    }
    else
    {
      v604 = 0;
    }
    v615 = &v604[4 * v600];
    v577 = &v604[4 * v603];
    *(_DWORD *)v615 = v597;
    v598 = v615 + 4;
    while (v579 != v599)
    {
      int v616 = *((_DWORD *)v579 - 1);
      v579 -= 4;
      *((_DWORD *)v615 - 1) = v616;
      v615 -= 4;
    }
    *a3 = v615;
    a3[1] = v598;
    a3[2] = v577;
    if (v599)
    {
      operator delete(v599);
      v577 = *v308;
    }
  }
  else
  {
    *(_DWORD *)v579 = v597;
    v598 = v579 + 4;
  }
  a3[1] = v598;
  int v617 = v230 + 5;
  if (v598 >= v577)
  {
    v619 = *a3;
    uint64_t v620 = (v598 - *a3) >> 2;
    unint64_t v621 = v620 + 1;
    if ((unint64_t)(v620 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v622 = v577 - v619;
    if (v622 >> 1 > v621) {
      unint64_t v621 = v622 >> 1;
    }
    if ((unint64_t)v622 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v623 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v623 = v621;
    }
    if (v623)
    {
      v624 = (char *)sub_20B05D1AC((uint64_t)v308, v623);
      v619 = *a3;
      v598 = a3[1];
    }
    else
    {
      v624 = 0;
    }
    v634 = &v624[4 * v620];
    v577 = &v624[4 * v623];
    *(_DWORD *)v634 = v617;
    v618 = v634 + 4;
    while (v598 != v619)
    {
      int v635 = *((_DWORD *)v598 - 1);
      v598 -= 4;
      *((_DWORD *)v634 - 1) = v635;
      v634 -= 4;
    }
    *a3 = v634;
    a3[1] = v618;
    a3[2] = v577;
    if (v619)
    {
      operator delete(v619);
      v577 = *v1526;
    }
  }
  else
  {
    *(_DWORD *)v598 = v617;
    v618 = v598 + 4;
  }
  a3[1] = v618;
  if (v618 >= v577)
  {
    v637 = *a3;
    uint64_t v638 = (v618 - *a3) >> 2;
    unint64_t v639 = v638 + 1;
    if ((unint64_t)(v638 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v640 = v577 - v637;
    if (v640 >> 1 > v639) {
      unint64_t v639 = v640 >> 1;
    }
    if ((unint64_t)v640 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v641 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v641 = v639;
    }
    if (v641)
    {
      v642 = (char *)sub_20B05D1AC((uint64_t)v1526, v641);
      v637 = *a3;
      v618 = a3[1];
    }
    else
    {
      v642 = 0;
    }
    v653 = &v642[4 * v638];
    v577 = &v642[4 * v641];
    *(_DWORD *)v653 = v617;
    v636 = v653 + 4;
    while (v618 != v637)
    {
      int v654 = *((_DWORD *)v618 - 1);
      v618 -= 4;
      *((_DWORD *)v653 - 1) = v654;
      v653 -= 4;
    }
    *a3 = v653;
    a3[1] = v636;
    a3[2] = v577;
    if (v637)
    {
      operator delete(v637);
      v655 = a3 + 2;
      v577 = *v1526;
      goto LABEL_1088;
    }
  }
  else
  {
    *(_DWORD *)v618 = v617;
    v636 = v618 + 4;
  }
  v655 = a3 + 2;
LABEL_1088:
  a3[1] = v636;
  if (v636 >= v577)
  {
    v657 = *a3;
    uint64_t v658 = (v636 - *a3) >> 2;
    unint64_t v659 = v658 + 1;
    if ((unint64_t)(v658 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v660 = v577 - v657;
    if (v660 >> 1 > v659) {
      unint64_t v659 = v660 >> 1;
    }
    if ((unint64_t)v660 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v661 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v661 = v659;
    }
    if (v661)
    {
      v662 = (char *)sub_20B05D1AC((uint64_t)v655, v661);
      v657 = *a3;
      v636 = a3[1];
    }
    else
    {
      v662 = 0;
    }
    v672 = &v662[4 * v658];
    v577 = &v662[4 * v661];
    *(_DWORD *)v672 = v597;
    v656 = v672 + 4;
    while (v636 != v657)
    {
      int v673 = *((_DWORD *)v636 - 1);
      v636 -= 4;
      *((_DWORD *)v672 - 1) = v673;
      v672 -= 4;
    }
    *a3 = v672;
    a3[1] = v656;
    a3[2] = v577;
    if (v657)
    {
      operator delete(v657);
      v577 = *v655;
    }
  }
  else
  {
    *(_DWORD *)v636 = v597;
    v656 = v636 + 4;
  }
  a3[1] = v656;
  int v674 = v230 + 7;
  if (v656 >= v577)
  {
    v676 = *a3;
    uint64_t v677 = (v656 - *a3) >> 2;
    unint64_t v678 = v677 + 1;
    if ((unint64_t)(v677 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v679 = v577 - v676;
    if (v679 >> 1 > v678) {
      unint64_t v678 = v679 >> 1;
    }
    if ((unint64_t)v679 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v680 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v680 = v678;
    }
    if (v680)
    {
      v681 = (char *)sub_20B05D1AC((uint64_t)v655, v680);
      v676 = *a3;
      v656 = a3[1];
    }
    else
    {
      v681 = 0;
    }
    v691 = &v681[4 * v677];
    v692 = &v681[4 * v680];
    *(_DWORD *)v691 = v674;
    v675 = v691 + 4;
    while (v656 != v676)
    {
      int v693 = *((_DWORD *)v656 - 1);
      v656 -= 4;
      *((_DWORD *)v691 - 1) = v693;
      v691 -= 4;
    }
    *a3 = v691;
    a3[1] = v675;
    a3[2] = v692;
    if (v676) {
      operator delete(v676);
    }
  }
  else
  {
    *(_DWORD *)v656 = v674;
    v675 = v656 + 4;
  }
  a3[1] = v675;
  v694 = *v9;
  v695 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v697 = *(unsigned __int32 **)a2;
    uint64_t v698 = ((uint64_t)v694 - *(void *)a2) >> 2;
    unint64_t v699 = v698 + 1;
    if ((unint64_t)(v698 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v700 = v695 - (char *)v697;
    if (v700 >> 1 > v699) {
      unint64_t v699 = v700 >> 1;
    }
    if ((unint64_t)v700 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v701 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v701 = v699;
    }
    if (v701)
    {
      v702 = (char *)sub_20B05D1AC((uint64_t)v13, v701);
      v697 = *(unsigned __int32 **)a2;
      v694 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v702 = 0;
    }
    v712 = &v702[4 * v698];
    v695 = &v702[4 * v701];
    *(_DWORD *)v712 = v1527.n128_u32[0];
    v696 = (unsigned __int32 *)(v712 + 4);
    while (v694 != v697)
    {
      int v713 = *--v694;
      *((_DWORD *)v712 - 1) = v713;
      v712 -= 4;
    }
    *(void *)a2 = v712;
    *(void *)(a2 + 8) = v696;
    *(void *)(a2 + 16) = v695;
    if (v697)
    {
      operator delete(v697);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v694 = v1527.n128_u32[0];
    v696 = v694 + 1;
  }
  *float v9 = v696;
  if (v696 >= (unsigned __int32 *)v695)
  {
    v715 = *(unsigned __int32 **)a2;
    uint64_t v716 = ((uint64_t)v696 - *(void *)a2) >> 2;
    unint64_t v717 = v716 + 1;
    if ((unint64_t)(v716 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v718 = v695 - (char *)v715;
    if (v718 >> 1 > v717) {
      unint64_t v717 = v718 >> 1;
    }
    if ((unint64_t)v718 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v719 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v719 = v717;
    }
    if (v719)
    {
      v720 = (char *)sub_20B05D1AC((uint64_t)v13, v719);
      v715 = *(unsigned __int32 **)a2;
      v696 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v720 = 0;
    }
    v731 = (unsigned __int32 *)&v720[4 * v716];
    v695 = &v720[4 * v719];
    unsigned __int32 *v731 = v28;
    v714 = v731 + 1;
    while (v696 != v715)
    {
      unsigned __int32 v732 = *--v696;
      *--v731 = v732;
    }
    *(void *)a2 = v731;
    *(void *)(a2 + 8) = v714;
    *(void *)(a2 + 16) = v695;
    if (v715)
    {
      operator delete(v715);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v696 = v28;
    v714 = v696 + 1;
  }
  *float v9 = v714;
  if (v714 >= (unsigned __int32 *)v695)
  {
    v734 = *(unsigned __int32 **)a2;
    uint64_t v735 = ((uint64_t)v714 - *(void *)a2) >> 2;
    unint64_t v736 = v735 + 1;
    if ((unint64_t)(v735 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v737 = v695 - (char *)v734;
    if (v737 >> 1 > v736) {
      unint64_t v736 = v737 >> 1;
    }
    if ((unint64_t)v737 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v738 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v738 = v736;
    }
    if (v738)
    {
      v739 = (char *)sub_20B05D1AC((uint64_t)v13, v738);
      v734 = *(unsigned __int32 **)a2;
      v714 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v739 = 0;
    }
    v749 = &v739[4 * v735];
    v695 = &v739[4 * v738];
    *(_DWORD *)v749 = a5.n128_u32[2];
    v733 = (unsigned __int32 *)(v749 + 4);
    while (v714 != v734)
    {
      int v750 = *--v714;
      *((_DWORD *)v749 - 1) = v750;
      v749 -= 4;
    }
    *(void *)a2 = v749;
    *(void *)(a2 + 8) = v733;
    *(void *)(a2 + 16) = v695;
    if (v734)
    {
      operator delete(v734);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v714 = a5.n128_u32[2];
    v733 = v714 + 1;
  }
  *float v9 = v733;
  if (v733 >= (unsigned __int32 *)v695)
  {
    v752 = *(unsigned __int32 **)a2;
    uint64_t v753 = ((uint64_t)v733 - *(void *)a2) >> 2;
    unint64_t v754 = v753 + 1;
    if ((unint64_t)(v753 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v755 = v695 - (char *)v752;
    if (v755 >> 1 > v754) {
      unint64_t v754 = v755 >> 1;
    }
    if ((unint64_t)v755 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v756 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v756 = v754;
    }
    if (v756)
    {
      v757 = (char *)sub_20B05D1AC((uint64_t)v13, v756);
      v752 = *(unsigned __int32 **)a2;
      v733 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v757 = 0;
    }
    v768 = &v757[4 * v753];
    v695 = &v757[4 * v756];
    *(_DWORD *)v768 = v1527.n128_u32[0];
    v751 = (unsigned __int32 *)(v768 + 4);
    while (v733 != v752)
    {
      int v769 = *--v733;
      *((_DWORD *)v768 - 1) = v769;
      v768 -= 4;
    }
    *(void *)a2 = v768;
    *(void *)(a2 + 8) = v751;
    *(void *)(a2 + 16) = v695;
    if (v752)
    {
      operator delete(v752);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v733 = v1527.n128_u32[0];
    v751 = v733 + 1;
  }
  *float v9 = v751;
  if (v751 >= (unsigned __int32 *)v695)
  {
    v771 = *(unsigned __int32 **)a2;
    uint64_t v772 = ((uint64_t)v751 - *(void *)a2) >> 2;
    unint64_t v773 = v772 + 1;
    if ((unint64_t)(v772 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v774 = v695 - (char *)v771;
    if (v774 >> 1 > v773) {
      unint64_t v773 = v774 >> 1;
    }
    if ((unint64_t)v774 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v775 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v775 = v773;
    }
    if (v775)
    {
      v776 = (char *)sub_20B05D1AC((uint64_t)v13, v775);
      v771 = *(unsigned __int32 **)a2;
      v751 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v776 = 0;
    }
    v786 = (unsigned __int32 *)&v776[4 * v772];
    v695 = &v776[4 * v775];
    unsigned __int32 *v786 = v28;
    v770 = v786 + 1;
    while (v751 != v771)
    {
      unsigned __int32 v787 = *--v751;
      *--v786 = v787;
    }
    *(void *)a2 = v786;
    *(void *)(a2 + 8) = v770;
    *(void *)(a2 + 16) = v695;
    if (v771)
    {
      operator delete(v771);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v751 = v28;
    v770 = v751 + 1;
  }
  *float v9 = v770;
  if (v770 >= (unsigned __int32 *)v695)
  {
    v789 = *(unsigned __int32 **)a2;
    uint64_t v790 = ((uint64_t)v770 - *(void *)a2) >> 2;
    unint64_t v791 = v790 + 1;
    if ((unint64_t)(v790 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v792 = v695 - (char *)v789;
    if (v792 >> 1 > v791) {
      unint64_t v791 = v792 >> 1;
    }
    if ((unint64_t)v792 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v793 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v793 = v791;
    }
    if (v793)
    {
      v794 = (char *)sub_20B05D1AC((uint64_t)v13, v793);
      v789 = *(unsigned __int32 **)a2;
      v770 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v794 = 0;
    }
    v804 = &v794[4 * v790];
    v695 = &v794[4 * v793];
    *(_DWORD *)v804 = a5.n128_u32[2];
    v788 = (unsigned __int32 *)(v804 + 4);
    while (v770 != v789)
    {
      int v805 = *--v770;
      *((_DWORD *)v804 - 1) = v805;
      v804 -= 4;
    }
    *(void *)a2 = v804;
    *(void *)(a2 + 8) = v788;
    *(void *)(a2 + 16) = v695;
    if (v789)
    {
      operator delete(v789);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v770 = a5.n128_u32[2];
    v788 = v770 + 1;
  }
  *float v9 = v788;
  if (v788 >= (unsigned __int32 *)v695)
  {
    v807 = *(unsigned __int32 **)a2;
    uint64_t v808 = ((uint64_t)v788 - *(void *)a2) >> 2;
    unint64_t v809 = v808 + 1;
    if ((unint64_t)(v808 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v810 = v695 - (char *)v807;
    if (v810 >> 1 > v809) {
      unint64_t v809 = v810 >> 1;
    }
    if ((unint64_t)v810 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v811 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v811 = v809;
    }
    if (v811)
    {
      v812 = (char *)sub_20B05D1AC((uint64_t)v13, v811);
      v807 = *(unsigned __int32 **)a2;
      v788 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v812 = 0;
    }
    v822 = &v812[4 * v808];
    v695 = &v812[4 * v811];
    *(_DWORD *)v822 = a5.n128_u32[0];
    v806 = (unsigned __int32 *)(v822 + 4);
    while (v788 != v807)
    {
      int v823 = *--v788;
      *((_DWORD *)v822 - 1) = v823;
      v822 -= 4;
    }
    *(void *)a2 = v822;
    *(void *)(a2 + 8) = v806;
    *(void *)(a2 + 16) = v695;
    if (v807)
    {
      operator delete(v807);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v788 = a5.n128_u32[0];
    v806 = v788 + 1;
  }
  *float v9 = v806;
  if (v806 >= (unsigned __int32 *)v695)
  {
    v825 = *(unsigned __int32 **)a2;
    uint64_t v826 = ((uint64_t)v806 - *(void *)a2) >> 2;
    unint64_t v827 = v826 + 1;
    if ((unint64_t)(v826 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v828 = v695 - (char *)v825;
    if (v828 >> 1 > v827) {
      unint64_t v827 = v828 >> 1;
    }
    if ((unint64_t)v828 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v829 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v829 = v827;
    }
    if (v829)
    {
      v830 = (char *)sub_20B05D1AC((uint64_t)v13, v829);
      v825 = *(unsigned __int32 **)a2;
      v806 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v830 = 0;
    }
    v840 = (unsigned __int32 *)&v830[4 * v826];
    v695 = &v830[4 * v829];
    unsigned __int32 *v840 = v28;
    v824 = v840 + 1;
    while (v806 != v825)
    {
      unsigned __int32 v841 = *--v806;
      *--v840 = v841;
    }
    *(void *)a2 = v840;
    *(void *)(a2 + 8) = v824;
    *(void *)(a2 + 16) = v695;
    if (v825)
    {
      operator delete(v825);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v806 = v28;
    v824 = v806 + 1;
  }
  *float v9 = v824;
  if (v824 >= (unsigned __int32 *)v695)
  {
    v843 = *(unsigned __int32 **)a2;
    uint64_t v844 = ((uint64_t)v824 - *(void *)a2) >> 2;
    unint64_t v845 = v844 + 1;
    if ((unint64_t)(v844 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v846 = v695 - (char *)v843;
    if (v846 >> 1 > v845) {
      unint64_t v845 = v846 >> 1;
    }
    if ((unint64_t)v846 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v847 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v847 = v845;
    }
    if (v847)
    {
      v848 = (char *)sub_20B05D1AC((uint64_t)v13, v847);
      v843 = *(unsigned __int32 **)a2;
      v824 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v848 = 0;
    }
    v858 = &v848[4 * v844];
    v695 = &v848[4 * v847];
    *(_DWORD *)v858 = a5.n128_u32[2];
    v842 = (unsigned __int32 *)(v858 + 4);
    while (v824 != v843)
    {
      int v859 = *--v824;
      *((_DWORD *)v858 - 1) = v859;
      v858 -= 4;
    }
    *(void *)a2 = v858;
    *(void *)(a2 + 8) = v842;
    *(void *)(a2 + 16) = v695;
    if (v843)
    {
      operator delete(v843);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v824 = a5.n128_u32[2];
    v842 = v824 + 1;
  }
  *float v9 = v842;
  if (v842 >= (unsigned __int32 *)v695)
  {
    v861 = *(unsigned __int32 **)a2;
    uint64_t v862 = ((uint64_t)v842 - *(void *)a2) >> 2;
    unint64_t v863 = v862 + 1;
    if ((unint64_t)(v862 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v864 = v695 - (char *)v861;
    if (v864 >> 1 > v863) {
      unint64_t v863 = v864 >> 1;
    }
    if ((unint64_t)v864 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v865 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v865 = v863;
    }
    if (v865)
    {
      v866 = (char *)sub_20B05D1AC((uint64_t)v13, v865);
      v861 = *(unsigned __int32 **)a2;
      v842 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v866 = 0;
    }
    v876 = &v866[4 * v862];
    v695 = &v866[4 * v865];
    *(_DWORD *)v876 = v1527.n128_u32[0];
    v860 = (unsigned __int32 *)(v876 + 4);
    while (v842 != v861)
    {
      int v877 = *--v842;
      *((_DWORD *)v876 - 1) = v877;
      v876 -= 4;
    }
    *(void *)a2 = v876;
    *(void *)(a2 + 8) = v860;
    *(void *)(a2 + 16) = v695;
    if (v861)
    {
      operator delete(v861);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v842 = v1527.n128_u32[0];
    v860 = v842 + 1;
  }
  *float v9 = v860;
  if (v860 >= (unsigned __int32 *)v695)
  {
    v879 = *(unsigned __int32 **)a2;
    uint64_t v880 = ((uint64_t)v860 - *(void *)a2) >> 2;
    unint64_t v881 = v880 + 1;
    if ((unint64_t)(v880 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v882 = v695 - (char *)v879;
    if (v882 >> 1 > v881) {
      unint64_t v881 = v882 >> 1;
    }
    if ((unint64_t)v882 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v883 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v883 = v881;
    }
    if (v883)
    {
      v884 = (char *)sub_20B05D1AC((uint64_t)v13, v883);
      v879 = *(unsigned __int32 **)a2;
      v860 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v884 = 0;
    }
    v894 = &v884[4 * v880];
    v695 = &v884[4 * v883];
    *(_DWORD *)v894 = a5.n128_u32[1];
    v878 = (unsigned __int32 *)(v894 + 4);
    while (v860 != v879)
    {
      int v895 = *--v860;
      *((_DWORD *)v894 - 1) = v895;
      v894 -= 4;
    }
    *(void *)a2 = v894;
    *(void *)(a2 + 8) = v878;
    *(void *)(a2 + 16) = v695;
    if (v879)
    {
      operator delete(v879);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v860 = a5.n128_u32[1];
    v878 = v860 + 1;
  }
  *float v9 = v878;
  if (v878 >= (unsigned __int32 *)v695)
  {
    v897 = *(unsigned __int32 **)a2;
    uint64_t v898 = ((uint64_t)v878 - *(void *)a2) >> 2;
    unint64_t v899 = v898 + 1;
    if ((unint64_t)(v898 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v900 = v695 - (char *)v897;
    if (v900 >> 1 > v899) {
      unint64_t v899 = v900 >> 1;
    }
    if ((unint64_t)v900 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v901 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v901 = v899;
    }
    if (v901)
    {
      v902 = (char *)sub_20B05D1AC((uint64_t)v13, v901);
      v897 = *(unsigned __int32 **)a2;
      v878 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v902 = 0;
    }
    v912 = &v902[4 * v898];
    v695 = &v902[4 * v901];
    *(_DWORD *)v912 = a5.n128_u32[2];
    v896 = (unsigned __int32 *)(v912 + 4);
    while (v878 != v897)
    {
      int v913 = *--v878;
      *((_DWORD *)v912 - 1) = v913;
      v912 -= 4;
    }
    *(void *)a2 = v912;
    *(void *)(a2 + 8) = v896;
    *(void *)(a2 + 16) = v695;
    if (v897)
    {
      operator delete(v897);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v878 = a5.n128_u32[2];
    v896 = v878 + 1;
  }
  *float v9 = v896;
  if (v896 >= (unsigned __int32 *)v695)
  {
    v915 = *(unsigned __int32 **)a2;
    uint64_t v916 = ((uint64_t)v896 - *(void *)a2) >> 2;
    unint64_t v917 = v916 + 1;
    if ((unint64_t)(v916 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v918 = v695 - (char *)v915;
    if (v918 >> 1 > v917) {
      unint64_t v917 = v918 >> 1;
    }
    if ((unint64_t)v918 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v919 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v919 = v917;
    }
    if (v919)
    {
      v920 = (char *)sub_20B05D1AC((uint64_t)v13, v919);
      v915 = *(unsigned __int32 **)a2;
      v896 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v920 = 0;
    }
    v924 = &v920[4 * v916];
    v695 = &v920[4 * v919];
    *(_DWORD *)v924 = a5.n128_u32[0];
    v914 = (unsigned __int32 *)(v924 + 4);
    while (v896 != v915)
    {
      int v925 = *--v896;
      *((_DWORD *)v924 - 1) = v925;
      v924 -= 4;
    }
    *(void *)a2 = v924;
    *(void *)(a2 + 8) = v914;
    *(void *)(a2 + 16) = v695;
    if (v915)
    {
      operator delete(v915);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v896 = a5.n128_u32[0];
    v914 = v896 + 1;
  }
  *float v9 = v914;
  if (v914 >= (unsigned __int32 *)v695)
  {
    v927 = *(unsigned __int32 **)a2;
    uint64_t v928 = ((uint64_t)v914 - *(void *)a2) >> 2;
    unint64_t v929 = v928 + 1;
    if ((unint64_t)(v928 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v930 = v695 - (char *)v927;
    if (v930 >> 1 > v929) {
      unint64_t v929 = v930 >> 1;
    }
    if ((unint64_t)v930 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v931 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v931 = v929;
    }
    if (v931)
    {
      v932 = (char *)sub_20B05D1AC((uint64_t)v13, v931);
      v927 = *(unsigned __int32 **)a2;
      v914 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v932 = 0;
    }
    v933 = &v932[4 * v928];
    v695 = &v932[4 * v931];
    *(_DWORD *)v933 = a5.n128_u32[1];
    v926 = (unsigned __int32 *)(v933 + 4);
    while (v914 != v927)
    {
      int v934 = *--v914;
      *((_DWORD *)v933 - 1) = v934;
      v933 -= 4;
    }
    *(void *)a2 = v933;
    *(void *)(a2 + 8) = v926;
    *(void *)(a2 + 16) = v695;
    if (v927)
    {
      operator delete(v927);
      v695 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v914 = a5.n128_u32[1];
    v926 = v914 + 1;
  }
  *float v9 = v926;
  if (v926 >= (unsigned __int32 *)v695)
  {
    v936 = *(unsigned __int32 **)a2;
    uint64_t v937 = ((uint64_t)v926 - *(void *)a2) >> 2;
    unint64_t v938 = v937 + 1;
    if ((unint64_t)(v937 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v939 = v695 - (char *)v936;
    if (v939 >> 1 > v938) {
      unint64_t v938 = v939 >> 1;
    }
    if ((unint64_t)v939 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v940 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v940 = v938;
    }
    if (v940)
    {
      v941 = (char *)sub_20B05D1AC((uint64_t)v13, v940);
      v936 = *(unsigned __int32 **)a2;
      v926 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v941 = 0;
    }
    v942 = &v941[4 * v937];
    v943 = &v941[4 * v940];
    *(_DWORD *)v942 = a5.n128_u32[2];
    v935 = (unsigned __int32 *)(v942 + 4);
    while (v926 != v936)
    {
      int v944 = *--v926;
      *((_DWORD *)v942 - 1) = v944;
      v942 -= 4;
    }
    *(void *)a2 = v942;
    *(void *)(a2 + 8) = v935;
    *(void *)(a2 + 16) = v943;
    if (v936) {
      operator delete(v936);
    }
  }
  else
  {
    unsigned __int32 *v926 = a5.n128_u32[2];
    v935 = v926 + 1;
  }
  *float v9 = v935;
  int v945 = v230 + 8;
  v947 = a3[1];
  v946 = a3[2];
  if (v947 >= v946)
  {
    v949 = *a3;
    uint64_t v950 = (v947 - *a3) >> 2;
    unint64_t v951 = v950 + 1;
    if ((unint64_t)(v950 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v952 = v946 - v949;
    if (v952 >> 1 > v951) {
      unint64_t v951 = v952 >> 1;
    }
    if ((unint64_t)v952 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v953 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v953 = v951;
    }
    if (v953)
    {
      v954 = (char *)sub_20B05D1AC((uint64_t)v655, v953);
      v949 = *a3;
      v947 = a3[1];
    }
    else
    {
      v954 = 0;
    }
    v955 = &v954[4 * v950];
    v946 = &v954[4 * v953];
    *(_DWORD *)v955 = v945;
    v948 = v955 + 4;
    while (v947 != v949)
    {
      int v956 = *((_DWORD *)v947 - 1);
      v947 -= 4;
      *((_DWORD *)v955 - 1) = v956;
      v955 -= 4;
    }
    *a3 = v955;
    a3[1] = v948;
    a3[2] = v946;
    if (v949)
    {
      operator delete(v949);
      v946 = *v655;
    }
  }
  else
  {
    *(_DWORD *)v947 = v945;
    v948 = v947 + 4;
  }
  a3[1] = v948;
  int v957 = v230 + 9;
  if (v948 >= v946)
  {
    v959 = *a3;
    uint64_t v960 = (v948 - *a3) >> 2;
    unint64_t v961 = v960 + 1;
    if ((unint64_t)(v960 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v962 = v946 - v959;
    if (v962 >> 1 > v961) {
      unint64_t v961 = v962 >> 1;
    }
    if ((unint64_t)v962 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v963 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v963 = v961;
    }
    if (v963)
    {
      v964 = (char *)sub_20B05D1AC((uint64_t)v655, v963);
      v959 = *a3;
      v948 = a3[1];
    }
    else
    {
      v964 = 0;
    }
    v965 = &v964[4 * v960];
    v946 = &v964[4 * v963];
    *(_DWORD *)v965 = v957;
    v958 = v965 + 4;
    while (v948 != v959)
    {
      int v966 = *((_DWORD *)v948 - 1);
      v948 -= 4;
      *((_DWORD *)v965 - 1) = v966;
      v965 -= 4;
    }
    *a3 = v965;
    a3[1] = v958;
    a3[2] = v946;
    if (v959)
    {
      operator delete(v959);
      v946 = *v655;
    }
  }
  else
  {
    *(_DWORD *)v948 = v957;
    v958 = v948 + 4;
  }
  a3[1] = v958;
  int v967 = v230 + 10;
  if (v958 >= v946)
  {
    v969 = *a3;
    uint64_t v970 = (v958 - *a3) >> 2;
    unint64_t v971 = v970 + 1;
    if ((unint64_t)(v970 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v972 = v946 - v969;
    if (v972 >> 1 > v971) {
      unint64_t v971 = v972 >> 1;
    }
    if ((unint64_t)v972 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v973 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v973 = v971;
    }
    if (v973)
    {
      v974 = (char *)sub_20B05D1AC((uint64_t)v655, v973);
      v969 = *a3;
      v958 = a3[1];
    }
    else
    {
      v974 = 0;
    }
    v975 = &v974[4 * v970];
    v946 = &v974[4 * v973];
    *(_DWORD *)v975 = v967;
    v968 = v975 + 4;
    while (v958 != v969)
    {
      int v976 = *((_DWORD *)v958 - 1);
      v958 -= 4;
      *((_DWORD *)v975 - 1) = v976;
      v975 -= 4;
    }
    *a3 = v975;
    a3[1] = v968;
    a3[2] = v946;
    if (v969)
    {
      operator delete(v969);
      v946 = *v1526;
    }
  }
  else
  {
    *(_DWORD *)v958 = v967;
    v968 = v958 + 4;
  }
  a3[1] = v968;
  if (v968 >= v946)
  {
    v978 = *a3;
    uint64_t v979 = (v968 - *a3) >> 2;
    unint64_t v980 = v979 + 1;
    if ((unint64_t)(v979 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v981 = v946 - v978;
    if (v981 >> 1 > v980) {
      unint64_t v980 = v981 >> 1;
    }
    if ((unint64_t)v981 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v982 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v982 = v980;
    }
    if (v982)
    {
      v983 = (char *)sub_20B05D1AC((uint64_t)v1526, v982);
      v978 = *a3;
      v968 = a3[1];
    }
    else
    {
      v983 = 0;
    }
    v984 = &v983[4 * v979];
    v946 = &v983[4 * v982];
    *(_DWORD *)v984 = v957;
    v977 = v984 + 4;
    while (v968 != v978)
    {
      int v985 = *((_DWORD *)v968 - 1);
      v968 -= 4;
      *((_DWORD *)v984 - 1) = v985;
      v984 -= 4;
    }
    *a3 = v984;
    a3[1] = v977;
    a3[2] = v946;
    if (v978)
    {
      operator delete(v978);
      v986 = a3 + 2;
      v946 = *v1526;
      goto LABEL_1656;
    }
  }
  else
  {
    *(_DWORD *)v968 = v957;
    v977 = v968 + 4;
  }
  v986 = a3 + 2;
LABEL_1656:
  a3[1] = v977;
  int v987 = v230 + 11;
  if (v977 >= v946)
  {
    v989 = *a3;
    uint64_t v990 = (v977 - *a3) >> 2;
    unint64_t v991 = v990 + 1;
    if ((unint64_t)(v990 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v992 = v946 - v989;
    if (v992 >> 1 > v991) {
      unint64_t v991 = v992 >> 1;
    }
    if ((unint64_t)v992 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v993 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v993 = v991;
    }
    if (v993)
    {
      v994 = (char *)sub_20B05D1AC((uint64_t)v986, v993);
      v989 = *a3;
      v977 = a3[1];
    }
    else
    {
      v994 = 0;
    }
    v995 = &v994[4 * v990];
    v946 = &v994[4 * v993];
    *(_DWORD *)v995 = v987;
    v988 = v995 + 4;
    while (v977 != v989)
    {
      int v996 = *((_DWORD *)v977 - 1);
      v977 -= 4;
      *((_DWORD *)v995 - 1) = v996;
      v995 -= 4;
    }
    *a3 = v995;
    a3[1] = v988;
    a3[2] = v946;
    if (v989)
    {
      operator delete(v989);
      v946 = *v986;
    }
  }
  else
  {
    *(_DWORD *)v977 = v987;
    v988 = v977 + 4;
  }
  a3[1] = v988;
  if (v988 >= v946)
  {
    v998 = *a3;
    uint64_t v999 = (v988 - *a3) >> 2;
    unint64_t v1000 = v999 + 1;
    if ((unint64_t)(v999 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1001 = v946 - v998;
    if (v1001 >> 1 > v1000) {
      unint64_t v1000 = v1001 >> 1;
    }
    if ((unint64_t)v1001 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1002 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1002 = v1000;
    }
    if (v1002)
    {
      v1003 = (char *)sub_20B05D1AC((uint64_t)v986, v1002);
      v998 = *a3;
      v988 = a3[1];
    }
    else
    {
      v1003 = 0;
    }
    v1004 = &v1003[4 * v999];
    v1005 = &v1003[4 * v1002];
    *(_DWORD *)v1004 = v967;
    v997 = v1004 + 4;
    while (v988 != v998)
    {
      int v1006 = *((_DWORD *)v988 - 1);
      v988 -= 4;
      *((_DWORD *)v1004 - 1) = v1006;
      v1004 -= 4;
    }
    *a3 = v1004;
    a3[1] = v997;
    a3[2] = v1005;
    if (v998) {
      operator delete(v998);
    }
  }
  else
  {
    *(_DWORD *)v988 = v967;
    v997 = v988 + 4;
  }
  a3[1] = v997;
  v1007 = *v9;
  v1008 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1010 = *(unsigned __int32 **)a2;
    uint64_t v1011 = ((uint64_t)v1007 - *(void *)a2) >> 2;
    unint64_t v1012 = v1011 + 1;
    if ((unint64_t)(v1011 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1013 = v1008 - (char *)v1010;
    if (v1013 >> 1 > v1012) {
      unint64_t v1012 = v1013 >> 1;
    }
    if ((unint64_t)v1013 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1014 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1014 = v1012;
    }
    if (v1014)
    {
      v1015 = (char *)sub_20B05D1AC((uint64_t)v13, v1014);
      v1010 = *(unsigned __int32 **)a2;
      v1007 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1015 = 0;
    }
    v1016 = &v1015[4 * v1011];
    v1008 = &v1015[4 * v1014];
    *(_DWORD *)v1016 = a5.n128_u32[0];
    v1009 = (unsigned __int32 *)(v1016 + 4);
    while (v1007 != v1010)
    {
      int v1017 = *--v1007;
      *((_DWORD *)v1016 - 1) = v1017;
      v1016 -= 4;
    }
    *(void *)a2 = v1016;
    *(void *)(a2 + 8) = v1009;
    *(void *)(a2 + 16) = v1008;
    if (v1010)
    {
      operator delete(v1010);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1007 = a5.n128_u32[0];
    v1009 = v1007 + 1;
  }
  *float v9 = v1009;
  if (v1009 >= (unsigned __int32 *)v1008)
  {
    v1019 = *(unsigned __int32 **)a2;
    uint64_t v1020 = ((uint64_t)v1009 - *(void *)a2) >> 2;
    unint64_t v1021 = v1020 + 1;
    if ((unint64_t)(v1020 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1022 = v1008 - (char *)v1019;
    if (v1022 >> 1 > v1021) {
      unint64_t v1021 = v1022 >> 1;
    }
    if ((unint64_t)v1022 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1023 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1023 = v1021;
    }
    if (v1023)
    {
      v1024 = (char *)sub_20B05D1AC((uint64_t)v13, v1023);
      v1019 = *(unsigned __int32 **)a2;
      v1009 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1024 = 0;
    }
    v1025 = (unsigned __int32 *)&v1024[4 * v1020];
    v1008 = &v1024[4 * v1023];
    unsigned __int32 *v1025 = v28;
    v1018 = v1025 + 1;
    while (v1009 != v1019)
    {
      unsigned __int32 v1026 = *--v1009;
      *--v1025 = v1026;
    }
    *(void *)a2 = v1025;
    *(void *)(a2 + 8) = v1018;
    *(void *)(a2 + 16) = v1008;
    if (v1019)
    {
      operator delete(v1019);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1009 = v28;
    v1018 = v1009 + 1;
  }
  *float v9 = v1018;
  if (v1018 >= (unsigned __int32 *)v1008)
  {
    v1028 = *(unsigned __int32 **)a2;
    uint64_t v1029 = ((uint64_t)v1018 - *(void *)a2) >> 2;
    unint64_t v1030 = v1029 + 1;
    if ((unint64_t)(v1029 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1031 = v1008 - (char *)v1028;
    if (v1031 >> 1 > v1030) {
      unint64_t v1030 = v1031 >> 1;
    }
    if ((unint64_t)v1031 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1032 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1032 = v1030;
    }
    if (v1032)
    {
      v1033 = (char *)sub_20B05D1AC((uint64_t)v13, v1032);
      v1028 = *(unsigned __int32 **)a2;
      v1018 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1033 = 0;
    }
    v1034 = (unsigned __int32 *)&v1033[4 * v1029];
    v1008 = &v1033[4 * v1032];
    unsigned __int32 *v1034 = v48;
    v1027 = v1034 + 1;
    while (v1018 != v1028)
    {
      unsigned __int32 v1035 = *--v1018;
      *--v1034 = v1035;
    }
    *(void *)a2 = v1034;
    *(void *)(a2 + 8) = v1027;
    *(void *)(a2 + 16) = v1008;
    if (v1028)
    {
      operator delete(v1028);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1018 = v48;
    v1027 = v1018 + 1;
  }
  *float v9 = v1027;
  if (v1027 >= (unsigned __int32 *)v1008)
  {
    v1037 = *(unsigned __int32 **)a2;
    uint64_t v1038 = ((uint64_t)v1027 - *(void *)a2) >> 2;
    unint64_t v1039 = v1038 + 1;
    if ((unint64_t)(v1038 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1040 = v1008 - (char *)v1037;
    if (v1040 >> 1 > v1039) {
      unint64_t v1039 = v1040 >> 1;
    }
    if ((unint64_t)v1040 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1041 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1041 = v1039;
    }
    if (v1041)
    {
      v1042 = (char *)sub_20B05D1AC((uint64_t)v13, v1041);
      v1037 = *(unsigned __int32 **)a2;
      v1027 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1042 = 0;
    }
    v1043 = &v1042[4 * v1038];
    v1008 = &v1042[4 * v1041];
    *(_DWORD *)v1043 = a5.n128_u32[0];
    v1036 = (unsigned __int32 *)(v1043 + 4);
    while (v1027 != v1037)
    {
      int v1044 = *--v1027;
      *((_DWORD *)v1043 - 1) = v1044;
      v1043 -= 4;
    }
    *(void *)a2 = v1043;
    *(void *)(a2 + 8) = v1036;
    *(void *)(a2 + 16) = v1008;
    if (v1037)
    {
      operator delete(v1037);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1027 = a5.n128_u32[0];
    v1036 = v1027 + 1;
  }
  *float v9 = v1036;
  if (v1036 >= (unsigned __int32 *)v1008)
  {
    v1046 = *(unsigned __int32 **)a2;
    uint64_t v1047 = ((uint64_t)v1036 - *(void *)a2) >> 2;
    unint64_t v1048 = v1047 + 1;
    if ((unint64_t)(v1047 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1049 = v1008 - (char *)v1046;
    if (v1049 >> 1 > v1048) {
      unint64_t v1048 = v1049 >> 1;
    }
    if ((unint64_t)v1049 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1050 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1050 = v1048;
    }
    if (v1050)
    {
      v1051 = (char *)sub_20B05D1AC((uint64_t)v13, v1050);
      v1046 = *(unsigned __int32 **)a2;
      v1036 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1051 = 0;
    }
    v1052 = &v1051[4 * v1047];
    v1008 = &v1051[4 * v1050];
    *(_DWORD *)v1052 = a5.n128_u32[1];
    v1045 = (unsigned __int32 *)(v1052 + 4);
    while (v1036 != v1046)
    {
      int v1053 = *--v1036;
      *((_DWORD *)v1052 - 1) = v1053;
      v1052 -= 4;
    }
    *(void *)a2 = v1052;
    *(void *)(a2 + 8) = v1045;
    *(void *)(a2 + 16) = v1008;
    if (v1046)
    {
      operator delete(v1046);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1036 = a5.n128_u32[1];
    v1045 = v1036 + 1;
  }
  *float v9 = v1045;
  if (v1045 >= (unsigned __int32 *)v1008)
  {
    v1055 = *(unsigned __int32 **)a2;
    uint64_t v1056 = ((uint64_t)v1045 - *(void *)a2) >> 2;
    unint64_t v1057 = v1056 + 1;
    if ((unint64_t)(v1056 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1058 = v1008 - (char *)v1055;
    if (v1058 >> 1 > v1057) {
      unint64_t v1057 = v1058 >> 1;
    }
    if ((unint64_t)v1058 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1059 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1059 = v1057;
    }
    if (v1059)
    {
      v1060 = (char *)sub_20B05D1AC((uint64_t)v13, v1059);
      v1055 = *(unsigned __int32 **)a2;
      v1045 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1060 = 0;
    }
    v1061 = (unsigned __int32 *)&v1060[4 * v1056];
    v1008 = &v1060[4 * v1059];
    unsigned __int32 *v1061 = v48;
    v1054 = v1061 + 1;
    while (v1045 != v1055)
    {
      unsigned __int32 v1062 = *--v1045;
      *--v1061 = v1062;
    }
    *(void *)a2 = v1061;
    *(void *)(a2 + 8) = v1054;
    *(void *)(a2 + 16) = v1008;
    if (v1055)
    {
      operator delete(v1055);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1045 = v48;
    v1054 = v1045 + 1;
  }
  *float v9 = v1054;
  if (v1054 >= (unsigned __int32 *)v1008)
  {
    v1064 = *(unsigned __int32 **)a2;
    uint64_t v1065 = ((uint64_t)v1054 - *(void *)a2) >> 2;
    unint64_t v1066 = v1065 + 1;
    if ((unint64_t)(v1065 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1067 = v1008 - (char *)v1064;
    if (v1067 >> 1 > v1066) {
      unint64_t v1066 = v1067 >> 1;
    }
    if ((unint64_t)v1067 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1068 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1068 = v1066;
    }
    if (v1068)
    {
      v1069 = (char *)sub_20B05D1AC((uint64_t)v13, v1068);
      v1064 = *(unsigned __int32 **)a2;
      v1054 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1069 = 0;
    }
    v1070 = &v1069[4 * v1065];
    v1008 = &v1069[4 * v1068];
    *(_DWORD *)v1070 = a5.n128_u32[0];
    v1063 = (unsigned __int32 *)(v1070 + 4);
    while (v1054 != v1064)
    {
      int v1071 = *--v1054;
      *((_DWORD *)v1070 - 1) = v1071;
      v1070 -= 4;
    }
    *(void *)a2 = v1070;
    *(void *)(a2 + 8) = v1063;
    *(void *)(a2 + 16) = v1008;
    if (v1064)
    {
      operator delete(v1064);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1054 = a5.n128_u32[0];
    v1063 = v1054 + 1;
  }
  *float v9 = v1063;
  if (v1063 >= (unsigned __int32 *)v1008)
  {
    v1073 = *(unsigned __int32 **)a2;
    uint64_t v1074 = ((uint64_t)v1063 - *(void *)a2) >> 2;
    unint64_t v1075 = v1074 + 1;
    if ((unint64_t)(v1074 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1076 = v1008 - (char *)v1073;
    if (v1076 >> 1 > v1075) {
      unint64_t v1075 = v1076 >> 1;
    }
    if ((unint64_t)v1076 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1077 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1077 = v1075;
    }
    if (v1077)
    {
      v1078 = (char *)sub_20B05D1AC((uint64_t)v13, v1077);
      v1073 = *(unsigned __int32 **)a2;
      v1063 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1078 = 0;
    }
    v1079 = (unsigned __int32 *)&v1078[4 * v1074];
    v1008 = &v1078[4 * v1077];
    unsigned __int32 *v1079 = v28;
    v1072 = v1079 + 1;
    while (v1063 != v1073)
    {
      unsigned __int32 v1080 = *--v1063;
      *--v1079 = v1080;
    }
    *(void *)a2 = v1079;
    *(void *)(a2 + 8) = v1072;
    *(void *)(a2 + 16) = v1008;
    if (v1073)
    {
      operator delete(v1073);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1063 = v28;
    v1072 = v1063 + 1;
  }
  *float v9 = v1072;
  if (v1072 >= (unsigned __int32 *)v1008)
  {
    v1082 = *(unsigned __int32 **)a2;
    uint64_t v1083 = ((uint64_t)v1072 - *(void *)a2) >> 2;
    unint64_t v1084 = v1083 + 1;
    if ((unint64_t)(v1083 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1085 = v1008 - (char *)v1082;
    if (v1085 >> 1 > v1084) {
      unint64_t v1084 = v1085 >> 1;
    }
    if ((unint64_t)v1085 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1086 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1086 = v1084;
    }
    if (v1086)
    {
      v1087 = (char *)sub_20B05D1AC((uint64_t)v13, v1086);
      v1082 = *(unsigned __int32 **)a2;
      v1072 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1087 = 0;
    }
    v1088 = &v1087[4 * v1083];
    v1008 = &v1087[4 * v1086];
    *(_DWORD *)v1088 = a5.n128_u32[2];
    v1081 = (unsigned __int32 *)(v1088 + 4);
    while (v1072 != v1082)
    {
      int v1089 = *--v1072;
      *((_DWORD *)v1088 - 1) = v1089;
      v1088 -= 4;
    }
    *(void *)a2 = v1088;
    *(void *)(a2 + 8) = v1081;
    *(void *)(a2 + 16) = v1008;
    if (v1082)
    {
      operator delete(v1082);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1072 = a5.n128_u32[2];
    v1081 = v1072 + 1;
  }
  *float v9 = v1081;
  if (v1081 >= (unsigned __int32 *)v1008)
  {
    v1091 = *(unsigned __int32 **)a2;
    uint64_t v1092 = ((uint64_t)v1081 - *(void *)a2) >> 2;
    unint64_t v1093 = v1092 + 1;
    if ((unint64_t)(v1092 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1094 = v1008 - (char *)v1091;
    if (v1094 >> 1 > v1093) {
      unint64_t v1093 = v1094 >> 1;
    }
    if ((unint64_t)v1094 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1095 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1095 = v1093;
    }
    if (v1095)
    {
      v1096 = (char *)sub_20B05D1AC((uint64_t)v13, v1095);
      v1091 = *(unsigned __int32 **)a2;
      v1081 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1096 = 0;
    }
    v1097 = &v1096[4 * v1092];
    v1008 = &v1096[4 * v1095];
    *(_DWORD *)v1097 = a5.n128_u32[0];
    v1090 = (unsigned __int32 *)(v1097 + 4);
    while (v1081 != v1091)
    {
      int v1098 = *--v1081;
      *((_DWORD *)v1097 - 1) = v1098;
      v1097 -= 4;
    }
    *(void *)a2 = v1097;
    *(void *)(a2 + 8) = v1090;
    *(void *)(a2 + 16) = v1008;
    if (v1091)
    {
      operator delete(v1091);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1081 = a5.n128_u32[0];
    v1090 = v1081 + 1;
  }
  *float v9 = v1090;
  if (v1090 >= (unsigned __int32 *)v1008)
  {
    v1100 = *(unsigned __int32 **)a2;
    uint64_t v1101 = ((uint64_t)v1090 - *(void *)a2) >> 2;
    unint64_t v1102 = v1101 + 1;
    if ((unint64_t)(v1101 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1103 = v1008 - (char *)v1100;
    if (v1103 >> 1 > v1102) {
      unint64_t v1102 = v1103 >> 1;
    }
    if ((unint64_t)v1103 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1104 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1104 = v1102;
    }
    if (v1104)
    {
      v1105 = (char *)sub_20B05D1AC((uint64_t)v13, v1104);
      v1100 = *(unsigned __int32 **)a2;
      v1090 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1105 = 0;
    }
    v1106 = &v1105[4 * v1101];
    v1008 = &v1105[4 * v1104];
    *(_DWORD *)v1106 = a5.n128_u32[1];
    v1099 = (unsigned __int32 *)(v1106 + 4);
    while (v1090 != v1100)
    {
      int v1107 = *--v1090;
      *((_DWORD *)v1106 - 1) = v1107;
      v1106 -= 4;
    }
    *(void *)a2 = v1106;
    *(void *)(a2 + 8) = v1099;
    *(void *)(a2 + 16) = v1008;
    if (v1100)
    {
      operator delete(v1100);
      v1008 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1090 = a5.n128_u32[1];
    v1099 = v1090 + 1;
  }
  *float v9 = v1099;
  if (v1099 >= (unsigned __int32 *)v1008)
  {
    v1109 = *(unsigned __int32 **)a2;
    uint64_t v1110 = ((uint64_t)v1099 - *(void *)a2) >> 2;
    unint64_t v1111 = v1110 + 1;
    if ((unint64_t)(v1110 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1112 = v1008 - (char *)v1109;
    if (v1112 >> 1 > v1111) {
      unint64_t v1111 = v1112 >> 1;
    }
    if ((unint64_t)v1112 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1113 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1113 = v1111;
    }
    if (v1113)
    {
      v1114 = (char *)sub_20B05D1AC((uint64_t)v13, v1113);
      v1109 = *(unsigned __int32 **)a2;
      v1099 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1114 = 0;
    }
    v1115 = &v1114[4 * v1110];
    v1116 = &v1114[4 * v1113];
    *(_DWORD *)v1115 = a5.n128_u32[2];
    v1108 = (unsigned __int32 *)(v1115 + 4);
    while (v1099 != v1109)
    {
      int v1117 = *--v1099;
      *((_DWORD *)v1115 - 1) = v1117;
      v1115 -= 4;
    }
    *(void *)a2 = v1115;
    *(void *)(a2 + 8) = v1108;
    *(void *)(a2 + 16) = v1116;
    if (v1109) {
      operator delete(v1109);
    }
  }
  else
  {
    unsigned __int32 *v1099 = a5.n128_u32[2];
    v1108 = v1099 + 1;
  }
  *float v9 = v1108;
  int v1118 = v230 + 12;
  v1120 = a3[1];
  v1119 = a3[2];
  if (v1120 >= v1119)
  {
    v1122 = *a3;
    uint64_t v1123 = (v1120 - *a3) >> 2;
    unint64_t v1124 = v1123 + 1;
    if ((unint64_t)(v1123 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1125 = v1119 - v1122;
    if (v1125 >> 1 > v1124) {
      unint64_t v1124 = v1125 >> 1;
    }
    if ((unint64_t)v1125 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1126 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1126 = v1124;
    }
    if (v1126)
    {
      v1127 = (char *)sub_20B05D1AC((uint64_t)v986, v1126);
      v1122 = *a3;
      v1120 = a3[1];
    }
    else
    {
      v1127 = 0;
    }
    v1128 = &v1127[4 * v1123];
    v1119 = &v1127[4 * v1126];
    *(_DWORD *)v1128 = v1118;
    v1121 = v1128 + 4;
    while (v1120 != v1122)
    {
      int v1129 = *((_DWORD *)v1120 - 1);
      v1120 -= 4;
      *((_DWORD *)v1128 - 1) = v1129;
      v1128 -= 4;
    }
    *a3 = v1128;
    a3[1] = v1121;
    a3[2] = v1119;
    if (v1122)
    {
      operator delete(v1122);
      v1119 = *v986;
    }
  }
  else
  {
    *(_DWORD *)v1120 = v1118;
    v1121 = v1120 + 4;
  }
  a3[1] = v1121;
  int v1130 = v230 + 15;
  if (v1121 >= v1119)
  {
    v1132 = *a3;
    uint64_t v1133 = (v1121 - *a3) >> 2;
    unint64_t v1134 = v1133 + 1;
    if ((unint64_t)(v1133 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1135 = v1119 - v1132;
    if (v1135 >> 1 > v1134) {
      unint64_t v1134 = v1135 >> 1;
    }
    if ((unint64_t)v1135 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1136 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1136 = v1134;
    }
    if (v1136)
    {
      v1137 = (char *)sub_20B05D1AC((uint64_t)v986, v1136);
      v1132 = *a3;
      v1121 = a3[1];
    }
    else
    {
      v1137 = 0;
    }
    v1138 = &v1137[4 * v1133];
    v1119 = &v1137[4 * v1136];
    *(_DWORD *)v1138 = v1130;
    v1131 = v1138 + 4;
    while (v1121 != v1132)
    {
      int v1139 = *((_DWORD *)v1121 - 1);
      v1121 -= 4;
      *((_DWORD *)v1138 - 1) = v1139;
      v1138 -= 4;
    }
    *a3 = v1138;
    a3[1] = v1131;
    a3[2] = v1119;
    if (v1132)
    {
      operator delete(v1132);
      v1119 = *v986;
    }
  }
  else
  {
    *(_DWORD *)v1121 = v1130;
    v1131 = v1121 + 4;
  }
  a3[1] = v1131;
  int v1140 = v230 + 14;
  if (v1131 >= v1119)
  {
    v1142 = *a3;
    uint64_t v1143 = (v1131 - *a3) >> 2;
    unint64_t v1144 = v1143 + 1;
    if ((unint64_t)(v1143 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1145 = v1119 - v1142;
    if (v1145 >> 1 > v1144) {
      unint64_t v1144 = v1145 >> 1;
    }
    if ((unint64_t)v1145 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1146 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1146 = v1144;
    }
    if (v1146)
    {
      v1147 = (char *)sub_20B05D1AC((uint64_t)v1526, v1146);
      v1142 = *a3;
      v1131 = a3[1];
    }
    else
    {
      v1147 = 0;
    }
    v1148 = &v1147[4 * v1143];
    v1119 = &v1147[4 * v1146];
    *(_DWORD *)v1148 = v1140;
    v1141 = v1148 + 4;
    while (v1131 != v1142)
    {
      int v1149 = *((_DWORD *)v1131 - 1);
      v1131 -= 4;
      *((_DWORD *)v1148 - 1) = v1149;
      v1148 -= 4;
    }
    *a3 = v1148;
    a3[1] = v1141;
    a3[2] = v1119;
    if (v1142)
    {
      operator delete(v1142);
      v1119 = *v1526;
    }
  }
  else
  {
    *(_DWORD *)v1131 = v1140;
    v1141 = v1131 + 4;
  }
  a3[1] = v1141;
  if (v1141 >= v1119)
  {
    v1151 = *a3;
    uint64_t v1152 = (v1141 - *a3) >> 2;
    unint64_t v1153 = v1152 + 1;
    if ((unint64_t)(v1152 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1154 = v1119 - v1151;
    if (v1154 >> 1 > v1153) {
      unint64_t v1153 = v1154 >> 1;
    }
    if ((unint64_t)v1154 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1155 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1155 = v1153;
    }
    if (v1155)
    {
      v1156 = (char *)sub_20B05D1AC((uint64_t)v1526, v1155);
      v1151 = *a3;
      v1141 = a3[1];
    }
    else
    {
      v1156 = 0;
    }
    v1157 = &v1156[4 * v1152];
    v1119 = &v1156[4 * v1155];
    *(_DWORD *)v1157 = v1118;
    v1150 = v1157 + 4;
    while (v1141 != v1151)
    {
      int v1158 = *((_DWORD *)v1141 - 1);
      v1141 -= 4;
      *((_DWORD *)v1157 - 1) = v1158;
      v1157 -= 4;
    }
    *a3 = v1157;
    a3[1] = v1150;
    a3[2] = v1119;
    if (v1151)
    {
      operator delete(v1151);
      v1159 = a3 + 2;
      v1119 = *v1526;
      goto LABEL_1945;
    }
  }
  else
  {
    *(_DWORD *)v1141 = v1118;
    v1150 = v1141 + 4;
  }
  v1159 = a3 + 2;
LABEL_1945:
  a3[1] = v1150;
  int v1160 = v230 + 13;
  if (v1150 >= v1119)
  {
    v1162 = *a3;
    uint64_t v1163 = (v1150 - *a3) >> 2;
    unint64_t v1164 = v1163 + 1;
    if ((unint64_t)(v1163 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1165 = v1119 - v1162;
    if (v1165 >> 1 > v1164) {
      unint64_t v1164 = v1165 >> 1;
    }
    if ((unint64_t)v1165 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1166 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1166 = v1164;
    }
    if (v1166)
    {
      v1167 = (char *)sub_20B05D1AC((uint64_t)v1159, v1166);
      v1162 = *a3;
      v1150 = a3[1];
    }
    else
    {
      v1167 = 0;
    }
    v1168 = &v1167[4 * v1163];
    v1119 = &v1167[4 * v1166];
    *(_DWORD *)v1168 = v1160;
    v1161 = v1168 + 4;
    while (v1150 != v1162)
    {
      int v1169 = *((_DWORD *)v1150 - 1);
      v1150 -= 4;
      *((_DWORD *)v1168 - 1) = v1169;
      v1168 -= 4;
    }
    *a3 = v1168;
    a3[1] = v1161;
    a3[2] = v1119;
    if (v1162)
    {
      operator delete(v1162);
      v1119 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1150 = v1160;
    v1161 = v1150 + 4;
  }
  a3[1] = v1161;
  if (v1161 >= v1119)
  {
    v1171 = *a3;
    uint64_t v1172 = (v1161 - *a3) >> 2;
    unint64_t v1173 = v1172 + 1;
    if ((unint64_t)(v1172 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1174 = v1119 - v1171;
    if (v1174 >> 1 > v1173) {
      unint64_t v1173 = v1174 >> 1;
    }
    if ((unint64_t)v1174 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1175 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1175 = v1173;
    }
    if (v1175)
    {
      v1176 = (char *)sub_20B05D1AC((uint64_t)v1159, v1175);
      v1171 = *a3;
      v1161 = a3[1];
    }
    else
    {
      v1176 = 0;
    }
    v1177 = &v1176[4 * v1172];
    v1178 = &v1176[4 * v1175];
    *(_DWORD *)v1177 = v1130;
    v1170 = v1177 + 4;
    while (v1161 != v1171)
    {
      int v1179 = *((_DWORD *)v1161 - 1);
      v1161 -= 4;
      *((_DWORD *)v1177 - 1) = v1179;
      v1177 -= 4;
    }
    *a3 = v1177;
    a3[1] = v1170;
    a3[2] = v1178;
    if (v1171) {
      operator delete(v1171);
    }
  }
  else
  {
    *(_DWORD *)v1161 = v1130;
    v1170 = v1161 + 4;
  }
  a3[1] = v1170;
  v1180 = *v9;
  v1181 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1183 = *(unsigned __int32 **)a2;
    uint64_t v1184 = ((uint64_t)v1180 - *(void *)a2) >> 2;
    unint64_t v1185 = v1184 + 1;
    if ((unint64_t)(v1184 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1186 = v1181 - (char *)v1183;
    if (v1186 >> 1 > v1185) {
      unint64_t v1185 = v1186 >> 1;
    }
    if ((unint64_t)v1186 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1187 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1187 = v1185;
    }
    if (v1187)
    {
      v1188 = (char *)sub_20B05D1AC((uint64_t)v13, v1187);
      v1183 = *(unsigned __int32 **)a2;
      v1180 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1188 = 0;
    }
    v1189 = &v1188[4 * v1184];
    v1181 = &v1188[4 * v1187];
    *(_DWORD *)v1189 = v1527.n128_u32[0];
    v1182 = (unsigned __int32 *)(v1189 + 4);
    while (v1180 != v1183)
    {
      int v1190 = *--v1180;
      *((_DWORD *)v1189 - 1) = v1190;
      v1189 -= 4;
    }
    *(void *)a2 = v1189;
    *(void *)(a2 + 8) = v1182;
    *(void *)(a2 + 16) = v1181;
    if (v1183)
    {
      operator delete(v1183);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1180 = v1527.n128_u32[0];
    v1182 = v1180 + 1;
  }
  *float v9 = v1182;
  if (v1182 >= (unsigned __int32 *)v1181)
  {
    v1192 = *(unsigned __int32 **)a2;
    uint64_t v1193 = ((uint64_t)v1182 - *(void *)a2) >> 2;
    unint64_t v1194 = v1193 + 1;
    if ((unint64_t)(v1193 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1195 = v1181 - (char *)v1192;
    if (v1195 >> 1 > v1194) {
      unint64_t v1194 = v1195 >> 1;
    }
    if ((unint64_t)v1195 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1196 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1196 = v1194;
    }
    if (v1196)
    {
      v1197 = (char *)sub_20B05D1AC((uint64_t)v13, v1196);
      v1192 = *(unsigned __int32 **)a2;
      v1182 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1197 = 0;
    }
    v1198 = (unsigned __int32 *)&v1197[4 * v1193];
    v1181 = &v1197[4 * v1196];
    unsigned __int32 *v1198 = v28;
    v1191 = v1198 + 1;
    while (v1182 != v1192)
    {
      unsigned __int32 v1199 = *--v1182;
      *--v1198 = v1199;
    }
    *(void *)a2 = v1198;
    *(void *)(a2 + 8) = v1191;
    *(void *)(a2 + 16) = v1181;
    if (v1192)
    {
      operator delete(v1192);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1182 = v28;
    v1191 = v1182 + 1;
  }
  *float v9 = v1191;
  if (v1191 >= (unsigned __int32 *)v1181)
  {
    v1201 = *(unsigned __int32 **)a2;
    uint64_t v1202 = ((uint64_t)v1191 - *(void *)a2) >> 2;
    unint64_t v1203 = v1202 + 1;
    if ((unint64_t)(v1202 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1204 = v1181 - (char *)v1201;
    if (v1204 >> 1 > v1203) {
      unint64_t v1203 = v1204 >> 1;
    }
    if ((unint64_t)v1204 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1205 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1205 = v1203;
    }
    if (v1205)
    {
      v1206 = (char *)sub_20B05D1AC((uint64_t)v13, v1205);
      v1201 = *(unsigned __int32 **)a2;
      v1191 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1206 = 0;
    }
    v1207 = (unsigned __int32 *)&v1206[4 * v1202];
    v1181 = &v1206[4 * v1205];
    unsigned __int32 *v1207 = v48;
    v1200 = v1207 + 1;
    while (v1191 != v1201)
    {
      unsigned __int32 v1208 = *--v1191;
      *--v1207 = v1208;
    }
    *(void *)a2 = v1207;
    *(void *)(a2 + 8) = v1200;
    *(void *)(a2 + 16) = v1181;
    if (v1201)
    {
      operator delete(v1201);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1191 = v48;
    v1200 = v1191 + 1;
  }
  *float v9 = v1200;
  if (v1200 >= (unsigned __int32 *)v1181)
  {
    v1210 = *(unsigned __int32 **)a2;
    uint64_t v1211 = ((uint64_t)v1200 - *(void *)a2) >> 2;
    unint64_t v1212 = v1211 + 1;
    if ((unint64_t)(v1211 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1213 = v1181 - (char *)v1210;
    if (v1213 >> 1 > v1212) {
      unint64_t v1212 = v1213 >> 1;
    }
    if ((unint64_t)v1213 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1214 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1214 = v1212;
    }
    if (v1214)
    {
      v1215 = (char *)sub_20B05D1AC((uint64_t)v13, v1214);
      v1210 = *(unsigned __int32 **)a2;
      v1200 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1215 = 0;
    }
    v1216 = &v1215[4 * v1211];
    v1181 = &v1215[4 * v1214];
    *(_DWORD *)v1216 = a5.n128_u32[0];
    v1209 = (unsigned __int32 *)(v1216 + 4);
    while (v1200 != v1210)
    {
      int v1217 = *--v1200;
      *((_DWORD *)v1216 - 1) = v1217;
      v1216 -= 4;
    }
    *(void *)a2 = v1216;
    *(void *)(a2 + 8) = v1209;
    *(void *)(a2 + 16) = v1181;
    if (v1210)
    {
      operator delete(v1210);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1200 = a5.n128_u32[0];
    v1209 = v1200 + 1;
  }
  *float v9 = v1209;
  if (v1209 >= (unsigned __int32 *)v1181)
  {
    v1219 = *(unsigned __int32 **)a2;
    uint64_t v1220 = ((uint64_t)v1209 - *(void *)a2) >> 2;
    unint64_t v1221 = v1220 + 1;
    if ((unint64_t)(v1220 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1222 = v1181 - (char *)v1219;
    if (v1222 >> 1 > v1221) {
      unint64_t v1221 = v1222 >> 1;
    }
    if ((unint64_t)v1222 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1223 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1223 = v1221;
    }
    if (v1223)
    {
      v1224 = (char *)sub_20B05D1AC((uint64_t)v13, v1223);
      v1219 = *(unsigned __int32 **)a2;
      v1209 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1224 = 0;
    }
    v1225 = (unsigned __int32 *)&v1224[4 * v1220];
    v1181 = &v1224[4 * v1223];
    unsigned __int32 *v1225 = v28;
    v1218 = v1225 + 1;
    while (v1209 != v1219)
    {
      unsigned __int32 v1226 = *--v1209;
      *--v1225 = v1226;
    }
    *(void *)a2 = v1225;
    *(void *)(a2 + 8) = v1218;
    *(void *)(a2 + 16) = v1181;
    if (v1219)
    {
      operator delete(v1219);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1209 = v28;
    v1218 = v1209 + 1;
  }
  *float v9 = v1218;
  if (v1218 >= (unsigned __int32 *)v1181)
  {
    v1228 = *(unsigned __int32 **)a2;
    uint64_t v1229 = ((uint64_t)v1218 - *(void *)a2) >> 2;
    unint64_t v1230 = v1229 + 1;
    if ((unint64_t)(v1229 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1231 = v1181 - (char *)v1228;
    if (v1231 >> 1 > v1230) {
      unint64_t v1230 = v1231 >> 1;
    }
    if ((unint64_t)v1231 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1232 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1232 = v1230;
    }
    if (v1232)
    {
      v1233 = (char *)sub_20B05D1AC((uint64_t)v13, v1232);
      v1228 = *(unsigned __int32 **)a2;
      v1218 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1233 = 0;
    }
    v1234 = (unsigned __int32 *)&v1233[4 * v1229];
    v1181 = &v1233[4 * v1232];
    unsigned __int32 *v1234 = v48;
    v1227 = v1234 + 1;
    while (v1218 != v1228)
    {
      unsigned __int32 v1235 = *--v1218;
      *--v1234 = v1235;
    }
    *(void *)a2 = v1234;
    *(void *)(a2 + 8) = v1227;
    *(void *)(a2 + 16) = v1181;
    if (v1228)
    {
      operator delete(v1228);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1218 = v48;
    v1227 = v1218 + 1;
  }
  *float v9 = v1227;
  if (v1227 >= (unsigned __int32 *)v1181)
  {
    v1237 = *(unsigned __int32 **)a2;
    uint64_t v1238 = ((uint64_t)v1227 - *(void *)a2) >> 2;
    unint64_t v1239 = v1238 + 1;
    if ((unint64_t)(v1238 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1240 = v1181 - (char *)v1237;
    if (v1240 >> 1 > v1239) {
      unint64_t v1239 = v1240 >> 1;
    }
    if ((unint64_t)v1240 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1241 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1241 = v1239;
    }
    if (v1241)
    {
      v1242 = (char *)sub_20B05D1AC((uint64_t)v13, v1241);
      v1237 = *(unsigned __int32 **)a2;
      v1227 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1242 = 0;
    }
    v1243 = &v1242[4 * v1238];
    v1181 = &v1242[4 * v1241];
    *(_DWORD *)v1243 = v1527.n128_u32[0];
    v1236 = (unsigned __int32 *)(v1243 + 4);
    while (v1227 != v1237)
    {
      int v1244 = *--v1227;
      *((_DWORD *)v1243 - 1) = v1244;
      v1243 -= 4;
    }
    *(void *)a2 = v1243;
    *(void *)(a2 + 8) = v1236;
    *(void *)(a2 + 16) = v1181;
    if (v1237)
    {
      operator delete(v1237);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1227 = v1527.n128_u32[0];
    v1236 = v1227 + 1;
  }
  *float v9 = v1236;
  if (v1236 >= (unsigned __int32 *)v1181)
  {
    v1246 = *(unsigned __int32 **)a2;
    uint64_t v1247 = ((uint64_t)v1236 - *(void *)a2) >> 2;
    unint64_t v1248 = v1247 + 1;
    if ((unint64_t)(v1247 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1249 = v1181 - (char *)v1246;
    if (v1249 >> 1 > v1248) {
      unint64_t v1248 = v1249 >> 1;
    }
    if ((unint64_t)v1249 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1250 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1250 = v1248;
    }
    if (v1250)
    {
      v1251 = (char *)sub_20B05D1AC((uint64_t)v13, v1250);
      v1246 = *(unsigned __int32 **)a2;
      v1236 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1251 = 0;
    }
    v1252 = (unsigned __int32 *)&v1251[4 * v1247];
    v1181 = &v1251[4 * v1250];
    unsigned __int32 *v1252 = v28;
    v1245 = v1252 + 1;
    while (v1236 != v1246)
    {
      unsigned __int32 v1253 = *--v1236;
      *--v1252 = v1253;
    }
    *(void *)a2 = v1252;
    *(void *)(a2 + 8) = v1245;
    *(void *)(a2 + 16) = v1181;
    if (v1246)
    {
      operator delete(v1246);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1236 = v28;
    v1245 = v1236 + 1;
  }
  *float v9 = v1245;
  if (v1245 >= (unsigned __int32 *)v1181)
  {
    v1255 = *(unsigned __int32 **)a2;
    uint64_t v1256 = ((uint64_t)v1245 - *(void *)a2) >> 2;
    unint64_t v1257 = v1256 + 1;
    if ((unint64_t)(v1256 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1258 = v1181 - (char *)v1255;
    if (v1258 >> 1 > v1257) {
      unint64_t v1257 = v1258 >> 1;
    }
    if ((unint64_t)v1258 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1259 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1259 = v1257;
    }
    if (v1259)
    {
      v1260 = (char *)sub_20B05D1AC((uint64_t)v13, v1259);
      v1255 = *(unsigned __int32 **)a2;
      v1245 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1260 = 0;
    }
    v1261 = &v1260[4 * v1256];
    v1181 = &v1260[4 * v1259];
    *(_DWORD *)v1261 = a5.n128_u32[2];
    v1254 = (unsigned __int32 *)(v1261 + 4);
    while (v1245 != v1255)
    {
      int v1262 = *--v1245;
      *((_DWORD *)v1261 - 1) = v1262;
      v1261 -= 4;
    }
    *(void *)a2 = v1261;
    *(void *)(a2 + 8) = v1254;
    *(void *)(a2 + 16) = v1181;
    if (v1255)
    {
      operator delete(v1255);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1245 = a5.n128_u32[2];
    v1254 = v1245 + 1;
  }
  *float v9 = v1254;
  if (v1254 >= (unsigned __int32 *)v1181)
  {
    v1264 = *(unsigned __int32 **)a2;
    uint64_t v1265 = ((uint64_t)v1254 - *(void *)a2) >> 2;
    unint64_t v1266 = v1265 + 1;
    if ((unint64_t)(v1265 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1267 = v1181 - (char *)v1264;
    if (v1267 >> 1 > v1266) {
      unint64_t v1266 = v1267 >> 1;
    }
    if ((unint64_t)v1267 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1268 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1268 = v1266;
    }
    if (v1268)
    {
      v1269 = (char *)sub_20B05D1AC((uint64_t)v13, v1268);
      v1264 = *(unsigned __int32 **)a2;
      v1254 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1269 = 0;
    }
    v1270 = &v1269[4 * v1265];
    v1181 = &v1269[4 * v1268];
    *(_DWORD *)v1270 = a5.n128_u32[0];
    v1263 = (unsigned __int32 *)(v1270 + 4);
    while (v1254 != v1264)
    {
      int v1271 = *--v1254;
      *((_DWORD *)v1270 - 1) = v1271;
      v1270 -= 4;
    }
    *(void *)a2 = v1270;
    *(void *)(a2 + 8) = v1263;
    *(void *)(a2 + 16) = v1181;
    if (v1264)
    {
      operator delete(v1264);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1254 = a5.n128_u32[0];
    v1263 = v1254 + 1;
  }
  *float v9 = v1263;
  if (v1263 >= (unsigned __int32 *)v1181)
  {
    v1273 = *(unsigned __int32 **)a2;
    uint64_t v1274 = ((uint64_t)v1263 - *(void *)a2) >> 2;
    unint64_t v1275 = v1274 + 1;
    if ((unint64_t)(v1274 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1276 = v1181 - (char *)v1273;
    if (v1276 >> 1 > v1275) {
      unint64_t v1275 = v1276 >> 1;
    }
    if ((unint64_t)v1276 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1277 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1277 = v1275;
    }
    if (v1277)
    {
      v1278 = (char *)sub_20B05D1AC((uint64_t)v13, v1277);
      v1273 = *(unsigned __int32 **)a2;
      v1263 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1278 = 0;
    }
    v1279 = (unsigned __int32 *)&v1278[4 * v1274];
    v1181 = &v1278[4 * v1277];
    unsigned __int32 *v1279 = v28;
    v1272 = v1279 + 1;
    while (v1263 != v1273)
    {
      unsigned __int32 v1280 = *--v1263;
      *--v1279 = v1280;
    }
    *(void *)a2 = v1279;
    *(void *)(a2 + 8) = v1272;
    *(void *)(a2 + 16) = v1181;
    if (v1273)
    {
      operator delete(v1273);
      v1181 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1263 = v28;
    v1272 = v1263 + 1;
  }
  *float v9 = v1272;
  if (v1272 >= (unsigned __int32 *)v1181)
  {
    v1282 = *(unsigned __int32 **)a2;
    uint64_t v1283 = ((uint64_t)v1272 - *(void *)a2) >> 2;
    unint64_t v1284 = v1283 + 1;
    if ((unint64_t)(v1283 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1285 = v1181 - (char *)v1282;
    if (v1285 >> 1 > v1284) {
      unint64_t v1284 = v1285 >> 1;
    }
    if ((unint64_t)v1285 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1286 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1286 = v1284;
    }
    if (v1286)
    {
      v1287 = (char *)sub_20B05D1AC((uint64_t)v13, v1286);
      v1282 = *(unsigned __int32 **)a2;
      v1272 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1287 = 0;
    }
    v1288 = &v1287[4 * v1283];
    v1289 = &v1287[4 * v1286];
    *(_DWORD *)v1288 = a5.n128_u32[2];
    v1281 = (unsigned __int32 *)(v1288 + 4);
    while (v1272 != v1282)
    {
      int v1290 = *--v1272;
      *((_DWORD *)v1288 - 1) = v1290;
      v1288 -= 4;
    }
    *(void *)a2 = v1288;
    *(void *)(a2 + 8) = v1281;
    *(void *)(a2 + 16) = v1289;
    if (v1282) {
      operator delete(v1282);
    }
  }
  else
  {
    unsigned __int32 *v1272 = a5.n128_u32[2];
    v1281 = v1272 + 1;
  }
  *float v9 = v1281;
  int v1291 = v230 + 16;
  v1293 = a3[1];
  v1292 = a3[2];
  if (v1293 >= v1292)
  {
    v1295 = *a3;
    uint64_t v1296 = (v1293 - *a3) >> 2;
    unint64_t v1297 = v1296 + 1;
    if ((unint64_t)(v1296 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1298 = v1292 - v1295;
    if (v1298 >> 1 > v1297) {
      unint64_t v1297 = v1298 >> 1;
    }
    if ((unint64_t)v1298 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1299 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1299 = v1297;
    }
    if (v1299)
    {
      v1300 = (char *)sub_20B05D1AC((uint64_t)v1159, v1299);
      v1295 = *a3;
      v1293 = a3[1];
    }
    else
    {
      v1300 = 0;
    }
    v1301 = &v1300[4 * v1296];
    v1292 = &v1300[4 * v1299];
    *(_DWORD *)v1301 = v1291;
    v1294 = v1301 + 4;
    while (v1293 != v1295)
    {
      int v1302 = *((_DWORD *)v1293 - 1);
      v1293 -= 4;
      *((_DWORD *)v1301 - 1) = v1302;
      v1301 -= 4;
    }
    *a3 = v1301;
    a3[1] = v1294;
    a3[2] = v1292;
    if (v1295)
    {
      operator delete(v1295);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1293 = v1291;
    v1294 = v1293 + 4;
  }
  a3[1] = v1294;
  int v1303 = v230 + 17;
  if (v1294 >= v1292)
  {
    v1305 = *a3;
    uint64_t v1306 = (v1294 - *a3) >> 2;
    unint64_t v1307 = v1306 + 1;
    if ((unint64_t)(v1306 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1308 = v1292 - v1305;
    if (v1308 >> 1 > v1307) {
      unint64_t v1307 = v1308 >> 1;
    }
    if ((unint64_t)v1308 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1309 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1309 = v1307;
    }
    if (v1309)
    {
      v1310 = (char *)sub_20B05D1AC((uint64_t)v1159, v1309);
      v1305 = *a3;
      v1294 = a3[1];
    }
    else
    {
      v1310 = 0;
    }
    v1311 = &v1310[4 * v1306];
    v1292 = &v1310[4 * v1309];
    *(_DWORD *)v1311 = v1303;
    v1304 = v1311 + 4;
    while (v1294 != v1305)
    {
      int v1312 = *((_DWORD *)v1294 - 1);
      v1294 -= 4;
      *((_DWORD *)v1311 - 1) = v1312;
      v1311 -= 4;
    }
    *a3 = v1311;
    a3[1] = v1304;
    a3[2] = v1292;
    if (v1305)
    {
      operator delete(v1305);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1294 = v1303;
    v1304 = v1294 + 4;
  }
  a3[1] = v1304;
  int v1313 = v230 + 19;
  if (v1304 >= v1292)
  {
    v1315 = *a3;
    uint64_t v1316 = (v1304 - *a3) >> 2;
    unint64_t v1317 = v1316 + 1;
    if ((unint64_t)(v1316 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1318 = v1292 - v1315;
    if (v1318 >> 1 > v1317) {
      unint64_t v1317 = v1318 >> 1;
    }
    if ((unint64_t)v1318 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1319 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1319 = v1317;
    }
    if (v1319)
    {
      v1320 = (char *)sub_20B05D1AC((uint64_t)v1159, v1319);
      v1315 = *a3;
      v1304 = a3[1];
    }
    else
    {
      v1320 = 0;
    }
    v1321 = &v1320[4 * v1316];
    v1292 = &v1320[4 * v1319];
    *(_DWORD *)v1321 = v1313;
    v1314 = v1321 + 4;
    while (v1304 != v1315)
    {
      int v1322 = *((_DWORD *)v1304 - 1);
      v1304 -= 4;
      *((_DWORD *)v1321 - 1) = v1322;
      v1321 -= 4;
    }
    *a3 = v1321;
    a3[1] = v1314;
    a3[2] = v1292;
    if (v1315)
    {
      operator delete(v1315);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1304 = v1313;
    v1314 = v1304 + 4;
  }
  a3[1] = v1314;
  if (v1314 >= v1292)
  {
    v1324 = *a3;
    uint64_t v1325 = (v1314 - *a3) >> 2;
    unint64_t v1326 = v1325 + 1;
    if ((unint64_t)(v1325 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1327 = v1292 - v1324;
    if (v1327 >> 1 > v1326) {
      unint64_t v1326 = v1327 >> 1;
    }
    if ((unint64_t)v1327 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1328 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1328 = v1326;
    }
    if (v1328)
    {
      v1329 = (char *)sub_20B05D1AC((uint64_t)v1159, v1328);
      v1324 = *a3;
      v1314 = a3[1];
    }
    else
    {
      v1329 = 0;
    }
    v1330 = &v1329[4 * v1325];
    v1292 = &v1329[4 * v1328];
    *(_DWORD *)v1330 = v1291;
    v1323 = v1330 + 4;
    while (v1314 != v1324)
    {
      int v1331 = *((_DWORD *)v1314 - 1);
      v1314 -= 4;
      *((_DWORD *)v1330 - 1) = v1331;
      v1330 -= 4;
    }
    *a3 = v1330;
    a3[1] = v1323;
    a3[2] = v1292;
    if (v1324)
    {
      operator delete(v1324);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1314 = v1291;
    v1323 = v1314 + 4;
  }
  a3[1] = v1323;
  if (v1323 >= v1292)
  {
    v1333 = *a3;
    uint64_t v1334 = (v1323 - *a3) >> 2;
    unint64_t v1335 = v1334 + 1;
    if ((unint64_t)(v1334 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1336 = v1292 - v1333;
    if (v1336 >> 1 > v1335) {
      unint64_t v1335 = v1336 >> 1;
    }
    if ((unint64_t)v1336 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1337 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1337 = v1335;
    }
    if (v1337)
    {
      v1338 = (char *)sub_20B05D1AC((uint64_t)v1159, v1337);
      v1333 = *a3;
      v1323 = a3[1];
    }
    else
    {
      v1338 = 0;
    }
    v1339 = &v1338[4 * v1334];
    v1292 = &v1338[4 * v1337];
    *(_DWORD *)v1339 = v1313;
    v1332 = v1339 + 4;
    while (v1323 != v1333)
    {
      int v1340 = *((_DWORD *)v1323 - 1);
      v1323 -= 4;
      *((_DWORD *)v1339 - 1) = v1340;
      v1339 -= 4;
    }
    *a3 = v1339;
    a3[1] = v1332;
    a3[2] = v1292;
    if (v1333)
    {
      operator delete(v1333);
      v1292 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1323 = v1313;
    v1332 = v1323 + 4;
  }
  a3[1] = v1332;
  int v1341 = v230 + 18;
  if (v1332 >= v1292)
  {
    v1343 = *a3;
    uint64_t v1344 = (v1332 - *a3) >> 2;
    unint64_t v1345 = v1344 + 1;
    if ((unint64_t)(v1344 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1346 = v1292 - v1343;
    if (v1346 >> 1 > v1345) {
      unint64_t v1345 = v1346 >> 1;
    }
    if ((unint64_t)v1346 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1347 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1347 = v1345;
    }
    if (v1347)
    {
      v1348 = (char *)sub_20B05D1AC((uint64_t)v1159, v1347);
      v1343 = *a3;
      v1332 = a3[1];
    }
    else
    {
      v1348 = 0;
    }
    v1349 = &v1348[4 * v1344];
    v1350 = &v1348[4 * v1347];
    *(_DWORD *)v1349 = v1341;
    v1342 = v1349 + 4;
    while (v1332 != v1343)
    {
      int v1351 = *((_DWORD *)v1332 - 1);
      v1332 -= 4;
      *((_DWORD *)v1349 - 1) = v1351;
      v1349 -= 4;
    }
    *a3 = v1349;
    a3[1] = v1342;
    a3[2] = v1350;
    if (v1343) {
      operator delete(v1343);
    }
  }
  else
  {
    *(_DWORD *)v1332 = v1341;
    v1342 = v1332 + 4;
  }
  a3[1] = v1342;
  v1352 = *v9;
  v1353 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1355 = *(unsigned __int32 **)a2;
    uint64_t v1356 = ((uint64_t)v1352 - *(void *)a2) >> 2;
    unint64_t v1357 = v1356 + 1;
    if ((unint64_t)(v1356 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1358 = v1353 - (char *)v1355;
    if (v1358 >> 1 > v1357) {
      unint64_t v1357 = v1358 >> 1;
    }
    if ((unint64_t)v1358 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1359 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1359 = v1357;
    }
    if (v1359)
    {
      v1360 = (char *)sub_20B05D1AC((uint64_t)v13, v1359);
      v1355 = *(unsigned __int32 **)a2;
      v1352 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1360 = 0;
    }
    v1361 = &v1360[4 * v1356];
    v1353 = &v1360[4 * v1359];
    *(_DWORD *)v1361 = v1527.n128_u32[0];
    v1354 = (unsigned __int32 *)(v1361 + 4);
    while (v1352 != v1355)
    {
      int v1362 = *--v1352;
      *((_DWORD *)v1361 - 1) = v1362;
      v1361 -= 4;
    }
    *(void *)a2 = v1361;
    *(void *)(a2 + 8) = v1354;
    *(void *)(a2 + 16) = v1353;
    if (v1355)
    {
      operator delete(v1355);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1352 = v1527.n128_u32[0];
    v1354 = v1352 + 1;
  }
  *float v9 = v1354;
  if (v1354 >= (unsigned __int32 *)v1353)
  {
    v1364 = *(unsigned __int32 **)a2;
    uint64_t v1365 = ((uint64_t)v1354 - *(void *)a2) >> 2;
    unint64_t v1366 = v1365 + 1;
    if ((unint64_t)(v1365 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1367 = v1353 - (char *)v1364;
    if (v1367 >> 1 > v1366) {
      unint64_t v1366 = v1367 >> 1;
    }
    if ((unint64_t)v1367 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1368 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1368 = v1366;
    }
    if (v1368)
    {
      v1369 = (char *)sub_20B05D1AC((uint64_t)v13, v1368);
      v1364 = *(unsigned __int32 **)a2;
      v1354 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1369 = 0;
    }
    v1370 = &v1369[4 * v1365];
    v1353 = &v1369[4 * v1368];
    *(_DWORD *)v1370 = a5.n128_u32[1];
    v1363 = (unsigned __int32 *)(v1370 + 4);
    while (v1354 != v1364)
    {
      int v1371 = *--v1354;
      *((_DWORD *)v1370 - 1) = v1371;
      v1370 -= 4;
    }
    *(void *)a2 = v1370;
    *(void *)(a2 + 8) = v1363;
    *(void *)(a2 + 16) = v1353;
    if (v1364)
    {
      operator delete(v1364);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1354 = a5.n128_u32[1];
    v1363 = v1354 + 1;
  }
  *float v9 = v1363;
  if (v1363 >= (unsigned __int32 *)v1353)
  {
    v1373 = *(unsigned __int32 **)a2;
    uint64_t v1374 = ((uint64_t)v1363 - *(void *)a2) >> 2;
    unint64_t v1375 = v1374 + 1;
    if ((unint64_t)(v1374 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1376 = v1353 - (char *)v1373;
    if (v1376 >> 1 > v1375) {
      unint64_t v1375 = v1376 >> 1;
    }
    if ((unint64_t)v1376 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1377 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1377 = v1375;
    }
    if (v1377)
    {
      v1378 = (char *)sub_20B05D1AC((uint64_t)v13, v1377);
      v1373 = *(unsigned __int32 **)a2;
      v1363 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1378 = 0;
    }
    v1379 = (unsigned __int32 *)&v1378[4 * v1374];
    v1353 = &v1378[4 * v1377];
    unsigned __int32 *v1379 = v48;
    v1372 = v1379 + 1;
    while (v1363 != v1373)
    {
      unsigned __int32 v1380 = *--v1363;
      *--v1379 = v1380;
    }
    *(void *)a2 = v1379;
    *(void *)(a2 + 8) = v1372;
    *(void *)(a2 + 16) = v1353;
    if (v1373)
    {
      operator delete(v1373);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1363 = v48;
    v1372 = v1363 + 1;
  }
  *float v9 = v1372;
  if (v1372 >= (unsigned __int32 *)v1353)
  {
    v1382 = *(unsigned __int32 **)a2;
    uint64_t v1383 = ((uint64_t)v1372 - *(void *)a2) >> 2;
    unint64_t v1384 = v1383 + 1;
    if ((unint64_t)(v1383 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1385 = v1353 - (char *)v1382;
    if (v1385 >> 1 > v1384) {
      unint64_t v1384 = v1385 >> 1;
    }
    if ((unint64_t)v1385 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1386 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1386 = v1384;
    }
    if (v1386)
    {
      v1387 = (char *)sub_20B05D1AC((uint64_t)v13, v1386);
      v1382 = *(unsigned __int32 **)a2;
      v1372 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1387 = 0;
    }
    v1388 = &v1387[4 * v1383];
    v1353 = &v1387[4 * v1386];
    *(_DWORD *)v1388 = a5.n128_u32[0];
    v1381 = (unsigned __int32 *)(v1388 + 4);
    while (v1372 != v1382)
    {
      int v1389 = *--v1372;
      *((_DWORD *)v1388 - 1) = v1389;
      v1388 -= 4;
    }
    *(void *)a2 = v1388;
    *(void *)(a2 + 8) = v1381;
    *(void *)(a2 + 16) = v1353;
    if (v1382)
    {
      operator delete(v1382);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1372 = a5.n128_u32[0];
    v1381 = v1372 + 1;
  }
  *float v9 = v1381;
  if (v1381 >= (unsigned __int32 *)v1353)
  {
    v1391 = *(unsigned __int32 **)a2;
    uint64_t v1392 = ((uint64_t)v1381 - *(void *)a2) >> 2;
    unint64_t v1393 = v1392 + 1;
    if ((unint64_t)(v1392 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1394 = v1353 - (char *)v1391;
    if (v1394 >> 1 > v1393) {
      unint64_t v1393 = v1394 >> 1;
    }
    if ((unint64_t)v1394 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1395 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1395 = v1393;
    }
    if (v1395)
    {
      v1396 = (char *)sub_20B05D1AC((uint64_t)v13, v1395);
      v1391 = *(unsigned __int32 **)a2;
      v1381 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1396 = 0;
    }
    v1397 = &v1396[4 * v1392];
    v1353 = &v1396[4 * v1395];
    *(_DWORD *)v1397 = a5.n128_u32[1];
    v1390 = (unsigned __int32 *)(v1397 + 4);
    while (v1381 != v1391)
    {
      int v1398 = *--v1381;
      *((_DWORD *)v1397 - 1) = v1398;
      v1397 -= 4;
    }
    *(void *)a2 = v1397;
    *(void *)(a2 + 8) = v1390;
    *(void *)(a2 + 16) = v1353;
    if (v1391)
    {
      operator delete(v1391);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1381 = a5.n128_u32[1];
    v1390 = v1381 + 1;
  }
  *float v9 = v1390;
  if (v1390 >= (unsigned __int32 *)v1353)
  {
    v1400 = *(unsigned __int32 **)a2;
    uint64_t v1401 = ((uint64_t)v1390 - *(void *)a2) >> 2;
    unint64_t v1402 = v1401 + 1;
    if ((unint64_t)(v1401 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1403 = v1353 - (char *)v1400;
    if (v1403 >> 1 > v1402) {
      unint64_t v1402 = v1403 >> 1;
    }
    if ((unint64_t)v1403 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1404 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1404 = v1402;
    }
    if (v1404)
    {
      v1405 = (char *)sub_20B05D1AC((uint64_t)v13, v1404);
      v1400 = *(unsigned __int32 **)a2;
      v1390 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1405 = 0;
    }
    v1406 = (unsigned __int32 *)&v1405[4 * v1401];
    v1353 = &v1405[4 * v1404];
    unsigned __int32 *v1406 = v48;
    v1399 = v1406 + 1;
    while (v1390 != v1400)
    {
      unsigned __int32 v1407 = *--v1390;
      *--v1406 = v1407;
    }
    *(void *)a2 = v1406;
    *(void *)(a2 + 8) = v1399;
    *(void *)(a2 + 16) = v1353;
    if (v1400)
    {
      operator delete(v1400);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1390 = v48;
    v1399 = v1390 + 1;
  }
  unsigned __int32 v1408 = v1527.n128_u32[0];
  *float v9 = v1399;
  if (v1399 >= (unsigned __int32 *)v1353)
  {
    v1410 = *(unsigned __int32 **)a2;
    uint64_t v1411 = ((uint64_t)v1399 - *(void *)a2) >> 2;
    unint64_t v1412 = v1411 + 1;
    if ((unint64_t)(v1411 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1413 = v1353 - (char *)v1410;
    if (v1413 >> 1 > v1412) {
      unint64_t v1412 = v1413 >> 1;
    }
    if ((unint64_t)v1413 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1414 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1414 = v1412;
    }
    if (v1414)
    {
      v1415 = (char *)sub_20B05D1AC((uint64_t)v13, v1414);
      unsigned __int32 v1408 = v1527.n128_u32[0];
      v1416 = v1415;
      v1410 = *(unsigned __int32 **)a2;
      v1399 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1416 = 0;
    }
    v1417 = (unsigned __int32 *)&v1416[4 * v1411];
    v1353 = &v1416[4 * v1414];
    unsigned __int32 *v1417 = v1408;
    v1409 = v1417 + 1;
    while (v1399 != v1410)
    {
      unsigned __int32 v1418 = *--v1399;
      *--v1417 = v1418;
    }
    *(void *)a2 = v1417;
    *(void *)(a2 + 8) = v1409;
    *(void *)(a2 + 16) = v1353;
    if (v1410)
    {
      operator delete(v1410);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1399 = v1527.n128_u32[0];
    v1409 = v1399 + 1;
  }
  *float v9 = v1409;
  if (v1409 >= (unsigned __int32 *)v1353)
  {
    v1420 = *(unsigned __int32 **)a2;
    uint64_t v1421 = ((uint64_t)v1409 - *(void *)a2) >> 2;
    unint64_t v1422 = v1421 + 1;
    if ((unint64_t)(v1421 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1423 = v1353 - (char *)v1420;
    if (v1423 >> 1 > v1422) {
      unint64_t v1422 = v1423 >> 1;
    }
    if ((unint64_t)v1423 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1424 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1424 = v1422;
    }
    if (v1424)
    {
      v1425 = (char *)sub_20B05D1AC((uint64_t)v13, v1424);
      v1420 = *(unsigned __int32 **)a2;
      v1409 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1425 = 0;
    }
    v1426 = &v1425[4 * v1421];
    v1353 = &v1425[4 * v1424];
    *(_DWORD *)v1426 = a5.n128_u32[1];
    v1419 = (unsigned __int32 *)(v1426 + 4);
    while (v1409 != v1420)
    {
      int v1427 = *--v1409;
      *((_DWORD *)v1426 - 1) = v1427;
      v1426 -= 4;
    }
    *(void *)a2 = v1426;
    *(void *)(a2 + 8) = v1419;
    *(void *)(a2 + 16) = v1353;
    if (v1420)
    {
      operator delete(v1420);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1409 = a5.n128_u32[1];
    v1419 = v1409 + 1;
  }
  *float v9 = v1419;
  if (v1419 >= (unsigned __int32 *)v1353)
  {
    v1429 = *(unsigned __int32 **)a2;
    uint64_t v1430 = ((uint64_t)v1419 - *(void *)a2) >> 2;
    unint64_t v1431 = v1430 + 1;
    if ((unint64_t)(v1430 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1432 = v1353 - (char *)v1429;
    if (v1432 >> 1 > v1431) {
      unint64_t v1431 = v1432 >> 1;
    }
    if ((unint64_t)v1432 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1433 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1433 = v1431;
    }
    if (v1433)
    {
      v1434 = (char *)sub_20B05D1AC((uint64_t)v13, v1433);
      v1429 = *(unsigned __int32 **)a2;
      v1419 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1434 = 0;
    }
    v1435 = &v1434[4 * v1430];
    v1353 = &v1434[4 * v1433];
    *(_DWORD *)v1435 = a5.n128_u32[2];
    v1428 = (unsigned __int32 *)(v1435 + 4);
    while (v1419 != v1429)
    {
      int v1436 = *--v1419;
      *((_DWORD *)v1435 - 1) = v1436;
      v1435 -= 4;
    }
    *(void *)a2 = v1435;
    *(void *)(a2 + 8) = v1428;
    *(void *)(a2 + 16) = v1353;
    if (v1429)
    {
      operator delete(v1429);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1419 = a5.n128_u32[2];
    v1428 = v1419 + 1;
  }
  *float v9 = v1428;
  if (v1428 >= (unsigned __int32 *)v1353)
  {
    v1438 = *(unsigned __int32 **)a2;
    uint64_t v1439 = ((uint64_t)v1428 - *(void *)a2) >> 2;
    unint64_t v1440 = v1439 + 1;
    if ((unint64_t)(v1439 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1441 = v1353 - (char *)v1438;
    if (v1441 >> 1 > v1440) {
      unint64_t v1440 = v1441 >> 1;
    }
    if ((unint64_t)v1441 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1442 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1442 = v1440;
    }
    if (v1442)
    {
      v1443 = (char *)sub_20B05D1AC((uint64_t)v13, v1442);
      v1438 = *(unsigned __int32 **)a2;
      v1428 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1443 = 0;
    }
    v1444 = &v1443[4 * v1439];
    v1353 = &v1443[4 * v1442];
    *(_DWORD *)v1444 = a5.n128_u32[0];
    v1437 = (unsigned __int32 *)(v1444 + 4);
    while (v1428 != v1438)
    {
      int v1445 = *--v1428;
      *((_DWORD *)v1444 - 1) = v1445;
      v1444 -= 4;
    }
    *(void *)a2 = v1444;
    *(void *)(a2 + 8) = v1437;
    *(void *)(a2 + 16) = v1353;
    if (v1438)
    {
      operator delete(v1438);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1428 = a5.n128_u32[0];
    v1437 = v1428 + 1;
  }
  *float v9 = v1437;
  if (v1437 >= (unsigned __int32 *)v1353)
  {
    v1447 = *(unsigned __int32 **)a2;
    uint64_t v1448 = ((uint64_t)v1437 - *(void *)a2) >> 2;
    unint64_t v1449 = v1448 + 1;
    if ((unint64_t)(v1448 + 1) >> 62) {
      goto LABEL_2554;
    }
    uint64_t v1450 = v1353 - (char *)v1447;
    if (v1450 >> 1 > v1449) {
      unint64_t v1449 = v1450 >> 1;
    }
    if ((unint64_t)v1450 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1451 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1451 = v1449;
    }
    if (v1451)
    {
      v1452 = (char *)sub_20B05D1AC((uint64_t)v13, v1451);
      v1447 = *(unsigned __int32 **)a2;
      v1437 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1452 = 0;
    }
    v1453 = &v1452[4 * v1448];
    v1353 = &v1452[4 * v1451];
    *(_DWORD *)v1453 = a5.n128_u32[1];
    v1446 = (unsigned __int32 *)(v1453 + 4);
    while (v1437 != v1447)
    {
      int v1454 = *--v1437;
      *((_DWORD *)v1453 - 1) = v1454;
      v1453 -= 4;
    }
    *(void *)a2 = v1453;
    *(void *)(a2 + 8) = v1446;
    *(void *)(a2 + 16) = v1353;
    if (v1447)
    {
      operator delete(v1447);
      v1353 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1437 = a5.n128_u32[1];
    v1446 = v1437 + 1;
  }
  *float v9 = v1446;
  if (v1446 < (unsigned __int32 *)v1353)
  {
    unsigned __int32 *v1446 = a5.n128_u32[2];
    v1455 = v1446 + 1;
    goto LABEL_2457;
  }
  v1456 = *(unsigned __int32 **)a2;
  uint64_t v1457 = ((uint64_t)v1446 - *(void *)a2) >> 2;
  unint64_t v1458 = v1457 + 1;
  if ((unint64_t)(v1457 + 1) >> 62) {
LABEL_2554:
  }
    sub_20B05D0BC();
  uint64_t v1459 = v1353 - (char *)v1456;
  if (v1459 >> 1 > v1458) {
    unint64_t v1458 = v1459 >> 1;
  }
  if ((unint64_t)v1459 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v1460 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1460 = v1458;
  }
  if (v1460)
  {
    v1461 = (char *)sub_20B05D1AC((uint64_t)v13, v1460);
    v1456 = *(unsigned __int32 **)a2;
    v1446 = *(unsigned __int32 **)(a2 + 8);
  }
  else
  {
    v1461 = 0;
  }
  v1462 = &v1461[4 * v1457];
  v1463 = &v1461[4 * v1460];
  *(_DWORD *)v1462 = a5.n128_u32[2];
  v1455 = (unsigned __int32 *)(v1462 + 4);
  while (v1446 != v1456)
  {
    int v1464 = *--v1446;
    *((_DWORD *)v1462 - 1) = v1464;
    v1462 -= 4;
  }
  *(void *)a2 = v1462;
  *(void *)(a2 + 8) = v1455;
  *(void *)(a2 + 16) = v1463;
  if (v1456) {
    operator delete(v1456);
  }
LABEL_2457:
  *float v9 = v1455;
  int v1465 = v230 + 20;
  v1467 = a3[1];
  v1466 = a3[2];
  if (v1467 >= v1466)
  {
    v1469 = *a3;
    uint64_t v1470 = (v1467 - *a3) >> 2;
    unint64_t v1471 = v1470 + 1;
    if ((unint64_t)(v1470 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1472 = v1466 - v1469;
    if (v1472 >> 1 > v1471) {
      unint64_t v1471 = v1472 >> 1;
    }
    if ((unint64_t)v1472 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1473 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1473 = v1471;
    }
    if (v1473)
    {
      v1474 = (char *)sub_20B05D1AC((uint64_t)v1159, v1473);
      v1469 = *a3;
      v1467 = a3[1];
    }
    else
    {
      v1474 = 0;
    }
    v1475 = &v1474[4 * v1470];
    v1466 = &v1474[4 * v1473];
    *(_DWORD *)v1475 = v1465;
    v1468 = v1475 + 4;
    while (v1467 != v1469)
    {
      int v1476 = *((_DWORD *)v1467 - 1);
      v1467 -= 4;
      *((_DWORD *)v1475 - 1) = v1476;
      v1475 -= 4;
    }
    *a3 = v1475;
    a3[1] = v1468;
    a3[2] = v1466;
    if (v1469)
    {
      operator delete(v1469);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1467 = v1465;
    v1468 = v1467 + 4;
  }
  a3[1] = v1468;
  int v1477 = v230 + 22;
  if (v1468 >= v1466)
  {
    v1479 = *a3;
    uint64_t v1480 = (v1468 - *a3) >> 2;
    unint64_t v1481 = v1480 + 1;
    if ((unint64_t)(v1480 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1482 = v1466 - v1479;
    if (v1482 >> 1 > v1481) {
      unint64_t v1481 = v1482 >> 1;
    }
    if ((unint64_t)v1482 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1483 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1483 = v1481;
    }
    if (v1483)
    {
      v1484 = (char *)sub_20B05D1AC((uint64_t)v1159, v1483);
      v1479 = *a3;
      v1468 = a3[1];
    }
    else
    {
      v1484 = 0;
    }
    v1485 = &v1484[4 * v1480];
    v1466 = &v1484[4 * v1483];
    *(_DWORD *)v1485 = v1477;
    v1478 = v1485 + 4;
    while (v1468 != v1479)
    {
      int v1486 = *((_DWORD *)v1468 - 1);
      v1468 -= 4;
      *((_DWORD *)v1485 - 1) = v1486;
      v1485 -= 4;
    }
    *a3 = v1485;
    a3[1] = v1478;
    a3[2] = v1466;
    if (v1479)
    {
      operator delete(v1479);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1468 = v1477;
    v1478 = v1468 + 4;
  }
  a3[1] = v1478;
  int v1487 = v230 + 21;
  if (v1478 >= v1466)
  {
    v1489 = *a3;
    uint64_t v1490 = (v1478 - *a3) >> 2;
    unint64_t v1491 = v1490 + 1;
    if ((unint64_t)(v1490 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1492 = v1466 - v1489;
    if (v1492 >> 1 > v1491) {
      unint64_t v1491 = v1492 >> 1;
    }
    if ((unint64_t)v1492 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1493 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1493 = v1491;
    }
    if (v1493)
    {
      v1494 = (char *)sub_20B05D1AC((uint64_t)v1159, v1493);
      v1489 = *a3;
      v1478 = a3[1];
    }
    else
    {
      v1494 = 0;
    }
    v1495 = &v1494[4 * v1490];
    v1466 = &v1494[4 * v1493];
    *(_DWORD *)v1495 = v1487;
    v1488 = v1495 + 4;
    while (v1478 != v1489)
    {
      int v1496 = *((_DWORD *)v1478 - 1);
      v1478 -= 4;
      *((_DWORD *)v1495 - 1) = v1496;
      v1495 -= 4;
    }
    *a3 = v1495;
    a3[1] = v1488;
    a3[2] = v1466;
    if (v1489)
    {
      operator delete(v1489);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1478 = v1487;
    v1488 = v1478 + 4;
  }
  a3[1] = v1488;
  if (v1488 >= v1466)
  {
    v1498 = *a3;
    uint64_t v1499 = (v1488 - *a3) >> 2;
    unint64_t v1500 = v1499 + 1;
    if ((unint64_t)(v1499 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1501 = v1466 - v1498;
    if (v1501 >> 1 > v1500) {
      unint64_t v1500 = v1501 >> 1;
    }
    if ((unint64_t)v1501 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1502 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1502 = v1500;
    }
    if (v1502)
    {
      v1503 = (char *)sub_20B05D1AC((uint64_t)v1159, v1502);
      v1498 = *a3;
      v1488 = a3[1];
    }
    else
    {
      v1503 = 0;
    }
    v1504 = &v1503[4 * v1499];
    v1466 = &v1503[4 * v1502];
    *(_DWORD *)v1504 = v1487;
    v1497 = v1504 + 4;
    while (v1488 != v1498)
    {
      int v1505 = *((_DWORD *)v1488 - 1);
      v1488 -= 4;
      *((_DWORD *)v1504 - 1) = v1505;
      v1504 -= 4;
    }
    *a3 = v1504;
    a3[1] = v1497;
    a3[2] = v1466;
    if (v1498)
    {
      operator delete(v1498);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1488 = v1487;
    v1497 = v1488 + 4;
  }
  a3[1] = v1497;
  if (v1497 >= v1466)
  {
    v1507 = *a3;
    uint64_t v1508 = (v1497 - *a3) >> 2;
    unint64_t v1509 = v1508 + 1;
    if ((unint64_t)(v1508 + 1) >> 62) {
      goto LABEL_2555;
    }
    uint64_t v1510 = v1466 - v1507;
    if (v1510 >> 1 > v1509) {
      unint64_t v1509 = v1510 >> 1;
    }
    if ((unint64_t)v1510 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1511 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1511 = v1509;
    }
    if (v1511)
    {
      v1512 = (char *)sub_20B05D1AC((uint64_t)v1159, v1511);
      v1507 = *a3;
      v1497 = a3[1];
    }
    else
    {
      v1512 = 0;
    }
    v1513 = &v1512[4 * v1508];
    v1466 = &v1512[4 * v1511];
    *(_DWORD *)v1513 = v1477;
    v1506 = v1513 + 4;
    while (v1497 != v1507)
    {
      int v1514 = *((_DWORD *)v1497 - 1);
      v1497 -= 4;
      *((_DWORD *)v1513 - 1) = v1514;
      v1513 -= 4;
    }
    *a3 = v1513;
    a3[1] = v1506;
    a3[2] = v1466;
    if (v1507)
    {
      operator delete(v1507);
      v1466 = *v1159;
    }
  }
  else
  {
    *(_DWORD *)v1497 = v1477;
    v1506 = v1497 + 4;
  }
  a3[1] = v1506;
  int v1515 = v230 + 23;
  if (v1506 >= v1466)
  {
    v1517 = *a3;
    uint64_t v1518 = (v1506 - *a3) >> 2;
    unint64_t v1519 = v1518 + 1;
    if (!((unint64_t)(v1518 + 1) >> 62))
    {
      uint64_t v1520 = v1466 - v1517;
      if (v1520 >> 1 > v1519) {
        unint64_t v1519 = v1520 >> 1;
      }
      if ((unint64_t)v1520 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1521 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1521 = v1519;
      }
      if (v1521)
      {
        v1522 = (char *)sub_20B05D1AC((uint64_t)v1159, v1521);
        v1517 = *a3;
        v1506 = a3[1];
      }
      else
      {
        v1522 = 0;
      }
      v1523 = &v1522[4 * v1518];
      v1524 = &v1522[4 * v1521];
      *(_DWORD *)v1523 = v1515;
      v1516 = v1523 + 4;
      while (v1506 != v1517)
      {
        int v1525 = *((_DWORD *)v1506 - 1);
        v1506 -= 4;
        *((_DWORD *)v1523 - 1) = v1525;
        v1523 -= 4;
      }
      *a3 = v1523;
      a3[1] = v1516;
      a3[2] = v1524;
      if (v1517) {
        operator delete(v1517);
      }
      goto LABEL_2553;
    }
LABEL_2555:
    sub_20B05D0BC();
  }
  *(_DWORD *)v1506 = v1515;
  v1516 = v1506 + 4;
LABEL_2553:
  a3[1] = v1516;
}

uint64_t sub_20B0567B4(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, float32x4_t a6, int8x16_t a7)
{
  if (a2 && (a3 & 0x80000000) == 0)
  {
    uint64_t v11 = result;
    uint64_t v12 = 0;
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    __n128 v17 = (__n128)vmulq_f32(a6, v13);
    float v14 = v17.n128_f32[1];
    float v15 = v17.n128_f32[2];
    int32x4_t v16 = (int32x4_t)a7;
    __n128 v27 = v17;
    v17.n128_f32[0] = v17.n128_f32[0] + *(float *)a7.i32;
    *(unint64_t *)((char *)v17.n128_u64 + 4) = *(unint64_t *)((char *)a7.u64 + 4);
    int8x16_t v25 = (int8x16_t)v17;
    if (a3) {
      char v18 = a4;
    }
    else {
      char v18 = 0;
    }
    unsigned int v24 = a3 - 1;
    while (1)
    {
      uint64_t v19 = a2 + 8 * v12;
      uint64_t v21 = *(void *)(v19 + 48);
      unint64_t v20 = (void *)(v19 + 48);
      if (v21) {
        break;
      }
LABEL_13:
      if (++v12 == 8) {
        return result;
      }
    }
    v16.i32[0] = 0;
    v17.n128_u32[0] = v12 & 4;
    int32x4_t v16 = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v17, v16), 0);
    __n128 v17 = (__n128)vbslq_s8((int8x16_t)v16, a7, v25);
    if ((v12 & 2) != 0)
    {
      v22.n128_u32[0] = v17.n128_u32[0];
      v22.n128_f32[1] = v17.n128_f32[1] + v14;
      v22.n128_u64[1] = v17.n128_u64[1];
      __n128 v17 = v22;
      if ((v12 & 1) == 0)
      {
LABEL_10:
        if ((v18 & 1) == 0) {
          goto LABEL_17;
        }
LABEL_11:
        if (a3) {
          uint64_t result = sub_20B0567B4(v11, *v20, v24, a4, a5, v27, v17);
        }
        goto LABEL_13;
      }
    }
    else if ((v12 & 1) == 0)
    {
      goto LABEL_10;
    }
    v23.n128_u64[0] = v17.n128_u64[0];
    v23.n128_f32[2] = v17.n128_f32[2] + v15;
    v23.n128_u32[3] = v17.n128_u32[3];
    __n128 v17 = v23;
    if ((v18 & 1) == 0) {
LABEL_17:
    }
      operator new();
    goto LABEL_11;
  }
  return result;
}

float32x4_t *sub_20B056A20(float32x4_t *a1, void *a2, int a3)
{
  v12[7] = *MEMORY[0x263EF8340];
  id v5 = a2;
  uint64_t v8 = v5;
  a1->i64[0] = 0;
  a1[3].i64[0] = 0;
  a1[3].i64[1] = 0;
  a1[4].i64[0] = 0;
  a1[5].i64[0] = 0;
  if (a3 >= 1)
  {
    objc_msgSend_boundingBox(v5, v6, v7);
    a1[1] = v9;
    a1[2] = v10;
    if ((float)(COERCE_FLOAT(vsubq_f32(v9, v10).i32[1]) / (float)a3) > 0.0)
    {
      sub_20B056CAC(v8, v12);
      operator new();
    }
  }

  return a1;
}

void sub_20B056C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B05EFBC((uint64_t *)va);
  MEMORY[0x210532650](v8, 0x1020C40BD3C1984);
  if (v7) {
    operator delete(v7);
  }
  sub_20B05E36C(v6, 0);
  uint64_t v11 = *v9;
  if (*v9)
  {
    *(void *)(v4 + 56) = v11;
    operator delete(v11);
  }

  _Unwind_Resume(a1);
}

void sub_20B056CAC(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  __p = 0;
  float v15 = 0;
  uint64_t v16 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = a1;
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v10, v17, 16);
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    uint64_t v7 = (float32x4_t *)MEMORY[0x263EF89A8];
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        sub_20B0588FC(*(void **)(*((void *)&v10 + 1) + 8 * i), (uint64_t *)&__p, 1, *v7, v7[1]);
      }
      uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v9, (uint64_t)&v10, v17, 16);
    }
    while (v5);
  }

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20B0601B4(a2, (uint64_t)__p, (uint64_t)v15, 0x6DB6DB6DB6DB6DB7 * ((v15 - (unsigned char *)__p) >> 5));
  if (__p)
  {
    float v15 = __p;
    operator delete(__p);
  }
}

void sub_20B056E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void **sub_20B056E48(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(_DWORD **)(a1 + 1312);
  *uint64_t v4 = a4;
  uint64_t result = (void **)(v4 + 10);
  if (result != (void **)a2) {
    return (void **)sub_20B05F30C(result, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  }
  return result;
}

uint64_t sub_20B056E84(uint64_t result, uint64_t a2, double a3, double a4)
{
  if (a2)
  {
    float v4 = *(float *)(a2 + 16);
    if (v4 < *(float *)(a2 + 20)) {
      float v4 = *(float *)(a2 + 20);
    }
    if (v4 < *(float *)(a2 + 24)) {
      float v4 = *(float *)(a2 + 24);
    }
    float v5 = *(float *)(a2 + 32);
    if (*(float *)(a2 + 36) < v5) {
      float v5 = *(float *)(a2 + 36);
    }
    if (*(float *)(a2 + 40) < v5) {
      float v5 = *(float *)(a2 + 40);
    }
    *(float *)&a3 = fabsf(v4);
    float v6 = fabsf(v5);
    if (*(float *)&a3 < v6) {
      *(float *)&a3 = v6;
    }
    *(float *)&a4 = -*(float *)&a3;
    *(int32x4_t *)(a2 + 16) = vdupq_lane_s32(*(int32x2_t *)&a3, 0);
    *(int32x4_t *)(a2 + 32) = vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    uint64_t v7 = *(void *)(result + 1312);
    if ((*(_DWORD *)v7 & 0x80000000) == 0)
    {
      unsigned int v8 = (*(_DWORD *)v7 - 1) | ((*(_DWORD *)v7 - 1) >> 1) | (((*(_DWORD *)v7 - 1) | ((*(_DWORD *)v7 - 1) >> 1)) >> 2);
      unsigned int v9 = v8 | (v8 >> 4) | ((v8 | (v8 >> 4)) >> 8);
      *(_DWORD *)(a2 + 8) = (v9 | HIWORD(v9)) + 1;
    }
    if (*(void *)(v7 + 48) != *(void *)(v7 + 40)) {
      operator new();
    }
  }
  return result;
}

void sub_20B0570E8(void *a1, float32x4_t **a2, float a3)
{
  if (*(void *)(a1[164] + 368))
  {
    int v5 = sub_20B058BE0((uint64_t)a1, a3);
    sub_20B0591A0(a1, (int)((double)v5 * 0.25));
    sub_20B0596A0((uint64_t)a1, a2);
  }
}

float32x4_t *sub_20B05715C(float32x4_t *a1, void *a2, int a3)
{
  v12[7] = *MEMORY[0x263EF8340];
  id v5 = a2;
  unsigned int v8 = v5;
  a1->i64[0] = 0;
  a1[3].i64[0] = 0;
  a1[3].i64[1] = 0;
  a1[4].i64[0] = 0;
  a1[5].i64[0] = 0;
  if (a3 >= 1)
  {
    objc_msgSend_boundingBoxAtTime_(v5, v6, v7, 0.0);
    a1[1] = v9;
    a1[2] = v10;
    if ((float)(COERCE_FLOAT(vsubq_f32(v9, v10).i32[1]) / (float)a3) > 0.0)
    {
      sub_20B0573EC(v8, v12);
      operator new();
    }
  }

  return a1;
}

void sub_20B057364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B05EFBC((uint64_t *)va);
  MEMORY[0x210532650](v8, 0x1020C40BD3C1984);
  if (v7) {
    operator delete(v7);
  }
  sub_20B05E36C(v6, 0);
  long long v11 = *v9;
  if (*v9)
  {
    *(void *)(v4 + 56) = v11;
    operator delete(v11);
  }

  _Unwind_Resume(a1);
}

void sub_20B0573EC(void *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20B0588FC(a1, a2, 1, *MEMORY[0x263EF89A8], *(float32x4_t *)(MEMORY[0x263EF89A8] + 16));
}

void sub_20B057430(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B057450(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  memcpy((void *)a1, &unk_20B1E6320, 0x380uLL);
  memcpy((void *)(a1 + 896), &unk_20B1E66A0, 0x1A0uLL);
  operator new();
}

void sub_20B057518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B05EFBC((uint64_t *)va);
  MEMORY[0x210532650](v2, 0x10F0C401E272BA8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B05754C(uint64_t a1)
{
  return a1;
}

uint64_t sub_20B05757C(uint64_t a1, float32x4_t *a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v14 = 0;
  uint64_t v56 = 0;
  uint64_t v15 = (a4 - 1);
  uint64_t v16 = (int *)(a3 + 172);
  __n128 v17 = a2 + 3;
  __asm { FMOV            V0.4S, #0.25 }
  float32x4_t v51 = _Q0;
  int32x4_t v23 = vdupq_n_s32(0x7FC00000u);
  do
  {
    v23.i32[0] = 0;
    float32x4_t v25 = a2[1];
    float32x4_t v24 = a2[2];
    v26.i64[0] = 0x3F0000003F000000;
    v26.i64[1] = 0x3F0000003F000000;
    float32x4_t v27 = vmulq_f32(vaddq_f32(v25, v24), v26);
    float32x4_t v28 = vsubq_f32(v25, v24);
    v25.i32[0] = v14 & 4;
    int8x16_t v29 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)v25, v23), 0);
    v25.f32[0] = 0.25 * v28.f32[0];
    v26.f32[0] = v27.f32[0] + (float)(0.25 * v28.f32[0]);
    v26.i32[1] = v27.i32[1];
    v26.i32[2] = v27.i32[2];
    *(float *)a10.i32 = v27.f32[0] - (float)(0.25 * v28.f32[0]);
    a10.i32[1] = v27.i32[1];
    a10.i32[2] = v27.i32[2];
    int8x16_t v30 = vbslq_s8(v29, a10, (int8x16_t)v26);
    v26.f32[0] = -(float)(v28.f32[0] * 0.25);
    *(float32x2_t *)v25.f32 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v14), (int8x8_t)0x100000002)), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v26.f32, 0), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v25.f32, 0)));
    float32x4_t v55 = (float32x4_t)vextq_s8(vextq_s8(v30, v30, 4uLL), (int8x16_t)v25, 0xCuLL);
    uint64_t result = sub_20B09B9AC((float32x4_t *)a3, v55, vmulq_f32(v28, v51));
    if (!result) {
      goto LABEL_26;
    }
    uint64_t v32 = v17->i64[v14];
    if (!v32) {
      operator new();
    }
    if (a4)
    {
      if (a4 >= 1)
      {
        uint64_t result = sub_20B05757C(a1, v32, a3, v15);
        goto LABEL_26;
      }
    }
    else
    {
      sub_20B05FB44(v32 + 152, v16, v16);
      float v33 = *(float *)(v32 + 116);
      if (*v16 != *(_DWORD *)(v32 + 144))
      {
        float32x4_t v35 = *(float32x4_t *)(a3 + 16);
        float32x4_t v34 = *(float32x4_t *)(a3 + 32);
        float32x4_t v53 = *(float32x4_t *)(a3 + 48);
        float32x4_t v54 = v35;
        float32x4_t v52 = v34;
        *(double *)v36.i64 = sub_20B057A60(&v54, &v53, &v52, &v55);
        float32x4_t v37 = vsubq_f32(v55, v36);
        float32x4_t v38 = vmulq_f32(v37, v37);
        float v39 = sqrtf(vaddq_f32(vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2)).f32[0]);
        if (v39 < fabsf(v33))
        {
          *(float *)(v32 + 116) = -v39;
          *(float32x4_t *)(v32 + 128) = v36;
          *(_DWORD *)(v32 + 144) = *v16;
          int v40 = sub_20B057E60(a1, (float32x4_t *)v32);
          uint64_t v41 = (void *)(*(void *)(a1 + 1312) + 344);
          unint64_t v42 = (unint64_t *)(v32 + 8);
          if (v40)
          {
            sub_20B05F5C0((uint64_t)v41, v42, v42);
          }
          else
          {
            uint64_t v43 = sub_20B05FD64(v41, v42);
            if (v43) {
              sub_20B05FE18((void *)(*(void *)(a1 + 1312) + 344), v43);
            }
          }
        }
      }
    }
    unint64_t v44 = *(uint64_t **)v32;
    if (!*(void *)v32)
    {
      uint64_t v45 = *(void *)(*(void *)(a1 + 1312) + 88);
      if (!v45) {
        sub_20B05FF90();
      }
      uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 48))(v45);
      v54.i64[0] = 0;
      uint64_t v47 = *(void *)v32;
      *(void *)uint64_t v32 = v46;
      if (v47) {
        sub_20B05E310(v32, v47);
      }
      uint64_t v48 = v54.i64[0];
      v54.i64[0] = 0;
      if (v48) {
        sub_20B05E310((uint64_t)&v54, v48);
      }
      unint64_t v44 = *(uint64_t **)v32;
    }
    unint64_t v49 = v44[1];
    if (v49 >= v44[2])
    {
      uint64_t result = sub_20B05D320(v44, a3);
    }
    else
    {
      *(double *)v23.i64 = sub_20B05D4BC(v49, a3);
      uint64_t result = v50 + 224;
    }
    v44[1] = result;
LABEL_26:
    ++v14;
  }
  while (v14 != 8);
  return result;
}

uint64_t sub_20B0579CC(uint64_t a1, float32x4_t a2, double a3, double a4)
{
  uint64_t v4 = *(float32x4_t **)(a1 + 1312);
  float v5 = v4[15].f32[2];
  *(float *)&a4 = v5 * 0.5;
  float32x4_t v6 = vmulq_n_f32(vsubq_f32(vsubq_f32(a2, v4[17]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), 1.0 / v5);
  __int16 v7 = llroundf(v6.f32[0]);
  __int16 v8 = llroundf(v6.f32[1]);
  __int16 v9 = llroundf(v6.f32[2]);
  return *(void *)(v4[9].i64[0] + 8 * v9) | ((*(void *)(v4[7].i64[1] + 8 * HIBYTE(v8)) | *(void *)(v4[9].i64[0] + 8 * HIBYTE(v9)) | *(void *)(v4[6].i64[0] + 8 * HIBYTE(v7))) << 24) | *(void *)(v4[7].i64[1] + 8 * v8) | *(void *)(v4[6].i64[0] + 8 * v7);
}

double sub_20B057A60(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4)
{
  float32x4_t v4 = *a1;
  float32x4_t v5 = *a2;
  unsigned __int32 v6 = vsubq_f32(*a1, *a2).u32[0];
  float32x4_t v7 = vsubq_f32(*a2, *a1);
  if (vmovn_s32(vcgtq_f32(*a1, *a2)).u8[0]) {
    float v8 = *(float *)&v6;
  }
  else {
    float v8 = v7.f32[0];
  }
  if (v8 <= 0.0001)
  {
    float v9 = v4.f32[1] <= v5.f32[1] ? v5.f32[1] - v4.f32[1] : v4.f32[1] - v5.f32[1];
    if (v9 <= 0.0001)
    {
      float v10 = v4.f32[2] <= v5.f32[2] ? v5.f32[2] - v4.f32[2] : v4.f32[2] - v5.f32[2];
      if (v10 <= 0.0001)
      {
        float32x4_t v11 = *a3;
        LODWORD(v12) = vsubq_f32(v4, *a3).u32[0];
        unsigned __int32 v13 = vsubq_f32(*a3, v4).u32[0];
        if ((vmovn_s32(vcgtq_f32(v4, *a3)).u8[0] & 1) == 0) {
          float v12 = *(float *)&v13;
        }
        if (v12 <= 0.0001)
        {
          float v14 = v4.f32[1] <= v11.f32[1] ? v11.f32[1] - v4.f32[1] : v4.f32[1] - v11.f32[1];
          if (v14 <= 0.0001)
          {
            float v15 = v4.f32[2] <= v11.f32[2] ? v11.f32[2] - v4.f32[2] : v4.f32[2] - v11.f32[2];
            if (v15 <= 0.0001) {
              goto LABEL_82;
            }
          }
        }
      }
    }
  }
  float32x4_t v16 = *a3;
  float32x4_t v17 = vsubq_f32(*a3, v4);
  float32x4_t v18 = *a4;
  float32x4_t v19 = vsubq_f32(*a4, v4);
  float32x4_t v20 = vmulq_f32(v19, v17);
  float32x4_t v21 = vaddq_f32(vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2));
  if (v8 <= 0.0001)
  {
    float v22 = v4.f32[1] <= v5.f32[1] ? v5.f32[1] - v4.f32[1] : v4.f32[1] - v5.f32[1];
    if (v22 <= 0.0001)
    {
      float v23 = v4.f32[2] <= v5.f32[2] ? v5.f32[2] - v4.f32[2] : v4.f32[2] - v5.f32[2];
      if (v23 <= 0.0001)
      {
        if (v21.f32[0] <= 0.0) {
          goto LABEL_82;
        }
        float32x4_t v42 = vmulq_f32(v17, v17);
        float32x4_t v43 = vaddq_f32(vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2));
        if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v21, v43))).u8[0] & 1) == 0)
        {
          float32x4_t v38 = *a3;
          return *(double *)v38.i64;
        }
LABEL_77:
        v4.i64[0] = vmlaq_n_f32(v4, v17, vdivq_f32(v21, v43).f32[0]).u64[0];
        goto LABEL_82;
      }
    }
  }
  float32x4_t v24 = vmulq_f32(v19, v7);
  float32x4_t v25 = vaddq_f32(vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2));
  LODWORD(v26) = vsubq_f32(v4, v16).u32[0];
  if ((vmovn_s32(vcgtq_f32(v4, v16)).u8[0] & 1) == 0) {
    float v26 = v17.f32[0];
  }
  if (v26 <= 0.0001)
  {
    float v27 = v4.f32[1] <= v16.f32[1] ? v16.f32[1] - v4.f32[1] : v4.f32[1] - v16.f32[1];
    if (v27 <= 0.0001)
    {
      float v28 = v4.f32[2] <= v16.f32[2] ? v16.f32[2] - v4.f32[2] : v4.f32[2] - v16.f32[2];
      if (v28 <= 0.0001) {
        goto LABEL_60;
      }
    }
  }
  LODWORD(v29) = vsubq_f32(v5, v16).u32[0];
  float32x4_t v30 = vsubq_f32(v16, v5);
  if ((vmovn_s32(vcgtq_f32(v5, v16)).u8[0] & 1) == 0) {
    float v29 = v30.f32[0];
  }
  if (v29 <= 0.0001)
  {
    float v31 = v5.f32[1] <= v16.f32[1] ? v16.f32[1] - v5.f32[1] : v5.f32[1] - v16.f32[1];
    if (v31 <= 0.0001)
    {
      float v32 = v5.f32[2] <= v16.f32[2] ? v16.f32[2] - v5.f32[2] : v5.f32[2] - v16.f32[2];
      if (v32 <= 0.0001)
      {
LABEL_60:
        if (v25.f32[0] <= 0.0)
        {
LABEL_82:
          v38.i64[0] = v4.i64[0];
          return *(double *)v38.i64;
        }
        float32x4_t v39 = vmulq_f32(v7, v7);
        float32x4_t v40 = vaddq_f32(vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2));
        if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v25, v40))).u8[0])
        {
LABEL_67:
          v4.i64[0] = vmlaq_n_f32(v4, v7, vdivq_f32(v25, v40).f32[0]).u64[0];
          goto LABEL_82;
        }
        goto LABEL_62;
      }
    }
  }
  if (v25.f32[0] <= 0.0 && v21.f32[0] <= 0.0) {
    goto LABEL_82;
  }
  float32x4_t v33 = vsubq_f32(v18, v5);
  float32x4_t v34 = vmulq_f32(v33, v7);
  float32x4_t v35 = vmulq_f32(v33, v17);
  float32x4_t v36 = vaddq_f32(vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2));
  float32x4_t v37 = vaddq_f32(vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2));
  if (v36.f32[0] < 0.0 || (float32x4_t v38 = *a2, (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v36, v37))).u8[0] & 1) != 0))
  {
    float32x4_t v41 = vmlaq_f32(vnegq_f32(vmulq_f32(v36, v21)), v25, v37);
    if (v36.f32[0] <= 0.0 && v41.f32[0] <= 0.0 && v25.f32[0] >= 0.0)
    {
      float32x4_t v40 = vsubq_f32(v25, v36);
      goto LABEL_67;
    }
    float32x4_t v44 = vsubq_f32(v18, v16);
    float32x4_t v45 = vmulq_f32(v44, v7);
    float32x4_t v46 = vmulq_f32(v44, v17);
    float32x4_t v47 = vaddq_f32(vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2));
    float32x4_t v48 = vaddq_f32(vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2));
    if (v48.f32[0] >= 0.0)
    {
      float32x4_t v38 = *a3;
      if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v48, v47))).u8[0] & 1) == 0) {
        return *(double *)v38.i64;
      }
    }
    float32x4_t v49 = vmlaq_f32(vnegq_f32(vmulq_f32(v48, v25)), v21, v47);
    if (v48.f32[0] <= 0.0 && v49.f32[0] <= 0.0 && v21.f32[0] >= 0.0)
    {
      float32x4_t v43 = vsubq_f32(v21, v48);
      goto LABEL_77;
    }
    float32x4_t v50 = vmlaq_f32(vnegq_f32(vmulq_f32(v47, v37)), v36, v48);
    if (v50.f32[0] > 0.0
      || (float32x4_t v51 = vsubq_f32(v37, v36), v51.f32[0] < 0.0)
      || (float32x4_t v52 = vsubq_f32(v47, v48), v52.f32[0] < 0.0))
    {
      float v53 = 1.0 / vaddq_f32(vaddq_f32(v49, v41), v50).f32[0];
      v4.i64[0] = vmlaq_n_f32(vmlaq_n_f32(v4, v7, v53 * v49.f32[0]), v17, v53 * v41.f32[0]).u64[0];
      goto LABEL_82;
    }
    v5.i64[0] = vmlaq_n_f32(v5, v30, vdivq_f32(v51, vaddq_f32(v52, v51)).f32[0]).u64[0];
LABEL_62:
    v38.i64[0] = v5.i64[0];
  }
  return *(double *)v38.i64;
}

uint64_t sub_20B057E60(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 1312);
  id v3 = *(float32x4_t **)(v2 + 320);
  if (!v3) {
    return 0;
  }
  __asm { FMOV            V0.4S, #1.0 }
  v9.i64[0] = 0x3F0000003F000000;
  v9.i64[1] = 0x3F0000003F000000;
  while (!a2[10].i64[1])
  {
LABEL_11:
    id v3 = (float32x4_t *)v3->i64[0];
    if (!v3) {
      return 0;
    }
  }
  float32x4_t v10 = v3[1];
  float32x4_t v11 = vsubq_f32(v3[2], v10);
  float32x4_t v12 = vmulq_f32(v11, v11);
  float32x4_t v13 = vaddq_f32(vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2));
  float32x4_t v14 = vdivq_f32(_Q0, v13);
  uint64_t v15 = a2[10].i64[1];
  while (1)
  {
    if (v3[3].i32[0] == *(_DWORD *)(v15 + 16))
    {
      float32x4_t v16 = vmulq_f32(vaddq_f32(a2[1], a2[2]), v9);
      float32x4_t v17 = vmulq_f32(vsubq_f32(v16, v10), v11);
      float32x4_t v18 = vaddq_f32(vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2));
      float32x4_t v19 = v3[1];
      if (v18.f32[0] > 0.0)
      {
        float32x4_t v19 = v3[2];
        if (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v18, v13))).u8[0]) {
          float32x4_t v19 = vmlaq_n_f32(v10, v11, vmulq_f32(v18, v14).f32[0]);
        }
      }
      float32x4_t v20 = vsubq_f32(v19, v16);
      float32x4_t v21 = vmulq_f32(v20, v20);
      if (*(float *)(v2 + 248) * 0.866025404 > sqrtf(vaddq_f32(vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2)).f32[0]))return 1; {
    }
      }
    uint64_t v15 = *(void *)v15;
    if (!v15) {
      goto LABEL_11;
    }
  }
}

void sub_20B057F60(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  __p = 0;
  id v3 = 0;
  uint64_t v4 = 0;
  sub_20B060230(&__p, 3uLL);
  if (*(void *)(*(void *)(a1 + 1312) + 40) != *(void *)(*(void *)(a1 + 1312) + 48)) {
    operator new();
  }
  if (__p)
  {
    id v3 = __p;
    operator delete(__p);
  }
}

void sub_20B0580F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

void sub_20B058120(void *a1, void *a2, uint64_t *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v145 = *MEMORY[0x263EF8340];
  id v8 = a1;
  id v9 = a2;
  v113 = v9;
  uint64_t v114 = v8;
  float32x4_t v11 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v8, v10, @"position", 786435);
  float32x4_t v14 = v11;
  if (!v11) {
    goto LABEL_45;
  }
  uint64_t v15 = objc_msgSend_dataStart(v11, v12, v13);
  uint64_t v18 = objc_msgSend_stride(v14, v16, v17);
  unint64_t v21 = objc_msgSend_bufferSize(v14, v19, v20);
  float v23 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v8, v22, @"normal", 786435);

  if (v23)
  {
    uint64_t v121 = objc_msgSend_dataStart(v23, v24, v25);
    uint64_t v124 = objc_msgSend_stride(v23, v26, v27);
    unint64_t v123 = objc_msgSend_bufferSize(v23, v28, v29);
  }
  else
  {
    unint64_t v123 = 0;
    uint64_t v124 = 0;
    uint64_t v121 = 0;
  }
  float32x4_t v30 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v8, v24, @"occlusionValue", 786435);

  if (v30)
  {
    objc_msgSend_dataStart(v30, v31, v32);
    objc_msgSend_stride(v30, v33, v34);
    objc_msgSend_bufferSize(v30, v35, v36);
  }
  float32x4_t v37 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v8, v31, @"textureCoordinate", 786435);

  if (v37)
  {
    uint64_t v120 = objc_msgSend_dataStart(v37, v38, v39);
    uint64_t v122 = objc_msgSend_stride(v37, v40, v41);
    unint64_t v44 = objc_msgSend_bufferSize(v37, v42, v43);
  }
  else
  {
    unint64_t v44 = 0;
    uint64_t v122 = 0;
    uint64_t v120 = 0;
  }
  float32x4_t v45 = objc_msgSend_indexBuffer(v9, v38, v39);
  float32x4_t v48 = objc_msgSend_map(v45, v46, v47);

  v112 = v48;
  v119 = (char *)objc_msgSend_bytes(v48, v49, v50);
  unint64_t v116 = objc_msgSend_indexCount(v9, v51, v52);
  uint64_t v141 = 0;
  unint64_t v142 = 0;
  uint64_t v143 = 0;
  if (objc_msgSend_geometryType(v9, v53, v54) != 2 || objc_msgSend_indexType(v9, v55, v56) != 32)
  {
    uint64_t v59 = objc_msgSend_topology(v9, v55, v56);
    if (v59)
    {
      uint64_t v60 = objc_msgSend_topology(v9, v57, v58);
      unint64_t v63 = objc_msgSend_faceTopology(v60, v61, v62);

      if (v63)
      {
        unint64_t v117 = objc_msgSend_topology(v9, v57, v58);
        unsigned __int32 v66 = objc_msgSend_faceTopology(v117, v64, v65);
        uint64_t v59 = objc_msgSend_map(v66, v67, v68);

        uint64_t v71 = objc_msgSend_topology(v9, v69, v70);
        uint64_t v118 = objc_msgSend_faceCount(v71, v72, v73);

        if (v59)
        {
          uint64_t v111 = objc_msgSend_bytes(v59, v57, v58);
LABEL_19:
          uint64_t v110 = objc_msgSend_indexCount(v9, v57, v58);
          uint64_t v76 = objc_msgSend_indexType(v9, v74, v75);
          uint64_t v79 = objc_msgSend_geometryType(v9, v77, v78);
          sub_20B1A4AFC(&v141, v119, v110, v111, v118, v76, v79, 2);
          uint64_t v80 = v142;
          v119 = v141;

          unint64_t v116 = (v80 - v119) >> 2;
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v118 = 0;
        uint64_t v59 = 0;
      }
    }
    else
    {
      uint64_t v118 = 0;
    }
    uint64_t v111 = 0;
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v81 = objc_msgSend_vertexCount(v114, v55, v56);
  if (v116)
  {
    unint64_t v84 = v81;
    for (unint64_t i = 0; i < v116; i += 3)
    {
      long long v139 = 0u;
      memset(v140, 0, sizeof(v140));
      long long v137 = 0u;
      long long v138 = 0u;
      float32x4_t v135 = 0u;
      float32x4_t v136 = 0u;
      float32x4_t v133 = 0u;
      float32x4_t v134 = 0u;
      float32x4_t v131 = 0u;
      float32x4_t v132 = 0u;
      float32x4_t v129 = 0u;
      float32x4_t v130 = 0u;
      v86 = &v119[4 * i];
      unint64_t v87 = *((unsigned int *)v86 + 1);
      v144[0] = *(_DWORD *)v86;
      v144[1] = v87;
      unint64_t v88 = *((unsigned int *)v86 + 2);
      v144[2] = v88;
      if (v84 > v144[0] && v84 > v87 && v84 > v88)
      {
        uint64_t v89 = 0;
        uint64_t v90 = 64;
        do
        {
          uint64_t v91 = (int)v144[v89];
          if (v18 * v91 + 8 < v21)
          {
            *(float32x4_t *)((char *)&v129 + v90 - 48) = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a7, a4, *(float *)(v15 + v18 * v91)), a5, *(float *)(v15 + v18 * v91 + 4)), a6, *(float *)(v15 + v18 * v91 + 8));
            if (v23 && v124 * v91 + 8 < v123) {
              *(float32x4_t *)((char *)&v129 + v90) = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a4, *(float *)(v121 + v124 * v91)), a5, *(float *)(v121 + v124 * v91 + 4)), a6, *(float *)(v121 + v124 * v91 + 8)), (float32x4_t)0, a7);
            }
            if (v37)
            {
              uint64_t v92 = v122 * v91;
              if (v92 + 4 < v44) {
                *((void *)v140 + v89) = *(void *)(v120 + v92);
              }
            }
          }
          ++v89;
          v90 += 16;
        }
        while (v89 != 3);
        if (v23)
        {
          float64x2_t v93 = vcvtq_f64_f32(*(float32x2_t *)v130.f32);
          float64x2_t v94 = vcvt_hight_f64_f32(v130);
          float64x2_t v95 = vsubq_f64(vcvt_hight_f64_f32(v131), v94);
          float64x2_t v96 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v131.f32), v93);
          float64x2_t v97 = vsubq_f64(vcvt_hight_f64_f32(v132), v94);
          float64x2_t v98 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v132.f32), v93);
          float64x2_t v99 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v95, v98, 1)), v97, v96, 1);
          v97.f64[1] = v98.f64[0];
          v95.f64[1] = v96.f64[0];
          float64x2_t v100 = vmlaq_f64(vnegq_f64(vmulq_f64(v97, v96)), v95, v98);
          float64x2_t v101 = vmulq_f64(v100, v100);
          v97.f64[0] = vmulq_f64(v99, v99).f64[0];
          v99.f64[1] = v100.f64[0];
          v101.f64[0] = 1.0 / sqrt(v97.f64[0] + v101.f64[0] + v101.f64[1]);
          float32x4_t v102 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v99, v101.f64[0])), vmulq_laneq_f64(v101, v100, 1));
        }
        else
        {
          float32x4_t v103 = vsubq_f32(v131, v130);
          float32x4_t v104 = vsubq_f32(v132, v130);
          float32x4_t v105 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL), v103)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), (int8x16_t)v103, 0xCuLL), v104);
          int32x4_t v106 = (int32x4_t)vmulq_f32(v105, v105);
          v106.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v106, 2), *(float32x2_t *)v106.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1)).u32[0];
          *(float32x2_t *)v104.f32 = vrsqrte_f32((float32x2_t)v106.u32[0]);
          *(float32x2_t *)v104.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32)), *(float32x2_t *)v104.f32);
          float32x4_t v102 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), (int8x16_t)v105, 0xCuLL), vmul_f32(*(float32x2_t *)v104.f32, vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(*(float32x2_t *)v104.f32, *(float32x2_t *)v104.f32))).f32[0]);
          float32x4_t v133 = v102;
          float32x4_t v134 = v102;
          float32x4_t v135 = v102;
        }
        float32x4_t v136 = v102;
        v129.i64[0] = (uint64_t)v114;
        v129.i64[1] = objc_msgSend_material(v113, v82, v83);

        sub_20B058850(&v129);
        unint64_t v107 = a3[1];
        if (v107 >= a3[2])
        {
          uint64_t v109 = sub_20B060018(a3, (uint64_t)&v129);
        }
        else
        {
          sub_20B05D4BC(v107, (uint64_t)&v129);
          uint64_t v109 = v108 + 224;
        }
        a3[1] = v109;
      }
    }
  }
  if (v141)
  {
    unint64_t v142 = v141;
    operator delete(v141);
  }

  id v9 = v113;
LABEL_45:
}

void sub_20B058790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  float32x4_t v19 = *(void **)(v17 - 152);
  if (v19)
  {
    *(void *)(v17 - 144) = v19;
    operator delete(v19);
  }

  _Unwind_Resume(a1);
}

float32_t sub_20B058850(float32x4_t *a1)
{
  float32x4_t v2 = a1[1];
  float32x4_t v1 = a1[2];
  float64x2_t v3 = vcvt_hight_f64_f32(v1);
  float64x2_t v4 = vcvt_hight_f64_f32(v2);
  float64x2_t v5 = vcvtq_f64_f32(*(float32x2_t *)v2.f32);
  float64x2_t v6 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v1.f32), v5);
  float64x2_t v7 = vsubq_f64(v3, v4);
  float32x4_t v8 = a1[3];
  float64x2_t v9 = vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v8.f32), v5);
  float64x2_t v10 = vsubq_f64(vcvt_hight_f64_f32(v8), v4);
  *(double *)v8.i64 = vaddvq_f64(vmulq_f64(v6, v6)) + vmulq_f64(v7, v7).f64[0];
  double v11 = vaddvq_f64(vmulq_f64(v9, v6)) + vmulq_f64(v10, v7).f64[0];
  float64x2_t v12 = vmulq_f64(v9, v9);
  double v13 = vaddvq_f64(v12) + vmulq_f64(v10, v10).f64[0];
  v12.f64[0] = 1.0 / -(v13 * *(double *)v8.i64 - v11 * v11);
  a1[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v6, v12.f64[0])), vmulq_f64(v12, v7));
  a1[9] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v9, v12.f64[0])), vmulq_f64(v12, v10));
  *(float *)v6.f64 = *(double *)v8.i64;
  *(float *)v9.f64 = v11;
  a1[10].i32[0] = LODWORD(v6.f64[0]);
  a1[10].i32[1] = LODWORD(v9.f64[0]);
  float32_t result = v13;
  a1[10].f32[2] = result;
  return result;
}

void sub_20B0588FC(void *a1, uint64_t *a2, int a3, float32x4_t a4, float32x4_t a5)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  id v7 = a1;
  float64x2_t v10 = objc_msgSend_transform(v7, v8, v9);
  double v13 = v10;
  if (v10)
  {
    objc_msgSend_matrix(v10, v11, v12);
    uint64_t v14 = 0;
    v50[0] = v15;
    v50[1] = v16;
    v50[2] = v17;
    v50[3] = v18;
    float32x4_t v51 = 0u;
    float32x4_t v52 = 0u;
    __n128 v53 = 0u;
    __n128 v54 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v51 + v14 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4, COERCE_FLOAT(v50[v14])), a5, *(float32x2_t *)&v50[v14], 1), (float32x4_t)v39, (float32x4_t)v50[v14], 2), (float32x4_t)v38, (float32x4_t)v50[v14], 3);
      ++v14;
    }
    while (v14 != 4);
    a5 = v52;
    a4 = v51;
    __n128 v38 = v54;
    __n128 v39 = v53;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v21 = v7;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    float32x4_t v24 = objc_msgSend_submeshes(v21, v22, v23);
    uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v46, v56, 16);
    if (v26)
    {
      uint64_t v27 = *(void *)v47;
      do
      {
        for (uint64_t i = 0; i != v26; ++i)
        {
          if (*(void *)v47 != v27) {
            objc_enumerationMutation(v24);
          }
          sub_20B058120(v21, *(void **)(*((void *)&v46 + 1) + 8 * i), a2, a4, a5, (float32x4_t)v39, (float32x4_t)v38);
        }
        uint64_t v26 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v29, (uint64_t)&v46, v56, 16);
      }
      while (v26);
    }
  }
  if (a3)
  {
    float32x4_t v30 = objc_msgSend_children(v7, v19, v20);
    float v31 = v30;
    if (v30)
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v32 = v30;
      uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v42, v55, 16);
      if (v34)
      {
        uint64_t v35 = *(void *)v43;
        do
        {
          for (uint64_t j = 0; j != v34; ++j)
          {
            if (*(void *)v43 != v35) {
              objc_enumerationMutation(v32);
            }
            sub_20B0588FC(*(void *)(*((void *)&v42 + 1) + 8 * j), a2, 1, (__n128)a4, (__n128)a5, v39, v38);
          }
          uint64_t v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v37, (uint64_t)&v42, v55, 16);
        }
        while (v34);
      }
    }
  }
}

void sub_20B058B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B058BE0(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 1312);
  float v3 = *(float *)(v2 + 248);
  if (v3 > a2) {
    return 0;
  }
  unint64_t v75 = 0;
  *(uint64_t *)((char *)v74.i64 + 4) = 0;
  v74.i32[0] = 0;
  uint64_t v73 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  uint64_t v7 = sub_20B06076C((uint64_t)&v71, v2 + 344);
  uint64_t v70 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  float v8 = ceilf((float)(a2 - v3) / *(float *)(*(void *)(a1 + 1312) + 248));
  float v9 = v8 + v8;
  unsigned int v10 = v9;
  LODWORD(v70) = 1065353216;
  if (v9 >= 4295000000.0) {
    unsigned int v10 = -1;
  }
  unsigned int v59 = v10;
  if (*((void *)&v72 + 1))
  {
    int v11 = 0;
    if (v10 <= 1) {
      unsigned int v10 = 1;
    }
    unsigned int v60 = v10 - 1;
    __asm
    {
      FMOV            V1.4S, #1.0
      FMOV            V0.4S, #-1.0
    }
    float32x4_t v61 = _Q1;
    do
    {
      for (uint64_t i = (void *)v72; i; uint64_t i = (void *)*i)
      {
        uint64_t v18 = *(void *)(a1 + 1312);
        id v21 = *(void **)(v18 + 24);
        float32x4_t v19 = (void *)(v18 + 24);
        uint64_t v20 = v21;
        if (v21)
        {
          unint64_t v22 = i[2];
          uint64_t v23 = v19;
          do
          {
            unint64_t v24 = v20[4];
            _CF = v24 >= v22;
            if (v24 >= v22) {
              uint64_t v26 = v20;
            }
            else {
              uint64_t v26 = v20 + 1;
            }
            if (_CF) {
              uint64_t v23 = v20;
            }
            uint64_t v20 = (void *)*v26;
          }
          while (*v26);
          if (v23 != v19 && v22 >= v23[4])
          {
            sub_20B059738(v7, *(void *)(v23[5] + 8), (__n64 *)&v74);
            for (uint64_t j = 0; j != 6; ++j)
            {
              int32x4_t v28 = vaddq_s32(*(int32x4_t *)(a1 + 16 * j + 896), v74);
              if ((v28.i32[0] & 0x80000000) == 0 && (v28.i32[1] & 0x80000000) == 0)
              {
                int v29 = v28.i32[2];
                if ((v28.i32[2] & 0x80000000) == 0)
                {
                  uint64_t v30 = *(void *)(a1 + 1312);
                  BOOL v31 = v28.i32[0] < *(_DWORD *)(v30 + 288) && v28.i32[1] < *(_DWORD *)(v30 + 292);
                  if (v31 && v28.i32[2] < *(_DWORD *)(v30 + 296))
                  {
                    unint64_t v75 = *(void *)(*(void *)(v30 + 144) + 8 * v28.u8[8]) | ((*(void *)(*(void *)(v30 + 120)
                                                                                              + 8 * v28.u8[5]) | *(void *)(*(void *)(v30 + 144) + 8 * v28.u8[9]) | *(void *)(*(void *)(v30 + 96) + 8 * v28.u8[1])) << 24) | *(void *)(*(void *)(v30 + 120) + 8 * v28.u8[4]) | *(void *)(*(void *)(v30 + 96) + 8 * v28.u8[0]);
                    int32x4_t v63 = v28;
                    uint64_t v7 = (uint64_t)sub_20B05FD64((void *)(v30 + 168), &v75);
                    if (!v7)
                    {
                      uint64_t v33 = 0;
                      uint64_t v34 = 0;
                      uint64_t v35 = *(float32x4_t **)(a1 + 1312);
                      float v36 = 3.4028e38;
                      do
                      {
                        float32x4_t v37 = (float32x4_t)vaddq_s32(*(int32x4_t *)(a1 + 16 * v33 + 896), v63);
                        if ((v37.i32[0] & 0x80000000) == 0
                          && (v37.i32[1] & 0x80000000) == 0
                          && (v37.i32[2] & 0x80000000) == 0)
                        {
                          BOOL v38 = v37.i32[0] < v35[18].i32[0] && v37.i32[1] < v35[18].i32[1];
                          if (v38 && v37.i32[2] < v35[18].i32[2])
                          {
                            float32x4_t v40 = (float32x4_t *)v35[1].i64[1];
                            if (v40)
                            {
                              uint64_t v41 = v35[9].i64[0];
                              uint64_t v42 = v35[7].i64[1];
                              uint64_t v43 = v35[6].i64[0];
                              uint64_t v7 = *(void *)(v42 + 8 * v37.u8[5]) | *(void *)(v41 + 8 * v37.u8[9]) | *(void *)(v43 + 8 * v37.u8[1]);
                              unint64_t v44 = *(void *)(v41 + 8 * v37.u8[8]) | (v7 << 24) | *(void *)(v42 + 8 * v37.u8[4]) | *(void *)(v43 + 8 * v37.u8[0]);
                              long long v45 = (float32x4_t *)((char *)v35 + 24);
                              do
                              {
                                unint64_t v46 = v40[2].u64[0];
                                BOOL v47 = v46 >= v44;
                                if (v46 >= v44) {
                                  long long v48 = (float32x4_t **)v40;
                                }
                                else {
                                  long long v48 = (float32x4_t **)&v40->i64[1];
                                }
                                if (v47) {
                                  long long v45 = v40;
                                }
                                float32x4_t v40 = *v48;
                              }
                              while (*v48);
                              if (v45 != (float32x4_t *)&v35[1].u32[2] && v44 >= v45[2].i64[0])
                              {
                                float v49 = fabsf(*(float *)(v45[2].i64[1] + 116));
                                if (v49 < v36)
                                {
                                  float v36 = v49;
                                  uint64_t v34 = v45[2].i64[1];
                                }
                              }
                            }
                          }
                        }
                        ++v33;
                      }
                      while (v33 != 18);
                      if (v34)
                      {
                        *(float32x2_t *)v37.f32 = vcvt_f32_s32(*(int32x2_t *)v63.i8);
                        v37.f32[2] = (float)v29;
                        float32x4_t v50 = vaddq_f32(v37, v61);
                        float v51 = v35[15].f32[2];
                        float32x4_t v52 = vmlaq_n_f32(v35[17], v50, v51);
                        v50.f32[0] = v51 * 0.5;
                        float32x4_t v62 = vsubq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 0));
                        float v64 = v51;
                        v76[0] = v62;
                        __n128 v53 = (float32x4_t *)(v35[2].i64[1] + 224 * *(int *)(v34 + 144));
                        float32x4_t v67 = v53[1];
                        float32x4_t v66 = v53[3];
                        float32x4_t v65 = v53[2];
                        *(double *)v54.i64 = sub_20B057A60(&v67, &v66, &v65, v76);
                        float32x4_t v55 = vsubq_f32(v62, v54);
                        float32x4_t v56 = vmulq_f32(v55, v55);
                        float v57 = sqrtf(vaddq_f32(vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2)).f32[0]);
                        if (v57 <= v36) {
                          float v58 = v64 + v36;
                        }
                        else {
                          float v58 = v57;
                        }
                        if (v58 < a2) {
                          operator new();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (v11 == v60) {
        break;
      }
      LODWORD(v73) = v70;
      sub_20B0607E4(&v71, (void *)v69, 0);
      ++v11;
      uint64_t v7 = (uint64_t)sub_20B060E0C(&v68);
    }
    while (*((void *)&v72 + 1));
  }
  sub_20B05F1D0((uint64_t)&v68);
  sub_20B05F1D0((uint64_t)&v71);
  return v59;
}

void sub_20B059180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void *sub_20B0591A0(void *result, int a2)
{
  if (a2 >= 1)
  {
    float v3 = result;
    unint64_t v79 = 0;
    *(uint64_t *)((char *)v78.i64 + 4) = 0;
    v78.i32[0] = 0;
    long long v75 = 0u;
    long long v76 = 0u;
    uint64_t v77 = 1065353216;
    long long v72 = 0u;
    long long v73 = 0u;
    uint64_t v74 = 1065353216;
    long long v69 = 0u;
    long long v70 = 0u;
    uint64_t v71 = 1065353216;
    float64x2_t v4 = *(void **)(result[164] + 400);
    if (v4)
    {
      do
      {
        unint64_t v5 = v4[2];
        unint64_t v68 = v5;
        uint64_t v6 = v3[164];
        uint64_t v7 = (void *)(v6 + 24);
        float v8 = *(void **)(v6 + 24);
        if (v8)
        {
          float v9 = (void *)(v6 + 24);
          unsigned int v10 = *(void **)(v6 + 24);
          do
          {
            unint64_t v11 = v10[4];
            BOOL v12 = v11 >= v5;
            if (v11 >= v5) {
              double v13 = v10;
            }
            else {
              double v13 = v10 + 1;
            }
            if (v12) {
              float v9 = v10;
            }
            unsigned int v10 = (void *)*v13;
          }
          while (*v13);
          if (v9 != v7 && v5 >= v9[4])
          {
            sub_20B059738((uint64_t)result, *(void *)(v9[5] + 8), (__n64 *)&v78);
            uint64_t v14 = 0;
            while (1)
            {
              int32x4_t v15 = vaddq_s32(*(int32x4_t *)&v3[2 * v14 + 112], v78);
              if (v15.i32[0] < 0 || v15.i32[1] < 0 || v15.i32[2] < 0) {
                break;
              }
              BOOL v16 = v15.i32[0] < *(_DWORD *)(v6 + 288) && v15.i32[1] < *(_DWORD *)(v6 + 292);
              if (!v16 || v15.i32[2] >= *(_DWORD *)(v6 + 296)) {
                break;
              }
              unint64_t v18 = *(void *)(*(void *)(v6 + 144) + 8 * v15.u8[8]) | ((*(void *)(*(void *)(v6 + 120)
                                                                                       + 8 * v15.u8[5]) | *(void *)(*(void *)(v6 + 144) + 8 * v15.u8[9]) | *(void *)(*(void *)(v6 + 96) + 8 * v15.u8[1])) << 24) | *(void *)(*(void *)(v6 + 120) + 8 * v15.u8[4]) | *(void *)(*(void *)(v6 + 96) + 8 * v15.u8[0]);
              unint64_t v79 = v18;
              float32x4_t v19 = (void *)(v6 + 24);
              uint64_t v20 = v8;
              do
              {
                unint64_t v21 = v20[4];
                BOOL v22 = v21 >= v18;
                if (v21 >= v18) {
                  uint64_t v23 = v20;
                }
                else {
                  uint64_t v23 = v20 + 1;
                }
                if (v22) {
                  float32x4_t v19 = v20;
                }
                uint64_t v20 = (void *)*v23;
              }
              while (*v23);
              if (v19 == v7 || v18 < v19[4]) {
                break;
              }
              if (++v14 == 6) {
                goto LABEL_39;
              }
            }
            float32_t result = sub_20B05F5C0((uint64_t)&v69, &v68, &v68);
          }
        }
LABEL_39:
        float64x2_t v4 = (void *)*v4;
      }
      while (v4);
      float v24 = *(float *)&v71;
      uint64_t v25 = (void *)v70;
    }
    else
    {
      uint64_t v25 = 0;
      float v24 = 1.0;
    }
    *(float *)&uint64_t v77 = v24;
    sub_20B0607E4(&v75, v25, 0);
    if (*((void *)&v76 + 1))
    {
      int v27 = 0;
      if (a2 <= 1) {
        int v28 = 1;
      }
      else {
        int v28 = a2;
      }
      int v29 = v28 - 1;
      do
      {
        for (uint64_t i = (void *)v76; i; uint64_t i = (void *)*i)
        {
          uint64_t v31 = v3[164];
          uint64_t v34 = *(void **)(v31 + 24);
          id v32 = (void *)(v31 + 24);
          uint64_t v33 = v34;
          if (v34)
          {
            unint64_t v35 = i[2];
            float v36 = v32;
            do
            {
              unint64_t v37 = v33[4];
              BOOL v38 = v37 >= v35;
              if (v37 >= v35) {
                __n128 v39 = v33;
              }
              else {
                __n128 v39 = v33 + 1;
              }
              if (v38) {
                float v36 = v33;
              }
              uint64_t v33 = (void *)*v39;
            }
            while (*v39);
            if (v36 != v32 && v35 >= v36[4])
            {
              sub_20B059738((uint64_t)v26, *(void *)(v36[5] + 8), (__n64 *)&v78);
              uint64_t v40 = 0;
              int32x4_t v67 = v78;
              do
              {
                int32x4_t v41 = vaddq_s32(*(int32x4_t *)&v3[2 * v40 + 112], v67);
                if ((v41.i32[0] & 0x80000000) == 0 && (v41.i32[1] & 0x80000000) == 0 && (v41.i32[2] & 0x80000000) == 0)
                {
                  uint64_t v42 = v3[164];
                  BOOL v43 = v41.i32[0] < *(_DWORD *)(v42 + 288) && v41.i32[1] < *(_DWORD *)(v42 + 292);
                  if (v43 && v41.i32[2] < *(_DWORD *)(v42 + 296))
                  {
                    BOOL v47 = *(void **)(v42 + 24);
                    long long v45 = (void *)(v42 + 24);
                    unint64_t v46 = v47;
                    unint64_t v48 = *(void *)(v45[15] + 8 * v41.u8[8]) | ((*(void *)(v45[12] + 8 * v41.u8[5]) | *(void *)(v45[15] + 8 * v41.u8[9]) | *(void *)(v45[9] + 8 * v41.u8[1])) << 24) | *(void *)(v45[12] + 8 * v41.u8[4]) | *(void *)(v45[9] + 8 * v41.u8[0]);
                    unint64_t v79 = v48;
                    if (!v47) {
                      goto LABEL_82;
                    }
                    float v49 = v45;
                    do
                    {
                      unint64_t v50 = v46[4];
                      BOOL v51 = v50 >= v48;
                      if (v50 >= v48) {
                        float32x4_t v52 = v46;
                      }
                      else {
                        float32x4_t v52 = v46 + 1;
                      }
                      if (v51) {
                        float v49 = v46;
                      }
                      unint64_t v46 = (void *)*v52;
                    }
                    while (*v52);
                    if (v49 == v45 || v48 < v49[4]) {
LABEL_82:
                    }
                      float v49 = v45;
                    __n128 v53 = sub_20B05FD64(&v69, &v79);
                    uint64_t v26 = sub_20B05FD64((void *)(v3[164] + 384), &v79);
                    if (v49 != (void *)(v3[164] + 24) && v26 != 0 && v53 == 0)
                    {
                      uint64_t v56 = v49[5];
                      if (!*(unsigned char *)(v56 + 192) || *(unsigned char *)(v56 + 200))
                      {
                        sub_20B05F5C0((uint64_t)&v72, &v79, &v79);
                        uint64_t v26 = sub_20B05F5C0((uint64_t)&v69, &v79, &v79);
                      }
                    }
                  }
                }
                ++v40;
              }
              while (v40 != 6);
            }
          }
        }
        if (v27 == v29) {
          break;
        }
        LODWORD(v77) = v74;
        sub_20B0607E4(&v75, (void *)v73, 0);
        ++v27;
        uint64_t v26 = sub_20B060E0C(&v72);
      }
      while (*((void *)&v76 + 1));
    }
    for (uint64_t j = (void *)v70; j; uint64_t j = (void *)*j)
    {
      unint64_t v58 = j[2];
      unint64_t v68 = v58;
      uint64_t v59 = v3[164];
      float32x4_t v62 = *(void **)(v59 + 24);
      unsigned int v60 = (void *)(v59 + 24);
      float32x4_t v61 = v62;
      if (v62)
      {
        int32x4_t v63 = v60;
        do
        {
          unint64_t v64 = v61[4];
          BOOL v65 = v64 >= v58;
          if (v64 >= v58) {
            float32x4_t v66 = v61;
          }
          else {
            float32x4_t v66 = v61 + 1;
          }
          if (v65) {
            int32x4_t v63 = v61;
          }
          float32x4_t v61 = (void *)*v66;
        }
        while (*v66);
        if (v63 != v60 && v58 >= v63[4])
        {
          sub_20B060E74((void *)(v3[164] + 168), &v68);
          sub_20B060E74((void *)(v3[164] + 384), &v68);
          sub_20B060EAC(v3[164] + 16, &v68);
        }
      }
    }
    sub_20B05F1D0((uint64_t)&v69);
    sub_20B05F1D0((uint64_t)&v72);
    return (void *)sub_20B05F1D0((uint64_t)&v75);
  }
  return result;
}

void sub_20B05966C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  sub_20B05F1D0((uint64_t)va);
  sub_20B05F1D0((uint64_t)va1);
  sub_20B05F1D0((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_20B0596A0(uint64_t a1, float32x4_t **a2)
{
  for (uint64_t i = *(void **)(*(void *)(a1 + 1312) + 400); i; uint64_t i = (void *)*i)
  {
    uint64_t v5 = *(void *)(a1 + 1312);
    uint64_t v8 = *(void **)(v5 + 24);
    uint64_t v6 = (void *)(v5 + 24);
    uint64_t v7 = v8;
    if (v8)
    {
      unint64_t v9 = i[2];
      uint64_t v10 = v6;
      do
      {
        unint64_t v11 = v7[4];
        BOOL v12 = v11 >= v9;
        if (v11 >= v9) {
          uint64_t v13 = v7;
        }
        else {
          uint64_t v13 = v7 + 1;
        }
        if (v12) {
          uint64_t v10 = v7;
        }
        uint64_t v7 = (void *)*v13;
      }
      while (*v13);
      if (v10 != v6 && v9 >= v10[4]) {
        sub_20B0598F0(*a2, v10[5], *(_DWORD *)(*(void *)(a1 + 1312) + 424));
      }
    }
  }
}

__n64 sub_20B059738(uint64_t a1, unint64_t a2, __n64 *a3)
{
  int64x2_t v3 = (int64x2_t)xmmword_20B1E6150;
  int64x2_t v4 = (int64x2_t)xmmword_20B1E6160;
  int64x2_t v5 = (int64x2_t)xmmword_20B1E6170;
  int8x16_t v6 = (int8x16_t)vdupq_n_s64(a2);
  int8x16_t v7 = 0uLL;
  uint64x2_t v8 = (uint64x2_t)vdupq_n_s64(1uLL);
  uint64x2_t v9 = (uint64x2_t)vdupq_n_s64(2uLL);
  int64x2_t v10 = vdupq_n_s64(4uLL);
  int64x2_t v11 = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
  uint64_t v12 = 24;
  int64x2_t v13 = (int64x2_t)xmmword_20B1E6180;
  int64x2_t v14 = vdupq_n_s64(0xFFFFFFFFFFFFFFFCLL);
  int8x16_t v15 = 0uLL;
  int8x16_t v16 = 0uLL;
  do
  {
    int64x2_t v17 = v3;
    v18.i64[0] = 3 * v3.i64[0];
    int64x2_t v19 = v4;
    v18.i64[1] = 3 * v17.i64[1];
    v20.i64[0] = 3 * v4.i64[0];
    v20.i64[1] = 3 * v19.i64[1];
    int8x16_t v21 = v16;
    int8x16_t v22 = v15;
    int8x16_t v23 = v7;
    int8x16_t v7 = vorrq_s8(v7, (int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v8, v20), v6), (uint64x2_t)vnegq_s64(vaddq_s64(v19, v19))), (int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v8, v18), v6), (uint64x2_t)vnegq_s64(vaddq_s64(v17, v17)))));
    int64x2_t v24 = vaddq_s64((int64x2_t)v18, v5);
    int64x2_t v25 = vaddq_s64((int64x2_t)v20, v13);
    int8x16_t v16 = vorrq_s8(v16, (int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v9, v20), v6), (uint64x2_t)vmvnq_s8((int8x16_t)v25)), (int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64(v9, v18), v6), (uint64x2_t)vmvnq_s8((int8x16_t)v24))));
    int8x16_t v15 = vorrq_s8(v15, (int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v10, v20), v6), (uint64x2_t)vsubq_s64(v11, v25)), (int32x4_t)vshlq_u64((uint64x2_t)vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v10, v18), v6), (uint64x2_t)vsubq_s64(v11, v24))));
    int64x2_t v5 = vaddq_s64(v5, v14);
    int64x2_t v13 = vaddq_s64(v13, v14);
    int64x2_t v3 = vaddq_s64(v17, v10);
    int64x2_t v4 = vaddq_s64(v19, v10);
    v12 -= 4;
  }
  while (v12);
  uint64x2_t v26 = (uint64x2_t)vdupq_n_s64(0x15uLL);
  int8x16_t v27 = (int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v26, (uint64x2_t)v19), (int32x4_t)vcgtq_u64(v26, (uint64x2_t)v17));
  int8x16_t v28 = vbslq_s8(v27, v16, v21);
  int8x16_t v29 = vbslq_s8(v27, v15, v22);
  int8x16_t v30 = vbslq_s8(v27, v7, v23);
  *(int8x8_t *)v27.i8 = vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
  int8x8_t v31 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
  *(int8x8_t *)v30.i8 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
  result.n64_u32[0] = v30.i32[0] | v30.i32[1];
  result.n64_u32[1] = v27.i32[0] | v27.i32[1];
  a3[1].n64_u32[0] = v31.i32[0] | v31.i32[1];
  a3->n64_u64[0] = result.n64_u64[0];
  return result;
}

void sub_20B0598F0(float32x4_t *a1, uint64_t a2, int a3)
{
  int64x2_t v4 = a1;
  if (a3)
  {
    int v5 = a3;
    v6.i64[0] = 0x3F0000003F000000;
    v6.i64[1] = 0x3F0000003F000000;
    __asm
    {
      FMOV            V0.4S, #-1.0
      FMOV            V1.4S, #0.25
    }
    while (v5 >= 1)
    {
      int32x4_t v13 = vcgeq_f32(vmulq_f32(vaddq_f32(*(float32x4_t *)(a2 + 16), *(float32x4_t *)(a2 + 32)), v6), vmulq_f32(vaddq_f32(v4[1], v4[2]), v6));
      int16x4_t v14 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v13));
      if (v14.i8[0]) {
        int v15 = 0;
      }
      else {
        int v15 = 4;
      }
      if (v14.i8[2]) {
        int v16 = v15;
      }
      else {
        int v16 = v15 | 2;
      }
      uint64_t v17 = v4[3].i64[v16 & 0xFFFFFFFE | vmovn_s32(v13).i32[1] & 1];
      if (!v17) {
        operator new();
      }
      int64x2_t v4 = (float32x4_t *)v17;
      if (!--v5) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v17 = (uint64_t)a1;
LABEL_15:
    *(_OWORD *)(v17 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v17 + 16) = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(v17 + 116) = *(_DWORD *)(a2 + 116);
    *(_OWORD *)(v17 + 128) = *(_OWORD *)(a2 + 128);
    *(_DWORD *)(v17 + 144) = *(_DWORD *)(a2 + 144);
    *(unsigned char *)(v17 + 192) = *(unsigned char *)(a2 + 192);
    *(void *)(v17 + 8) = *(void *)(a2 + 8);
    *(_DWORD *)(v17 + 196) = *(_DWORD *)(a2 + 196);
    *(_WORD *)(v17 + 200) = *(_WORD *)(a2 + 200);
    if (v17 != a2)
    {
      *(_DWORD *)(v17 + 184) = *(_DWORD *)(a2 + 184);
      sub_20B061320((void *)(v17 + 152), *(int **)(a2 + 168), 0);
    }
    *(_OWORD *)(v17 + 208) = *(_OWORD *)(a2 + 208);
    *(_WORD *)(v17 + 224) = *(_WORD *)(a2 + 224);
    *(_OWORD *)(v17 + 240) = *(_OWORD *)(a2 + 240);
    *(void *)(v17 + 256) = *(void *)(a2 + 256);
  }
}

float32x4_t *sub_20B059B8C(float32x4_t *result, float32x4_t *a2, int a3)
{
  int v3 = a3 - 1;
  if (a3 == 1)
  {
    v4.i64[0] = 0x3F0000003F000000;
    v4.i64[1] = 0x3F0000003F000000;
    float32x4_t v5 = vmulq_f32(vaddq_f32(a2[1], a2[2]), v4);
LABEL_11:
    LODWORD(v10) = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u32[0];
    float32x2_t v11 = *(float32x2_t *)v5.f32;
    v12.i64[0] = 0x3F0000003F000000;
    v12.i64[1] = 0x3F0000003F000000;
    float32x4_t v13 = vmulq_f32(vaddq_f32(result[1], result[2]), v12);
    int8x8_t v14 = vmvn_s8((int8x8_t)vcge_f32(v11, *(float32x2_t *)v13.f32));
    if (v14.i8[0]) {
      int v15 = 0;
    }
    else {
      int v15 = 4;
    }
    if (v14.i8[4]) {
      int v16 = v15;
    }
    else {
      int v16 = v15 | 2;
    }
    result[3].i64[v16 | (v10 >= v13.f32[2])] = 0;
  }
  else
  {
    v6.i64[0] = 0x3F0000003F000000;
    v6.i64[1] = 0x3F0000003F000000;
    while ((a3 & ~(a3 >> 31)) > a3 - 2)
    {
      float32x4_t v5 = vmulq_f32(vaddq_f32(a2[1], a2[2]), v6);
      int32x4_t v7 = vcgeq_f32(v5, vmulq_f32(vaddq_f32(result[1], result[2]), v6));
      int16x4_t v8 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v7));
      if (v8.i8[0]) {
        int v9 = 0;
      }
      else {
        int v9 = 4;
      }
      if ((v8.i8[2] & 1) == 0) {
        v9 |= 2u;
      }
      __n64 result = (float32x4_t *)result[3].i64[v9 & 0xFFFFFFFE | vmovn_s32(v7).i32[1] & 1];
      if (!--v3) {
        goto LABEL_11;
      }
    }
  }
  return result;
}

void sub_20B059C84(void *a1)
{
  v60.i32[2] = 0;
  v60.i64[0] = 0;
  unint64_t v50 = *(void **)(a1[164] + 184);
  if (v50)
  {
    float32x4_t v1 = a1;
    unint64_t v61 = 0;
    __asm
    {
      FMOV            V1.4S, #1.0
      FMOV            V0.4S, #-1.0
    }
    float32x4_t v52 = _Q1;
    do
    {
      uint64_t v6 = v1[164];
      int v9 = *(void **)(v6 + 24);
      int32x4_t v7 = (void *)(v6 + 24);
      int16x4_t v8 = v9;
      if (v9)
      {
        unint64_t v10 = v50[2];
        float32x2_t v11 = v7;
        do
        {
          unint64_t v12 = v8[4];
          _CF = v12 >= v10;
          if (v12 >= v10) {
            int8x8_t v14 = v8;
          }
          else {
            int8x8_t v14 = v8 + 1;
          }
          if (_CF) {
            float32x2_t v11 = v8;
          }
          int16x4_t v8 = (void *)*v14;
        }
        while (*v14);
        if (v11 != v7 && v10 >= v11[4])
        {
          uint64_t v51 = v11[5];
          for (uint64_t i = *(uint64_t **)(v51 + 168); i; uint64_t i = (uint64_t *)*i)
          {
            int v59 = *((_DWORD *)i + 4);
            int v16 = v59;
            uint64_t v17 = *(void *)(v1[164] + 40);
            sub_20B059738((uint64_t)a1, *(void *)(v51 + 8), (__n64 *)&v60);
            uint64_t v18 = 0;
            int32x4_t v19 = v60;
            uint64x2_t v20 = (float32x4_t *)(v17 + 224 * v16);
            int8x16_t v21 = v20 + 1;
            int8x16_t v22 = v20 + 3;
            int8x16_t v23 = v20 + 2;
            int32x4_t v53 = v60;
            do
            {
              float32x4_t v24 = (float32x4_t)vaddq_s32(*(int32x4_t *)&v1[2 * v18 + 112], v19);
              __int16 v25 = v24.i16[0];
              if ((v24.i32[0] & 0x80000000) == 0)
              {
                __int16 v26 = v24.i16[2];
                if ((v24.i32[1] & 0x80000000) == 0)
                {
                  __int16 v27 = v24.i16[4];
                  if ((v24.i32[2] & 0x80000000) == 0)
                  {
                    int8x16_t v28 = (float32x4_t *)v1[164];
                    BOOL v29 = v24.i32[0] < v28[18].i32[0] && v24.i32[1] < v28[18].i32[1];
                    if (v29 && v24.i32[2] < v28[18].i32[2])
                    {
                      *(float32x2_t *)v24.f32 = vcvt_f32_s32(*(int32x2_t *)v24.f32);
                      v24.f32[2] = (float)v24.i32[2];
                      float32x4_t v31 = vaddq_f32(v24, v52);
                      float v32 = v28[15].f32[2];
                      float32x4_t v33 = vmlaq_n_f32(v28[17], v31, v32);
                      v31.f32[0] = v32 * 0.5;
                      float v54 = v32;
                      float32x4_t v55 = vsubq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0));
                      v62[0] = v55;
                      float32x4_t v58 = *v21;
                      float32x4_t v57 = *v22;
                      float32x4_t v56 = *v23;
                      *(double *)v34.i64 = sub_20B057A60(&v58, &v57, &v56, v62);
                      float32x4_t v35 = vsubq_f32(v55, v34);
                      int32x4_t v36 = (int32x4_t)vmulq_f32(v35, v35);
                      float v37 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.i8, 1)), (float32x4_t)vdupq_laneq_s32(v36, 2)).f32[0]);
                      uint64_t v40 = v28[1].i64[1];
                      __n128 v39 = &v28[1].i64[1];
                      BOOL v38 = (void *)v40;
                      unint64_t v41 = *(void *)(v39[15] + 8 * v27) | ((*(void *)(v39[12] + 8 * HIBYTE(v26)) | *(void *)(v39[15] + 8 * HIBYTE(v27)) | *(void *)(v39[9] + 8 * HIBYTE(v25))) << 24) | *(void *)(v39[12] + 8 * v26) | *(void *)(v39[9] + 8 * v25);
                      unint64_t v61 = v41;
                      if (!v40) {
                        goto LABEL_38;
                      }
                      uint64_t v42 = v39;
                      do
                      {
                        unint64_t v43 = v38[4];
                        BOOL v44 = v43 >= v41;
                        if (v43 >= v41) {
                          long long v45 = v38;
                        }
                        else {
                          long long v45 = v38 + 1;
                        }
                        if (v44) {
                          uint64_t v42 = v38;
                        }
                        BOOL v38 = (void *)*v45;
                      }
                      while (*v45);
                      if (v42 == v39 || v41 < v42[4]) {
LABEL_38:
                      }
                        operator new();
                      unint64_t v46 = (float32x4_t *)v42[5];
                      int32x4_t v19 = v53;
                      if (!v46[12].i8[0])
                      {
                        float v47 = fabsf(v46[7].f32[1]);
                        if (v54 * 0.866025404 <= v47)
                        {
                          int v48 = v59;
                          if (v46[9].i32[0] != v59 && v37 < v47)
                          {
                            v46[7].f32[1] = -v37;
                            v46[8] = v34;
                            v46[9].i32[0] = v48;
                            a1 = sub_20B05FB44((uint64_t)&v46[9].i64[1], &v59, &v59);
                            int32x4_t v19 = v53;
                          }
                        }
                      }
                    }
                  }
                }
              }
              ++v18;
            }
            while (v18 != 26);
          }
        }
      }
      unint64_t v50 = (void *)*v50;
    }
    while (v50);
  }
}

void sub_20B05A09C(uint64_t a1)
{
  v44.i32[2] = 0;
  v44.i64[0] = 0;
  float32x4_t v1 = *(float32x4_t **)(a1 + 1312);
  uint64_t v2 = (void *)v1[11].i64[1];
  if (v2)
  {
    float32x4_t v4 = &v1[1].i8[8];
    uint64_t v5 = v1[1].i64[1];
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v43 = _Q0;
    do
    {
      if (v5)
      {
        unint64_t v10 = v2[2];
        float32x2_t v11 = &v1[1].i8[8];
        unint64_t v12 = (void *)v5;
        do
        {
          unint64_t v13 = v12[4];
          _CF = v13 >= v10;
          if (v13 >= v10) {
            int v15 = v12;
          }
          else {
            int v15 = v12 + 1;
          }
          if (_CF) {
            float32x2_t v11 = (__int8 *)v12;
          }
          unint64_t v12 = (void *)*v15;
        }
        while (*v15);
        if (v11 != v4 && v10 >= *((void *)v11 + 4))
        {
          uint64_t v16 = *((void *)v11 + 5);
          float v17 = *(float *)(v16 + 116);
          if (v17 < 0.0)
          {
            sub_20B059738(a1, *(void *)(v16 + 8), (__n64 *)&v44);
            uint64_t v19 = 0;
            *(float32x2_t *)v20.f32 = vcvt_f32_s32(*(int32x2_t *)v44.i8);
            v20.f32[2] = (float)v44.i32[2];
            float32x4_t v21 = vaddq_f32(v20, v43);
            while (1)
            {
              float32x4_t v22 = (float32x4_t)vaddq_s32(*(int32x4_t *)(a1 + 16 * v19 + 896), v44);
              if ((v22.i32[0] & 0x80000000) == 0 && (v22.i32[1] & 0x80000000) == 0 && (v22.i32[2] & 0x80000000) == 0)
              {
                BOOL v23 = v22.i32[0] < v1[18].i32[0] && v22.i32[1] < v1[18].i32[1];
                if (v23 && v22.i32[2] < v1[18].i32[2])
                {
                  unint64_t v25 = *(void *)(v1[9].i64[0] + 8 * v22.u8[8]) | ((*(void *)(v1[7].i64[1] + 8 * v22.u8[5]) | *(void *)(v1[9].i64[0] + 8 * v22.u8[9]) | *(void *)(v1[6].i64[0] + 8 * v22.u8[1])) << 24) | *(void *)(v1[7].i64[1] + 8 * v22.u8[4]) | *(void *)(v1[6].i64[0] + 8 * v22.u8[0]);
                  __int16 v26 = &v1[1].i8[8];
                  __int16 v27 = (void *)v5;
                  do
                  {
                    unint64_t v28 = v27[4];
                    BOOL v29 = v28 >= v25;
                    if (v28 >= v25) {
                      int8x16_t v30 = v27;
                    }
                    else {
                      int8x16_t v30 = v27 + 1;
                    }
                    if (v29) {
                      __int16 v26 = (__int8 *)v27;
                    }
                    __int16 v27 = (void *)*v30;
                  }
                  while (*v30);
                  if (v26 != v4 && v25 >= *((void *)v26 + 4))
                  {
                    float32x4_t v31 = (float32x4_t *)*((void *)v26 + 5);
                    if (!v31[12].i8[0] && v31[7].f32[1] >= 0.0)
                    {
                      float32x4_t v32 = v31[8];
                      float v33 = v1[15].f32[2];
                      v18.f32[0] = v33 * 0.5;
                      float32x4_t v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 0);
                      float32x4_t v34 = vsubq_f32(vsubq_f32(vmlaq_n_f32(v1[17], v21, v33), v18), v32);
                      int32x4_t v35 = (int32x4_t)vmulq_f32(v34, v34);
                      v35.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2)).u32[0];
                      float32x2_t v36 = vrsqrte_f32((float32x2_t)v35.u32[0]);
                      float32x2_t v37 = vmul_f32(vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v36, v36)), v36);
                      *(float32x2_t *)v22.f32 = vcvt_f32_s32(*(int32x2_t *)v22.f32);
                      v22.f32[2] = (float)v22.i32[2];
                      float32x4_t v38 = vsubq_f32(vsubq_f32(vmlaq_n_f32(v1[17], vaddq_f32(v22, v43), v33), v18), v32);
                      int32x4_t v39 = (int32x4_t)vmulq_f32(v38, v38);
                      v39.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v39, 2)).u32[0];
                      float32x2_t v40 = vrsqrte_f32((float32x2_t)v39.u32[0]);
                      float32x2_t v41 = vmul_f32(vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v40, v40)), v40);
                      int32x4_t v42 = (int32x4_t)vmulq_f32(vmulq_n_f32(v34, vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37))).f32[0]), vmulq_n_f32(v38, vmul_f32(v41, vrsqrts_f32((float32x2_t)v39.u32[0], vmul_f32(v41, v41))).f32[0]));
                      if (vaddq_f32(vaddq_f32((float32x4_t)v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.i8, 1)), (float32x4_t)vdupq_laneq_s32(v42, 2)).f32[0] > 0.0)break; {
                    }
                      }
                  }
                }
              }
              if (++v19 == 26) {
                goto LABEL_41;
              }
            }
            *(float *)(v16 + 116) = -v17;
          }
        }
      }
LABEL_41:
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
}

uint64_t sub_20B05A354(uint64_t result)
{
  float32x4_t v1 = *(int8x16_t **)(result + 1312);
  int8x16_t v2 = v1[18];
  if (v2.i32[0] < 1) {
    return result;
  }
  int v3 = 0;
  float32x4_t v4 = &v1[1].i8[8];
  int8x16_t v5 = v1[18];
  v5.i32[0] = vextq_s8(v2, v2, 8uLL).u32[0];
  do
  {
    if (v5.i32[1] < 0) {
      goto LABEL_73;
    }
    uint64_t v6 = 0;
    v7.i32[3] = 0;
    v7.i64[0] = v3;
    int v8 = v5.i32[0];
    char v9 = 1;
    do
    {
      v7.i32[2] = 0;
      while (1)
      {
        __int32 v10 = v7.i32[2];
        if (v7.i32[2] > v8) {
          break;
        }
        float32x2_t v11 = (void *)v1[1].i64[1];
        if (!v11) {
          goto LABEL_18;
        }
        uint64_t v12 = v1[9].i64[0];
        uint64_t v13 = v1[7].i64[1];
        uint64_t v14 = v1[6].i64[0];
        uint64_t v15 = v7.u32[2];
        unint64_t v16 = *(void *)(v12 + 8 * v7.u8[8]) | ((*(void *)(v13 + 8 * v7.u8[5]) | *(void *)(v12 + 8 * v7.u8[9]) | *(void *)(v14 + 8 * v7.u8[1])) << 24) | *(void *)(v13 + 8 * v7.u8[4]) | *(void *)(v14 + 8 * v7.u8[0]);
        float v17 = &v1[1].i8[8];
        float32x4_t v18 = (void *)v1[1].i64[1];
        do
        {
          unint64_t v19 = v18[4];
          BOOL v20 = v19 >= v16;
          if (v19 >= v16) {
            float32x4_t v21 = v18;
          }
          else {
            float32x4_t v21 = v18 + 1;
          }
          if (v20) {
            float v17 = (__int8 *)v18;
          }
          float32x4_t v18 = (void *)*v21;
        }
        while (*v21);
        if (v17 == v4 || v16 < *((void *)v17 + 4)) {
          goto LABEL_18;
        }
        uint64_t v23 = *((void *)v17 + 5);
        if (*(unsigned char *)(v23 + 192))
        {
          char v9 = 0;
        }
        else
        {
          if (v9)
          {
            *(float *)(v23 + 116) = -*(float *)(v23 + 116);
            *(_DWORD *)(v23 + 196) = -*(_DWORD *)(v23 + 196);
            char v9 = 1;
LABEL_18:
            uint64_t v15 = v6;
            goto LABEL_19;
          }
          unint64_t v24 = 3;
          while (1)
          {
            int32x4_t v25 = vaddq_s32(*(int32x4_t *)(result + 16 * v24 + 896), v7);
            if ((v25.i32[0] & 0x80000000) == 0 && (v25.i32[1] & 0x80000000) == 0 && (v25.i32[2] & 0x80000000) == 0)
            {
              BOOL v26 = v25.i32[0] < v1[18].i32[0] && v25.i32[1] < v1[18].i32[1];
              if (v26 && v25.i32[2] < v8)
              {
                unint64_t v28 = *(void *)(v12 + 8 * v25.u8[8]) | ((*(void *)(v13 + 8 * v25.u8[5]) | *(void *)(v12 + 8 * v25.u8[9]) | *(void *)(v14 + 8 * v25.u8[1])) << 24) | *(void *)(v13 + 8 * v25.u8[4]) | *(void *)(v14 + 8 * v25.u8[0]);
                BOOL v29 = &v1[1].i8[8];
                int8x16_t v30 = (void *)v1[1].i64[1];
                do
                {
                  unint64_t v31 = v30[4];
                  BOOL v32 = v31 >= v28;
                  if (v31 >= v28) {
                    float v33 = v30;
                  }
                  else {
                    float v33 = v30 + 1;
                  }
                  if (v32) {
                    BOOL v29 = (__int8 *)v30;
                  }
                  int8x16_t v30 = (void *)*v33;
                }
                while (*v33);
                if (v29 != v4 && v28 >= *((void *)v29 + 4) && *(float *)(*((void *)v29 + 5) + 116) > 0.0) {
                  break;
                }
              }
            }
            BOOL v20 = v24 >= 4;
            v24 += 2;
            if (v20)
            {
              char v9 = 0;
              if ((int)v6 >= v7.i32[2]) {
                uint64_t v15 = v7.u32[2];
              }
              else {
                uint64_t v15 = v6;
              }
              goto LABEL_19;
            }
          }
          *(float *)(v23 + 116) = -*(float *)(v23 + 116);
          *(_DWORD *)(v23 + 196) = -*(_DWORD *)(v23 + 196);
          int v34 = v7.i32[2] - 1;
          int32x4_t v35 = v7;
          v35.i32[2] = v7.i32[2] - 1;
          __int32 v36 = v7.i32[3];
          if (v7.i32[2] <= (int)v6)
          {
LABEL_69:
            __int32 v47 = v36;
          }
          else
          {
            do
            {
              __int16 v37 = v7.i16[2];
              __int16 v38 = v7.i16[0];
              int32x4_t v7 = v35;
              unint64_t v39 = *(void *)(v12 + 8 * v34) | ((*(void *)(v13 + 8 * HIBYTE(v37)) | *(void *)(v12 + 8 * BYTE1(v34)) | *(void *)(v14 + 8 * HIBYTE(v38))) << 24) | *(void *)(v13 + 8 * v37) | *(void *)(v14 + 8 * v38);
              float32x2_t v40 = &v1[1].i8[8];
              float32x2_t v41 = v11;
              do
              {
                unint64_t v42 = v41[4];
                BOOL v43 = v42 >= v39;
                if (v42 >= v39) {
                  int32x4_t v44 = v41;
                }
                else {
                  int32x4_t v44 = v41 + 1;
                }
                if (v43) {
                  float32x2_t v40 = (__int8 *)v41;
                }
                float32x2_t v41 = (void *)*v44;
              }
              while (*v44);
              if (v40 != v4 && v39 >= *((void *)v40 + 4))
              {
                uint64_t v45 = *((void *)v40 + 5);
                if (*(unsigned char *)(v45 + 192)) {
                  goto LABEL_69;
                }
                float v46 = *(float *)(v45 + 116);
                if (v46 < 0.0)
                {
                  *(float *)(v45 + 116) = -v46;
                  *(_DWORD *)(v45 + 196) = -*(_DWORD *)(v45 + 196);
                }
              }
              int32x4_t v35 = v7;
              v35.i32[2] = v34 - 1;
              __int32 v47 = v36;
              BOOL v26 = v34-- <= (int)v6;
            }
            while (!v26);
          }
          v35.i64[1] = __PAIR64__(v47, v10);
          char v9 = 1;
          int32x4_t v7 = v35;
        }
LABEL_19:
        v22.i64[0] = v7.i64[0];
        v22.i32[2] = v10 + 1;
        v22.i32[3] = v7.i32[3];
        int v8 = v1[18].i32[2];
        uint64_t v6 = v15;
        int32x4_t v7 = v22;
      }
      __int32 v48 = v7.i32[1];
      v49.i64[0] = v7.i64[0] + 0x100000000;
      v49.i64[1] = v7.i64[1];
      int32x4_t v7 = v49;
    }
    while (v48 < v1[18].i32[1]);
    int8x16_t v2 = v1[18];
LABEL_73:
    ++v3;
    v5.i32[1] = v2.i32[1];
    v5.i32[0] = vextq_s8(v2, v2, 8uLL).u32[0];
  }
  while (v3 < v2.i32[0]);
  return result;
}

void sub_20B05A710(uint64_t a1)
{
  v23.i32[2] = 0;
  v23.i64[0] = 0;
  float32x4_t v1 = *(void **)(*(void *)(a1 + 1312) + 224);
  if (v1)
  {
    uint64_t v2 = a1;
    do
    {
      uint64_t v3 = *(void *)(v2 + 1312);
      float32x4_t v4 = (void *)(v3 + 24);
      int8x16_t v5 = *(void **)(v3 + 24);
      if (v5)
      {
        unint64_t v6 = v1[2];
        int32x4_t v7 = (void *)(v3 + 24);
        int v8 = *(void **)(v3 + 24);
        do
        {
          unint64_t v9 = v8[4];
          BOOL v10 = v9 >= v6;
          if (v9 >= v6) {
            float32x2_t v11 = v8;
          }
          else {
            float32x2_t v11 = v8 + 1;
          }
          if (v10) {
            int32x4_t v7 = v8;
          }
          int v8 = (void *)*v11;
        }
        while (*v11);
        if (v7 != v4 && v6 >= v7[4])
        {
          uint64_t v12 = v7[5];
          if (*(float *)(v12 + 116) < 0.0)
          {
            sub_20B059738(a1, *(void *)(v12 + 8), (__n64 *)&v23);
            uint64_t v13 = 0;
            while (1)
            {
              int32x4_t v14 = vaddq_s32(*(int32x4_t *)(v2 + 16 * v13 + 896), v23);
              if ((v14.i32[0] & 0x80000000) == 0 && (v14.i32[1] & 0x80000000) == 0 && (v14.i32[2] & 0x80000000) == 0)
              {
                BOOL v15 = v14.i32[0] < *(_DWORD *)(v3 + 288) && v14.i32[1] < *(_DWORD *)(v3 + 292);
                if (v15 && v14.i32[2] < *(_DWORD *)(v3 + 296))
                {
                  unint64_t v17 = *(void *)(*(void *)(v3 + 144) + 8 * v14.u8[8]) | ((*(void *)(*(void *)(v3 + 120)
                                                                                           + 8 * v14.u8[5]) | *(void *)(*(void *)(v3 + 144) + 8 * v14.u8[9]) | *(void *)(*(void *)(v3 + 96) + 8 * v14.u8[1])) << 24) | *(void *)(*(void *)(v3 + 120) + 8 * v14.u8[4]) | *(void *)(*(void *)(v3 + 96) + 8 * v14.u8[0]);
                  float32x4_t v18 = (void *)(v3 + 24);
                  unint64_t v19 = v5;
                  do
                  {
                    unint64_t v20 = v19[4];
                    BOOL v21 = v20 >= v17;
                    if (v20 >= v17) {
                      int32x4_t v22 = v19;
                    }
                    else {
                      int32x4_t v22 = v19 + 1;
                    }
                    if (v21) {
                      float32x4_t v18 = v19;
                    }
                    unint64_t v19 = (void *)*v22;
                  }
                  while (*v22);
                  if (v18 != v4 && v17 >= v18[4] && *(float *)(v18[5] + 116) > 0.0) {
                    break;
                  }
                }
              }
              if (++v13 == 6) {
                goto LABEL_39;
              }
            }
            a1 = sub_20B05A8CC(v2, v12);
          }
        }
      }
LABEL_39:
      float32x4_t v1 = (void *)*v1;
    }
    while (v1);
  }
}

uint64_t sub_20B05A8CC(uint64_t a1, uint64_t a2)
{
  unint64_t v37 = 0;
  unint64_t v38 = 0;
  *(uint64_t *)((char *)v36.i64 + 4) = 0;
  v36.i32[0] = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v35 = 1065353216;
  sub_20B05F5C0((uint64_t)&v33, (unint64_t *)(a2 + 8), (void *)(a2 + 8));
  while (*((void *)&v34 + 1))
  {
    unint64_t v38 = *(void *)(v34 + 16);
    uint64_t v3 = sub_20B060E74(&v33, &v38);
    uint64_t v4 = *(void *)(a1 + 1312);
    int32x4_t v7 = *(void **)(v4 + 24);
    int8x16_t v5 = (void *)(v4 + 24);
    unint64_t v6 = v7;
    if (v7)
    {
      int v8 = v5;
      do
      {
        unint64_t v9 = v6[4];
        BOOL v10 = v9 >= v38;
        if (v9 >= v38) {
          float32x2_t v11 = v6;
        }
        else {
          float32x2_t v11 = v6 + 1;
        }
        if (v10) {
          int v8 = v6;
        }
        unint64_t v6 = (void *)*v11;
      }
      while (*v11);
      if (v8 != v5 && v38 >= v8[4])
      {
        uint64_t v12 = v8[5];
        float v13 = *(float *)(v12 + 116);
        if (v13 < 0.0)
        {
          *(float *)(v12 + 116) = -v13;
          *(_DWORD *)(v12 + 196) = -*(_DWORD *)(v12 + 196);
          sub_20B059738((uint64_t)v3, *(void *)(v12 + 8), (__n64 *)&v36);
          uint64_t v14 = 0;
          int32x4_t v32 = v36;
          do
          {
            int32x4_t v15 = vaddq_s32(*(int32x4_t *)(a1 + 16 * v14 + 896), v32);
            if ((v15.i32[0] & 0x80000000) == 0 && (v15.i32[1] & 0x80000000) == 0 && (v15.i32[2] & 0x80000000) == 0)
            {
              uint64_t v16 = *(void *)(a1 + 1312);
              BOOL v17 = v15.i32[0] < *(_DWORD *)(v16 + 288) && v15.i32[1] < *(_DWORD *)(v16 + 292);
              if (v17 && v15.i32[2] < *(_DWORD *)(v16 + 296))
              {
                BOOL v21 = *(void **)(v16 + 24);
                unint64_t v19 = (void *)(v16 + 24);
                unint64_t v20 = v21;
                unint64_t v22 = *(void *)(v19[15] + 8 * v15.u8[8]) | ((*(void *)(v19[12] + 8 * v15.u8[5]) | *(void *)(v19[15] + 8 * v15.u8[9]) | *(void *)(v19[9] + 8 * v15.u8[1])) << 24) | *(void *)(v19[12] + 8 * v15.u8[4]) | *(void *)(v19[9] + 8 * v15.u8[0]);
                unint64_t v37 = v22;
                if (v21)
                {
                  int32x4_t v23 = v19;
                  do
                  {
                    unint64_t v24 = v20[4];
                    BOOL v25 = v24 >= v22;
                    if (v24 >= v22) {
                      BOOL v26 = v20;
                    }
                    else {
                      BOOL v26 = v20 + 1;
                    }
                    if (v25) {
                      int32x4_t v23 = v20;
                    }
                    unint64_t v20 = (void *)*v26;
                  }
                  while (*v26);
                  if (v23 != v19 && v22 >= v23[4])
                  {
                    uint64_t v27 = v23[5];
                    float v28 = *(float *)(v27 + 116);
                    int v29 = *(unsigned __int8 *)(v27 + 192);
                    if (v28 < 0.0 && v29 == 0) {
                      sub_20B05F5C0((uint64_t)&v33, &v37, &v37);
                    }
                  }
                }
              }
            }
            ++v14;
          }
          while (v14 != 6);
        }
      }
    }
  }
  return sub_20B05F1D0((uint64_t)&v33);
}

void sub_20B05AAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B05F1D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B05AB00(uint64_t a1)
{
  for (uint64_t i = *(void **)(*(void *)(*(void *)(a1 + 80) + 1312) + 224); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 80) + 1312);
    unint64_t v6 = *(void **)(v3 + 24);
    uint64_t v4 = (void *)(v3 + 24);
    int8x16_t v5 = v6;
    if (v6)
    {
      unint64_t v7 = i[2];
      int v8 = v4;
      do
      {
        unint64_t v9 = v5[4];
        BOOL v10 = v9 >= v7;
        if (v9 >= v7) {
          float32x2_t v11 = v5;
        }
        else {
          float32x2_t v11 = v5 + 1;
        }
        if (v10) {
          int v8 = v5;
        }
        int8x16_t v5 = (void *)*v11;
      }
      while (*v11);
      if (v8 != v4 && v7 >= v8[4]) {
        sub_20B0598F0(*(float32x4_t **)a1, v8[5], *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 1312) + 424));
      }
    }
  }
}

uint64_t sub_20B05ABA0(uint64_t a1)
{
  sub_20B059C84(*(void **)(a1 + 80));
  sub_20B05A354(*(void *)(a1 + 80));
  sub_20B05A710(*(void *)(a1 + 80));
  sub_20B05A09C(*(void *)(a1 + 80));
  sub_20B05AC00(*(void **)(a1 + 80), (float32x4_t **)a1);
  uint64_t v2 = *(void **)(a1 + 80);

  return sub_20B05AE58(v2);
}

uint64_t sub_20B05AC00(void *a1, float32x4_t **a2)
{
  v32.i32[2] = 0;
  v32.i64[0] = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v31 = 1065353216;
  uint64_t v2 = *(void **)(a1[164] + 184);
  if (v2)
  {
    uint64_t v4 = a1;
    do
    {
      unint64_t v5 = v2[2];
      unint64_t v28 = v5;
      uint64_t v6 = v4[164];
      unint64_t v7 = (uint64_t *)(v6 + 24);
      int v8 = *(void **)(v6 + 24);
      if (v8)
      {
        unint64_t v9 = (uint64_t *)(v6 + 24);
        BOOL v10 = *(void **)(v6 + 24);
        do
        {
          unint64_t v11 = v10[4];
          BOOL v12 = v11 >= v5;
          if (v11 >= v5) {
            float v13 = v10;
          }
          else {
            float v13 = v10 + 1;
          }
          if (v12) {
            unint64_t v9 = v10;
          }
          BOOL v10 = (void *)*v13;
        }
        while (*v13);
        if (v9 != v7 && v5 >= v9[4])
        {
          uint64_t v14 = (float32x4_t *)v9[5];
          if (v14[7].f32[1] <= 0.0)
          {
            sub_20B059738((uint64_t)a1, v14->u64[1], (__n64 *)&v32);
            uint64_t v15 = 0;
            while (1)
            {
              int32x4_t v16 = vaddq_s32(*(int32x4_t *)&v4[2 * v15 + 112], v32);
              if ((v16.i32[0] & 0x80000000) == 0 && (v16.i32[1] & 0x80000000) == 0 && (v16.i32[2] & 0x80000000) == 0)
              {
                BOOL v17 = v16.i32[0] < *(_DWORD *)(v6 + 288) && v16.i32[1] < *(_DWORD *)(v6 + 292);
                if (v17 && v16.i32[2] < *(_DWORD *)(v6 + 296))
                {
                  unint64_t v19 = *(void *)(*(void *)(v6 + 144) + 8 * v16.u8[8]) | ((*(void *)(*(void *)(v6 + 120)
                                                                                           + 8 * v16.u8[5]) | *(void *)(*(void *)(v6 + 144) + 8 * v16.u8[9]) | *(void *)(*(void *)(v6 + 96) + 8 * v16.u8[1])) << 24) | *(void *)(*(void *)(v6 + 120) + 8 * v16.u8[4]) | *(void *)(*(void *)(v6 + 96) + 8 * v16.u8[0]);
                  unint64_t v20 = (uint64_t *)(v6 + 24);
                  BOOL v21 = v8;
                  do
                  {
                    unint64_t v22 = v21[4];
                    BOOL v23 = v22 >= v19;
                    if (v22 >= v19) {
                      unint64_t v24 = v21;
                    }
                    else {
                      unint64_t v24 = v21 + 1;
                    }
                    if (v23) {
                      unint64_t v20 = v21;
                    }
                    BOOL v21 = (void *)*v24;
                  }
                  while (*v24);
                  if (v20 != v7 && v19 >= v20[4] && *(float *)(v20[5] + 116) > 0.0) {
                    break;
                  }
                }
              }
              if (++v15 == 26)
              {
                sub_20B059B8C(*a2, v14, *(_DWORD *)(v6 + 424));
                sub_20B060F28((uint64_t **)(v4[164] + 16), v9);
                operator delete(v9);
                a1 = sub_20B05F5C0((uint64_t)&v29, &v28, &v28);
                break;
              }
            }
          }
        }
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
    uint64_t v25 = *((void *)&v30 + 1);
    for (uint64_t i = (void *)v30; i; uint64_t i = (void *)*i)
    {
      unint64_t v28 = i[2];
      sub_20B060E74((void *)(v4[164] + 168), &v28);
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  sub_20B05F1D0((uint64_t)&v29);
  return v25;
}

void sub_20B05AE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B05F1D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B05AE58(void *a1)
{
  v30.i32[2] = 0;
  v30.i64[0] = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v29 = 1065353216;
  float32x4_t v1 = *(void **)(a1[164] + 224);
  if (v1)
  {
    uint64_t v2 = a1;
    do
    {
      unint64_t v3 = v1[2];
      unint64_t v26 = v3;
      uint64_t v4 = v2[164];
      unint64_t v5 = (uint64_t *)(v4 + 24);
      uint64_t v6 = *(void **)(v4 + 24);
      if (v6)
      {
        unint64_t v7 = (uint64_t *)(v4 + 24);
        int v8 = *(void **)(v4 + 24);
        do
        {
          unint64_t v9 = v8[4];
          BOOL v10 = v9 >= v3;
          if (v9 >= v3) {
            unint64_t v11 = v8;
          }
          else {
            unint64_t v11 = v8 + 1;
          }
          if (v10) {
            unint64_t v7 = v8;
          }
          int v8 = (void *)*v11;
        }
        while (*v11);
        if (v7 != v5 && v3 >= v7[4])
        {
          uint64_t v12 = v7[5];
          if (*(float *)(v12 + 116) <= 0.0)
          {
            sub_20B059738((uint64_t)a1, *(void *)(v12 + 8), (__n64 *)&v30);
            uint64_t v13 = 0;
            while (1)
            {
              int32x4_t v14 = vaddq_s32(*(int32x4_t *)&v2[2 * v13 + 112], v30);
              if ((v14.i32[0] & 0x80000000) == 0 && (v14.i32[1] & 0x80000000) == 0 && (v14.i32[2] & 0x80000000) == 0)
              {
                BOOL v15 = v14.i32[0] < *(_DWORD *)(v4 + 288) && v14.i32[1] < *(_DWORD *)(v4 + 292);
                if (v15 && v14.i32[2] < *(_DWORD *)(v4 + 296))
                {
                  unint64_t v17 = *(void *)(*(void *)(v4 + 144) + 8 * v14.u8[8]) | ((*(void *)(*(void *)(v4 + 120)
                                                                                           + 8 * v14.u8[5]) | *(void *)(*(void *)(v4 + 144) + 8 * v14.u8[9]) | *(void *)(*(void *)(v4 + 96) + 8 * v14.u8[1])) << 24) | *(void *)(*(void *)(v4 + 120) + 8 * v14.u8[4]) | *(void *)(*(void *)(v4 + 96) + 8 * v14.u8[0]);
                  float32x4_t v18 = (uint64_t *)(v4 + 24);
                  unint64_t v19 = v6;
                  do
                  {
                    unint64_t v20 = v19[4];
                    BOOL v21 = v20 >= v17;
                    if (v20 >= v17) {
                      unint64_t v22 = v19;
                    }
                    else {
                      unint64_t v22 = v19 + 1;
                    }
                    if (v21) {
                      float32x4_t v18 = v19;
                    }
                    unint64_t v19 = (void *)*v22;
                  }
                  while (*v22);
                  if (v18 != v5 && v17 >= v18[4] && *(unsigned char *)(v18[5] + 192)) {
                    break;
                  }
                }
              }
              if (++v13 == 26)
              {
                sub_20B060F28((uint64_t **)(v4 + 16), v7);
                operator delete(v7);
                a1 = sub_20B05F5C0((uint64_t)&v27, &v26, &v26);
                break;
              }
            }
          }
        }
      }
      float32x4_t v1 = (void *)*v1;
    }
    while (v1);
    uint64_t v23 = *((void *)&v28 + 1);
    for (uint64_t i = (void *)v28; i; uint64_t i = (void *)*i)
    {
      unint64_t v26 = i[2];
      sub_20B060E74((void *)(v2[164] + 208), &v26);
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  sub_20B05F1D0((uint64_t)&v27);
  return v23;
}

void sub_20B05B080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B05F1D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B05B098(uint64_t result, float a2, float a3)
{
  uint64_t v4 = *(void *)(*(void *)(result + 80) + 1312);
  float v5 = *(float *)(v4 + 248) + *(float *)(v4 + 248);
  if (v5 < a2 || v5 < a3)
  {
    uint64_t v8 = result;
    unint64_t v77 = 0;
    *(uint64_t *)((char *)v76.i64 + 4) = 0;
    v76.i32[0] = 0;
    uint64_t v75 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    uint64_t v9 = sub_20B06076C((uint64_t)&v73, v4 + 208);
    long long v70 = 0u;
    long long v71 = 0u;
    uint64_t v72 = 1065353216;
    if (*((void *)&v74 + 1))
    {
      int v10 = 0;
      if (a2 >= a3) {
        float v11 = a2;
      }
      else {
        float v11 = a3;
      }
      float v12 = ceilf((float)(v11 - v5) / *(float *)(*(void *)(*(void *)(v8 + 80) + 1312) + 248));
      float v13 = v12 + v12;
      unsigned int v14 = v13;
      if (v13 <= 1) {
        unsigned int v14 = 1;
      }
      int v15 = v14 - 1;
      if (v13 >= 4295000000.0) {
        int v15 = -2;
      }
      int v62 = v15;
      __asm
      {
        FMOV            V1.4S, #1.0
        FMOV            V0.4S, #-1.0
      }
      float32x4_t v63 = _Q1;
      do
      {
        for (uint64_t i = (void *)v74; i; uint64_t i = (void *)*i)
        {
          uint64_t v21 = *(void *)(*(void *)(v8 + 80) + 1312);
          unint64_t v24 = *(void **)(v21 + 24);
          unint64_t v22 = (void *)(v21 + 24);
          uint64_t v23 = v24;
          if (v24)
          {
            unint64_t v25 = i[2];
            unint64_t v26 = v22;
            do
            {
              unint64_t v27 = v23[4];
              _CF = v27 >= v25;
              if (v27 >= v25) {
                uint64_t v29 = v23;
              }
              else {
                uint64_t v29 = v23 + 1;
              }
              if (_CF) {
                unint64_t v26 = v23;
              }
              uint64_t v23 = (void *)*v29;
            }
            while (*v29);
            if (v26 != v22 && v25 >= v26[4])
            {
              sub_20B059738(v9, *(void *)(v26[5] + 8), (__n64 *)&v76);
              for (uint64_t j = 0; j != 26; ++j)
              {
                uint64_t v31 = *(void *)(v8 + 80);
                int32x4_t v32 = vaddq_s32(*(int32x4_t *)(v31 + 16 * j + 896), v76);
                if ((v32.i32[0] & 0x80000000) == 0 && (v32.i32[1] & 0x80000000) == 0)
                {
                  int v33 = v32.i32[2];
                  if ((v32.i32[2] & 0x80000000) == 0)
                  {
                    uint64_t v34 = *(void *)(v31 + 1312);
                    BOOL v35 = v32.i32[0] < *(_DWORD *)(v34 + 288) && v32.i32[1] < *(_DWORD *)(v34 + 292);
                    if (v35 && v32.i32[2] < *(_DWORD *)(v34 + 296))
                    {
                      unint64_t v77 = *(void *)(*(void *)(v34 + 144) + 8 * v32.u8[8]) | ((*(void *)(*(void *)(v34 + 120)
                                                                                                + 8 * v32.u8[5]) | *(void *)(*(void *)(v34 + 144) + 8 * v32.u8[9]) | *(void *)(*(void *)(v34 + 96) + 8 * v32.u8[1])) << 24) | *(void *)(*(void *)(v34 + 120) + 8 * v32.u8[4]) | *(void *)(*(void *)(v34 + 96) + 8 * v32.u8[0]);
                      int32x4_t v65 = v32;
                      unint64_t v37 = (unint64_t)sub_20B05FD64((void *)(v34 + 168), &v77);
                      uint64_t v9 = (uint64_t)sub_20B05FD64((void *)(*(void *)(*(void *)(v8 + 80) + 1312) + 208), &v77);
                      if (!(v37 | v9))
                      {
                        uint64_t v38 = 0;
                        uint64_t v39 = 0;
                        uint64_t v40 = *(void *)(v8 + 80);
                        float32x2_t v41 = *(float32x4_t **)(v40 + 1312);
                        float v42 = 3.4028e38;
                        do
                        {
                          float32x4_t v43 = (float32x4_t)vaddq_s32(*(int32x4_t *)(v40 + 16 * v38 + 896), v65);
                          if ((v43.i32[0] & 0x80000000) == 0
                            && (v43.i32[1] & 0x80000000) == 0
                            && (v43.i32[2] & 0x80000000) == 0)
                          {
                            BOOL v44 = v43.i32[0] < v41[18].i32[0] && v43.i32[1] < v41[18].i32[1];
                            if (v44 && v43.i32[2] < v41[18].i32[2])
                            {
                              float v46 = (float32x4_t *)v41[1].i64[1];
                              if (v46)
                              {
                                uint64_t v9 = v41[6].i64[0];
                                unint64_t v47 = *(void *)(v41[9].i64[0] + 8 * v43.u8[8]) | ((*(void *)(v41[7].i64[1]
                                                                                                 + 8 * v43.u8[5]) | *(void *)(v41[9].i64[0] + 8 * v43.u8[9]) | *(void *)(v9 + 8 * v43.u8[1])) << 24) | *(void *)(v41[7].i64[1] + 8 * v43.u8[4]) | *(void *)(v9 + 8 * v43.u8[0]);
                                __int32 v48 = (float32x4_t *)((char *)v41 + 24);
                                do
                                {
                                  unint64_t v49 = v46[2].u64[0];
                                  BOOL v50 = v49 >= v47;
                                  if (v49 >= v47) {
                                    uint64_t v51 = (float32x4_t **)v46;
                                  }
                                  else {
                                    uint64_t v51 = (float32x4_t **)&v46->i64[1];
                                  }
                                  if (v50) {
                                    __int32 v48 = v46;
                                  }
                                  float v46 = *v51;
                                }
                                while (*v51);
                                if (v48 != (float32x4_t *)&v41[1].u32[2] && v47 >= v48[2].i64[0])
                                {
                                  float v52 = fabsf(*(float *)(v48[2].i64[1] + 116));
                                  if (v52 < v42)
                                  {
                                    float v42 = v52;
                                    uint64_t v39 = v48[2].i64[1];
                                  }
                                }
                              }
                            }
                          }
                          ++v38;
                        }
                        while (v38 != 18);
                        if (v39)
                        {
                          *(float32x2_t *)v43.f32 = vcvt_f32_s32(*(int32x2_t *)v65.i8);
                          v43.f32[2] = (float)v33;
                          float32x4_t v53 = vaddq_f32(v43, v63);
                          float v54 = v41[15].f32[2];
                          float32x4_t v55 = vmlaq_n_f32(v41[17], v53, v54);
                          v53.f32[0] = v54 * 0.5;
                          float32x4_t v64 = vsubq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0));
                          float v66 = v54;
                          v78[0] = v64;
                          float32x4_t v56 = (float32x4_t *)(v41[2].i64[1] + 224 * *(int *)(v39 + 144));
                          float32x4_t v69 = v56[1];
                          float32x4_t v68 = v56[3];
                          float32x4_t v67 = v56[2];
                          *(double *)v57.i64 = sub_20B057A60(&v69, &v68, &v67, v78);
                          float32x4_t v58 = vsubq_f32(v64, v57);
                          int32x4_t v59 = (int32x4_t)vmulq_f32(v58, v58);
                          float v60 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1)), (float32x4_t)vdupq_laneq_s32(v59, 2)).f32[0]);
                          if (v60 <= v42) {
                            float v61 = v66 + v42;
                          }
                          else {
                            float v61 = v60;
                          }
                          if (*(float *)(v39 + 116) >= 0.0)
                          {
                            if (v5 < a3 && v61 < a3) {
LABEL_76:
                            }
                              operator new();
                          }
                          else if (v5 < a2 && v61 < a2)
                          {
                            goto LABEL_76;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (v10 == v62) {
          break;
        }
        LODWORD(v75) = v72;
        sub_20B0607E4(&v73, (void *)v71, 0);
        ++v10;
        uint64_t v9 = (uint64_t)sub_20B060E0C(&v70);
      }
      while (*((void *)&v74 + 1));
    }
    sub_20B05F1D0((uint64_t)&v70);
    return sub_20B05F1D0((uint64_t)&v73);
  }
  return result;
}

void sub_20B05B670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t sub_20B05B690(float32x4_t **a1, float a2, float a3)
{
  float v5 = a1;
  unint64_t v95 = 0;
  *(uint64_t *)((char *)v94.i64 + 4) = 0;
  v94.i32[0] = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  uint64_t v93 = 1065353216;
  long long v88 = 0u;
  long long v89 = 0u;
  uint64_t v90 = 1065353216;
  long long v85 = 0u;
  long long v86 = 0u;
  uint64_t v87 = 1065353216;
  uint64_t v6 = *(void **)(a1[10][82].i64[0] + 224);
  if (!v6)
  {
    float32x2_t v41 = 0;
    float v40 = 1.0;
    goto LABEL_69;
  }
  do
  {
    unint64_t v7 = v6[2];
    unint64_t v84 = v7;
    uint64_t v8 = v5[10];
    uint64_t v9 = v8[82].i64[0];
    int v10 = (void *)(v9 + 24);
    float v11 = *(void **)(v9 + 24);
    if (v11)
    {
      float v12 = (void *)(v9 + 24);
      float v13 = *(void **)(v9 + 24);
      do
      {
        unint64_t v14 = v13[4];
        BOOL v15 = v14 >= v7;
        if (v14 >= v7) {
          int32x4_t v16 = v13;
        }
        else {
          int32x4_t v16 = v13 + 1;
        }
        if (v15) {
          float v12 = v13;
        }
        float v13 = (void *)*v16;
      }
      while (*v16);
      if (v12 != v10 && v7 >= v12[4])
      {
        uint64_t v17 = v12[5];
        if (!*(unsigned char *)(v17 + 201))
        {
          float v18 = *(float *)(v17 + 116);
          sub_20B059738((uint64_t)a1, *(void *)(v17 + 8), (__n64 *)&v94);
          float v19 = fabsf(v18);
          if (v18 >= 0.0)
          {
            if (v19 <= a3) {
              goto LABEL_14;
            }
            uint64_t v30 = 0;
            while (1)
            {
              int32x4_t v31 = vaddq_s32((int32x4_t)v8[v30 + 56], v94);
              if (v31.i32[0] < 0 || v31.i32[1] < 0 || v31.i32[2] < 0) {
                break;
              }
              BOOL v32 = v31.i32[0] < *(_DWORD *)(v9 + 288) && v31.i32[1] < *(_DWORD *)(v9 + 292);
              if (!v32 || v31.i32[2] >= *(_DWORD *)(v9 + 296)) {
                break;
              }
              unint64_t v34 = *(void *)(*(void *)(v9 + 144) + 8 * v31.u8[8]) | ((*(void *)(*(void *)(v9 + 120)
                                                                                       + 8 * v31.u8[5]) | *(void *)(*(void *)(v9 + 144) + 8 * v31.u8[9]) | *(void *)(*(void *)(v9 + 96) + 8 * v31.u8[1])) << 24) | *(void *)(*(void *)(v9 + 120) + 8 * v31.u8[4]) | *(void *)(*(void *)(v9 + 96) + 8 * v31.u8[0]);
              unint64_t v95 = v34;
              BOOL v35 = (void *)(v9 + 24);
              int32x4_t v36 = v11;
              do
              {
                unint64_t v37 = v36[4];
                BOOL v38 = v37 >= v34;
                if (v37 >= v34) {
                  uint64_t v39 = v36;
                }
                else {
                  uint64_t v39 = v36 + 1;
                }
                if (v38) {
                  BOOL v35 = v36;
                }
                int32x4_t v36 = (void *)*v39;
              }
              while (*v39);
              if (v35 == v10 || v34 < v35[4]) {
                break;
              }
              if (++v30 == 26) {
                goto LABEL_14;
              }
            }
          }
          else
          {
            if (v19 <= a2) {
              goto LABEL_14;
            }
            uint64_t v20 = 0;
            while (1)
            {
              int32x4_t v21 = vaddq_s32((int32x4_t)v8[v20 + 56], v94);
              if (v21.i32[0] < 0 || v21.i32[1] < 0 || v21.i32[2] < 0) {
                break;
              }
              BOOL v22 = v21.i32[0] < *(_DWORD *)(v9 + 288) && v21.i32[1] < *(_DWORD *)(v9 + 292);
              if (!v22 || v21.i32[2] >= *(_DWORD *)(v9 + 296)) {
                break;
              }
              unint64_t v24 = *(void *)(*(void *)(v9 + 144) + 8 * v21.u8[8]) | ((*(void *)(*(void *)(v9 + 120)
                                                                                       + 8 * v21.u8[5]) | *(void *)(*(void *)(v9 + 144) + 8 * v21.u8[9]) | *(void *)(*(void *)(v9 + 96) + 8 * v21.u8[1])) << 24) | *(void *)(*(void *)(v9 + 120) + 8 * v21.u8[4]) | *(void *)(*(void *)(v9 + 96) + 8 * v21.u8[0]);
              unint64_t v95 = v24;
              unint64_t v25 = (void *)(v9 + 24);
              unint64_t v26 = v11;
              do
              {
                unint64_t v27 = v26[4];
                BOOL v28 = v27 >= v24;
                if (v27 >= v24) {
                  uint64_t v29 = v26;
                }
                else {
                  uint64_t v29 = v26 + 1;
                }
                if (v28) {
                  unint64_t v25 = v26;
                }
                unint64_t v26 = (void *)*v29;
              }
              while (*v29);
              if (v25 == v10 || v24 < v25[4]) {
                break;
              }
              if (++v20 == 26) {
                goto LABEL_14;
              }
            }
          }
          a1 = (float32x4_t **)sub_20B05F5C0((uint64_t)&v85, &v84, &v84);
        }
      }
    }
LABEL_14:
    uint64_t v6 = (void *)*v6;
  }
  while (v6);
  float v40 = *(float *)&v87;
  float32x2_t v41 = (void *)v86;
LABEL_69:
  *(float *)&uint64_t v93 = v40;
  sub_20B0607E4(&v91, v41, 0);
  while (*((void *)&v92 + 1))
  {
    for (uint64_t i = (void *)v92; i; uint64_t i = (void *)*i)
    {
      uint64_t v44 = v5[10][82].i64[0];
      unint64_t v47 = *(void **)(v44 + 24);
      uint64_t v45 = (void *)(v44 + 24);
      float v46 = v47;
      if (v47)
      {
        unint64_t v48 = i[2];
        unint64_t v49 = v45;
        do
        {
          unint64_t v50 = v46[4];
          BOOL v51 = v50 >= v48;
          if (v50 >= v48) {
            float v52 = v46;
          }
          else {
            float v52 = v46 + 1;
          }
          if (v51) {
            unint64_t v49 = v46;
          }
          float v46 = (void *)*v52;
        }
        while (*v52);
        if (v49 != v45 && v48 >= v49[4])
        {
          sub_20B059738((uint64_t)v42, *(void *)(v49[5] + 8), (__n64 *)&v94);
          uint64_t v53 = 0;
          int32x4_t v83 = v94;
          do
          {
            float v54 = v5[10];
            int32x4_t v55 = vaddq_s32((int32x4_t)v54[v53 + 56], v83);
            if ((v55.i32[0] & 0x80000000) == 0 && (v55.i32[1] & 0x80000000) == 0 && (v55.i32[2] & 0x80000000) == 0)
            {
              uint64_t v56 = v54[82].i64[0];
              BOOL v57 = v55.i32[0] < *(_DWORD *)(v56 + 288) && v55.i32[1] < *(_DWORD *)(v56 + 292);
              if (v57 && v55.i32[2] < *(_DWORD *)(v56 + 296))
              {
                float v61 = *(void **)(v56 + 24);
                int32x4_t v59 = (void *)(v56 + 24);
                float v60 = v61;
                unint64_t v62 = *(void *)(v59[15] + 8 * v55.u8[8]) | ((*(void *)(v59[12] + 8 * v55.u8[5]) | *(void *)(v59[15] + 8 * v55.u8[9]) | *(void *)(v59[9] + 8 * v55.u8[1])) << 24) | *(void *)(v59[12] + 8 * v55.u8[4]) | *(void *)(v59[9] + 8 * v55.u8[0]);
                unint64_t v95 = v62;
                if (!v61) {
                  goto LABEL_106;
                }
                float32x4_t v63 = v59;
                do
                {
                  unint64_t v64 = v60[4];
                  BOOL v65 = v64 >= v62;
                  if (v64 >= v62) {
                    float v66 = v60;
                  }
                  else {
                    float v66 = v60 + 1;
                  }
                  if (v65) {
                    float32x4_t v63 = v60;
                  }
                  float v60 = (void *)*v66;
                }
                while (*v66);
                if (v63 == v59 || v62 < v63[4]) {
LABEL_106:
                }
                  float32x4_t v63 = v59;
                float v42 = sub_20B05FD64(&v85, &v95);
                if (v63 != (void *)(v5[10][82].i64[0] + 24) && v42 == 0)
                {
                  uint64_t v68 = v63[5];
                  if (!*(unsigned char *)(v68 + 201) && !*(unsigned char *)(v68 + 192))
                  {
                    float v69 = *(float *)(v68 + 116);
                    float v70 = fabsf(v69);
                    BOOL v71 = v70 <= a2;
                    if (v69 >= 0.0) {
                      BOOL v71 = v70 <= a3;
                    }
                    if (!v71)
                    {
                      sub_20B05F5C0((uint64_t)&v88, &v95, &v95);
                      float v42 = sub_20B05F5C0((uint64_t)&v85, &v95, &v95);
                    }
                  }
                }
              }
            }
            ++v53;
          }
          while (v53 != 26);
        }
      }
    }
    LODWORD(v93) = v90;
    sub_20B0607E4(&v91, (void *)v89, 0);
    float v42 = sub_20B060E0C(&v88);
  }
  for (uint64_t j = (void *)v86; j; uint64_t j = (void *)*j)
  {
    unint64_t v73 = j[2];
    unint64_t v84 = v73;
    uint64_t v74 = v5[10][82].i64[0];
    unint64_t v77 = *(void **)(v74 + 24);
    uint64_t v75 = (void *)(v74 + 24);
    int32x4_t v76 = v77;
    if (v77)
    {
      int32x4_t v78 = v75;
      do
      {
        unint64_t v79 = v76[4];
        BOOL v80 = v79 >= v73;
        if (v79 >= v73) {
          uint64_t v81 = v76;
        }
        else {
          uint64_t v81 = v76 + 1;
        }
        if (v80) {
          int32x4_t v78 = v76;
        }
        int32x4_t v76 = (void *)*v81;
      }
      while (*v81);
      if (v78 != v75 && v73 >= v78[4])
      {
        sub_20B059B8C(*v5, (float32x4_t *)v78[5], *(_DWORD *)(v5[10][82].i64[0] + 424));
        sub_20B060E74((void *)(v5[10][82].i64[0] + 208), &v84);
        sub_20B060EAC(v5[10][82].i64[0] + 16, &v84);
      }
    }
  }
  sub_20B05F1D0((uint64_t)&v85);
  sub_20B05F1D0((uint64_t)&v88);
  return sub_20B05F1D0((uint64_t)&v91);
}

void sub_20B05BC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  sub_20B05F1D0((uint64_t)va);
  sub_20B05F1D0((uint64_t)va1);
  sub_20B05F1D0((uint64_t)va2);
  _Unwind_Resume(a1);
}

id sub_20B05BCB8(uint64_t *a1)
{
  v112[1] = *MEMORY[0x263EF8340];
  if (*a1)
  {
    sub_20B05C430(a1[10]);
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    __p = 0;
    unint64_t v107 = 0;
    uint64_t v108 = 0;
    sub_20B05C7DC(*a1, (char **)&v109);
    sub_20B05CC5C(*a1, (char **)&__p);
    uint64_t v2 = objc_alloc_init(MDLMeshBufferAllocatorDefault);
    uint64_t v4 = __p;
    unint64_t v3 = v107;
    float32x4_t v103 = v2;
    id v5 = objc_alloc(MEMORY[0x263EFF8F8]);
    float32x4_t v102 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v5, v6, (uint64_t)__p, v3 - v4, 0);
    float32x4_t v105 = objc_msgSend_newBufferWithData_type_(v2, v7, (uint64_t)v102, 2);
    if (objc_msgSend_conformsToProtocol_(v105, v8, (uint64_t)&unk_26BF5ED88))
    {
      id v10 = v105;
      uint64_t v12 = objc_msgSend_stringByAppendingString_(@"Mesh", v11, @"-Indices");
      objc_msgSend_setName_(v10, v13, (uint64_t)v12);
    }
    float32x4_t v104 = objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x263EFF8F8], v9, (uint64_t)v109, v110 - (unsigned char *)v109, 0);
    unint64_t v14 = objc_opt_new();
    uint64_t v17 = objc_msgSend_attributes(v14, v15, v16);
    uint64_t v19 = objc_msgSend_objectAtIndexedSubscript_(v17, v18, 0);
    objc_msgSend_setName_(v19, v20, @"position");

    uint64_t v23 = objc_msgSend_attributes(v14, v21, v22);
    unint64_t v25 = objc_msgSend_objectAtIndexedSubscript_(v23, v24, 0);
    objc_msgSend_setFormat_(v25, v26, 786435);

    uint64_t v29 = objc_msgSend_attributes(v14, v27, v28);
    int32x4_t v31 = objc_msgSend_objectAtIndexedSubscript_(v29, v30, 0);
    objc_msgSend_setOffset_(v31, v32, 0);

    BOOL v35 = objc_msgSend_attributes(v14, v33, v34);
    unint64_t v37 = objc_msgSend_objectAtIndexedSubscript_(v35, v36, 0);
    objc_msgSend_setBufferIndex_(v37, v38, 0);

    float32x2_t v41 = objc_msgSend_attributes(v14, v39, v40);
    float32x4_t v43 = objc_msgSend_objectAtIndexedSubscript_(v41, v42, 1);
    objc_msgSend_setName_(v43, v44, @"normal");

    unint64_t v47 = objc_msgSend_attributes(v14, v45, v46);
    unint64_t v49 = objc_msgSend_objectAtIndexedSubscript_(v47, v48, 1);
    objc_msgSend_setFormat_(v49, v50, 786435);

    uint64_t v53 = objc_msgSend_attributes(v14, v51, v52);
    int32x4_t v55 = objc_msgSend_objectAtIndexedSubscript_(v53, v54, 1);
    objc_msgSend_setOffset_(v55, v56, 12);

    int32x4_t v59 = objc_msgSend_attributes(v14, v57, v58);
    float v61 = objc_msgSend_objectAtIndexedSubscript_(v59, v60, 1);
    objc_msgSend_setBufferIndex_(v61, v62, 0);

    BOOL v65 = objc_msgSend_layouts(v14, v63, v64);
    float32x4_t v67 = objc_msgSend_objectAtIndexedSubscript_(v65, v66, 0);
    objc_msgSend_setStride_(v67, v68, 24);

    float v70 = objc_msgSend_newBufferWithData_type_(v2, v69, (uint64_t)v104, 1);
    if (objc_msgSend_conformsToProtocol_(v70, v71, (uint64_t)&unk_26BF5ED88))
    {
      id v73 = v70;
      uint64_t v75 = objc_msgSend_stringWithFormat_(NSString, v74, @"%@-%@", @"Mesh", @"position");
      objc_msgSend_setName_(v73, v76, (uint64_t)v75);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267690C88, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267690C88))
    {
      float64x2_t v99 = [MDLMaterial alloc];
      float64x2_t v100 = objc_opt_new();
      qword_267690C80 = objc_msgSend_initWithName_scatteringFunction_(v99, v101, @"Octree material", v100);

      __cxa_guard_release(&qword_267690C88);
    }
    unint64_t v77 = objc_msgSend_propertyWithSemantic_((void *)qword_267690C80, v72, 2);
    objc_msgSend_setFloatValue_(v77, v78, v79, 0.0);
    uint64_t v81 = objc_msgSend_propertyWithSemantic_((void *)qword_267690C80, v80, 6);

    LODWORD(v82) = 1.0;
    objc_msgSend_setFloatValue_(v81, v83, v84, v82);
    long long v85 = [MDLSubmesh alloc];
    uint64_t v87 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v85, v86, (uint64_t)v105, (v107 - (unsigned char *)__p) >> 2, 32, 2, qword_267690C80);
    long long v89 = v109;
    long long v88 = v110;
    uint64_t v90 = [MDLMesh alloc];
    v112[0] = v87;
    long long v92 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v91, (uint64_t)v112, 1);
    int32x4_t v94 = objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v90, v93, (uint64_t)v70, ((v88 - v89) >> 2) / 6uLL, v14, v92);

    objc_msgSend_setName_(v94, v95, @"Mesh");
    LODWORD(v96) = 1045220557;
    objc_msgSend_addNormalsWithAttributeNamed_creaseThreshold_(v94, v97, @"normal", v96);

    if (__p)
    {
      unint64_t v107 = __p;
      operator delete(__p);
    }
    if (v109)
    {
      uint64_t v110 = v109;
      operator delete(v109);
    }
  }
  else
  {
    int32x4_t v94 = 0;
  }

  return v94;
}

void sub_20B05C238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  __cxa_guard_abort(&qword_267690C88);
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_20B05C430(uint64_t a1)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  float32x4_t v1 = *(void **)(*(void *)(a1 + 1312) + 184);
  if (v1)
  {
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v50 = _Q0;
    do
    {
      uint64_t v6 = *(void *)(a1 + 1312);
      uint64_t v9 = *(void **)(v6 + 24);
      unint64_t v7 = (void *)(v6 + 24);
      uint64_t v8 = v9;
      if (v9)
      {
        unint64_t v10 = v1[2];
        uint64_t v11 = v7;
        do
        {
          unint64_t v12 = v8[4];
          _CF = v12 >= v10;
          if (v12 >= v10) {
            unint64_t v14 = v8;
          }
          else {
            unint64_t v14 = v8 + 1;
          }
          if (_CF) {
            uint64_t v11 = v8;
          }
          uint64_t v8 = (void *)*v14;
        }
        while (*v14);
        if (v11 != v7 && v10 >= v11[4])
        {
          uint64_t v15 = v11[5];
          uint64_t v16 = 0;
          unsigned int v17 = 0;
          memset(v57, 0, sizeof(v57));
          do
          {
            float v18 = sub_20B05CDA4(a1, v15, v16);
            *((float *)v57 + v16) = v18;
            v17 |= (v18 < 0.0) << v16++;
          }
          while (v16 != 8);
          if (v17 && v17 != 255)
          {
            uint64_t v22 = 0;
            int v23 = 0;
            memset(v56, 0, sizeof(v56));
            memset(v55, 0, sizeof(v55));
            float32x4_t v53 = 0uLL;
            float32x4_t v52 = 0u;
            do
            {
              unsigned int v24 = byte_20B1E6840[v22];
              unsigned int v25 = byte_20B1E6840[v22 + 1];
              if ((((v17 >> v24) | (v17 >> v25)) & 1) != 0 && (((v17 >> v24) & 1) == 0 || ((v17 >> v25) & 1) == 0))
              {
                v19.i32[0] = 0;
                int32x4_t v27 = *(int32x4_t *)(v15 + 16);
                float32x4_t v26 = *(float32x4_t *)(v15 + 32);
                v28.i64[0] = 0x3F0000003F000000;
                v28.i64[1] = 0x3F0000003F000000;
                float32x4_t v29 = vmulq_f32(vaddq_f32((float32x4_t)v27, v26), v28);
                int8x16_t v30 = (int8x16_t)vsubq_f32((float32x4_t)v27, v26);
                v27.i32[0] = v24 & 4;
                v28.f32[0] = 0.5 * *(float *)v30.i32;
                *(float *)v20.i32 = v29.f32[0] + (float)(0.5 * *(float *)v30.i32);
                v20.i32[1] = v29.i32[1];
                v20.i32[2] = v29.i32[2];
                *(float *)v21.i32 = v29.f32[0] - (float)(0.5 * *(float *)v30.i32);
                v21.i32[1] = v29.i32[1];
                v21.i32[2] = v29.i32[2];
                int8x16_t v31 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v27, v19), 0), v21, v20);
                *(float *)v30.i32 = -(float)(*(float *)v30.i32 * 0.5);
                int8x8_t v32 = (int8x8_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 0);
                *(int32x2_t *)v29.f32 = vdup_lane_s32(*(int32x2_t *)v28.f32, 0);
                *(float32x2_t *)v30.i8 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v24), (int8x8_t)0x100000002)), v32, *(int8x8_t *)v29.f32));
                int32x4_t v33 = (int32x4_t)vextq_s8(v31, v31, 4uLL);
                float32x4_t v34 = (float32x4_t)vextq_s8((int8x16_t)v33, v30, 0xCuLL);
                v33.i32[0] = v25 & 4;
                int8x16_t v35 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v33, v19), 0), v21, v20);
                *(float32x2_t *)v33.i8 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v25), (int8x8_t)0x100000002)), v32, *(int8x8_t *)v29.f32));
                float32x4_t v36 = vmlaq_n_f32(v34, vsubq_f32((float32x4_t)vextq_s8(vextq_s8(v35, v35, 4uLL), (int8x16_t)v33, 0xCuLL), v34), *((float *)v57 + byte_20B1E6840[v22])/ (float)(*((float *)v57 + byte_20B1E6840[v22]) - *((float *)v57 + byte_20B1E6840[v22 + 1])));
                float32x4_t v37 = v36;
                v37.i32[3] = 0;
                float32x4_t v51 = v37;
                BOOL v38 = (float32x4_t *)(*(void *)(*(void *)(a1 + 1312) + 40) + 224 * *(int *)(v15 + 144));
                *(__n64 *)v39.f32 = sub_20B199C5C(v38, v36);
                float32x4_t v40 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v38[4], v39.f32[0]), v38[5], *(float32x2_t *)v39.f32, 1), v38[6], v39, 2);
                int32x4_t v41 = (int32x4_t)vmulq_f32(v40, v40);
                int32x4_t v19 = vdupq_laneq_s32(v41, 2);
                v41.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1)), *(float32x2_t *)v19.i8).u32[0];
                *(float32x2_t *)v19.i8 = vrsqrte_f32((float32x2_t)v41.u32[0]);
                float32x4_t v42 = vmulq_n_f32(v40, vmul_f32(vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v19.i8)), *(float32x2_t *)v19.i8).f32[0]);
                float32x4_t v52 = vaddq_f32(v42, v52);
                v42.i32[3] = 0;
                v56[v23] = v51;
                v55[v23++] = (int32x4_t)v42;
              }
              v22 += 2;
            }
            while (v22 != 24);
            *(double *)v43.i64 = sub_20B04EE10(v56, v55, v23, &v54, &v53);
            if (v43.f32[0] < *(float *)(v15 + 32)
              || v43.f32[0] > *(float *)(v15 + 16)
              || v43.f32[1] < *(float *)(v15 + 36)
              || v43.f32[1] > *(float *)(v15 + 20)
              || v43.f32[2] < *(float *)(v15 + 40)
              || v43.f32[2] > *(float *)(v15 + 24))
            {
              float32x4_t v49 = vmulq_f32(v53, vdivq_f32(v50, (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3)));
              v49.i32[3] = v43.i32[3];
              float32x4_t v43 = v49;
            }
            *(unsigned char *)(v15 + 224) = 1;
            *(float32x4_t *)(v15 + 208) = v43;
            *(unsigned char *)(v15 + 225) = v17;
            *(float32x4_t *)(v15 + 240) = v52;
          }
        }
      }
      float32x4_t v1 = (void *)*v1;
    }
    while (v1);
  }
}

void sub_20B05C7DC(uint64_t a1, char **a2)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 224)) {
      goto LABEL_6;
    }
    for (uint64_t i = 0; i != 64; i += 8)
      sub_20B05C7DC(*(void *)(a1 + 48 + i), a2);
    if (*(unsigned char *)(a1 + 224))
    {
LABEL_6:
      id v5 = *a2;
      uint64_t v6 = a2[1];
      unint64_t v7 = (v6 - *a2) >> 2;
      *(void *)(a1 + 256) = v7 / 6;
      int v8 = *(_DWORD *)(a1 + 208);
      unint64_t v10 = a2 + 2;
      uint64_t v9 = a2[2];
      if (v6 >= v9)
      {
        unint64_t v12 = v7 + 1;
        if ((v7 + 1) >> 62) {
          goto LABEL_104;
        }
        uint64_t v13 = v9 - v5;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_20B05D1AC((uint64_t)(a2 + 2), v14);
          id v5 = *a2;
          uint64_t v6 = a2[1];
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v15[4 * v7];
        uint64_t v9 = &v15[4 * v14];
        *(_DWORD *)uint64_t v16 = v8;
        uint64_t v11 = v16 + 4;
        while (v6 != v5)
        {
          int v17 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *a2 = v16;
        a2[1] = v11;
        a2[2] = v9;
        if (v5)
        {
          operator delete(v5);
          uint64_t v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v6 = v8;
        uint64_t v11 = v6 + 4;
      }
      a2[1] = v11;
      int v18 = *(_DWORD *)(a1 + 212);
      if (v11 >= v9)
      {
        int8x16_t v20 = *a2;
        uint64_t v21 = (v11 - *a2) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          goto LABEL_104;
        }
        uint64_t v23 = v9 - v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          unsigned int v25 = (char *)sub_20B05D1AC((uint64_t)(a2 + 2), v24);
          int8x16_t v20 = *a2;
          uint64_t v11 = a2[1];
        }
        else
        {
          unsigned int v25 = 0;
        }
        float32x4_t v26 = &v25[4 * v21];
        uint64_t v9 = &v25[4 * v24];
        *(_DWORD *)float32x4_t v26 = v18;
        int32x4_t v19 = v26 + 4;
        while (v11 != v20)
        {
          int v27 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        *a2 = v26;
        a2[1] = v19;
        a2[2] = v9;
        if (v20)
        {
          operator delete(v20);
          uint64_t v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v11 = v18;
        int32x4_t v19 = v11 + 4;
      }
      a2[1] = v19;
      int v28 = *(_DWORD *)(a1 + 216);
      if (v19 >= v9)
      {
        int8x16_t v30 = *a2;
        uint64_t v31 = (v19 - *a2) >> 2;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62) {
          goto LABEL_104;
        }
        uint64_t v33 = v9 - v30;
        if (v33 >> 1 > v32) {
          unint64_t v32 = v33 >> 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        if (v34)
        {
          int8x16_t v35 = (char *)sub_20B05D1AC((uint64_t)(a2 + 2), v34);
          int8x16_t v30 = *a2;
          int32x4_t v19 = a2[1];
        }
        else
        {
          int8x16_t v35 = 0;
        }
        float32x4_t v36 = &v35[4 * v31];
        uint64_t v9 = &v35[4 * v34];
        *(_DWORD *)float32x4_t v36 = v28;
        float32x4_t v29 = v36 + 4;
        while (v19 != v30)
        {
          int v37 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v36 - 1) = v37;
          v36 -= 4;
        }
        *a2 = v36;
        a2[1] = v29;
        a2[2] = v9;
        if (v30)
        {
          operator delete(v30);
          uint64_t v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)int32x4_t v19 = v28;
        float32x4_t v29 = v19 + 4;
      }
      a2[1] = v29;
      int v38 = *(_DWORD *)(a1 + 240);
      if (v29 >= v9)
      {
        float32x4_t v40 = *a2;
        uint64_t v41 = (v29 - *a2) >> 2;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62) {
          goto LABEL_104;
        }
        uint64_t v43 = v9 - v40;
        if (v43 >> 1 > v42) {
          unint64_t v42 = v43 >> 1;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          uint64_t v45 = (char *)sub_20B05D1AC((uint64_t)(a2 + 2), v44);
          float32x4_t v40 = *a2;
          float32x4_t v29 = a2[1];
        }
        else
        {
          uint64_t v45 = 0;
        }
        uint64_t v46 = &v45[4 * v41];
        uint64_t v9 = &v45[4 * v44];
        *(_DWORD *)uint64_t v46 = v38;
        float32x4_t v39 = v46 + 4;
        while (v29 != v40)
        {
          int v47 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *((_DWORD *)v46 - 1) = v47;
          v46 -= 4;
        }
        *a2 = v46;
        a2[1] = v39;
        a2[2] = v9;
        if (v40)
        {
          operator delete(v40);
          uint64_t v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)float32x4_t v29 = v38;
        float32x4_t v39 = v29 + 4;
      }
      a2[1] = v39;
      int v48 = *(_DWORD *)(a1 + 244);
      if (v39 >= v9)
      {
        float32x4_t v50 = *a2;
        uint64_t v51 = (v39 - *a2) >> 2;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          goto LABEL_104;
        }
        uint64_t v53 = v9 - v50;
        if (v53 >> 1 > v52) {
          unint64_t v52 = v53 >> 1;
        }
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v52;
        }
        if (v54)
        {
          int32x4_t v55 = (char *)sub_20B05D1AC((uint64_t)(a2 + 2), v54);
          float32x4_t v50 = *a2;
          float32x4_t v39 = a2[1];
        }
        else
        {
          int32x4_t v55 = 0;
        }
        uint64_t v56 = &v55[4 * v51];
        uint64_t v9 = &v55[4 * v54];
        *(_DWORD *)uint64_t v56 = v48;
        float32x4_t v49 = v56 + 4;
        while (v39 != v50)
        {
          int v57 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v56 - 1) = v57;
          v56 -= 4;
        }
        *a2 = v56;
        a2[1] = v49;
        a2[2] = v9;
        if (v50)
        {
          operator delete(v50);
          uint64_t v9 = *v10;
        }
      }
      else
      {
        *(_DWORD *)float32x4_t v39 = v48;
        float32x4_t v49 = v39 + 4;
      }
      a2[1] = v49;
      int v58 = *(_DWORD *)(a1 + 248);
      if (v49 < v9)
      {
        *(_DWORD *)float32x4_t v49 = v58;
        int32x4_t v59 = v49 + 4;
LABEL_102:
        a2[1] = v59;
        return;
      }
      float v60 = *a2;
      uint64_t v61 = (v49 - *a2) >> 2;
      unint64_t v62 = v61 + 1;
      if (!((unint64_t)(v61 + 1) >> 62))
      {
        uint64_t v63 = v9 - v60;
        if (v63 >> 1 > v62) {
          unint64_t v62 = v63 >> 1;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v64 = v62;
        }
        if (v64)
        {
          BOOL v65 = (char *)sub_20B05D1AC((uint64_t)(a2 + 2), v64);
          float v60 = *a2;
          float32x4_t v49 = a2[1];
        }
        else
        {
          BOOL v65 = 0;
        }
        float v66 = &v65[4 * v61];
        float32x4_t v67 = &v65[4 * v64];
        *(_DWORD *)float v66 = v58;
        int32x4_t v59 = v66 + 4;
        while (v49 != v60)
        {
          int v68 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *((_DWORD *)v66 - 1) = v68;
          v66 -= 4;
        }
        *a2 = v66;
        a2[1] = v59;
        a2[2] = v67;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_102;
      }
LABEL_104:
      sub_20B05D0BC();
    }
  }
}

void sub_20B05CC5C(uint64_t a1, char **a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (a1 && !*(unsigned char *)(a1 + 224))
  {
    for (uint64_t i = 0; i != 64; i += 8)
      sub_20B05CC5C(*(void *)(a1 + 48 + i), a2);
    for (uint64_t j = 0; j != 144; j += 12)
    {
      uint64_t v6 = *(void *)(a1 + 48 + 8 * *(int *)((char *)&unk_20B1E6858 + j + 4));
      *(void *)&v10[0] = *(void *)(a1 + 48 + 8 * *(int *)((char *)&unk_20B1E6858 + j));
      *((void *)&v10[0] + 1) = v6;
      sub_20B05D7C4(v10, *(_DWORD *)((char *)&unk_20B1E6858 + j + 8), a2);
    }
    for (uint64_t k = 0; k != 6; ++k)
    {
      uint64_t v8 = 0;
      memset(v10, 0, sizeof(v10));
      long long v9 = *(_OWORD *)((char *)&unk_20B1E68E8 + 20 * k);
      do
      {
        *((void *)v10 + v8) = *(void *)(a1 + 8 * *((int *)&v10[-1] + v8) + 48);
        ++v8;
      }
      while (v8 != 4);
      sub_20B05D980(v10, *((_DWORD *)&unk_20B1E68E8 + 5 * k + 4), a2);
    }
  }
}

float sub_20B05CDA4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  v21.i32[2] = 0;
  v21.i64[0] = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  float v25 = 0.0;
  uint64_t v24 = 0;
  float v26 = *(float *)(a2 + 116);
  sub_20B059738(a1, *(void *)(a2 + 8), (__n64 *)&v21);
  uint64_t v5 = 0;
  int32x4_t v6 = v21;
  do
  {
    int32x4_t v7 = vaddq_s32(*(int32x4_t *)(a1 + 112 * a3 + 16 * v5), v6);
    if (v7.i32[0] < 0 || v7.i32[1] < 0 || v7.i32[2] < 0) {
      goto LABEL_24;
    }
    uint64_t v8 = *(void *)(a1 + 1312);
    BOOL v9 = v7.i32[0] < *(_DWORD *)(v8 + 288) && v7.i32[1] < *(_DWORD *)(v8 + 292);
    if (!v9 || v7.i32[2] >= *(_DWORD *)(v8 + 296)) {
      goto LABEL_24;
    }
    uint64_t v13 = *(void **)(v8 + 24);
    uint64_t v11 = (void *)(v8 + 24);
    unint64_t v12 = v13;
    if (!v13) {
      goto LABEL_24;
    }
    unint64_t v14 = *(void *)(v11[15] + 8 * v7.u8[8]) | ((*(void *)(v11[12] + 8 * v7.u8[5]) | *(void *)(v11[15] + 8 * v7.u8[9]) | *(void *)(v11[9] + 8 * v7.u8[1])) << 24) | *(void *)(v11[12] + 8 * v7.u8[4]) | *(void *)(v11[9] + 8 * v7.u8[0]);
    uint64_t v15 = v11;
    do
    {
      unint64_t v16 = v12[4];
      BOOL v17 = v16 >= v14;
      if (v16 >= v14) {
        int v18 = v12;
      }
      else {
        int v18 = v12 + 1;
      }
      if (v17) {
        uint64_t v15 = v12;
      }
      unint64_t v12 = (void *)*v18;
    }
    while (*v18);
    if (v15 == v11 || v14 < v15[4]) {
LABEL_24:
    }
      *((_DWORD *)&v22 + v5) = 0;
    else {
      *((_DWORD *)&v22 + v5) = *(_DWORD *)(v15[5] + 116);
    }
    ++v5;
  }
  while (v5 != 7);
  float v19 = (float)(*(float *)&v22 + (float)((float)(*((float *)&v22 + 1) - *(float *)&v22) * 0.5))
      + (float)((float)((float)(*(float *)&v23
                              - (float)(*(float *)&v22 + (float)((float)(*((float *)&v22 + 1) - *(float *)&v22) * 0.5)))
                      + (float)((float)(*((float *)&v23 + 1) - *(float *)&v23) * 0.5))
              * 0.5);
  return v19
       + (float)((float)((float)((float)(*(float *)&v24 + (float)((float)(*((float *)&v24 + 1) - *(float *)&v24) * 0.5))
                               - v19)
                       + (float)((float)((float)(v25 + (float)((float)(v26 - v25) * 0.5))
                                       - (float)(*(float *)&v24
                                               + (float)((float)(*((float *)&v24 + 1) - *(float *)&v24) * 0.5)))
                               * 0.5))
               * 0.5);
}

void sub_20B05CF80(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    int32x4_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_20B05D0BC();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      unint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_20B05D0BC()
{
}

void sub_20B05D0D4(void *a1)
{
}

void sub_20B05D0E8(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20B05D144(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_263FFCBA0, MEMORY[0x263F8C060]);
}

void sub_20B05D130(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20B05D144(std::logic_error *a1, const char *a2)
{
  __n64 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_20B05D178()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  float32x4_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *sub_20B05D1AC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_20B05D178();
  }
  return operator new(4 * a2);
}

uint64_t sub_20B05D1E4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = -1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_20B05F138(a1 + 64, a2);
  sub_20B0DAE10(a1 + 96, v3);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 376) = 1065353216;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_DWORD *)(a1 + 416) = 1065353216;
  return a1;
}

void sub_20B05D290(_Unwind_Exception *a1)
{
  unint64_t v6 = v3;
  sub_20B05EFBC(v6);
  unint64_t v8 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 48) = v8;
    operator delete(v8);
  }
  sub_20B05D2CC(v2, *v4);
  _Unwind_Resume(a1);
}

void sub_20B05D2CC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20B05D2CC(a1, *a2);
    sub_20B05D2CC(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_20B05D320(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492) {
    unint64_t v9 = 0x124924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    size_t v10 = (char *)sub_20B05D5E0(v7, v9);
  }
  else {
    size_t v10 = 0;
  }
  __p = v10;
  unint64_t v14 = &v10[224 * v4];
  unint64_t v16 = &v10[224 * v9];
  sub_20B05D4BC((uint64_t)v14, a2);
  char v15 = v14 + 224;
  sub_20B05D558(a1, &__p);
  uint64_t v11 = a1[1];
  if (v15 != v14) {
    v15 += -224
  }
         - 224 * ((((unint64_t)(v15 - v14 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_20B05D468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B05D4BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  uint64_t v3 = 64;
  do
  {
    uint64_t v4 = (_OWORD *)(a1 + v3);
    *(v4 - 3) = *(_OWORD *)(a2 + v3 - 48);
    *uint64_t v4 = *(_OWORD *)(a2 + v3);
    uint64_t v5 = a1 + v2;
    *(void *)(v5 + 176) = *(void *)(a2 + v2 + 176);
    double result = *(double *)(a2 + v2 + 200);
    *(double *)(v5 + 200) = result;
    v2 += 8;
    v3 += 16;
  }
  while (v2 != 24);
  return result;
}

void sub_20B05D558(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 224;
    sub_20B05D4BC(v6 - 224, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *sub_20B05D5E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    sub_20B05D178();
  }
  return operator new(224 * a2);
}

uint64_t *sub_20B05D62C(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            size_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              _OWORD v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_20B05D7C4(void *a1, int a2, char **a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*a1)
  {
    uint64_t v4 = a1[1];
    if (v4)
    {
      if (!*(unsigned char *)(*a1 + 224) || !*(unsigned char *)(v4 + 224))
      {
        for (uint64_t i = 0; i != 4; ++i)
        {
          uint64_t v8 = 0;
          v18[0] = 0uLL;
          *(void *)&long long v17 = *(void *)((char *)&unk_20B1E6960 + 48 * a2 + 12 * i);
          char v9 = 1;
          do
          {
            char v10 = v9;
            uint64_t v11 = a1[v8];
            if (!*(unsigned char *)(v11 + 224)) {
              uint64_t v11 = *(void *)(v11 + 8 * *((int *)&v18[-1] + v8) + 48);
            }
            char v9 = 0;
            *((void *)v18 + v8) = v11;
            uint64_t v8 = 1;
          }
          while ((v10 & 1) != 0);
          sub_20B05D7C4(v18, *((unsigned int *)&unk_20B1E6960 + 12 * a2 + 3 * i + 2), a3);
        }
        for (uint64_t j = 0; j != 4; ++j)
        {
          uint64_t v13 = 0;
          memset(v18, 0, sizeof(v18));
          unint64_t v14 = &dword_20B1E6A10[24 * a2 + 6 * j];
          long long v17 = *(_OWORD *)(v14 + 1);
          char v15 = (char *)&unk_20B1E69F0 + 16 * *v14;
          do
          {
            uint64_t v16 = a1[*(int *)&v15[4 * v13]];
            if (!*(unsigned char *)(v16 + 224)) {
              uint64_t v16 = *(void *)(v16 + 8 * *((int *)&v18[-1] + v13) + 48);
            }
            *((void *)v18 + v13++) = v16;
          }
          while (v13 != 4);
          sub_20B05D980(v18, dword_20B1E6A10[24 * a2 + 5 + 6 * j], a3);
        }
      }
    }
  }
}

void sub_20B05D980(void *a1, int a2, char **a3)
{
  uint64_t v139 = *MEMORY[0x263EF8340];
  if (*a1)
  {
    uint64_t v4 = a1[1];
    if (v4)
    {
      uint64_t v5 = a1[2];
      if (v5)
      {
        uint64_t v6 = a1[3];
        if (v6)
        {
          if (*(unsigned char *)(*a1 + 224) && *(unsigned char *)(v4 + 224) && *(unsigned char *)(v5 + 224) && *(unsigned char *)(v6 + 224))
          {
            uint64_t v8 = 0;
            char v9 = 0;
            *(void *)&v138[0] = -1;
            *((void *)&v138[0] + 1) = -1;
            int v10 = 0x7FFFFFFF;
            do
            {
              uint64_t v11 = a1[v8];
              float v12 = *(float *)(v11 + 16) - *(float *)(v11 + 32);
              if (v12 < (float)v10)
              {
                char v9 = *(unsigned __int8 *)(v11 + 225) >> byte_20B1E6840[2 * dword_20B1E6BA8[4 * a2 + v8]];
                int v10 = (int)v12;
              }
              *((_DWORD *)v138 + v8++) = *(void *)(v11 + 256);
            }
            while (v8 != 4);
            int v13 = v138[0];
            char v15 = a3 + 2;
            unint64_t v14 = a3[2];
            uint64_t v16 = a3[1];
            if (v9)
            {
              if (v16 >= v14)
              {
                float v25 = *a3;
                uint64_t v26 = (v16 - *a3) >> 2;
                unint64_t v27 = v26 + 1;
                if ((unint64_t)(v26 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v28 = v14 - v25;
                if (v28 >> 1 > v27) {
                  unint64_t v27 = v28 >> 1;
                }
                if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v29 = v27;
                }
                if (v29)
                {
                  int8x16_t v30 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v29);
                  float v25 = *a3;
                  uint64_t v16 = a3[1];
                }
                else
                {
                  int8x16_t v30 = 0;
                }
                int v37 = &v30[4 * v26];
                unint64_t v14 = &v30[4 * v29];
                *(_DWORD *)int v37 = v13;
                long long v17 = v37 + 4;
                while (v16 != v25)
                {
                  int v38 = *((_DWORD *)v16 - 1);
                  v16 -= 4;
                  *((_DWORD *)v37 - 1) = v38;
                  v37 -= 4;
                }
                *a3 = v37;
                a3[1] = v17;
                a3[2] = v14;
                if (v25)
                {
                  operator delete(v25);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)uint64_t v16 = v138[0];
                long long v17 = v16 + 4;
              }
              a3[1] = v17;
              int v39 = HIDWORD(v138[0]);
              if (v17 >= v14)
              {
                uint64_t v41 = *a3;
                uint64_t v42 = (v17 - *a3) >> 2;
                unint64_t v43 = v42 + 1;
                if ((unint64_t)(v42 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v44 = v14 - v41;
                if (v44 >> 1 > v43) {
                  unint64_t v43 = v44 >> 1;
                }
                if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v45 = v43;
                }
                if (v45)
                {
                  uint64_t v46 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v45);
                  uint64_t v41 = *a3;
                  long long v17 = a3[1];
                }
                else
                {
                  uint64_t v46 = 0;
                }
                int v57 = &v46[4 * v42];
                unint64_t v14 = &v46[4 * v45];
                *(_DWORD *)int v57 = v39;
                float32x4_t v40 = v57 + 4;
                while (v17 != v41)
                {
                  int v58 = *((_DWORD *)v17 - 1);
                  v17 -= 4;
                  *((_DWORD *)v57 - 1) = v58;
                  v57 -= 4;
                }
                *a3 = v57;
                a3[1] = v40;
                a3[2] = v14;
                if (v41)
                {
                  operator delete(v41);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)long long v17 = HIDWORD(v138[0]);
                float32x4_t v40 = v17 + 4;
              }
              a3[1] = v40;
              int v59 = DWORD1(v138[0]);
              if (v40 >= v14)
              {
                uint64_t v61 = *a3;
                uint64_t v62 = (v40 - *a3) >> 2;
                unint64_t v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v64 = v14 - v61;
                if (v64 >> 1 > v63) {
                  unint64_t v63 = v64 >> 1;
                }
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v65 = v63;
                }
                if (v65)
                {
                  float v66 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v65);
                  uint64_t v61 = *a3;
                  float32x4_t v40 = a3[1];
                }
                else
                {
                  float v66 = 0;
                }
                unint64_t v77 = &v66[4 * v62];
                unint64_t v14 = &v66[4 * v65];
                *(_DWORD *)unint64_t v77 = v59;
                float v60 = v77 + 4;
                while (v40 != v61)
                {
                  int v78 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v77 - 1) = v78;
                  v77 -= 4;
                }
                *a3 = v77;
                a3[1] = v60;
                a3[2] = v14;
                if (v61)
                {
                  operator delete(v61);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)float32x4_t v40 = DWORD1(v138[0]);
                float v60 = v40 + 4;
              }
              a3[1] = v60;
              int v79 = v138[0];
              if (v60 >= v14)
              {
                uint64_t v81 = *a3;
                uint64_t v82 = (v60 - *a3) >> 2;
                unint64_t v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v84 = v14 - v81;
                if (v84 >> 1 > v83) {
                  unint64_t v83 = v84 >> 1;
                }
                if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v85 = v83;
                }
                if (v85)
                {
                  long long v86 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v85);
                  uint64_t v81 = *a3;
                  float v60 = a3[1];
                }
                else
                {
                  long long v86 = 0;
                }
                float64x2_t v97 = &v86[4 * v82];
                unint64_t v14 = &v86[4 * v85];
                *(_DWORD *)float64x2_t v97 = v79;
                BOOL v80 = v97 + 4;
                while (v60 != v81)
                {
                  int v98 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v97 - 1) = v98;
                  v97 -= 4;
                }
                *a3 = v97;
                a3[1] = v80;
                a3[2] = v14;
                if (v81)
                {
                  operator delete(v81);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)float v60 = v138[0];
                BOOL v80 = v60 + 4;
              }
              a3[1] = v80;
              int v99 = DWORD2(v138[0]);
              if (v80 >= v14)
              {
                float64x2_t v101 = *a3;
                uint64_t v102 = (v80 - *a3) >> 2;
                unint64_t v103 = v102 + 1;
                if ((unint64_t)(v102 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v104 = v14 - v101;
                if (v104 >> 1 > v103) {
                  unint64_t v103 = v104 >> 1;
                }
                if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v105 = v103;
                }
                if (v105)
                {
                  int32x4_t v106 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v105);
                  float64x2_t v101 = *a3;
                  BOOL v80 = a3[1];
                }
                else
                {
                  int32x4_t v106 = 0;
                }
                unint64_t v116 = &v106[4 * v102];
                unint64_t v14 = &v106[4 * v105];
                *(_DWORD *)unint64_t v116 = v99;
                float64x2_t v100 = v116 + 4;
                while (v80 != v101)
                {
                  int v117 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *((_DWORD *)v116 - 1) = v117;
                  v116 -= 4;
                }
                *a3 = v116;
                a3[1] = v100;
                a3[2] = v14;
                if (v101)
                {
                  operator delete(v101);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)BOOL v80 = DWORD2(v138[0]);
                float64x2_t v100 = v80 + 4;
              }
              a3[1] = v100;
              int v118 = HIDWORD(v138[0]);
              if (v100 >= v14)
              {
                v119 = *a3;
                uint64_t v120 = (v100 - *a3) >> 2;
                unint64_t v121 = v120 + 1;
                if (!((unint64_t)(v120 + 1) >> 62))
                {
                  uint64_t v122 = v14 - v119;
                  if (v122 >> 1 > v121) {
                    unint64_t v121 = v122 >> 1;
                  }
                  if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v123 = v121;
                  }
                  if (v123)
                  {
                    uint64_t v124 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v123);
                    v119 = *a3;
                    float64x2_t v100 = a3[1];
                  }
                  else
                  {
                    uint64_t v124 = 0;
                  }
                  float32x4_t v133 = &v124[4 * v120];
                  float32x4_t v134 = &v124[4 * v123];
                  *(_DWORD *)float32x4_t v133 = v118;
                  v127 = v133 + 4;
                  while (v100 != v119)
                  {
                    int v135 = *((_DWORD *)v100 - 1);
                    v100 -= 4;
                    *((_DWORD *)v133 - 1) = v135;
                    v133 -= 4;
                  }
LABEL_208:
                  *a3 = v133;
                  a3[1] = v127;
                  a3[2] = v134;
                  if (v119) {
                    operator delete(v119);
                  }
                  goto LABEL_210;
                }
                goto LABEL_211;
              }
            }
            else
            {
              if (v16 >= v14)
              {
                uint64_t v31 = *a3;
                uint64_t v32 = (v16 - *a3) >> 2;
                unint64_t v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v34 = v14 - v31;
                if (v34 >> 1 > v33) {
                  unint64_t v33 = v34 >> 1;
                }
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v33;
                }
                if (v35)
                {
                  float32x4_t v36 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v35);
                  uint64_t v31 = *a3;
                  uint64_t v16 = a3[1];
                }
                else
                {
                  float32x4_t v36 = 0;
                }
                int v47 = &v36[4 * v32];
                unint64_t v14 = &v36[4 * v35];
                *(_DWORD *)int v47 = v13;
                uint64_t v24 = v47 + 4;
                while (v16 != v31)
                {
                  int v48 = *((_DWORD *)v16 - 1);
                  v16 -= 4;
                  *((_DWORD *)v47 - 1) = v48;
                  v47 -= 4;
                }
                *a3 = v47;
                a3[1] = v24;
                a3[2] = v14;
                if (v31)
                {
                  operator delete(v31);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)uint64_t v16 = v138[0];
                uint64_t v24 = v16 + 4;
              }
              a3[1] = v24;
              int v49 = DWORD1(v138[0]);
              if (v24 >= v14)
              {
                uint64_t v51 = *a3;
                uint64_t v52 = (v24 - *a3) >> 2;
                unint64_t v53 = v52 + 1;
                if ((unint64_t)(v52 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v54 = v14 - v51;
                if (v54 >> 1 > v53) {
                  unint64_t v53 = v54 >> 1;
                }
                if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v55 = v53;
                }
                if (v55)
                {
                  uint64_t v56 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v55);
                  uint64_t v51 = *a3;
                  uint64_t v24 = a3[1];
                }
                else
                {
                  uint64_t v56 = 0;
                }
                float32x4_t v67 = &v56[4 * v52];
                unint64_t v14 = &v56[4 * v55];
                *(_DWORD *)float32x4_t v67 = v49;
                float32x4_t v50 = v67 + 4;
                while (v24 != v51)
                {
                  int v68 = *((_DWORD *)v24 - 1);
                  v24 -= 4;
                  *((_DWORD *)v67 - 1) = v68;
                  v67 -= 4;
                }
                *a3 = v67;
                a3[1] = v50;
                a3[2] = v14;
                if (v51)
                {
                  operator delete(v51);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)uint64_t v24 = DWORD1(v138[0]);
                float32x4_t v50 = v24 + 4;
              }
              a3[1] = v50;
              int v69 = HIDWORD(v138[0]);
              if (v50 >= v14)
              {
                BOOL v71 = *a3;
                uint64_t v72 = (v50 - *a3) >> 2;
                unint64_t v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v74 = v14 - v71;
                if (v74 >> 1 > v73) {
                  unint64_t v73 = v74 >> 1;
                }
                if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v75 = v73;
                }
                if (v75)
                {
                  int32x4_t v76 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v75);
                  BOOL v71 = *a3;
                  float32x4_t v50 = a3[1];
                }
                else
                {
                  int32x4_t v76 = 0;
                }
                uint64_t v87 = &v76[4 * v72];
                unint64_t v14 = &v76[4 * v75];
                *(_DWORD *)uint64_t v87 = v69;
                float v70 = v87 + 4;
                while (v50 != v71)
                {
                  int v88 = *((_DWORD *)v50 - 1);
                  v50 -= 4;
                  *((_DWORD *)v87 - 1) = v88;
                  v87 -= 4;
                }
                *a3 = v87;
                a3[1] = v70;
                a3[2] = v14;
                if (v71)
                {
                  operator delete(v71);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)float32x4_t v50 = HIDWORD(v138[0]);
                float v70 = v50 + 4;
              }
              a3[1] = v70;
              int v89 = v138[0];
              if (v70 >= v14)
              {
                long long v91 = *a3;
                uint64_t v92 = (v70 - *a3) >> 2;
                unint64_t v93 = v92 + 1;
                if ((unint64_t)(v92 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v94 = v14 - v91;
                if (v94 >> 1 > v93) {
                  unint64_t v93 = v94 >> 1;
                }
                if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v95 = v93;
                }
                if (v95)
                {
                  double v96 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v95);
                  long long v91 = *a3;
                  float v70 = a3[1];
                }
                else
                {
                  double v96 = 0;
                }
                unint64_t v107 = &v96[4 * v92];
                unint64_t v14 = &v96[4 * v95];
                *(_DWORD *)unint64_t v107 = v89;
                uint64_t v90 = v107 + 4;
                while (v70 != v91)
                {
                  int v108 = *((_DWORD *)v70 - 1);
                  v70 -= 4;
                  *((_DWORD *)v107 - 1) = v108;
                  v107 -= 4;
                }
                *a3 = v107;
                a3[1] = v90;
                a3[2] = v14;
                if (v91)
                {
                  operator delete(v91);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)float v70 = v138[0];
                uint64_t v90 = v70 + 4;
              }
              a3[1] = v90;
              int v109 = HIDWORD(v138[0]);
              if (v90 >= v14)
              {
                uint64_t v110 = *a3;
                uint64_t v111 = (v90 - *a3) >> 2;
                unint64_t v112 = v111 + 1;
                if ((unint64_t)(v111 + 1) >> 62) {
                  goto LABEL_211;
                }
                uint64_t v113 = v14 - v110;
                if (v113 >> 1 > v112) {
                  unint64_t v112 = v113 >> 1;
                }
                if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v114 = v112;
                }
                if (v114)
                {
                  unint64_t v115 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v114);
                  uint64_t v110 = *a3;
                  uint64_t v90 = a3[1];
                }
                else
                {
                  unint64_t v115 = 0;
                }
                uint64_t v125 = &v115[4 * v111];
                unint64_t v14 = &v115[4 * v114];
                *(_DWORD *)uint64_t v125 = v109;
                float64x2_t v100 = v125 + 4;
                while (v90 != v110)
                {
                  int v126 = *((_DWORD *)v90 - 1);
                  v90 -= 4;
                  *((_DWORD *)v125 - 1) = v126;
                  v125 -= 4;
                }
                *a3 = v125;
                a3[1] = v100;
                a3[2] = v14;
                if (v110)
                {
                  operator delete(v110);
                  unint64_t v14 = *v15;
                }
              }
              else
              {
                *(_DWORD *)uint64_t v90 = HIDWORD(v138[0]);
                float64x2_t v100 = v90 + 4;
              }
              a3[1] = v100;
              int v118 = DWORD2(v138[0]);
              if (v100 >= v14)
              {
                v119 = *a3;
                uint64_t v128 = (v100 - *a3) >> 2;
                unint64_t v129 = v128 + 1;
                if (!((unint64_t)(v128 + 1) >> 62))
                {
                  uint64_t v130 = v14 - v119;
                  if (v130 >> 1 > v129) {
                    unint64_t v129 = v130 >> 1;
                  }
                  if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v131 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v131 = v129;
                  }
                  if (v131)
                  {
                    float32x4_t v132 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v131);
                    v119 = *a3;
                    float64x2_t v100 = a3[1];
                  }
                  else
                  {
                    float32x4_t v132 = 0;
                  }
                  float32x4_t v133 = &v132[4 * v128];
                  float32x4_t v134 = &v132[4 * v131];
                  *(_DWORD *)float32x4_t v133 = v118;
                  v127 = v133 + 4;
                  while (v100 != v119)
                  {
                    int v136 = *((_DWORD *)v100 - 1);
                    v100 -= 4;
                    *((_DWORD *)v133 - 1) = v136;
                    v133 -= 4;
                  }
                  goto LABEL_208;
                }
LABEL_211:
                sub_20B05D0BC();
              }
            }
            *(_DWORD *)float64x2_t v100 = v118;
            v127 = v100 + 4;
LABEL_210:
            a3[1] = v127;
            return;
          }
          uint64_t v18 = 0;
          char v20 = 1;
          do
          {
            uint64_t v21 = 0;
            char v22 = v20;
            memset(v138, 0, sizeof(v138));
            long long v137 = *(_OWORD *)((char *)&unk_20B1E6B30 + 40 * a2 + 20 * v18);
            do
            {
              uint64_t v23 = a1[v21];
              if (!*(unsigned char *)(v23 + 224)) {
                uint64_t v23 = *(void *)(v23 + 8 * *((int *)&v138[-1] + v21) + 48);
              }
              *((void *)v138 + v21++) = v23;
            }
            while (v21 != 4);
            sub_20B05D980(v138, *((unsigned int *)&unk_20B1E6B30 + 10 * a2 + 5 * v18 + 4), a3);
            char v20 = 0;
            uint64_t v18 = 1;
          }
          while ((v22 & 1) != 0);
        }
      }
    }
  }
}

void sub_20B05E310(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x210532650);
  }
}

uint64_t *sub_20B05E36C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    sub_20B05F21C((uint64_t *)(v2 + 1312), 0);
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B05E3D0(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  char v9 = (uint64_t *)result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          char v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v42 = *(a2 - 1);
                uint64_t v43 = *v10;
                if (*(float *)(v42 + 20) < *(float *)(*v10 + 20))
                {
                  *int v10 = v42;
                  *(a2 - 1) = v43;
                }
                break;
              case 3uLL:
                double result = (uint64_t)sub_20B05EB38(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                double result = (uint64_t)sub_20B05EDDC(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t v44 = v10 + 1;
                unint64_t v45 = v10 + 2;
                uint64_t v46 = v10 + 3;
                double result = (uint64_t)sub_20B05EDDC(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = v10[3];
                if (*(float *)(v47 + 20) < *(float *)(v48 + 20))
                {
                  *uint64_t v46 = v47;
                  *(a2 - 1) = v48;
                  uint64_t v49 = *v46;
                  uint64_t v50 = *v45;
                  if (*(float *)(*v46 + 20) < *(float *)(*v45 + 20))
                  {
                    *unint64_t v45 = v49;
                    *uint64_t v46 = v50;
                    uint64_t v51 = *v44;
                    if (*(float *)(v49 + 20) < *(float *)(*v44 + 20))
                    {
                      v10[1] = v49;
                      _OWORD v10[2] = v51;
                      uint64_t v52 = *v10;
                      if (*(float *)(v49 + 20) < *(float *)(*v10 + 20))
                      {
                        *int v10 = v49;
                        v10[1] = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unint64_t v53 = v10 + 1;
            BOOL v55 = v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 0;
                int v57 = v10;
                do
                {
                  uint64_t v59 = *v57;
                  uint64_t v58 = v57[1];
                  int v57 = v53;
                  if (*(float *)(v58 + 20) < *(float *)(v59 + 20))
                  {
                    uint64_t v60 = v56;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v60 + 8) = v59;
                      if (!v60) {
                        break;
                      }
                      uint64_t v59 = *(uint64_t *)((char *)v10 + v60 - 8);
                      v60 -= 8;
                      if (*(float *)(v58 + 20) >= *(float *)(v59 + 20))
                      {
                        uint64_t v61 = (uint64_t *)((char *)v10 + v60 + 8);
                        goto LABEL_85;
                      }
                    }
                    uint64_t v61 = v10;
LABEL_85:
                    *uint64_t v61 = v58;
                  }
                  unint64_t v53 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
            else if (!v55)
            {
              do
              {
                uint64_t v88 = *v9;
                uint64_t v87 = v9[1];
                char v9 = v53;
                if (*(float *)(v87 + 20) < *(float *)(v88 + 20))
                {
                  do
                  {
                    uint64_t *v53 = v88;
                    uint64_t v88 = *(v53 - 2);
                    --v53;
                  }
                  while (*(float *)(v87 + 20) < *(float *)(v88 + 20));
                  uint64_t *v53 = v87;
                }
                unint64_t v53 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  float v66 = &v10[v65];
                  if (2 * v64 + 2 < (uint64_t)v12 && *(float *)(*v66 + 20) < *(float *)(v66[1] + 20))
                  {
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  float32x4_t v67 = &v10[v64];
                  uint64_t v68 = *v66;
                  uint64_t v69 = *v67;
                  if (*(float *)(*v66 + 20) >= *(float *)(*v67 + 20))
                  {
                    do
                    {
                      float v70 = v66;
                      uint64_t *v67 = v68;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = 2 * v65;
                      uint64_t v65 = (2 * v65) | 1;
                      float v66 = &v10[v65];
                      uint64_t v72 = v71 + 2;
                      if (v72 < (uint64_t)v12)
                      {
                        double result = *v66;
                        if (*(float *)(*v66 + 20) < *(float *)(v66[1] + 20))
                        {
                          ++v66;
                          uint64_t v65 = v72;
                        }
                      }
                      uint64_t v68 = *v66;
                      float32x4_t v67 = v70;
                    }
                    while (*(float *)(*v66 + 20) >= *(float *)(v69 + 20));
                    *float v70 = v69;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              uint64_t v73 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v74 = 0;
                uint64_t v75 = *v10;
                int32x4_t v76 = v10;
                do
                {
                  unint64_t v77 = v76;
                  v76 += v74 + 1;
                  uint64_t v78 = 2 * v74;
                  uint64_t v74 = (2 * v74) | 1;
                  uint64_t v79 = v78 + 2;
                  if (v79 < v73 && *(float *)(*v76 + 20) < *(float *)(v76[1] + 20))
                  {
                    ++v76;
                    uint64_t v74 = v79;
                  }
                  *unint64_t v77 = *v76;
                }
                while (v74 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                if (v76 == --a2)
                {
                  uint64_t *v76 = v75;
                }
                else
                {
                  uint64_t *v76 = *a2;
                  *a2 = v75;
                  uint64_t v80 = (char *)v76 - (char *)v10 + 8;
                  if (v80 >= 9)
                  {
                    unint64_t v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                    uint64_t v82 = &v10[v81];
                    uint64_t v83 = *v82;
                    uint64_t v84 = *v76;
                    if (*(float *)(*v82 + 20) < *(float *)(*v76 + 20))
                    {
                      do
                      {
                        unint64_t v85 = v82;
                        uint64_t *v76 = v83;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        uint64_t v82 = &v10[v81];
                        uint64_t v83 = *v82;
                        int32x4_t v76 = v85;
                      }
                      while (*(float *)(*v82 + 20) < *(float *)(v84 + 20));
                      uint64_t *v85 = v84;
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_20B05EB38(v9, &v9[v12 >> 1], a2 - 1);
            sub_20B05EB38(v9 + 1, v14 - 1, a2 - 2);
            sub_20B05EB38(v9 + 2, &v9[v13 + 1], a2 - 3);
            double result = (uint64_t)sub_20B05EB38(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *char v9 = *v14;
            *unint64_t v14 = v15;
          }
          else
          {
            double result = (uint64_t)sub_20B05EB38(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          float v17 = *(float *)(v16 + 20);
          if (*(float *)(*(v9 - 1) + 20) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(float *)(*(a2 - 1) + 20))
          {
            unint64_t v33 = v9 + 1;
            do
            {
              int v10 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v17 >= *(float *)(*v10 + 20));
          }
          else
          {
            int v10 = v9;
            do
            {
              uint64_t v32 = v10[1];
              ++v10;
            }
            while (v17 >= *(float *)(v32 + 20));
          }
          uint64_t v34 = a2;
          if (v10 < a2)
          {
            uint64_t v34 = a2;
            do
              uint64_t v35 = *--v34;
            while (v17 < *(float *)(v35 + 20));
          }
          if (v10 < v34)
          {
            uint64_t v36 = *v10;
            uint64_t v37 = *v34;
            do
            {
              *int v10 = v37;
              *uint64_t v34 = v36;
              float v38 = *(float *)(v16 + 20);
              do
              {
                uint64_t v39 = v10[1];
                ++v10;
                uint64_t v36 = v39;
              }
              while (v38 >= *(float *)(v39 + 20));
              do
              {
                uint64_t v40 = *--v34;
                uint64_t v37 = v40;
              }
              while (v38 < *(float *)(v40 + 20));
            }
            while (v10 < v34);
          }
          uint64_t v41 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *char v9 = *v41;
          }
          a4 = 0;
          *uint64_t v41 = v16;
        }
        float v17 = *(float *)(v16 + 20);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(float *)(v19 + 20) < v17);
        char v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(float *)(v23 + 20) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(float *)(v22 + 20) >= v17);
        }
        if (v20 >= v21)
        {
          int8x16_t v30 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          float v25 = v21;
          uint64_t v26 = &v9[v18];
          do
          {
            *uint64_t v26 = v24;
            *float v25 = v19;
            float v27 = *(float *)(v16 + 20);
            do
            {
              uint64_t v28 = v26[1];
              ++v26;
              uint64_t v19 = v28;
            }
            while (*(float *)(v28 + 20) < v27);
            do
            {
              uint64_t v29 = *--v25;
              uint64_t v24 = v29;
            }
            while (*(float *)(v29 + 20) >= v27);
          }
          while (v26 < v25);
          int8x16_t v30 = v26 - 1;
        }
        if (v30 != v9) {
          *char v9 = *v30;
        }
        uint64_t *v30 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        double result = sub_20B05E3D0(v9, v30, a3, a4 & 1);
        a4 = 0;
        int v10 = v30 + 1;
      }
      BOOL v31 = sub_20B05EBC4(v9, v30);
      int v10 = v30 + 1;
      double result = sub_20B05EBC4(v30 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_20B05EB38(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  float v5 = *(float *)(*a2 + 20);
  uint64_t v6 = *a3;
  float v7 = *(float *)(*a3 + 20);
  if (v5 >= *(float *)(*result + 20))
  {
    if (v7 < v5)
    {
      *a2 = v6;
      *a3 = v3;
      uint64_t v8 = *result;
      if (*(float *)(*a2 + 20) < *(float *)(*result + 20))
      {
        *double result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *double result = v3;
      *a2 = v4;
      if (*(float *)(*a3 + 20) >= *(float *)(v4 + 20)) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *double result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_20B05EBC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(float *)(v6 + 20) < *(float *)(*a1 + 20))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_20B05EB38(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_20B05EDDC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      float v17 = a1 + 1;
      uint64_t v18 = a1 + 2;
      uint64_t v19 = a1 + 3;
      sub_20B05EDDC(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if (*(float *)(v20 + 20) < *(float *)(v21 + 20))
      {
        *uint64_t v19 = v20;
        *(a2 - 1) = v21;
        uint64_t v22 = *v19;
        uint64_t v23 = *v18;
        if (*(float *)(*v19 + 20) < *(float *)(*v18 + 20))
        {
          *uint64_t v18 = v22;
          *uint64_t v19 = v23;
          uint64_t v24 = *v17;
          if (*(float *)(v22 + 20) < *(float *)(*v17 + 20))
          {
            a1[1] = v22;
            a1[2] = v24;
            uint64_t v25 = *a1;
            if (*(float *)(v22 + 20) < *(float *)(*a1 + 20))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 2;
      sub_20B05EB38(a1, a1 + 1, a1 + 2);
      char v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    if (*(float *)(*v9 + 20) < *(float *)(*v8 + 20))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (*(float *)(v12 + 20) >= *(float *)(v13 + 20))
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *uint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    uint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_20B05EDDC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_20B05EB38(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(float *)(*a4 + 20) < *(float *)(*a3 + 20))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(float *)(*a3 + 20) < *(float *)(*a2 + 20))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(float *)(*a2 + 20) < *(float *)(*a1 + 20))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void sub_20B05EE78()
{
}

void *sub_20B05EE8C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26BF4FBC8;
  return result;
}

void sub_20B05EEC4(uint64_t a1, void *a2)
{
  *a2 = &unk_26BF4FBC8;
}

void sub_20B05EEEC()
{
}

uint64_t sub_20B05EF20(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4F5E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_20B05EF60()
{
  return &unk_26BF4F5E8;
}

BOOL sub_20B05EF6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_20B05EFBC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_20B05F044()
{
}

void *sub_20B05F058()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_26BF4FC20;
  return result;
}

void sub_20B05F090(uint64_t a1, void *a2)
{
  *a2 = &unk_26BF4FC20;
}

void sub_20B05F0B8()
{
}

uint64_t sub_20B05F0EC(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4F5F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_20B05F12C()
{
  return &unk_26BF4F5F8;
}

uint64_t sub_20B05F138(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_20B05F1D0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B05F21C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B05F26C(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B05F26C(uint64_t a1)
{
  sub_20B05F1D0(a1 + 384);
  sub_20B05F1D0(a1 + 344);
  sub_20B05F1D0(a1 + 304);
  sub_20B05F1D0(a1 + 208);
  sub_20B05F1D0(a1 + 168);
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    *(void *)(a1 + 104) = v4;
    operator delete(v4);
  }
  sub_20B05EFBC((void *)(a1 + 64));
  float v5 = *(void **)(a1 + 40);
  if (v5)
  {
    *(void *)(a1 + 48) = v5;
    operator delete(v5);
  }
  sub_20B05D2CC(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t sub_20B05F30C(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)*a1) >> 5) >= a4)
  {
    if (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - v9) >> 5) >= a4)
    {
      uint64_t result = sub_20B05F4DC(a2, a3, (uint64_t)v9);
      a1[1] = v18;
    }
    else
    {
      uint64_t v15 = a2 + 32 * (((unsigned char *)a1[1] - v9) >> 5);
      uint64_t result = sub_20B05F4DC(a2, v15, (uint64_t)v9);
      uint64_t v16 = (char *)a1[1];
      if (v15 != a3)
      {
        uint64_t result = (uint64_t)a1[1];
        do
        {
          sub_20B05D4BC(result, v15);
          v15 += 224;
          uint64_t result = v17 + 224;
          v16 += 224;
        }
        while (v15 != a3);
      }
      a1[1] = v16;
    }
  }
  else
  {
    if (v9)
    {
      a1[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x124924924924924) {
      sub_20B05D0BC();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 5);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x92492492492492) {
      unint64_t v12 = 0x124924924924924;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_20B05F484(a1, v12);
    uint64_t result = (uint64_t)a1[1];
    while (v6 != a3)
    {
      sub_20B05D4BC(result, v6);
      v6 += 224;
      uint64_t result = v14 + 224;
    }
    a1[1] = (void *)result;
  }
  return result;
}

char *sub_20B05F484(void *a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    sub_20B05D0BC();
  }
  uint64_t result = (char *)sub_20B05D5E0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

uint64_t sub_20B05F4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20B05F53C(a3, v4);
      v4 += 224;
      a3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

float sub_20B05F53C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = 64;
  do
  {
    uint64_t v4 = (_OWORD *)(a1 + v3);
    *(v4 - 3) = *(_OWORD *)(a2 + v3 - 48);
    *uint64_t v4 = *(_OWORD *)(a2 + v3);
    uint64_t v5 = a1 + v2;
    *(void *)(v5 + 176) = *(void *)(a2 + v2 + 176);
    *(void *)(v5 + 200) = *(void *)(a2 + v2 + 200);
    v2 += 8;
    v3 += 16;
  }
  while (v2 != 24);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  float result = *(float *)(a2 + 168);
  *(float *)(a1 + 168) = result;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  return result;
}

void *sub_20B05F5C0(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *a2;
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v5)
        {
          if (i[2] == v5) {
            return i;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6) {
              v11 %= v6;
            }
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_20B05F7E0(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    *uint64_t i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20B05F7CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B05F7E0(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_20B05F8D0(a1, prime);
    }
  }
}

void sub_20B05F8D0(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_20B05D178();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t *sub_20B05FA2C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_20B05FAEC(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_20B05FAEC(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  float result = sub_20B05D62C(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void *sub_20B05FB44(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *a2;
      if (v6 <= v5) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v5)
          {
            if (*((_DWORD *)v10 + 4) == v5) {
              return v10;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6) {
                v11 %= v6;
              }
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v10 = operator new(0x18uLL);
  *unint64_t v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_20B05F7E0(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    *unint64_t v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_20B05FD50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20B05FD64(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  float result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      float result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20B05FE18(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_20B05FE5C(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *sub_20B05FE5C@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint8x8_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20B05FF90()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26BF4FCD0;
  __cxa_throw(exception, (struct type_info *)&unk_26BF4F558, (void (*)(void *))std::exception::~exception);
}

void sub_20B05FFE0(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B060018(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x124924924924924) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x92492492492492) {
    unint64_t v9 = 0x124924924924924;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_20B05D5E0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  __p = v10;
  BOOL v14 = &v10[224 * v4];
  unint64_t v16 = &v10[224 * v9];
  sub_20B05D4BC((uint64_t)v14, a2);
  unint64_t v15 = v14 + 224;
  sub_20B05D558(a1, &__p);
  uint64_t v11 = a1[1];
  if (v15 != v14) {
    v15 += -224
  }
         - 224 * ((((unint64_t)(v15 - v14 - 224) >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_20B060160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B0601B4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_20B05F484(result, a4);
    float result = (void *)v6[1];
    while (a2 != a3)
    {
      sub_20B05D4BC((uint64_t)result, a2);
      a2 += 224;
      float result = (void *)(v7 + 224);
    }
    v6[1] = result;
  }
  return result;
}

void sub_20B060214(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B060230(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B0602A8(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20B06028C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B0602A8(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_20B05D0BC();
  }
  float result = (char *)sub_20B0602EC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_20B0602EC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_20B05D178();
  }
  return operator new(8 * a2);
}

float *sub_20B060324(void *a1, float32x2_t *a2)
{
  unint64_t v4 = sub_20B060420((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(float ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(float **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (sub_20B060490(i + 4, (float *)a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

unint64_t sub_20B060420(uint64_t a1, float32x2_t *a2)
{
  int32x2_t v2 = vceqz_f32(*a2);
  v3.i64[0] = v2.i32[0];
  v3.i64[1] = v2.i32[1];
  int8x16_t v4 = v3;
  v3.i64[0] = a2->u32[0];
  v3.i64[1] = HIDWORD(*(unint64_t *)a2);
  int64x2_t v5 = (int64x2_t)vbicq_s8(v3, v4);
  unint64_t v6 = veorq_s8((int8x16_t)v5, (int8x16_t)vdupq_laneq_s64(v5, 1)).u64[0];
  v5.i32[0] = a2[1].i32[0];
  uint64_t v7 = v5.u32[0];
  if (*(float *)v5.i32 == 0.0) {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v6 ^ v7;
  float v9 = a2[2].f32[0];
  float v10 = a2[2].f32[1];
  uint64_t v11 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v11 ^ v12;
  float v14 = a2[3].f32[0];
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  return v8 ^ v13 ^ v15;
}

BOOL sub_20B060490(float *a1, float *a2)
{
  float v2 = a1[1];
  float v3 = a2[1];
  float v4 = a1[2];
  float v5 = a2[2];
  if (*a1 == *a2 && v2 == v3 && v4 == v5)
  {
    float v8 = a2[4];
    float v9 = a2[5];
    float v10 = a2[6];
    if (a1[4] == v8 && a1[5] == v9 && a1[6] == v10) {
      return 1;
    }
  }
  else
  {
    float v8 = a2[4];
    float v9 = a2[5];
    float v10 = a2[6];
  }
  BOOL v14 = *a1 == v8 && v2 == v9 && v4 == v10;
  if (v14
    && ((long long v15 = *((_OWORD *)a1 + 1), *(float *)&v15 == *a2)
      ? (BOOL v16 = COERCE_FLOAT(HIDWORD(*((void *)a1 + 2))) == v3)
      : (BOOL v16 = 0),
        v16))
  {
    return *((float *)&v15 + 2) == v5;
  }
  else
  {
    return 0;
  }
}

void *sub_20B060520(uint64_t a1, float32x2_t *a2, uint64_t a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_20B060420(a1 + 24, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (sub_20B060490((float *)i + 4, (float *)a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t i = operator new(0x40uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  long long v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v16;
  *((_DWORD *)i + 12) = *(_DWORD *)(a3 + 32);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v12);
  if (v24)
  {
    *(void *)uint64_t i = *v24;
LABEL_38:
    *uint64_t v24 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v12) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v25 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v6;
  return i;
}

void sub_20B060758(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06076C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20B05F7E0(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_20B05F5C0(a1, i + 2, i + 2);
  return a1;
}

void sub_20B0607CC(_Unwind_Exception *a1)
{
  sub_20B05F1D0(v1);
  _Unwind_Resume(a1);
}

void sub_20B0607E4(void *a1, void *a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (void *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      v8[2] = v9;
      uint8x8_t v10 = (void *)*v8;
      v8[1] = v9;
      unint64_t v11 = sub_20B0608F0((uint64_t)a1, v9, v8 + 2);
      sub_20B060A48(a1, v8, v11);
      a2 = (void *)*a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      unint64_t v12 = (void *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_20B060D94(a1, a2 + 2);
      a2 = (void *)*a2;
    }
  }
}

void sub_20B0608BC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    float v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20B0608DC(_Unwind_Exception *a1)
{
}

void *sub_20B0608F0(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_20B060B30(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  long long v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    float result = v16;
    long long v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *sub_20B060A48(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_20B060B30(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_20B060C20(a1, prime);
    }
  }
}

void sub_20B060C20(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_20B05D178();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_20B060D94(void *a1, unint64_t *a2)
{
  int8x8_t v4 = operator new(0x18uLL);
  unint64_t v5 = *a2;
  v4[2] = *a2;
  *int8x8_t v4 = 0;
  v4[1] = v5;
  uint64_t v6 = sub_20B0608F0((uint64_t)a1, v5, v4 + 2);
  sub_20B060A48(a1, v4, v6);
  return v4;
}

void sub_20B060DF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20B060E0C(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    float result = (void *)result[2];
    if (result)
    {
      do
      {
        float v2 = (void *)*result;
        operator delete(result);
        float result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t *sub_20B060E74(void *a1, unint64_t *a2)
{
  float result = sub_20B05FD64(a1, a2);
  if (result)
  {
    sub_20B05FE18(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_20B060EAC(uint64_t a1, unint64_t *a2)
{
  float v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  int8x8_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      int8x8_t v4 = v2;
    }
    float v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_20B060F28((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_20B060F28(uint64_t **a1, uint64_t *a2)
{
  float v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      float v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    int8x8_t v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      int8x8_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_20B060F9C(v6, a2);
  return v3;
}

uint64_t *sub_20B060F9C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    int8x8_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      int8x8_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      float result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      float result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      size_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      _OWORD v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *size_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        float result = v7;
      }
      uint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      long long v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *uint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        _OWORD v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        long long v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    long long v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      int v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      float result = v7;
    }
    uint64_t v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  unint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    int v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    unint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *unint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_20B061320(void *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  int v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != (int *)a3)
    {
      unint64_t v9 = a2[4];
      *((_DWORD *)v8 + 4) = v9;
      uint64_t v10 = (uint64_t *)*v8;
      v8[1] = v9;
      uint64_t v11 = (void *)sub_20B06142C((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      sub_20B060A48(a1, v8, v11);
      a2 = *(int **)a2;
      int v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v12 = (uint64_t *)*v8;
      operator delete(v8);
      int v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != (int *)a3)
    {
      sub_20B0617E8(a1, a2 + 4);
      a2 = *(int **)a2;
    }
  }
}

void sub_20B0613F8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20B061418(_Unwind_Exception *a1)
{
}

uint64_t sub_20B06142C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_20B061584(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void *)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = *(void *)(v16 + 8);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = *(void *)(v16 + 8);
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && *(_DWORD *)(v16 + 16) == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void sub_20B061584(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_20B061674(a1, prime);
    }
  }
}

void sub_20B061674(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_20B05D178();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(uint64_t ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = *v7; *v7; uint64_t i = *v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = (uint64_t **)i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (uint64_t *)*v13;
            }
            while (v13 && *((_DWORD *)i + 4) == *((_DWORD *)v13 + 4));
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = (uint64_t **)i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

_DWORD *sub_20B0617E8(void *a1, int *a2)
{
  int8x8_t v4 = operator new(0x18uLL);
  unint64_t v5 = *a2;
  v4[4] = v5;
  *(void *)int8x8_t v4 = 0;
  *((void *)v4 + 1) = v5;
  uint64_t v6 = (void *)sub_20B06142C((uint64_t)a1, v5, v4 + 4);
  sub_20B060A48(a1, v4, v6);
  return v4;
}

void sub_20B06184C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B0618E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0619C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B061BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B061C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B061DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B061E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B061EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B061F84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0620B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0622A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0623C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B06246C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0625B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B06263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLMaterialProperty;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B062754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B0627CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0628B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062B08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B062ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0630F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B063230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B063458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B0636E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B063A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B063F74(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v2, 0x10A1C40A30AD078);

  _Unwind_Resume(a1);
}

void sub_20B0641BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0643D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B064754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B064BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20B0650BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20B065224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B065310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B065400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B065530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0655C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B065818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B065A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B065CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B065DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B065E80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B066090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B066258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B066428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0665A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B066B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20B067538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_20B067838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B06785C(void *a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v3 = a1;
  id v4 = a2;
  if ((objc_msgSend_containsObject_(v4, v5, (uint64_t)v3) & 1) == 0)
  {
    objc_msgSend_addObject_(v4, v6, (uint64_t)v3);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v7 = v3[3];
    uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v13, v17, 16);
    if (v9)
    {
      uint64_t v10 = *(void *)v14;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v7);
          }
          sub_20B06785C(*(void *)(*((void *)&v13 + 1) + 8 * v11++), v4);
        }
        while (v9 != v11);
        uint64_t v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v12, (uint64_t)&v13, v17, 16);
      }
      while (v9);
    }

    (*((void (**)(id))v3[4] + 2))(v3[4]);
  }
}

void sub_20B06799C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B067BA4(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20B068104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }

  _Unwind_Resume(a1);
}

void sub_20B068368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B068448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B068534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float sub_20B068710(CGColor *a1)
{
  if (!a1) {
    return 0.0;
  }
  Components = CGColorGetComponents(a1);
  ColorSpace = CGColorGetColorSpace(a1);
  CGColorSpaceModel Model = CGColorSpaceGetModel(ColorSpace);
  if (Model == kCGColorSpaceModelRGB)
  {
    return *Components * 0.212655 + Components[1] * 0.715158 + Components[2] * 0.072187;
  }
  else
  {
    float result = 1.0;
    if (Model) {
      return result;
    }
    return *Components;
  }
}

CGColorRef sub_20B06879C(float32x4_t a1, float32x4_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  float32x4_t v2 = 0uLL;
  if (a1.f32[0] >= 1000.0 && a1.f32[0] <= 40000.0)
  {
    a2.i32[0] = 1170939904;
    int8x16_t v3 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a2, a1)), 0);
    float32x4_t v4 = vaddq_f32(vdivq_f32((float32x4_t)vbslq_s8(v3, (int8x16_t)xmmword_20B1E6E30, (int8x16_t)xmmword_20B1E6E20), vaddq_f32((float32x4_t)vbslq_s8(v3, (int8x16_t)xmmword_20B1E6E50, (int8x16_t)xmmword_20B1E6E40), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1.f32, 0))), (float32x4_t)vbslq_s8(v3, (int8x16_t)xmmword_20B1E6E10, (int8x16_t)xmmword_20B1E6E00));
    v4.i32[3] = 0;
    float32x4_t v5 = vmaxnmq_f32(v4, (float32x4_t)0);
    v5.i32[3] = 0;
    float32x4_t v2 = vminnmq_f32(v5, (float32x4_t)xmmword_20B1E6E60);
  }
  float32x4_t v9 = v2;
  uint64_t v6 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
  *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v9.f32);
  double v11 = v9.f32[2];
  uint64_t v12 = 0x3FF0000000000000;
  CGColorRef v7 = CGColorCreate(v6, components);
  CGColorSpaceRelease(v6);
  return v7;
}

__n64 sub_20B0688DC(CGColor *a1)
{
  float32x4_t v2 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x263F002D8]);
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(v2, kCGRenderingIntentAbsoluteColorimetric, a1, 0);
  CGColorSpaceRelease(v2);
  Components = CGColorGetComponents(CopyByMatchingToColorSpace);
  float v5 = *Components;
  float v6 = Components[1];
  float v7 = Components[2];
  CGColorRelease(CopyByMatchingToColorSpace);
  float v9 = fminf(v5, fminf(v6, v7));
  v10.f32[0] = fmaxf(v5, fmaxf(v6, v7));
  float v11 = v10.f32[0] - v9;
  float v12 = (float)(v9 + v10.f32[0]) * 0.5;
  float v13 = 0.0;
  if (v12 >= 0.5) {
    float v14 = 1.0 - v12;
  }
  else {
    float v14 = v12;
  }
  float v15 = v11 / (v14 + v14);
  if (v12 <= 0.0 || v12 >= 1.0) {
    float v15 = 0.0;
  }
  if (v10.f32[0] != v6 && v10.f32[0] == v5) {
    v8.f32[0] = 1.0;
  }
  else {
    v8.f32[0] = 0.0;
  }
  if (v10.f32[0] != v7 && v10.f32[0] == v6) {
    float v19 = 1.0;
  }
  else {
    float v19 = 0.0;
  }
  if (v10.f32[0] != v5 && v10.f32[0] == v7) {
    v10.f32[0] = 1.0;
  }
  else {
    v10.f32[0] = 0.0;
  }
  v8.f32[1] = v19;
  v8.i32[2] = v10.i32[0];
  v10.f32[0] = (float)(v6 - v7) * (float)(1.0 / v11);
  v10.f32[1] = (float)((float)(v7 - v5) * (float)(1.0 / v11)) + 2.0;
  v10.f32[2] = (float)((float)(v5 - v6) * (float)(1.0 / v11)) + 4.0;
  int32x4_t v21 = (int32x4_t)vmulq_f32(v8, v10);
  LODWORD(v22) = vaddq_f32(vaddq_f32((float32x4_t)v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x4_t)vdupq_laneq_s32(v21, 2)).u32[0];
  if (v11 > 0.0) {
    float v13 = 0.16667;
  }
  result.n64_f32[0] = v13 * v22;
  if (result.n64_f32[0] < 0.0) {
    result.n64_f32[0] = result.n64_f32[0] + 1.0;
  }
  result.n64_f32[1] = v15;
  return result;
}

double sub_20B068A50(float32x4_t a1)
{
  float v1 = 6.0 * a1.f32[0];
  v2.i64[0] = 0;
  if (a1.f32[0] >= 0.66667)
  {
    v2.f32[0] = v1 + -4.0;
    v2.f32[2] = 6.0 - v1;
  }
  else
  {
    v2.f32[1] = 4.0 - v1;
    v2.f32[2] = v1 + -2.0;
  }
  if (a1.f32[0] < 0.33333)
  {
    *(float *)&unint64_t v3 = 2.0 - v1;
    *((float *)&v3 + 1) = 6.0 * a1.f32[0];
    float32x4_t v2 = (float32x4_t)v3;
  }
  v2.i32[3] = 0;
  float32x4_t v4 = vminnmq_f32(v2, (float32x4_t)xmmword_20B1E6E60);
  v2.f32[0] = 1.0 - a1.f32[1];
  float32x4_t v5 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 0), v4, a1.f32[1] + a1.f32[1]);
  if (a1.f32[2] >= 0.5)
  {
    a1.f32[0] = (float)(a1.f32[2] * 2.0) + -1.0;
    a1.i64[0] = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1.f32, 0), v5, 1.0 - a1.f32[2]).u64[0];
  }
  else
  {
    a1.i64[0] = vmulq_laneq_f32(v5, a1, 2).u64[0];
  }
  return *(double *)a1.i64;
}

float sub_20B068B24(float *a1, float *a2, float *a3, float a4, float a5, float a6, float a7)
{
  __double2 v11 = __sincos_stret(a7);
  double v12 = (float)((float)(a5 + a4) + a6) * 0.333333333;
  *(float *)&double v12 = v12;
  int v13 = (int)(float)(*(float *)&v12 + a6) - ((float)(*(float *)&v12 + a6) <= 0.0);
  float32x2_t v14 = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v12, 0), (float32x2_t)__PAIR64__(LODWORD(a5), LODWORD(a4)));
  int32x2_t v15 = vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vcgtz_f32(v14)), vcvt_s32_f32(v14));
  int v16 = v15.i32[1];
  float32x2_t v17 = vcvt_f32_s32(v15);
  int v18 = v15.i32[0];
  double v19 = (float)(v15.i32[0] + v13 + v15.i32[1]) * 0.166666667;
  *(float *)&double v19 = v19;
  float32x2_t v20 = vadd_f32(vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v19, 0), v17), (float32x2_t)__PAIR64__(LODWORD(a5), LODWORD(a4)));
  float v21 = (float)(*(float *)&v19 - (float)v13) + a6;
  if (v20.f32[0] >= v20.f32[1])
  {
    if (v20.f32[1] < v21)
    {
      BOOL v24 = v20.f32[0] < v21;
      int32x2_t v22 = (int32x2_t)(v20.f32[0] >= v21);
      int32x2_t v23 = (int32x2_t)1;
      goto LABEL_6;
    }
    BOOL v24 = 0;
    BOOL v25 = 0;
    int32x2_t v22 = (int32x2_t)1;
    int32x2_t v23 = (int32x2_t)0x100000001;
  }
  else
  {
    if (v20.f32[1] < v21)
    {
      int32x2_t v22 = 0;
      int32x2_t v23 = (int32x2_t)0x100000000;
      BOOL v24 = 1;
LABEL_6:
      BOOL v25 = 1;
      goto LABEL_9;
    }
    BOOL v24 = 0;
    BOOL v25 = v20.f32[0] < v21;
    v23.i32[1] = 1;
    v23.i32[0] = v20.f32[0] >= v21;
    int32x2_t v22 = (int32x2_t)0x100000000;
  }
LABEL_9:
  float sinval = v11.__sinval;
  float cosval = v11.__cosval;
  _D0 = vcvt_f32_f64(vaddq_f64(vcvtq_f64_f32(vsub_f32(v20, vcvt_f32_s32(v22))), (float64x2_t)vdupq_n_s64(0x3FC55555560C95D4uLL)));
  float v29 = (float)(v21 - (float)v24) + 0.166666667;
  float64x2_t v30 = vaddq_f64(vcvtq_f64_f32(vsub_f32(v20, vcvt_f32_s32(v23))), (float64x2_t)vdupq_n_s64(0x3FD55555560C95D4uLL));
  __asm { FMOV            V4.2S, #-1.0 }
  float64x2_t v36 = vcvtq_f64_f32(vadd_f32(v20, _D4));
  float64x2_t v37 = (float64x2_t)vdupq_n_s64(0x3FE000000089705FuLL);
  _NF = -v18 < 0;
  int v18 = v18;
  if (!_NF) {
    int v18 = --(char)v18;
  }
  _NF = -v16 < 0;
  int v16 = v16;
  if (!_NF) {
    int v16 = --(char)v16;
  }
  if (v13 <= 0) {
    int v38 = --(char)v13;
  }
  else {
    int v38 = v13;
  }
  float32x2_t v39 = vmul_f32(v20, v20);
  float v40 = 0.6 - (float)((float)(v39.f32[0] + (float)(v21 * v21)) + v39.f32[1]);
  v41.i32[0] = 0;
  v42.i32[0] = 0;
  float v43 = 0.0;
  float v44 = 0.0;
  float v45 = 0.0;
  float v46 = 0.0;
  float v47 = 0.0;
  float v48 = 0.0;
  if (v40 >= 0.0)
  {
    uint64_t v49 = (float32x2_t *)((char *)&unk_20B1E6EBC
                        + 12 * (byte_20B1E703C[byte_20B1E703C[byte_20B1E703C[v38] + (uint64_t)v16] + (uint64_t)v18] & 0xF));
    uint64_t v50 = (float32x2_t *)((char *)&unk_20B1E6F7C
                        + 12 * (byte_20B1E703C[byte_20B1E703C[byte_20B1E703C[v38] + (uint64_t)v16] + (uint64_t)v18] & 0xF));
    float v44 = (float)(v49[1].f32[0] * cosval) + (float)(v50[1].f32[0] * sinval);
    float v46 = v40 * v40;
    float v47 = v46 * v46;
    float32x2_t v42 = vmla_n_f32(vmul_n_f32(*v49, cosval), *v50, sinval);
    float v48 = (float)(vaddv_f32(vmul_f32(v42, v20)) + (float)(v44 * v21)) * (float)(v46 * v46);
    float v43 = v42.f32[1];
    float v45 = v40;
  }
  float v101 = v45;
  float v103 = v46;
  float v105 = v43;
  float64x2_t v51 = vaddq_f64(v36, v37);
  _D25 = vcvt_f32_f64(v30);
  float v53 = (float)(v21 - (float)v25) + 0.333333334;
  float v54 = 0.6 - (float)(vaddv_f32(vmul_f32(_D0, _D0)) + (float)(v29 * v29));
  float v55 = 0.0;
  float v56 = 0.0;
  float v57 = 0.0;
  float v58 = 0.0;
  float v59 = 0.0;
  float v60 = 0.0;
  if (v54 >= 0.0)
  {
    uint64_t v61 = 3
        * (byte_20B1E703C[byte_20B1E703C[byte_20B1E703C[v24 + (uint64_t)v38] + (uint64_t)(v22.i32[1] + v16)]
                        + (uint64_t)(v22.i32[0] + v18)] & 0xF);
    int64_t v62 = (float32x2_t *)((char *)&unk_20B1E6EBC + 4 * v61);
    int64_t v63 = (float32x2_t *)((char *)&unk_20B1E6F7C + 4 * v61);
    float v56 = (float)(v62[1].f32[0] * cosval) + (float)(v63[1].f32[0] * sinval);
    float v58 = v54 * v54;
    float v59 = v58 * v58;
    float32x2_t v41 = vmla_n_f32(vmul_n_f32(*v62, cosval), *v63, sinval);
    float v60 = (float)(vaddv_f32(vmul_f32(v41, _D0)) + (float)(v56 * v29)) * (float)(v58 * v58);
    float v55 = v41.f32[1];
    float v57 = v54;
  }
  float v102 = v55;
  float v104 = v29;
  float v106 = v47;
  float v108 = v44;
  _D8 = vcvt_f32_f64(v51);
  float v65 = (float)(v21 + -1.0) + 0.500000001;
  float v66 = 0.6 - (float)(vaddv_f32(vmul_f32(_D25, _D25)) + (float)(v53 * v53));
  v67.i32[0] = 0;
  v68.i32[0] = 0;
  _S15 = 0.0;
  float v70 = 0.0;
  float v71 = 0.0;
  float v72 = 0.0;
  float v73 = 0.0;
  float v74 = 0.0;
  if (v66 >= 0.0)
  {
    uint64_t v75 = 3
        * (byte_20B1E703C[byte_20B1E703C[byte_20B1E703C[v25 + (uint64_t)v38] + (uint64_t)(v23.i32[1] + v16)]
                        + (uint64_t)(v23.i32[0] + v18)] & 0xF);
    int32x4_t v76 = (float32x2_t *)((char *)&unk_20B1E6EBC + 4 * v75);
    unint64_t v77 = (float32x2_t *)((char *)&unk_20B1E6F7C + 4 * v75);
    float v70 = (float)(v76[1].f32[0] * cosval) + (float)(v77[1].f32[0] * sinval);
    float v72 = v66 * v66;
    float v73 = v72 * v72;
    float32x2_t v68 = vmla_n_f32(vmul_n_f32(*v76, cosval), *v77, sinval);
    float v74 = (float)(vaddv_f32(vmul_f32(v68, _D25)) + (float)(v70 * v53)) * (float)(v72 * v72);
    _S15 = v68.f32[1];
    float v71 = v66;
  }
  float32x2_t v78 = vmul_f32(_D8, _D8);
  float v79 = 0.6 - (float)((float)(v78.f32[0] + (float)(v65 * v65)) + v78.f32[1]);
  _S23 = 0.0;
  float v81 = 0.0;
  float v82 = 0.0;
  float v83 = 0.0;
  float v84 = 0.0;
  float v85 = 0.0;
  if (v79 >= 0.0)
  {
    uint64_t v86 = 3 * (byte_20B1E703C[byte_20B1E703C[byte_20B1E703C[v38 + 1] + 1 + (uint64_t)v16] + 1 + (uint64_t)v18] & 0xF);
    uint64_t v87 = (float32x2_t *)((char *)&unk_20B1E6EBC
                        + 12
                        * (byte_20B1E703C[byte_20B1E703C[byte_20B1E703C[v38 + 1] + 1 + (uint64_t)v16] + 1 + (uint64_t)v18] & 0xF));
    uint64_t v88 = (float32x2_t *)((char *)&unk_20B1E6F7C + 4 * v86);
    float v81 = (float)(v87[1].f32[0] * cosval) + (float)(v88[1].f32[0] * sinval);
    float v83 = v79 * v79;
    float v84 = v83 * v83;
    float32x2_t v67 = vmla_n_f32(vmul_n_f32(*v87, cosval), *v88, sinval);
    float v85 = (float)(vaddv_f32(vmul_f32(v67, _D8)) + (float)(v81 * v65)) * (float)(v83 * v83);
    _S23 = v67.f32[1];
    float v82 = v79;
  }
  if (a1 && a2 && a3)
  {
    float v89 = (float)(v103 * v101)
        * (float)((float)((float)(v42.f32[0] * v20.f32[0]) + (float)(v105 * v20.f32[1])) + (float)(v108 * v21));
    *a1 = v89 * v20.f32[0];
    *a2 = v89 * v20.f32[1];
    *a3 = v89 * v21;
    _S19 = v102;
    __asm { FMLA            S3, S19, V0.S[1] }
    _S2 = (float)(v58 * v57) * (float)(_S3 + (float)(v56 * v104));
    *a1 = vmlas_n_f32(*a1, _S2, _D0.f32[0]);
    __asm { FMLA            S3, S2, V0.S[1] }
    *(_DWORD *)a2 = _S3;
    *a3 = *a3 + (float)(_S2 * v104);
    __asm { FMLA            S1, S15, V25.S[1] }
    _S0 = (float)(v72 * v71) * (float)(_S1 + (float)(v70 * v53));
    *a1 = vmlas_n_f32(*a1, _S0, _D25.f32[0]);
    __asm { FMLA            S1, S0, V25.S[1] }
    *(_DWORD *)a2 = _S1;
    *a3 = *a3 + (float)(_S0 * v53);
    __asm { FMLA            S1, S23, V8.S[1] }
    _S0 = (float)(v83 * v82) * (float)(_S1 + (float)(v81 * v65));
    *a1 = vmlas_n_f32(*a1, _S0, _D8.f32[0]);
    __asm { FMLA            S1, S0, V8.S[1] }
    *(_DWORD *)a2 = _S1;
    *a3 = *a3 + (float)(_S0 * v65);
    *a1 = *a1 * -8.0;
    *a2 = *a2 * -8.0;
    *a3 = *a3 * -8.0;
    *a1 = (float)((float)((float)(*a1 + (float)(v106 * v42.f32[0])) + (float)(v59 * v41.f32[0]))
                + (float)(v73 * v68.f32[0]))
        + (float)(v84 * v67.f32[0]);
    *a2 = (float)((float)((float)(*a2 + (float)(v106 * v105)) + (float)(v59 * v102)) + (float)(v73 * _S15))
        + (float)(v84 * _S23);
    *a3 = (float)((float)((float)(*a3 + (float)(v106 * v108)) + (float)(v59 * v56)) + (float)(v73 * v70))
        + (float)(v84 * v81);
    *a1 = *a1 * 28.0;
    *a2 = *a2 * 28.0;
    *a3 = *a3 * 28.0;
  }
  return (float)((float)(v60 + v48) + (float)(v74 + v85)) * 28.0;
}

void sub_20B069248(void *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  a1;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  float v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v4 = MEMORY[0x263F906C8] + 16;
  uint64_t v3 = 0;
  memset(&v2[3], 0, 32);
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((uint64_t *)v2, v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
}

void sub_20B069FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20B06A6E8((uint64_t)&a31);
  sub_20B06A698(v37 - 160);
  if ((a36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8((uint64_t)&a37);
  MEMORY[0x210530A50](v37 - 184);

  _Unwind_Resume(a1);
}

uint64_t sub_20B06A22C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  return a1;
}

uint64_t sub_20B06A288(void *a1)
{
  if (sub_20B06A768((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B06A7A0, &unk_26BF4F060);
  }
}

uint64_t sub_20B06A31C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_20B06A85C((void *)a1);
  uint64_t v6 = v5;
  sub_20B06A8A8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B06A378(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

void *sub_20B06A390(void *result, void *a2)
{
  if (a2 != result)
  {
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *__n64 result = *a2;
  }
  return result;
}

uint64_t sub_20B06A3E4(_DWORD *a1)
{
  if (*a1 != 1) {
    return (uint64_t)(a1 + 6);
  }
  uint64_t v1 = sub_20B06A638((uint64_t)a1);

  return MEMORY[0x270FA4C88](v1);
}

uint64_t sub_20B06A424(uint64_t a1)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = (atomic_uint *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    if ((atomic_fetch_add(Ptr + 2, 0xFFFFFFFF) & 0x7FFFFFFF) == 1) {
      sub_20B06A478((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)Ptr);
    }
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Sdf_PathNode *sub_20B06A478(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *result)
{
  switch(*((unsigned char *)result + 14))
  {
    case 0:
      uint64_t v1 = sub_20B06A54C(result);
      goto LABEL_5;
    case 1:
      uint64_t v1 = (uint64_t *)MEMORY[0x210530C30]();
      goto LABEL_5;
    case 2:
      uint64_t v1 = (uint64_t *)MEMORY[0x210530FC0]();
LABEL_5:
      return (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)MEMORY[0x270FA37B0](v1);
    case 3:
      uint64_t v2 = MEMORY[0x210530F00]();
      goto LABEL_14;
    case 4:
      uint64_t v2 = MEMORY[0x210530DB0]();
      goto LABEL_14;
    case 5:
      uint64_t v2 = MEMORY[0x210530DA0]();
      goto LABEL_14;
    case 6:
      uint64_t v2 = MEMORY[0x210531020]();
      goto LABEL_14;
    case 7:
      uint64_t v2 = MEMORY[0x210530E20]();
      goto LABEL_14;
    case 8:
      uint64_t v2 = MEMORY[0x210530E80]();
LABEL_14:
      __n64 result = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)MEMORY[0x270FA37B8](v2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_20B06A54C(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0) {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(this);
  }

  return sub_20B06A594((uint64_t *)this);
}

uint64_t *sub_20B06A594(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) & 0x7FFFFFFF) == 1) {
    sub_20B06A478();
  }
  return a1;
}

uint64_t sub_20B06A5E0(uint64_t result)
{
  unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(result + 48), 0xFFFFFFFFFFFFFFFFLL, memory_order_release);
  if (result && add_explicit == 1)
  {
    MEMORY[0x2105309F0]();
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B06A638(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (v3) {
    return v2;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    return v4 + 16;
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

uint64_t sub_20B06A698(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_20B06A6E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    BOOL v3 = (void *)(a1 + 24);
    uint64_t v2 = *(atomic_ullong **)(a1 + 24);
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v4 = *(void (**)(void))(*v3 + 8);
        if (v4) {
          v4();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete((void *)(*(void *)(a1 + 32) - 16));
    }
    *BOOL v3 = 0;
    v3[1] = 0;
  }
}

uint64_t sub_20B06A768(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 20) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B06A7A0()
{
}

uint64_t sub_20B06A800(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B06A85C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1)) {
      sub_20B06A6E8((uint64_t)a1);
    }
    *a1 = 0;
  }
}

void sub_20B06A8A8(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float32x4_t v10 = sub_20B06AA70((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            double v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          float32x2_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      float32x2_t v20 = sub_20B06AA70((uint64_t)a1, a2);
      float32x2_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        int32x2_t v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)int32x2_t v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        BOOL v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      int v16 = sub_20B06AA70((uint64_t)a1, a2);
      float32x2_t v14 = v16;
      unint64_t v17 = 0;
      int v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B06AA70(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B06AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B06AB10(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      int v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3 - 1;
    }
    while (v3);
  }
  *(void *)a1 = 0;
  return a1;
}

uint64_t sub_20B06AB64(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load(MEMORY[0x263F90520]);
  if (v2)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    *(void *)a1 = v4;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      int v3 = 2;
    }
    else
    {
      int v3 = 0;
    }
  }
  else
  {
    int v3 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return a1;
}

void sub_20B06ABD8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4f]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B06AA70((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        unint64_t v9 = v6;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_20B06AC70()
{
}

void sub_20B06ACC8()
{
}

void sub_20B06AD08(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x60C40828F5A6DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06AD2C(uint64_t a1)
{
  v203 = (void **)(a1 + 1608);
  sub_20B06C040(&v203);
  uint64_t v2 = *(void *)(a1 + 1600);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 1592);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 1584);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 1576);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 1568);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 1560);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 1552);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 1544);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 1536);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 1528);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 1520);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 1512);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 1504);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 1496);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 1488);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 1480);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 1472);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 1464);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 1456);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 1448);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 1440);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 1432);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 1424);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 1416);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 1408);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 1400);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 1392);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 1384);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 1376);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 1368);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 1360);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 1352);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 1344);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 1336);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 1328);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 1320);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 1312);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *(void *)(a1 + 1304);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *(void *)(a1 + 1296);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *(void *)(a1 + 1288);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *(void *)(a1 + 1280);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *(void *)(a1 + 1272);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *(void *)(a1 + 1264);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = *(void *)(a1 + 1256);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v46 = *(void *)(a1 + 1248);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v47 = *(void *)(a1 + 1240);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v48 = *(void *)(a1 + 1232);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v49 = *(void *)(a1 + 1224);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = *(void *)(a1 + 1216);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v51 = *(void *)(a1 + 1208);
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v52 = *(void *)(a1 + 1200);
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v53 = *(void *)(a1 + 1192);
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v54 = *(void *)(a1 + 1184);
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = *(void *)(a1 + 1176);
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v56 = *(void *)(a1 + 1168);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v57 = *(void *)(a1 + 1160);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v58 = *(void *)(a1 + 1152);
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v59 = *(void *)(a1 + 1144);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = *(void *)(a1 + 1136);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v61 = *(void *)(a1 + 1128);
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v62 = *(void *)(a1 + 1120);
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v63 = *(void *)(a1 + 1112);
  if ((v63 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v64 = *(void *)(a1 + 1104);
  if ((v64 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v65 = *(void *)(a1 + 1096);
  if ((v65 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v66 = *(void *)(a1 + 1088);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v67 = *(void *)(a1 + 1080);
  if ((v67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v68 = *(void *)(a1 + 1072);
  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v69 = *(void *)(a1 + 1064);
  if ((v69 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v70 = *(void *)(a1 + 1056);
  if ((v70 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v71 = *(void *)(a1 + 1048);
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v72 = *(void *)(a1 + 1040);
  if ((v72 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v73 = *(void *)(a1 + 1032);
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v74 = *(void *)(a1 + 1024);
  if ((v74 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v75 = *(void *)(a1 + 1016);
  if ((v75 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v76 = *(void *)(a1 + 1008);
  if ((v76 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v77 = *(void *)(a1 + 1000);
  if ((v77 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v78 = *(void *)(a1 + 992);
  if ((v78 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v79 = *(void *)(a1 + 984);
  if ((v79 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v80 = *(void *)(a1 + 976);
  if ((v80 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v81 = *(void *)(a1 + 968);
  if ((v81 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v82 = *(void *)(a1 + 960);
  if ((v82 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v83 = *(void *)(a1 + 952);
  if ((v83 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v84 = *(void *)(a1 + 944);
  if ((v84 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v85 = *(void *)(a1 + 936);
  if ((v85 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v86 = *(void *)(a1 + 928);
  if ((v86 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v87 = *(void *)(a1 + 920);
  if ((v87 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v88 = *(void *)(a1 + 912);
  if ((v88 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v89 = *(void *)(a1 + 904);
  if ((v89 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v90 = *(void *)(a1 + 896);
  if ((v90 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v91 = *(void *)(a1 + 888);
  if ((v91 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v92 = *(void *)(a1 + 880);
  if ((v92 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v93 = *(void *)(a1 + 872);
  if ((v93 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v94 = *(void *)(a1 + 864);
  if ((v94 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v95 = *(void *)(a1 + 856);
  if ((v95 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v96 = *(void *)(a1 + 848);
  if ((v96 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v97 = *(void *)(a1 + 840);
  if ((v97 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v98 = *(void *)(a1 + 832);
  if ((v98 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v99 = *(void *)(a1 + 824);
  if ((v99 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v100 = *(void *)(a1 + 816);
  if ((v100 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v101 = *(void *)(a1 + 808);
  if ((v101 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v102 = *(void *)(a1 + 800);
  if ((v102 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v103 = *(void *)(a1 + 792);
  if ((v103 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v104 = *(void *)(a1 + 784);
  if ((v104 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v104 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v105 = *(void *)(a1 + 776);
  if ((v105 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v106 = *(void *)(a1 + 768);
  if ((v106 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v107 = *(void *)(a1 + 760);
  if ((v107 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v108 = *(void *)(a1 + 752);
  if ((v108 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v109 = *(void *)(a1 + 744);
  if ((v109 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v110 = *(void *)(a1 + 736);
  if ((v110 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v111 = *(void *)(a1 + 728);
  if ((v111 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v112 = *(void *)(a1 + 720);
  if ((v112 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v112 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v113 = *(void *)(a1 + 712);
  if ((v113 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v114 = *(void *)(a1 + 704);
  if ((v114 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v114 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v115 = *(void *)(a1 + 696);
  if ((v115 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v116 = *(void *)(a1 + 688);
  if ((v116 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v116 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v117 = *(void *)(a1 + 680);
  if ((v117 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v118 = *(void *)(a1 + 672);
  if ((v118 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v118 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v119 = *(void *)(a1 + 664);
  if ((v119 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v120 = *(void *)(a1 + 656);
  if ((v120 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v121 = *(void *)(a1 + 648);
  if ((v121 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v121 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v122 = *(void *)(a1 + 640);
  if ((v122 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v122 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v123 = *(void *)(a1 + 632);
  if ((v123 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v124 = *(void *)(a1 + 624);
  if ((v124 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v124 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v125 = *(void *)(a1 + 616);
  if ((v125 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v125 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v126 = *(void *)(a1 + 608);
  if ((v126 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v126 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v127 = *(void *)(a1 + 600);
  if ((v127 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v127 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v128 = *(void *)(a1 + 592);
  if ((v128 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v128 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v129 = *(void *)(a1 + 584);
  if ((v129 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v129 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v130 = *(void *)(a1 + 576);
  if ((v130 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v130 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v131 = *(void *)(a1 + 568);
  if ((v131 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v132 = *(void *)(a1 + 560);
  if ((v132 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v133 = *(void *)(a1 + 552);
  if ((v133 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v133 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v134 = *(void *)(a1 + 544);
  if ((v134 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v134 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v135 = *(void *)(a1 + 536);
  if ((v135 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v135 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v136 = *(void *)(a1 + 528);
  if ((v136 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v136 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v137 = *(void *)(a1 + 520);
  if ((v137 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v137 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v138 = *(void *)(a1 + 512);
  if ((v138 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v139 = *(void *)(a1 + 504);
  if ((v139 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v140 = *(void *)(a1 + 496);
  if ((v140 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v141 = *(void *)(a1 + 488);
  if ((v141 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v142 = *(void *)(a1 + 480);
  if ((v142 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v143 = *(void *)(a1 + 472);
  if ((v143 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v143 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v144 = *(void *)(a1 + 464);
  if ((v144 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v145 = *(void *)(a1 + 456);
  if ((v145 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v145 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v146 = *(void *)(a1 + 448);
  if ((v146 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v147 = *(void *)(a1 + 440);
  if ((v147 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v147 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v148 = *(void *)(a1 + 432);
  if ((v148 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v149 = *(void *)(a1 + 424);
  if ((v149 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v150 = *(void *)(a1 + 416);
  if ((v150 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v151 = *(void *)(a1 + 408);
  if ((v151 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v151 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v152 = *(void *)(a1 + 400);
  if ((v152 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v153 = *(void *)(a1 + 392);
  if ((v153 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v154 = *(void *)(a1 + 384);
  if ((v154 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v154 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v155 = *(void *)(a1 + 376);
  if ((v155 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v156 = *(void *)(a1 + 368);
  if ((v156 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v157 = *(void *)(a1 + 360);
  if ((v157 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v157 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v158 = *(void *)(a1 + 352);
  if ((v158 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v158 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v159 = *(void *)(a1 + 344);
  if ((v159 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v159 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v160 = *(void *)(a1 + 336);
  if ((v160 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v161 = *(void *)(a1 + 328);
  if ((v161 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v161 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v162 = *(void *)(a1 + 320);
  if ((v162 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v162 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v163 = *(void *)(a1 + 312);
  if ((v163 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v163 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v164 = *(void *)(a1 + 304);
  if ((v164 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v165 = *(void *)(a1 + 296);
  if ((v165 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v165 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v166 = *(void *)(a1 + 288);
  if ((v166 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v166 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v167 = *(void *)(a1 + 280);
  if ((v167 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v167 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v168 = *(void *)(a1 + 272);
  if ((v168 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v168 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v169 = *(void *)(a1 + 264);
  if ((v169 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v169 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v170 = *(void *)(a1 + 256);
  if ((v170 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v171 = *(void *)(a1 + 248);
  if ((v171 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v171 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v172 = *(void *)(a1 + 240);
  if ((v172 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v172 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v173 = *(void *)(a1 + 232);
  if ((v173 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v173 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v174 = *(void *)(a1 + 224);
  if ((v174 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v175 = *(void *)(a1 + 216);
  if ((v175 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v175 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v176 = *(void *)(a1 + 208);
  if ((v176 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v177 = *(void *)(a1 + 200);
  if ((v177 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v177 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v178 = *(void *)(a1 + 192);
  if ((v178 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v178 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v179 = *(void *)(a1 + 184);
  if ((v179 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v179 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v180 = *(void *)(a1 + 176);
  if ((v180 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v181 = *(void *)(a1 + 168);
  if ((v181 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v181 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v182 = *(void *)(a1 + 160);
  if ((v182 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v183 = *(void *)(a1 + 152);
  if ((v183 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v183 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v184 = *(void *)(a1 + 144);
  if ((v184 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v185 = *(void *)(a1 + 136);
  if ((v185 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v186 = *(void *)(a1 + 128);
  if ((v186 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v186 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v187 = *(void *)(a1 + 120);
  if ((v187 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v188 = *(void *)(a1 + 112);
  if ((v188 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v188 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v189 = *(void *)(a1 + 104);
  if ((v189 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v189 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v190 = *(void *)(a1 + 96);
  if ((v190 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v190 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v191 = *(void *)(a1 + 88);
  if ((v191 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v191 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v192 = *(void *)(a1 + 80);
  if ((v192 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v193 = *(void *)(a1 + 72);
  if ((v193 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v193 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v194 = *(void *)(a1 + 64);
  if ((v194 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v194 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v195 = *(void *)(a1 + 56);
  if ((v195 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v195 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v196 = *(void *)(a1 + 48);
  if ((v196 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v196 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v197 = *(void *)(a1 + 40);
  if ((v197 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v197 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v198 = *(void *)(a1 + 32);
  if ((v198 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v198 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v199 = *(void *)(a1 + 24);
  if ((v199 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v199 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v200 = *(void *)(a1 + 16);
  if ((v200 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v201 = *(void *)(a1 + 8);
  if ((v201 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v201 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_20B06C040(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    uint64_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v3 != v2);
      uint64_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void sub_20B06C094(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
      uint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B06C13C((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 12 * v5;
        uint64_t v9 = v6;
        do
        {
          uint64_t v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *uint64_t v9 = v10;
          uint64_t v9 = (void *)((char *)v9 + 12);
          uint64_t v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_20B06C13C(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x1555555555555553) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 12 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B06C1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B06C1E8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B06C280((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        uint64_t v9 = v6;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_20B06C280(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B06C30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_20B06C324(void *a1)
{
  *a1 = &unk_26BF4F900;
  a1[1] = 0;
  uint64_t v2 = objc_alloc_init(MDLTransform);
  sub_20B06C3BC((char **)&v2->_transform);
  size_t v3 = (void *)a1[1];
  a1[1] = v2;

  return a1;
}

void sub_20B06C39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B06C3BC(char **a1)
{
  *((int64x2_t *)a1 + 6) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a1[15] = (char *)0x7FEFFFFFFFFFFFFFLL;
  *((unsigned char *)a1 + 112) = 1;
  long long v2 = *MEMORY[0x263EF89A8];
  long long v3 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v4 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v5 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  *((_OWORD *)a1 + 8) = *MEMORY[0x263EF89A8];
  *((_OWORD *)a1 + 9) = v3;
  *((_OWORD *)a1 + 10) = v4;
  *((_OWORD *)a1 + 11) = v5;
  *((_OWORD *)a1 + 12) = v2;
  *((_OWORD *)a1 + 13) = v3;
  *((_OWORD *)a1 + 14) = v4;
  *((_OWORD *)a1 + 15) = v5;
  *((_OWORD *)a1 + 16) = v2;
  *((_OWORD *)a1 + 17) = v3;
  *((_OWORD *)a1 + 18) = v4;
  *((_OWORD *)a1 + 19) = v5;
  *((_OWORD *)a1 + 20) = v2;
  *((_OWORD *)a1 + 21) = v3;
  *((_OWORD *)a1 + 22) = v4;
  *((_OWORD *)a1 + 23) = v5;
  uint64_t v6 = *a1;
  a1[1] = *a1;
  unint64_t v9 = (unint64_t)a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v11 = v8 - (void)v6;
    uint64_t v12 = v11 >> 4;
    if ((unint64_t)(v11 >> 4) <= 1) {
      uint64_t v12 = 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v14 = (char *)sub_20B06C71C(v7, v13);
    uint64_t v16 = &v14[32 * v15];
    *(void *)uint64_t v14 = 0x7FEFFFFFFFFFFFFFLL;
    *((_OWORD *)v14 + 1) = 0u;
    int v10 = v14 + 32;
    uint64_t v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      uint64_t v17 = *a1;
    }
    *a1 = v14;
    a1[1] = v10;
    a1[2] = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *(void *)uint64_t v6 = 0x7FEFFFFFFFFFFFFFLL;
    *((_OWORD *)v6 + 1) = 0u;
    int v10 = v6 + 32;
  }
  uint64_t v20 = a1[5];
  a1[1] = v10;
  uint64_t v21 = a1[3];
  a1[4] = v21;
  uint64_t v22 = a1[12];
  if (v21 >= v20)
  {
    uint64_t v24 = v20 - v21;
    uint64_t v25 = v24 >> 4;
    if ((unint64_t)(v24 >> 4) <= 1) {
      uint64_t v25 = 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v26 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    uint64_t v27 = (char *)sub_20B06C71C((uint64_t)(a1 + 5), v26);
    uint64_t v29 = &v27[32 * v28];
    *(void *)uint64_t v27 = v22;
    *((_OWORD *)v27 + 1) = 0u;
    uint64_t v23 = v27 + 32;
    uint64_t v31 = a1[3];
    uint64_t v30 = a1[4];
    if (v30 != v31)
    {
      do
      {
        long long v32 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v27 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v27 - 1) = v32;
        v27 -= 32;
        v30 -= 32;
      }
      while (v30 != v31);
      uint64_t v30 = a1[3];
    }
    a1[3] = v27;
    a1[4] = v23;
    a1[5] = v29;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *(void *)uint64_t v21 = v22;
    *((_OWORD *)v21 + 1) = 0u;
    uint64_t v23 = v21 + 32;
  }
  uint64_t v33 = a1[8];
  a1[4] = v23;
  uint64_t v34 = a1[6];
  a1[7] = v34;
  uint64_t v35 = a1[12];
  if (v34 >= v33)
  {
    uint64_t v37 = v33 - v34;
    uint64_t v38 = v37 >> 4;
    if ((unint64_t)(v37 >> 4) <= 1) {
      uint64_t v38 = 1;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v38;
    }
    uint64_t v40 = (char *)sub_20B06C71C((uint64_t)(a1 + 8), v39);
    uint64_t v42 = &v40[32 * v41];
    *(void *)uint64_t v40 = v35;
    *((_OWORD *)v40 + 1) = 0u;
    uint64_t v36 = v40 + 32;
    uint64_t v44 = a1[6];
    uint64_t v43 = a1[7];
    if (v43 != v44)
    {
      do
      {
        long long v45 = *((_OWORD *)v43 - 1);
        *((_OWORD *)v40 - 2) = *((_OWORD *)v43 - 2);
        *((_OWORD *)v40 - 1) = v45;
        v40 -= 32;
        v43 -= 32;
      }
      while (v43 != v44);
      uint64_t v43 = a1[6];
    }
    a1[6] = v40;
    a1[7] = v36;
    a1[8] = v42;
    if (v43) {
      operator delete(v43);
    }
  }
  else
  {
    *(void *)uint64_t v34 = v35;
    *((_OWORD *)v34 + 1) = 0u;
    uint64_t v36 = v34 + 32;
  }
  uint64_t v46 = a1[11];
  a1[7] = v36;
  uint64_t v47 = a1[9];
  a1[10] = v47;
  uint64_t v48 = a1[12];
  if (v47 >= v46)
  {
    uint64_t v55 = v46 - v47;
    uint64_t v56 = v55 >> 4;
    if ((unint64_t)(v55 >> 4) <= 1) {
      uint64_t v56 = 1;
    }
    if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v56;
    }
    uint64_t v58 = (char *)sub_20B06C71C((uint64_t)(a1 + 11), v57);
    uint64_t v60 = &v58[32 * v59];
    *(void *)uint64_t v58 = v48;
    __asm { FMOV            V0.4S, #1.0 }
    *((_OWORD *)v58 + 1) = _Q0;
    uint64_t v54 = v58 + 32;
    uint64_t v63 = a1[9];
    uint64_t v62 = a1[10];
    if (v62 != v63)
    {
      do
      {
        long long v64 = *((_OWORD *)v62 - 1);
        *((_OWORD *)v58 - 2) = *((_OWORD *)v62 - 2);
        *((_OWORD *)v58 - 1) = v64;
        v58 -= 32;
        v62 -= 32;
      }
      while (v62 != v63);
      uint64_t v62 = a1[9];
    }
    a1[9] = v58;
    a1[10] = v54;
    a1[11] = v60;
    if (v62) {
      operator delete(v62);
    }
  }
  else
  {
    *(void *)uint64_t v47 = v48;
    __asm { FMOV            V0.4S, #1.0 }
    *((_OWORD *)v47 + 1) = _Q0;
    uint64_t v54 = v47 + 32;
  }
  a1[10] = v54;
}

uint64_t sub_20B06C6C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_20B06C6F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void *sub_20B06C71C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_20B05D178();
  }
  return operator new(32 * a2);
}

void sub_20B06C754(void *a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v7 = a1;
  unint64_t v8 = v7;
  uint64_t v92 = a2;
  if (!a3)
  {
    sub_20B07F8E0(a4, "");
    goto LABEL_214;
  }
  id v70 = v7;
  uint64_t v71 = a4;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v89 = 0u;
  v87[0] = 0;
  v87[1] = 0;
  uint64_t v88 = 0;
  id v69 = objc_alloc_init(MEMORY[0x263EFF9C0]);
  unint64_t v9 = (unint64_t)&a2[a3];
  uint64_t v10 = 0;
  uint64_t v72 = *(void *)(MEMORY[0x263F8C2C0] + 24);
  uint64_t v73 = *MEMORY[0x263F8C2C0];
  uint64_t v11 = &v86[8];
  do
  {
    memset(v86, 0, 160);
    long long v84 = 0u;
    long long v85 = 0u;
    memset(v83, 0, sizeof(v83));
    long long v81 = 0u;
    long long v82 = 0u;
    sub_20B06D6CC(&v92, v9, (std::string *)__str);
    sub_20B06D838((uint64_t *)&v81, (const std::string *)__str, 8);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    __p = 0;
    unint64_t v79 = 0;
    uint64_t v80 = 0;
    sub_20B06D9BC((uint64_t *)&v81, (uint64_t)&__p);
    if ((SHIBYTE(v80) & 0x80000000) == 0)
    {
      int v12 = 3;
      if (!HIBYTE(v80)) {
        goto LABEL_191;
      }
      int v13 = __p;
      if (__p == 35) {
        goto LABEL_191;
      }
      if (HIBYTE(v80) != 1)
      {
        if (HIBYTE(v80) == 2)
        {
          p_p = &__p;
          goto LABEL_89;
        }
        if (HIBYTE(v80) == 6)
        {
          if (__p == 1819047021 && WORD2(__p) == 25193) {
            goto LABEL_39;
          }
          if (__p == 1835365237 && WORD2(__p) == 27764)
          {
LABEL_83:
            sub_20B06D9BC((uint64_t *)&v81, (uint64_t)v87);
            unint64_t v34 = v91;
            if ((void)v91 == *((void *)&v90 + 1))
            {
              memset(__str, 0, sizeof(__str));
              if ((unint64_t)v91 >= *((void *)&v91 + 1))
              {
                unint64_t v34 = sub_20B0808EC((uint64_t *)&v90 + 1, (uint64_t)__str);
                *(void *)&long long v91 = v34;
                if (*(void *)&__str[8])
                {
                  *(void *)&__str[16] = *(void *)&__str[8];
                  operator delete(*(void **)&__str[8]);
                  unint64_t v34 = v91;
                }
              }
              else
              {
                *(_DWORD *)long long v91 = 0;
                *(void *)(v34 + 16) = 0;
                *(void *)(v34 + 24) = 0;
                *(void *)(v34 + 8) = 0;
                *(_OWORD *)(v34 + 8) = *(_OWORD *)&__str[8];
                *(void *)(v34 + 24) = *(void *)&__str[24];
                v34 += 32;
                *(void *)&long long v91 = v34;
              }
            }
            if (!*(_DWORD *)(v34 - 32)) {
              goto LABEL_190;
            }
            if (v34 >= *((void *)&v91 + 1))
            {
              uint64_t v56 = (uint64_t)(v34 - *((void *)&v90 + 1)) >> 5;
              if ((unint64_t)(v56 + 1) >> 59) {
                sub_20B05D0BC();
              }
              unint64_t v57 = (uint64_t)(*((void *)&v91 + 1) - *((void *)&v90 + 1)) >> 4;
              if (v57 <= v56 + 1) {
                unint64_t v57 = v56 + 1;
              }
              if (*((void *)&v91 + 1) - *((void *)&v90 + 1) >= 0x7FFFFFFFFFFFFFE0uLL) {
                unint64_t v58 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v57;
              }
              uint64_t v94 = (char *)&v91 + 8;
              uint64_t v59 = (char *)sub_20B06C71C((uint64_t)&v91 + 8, v58);
              uint64_t v54 = v10;
              uint64_t v60 = &v59[32 * v56];
              *(void *)__str = v59;
              *(void *)&__str[8] = v60;
              *(void *)&__str[24] = &v59[32 * v61];
              *(_DWORD *)uint64_t v60 = 0;
              *((void *)v60 + 2) = 0;
              *((void *)v60 + 3) = 0;
              *((void *)v60 + 1) = 0;
              *(void *)&__str[16] = v60 + 32;
              sub_20B0809E0((uint64_t *)&v90 + 1, __str);
              unint64_t v55 = v91;
              sub_20B080B84((uint64_t)__str);
            }
            else
            {
              uint64_t v54 = v10;
              *(_DWORD *)unint64_t v34 = 0;
              unint64_t v55 = v34 + 32;
              *(void *)(v34 + 16) = 0;
              *(void *)(v34 + 24) = 0;
              *(void *)(v34 + 8) = 0;
            }
            int v12 = 0;
            *(void *)&long long v91 = v55;
            uint64_t v10 = v54;
LABEL_191:
            if (SHIBYTE(v80) < 0) {
              goto LABEL_192;
            }
            goto LABEL_193;
          }
          goto LABEL_19;
        }
        goto LABEL_90;
      }
      if (__p == 115) {
        goto LABEL_191;
      }
      if (__p == 103)
      {
LABEL_52:
        memset(&v77, 0, sizeof(v77));
        sub_20B06D9BC((uint64_t *)&v81, (uint64_t)&v77);
        uint64_t v24 = v91;
        if ((unint64_t)v91 >= *((void *)&v91 + 1))
        {
          uint64_t v25 = (uint64_t)(v91 - *((void *)&v90 + 1)) >> 5;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 59) {
            sub_20B05D0BC();
          }
          uint64_t v27 = *((void *)&v91 + 1) - *((void *)&v90 + 1);
          if ((uint64_t)(*((void *)&v91 + 1) - *((void *)&v90 + 1)) >> 4 > v26) {
            unint64_t v26 = v27 >> 4;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
LABEL_186:
          uint64_t v94 = (char *)&v91 + 8;
          long long v64 = (char *)sub_20B06C71C((uint64_t)&v91 + 8, v28);
          uint64_t v65 = &v64[32 * v25];
          *(void *)__str = v64;
          *(void *)&__str[8] = v65;
          *(void *)&__str[24] = &v64[32 * v66];
          *(_DWORD *)uint64_t v65 = 0;
          *((void *)v65 + 2) = 0;
          *((void *)v65 + 3) = 0;
          *((void *)v65 + 1) = 0;
          *(void *)&__str[16] = v65 + 32;
          sub_20B0809E0((uint64_t *)&v90 + 1, __str);
          uint64_t v29 = v91;
          sub_20B080B84((uint64_t)__str);
          goto LABEL_187;
        }
        goto LABEL_66;
      }
LABEL_62:
      if (v13 == 111) {
        goto LABEL_65;
      }
LABEL_19:
      if (HIBYTE(v80) == 1 && v13 == 118)
      {
LABEL_76:
        *(_DWORD *)__str = 0;
        HIDWORD(v76) = 0;
        LODWORD(v77.__r_.__value_.__l.__data_) = 0;
        MEMORY[0x210532400](&v81, __str);
        MEMORY[0x210532400](&v81, &v77);
        MEMORY[0x210532400](&v81, (char *)&v76 + 4);
        LODWORD(v89) = v89 + 1;
        if ((*((unsigned char *)v83 + *(void *)(v81 - 24)) & 2) == 0)
        {
          uint64_t v31 = v10;
          LODWORD(v76) = 0;
          uint64_t v75 = 0;
          MEMORY[0x210532400](&v81, &v76);
          int v32 = *(_DWORD *)((char *)v83 + *(void *)(v81 - 24));
          MEMORY[0x210532400](&v81, (char *)&v75 + 4);
          int v33 = *(_DWORD *)((char *)v83 + *(void *)(v81 - 24));
          MEMORY[0x210532400](&v81, &v75);
          int v74 = 1065353216;
          if ((*((unsigned char *)v83 + *(void *)(v81 - 24)) & 2) == 0) {
            MEMORY[0x210532400](&v81, &v74);
          }
          if (((v33 | v32) & 2) == 0 && v89 - 1 == DWORD1(v89)) {
            DWORD1(v89) = v89;
          }
          uint64_t v10 = v31;
        }
        goto LABEL_190;
      }
      goto LABEL_90;
    }
    int v12 = 3;
    if (*(unsigned char *)__p == 35) {
      goto LABEL_191;
    }
    unint64_t v16 = v79;
    if (!v79) {
      goto LABEL_191;
    }
    if (v79 >= 0x801)
    {
      sub_20B07F8E0(v71, "lines in file too long to parse");
      int v12 = 1;
      goto LABEL_191;
    }
    if (v79 == 1)
    {
      if (*(unsigned char *)__p == 115) {
        goto LABEL_191;
      }
      int v23 = *(unsigned __int8 *)__p;
      if (v23 == 103) {
        goto LABEL_52;
      }
      if ((v80 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v80) != 1) {
          goto LABEL_90;
        }
        int v13 = __p;
        goto LABEL_62;
      }
      if (v23 == 111)
      {
LABEL_65:
        memset(&v77, 0, sizeof(v77));
        sub_20B06D9BC((uint64_t *)&v81, (uint64_t)&v77);
        uint64_t v24 = v91;
        if ((unint64_t)v91 >= *((void *)&v91 + 1))
        {
          uint64_t v25 = (uint64_t)(v91 - *((void *)&v90 + 1)) >> 5;
          unint64_t v62 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 59) {
            sub_20B05D0BC();
          }
          uint64_t v63 = *((void *)&v91 + 1) - *((void *)&v90 + 1);
          if ((uint64_t)(*((void *)&v91 + 1) - *((void *)&v90 + 1)) >> 4 > v62) {
            unint64_t v62 = v63 >> 4;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v62;
          }
          goto LABEL_186;
        }
LABEL_66:
        *(_DWORD *)uint64_t v24 = 0;
        uint64_t v29 = v24 + 32;
        *(void *)(v24 + 16) = 0;
        *(void *)(v24 + 24) = 0;
        *(void *)(v24 + 8) = 0;
LABEL_187:
        *(void *)&long long v91 = v29;
        if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_190:
          int v12 = 0;
          goto LABEL_191;
        }
        uint64_t v22 = (void *)v77.__r_.__value_.__r.__words[0];
LABEL_189:
        operator delete(v22);
        goto LABEL_190;
      }
      unint64_t v16 = v79;
    }
    else if (v79 == 6 && *(_DWORD *)__p == 1819047021 && *((_WORD *)__p + 2) == 25193)
    {
LABEL_39:
      memset(__str, 0, 24);
      std::stringbuf::str();
      std::string::size_type v19 = std::string::find((const std::string *)__str, 35, 0);
      if (v19 != -1)
      {
        std::string::basic_string(&v77, (const std::string *)__str, 0, v19, (std::allocator<char> *)((char *)&v76 + 4));
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        *(std::string *)__str = v77;
      }
      unint64_t v20 = __str[23];
      char v21 = __str[23];
      if (__str[23] < 0) {
        unint64_t v20 = *(void *)&__str[8];
      }
      if (v20 >= 8)
      {
        std::string::basic_string(&v77, (const std::string *)__str, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)((char *)&v76 + 4));
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        *(std::string *)__str = v77;
        char v21 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      }
      if ((v21 & 0x80) == 0) {
        goto LABEL_190;
      }
      uint64_t v22 = *(void **)__str;
      goto LABEL_189;
    }
    if (v16 == 6)
    {
      if (*(_DWORD *)__p == 1835365237 && *((_WORD *)__p + 2) == 27764) {
        goto LABEL_83;
      }
      unint64_t v16 = v79;
    }
    if (v16 == 1)
    {
      if (*(unsigned char *)__p == 118) {
        goto LABEL_76;
      }
      unint64_t v16 = v79;
    }
    if (v16 == 2)
    {
      p_p = __p;
LABEL_89:
      if (*p_p == 25462)
      {
        *(_DWORD *)__str = 0;
        LODWORD(v77.__r_.__value_.__l.__data_) = 0;
        uint64_t v76 = 0;
        MEMORY[0x210532400](&v81, __str);
        MEMORY[0x210532400](&v81, &v77);
        MEMORY[0x210532400](&v81, (char *)&v76 + 4);
        MEMORY[0x210532400](&v81, &v76);
        int v12 = 0;
        ++DWORD1(v89);
        goto LABEL_191;
      }
    }
LABEL_90:
    if (sub_20B06DC90(&__p, "vt"))
    {
      *(_DWORD *)__str = 0;
      LODWORD(v77.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x210532400](&v81, __str);
      MEMORY[0x210532400](&v81, &v77);
      ++DWORD2(v89);
      if ((*((unsigned char *)v83 + *(void *)(v81 - 24)) & 2) == 0)
      {
        MEMORY[0x210532400](&v81, __str);
        if ((*((unsigned char *)v83 + *(void *)(v81 - 24)) & 2) == 0)
        {
          MEMORY[0x210532400](&v81, &v77);
          ++HIDWORD(v89);
        }
      }
      goto LABEL_190;
    }
    if (sub_20B06DC90(&__p, "vt2"))
    {
      *(_DWORD *)__str = 0;
      LODWORD(v77.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x210532400](&v81, __str);
      MEMORY[0x210532400](&v81, &v77);
      int v12 = 0;
      ++HIDWORD(v89);
      goto LABEL_191;
    }
    if (sub_20B06DC90(&__p, "vn"))
    {
      *(_DWORD *)__str = 0;
      HIDWORD(v76) = 0;
      LODWORD(v77.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x210532400](&v81, __str);
      MEMORY[0x210532400](&v81, &v77);
      MEMORY[0x210532400](&v81, (char *)&v76 + 4);
      int v12 = 0;
      LODWORD(v90) = v90 + 1;
      goto LABEL_191;
    }
    if (sub_20B06DC90(&__p, "f"))
    {
      if ((void)v91 == *((void *)&v90 + 1))
      {
        memset(__str, 0, sizeof(__str));
        sub_20B06DD24((uint64_t *)&v90 + 1, (uint64_t)__str);
        if (*(void *)&__str[8])
        {
          *(void *)&__str[16] = *(void *)&__str[8];
          operator delete(*(void **)&__str[8]);
        }
      }
      if ((*((unsigned char *)v83 + *(void *)(v81 - 24)) & 2) != 0) {
        goto LABEL_190;
      }
      uint64_t v68 = v11;
      int v35 = 0;
      while (2)
      {
        memset(__str, 0, 24);
        sub_20B06D9BC((uint64_t *)&v81, (uint64_t)__str);
        uint64_t v36 = v10;
        if ((__str[23] & 0x80000000) == 0)
        {
          uint64_t v37 = __str[23];
          if (__str[23])
          {
            uint64_t v38 = __str;
            goto LABEL_110;
          }
          uint64_t v10 = v36;
LABEL_156:
          if ((*((unsigned char *)v83 + *(void *)(v81 - 24)) & 2) != 0)
          {
            int v12 = 0;
            if ((v35 - 3) >= 0xFFFFFFFE) {
              *(_DWORD *)(v91 - 32) -= v35;
            }
            uint64_t v11 = v68;
            goto LABEL_191;
          }
          continue;
        }
        break;
      }
      uint64_t v37 = *(void *)&__str[8];
      if (*(void *)&__str[8])
      {
        uint64_t v38 = *(const char **)__str;
LABEL_110:
        int v39 = strtol(v38, 0, 10);
        int v40 = *(unsigned __int8 *)v38;
        uint64_t v41 = v38;
        if (v40 == 45)
        {
          uint64_t v41 = v38 + 1;
          int v40 = *((unsigned __int8 *)v38 + 1);
        }
        if ((v40 - 48) <= 9)
        {
          do
          {
            int v42 = *(unsigned __int8 *)++v41;
            int v40 = v42;
          }
          while ((v42 - 48) < 0xA);
        }
        uint64_t v43 = (unsigned __int8 *)&v38[v37];
        if (v43 > (unsigned __int8 *)v41)
        {
          if (v40 == 47) {
            uint64_t v44 = v41 + 1;
          }
          else {
            uint64_t v44 = v41;
          }
          if (v43 > (unsigned __int8 *)v44)
          {
            if (*v44 == 47)
            {
              ++v44;
            }
            else
            {
              strtol(v44, 0, 10);
              int v45 = *(unsigned __int8 *)v44;
              if (v45 == 45)
              {
                int v46 = *(unsigned __int8 *)++v44;
                int v45 = v46;
              }
              if ((v45 - 48) <= 9)
              {
                do
                {
                  int v47 = *(unsigned __int8 *)++v44;
                  int v45 = v47;
                }
                while ((v47 - 48) < 0xA);
              }
              if (v45 == 47) {
                ++v44;
              }
            }
          }
          if (v43 > (unsigned __int8 *)v44)
          {
            if (*v44 == 47)
            {
              ++v44;
            }
            else
            {
              strtol(v44, 0, 10);
              int v48 = *(unsigned __int8 *)v44;
              if (v48 == 45)
              {
                int v49 = *(unsigned __int8 *)++v44;
                int v48 = v49;
              }
              if ((v48 - 48) <= 9)
              {
                do
                {
                  int v50 = *(unsigned __int8 *)++v44;
                  int v48 = v50;
                }
                while ((v50 - 48) < 0xA);
              }
              if (v48 == 47) {
                ++v44;
              }
            }
          }
          if (v43 > (unsigned __int8 *)v44)
          {
            if (*v44 == 47) {
              uint64_t v51 = v44 + 1;
            }
            else {
              uint64_t v51 = v44;
            }
            strtol(v51, 0, 10);
          }
        }
        if (v89) {
          BOOL v52 = (int)v89 < v39;
        }
        else {
          BOOL v52 = 1;
        }
        if (v52)
        {
          uint64_t v10 = v36;
        }
        else
        {
          uint64_t v10 = v36;
          if (v39 >= 1 && v89 >= v39 || v39 < 0 && v39 >= -(int)v89)
          {
            ++*(_DWORD *)(v91 - 32);
            ++v35;
          }
        }
        if ((__str[23] & 0x80000000) == 0) {
          goto LABEL_156;
        }
      }
      else
      {
        uint64_t v10 = v36;
      }
      operator delete(*(void **)__str);
      goto LABEL_156;
    }
    if (sub_20B06DC90(&__p, "p") || sub_20B06DC90(&__p, "l") || sub_20B06DC90(&__p, "t")) {
      goto LABEL_190;
    }
    if (SHIBYTE(v80) < 0)
    {
      if (v79 > 1)
      {
        uint64_t v53 = (char *)__p + 1;
LABEL_202:
        int v12 = 0;
        if (*v53 == 32) {
          uint64_t v10 = v10;
        }
        else {
          uint64_t v10 = (v10 + 1);
        }
        goto LABEL_191;
      }
      int v12 = 0;
LABEL_192:
      operator delete(__p);
      goto LABEL_193;
    }
    uint64_t v53 = (char *)&__p + 1;
    if (HIBYTE(v80) > 1u) {
      goto LABEL_202;
    }
    int v12 = 0;
LABEL_193:
    *(void *)&long long v81 = v73;
    *(void *)((char *)&v81 + *(void *)(v73 - 24)) = v72;
    *(void *)&long long v82 = MEMORY[0x263F8C318] + 16;
    if (SBYTE7(v85) < 0) {
      operator delete((void *)v84);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x2105325E0](v11);
    if (v12 != 3 && v12) {
      goto LABEL_210;
    }
  }
  while (v9 > (unint64_t)v92 && (int)v10 < 200);
  if ((int)v10 <= 199) {
    uint64_t v67 = "";
  }
  else {
    uint64_t v67 = "Too much unrecognized data in file, can't parse";
  }
  sub_20B07F8E0(v71, v67);
LABEL_210:

  if (SHIBYTE(v88) < 0) {
    operator delete(v87[0]);
  }
  *(void *)&long long v81 = (char *)&v90 + 8;
  sub_20B077A70((void ***)&v81);
  unint64_t v8 = v70;
LABEL_214:
}

void sub_20B06D57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  sub_20B06DD8C((uint64_t)&a35);

  if (*(char *)(v36 - 209) < 0) {
    operator delete(*(void **)(v35 + 280));
  }
  a35 = a15;
  sub_20B077A70((void ***)&a35);

  _Unwind_Resume(a1);
}

void sub_20B06D6CC(const std::string::value_type **a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = *a1;
  memset(&v12, 0, sizeof(v12));
  while ((unint64_t)v6 < a2)
  {
    uint64_t v7 = 0;
    unsigned int v8 = a2 - v6;
    while (v6[v7] != 10)
    {
      *a1 = &v6[++v7];
      if (a2 - (void)v6 == v7)
      {
        unint64_t v9 = (const std::string::value_type *)a2;
        goto LABEL_8;
      }
    }
    unint64_t v9 = &v6[v7];
    unsigned int v8 = v7;
LABEL_8:
    if ((unint64_t)(v9 + 1) >= a2 || v9 == v6 || *(v9 - 1) != 92) {
      goto LABEL_13;
    }
    std::string::append(&v12, v6, (int)(v8 - 1));
    uint64_t v6 = *a1 + 1;
    *a1 = v6;
  }
  unsigned int v8 = 0;
  unint64_t v9 = v6;
LABEL_13:
  if ((unint64_t)v9 < a2)
  {
    unint64_t v10 = a2 - (void)v9;
    uint64_t v11 = v9 + 1;
    do
    {
      if (*(v11 - 1) != 10) {
        break;
      }
      *a1 = v11++;
      --v10;
    }
    while (v10);
  }
  std::string::append(&v12, v6, v8);
  sub_20B077928(&v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20B07F994(a3, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = v12;
  }
}

void sub_20B06D818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B06D838(uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  unint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  sub_20B07FADC(v7, a2, a3 | 8);
  return a1;
}

void sub_20B06D994(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2105325E0](v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B06D9BC(uint64_t *a1, uint64_t a2)
{
  char v20 = 0;
  MEMORY[0x2105323D0](&v20, a1, 0);
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, MEMORY[0x263F8C108]);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  uint64_t v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    uint64_t v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    std::string v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    uint64_t v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_20B06DBE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20B06DB9CLL);
  }
  __cxa_rethrow();
}

void sub_20B06DC7C(_Unwind_Exception *a1)
{
}

BOOL sub_20B06DC90(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1) {
        goto LABEL_10;
      }
      a1 = (void *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1) {
LABEL_10:
    }
      sub_20B07FA34();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t sub_20B06DD24(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_20B0808EC(a1, a2);
  }
  else
  {
    *(_DWORD *)unint64_t v3 = *(_DWORD *)a2;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = 0;
    *(void *)(v3 + 8) = 0;
    *(_OWORD *)(v3 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(v3 + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    uint64_t result = v3 + 32;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_20B06DD8C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x2105325E0](a1 + 120);
  return a1;
}

void sub_20B06DE90(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v21[2] = *MEMORY[0x263EF8340];
  id v5 = a1;
  uint64_t v8 = v5;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v9 = objc_msgSend_name(v5, v6, v7);

  if (!v9) {
    goto LABEL_6;
  }
  objc_msgSend_name(v8, v10, v11);
  id v12 = objc_claimAutoreleasedReturnValue();
  uint64_t v15 = objc_msgSend_UTF8String(v12, v13, v14);
  MEMORY[0x210532310](a3, v15);

  uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
  if (*(char *)(a3 + 23) < 0) {
    uint64_t v16 = *(void *)(a3 + 8);
  }
  if (!v16)
  {
LABEL_6:
    std::to_string(&__p, a2);
    uint64_t v17 = std::string::insert(&__p, 0, "material_");
    std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
    v21[0] = v17->__r_.__value_.__l.__size_;
    *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
    char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(void *)a3 = v18;
    *(void *)(a3 + 8) = v21[0];
    *(void *)(a3 + 15) = *(void *)((char *)v21 + 7);
    *(unsigned char *)(a3 + 23) = v19;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20B06DFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }

  _Unwind_Resume(a1);
}

void *sub_20B06E034@<X0>(uint64_t a1@<X1>, std::string *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  v59[19] = *MEMORY[0x263EF8340];
  bzero(v58, 0x230uLL);
  uint64_t v7 = MEMORY[0x263F8C310] + 64;
  v59[0] = MEMORY[0x263F8C310] + 64;
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v57 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)&v58[*(void *)(v57 - 24) - 8] = v8;
  uint64_t v9 = (std::ios_base *)&v58[*(void *)(v57 - 24) - 8];
  std::ios_base::init(v9, v58);
  uint64_t v10 = MEMORY[0x263F8C310] + 24;
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v57 = v10;
  v59[0] = v7;
  MEMORY[0x2105323A0](v58);
  std::ofstream::open();
  int v50 = *(_DWORD *)&v58[*(void *)(v57 - 24) + 24] & 5;
  if (v50)
  {
    sub_20B07F8E0(a4, "Failed to open file path.");
    goto LABEL_20;
  }
  id v12 = NSURL;
  int v13 = objc_msgSend_stringWithUTF8String_(NSString, v11, a1);
  int v49 = objc_msgSend_fileURLWithPath_(v12, v14, (uint64_t)v13);

  objc_msgSend_lastPathComponent(v49, v15, v16);
  id v47 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v17 = sub_20B07FC90(&v57, (uint64_t)"# Apple ModelI/O MTL File: ", 27);
  id v48 = v47;
  char v20 = (const char *)objc_msgSend_UTF8String(v48, v18, v19);
  size_t v21 = strlen(v20);
  uint64_t v22 = sub_20B07FC90(v17, (uint64_t)v20, v21);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  int v23 = std::locale::use_facet(&v53, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v53);
  std::ostream::put();
  std::ostream::flush();
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(void *)(*v22 - 24)));
  uint64_t v24 = std::locale::use_facet(&v53, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v53);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v27 = objc_msgSend_path(v49, v25, v26);
  uint64_t v30 = objc_msgSend_stringByDeletingLastPathComponent(v27, v28, v29);

  uint64_t v31 = *a3;
  uint64_t v52 = a3[1];
  if (*a3 != v52)
  {
    int v32 = 1;
    do
    {
      id v33 = *(id *)(v31 + 64);
      id v34 = *(id *)(v31 + 72);
      uint64_t v37 = objc_msgSend_material(v34, v35, v36);
      uint64_t v38 = sub_20B07FC90(&v57, (uint64_t)"newmtl ", 7);
      sub_20B06DE90(v37, v32, (uint64_t)&v53);
      if ((v55 & 0x80u) == 0) {
        locale = &v53;
      }
      else {
        locale = v53.__locale_;
      }
      if ((v55 & 0x80u) == 0) {
        uint64_t v40 = v55;
      }
      else {
        uint64_t v40 = v54;
      }
      uint64_t v41 = sub_20B07FC90(v38, (uint64_t)locale, v40);
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
      int v42 = std::locale::use_facet(&v56, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
      std::locale::~locale(&v56);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v55 < 0)
      {
        operator delete(v53.__locale_);
        if (!v37)
        {
LABEL_15:
          uint64_t v43 = sub_20B07FC90(&v57, (uint64_t)"Kd = 0.5 0.5 0.5", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
          uint64_t v44 = std::locale::use_facet(&v53, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
          std::locale::~locale(&v53);
          std::ostream::put();
          std::ostream::flush();
          goto LABEL_16;
        }
      }
      else if (!v37)
      {
        goto LABEL_15;
      }
      sub_20B06EC9C(v37, 0, "Kd", "map_Kd", a2, &v57, v30);
      sub_20B06EC9C(v37, 13, "Ka", "map_Ka", a2, &v57, v30);
      sub_20B06EC9C(v37, 3, "Ks", "map_Ks", a2, &v57, v30);
      sub_20B06EC9C(v37, 15, "d", "map_d", a2, &v57, v30);
      sub_20B06EC9C(v37, 22, "ao", "map_ao", a2, &v57, v30);
      sub_20B06EC9C(v37, 4, "Ns", "map_Ns", a2, &v57, v30);
      sub_20B06EC9C(v37, 14, "bump", "map_bump", a2, &v57, v30);
      sub_20B06EC9C(v37, 1, "subsurface", "map_subsurface", a2, &v57, v30);
      sub_20B06EC9C(v37, 2, "metallic", "map_metallic", a2, &v57, v30);
      sub_20B06EC9C(v37, 5, "specularTint", "map_specularTint", a2, &v57, v30);
      sub_20B06EC9C(v37, 6, "roughness", "map_roughness", a2, &v57, v30);
      sub_20B06EC9C(v37, 7, "anisotropic", "map_anisotropic", a2, &v57, v30);
      sub_20B06EC9C(v37, 8, "anisotropicRotation", "map_anisotropicRotation", a2, &v57, v30);
      sub_20B06EC9C(v37, 9, "sheen", "map_sheen", a2, &v57, v30);
      sub_20B06EC9C(v37, 10, "sheenTint", "map_sheenTint", a2, &v57, v30);
      sub_20B06EC9C(v37, 11, "clearCoat", "map_clearCoat", a2, &v57, v30);
      sub_20B06EC9C(v37, 12, "clearCoatGloss", "map_clearCoatGloss", a2, &v57, v30);
      sub_20B06EC9C(v37, 18, "objectSpaceNormal", "map_objectSpaceNormal", a2, &v57, v30);
      sub_20B06EC9C(v37, 19, "tangentSpaceNormal", "map_tangentSpaceNormal", a2, &v57, v30);
      sub_20B06EC9C(v37, 20, "displacement", "map_displacement", a2, &v57, v30);
      sub_20B06EC9C(v37, 21, "objectDisplacementScale", "map_objectDisplacementScale", a2, &v57, v30);
LABEL_16:
      std::ios_base::getloc((const std::ios_base *)&v58[*(void *)(v57 - 24) - 8]);
      int v45 = std::locale::use_facet(&v53, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      std::locale::~locale(&v53);
      std::ostream::put();
      std::ostream::flush();

      v31 += 80;
      ++v32;
    }
    while (v31 != v52);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v58[*(void *)(v57 - 24) - 8], *(_DWORD *)&v58[*(void *)(v57 - 24) + 24] | 4);
  }

LABEL_20:
  uint64_t v57 = *MEMORY[0x263F8C2B0];
  *(void *)&v58[*(void *)(v57 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x2105323B0](v58);
  std::ostream::~ostream();
  uint64_t result = (void *)MEMORY[0x2105325E0](v59);
  if (!v50) {
    return sub_20B07F8E0(a4, "");
  }
  return result;
}

void sub_20B06EAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, std::locale a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::locale a24,uint64_t a25)
{
  sub_20B06FA74(&a25);
  if (a2 == 1)
  {
    unint64_t v28 = __cxa_begin_catch(a1);
    uint64_t v29 = (char *)(*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
    sub_20B07F8E0(a16, v29);
    __cxa_end_catch();
    JUMPOUT(0x20B06EAA4);
  }
  _Unwind_Resume(a1);
}

void sub_20B06EC9C(void *a1, uint64_t a2, const char *a3, const char *a4, std::string *a5, void *a6, void *a7)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  id v106 = a1;
  id v107 = a7;
  uint64_t v11 = objc_msgSend_propertiesWithSemantic_(v106, v10, a2);
  if (v11)
  {
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    id v105 = v11;
    obuint64_t j = v11;
    uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v117, v121, 16);
    if (v15)
    {
      uint64_t v16 = *(void *)v118;
      do
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          if (*(void *)v118 != v16) {
            objc_enumerationMutation(obj);
          }
          std::string::size_type v18 = *(void **)(*((void *)&v117 + 1) + 8 * i);
          switch(objc_msgSend_type(v18, v13, v14))
          {
            case 1:
              v115[0].__locale_ = 0;
              v115[1].__locale_ = 0;
              int64_t v116 = 0;
              objc_msgSend_stringValue(v18, v19, v20);
              id v21 = objc_claimAutoreleasedReturnValue();
              int v23 = (char *)objc_msgSend_cStringUsingEncoding_(v21, v22, 4);
              sub_20B07F8E0(v115, v23);

              if (SHIBYTE(v116) < 0)
              {
                sub_20B07F994(&__p, v115[0].__locale_, (unint64_t)v115[1].__locale_);
              }
              else
              {
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v115[0].__locale_;
                __p.__r_.__value_.__r.__words[2] = v116;
              }
              sub_20B077B14(&__p, a5, &v114);
              if (SHIBYTE(v116) < 0) {
                operator delete(v115[0].__locale_);
              }
              *(_OWORD *)&v115[0].__locale_ = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
              int64_t v116 = v114.__r_.__value_.__r.__words[2];
              *((unsigned char *)&v114.__r_.__value_.__s + 23) = 0;
              v114.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              uint64_t v94 = sub_20B07FC90(a6, (uint64_t)"\t", 1);
              size_t v95 = strlen(a4);
              uint64_t v96 = sub_20B07FC90(v94, (uint64_t)a4, v95);
              uint64_t v97 = sub_20B07FC90(v96, (uint64_t)" ", 1);
              if (v116 >= 0) {
                locale = v115;
              }
              else {
                locale = v115[0].__locale_;
              }
              if (v116 >= 0) {
                uint64_t v99 = HIBYTE(v116);
              }
              else {
                uint64_t v99 = (uint64_t)v115[1].__locale_;
              }
              goto LABEL_41;
            case 2:
              v115[0].__locale_ = 0;
              v115[1].__locale_ = 0;
              int64_t v116 = 0;
              long long v82 = objc_msgSend_URLValue(v18, v19, v20);
              objc_msgSend_path(v82, v83, v84);
              id v85 = objc_claimAutoreleasedReturnValue();
              uint64_t v87 = (char *)objc_msgSend_cStringUsingEncoding_(v85, v86, 4);
              sub_20B07F8E0(v115, v87);

              if (SHIBYTE(v116) < 0)
              {
                sub_20B07F994(&__dst, v115[0].__locale_, (unint64_t)v115[1].__locale_);
              }
              else
              {
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v115[0].__locale_;
                __dst.__r_.__value_.__r.__words[2] = v116;
              }
              sub_20B077B14(&__dst, a5, &v114);
              if (SHIBYTE(v116) < 0) {
                operator delete(v115[0].__locale_);
              }
              *(_OWORD *)&v115[0].__locale_ = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
              int64_t v116 = v114.__r_.__value_.__r.__words[2];
              *((unsigned char *)&v114.__r_.__value_.__s + 23) = 0;
              v114.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              uint64_t v100 = sub_20B07FC90(a6, (uint64_t)"\t", 1);
              size_t v101 = strlen(a4);
              uint64_t v102 = sub_20B07FC90(v100, (uint64_t)a4, v101);
              uint64_t v97 = sub_20B07FC90(v102, (uint64_t)" ", 1);
              if (v116 >= 0) {
                locale = v115;
              }
              else {
                locale = v115[0].__locale_;
              }
              if (v116 >= 0) {
                uint64_t v99 = HIBYTE(v116);
              }
              else {
                uint64_t v99 = (uint64_t)v115[1].__locale_;
              }
LABEL_41:
              uint64_t v103 = sub_20B07FC90(v97, (uint64_t)locale, v99);
              std::ios_base::getloc((const std::ios_base *)((char *)v103 + *(void *)(*v103 - 24)));
              uint64_t v104 = std::locale::use_facet((const std::locale *)&v114, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v104->__vftable[2].~facet_0)(v104, 10);
              std::locale::~locale((std::locale *)&v114);
              std::ostream::put();
              std::ostream::flush();
              if (SHIBYTE(v116) < 0) {
                operator delete(v115[0].__locale_);
              }
              break;
            case 3:
              uint64_t v24 = objc_msgSend_name(v106, v19, v20);
              uint64_t v27 = objc_msgSend_name(v18, v25, v26);
              uint64_t v29 = objc_msgSend_stringByAppendingFormat_(v24, v28, @"_%@.png", v27);

              uint64_t v30 = NSURL;
              int v32 = objc_msgSend_stringWithFormat_(NSString, v31, @"%@/%@", v107, v29);
              id v34 = objc_msgSend_fileURLWithPath_(v30, v33, (uint64_t)v32);

              uint64_t v37 = objc_msgSend_textureSamplerValue(v18, v35, v36);
              uint64_t v40 = objc_msgSend_texture(v37, v38, v39);
              objc_msgSend_writeToURL_(v40, v41, (uint64_t)v34);

              int v42 = sub_20B07FC90(a6, (uint64_t)"\t", 1);
              size_t v43 = strlen(a4);
              uint64_t v44 = sub_20B07FC90(v42, (uint64_t)a4, v43);
              int v45 = sub_20B07FC90(v44, (uint64_t)" ", 1);
              id v46 = v29;
              int v49 = (const char *)objc_msgSend_UTF8String(v46, v47, v48);
              size_t v50 = strlen(v49);
              uint64_t v51 = sub_20B07FC90(v45, (uint64_t)v49, v50);
              std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(void *)(*v51 - 24)));
              uint64_t v52 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v52->__vftable[2].~facet_0)(v52, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();

              break;
            case 4:
              std::locale v53 = (CGColor *)objc_msgSend_color(v18, v19, v20);
              if (CGColorGetNumberOfComponents(v53) >= 3)
              {
                uint64_t v54 = (CGColor *)objc_msgSend_color(v18, v13, v14);
                CGColorGetComponents(v54);
                unsigned __int8 v55 = sub_20B07FC90(a6, (uint64_t)"\t", 1);
                size_t v56 = strlen(a3);
                uint64_t v57 = sub_20B07FC90(v55, (uint64_t)a3, v56);
                sub_20B07FC90(v57, (uint64_t)" ", 1);
                unint64_t v58 = (void *)std::ostream::operator<<();
                sub_20B07FC90(v58, (uint64_t)" ", 1);
                uint64_t v59 = (void *)std::ostream::operator<<();
                sub_20B07FC90(v59, (uint64_t)" ", 1);
                uint64_t v60 = (void *)std::ostream::operator<<();
                std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
                uint64_t v61 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
                ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
                std::locale::~locale(v115);
                std::ostream::put();
                std::ostream::flush();
              }
              break;
            case 5:
              objc_msgSend_floatValue(v18, v19, v20);
              unint64_t v62 = sub_20B07FC90(a6, (uint64_t)"\t", 1);
              size_t v63 = strlen(a3);
              long long v64 = sub_20B07FC90(v62, (uint64_t)a3, v63);
              sub_20B07FC90(v64, (uint64_t)" ", 1);
              uint64_t v65 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24)));
              uint64_t v66 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();
              break;
            case 6:
              objc_msgSend_float2Value(v18, v19, v20);
              uint64_t v88 = sub_20B07FC90(a6, (uint64_t)"\t", 1);
              size_t v89 = strlen(a3);
              long long v90 = sub_20B07FC90(v88, (uint64_t)a3, v89);
              sub_20B07FC90(v90, (uint64_t)" ", 1);
              long long v91 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v91, (uint64_t)" ", 1);
              uint64_t v92 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(void *)(*v92 - 24)));
              uint64_t v93 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();
              break;
            case 8:
              objc_msgSend_float4Value(v18, v19, v20);
              uint64_t v67 = sub_20B07FC90(a6, (uint64_t)"\t", 1);
              size_t v68 = strlen(a3);
              id v69 = sub_20B07FC90(v67, (uint64_t)a3, v68);
              sub_20B07FC90(v69, (uint64_t)" ", 1);
              id v70 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v70, (uint64_t)" ", 1);
              uint64_t v71 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v71, (uint64_t)" ", 1);
              uint64_t v72 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v72, (uint64_t)" ", 1);
              uint64_t v73 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v73 + *(void *)(*v73 - 24)));
              int v74 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();
              break;
            default:
              objc_msgSend_float3Value(v18, v19, v20);
              uint64_t v75 = sub_20B07FC90(a6, (uint64_t)"\t", 1);
              size_t v76 = strlen(a3);
              std::string v77 = sub_20B07FC90(v75, (uint64_t)a3, v76);
              sub_20B07FC90(v77, (uint64_t)" ", 1);
              uint64_t v78 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v78, (uint64_t)" ", 1);
              unint64_t v79 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v79, (uint64_t)" ", 1);
              uint64_t v80 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v80 + *(void *)(*v80 - 24)));
              long long v81 = std::locale::use_facet(v115, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
              std::locale::~locale(v115);
              std::ostream::put();
              std::ostream::flush();
              break;
          }
        }
        uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v117, v121, 16);
      }
      while (v15);
    }

    uint64_t v11 = v105;
  }
}

void sub_20B06F8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,std::locale a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  _Unwind_Resume(a1);
}

void *sub_20B06FA74(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2105323B0](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x2105325E0](a1 + 52);
  return a1;
}

void sub_20B06FB40(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  v138[19] = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  long long v133 = 0uLL;
  uint64_t v134 = 0;
  uint64_t v102 = v7;
  sub_20B07F8E0(&v133, "");
  memset(&__src, 0, sizeof(__src));
  sub_20B1A9238(v7, v9, v10, &__src);
  bzero(v137, 0x230uLL);
  uint64_t v11 = MEMORY[0x263F8C310] + 64;
  v138[0] = MEMORY[0x263F8C310] + 64;
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v136 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *(void *)&v137[*(void *)(v136 - 24) - 8] = v12;
  int v13 = (std::ios_base *)&v137[*(void *)(v136 - 24) - 8];
  std::ios_base::init(v13, v137);
  uint64_t v14 = MEMORY[0x263F8C310] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v136 = v14;
  v138[0] = v11;
  MEMORY[0x2105323A0](v137);
  std::ofstream::open();
  int v101 = *(_DWORD *)&v137[*(void *)(v136 - 24) + 24] & 5;
  if (v101)
  {
    sub_20B07F8E0(a4, "Failed to open file path.");
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
      sub_20B07F994(&__str, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = __src;
    }
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memset(&__p, 0, sizeof(__p));
    memset(&v129, 0, sizeof(v129));
    long long v127 = 0uLL;
    uint64_t v128 = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v17 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
    uint64_t v99 = a4;
    id v100 = v8;
    do
    {
      if (!size) {
        goto LABEL_18;
      }
      int v18 = v17[size--];
    }
    while (v18 != 46);
    if (size == -1)
    {
LABEL_18:
      char v98 = 0;
      uint64_t v97 = 0;
      std::string::operator=(&__p, &__str);
      goto LABEL_19;
    }
    std::string::basic_string((std::string *)v115, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v113);
    uint64_t v97 = *(void **)v115;
    char v98 = v115[23];
    std::string::basic_string((std::string *)v115, &__str, 0, size, (std::allocator<char> *)v113);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = *(std::string *)v115;
LABEL_19:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
    }
    memset(v115, 0, 24);
    uint64_t v20 = v115;
    sub_20B07D458((uint64_t)v115, v19 + 4);
    if (v115[23] < 0) {
      uint64_t v20 = *(unsigned char **)v115;
    }
    if (v19)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v20, p_p, v19);
    }
    strcpy(&v20[v19], ".mtl");
    if (SHIBYTE(v128) < 0) {
      operator delete((void *)v127);
    }
    long long v127 = *(_OWORD *)v115;
    uint64_t v128 = *(void *)&v115[16];
    std::string::size_type v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v23 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v22 = __p.__r_.__value_.__l.__size_;
      int v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v24 = (char *)&v23[-1].__r_.__value_.__r.__words[2] + 7;
    do
    {
      if (!v22) {
        goto LABEL_40;
      }
      int v25 = v24[v22--];
    }
    while (v25 != 47);
    if (v22 == -1)
    {
LABEL_40:
      std::string::operator=(&v129, &__p);
      goto LABEL_41;
    }
    std::string::basic_string((std::string *)v115, &__p, v22 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v113);
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    std::string v129 = *(std::string *)v115;
LABEL_41:
    uint64_t v26 = sub_20B07FC90(&v136, (uint64_t)"# Apple ModelIO OBJ File: ", 26);
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v129;
    }
    else {
      uint64_t v27 = (std::string *)v129.__r_.__value_.__r.__words[0];
    }
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v28 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v28 = v129.__r_.__value_.__l.__size_;
    }
    uint64_t v29 = sub_20B07FC90(v26, (uint64_t)v27, v28);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
    uint64_t v30 = std::locale::use_facet((const std::locale *)v115, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale((std::locale *)v115);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v31 = sub_20B07FC90(&v136, (uint64_t)"mtllib ", 7);
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v32 = &v129;
    }
    else {
      int v32 = (std::string *)v129.__r_.__value_.__r.__words[0];
    }
    if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v33 = v129.__r_.__value_.__l.__size_;
    }
    id v34 = sub_20B07FC90(v31, (uint64_t)v32, v33);
    uint64_t v35 = sub_20B07FC90(v34, (uint64_t)".mtl", 4);
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(*v35 - 24)));
    uint64_t v36 = std::locale::use_facet((const std::locale *)v115, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
    std::locale::~locale((std::locale *)v115);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v125 = 0;
    uint64_t v124 = 0;
    uint64_t v126 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    id v37 = v8;
    uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v120, v135, 16);
    if (v39)
    {
      uint64_t v40 = *(void *)v121;
      uint64_t v41 = (__n128 *)MEMORY[0x263EF89A8];
      do
      {
        for (uint64_t i = 0; i != v39; ++i)
        {
          if (*(void *)v121 != v40) {
            objc_enumerationMutation(v37);
          }
          size_t v43 = *(void **)(*((void *)&v120 + 1) + 8 * i);
          sub_20B1A9310(a1, &v124, v43, *v41, v41[1], v41[2], v41[3]);
          sub_20B1A97B8(a1, &v124, v43, *v41, v41[1], v41[2], v41[3]);
        }
        uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v44, (uint64_t)&v120, v135, 16);
      }
      while (v39);
    }

    memset(&v119, 0, sizeof(v119));
    id v47 = objc_msgSend_URL(v37, v45, v46);
    BOOL v48 = v47 == 0;

    if (!v48)
    {
      uint64_t v51 = objc_msgSend_URL(v37, v49, v50);
      objc_msgSend_path(v51, v52, v53);
      id v54 = objc_claimAutoreleasedReturnValue();
      uint64_t v56 = objc_msgSend_cStringUsingEncoding_(v54, v55, 4);
      MEMORY[0x210532310](&v119, v56);

      uint64_t v57 = &v119;
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        std::string::size_type v58 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      }
      else
      {
        std::string::size_type v58 = v119.__r_.__value_.__l.__size_;
        uint64_t v57 = (std::string *)v119.__r_.__value_.__r.__words[0];
      }
      uint64_t v59 = (char *)&v57[-1].__r_.__value_.__r.__words[2] + 7;
      while (v58)
      {
        int v60 = v59[v58--];
        if (v60 == 47) {
          goto LABEL_69;
        }
      }
      std::string::size_type v58 = -1;
LABEL_69:
      std::string::basic_string((std::string *)v115, &v119, 0, v58, (std::allocator<char> *)v113);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v119.__r_.__value_.__l.__data_);
      }
      std::string v119 = *(std::string *)v115;
    }
    if (v128 >= 0) {
      uint64_t v61 = &v127;
    }
    else {
      uint64_t v61 = (long long *)v127;
    }
    sub_20B06E034((uint64_t)v61, &v119, &v124, v115);
    if (SHIBYTE(v134) < 0) {
      operator delete((void *)v133);
    }
    long long v133 = *(_OWORD *)v115;
    uint64_t v134 = *(void *)&v115[16];
    v118[1] = 0;
    v118[0] = 0;
    long long v117 = v118;
    memset(v115, 0, sizeof(v115));
    uint64_t v116 = 1065353216;
    memset(v113, 0, sizeof(v113));
    uint64_t v114 = 1065353216;
    memset(v111, 0, sizeof(v111));
    uint64_t v112 = 1065353216;
    memset(v109, 0, sizeof(v109));
    uint64_t v110 = 1065353216;
    if (v125 != v124)
    {
      uint64_t v62 = v124;
      id v103 = *(id *)(v124 + 64);
      id v104 = *(id *)(v62 + 72);
      uint64_t v65 = objc_msgSend_name(v104, v63, v64);
      LODWORD(v62) = v65 == 0;

      if (v62)
      {
        sub_20B07FC90(&v136, (uint64_t)"g mesh_", 7);
        uint64_t v86 = (std::locale::id *)MEMORY[0x263F8C108];
        uint64_t v87 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24)));
        uint64_t v88 = std::locale::use_facet(&v106, v86);
        ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
        std::locale::~locale(&v106);
        std::ostream::put();
        std::ostream::flush();
      }
      else
      {
        id v107 = 0;
        v106.__locale_ = 0;
        uint64_t v108 = 0;
        objc_msgSend_name(v104, v66, v67);
        id v68 = objc_claimAutoreleasedReturnValue();
        uint64_t v71 = (char *)objc_msgSend_UTF8String(v68, v69, v70);
        sub_20B07F8E0(&v106, v71);

        v105.__locale_ = (std::locale::__imp *)&v106;
        if (v118 == (char **)sub_20B080D50((uint64_t)&v117, (const void **)&v106.__locale_))
        {
          *((_DWORD *)sub_20B080DE0((uint64_t **)&v117, (const void **)&v106.__locale_, (uint64_t)&unk_20B1E7420, (long long **)&v105)+ 14) = 0;
          size_t v89 = sub_20B07FC90(&v136, (uint64_t)"g ", 2);
          objc_msgSend_name(v104, v90, v91);
          id v76 = objc_claimAutoreleasedReturnValue();
          uint64_t v94 = (const char *)objc_msgSend_UTF8String(v76, v92, v93);
          uint64_t v80 = (std::locale::id *)MEMORY[0x263F8C108];
          uint64_t v95 = (uint64_t)v94;
          size_t v96 = strlen(v94);
          uint64_t v84 = sub_20B07FC90(v89, v95, v96);
        }
        else
        {
          uint64_t v72 = sub_20B080DE0((uint64_t **)&v117, (const void **)&v106.__locale_, (uint64_t)&unk_20B1E7420, (long long **)&v105);
          ++*((_DWORD *)v72 + 14);
          uint64_t v73 = sub_20B07FC90(&v136, (uint64_t)"g ", 2);
          objc_msgSend_name(v104, v74, v75);
          id v76 = objc_claimAutoreleasedReturnValue();
          unint64_t v79 = (const char *)objc_msgSend_UTF8String(v76, v77, v78);
          uint64_t v80 = (std::locale::id *)MEMORY[0x263F8C108];
          uint64_t v81 = (uint64_t)v79;
          size_t v82 = strlen(v79);
          uint64_t v83 = sub_20B07FC90(v73, v81, v82);
          sub_20B07FC90(v83, (uint64_t)"_", 1);
          v105.__locale_ = (std::locale::__imp *)&v106;
          sub_20B080DE0((uint64_t **)&v117, (const void **)&v106.__locale_, (uint64_t)&unk_20B1E7420, (long long **)&v105);
          uint64_t v84 = (void *)std::ostream::operator<<();
        }
        std::ios_base::getloc((const std::ios_base *)((char *)v84 + *(void *)(*v84 - 24)));
        id v85 = std::locale::use_facet(&v105, v80);
        ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
        std::locale::~locale(&v105);
        std::ostream::put();
        std::ostream::flush();

        if (SHIBYTE(v108) < 0) {
          operator delete(v106.__locale_);
        }
      }
      v103;
      operator new();
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)&v137[*(void *)(v136 - 24) - 8], *(_DWORD *)&v137[*(void *)(v136 - 24) + 24] | 4);
    }

    sub_20B080CC8((uint64_t)v109);
    sub_20B05F1D0((uint64_t)v111);
    sub_20B05F1D0((uint64_t)v113);
    sub_20B05F1D0((uint64_t)v115);
    sub_20B07F87C((uint64_t)&v117, v118[0]);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v119.__r_.__value_.__l.__data_);
    }
    *(void *)uint64_t v115 = &v124;
    sub_20B080C18((void ***)v115);
    a4 = v99;
    if (v98 < 0) {
      operator delete(v97);
    }
    id v8 = v100;
    if (SHIBYTE(v128) < 0) {
      operator delete((void *)v127);
    }
    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v129.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v136 = *MEMORY[0x263F8C2B0];
  *(void *)&v137[*(void *)(v136 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x2105323B0](v137);
  std::ostream::~ostream();
  MEMORY[0x2105325E0](v138);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__src.__r_.__value_.__l.__data_);
  }
  if (!v101)
  {
    *(_OWORD *)a4 = v133;
    a4[2] = v134;
    uint64_t v134 = 0;
    long long v133 = 0uLL;
  }
  if (SHIBYTE(v134) < 0) {
    operator delete((void *)v133);
  }
}

void sub_20B073B00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13, char a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,void *a60,uint64_t a61,void *a62,void *a63)
{
  sub_20B05F1D0((uint64_t)&STACK[0x268]);
  sub_20B05F1D0((uint64_t)&STACK[0x290]);
  uint64_t v73 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v73;
    operator delete(v73);
  }
  int v74 = (void *)STACK[0x628];
  if (STACK[0x628])
  {
    STACK[0x630] = (unint64_t)v74;
    operator delete(v74);
  }
  uint64_t v75 = (void *)STACK[0x650];
  if (STACK[0x650])
  {
    STACK[0x658] = (unint64_t)v75;
    operator delete(v75);
  }

  id v76 = (void *)STACK[0x670];
  if (STACK[0x670])
  {
    STACK[0x678] = (unint64_t)v76;
    operator delete(v76);
  }
  std::string v77 = (void *)STACK[0x688];
  if (STACK[0x688])
  {
    STACK[0x690] = (unint64_t)v77;
    operator delete(v77);
  }
  uint64_t v78 = (void *)STACK[0x6A0];
  if (STACK[0x6A0])
  {
    STACK[0x6A8] = (unint64_t)v78;
    operator delete(v78);
  }
  unint64_t v79 = (void *)STACK[0x6B8];
  if (STACK[0x6B8])
  {
    STACK[0x6C0] = (unint64_t)v79;
    operator delete(v79);
  }

  sub_20B080CC8((uint64_t)&STACK[0x6D0]);
  sub_20B05F1D0((uint64_t)&STACK[0x700]);
  sub_20B05F1D0((uint64_t)&STACK[0x730]);
  sub_20B05F1D0((uint64_t)&STACK[0x760]);
  sub_20B07F87C((uint64_t)&STACK[0x788], (char *)STACK[0x790]);
  if (SLOBYTE(STACK[0x7B7]) < 0) {
    operator delete((void *)STACK[0x7A0]);
  }
  STACK[0x760] = (unint64_t)&STACK[0x808];
  sub_20B080C18((void ***)&STACK[0x760]);
  if (a14 < 0) {
    operator delete(a12);
  }
  if (SLOBYTE(STACK[0x837]) < 0) {
    operator delete((void *)STACK[0x820]);
  }
  if (SLOBYTE(STACK[0x857]) < 0) {
    operator delete((void *)STACK[0x840]);
  }
  if (SLOBYTE(STACK[0x877]) < 0) {
    operator delete((void *)STACK[0x860]);
  }
  if (SLOBYTE(STACK[0x897]) < 0) {
    operator delete((void *)STACK[0x880]);
  }
  sub_20B06FA74(&STACK[0x950]);
  if (SLOBYTE(STACK[0x8AF]) < 0) {
    operator delete((void *)STACK[0x898]);
  }
  if (a2 == 1)
  {
    uint64_t v80 = __cxa_begin_catch(a1);
    uint64_t v81 = (char *)(*(uint64_t (**)(void *))(*(void *)v80 + 16))(v80);
    sub_20B07F8E0(a15, v81);
    __cxa_end_catch();
    JUMPOUT(0x20B0739B0);
  }
  if (SLOBYTE(STACK[0x8C7]) < 0) {
    operator delete((void *)STACK[0x8B0]);
  }

  _Unwind_Resume(a1);
}

void sub_20B07445C(void *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, char **a9@<X8>, float32x4_t a10@<Q0>, float32x4_t a11@<Q1>, float32x4_t a12@<Q2>, float32x4_t a13@<Q3>, uint64_t a14, uint64_t a15, uint64_t a16)
{
  id v23 = a3;
  id v153 = a4;
  id v24 = a5;
  id v25 = a6;
  id v28 = a7;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  uint64_t v163 = a9;
  if (v23)
  {
    uint64_t v29 = v153;
    if (objc_msgSend_stride(v23, (const char *)v26, v27))
    {
      unint64_t v30 = objc_msgSend_bufferSize(v23, (const char *)v26, v27);
      unint64_t v162 = v30 / objc_msgSend_stride(v23, v31, v32);
      if (!v25) {
        goto LABEL_11;
      }
    }
    else
    {
      LODWORD(v162) = 0;
      if (!v25) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    LODWORD(v162) = 0;
    uint64_t v29 = v153;
    if (!v25) {
      goto LABEL_11;
    }
  }
  if (objc_msgSend_stride(v25, (const char *)v26, v27))
  {
    unint64_t v33 = objc_msgSend_bufferSize(v25, (const char *)v26, v27);
    unint64_t v158 = v33 / objc_msgSend_stride(v25, v34, v35);
    if (!v28) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
LABEL_11:
  LODWORD(v158) = 0;
  if (!v28) {
    goto LABEL_15;
  }
LABEL_12:
  if (objc_msgSend_stride(v28, (const char *)v26, v27))
  {
    unint64_t v36 = objc_msgSend_bufferSize(v28, (const char *)v26, v27);
    unint64_t v161 = v36 / objc_msgSend_stride(v28, v37, v38);
    if (!v29) {
      goto LABEL_18;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v161) = 0;
  if (!v29)
  {
LABEL_18:
    LODWORD(v149) = 0;
    goto LABEL_19;
  }
LABEL_16:
  if (!objc_msgSend_stride(v29, (const char *)v26, v27)) {
    goto LABEL_18;
  }
  unint64_t v39 = objc_msgSend_bufferSize(v29, (const char *)v26, v27);
  unint64_t v149 = v39 / objc_msgSend_stride(v29, v40, v41);
LABEL_19:
  uint64_t v160 = v24;
  uint64_t v159 = v25;
  if (v24 && objc_msgSend_stride(v24, (const char *)v26, v27))
  {
    unint64_t v42 = objc_msgSend_bufferSize(v24, (const char *)v26, v27);
    unint64_t v147 = v42 / objc_msgSend_stride(v24, v43, v44);
  }
  else
  {
    LODWORD(v147) = 0;
  }
  if (a1[1] != *a1)
  {
    unint64_t v45 = 0;
    uint64_t v145 = &v166;
    uint64_t v146 = (uint64_t)(a9 + 2);
    uint64_t v164 = v28;
    do
    {
      if (a2[9])
      {
        float32x4_t v165 = 0uLL;
        unint64_t v166 = 0;
        uint64_t v46 = objc_msgSend_stride(v23, (const char *)v26, v27);
        uint64_t v49 = objc_msgSend_stride(v28, v47, v48);
        uint64_t v52 = objc_msgSend_dataStart(v23, v50, v51);
        uint64_t v57 = objc_msgSend_dataStart(v28, v53, v54);
        int v58 = *(_DWORD *)(*a1 + 4 * v45);
        if (v58 >= (int)v162) {
          int v59 = v162 - 1;
        }
        else {
          int v59 = *(_DWORD *)(*a1 + 4 * v45);
        }
        if (v58 >= (int)v161) {
          int v60 = v161 - 1;
        }
        else {
          int v60 = *(_DWORD *)(*a1 + 4 * v45);
        }
        uint64_t v62 = v46 * (v59 & ~(v59 >> 31));
        if (v62 + 12 <= (unint64_t)objc_msgSend_bufferSize(v23, v55, v56, v145)
          && (uint64_t v63 = v49 * (v60 & ~(v60 >> 31)),
              v63 + 12 <= (unint64_t)objc_msgSend_bufferSize(v164, (const char *)v26, v27)))
        {
          v75.i32[3] = a12.i32[3];
          float32x4_t v76 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a13, a10, *(float *)(v52 + v62)), a11, *(float *)(v52 + v62 + 4)), a12, *(float *)(v52 + v62 + 8));
          uint64_t v77 = v165.i64[1];
          if (v165.i64[1] >= v166)
          {
            float32x4_t v150 = v76;
            uint64_t v79 = (v165.i64[1] - v165.i64[0]) >> 4;
            if ((unint64_t)(v79 + 1) >> 60) {
              sub_20B05D0BC();
            }
            unint64_t v80 = (uint64_t)(v166 - v165.i64[0]) >> 3;
            if (v80 <= v79 + 1) {
              unint64_t v80 = v79 + 1;
            }
            if (v166 - v165.i64[0] >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v81 = v80;
            }
            if (v81) {
              size_t v82 = (char *)sub_20B077E90((uint64_t)v145, v81);
            }
            else {
              size_t v82 = 0;
            }
            uint64_t v83 = (float32x4_t *)&v82[16 * v79];
            v75.i32[3] = v150.i32[3];
            float32x4_t *v83 = v150;
            f32 = (_OWORD *)v83[1].f32;
            uint64_t v84 = (char *)v165.i64[1];
            uint64_t v85 = v165.i64[0];
            if (v165.i64[1] != v165.i64[0])
            {
              do
              {
                float32x4_t v86 = *((float32x4_t *)v84 - 1);
                v84 -= 16;
                v75.i32[3] = v86.i32[3];
                v83[-1] = v86;
                --v83;
              }
              while (v84 != (char *)v85);
              uint64_t v84 = (char *)v165.i64[0];
            }
            v165.i64[0] = (uint64_t)v83;
            v165.i64[1] = (uint64_t)f32;
            unint64_t v166 = (unint64_t)&v82[16 * v81];
            if (v84) {
              operator delete(v84);
            }
          }
          else
          {
            *(float32x4_t *)v165.i64[1] = v76;
            f32 = (_OWORD *)(v77 + 16);
          }
          v165.i64[1] = (uint64_t)f32;
          v75.i64[0] = *(void *)(v57 + v63);
          v75.i32[2] = *(_DWORD *)(v57 + v63 + 8);
          if ((unint64_t)f32 >= v166)
          {
            float32x4_t v151 = v75;
            id v28 = v164;
            uint64_t v88 = ((uint64_t)f32 - v165.i64[0]) >> 4;
            if ((unint64_t)(v88 + 1) >> 60) {
              sub_20B05D0BC();
            }
            unint64_t v89 = (uint64_t)(v166 - v165.i64[0]) >> 3;
            if (v89 <= v88 + 1) {
              unint64_t v89 = v88 + 1;
            }
            if (v166 - v165.i64[0] >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v90 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v89;
            }
            if (v90) {
              uint64_t v91 = (char *)sub_20B077E90((uint64_t)v145, v90);
            }
            else {
              uint64_t v91 = 0;
            }
            uint64_t v92 = &v91[16 * v88];
            *(float32x4_t *)uint64_t v92 = v151;
            uint64_t v87 = (uint64_t)(v92 + 16);
            uint64_t v93 = (char *)v165.i64[1];
            uint64_t v94 = v165.i64[0];
            if (v165.i64[1] != v165.i64[0])
            {
              do
              {
                long long v95 = *((_OWORD *)v93 - 1);
                v93 -= 16;
                *((_OWORD *)v92 - 1) = v95;
                v92 -= 16;
              }
              while (v93 != (char *)v94);
              uint64_t v93 = (char *)v165.i64[0];
            }
            v165.i64[0] = (uint64_t)v92;
            v165.i64[1] = v87;
            unint64_t v166 = (unint64_t)&v91[16 * v90];
            if (v93) {
              operator delete(v93);
            }
          }
          else
          {
            float32x4_t *f32 = v75;
            uint64_t v87 = (uint64_t)(f32 + 1);
            id v28 = v164;
          }
          v165.i64[1] = v87;
          v167[0] = &v165;
          __int32 v65 = *((_DWORD *)sub_20B080074(a16, (long long **)&v165, (uint64_t)&unk_20B1E7420, (uint64_t *)v167) + 10) + 1;
          char v64 = 1;
        }
        else
        {
          char v64 = 0;
          __int32 v65 = -1;
          id v28 = v164;
        }
        if (v165.i64[0])
        {
          v165.i64[1] = v165.i64[0];
          operator delete((void *)v165.i64[0]);
        }
        if ((v64 & 1) == 0) {
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v66 = objc_msgSend_stride(v23, (const char *)v26, v27);
        uint64_t v71 = objc_msgSend_dataStart(v23, v67, v68);
        if (*(_DWORD *)(*a1 + 4 * v45) >= (int)v162) {
          int v72 = v162 - 1;
        }
        else {
          int v72 = *(_DWORD *)(*a1 + 4 * v45);
        }
        unint64_t v73 = objc_msgSend_bufferSize(v23, v69, v70, v145);
        uint64_t v74 = v66 * (v72 & ~(v72 >> 31));
        if (v74 + 12 > v73) {
          goto LABEL_115;
        }
        float32x4_t v165 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a13, a10, *(float *)(v71 + v74)), a11, *(float *)(v71 + v74 + 4)), a12, *(float *)(v71 + v74 + 8));
        v167[0] = &v165;
        __int32 v65 = sub_20B077C2C(a8, &v165, (uint64_t)&unk_20B1E7420, v167)[2].i32[0] + 1;
      }
      if (!a2[8])
      {
        __int32 v107 = -1;
        goto LABEL_83;
      }
      uint64_t v96 = objc_msgSend_dataStart(v159, (const char *)v26, v27);
      uint64_t v101 = objc_msgSend_stride(v159, v97, v98);
      if (*(_DWORD *)(*a1 + 4 * v45) >= (int)v158) {
        int v102 = v158 - 1;
      }
      else {
        int v102 = *(_DWORD *)(*a1 + 4 * v45);
      }
      unint64_t v103 = objc_msgSend_bufferSize(v159, v99, v100);
      uint64_t v105 = v101 * (v102 & ~(v102 >> 31));
      if (v105 + 12 <= v103)
      {
        uint64_t v106 = v96 + v105;
        *(uint64_t *)((char *)v165.i64 + 4) = 0;
        v165.i32[0] = 0;
        v104.i64[0] = *(void *)v106;
        v104.i32[2] = *(_DWORD *)(v106 + 8);
        float32x4_t v165 = v104;
        v167[0] = &v165;
        __int32 v107 = sub_20B080424(a15, &v165, (uint64_t)&unk_20B1E7420, v167)[2].i32[0] + 1;
LABEL_83:
        if (a2[10])
        {
          uint64_t v108 = objc_msgSend_dataStart(v153, (const char *)v26, v27);
          uint64_t v113 = objc_msgSend_stride(v153, v109, v110);
          if (*(_DWORD *)(*a1 + 4 * v45) >= (int)v149) {
            int v114 = v149 - 1;
          }
          else {
            int v114 = *(_DWORD *)(*a1 + 4 * v45);
          }
          float32x4_t v165 = 0uLL;
          unint64_t v115 = objc_msgSend_bufferSize(v153, v111, v112);
          uint64_t v118 = v113 * (v114 & ~(v114 >> 31));
          if (v118 + 8 <= v115)
          {
            std::string v119 = (__int32 *)(v108 + v118);
            v120.i64[1] = v165.i64[1];
            v165.i32[0] = *v119;
            v120.i32[0] = v165.i32[0];
            v120.i32[1] = v119[1];
            float32x4_t v165 = v120;
          }
          if (a2[11])
          {
            uint64_t v121 = objc_msgSend_dataStart(v160, v116, v117);
            uint64_t v126 = objc_msgSend_stride(v160, v122, v123);
            int v127 = *(_DWORD *)(*a1 + 4 * v45) >= (int)v147 ? v147 - 1 : *(_DWORD *)(*a1 + 4 * v45);
            unint64_t v128 = objc_msgSend_bufferSize(v160, v124, v125);
            uint64_t v129 = v126 * (v127 & ~(v127 >> 31));
            if (v129 + 8 <= v128)
            {
              v130.i64[0] = v165.i64[0];
              uint64_t v131 = *(void *)(v121 + v129);
              v130.i64[1] = v131;
              float32x4_t v165 = v130;
            }
          }
          v167[0] = &v165;
          __int32 v132 = sub_20B080688(a14, &v165, (uint64_t)&unk_20B1E7420, v167)[2].i32[0] + 1;
        }
        else
        {
          __int32 v132 = -1;
        }
        v61.i64[0] = __PAIR64__(v132, v65);
        v61.i32[2] = v107;
        uint64_t v134 = v163[1];
        unint64_t v133 = (unint64_t)v163[2];
        if ((unint64_t)v134 >= v133)
        {
          float32x4_t v152 = v61;
          uint64_t v136 = (v134 - *v163) >> 4;
          id v28 = v164;
          if ((unint64_t)(v136 + 1) >> 60) {
            sub_20B05D0BC();
          }
          uint64_t v137 = v133 - (void)*v163;
          uint64_t v138 = v137 >> 3;
          if (v137 >> 3 <= (unint64_t)(v136 + 1)) {
            uint64_t v138 = v136 + 1;
          }
          if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v138;
          }
          if (v26) {
            uint64_t v139 = (char *)sub_20B077E90(v146, v26);
          }
          else {
            uint64_t v139 = 0;
          }
          uint64_t v140 = &v139[16 * v136];
          *(float32x4_t *)uint64_t v140 = v152;
          uint64_t v135 = v140 + 16;
          uint64_t v142 = *v163;
          uint64_t v141 = v163[1];
          if (v141 == *v163)
          {
            uint64_t v144 = v163;
          }
          else
          {
            do
            {
              long long v143 = *((_OWORD *)v141 - 1);
              v141 -= 16;
              *((_OWORD *)v140 - 1) = v143;
              v140 -= 16;
            }
            while (v141 != v142);
            uint64_t v144 = v163;
            uint64_t v141 = *v163;
          }
          void *v144 = v140;
          v144[1] = v135;
          v144[2] = &v139[16 * v26];
          if (v141) {
            operator delete(v141);
          }
        }
        else
        {
          *(float32x4_t *)uint64_t v134 = v61;
          uint64_t v135 = v134 + 16;
          id v28 = v164;
        }
        v163[1] = v135;
      }
LABEL_115:
      ++v45;
    }
    while (v45 < (uint64_t)(a1[1] - *a1) >> 2);
  }
}

void sub_20B074CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  unint64_t v36 = *(void **)(v34 - 128);
  if (v36)
  {
    *(void *)(v34 - 120) = v36;
    operator delete(v36);
  }
  id v37 = *(void **)(v34 - 184);
  uint64_t v38 = *(void *)(v34 - 144);
  unint64_t v39 = *(void **)(v34 - 136);
  uint64_t v40 = *(void **)v38;
  if (*(void *)v38)
  {
    *(void *)(v38 + 8) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_20B074DB8(uint64_t result, char a2)
{
  *(void *)(result + 24) = 0;
  *(void *)(result + 16) = 0;
  *(unsigned char *)(result + 32) = a2;
  *(void *)uint64_t result = &unk_26BF4FB98;
  *(void *)(result + 8) = result + 16;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  return result;
}

uint64_t sub_20B074DEC(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4FB98;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_20B081CD8(v2);
  }
  *(void *)a1 = &unk_26BF4F688;
  sub_20B0780A4(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_20B074E64(uint64_t a1)
{
  sub_20B074DEC(a1);

  JUMPOUT(0x210532650);
}

void sub_20B074E9C(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  id v9 = a2;
  id v10 = a4;
  if (sub_20B1A908C(v9, v11, v12))
  {
    uint64_t v17 = sub_20B1A92B4(v9, v13, v14);
    if (v17)
    {
      int v18 = sub_20B1A9168(v9, v15, v16);
      if (v18)
      {
        __ptr = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        sub_20B05CF80((unint64_t *)&__ptr, (size_t)&v17->_p + 1);
        fread(__ptr, 1uLL, (size_t)v17, v18);
        *((unsigned char *)&v17->_p + (void)__ptr) = 0;
        fclose(v18);
        sub_20B075004(v9, (const std::string::value_type *)__ptr, (uint64_t)v17, v10, *a3, *(unsigned __int8 *)(a1 + 32), a5);
        if (__ptr)
        {
          uint64_t v20 = __ptr;
          operator delete(__ptr);
        }
      }
      else
      {
        sub_20B07F8E0(a5, "Could not read OBJ file");
      }
    }
    else
    {
      sub_20B07F8E0(a5, "OBJ file has no contents");
    }
  }
  else
  {
    sub_20B07F8E0(a5, "Could not open OBJ file");
  }
}

void sub_20B074FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B075004(void *a1@<X0>, const std::string::value_type *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, int a5@<W4>, int a6@<W5>, void *a7@<X8>)
{
  uint64_t v328 = *MEMORY[0x263EF8340];
  id v261 = a1;
  uint64_t v292 = a2;
  id v266 = a4;
  if (!v266)
  {
    sub_20B07F8E0(a7, "cannot import to nil asset");
    goto LABEL_559;
  }
  int v11 = 0;
  unint64_t v12 = (unint64_t)&a2[a3];
  uint64_t v286 = 0;
  long long v288 = 0u;
  long long v284 = 0u;
  long long v285 = 0u;
  long long v282 = 0u;
  long long v283 = 0u;
  int v13 = &v313;
  long long v280 = 0u;
  long long v281 = 0u;
  long long v279 = 0u;
  v287 = (uint64_t *)&v288;
  unint64_t v290 = 0;
  unint64_t v291 = 0;
  uint64_t v289 = 0;
  memset(&__str, 0, sizeof(__str));
  v272 = (void *)*MEMORY[0x263F8C2C0];
  v268 = *(void **)(MEMORY[0x263F8C2C0] + 24);
  v262 = a7;
  do
  {
    long long v327 = 0u;
    long long v326 = 0u;
    long long v325 = 0u;
    long long v324 = 0u;
    long long v323 = 0u;
    long long v321 = 0u;
    long long v322 = 0u;
    long long v319 = 0u;
    long long v320 = 0u;
    long long v317 = 0u;
    long long v318 = 0u;
    long long v315 = 0u;
    *(_OWORD *)v316 = 0u;
    long long v313 = 0u;
    long long v314 = 0u;
    *(_OWORD *)uint64_t v311 = 0u;
    long long v312 = 0u;
    sub_20B06D6CC(&v292, v12, (std::string *)__p);
    sub_20B06D838((uint64_t *)v311, (const std::string *)__p, 8);
    if (SBYTE7(v299[0]) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v308 = 0;
    int v307 = 0;
    uint64_t v309 = 0;
    sub_20B06D9BC((uint64_t *)v311, (uint64_t)&v307);
    if ((SHIBYTE(v309) & 0x80000000) == 0)
    {
      int v14 = v307;
      if (v307 == 35)
      {
        int v15 = 3;
        goto LABEL_295;
      }
      uint64_t v17 = &v307;
      int v15 = 3;
      switch(HIBYTE(v309))
      {
        case 0:
          goto LABEL_293;
        case 1:
          if (v307 == 115) {
            goto LABEL_293;
          }
          if (v309 < 0) {
            goto LABEL_26;
          }
          if (HIBYTE(v309) != 1) {
            goto LABEL_88;
          }
          if (v307 != 103) {
            goto LABEL_58;
          }
          goto LABEL_28;
        case 2:
          goto LABEL_87;
        case 6:
          if (v307 == 1819047021 && WORD2(v307) == 25193) {
            goto LABEL_43;
          }
          if (v307 == 1835365237 && WORD2(v307) == 27764) {
            goto LABEL_81;
          }
          if (v309 < 0) {
            goto LABEL_76;
          }
          if (HIBYTE(v309) != 2) {
            goto LABEL_40;
          }
          uint64_t v17 = &v307;
          break;
        default:
          goto LABEL_88;
      }
      goto LABEL_87;
    }
    int v15 = 3;
    if (*(unsigned char *)v307 == 35) {
      goto LABEL_293;
    }
    unint64_t v16 = v308;
    if (!v308) {
      goto LABEL_293;
    }
    if (v308 >= 0x801)
    {
      sub_20B07F8E0(a7, "lines in file too long to parse");
      int v15 = 1;
      goto LABEL_293;
    }
    if (v308 != 1)
    {
      if (v308 != 6) {
        goto LABEL_71;
      }
      BOOL v18 = *(_DWORD *)v307 == 1819047021 && *((_WORD *)v307 + 2) == 25193;
      if (!v18) {
        goto LABEL_71;
      }
LABEL_43:
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&v299[0] = 0;
      std::stringbuf::str();
      std::string::size_type v25 = std::string::find((const std::string *)__p, 35, 0);
      if (v25 != -1)
      {
        std::string::basic_string(&__dst, (const std::string *)__p, 0, v25, (std::allocator<char> *)&v310);
        if (SBYTE7(v299[0]) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(void *)&v299[0] = *((void *)&__dst.__r_.__value_.__l + 2);
      }
      unint64_t v26 = BYTE7(v299[0]);
      char v27 = BYTE7(v299[0]);
      if (SBYTE7(v299[0]) < 0) {
        unint64_t v26 = (unint64_t)__p[1];
      }
      if (v26 >= 8)
      {
        std::string::basic_string(&__dst, (const std::string *)__p, 7uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v310);
        if (SBYTE7(v299[0]) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(void *)&v299[0] = *((void *)&__dst.__r_.__value_.__l + 2);
        sub_20B077928((std::string *)__p);
        sub_20B07CCC0(&v287, (const void **)__p, (uint64_t)__p);
        char v27 = BYTE7(v299[0]);
      }
      if ((v27 & 0x80) == 0) {
        goto LABEL_292;
      }
      id v28 = __p[0];
      goto LABEL_262;
    }
    if (*(unsigned char *)v307 == 115) {
      goto LABEL_293;
    }
LABEL_26:
    unint64_t v16 = v308;
    if (v308 != 1) {
      goto LABEL_71;
    }
    int v19 = *(unsigned __int8 *)v307;
    if (v19 == 103)
    {
LABEL_28:
      *(void *)&long long v301 = 0;
      long long v300 = 0u;
      *(_OWORD *)std::string __p = 0u;
      memset(v299, 0, sizeof(v299));
      DWORD2(v301) = -2;
      unint64_t v20 = v290;
      if (v290 >= v291)
      {
        uint64_t v22 = sub_20B07CF64(&v289, (uint64_t)__p);
      }
      else
      {
        *(void *)(v290 + 8) = 0;
        *(void *)(v20 + 16) = 0;
        *(void *)unint64_t v20 = 0;
        __p[1] = 0;
        *(void *)&v299[0] = 0;
        __p[0] = 0;
        uint64_t v21 = *((void *)&v299[1] + 1);
        *(_OWORD *)(v20 + 24) = *(_OWORD *)((char *)v299 + 8);
        *(void *)(v20 + 40) = v21;
        *(void *)(v20 + 48) = 0;
        memset((char *)v299 + 8, 0, 24);
        *(void *)(v20 + 56) = 0;
        *(void *)(v20 + 64) = 0;
        *(_OWORD *)(v20 + 48) = v300;
        *(void *)(v20 + 64) = v301;
        long long v300 = 0uLL;
        *(void *)&long long v301 = 0;
        *(_DWORD *)(v20 + 72) = DWORD2(v301);
        uint64_t v22 = v20 + 80;
      }
      unint64_t v290 = v22;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
      sub_20B07D3AC((void ***)&__dst);
      if (SHIBYTE(v299[1]) < 0) {
        operator delete(*((void **)&v299[0] + 1));
      }
      if (SBYTE7(v299[0]) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_291;
    }
    if (v309 < 0)
    {
      if (v19 == 111) {
        goto LABEL_68;
      }
      unint64_t v16 = v308;
LABEL_71:
      if (v16 == 6)
      {
        if (*(_DWORD *)v307 != 1835365237 || *((_WORD *)v307 + 2) != 27764)
        {
LABEL_76:
          unint64_t v16 = v308;
          goto LABEL_77;
        }
LABEL_81:
        sub_20B06D9BC((uint64_t *)v311, (uint64_t)&__str);
        unint64_t v38 = v290;
        if (v290 == v289)
        {
          *(void *)&long long v301 = 0;
          long long v300 = 0u;
          *(_OWORD *)std::string __p = 0u;
          memset(v299, 0, sizeof(v299));
          DWORD2(v301) = -2;
          if (v290 >= v291)
          {
            uint64_t v40 = sub_20B07CF64(&v289, (uint64_t)__p);
          }
          else
          {
            *(void *)(v290 + 8) = 0;
            *(void *)(v38 + 16) = 0;
            *(void *)unint64_t v38 = 0;
            __p[1] = 0;
            *(void *)&v299[0] = 0;
            __p[0] = 0;
            uint64_t v39 = *((void *)&v299[1] + 1);
            *(_OWORD *)(v38 + 24) = *(_OWORD *)((char *)v299 + 8);
            *(void *)(v38 + 40) = v39;
            *(void *)(v38 + 48) = 0;
            memset((char *)v299 + 8, 0, 24);
            *(void *)(v38 + 56) = 0;
            *(void *)(v38 + 64) = 0;
            *(_OWORD *)(v38 + 48) = v300;
            *(void *)(v38 + 64) = v301;
            long long v300 = 0uLL;
            *(void *)&long long v301 = 0;
            *(_DWORD *)(v38 + 72) = DWORD2(v301);
            uint64_t v40 = v38 + 80;
          }
          unint64_t v290 = v40;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
          sub_20B07D3AC((void ***)&__dst);
          if (SHIBYTE(v299[1]) < 0) {
            operator delete(*((void **)&v299[0] + 1));
          }
          if (SBYTE7(v299[0]) < 0) {
            operator delete(__p[0]);
          }
          MEMORY[0x210532310](v290 - 80, "MDL_OBJ");
          unint64_t v38 = v290;
        }
        memset(&__dst, 0, sizeof(__dst));
        if (*(char *)(v38 - 57) < 0)
        {
          sub_20B07F994(&__dst, *(void **)(v38 - 80), *(void *)(v38 - 72));
          unint64_t v38 = v290;
        }
        else
        {
          long long v84 = *(_OWORD *)(v38 - 80);
          __dst.__r_.__value_.__r.__words[2] = *(void *)(v38 - 64);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v84;
        }
        uint64_t v85 = v13;
        int v270 = v11;
        int64_t v86 = *(unsigned __int8 *)(v38 - 33);
        if (*(char *)(v38 - 33) < 0)
        {
          int64_t v87 = *(void *)(v38 - 48);
          if (!v87) {
            goto LABEL_229;
          }
LABEL_216:
          uint64_t v88 = (char **)(v38 - 56);
          int64_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((v86 & 0x80u) == 0) {
            uint64_t v91 = (char *)v88;
          }
          else {
            uint64_t v91 = *v88;
          }
          if ((v86 & 0x80u) == 0) {
            int64_t v92 = v86;
          }
          else {
            int64_t v92 = v87;
          }
          if (v92)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int64_t size = __dst.__r_.__value_.__l.__size_;
            }
            if (size < v92) {
              goto LABEL_229;
            }
            uint64_t v105 = (char *)p_dst + size;
            int v106 = *v91;
            __int32 v107 = p_dst;
            while (1)
            {
              int64_t v108 = size - v92;
              if (v108 == -1) {
                goto LABEL_229;
              }
              uint64_t v109 = (char *)memchr(v107, v106, v108 + 1);
              if (!v109) {
                goto LABEL_229;
              }
              uint64_t v110 = v109;
              if (!memcmp(v109, v91, v92)) {
                break;
              }
              __int32 v107 = (std::string *)(v110 + 1);
              int64_t size = v105 - (v110 + 1);
              if (size < v92) {
                goto LABEL_229;
              }
            }
            if (v110 == v105) {
              goto LABEL_229;
            }
            std::string::size_type v104 = v110 - (char *)p_dst;
            if (v110 - (char *)p_dst == -1) {
              goto LABEL_229;
            }
          }
          else
          {
            std::string::size_type v104 = 0;
          }
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&v299[0] = 0;
          std::string::basic_string((std::string *)__p, &__dst, 0, v104, (std::allocator<char> *)&v310);
          sub_20B07824C((const void **)__p, (const void **)&__str.__r_.__value_.__l.__data_, &v310);
          int v11 = v270;
          int v13 = v85;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          std::string __dst = v310;
          a7 = v262;
          if (SBYTE7(v299[0]) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          if (*(unsigned char *)(v38 - 33))
          {
            int64_t v87 = *(void *)(v38 - 48);
            goto LABEL_216;
          }
LABEL_229:
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v93 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v93 = __dst.__r_.__value_.__l.__size_;
          }
          __p[1] = 0;
          *(void *)&v299[0] = 0;
          __p[0] = 0;
          sub_20B07D458((uint64_t)__p, v93 + 1);
          if ((SBYTE7(v299[0]) & 0x80u) == 0) {
            uint64_t v94 = __p;
          }
          else {
            uint64_t v94 = (void **)__p[0];
          }
          if (v93)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v95 = &__dst;
            }
            else {
              long long v95 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            memmove(v94, v95, v93);
          }
          *(_WORD *)((char *)v94 + v93) = 95;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v97 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v97 = __str.__r_.__value_.__l.__size_;
          }
          uint64_t v98 = std::string::append((std::string *)__p, (const std::string::value_type *)p_str, v97);
          std::string::size_type v99 = v98->__r_.__value_.__r.__words[0];
          v310.__r_.__value_.__r.__words[0] = v98->__r_.__value_.__l.__size_;
          *(std::string::size_type *)((char *)v310.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v98->__r_.__value_.__r.__words[1] + 7);
          char v100 = HIBYTE(v98->__r_.__value_.__r.__words[2]);
          v98->__r_.__value_.__l.__size_ = 0;
          v98->__r_.__value_.__r.__words[2] = 0;
          v98->__r_.__value_.__r.__words[0] = 0;
          a7 = v262;
          int v13 = v85;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          __dst.__r_.__value_.__r.__words[0] = v99;
          __dst.__r_.__value_.__l.__size_ = v310.__r_.__value_.__r.__words[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v310.__r_.__value_.__r.__words + 7);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v100;
          if (SBYTE7(v299[0]) < 0) {
            operator delete(__p[0]);
          }
          int v11 = v270;
        }
        unint64_t v101 = v290;
        if (*(void *)(v290 - 24) != *(void *)(v290 - 32))
        {
          *(void *)&long long v301 = 0;
          long long v300 = 0u;
          *(_OWORD *)std::string __p = 0u;
          memset(v299, 0, sizeof(v299));
          DWORD2(v301) = -2;
          if (v290 >= v291)
          {
            uint64_t v103 = sub_20B07CF64(&v289, (uint64_t)__p);
          }
          else
          {
            *(void *)(v290 + 8) = 0;
            *(void *)(v101 + 16) = 0;
            *(void *)unint64_t v101 = 0;
            __p[1] = 0;
            *(void *)&v299[0] = 0;
            __p[0] = 0;
            uint64_t v102 = *((void *)&v299[1] + 1);
            *(_OWORD *)(v101 + 24) = *(_OWORD *)((char *)v299 + 8);
            *(void *)(v101 + 40) = v102;
            *(void *)(v101 + 48) = 0;
            memset((char *)v299 + 8, 0, 24);
            *(void *)(v101 + 56) = 0;
            *(void *)(v101 + 64) = 0;
            *(_OWORD *)(v101 + 48) = v300;
            *(void *)(v101 + 64) = v301;
            long long v300 = 0uLL;
            *(void *)&long long v301 = 0;
            *(_DWORD *)(v101 + 72) = DWORD2(v301);
            uint64_t v103 = v101 + 80;
          }
          unint64_t v290 = v103;
          v310.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
          sub_20B07D3AC((void ***)&v310);
          if (SHIBYTE(v299[1]) < 0) {
            operator delete(*((void **)&v299[0] + 1));
          }
          if (SBYTE7(v299[0]) < 0) {
            operator delete(__p[0]);
          }
          unint64_t v101 = v290;
        }
        std::string::operator=((std::string *)(v101 - 80), &__dst);
        std::string::operator=((std::string *)(v290 - 56), &__str);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_292;
        }
        id v28 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_262:
        operator delete(v28);
        goto LABEL_292;
      }
LABEL_77:
      if (v16 == 1)
      {
        if (*(unsigned char *)v307 == 118) {
          goto LABEL_79;
        }
        unint64_t v16 = v308;
      }
      if (v16 != 2) {
        goto LABEL_88;
      }
      uint64_t v17 = v307;
LABEL_87:
      if (*v17 == 25462)
      {
        LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
        LODWORD(v310.__r_.__value_.__l.__data_) = 0;
        LODWORD(__s1) = 0;
        LODWORD(v293[0]) = 0;
        MEMORY[0x210532400](v311, &__dst);
        MEMORY[0x210532400](v311, &v310);
        MEMORY[0x210532400](v311, &__s1);
        MEMORY[0x210532400](v311, v293);
        __p[0] = (void *)__PAIR64__(v310.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
        __p[1] = (void *)__PAIR64__(v293[0], __s1);
        sub_20B078440((void **)&v285, __p);
        goto LABEL_292;
      }
      goto LABEL_88;
    }
    if (HIBYTE(v309) != 1) {
      goto LABEL_88;
    }
    int v14 = v307;
LABEL_58:
    if (v14 == 111)
    {
LABEL_68:
      *(void *)&long long v301 = 0;
      long long v300 = 0u;
      *(_OWORD *)std::string __p = 0u;
      memset(v299, 0, sizeof(v299));
      DWORD2(v301) = -2;
      unint64_t v29 = v290;
      if (v290 >= v291)
      {
        uint64_t v31 = sub_20B07CF64(&v289, (uint64_t)__p);
      }
      else
      {
        *(void *)(v290 + 8) = 0;
        *(void *)(v29 + 16) = 0;
        *(void *)unint64_t v29 = 0;
        __p[1] = 0;
        *(void *)&v299[0] = 0;
        __p[0] = 0;
        uint64_t v30 = *((void *)&v299[1] + 1);
        *(_OWORD *)(v29 + 24) = *(_OWORD *)((char *)v299 + 8);
        *(void *)(v29 + 40) = v30;
        *(void *)(v29 + 48) = 0;
        memset((char *)v299 + 8, 0, 24);
        *(void *)(v29 + 56) = 0;
        *(void *)(v29 + 64) = 0;
        *(_OWORD *)(v29 + 48) = v300;
        *(void *)(v29 + 64) = v301;
        long long v300 = 0uLL;
        *(void *)&long long v301 = 0;
        *(_DWORD *)(v29 + 72) = DWORD2(v301);
        uint64_t v31 = v29 + 80;
      }
      unint64_t v290 = v31;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v300;
      sub_20B07D3AC((void ***)&__dst);
      if (SHIBYTE(v299[1]) < 0) {
        operator delete(*((void **)&v299[0] + 1));
      }
      if (SBYTE7(v299[0]) < 0) {
        operator delete(__p[0]);
      }
LABEL_291:
      sub_20B06D9BC((uint64_t *)v311, v290 - 80);
      std::string::operator=((std::string *)(v290 - 56), &__str);
      goto LABEL_292;
    }
LABEL_40:
    if (HIBYTE(v309) == 1 && v14 == 118)
    {
LABEL_79:
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v310.__r_.__value_.__l.__data_) = 0;
      LODWORD(__s1) = 0;
      MEMORY[0x210532400](v311, &__dst);
      MEMORY[0x210532400](v311, &v310);
      MEMORY[0x210532400](v311, &__s1);
      int data = (int)__dst.__r_.__value_.__l.__data_;
      int v34 = (int)v310.__r_.__value_.__l.__data_;
      int v35 = (int)__s1;
      unint64_t v36 = (_DWORD *)*((void *)&v279 + 1);
      if (*((void *)&v279 + 1) >= (unint64_t)v280)
      {
        unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v279 + 1) - v279) >> 2);
        unint64_t v81 = v80 + 1;
        if (v80 + 1 > 0x1555555555555555) {
          sub_20B05D0BC();
        }
        if (0x5555555555555556 * ((uint64_t)(v280 - v279) >> 2) > v81) {
          unint64_t v81 = 0x5555555555555556 * ((uint64_t)(v280 - v279) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v280 - v279) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v82 = 0x1555555555555555;
        }
        else {
          unint64_t v82 = v81;
        }
        if (v82) {
          uint64_t v83 = (char *)sub_20B07D4F8((uint64_t)&v280, v82);
        }
        else {
          uint64_t v83 = 0;
        }
        uint64_t v111 = &v83[12 * v80];
        *(_DWORD *)uint64_t v111 = data;
        *((_DWORD *)v111 + 1) = v34;
        *((_DWORD *)v111 + 2) = v35;
        uint64_t v112 = (_DWORD *)*((void *)&v279 + 1);
        uint64_t v113 = (_DWORD *)v279;
        int v114 = v111;
        if (*((void *)&v279 + 1) != (void)v279)
        {
          do
          {
            uint64_t v115 = *(void *)(v112 - 3);
            v112 -= 3;
            int v116 = v112[2];
            *(void *)(v114 - 12) = v115;
            v114 -= 12;
            *((_DWORD *)v114 + 2) = v116;
          }
          while (v112 != v113);
          uint64_t v112 = (_DWORD *)v279;
        }
        id v37 = v111 + 12;
        *(void *)&long long v279 = v114;
        *((void *)&v279 + 1) = v111 + 12;
        *(void *)&long long v280 = &v83[12 * v82];
        if (v112) {
          operator delete(v112);
        }
      }
      else
      {
        **((_DWORD **)&v279 + 1) = __dst.__r_.__value_.__l.__data_;
        v36[1] = v34;
        id v37 = v36 + 3;
        v36[2] = v35;
      }
      *((void *)&v279 + 1) = v37;
      if ((*((unsigned char *)v13 + *((void *)v311[0] - 3)) & 2) == 0)
      {
        LODWORD(v293[0]) = 0;
        LODWORD(v275[0]) = 0;
        LODWORD(v305) = 0;
        MEMORY[0x210532400](v311, v293);
        int v117 = *(_DWORD *)((char *)v13 + *((void *)v311[0] - 3));
        MEMORY[0x210532400](v311, v275);
        int v118 = *(_DWORD *)((char *)v13 + *((void *)v311[0] - 3));
        MEMORY[0x210532400](v311, &v305);
        int v277 = 1065353216;
        if ((*((unsigned char *)v13 + *((void *)v311[0] - 3)) & 2) == 0) {
          MEMORY[0x210532400](v311, &v277);
        }
        if (((v118 | v117) & 2) == 0
          && -1 - 0x5555555555555555 * ((uint64_t)(*((void *)&v279 + 1) - v279) >> 2) == (uint64_t)(*((void *)&v285 + 1) - v285) >> 4)
        {
          __p[0] = (void *)__PAIR64__(v275[0], v293[0]);
          __p[1] = (void *)__PAIR64__(v277, v305);
          sub_20B078440((void **)&v285, __p);
        }
      }
      goto LABEL_292;
    }
LABEL_88:
    if (sub_20B06DC90(&v307, "vt"))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v310.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x210532400](v311, &__dst);
      MEMORY[0x210532400](v311, &v310);
      __p[0] = (void *)__PAIR64__(v310.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
      sub_20B078534((void **)&v280 + 1, __p);
      if ((*((unsigned char *)v13 + *((void *)v311[0] - 3)) & 2) == 0)
      {
        MEMORY[0x210532400](v311, &__dst);
        if ((*((unsigned char *)v13 + *((void *)v311[0] - 3)) & 2) == 0)
        {
          MEMORY[0x210532400](v311, &v310);
          __p[0] = (void *)__PAIR64__(v310.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
          sub_20B078534((void **)&v282, __p);
        }
      }
      goto LABEL_292;
    }
    if (sub_20B06DC90(&v307, "vt2"))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v310.__r_.__value_.__l.__data_) = 0;
      MEMORY[0x210532400](v311, &__dst);
      MEMORY[0x210532400](v311, &v310);
      __p[0] = (void *)__PAIR64__(v310.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
      sub_20B078534((void **)&v282, __p);
LABEL_292:
      int v15 = 0;
      goto LABEL_293;
    }
    if (sub_20B06DC90(&v307, "vn"))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(v310.__r_.__value_.__l.__data_) = 0;
      LODWORD(__s1) = 0;
      MEMORY[0x210532400](v311, &__dst);
      MEMORY[0x210532400](v311, &v310);
      MEMORY[0x210532400](v311, &__s1);
      __p[0] = (void *)__PAIR64__(v310.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__data_);
      LODWORD(__p[1]) = __s1;
      sub_20B078320((char **)&v283 + 1, (uint64_t *)__p);
      goto LABEL_292;
    }
    if (sub_20B06DC90(&v307, "f"))
    {
      unint64_t v41 = v290;
      if (v290 == v289)
      {
        *(void *)&long long v301 = 0;
        long long v300 = 0u;
        *(_OWORD *)std::string __p = 0u;
        memset(v299, 0, sizeof(v299));
        DWORD2(v301) = -2;
        sub_20B078158(&v289, (uint64_t)__p);
        sub_20B0781F0((uint64_t)__p);
        MEMORY[0x210532310](v290 - 80, "MDL_OBJ");
        unint64_t v41 = v290;
      }
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&v299[0] = 0;
      sub_20B078618((uint64_t *)(v41 - 32), (uint64_t)__p);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      int v269 = v11;
      while (2)
      {
        while (2)
        {
          while (2)
          {
            if ((*((unsigned char *)v13 + *((void *)v311[0] - 3)) & 2) != 0)
            {
              unint64_t v76 = v290;
              uint64_t v77 = *(void *)(v290 - 24);
              uint64_t v79 = v77 - 24;
              uint64_t v78 = *(void **)(v77 - 24);
              if (*(void *)(v77 - 16) - (void)v78 > 0x2FuLL)
              {
                int v15 = 0;
              }
              else
              {
                if (v78)
                {
                  *(void *)(v77 - 16) = v78;
                  operator delete(v78);
                }
                int v15 = 0;
                *(void *)(v76 - 24) = v79;
              }
              int v11 = v269;
              goto LABEL_293;
            }
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&v299[0] = 0;
            sub_20B06D9BC((uint64_t *)v311, (uint64_t)__p);
            if (SBYTE7(v299[0]) < 0)
            {
              unint64_t v42 = (char *)__p[1];
              if (__p[1])
              {
                size_t v43 = (void **)__p[0];
                goto LABEL_109;
              }
LABEL_179:
              operator delete(__p[0]);
              continue;
            }
            break;
          }
          unint64_t v42 = (char *)BYTE7(v299[0]);
          if (!BYTE7(v299[0])) {
            continue;
          }
          break;
        }
        size_t v43 = __p;
LABEL_109:
        int v44 = strtol((const char *)v43, 0, 10);
        int v45 = *(unsigned __int8 *)v43;
        uint64_t v46 = (const char *)v43;
        if (v45 == 45)
        {
          uint64_t v46 = (char *)v43 + 1;
          int v45 = *((unsigned __int8 *)v43 + 1);
        }
        if ((v45 - 48) <= 9)
        {
          do
          {
            int v47 = *(unsigned __int8 *)++v46;
            int v45 = v47;
          }
          while ((v47 - 48) < 0xA);
        }
        uint64_t v48 = &v42[(void)v43];
        if (&v42[(void)v43] <= v46)
        {
          int v51 = 0;
          int v52 = 0;
          int v53 = 0;
          int v54 = -1;
          int v55 = -1;
          int v56 = -1;
        }
        else
        {
          uint64_t v49 = v13;
          if (v45 == 47) {
            uint64_t v50 = v46 + 1;
          }
          else {
            uint64_t v50 = v46;
          }
          if (v48 <= v50)
          {
            int v51 = 0;
LABEL_122:
            int v55 = -1;
          }
          else
          {
            if (*v50 == 47)
            {
              int v51 = 0;
              ++v50;
              goto LABEL_122;
            }
            int v55 = strtol(v50, 0, 10);
            int v57 = *(unsigned __int8 *)v50;
            if (v57 == 45)
            {
              int v58 = *(unsigned __int8 *)++v50;
              int v57 = v58;
            }
            if ((v57 - 48) <= 9)
            {
              do
              {
                int v59 = *(unsigned __int8 *)++v50;
                int v57 = v59;
              }
              while ((v59 - 48) < 0xA);
            }
            if (v57 == 47) {
              ++v50;
            }
            int v51 = 1;
          }
          if (v48 <= v50)
          {
            int v52 = 0;
LABEL_134:
            int v56 = -1;
          }
          else
          {
            if (*v50 == 47)
            {
              int v52 = 0;
              ++v50;
              goto LABEL_134;
            }
            int v60 = v55;
            int v56 = strtol(v50, 0, 10);
            int v61 = *(unsigned __int8 *)v50;
            if (v61 == 45)
            {
              int v62 = *(unsigned __int8 *)++v50;
              int v61 = v62;
            }
            int v55 = v60;
            if ((v61 - 48) <= 9)
            {
              do
              {
                int v63 = *(unsigned __int8 *)++v50;
                int v61 = v63;
              }
              while ((v63 - 48) < 0xA);
            }
            if (v61 == 47) {
              ++v50;
            }
            int v52 = 1;
          }
          if (v48 <= v50)
          {
            int v53 = 0;
            int v54 = -1;
          }
          else
          {
            if (*v50 == 47) {
              char v64 = v50 + 1;
            }
            else {
              char v64 = v50;
            }
            int v65 = v55;
            int v54 = strtol(v64, 0, 10);
            int v55 = v65;
            int v53 = 1;
          }
          int v13 = v49;
        }
        unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v279 + 1) - v279) >> 2);
        if (*((void *)&v279 + 1) == (void)v279 || v44 > (int)v66)
        {
LABEL_178:
          a7 = v262;
          if ((SBYTE7(v299[0]) & 0x80000000) == 0) {
            continue;
          }
          goto LABEL_179;
        }
        break;
      }
      unsigned int v68 = v44 - 1;
      if (v44 < 1)
      {
        if ((v44 & 0x80000000) == 0
          || 0x5555555555555555 * ((uint64_t)(*((void *)&v279 + 1) - v279) >> 2) > (unint64_t)v44)
        {
          goto LABEL_178;
        }
        unsigned int v68 = v66 + v44;
      }
      else if (v66 < v44)
      {
        goto LABEL_178;
      }
      *(void *)&long long v69 = v68 | 0xFFFFFFFF00000000;
      *((void *)&v69 + 1) = 0;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = (unint64_t)v69;
      if (v51)
      {
        int v70 = v55 - 1;
        if (v55 < 1)
        {
          if (v55 < 0 && v55 >= (unint64_t)-((uint64_t)(v281 - *((void *)&v280 + 1)) >> 3))
          {
            int v70 = v55 + (((void)v281 - *((void *)&v280 + 1)) >> 3);
LABEL_159:
            DWORD1(v69) = v70;
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v69;
          }
        }
        else if (v55 <= (unint64_t)((uint64_t)(v281 - *((void *)&v280 + 1)) >> 3))
        {
          goto LABEL_159;
        }
      }
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = -1;
      if (v52)
      {
        int v71 = v56 - 1;
        if (v56 < 1)
        {
          if (v56 < 0)
          {
            uint64_t v72 = (uint64_t)(v284 - *((void *)&v283 + 1)) >> 2;
            if (v56 >= (unint64_t)(0x5555555555555555 * v72))
            {
              int v71 = v56 - 1431655765 * v72;
LABEL_168:
              DWORD2(v69) = v71;
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v69;
            }
          }
        }
        else if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v284 - *((void *)&v283 + 1)) >> 2) >= v56)
        {
          goto LABEL_168;
        }
      }
      long long v73 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      HIDWORD(__dst.__r_.__value_.__r.__words[1]) = -1;
      if (v53)
      {
        int v74 = v54 - 1;
        if (v54 < 1)
        {
          if (v54 < 0 && v54 >= (unint64_t)-((uint64_t)(*((void *)&v285 + 1) - v285) >> 4))
          {
            int v74 = v54 + ((*((void *)&v285 + 1) - (void)v285) >> 4);
LABEL_174:
            HIDWORD(v73) = v74;
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v73;
          }
        }
        else if (v54 <= (unint64_t)((uint64_t)(*((void *)&v285 + 1) - v285) >> 4))
        {
          goto LABEL_174;
        }
      }
      sub_20B07875C((void **)(*(void *)(v290 - 24) - 24), &__dst);
      goto LABEL_178;
    }
    if (sub_20B06DC90(&v307, "p") || sub_20B06DC90(&v307, "l") || sub_20B06DC90(&v307, "t")) {
      goto LABEL_292;
    }
    if (SHIBYTE(v309) < 0)
    {
      if (v308 <= 1)
      {
        int v15 = 0;
LABEL_294:
        operator delete(v307);
        goto LABEL_295;
      }
      float32x4_t v75 = (char *)v307 + 1;
    }
    else
    {
      float32x4_t v75 = (char *)&v307 + 1;
      if (HIBYTE(v309) <= 1u)
      {
        int v15 = 0;
        goto LABEL_295;
      }
    }
    int v15 = 0;
    if (*v75 != 32) {
      ++v11;
    }
LABEL_293:
    if (SHIBYTE(v309) < 0) {
      goto LABEL_294;
    }
LABEL_295:
    int v271 = v272;
    v311[0] = v272;
    *(void **)((char *)v311 + *((void *)v272 - 3)) = v268;
    *(void *)&long long v312 = MEMORY[0x263F8C318] + 16;
    if (SBYTE7(v317) < 0) {
      operator delete(v316[0]);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x2105325E0]((char *)&v318 + 8);
    if (v15 != 3 && v15) {
      goto LABEL_556;
    }
  }
  while (v12 > (unint64_t)v292 && v11 < 200);
  if (v11 >= 200)
  {
    sub_20B07F8E0(a7, "Too much unrecognized data in file, can't parse");
    goto LABEL_556;
  }
  if (v287 == (uint64_t *)&v288)
  {
    id v139 = 0;
    goto LABEL_543;
  }
  uint64_t v121 = v287;
  unint64_t v265 = 0;
  while (2)
  {
    v275[0] = 0;
    v275[1] = 0;
    uint64_t v276 = 0;
    if (*((char *)v121 + 55) < 0)
    {
      sub_20B07F994(v275, (void *)v121[4], v121[5]);
    }
    else
    {
      *(_OWORD *)unint64_t v275 = *((_OWORD *)v121 + 2);
      uint64_t v276 = v121[6];
    }
    uint64_t v123 = objc_msgSend_resolver(v266, v119, v120);
    if (v276 >= 0) {
      objc_msgSend_stringWithCString_encoding_(NSString, v122, (uint64_t)v275, 4);
    }
    else {
    uint64_t v124 = objc_msgSend_stringWithCString_encoding_(NSString, v122, (uint64_t)v275[0], 4);
    }
    v263 = v121;
    uint64_t v264 = objc_msgSend_resolveAssetNamed_(v123, v125, (uint64_t)v124);

    unint64_t v128 = objc_msgSend_resolver(v266, v126, v127);
    id v129 = v264;
    id v273 = v128;
    unint64_t v267 = v129;
    if (!v129) {
      goto LABEL_327;
    }
    __int32 v132 = sub_20B1A9168(v129, v130, v131);
    uint64_t v135 = v132;
    if (!v132)
    {
      uint64_t v138 = objc_msgSend_absoluteString(v129, v133, v134);
      NSLog(&cfstr_UnableToFindMt.isa, v138);

      goto LABEL_327;
    }
    fseek(v132, 0, 2);
    uint64_t v136 = MEMORY[0x210532990](v135);
    uint64_t v137 = v136 + 1;
    if (v136 == -1)
    {
      fclose(v135);
LABEL_327:
      id v139 = 0;
      goto LABEL_328;
    }
    size_t v143 = v136;
    uint64_t v145 = v268;
    uint64_t v144 = v271;
    uint64_t v146 = malloc_type_malloc(v136 + 1, 0x2A8E8647uLL);
    fseek(v135, 0, 0);
    fread(v146, 1uLL, v143, v135);
    fclose(v135);
    *((unsigned char *)v146 + v143) = 0;
    v305 = (const std::string::value_type *)v146;
    id v260 = objc_alloc_init(MEMORY[0x263EFF980]);
    if (v143 > 0x7FFFFFFFFFFFFFFELL)
    {
      uint64_t v274 = 0;
      goto LABEL_528;
    }
    uint64_t v274 = 0;
    unint64_t v147 = (unint64_t)v146 + v137;
    while (2)
    {
      memset(v304, 0, sizeof(v304));
      *(_OWORD *)unint64_t v302 = 0u;
      long long v303 = 0u;
      long long v300 = 0u;
      long long v301 = 0u;
      memset(v299, 0, sizeof(v299));
      *(_OWORD *)std::string __p = 0u;
      sub_20B06D6CC(&v305, v147, (std::string *)v311);
      sub_20B06D838((uint64_t *)__p, (const std::string *)v311, 8);
      if (SBYTE7(v312) < 0) {
        operator delete(v311[0]);
      }
      __s1 = 0;
      uint64_t v296 = 0;
      uint64_t v297 = 0;
      sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__s1);
      if (SHIBYTE(v297) < 0)
      {
        p_s1 = (unsigned __int16 *)__s1;
        if (*(unsigned char *)__s1 == 35 || !v296) {
          goto LABEL_378;
        }
        if (v296 == 6)
        {
LABEL_349:
          int v149 = *(_DWORD *)p_s1;
          int v150 = p_s1[2];
          if (v149 == 1836541294 && v150 == 27764)
          {
            sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__s1);
            uint64_t v173 = [MDLMaterial alloc];
            id v174 = [NSString alloc];
            if (v297 >= 0) {
              uint64_t v176 = objc_msgSend_initWithCString_encoding_(v174, v175, (uint64_t)&__s1, 4);
            }
            else {
              uint64_t v176 = objc_msgSend_initWithCString_encoding_(v174, v175, (uint64_t)__s1, 4);
            }
            uint64_t v177 = (void *)v176;
            uint64_t v178 = objc_opt_new();
            id v157 = (id)objc_msgSend_initWithName_scatteringFunction_(v173, v179, (uint64_t)v177, v178);

            objc_msgSend_conformToMatProperties(v157, v180, v181);
            uint64_t v145 = v268;
            uint64_t v144 = v271;
            objc_msgSend_addObject_(v260, v182, (uint64_t)v157);
            goto LABEL_519;
          }
        }
      }
      else
      {
        if (__s1 == 35) {
          goto LABEL_522;
        }
        if (!HIBYTE(v297))
        {
LABEL_378:
          id v157 = v274;
          goto LABEL_519;
        }
        if (HIBYTE(v297) == 6)
        {
          p_s1 = (unsigned __int16 *)&__s1;
          goto LABEL_349;
        }
      }
      if (!v274)
      {
        id v157 = 0;
        goto LABEL_519;
      }
      v293[0] = 0;
      v293[1] = 0;
      uint64_t v294 = 0;
      sub_20B07F8E0(v293, "@TODO");
      float32x4_t v152 = &off_263FFD3D0;
      while (2)
      {
        uint64_t v154 = *v152;
        id v153 = v152[1];
        uint64_t v155 = v152[2];
        uint64_t v156 = v152[3];
        id v157 = v274;
        id v158 = v273;
        size_t v159 = strlen(v154);
        size_t v160 = v159;
        if (SHIBYTE(v297) < 0)
        {
          if (v159 == v296)
          {
            if (v159 == -1) {
LABEL_560:
            }
              sub_20B07FA34();
            unint64_t v161 = __s1;
            goto LABEL_362;
          }
        }
        else if (v159 == HIBYTE(v297))
        {
          if (v159 == -1) {
            goto LABEL_560;
          }
          unint64_t v161 = &__s1;
LABEL_362:
          if (!memcmp(v161, v154, v160))
          {
            uint64_t v163 = objc_msgSend_propertyNamed_(v157, v162, (uint64_t)v156);
            unint64_t v166 = v163;
            if (!v163 || (char *)objc_msgSend_semantic(v163, v164, v165) != v153)
            {
              uint64_t v168 = [MDLMaterialProperty alloc];
              uint64_t v170 = objc_msgSend_initWithName_semantic_(v168, v169, (uint64_t)v156, v153);

              unint64_t v166 = (void *)v170;
            }
            if (v155 == (char *)7)
            {
              LODWORD(v311[0]) = 0;
              LODWORD(v307) = 0;
              LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
              if ((*((unsigned char *)&v299[1] + *((void *)__p[0] - 3)) & 2) == 0)
              {
                MEMORY[0x210532400](__p, v311);
                if ((*((unsigned char *)&v299[1] + *((void *)__p[0] - 3)) & 2) == 0)
                {
                  MEMORY[0x210532400](__p, &v307);
                  MEMORY[0x210532400](__p, &__dst);
                  objc_msgSend_setFloat3Value_(v166, v187, v188, COERCE_DOUBLE(__PAIR64__(v307, v311[0])));
                }
              }
              goto LABEL_516;
            }
            if (v155 == (char *)5)
            {
              if ((*((unsigned char *)&v299[1] + *((void *)__p[0] - 3)) & 2) == 0)
              {
                LODWORD(v311[0]) = 0;
                MEMORY[0x210532400](__p, v311);
                LODWORD(v211) = v311[0];
                objc_msgSend_setFloatValue_(v166, v212, v213, v211);
              }
              goto LABEL_516;
            }
            if (v155 == (char *)1)
            {
              memset(&__dst, 0, sizeof(__dst));
              sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__dst);
              while (1)
              {
                std::string::size_type v190 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  break;
                }
                uint64_t v191 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                if (*__dst.__r_.__value_.__l.__data_ != 45) {
                  goto LABEL_473;
                }
                switch(__dst.__r_.__value_.__l.__size_)
                {
                  case 2uLL:
                    if (*(_WORD *)__dst.__r_.__value_.__l.__data_ == 28461
                      || *(_WORD *)__dst.__r_.__value_.__l.__data_ == 29485)
                    {
                      goto LABEL_411;
                    }
                    int data_low = *(unsigned __int16 *)__dst.__r_.__value_.__l.__data_;
LABEL_410:
                    if (data_low == 29741)
                    {
LABEL_411:
                      sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__dst);
                      goto LABEL_412;
                    }
                    goto LABEL_470;
                  case 3uLL:
                    if (*(_WORD *)__dst.__r_.__value_.__l.__data_ == 25133
                      && *(unsigned char *)(__dst.__r_.__value_.__r.__words[0] + 2) == 109)
                    {
                      goto LABEL_469;
                    }
                    if (*(_WORD *)__dst.__r_.__value_.__l.__data_ == 27949
                      && *(unsigned char *)(__dst.__r_.__value_.__r.__words[0] + 2) == 109)
                    {
LABEL_412:
                      sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__dst);
                      goto LABEL_469;
                    }
                    goto LABEL_470;
                  case 5uLL:
LABEL_413:
                    int v193 = (int)v191->__r_.__value_.__l.__data_;
                    int v194 = v191->__r_.__value_.__s.__data_[4];
                    BOOL v195 = v193 == 1887007789;
                    int v196 = 101;
                    goto LABEL_464;
                  case 6uLL:
                    int v194 = *(unsigned __int16 *)(__dst.__r_.__value_.__r.__words[0] + 4);
                    BOOL v195 = *(_DWORD *)__dst.__r_.__value_.__l.__data_ == 1634493229;
                    int v196 = 28781;
                    goto LABEL_464;
                  case 7uLL:
                    if (*(_DWORD *)__dst.__r_.__value_.__l.__data_ == 1701601837
                      && *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 3) == 1969516133)
                    {
                      goto LABEL_469;
                    }
                    if (*(_DWORD *)__dst.__r_.__value_.__l.__data_ == 1701601837
                      && *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 3) == 1986293349)
                    {
                      goto LABEL_469;
                    }
                    int v194 = *(_DWORD *)(__dst.__r_.__value_.__r.__words[0] + 3);
                    BOOL v195 = *(_DWORD *)__dst.__r_.__value_.__l.__data_ == 2019914797;
                    int v196 = 1936028280;
LABEL_464:
                    if (v195 && v194 == v196) {
LABEL_469:
                    }
                      sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__dst);
LABEL_470:
                    sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__dst);
                    break;
                  case 8uLL:
                    std::string::size_type v199 = *(void *)__dst.__r_.__value_.__l.__data_;
LABEL_442:
                    if (v199 == 0x6E616863666D692DLL) {
                      goto LABEL_469;
                    }
                    goto LABEL_470;
                  default:
                    goto LABEL_470;
                }
              }
              if (__dst.__r_.__value_.__s.__data_[0] == 45)
              {
                uint64_t v191 = &__dst;
                switch(*((unsigned char *)&__dst.__r_.__value_.__s + 23))
                {
                  case 2:
                    if (LOWORD(__dst.__r_.__value_.__l.__data_) == 28461
                      || LOWORD(__dst.__r_.__value_.__l.__data_) == 29485)
                    {
                      goto LABEL_411;
                    }
                    int data_low = LOWORD(__dst.__r_.__value_.__l.__data_);
                    goto LABEL_410;
                  case 3:
                    if (LOWORD(__dst.__r_.__value_.__l.__data_) == 25133 && __dst.__r_.__value_.__s.__data_[2] == 109) {
                      goto LABEL_469;
                    }
                    if (LOWORD(__dst.__r_.__value_.__l.__data_) != 27949 || __dst.__r_.__value_.__s.__data_[2] != 109) {
                      goto LABEL_470;
                    }
                    goto LABEL_412;
                  case 5:
                    goto LABEL_413;
                  case 6:
                    int v200 = WORD2(__dst.__r_.__value_.__r.__words[0]);
                    BOOL v201 = LODWORD(__dst.__r_.__value_.__l.__data_) == 1634493229;
                    int v202 = 28781;
                    goto LABEL_435;
                  case 7:
                    if (LODWORD(__dst.__r_.__value_.__l.__data_) == 1701601837
                      && *(_DWORD *)((char *)__dst.__r_.__value_.__r.__words + 3) == 1969516133)
                    {
                      goto LABEL_469;
                    }
                    if (LODWORD(__dst.__r_.__value_.__l.__data_) == 1701601837
                      && *(_DWORD *)((char *)__dst.__r_.__value_.__r.__words + 3) == 1986293349)
                    {
                      goto LABEL_469;
                    }
                    int v200 = *(_DWORD *)((char *)__dst.__r_.__value_.__r.__words + 3);
                    BOOL v201 = LODWORD(__dst.__r_.__value_.__l.__data_) == 2019914797;
                    int v202 = 1936028280;
LABEL_435:
                    if (!v201 || v200 != v202) {
                      goto LABEL_470;
                    }
                    goto LABEL_469;
                  case 8:
                    std::string::size_type v199 = __dst.__r_.__value_.__r.__words[0];
                    goto LABEL_442;
                  default:
                    goto LABEL_470;
                }
              }
LABEL_473:
              for (std::string::size_type i = 0; ; ++i)
              {
                std::string::size_type v215 = __dst.__r_.__value_.__l.__size_;
                if ((v190 & 0x80u) == 0) {
                  std::string::size_type v215 = v190;
                }
                if (i >= v215) {
                  break;
                }
                unint64_t v216 = &__dst;
                if ((v190 & 0x80u) != 0) {
                  unint64_t v216 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                }
                if (v216->__r_.__value_.__s.__data_[i] == 92)
                {
                  v216->__r_.__value_.__s.__data_[i] = 47;
                  std::string::size_type v190 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                }
              }
              if ((v190 & 0x80u) == 0) {
                objc_msgSend_stringWithCString_encoding_(NSString, v189, (uint64_t)&__dst, 4);
              }
              else {
              unint64_t v256 = objc_msgSend_stringWithCString_encoding_(NSString, v189, (uint64_t)__dst.__r_.__value_.__l.__data_, 4);
              }
              objc_msgSend_setStringValue_(v166, v217, (uint64_t)v256);
              uint64_t v257 = objc_opt_new();
              std::stringbuf::str();
              long long v327 = 0u;
              long long v326 = 0u;
              long long v325 = 0u;
              long long v324 = 0u;
              long long v323 = 0u;
              long long v321 = 0u;
              long long v322 = 0u;
              long long v319 = 0u;
              long long v320 = 0u;
              long long v317 = 0u;
              long long v318 = 0u;
              long long v315 = 0u;
              *(_OWORD *)v316 = 0u;
              long long v313 = 0u;
              long long v314 = 0u;
              *(_OWORD *)uint64_t v311 = 0u;
              long long v312 = 0u;
              sub_20B06D838((uint64_t *)v311, &v310, 8);
              unint64_t v308 = 0;
              int v307 = 0;
              uint64_t v309 = 0;
              sub_20B06D9BC((uint64_t *)v311, (uint64_t)&v307);
              sub_20B06D9BC((uint64_t *)v311, (uint64_t)&v307);
              while (2)
              {
                if ((*((unsigned char *)&v313 + *((void *)v311[0] - 3)) & 2) != 0)
                {
                  BOOL v222 = 0;
                  if ((v309 & 0x8000000000000000) == 0) {
                    goto LABEL_507;
                  }
                  goto LABEL_498;
                }
                if (v309 < 0)
                {
                  if (v308 == 6)
                  {
                    v218 = (unsigned __int16 *)v307;
                    goto LABEL_492;
                  }
                }
                else if (HIBYTE(v309) == 6)
                {
                  v218 = (unsigned __int16 *)&v307;
LABEL_492:
                  int v219 = *(_DWORD *)v218;
                  int v220 = v218[2];
                  if (v219 == 1634493229 && v220 == 28781)
                  {
                    sub_20B06D9BC((uint64_t *)v311, (uint64_t)&v307);
                    if ((SHIBYTE(v309) & 0x80000000) == 0)
                    {
                      if (HIBYTE(v309) == 2)
                      {
                        unint64_t v223 = (unsigned __int16 *)&v307;
                        goto LABEL_504;
                      }
                      BOOL v222 = 0;
LABEL_507:
                      v311[0] = v271;
                      *(void **)((char *)v311 + *((void *)v271 - 3)) = v268;
                      *(void *)&long long v312 = MEMORY[0x263F8C318] + 16;
                      if (SBYTE7(v317) < 0) {
                        operator delete(v316[0]);
                      }
                      std::streambuf::~streambuf();
                      std::istream::~istream();
                      MEMORY[0x2105325E0]((char *)&v318 + 8);
                      if (SHIBYTE(v310.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v310.__r_.__value_.__l.__data_);
                      }
                      if (v222)
                      {
                        objc_msgSend_setSWrapMode_(v257, v224, 0);
                        objc_msgSend_setTWrapMode_(v257, v225, 0);
                      }
                      else
                      {
                        objc_msgSend_setSWrapMode_(v257, v224, 1);
                        objc_msgSend_setTWrapMode_(v257, v226, 1);
                      }
                      v227 = objc_opt_new();
                      objc_msgSend_setHardwareFilter_(v227, v228, (uint64_t)v257);
                      objc_msgSend_setTextureSamplerValue_(v166, v229, (uint64_t)v227);

                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__dst.__r_.__value_.__l.__data_);
                      }
LABEL_516:
                      objc_msgSend_setProperty_(v157, v167, (uint64_t)v166);

                      uint64_t v145 = v268;
                      uint64_t v144 = v271;
                      goto LABEL_517;
                    }
                    unint64_t v223 = (unsigned __int16 *)v307;
                    if (v308 == 2)
                    {
LABEL_504:
                      BOOL v222 = *v223 == 28271;
                      if ((v309 & 0x8000000000000000) == 0) {
                        goto LABEL_507;
                      }
LABEL_498:
                      unint64_t v223 = (unsigned __int16 *)v307;
                    }
                    else
                    {
                      BOOL v222 = 0;
                    }
                    operator delete(v223);
                    goto LABEL_507;
                  }
                }
                sub_20B06D9BC((uint64_t *)v311, (uint64_t)&v307);
                continue;
              }
            }
          }
        }

        v152 += 4;
        if (v152 != (char **)&unk_263FFD9D0) {
          continue;
        }
        break;
      }
      if (SHIBYTE(v297) < 0)
      {
        uint64_t v145 = v268;
        uint64_t v144 = v271;
        if (v296 != 5) {
          goto LABEL_517;
        }
        uint64_t v172 = (unsigned __int8 *)__s1;
        if (*(_DWORD *)__s1 == 1633903972 && *((unsigned char *)__s1 + 4) == 108) {
          goto LABEL_517;
        }
      }
      else
      {
        uint64_t v145 = v268;
        uint64_t v144 = v271;
        if (HIBYTE(v297) != 5) {
          goto LABEL_517;
        }
        if (__s1 == 1633903972 && BYTE4(__s1) == 108) {
          goto LABEL_517;
        }
        uint64_t v172 = (unsigned __int8 *)&__s1;
      }
      int v184 = *(_DWORD *)v172;
      int v185 = v172[4];
      if (v184 == 1970039913 && v185 == 109)
      {
        LODWORD(v311[0]) = 0;
        MEMORY[0x210532410](__p, v311);
      }
LABEL_517:
      if (SHIBYTE(v294) < 0) {
        operator delete(v293[0]);
      }
LABEL_519:
      if (SHIBYTE(v297) < 0) {
        operator delete(__s1);
      }
      uint64_t v274 = v157;
LABEL_522:
      __p[0] = v144;
      *(void **)((char *)__p + *((void *)v144 - 3)) = v145;
      *(void *)&v299[0] = MEMORY[0x263F8C318] + 16;
      if (SBYTE7(v303) < 0) {
        operator delete(v302[0]);
      }
      std::streambuf::~streambuf();
      std::istream::~istream();
      MEMORY[0x2105325E0]((char *)v304 + 8);
      if ((unint64_t)v305 < v147) {
        continue;
      }
      break;
    }
LABEL_528:
    free(v146);
    long long v300 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v299, 0, sizeof(v299));
    id v139 = v260;
    uint64_t v231 = objc_msgSend_countByEnumeratingWithState_objects_count_(v139, v230, (uint64_t)__p, v311, 16);
    if (v231)
    {
      uint64_t v232 = **(void **)&v299[0];
      do
      {
        for (uint64_t j = 0; j != v231; ++j)
        {
          if (**(void **)&v299[0] != v232) {
            objc_enumerationMutation(v139);
          }
          id v234 = *((id *)__p[1] + j);
          uint64_t v238 = objc_msgSend_count(v234, v235, v236);
          if (v238)
          {
            for (uint64_t k = 0; k != v238; ++k)
            {
              v240 = objc_msgSend_objectAtIndexedSubscript_(v234, v237, k);
              uint64_t v245 = objc_msgSend_stringValue(v240, v241, v242);
              if (v245)
              {
                BOOL v246 = objc_msgSend_type(v240, v243, v244) == 1;

                if (!v246) {
                  objc_msgSend_setType_(v240, v247, 1);
                }
              }
            }
          }
        }
        uint64_t v231 = objc_msgSend_countByEnumeratingWithState_objects_count_(v139, v248, (uint64_t)__p, v311, 16);
      }
      while (v231);
    }

LABEL_328:
    if (SHIBYTE(v276) < 0) {
      operator delete(v275[0]);
    }
    uint64_t v140 = v263;
    uint64_t v141 = (uint64_t *)v263[1];
    if (v141)
    {
      do
      {
        uint64_t v142 = v141;
        uint64_t v141 = (uint64_t *)*v141;
      }
      while (v141);
    }
    else
    {
      do
      {
        uint64_t v142 = (uint64_t *)v140[2];
        BOOL v18 = *v142 == (void)v140;
        uint64_t v140 = v142;
      }
      while (!v18);
    }
    unint64_t v265 = v139;
    uint64_t v121 = v142;
    if (v142 != (uint64_t *)&v288) {
      continue;
    }
    break;
  }
LABEL_543:
  uint64_t v249 = v289;
  for (unint64_t m = v290; v249 != m; v249 += 80)
  {
    *(_DWORD *)(v249 + 72) = -2;
    int v251 = *(void **)(v249 + 48);
    int v252 = *(void **)(v249 + 56);
    if (v251 != v252)
    {
      uint64_t v253 = 4294967294;
      do
      {
        uint64_t v254 = v251[1] - *v251;
        if (v254)
        {
          uint64_t v255 = v254 >> 4;
          if ((v253 & 0x80000000) != 0)
          {
            uint64_t v253 = v255;
            *(_DWORD *)(v249 + 72) = v255;
          }
          else if (v255 != v253)
          {
            goto LABEL_553;
          }
        }
        v251 += 3;
      }
      while (v251 != v252);
      if (v253 != 4294967294) {
        continue;
      }
    }
LABEL_553:
    *(_DWORD *)(v249 + 72) = -1;
  }
  sub_20B07883C(&v279, v139, v266, a5, a6, v262);

LABEL_556:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_20B07F74C((uint64_t)&v279);
LABEL_559:
}

void sub_20B077544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  sub_20B06DD8C((uint64_t)&STACK[0x350]);
  if (a43 < 0) {
    operator delete(a38);
  }
  sub_20B07F74C((uint64_t)&a44);

  _Unwind_Resume(a1);
}

std::string *sub_20B077928(std::string *this)
{
  uint64_t v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v3 = (char)v2;
  size_t v4 = (char *)this + v2;
  if (v3 >= 0) {
    std::string::size_type v5 = (std::string::size_type)v4;
  }
  else {
    std::string::size_type v5 = this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_;
  }
  if (v3 >= 0) {
    uint64_t v6 = this;
  }
  else {
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = MEMORY[0x263EF8318];
  while ((std::string *)v5 != v6)
  {
    unsigned int v9 = *(char *)--v5;
    unsigned int v8 = v9;
    if ((v9 & 0x80000000) != 0)
    {
      if (!__maskrune(v8, 0x4000uLL))
      {
LABEL_13:
        uint64_t v6 = (std::string *)(v5 + 1);
        break;
      }
    }
    else if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000) == 0)
    {
      goto LABEL_13;
    }
  }
  uint64_t v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v11 = (char)v10;
  unint64_t v12 = (char *)this + v10;
  if (v11 >= 0)
  {
    int v13 = this;
  }
  else
  {
    unint64_t v12 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    int v13 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  std::string::erase(this, (char *)v6 - (char *)v13, v12 - (char *)v6);
  int v14 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  std::string::size_type v15 = this->__r_.__value_.__r.__words[0];
  if (v14 >= 0) {
    unint64_t v16 = this;
  }
  else {
    unint64_t v16 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  if (v14 >= 0) {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    BOOL v18 = (std::string *)((char *)v16 + size);
    int v19 = v16;
    do
    {
      unsigned int v20 = v19->__r_.__value_.__s.__data_[0];
      if ((v20 & 0x80000000) != 0)
      {
        if (!__maskrune(v20, 0x4000uLL)) {
          goto LABEL_31;
        }
      }
      else if ((*(_DWORD *)(v7 + 4 * v20 + 60) & 0x4000) == 0)
      {
        goto LABEL_31;
      }
      int v19 = (std::string *)((char *)v19 + 1);
      --size;
    }
    while (size);
    int v19 = v18;
LABEL_31:
    LOBYTE(v14) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    std::string::size_type v15 = this->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v19 = v16;
  }
  if ((v14 & 0x80u) == 0) {
    uint64_t v21 = this;
  }
  else {
    uint64_t v21 = (std::string *)v15;
  }
  std::string::erase(this, (char *)v16 - (char *)v21, (char *)v19 - (char *)v16);
  return this;
}

void sub_20B077A70(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_20B077AC4((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_20B077AC4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    size_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

std::string *sub_20B077B14@<X0>(const std::string *__s@<X1>, std::string *result@<X0>, std::string *a3@<X8>)
{
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v6 = (std::string *)__s->__r_.__value_.__r.__words[0];
    int64_t size = __s->__r_.__value_.__l.__size_;
  }
  else
  {
    int64_t size = HIBYTE(__s->__r_.__value_.__r.__words[2]);
    uint64_t v6 = (std::string *)__s;
  }
  int v7 = SHIBYTE(result->__r_.__value_.__r.__words[2]);
  if (v7 >= 0) {
    unsigned int v8 = result;
  }
  else {
    unsigned int v8 = (std::string *)result->__r_.__value_.__r.__words[0];
  }
  if (v7 >= 0) {
    int64_t v9 = HIBYTE(result->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v9 = result->__r_.__value_.__l.__size_;
  }
  if (!v9) {
    return std::string::basic_string(a3, __s, v9 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
  }
  if (size >= v9)
  {
    uint64_t v10 = (std::string *)((char *)v6 + size);
    int v11 = v8->__r_.__value_.__s.__data_[0];
    uint64_t result = v6;
    do
    {
      int64_t v12 = size - v9;
      if (v12 == -1) {
        break;
      }
      uint64_t result = (std::string *)memchr(result, v11, v12 + 1);
      if (!result) {
        break;
      }
      int v13 = result;
      uint64_t result = (std::string *)memcmp(result, v8, v9);
      if (!result)
      {
        if (v13 == v10 || v13 != v6) {
          break;
        }
        return std::string::basic_string(a3, __s, v9 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
      }
      uint64_t result = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
      int64_t size = (char *)v10 - ((char *)&v13->__r_.__value_.__l.__data_ + 1);
    }
    while (size >= v9);
  }
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&__s->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = __s->__r_.__value_.__r.__words[2];
  __s->__r_.__value_.__l.__size_ = 0;
  __s->__r_.__value_.__r.__words[2] = 0;
  __s->__r_.__value_.__r.__words[0] = 0;
  return result;
}

float32x4_t *sub_20B077C2C(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF5EC(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    char v14 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (float32x4_t *)i->i64[0])
      {
        unint64_t v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_20B0BF5FC(a1 + 32, i + 1, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i32[0] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  id v24 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
  if (v24)
  {
    i->i64[0] = (uint64_t)*v24;
LABEL_38:
    *id v24 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v13) = a1 + 16;
  if (i->i64[0])
  {
    unint64_t v25 = *(void *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    id v24 = (float32x4_t **)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20B077E7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20B077E90(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_20B05D178();
  }
  return operator new(16 * a2);
}

uint64_t sub_20B077EC8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 8);
  if (v1 <= 3) {
    int v2 = *(_DWORD *)(result + 8);
  }
  else {
    int v2 = v1 - 4;
  }
  switch(v2)
  {
    case 0:
      goto LABEL_9;
    case 1:
      int v3 = (void *)std::ostream::operator<<();
      sub_20B07FC90(v3, (uint64_t)"/", 1);
      goto LABEL_9;
    case 2:
      size_t v4 = (void *)std::ostream::operator<<();
      std::string::size_type v5 = "//";
      uint64_t v6 = 2;
      goto LABEL_8;
    case 3:
      int v7 = (void *)std::ostream::operator<<();
      sub_20B07FC90(v7, (uint64_t)"/", 1);
      size_t v4 = (void *)std::ostream::operator<<();
      std::string::size_type v5 = "/";
      uint64_t v6 = 1;
LABEL_8:
      sub_20B07FC90(v4, (uint64_t)v5, v6);
LABEL_9:
      uint64_t result = std::ostream::operator<<();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_20B077FD4(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4F688;
  sub_20B0780A4(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_20B07801C(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4F688;
  sub_20B0780A4(a1 + 8, *(void **)(a1 + 16));

  JUMPOUT(0x210532650);
}

void *sub_20B078084@<X0>(void *a1@<X8>)
{
  return sub_20B07F8E0(a1, "");
}

void *sub_20B078094@<X0>(void *a1@<X8>)
{
  return sub_20B07F8E0(a1, "");
}

void sub_20B0780A4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20B0780A4(a1, *a2);
    sub_20B0780A4(a1, a2[1]);
    sub_20B078100((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20B078100(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_20B078158(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_20B07CF64(a1, a2);
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    *(void *)(v3 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)unint64_t v3 = v4;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(v3 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(v3 + 24) = v5;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    *(void *)(v3 + 64) = 0;
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    *(void *)(v3 + 64) = *(void *)(a2 + 64);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(_DWORD *)(v3 + 72) = *(_DWORD *)(a2 + 72);
    uint64_t result = v3 + 80;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_20B0781F0(uint64_t a1)
{
  unint64_t v3 = (void **)(a1 + 48);
  sub_20B07D3AC(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20B07824C@<X0>(const void **a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t result = sub_20B07D458((uint64_t)a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v8 = (char *)result;
  }
  else {
    unint64_t v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v9 = a1;
    }
    else {
      unint64_t v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  unint64_t v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint8x8_t v11 = a2;
    }
    else {
      uint8x8_t v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

char *sub_20B078320(char **a1, uint64_t *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      sub_20B05D0BC();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      char v14 = (char *)sub_20B07D4F8(v4, v13);
    }
    else {
      char v14 = 0;
    }
    std::string::size_type v15 = &v14[12 * v10];
    unint64_t v16 = &v14[12 * v13];
    uint64_t v17 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *(void *)std::string::size_type v15 = v17;
    unint64_t v9 = v15 + 12;
    BOOL v19 = *a1;
    float v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 12);
        v18 -= 12;
        int v21 = *((_DWORD *)v18 + 2);
        *(void *)(v15 - 12) = v20;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v21;
      }
      while (v18 != v19);
      float v18 = *a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    uint64_t v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v7 = v8;
    unint64_t v9 = (char *)(v7 + 12);
  }
  a1[1] = v9;
  return v9 - 12;
}

_OWORD *sub_20B078440(void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_20B05D0BC();
    }
    uint64_t v11 = v5 - (void)*a1;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_20B077E90(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    char v14 = &v13[16 * v9];
    std::string::size_type v15 = &v13[16 * v12];
    *(_OWORD *)char v14 = *a2;
    uint64_t v8 = v14 + 16;
    uint64_t v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
  return v8 - 1;
}

void *sub_20B078534(void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_20B0602EC(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    char v14 = &v13[8 * v9];
    std::string::size_type v15 = &v13[8 * v12];
    *(void *)char v14 = *a2;
    uint64_t v8 = v14 + 8;
    uint64_t v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
  return v8 - 1;
}

void *sub_20B078618(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_20B05D0BC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v17[4] = v4;
    unint64_t v13 = (char *)sub_20B07D5B8(v4, v12);
    char v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)char v14 = 0;
    *(_OWORD *)char v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    sub_20B07D540(a1, v17);
    uint64_t v8 = (void *)a1[1];
    sub_20B07D724((uint64_t)v17);
  }
  else
  {
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_20B078748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B07D724((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B07875C(void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_20B05D0BC();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_20B077E90(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    char v14 = &v13[16 * v9];
    uint64_t v15 = &v13[16 * v12];
    *(_OWORD *)char v14 = *a2;
    uint64_t v8 = v14 + 16;
    uint64_t v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        long long v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *unint64_t v7 = *a2;
    uint64_t v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_20B07883C(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  v830[2] = *MEMORY[0x263EF8340];
  id v757 = a2;
  id v767 = a3;
  uint64_t v9 = a1[13] - a1[12];
  if (v9) {
    BOOL v763 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2) == v9 >> 4;
  }
  else {
    BOOL v763 = 0;
  }
  uint64_t v764 = a1[9];
  uint64_t v765 = a1[10];
  uint64_t v761 = a1[3];
  uint64_t v762 = a1[4];
  uint64_t v759 = a1[6];
  uint64_t v760 = a1[7];
  long long v805 = 0u;
  long long v806 = 0u;
  uint64_t v807 = 1065353216;
  std::string __p = 0;
  unint64_t v802 = 0;
  unint64_t v804 = 0;
  uint64_t v10 = a1[18];
  uint64_t v773 = a1[19];
  int v778 = a1;
  if (v10 == v773)
  {
    unint64_t v33 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    int v772 = a5;
    uint64_t v11 = 0;
    __int32 v12 = 0;
    do
    {
      uint64_t v14 = *(void *)(v10 + 48);
      uint64_t v13 = *(void *)(v10 + 56);
      uint64_t v779 = v10;
      uint64_t v781 = v13;
      while (v14 != v13)
      {
        uint64_t v15 = v11;
        uint64_t v17 = *(_OWORD **)v14;
        unint64_t v16 = *(_OWORD **)(v14 + 8);
        uint64_t v18 = (uint64_t)v16 - *(void *)v14;
        uint64_t v19 = v18 >> 4;
        int v20 = a4;
        if ((unint64_t)v18 < 0x31) {
          int v20 = 1;
        }
        uint64_t v21 = (v18 >> 3) + (v18 >> 4) - 6;
        if (v20) {
          uint64_t v22 = v19;
        }
        else {
          uint64_t v22 = v21;
        }
        for (; v17 != v16; ++v17)
        {
          v819[1] = 0;
          v819[0] = 0;
          *(_OWORD *)uint64_t v819 = *v17;
          if (!sub_20B07D860(&v805, (int32x2_t *)v819))
          {
            int v823 = v819;
            sub_20B07D954((uint64_t)&v805, (int32x2_t *)v819, (uint64_t)&unk_20B1E7420, (int32x4_t **)&v823)[2].i32[0] = v12;
            uint64_t v23 = (char *)__p;
            if ((unint64_t)__p >= v804)
            {
              int64_t v25 = ((unsigned char *)__p - (unsigned char *)v802) >> 4;
              if ((unint64_t)(v25 + 1) >> 60) {
                sub_20B05D0BC();
              }
              unint64_t v26 = (uint64_t)(v804 - (void)v802) >> 3;
              if (v26 <= v25 + 1) {
                unint64_t v26 = v25 + 1;
              }
              if (v804 - (unint64_t)v802 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              if (v27) {
                id v28 = (char *)sub_20B077E90((uint64_t)&v804, v27);
              }
              else {
                id v28 = 0;
              }
              unint64_t v29 = &v28[16 * v25];
              *(_OWORD *)unint64_t v29 = *(_OWORD *)v819;
              id v24 = v29 + 16;
              uint64_t v30 = (char *)__p;
              uint64_t v31 = (char *)v802;
              if (__p != v802)
              {
                do
                {
                  long long v32 = *((_OWORD *)v30 - 1);
                  v30 -= 16;
                  *((_OWORD *)v29 - 1) = v32;
                  v29 -= 16;
                }
                while (v30 != v31);
                uint64_t v30 = (char *)v802;
              }
              unint64_t v802 = v29;
              std::string __p = v24;
              unint64_t v804 = (unint64_t)&v28[16 * v27];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)v819;
              id v24 = v23 + 16;
            }
            ++v12;
            std::string __p = v24;
          }
        }
        uint64_t v11 = v22 + v15;
        v14 += 24;
        uint64_t v13 = v781;
      }
      uint64_t v10 = v779 + 80;
    }
    while (v779 + 80 != v773);
    unint64_t v33 = *((void *)&v806 + 1);
    a5 = v772;
  }
  int v769 = objc_alloc_init(MDLVertexDescriptor);
  unint64_t v36 = objc_msgSend_attributes(v769, v34, v35);
  unint64_t v38 = objc_msgSend_objectAtIndexedSubscript_(v36, v37, 0);
  unint64_t v758 = v33;
  objc_msgSend_setName_(v38, v39, @"position");

  unint64_t v42 = objc_msgSend_attributes(v769, v40, v41);
  int v44 = objc_msgSend_objectAtIndexedSubscript_(v42, v43, 0);
  objc_msgSend_setFormat_(v44, v45, 786435);

  uint64_t v48 = objc_msgSend_attributes(v769, v46, v47);
  uint64_t v50 = objc_msgSend_objectAtIndexedSubscript_(v48, v49, 0);
  objc_msgSend_setBufferIndex_(v50, v51, 0);

  int v54 = objc_msgSend_attributes(v769, v52, v53);
  int v56 = objc_msgSend_objectAtIndexedSubscript_(v54, v55, 0);
  objc_msgSend_setOffset_(v56, v57, 0);

  if (v765 == v764)
  {
    unsigned int v82 = 12;
    unsigned int v83 = 1;
  }
  else
  {
    int v60 = objc_msgSend_attributes(v769, v58, v59);
    int v62 = objc_msgSend_objectAtIndexedSubscript_(v60, v61, 1);
    objc_msgSend_setName_(v62, v63, @"normal");

    unint64_t v66 = objc_msgSend_attributes(v769, v64, v65);
    unsigned int v68 = objc_msgSend_objectAtIndexedSubscript_(v66, v67, 1);
    objc_msgSend_setFormat_(v68, v69, 786435);

    uint64_t v72 = objc_msgSend_attributes(v769, v70, v71);
    int v74 = objc_msgSend_objectAtIndexedSubscript_(v72, v73, 1);
    objc_msgSend_setBufferIndex_(v74, v75, 0);

    uint64_t v78 = objc_msgSend_attributes(v769, v76, v77);
    unint64_t v80 = objc_msgSend_objectAtIndexedSubscript_(v78, v79, 1);
    objc_msgSend_setOffset_(v80, v81, 12);

    unsigned int v82 = 24;
    unsigned int v83 = 2;
  }
  if (v763)
  {
    long long v84 = objc_msgSend_attributes(v769, v58, v59);
    int64_t v86 = objc_msgSend_objectAtIndexedSubscript_(v84, v85, v83);
    objc_msgSend_setName_(v86, v87, @"color");

    unint64_t v90 = objc_msgSend_attributes(v769, v88, v89);
    int64_t v92 = objc_msgSend_objectAtIndexedSubscript_(v90, v91, v83);
    objc_msgSend_setFormat_(v92, v93, 786436);

    uint64_t v96 = objc_msgSend_attributes(v769, v94, v95);
    uint64_t v98 = objc_msgSend_objectAtIndexedSubscript_(v96, v97, v83);
    objc_msgSend_setBufferIndex_(v98, v99, 0);

    uint64_t v102 = objc_msgSend_attributes(v769, v100, v101);
    std::string::size_type v104 = objc_msgSend_objectAtIndexedSubscript_(v102, v103, v83);
    objc_msgSend_setOffset_(v104, v105, v82);

    ++v83;
    v82 += 16;
  }
  if (v762 != v761)
  {
    int v106 = objc_msgSend_attributes(v769, v58, v59);
    int64_t v108 = objc_msgSend_objectAtIndexedSubscript_(v106, v107, v83);
    objc_msgSend_setName_(v108, v109, @"textureCoordinate");

    uint64_t v112 = objc_msgSend_attributes(v769, v110, v111);
    int v114 = objc_msgSend_objectAtIndexedSubscript_(v112, v113, v83);
    objc_msgSend_setFormat_(v114, v115, 786434);

    int v118 = objc_msgSend_attributes(v769, v116, v117);
    uint64_t v120 = objc_msgSend_objectAtIndexedSubscript_(v118, v119, v83);
    objc_msgSend_setBufferIndex_(v120, v121, 0);

    uint64_t v124 = objc_msgSend_attributes(v769, v122, v123);
    uint64_t v126 = objc_msgSend_objectAtIndexedSubscript_(v124, v125, v83);
    objc_msgSend_setOffset_(v126, v127, v82);

    ++v83;
    v82 += 8;
  }
  if (v760 != v759)
  {
    unint64_t v128 = objc_msgSend_stringWithFormat_(NSString, v58, @"%@2", @"textureCoordinate");
    uint64_t v131 = objc_msgSend_attributes(v769, v129, v130);
    uint64_t v132 = v83;
    uint64_t v134 = objc_msgSend_objectAtIndexedSubscript_(v131, v133, v83);
    objc_msgSend_setName_(v134, v135, (uint64_t)v128);

    uint64_t v138 = objc_msgSend_attributes(v769, v136, v137);
    uint64_t v140 = objc_msgSend_objectAtIndexedSubscript_(v138, v139, v132);
    objc_msgSend_setFormat_(v140, v141, 786434);

    uint64_t v144 = objc_msgSend_attributes(v769, v142, v143);
    uint64_t v146 = objc_msgSend_objectAtIndexedSubscript_(v144, v145, v132);
    objc_msgSend_setBufferIndex_(v146, v147, 0);

    int v150 = objc_msgSend_attributes(v769, v148, v149);
    float32x4_t v152 = objc_msgSend_objectAtIndexedSubscript_(v150, v151, v132);
    objc_msgSend_setOffset_(v152, v153, v82);

    v82 += 8;
  }
  uint64_t v154 = objc_msgSend_layouts(v769, v58, v59);
  uint64_t v156 = objc_msgSend_objectAtIndexedSubscript_(v154, v155, 0);
  objc_msgSend_setStride_(v156, v157, v82);

  objc_msgSend_setPackedOffsets(v769, v158, v159);
  objc_msgSend_setPackedStrides(v769, v160, v161);
  objc_msgSend__conformVertexBuffers_error_(v767, v162, (uint64_t)v769, 0);
  if (!v11)
  {
    uint64_t v175 = "OBJ file has no faces";
LABEL_54:
    sub_20B07F8E0(a6, v175);
    goto LABEL_55;
  }
  if (!v33)
  {
    uint64_t v175 = "No vertices in OBJ file";
    goto LABEL_54;
  }
  uint64_t v165 = objc_msgSend_layouts(v769, v163, v164);
  uint64_t v167 = objc_msgSend_objectAtIndexedSubscript_(v165, v166, 0);
  unint64_t v170 = objc_msgSend_stride(v167, v168, v169);

  unint64_t v173 = v33;
  if (a5) {
    NSLog(&cfstr_CreatingVertex.isa, v33);
  }
  id v174 = v778;
  if (!is_mul_ok(v170, v758))
  {
    sub_20B07F8E0(a6, "Too many vertices in OBJ file");
    goto LABEL_55;
  }
  uint64_t v753 = v170 * v758;
  if ((a4 & 1) == 0)
  {
    uint64_t v176 = objc_msgSend_vertexDescriptor(v767, v171, v172);
    BOOL v177 = v176 == 0;

    if (v177)
    {
      v227 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v178, v753);
      v830[0] = v227;
      unsigned __int32 v229 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v228, 4 * v11);
      v830[1] = v229;
      v226 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v230, (uint64_t)v830, 2);

      objc_msgSend_numberWithUnsignedInteger_(NSNumber, v231, 1);
      id v223 = (id)objc_claimAutoreleasedReturnValue();
      v829[0] = v223;
      unint64_t v225 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v232, 2);
      v829[1] = v225;
      objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v233, (uint64_t)v829, 2);
      id v224 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v179 = objc_alloc_init(MEMORY[0x263EFF980]);
      id v182 = objc_alloc_init(MEMORY[0x263EFF980]);
      for (unsigned int i = 0; ; unsigned int i = v190 + 1)
      {
        int v184 = objc_msgSend_vertexDescriptor(v767, v180, v181);
        uint64_t v187 = objc_msgSend_layouts(v184, v185, v186);
        uint64_t v190 = i;
        BOOL v191 = objc_msgSend_count(v187, v188, v189) > (unint64_t)i;

        if (!v191) {
          break;
        }
        int v194 = objc_msgSend_vertexDescriptor(v767, v192, v193);
        uint64_t v197 = objc_msgSend_layouts(v194, v195, v196);
        std::string::size_type v199 = objc_msgSend_objectAtIndexedSubscript_(v197, v198, v190);
        BOOL v202 = objc_msgSend_stride(v199, v200, v201) == 0;

        if (!v202)
        {
          v203 = objc_msgSend_vertexDescriptor(v767, v180, v181);
          uint64_t v206 = objc_msgSend_layouts(v203, v204, v205);
          v208 = objc_msgSend_objectAtIndexedSubscript_(v206, v207, v190);
          uint64_t v211 = objc_msgSend_stride(v208, v209, v210);

          uint64_t v213 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v212, v211 * v758);
          objc_msgSend_addObject_(v179, v214, (uint64_t)v213);

          unint64_t v216 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v215, 1);
          objc_msgSend_addObject_(v182, v217, (uint64_t)v216);
        }
      }
      v218 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v192, 4 * v11);
      objc_msgSend_addObject_(v179, v219, (uint64_t)v218);

      v221 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v220, 2);
      objc_msgSend_addObject_(v182, v222, (uint64_t)v221);

      id v223 = v179;
      id v224 = v182;
      unint64_t v225 = v224;
      v226 = v223;
    }
    id v234 = v224;

    id v174 = v778;
    unint64_t v173 = v758;
  }
  unint64_t v800 = 0;
  uint64_t v799 = 0;
  uint64_t v801 = 0;
  sub_20B07D7B8(&v799, 2 * v173);
  v797 = 0;
  int v796 = 0;
  v798 = 0;
  if (a5) {
    NSLog(&cfstr_AddingDSubmesh.isa, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v174[19] - v174[18]) >> 4));
  }
  id v754 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v766 = v174[18];
  uint64_t v756 = v174[19];
  if (v766 != v756)
  {
    v240.i32[3] = 0;
    while (1)
    {
      unint64_t v800 = (__int32 *)v799;
      if (!a4) {
        break;
      }
      int v241 = *(_DWORD *)(v766 + 72);
      unsigned int v242 = v241 - 3;
      uint64_t v243 = 2;
      if (v241 == 4) {
        uint64_t v243 = 4;
      }
      uint64_t v244 = 5;
      if (v241 == 1) {
        uint64_t v244 = 0;
      }
      if (v241 == 2) {
        uint64_t v245 = 1;
      }
      else {
        uint64_t v245 = v244;
      }
      if (v242 < 2) {
        uint64_t v245 = v243;
      }
      uint64_t v771 = v245;
      BOOL v246 = *(void **)(v766 + 48);
      uint64_t v247 = *(void **)(v766 + 56);
      while (v246 != v247)
      {
        unint64_t v248 = v246[1] - *v246;
        unint64_t v249 = v248 >> 4;
        v250 = v797;
        if (v797 >= v798)
        {
          int v252 = (char *)v796;
          uint64_t v253 = (v797 - (unsigned char *)v796) >> 2;
          unint64_t v254 = v253 + 1;
          if ((unint64_t)(v253 + 1) >> 62) {
            sub_20B05D0BC();
          }
          uint64_t v255 = v798 - (unsigned char *)v796;
          if ((v798 - (unsigned char *)v796) >> 1 > v254) {
            unint64_t v254 = v255 >> 1;
          }
          if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v254;
          }
          if (v235)
          {
            unint64_t v256 = (char *)sub_20B05D1AC((uint64_t)&v798, v235);
            v250 = v797;
            int v252 = (char *)v796;
          }
          else
          {
            unint64_t v256 = 0;
          }
          uint64_t v257 = &v256[4 * v253];
          *(_DWORD *)uint64_t v257 = v249;
          int v251 = v257 + 4;
          while (v250 != v252)
          {
            int v258 = *((_DWORD *)v250 - 1);
            v250 -= 4;
            *((_DWORD *)v257 - 1) = v258;
            v257 -= 4;
          }
          int v796 = v257;
          v797 = v251;
          v798 = &v256[4 * v235];
          if (v252) {
            operator delete(v252);
          }
        }
        else
        {
          *(_DWORD *)v797 = v249;
          int v251 = v250 + 4;
        }
        v797 = v251;
        if (v249)
        {
          uint64_t v259 = 0;
          uint64_t v260 = (v248 >> 4);
          do
          {
            v819[0] = (void *)(*v246 + 16 * v259);
            id v261 = sub_20B07D954((uint64_t)&v805, (int32x2_t *)v819[0], (uint64_t)&unk_20B1E7420, (int32x4_t **)v819);
            v262 = v261;
            v263 = v800;
            if (v800 >= (__int32 *)v801)
            {
              unint64_t v265 = (__int32 *)v799;
              uint64_t v266 = ((char *)v800 - (unsigned char *)v799) >> 2;
              unint64_t v267 = v266 + 1;
              if ((unint64_t)(v266 + 1) >> 62) {
                sub_20B05D0BC();
              }
              uint64_t v268 = v801 - (unsigned char *)v799;
              if ((v801 - (unsigned char *)v799) >> 1 > v267) {
                unint64_t v267 = v268 >> 1;
              }
              if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v235 = v267;
              }
              if (v235)
              {
                int v269 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
                v263 = v800;
                unint64_t v265 = (__int32 *)v799;
              }
              else
              {
                int v269 = 0;
              }
              int v270 = &v269[4 * v266];
              *(_DWORD *)int v270 = v262[2].i32[0];
              uint64_t v264 = (__int32 *)(v270 + 4);
              while (v263 != v265)
              {
                int v271 = *--v263;
                *((_DWORD *)v270 - 1) = v271;
                v270 -= 4;
              }
              uint64_t v799 = v270;
              unint64_t v800 = v264;
              uint64_t v801 = &v269[4 * v235];
              if (v265) {
                operator delete(v265);
              }
            }
            else
            {
              *unint64_t v800 = v261[2].i32[0];
              uint64_t v264 = v263 + 1;
            }
            unint64_t v800 = v264;
            ++v259;
          }
          while (v259 != v260);
        }
        v246 += 3;
      }
LABEL_576:
      int64_t v584 = (char *)v800 - (unsigned char *)v799;
      if (v800 != v799)
      {
        id v585 = objc_alloc(MEMORY[0x263EFF8F8]);
        v777 = (MDLSubmeshTopology *)objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v585, v586, (uint64_t)v799, v584, 0);
        v589 = objc_msgSend_bufferAllocator(v767, v587, v588);
        unint64_t v591 = objc_msgSend_newBufferFromZone_data_type_(v589, v590, 0, v777, 2);

        if (objc_msgSend_conformsToProtocol_(v591, v592, (uint64_t)&unk_26BF5ED88))
        {
          id v593 = v591;
          v595 = objc_msgSend_stringByAppendingString_(@"MDL_OBJ", v594, @"-Indices");
          objc_msgSend_setName_(v593, v596, (uint64_t)v595);
        }
        if (!v591)
        {
          sub_20B07F8E0(a6, "Could not allocate index buffer");
          v619 = v777;
          goto LABEL_688;
        }
        id v597 = [NSString alloc];
        v599 = (void *)(v766 + 24);
        if (*(char *)(v766 + 47) < 0) {
          v599 = (void *)*v599;
        }
        uint64_t v600 = objc_msgSend_initWithCString_encoding_(v597, v598, (uint64_t)v599, 4);
        long long v788 = 0u;
        long long v789 = 0u;
        long long v786 = 0u;
        long long v787 = 0u;
        id v601 = v757;
        uint64_t v605 = objc_msgSend_countByEnumeratingWithState_objects_count_(v601, v602, (uint64_t)&v786, v828, 16);
        if (v605)
        {
          uint64_t v606 = *(void *)v787;
LABEL_584:
          uint64_t v607 = 0;
          while (1)
          {
            if (*(void *)v787 != v606) {
              objc_enumerationMutation(v601);
            }
            v608 = *(void **)(*((void *)&v786 + 1) + 8 * v607);
            v609 = objc_msgSend_name(v608, v603, v604);
            char isEqualToString = objc_msgSend_isEqualToString_(v609, v610, (uint64_t)v600);

            if (isEqualToString) {
              break;
            }
            if (v605 == ++v607)
            {
              uint64_t v605 = objc_msgSend_countByEnumeratingWithState_objects_count_(v601, v603, (uint64_t)&v786, v828, 16);
              if (v605) {
                goto LABEL_584;
              }
              goto LABEL_590;
            }
          }
          id v614 = v608;

          if (v614) {
            goto LABEL_595;
          }
        }
        else
        {
LABEL_590:
        }
        if (objc_msgSend_count(v601, v612, v613))
        {
          objc_msgSend_objectAtIndex_(v601, v615, 0);
          id v614 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          int v616 = [MDLMaterial alloc];
          int v617 = objc_opt_new();
          id v614 = (id)objc_msgSend_initWithName_scatteringFunction_(v616, v618, (uint64_t)v600, v617);
        }
LABEL_595:
        if (a4)
        {
          v619 = objc_alloc_init(MDLSubmeshTopology);
          uint64_t v620 = v797;
          unint64_t v621 = v796;
          v624 = objc_msgSend_bufferAllocator(v767, v622, v623);
          int v626 = objc_msgSend_newBufferFromZone_length_type_(v624, v625, 0, (v620 - v621) >> 2, 1);
          objc_msgSend_setFaceTopology_(v619, v627, (uint64_t)v626);

          unint64_t v630 = objc_msgSend_faceTopology(v619, v628, v629);
          LODWORD(v620) = objc_msgSend_conformsToProtocol_(v630, v631, (uint64_t)&unk_26BF5ED88);

          if (v620)
          {
            v634 = objc_msgSend_faceTopology(v619, v632, v633);
            v636 = objc_msgSend_stringByAppendingString_(@"MDL_OBJ", v635, @"-Topology");
            objc_msgSend_setName_(v634, v637, (uint64_t)v636);
          }
          uint64_t v638 = objc_msgSend_faceTopology(v619, v632, v633);
          BOOL v639 = v638 == 0;

          if (v639)
          {
            sub_20B07F8E0(a6, "Could not allocate topology buffer");

            goto LABEL_686;
          }
          v642 = objc_msgSend_faceTopology(v619, v640, v641);
          int v645 = objc_msgSend_map(v642, v643, v644);

          uint64_t v648 = objc_msgSend_bytes(v645, v646, v647);
          uint64_t v650 = v796;
          if (v797 == v796)
          {
            unint64_t v652 = (v797 - (unsigned char *)v796) >> 2;
          }
          else
          {
            unint64_t v651 = 0;
            do
            {
              *(unsigned char *)(v648 + v651) = v650[v651];
              ++v651;
              uint64_t v650 = v796;
              unint64_t v652 = (v797 - (unsigned char *)v796) >> 2;
            }
            while (v652 > v651);
          }
          objc_msgSend_setFaceCount_(v619, v649, v652);
        }
        else
        {
          v619 = 0;
        }
        uint64_t v653 = v766;
        if (*(char *)(v766 + 23) < 0) {
          uint64_t v653 = *(void *)v766;
        }
        int v654 = objc_msgSend_stringWithCString_encoding_(NSString, v612, v653, 4);
        v655 = [MDLSubmesh alloc];
        v657 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v655, v656, (uint64_t)v654, v591, ((char *)v800 - (unsigned char *)v799) >> 2, 32, v771, v614, v619);
        objc_msgSend_addObject_(v754, v658, (uint64_t)v657);
        v797 = (char *)v796;
      }
      v766 += 80;
      if (v766 == v756) {
        goto LABEL_610;
      }
    }
    id v273 = *(int32x2_t ***)(v766 + 48);
    v272 = *(int32x2_t ***)(v766 + 56);
    for (uint64_t j = v272; ; v272 = j)
    {
      if (v273 == v272)
      {
        uint64_t v771 = 2;
        goto LABEL_576;
      }
      uint64_t v274 = *v273;
      unint64_t v275 = (char *)v273[1] - (char *)*v273;
      unint64_t v276 = v275 >> 4;
      if ((v275 >> 4) == 3)
      {
        v819[0] = *v273;
        __int32 v285 = sub_20B07D954((uint64_t)&v805, v274, (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
        v819[0] = &(*v273)[2];
        __int32 v286 = sub_20B07D954((uint64_t)&v805, (int32x2_t *)v819[0], (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
        v819[0] = &(*v273)[4];
        __int32 v287 = sub_20B07D954((uint64_t)&v805, (int32x2_t *)v819[0], (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
        long long v288 = v800;
        uint64_t v289 = v801;
        if (v800 >= (__int32 *)v801)
        {
          long long v315 = (__int32 *)v799;
          uint64_t v316 = ((char *)v800 - (unsigned char *)v799) >> 2;
          unint64_t v317 = v316 + 1;
          if ((unint64_t)(v316 + 1) >> 62) {
            goto LABEL_699;
          }
          uint64_t v318 = v801 - (unsigned char *)v799;
          if ((v801 - (unsigned char *)v799) >> 1 > v317) {
            unint64_t v317 = v318 >> 1;
          }
          if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v317;
          }
          if (v235)
          {
            long long v319 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
            long long v288 = v800;
            long long v315 = (__int32 *)v799;
          }
          else
          {
            long long v319 = 0;
          }
          v414 = (__int32 *)&v319[4 * v316];
          __int32 *v414 = v285;
          unint64_t v290 = v414 + 1;
          while (v288 != v315)
          {
            __int32 v415 = *--v288;
            *--v414 = v415;
          }
          uint64_t v289 = &v319[4 * v235];
          uint64_t v799 = v414;
          unint64_t v800 = v290;
          uint64_t v801 = v289;
          if (v315)
          {
            operator delete(v315);
            uint64_t v289 = v801;
          }
        }
        else
        {
          *unint64_t v800 = v285;
          unint64_t v290 = v288 + 1;
        }
        unint64_t v800 = v290;
        if (v290 >= (__int32 *)v289)
        {
          unint64_t v417 = (__int32 *)v799;
          uint64_t v418 = ((char *)v290 - (unsigned char *)v799) >> 2;
          unint64_t v419 = v418 + 1;
          if ((unint64_t)(v418 + 1) >> 62) {
            goto LABEL_699;
          }
          uint64_t v420 = v289 - (unsigned char *)v799;
          if (v420 >> 1 > v419) {
            unint64_t v419 = v420 >> 1;
          }
          if ((unint64_t)v420 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v419;
          }
          if (v235)
          {
            v421 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
            unint64_t v290 = v800;
            unint64_t v417 = (__int32 *)v799;
          }
          else
          {
            v421 = 0;
          }
          v423 = (__int32 *)&v421[4 * v418];
          __int32 *v423 = v286;
          uint64_t v416 = v423 + 1;
          while (v290 != v417)
          {
            __int32 v424 = *--v290;
            *--v423 = v424;
          }
          uint64_t v289 = &v421[4 * v235];
          uint64_t v799 = v423;
          unint64_t v800 = v416;
          uint64_t v801 = v289;
          if (v417)
          {
            operator delete(v417);
            uint64_t v289 = v801;
          }
        }
        else
        {
          __int32 *v290 = v286;
          uint64_t v416 = v290 + 1;
        }
        unint64_t v800 = v416;
        if (v416 < (__int32 *)v289)
        {
          *uint64_t v416 = v287;
          uint64_t v407 = v416 + 1;
          goto LABEL_338;
        }
        v394 = (__int32 *)v799;
        uint64_t v425 = ((char *)v416 - (unsigned char *)v799) >> 2;
        unint64_t v426 = v425 + 1;
        if ((unint64_t)(v425 + 1) >> 62) {
LABEL_699:
        }
          sub_20B05D0BC();
        uint64_t v427 = v289 - (unsigned char *)v799;
        if (v427 >> 1 > v426) {
          unint64_t v426 = v427 >> 1;
        }
        if ((unint64_t)v427 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v235 = v426;
        }
        if (v235)
        {
          uint64_t v398 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
          uint64_t v416 = v800;
          v394 = (__int32 *)v799;
        }
        else
        {
          uint64_t v398 = 0;
        }
        v406 = (__int32 *)&v398[4 * v425];
        __int32 *v406 = v287;
        uint64_t v407 = v406 + 1;
        while (v416 != v394)
        {
          __int32 v428 = *--v416;
          *--v406 = v428;
        }
LABEL_336:
        uint64_t v799 = v406;
        unint64_t v800 = v407;
        uint64_t v801 = &v398[4 * v235];
        if (v394) {
          operator delete(v394);
        }
        goto LABEL_338;
      }
      if (v276 == 2)
      {
        v819[0] = *v273;
        __int32 v281 = sub_20B07D954((uint64_t)&v805, v274, (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
        v819[0] = &(*v273)[2];
        __int32 v277 = sub_20B07D954((uint64_t)&v805, (int32x2_t *)v819[0], (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
        long long v282 = v800;
        long long v283 = v801;
        if (v800 >= (__int32 *)v801)
        {
          std::string v310 = (__int32 *)v799;
          uint64_t v311 = ((char *)v800 - (unsigned char *)v799) >> 2;
          unint64_t v312 = v311 + 1;
          if ((unint64_t)(v311 + 1) >> 62) {
            goto LABEL_699;
          }
          uint64_t v313 = v801 - (unsigned char *)v799;
          if ((v801 - (unsigned char *)v799) >> 1 > v312) {
            unint64_t v312 = v313 >> 1;
          }
          if ((unint64_t)v313 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v312;
          }
          if (v235)
          {
            long long v314 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
            long long v282 = v800;
            std::string v310 = (__int32 *)v799;
          }
          else
          {
            long long v314 = 0;
          }
          unint64_t v399 = (__int32 *)&v314[4 * v311];
          *unint64_t v399 = v281;
          long long v284 = v399 + 1;
          while (v282 != v310)
          {
            __int32 v400 = *--v282;
            *--unint64_t v399 = v400;
          }
          long long v283 = &v314[4 * v235];
          uint64_t v799 = v399;
          unint64_t v800 = v284;
          uint64_t v801 = v283;
          if (v310)
          {
            operator delete(v310);
            long long v283 = v801;
          }
        }
        else
        {
          *unint64_t v800 = v281;
          long long v284 = v282 + 1;
        }
        unint64_t v800 = v284;
        if (v284 >= (__int32 *)v283)
        {
          unint64_t v401 = (__int32 *)v799;
          uint64_t v402 = ((char *)v284 - (unsigned char *)v799) >> 2;
          unint64_t v403 = v402 + 1;
          if ((unint64_t)(v402 + 1) >> 62) {
            goto LABEL_699;
          }
          uint64_t v404 = v283 - (unsigned char *)v799;
          if (v404 >> 1 > v403) {
            unint64_t v403 = v404 >> 1;
          }
          if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v403;
          }
          if (v235)
          {
            v405 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
            long long v284 = v800;
            unint64_t v401 = (__int32 *)v799;
          }
          else
          {
            v405 = 0;
          }
          uint64_t v409 = (__int32 *)&v405[4 * v402];
          *uint64_t v409 = v277;
          unsigned __int32 v386 = v409 + 1;
          while (v284 != v401)
          {
            __int32 v410 = *--v284;
            *--uint64_t v409 = v410;
          }
          long long v283 = &v405[4 * v235];
          uint64_t v799 = v409;
          unint64_t v800 = v386;
          uint64_t v801 = v283;
          if (v401)
          {
            operator delete(v401);
            long long v283 = v801;
          }
        }
        else
        {
          *long long v284 = v277;
          unsigned __int32 v386 = v284 + 1;
        }
        unint64_t v800 = v386;
        if (v386 < (__int32 *)v283) {
          goto LABEL_287;
        }
        v394 = (__int32 *)v799;
        uint64_t v411 = ((char *)v386 - (unsigned char *)v799) >> 2;
        unint64_t v412 = v411 + 1;
        if ((unint64_t)(v411 + 1) >> 62) {
          goto LABEL_699;
        }
        uint64_t v413 = v283 - (unsigned char *)v799;
        if (v413 >> 1 > v412) {
          unint64_t v412 = v413 >> 1;
        }
        if ((unint64_t)v413 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v235 = v412;
        }
        if (v235)
        {
          uint64_t v398 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
          unsigned __int32 v386 = v800;
          v394 = (__int32 *)v799;
        }
        else
        {
          uint64_t v398 = 0;
        }
        v406 = (__int32 *)&v398[4 * v411];
        __int32 *v406 = v277;
        uint64_t v407 = v406 + 1;
        while (v386 != v394)
        {
          __int32 v422 = *--v386;
          *--v406 = v422;
        }
        goto LABEL_336;
      }
      if (v276 == 1)
      {
        v819[0] = *v273;
        __int32 v277 = sub_20B07D954((uint64_t)&v805, v274, (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
        v278 = v800;
        long long v279 = v801;
        if (v800 >= (__int32 *)v801)
        {
          v305 = (__int32 *)v799;
          uint64_t v306 = ((char *)v800 - (unsigned char *)v799) >> 2;
          unint64_t v307 = v306 + 1;
          if ((unint64_t)(v306 + 1) >> 62) {
            goto LABEL_699;
          }
          uint64_t v308 = v801 - (unsigned char *)v799;
          if ((v801 - (unsigned char *)v799) >> 1 > v307) {
            unint64_t v307 = v308 >> 1;
          }
          if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v307;
          }
          if (v235)
          {
            uint64_t v309 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
            v278 = v800;
            v305 = (__int32 *)v799;
          }
          else
          {
            uint64_t v309 = 0;
          }
          v384 = (__int32 *)&v309[4 * v306];
          __int32 *v384 = v277;
          long long v280 = v384 + 1;
          while (v278 != v305)
          {
            __int32 v385 = *--v278;
            *--v384 = v385;
          }
          long long v279 = &v309[4 * v235];
          uint64_t v799 = v384;
          unint64_t v800 = v280;
          uint64_t v801 = v279;
          if (v305)
          {
            operator delete(v305);
            long long v279 = v801;
          }
        }
        else
        {
          *unint64_t v800 = v277;
          long long v280 = v278 + 1;
        }
        unint64_t v800 = v280;
        if (v280 >= (__int32 *)v279)
        {
          v387 = (__int32 *)v799;
          uint64_t v388 = ((char *)v280 - (unsigned char *)v799) >> 2;
          unint64_t v389 = v388 + 1;
          if ((unint64_t)(v388 + 1) >> 62) {
            goto LABEL_699;
          }
          uint64_t v390 = v279 - (unsigned char *)v799;
          if (v390 >> 1 > v389) {
            unint64_t v389 = v390 >> 1;
          }
          if ((unint64_t)v390 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v389;
          }
          if (v235)
          {
            uint64_t v391 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
            long long v280 = v800;
            v387 = (__int32 *)v799;
          }
          else
          {
            uint64_t v391 = 0;
          }
          unint64_t v392 = (__int32 *)&v391[4 * v388];
          *unint64_t v392 = v277;
          unsigned __int32 v386 = v392 + 1;
          while (v280 != v387)
          {
            __int32 v393 = *--v280;
            *--unint64_t v392 = v393;
          }
          long long v279 = &v391[4 * v235];
          uint64_t v799 = v392;
          unint64_t v800 = v386;
          uint64_t v801 = v279;
          if (v387)
          {
            operator delete(v387);
            long long v279 = v801;
          }
        }
        else
        {
          *long long v280 = v277;
          unsigned __int32 v386 = v280 + 1;
        }
        unint64_t v800 = v386;
        if (v386 >= (__int32 *)v279)
        {
          v394 = (__int32 *)v799;
          uint64_t v395 = ((char *)v386 - (unsigned char *)v799) >> 2;
          unint64_t v396 = v395 + 1;
          if ((unint64_t)(v395 + 1) >> 62) {
            goto LABEL_699;
          }
          uint64_t v397 = v279 - (unsigned char *)v799;
          if (v397 >> 1 > v396) {
            unint64_t v396 = v397 >> 1;
          }
          if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v396;
          }
          if (v235)
          {
            uint64_t v398 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
            unsigned __int32 v386 = v800;
            v394 = (__int32 *)v799;
          }
          else
          {
            uint64_t v398 = 0;
          }
          v406 = (__int32 *)&v398[4 * v395];
          __int32 *v406 = v277;
          uint64_t v407 = v406 + 1;
          while (v386 != v394)
          {
            __int32 v408 = *--v386;
            *--v406 = v408;
          }
          goto LABEL_336;
        }
LABEL_287:
        *unsigned __int32 v386 = v277;
        uint64_t v407 = v386 + 1;
LABEL_338:
        unint64_t v800 = v407;
        goto LABEL_339;
      }
      v794 = 0;
      unint64_t v793 = 0;
      v795 = 0;
      if ((int)v276 < 1)
      {
        unint64_t v304 = 0;
        unint64_t v291 = 0;
      }
      else
      {
        unint64_t v291 = 0;
        uint64_t v292 = 0;
        uint64_t v293 = (v275 >> 4);
        do
        {
          __int32 v294 = (*v273)[2 * v292].i32[0];
          if (v291 >= v795)
          {
            unint64_t v295 = (char *)v793;
            uint64_t v296 = (v291 - (unsigned char *)v793) >> 2;
            unint64_t v297 = v296 + 1;
            if ((unint64_t)(v296 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v298 = v795 - (unsigned char *)v793;
            if ((v795 - (unsigned char *)v793) >> 1 > v297) {
              unint64_t v297 = v298 >> 1;
            }
            if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v299 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v299 = v297;
            }
            if (v299)
            {
              long long v300 = (char *)sub_20B05D1AC((uint64_t)&v795, v299);
              unint64_t v291 = v794;
              unint64_t v295 = (char *)v793;
            }
            else
            {
              long long v300 = 0;
            }
            long long v301 = &v300[4 * v296];
            *(_DWORD *)long long v301 = v294;
            unint64_t v302 = v301 + 4;
            while (v291 != v295)
            {
              int v303 = *((_DWORD *)v291 - 1);
              v291 -= 4;
              *((_DWORD *)v301 - 1) = v303;
              v301 -= 4;
            }
            unint64_t v793 = v301;
            v794 = v302;
            v795 = &v300[4 * v299];
            if (v295) {
              operator delete(v295);
            }
            unint64_t v291 = v302;
          }
          else
          {
            *(_DWORD *)unint64_t v291 = v294;
            v291 += 4;
          }
          v794 = v291;
          ++v292;
        }
        while (v292 != v293);
        unint64_t v304 = (int *)v793;
      }
      unint64_t v791 = 0;
      uint64_t v790 = 0;
      uint64_t v792 = 0;
      uint64_t v320 = v291 - (char *)v304;
      if (v320 != 16)
      {
        unint64_t v811 = 0;
        uint64_t v810 = 0;
        v812 = 0;
        sub_20B07DBAC(&v810, v320 >> 2);
        v808[0] = v808;
        v808[1] = v808;
        uint64_t v809 = 0;
        unint64_t v343 = (int *)v793;
        v344 = (char *)v811;
        if (v794 != v793)
        {
          unint64_t v345 = 0;
          do
          {
            uint64_t v346 = *v778 + 12 * v343[v345];
            *(void *)&long long v342 = *(void *)v346;
            DWORD2(v342) = *(_DWORD *)(v346 + 8);
            if (v344 >= v812)
            {
              long long v774 = v342;
              uint64_t v347 = (v344 - (unsigned char *)v810) >> 4;
              if ((unint64_t)(v347 + 1) >> 60) {
                sub_20B05D0BC();
              }
              unint64_t v348 = (v812 - (unsigned char *)v810) >> 3;
              if (v348 <= v347 + 1) {
                unint64_t v348 = v347 + 1;
              }
              if ((unint64_t)(v812 - (unsigned char *)v810) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v349 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v349 = v348;
              }
              if (v349) {
                v350 = (char *)sub_20B077E90((uint64_t)&v812, v349);
              }
              else {
                v350 = 0;
              }
              v351 = &v350[16 * v347];
              *(_OWORD *)v351 = v774;
              v344 = v351 + 16;
              uint64_t v352 = (char *)v811;
              unint64_t v353 = (char *)v810;
              if (v811 != v810)
              {
                do
                {
                  long long v354 = *((_OWORD *)v352 - 1);
                  v352 -= 16;
                  *((_OWORD *)v351 - 1) = v354;
                  v351 -= 16;
                }
                while (v352 != v353);
                uint64_t v352 = (char *)v810;
              }
              uint64_t v810 = v351;
              unint64_t v811 = v344;
              v812 = &v350[16 * v349];
              if (v352) {
                operator delete(v352);
              }
            }
            else
            {
              *(_OWORD *)v344 = v342;
              v344 += 16;
            }
            unint64_t v811 = v344;
            unint64_t v355 = operator new(0x18uLL);
            v355[4] = v345;
            uint64_t v356 = v808[0];
            *(void *)unint64_t v355 = v808[0];
            *((void *)v355 + 1) = v808;
            *(void *)(v356 + 8) = v355;
            v808[0] = v355;
            ++v809;
            ++v345;
            unint64_t v343 = (int *)v793;
          }
          while (v345 < (v794 - (unsigned char *)v793) >> 2);
        }
        v357 = (float32x4_t *)v810;
        if (v344 == v810)
        {
          float32x4_t v361 = 0uLL;
        }
        else
        {
          uint64_t v358 = 0;
          unint64_t v359 = (v344 - (unsigned char *)v810) >> 4;
          if (v359 <= 1) {
            uint64_t v360 = 1;
          }
          else {
            uint64_t v360 = (v344 - (unsigned char *)v810) >> 4;
          }
          float32x4_t v361 = 0uLL;
          do
          {
            int32x4_t v362 = *((int32x4_t *)v810 + v358++);
            int32x4_t v363 = *((int32x4_t *)v810 + ((int)v358 % (int)v359));
            int32x4_t v364 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v363, v363), (int8x16_t)v363, 0xCuLL), (float32x4_t)v362)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v362, v362), (int8x16_t)v362, 0xCuLL), (float32x4_t)v363);
            int32x4_t v365 = (int32x4_t)vmulq_f32((float32x4_t)v364, (float32x4_t)v364);
            float v366 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v365, 2), (float32x4_t)v365), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v365.i8, 1)).f32[0];
            if (v366 >= 0.000001)
            {
              float v367 = v366;
              float32x2_t v368 = vrsqrte_f32((float32x2_t)LODWORD(v366));
              float32x2_t v369 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v367), vmul_f32(v368, v368)), v368);
              float32x4_t v361 = vmlaq_n_f32(v361, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v364, v364), (int8x16_t)v364, 0xCuLL), vmul_f32(v369, vrsqrts_f32((float32x2_t)LODWORD(v367), vmul_f32(v369, v369))).f32[0]);
            }
          }
          while (v360 != v358);
        }
        int32x4_t v429 = (int32x4_t)vmulq_f32(v361, v361);
        float v430 = vaddq_f32(vaddq_f32((float32x4_t)v429, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v429.i8, 1)), (float32x4_t)vdupq_laneq_s32(v429, 2)).f32[0];
        if (v430 >= 0.000001)
        {
          float v431 = v430;
          float32x2_t v432 = vrsqrte_f32((float32x2_t)LODWORD(v430));
          float32x2_t v433 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v431), vmul_f32(v432, v432)), v432);
          int32x4_t v434 = (int32x4_t)vmulq_n_f32(v361, vmul_f32(v433, vrsqrts_f32((float32x2_t)LODWORD(v431), vmul_f32(v433, v433))).f32[0]);
          int32x4_t v435 = *(int32x4_t *)v810;
          v824 = 0;
          int v823 = 0;
          unint64_t v825 = 0;
          float32x4_t v436 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v434, v434), (int8x16_t)v434, 0xCuLL);
          *(_OWORD *)uint64_t v819 = 0u;
          long long v820 = 0u;
          uint64_t v821 = 1065353216;
          _ZF = v344 == v810;
          unint64_t v438 = 0;
          if (_ZF)
          {
            unint64_t v478 = 0;
            uint64_t v817 = 0;
            v816 = 0;
            unint64_t v818 = 0;
            goto LABEL_431;
          }
          int32x4_t v439 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v435, v435), (int8x16_t)v435, 0xCuLL), (float32x4_t)v434)), (float32x4_t)v435, v436);
          float32x4_t v440 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v439, v439), (int8x16_t)v439, 0xCuLL);
          int32x4_t v441 = (int32x4_t)vmulq_f32((float32x4_t)v439, (float32x4_t)v439);
          v441.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v441, 2), *(float32x2_t *)v441.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v441.i8, 1)).u32[0];
          float32x2_t v442 = vrsqrte_f32((float32x2_t)v441.u32[0]);
          float32x2_t v443 = vmul_f32(vrsqrts_f32((float32x2_t)v441.u32[0], vmul_f32(v442, v442)), v442);
          int32x4_t v775 = (int32x4_t)vmulq_n_f32(v440, vmul_f32(v443, vrsqrts_f32((float32x2_t)v441.u32[0], vmul_f32(v443, v443))).f32[0]);
          int32x4_t v444 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v775, v436)), (float32x4_t)v434, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v775, v775), (int8x16_t)v775, 0xCuLL));
          float32x4_t v445 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v444, v444), (int8x16_t)v444, 0xCuLL);
          int32x4_t v446 = (int32x4_t)vmulq_f32((float32x4_t)v444, (float32x4_t)v444);
          v446.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v446, 2), *(float32x2_t *)v446.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v446.i8, 1)).u32[0];
          float32x2_t v447 = vrsqrte_f32((float32x2_t)v446.u32[0]);
          float32x2_t v448 = vmul_f32(vrsqrts_f32((float32x2_t)v446.u32[0], vmul_f32(v447, v447)), v447);
          float32x4_t v768 = vmulq_n_f32(v445, vmul_f32(v448, vrsqrts_f32((float32x2_t)v446.u32[0], vmul_f32(v448, v448))).f32[0]);
          while (1)
          {
            float32x4_t v449 = v357[v438];
            int32x4_t v450 = (int32x4_t)vmulq_f32(v449, (float32x4_t)v775);
            int32x4_t v451 = (int32x4_t)vmulq_f32(v449, v768);
            *(int32x2_t *)v451.i8 = vzip1_s32((int32x2_t)vadd_f32(vadd_f32(*(float32x2_t *)v450.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v450.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v450, 2)), (int32x2_t)vadd_f32(vadd_f32(*(float32x2_t *)v451.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v451.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v451, 2)));
            v813 = (void *)v451.i64[0];
            uint64_t v452 = (char *)v824;
            if ((unint64_t)v824 >= v825)
            {
              int64_t v454 = ((unsigned char *)v824 - (unsigned char *)v823) >> 3;
              if ((unint64_t)(v454 + 1) >> 61) {
                sub_20B05D0BC();
              }
              unint64_t v455 = (uint64_t)(v825 - (void)v823) >> 2;
              if (v455 <= v454 + 1) {
                unint64_t v455 = v454 + 1;
              }
              if (v825 - (unint64_t)v823 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v456 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v456 = v455;
              }
              if (v456)
              {
                v457 = (char *)sub_20B0602EC((uint64_t)&v825, v456);
                v451.i64[0] = (uint64_t)v813;
              }
              else
              {
                v457 = 0;
              }
              unsigned __int32 v458 = &v457[8 * v454];
              *(void *)unsigned __int32 v458 = v451.i64[0];
              unint64_t v453 = v458 + 8;
              v459 = (char *)v824;
              v460 = (char *)v823;
              if (v824 != v823)
              {
                do
                {
                  uint64_t v461 = *((void *)v459 - 1);
                  v459 -= 8;
                  v451.i64[0] = v461;
                  *((void *)v458 - 1) = v461;
                  v458 -= 8;
                }
                while (v459 != v460);
                v459 = (char *)v823;
              }
              int v823 = v458;
              v824 = v453;
              unint64_t v825 = (unint64_t)&v457[8 * v456];
              if (v459) {
                operator delete(v459);
              }
            }
            else
            {
              *(void *)v824 = v451.i64[0];
              unint64_t v453 = v452 + 8;
            }
            v824 = v453;
            if (sub_20B07DD08(v819, (unint64_t *)&v813, (float32x4_t)v451))
            {
              v816 = &v813;
              uint64_t v463 = sub_20B07DE0C((uint64_t)v819, (unint64_t *)&v813, v462, (uint64_t)&unk_20B1E7420, (float32x2_t **)&v816);
              ++v463[3].i32[0];
            }
            else
            {
              v816 = &v813;
              sub_20B07DE0C((uint64_t)v819, (unint64_t *)&v813, v462, (uint64_t)&unk_20B1E7420, (float32x2_t **)&v816)[3].i32[0] = 0;
            }
            v816 = &v813;
            if (sub_20B07DE0C((uint64_t)v819, (unint64_t *)&v813, v464, (uint64_t)&unk_20B1E7420, (float32x2_t **)&v816)[3].i32[0] >= 3)break; {
            ++v438;
            }
            v357 = (float32x4_t *)v810;
            if (v438 >= ((unsigned char *)v811 - (unsigned char *)v810) >> 4)
            {
              v465 = v823;
              uint64_t v817 = 0;
              v816 = 0;
              unint64_t v818 = 0;
              unint64_t v438 = 0;
              if (v824 == v823)
              {
                unint64_t v478 = 0;
              }
              else
              {
                unint64_t v466 = 0;
                unint64_t v467 = ((unsigned char *)v824 - (unsigned char *)v823) >> 3;
                do
                {
                  uint64_t v468 = v465[v466++];
                  uint64_t v469 = v465[v466 % v467];
                  if (v438 >= (unint64_t)v818)
                  {
                    uint64_t v470 = (uint64_t)(v438 - (void)v816) >> 4;
                    if ((unint64_t)(v470 + 1) >> 60) {
                      sub_20B05D0BC();
                    }
                    unint64_t v471 = (v818 - (unsigned char *)v816) >> 3;
                    if (v471 <= v470 + 1) {
                      unint64_t v471 = v470 + 1;
                    }
                    if ((unint64_t)(v818 - (unsigned char *)v816) >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v472 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v472 = v471;
                    }
                    if (v472) {
                      v473 = (char *)sub_20B077E90((uint64_t)&v818, v472);
                    }
                    else {
                      v473 = 0;
                    }
                    v474 = &v473[16 * v470];
                    *(void *)v474 = v468;
                    *((void *)v474 + 1) = v469;
                    uint64_t v475 = (char *)v817;
                    unint64_t v476 = (char *)v816;
                    uint64_t v477 = v474;
                    if (v817 != v816)
                    {
                      do
                      {
                        *((_OWORD *)v477 - 1) = *((_OWORD *)v475 - 1);
                        v477 -= 16;
                        v475 -= 16;
                      }
                      while (v475 != v476);
                      uint64_t v475 = (char *)v816;
                    }
                    unint64_t v438 = (unint64_t)(v474 + 16);
                    v816 = v477;
                    uint64_t v817 = v474 + 16;
                    unint64_t v818 = &v473[16 * v472];
                    if (v475) {
                      operator delete(v475);
                    }
                  }
                  else
                  {
                    *(void *)unint64_t v438 = v468;
                    *(void *)(v438 + 8) = v469;
                    v438 += 16;
                  }
                  uint64_t v817 = (void *)v438;
                  v465 = v823;
                  unint64_t v467 = ((unsigned char *)v824 - (unsigned char *)v823) >> 3;
                }
                while (v467 > v466);
                unint64_t v478 = v816;
              }
LABEL_431:
              int v814 = 0;
              v813 = 0;
              uint64_t v815 = 0;
              sub_20B07F218(&v813, v478, v438, (uint64_t)(v438 - (void)v478) >> 4);
              int v509 = (char *)v813;
              if (v814 == v813)
              {
                uint64_t v512 = 0;
                unint64_t v513 = 0;
              }
              else
              {
                v510 = 0;
                unint64_t v511 = 0;
                uint64_t v512 = 0;
                unint64_t v513 = 0;
                do
                {
                  uint64_t v514 = (float32x2_t *)&v509[16 * v511];
                  float32x2_t v516 = *v514;
                  float32x2_t v515 = v514[1];
                  int32x2_t v517 = vcgt_f32(*v514, v515);
                  if (v517.i8[0] & 1) != 0 || (vceq_f32(v516, v515).u8[0] & 1) != 0 && (v517.i8[4])
                  {
                    *uint64_t v514 = v515;
                    *((float32x2_t *)v813 + 2 * v511 + 1) = v516;
                    int v509 = (char *)v813;
                    int v518 = (float32x2_t *)((char *)v813 + 16 * v511);
                    float32x2_t v516 = *v518;
                    float32x2_t v515 = v518[1];
                  }
                  v519 = &v509[16 * v511];
                  if (v512 >= v510)
                  {
                    unint64_t v521 = 0xAAAAAAAAAAAAAAABLL * (v512 - v513) + 1;
                    if (v521 > 0xAAAAAAAAAAAAAAALL) {
                      goto LABEL_700;
                    }
                    if (0x5555555555555556 * (v510 - v513) > v521) {
                      unint64_t v521 = 0x5555555555555556 * (v510 - v513);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * (v510 - v513) >= 0x555555555555555) {
                      unint64_t v522 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v522 = v521;
                    }
                    if (v522)
                    {
                      if (v522 > 0xAAAAAAAAAAAAAAALL) {
                        goto LABEL_701;
                      }
                      uint64_t v523 = (char *)operator new(24 * v522);
                    }
                    else
                    {
                      uint64_t v523 = 0;
                    }
                    unint64_t v524 = &v523[8 * (v512 - v513)];
                    *(float32x2_t *)unint64_t v524 = v516;
                    *((void *)v524 + 1) = v519;
                    v524[16] = 1;
                    *(_DWORD *)(v524 + 17) = 0;
                    *((_DWORD *)v524 + 5) = 0;
                    if (v512 == v513)
                    {
                      unint64_t v513 = (float32x2_t *)&v523[8 * (v512 - v513)];
                    }
                    else
                    {
                      v525 = (float32x2_t *)&v523[8 * (v512 - v513)];
                      do
                      {
                        long long v526 = *(_OWORD *)v512[-3].f32;
                        v525[-1] = v512[-1];
                        *(_OWORD *)v525[-3].f32 = v526;
                        v525 -= 3;
                        v512 -= 3;
                      }
                      while (v512 != v513);
                      uint64_t v512 = v513;
                      unint64_t v513 = v525;
                    }
                    v510 = (float32x2_t *)&v523[24 * v522];
                    v520 = (float32x2_t *)(v524 + 24);
                    if (v512) {
                      operator delete(v512);
                    }
                  }
                  else
                  {
                    *uint64_t v512 = v516;
                    v512[1] = (float32x2_t)v519;
                    v512[2].i8[0] = 1;
                    *(__int32 *)((char *)v512[2].i32 + 1) = 0;
                    v520 = v512 + 3;
                    v512[2].i32[1] = 0;
                  }
                  if (v520 >= v510)
                  {
                    unint64_t v527 = 0xAAAAAAAAAAAAAAABLL * (v520 - v513) + 1;
                    if (v527 > 0xAAAAAAAAAAAAAAALL) {
LABEL_700:
                    }
                      sub_20B05D0BC();
                    if (0x5555555555555556 * (v510 - v513) > v527) {
                      unint64_t v527 = 0x5555555555555556 * (v510 - v513);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * (v510 - v513) >= 0x555555555555555) {
                      unint64_t v528 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v528 = v527;
                    }
                    if (v528)
                    {
                      if (v528 > 0xAAAAAAAAAAAAAAALL) {
LABEL_701:
                      }
                        sub_20B05D178();
                      v529 = (char *)operator new(24 * v528);
                    }
                    else
                    {
                      v529 = 0;
                    }
                    v530 = (float32x2_t *)&v529[8 * (v520 - v513)];
                    float32x2_t *v530 = v515;
                    v510 = (float32x2_t *)&v529[24 * v528];
                    uint64_t v512 = v530 + 3;
                    v530[1] = (float32x2_t)v519;
                    v530[2] = 0;
                    if (v520 == v513) {
                      goto LABEL_471;
                    }
                    do
                    {
                      long long v531 = *(_OWORD *)v520[-3].f32;
                      v530[-1] = v520[-1];
                      *(_OWORD *)v530[-3].f32 = v531;
                      v530 -= 3;
                      v520 -= 3;
                    }
                    while (v520 != v513);
                    if (v513) {
LABEL_471:
                    }
                      operator delete(v513);
                    unint64_t v513 = v530;
                  }
                  else
                  {
                    float32x2_t *v520 = v515;
                    uint64_t v512 = v520 + 3;
                    v520[1] = (float32x2_t)v519;
                    v520[2] = 0;
                  }
                  ++v511;
                  int v509 = (char *)v813;
                }
                while (v511 < (v814 - (unsigned char *)v813) >> 4);
              }
              unint64_t v532 = 126 - 2 * __clz(((char *)v512 - (char *)v513) / 24);
              v822 = sub_20B07E070;
              if (v512 == v513) {
                uint64_t v533 = 0;
              }
              else {
                uint64_t v533 = v532;
              }
              sub_20B07E2FC((unint64_t)v513, (unint64_t)v512, (uint64_t (**)(long long *, long long *))&v822, v533, 1);
              operator new();
            }
          }
          sub_20B05F1D0((uint64_t)v819);
          if (v823)
          {
            v824 = v823;
            operator delete(v823);
          }
          unint64_t v534 = (char *)v790;
          unint64_t v791 = v790;
          if ((unint64_t)((((unsigned char *)v811 - (unsigned char *)v810) >> 4) - 3) <= 0xFFFFFFFFFFFFFFFDLL)
          {
            unint64_t v535 = 1;
            do
            {
              LODWORD(v536) = 0;
              DWORD1(v536) = v535++;
              *((void *)&v536 + 1) = v535;
              if (v534 >= v792)
              {
                long long v776 = v536;
                uint64_t v537 = (v534 - (unsigned char *)v790) >> 4;
                if ((unint64_t)(v537 + 1) >> 60) {
                  sub_20B05D0BC();
                }
                unint64_t v538 = (v792 - (unsigned char *)v790) >> 3;
                if (v538 <= v537 + 1) {
                  unint64_t v538 = v537 + 1;
                }
                if ((unint64_t)(v792 - (unsigned char *)v790) >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v539 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v539 = v538;
                }
                if (v539) {
                  uint64_t v540 = (char *)sub_20B077E90((uint64_t)&v792, v539);
                }
                else {
                  uint64_t v540 = 0;
                }
                unint64_t v541 = &v540[16 * v537];
                *(_OWORD *)unint64_t v541 = v776;
                unint64_t v534 = v541 + 16;
                uint64_t v542 = (char *)v791;
                unint64_t v543 = (char *)v790;
                if (v791 != v790)
                {
                  do
                  {
                    long long v544 = *((_OWORD *)v542 - 1);
                    v542 -= 16;
                    *((_OWORD *)v541 - 1) = v544;
                    v541 -= 16;
                  }
                  while (v542 != v543);
                  uint64_t v542 = (char *)v790;
                }
                uint64_t v790 = v541;
                unint64_t v791 = v534;
                uint64_t v792 = &v540[16 * v539];
                if (v542) {
                  operator delete(v542);
                }
              }
              else
              {
                *(_OWORD *)unint64_t v534 = v536;
                v534 += 16;
              }
              unint64_t v791 = v534;
            }
            while ((((unsigned char *)v811 - (unsigned char *)v810) >> 4) - 1 > v535);
          }
        }
        sub_20B07F6E8(v808);
        if (v810)
        {
          unint64_t v811 = v810;
          operator delete(v810);
        }
        v489 = (int *)v791;
        goto LABEL_520;
      }
      uint64_t v321 = *v778 + 12 * *v304;
      v240.i64[0] = *(void *)v321;
      v240.i32[2] = *(_DWORD *)(v321 + 8);
      uint64_t v322 = *v778 + 12 * v304[1];
      v239.i64[0] = *(void *)v322;
      v239.i32[2] = *(_DWORD *)(v322 + 8);
      uint64_t v323 = *v778 + 12 * v304[2];
      v238.i64[0] = *(void *)v323;
      v238.i32[2] = *(_DWORD *)(v323 + 8);
      uint64_t v324 = *v778 + 12 * v304[3];
      v237.i64[0] = *(void *)v324;
      v237.i32[2] = *(_DWORD *)(v324 + 8);
      int32x4_t v325 = (int32x4_t)vsubq_f32(v239, v240);
      int32x4_t v326 = (int32x4_t)vsubq_f32(v237, v238);
      float32x4_t v327 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v325, v325), (int8x16_t)v325, 0xCuLL);
      float32x4_t v328 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v326, v326), (int8x16_t)v326, 0xCuLL);
      int32x4_t v329 = (int32x4_t)vsubq_f32(v237, v239);
      float32x4_t v330 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v329, v329), (int8x16_t)v329, 0xCuLL), (float32x4_t)v325)), v327, (float32x4_t)v329);
      int32x4_t v331 = (int32x4_t)vsubq_f32(v238, v239);
      float32x4_t v332 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v331, v331), (int8x16_t)v331, 0xCuLL);
      float32x4_t v333 = vmlaq_f32(vnegq_f32(vmulq_f32(v328, (float32x4_t)v331)), v332, (float32x4_t)v326);
      int32x4_t v334 = (int32x4_t)vmulq_f32(v330, v333);
      if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v334, 2), (float32x4_t)v334), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v334.i8, 1)).f32[0] >= 0.0)
      {
        int32x4_t v370 = (int32x4_t)vsubq_f32(v238, v240);
        float32x4_t v371 = vmlaq_f32(vnegq_f32(vmulq_f32(v328, (float32x4_t)v370)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v370, v370), (int8x16_t)v370, 0xCuLL), (float32x4_t)v326);
        float32x4_t v372 = vmlaq_f32(vnegq_f32(vmulq_f32(v332, (float32x4_t)v325)), v327, (float32x4_t)v331);
        int32x4_t v373 = (int32x4_t)vmulq_f32(v371, v372);
        if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v373, 2), (float32x4_t)v373), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v373.i8, 1)).f32[0] < 0.0)
        {
          v335 = sub_20B077E90((uint64_t)&v792, 1uLL);
          _OWORD *v335 = xmmword_20B1E7320;
          unint64_t v374 = (char *)(v335 + 1);
          v375 = (char *)v791;
          v376 = (char *)v790;
          unsigned __int32 v377 = (char *)v335;
          if (v791 != v790)
          {
            do
            {
              long long v378 = *((_OWORD *)v375 - 1);
              v375 -= 16;
              *((_OWORD *)v377 - 1) = v378;
              v377 -= 16;
            }
            while (v375 != v376);
            v375 = (char *)v790;
          }
          v379 = (char *)&v335[v235];
          uint64_t v790 = v377;
          unint64_t v791 = v335 + 1;
          uint64_t v792 = v379;
          if (v375)
          {
            operator delete(v375);
            v379 = v792;
          }
          unint64_t v791 = v335 + 1;
          if (v374 >= v379)
          {
            uint64_t v380 = (v374 - (unsigned char *)v790) >> 4;
            if ((unint64_t)(v380 + 1) >> 60) {
              goto LABEL_706;
            }
            uint64_t v381 = v379 - (unsigned char *)v790;
            uint64_t v382 = v381 >> 3;
            if (v381 >> 3 <= (unint64_t)(v380 + 1)) {
              uint64_t v382 = v380 + 1;
            }
            if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v235 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v235 = v382;
            }
            if (v235) {
              unint64_t v383 = (char *)sub_20B077E90((uint64_t)&v792, v235);
            }
            else {
              unint64_t v383 = 0;
            }
            v502 = &v383[16 * v380];
            v240.i32[3] = 0;
            *(_OWORD *)v502 = xmmword_20B1E7330;
            v489 = (int *)(v502 + 16);
            uint64_t v503 = (char *)v791;
            v545 = (char *)v790;
            if (v791 != v790)
            {
              do
              {
                long long v546 = *((_OWORD *)v503 - 1);
                v503 -= 16;
                v240.i32[3] = HIDWORD(v546);
                *((_OWORD *)v502 - 1) = v546;
                v502 -= 16;
              }
              while (v503 != v545);
              goto LABEL_513;
            }
            goto LABEL_514;
          }
LABEL_392:
          float32x4_t v240 = (float32x4_t)xmmword_20B1E7330;
          goto LABEL_393;
        }
        int32x4_t v479 = (int32x4_t)vmulq_f32(v330, v330);
        int32x4_t v480 = (int32x4_t)vmulq_f32(v333, v333);
        int32x4_t v481 = (int32x4_t)vmulq_f32(v372, v372);
        int32x4_t v482 = (int32x4_t)vmulq_f32(v371, v371);
        *(float32x2_t *)v482.i8 = vabd_f32(vabs_f32(vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v479, v481), (float32x2_t)vzip1_s32(*(int32x2_t *)v479.i8, *(int32x2_t *)v481.i8)), (float32x2_t)vzip2_s32(*(int32x2_t *)v479.i8, *(int32x2_t *)v481.i8))), vabs_f32(vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v480, v482), (float32x2_t)vzip1_s32(*(int32x2_t *)v480.i8, *(int32x2_t *)v482.i8)), (float32x2_t)vzip2_s32(*(int32x2_t *)v480.i8, *(int32x2_t *)v482.i8))));
        if (vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v482.i8, 1), *(float32x2_t *)v482.i8).u8[0])
        {
          v335 = sub_20B077E90((uint64_t)&v792, 1uLL);
          _OWORD *v335 = xmmword_20B1E7320;
          v483 = (char *)(v335 + 1);
          uint64_t v484 = (char *)v791;
          unint64_t v485 = (char *)v790;
          uint64_t v486 = (char *)v335;
          if (v791 != v790)
          {
            do
            {
              long long v487 = *((_OWORD *)v484 - 1);
              v484 -= 16;
              *((_OWORD *)v486 - 1) = v487;
              v486 -= 16;
            }
            while (v484 != v485);
            uint64_t v484 = (char *)v790;
          }
          v488 = (char *)&v335[v235];
          uint64_t v790 = v486;
          unint64_t v791 = v335 + 1;
          uint64_t v792 = v488;
          if (v484)
          {
            operator delete(v484);
            v488 = v792;
          }
          unint64_t v791 = v335 + 1;
          if (v483 >= v488)
          {
            uint64_t v506 = (v483 - (unsigned char *)v790) >> 4;
            if ((unint64_t)(v506 + 1) >> 60) {
LABEL_706:
            }
              sub_20B05D0BC();
            uint64_t v507 = v488 - (unsigned char *)v790;
            uint64_t v508 = v507 >> 3;
            if (v507 >> 3 <= (unint64_t)(v506 + 1)) {
              uint64_t v508 = v506 + 1;
            }
            if ((unint64_t)v507 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v235 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v235 = v508;
            }
            if (v235) {
              unint64_t v383 = (char *)sub_20B077E90((uint64_t)&v792, v235);
            }
            else {
              unint64_t v383 = 0;
            }
            v502 = &v383[16 * v506];
            v240.i32[3] = 0;
            *(_OWORD *)v502 = xmmword_20B1E7330;
            v489 = (int *)(v502 + 16);
            uint64_t v503 = (char *)v791;
            uint64_t v549 = (char *)v790;
            if (v791 != v790)
            {
              do
              {
                long long v550 = *((_OWORD *)v503 - 1);
                v503 -= 16;
                v240.i32[3] = HIDWORD(v550);
                *((_OWORD *)v502 - 1) = v550;
                v502 -= 16;
              }
              while (v503 != v549);
              goto LABEL_513;
            }
            goto LABEL_514;
          }
          goto LABEL_392;
        }
        v335 = sub_20B077E90((uint64_t)&v792, 1uLL);
        _OWORD *v335 = xmmword_20B1E7300;
        v493 = (char *)(v335 + 1);
        uint64_t v494 = (char *)v791;
        unint64_t v495 = (char *)v790;
        uint64_t v496 = (char *)v335;
        if (v791 != v790)
        {
          do
          {
            long long v497 = *((_OWORD *)v494 - 1);
            v494 -= 16;
            *((_OWORD *)v496 - 1) = v497;
            v496 -= 16;
          }
          while (v494 != v495);
          uint64_t v494 = (char *)v790;
        }
        v498 = (char *)&v335[v235];
        uint64_t v790 = v496;
        unint64_t v791 = v335 + 1;
        uint64_t v792 = v498;
        if (v494)
        {
          operator delete(v494);
          v498 = v792;
        }
        unint64_t v791 = v335 + 1;
        if (v493 >= v498)
        {
          uint64_t v499 = (v493 - (unsigned char *)v790) >> 4;
          if ((unint64_t)(v499 + 1) >> 60) {
            goto LABEL_706;
          }
          uint64_t v500 = v498 - (unsigned char *)v790;
          uint64_t v501 = v500 >> 3;
          if (v500 >> 3 <= (unint64_t)(v499 + 1)) {
            uint64_t v501 = v499 + 1;
          }
          if ((unint64_t)v500 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v235 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v501;
          }
          if (v235) {
            unint64_t v383 = (char *)sub_20B077E90((uint64_t)&v792, v235);
          }
          else {
            unint64_t v383 = 0;
          }
          v502 = &v383[16 * v499];
          v240.i32[3] = 0;
          *(_OWORD *)v502 = xmmword_20B1E7310;
          v489 = (int *)(v502 + 16);
          uint64_t v503 = (char *)v791;
          v547 = (char *)v790;
          if (v791 != v790)
          {
            do
            {
              long long v548 = *((_OWORD *)v503 - 1);
              v503 -= 16;
              v240.i32[3] = HIDWORD(v548);
              *((_OWORD *)v502 - 1) = v548;
              v502 -= 16;
            }
            while (v503 != v547);
LABEL_513:
            uint64_t v503 = (char *)v790;
          }
LABEL_514:
          uint64_t v790 = v502;
          unint64_t v791 = v489;
          uint64_t v792 = &v383[16 * v235];
          if (v503) {
            operator delete(v503);
          }
          goto LABEL_516;
        }
      }
      else
      {
        v335 = sub_20B077E90((uint64_t)&v792, 1uLL);
        _OWORD *v335 = xmmword_20B1E7300;
        unsigned __int32 v336 = (char *)(v335 + 1);
        unsigned __int32 v337 = (char *)v791;
        v338 = (char *)v790;
        v339 = (char *)v335;
        if (v791 != v790)
        {
          do
          {
            long long v340 = *((_OWORD *)v337 - 1);
            v337 -= 16;
            *((_OWORD *)v339 - 1) = v340;
            v339 -= 16;
          }
          while (v337 != v338);
          unsigned __int32 v337 = (char *)v790;
        }
        unint64_t v341 = (char *)&v335[v235];
        uint64_t v790 = v339;
        unint64_t v791 = v335 + 1;
        uint64_t v792 = v341;
        if (v337)
        {
          operator delete(v337);
          unint64_t v341 = v792;
        }
        unint64_t v791 = v335 + 1;
        if (v336 >= v341)
        {
          uint64_t v490 = (v336 - (unsigned char *)v790) >> 4;
          if ((unint64_t)(v490 + 1) >> 60) {
            goto LABEL_706;
          }
          uint64_t v491 = v341 - (unsigned char *)v790;
          uint64_t v492 = v491 >> 3;
          if (v491 >> 3 <= (unint64_t)(v490 + 1)) {
            uint64_t v492 = v490 + 1;
          }
          if ((unint64_t)v491 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v235 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v235 = v492;
          }
          if (v235) {
            unint64_t v383 = (char *)sub_20B077E90((uint64_t)&v792, v235);
          }
          else {
            unint64_t v383 = 0;
          }
          v502 = &v383[16 * v490];
          v240.i32[3] = 0;
          *(_OWORD *)v502 = xmmword_20B1E7310;
          v489 = (int *)(v502 + 16);
          uint64_t v503 = (char *)v791;
          unint64_t v504 = (char *)v790;
          if (v791 != v790)
          {
            do
            {
              long long v505 = *((_OWORD *)v503 - 1);
              v503 -= 16;
              v240.i32[3] = HIDWORD(v505);
              *((_OWORD *)v502 - 1) = v505;
              v502 -= 16;
            }
            while (v503 != v504);
            goto LABEL_513;
          }
          goto LABEL_514;
        }
      }
      float32x4_t v240 = (float32x4_t)xmmword_20B1E7310;
LABEL_393:
      v335[1] = v240;
      v489 = (int *)(v335 + 2);
LABEL_516:
      unint64_t v791 = v489;
LABEL_520:
      v794 = (char *)v793;
      if (v489 != v790)
      {
        unint64_t v551 = 0;
        v489 = (int *)v790;
        do
        {
          v819[0] = &(*v273)[2 * v489[4 * v551]];
          __int32 v552 = sub_20B07D954((uint64_t)&v805, (int32x2_t *)v819[0], (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
          v553 = v800;
          if (v800 >= (__int32 *)v801)
          {
            int v555 = (__int32 *)v799;
            uint64_t v556 = ((char *)v800 - (unsigned char *)v799) >> 2;
            unint64_t v557 = v556 + 1;
            if ((unint64_t)(v556 + 1) >> 62) {
              goto LABEL_696;
            }
            uint64_t v558 = v801 - (unsigned char *)v799;
            if ((v801 - (unsigned char *)v799) >> 1 > v557) {
              unint64_t v557 = v558 >> 1;
            }
            if ((unint64_t)v558 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v559 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v559 = v557;
            }
            if (v559)
            {
              uint64_t v560 = (char *)sub_20B05D1AC((uint64_t)&v801, v559);
              v553 = v800;
              int v555 = (__int32 *)v799;
            }
            else
            {
              uint64_t v560 = 0;
            }
            unint64_t v561 = (__int32 *)&v560[4 * v556];
            *unint64_t v561 = v552;
            v554 = v561 + 1;
            while (v553 != v555)
            {
              __int32 v562 = *--v553;
              *--unint64_t v561 = v562;
            }
            uint64_t v799 = v561;
            unint64_t v800 = v554;
            uint64_t v801 = &v560[4 * v559];
            if (v555) {
              operator delete(v555);
            }
          }
          else
          {
            *unint64_t v800 = v552;
            v554 = v553 + 1;
          }
          unint64_t v800 = v554;
          v819[0] = &(*v273)[2 * *((int *)v790 + 4 * v551 + 1)];
          __int32 v563 = sub_20B07D954((uint64_t)&v805, (int32x2_t *)v819[0], (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
          int v564 = v800;
          if (v800 >= (__int32 *)v801)
          {
            v566 = (__int32 *)v799;
            uint64_t v567 = ((char *)v800 - (unsigned char *)v799) >> 2;
            unint64_t v568 = v567 + 1;
            if ((unint64_t)(v567 + 1) >> 62) {
              goto LABEL_696;
            }
            uint64_t v569 = v801 - (unsigned char *)v799;
            if ((v801 - (unsigned char *)v799) >> 1 > v568) {
              unint64_t v568 = v569 >> 1;
            }
            if ((unint64_t)v569 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v570 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v570 = v568;
            }
            if (v570)
            {
              unint64_t v571 = (char *)sub_20B05D1AC((uint64_t)&v801, v570);
              int v564 = v800;
              v566 = (__int32 *)v799;
            }
            else
            {
              unint64_t v571 = 0;
            }
            v572 = (__int32 *)&v571[4 * v567];
            __int32 *v572 = v563;
            int v565 = v572 + 1;
            while (v564 != v566)
            {
              __int32 v573 = *--v564;
              *--v572 = v573;
            }
            uint64_t v799 = v572;
            unint64_t v800 = v565;
            uint64_t v801 = &v571[4 * v570];
            if (v566) {
              operator delete(v566);
            }
          }
          else
          {
            *unint64_t v800 = v563;
            int v565 = v564 + 1;
          }
          unint64_t v800 = v565;
          v819[0] = &(*v273)[2 * *((int *)v790 + 4 * v551 + 2)];
          __int32 v574 = sub_20B07D954((uint64_t)&v805, (int32x2_t *)v819[0], (uint64_t)&unk_20B1E7420, (int32x4_t **)v819)[2].i32[0];
          int v575 = v800;
          if (v800 >= (__int32 *)v801)
          {
            v577 = (__int32 *)v799;
            uint64_t v578 = ((char *)v800 - (unsigned char *)v799) >> 2;
            unint64_t v579 = v578 + 1;
            if ((unint64_t)(v578 + 1) >> 62) {
LABEL_696:
            }
              sub_20B05D0BC();
            uint64_t v580 = v801 - (unsigned char *)v799;
            if ((v801 - (unsigned char *)v799) >> 1 > v579) {
              unint64_t v579 = v580 >> 1;
            }
            if ((unint64_t)v580 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v235 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v235 = v579;
            }
            if (v235)
            {
              uint64_t v581 = (char *)sub_20B05D1AC((uint64_t)&v801, v235);
              int v575 = v800;
              v577 = (__int32 *)v799;
            }
            else
            {
              uint64_t v581 = 0;
            }
            unint64_t v582 = (__int32 *)&v581[4 * v578];
            *unint64_t v582 = v574;
            int v576 = v582 + 1;
            while (v575 != v577)
            {
              __int32 v583 = *--v575;
              *--unint64_t v582 = v583;
            }
            uint64_t v799 = v582;
            unint64_t v800 = v576;
            uint64_t v801 = &v581[4 * v235];
            if (v577) {
              operator delete(v577);
            }
          }
          else
          {
            *unint64_t v800 = v574;
            int v576 = v575 + 1;
          }
          unint64_t v800 = v576;
          ++v551;
          v489 = (int *)v790;
        }
        while (v551 < ((unsigned char *)v791 - (unsigned char *)v790) >> 4);
      }
      if (v489)
      {
        unint64_t v791 = v489;
        operator delete(v489);
      }
      if (v793)
      {
        v794 = (char *)v793;
        operator delete(v793);
      }
LABEL_339:
      v273 += 3;
    }
  }
LABEL_610:
  unint64_t v659 = objc_msgSend_vertexDescriptor(v767, (const char *)v235, v236);
  BOOL v660 = v659 == 0;

  if (v660)
  {
    objc_msgSend_bufferAllocator(v767, v661, v662);
    v663 = (MDLMeshBufferDataAllocator *)objc_claimAutoreleasedReturnValue();
    uint64_t v665 = objc_msgSend_newBufferFromZone_length_type_(v663, v666, 0, v753, 1);
  }
  else
  {
    v663 = objc_alloc_init(MDLMeshBufferDataAllocator);
    uint64_t v665 = objc_msgSend_newBuffer_type_(v663, v664, v753, 1);
  }
  v619 = (MDLSubmeshTopology *)v665;

  if (!v619)
  {
    sub_20B07F8E0(a6, "Could not allocate vertex buffer");
    goto LABEL_688;
  }
  if (objc_msgSend_conformsToProtocol_(v619, v667, (uint64_t)&unk_26BF5ED88))
  {
    unint64_t v670 = v619;
    v672 = objc_msgSend_stringWithFormat_(NSString, v671, @"%@-%@", @"MDL_OBJ", @"position");
    objc_msgSend_setName_(v670, v673, (uint64_t)v672);
  }
  int v674 = objc_msgSend_map(v619, v668, v669);
  uint64_t v677 = objc_msgSend_bytes(v674, v675, v676);

  uint64_t v678 = 6;
  if (v765 == v764) {
    uint64_t v678 = 3;
  }
  uint64_t v679 = 4;
  if (!v763) {
    uint64_t v679 = 0;
  }
  uint64_t v680 = 2;
  if (v762 == v761) {
    uint64_t v681 = 0;
  }
  else {
    uint64_t v681 = 2;
  }
  if (v760 == v759) {
    uint64_t v680 = 0;
  }
  uint64_t v682 = v681 + v678 + v680 + v679;
  uint64_t v683 = *v778;
  unint64_t v684 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v778[1] - *v778) >> 2);
  v685 = (long long *)v802;
  uint64_t v686 = v778[9];
  unint64_t v687 = 0xAAAAAAAAAAAAAAABLL * ((v778[10] - v686) >> 2);
  uint64_t v688 = v778[12];
  unint64_t v689 = (v778[13] - v688) >> 4;
  uint64_t v690 = v778[3];
  unint64_t v691 = (v778[4] - v690) >> 3;
  uint64_t v692 = v778[6];
  unint64_t v693 = (v778[7] - v692) >> 3;
  uint64_t v694 = v758;
  if (v758 <= 1) {
    uint64_t v694 = 1;
  }
  uint64_t v695 = v677 + 12;
  uint64_t v696 = 4 * v682;
  __asm { FMOV            V0.2S, #1.0 }
  do
  {
    long long v701 = *v685;
    uint64_t v702 = *v685;
    if ((v702 & 0x80000000) != 0 || v684 <= v702)
    {
      *(void *)(v695 - 12) = 0;
      int v704 = 0;
    }
    else
    {
      v703 = (_DWORD *)(v683 + 12 * v702);
      *(_DWORD *)(v695 - 12) = *v703;
      *(_DWORD *)(v695 - 8) = v703[1];
      int v704 = v703[2];
    }
    *(_DWORD *)(v695 - 4) = v704;
    if (v765 == v764)
    {
      uint64_t v707 = 3;
    }
    else
    {
      if ((DWORD2(v701) & 0x80000000) != 0 || v687 <= DWORD2(v701))
      {
        *(void *)uint64_t v695 = 0x3F80000000000000;
        int v706 = 0;
      }
      else
      {
        v705 = (_DWORD *)(v686 + 12 * DWORD2(v701));
        *(_DWORD *)uint64_t v695 = *v705;
        *(_DWORD *)(v695 + 4) = v705[1];
        int v706 = v705[2];
      }
      *(_DWORD *)(v695 + 8) = v706;
      uint64_t v707 = 6;
    }
    if (v763)
    {
      if ((HIDWORD(v701) & 0x80000000) != 0 || v689 <= HIDWORD(v701))
      {
        if ((v702 & 0x80000000) != 0 || v689 <= v702)
        {
          uint64_t v711 = v695 + 4 * v707;
          *(double *)(v711 - 12) = _D0;
          *(_DWORD *)(v711 - 4) = 1065353216;
          float v710 = 1.0;
          goto LABEL_648;
        }
        unint64_t v708 = (float *)(v688 + 16 * v702);
      }
      else
      {
        unint64_t v708 = (float *)(v688 + 16 * HIDWORD(v701));
      }
      uint64_t v709 = v695 + 4 * v707;
      *(float *)(v709 - 12) = *v708;
      *(float *)(v709 - 8) = v708[1];
      *(float *)(v709 - 4) = v708[2];
      float v710 = v708[3];
LABEL_648:
      *(float *)(v695 + 4 * v707) = v710;
      v707 += 4;
    }
    if (v762 != v761)
    {
      if ((DWORD1(v701) & 0x80000000) != 0 || v691 <= DWORD1(v701))
      {
        *(_DWORD *)(v695 + 4 * v707 - 12) = 0;
        int v713 = 0;
      }
      else
      {
        v712 = (_DWORD *)(v690 + 8 * DWORD1(v701));
        *(_DWORD *)(v695 + 4 * v707 - 12) = *v712;
        int v713 = v712[1];
      }
      uint64_t v714 = v695 + 4 * v707;
      v707 += 2;
      *(_DWORD *)(v714 - 8) = v713;
    }
    if (v760 != v759)
    {
      if ((DWORD1(v701) & 0x80000000) != 0 || v693 <= DWORD1(v701))
      {
        *(_DWORD *)(v695 + 4 * v707 - 12) = 0;
        int v716 = 0;
      }
      else
      {
        v715 = (_DWORD *)(v692 + 8 * DWORD1(v701));
        *(_DWORD *)(v695 + 4 * v707 - 12) = *v715;
        int v716 = v715[1];
      }
      *(_DWORD *)(v695 + 4 * v707 - 8) = v716;
    }
    ++v685;
    v695 += v696;
    --v694;
  }
  while (v694);
  unint64_t v827 = v619;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], 0, (uint64_t)&v827, 1, 12, 1065353216, _D0, 0.0078125);
  v777 = (MDLSubmeshTopology *)objc_claimAutoreleasedReturnValue();
  unint64_t v719 = objc_msgSend_vertexDescriptor(v767, v717, v718);
  BOOL v720 = v719 == 0;

  if (v720) {
    goto LABEL_674;
  }
  long long v784 = 0u;
  long long v785 = 0u;
  long long v782 = 0u;
  long long v783 = 0u;
  int v723 = objc_msgSend_vertexDescriptor(v767, v721, v722);
  uint64_t v726 = objc_msgSend_layouts(v723, v724, v725);

  uint64_t v730 = objc_msgSend_countByEnumeratingWithState_objects_count_(v726, v727, (uint64_t)&v782, v826, 16);
  if (!v730)
  {

LABEL_684:
    sub_20B07F8E0(a6, "No valid vertex descriptor layouts found");
    goto LABEL_687;
  }
  int v731 = 0;
  uint64_t v732 = *(void *)v783;
  do
  {
    for (uint64_t k = 0; k != v730; ++k)
    {
      if (*(void *)v783 != v732) {
        objc_enumerationMutation(v726);
      }
      if (objc_msgSend_stride(*(void **)(*((void *)&v782 + 1) + 8 * k), v728, v729)) {
        ++v731;
      }
    }
    uint64_t v730 = objc_msgSend_countByEnumeratingWithState_objects_count_(v726, v728, (uint64_t)&v782, v826, 16);
  }
  while (v730);

  if (v731 < 1)
  {
    uint64_t v744 = v778;
    if (v731) {
      goto LABEL_675;
    }
    goto LABEL_684;
  }
  unint64_t v736 = objc_msgSend_vertexDescriptor(v767, v734, v735);
  v739 = objc_msgSend_bufferAllocator(v767, v737, v738);
  uint64_t v740 = sub_20B19584C(v777, v758, v769, v736, 0, v739, 1);

  uint64_t v743 = objc_msgSend_vertexDescriptor(v767, v741, v742);

  int v769 = (MDLVertexDescriptor *)v743;
  v777 = (MDLSubmeshTopology *)v740;
LABEL_674:
  uint64_t v744 = v778;
LABEL_675:
  unint64_t v745 = [MDLMesh alloc];
  unint64_t v747 = objc_msgSend_initWithVertexBuffers_vertexCount_descriptor_submeshes_(v745, v746, (uint64_t)v777, v758, v769, v754);
  unint64_t v591 = v747;
  uint64_t v749 = v744[18];
  if (v744[19] == v749)
  {
    objc_msgSend_setName_(v747, v748, @"OBJ model");
  }
  else
  {
    if (*(char *)(v749 + 23) < 0) {
      uint64_t v749 = *(void *)v749;
    }
    int v750 = objc_msgSend_stringWithCString_encoding_(NSString, v748, v749, 4);
    objc_msgSend_setName_(v591, v751, (uint64_t)v750);
  }
  objc_msgSend_addObject_(v767, v752, (uint64_t)v591);
  sub_20B07F8E0(a6, "");
LABEL_686:

LABEL_687:
LABEL_688:

  if (v796)
  {
    v797 = (char *)v796;
    operator delete(v796);
  }
  if (v799)
  {
    unint64_t v800 = (__int32 *)v799;
    operator delete(v799);
  }
LABEL_55:

  if (v802)
  {
    std::string __p = v802;
    operator delete(v802);
  }
  sub_20B05F1D0((uint64_t)&v805);
}

void sub_20B07C550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  int v60 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v60;
    operator delete(v60);
  }
  int v61 = (void *)STACK[0x270];
  if (STACK[0x270])
  {
    STACK[0x278] = (unint64_t)v61;
    operator delete(v61);
  }

  int v62 = (void *)STACK[0x288];
  if (STACK[0x288])
  {
    STACK[0x290] = (unint64_t)v62;
    operator delete(v62);
  }
  sub_20B05F1D0((uint64_t)&STACK[0x2A0]);

  _Unwind_Resume(a1);
}

uint64_t *sub_20B07CCC0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v8 = 0;
  unint64_t v5 = (uint64_t **)sub_20B07CD4C((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_20B07CDEC((uint64_t)a1, a3, v7);
    sub_20B05FAEC(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

void *sub_20B07CD4C(uint64_t a1, void *a2, const void **a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        uint64_t v9 = (const void **)(v4 + 32);
        if (!sub_20B07CE98(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_20B07CE98(v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *sub_20B07CDEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  unint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  *unint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_20B07F994(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B07CE7C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_20B07CF04(v2, v3);
  _Unwind_Resume(a1);
}

BOOL sub_20B07CE98(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_20B07CF04(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_20B07CF64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  v17[4] = a1 + 2;
  int v10 = (char *)sub_20B07D120(v7, v9);
  uint64_t v11 = &v10[80 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[80 * v12];
  uint64_t v13 = *(void *)(a2 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = v13;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = *(void *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v11 + 5) = v14;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v11 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *((_DWORD *)v11 + 18) = *(_DWORD *)(a2 + 72);
  v17[2] = v11 + 80;
  sub_20B07D0A8(a1, v17);
  uint64_t v15 = a1[1];
  sub_20B07D330(v17);
  return v15;
}

void sub_20B07D094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B07D330((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B07D0A8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B07D168((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20B07D120(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_20B05D178();
  }
  return operator new(80 * a2);
}

uint64_t sub_20B07D168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(void *)(v7 - 64) = *(void *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(a3 - 72) = 0;
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 80) = 0;
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v7 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(void *)(v7 - 16) = *(void *)(a3 - 16);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 - 8);
      uint64_t v7 = *((void *)&v15 + 1) - 80;
      *((void *)&v15 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_20B07D24C((uint64_t)v12);
  return v10;
}

uint64_t sub_20B07D24C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B07D284((uint64_t *)a1);
  }
  return a1;
}

void sub_20B07D284(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_20B07D2D8(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void sub_20B07D2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 48);
  sub_20B07D3AC(&v3);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void **sub_20B07D330(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_20B07D364(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    sub_20B07D2D8(v4, i - 80);
  }
}

void sub_20B07D3AC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_20B07D400((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_20B07D400(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_20B07D458(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_20B07D4E0();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_20B07D4E0()
{
}

void *sub_20B07D4F8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_20B05D178();
  }
  return operator new(12 * a2);
}

uint64_t sub_20B07D540(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B07D600((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20B07D5B8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_20B05D178();
  }
  return operator new(24 * a2);
}

uint64_t sub_20B07D600(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  uint64_t v12 = 0;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  LOBYTE(v12) = 1;
  sub_20B07D6A4((uint64_t)v11);
  return v9;
}

uint64_t sub_20B07D6A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B07D6DC(a1);
  }
  return a1;
}

void sub_20B07D6DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_20B07D724(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B07D75C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void sub_20B07D7B8(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_20B05D0BC();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_20B05D1AC(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

int32x4_t *sub_20B07D860(void *a1, int32x2_t *a2)
{
  unint64_t v4 = sub_20B0BF80C((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t i = *(int32x4_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (uint64_t i = (int32x4_t *)i->i64[0]; i; uint64_t i = (int32x4_t *)i->i64[0])
    {
      unint64_t v9 = i->u64[1];
      if (v9 == v4)
      {
        if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(i[1], *(int32x4_t *)a2->i8)), 0xFuLL)))) {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v5) {
            v9 %= *(void *)&v5;
          }
        }
        else
        {
          v9 &= *(void *)&v5 - 1;
        }
        if (v9 != v7) {
          return 0;
        }
      }
    }
  }
  return i;
}

int32x4_t *sub_20B07D954(uint64_t a1, int32x2_t *a2, uint64_t a3, int32x4_t **a4)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF80C(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = v8;
      if (v8 >= v10) {
        unint64_t v12 = v8 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v8;
    }
    int v13 = *(int32x4_t ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (int32x4_t *)i->i64[0])
      {
        unint64_t v15 = i->u64[1];
        if (v15 == v8)
        {
          if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(i[1], *(int32x4_t *)a2->i8)), 0xFuLL)))) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t i = (int32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i32[0] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_20B05F7E0(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v12 = v9 % v10;
      }
      else {
        unint64_t v12 = v9;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(int32x4_t ***)(*(void *)a1 + 8 * v12);
  if (v23)
  {
    i->i64[0] = (uint64_t)*v23;
LABEL_38:
    *uint64_t v23 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v22 + 8 * v12) = a1 + 16;
  if (i->i64[0])
  {
    unint64_t v24 = *(void *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (int32x4_t **)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20B07DB98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B07DBAC(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_20B05D0BC();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint8x8_t v6 = (char *)sub_20B077E90(v3, a2);
    unint64_t v7 = &v6[v5];
    unint64_t v9 = &v6[16 * v8];
    uint8x8_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

BOOL sub_20B07DC50(uint64_t a1, uint64_t a2, void *a3, float32x4_t a4)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == a1) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  float32x4_t v6 = *(float32x4_t *)(*a3 + 16 * *(int *)(a1 + 16));
  if (*(void *)(a1 + 8) != a2) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  float32x4_t v7 = vsubq_f32(v6, *(float32x4_t *)(*a3 + 16 * *(int *)(*(void *)v5 + 16)));
  float32x4_t v8 = vsubq_f32(*(float32x4_t *)(*a3 + 16 * *(int *)(v4 + 16)), v6);
  float32x4_t v9 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v7)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v8);
  float32x4_t v10 = vmulq_f32(v9, v9);
  if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), v10), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)).f32[0] < 1.0e-12)return 1; {
  float32x4_t v12 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), a4);
  }
  return vaddq_f32(vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2)).f32[0] < 1.0e-12;
}

float32x2_t *sub_20B07DD08(void *a1, unint64_t *a2, float32x4_t a3)
{
  unint64_t v5 = sub_20B0BF5B4(a3, (uint64_t)(a1 + 3), a2);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v10 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v5;
  }
  uint8x8_t v11 = *(float32x2_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  float32x4_t v12 = *v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)(a1 + 4);
    do
    {
      float32x2_t v14 = v12[1];
      if (*(void *)&v14 == v7)
      {
        if (sub_20B0BF5C4(v13, v12 + 2, (float32x2_t *)a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (*(void *)&v14 >= *(void *)&v6) {
            *(void *)&v14 %= *(void *)&v6;
          }
        }
        else
        {
          *(void *)&v14 &= *(void *)&v6 - 1;
        }
        if (*(void *)&v14 != v10) {
          return 0;
        }
      }
      float32x4_t v12 = (float32x2_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

float32x2_t *sub_20B07DE0C(uint64_t a1, unint64_t *a2, float32x4_t a3, uint64_t a4, float32x2_t **a5)
{
  uint8x8_t v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_20B0BF5B4(a3, a1 + 24, a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v9;
      if (v9 >= v11) {
        unint64_t v14 = v9 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v9;
    }
    unint64_t v15 = *(float32x2_t ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (float32x2_t *)*i)
      {
        unint64_t v17 = (unint64_t)i[1];
        if (v17 == v10)
        {
          if (sub_20B0BF5C4(a1 + 32, i + 2, (float32x2_t *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  uint64_t i = (float32x2_t *)operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = (float32x2_t)v10;
  i[2] = **a5;
  i[3].i32[0] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_20B05F7E0(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void *)a1;
  int64_t v25 = *(float32x2_t ***)(*(void *)a1 + 8 * v14);
  if (v25)
  {
    *uint64_t i = (float32x2_t)*v25;
LABEL_38:
    *int64_t v25 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(float32x2_t *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v24 + 8 * v14) = a1 + 16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11) {
        v26 %= v11;
      }
    }
    else
    {
      v26 &= v11 - 1;
    }
    int64_t v25 = (float32x2_t **)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_20B07E05C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B07E070(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2 = vcgt_f32(*a2, *a1);
  if (v2.i8[0])
  {
    char v3 = 1;
  }
  else
  {
    if ((vcgt_f32(*a1, *a2).u8[0] & 1) == 0)
    {
      uint64_t v4 = (uint64_t *)a1[1];
      unint64_t v5 = (uint64_t *)a2[1];
      if (v4 != v5)
      {
        uint64_t v6 = v4[1];
        uint64_t v7 = *v5;
        uint64_t v8 = v5[1];
        if (COERCE_FLOAT(*v4) == *(float *)&v6 && *(float *)&v7 != *(float *)&v8)
        {
          char v3 = a1[2].i8[0] != 0;
          return v3 & 1;
        }
        if (COERCE_FLOAT(*v4) != *(float *)&v6 && *(float *)&v7 == *(float *)&v8)
        {
          char v3 = a2[2].i8[0] == 0;
          return v3 & 1;
        }
      }
      char v3 = v2.i8[4];
      return v3 & 1;
    }
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_20B07E0FC(float32x2_t *a1, float32x2_t *a2, int8x16_t a3)
{
  char v3 = 0;
  if (a1 && a2)
  {
    float32x2_t v4 = *a1;
    float32x2_t v5 = a1[1];
    float32x2_t v7 = *a2;
    float32x2_t v6 = a2[1];
    *(float32x2_t *)a3.i8 = vsub_f32(*a1, v5);
    float32x2_t v8 = vsub_f32(*a2, v6);
    float32x2_t v9 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v8), *(float32x2_t *)a3.i8);
    float32x2_t v10 = vsub_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1));
    if (vmul_f32(v10, v10).f32[0] < 0.000001) {
      v10.f32[0] = 0.0;
    }
    if (v10.f32[0] == 0.0)
    {
      int32x2_t v11 = (int32x2_t)vmul_f32(vsub_f32(v7, v5), vsub_f32(v7, v4));
      int32x2_t v12 = (int32x2_t)vmul_f32(vsub_f32(v6, v5), vsub_f32(v6, v4));
      int32x2_t v13 = vcltz_f32(vadd_f32((float32x2_t)vzip1_s32(v12, v11), (float32x2_t)vzip2_s32(v12, v11)));
      __int8 v14 = v13.i8[4];
    }
    else
    {
      float32x2_t v15 = vsub_f32(v7, v4);
      float32x2_t v16 = vsub_f32(v5, v4);
      float32x2_t v17 = vsub_f32(v6, v4);
      int8x8_t v18 = (int8x8_t)vsub_f32(v4, v7);
      int8x8_t v19 = (int8x8_t)vsub_f32(v6, v7);
      int8x8_t v20 = (int8x8_t)vsub_f32(v5, v7);
      float32x2_t v21 = (float32x2_t)vext_s8((int8x8_t)v17, v19, 4uLL);
      v17.i32[1] = v19.i32[1];
      float32x2_t v22 = vmla_f32(vneg_f32(vmul_f32(v21, (float32x2_t)__PAIR64__(v18.u32[1], v16.u32[0]))), (float32x2_t)vext_s8((int8x8_t)v16, v18, 4uLL), v17);
      float64x2_t v23 = (float64x2_t)vdupq_n_s64(0x3EB0C6F7A0B5ED8DuLL);
      float32x2_t v24 = (float32x2_t)vext_s8((int8x8_t)v15, v19, 4uLL);
      v15.i32[1] = v19.i32[1];
      float32x2_t v25 = (float32x2_t)vext_s8((int8x8_t)v16, v20, 4uLL);
      v16.i32[1] = v20.i32[1];
      float32x2_t v26 = vmla_f32(vneg_f32(vmul_f32(v24, v16)), v25, v15);
      float32x2_t v27 = vmul_f32((float32x2_t)vbic_s8((int8x8_t)v22, (int8x8_t)vmovn_s64(vcgtq_f64(v23, vcvtq_f64_f32(vmul_f32(v22, v22))))), (float32x2_t)vbic_s8((int8x8_t)v26, (int8x8_t)vmovn_s64(vcgtq_f64(v23, vcvtq_f64_f32(vmul_f32(v26, v26))))));
      if (v27.f32[0] < 0.0 && v27.f32[1] < 0.0)
      {
        char v3 = 1;
        return v3 & 1;
      }
      int8x8_t v28 = (int8x8_t)vsub_f32(v7, v5);
      int8x8_t v29 = (int8x8_t)vsub_f32(v6, v5);
      float32x2_t v30 = vsub_f32(v4, v6);
      float32x2_t v31 = vsub_f32(v5, v6);
      float32x2_t v32 = (float32x2_t)vext_s8((int8x8_t)v30, *(int8x8_t *)a3.i8, 4uLL);
      v30.i32[1] = a3.i32[1];
      float32x2_t v33 = vmla_f32(vneg_f32(vmul_f32((float32x2_t)__PAIR64__(v29.u32[1], v8.u32[0]), v32)), v30, (float32x2_t)vext_s8((int8x8_t)v8, v29, 4uLL));
      float32x2_t v34 = (float32x2_t)vbic_s8((int8x8_t)v33, (int8x8_t)vmovn_s64(vcgtq_f64(v23, vcvtq_f64_f32(vmul_f32(v33, v33)))));
      float32x2_t v35 = (float32x2_t)vext_s8((int8x8_t)v8, v28, 4uLL);
      float32x2_t v36 = (float32x2_t)vext_s8((int8x8_t)v31, *(int8x8_t *)a3.i8, 4uLL);
      v31.i32[1] = a3.i32[1];
      v8.i32[1] = v28.i32[1];
      *(float32x2_t *)a3.i8 = vmla_f32(vneg_f32(vmul_f32(v8, v36)), v31, v35);
      *(float32x2_t *)a3.i8 = vmul_f32(v34, (float32x2_t)vbic_s8(*(int8x8_t *)a3.i8, (int8x8_t)vmovn_s64(vcgtq_f64(v23, vcvtq_f64_f32(vmul_f32(*(float32x2_t *)a3.i8, *(float32x2_t *)a3.i8))))));
      float32x4_t v37 = (float32x4_t)vextq_s8(a3, a3, 4uLL);
      *(float32x2_t *)&v37.i32[1] = v27;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_f32(v37))) & 1) == 0)
      {
        char v3 = 0;
        return v3 & 1;
      }
      int32x2_t v13 = vcltz_f32(*(float32x2_t *)a3.i8);
      __int8 v14 = (v27.f32[0] < 0.0 || v27.f32[1] < 0.0) | v13.i8[4];
    }
    char v3 = v14 | v13.i8[0];
  }
  return v3 & 1;
}

void sub_20B07E2FC(unint64_t a1, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v110 = a2 - 24;
    __int32 v107 = (long long *)(a2 - 72);
    int64_t v108 = (long long *)(a2 - 48);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 3);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((*a3)((long long *)v110, (long long *)a1))
                {
                  long long v43 = *(_OWORD *)a1;
                  uint64_t v115 = *(void *)(a1 + 16);
                  long long v114 = v43;
                  long long v44 = *(_OWORD *)v110;
                  *(void *)(a1 + 16) = *(void *)(v110 + 16);
                  *(_OWORD *)a1 = v44;
                  long long v45 = v114;
                  *(void *)(v110 + 16) = v115;
                  *(_OWORD *)uint64_t v110 = v45;
                }
                break;
              case 3uLL:
                sub_20B07ED04((long long *)a1, (long long *)(a1 + 24), (long long *)v110, a3);
                break;
              case 4uLL:
                sub_20B07F12C(a1, a1 + 24, a1 + 48, v110, a3);
                break;
              case 5uLL:
                uint64_t v46 = (long long *)(a1 + 24);
                uint64_t v47 = (long long *)(a1 + 48);
                uint64_t v48 = (long long *)(a1 + 72);
                __n128 v49 = sub_20B07F12C(a1, a1 + 24, a1 + 48, a1 + 72, a3);
                if (((unsigned int (*)(uint64_t, unint64_t, __n128))*a3)(v110, a1 + 72, v49))
                {
                  long long v114 = *v48;
                  long long v50 = v114;
                  uint64_t v115 = *(void *)(a1 + 88);
                  uint64_t v51 = v115;
                  uint64_t v52 = *(void *)(v110 + 16);
                  *uint64_t v48 = *(_OWORD *)v110;
                  *(void *)(a1 + 88) = v52;
                  *(void *)(v110 + 16) = v51;
                  *(_OWORD *)uint64_t v110 = v50;
                  if ((*a3)((long long *)(a1 + 72), (long long *)(a1 + 48)))
                  {
                    uint64_t v53 = *(void *)(a1 + 64);
                    long long v54 = *v47;
                    *uint64_t v47 = *v48;
                    *(void *)(a1 + 64) = *(void *)(a1 + 88);
                    *uint64_t v48 = v54;
                    *(void *)(a1 + 88) = v53;
                    if ((*a3)((long long *)(a1 + 48), (long long *)(a1 + 24)))
                    {
                      uint64_t v55 = *(void *)(a1 + 40);
                      long long v56 = *v46;
                      *uint64_t v46 = *v47;
                      *(void *)(a1 + 40) = *(void *)(a1 + 64);
                      *uint64_t v47 = v56;
                      *(void *)(a1 + 64) = v55;
                      if ((*a3)((long long *)(a1 + 24), (long long *)a1))
                      {
                        long long v57 = *(_OWORD *)a1;
                        uint64_t v115 = *(void *)(a1 + 16);
                        long long v114 = v57;
                        *(_OWORD *)a1 = *v46;
                        *(void *)(a1 + 16) = *(void *)(a1 + 40);
                        *uint64_t v46 = v114;
                        *(void *)(a1 + 40) = v115;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            int v58 = (long long *)(a1 + 24);
            BOOL v60 = a1 == a2 || v58 == (long long *)a2;
            if (a5)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                unint64_t v62 = a1;
                do
                {
                  int v63 = (long long *)v62;
                  unint64_t v62 = (unint64_t)v58;
                  if ((*a3)(v58, v63))
                  {
                    long long v64 = *(_OWORD *)v62;
                    uint64_t v115 = *(void *)(v62 + 16);
                    long long v114 = v64;
                    uint64_t v65 = v61;
                    while (1)
                    {
                      uint64_t v66 = a1 + v65;
                      *(_OWORD *)(v66 + 24) = *(_OWORD *)(a1 + v65);
                      *(void *)(v66 + 40) = *(void *)(a1 + v65 + 16);
                      if (!v65) {
                        break;
                      }
                      v65 -= 24;
                      if (((*a3)(&v114, (long long *)(v65 + a1)) & 1) == 0)
                      {
                        uint64_t v67 = a1 + v65 + 24;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v67 = a1;
LABEL_78:
                    long long v68 = v114;
                    *(void *)(v67 + 16) = v115;
                    *(_OWORD *)uint64_t v67 = v68;
                  }
                  int v58 = (long long *)(v62 + 24);
                  v61 += 24;
                }
                while (v62 + 24 != a2);
              }
            }
            else if (!v60)
            {
              unint64_t v101 = a1 - 24;
              do
              {
                uint64_t v102 = (long long *)a1;
                a1 = (unint64_t)v58;
                if ((*a3)(v58, v102))
                {
                  long long v103 = *(_OWORD *)a1;
                  uint64_t v115 = *(void *)(a1 + 16);
                  long long v114 = v103;
                  unint64_t v104 = v101;
                  do
                  {
                    *(_OWORD *)(v104 + 48) = *(_OWORD *)(v104 + 24);
                    *(void *)(v104 + 64) = *(void *)(v104 + 40);
                    char v105 = (*a3)(&v114, (long long *)v104);
                    v104 -= 24;
                  }
                  while ((v105 & 1) != 0);
                  long long v106 = v114;
                  *(void *)(v104 + 64) = v115;
                  *(_OWORD *)(v104 + 48) = v106;
                }
                int v58 = (long long *)(a1 + 24);
                v101 += 24;
              }
              while (a1 + 24 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v69 = (v14 - 2) >> 1;
              unint64_t v109 = a2;
              int64_t v111 = v69;
              do
              {
                int64_t v70 = v69;
                if (v111 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = a1 + 24 * v71;
                  if (2 * v69 + 2 < (uint64_t)v14
                    && (*a3)((long long *)(a1 + 24 * v71), (long long *)(v72 + 24)))
                  {
                    v72 += 24;
                    uint64_t v71 = 2 * v70 + 2;
                  }
                  unint64_t v73 = a1 + 24 * v70;
                  if (((*a3)((long long *)v72, (long long *)v73) & 1) == 0)
                  {
                    long long v74 = *(_OWORD *)v73;
                    uint64_t v115 = *(void *)(v73 + 16);
                    long long v114 = v74;
                    do
                    {
                      unint64_t v75 = v72;
                      long long v76 = *(_OWORD *)v72;
                      *(void *)(v73 + 16) = *(void *)(v72 + 16);
                      *(_OWORD *)unint64_t v73 = v76;
                      if (v111 < v71) {
                        break;
                      }
                      uint64_t v77 = (2 * v71) | 1;
                      unint64_t v72 = a1 + 24 * v77;
                      uint64_t v78 = 2 * v71 + 2;
                      if (v78 < (uint64_t)v14
                        && (*a3)((long long *)(a1 + 24 * v77), (long long *)(v72 + 24)))
                      {
                        v72 += 24;
                        uint64_t v77 = v78;
                      }
                      unint64_t v73 = v75;
                      uint64_t v71 = v77;
                    }
                    while (!(*a3)((long long *)v72, &v114));
                    long long v79 = v114;
                    *(void *)(v75 + 16) = v115;
                    *(_OWORD *)unint64_t v75 = v79;
                    a2 = v109;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              int64_t v80 = v13 / 0x18uLL;
              do
              {
                uint64_t v81 = 0;
                long long v82 = *(_OWORD *)a1;
                uint64_t v113 = *(void *)(a1 + 16);
                long long v112 = v82;
                unint64_t v83 = a1;
                do
                {
                  uint64_t v84 = v83 + 24 * v81 + 24;
                  uint64_t v85 = (2 * v81) | 1;
                  uint64_t v86 = 2 * v81 + 2;
                  if (v86 < v80
                    && (*a3)((long long *)(v83 + 24 * v81 + 24), (long long *)(v83 + 24 * v81 + 48)))
                  {
                    v84 += 24;
                    uint64_t v85 = v86;
                  }
                  long long v87 = *(_OWORD *)v84;
                  *(void *)(v83 + 16) = *(void *)(v84 + 16);
                  *(_OWORD *)unint64_t v83 = v87;
                  unint64_t v83 = v84;
                  uint64_t v81 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                uint64_t v88 = (long long *)(a2 - 24);
                if (v84 == a2 - 24)
                {
                  unint64_t v91 = a2 - 24;
                  long long v99 = v112;
                  *(void *)(v84 + 16) = v113;
                  *(_OWORD *)uint64_t v84 = v99;
                }
                else
                {
                  long long v89 = *v88;
                  *(void *)(v84 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)uint64_t v84 = v89;
                  long long v90 = v112;
                  *(void *)(a2 - 8) = v113;
                  unint64_t v91 = a2 - 24;
                  long long *v88 = v90;
                  uint64_t v92 = v84 - a1 + 24;
                  if (v92 >= 25)
                  {
                    unint64_t v93 = (v92 / 0x18uLL - 2) >> 1;
                    unint64_t v94 = a1 + 24 * v93;
                    if ((*a3)((long long *)v94, (long long *)v84))
                    {
                      long long v95 = *(_OWORD *)v84;
                      uint64_t v115 = *(void *)(v84 + 16);
                      long long v114 = v95;
                      do
                      {
                        uint64_t v96 = v94;
                        long long v97 = *(_OWORD *)v94;
                        *(void *)(v84 + 16) = *(void *)(v94 + 16);
                        *(_OWORD *)uint64_t v84 = v97;
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                        unint64_t v94 = a1 + 24 * v93;
                        uint64_t v84 = v96;
                      }
                      while (((*a3)((long long *)v94, &v114) & 1) != 0);
                      long long v98 = v114;
                      *(void *)(v96 + 16) = v115;
                      *(_OWORD *)uint64_t v96 = v98;
                    }
                  }
                }
                BOOL v100 = v80-- <= 2;
                a2 = v91;
              }
              while (!v100);
            }
            return;
          }
          uint64_t v15 = a2;
          unint64_t v16 = a1 + 24 * (v14 >> 1);
          if ((unint64_t)v13 >= 0xC01)
          {
            sub_20B07ED04((long long *)a1, (long long *)(a1 + 24 * (v14 >> 1)), (long long *)v110, a3);
            sub_20B07ED04((long long *)(a1 + 24), (long long *)(a1 + 24 * (v14 >> 1) - 24), v108, a3);
            sub_20B07ED04((long long *)(a1 + 48), (long long *)(a1 + 24 + 24 * (v14 >> 1)), v107, a3);
            sub_20B07ED04((long long *)(a1 + 24 * (v14 >> 1) - 24), (long long *)v16, (long long *)(a1 + 24 + 24 * (v14 >> 1)), a3);
            long long v17 = *(_OWORD *)a1;
            uint64_t v115 = *(void *)(a1 + 16);
            long long v114 = v17;
            uint64_t v18 = *(void *)(v16 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v18;
            long long v19 = v114;
            *(void *)(v16 + 16) = v115;
            *(_OWORD *)unint64_t v16 = v19;
          }
          else
          {
            sub_20B07ED04((long long *)(a1 + 24 * (v14 >> 1)), (long long *)a1, (long long *)v110, a3);
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)((long long *)(a1 - 24), (long long *)a1)) {
            break;
          }
          long long v33 = *(_OWORD *)a1;
          uint64_t v113 = *(void *)(a1 + 16);
          long long v112 = v33;
          if ((*a3)(&v112, (long long *)v110))
          {
            unint64_t v12 = a1;
            do
              v12 += 24;
            while (((*a3)(&v112, (long long *)v12) & 1) == 0);
          }
          else
          {
            float32x2_t v34 = (long long *)(a1 + 24);
            do
            {
              unint64_t v12 = (unint64_t)v34;
              if ((unint64_t)v34 >= a2) {
                break;
              }
              int v35 = (*a3)(&v112, v34);
              float32x2_t v34 = (long long *)(v12 + 24);
            }
            while (!v35);
          }
          unint64_t v36 = a2;
          if (v12 < a2)
          {
            unint64_t v36 = a2;
            do
              v36 -= 24;
            while (((*a3)(&v112, (long long *)v36) & 1) != 0);
          }
          while (v12 < v36)
          {
            long long v37 = *(_OWORD *)v12;
            uint64_t v115 = *(void *)(v12 + 16);
            long long v114 = v37;
            long long v38 = *(_OWORD *)v36;
            *(void *)(v12 + 16) = *(void *)(v36 + 16);
            *(_OWORD *)unint64_t v12 = v38;
            long long v39 = v114;
            *(void *)(v36 + 16) = v115;
            *(_OWORD *)unint64_t v36 = v39;
            do
              v12 += 24;
            while (!(*a3)(&v112, (long long *)v12));
            do
              v36 -= 24;
            while (((*a3)(&v112, (long long *)v36) & 1) != 0);
          }
          uint64_t v40 = (long long *)(v12 - 24);
          BOOL v5 = v12 - 24 >= a1;
          BOOL v6 = v12 - 24 == a1;
          if (v12 - 24 != a1)
          {
            long long v41 = *v40;
            *(void *)(a1 + 16) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v41;
          }
          a5 = 0;
          long long v42 = v112;
          *(void *)(v12 - 8) = v113;
          *uint64_t v40 = v42;
        }
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)a1;
        uint64_t v113 = *(void *)(a1 + 16);
        long long v112 = v21;
        do
          v20 += 24;
        while (((*a3)((long long *)(v20 + a1), &v112) & 1) != 0);
        unint64_t v22 = a1 + v20;
        float64x2_t v23 = (long long *)v15;
        BOOL v6 = v20 == 24;
        a2 = v15;
        if (v6)
        {
          float64x2_t v23 = (long long *)v15;
          do
          {
            if (v22 >= (unint64_t)v23) {
              break;
            }
            float64x2_t v23 = (long long *)((char *)v23 - 24);
          }
          while (((*a3)(v23, &v112) & 1) == 0);
        }
        else
        {
          do
            float64x2_t v23 = (long long *)((char *)v23 - 24);
          while (!(*a3)(v23, &v112));
        }
        if (v22 < (unint64_t)v23)
        {
          float32x2_t v24 = v23;
          unint64_t v25 = v22;
          do
          {
            long long v26 = *(_OWORD *)v25;
            uint64_t v115 = *(void *)(v25 + 16);
            long long v114 = v26;
            long long v27 = *v24;
            *(void *)(v25 + 16) = *((void *)v24 + 2);
            *(_OWORD *)unint64_t v25 = v27;
            long long v28 = v114;
            *((void *)v24 + 2) = v115;
            *float32x2_t v24 = v28;
            do
              v25 += 24;
            while (((*a3)((long long *)v25, &v112) & 1) != 0);
            do
              float32x2_t v24 = (long long *)((char *)v24 - 24);
            while (!(*a3)(v24, &v112));
          }
          while (v25 < (unint64_t)v24);
          uint64_t v29 = v25 - 24;
        }
        else
        {
          uint64_t v29 = v22 - 24;
        }
        if (v29 != a1)
        {
          long long v30 = *(_OWORD *)v29;
          *(void *)(a1 + 16) = *(void *)(v29 + 16);
          *(_OWORD *)a1 = v30;
        }
        long long v31 = v112;
        *(void *)(v29 + 16) = v113;
        *(_OWORD *)uint64_t v29 = v31;
        if (v22 >= (unint64_t)v23) {
          break;
        }
LABEL_32:
        sub_20B07E2FC(a1, v29, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v29 + 24;
      }
      BOOL v32 = sub_20B07EE40(a1, v29, a3);
      unint64_t v12 = v29 + 24;
      if (sub_20B07EE40(v29 + 24, v15, a3)) {
        break;
      }
      if (!v32) {
        goto LABEL_32;
      }
    }
    a2 = v29;
    if (!v32) {
      continue;
    }
    break;
  }
}

uint64_t sub_20B07ED04(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if (v8)
  {
    if (result)
    {
      uint64_t v10 = *((void *)a1 + 2);
      long long v11 = *a1;
      uint64_t v12 = *((void *)a3 + 2);
      *a1 = *a3;
      *((void *)a1 + 2) = v12;
    }
    else
    {
      uint64_t v19 = *((void *)a1 + 2);
      long long v20 = *a1;
      uint64_t v21 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v21;
      *a2 = v20;
      *((void *)a2 + 2) = v19;
      uint64_t result = (*a4)(a3, a2);
      if (!result) {
        return result;
      }
      uint64_t v10 = *((void *)a2 + 2);
      long long v11 = *a2;
      uint64_t v22 = *((void *)a3 + 2);
      *a2 = *a3;
      *((void *)a2 + 2) = v22;
    }
    *a3 = v11;
    *((void *)a3 + 2) = v10;
  }
  else if (result)
  {
    uint64_t v13 = *((void *)a2 + 2);
    long long v14 = *a2;
    uint64_t v15 = *((void *)a3 + 2);
    *a2 = *a3;
    *((void *)a2 + 2) = v15;
    *a3 = v14;
    *((void *)a3 + 2) = v13;
    uint64_t result = (*a4)(a2, a1);
    if (result)
    {
      uint64_t v16 = *((void *)a1 + 2);
      long long v17 = *a1;
      uint64_t v18 = *((void *)a2 + 2);
      *a1 = *a2;
      *((void *)a1 + 2) = v18;
      *a2 = v17;
      *((void *)a2 + 2) = v16;
    }
  }
  return result;
}

BOOL sub_20B07EE40(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *char v8 = v10;
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      sub_20B07ED04((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_20B07F12C(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      uint64_t v19 = (long long *)(a1 + 24);
      long long v20 = (long long *)(a1 + 48);
      uint64_t v21 = (long long *)(a1 + 72);
      uint64_t v22 = a2 - 24;
      __n128 v23 = sub_20B07F12C(a1, a1 + 24, a1 + 48, a1 + 72, a3);
      if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v22, a1 + 72, v23))
      {
        uint64_t v24 = *(void *)(a1 + 88);
        long long v25 = *v21;
        uint64_t v26 = *(void *)(v22 + 16);
        *uint64_t v21 = *(_OWORD *)v22;
        *(void *)(a1 + 88) = v26;
        *(_OWORD *)uint64_t v22 = v25;
        *(void *)(v22 + 16) = v24;
        if ((*a3)((long long *)(a1 + 72), (long long *)(a1 + 48)))
        {
          uint64_t v27 = *(void *)(a1 + 64);
          long long v28 = *v20;
          *long long v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v21 = v28;
          *(void *)(a1 + 88) = v27;
          if ((*a3)((long long *)(a1 + 48), (long long *)(a1 + 24)))
          {
            uint64_t v29 = *(void *)(a1 + 40);
            long long v30 = *v19;
            *uint64_t v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            *long long v20 = v30;
            *(void *)(a1 + 64) = v29;
            if ((*a3)((long long *)(a1 + 24), (long long *)a1))
            {
              uint64_t v31 = *(void *)(a1 + 16);
              long long v32 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *uint64_t v19 = v32;
              *(void *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = (long long *)(a1 + 48);
      sub_20B07ED04((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v33 = *(_OWORD *)v13;
      uint64_t v34 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v33, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v18 = v33;
      *(void *)(v18 + 16) = v34;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_20B07F12C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  sub_20B07ED04((long long *)a1, (long long *)a2, (long long *)a3, a5);
  if ((*a5)((long long *)a4, (long long *)a3))
  {
    uint64_t v11 = *(void *)(a3 + 16);
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(void *)(a4 + 16) = v11;
    if ((*a5)((long long *)a3, (long long *)a2))
    {
      uint64_t v14 = *(void *)(a2 + 16);
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(void *)(a3 + 16) = v14;
      if ((*a5)((long long *)a2, (long long *)a1))
      {
        uint64_t v17 = *(void *)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(void *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

void *sub_20B07F218(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_20B07F294(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B07F278(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B07F294(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_20B05D0BC();
  }
  __n128 result = (char *)sub_20B077E90((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t *sub_20B07F2D8(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = sub_20B07F364(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_20B05FAEC(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20B07F364(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  BOOL v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    size_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          BOOL v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        BOOL v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    long long v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      long long v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          BOOL v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        BOOL v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_20B07F50C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    __n128 result = sub_20B07F294(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B07F56C(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B07F588(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20B07F5E0(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_20B07F5C8(_Unwind_Exception *a1)
{
  sub_20B05D2CC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B07F5E0(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    BOOL v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      __n128 result = sub_20B07F2D8(v5, v6, v4 + 7, v4 + 7);
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_20B07F66C(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 28);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28)) {
    return 0;
  }
  sub_20B060F28((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

void *sub_20B07F6E8(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    __n128 result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        __n128 result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

uint64_t sub_20B07F74C(uint64_t a1)
{
  size_t v8 = (void **)(a1 + 144);
  sub_20B07F7E4(&v8);
  sub_20B07F87C(a1 + 120, *(char **)(a1 + 128));
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  BOOL v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void sub_20B07F7E4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_20B07D2D8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B07F87C(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_20B07F87C(a1, *(void *)a2);
    sub_20B07F87C(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *sub_20B07F8E0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_20B07D4E0();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    BOOL v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    BOOL v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *sub_20B07F994(unsigned char *__dst, void *__src, unint64_t a3)
{
  size_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_20B07D4E0();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    void v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    size_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

void sub_20B07FA34()
{
}

void sub_20B07FA4C(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20B07FAA8(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_263FFCBA8, MEMORY[0x263F8C068]);
}

void sub_20B07FA94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20B07FAA8(std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t sub_20B07FADC(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_20B07FB7C(a1);
  return a1;
}

void sub_20B07FB58(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_20B07FB7C(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    size_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    size_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        size_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void *sub_20B07FC90(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x210532460](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_20B07FE38(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x210532470](v13);
  return a1;
}

void sub_20B07FDD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x210532470](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20B07FDB0);
}

void sub_20B07FE24(_Unwind_Exception *a1)
{
}

uint64_t sub_20B07FE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
      sub_20B07FFC8(__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_20B07FFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B07FFC8(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_20B07D4E0();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

float32x4_t **sub_20B080074(uint64_t a1, long long **a2, uint64_t a3, uint64_t *a4)
{
  size_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF6E0(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    uint64_t v14 = *(float32x4_t ****)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (float32x4_t **)*i)
      {
        unint64_t v16 = (unint64_t)i[1];
        if (v16 == v9)
        {
          if (sub_20B0BF7A0(a1 + 32, i + 2, (float32x4_t **)a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  sub_20B080318(a1, v9, a4, v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  __n128 v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *__n128 v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (float32x4_t **)v26[0];
  ++*v7;
  return i;
}

void sub_20B0802F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    sub_20B0803C4((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B080318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  unint64_t v8 = a4 + 1;
  unint64_t v9 = operator new(0x30uLL);
  *a4 = v9;
  *unint64_t v8 = v7;
  *((unsigned char *)a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = a2;
  uint64_t v10 = *a3;
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = 0;
  __n128 result = sub_20B07F50C(v9 + 2, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 4);
  *((_DWORD *)v9 + 10) = 0;
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_20B0803A8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_20B0803C4(v2, v3);
  _Unwind_Resume(a1);
}

void sub_20B0803C4(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    char v3 = (void *)__p[2];
    if (v3)
    {
      __p[3] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

float32x4_t *sub_20B080424(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF5EC(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    uint64_t v14 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (float32x4_t *)i->i64[0])
      {
        unint64_t v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_20B0BF5FC(a1 + 32, i + 1, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i32[0] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
  if (v24)
  {
    i->i64[0] = (uint64_t)*v24;
LABEL_38:
    *unint64_t v24 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v13) = a1 + 16;
  if (i->i64[0])
  {
    unint64_t v25 = *(void *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (float32x4_t **)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20B080674(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_20B080688(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF630(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    uint64_t v14 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (float32x4_t *)i->i64[0])
      {
        unint64_t v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_20B0BF6B0(a1 + 32, i + 1, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i32[0] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
  if (v24)
  {
    i->i64[0] = (uint64_t)*v24;
LABEL_38:
    *unint64_t v24 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v13) = a1 + 16;
  if (i->i64[0])
  {
    unint64_t v25 = *(void *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    unint64_t v24 = (float32x4_t **)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20B0808D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0808EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  unint64_t v10 = (char *)sub_20B06C71C(v7, v9);
  uint8x8_t v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[32 * v12];
  *(_DWORD *)uint8x8_t v11 = *(_DWORD *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  _OWORD v15[2] = v11 + 32;
  sub_20B0809E0(a1, v15);
  uint64_t v13 = a1[1];
  sub_20B080B84((uint64_t)v15);
  return v13;
}

void sub_20B0809CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B080B84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0809E0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B080A58((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B080A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  uint64_t v12 = 0;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  LOBYTE(v12) = 1;
  sub_20B080B04((uint64_t)v11);
  return v9;
}

uint64_t sub_20B080B04(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B080B3C(a1);
  }
  return a1;
}

void sub_20B080B3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_20B080B84(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B080BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

void sub_20B080C18(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_20B080C6C((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_20B080C6C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 80)
  {
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_20B080CC8(uint64_t a1)
{
  sub_20B080D04(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_20B080D04(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20B080D50(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_20B07CE98(v5, (const void **)(v3 + 32), a2);
    int v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      int v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_20B07CE98(v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t *sub_20B080DE0(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_20B07CD4C((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_20B080E84((uint64_t)a1, a4, v8);
    sub_20B05FAEC(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_20B080E84@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  BOOL v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_20B07F994(result, *(void **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }
  *((_DWORD *)v7 + 14) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B080F1C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_20B07CF04(v3, v2);
  _Unwind_Resume(a1);
}

float32x4_t *sub_20B080F38(void *a1, float32x4_t *a2)
{
  unint64_t v4 = sub_20B0BF5EC((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(float32x4_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11->u64[1];
      if (v13 == v6)
      {
        if (sub_20B0BF5FC(v12, v11 + 1, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = (float32x4_t *)v11->i64[0];
    }
    while (v11);
  }
  return v11;
}

float32x4_t **sub_20B08103C(void *a1, long long **a2)
{
  unint64_t v4 = sub_20B0BF6E0((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(float32x4_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = (unint64_t)v11[1];
      if (v13 == v6)
      {
        if (sub_20B0BF7A0(v12, v11 + 2, (float32x4_t **)a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = (float32x4_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

float32x4_t *sub_20B081140(void *a1, float32x4_t *a2)
{
  unint64_t v4 = sub_20B0BF630((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  long long v10 = *(float32x4_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11->u64[1];
      if (v13 == v6)
      {
        if (sub_20B0BF6B0(v12, v11 + 1, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = (float32x4_t *)v11->i64[0];
    }
    while (v11);
  }
  return v11;
}

void *sub_20B081244(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_20B0812C0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B0812A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B0812C0(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_20B05D0BC();
  }
  uint64_t result = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_20B081304(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20B05F7E0(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(float32x4_t **)(a2 + 16); i; uint64_t i = (float32x4_t *)i->i64[0])
    sub_20B08137C(a1, i + 1, i + 1);
  return a1;
}

void sub_20B081364(_Unwind_Exception *a1)
{
  sub_20B05F1D0(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_20B08137C(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_20B0BF5EC(a1 + 24, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      long long v14 = (float32x4_t *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14->u64[1];
          if (v15 == v8)
          {
            if (sub_20B0BF5FC(a1 + 32, v14 + 1, a2)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v9) {
                v15 %= v9;
              }
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v12) {
              break;
            }
          }
          long long v14 = (float32x4_t *)v14->i64[0];
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  long long v14 = (float32x4_t *)operator new(0x30uLL);
  v14->i64[0] = 0;
  v14->i64[1] = v8;
  float32x4_t v16 = a3[1];
  v14[1] = *a3;
  v14[2] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(float32x4_t ***)(*(void *)a1 + 8 * v12);
  if (v24)
  {
    v14->i64[0] = (uint64_t)*v24;
LABEL_38:
    *unint64_t v24 = v14;
    goto LABEL_39;
  }
  v14->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v12) = a1 + 16;
  if (v14->i64[0])
  {
    unint64_t v25 = *(void *)(v14->i64[0] + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unint64_t v24 = (float32x4_t **)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v6;
  return v14;
}

void sub_20B0815C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0815D8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20B05F7E0(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(float32x4_t **)(a2 + 16); i; uint64_t i = (float32x4_t *)i->i64[0])
    sub_20B081650(a1, i + 1, i + 1);
  return a1;
}

void sub_20B081638(_Unwind_Exception *a1)
{
  sub_20B05F1D0(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_20B081650(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_20B0BF630(a1 + 24, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      long long v14 = (float32x4_t *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14->u64[1];
          if (v15 == v8)
          {
            if (sub_20B0BF6B0(a1 + 32, v14 + 1, a2)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v9) {
                v15 %= v9;
              }
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v12) {
              break;
            }
          }
          long long v14 = (float32x4_t *)v14->i64[0];
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  long long v14 = (float32x4_t *)operator new(0x30uLL);
  v14->i64[0] = 0;
  v14->i64[1] = v8;
  float32x4_t v16 = a3[1];
  v14[1] = *a3;
  v14[2] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  unint64_t v24 = *(float32x4_t ***)(*(void *)a1 + 8 * v12);
  if (v24)
  {
    v14->i64[0] = (uint64_t)*v24;
LABEL_38:
    *unint64_t v24 = v14;
    goto LABEL_39;
  }
  v14->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v23 + 8 * v12) = a1 + 16;
  if (v14->i64[0])
  {
    unint64_t v25 = *(void *)(v14->i64[0] + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    unint64_t v24 = (float32x4_t **)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v6;
  return v14;
}

void sub_20B081898(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0818AC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20B05F7E0(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(long long ***)(a2 + 16); i; uint64_t i = (long long **)*i)
    sub_20B081924(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_20B08190C(_Unwind_Exception *a1)
{
  sub_20B080CC8(v1);
  _Unwind_Resume(a1);
}

float32x4_t **sub_20B081924(uint64_t a1, long long **a2, uint64_t a3)
{
  unint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_20B0BF6E0(a1 + 24, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    unint64_t v13 = *(float32x4_t ****)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (float32x4_t **)*i)
      {
        unint64_t v15 = (unint64_t)i[1];
        if (v15 == v8)
        {
          if (sub_20B0BF7A0(a1 + 32, i + 2, (float32x4_t **)a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  sub_20B081BB0(a1, v8, a3, v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_20B05F7E0(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (float32x4_t **)v25[0];
  ++*v6;
  return i;
}

void sub_20B081B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_20B0803C4((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B081BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  unint64_t v8 = a4 + 1;
  unint64_t v9 = operator new(0x30uLL);
  *a4 = v9;
  *unint64_t v8 = v7;
  *((unsigned char *)a4 + 16) = 0;
  *unint64_t v9 = 0;
  v9[1] = a2;
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = 0;
  uint64_t result = sub_20B07F50C(v9 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
  *((_DWORD *)v9 + 10) = *(_DWORD *)(a3 + 24);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_20B081C40(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_20B0803C4(v2, v3);
  _Unwind_Resume(a1);
}

void *sub_20B081C5C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_20B07F294(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B081CBC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B081CD8(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_20B082048(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 73) < 0) {
    operator delete(*(void **)(v2 - 96));
  }

  _Unwind_Resume(a1);
}

void sub_20B08212C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0821B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B082244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B082318(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20B082424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B0824B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B082524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0825AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B082650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B082854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }

  _Unwind_Resume(a1);
}

void sub_20B082910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B082A14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B082B6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B082CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v17 - 41) < 0) {
    operator delete(*(void **)(v17 - 64));
  }

  _Unwind_Resume(a1);
}

void sub_20B082E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B082E4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_20B082E5C(uint64_t a1)
{
}

uint64_t sub_20B082E64(uint64_t a1, const char *a2)
{
  return objc_msgSend_addObject_(*(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2, (uint64_t)a2);
}

void sub_20B082EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B082F68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  uint64_t v5 = dword_267691144;
  if (dword_267691144 >= 1)
  {
    uint64_t v10 = 0;
    *(float *)&a5 = *(float *)&dword_267691148 * 0.5;
    float32x2_t v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0);
    float v12 = 1.0 / (float)dword_267691144;
    uint64_t v13 = 16 * dword_267691144;
    uint64_t v19 = 8 * dword_267691144;
    do
    {
      uint64_t v14 = 0;
      do
      {
        *(float *)&double v15 = (float)(int)v14 * v12;
        *((float *)&v15 + 1) = (float)(int)v10 * v12;
        double v20 = v15;
        float v16 = sub_20B174D64(a4, v15);
        if (v16 && (uint64_t v17 = (float32x2_t ***)v16, sub_20B174314(v16, *(float32x2_t *)&v20)))
        {
          long long v24 = 0uLL;
          uint64_t v25 = 0;
          sub_20B1744F8(v17, &v24, COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&v20, v11)));
          uint64_t v18 = v25;
          if (!v25)
          {
            sub_20B1744F8(v17, &v22, v20);
            uint64_t v18 = v23;
            uint64_t v25 = v23;
            long long v24 = v22;
          }
          float32x4_t v21 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v18 + 64), *(float *)&v24), *(float32x4_t *)(v18 + 80), *((float *)&v24 + 1)), *(float32x4_t *)(v18 + 96), *((float *)&v24 + 2));
          *(__n128 *)(a1 + 16 * v14) = sub_20B0C0304((__n128 *)v18);
          *(float32x4_t *)(a2 + 16 * v14) = v21;
          *(void *)(a3 + 8 * v14) = v18;
        }
        else
        {
          *(_OWORD *)(a1 + 16 * v14) = 0u;
        }
        ++v14;
      }
      while (v5 != v14);
      ++v10;
      a1 += v13;
      a2 += v13;
      a3 += v19;
    }
    while (v10 != v5);
  }
}

void sub_20B083108(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4 = a2 + 4 * a3;
  if (*(unsigned __int8 *)(v4 + 3) != 255)
  {
    char v7 = *(unsigned char *)(a1 + 2);
    *(_WORD *)uint64_t v4 = *(_WORD *)a1;
    *(unsigned char *)(v4 + 2) = v7;
    *(unsigned char *)(v4 + 3) = 0;
    unint64_t v8 = *(void *)(a4 + 16);
    unint64_t v9 = *(_DWORD **)(a4 + 8);
    if ((unint64_t)v9 >= v8)
    {
      float32x2_t v11 = *(_DWORD **)a4;
      uint64_t v12 = ((uint64_t)v9 - *(void *)a4) >> 2;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62) {
        sub_20B05D0BC();
      }
      uint64_t v14 = v8 - (void)v11;
      if (v14 >> 1 > v13) {
        unint64_t v13 = v14 >> 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        float v16 = (char *)sub_20B05D1AC(a4 + 16, v15);
        float32x2_t v11 = *(_DWORD **)a4;
        unint64_t v9 = *(_DWORD **)(a4 + 8);
      }
      else
      {
        float v16 = 0;
      }
      uint64_t v17 = &v16[4 * v12];
      uint64_t v18 = &v16[4 * v15];
      *(_DWORD *)uint64_t v17 = a3;
      uint64_t v10 = v17 + 4;
      while (v9 != v11)
      {
        int v19 = *--v9;
        *((_DWORD *)v17 - 1) = v19;
        v17 -= 4;
      }
      *(void *)a4 = v17;
      *(void *)(a4 + 8) = v10;
      *(void *)(a4 + 16) = v18;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      *unint64_t v9 = a3;
      uint64_t v10 = v9 + 1;
    }
    *(void *)(a4 + 8) = v10;
  }
}

void sub_20B083210(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v43 = a1;
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  sub_20B0845A8(a3, &v43, &v43);
  std::string __p = 0;
  long long v41 = 0;
  long long v42 = 0;
  uint64_t v5 = (char *)sub_20B0602EC((uint64_t)&v42, 1uLL);
  char v7 = &v5[8 * v6];
  *(void *)uint64_t v5 = v43;
  unint64_t v8 = v5 + 8;
  uint64_t v10 = (char *)__p;
  unint64_t v9 = v41;
  if (v41 != __p)
  {
    do
    {
      uint64_t v11 = *((void *)v9 - 1);
      v9 -= 8;
      *((void *)v5 - 1) = v11;
      v5 -= 8;
    }
    while (v9 != v10);
    unint64_t v9 = (char *)__p;
  }
  std::string __p = v5;
  long long v41 = v8;
  long long v42 = v7;
  if (v9) {
    operator delete(v9);
  }
  int v12 = 0;
  int v13 = 0;
  long long v41 = v8;
  do
  {
    int v34 = v13;
    unint64_t v33 = (unint64_t)(v41 - (unsigned char *)__p) >> 3;
    if (v12 < (int)v33)
    {
      uint64_t v14 = v12;
      uint64_t v35 = (int)((v41 - (unsigned char *)__p) >> 3);
      do
      {
        uint64_t v15 = 0;
        uint64_t v36 = v14;
        uint64_t v16 = *((void *)__p + v14);
        long long v17 = *(_OWORD *)(v16 + 80);
        v44[0] = *(_OWORD *)(v16 + 64);
        v44[1] = v17;
        v44[2] = *(_OWORD *)(v16 + 96);
        do
        {
          float32x4_t v39 = (float32x4_t)v44[v15];
          uint64_t v18 = sub_20B084800(a2, &v39);
          if (!v18) {
            sub_20B07FA4C("unordered_map::at: key not found");
          }
          int v19 = (__n128 **)v18[2].i64[0];
          double v20 = (__n128 **)v18[2].i64[1];
          while (v19 != v20)
          {
            long long v38 = 0;
            long long v38 = *v19;
            __n128 v37 = sub_20B0C0304(v38);
            int32x4_t v21 = (int32x4_t)vmulq_f32((float32x4_t)sub_20B0C0304((__n128 *)v16), (float32x4_t)v37);
            if (vaddq_f32(vaddq_f32((float32x4_t)v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x4_t)vdupq_laneq_s32(v21, 2)).f32[0] > 0.7)
            {
              sub_20B0845A8(a3, &v38, &v38);
              if (v22)
              {
                uint64_t v23 = v41;
                if (v41 >= v42)
                {
                  uint64_t v25 = (v41 - (unsigned char *)__p) >> 3;
                  if ((unint64_t)(v25 + 1) >> 61) {
                    sub_20B05D0BC();
                  }
                  unint64_t v26 = (v42 - (unsigned char *)__p) >> 2;
                  if (v26 <= v25 + 1) {
                    unint64_t v26 = v25 + 1;
                  }
                  if ((unint64_t)(v42 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v27 = v26;
                  }
                  if (v27) {
                    long long v28 = (char *)sub_20B0602EC((uint64_t)&v42, v27);
                  }
                  else {
                    long long v28 = 0;
                  }
                  uint64_t v29 = &v28[8 * v25];
                  *(void *)uint64_t v29 = v38;
                  long long v24 = v29 + 8;
                  uint64_t v31 = (char *)__p;
                  long long v30 = v41;
                  if (v41 != __p)
                  {
                    do
                    {
                      uint64_t v32 = *((void *)v30 - 1);
                      v30 -= 8;
                      *((void *)v29 - 1) = v32;
                      v29 -= 8;
                    }
                    while (v30 != v31);
                    long long v30 = (char *)__p;
                  }
                  std::string __p = v29;
                  long long v41 = v24;
                  long long v42 = &v28[8 * v27];
                  if (v30) {
                    operator delete(v30);
                  }
                }
                else
                {
                  *(void *)long long v41 = v38;
                  long long v24 = v23 + 8;
                }
                long long v41 = v24;
              }
            }
            ++v19;
          }
          ++v15;
        }
        while (v15 != 3);
        uint64_t v14 = v36 + 1;
      }
      while (v36 + 1 != v35);
    }
    int v13 = v34 + 1;
    int v12 = v33;
  }
  while (v34 != 3);
  if (__p)
  {
    long long v41 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B083500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  sub_20B05F1D0(v20);
  _Unwind_Resume(a1);
}

void sub_20B083540(void *a1, void *a2, float a3, uint64_t a4, uint64_t a5, float32x4_t ***a6)
{
  id v88 = a1;
  uint64_t v9 = dword_267691144;
  id v10 = objc_alloc(MEMORY[0x263EFF990]);
  uint64_t v11 = (v9 * v9);
  id v87 = (id)objc_msgSend_initWithLength_(v10, v12, (4 * v11));
  uint64_t v90 = v9;
  id v13 = v88;
  objc_msgSend_bytes(v13, v14, v15);
  id v16 = v87;
  objc_msgSend_mutableBytes(v16, v17, v18);
  int v19 = (float32x4_t *)malloc_type_malloc(16 * v11, 0x1000040451B5BE8uLL);
  long long v89 = (float32x4_t *)malloc_type_malloc(16 * v11, 0x1000040451B5BE8uLL);
  uint64_t v20 = malloc_type_malloc(8 * v11, 0x2004093837F09uLL);
  sub_20B082F68((uint64_t)v19, (uint64_t)v89, (uint64_t)v20, a2, v21);
  dispatch_group_create();
  dispatch_get_global_queue(0, 0);
  objc_claimAutoreleasedReturnValue();
  int v96 = 0;
  memset(v94, 0, sizeof(v94));
  int v95 = 1065353216;
  char v22 = *a6;
  if (*a6 != a6[1])
  {
    uint64_t v23 = a6[1];
    do
    {
      long long v24 = *v22;
      v93[0] = *v22 + 4;
      uint64_t v25 = sub_20B084BF0((uint64_t)v94, v93[0], (uint64_t)&unk_20B1E7420, v93);
      unint64_t v26 = (float32x4_t **)v25[2].i64[1];
      unint64_t v27 = v25[3].u64[0];
      if ((unint64_t)v26 >= v27)
      {
        uint64_t v29 = v25[2].i64[0];
        uint64_t v30 = ((uint64_t)v26 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_77;
        }
        uint64_t v31 = v27 - v29;
        uint64_t v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
          uint64_t v32 = v30 + 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33) {
          int v34 = (char *)sub_20B0602EC((uint64_t)&v25[3], v33);
        }
        else {
          int v34 = 0;
        }
        uint64_t v35 = (float32x4_t **)&v34[8 * v30];
        *uint64_t v35 = v24;
        long long v28 = v35 + 1;
        __n128 v37 = (char *)v25[2].i64[0];
        uint64_t v36 = (char *)v25[2].i64[1];
        if (v36 != v37)
        {
          do
          {
            long long v38 = (float32x4_t *)*((void *)v36 - 1);
            v36 -= 8;
            *--uint64_t v35 = v38;
          }
          while (v36 != v37);
          uint64_t v36 = (char *)v25[2].i64[0];
        }
        v25[2].i64[0] = (uint64_t)v35;
        v25[2].i64[1] = (uint64_t)v28;
        v25[3].i64[0] = (uint64_t)&v34[8 * v33];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *unint64_t v26 = v24;
        long long v28 = v26 + 1;
      }
      v25[2].i64[1] = (uint64_t)v28;
      v93[0] = v24 + 5;
      float32x4_t v39 = sub_20B084BF0((uint64_t)v94, v24 + 5, (uint64_t)&unk_20B1E7420, v93);
      uint64_t v40 = (float32x4_t **)v39[2].i64[1];
      unint64_t v41 = v39[3].u64[0];
      if ((unint64_t)v40 >= v41)
      {
        uint64_t v43 = v39[2].i64[0];
        uint64_t v44 = ((uint64_t)v40 - v43) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
          goto LABEL_77;
        }
        uint64_t v45 = v41 - v43;
        uint64_t v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
          uint64_t v46 = v44 + 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          uint64_t v48 = (char *)sub_20B0602EC((uint64_t)&v39[3], v47);
        }
        else {
          uint64_t v48 = 0;
        }
        __n128 v49 = (float32x4_t **)&v48[8 * v44];
        *__n128 v49 = v24;
        long long v42 = v49 + 1;
        uint64_t v51 = (char *)v39[2].i64[0];
        long long v50 = (char *)v39[2].i64[1];
        if (v50 != v51)
        {
          do
          {
            uint64_t v52 = (float32x4_t *)*((void *)v50 - 1);
            v50 -= 8;
            *--__n128 v49 = v52;
          }
          while (v50 != v51);
          long long v50 = (char *)v39[2].i64[0];
        }
        v39[2].i64[0] = (uint64_t)v49;
        v39[2].i64[1] = (uint64_t)v42;
        v39[3].i64[0] = (uint64_t)&v48[8 * v47];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *uint64_t v40 = v24;
        long long v42 = v40 + 1;
      }
      v39[2].i64[1] = (uint64_t)v42;
      v93[0] = v24 + 6;
      uint64_t v53 = sub_20B084BF0((uint64_t)v94, v24 + 6, (uint64_t)&unk_20B1E7420, v93);
      long long v54 = (float32x4_t **)v53[2].i64[1];
      unint64_t v55 = v53[3].u64[0];
      if ((unint64_t)v54 >= v55)
      {
        uint64_t v57 = v53[2].i64[0];
        uint64_t v58 = ((uint64_t)v54 - v57) >> 3;
        if ((unint64_t)(v58 + 1) >> 61) {
LABEL_77:
        }
          sub_20B05D0BC();
        uint64_t v59 = v55 - v57;
        uint64_t v60 = v59 >> 2;
        if (v59 >> 2 <= (unint64_t)(v58 + 1)) {
          uint64_t v60 = v58 + 1;
        }
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v60;
        }
        if (v61) {
          unint64_t v62 = (char *)sub_20B0602EC((uint64_t)&v53[3], v61);
        }
        else {
          unint64_t v62 = 0;
        }
        int v63 = (float32x4_t **)&v62[8 * v58];
        long long *v63 = v24;
        long long v56 = v63 + 1;
        uint64_t v65 = (char *)v53[2].i64[0];
        long long v64 = (char *)v53[2].i64[1];
        if (v64 != v65)
        {
          do
          {
            uint64_t v66 = (float32x4_t *)*((void *)v64 - 1);
            v64 -= 8;
            *--int v63 = v66;
          }
          while (v64 != v65);
          long long v64 = (char *)v53[2].i64[0];
        }
        v53[2].i64[0] = (uint64_t)v63;
        v53[2].i64[1] = (uint64_t)v56;
        v53[3].i64[0] = (uint64_t)&v62[8 * v61];
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *long long v54 = v24;
        long long v56 = v54 + 1;
      }
      v53[2].i64[1] = (uint64_t)v56;
      ++v22;
    }
    while (v22 != v23);
  }
  *(float *)&dword_267691154 = a3 * 8.0;
  v93[4] = (float32x4_t *)1065353216;
  memset(v93, 0, 32);
  uint64_t v67 = v90;
  if ((int)v90 >= 1)
  {
    for (uint64_t i = 0; i != v90; ++i)
    {
      uint64_t v69 = 0;
      uint64_t v70 = i * v67;
      do
      {
        uint64_t v71 = v69 + v70;
        int32x4_t v72 = (int32x4_t)vmulq_f32(v19[v69 + v70], v19[v69 + v70]);
        if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.i8, 1)), (float32x4_t)vdupq_laneq_s32(v72, 2)).f32[0]) > 0.000001)
        {
          *(uint64_t *)((char *)v92.i64 + 4) = 0;
          v92.i32[0] = 0;
          float32x4_t v92 = v89[v71];
          std::string __p = &v92;
          unint64_t v73 = sub_20B084ED8((uint64_t)v93, &v92, (uint64_t)&unk_20B1E7420, (_OWORD **)&__p);
          long long v74 = v73;
          unint64_t v75 = (char *)v73[5];
          uint64_t v76 = (uint64_t)&v73[6];
          unint64_t v77 = (unint64_t)v73[6];
          if ((unint64_t)v75 >= v77)
          {
            long long v79 = (char *)v73[4];
            uint64_t v80 = (v75 - v79) >> 2;
            if ((unint64_t)(v80 + 1) >> 62) {
              sub_20B05D0BC();
            }
            unint64_t v81 = v77 - (void)v79;
            unint64_t v82 = (uint64_t)(v77 - (void)v79) >> 1;
            if (v82 <= v80 + 1) {
              unint64_t v82 = v80 + 1;
            }
            if (v81 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v83 = v82;
            }
            if (v83)
            {
              uint64_t v84 = (char *)sub_20B05D1AC(v76, v83);
              long long v79 = (char *)v74[4];
              unint64_t v75 = (char *)v74[5];
            }
            else
            {
              uint64_t v84 = 0;
            }
            uint64_t v85 = &v84[4 * v80];
            *(_DWORD *)uint64_t v85 = v71;
            uint64_t v78 = v85 + 4;
            while (v75 != v79)
            {
              int v86 = *((_DWORD *)v75 - 1);
              v75 -= 4;
              *((_DWORD *)v85 - 1) = v86;
              v85 -= 4;
            }
            v74[4] = (float32x2_t)v85;
            v74[5] = (float32x2_t)v78;
            v74[6] = (float32x2_t)&v84[4 * v83];
            if (v79) {
              operator delete(v79);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v75 = v71;
            uint64_t v78 = v75 + 4;
          }
          v74[5] = (float32x2_t)v78;
        }
        ++v69;
      }
      while (v69 != v90);
      uint64_t v67 = v90;
    }
  }
  operator new();
}

void sub_20B083F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  _Block_object_dispose((const void *)(v36 - 240), 8);

  sub_20B084B68(v36 - 208);
  sub_20B084B68(v36 - 160);

  _Unwind_Resume(a1);
}

BOOL sub_20B08401C(void *a1, void *a2)
{
  float v3 = sub_20B0BFB74(a1);
  return v3 > sub_20B0BFB74(a2);
}

uint64_t sub_20B08405C(uint64_t a1, const char *a2, uint64_t a3)
{
  objc_msgSend_lock(*(void **)(a1 + 32), a2, a3);
  uint64_t v6 = *(void **)(a1 + 56);
  uint64_t v7 = v6[5];
  if (v7)
  {
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v74 = _Q0;
    do
    {
      id v13 = *(float32x2_t **)(*(void *)(v6[1] + ((v6[4] >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6[4] & 0x1FFLL));
      ++v6[4];
      v6[5] = v7 - 1;
      sub_20B0868DC((uint64_t)v6, 1);
      objc_msgSend_unlock(*(void **)(a1 + 32), v14, v15);
      uint64_t v18 = *(void *)(a1 + 64);
      uint64_t v20 = *(void **)v18;
      int v19 = *(void **)(v18 + 8);
      if (v20 != v19)
      {
        while (*v20 != *(void *)&v13[32])
        {
          if (++v20 == v19)
          {
            uint64_t v20 = v19;
            break;
          }
        }
      }
      if (v20 != v19)
      {
        uint64_t v89 = 0;
        memset(v88, 0, sizeof(v88));
        sub_20B083210((uint64_t)v13, *(void **)(a1 + 72), (uint64_t)v88);
        *(double *)&long long v23 = sub_20B0C02BC(v13);
        v24.i32[0] = dword_267691148;
        *(float32x2_t *)&long long v25 = vadd_f32((float32x2_t)vdup_lane_s32(v24, 0), *(float32x2_t *)&v26);
        *(int8x8_t *)&long long v26 = vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&v25, *(float32x2_t *)&v23));
        if (v26)
        {
          int v75 = 0;
        }
        else
        {
          int v75 = 0;
          float v27 = *((float *)&v23 + 1);
          float v28 = *((float *)&v25 + 1);
          long long v73 = v25;
          do
          {
            if (v27 <= v28)
            {
              *(float *)&long long v26 = v27;
              long long v76 = v23;
              do
              {
                long long v77 = v26;
                DWORD1(v23) = v26;
                float32x2_t v29 = sub_20B0BF590(*(float32x2_t *)&v23);
                signed int v30 = llroundf((float)dword_267691144 * v29.f32[0])
                    + *(_DWORD *)(a1 + 168) * llroundf(vmuls_lane_f32((float)dword_267691144, v29, 1));
                uint64_t v31 = *(void *)(a1 + 80);
                int32x4_t v32 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v31 + 16 * v30), *(float32x4_t *)(v31 + 16 * v30));
                if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1)), (float32x4_t)vdupq_laneq_s32(v32, 2)).f32[0]) > 0.000001)
                {
                  uint64_t v33 = 0;
                  uint64_t v34 = v30;
                  v87[0] = 0;
                  v87[1] = 0;
                  int v86 = (uint64_t *)v87;
                  float32x4_t v78 = *(float32x4_t *)(v31 + 16 * v30);
                  *((void *)&v35 + 1) = *(void *)(v31 + 16 * v30 + 8);
                  float32x4_t v79 = *(float32x4_t *)(*(void *)(a1 + 88) + 16 * v30);
                  ++v75;
                  *(void *)&long long v35 = 0;
                  long long v81 = v35;
                  float32x4_t v80 = 0u;
                  do
                  {
                    float32x4_t v85 = vmlaq_n_f32(v79, xmmword_20B1E73A0[v33], *(float *)(a1 + 172));
                    uint64_t v36 = sub_20B08693C((void *)(a1 + 96), &v85);
                    __n128 v37 = v36;
                    if (v36)
                    {
                      long long v38 = (int *)v36[4];
                      if (v38 != (int *)v36[5])
                      {
                        float32x4_t v39 = v87[0];
                        if (!v87[0]) {
                          goto LABEL_26;
                        }
                        int v40 = *v38;
                        unint64_t v41 = v87;
                        do
                        {
                          long long v42 = v39;
                          uint64_t v43 = v41;
                          int v44 = *((_DWORD *)v39 + 7);
                          uint64_t v45 = v39 + 1;
                          if (v44 >= v40)
                          {
                            uint64_t v45 = v42;
                            unint64_t v41 = (void **)v42;
                          }
                          float32x4_t v39 = (void *)*v45;
                        }
                        while (v39);
                        if (v41 == v87) {
                          goto LABEL_26;
                        }
                        if (v44 < v40) {
                          long long v42 = v43;
                        }
                        if (v40 < *((_DWORD *)v42 + 7))
                        {
LABEL_26:
                          sub_20B086A40(&v86, v38, *(_DWORD **)&v36[4]);
                          unint64_t v47 = (int *)v37[4];
                          uint64_t v46 = (int *)v37[5];
                          while (v47 != v46)
                          {
                            uint64_t v48 = *v47;
                            float32x4_t v49 = *(float32x4_t *)(*(void *)(a1 + 80) + 16 * v48);
                            int32x4_t v50 = (int32x4_t)vmulq_f32(v49, v49);
                            if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.i8, 1)), (float32x4_t)vdupq_laneq_s32(v50, 2)).f32[0]) >= 0.000001)
                            {
                              float32x4_t v82 = *(float32x4_t *)(*(void *)(a1 + 88) + 16 * v48);
                              float32x4_t v84 = *(float32x4_t *)(*(void *)(a1 + 80) + 16 * v48);
                              if (sub_20B086AFC(v88, (void *)(*(void *)(a1 + 136) + 8 * v48))
                                || *(void *)(*(void *)(*(void *)(a1 + 136) + 8 * v48) + 256) == *(void *)(*(void *)(*(void *)(a1 + 136) + 8 * v34) + 256))
                              {
                                v51.i32[0] = *(_DWORD *)(*(void *)(a1 + 144) + 4 * v48);
                                float32x4_t v52 = vsubq_f32(v79, v82);
                                int32x4_t v53 = (int32x4_t)vmulq_f32(v52, v52);
                                uint16x4_t v83 = (uint16x4_t)vmovl_u8(v51).u64[0];
                                float v54 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.i8, 1)), (float32x4_t)vdupq_laneq_s32(v53, 2)).f32[0]);
                                int32x4_t v55 = (int32x4_t)vmulq_f32(v84, v78);
                                float v56 = vaddq_f32(vaddq_f32((float32x4_t)v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1)), (float32x4_t)vdupq_laneq_s32(v55, 2)).f32[0];
                                if (v56 >= 0.0) {
                                  float v57 = v56;
                                }
                                else {
                                  float v57 = 0.0;
                                }
                                float v58 = v57 * 0.39894228 * expf((float)(v54 * -4.0) / *(float *)(a1 + 172));
                                long long v59 = v81;
                                *(float *)&long long v59 = *(float *)&v81 + v58;
                                long long v81 = v59;
                                float32x4_t v80 = vmlaq_n_f32(v80, vcvtq_f32_u32(vmovl_u16(v83)), v58);
                              }
                            }
                            ++v47;
                          }
                        }
                      }
                    }
                    ++v33;
                  }
                  while (v33 != 8);
                  float32x4_t v60 = vmulq_f32(v80, vdivq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v81, 0)));
                  if (v60.f32[3] < 5.0) {
                    char v61 = 0;
                  }
                  else {
                    char v61 = -1;
                  }
                  unint64_t v62 = (unsigned char *)(*(void *)(a1 + 152) + 4 * v34);
                  *unint64_t v62 = (int)v60.f32[0];
                  v62[1] = (int)v60.f32[1];
                  float32x4_t v62[2] = (int)v60.f32[2];
                  v62[3] = v61;
                  sub_20B05D2CC((uint64_t)&v86, v87[0]);
                }
                v24.i32[0] = dword_267691148;
                long long v23 = v76;
                long long v26 = v77;
                *(float *)&long long v26 = *(float *)&dword_267691148 + *(float *)&v77;
              }
              while ((float)(*(float *)&dword_267691148 + *(float *)&v77) <= v28);
            }
            *(float *)&long long v23 = *(float *)v24.i32 + *(float *)&v23;
          }
          while (*(float *)&v23 <= *(float *)&v73);
        }
        objc_msgSend_lock(*(void **)(a1 + 32), v21, v22, v73);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) += v75;
        int v63 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        int v64 = *(_DWORD *)(a1 + 176);
        uint64_t v67 = objc_msgSend_completedUnitCount(*(void **)(a1 + 40), v65, v66);
        int v70 = (int)(float)((float)((float)v63 * 5.0) / (float)v64);
        uint64_t v71 = *(void *)(a1 + 160);
        if (v67 - v71 < v70) {
          objc_msgSend_setCompletedUnitCount_(*(void **)(a1 + 40), v68, v71 + v70);
        }
        objc_msgSend_unlock(*(void **)(a1 + 32), v68, v69);
        sub_20B05F1D0((uint64_t)v88);
      }
      objc_msgSend_lock(*(void **)(a1 + 32), v16, v17);
      uint64_t v6 = *(void **)(a1 + 56);
      uint64_t v7 = v6[5];
    }
    while (v7);
  }
  return objc_msgSend_unlock(*(void **)(a1 + 32), v4, v5);
}

void sub_20B084564(_Unwind_Exception *a1)
{
  sub_20B05F1D0(v1 - 192);
  _Unwind_Resume(a1);
}

uint64_t sub_20B084594(uint64_t a1, uint64_t a2)
{
  return sub_20B086BE8(a1 + 96, a2 + 96);
}

uint64_t sub_20B0845A0(uint64_t a1)
{
  return sub_20B084B68(a1 + 96);
}

void *sub_20B0845A8(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8) {
        unint64_t v10 = v7 % v8;
      }
    }
    else
    {
      unint64_t v10 = v7 & (v8 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v7;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_20B05F7E0(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v10 = v7 % v8;
      }
      else {
        unint64_t v10 = v7;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  double v21 = *(void **)(*(void *)a1 + 8 * v10);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *double v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v10) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    double v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20B0847EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_20B084800(void *a1, float32x4_t *a2)
{
  unint64_t v4 = sub_20B0BF5EC((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(float32x4_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11->u64[1];
      if (v6 == v13)
      {
        if (sub_20B0BF5FC(v12, v11 + 1, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (float32x4_t *)v11->i64[0];
    }
    while (v11);
  }
  return v11;
}

float32x4_t *sub_20B084904(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF5EC(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    float v14 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (float32x4_t *)i->i64[0])
      {
        unint64_t v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_20B0BF5FC(a1 + 32, i + 1, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i64[0] = 0;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  int32x2_t v24 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
  if (v24)
  {
    i->i64[0] = (uint64_t)*v24;
LABEL_38:
    *int32x2_t v24 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v13) = a1 + 16;
  if (i->i64[0])
  {
    unint64_t v25 = *(void *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    int32x2_t v24 = (float32x4_t **)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20B084B54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B084B68(uint64_t a1)
{
  sub_20B084BA4(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_20B084BA4(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      float v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[4];
      if (v4)
      {
        _OWORD v2[5] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

float32x4_t *sub_20B084BF0(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF5EC(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    float v14 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (float32x4_t *)i->i64[0])
      {
        unint64_t v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_20B0BF5FC(a1 + 32, i + 1, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  float v17 = (float32x4_t **)(a1 + 16);
  uint64_t i = (float32x4_t *)operator new(0x40uLL);
  i->i64[0] = 0;
  i->i64[1] = v9;
  i[1] = **a4;
  i[2].i64[1] = 0;
  i[3].i64[0] = 0;
  i[2].i64[0] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_20B05F7E0(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
  if (v25)
  {
    i->i64[0] = (uint64_t)*v25;
LABEL_38:
    *unint64_t v25 = i;
    goto LABEL_39;
  }
  i->i64[0] = (uint64_t)*v17;
  *float v17 = i;
  *(void *)(v24 + 8 * v13) = v17;
  if (i->i64[0])
  {
    unint64_t v26 = *(void *)(i->i64[0] + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    unint64_t v25 = (float32x4_t **)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20B084E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_20B084E78(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20B084E78(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    float v3 = (void *)__p[4];
    if (v3)
    {
      __p[5] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

float32x2_t *sub_20B084ED8(uint64_t a1, float32x4_t *a2, uint64_t a3, _OWORD **a4)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF86C(a1 + 24, a2);
  unint64_t v11 = v8;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    int32x2_t v13 = (int32x2_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8((uint8x8_t)v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v15 = v8;
      if (v8 >= v12) {
        unint64_t v15 = v8 % v12;
      }
    }
    else
    {
      unint64_t v15 = (v12 - 1) & v8;
    }
    unint64_t v16 = *(float32x2_t ***)(*(void *)a1 + 8 * v15);
    if (v16)
    {
      for (uint64_t i = *v16; i; uint64_t i = (float32x2_t *)*i)
      {
        unint64_t v18 = (unint64_t)i[1];
        if (v18 == v11)
        {
          if (sub_20B0BF87C(v13, v9, v10, a1 + 32, i + 2, (float32x2_t *)a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
          }
          else
          {
            v18 &= v12 - 1;
          }
          if (v18 != v15) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  float v19 = (float32x2_t **)(a1 + 16);
  uint64_t i = (float32x2_t *)operator new(0x40uLL);
  *uint64_t i = 0;
  i[1] = (float32x2_t)v11;
  *(_OWORD *)i[2].f32 = **a4;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    BOOL v22 = 1;
    if (v12 >= 3) {
      BOOL v22 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v12);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_20B05F7E0(a1, v25);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v15 = v11 % v12;
      }
      else {
        unint64_t v15 = v11;
      }
    }
    else
    {
      unint64_t v15 = (v12 - 1) & v11;
    }
  }
  uint64_t v26 = *(void *)a1;
  float v27 = *(float32x2_t ***)(*(void *)a1 + 8 * v15);
  if (v27)
  {
    *uint64_t i = (float32x2_t)*v27;
LABEL_38:
    *float v27 = i;
    goto LABEL_39;
  }
  *uint64_t i = (float32x2_t)*v19;
  *float v19 = i;
  *(void *)(v26 + 8 * v15) = v19;
  if (*i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12) {
        v28 %= v12;
      }
    }
    else
    {
      v28 &= v12 - 1;
    }
    float v27 = (float32x2_t **)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
  return i;
}

void sub_20B085144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_20B084E78(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20B085160(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_20B0851E8(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_20B0851E8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    float32x4_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_20B0602EC(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      __n128 v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    float v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      float32x4_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_20B085500(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_20B085618((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    float32x4_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_20B0602EC((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      __n128 v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint8x8_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint8x8_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float v56 = a1 + 3;
  *(void *)&long long v54 = sub_20B0602EC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int32x4_t v53 = operator new(0x1000uLL);
  sub_20B085738(&v54, &v53);
  float v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20B085850((uint64_t)&v54, v27);
  }
  float32x2_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_20B0854B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B085500(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      float v19 = (char *)sub_20B0602EC(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      float v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_20B085618(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_20B0602EC(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_20B085738(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_20B0602EC(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_20B085850(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_20B0602EC(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_20B08596C(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t v10 = (char *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)unint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = sub_20B085E94(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          uint64_t result = sub_20B086378(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          uint64_t result = sub_20B08642C(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_20B086508(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_20B085E94(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      sub_20B085E94((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      sub_20B085E94((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      sub_20B085E94((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)unint64_t v11 = *(void *)v17;
      *(void *)uint64_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_20B085E94(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_20B085F84((uint64_t *)v11, (uint64_t *)a2, a3);
      unint64_t v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = sub_20B086094((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = sub_20B0861B0(v11, v19, (unsigned int (**)(void))a3);
    unint64_t v11 = (char *)(v19 + 1);
    uint64_t result = sub_20B0861B0(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = sub_20B08596C(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_20B085D30((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return sub_20B085DF8((uint64_t)v11, a2, a3);
  }
}

uint64_t sub_20B085D30(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (void *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        uint64_t v8 = v5;
        uint64_t result = (*a3)(v9, v10);
        if (result)
        {
          uint64_t v11 = *v8;
          uint64_t v12 = v7;
          while (1)
          {
            *(void *)((char *)v4 + v12 + 8) = *(void *)((char *)v4 + v12);
            if (!v12) {
              break;
            }
            uint64_t result = (*a3)(v11, *(void *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v13 = (void *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v13 = v4;
LABEL_10:
          *uint64_t v13 = v11;
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_20B085DF8(uint64_t result, void *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  if ((void *)result != a2)
  {
    uint64_t v4 = (void *)result;
    for (uint64_t i = (void *)(result + 8); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v8 = *v4;
      uint64_t v7 = v4[1];
      uint64_t v4 = i;
      uint64_t result = (*a3)(v7, v8);
      if (result)
      {
        uint64_t v9 = *v4;
        uint64_t v10 = v4;
        do
        {
          uint64_t v11 = v10;
          uint64_t v12 = *--v10;
          *uint64_t v11 = v12;
          uint64_t result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *uint64_t v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_20B085E94(void *a1, void *a2, void *a3, unsigned int (**a4)(void))
{
  char v8 = ((uint64_t (*)(void, void))*a4)(*a2, *a1);
  uint64_t result = ((uint64_t (*)(void, void))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(void, void))*a4)(*a2, *a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *sub_20B085F84(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v4 = a2;
  uint64_t v6 = *a1;
  if ((*a3)(*a1, *(a2 - 1)))
  {
    uint64_t v7 = a1;
    do
    {
      uint64_t v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    uint64_t v9 = a1 + 1;
    do
    {
      uint64_t v7 = v9;
      if (v9 >= v4) {
        break;
      }
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      uint64_t v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    uint64_t v11 = *v7;
    *uint64_t v7 = *v4;
    *uint64_t v4 = v11;
    do
    {
      uint64_t v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      uint64_t v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1) {
    *a1 = *(v7 - 1);
  }
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_20B086094(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  do
    char v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  uint64_t v9 = &a1[v6];
  uint64_t v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      uint64_t v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      uint64_t v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    uint64_t v13 = a2;
    uint64_t v14 = v9;
    do
    {
      uint64_t v15 = *v14;
      *uint64_t v14 = *v13;
      *uint64_t v13 = v15;
      do
      {
        uint64_t v16 = v14[1];
        ++v14;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        uint64_t v17 = *--v13;
      while (!(*a3)(v17, v7));
    }
    while (v14 < v13);
    uint64_t v10 = v14 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *uint64_t v10 = v7;
  return v10;
}

BOOL sub_20B0861B0(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20B085E94(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20B086378(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20B08642C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      sub_20B085E94(a1, a1 + 1, a1 + 2, a3);
      uint64_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        uint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          uint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

uint64_t sub_20B086378(void *a1, void *a2, void *a3, void *a4, unsigned int (**a5)(void))
{
  sub_20B085E94(a1, a2, a3, a5);
  uint64_t result = ((uint64_t (*)(void, void))*a5)(*a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = ((uint64_t (*)(void, void))*a5)(*a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = ((uint64_t (*)(void, void))*a5)(*a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20B08642C(void *a1, void *a2, void *a3, void *a4, void *a5, unsigned int (**a6)(void))
{
  sub_20B086378(a1, a2, a3, a4, a6);
  uint64_t result = ((uint64_t (*)(void, void))*a6)(*a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = ((uint64_t (*)(void, void))*a6)(*a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = ((uint64_t (*)(void, void))*a6)(*a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = ((uint64_t (*)(void, void))*a6)(*a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_20B086508(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[8 * v10];
      do
      {
        sub_20B086660((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(void *)a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          sub_20B086660((uint64_t)a1, (unsigned int (**)(void, void))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      uint64_t v17 = a2 - 8;
      do
      {
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = (char *)sub_20B086788(a1, (unsigned int (**)(void, void))a4, v16);
        if (v17 == v19)
        {
          *(void *)uint64_t v19 = v18;
        }
        else
        {
          *(void *)uint64_t v19 = *(void *)v17;
          *(void *)uint64_t v17 = v18;
          sub_20B086838((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t sub_20B086660(uint64_t result, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (void *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      uint64_t result = ((uint64_t (*)(void, void))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        uint64_t v14 = *v5;
        do
        {
          uint64_t v15 = v12;
          void *v5 = *v12;
          if (v7 < v11) {
            break;
          }
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v12 = (void *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              uint64_t v16 = 2 * v11 + 2;
            }
          }
          uint64_t result = ((uint64_t (*)(void, uint64_t))*a2)(*v12, v14);
          char v5 = v15;
          uint64_t v11 = v16;
        }
        while (!result);
        *uint64_t v15 = v14;
      }
    }
  }
  return result;
}

void *sub_20B086788(void *a1, unsigned int (**a2)(void, void), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = &a1[v6 + 1];
    uint64_t v10 = (2 * v6) | 1;
    uint64_t v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      uint64_t v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    uint64_t v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_20B086838(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    uint64_t result = (*a3)(*v8, *(void *)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t result = (*a3)(*v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      *uint64_t v11 = v10;
    }
  }
  return result;
}

uint64_t sub_20B0868DC(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x200) {
    a2 = 1;
  }
  if (v2 < 0x400) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

float32x2_t *sub_20B08693C(void *a1, float32x4_t *a2)
{
  unint64_t v4 = sub_20B0BF86C((uint64_t)(a1 + 3), a2);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v4;
  int32x2_t v9 = (int32x2_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8((uint8x8_t)v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v4;
    if (v4 >= *(void *)&v7) {
      unint64_t v11 = v4 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v4;
  }
  uint64_t v12 = *(float32x2_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = (uint64_t)(a1 + 4);
    do
    {
      float32x2_t v15 = v13[1];
      if (v8 == *(void *)&v15)
      {
        if (sub_20B0BF87C(v9, v5, v6, v14, v13 + 2, (float32x2_t *)a2)) {
          return v13;
        }
      }
      else
      {
        if (v10 > 1)
        {
          if (*(void *)&v15 >= *(void *)&v7) {
            *(void *)&v15 %= *(void *)&v7;
          }
        }
        else
        {
          *(void *)&v15 &= *(void *)&v7 - 1;
        }
        if (*(void *)&v15 != v11) {
          return 0;
        }
      }
      uint64_t v13 = (float32x2_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t **sub_20B086A40(uint64_t **a1, int *a2, _DWORD *a3)
{
  float32x4_t v6 = a1 + 1;
  float32x4_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        float32x4_t v5 = *v8;
        float32x4_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      float32x4_t v5 = v8[1];
      if (!v5)
      {
        float32x4_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_20B05FAEC(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *sub_20B086AFC(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20B086BE8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20B05F7E0(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(float32x4_t **)(a2 + 16); i; uint64_t i = (float32x4_t *)i->i64[0])
    sub_20B086C60(a1, i + 1, (uint64_t)&i[1]);
  return a1;
}

void sub_20B086C48(_Unwind_Exception *a1)
{
  sub_20B084B68(v1);
  _Unwind_Resume(a1);
}

float32x2_t *sub_20B086C60(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint8x8_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_20B0BF86C(a1 + 24, a2);
  unint64_t v10 = v7;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    int32x2_t v12 = (int32x2_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8((uint8x8_t)v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v14 = v7;
      if (v7 >= v11) {
        unint64_t v14 = v7 % v11;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v7;
    }
    float32x2_t v15 = *(float32x2_t ***)(*(void *)a1 + 8 * v14);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (float32x2_t *)*i)
      {
        unint64_t v17 = (unint64_t)i[1];
        if (v17 == v10)
        {
          if (sub_20B0BF87C(v12, v8, v9, a1 + 32, i + 2, (float32x2_t *)a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  memset(v27, 0, sizeof(v27));
  sub_20B086EEC(a1, v10, a3, v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    BOOL v20 = 1;
    if (v11 >= 3) {
      BOOL v20 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v11);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_20B05F7E0(a1, v23);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v14 = v10 % v11;
      }
      else {
        unint64_t v14 = v10;
      }
    }
    else
    {
      unint64_t v14 = (v11 - 1) & v10;
    }
  }
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v14);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *uint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v25 >= v11) {
          v25 %= v11;
        }
      }
      else
      {
        v25 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (float32x2_t *)v27[0];
  ++*v6;
  return i;
}

void sub_20B086EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_20B084E78((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B086EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  float32x4_t v8 = a4 + 1;
  float32x4_t v9 = operator new(0x40uLL);
  *a4 = v9;
  *float32x4_t v8 = v7;
  *((unsigned char *)a4 + 16) = 0;
  *float32x4_t v9 = 0;
  v9[1] = a2;
  *((_OWORD *)v9 + 1) = *(_OWORD *)a3;
  v9[5] = 0;
  v9[6] = 0;
  v9[4] = 0;
  uint64_t result = sub_20B081244(v9 + 4, *(const void **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 2);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_20B086F7C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_20B084E78(v2, v3);
  _Unwind_Resume(a1);
}

void sub_20B0889B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v39 = *(void **)(v37 - 200);
  if (v39)
  {
    *(void *)(v37 - 192) = v39;
    operator delete(v39);
  }
  uint64_t v40 = *(void **)(v37 - 176);
  if (v40)
  {
    *(void *)(v37 - 168) = v40;
    operator delete(v40);
  }

  _Unwind_Resume(a1);
}

void sub_20B088B78(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_20B05D0BC();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint8x8_t v6 = (char *)sub_20B05D1AC(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    float32x4_t v9 = &v6[4 * v8];
    unint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    int32x2_t v12 = v7;
    if (v11 != *a1)
    {
      int32x2_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

id sub_20B088C20(void *a1, void *a2, unint64_t a3, unint64_t a4, __int16 a5, uint64_t a6)
{
  id v215 = a1;
  id v214 = a2;
  unint64_t v217 = a4;
  uint64_t v11 = (8 * a4) | 6;
  if (a6 == 2) {
    uint64_t v11 = 6 * a4 + 3;
  }
  unint64_t v220 = a3;
  std::string __p = 0;
  BOOL v222 = 0;
  id v223 = 0;
  sub_20B08AA20(&__p, v11 * a3);
  if (a6 == 1)
  {
    if (a3)
    {
      int v43 = 0;
      int v44 = v222;
      do
      {
        uint64_t v45 = v223;
        if (v44 >= v223)
        {
          uint64_t v47 = (char *)__p;
          uint64_t v48 = v44 - (unsigned char *)__p;
          if (v44 - (unsigned char *)__p <= -3) {
            sub_20B05D0BC();
          }
          uint64_t v49 = v48 >> 1;
          if (v223 - (unsigned char *)__p <= (unint64_t)((v48 >> 1) + 1)) {
            uint64_t v50 = v49 + 1;
          }
          else {
            uint64_t v50 = v223 - (unsigned char *)__p;
          }
          if ((unint64_t)(v223 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v51 = v50;
          }
          if (v51)
          {
            uint64_t v52 = (char *)sub_20B08AAC4((uint64_t)&v223, v51);
            uint64_t v47 = (char *)__p;
            int v44 = v222;
          }
          else
          {
            uint64_t v52 = 0;
          }
          int32x4_t v53 = &v52[2 * v49];
          *(_WORD *)int32x4_t v53 = v43;
          unint64_t v46 = v53 + 2;
          while (v44 != v47)
          {
            __int16 v54 = *((_WORD *)v44 - 1);
            v44 -= 2;
            *((_WORD *)v53 - 1) = v54;
            v53 -= 2;
          }
          uint64_t v45 = &v52[2 * v51];
          std::string __p = v53;
          BOOL v222 = v46;
          id v223 = v45;
          if (v47)
          {
            operator delete(v47);
            uint64_t v45 = v223;
          }
        }
        else
        {
          *(_WORD *)int v44 = v43;
          unint64_t v46 = v44 + 2;
        }
        unint64_t v55 = (v43 + 1);
        BOOL v222 = v46;
        __int16 v56 = v55 % v220;
        if (v46 >= v45)
        {
          float v58 = (char *)__p;
          uint64_t v59 = v46 - (unsigned char *)__p;
          if (v46 - (unsigned char *)__p <= -3) {
            sub_20B05D0BC();
          }
          uint64_t v60 = v59 >> 1;
          unint64_t v61 = v45 - (unsigned char *)__p;
          if (v61 <= (v59 >> 1) + 1) {
            unint64_t v62 = v60 + 1;
          }
          else {
            unint64_t v62 = v61;
          }
          if (v61 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v63 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v63 = v62;
          }
          if (v63)
          {
            int v64 = (char *)sub_20B08AAC4((uint64_t)&v223, v63);
            float v58 = (char *)__p;
            unint64_t v46 = v222;
          }
          else
          {
            int v64 = 0;
          }
          uint64_t v65 = &v64[2 * v60];
          *(_WORD *)uint64_t v65 = v56;
          float v57 = v65 + 2;
          while (v46 != v58)
          {
            __int16 v66 = *((_WORD *)v46 - 1);
            v46 -= 2;
            *((_WORD *)v65 - 1) = v66;
            v65 -= 2;
          }
          uint64_t v45 = &v64[2 * v63];
          std::string __p = v65;
          BOOL v222 = v57;
          id v223 = v45;
          if (v58)
          {
            operator delete(v58);
            uint64_t v45 = v223;
          }
        }
        else
        {
          *(_WORD *)unint64_t v46 = v56;
          float v57 = v46 + 2;
        }
        BOOL v222 = v57;
        if (v57 >= v45)
        {
          long long v68 = (char *)__p;
          uint64_t v69 = v57 - (unsigned char *)__p;
          if (v57 - (unsigned char *)__p <= -3) {
            sub_20B05D0BC();
          }
          uint64_t v70 = v69 >> 1;
          unint64_t v71 = v45 - (unsigned char *)__p;
          if (v71 <= (v69 >> 1) + 1) {
            unint64_t v72 = v70 + 1;
          }
          else {
            unint64_t v72 = v71;
          }
          if (v71 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v73 = v72;
          }
          if (v73)
          {
            float32x4_t v74 = (char *)sub_20B08AAC4((uint64_t)&v223, v73);
            long long v68 = (char *)__p;
            float v57 = v222;
          }
          else
          {
            float32x4_t v74 = 0;
          }
          int v75 = &v74[2 * v70];
          *(_WORD *)int v75 = v43;
          uint64_t v67 = v75 + 2;
          while (v57 != v68)
          {
            __int16 v76 = *((_WORD *)v57 - 1);
            v57 -= 2;
            *((_WORD *)v75 - 1) = v76;
            v75 -= 2;
          }
          uint64_t v45 = &v74[2 * v73];
          std::string __p = v75;
          BOOL v222 = v67;
          id v223 = v45;
          if (v68)
          {
            operator delete(v68);
            uint64_t v45 = v223;
          }
        }
        else
        {
          *(_WORD *)float v57 = v43;
          uint64_t v67 = v57 + 2;
        }
        BOOL v222 = v67;
        if (v67 >= v45)
        {
          long long v77 = (char *)__p;
          uint64_t v78 = v67 - (unsigned char *)__p;
          if (v67 - (unsigned char *)__p <= -3) {
            sub_20B05D0BC();
          }
          uint64_t v79 = v78 >> 1;
          unint64_t v80 = v45 - (unsigned char *)__p;
          if (v80 <= (v78 >> 1) + 1) {
            unint64_t v81 = v79 + 1;
          }
          else {
            unint64_t v81 = v80;
          }
          if (v80 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v82 = v81;
          }
          if (v82)
          {
            uint16x4_t v83 = (char *)sub_20B08AAC4((uint64_t)&v223, v82);
            long long v77 = (char *)__p;
            uint64_t v67 = v222;
          }
          else
          {
            uint16x4_t v83 = 0;
          }
          float32x4_t v84 = &v83[2 * v79];
          *(_WORD *)float32x4_t v84 = a5;
          int v44 = v84 + 2;
          while (v67 != v77)
          {
            __int16 v85 = *((_WORD *)v67 - 1);
            v67 -= 2;
            *((_WORD *)v84 - 1) = v85;
            v84 -= 2;
          }
          std::string __p = v84;
          BOOL v222 = v44;
          id v223 = &v83[2 * v82];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          *(_WORD *)uint64_t v67 = a5;
          int v44 = v67 + 2;
        }
        BOOL v222 = v44;
        int v43 = v55;
      }
      while (v55 < v220);
    }
  }
  else if (a6 == 2 && a3)
  {
    LODWORD(v12) = 0;
    int v13 = v222;
    do
    {
      unint64_t v14 = v223;
      if (v13 >= v223)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = v13 - (unsigned char *)__p;
        if (v13 - (unsigned char *)__p <= -3) {
          sub_20B05D0BC();
        }
        uint64_t v18 = v17 >> 1;
        if (v223 - (unsigned char *)__p <= (unint64_t)((v17 >> 1) + 1)) {
          uint64_t v19 = v18 + 1;
        }
        else {
          uint64_t v19 = v223 - (unsigned char *)__p;
        }
        if ((unint64_t)(v223 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v20 = v19;
        }
        if (v20)
        {
          unint64_t v21 = (char *)sub_20B08AAC4((uint64_t)&v223, v20);
          uint64_t v16 = (char *)__p;
          int v13 = v222;
        }
        else
        {
          unint64_t v21 = 0;
        }
        unint64_t v22 = &v21[2 * v18];
        *(_WORD *)unint64_t v22 = a5;
        float32x2_t v15 = v22 + 2;
        while (v13 != v16)
        {
          __int16 v23 = *((_WORD *)v13 - 1);
          v13 -= 2;
          *((_WORD *)v22 - 1) = v23;
          v22 -= 2;
        }
        unint64_t v14 = &v21[2 * v20];
        std::string __p = v22;
        BOOL v222 = v15;
        id v223 = v14;
        if (v16)
        {
          operator delete(v16);
          unint64_t v14 = v223;
        }
      }
      else
      {
        *(_WORD *)int v13 = a5;
        float32x2_t v15 = v13 + 2;
      }
      BOOL v222 = v15;
      if (v15 >= v14)
      {
        unint64_t v25 = (char *)__p;
        uint64_t v26 = v15 - (unsigned char *)__p;
        if (v15 - (unsigned char *)__p <= -3) {
          sub_20B05D0BC();
        }
        uint64_t v27 = v26 >> 1;
        unint64_t v28 = v14 - (unsigned char *)__p;
        if (v28 <= (v26 >> 1) + 1) {
          unint64_t v29 = v27 + 1;
        }
        else {
          unint64_t v29 = v28;
        }
        if (v28 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v30 = v29;
        }
        if (v30)
        {
          long long v31 = (char *)sub_20B08AAC4((uint64_t)&v223, v30);
          unint64_t v25 = (char *)__p;
          float32x2_t v15 = v222;
        }
        else
        {
          long long v31 = 0;
        }
        long long v32 = &v31[2 * v27];
        *(_WORD *)long long v32 = v12;
        uint64_t v24 = v32 + 2;
        while (v15 != v25)
        {
          __int16 v33 = *((_WORD *)v15 - 1);
          v15 -= 2;
          *((_WORD *)v32 - 1) = v33;
          v32 -= 2;
        }
        unint64_t v14 = &v31[2 * v30];
        std::string __p = v32;
        BOOL v222 = v24;
        id v223 = v14;
        if (v25)
        {
          operator delete(v25);
          unint64_t v14 = v223;
        }
      }
      else
      {
        *(_WORD *)float32x2_t v15 = v12;
        uint64_t v24 = v15 + 2;
      }
      BOOL v222 = v24;
      unint64_t v12 = (v12 + 1);
      if (v24 >= v14)
      {
        uint64_t v34 = (char *)__p;
        uint64_t v35 = v24 - (unsigned char *)__p;
        if (v24 - (unsigned char *)__p <= -3) {
          sub_20B05D0BC();
        }
        uint64_t v36 = v35 >> 1;
        unint64_t v37 = v14 - (unsigned char *)__p;
        if (v37 <= (v35 >> 1) + 1) {
          unint64_t v38 = v36 + 1;
        }
        else {
          unint64_t v38 = v37;
        }
        if (v37 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v39 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v39 = v38;
        }
        if (v39)
        {
          uint64_t v40 = (char *)sub_20B08AAC4((uint64_t)&v223, v39);
          uint64_t v34 = (char *)__p;
          uint64_t v24 = v222;
        }
        else
        {
          uint64_t v40 = 0;
        }
        unint64_t v41 = &v40[2 * v36];
        *(_WORD *)unint64_t v41 = v12;
        int v13 = v41 + 2;
        while (v24 != v34)
        {
          __int16 v42 = *((_WORD *)v24 - 1);
          v24 -= 2;
          *((_WORD *)v41 - 1) = v42;
          v41 -= 2;
        }
        std::string __p = v41;
        BOOL v222 = v13;
        id v223 = &v40[2 * v39];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(_WORD *)uint64_t v24 = v12;
        int v13 = v24 + 2;
      }
      BOOL v222 = v13;
    }
    while (v12 < a3);
  }
  uint64_t v219 = a6;
  if (v217)
  {
    int v86 = 0;
    __int16 v216 = v220 + 1;
    while (1)
    {
      unint64_t v218 = (v86 + 1);
      if (v220) {
        break;
      }
LABEL_305:
      int v86 = v218;
      if (v218 >= v217) {
        goto LABEL_306;
      }
    }
    LOWORD(v87) = 0;
    int v88 = 0;
    __int16 v89 = v216 * (v86 + 1);
    __int16 v90 = v216 * (v86 + 2);
    while (1)
    {
      __int16 v91 = v87;
      __int16 v92 = v87 + v89;
      unint64_t v87 = (v88 + 1);
      __int16 v93 = v89 + v88 + 1;
      __int16 v94 = v90 + v88 + 1;
      int v96 = v222;
      int v95 = v223;
      if (v219 == 2)
      {
        if (v222 >= v223)
        {
          long long v99 = (char *)__p;
          uint64_t v100 = v222 - (unsigned char *)__p;
          if (v222 - (unsigned char *)__p <= -3) {
            goto LABEL_313;
          }
          uint64_t v101 = v100 >> 1;
          if (v223 - (unsigned char *)__p <= (unint64_t)((v100 >> 1) + 1)) {
            uint64_t v102 = v101 + 1;
          }
          else {
            uint64_t v102 = v223 - (unsigned char *)__p;
          }
          if ((unint64_t)(v223 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v103 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v103 = v102;
          }
          if (v103)
          {
            unint64_t v104 = (char *)sub_20B08AAC4((uint64_t)&v223, v103);
            long long v99 = (char *)__p;
            int v96 = v222;
          }
          else
          {
            unint64_t v104 = 0;
          }
          int64_t v111 = &v104[2 * v101];
          *(_WORD *)int64_t v111 = v92;
          long long v97 = v111 + 2;
          while (v96 != v99)
          {
            __int16 v112 = *((_WORD *)v96 - 1);
            v96 -= 2;
            *((_WORD *)v111 - 1) = v112;
            v111 -= 2;
          }
          int v95 = &v104[2 * v103];
          std::string __p = v111;
          BOOL v222 = v97;
          id v223 = v95;
          if (v99)
          {
            operator delete(v99);
            int v95 = v223;
          }
        }
        else
        {
          *(_WORD *)BOOL v222 = v92;
          long long v97 = v96 + 2;
        }
        __int16 v113 = v91 + v90;
        BOOL v222 = v97;
        if (v97 >= v95)
        {
          uint64_t v115 = (char *)__p;
          uint64_t v116 = v97 - (unsigned char *)__p;
          if (v97 - (unsigned char *)__p < -2) {
            goto LABEL_313;
          }
          uint64_t v117 = v116 >> 1;
          unint64_t v118 = v95 - (unsigned char *)__p;
          if (v118 <= (v116 >> 1) + 1) {
            unint64_t v119 = v117 + 1;
          }
          else {
            unint64_t v119 = v118;
          }
          if (v118 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v120 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v120 = v119;
          }
          if (v120)
          {
            uint64_t v121 = (char *)sub_20B08AAC4((uint64_t)&v223, v120);
            uint64_t v115 = (char *)__p;
            long long v97 = v222;
          }
          else
          {
            uint64_t v121 = 0;
          }
          uint64_t v132 = &v121[2 * v117];
          *(_WORD *)uint64_t v132 = v113;
          long long v114 = v132 + 2;
          while (v97 != v115)
          {
            __int16 v133 = *((_WORD *)v97 - 1);
            v97 -= 2;
            *((_WORD *)v132 - 1) = v133;
            v132 -= 2;
          }
          int v95 = &v121[2 * v120];
          std::string __p = v132;
          BOOL v222 = v114;
          id v223 = v95;
          if (v115)
          {
            operator delete(v115);
            int v95 = v223;
          }
        }
        else
        {
          *(_WORD *)long long v97 = v113;
          long long v114 = v97 + 2;
        }
        BOOL v222 = v114;
        if (v114 >= v95)
        {
          uint64_t v135 = (char *)__p;
          uint64_t v136 = v114 - (unsigned char *)__p;
          if (v114 - (unsigned char *)__p < -2) {
            goto LABEL_313;
          }
          uint64_t v137 = v136 >> 1;
          unint64_t v138 = v95 - (unsigned char *)__p;
          if (v138 <= (v136 >> 1) + 1) {
            unint64_t v139 = v137 + 1;
          }
          else {
            unint64_t v139 = v138;
          }
          if (v138 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v140 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v140 = v139;
          }
          if (v140)
          {
            uint64_t v141 = (char *)sub_20B08AAC4((uint64_t)&v223, v140);
            uint64_t v135 = (char *)__p;
            long long v114 = v222;
          }
          else
          {
            uint64_t v141 = 0;
          }
          float32x4_t v152 = &v141[2 * v137];
          *(_WORD *)float32x4_t v152 = v94;
          uint64_t v134 = v152 + 2;
          while (v114 != v135)
          {
            __int16 v153 = *((_WORD *)v114 - 1);
            v114 -= 2;
            *((_WORD *)v152 - 1) = v153;
            v152 -= 2;
          }
          int v95 = &v141[2 * v140];
          std::string __p = v152;
          BOOL v222 = v134;
          id v223 = v95;
          if (v135)
          {
            operator delete(v135);
            int v95 = v223;
          }
        }
        else
        {
          *(_WORD *)long long v114 = v94;
          uint64_t v134 = v114 + 2;
        }
        BOOL v222 = v134;
        if (v134 >= v95)
        {
          uint64_t v155 = (char *)__p;
          uint64_t v156 = v134 - (unsigned char *)__p;
          if (v134 - (unsigned char *)__p < -2) {
            goto LABEL_313;
          }
          uint64_t v157 = v156 >> 1;
          unint64_t v158 = v95 - (unsigned char *)__p;
          if (v158 <= (v156 >> 1) + 1) {
            unint64_t v159 = v157 + 1;
          }
          else {
            unint64_t v159 = v158;
          }
          if (v158 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v160 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v160 = v159;
          }
          if (v160)
          {
            uint64_t v161 = (char *)sub_20B08AAC4((uint64_t)&v223, v160);
            uint64_t v155 = (char *)__p;
            uint64_t v134 = v222;
          }
          else
          {
            uint64_t v161 = 0;
          }
          uint64_t v172 = &v161[2 * v157];
          *(_WORD *)uint64_t v172 = v92;
          uint64_t v154 = v172 + 2;
          while (v134 != v155)
          {
            __int16 v173 = *((_WORD *)v134 - 1);
            v134 -= 2;
            *((_WORD *)v172 - 1) = v173;
            v172 -= 2;
          }
          int v95 = &v161[2 * v160];
          std::string __p = v172;
          BOOL v222 = v154;
          id v223 = v95;
          if (v155)
          {
            operator delete(v155);
            int v95 = v223;
          }
        }
        else
        {
          *(_WORD *)uint64_t v134 = v92;
          uint64_t v154 = v134 + 2;
        }
        BOOL v222 = v154;
        if (v154 >= v95)
        {
          uint64_t v175 = (char *)__p;
          uint64_t v176 = v154 - (unsigned char *)__p;
          if (v154 - (unsigned char *)__p < -2) {
            goto LABEL_313;
          }
          uint64_t v177 = v176 >> 1;
          unint64_t v178 = v95 - (unsigned char *)__p;
          if (v178 <= (v176 >> 1) + 1) {
            unint64_t v179 = v177 + 1;
          }
          else {
            unint64_t v179 = v178;
          }
          if (v178 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v180 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v180 = v179;
          }
          if (v180)
          {
            uint64_t v181 = (char *)sub_20B08AAC4((uint64_t)&v223, v180);
            uint64_t v175 = (char *)__p;
            uint64_t v154 = v222;
          }
          else
          {
            uint64_t v181 = 0;
          }
          int v184 = &v181[2 * v177];
          *(_WORD *)int v184 = v94;
          id v174 = v184 + 2;
          while (v154 != v175)
          {
            __int16 v185 = *((_WORD *)v154 - 1);
            v154 -= 2;
            *((_WORD *)v184 - 1) = v185;
            v184 -= 2;
          }
          int v95 = &v181[2 * v180];
          std::string __p = v184;
          BOOL v222 = v174;
          id v223 = v95;
          if (v175)
          {
            operator delete(v175);
            int v95 = v223;
          }
        }
        else
        {
          *(_WORD *)uint64_t v154 = v94;
          id v174 = v154 + 2;
        }
        BOOL v222 = v174;
        if (v174 >= v95)
        {
          uint64_t v165 = (char *)__p;
          uint64_t v186 = v174 - (unsigned char *)__p;
          if (v174 - (unsigned char *)__p < -2) {
LABEL_313:
          }
            sub_20B05D0BC();
          uint64_t v187 = v186 >> 1;
          unint64_t v188 = v95 - (unsigned char *)__p;
          if (v188 <= (v186 >> 1) + 1) {
            unint64_t v189 = v187 + 1;
          }
          else {
            unint64_t v189 = v188;
          }
          if (v188 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v170 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v170 = v189;
          }
          if (v170)
          {
            uint64_t v171 = (char *)sub_20B08AAC4((uint64_t)&v223, v170);
            uint64_t v165 = (char *)__p;
            id v174 = v222;
          }
          else
          {
            uint64_t v171 = 0;
          }
          id v182 = &v171[2 * v187];
          *(_WORD *)id v182 = v93;
          uint64_t v164 = v182 + 2;
          while (v174 != v165)
          {
            __int16 v190 = *((_WORD *)v174 - 1);
            v174 -= 2;
            *((_WORD *)v182 - 1) = v190;
            v182 -= 2;
          }
          goto LABEL_302;
        }
        *(_WORD *)id v174 = v93;
        uint64_t v164 = v174 + 2;
      }
      else
      {
        if (v222 >= v223)
        {
          char v105 = (char *)__p;
          uint64_t v106 = v222 - (unsigned char *)__p;
          if (v222 - (unsigned char *)__p < -2) {
            goto LABEL_313;
          }
          uint64_t v107 = v106 >> 1;
          if (v223 - (unsigned char *)__p <= (unint64_t)((v106 >> 1) + 1)) {
            uint64_t v108 = v107 + 1;
          }
          else {
            uint64_t v108 = v223 - (unsigned char *)__p;
          }
          if ((unint64_t)(v223 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v109 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v109 = v108;
          }
          if (v109)
          {
            uint64_t v110 = (char *)sub_20B08AAC4((uint64_t)&v223, v109);
            char v105 = (char *)__p;
            int v96 = v222;
          }
          else
          {
            uint64_t v110 = 0;
          }
          long long v122 = &v110[2 * v107];
          *(_WORD *)long long v122 = v92;
          long long v98 = v122 + 2;
          while (v96 != v105)
          {
            __int16 v123 = *((_WORD *)v96 - 1);
            v96 -= 2;
            *((_WORD *)v122 - 1) = v123;
            v122 -= 2;
          }
          int v95 = &v110[2 * v109];
          std::string __p = v122;
          BOOL v222 = v98;
          id v223 = v95;
          if (v105)
          {
            operator delete(v105);
            int v95 = v223;
          }
        }
        else
        {
          *(_WORD *)BOOL v222 = v92;
          long long v98 = v96 + 2;
        }
        BOOL v222 = v98;
        if (v98 >= v95)
        {
          uint64_t v125 = (char *)__p;
          uint64_t v126 = v98 - (unsigned char *)__p;
          if (v98 - (unsigned char *)__p < -2) {
            goto LABEL_313;
          }
          uint64_t v127 = v126 >> 1;
          unint64_t v128 = v95 - (unsigned char *)__p;
          if (v128 <= (v126 >> 1) + 1) {
            unint64_t v129 = v127 + 1;
          }
          else {
            unint64_t v129 = v128;
          }
          if (v128 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v130 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v130 = v129;
          }
          if (v130)
          {
            uint64_t v131 = (char *)sub_20B08AAC4((uint64_t)&v223, v130);
            uint64_t v125 = (char *)__p;
            long long v98 = v222;
          }
          else
          {
            uint64_t v131 = 0;
          }
          uint64_t v142 = &v131[2 * v127];
          *(_WORD *)uint64_t v142 = v93;
          uint64_t v124 = v142 + 2;
          while (v98 != v125)
          {
            __int16 v143 = *((_WORD *)v98 - 1);
            v98 -= 2;
            *((_WORD *)v142 - 1) = v143;
            v142 -= 2;
          }
          int v95 = &v131[2 * v130];
          std::string __p = v142;
          BOOL v222 = v124;
          id v223 = v95;
          if (v125)
          {
            operator delete(v125);
            int v95 = v223;
          }
        }
        else
        {
          *(_WORD *)long long v98 = v93;
          uint64_t v124 = v98 + 2;
        }
        BOOL v222 = v124;
        if (v124 >= v95)
        {
          uint64_t v145 = (char *)__p;
          uint64_t v146 = v124 - (unsigned char *)__p;
          if (v124 - (unsigned char *)__p < -2) {
            goto LABEL_313;
          }
          uint64_t v147 = v146 >> 1;
          unint64_t v148 = v95 - (unsigned char *)__p;
          if (v148 <= (v146 >> 1) + 1) {
            unint64_t v149 = v147 + 1;
          }
          else {
            unint64_t v149 = v148;
          }
          if (v148 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v150 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v150 = v149;
          }
          if (v150)
          {
            float32x4_t v151 = (char *)sub_20B08AAC4((uint64_t)&v223, v150);
            uint64_t v145 = (char *)__p;
            uint64_t v124 = v222;
          }
          else
          {
            float32x4_t v151 = 0;
          }
          unint64_t v162 = &v151[2 * v147];
          *(_WORD *)unint64_t v162 = v93;
          uint64_t v144 = v162 + 2;
          while (v124 != v145)
          {
            __int16 v163 = *((_WORD *)v124 - 1);
            v124 -= 2;
            *((_WORD *)v162 - 1) = v163;
            v162 -= 2;
          }
          int v95 = &v151[2 * v150];
          std::string __p = v162;
          BOOL v222 = v144;
          id v223 = v95;
          if (v145)
          {
            operator delete(v145);
            int v95 = v223;
          }
        }
        else
        {
          *(_WORD *)uint64_t v124 = v93;
          uint64_t v144 = v124 + 2;
        }
        BOOL v222 = v144;
        if (v144 >= v95)
        {
          uint64_t v165 = (char *)__p;
          uint64_t v166 = v144 - (unsigned char *)__p;
          if (v144 - (unsigned char *)__p < -2) {
            goto LABEL_313;
          }
          uint64_t v167 = v166 >> 1;
          unint64_t v168 = v95 - (unsigned char *)__p;
          if (v168 <= (v166 >> 1) + 1) {
            unint64_t v169 = v167 + 1;
          }
          else {
            unint64_t v169 = v168;
          }
          if (v168 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v170 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v170 = v169;
          }
          if (v170)
          {
            uint64_t v171 = (char *)sub_20B08AAC4((uint64_t)&v223, v170);
            uint64_t v165 = (char *)__p;
            uint64_t v144 = v222;
          }
          else
          {
            uint64_t v171 = 0;
          }
          id v182 = &v171[2 * v167];
          *(_WORD *)id v182 = v94;
          uint64_t v164 = v182 + 2;
          while (v144 != v165)
          {
            __int16 v183 = *((_WORD *)v144 - 1);
            v144 -= 2;
            *((_WORD *)v182 - 1) = v183;
            v182 -= 2;
          }
LABEL_302:
          std::string __p = v182;
          BOOL v222 = v164;
          id v223 = &v171[2 * v170];
          if (v165) {
            operator delete(v165);
          }
          goto LABEL_304;
        }
        *(_WORD *)uint64_t v144 = v94;
        uint64_t v164 = v144 + 2;
      }
LABEL_304:
      BOOL v222 = v164;
      int v88 = v87;
      if (v87 >= v220) {
        goto LABEL_305;
      }
    }
  }
LABEL_306:
  id v191 = objc_alloc(MEMORY[0x263EFF8F8]);
  uint64_t v193 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v191, v192, (uint64_t)__p, v222 - (unsigned char *)__p, 0);
  BOOL v195 = objc_msgSend_newBufferWithData_type_(v214, v194, (uint64_t)v193, 2);
  if (objc_msgSend_conformsToProtocol_(v195, v196, (uint64_t)&unk_26BF5ED88))
  {
    id v197 = v195;
    std::string::size_type v199 = objc_msgSend_stringByAppendingString_(v215, v198, @"-Indices");
    objc_msgSend_setName_(v197, v200, (uint64_t)v199);
  }
  uint64_t v201 = [MDLMaterial alloc];
  v203 = objc_msgSend_stringByAppendingString_(v215, v202, @"-Material");
  uint64_t v204 = objc_opt_new();
  uint64_t v206 = objc_msgSend_initWithName_scatteringFunction_(v201, v205, (uint64_t)v203, v204);

  unint64_t v207 = [MDLSubmesh alloc];
  v209 = objc_msgSend_stringByAppendingString_(v215, v208, @"-Submesh");
  uint64_t v211 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v207, v210, (uint64_t)v209, v195, (v222 - (unsigned char *)__p) >> 1, 16, v219, v206, 0);

  id v212 = v211;
  if (__p)
  {
    BOOL v222 = (char *)__p;
    operator delete(__p);
  }

  return v212;
}

void sub_20B0899F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_20B089AB8(void *a1, void *a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6)
{
  id v201 = a1;
  id v200 = a2;
  unint64_t v203 = a4;
  uint64_t v11 = (8 * a4) | 6;
  if (a6 == 2) {
    uint64_t v11 = 6 * a4 + 3;
  }
  unint64_t v206 = a3;
  std::string __p = 0;
  v208 = 0;
  v209 = 0;
  sub_20B07D7B8(&__p, v11 * a3);
  if (a6 == 1)
  {
    if (a3)
    {
      int v41 = 0;
      __int16 v42 = v208;
      do
      {
        int v43 = v209;
        if (v42 >= v209)
        {
          uint64_t v45 = (char *)__p;
          uint64_t v46 = (v42 - (unsigned char *)__p) >> 2;
          unint64_t v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62) {
            goto LABEL_297;
          }
          uint64_t v48 = v209 - (unsigned char *)__p;
          if ((v209 - (unsigned char *)__p) >> 1 > v47) {
            unint64_t v47 = v48 >> 1;
          }
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            uint64_t v50 = (char *)sub_20B05D1AC((uint64_t)&v209, v49);
            uint64_t v45 = (char *)__p;
            __int16 v42 = v208;
          }
          else
          {
            uint64_t v50 = 0;
          }
          uint64_t v51 = &v50[4 * v46];
          *(_DWORD *)uint64_t v51 = v41;
          int v44 = v51 + 4;
          while (v42 != v45)
          {
            int v52 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v51 - 1) = v52;
            v51 -= 4;
          }
          int v43 = &v50[4 * v49];
          std::string __p = v51;
          v208 = v44;
          v209 = v43;
          if (v45)
          {
            operator delete(v45);
            int v43 = v209;
          }
        }
        else
        {
          *(_DWORD *)__int16 v42 = v41;
          int v44 = v42 + 4;
        }
        v208 = v44;
        unint64_t v53 = (v41 + 1);
        int v54 = v53 % v206;
        if (v44 >= v43)
        {
          __int16 v56 = (char *)__p;
          uint64_t v57 = (v44 - (unsigned char *)__p) >> 2;
          unint64_t v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62) {
            sub_20B05D0BC();
          }
          uint64_t v59 = v43 - (unsigned char *)__p;
          if (v59 >> 1 > v58) {
            unint64_t v58 = v59 >> 1;
          }
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v60 = v58;
          }
          if (v60)
          {
            unint64_t v61 = (char *)sub_20B05D1AC((uint64_t)&v209, v60);
            __int16 v56 = (char *)__p;
            int v44 = v208;
          }
          else
          {
            unint64_t v61 = 0;
          }
          unint64_t v62 = &v61[4 * v57];
          *(_DWORD *)unint64_t v62 = v54;
          unint64_t v55 = v62 + 4;
          while (v44 != v56)
          {
            int v63 = *((_DWORD *)v44 - 1);
            v44 -= 4;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
          int v43 = &v61[4 * v60];
          std::string __p = v62;
          v208 = v55;
          v209 = v43;
          if (v56)
          {
            operator delete(v56);
            int v43 = v209;
          }
        }
        else
        {
          *(_DWORD *)int v44 = v54;
          unint64_t v55 = v44 + 4;
        }
        v208 = v55;
        if (v55 >= v43)
        {
          uint64_t v65 = (char *)__p;
          uint64_t v66 = (v55 - (unsigned char *)__p) >> 2;
          unint64_t v67 = v66 + 1;
          if ((unint64_t)(v66 + 1) >> 62) {
LABEL_297:
          }
            sub_20B05D0BC();
          uint64_t v68 = v43 - (unsigned char *)__p;
          if (v68 >> 1 > v67) {
            unint64_t v67 = v68 >> 1;
          }
          if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v69 = v67;
          }
          if (v69)
          {
            uint64_t v70 = (char *)sub_20B05D1AC((uint64_t)&v209, v69);
            uint64_t v65 = (char *)__p;
            unint64_t v55 = v208;
          }
          else
          {
            uint64_t v70 = 0;
          }
          unint64_t v71 = &v70[4 * v66];
          *(_DWORD *)unint64_t v71 = v41;
          int v64 = v71 + 4;
          while (v55 != v65)
          {
            int v72 = *((_DWORD *)v55 - 1);
            v55 -= 4;
            *((_DWORD *)v71 - 1) = v72;
            v71 -= 4;
          }
          int v43 = &v70[4 * v69];
          std::string __p = v71;
          v208 = v64;
          v209 = v43;
          if (v65)
          {
            operator delete(v65);
            int v43 = v209;
          }
        }
        else
        {
          *(_DWORD *)unint64_t v55 = v41;
          int v64 = v55 + 4;
        }
        v208 = v64;
        if (v64 >= v43)
        {
          uint64_t v73 = (char *)__p;
          uint64_t v74 = (v64 - (unsigned char *)__p) >> 2;
          unint64_t v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62) {
            sub_20B05D0BC();
          }
          uint64_t v76 = v43 - (unsigned char *)__p;
          if (v76 >> 1 > v75) {
            unint64_t v75 = v76 >> 1;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            uint64_t v78 = (char *)sub_20B05D1AC((uint64_t)&v209, v77);
            uint64_t v73 = (char *)__p;
            int v64 = v208;
          }
          else
          {
            uint64_t v78 = 0;
          }
          uint64_t v79 = &v78[4 * v74];
          *(_DWORD *)uint64_t v79 = a5;
          __int16 v42 = v79 + 4;
          while (v64 != v73)
          {
            int v80 = *((_DWORD *)v64 - 1);
            v64 -= 4;
            *((_DWORD *)v79 - 1) = v80;
            v79 -= 4;
          }
          std::string __p = v79;
          v208 = v42;
          v209 = &v78[4 * v77];
          if (v73) {
            operator delete(v73);
          }
        }
        else
        {
          *(_DWORD *)int v64 = a5;
          __int16 v42 = v64 + 4;
        }
        v208 = v42;
        int v41 = v53;
      }
      while (v53 < v206);
    }
  }
  else if (a6 == 2 && a3)
  {
    LODWORD(v12) = 0;
    int v13 = v208;
    do
    {
      unint64_t v14 = v209;
      if (v13 >= v209)
      {
        uint64_t v16 = (char *)__p;
        uint64_t v17 = (v13 - (unsigned char *)__p) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v19 = v209 - (unsigned char *)__p;
        if ((v209 - (unsigned char *)__p) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          unint64_t v21 = (char *)sub_20B05D1AC((uint64_t)&v209, v20);
          uint64_t v16 = (char *)__p;
          int v13 = v208;
        }
        else
        {
          unint64_t v21 = 0;
        }
        unint64_t v22 = &v21[4 * v17];
        *(_DWORD *)unint64_t v22 = a5;
        float32x2_t v15 = v22 + 4;
        while (v13 != v16)
        {
          int v23 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        unint64_t v14 = &v21[4 * v20];
        std::string __p = v22;
        v208 = v15;
        v209 = v14;
        if (v16)
        {
          operator delete(v16);
          unint64_t v14 = v209;
        }
      }
      else
      {
        *(_DWORD *)int v13 = a5;
        float32x2_t v15 = v13 + 4;
      }
      v208 = v15;
      if (v15 >= v14)
      {
        unint64_t v25 = (char *)__p;
        uint64_t v26 = (v15 - (unsigned char *)__p) >> 2;
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v28 = v14 - (unsigned char *)__p;
        if (v28 >> 1 > v27) {
          unint64_t v27 = v28 >> 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v29 = v27;
        }
        if (v29)
        {
          uint64_t v30 = (char *)sub_20B05D1AC((uint64_t)&v209, v29);
          unint64_t v25 = (char *)__p;
          float32x2_t v15 = v208;
        }
        else
        {
          uint64_t v30 = 0;
        }
        long long v31 = &v30[4 * v26];
        *(_DWORD *)long long v31 = v12;
        uint64_t v24 = v31 + 4;
        while (v15 != v25)
        {
          int v32 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        unint64_t v14 = &v30[4 * v29];
        std::string __p = v31;
        v208 = v24;
        v209 = v14;
        if (v25)
        {
          operator delete(v25);
          unint64_t v14 = v209;
        }
      }
      else
      {
        *(_DWORD *)float32x2_t v15 = v12;
        uint64_t v24 = v15 + 4;
      }
      v208 = v24;
      unint64_t v12 = (v12 + 1);
      if (v24 >= v14)
      {
        __int16 v33 = (char *)__p;
        uint64_t v34 = (v24 - (unsigned char *)__p) >> 2;
        unint64_t v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v36 = v14 - (unsigned char *)__p;
        if (v36 >> 1 > v35) {
          unint64_t v35 = v36 >> 1;
        }
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37)
        {
          unint64_t v38 = (char *)sub_20B05D1AC((uint64_t)&v209, v37);
          __int16 v33 = (char *)__p;
          uint64_t v24 = v208;
        }
        else
        {
          unint64_t v38 = 0;
        }
        uint64_t v39 = &v38[4 * v34];
        *(_DWORD *)uint64_t v39 = v12;
        int v13 = v39 + 4;
        while (v24 != v33)
        {
          int v40 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v39 - 1) = v40;
          v39 -= 4;
        }
        std::string __p = v39;
        v208 = v13;
        v209 = &v38[4 * v37];
        if (v33) {
          operator delete(v33);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v24 = v12;
        int v13 = v24 + 4;
      }
      v208 = v13;
    }
    while (v12 < a3);
  }
  uint64_t v205 = a6;
  if (v203)
  {
    int v81 = 0;
    int v202 = v206 + 1;
    while (1)
    {
      unint64_t v204 = (v81 + 1);
      if (v206) {
        break;
      }
LABEL_288:
      int v81 = v204;
      if (v204 >= v203) {
        goto LABEL_289;
      }
    }
    int v82 = 0;
    int v83 = v204 * v202;
    int v84 = (v81 + 2) * v202;
    while (1)
    {
      int v85 = v82 + v83;
      unint64_t v86 = (v82 + 1);
      int v87 = v86 + v83;
      int v88 = v86 + v84;
      __int16 v90 = v208;
      __int16 v89 = v209;
      if (v205 == 2)
      {
        if (v208 >= v209)
        {
          __int16 v93 = (char *)__p;
          uint64_t v94 = (v208 - (unsigned char *)__p) >> 2;
          unint64_t v95 = v94 + 1;
          if ((unint64_t)(v94 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v96 = v209 - (unsigned char *)__p;
          if ((v209 - (unsigned char *)__p) >> 1 > v95) {
            unint64_t v95 = v96 >> 1;
          }
          if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v97 = v95;
          }
          if (v97)
          {
            long long v98 = (char *)sub_20B05D1AC((uint64_t)&v209, v97);
            __int16 v93 = (char *)__p;
            __int16 v90 = v208;
          }
          else
          {
            long long v98 = 0;
          }
          char v105 = &v98[4 * v94];
          *(_DWORD *)char v105 = v85;
          __int16 v91 = v105 + 4;
          while (v90 != v93)
          {
            int v106 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v105 - 1) = v106;
            v105 -= 4;
          }
          __int16 v89 = &v98[4 * v97];
          std::string __p = v105;
          v208 = v91;
          v209 = v89;
          if (v93)
          {
            operator delete(v93);
            __int16 v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v208 = v85;
          __int16 v91 = v90 + 4;
        }
        int v107 = v82 + v84;
        v208 = v91;
        if (v91 >= v89)
        {
          uint64_t v109 = (char *)__p;
          uint64_t v110 = (v91 - (unsigned char *)__p) >> 2;
          unint64_t v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v112 = v89 - (unsigned char *)__p;
          if (v112 >> 1 > v111) {
            unint64_t v111 = v112 >> 1;
          }
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v113 = v111;
          }
          if (v113)
          {
            long long v114 = (char *)sub_20B05D1AC((uint64_t)&v209, v113);
            uint64_t v109 = (char *)__p;
            __int16 v91 = v208;
          }
          else
          {
            long long v114 = 0;
          }
          uint64_t v124 = &v114[4 * v110];
          *(_DWORD *)uint64_t v124 = v107;
          uint64_t v108 = v124 + 4;
          while (v91 != v109)
          {
            int v125 = *((_DWORD *)v91 - 1);
            v91 -= 4;
            *((_DWORD *)v124 - 1) = v125;
            v124 -= 4;
          }
          __int16 v89 = &v114[4 * v113];
          std::string __p = v124;
          v208 = v108;
          v209 = v89;
          if (v109)
          {
            operator delete(v109);
            __int16 v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)__int16 v91 = v107;
          uint64_t v108 = v91 + 4;
        }
        v208 = v108;
        if (v108 >= v89)
        {
          uint64_t v127 = (char *)__p;
          uint64_t v128 = (v108 - (unsigned char *)__p) >> 2;
          unint64_t v129 = v128 + 1;
          if ((unint64_t)(v128 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v130 = v89 - (unsigned char *)__p;
          if (v130 >> 1 > v129) {
            unint64_t v129 = v130 >> 1;
          }
          if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v131 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v131 = v129;
          }
          if (v131)
          {
            uint64_t v132 = (char *)sub_20B05D1AC((uint64_t)&v209, v131);
            uint64_t v127 = (char *)__p;
            uint64_t v108 = v208;
          }
          else
          {
            uint64_t v132 = 0;
          }
          uint64_t v142 = &v132[4 * v128];
          *(_DWORD *)uint64_t v142 = v88;
          uint64_t v126 = v142 + 4;
          while (v108 != v127)
          {
            int v143 = *((_DWORD *)v108 - 1);
            v108 -= 4;
            *((_DWORD *)v142 - 1) = v143;
            v142 -= 4;
          }
          __int16 v89 = &v132[4 * v131];
          std::string __p = v142;
          v208 = v126;
          v209 = v89;
          if (v127)
          {
            operator delete(v127);
            __int16 v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v108 = v88;
          uint64_t v126 = v108 + 4;
        }
        v208 = v126;
        if (v126 >= v89)
        {
          uint64_t v145 = (char *)__p;
          uint64_t v146 = (v126 - (unsigned char *)__p) >> 2;
          unint64_t v147 = v146 + 1;
          if ((unint64_t)(v146 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v148 = v89 - (unsigned char *)__p;
          if (v148 >> 1 > v147) {
            unint64_t v147 = v148 >> 1;
          }
          if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v149 = v147;
          }
          if (v149)
          {
            uint64_t v150 = (char *)sub_20B05D1AC((uint64_t)&v209, v149);
            uint64_t v145 = (char *)__p;
            uint64_t v126 = v208;
          }
          else
          {
            uint64_t v150 = 0;
          }
          uint64_t v160 = &v150[4 * v146];
          *(_DWORD *)uint64_t v160 = v85;
          uint64_t v144 = v160 + 4;
          while (v126 != v145)
          {
            int v161 = *((_DWORD *)v126 - 1);
            v126 -= 4;
            *((_DWORD *)v160 - 1) = v161;
            v160 -= 4;
          }
          __int16 v89 = &v150[4 * v149];
          std::string __p = v160;
          v208 = v144;
          v209 = v89;
          if (v145)
          {
            operator delete(v145);
            __int16 v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v126 = v85;
          uint64_t v144 = v126 + 4;
        }
        v208 = v144;
        if (v144 >= v89)
        {
          __int16 v163 = (char *)__p;
          uint64_t v164 = (v144 - (unsigned char *)__p) >> 2;
          unint64_t v165 = v164 + 1;
          if ((unint64_t)(v164 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v166 = v89 - (unsigned char *)__p;
          if (v166 >> 1 > v165) {
            unint64_t v165 = v166 >> 1;
          }
          if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v167 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v167 = v165;
          }
          if (v167)
          {
            unint64_t v168 = (char *)sub_20B05D1AC((uint64_t)&v209, v167);
            __int16 v163 = (char *)__p;
            uint64_t v144 = v208;
          }
          else
          {
            unint64_t v168 = 0;
          }
          uint64_t v171 = &v168[4 * v164];
          *(_DWORD *)uint64_t v171 = v88;
          unint64_t v162 = v171 + 4;
          while (v144 != v163)
          {
            int v172 = *((_DWORD *)v144 - 1);
            v144 -= 4;
            *((_DWORD *)v171 - 1) = v172;
            v171 -= 4;
          }
          __int16 v89 = &v168[4 * v167];
          std::string __p = v171;
          v208 = v162;
          v209 = v89;
          if (v163)
          {
            operator delete(v163);
            __int16 v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v144 = v88;
          unint64_t v162 = v144 + 4;
        }
        v208 = v162;
        if (v162 >= v89)
        {
          uint64_t v154 = (char *)__p;
          uint64_t v173 = (v162 - (unsigned char *)__p) >> 2;
          unint64_t v174 = v173 + 1;
          if ((unint64_t)(v173 + 1) >> 62) {
LABEL_296:
          }
            sub_20B05D0BC();
          uint64_t v175 = v89 - (unsigned char *)__p;
          if (v175 >> 1 > v174) {
            unint64_t v174 = v175 >> 1;
          }
          if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v158 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v158 = v174;
          }
          if (v158)
          {
            unint64_t v159 = (char *)sub_20B05D1AC((uint64_t)&v209, v158);
            uint64_t v154 = (char *)__p;
            unint64_t v162 = v208;
          }
          else
          {
            unint64_t v159 = 0;
          }
          unint64_t v169 = &v159[4 * v173];
          *(_DWORD *)unint64_t v169 = v87;
          __int16 v153 = v169 + 4;
          while (v162 != v154)
          {
            int v176 = *((_DWORD *)v162 - 1);
            v162 -= 4;
            *((_DWORD *)v169 - 1) = v176;
            v169 -= 4;
          }
          goto LABEL_285;
        }
        *(_DWORD *)unint64_t v162 = v87;
        __int16 v153 = v162 + 4;
      }
      else
      {
        if (v208 >= v209)
        {
          long long v99 = (char *)__p;
          uint64_t v100 = (v208 - (unsigned char *)__p) >> 2;
          unint64_t v101 = v100 + 1;
          if ((unint64_t)(v100 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v102 = v209 - (unsigned char *)__p;
          if ((v209 - (unsigned char *)__p) >> 1 > v101) {
            unint64_t v101 = v102 >> 1;
          }
          if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v103 = v101;
          }
          if (v103)
          {
            unint64_t v104 = (char *)sub_20B05D1AC((uint64_t)&v209, v103);
            long long v99 = (char *)__p;
            __int16 v90 = v208;
          }
          else
          {
            unint64_t v104 = 0;
          }
          uint64_t v115 = &v104[4 * v100];
          *(_DWORD *)uint64_t v115 = v85;
          __int16 v92 = v115 + 4;
          while (v90 != v99)
          {
            int v116 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v115 - 1) = v116;
            v115 -= 4;
          }
          __int16 v89 = &v104[4 * v103];
          std::string __p = v115;
          v208 = v92;
          v209 = v89;
          if (v99)
          {
            operator delete(v99);
            __int16 v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)v208 = v85;
          __int16 v92 = v90 + 4;
        }
        v208 = v92;
        if (v92 >= v89)
        {
          unint64_t v118 = (char *)__p;
          uint64_t v119 = (v92 - (unsigned char *)__p) >> 2;
          unint64_t v120 = v119 + 1;
          if ((unint64_t)(v119 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v121 = v89 - (unsigned char *)__p;
          if (v121 >> 1 > v120) {
            unint64_t v120 = v121 >> 1;
          }
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v120;
          }
          if (v122)
          {
            __int16 v123 = (char *)sub_20B05D1AC((uint64_t)&v209, v122);
            unint64_t v118 = (char *)__p;
            __int16 v92 = v208;
          }
          else
          {
            __int16 v123 = 0;
          }
          __int16 v133 = &v123[4 * v119];
          *(_DWORD *)__int16 v133 = v87;
          uint64_t v117 = v133 + 4;
          while (v92 != v118)
          {
            int v134 = *((_DWORD *)v92 - 1);
            v92 -= 4;
            *((_DWORD *)v133 - 1) = v134;
            v133 -= 4;
          }
          __int16 v89 = &v123[4 * v122];
          std::string __p = v133;
          v208 = v117;
          v209 = v89;
          if (v118)
          {
            operator delete(v118);
            __int16 v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)__int16 v92 = v87;
          uint64_t v117 = v92 + 4;
        }
        v208 = v117;
        if (v117 >= v89)
        {
          uint64_t v136 = (char *)__p;
          uint64_t v137 = (v117 - (unsigned char *)__p) >> 2;
          unint64_t v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v139 = v89 - (unsigned char *)__p;
          if (v139 >> 1 > v138) {
            unint64_t v138 = v139 >> 1;
          }
          if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v140 = v138;
          }
          if (v140)
          {
            uint64_t v141 = (char *)sub_20B05D1AC((uint64_t)&v209, v140);
            uint64_t v136 = (char *)__p;
            uint64_t v117 = v208;
          }
          else
          {
            uint64_t v141 = 0;
          }
          float32x4_t v151 = &v141[4 * v137];
          *(_DWORD *)float32x4_t v151 = v87;
          uint64_t v135 = v151 + 4;
          while (v117 != v136)
          {
            int v152 = *((_DWORD *)v117 - 1);
            v117 -= 4;
            *((_DWORD *)v151 - 1) = v152;
            v151 -= 4;
          }
          __int16 v89 = &v141[4 * v140];
          std::string __p = v151;
          v208 = v135;
          v209 = v89;
          if (v136)
          {
            operator delete(v136);
            __int16 v89 = v209;
          }
        }
        else
        {
          *(_DWORD *)uint64_t v117 = v87;
          uint64_t v135 = v117 + 4;
        }
        v208 = v135;
        if (v135 >= v89)
        {
          uint64_t v154 = (char *)__p;
          uint64_t v155 = (v135 - (unsigned char *)__p) >> 2;
          unint64_t v156 = v155 + 1;
          if ((unint64_t)(v155 + 1) >> 62) {
            goto LABEL_296;
          }
          uint64_t v157 = v89 - (unsigned char *)__p;
          if (v157 >> 1 > v156) {
            unint64_t v156 = v157 >> 1;
          }
          if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v158 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v158 = v156;
          }
          if (v158)
          {
            unint64_t v159 = (char *)sub_20B05D1AC((uint64_t)&v209, v158);
            uint64_t v154 = (char *)__p;
            uint64_t v135 = v208;
          }
          else
          {
            unint64_t v159 = 0;
          }
          unint64_t v169 = &v159[4 * v155];
          *(_DWORD *)unint64_t v169 = v88;
          __int16 v153 = v169 + 4;
          while (v135 != v154)
          {
            int v170 = *((_DWORD *)v135 - 1);
            v135 -= 4;
            *((_DWORD *)v169 - 1) = v170;
            v169 -= 4;
          }
LABEL_285:
          std::string __p = v169;
          v208 = v153;
          v209 = &v159[4 * v158];
          if (v154) {
            operator delete(v154);
          }
          goto LABEL_287;
        }
        *(_DWORD *)uint64_t v135 = v88;
        __int16 v153 = v135 + 4;
      }
LABEL_287:
      v208 = v153;
      int v82 = v86;
      if (v86 >= v206) {
        goto LABEL_288;
      }
    }
  }
LABEL_289:
  id v177 = objc_alloc(MEMORY[0x263EFF8F8]);
  unint64_t v179 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v177, v178, (uint64_t)__p, v208 - (unsigned char *)__p, 0);
  uint64_t v181 = objc_msgSend_newBufferWithData_type_(v200, v180, (uint64_t)v179, 2);
  if (objc_msgSend_conformsToProtocol_(v181, v182, (uint64_t)&unk_26BF5ED88))
  {
    id v183 = v181;
    __int16 v185 = objc_msgSend_stringByAppendingString_(v201, v184, @"-Indices");
    objc_msgSend_setName_(v183, v186, (uint64_t)v185);
  }
  uint64_t v187 = [MDLMaterial alloc];
  unint64_t v189 = objc_msgSend_stringByAppendingString_(v201, v188, @"-Material");
  __int16 v190 = objc_opt_new();
  uint64_t v192 = objc_msgSend_initWithName_scatteringFunction_(v187, v191, (uint64_t)v189, v190);

  uint64_t v193 = [MDLSubmesh alloc];
  BOOL v195 = objc_msgSend_stringByAppendingString_(v201, v194, @"-Submesh");
  id v197 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v193, v196, (uint64_t)v195, v181, (v208 - (unsigned char *)__p) >> 2, 32, v205, v192, 0);

  id v198 = v197;
  if (__p)
  {
    v208 = (char *)__p;
    operator delete(__p);
  }

  return v198;
}

void sub_20B08A8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B08AA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B08AA20(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_20B05D0BC();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint8x8_t v6 = (char *)sub_20B08AAC4(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    float32x4_t v9 = &v6[2 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_20B08AAC4(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_20B05D178();
  }
  return operator new(2 * a2);
}

uint64_t sub_20B08AAF8(uint64_t a1, float a2)
{
  uint64_t v360 = *MEMORY[0x263EF8340];
  int v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
  double v5 = cos((float)(a2 * 0.017453));
  uint8x8_t v6 = *(uint64_t (***)(void))a1;
  if (!**(void **)a1 || !v6[1] || !v6[2] || !v6[3] || !v6[4] || v4 < 1) {
    return 0;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  float v9 = v5;
  do
  {
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v7);
    if (v10 == 4)
    {
      v8 += 2;
    }
    else if (v10 == 3)
    {
      ++v8;
    }
    uint64_t v7 = (v7 + 1);
  }
  while (v4 != v7);
  if ((int)v8 < 1) {
    return 0;
  }
  uint64_t v11 = malloc_type_malloc(12 * v8, 0x38CB24FuLL);
  unint64_t v12 = (char *)malloc_type_malloc(88 * v8, 0x1020040F04E29DEuLL);
  __int16 v13 = v12;
  if (!v11 || !v12)
  {
    if (v11) {
      free(v11);
    }
    if (!v13) {
      return 0;
    }
    int v54 = v13;
LABEL_347:
    free(v54);
    return 0;
  }
  uint64_t size = 12 * v8;
  int v324 = v4;
  int v325 = v8 - 1;
  unsigned __int32 v336 = v11;
  int v328 = v8;
  uint64_t v331 = v8;
  float32x4_t v333 = v12;
  if ((**(int (***)(uint64_t))a1)(a1) < 1)
  {
    int v15 = 0;
  }
  else
  {
    int v14 = 0;
    int v15 = 0;
    uint64_t v16 = 0;
    int v17 = 0;
    do
    {
      int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v16);
      if ((v18 - 5) >= 0xFFFFFFFE)
      {
        int v19 = v18;
        unint64_t v20 = &v13[88 * v17];
        *((_DWORD *)v20 + 18) = v16;
        *((_DWORD *)v20 + 20) = v15;
        if (v18 == 3)
        {
          unint64_t v21 = &v13[88 * v17];
          *((_WORD *)v21 + 42) = 256;
          v21[86] = 2;
          int v22 = 3 * v17;
          int v23 = v336;
          v336[3 * v17] = v14;
          v336[3 * v17 + 1] = v14 + 1;
          int v24 = v14 + 2;
          int v25 = 1;
        }
        else
        {
          int v26 = 4 * v16;
          unint64_t v27 = &v13[88 * v17 + 88];
          *((_DWORD *)v27 + 18) = v16;
          *((_DWORD *)v27 + 20) = v15;
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 32))(a1, &v354, (v14 >> 2), 0);
          float32x2_t v28 = (float32x2_t)v354;
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 32))(a1, &v354, (v14 >> 2), 1);
          float32x2_t v29 = (float32x2_t)v354;
          *(void *)&long long v354 = 0;
          char v30 = 2;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 32))(a1, &v354, (v14 >> 2), 2);
          float32x2_t v31 = (float32x2_t)v354;
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 32))(a1, &v354, (v14 >> 2), 3);
          float32x2_t v32 = vsub_f32(v31, v28);
          int32x2_t v33 = (int32x2_t)vmul_f32(v32, v32);
          float32x2_t v34 = vsub_f32(*(float32x2_t *)&v354, v29);
          int32x2_t v35 = (int32x2_t)vmul_f32(v34, v34);
          float32x2_t v36 = vadd_f32((float32x2_t)vzip2_s32(v33, v35), (float32x2_t)vzip1_s32(v33, v35));
          if (v36.f32[0] < v36.f32[1]) {
            goto LABEL_25;
          }
          if (v36.f32[1] < v36.f32[0]) {
            goto LABEL_24;
          }
          DWORD2(v354) = 0;
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v14 >> 2), 0);
          float v37 = *(float *)&v354;
          float32x2_t v38 = *(float32x2_t *)((char *)&v354 + 4);
          DWORD2(v354) = 0;
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 16))(a1, &v354, (v14 >> 2), 1);
          float v39 = *(float *)&v354;
          float32x2_t v40 = *(float32x2_t *)((char *)&v354 + 4);
          DWORD2(v354) = 0;
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 16))(a1, &v354, (v14 >> 2), 2);
          float v41 = *(float *)&v354;
          float32x2_t v42 = *(float32x2_t *)((char *)&v354 + 4);
          DWORD2(v354) = 0;
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, void, uint64_t))(*(void *)a1 + 16))(a1, &v354, (v14 >> 2), 3);
          float32x2_t v43 = vsub_f32(v42, v38);
          float32x2_t v44 = vmul_f32(v43, v43);
          float32x2_t v45 = vsub_f32(*(float32x2_t *)((char *)&v354 + 4), v40);
          float32x2_t v46 = vmul_f32(v45, v45);
          if ((float)((float)(v46.f32[0] + (float)((float)(*(float *)&v354 - v39) * (float)(*(float *)&v354 - v39)))
                     + v46.f32[1]) >= (float)((float)(v44.f32[0] + (float)((float)(v41 - v37) * (float)(v41 - v37)))
                                            + v44.f32[1]))
          {
LABEL_25:
            char v49 = 0;
            int v47 = v14;
            uint64_t v50 = v17 + 1;
            int v48 = (4 * v16) | 2;
          }
          else
          {
LABEL_24:
            int v47 = v26 | 1;
            int v48 = v14 + 3;
            char v49 = 1;
            char v30 = 3;
            uint64_t v50 = v17 + 1;
          }
          int v24 = v26 | 3;
          __int16 v13 = v333;
          uint64_t v51 = &v333[88 * v17];
          *((_WORD *)v51 + 42) = 256;
          v51[86] = v30;
          int v23 = v336;
          v336[3 * v17] = v14;
          int v52 = (char *)&v336[3 * v17];
          *((_DWORD *)v52 + 1) = v14 + 1;
          *((_DWORD *)v52 + 2) = v48;
          unint64_t v53 = &v333[88 * v50];
          v53[84] = v49;
          *(_WORD *)(v53 + 85) = 770;
          int v22 = 3 * v50;
          v336[3 * v50] = v47;
          v336[3 * (int)v50 + 1] = v14 + 2;
          int v25 = 2;
        }
        v23[v22 + 2] = v24;
        v17 += v25;
        v15 += v19;
      }
      uint64_t v16 = (v16 + 1);
      v14 += 4;
    }
    while ((int)v16 < (**(int (***)(uint64_t))a1)(a1));
  }
  uint64_t v55 = 76;
  uint64_t v56 = v331;
  do
  {
    *(_DWORD *)&v13[v55] = 0;
    v55 += 88;
    --v56;
  }
  while (v56);
  DWORD2(v354) = 0;
  *(void *)&long long v354 = 0;
  (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, 0, 0);
  float v57 = *((float *)&v354 + 1);
  float v58 = *(float *)&v354;
  int v59 = 3 * v328;
  if (3 * v328 <= 2) {
    unsigned int v60 = 2;
  }
  else {
    unsigned int v60 = 3 * v328;
  }
  float v61 = *((float *)&v354 + 2);
  uint64_t v62 = 4 * v60;
  uint64_t v63 = 4;
  float v64 = *((float *)&v354 + 2);
  float v65 = *((float *)&v354 + 1);
  float v66 = *(float *)&v354;
  uint64_t v67 = (uint64_t)v336;
  do
  {
    int v68 = v336[(unint64_t)v63 / 4];
    DWORD2(v354) = 0;
    *(void *)&long long v354 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v68 >> 2), v68 & 3);
    if (v58 < *(float *)&v354) {
      float v69 = *(float *)&v354;
    }
    else {
      float v69 = v58;
    }
    if (v66 <= *(float *)&v354) {
      float v58 = v69;
    }
    else {
      float v66 = *(float *)&v354;
    }
    if (v57 < *((float *)&v354 + 1)) {
      float v70 = *((float *)&v354 + 1);
    }
    else {
      float v70 = v57;
    }
    if (v65 <= *((float *)&v354 + 1)) {
      float v57 = v70;
    }
    else {
      float v65 = *((float *)&v354 + 1);
    }
    if (v64 <= *((float *)&v354 + 2))
    {
      if (v61 < *((float *)&v354 + 2)) {
        float v61 = *((float *)&v354 + 2);
      }
    }
    else
    {
      float v64 = *((float *)&v354 + 2);
    }
    v63 += 4;
  }
  while (v62 != v63);
  float v71 = v58 - v66;
  float v72 = v61 - v64;
  BOOL v73 = (float)(v57 - v65) > (float)(v61 - v64) && (float)(v57 - v65) > (float)(v58 - v66);
  BOOL v74 = v72 <= v71;
  if (v72 > v71) {
    float v75 = v64;
  }
  else {
    float v75 = v66;
  }
  if (v74) {
    float v76 = v58;
  }
  else {
    float v76 = v61;
  }
  int v77 = v74;
  if (v73) {
    float v78 = v65;
  }
  else {
    float v78 = v75;
  }
  if (v73) {
    float v79 = v57;
  }
  else {
    float v79 = v76;
  }
  if (v73) {
    int v80 = 0;
  }
  else {
    int v80 = v77;
  }
  int v81 = (char *)malloc_type_malloc(size, 0xDC00527BuLL);
  int v82 = (int *)malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  int v83 = malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  int v84 = malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  int v85 = v83;
  unint64_t v86 = v84;
  float v327 = v9;
  float32x4_t v332 = v85;
  int v326 = v15;
  if (v81 && v82 && v85 && v84)
  {
    int32x4_t v329 = v81;
    bzero(v82, 0x2000uLL);
    bzero(v86, 0x2000uLL);
    uint64_t v87 = 0;
    if (v59 <= 1) {
      uint64_t v88 = 1;
    }
    else {
      uint64_t v88 = v59;
    }
    uint64_t v349 = v88;
    uint64_t v89 = 4 * v88;
    do
    {
      int v90 = *(_DWORD *)(v67 + v87);
      DWORD2(v354) = 0;
      *(void *)&long long v354 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v90 >> 2), v90 & 3);
      __int16 v91 = (float *)&v354 + 1;
      if (!v73) {
        __int16 v91 = (float *)&v354 + 2;
      }
      uint64_t v67 = (uint64_t)v336;
      if (v80) {
        __int16 v91 = (float *)&v354;
      }
      int v92 = sub_20B08D6A8(v78, v79, *v91);
      ++v82[v92];
      v87 += 4;
    }
    while (v89 != v87);
    uint64_t v93 = 0;
    int v94 = 0;
    *float32x4_t v332 = 0;
    do
    {
      v94 += v82[v93];
      v332[++v93] = v94;
    }
    while (v93 != 2047);
    float32x4_t v330 = v82;
    for (uint64_t i = 0; i != v349; ++i)
    {
      int v96 = v336[i];
      DWORD2(v354) = 0;
      *(void *)&long long v354 = 0;
      (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v96 >> 2), v96 & 3);
      unint64_t v97 = (float *)&v354 + 1;
      if (!v73) {
        unint64_t v97 = (float *)&v354 + 2;
      }
      if (v80) {
        unint64_t v97 = (float *)&v354;
      }
      int v98 = sub_20B08D6A8(v78, v79, *v97);
      *(_DWORD *)&v81[4 * v332[v98] + 4 * (*((_DWORD *)v86 + v98))++] = i;
    }
    free(v86);
    long long v99 = v82;
    int v100 = *v82;
    for (uint64_t j = 1; j != 2048; ++j)
    {
      if (v100 <= v82[j]) {
        int v100 = v82[j];
      }
    }
    uint64_t v102 = (char *)malloc_type_malloc(16 * v100, 0x1000040451B5BE8uLL);
    uint64_t v103 = 0;
    do
    {
      uint64_t v334 = v103;
      uint64_t v104 = v99[v103];
      if ((int)v104 >= 2)
      {
        char v105 = &v329[4 * v332[v103]];
        if (v102)
        {
          uint64_t v106 = 0;
          do
          {
            uint64_t v107 = *(int *)v105;
            v105 += 4;
            int v108 = *(_DWORD *)(v67 + 4 * v107);
            DWORD2(v354) = 0;
            *(void *)&long long v354 = 0;
            (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v108 >> 2), v108 & 3);
            int v109 = DWORD2(v354);
            uint64_t v110 = &v102[v106];
            *(void *)uint64_t v110 = v354;
            *((_DWORD *)v110 + 2) = v109;
            *((_DWORD *)v110 + 3) = v107;
            v106 += 16;
          }
          while (16 * v104 != v106);
          sub_20B08D6D4(v67, (uint64_t)v102, a1, 0, (v104 - 1));
        }
        else
        {
          for (uint64_t k = 0; k != v104; ++k)
          {
            uint64_t v112 = *(int *)&v105[4 * k];
            int v113 = *(_DWORD *)(v67 + 4 * v112);
            DWORD2(v354) = 0;
            *(void *)&long long v354 = 0;
            uint64_t v114 = v113 & 3;
            uint64_t v115 = (v113 >> 2);
            (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v354, v115, v114);
            uint64_t v116 = v354;
            float v350 = *((float *)&v354 + 2);
            DWORD2(v354) = 0;
            *(void *)&long long v354 = 0;
            (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, &v354, v115, v114);
            float v346 = *(float *)&v354;
            float v341 = *((float *)&v354 + 2);
            float sizea = *((float *)&v354 + 1);
            *(void *)&long long v354 = 0;
            uint64_t v117 = v115;
            uint64_t v67 = (uint64_t)v336;
            (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, &v354, v117, v114);
            if (k)
            {
              uint64_t v118 = 0;
              float v337 = *((float *)&v354 + 1);
              float v339 = *(float *)&v354;
              while (1)
              {
                uint64_t v119 = *(int *)&v105[4 * v118];
                int v120 = *(_DWORD *)(v67 + 4 * v119);
                DWORD2(v354) = 0;
                *(void *)&long long v354 = 0;
                uint64_t v121 = v120 & 3;
                uint64_t v122 = (v120 >> 2);
                (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v354, v122, v121);
                uint64_t v123 = v354;
                float v124 = *((float *)&v354 + 2);
                DWORD2(v354) = 0;
                *(void *)&long long v354 = 0;
                (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, &v354, v122, v121);
                uint64_t v125 = v354;
                float v126 = *((float *)&v354 + 2);
                *(void *)&long long v354 = 0;
                (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, &v354, v122, v121);
                if (*(float *)&v116 == *(float *)&v123
                  && *((float *)&v116 + 1) == *((float *)&v123 + 1)
                  && v350 == v124
                  && v346 == *(float *)&v125
                  && sizea == *((float *)&v125 + 1)
                  && v341 == v126
                  && v339 == *(float *)&v354
                  && v337 == *((float *)&v354 + 1))
                {
                  break;
                }
                ++v118;
                uint64_t v67 = (uint64_t)v336;
                if (k == v118) {
                  goto LABEL_124;
                }
              }
              uint64_t v67 = (uint64_t)v336;
              v336[v112] = v336[v119];
            }
LABEL_124:
            ;
          }
        }
      }
      uint64_t v103 = v334 + 1;
      long long v99 = v330;
    }
    while (v334 != 2047);
    if (v102) {
      free(v102);
    }
    free(v329);
    free(v330);
    free(v332);
  }
  else
  {
    if (v81)
    {
      free(v81);
      int v85 = v332;
    }
    if (v82)
    {
      free(v82);
      int v85 = v332;
    }
    if (v85) {
      free(v85);
    }
    if (v86) {
      free(v86);
    }
    uint64_t v127 = 0;
    uint64_t v128 = 1;
    do
    {
      uint64_t v129 = 0;
      uint64_t v335 = v127;
      uint64_t v130 = 3 * v127;
      do
      {
        int v131 = *(_DWORD *)(v67 + 4 * (v129 + v130));
        DWORD2(v354) = 0;
        *(void *)&long long v354 = 0;
        uint64_t v132 = v131 & 3;
        uint64_t v133 = (v131 >> 2);
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v354, v133, v132);
        uint64_t v134 = v354;
        float v351 = *((float *)&v354 + 2);
        DWORD2(v354) = 0;
        *(void *)&long long v354 = 0;
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, &v354, v133, v132);
        float v347 = *(float *)&v354;
        float v342 = *((float *)&v354 + 2);
        float sizeb = *((float *)&v354 + 1);
        *(void *)&long long v354 = 0;
        (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, &v354, v133, v132);
        uint64_t v135 = 0;
        float v338 = *((float *)&v354 + 1);
        float v340 = *(float *)&v354;
        uint64_t v136 = v67;
LABEL_140:
        uint64_t v137 = 0;
        while (1)
        {
          int v138 = *(_DWORD *)(v136 + v137);
          DWORD2(v354) = 0;
          *(void *)&long long v354 = 0;
          uint64_t v139 = v138 & 3;
          uint64_t v140 = (v138 >> 2);
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 16))(a1, &v354, v140, v139);
          uint64_t v141 = v354;
          float v142 = *((float *)&v354 + 2);
          DWORD2(v354) = 0;
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, &v354, v140, v139);
          uint64_t v143 = v354;
          float v144 = *((float *)&v354 + 2);
          *(void *)&long long v354 = 0;
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, &v354, v140, v139);
          if (*(float *)&v134 == *(float *)&v141
            && *((float *)&v134 + 1) == *((float *)&v141 + 1)
            && v351 == v142
            && v347 == *(float *)&v143
            && sizeb == *((float *)&v143 + 1)
            && v342 == v144
            && v340 == *(float *)&v354
            && v338 == *((float *)&v354 + 1))
          {
            break;
          }
          v137 += 4;
          if (v137 == 12)
          {
            ++v135;
            v136 += 12;
            if (v135 != v128) {
              goto LABEL_140;
            }
            break;
          }
        }
        uint64_t v67 = (uint64_t)v336;
        v336[v129 + v130] = -1;
        ++v129;
      }
      while (v129 != 3);
      uint64_t v127 = v335 + 1;
      ++v128;
    }
    while (v335 + 1 != v331);
  }
  uint64_t v145 = 0;
  int v146 = 0;
  uint64_t v147 = 76;
  uint64_t v148 = v333;
  do
  {
    int v149 = v336[v145];
    int v150 = v336[v145 + 1];
    int v151 = v336[v145 + 2];
    DWORD2(v354) = 0;
    *(void *)&long long v354 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v149 >> 2), v149 & 3);
    uint64_t v152 = v354;
    float v153 = *((float *)&v354 + 2);
    DWORD2(v354) = 0;
    *(void *)&long long v354 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v150 >> 2), v150 & 3);
    uint64_t v154 = v354;
    float v155 = *((float *)&v354 + 2);
    DWORD2(v354) = 0;
    *(void *)&long long v354 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v151 >> 2), v151 & 3);
    if (*(float *)&v152 == *(float *)&v154 && *((float *)&v152 + 1) == *((float *)&v154 + 1) && v153 == v155
      || *(float *)&v152 == *(float *)&v354
      && *((float *)&v152 + 1) == *((float *)&v354 + 1)
      && v153 == *((float *)&v354 + 2)
      || *(float *)&v154 == *(float *)&v354
      && *((float *)&v154 + 1) == *((float *)&v354 + 1)
      && v155 == *((float *)&v354 + 2))
    {
      *(_DWORD *)&v333[v147] |= 1u;
      ++v146;
    }
    v145 += 3;
    v147 += 88;
  }
  while (3 * v331 != v145);
  uint64_t v156 = (v328 - v146);
  if (v328 > 1)
  {
    int v157 = 0;
    do
    {
      int v158 = v157;
      uint64_t v159 = v157 + 1;
      if (*(_DWORD *)&v333[88 * v157 + 72] == *(_DWORD *)&v333[88 * v157 + 160])
      {
        uint64_t v160 = &v333[88 * v157];
        int v163 = *((_DWORD *)v160 + 19);
        int v161 = (int *)(v160 + 76);
        int v162 = v163;
        uint64_t v164 = &v333[88 * v159];
        int v167 = *((_DWORD *)v164 + 19);
        unint64_t v165 = (int *)(v164 + 76);
        int v166 = v167;
        if ((v167 ^ v162))
        {
          int *v161 = v162 | 2;
          int *v165 = v166 | 2;
        }
        LODWORD(v159) = v158 + 2;
      }
      int v157 = v159;
    }
    while ((int)v159 < v325);
  }
  if ((int)v156 >= 1)
  {
    int v168 = 0;
    uint64_t v169 = 0;
    int v170 = 1;
    while (1)
    {
      uint64_t v171 = &v333[88 * v169];
      if (v171[76])
      {
        if (v170 >= v328) {
          goto LABEL_187;
        }
        uint64_t v173 = (char *)&v336[v168];
        do
        {
          int v174 = *(_DWORD *)&v333[88 * v170 + 76] & 1;
          v170 += v174;
        }
        while (v174 && v170 < v328);
        if (v174)
        {
LABEL_187:
          id v183 = v333 + 76;
          uint64_t v184 = (v328 - v146);
          do
          {
            *(void *)(v183 - 19) = -1;
            *(v183 - 17) = -1;
            *(void *)(v183 - 15) = 0;
            *(void *)(v183 - 11) = 0;
            *(void *)(v183 - 13) = 0;
            *v183 |= 4u;
            *(_OWORD *)(v183 - 9) = 0uLL;
            *(_OWORD *)(v183 - 5) = 0uLL;
            v183 += 22;
            --v184;
          }
          while (v184);
          __int16 v185 = v333 + 40;
          uint64_t v186 = v336 + 2;
          uint64_t v187 = v156;
          do
          {
            int v188 = *(v186 - 2);
            DWORD2(v354) = 0;
            *(void *)&long long v354 = 0;
            (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v188 >> 2), v188 & 3);
            float v189 = *((float *)&v354 + 2);
            float32x2_t v190 = (float32x2_t)v354;
            int v191 = *(v186 - 1);
            DWORD2(v354) = 0;
            *(void *)&long long v354 = 0;
            (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v191 >> 2), v191 & 3);
            float32x2_t v352 = (float32x2_t)v354;
            float v348 = *((float *)&v354 + 2);
            int v192 = *v186;
            DWORD2(v354) = 0;
            *(void *)&long long v354 = 0;
            (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 16))(a1, &v354, (v192 >> 2), v192 & 3);
            float32x2_t v193 = (float32x2_t)v354;
            float v194 = *((float *)&v354 + 2);
            int v195 = *(v186 - 2);
            *(void *)&long long v354 = 0;
            (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 32))(a1, &v354, (v195 >> 2), v195 & 3);
            uint64_t v196 = v354;
            int v197 = *(v186 - 1);
            *(void *)&long long v354 = 0;
            (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 32))(a1, &v354, (v197 >> 2), v197 & 3);
            uint64_t v198 = v354;
            int v199 = *v186;
            *(void *)&long long v354 = 0;
            (*(void (**)(uint64_t, long long *, void, void))(*(void *)a1 + 32))(a1, &v354, (v199 >> 2), v199 & 3);
            float v200 = *(float *)&v198 - *(float *)&v196;
            float v201 = *((float *)&v198 + 1) - *((float *)&v196 + 1);
            float v202 = *(float *)&v354 - *(float *)&v196;
            float v203 = *((float *)&v354 + 1) - *((float *)&v196 + 1);
            float v204 = -(float)((float)((float)(*(float *)&v354 - *(float *)&v196)
                                  * (float)(*((float *)&v198 + 1) - *((float *)&v196 + 1)))
                          - (float)((float)(*((float *)&v354 + 1) - *((float *)&v196 + 1))
                                  * (float)(*(float *)&v198 - *(float *)&v196)));
            int v205 = *((_DWORD *)v185 + 9) | (8 * (v204 > 0.0));
            *((_DWORD *)v185 + 9) = v205;
            float v206 = fabsf(v204);
            if (v206 > 1.1755e-38)
            {
              float32x2_t v207 = vsub_f32(v352, v190);
              float32x2_t v208 = vsub_f32(v193, v190);
              float32x2_t v209 = vmla_n_f32(vneg_f32(vmul_n_f32(v208, v201)), v207, v203);
              float v210 = -(float)((float)(v201 * (float)(v194 - v189)) - (float)(v203 * (float)(v348 - v189)));
              float v211 = sqrtf(vaddv_f32(vmul_f32(v209, v209)) + (float)(v210 * v210));
              float v212 = 1.0;
              if ((v205 & 8) == 0) {
                float v212 = -1.0;
              }
              if (fabsf(v211) > 1.1755e-38)
              {
                *(float32x2_t *)__int16 v185 = vmul_n_f32(v209, v212 / v211);
                *((float *)v185 + 2) = (float)(v212 / v211) * v210;
              }
              float32x2_t v213 = vmla_n_f32(vneg_f32(vmul_n_f32(v207, v202)), v208, v200);
              float v214 = -(float)((float)(v202 * (float)(v348 - v189)) - (float)(v200 * (float)(v194 - v189)));
              float v215 = sqrtf(vaddv_f32(vmul_f32(v213, v213)) + (float)(v214 * v214));
              if (fabsf(v215) > 1.1755e-38)
              {
                *(float32x2_t *)(v185 + 12) = vmul_n_f32(v213, v212 / v215);
                *((float *)v185 + 5) = (float)(v212 / v215) * v214;
              }
              float v216 = v211 / v206;
              float v217 = v215 / v206;
              *((float *)v185 + 6) = v216;
              *((float *)v185 + 7) = v217;
              float v218 = fabsf(v217);
              if (fabsf(v216) > 1.1755e-38 && v218 > 1.1755e-38) {
                *((_DWORD *)v185 + 9) = v205 & 0xFFFFFFFB;
              }
            }
            v186 += 3;
            v185 += 88;
            --v187;
          }
          while (v187);
          uint64_t v148 = v333;
          float v9 = v327;
          if ((int)v156 >= 2)
          {
            int v220 = 0;
            do
            {
              uint64_t v221 = v220;
              uint64_t v222 = v220 + 1;
              if (*(_DWORD *)&v333[88 * v220 + 72] == *(_DWORD *)&v333[88 * v220 + 160])
              {
                int v223 = *(_DWORD *)&v333[88 * v220 + 76];
                int v224 = *(_DWORD *)&v333[88 * v222 + 76];
                if (((v223 | v224) & 1) == 0 && ((v224 ^ v223) & 8) != 0)
                {
                  if ((v224 & 4) != 0
                    || (sub_20B08DBB0(a1, &v336[3 * v221]),
                        float v226 = v225,
                        sub_20B08DBB0(a1, &v336[3 * v222]),
                        v226 >= v227))
                  {
                    uint64_t v228 = v221;
                  }
                  else
                  {
                    uint64_t v228 = v221 + 1;
                    uint64_t v222 = v221;
                  }
                  unsigned __int32 v229 = &v333[88 * v222];
                  unsigned int v230 = *((_DWORD *)v229 + 19) & 0xFFFFFFF7;
                  *((_DWORD *)v229 + 19) = v230;
                  *((_DWORD *)v229 + 19) = *(_DWORD *)&v333[88 * v228 + 76] & 8 | v230;
                }
                LODWORD(v222) = v221 + 2;
              }
              int v220 = v222;
            }
            while ((int)v222 < (int)v156 - 1);
          }
          break;
        }
        uint64_t v175 = 0;
        int v172 = v170 + 1;
        int v176 = (char *)&v336[3 * v170];
        do
        {
          int v177 = *(_DWORD *)&v173[v175];
          *(_DWORD *)&v173[v175] = *(_DWORD *)&v176[v175];
          *(_DWORD *)&v176[v175] = v177;
          v175 += 4;
        }
        while (v175 != 12);
        long long v356 = *((_OWORD *)v171 + 2);
        long long v357 = *((_OWORD *)v171 + 3);
        long long v358 = *((_OWORD *)v171 + 4);
        uint64_t v359 = *((void *)v171 + 10);
        long long v354 = *(_OWORD *)v171;
        long long v355 = *((_OWORD *)v171 + 1);
        unint64_t v178 = &v333[88 * v170];
        long long v179 = *((_OWORD *)v178 + 1);
        *(_OWORD *)uint64_t v171 = *(_OWORD *)v178;
        *((_OWORD *)v171 + 1) = v179;
        long long v181 = *((_OWORD *)v178 + 3);
        long long v180 = *((_OWORD *)v178 + 4);
        long long v182 = *((_OWORD *)v178 + 2);
        *((void *)v171 + 10) = *((void *)v178 + 10);
        *((_OWORD *)v171 + 3) = v181;
        *((_OWORD *)v171 + 4) = v180;
        *((_OWORD *)v171 + 2) = v182;
        *(_OWORD *)unint64_t v178 = v354;
        *((void *)v178 + 10) = v359;
        *((_OWORD *)v178 + 4) = v358;
        *((_OWORD *)v178 + 3) = v357;
        *((_OWORD *)v178 + 2) = v356;
        *((_OWORD *)v178 + 1) = v355;
      }
      else if (v170 <= (int)v169 + 2)
      {
        int v172 = v169 + 2;
      }
      else
      {
        int v172 = v170;
      }
      ++v169;
      v168 += 3;
      int v170 = v172;
      if (v169 == v156) {
        goto LABEL_187;
      }
    }
  }
  uint64_t v231 = (int)v156;
  uint64_t v232 = (char *)malloc_type_malloc(36 * (int)v156, 0x1954683BuLL);
  if (v232)
  {
    v233 = v232;
    int v234 = v326;
    if ((int)v156 <= 0)
    {
      sub_20B08DCA8((uint64_t)v232, 0, (3 * v156 - 1), 0, 0x26065CAu);
    }
    else
    {
      uint64_t v235 = 0;
      uint64_t v236 = v232 + 8;
      float32x4_t v237 = v336;
      do
      {
        uint64_t v238 = 0;
        float32x4_t v239 = v236;
        do
        {
          int v240 = v237[v238];
          if (v238 == 2) {
            uint64_t v241 = 0;
          }
          else {
            uint64_t v241 = v238 + 1;
          }
          uint64_t v242 = v238 + 1;
          int v243 = v336[3 * v235 + v241];
          if (v240 >= v243) {
            int v244 = v336[3 * v235 + v241];
          }
          else {
            int v244 = v240;
          }
          if (v240 > v243) {
            int v243 = v240;
          }
          *(v239 - 2) = v244;
          *(v239 - 1) = v243;
          *float32x4_t v239 = v235;
          v239 += 3;
          uint64_t v238 = v242;
        }
        while (v242 != 3);
        ++v235;
        v237 += 3;
        v236 += 9;
      }
      while (v235 != v156);
      int v245 = 3 * v156;
      sub_20B08DCA8((uint64_t)v232, 0, (3 * v156 - 1), 0, 0x26065CAu);
      int v246 = 0;
      if (3 * (int)v156 <= 2) {
        uint64_t v247 = 2;
      }
      else {
        uint64_t v247 = v245;
      }
      int v248 = 1;
      uint64_t v249 = 3;
      do
      {
        if (v233[3 * v246] != v233[v249])
        {
          sub_20B08DCA8((uint64_t)v233, v246, (v248 - 1), 1, 0x26065CAu);
          int v246 = v248;
        }
        v249 += 3;
        ++v248;
      }
      while (v247 + 2 * v247 != v249);
      uint64_t v250 = 0;
      int v251 = 0;
      uint64_t v252 = v247 - 1;
      uint64_t v253 = v233 + 4;
      do
      {
        unint64_t v254 = &v233[3 * v251];
        if (*v254 != *(v253 - 1) || v254[1] != *v253)
        {
          sub_20B08DCA8((uint64_t)v233, v251, v250, 2, 0x26065CAu);
          int v251 = v250 + 1;
        }
        ++v250;
        v253 += 3;
      }
      while (v252 != v250);
      uint64_t v255 = 0;
      if (v245 <= 1) {
        uint64_t v256 = 1;
      }
      else {
        uint64_t v256 = v245;
      }
      int v234 = v326;
      uint64_t v231 = (int)v156;
      do
      {
        uint64_t v257 = &v233[3 * v255];
        int v258 = *v257;
        int v259 = v257[1];
        int v260 = v257[2];
        id v261 = &v336[3 * v260];
        int v262 = *v261;
        v263 = v261 + 1;
        int v264 = v261[1];
        if (*v261 == v258 || v262 == v259)
        {
          if (v264 == v258 || v264 == v259)
          {
            uint64_t v267 = 0;
          }
          else
          {
            int v262 = v261[2];
            uint64_t v267 = 2;
            v263 = &v336[3 * v260];
          }
        }
        else
        {
          v263 = v261 + 2;
          int v262 = v261[1];
          uint64_t v267 = 1;
        }
        uint64_t v268 = &v333[88 * v260];
        ++v255;
        if (*(_DWORD *)&v268[4 * v267] == -1 && v255 < v245)
        {
          int v270 = &v233[3 * (int)v255];
          if (v258 == *v270 && v259 == v270[1])
          {
            int v271 = *v263;
            uint64_t v272 = (int)v255;
            int v273 = v255;
            do
            {
              int v274 = v233[3 * v272 + 2];
              unint64_t v275 = &v336[3 * v274];
              int v276 = *v275;
              __int32 v277 = v275 + 1;
              int v278 = v275[1];
              if (*v275 == v258 || v276 == v259)
              {
                if (v278 == v258 || v278 == v259)
                {
                  uint64_t v281 = 0;
                }
                else
                {
                  int v276 = v275[2];
                  uint64_t v281 = 2;
                  __int32 v277 = &v336[3 * v274];
                }
              }
              else
              {
                __int32 v277 = v275 + 2;
                uint64_t v281 = 1;
                int v276 = v275[1];
              }
              if (v262 == *v277
                && ((v282 = *(_DWORD *)&v333[88 * v274 + 4 * v281], v271 == v276) ? (BOOL v283 = v282 == -1) : (BOOL v283 = 0),
                    v283))
              {
                char v285 = 0;
                int v284 = 1;
              }
              else
              {
                int v284 = 0;
                ++v273;
                char v285 = 1;
              }
              __int32 v286 = &v233[3 * v273];
              if (v273 >= v245 || v258 != *v286) {
                break;
              }
              uint64_t v272 = v273;
              char v287 = v285 ^ 1;
              if (v259 != v286[1]) {
                char v287 = 1;
              }
            }
            while ((v287 & 1) == 0);
            if (v284)
            {
              int v288 = v286[2];
              *(_DWORD *)&v268[4 * v267] = v288;
              *(_DWORD *)&v333[88 * v288 + 4 * v281] = v260;
            }
          }
        }
      }
      while (v255 != v256);
    }
    free(v233);
  }
  else
  {
    int v234 = v326;
    if ((int)v156 >= 1)
    {
      for (uint64_t m = 0; m != v156; ++m)
      {
        unint64_t v290 = 0;
        unint64_t v291 = &v148[88 * m];
        uint64_t v292 = (3 * m);
        do
        {
          if (*(_DWORD *)&v291[4 * v290] == -1)
          {
            unsigned int v294 = 0;
            uint64_t v295 = 0;
            unint64_t v293 = v290 + 1;
            if (v290 >= 2) {
              int v296 = 0;
            }
            else {
              int v296 = v290 + 1;
            }
            int v297 = v336[(v296 + v292)];
            uint64_t v298 = v148;
            while (m == v295)
            {
LABEL_308:
              ++v295;
              v298 += 88;
              v294 += 3;
              if (v295 == v156) {
                goto LABEL_311;
              }
            }
            unint64_t v299 = 0;
            while (1)
            {
              unint64_t v300 = v299 + 1;
              int v301 = v299 >= 2 ? 0 : v299 + 1;
              if (v336[v290 + v292] == v336[(v301 + 3 * v295)] && v297 == v336[v294 + v299]) {
                break;
              }
              ++v299;
              if (v300 == 3) {
                goto LABEL_308;
              }
            }
            *(_DWORD *)&v291[4 * v290] = v295;
            *(_DWORD *)&v298[4 * v299] = m;
          }
          else
          {
            unint64_t v293 = v290 + 1;
          }
LABEL_311:
          unint64_t v290 = v293;
        }
        while (v293 != 3);
      }
    }
  }
  unint64_t v302 = malloc_type_malloc(72 * v156, 0x101004035137979uLL);
  int v303 = malloc_type_malloc(12 * v231, 0x21F0CDC0uLL);
  unint64_t v304 = v303;
  if (v302) {
    BOOL v305 = v303 == 0;
  }
  else {
    BOOL v305 = 1;
  }
  if (v305)
  {
    if (v302) {
      free(v302);
    }
    if (v304) {
      free(v304);
    }
    free(v336);
    int v54 = v333;
    goto LABEL_347;
  }
  int v306 = sub_20B08C528((uint64_t)v333, (uint64_t)v302, (uint64_t)v303, (uint64_t)v336, v156);
  unint64_t v307 = malloc_type_malloc(40 * v234, 0x10000400A747E1EuLL);
  if (!v307)
  {
    free(v336);
    free(v333);
    free(v302);
    int v54 = v304;
    goto LABEL_347;
  }
  uint64_t v308 = (uint64_t)v307;
  bzero(v307, 40 * v234);
  if (v234 >= 1)
  {
    uint64_t v309 = v234;
    std::string v310 = (_OWORD *)(v308 + 16);
    do
    {
      *(v310 - 1) = xmmword_20B1E7450;
      _OWORD *v310 = xmmword_20B1E7460;
      std::string v310 = (_OWORD *)((char *)v310 + 40);
      --v309;
    }
    while (v309);
  }
  int v311 = sub_20B08C6AC(v308, (uint64_t)v333, (int *)v302, v306, (uint64_t)v336, a1, v9);
  free(v302);
  free(v304);
  if (!v311)
  {
    free(v333);
    free(v336);
    int v54 = (void *)v308;
    goto LABEL_347;
  }
  unint64_t v312 = (void *)v308;
  sub_20B08D3F8(v308, (uint64_t)v333, (uint64_t)v336, a1, v156, v328);
  free(v333);
  free(v336);
  int v313 = 0;
  uint64_t v314 = 0;
  do
  {
    int v315 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 8))(a1, v314);
    if ((v315 - 3) <= 1)
    {
      int v317 = v315;
      uint64_t v318 = 0;
      uint64_t v319 = (uint64_t)v312 + 40 * v313 + 20;
      do
      {
        *(void *)&long long v354 = *(void *)(v319 - 20);
        DWORD2(v354) = *(_DWORD *)(v319 - 12);
        v353[0] = *(_DWORD *)(v319 - 4);
        v353[1] = *(_DWORD *)v319;
        v353[2] = *(_DWORD *)(v319 + 4);
        uint64_t v320 = *(void *)a1;
        uint64_t v321 = *(void (**)(uint64_t, long long *, _DWORD *, void, uint64_t, uint64_t, float, float))(*(void *)a1 + 48);
        if (v321)
        {
          v321(a1, &v354, v353, *(unsigned int *)(v319 + 16), v314, v318, *(float *)(v319 - 8), *(float *)(v319 + 8));
          uint64_t v320 = *(void *)a1;
        }
        uint64_t v322 = *(void (**)(uint64_t, long long *, uint64_t, uint64_t, __n128))(v320 + 40);
        if (v322)
        {
          if (*(_DWORD *)(v319 + 16) == 1) {
            v316.n128_f32[0] = 1.0;
          }
          else {
            v316.n128_f32[0] = -1.0;
          }
          v322(a1, &v354, v314, v318, v316);
        }
        uint64_t v318 = (v318 + 1);
        v319 += 40;
      }
      while (v317 != v318);
      v313 += v318;
    }
    uint64_t v314 = (v314 + 1);
  }
  while (v314 != v324);
  free(v312);
  return 1;
}

uint64_t sub_20B08C528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 < 1) {
    return 0;
  }
  unsigned int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v9 = a1;
  uint64_t v22 = a5;
  uint64_t v28 = a1;
  do
  {
    uint64_t v10 = 0;
    unsigned int v23 = v5;
    uint64_t v26 = a1 + 88 * v6;
    uint64_t v27 = a4 + 4 * v5;
    uint64_t v11 = (unsigned int *)(v26 + 76);
    uint64_t v12 = 0xFFFFFFFF00000000;
    do
    {
      unsigned int v13 = *v11;
      if ((*v11 & 4) == 0)
      {
        uint64_t v14 = v9 + 8 * v10;
        if (!*(void *)(v14 + 16))
        {
          int v15 = *(_DWORD *)(v27 + 4 * v10);
          uint64_t v16 = a2 + 24 * (int)v7;
          *(void *)(v14 + 16) = v16;
          *(_DWORD *)(v16 + 16) = v15;
          *(_DWORD *)(v16 + 20) = (v13 >> 3) & 1;
          *(_DWORD *)uint64_t v16 = 0;
          *(void *)(v16 + 8) = a3 + 4 * v8;
          uint64_t v17 = *(void *)(v14 + 16);
          *(_DWORD *)(*(void *)(v17 + 8) + 4 * (int)(*(_DWORD *)v17)++) = v6;
          unsigned int v18 = *(_DWORD *)(v9 + 4 * v10);
          uint64_t v19 = v12 >> 32;
          if (!v10) {
            uint64_t v19 = 2;
          }
          unsigned int v20 = *(_DWORD *)(v26 + 4 * v19);
          if ((v18 & 0x80000000) == 0)
          {
            sub_20B08DE5C(a4, v28, v18, v17);
            uint64_t v17 = *(void *)(v14 + 16);
          }
          if ((v20 & 0x80000000) == 0)
          {
            sub_20B08DE5C(a4, v28, v20, v17);
            uint64_t v17 = *(void *)(v14 + 16);
          }
          uint64_t v7 = (v7 + 1);
          v8 += *(_DWORD *)v17;
        }
      }
      ++v10;
      v12 += 0x100000000;
    }
    while (v10 != 3);
    ++v6;
    unsigned int v5 = v23 + 3;
    v9 += 88;
    a1 = v28;
  }
  while (v6 != v22);
  return v7;
}

uint64_t sub_20B08C6AC(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v264 = *MEMORY[0x263EF8340];
  if (a4 < 1) {
    return 1;
  }
  unsigned int v9 = 0;
  uint64_t v10 = a4;
  uint64_t v230 = a4;
  uint64_t v11 = a3;
  do
  {
    int v13 = *v11;
    v11 += 6;
    unsigned int v12 = v13;
    if ((int)v9 <= v13) {
      unsigned int v9 = v12;
    }
    --v10;
  }
  while (v10);
  if (!v9) {
    return 1;
  }
  uint64_t v14 = (char *)malloc_type_malloc(40 * v9, 0x10000400A747E1EuLL);
  int v15 = (void **)malloc_type_malloc(16 * v9, 0x101004082113244uLL);
  uint64_t v16 = (int *)malloc_type_malloc(4 * v9, 0x100004052888210uLL);
  uint64_t v17 = v16;
  if (v14) {
    BOOL v18 = v15 == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18 && v16 != 0)
  {
    uint64_t v21 = 0;
    unsigned __int32 v229 = v15 + 1;
    float v22 = 1.0;
    uint64_t v259 = a2;
    uint64_t v235 = a1;
    uint64_t v236 = v14;
    int v234 = v15;
    while (1)
    {
      uint64_t v232 = v21;
      unsigned int v23 = &a3[6 * v21];
      if (*v23 < 1) {
        goto LABEL_199;
      }
      uint64_t v24 = 0;
      int v25 = 0;
      uint64_t v26 = &a3[6 * v21];
      uint64_t v238 = v26;
      float32x4_t v239 = (uint64_t *)(v26 + 2);
      v233 = v26 + 4;
      float32x4_t v237 = v26 + 5;
      do
      {
        unsigned int v245 = v25;
        int v27 = *(_DWORD *)(*v239 + 4 * v24);
        uint64_t v241 = v24;
        if (*(int **)(a2 + 88 * v27 + 16) == v23)
        {
          int v29 = 0;
          uint64_t v28 = a5;
        }
        else
        {
          uint64_t v28 = a5;
          if (*(int **)(a2 + 88 * v27 + 24) == v23)
          {
            int v29 = 1;
          }
          else if (*(int **)(a2 + 88 * v27 + 32) == v23)
          {
            int v29 = 2;
          }
          else
          {
            int v29 = -1;
          }
        }
        int v240 = v29;
        int v30 = *(_DWORD *)(v28 + 4 * (v29 + 3 * v27));
        float v263 = 0.0;
        uint64_t v262 = 0;
        int v242 = v27;
        (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)a6 + 24))(a6, &v262, (v30 >> 2), v30 & 3);
        uint64_t v31 = v262;
        float v32 = v263;
        int32x2_t v33 = (float *)(a2 + 88 * v242);
        float v34 = v33[10];
        float v35 = v33[11];
        float v36 = v33[12];
        float v37 = (float)((float)(v34 * *(float *)&v262) + (float)(v35 * *((float *)&v262 + 1))) + (float)(v36 * v263);
        float v38 = v34 - (float)(v37 * *(float *)&v262);
        float v39 = v35 - (float)(v37 * *((float *)&v262 + 1));
        float v40 = v36 - (float)(v37 * v263);
        float v41 = fabsf(v39);
        float v42 = fabsf(v40);
        if (fabsf(v38) > 1.1755e-38 || v41 > 1.1755e-38 || v42 > 1.1755e-38)
        {
          float v45 = v22 / sqrtf((float)((float)(v39 * v39) + (float)(v38 * v38)) + (float)(v40 * v40));
          float v38 = v45 * v38;
          float v39 = v45 * v39;
          float v40 = v45 * v40;
        }
        float v46 = v33[13];
        float v47 = v33[14];
        float v48 = v33[15];
        float v49 = (float)((float)(v46 * *(float *)&v262) + (float)(v47 * *((float *)&v262 + 1))) + (float)(v48 * v263);
        float v50 = v46 - (float)(v49 * *(float *)&v262);
        float v51 = v47 - (float)(v49 * *((float *)&v262 + 1));
        float v52 = v48 - (float)(v49 * v263);
        float v53 = fabsf(v51);
        float v54 = fabsf(v52);
        BOOL v56 = fabsf(v50) <= 1.1755e-38 && v53 <= 1.1755e-38 && v54 <= 1.1755e-38;
        int v25 = v245;
        if (!v56)
        {
          float v57 = v22 / sqrtf((float)((float)(v51 * v51) + (float)(v50 * v50)) + (float)(v52 * v52));
          float v50 = v57 * v50;
          float v51 = v57 * v51;
          float v52 = v57 * v52;
        }
        int v58 = *v23;
        if (*v23 < 1)
        {
          int v60 = 0;
        }
        else
        {
          uint64_t v59 = 0;
          int v60 = 0;
          int v61 = *(_DWORD *)(a2 + 88 * v242 + 72);
          uint64_t v62 = *v239;
          do
          {
            int v63 = *(_DWORD *)(v62 + 4 * v59);
            uint64_t v64 = a2 + 88 * v63;
            float v65 = *(float *)(v64 + 40);
            float v66 = *(float *)(v64 + 44);
            float v67 = *(float *)(v64 + 48);
            float v68 = (float)((float)(v65 * *(float *)&v31) + (float)(v66 * *((float *)&v31 + 1))) + (float)(v67 * v32);
            float v69 = v65 - (float)(v68 * *(float *)&v31);
            float v70 = v66 - (float)(v68 * *((float *)&v31 + 1));
            float v71 = v67 - (float)(v68 * v32);
            float v72 = fabsf(v70);
            float v73 = fabsf(v71);
            if (fabsf(v69) > 1.1755e-38 || v72 > 1.1755e-38 || v73 > 1.1755e-38)
            {
              float v76 = v22 / sqrtf((float)((float)(v70 * v70) + (float)(v69 * v69)) + (float)(v71 * v71));
              float v69 = v76 * v69;
              float v70 = v76 * v70;
              float v71 = v76 * v71;
            }
            float v77 = *(float *)(v64 + 52);
            float v78 = *(float *)(v64 + 56);
            float v79 = *(float *)(v64 + 60);
            float v80 = (float)((float)(v77 * *(float *)&v31) + (float)(v78 * *((float *)&v31 + 1))) + (float)(v79 * v32);
            float v81 = v77 - (float)(v80 * *(float *)&v31);
            float v82 = v78 - (float)(v80 * *((float *)&v31 + 1));
            float v83 = v79 - (float)(v80 * v32);
            float v84 = fabsf(v82);
            float v85 = fabsf(v83);
            if (fabsf(v81) > 1.1755e-38 || v84 > 1.1755e-38 || v85 > 1.1755e-38)
            {
              float v88 = v22 / sqrtf((float)((float)(v82 * v82) + (float)(v81 * v81)) + (float)(v83 * v83));
              float v81 = v88 * v81;
              float v82 = v88 * v82;
              float v83 = v88 * v83;
            }
            if (((*(_DWORD *)(a2 + 88 * v63 + 76) | *(_DWORD *)(a2 + 88 * v242 + 76)) & 4) != 0
              || v61 == *(_DWORD *)(v64 + 72)
              || ((float v89 = (float)((float)(v81 * v50) + (float)(v82 * v51)) + (float)(v83 * v52),
                   (float)((float)((float)(v69 * v38) + (float)(v70 * v39)) + (float)(v71 * v40)) > a7)
                ? (BOOL v90 = v89 <= a7)
                : (BOOL v90 = 1),
                  !v90))
            {
              v17[v60] = v63;
              int v58 = *v23;
              ++v60;
            }
            ++v59;
          }
          while (v59 < v58);
          if (v60 > 1)
          {
            sub_20B08DFB0((uint64_t)v17, 0, v60 - 1, 0x26065CAu);
            int v25 = v245;
          }
        }
        if (v25 < 1)
        {
          size_t v94 = 4 * v60;
          unint64_t v95 = malloc_type_malloc(v94, 0x100004052888210uLL);
          if (!v95)
          {
LABEL_203:
            free(v15);
            free(v17);
            unsigned int v20 = v14;
            goto LABEL_204;
          }
          unsigned int v91 = 0;
LABEL_88:
          int v96 = &v15[2 * (int)v245];
          *(_DWORD *)int v96 = v60;
          v96[1] = v95;
          memcpy(v95, v17, v94);
          *(void *)&long long v98 = 0;
          if (v60 < 1)
          {
            float v100 = 0.0;
            float v103 = 0.0;
            float v104 = 0.0;
            float v105 = 0.0;
            float v106 = 0.0;
            float v107 = 0.0;
            *(void *)&long long v97 = 0;
            unsigned int v109 = v245;
          }
          else
          {
            int v99 = *v233;
            float v100 = 0.0;
            uint64_t v101 = v60;
            uint64_t v102 = v17;
            float v103 = 0.0;
            float v104 = 0.0;
            float v105 = 0.0;
            float v106 = 0.0;
            float v107 = 0.0;
            *(void *)&long long v97 = 0;
            uint64_t v108 = a5;
            unsigned int v109 = v245;
            int v243 = *v233;
            do
            {
              uint64_t v111 = *v102++;
              uint64_t v110 = v111;
              if ((*(unsigned char *)(a2 + 88 * (int)v111 + 76) & 4) == 0)
              {
                uint64_t v112 = 3 * (int)v110;
                long long v258 = v98;
                float v257 = v100;
                float v256 = v106;
                float v255 = v107;
                long long v254 = v97;
                uint64_t v253 = v102;
                if (*(_DWORD *)(v108 + 4 * v112) == v99)
                {
                  BOOL v113 = 0;
                  int v114 = 0;
                  BOOL v115 = 1;
                }
                else if (*(_DWORD *)(v108 + 12 * v110 + 4) == v99)
                {
                  BOOL v115 = 1;
                  BOOL v113 = 1;
                  int v114 = 1;
                }
                else
                {
                  BOOL v115 = *(_DWORD *)(v108 + 4 * v112 + 8) != v99;
                  BOOL v113 = *(_DWORD *)(v108 + 4 * v112 + 8) == v99;
                  if (*(_DWORD *)(v108 + 4 * v112 + 8) == v99) {
                    int v114 = 2;
                  }
                  else {
                    int v114 = -1;
                  }
                }
                uint64_t v116 = v112 + v114;
                int v117 = *(_DWORD *)(v108 + 4 * v116);
                float v263 = 0.0;
                uint64_t v262 = 0;
                (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)a6 + 24))(a6, &v262, (v117 >> 2), v117 & 3);
                uint64_t v118 = v262;
                float v119 = v263;
                int v120 = (float *)(v259 + 88 * (int)v110);
                float v121 = v120[10];
                float v122 = v120[11];
                float v123 = v120[12];
                float v124 = (float)((float)(v121 * *(float *)&v262) + (float)(v122 * *((float *)&v262 + 1)))
                     + (float)(v123 * v263);
                float v125 = v121 - (float)(v124 * *(float *)&v262);
                float v126 = v122 - (float)(v124 * *((float *)&v262 + 1));
                float v127 = v123 - (float)(v124 * v263);
                float v128 = fabsf(v126);
                float v129 = fabsf(v127);
                if (fabsf(v125) > 1.1755e-38 || v128 > 1.1755e-38 || v129 > 1.1755e-38)
                {
                  float v132 = v22 / sqrtf((float)((float)(v126 * v126) + (float)(v125 * v125)) + (float)(v127 * v127));
                  float v125 = v132 * v125;
                  float v126 = v132 * v126;
                  float v127 = v132 * v127;
                }
                float v133 = v120[13];
                float v134 = v120[14];
                float v135 = v120[15];
                float v136 = (float)((float)(v133 * *(float *)&v262) + (float)(v134 * *((float *)&v262 + 1)))
                     + (float)(v135 * v263);
                float v137 = v133 - (float)(v136 * *(float *)&v262);
                float v138 = v134 - (float)(v136 * *((float *)&v262 + 1));
                float v139 = v135 - (float)(v136 * v263);
                float v140 = fabsf(v138);
                float v141 = fabsf(v139);
                BOOL v143 = fabsf(v137) <= 1.1755e-38 && v140 <= 1.1755e-38 && v141 <= 1.1755e-38;
                float v251 = v126;
                float v252 = v127;
                float v250 = v125;
                if (v143)
                {
                  float v247 = v133 - (float)(v136 * *(float *)&v262);
                  float v248 = v138;
                }
                else
                {
                  float v144 = v22 / sqrtf((float)((float)(v138 * v138) + (float)(v137 * v137)) + (float)(v139 * v139));
                  float v247 = v144 * v137;
                  float v248 = v144 * v138;
                  float v139 = v144 * v139;
                }
                float v249 = v139;
                if (v115) {
                  int v145 = v114 + 1;
                }
                else {
                  int v145 = 0;
                }
                int v146 = *(_DWORD *)(a5 + 4 * (v145 + (int)v112));
                int v147 = *(_DWORD *)(a5 + 4 * v116);
                int v148 = v114 - 1;
                if (!v113) {
                  int v148 = 2;
                }
                int v149 = *(_DWORD *)(a5 + 4 * (v148 + (int)v112));
                float v263 = 0.0;
                uint64_t v262 = 0;
                uint64_t v150 = a6;
                (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)a6 + 16))(a6, &v262, (v149 >> 2), v149 & 3);
                uint64_t v151 = v262;
                float v246 = v263;
                float v263 = 0.0;
                uint64_t v262 = 0;
                (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)v150 + 16))(v150, &v262, (v147 >> 2), v147 & 3);
                uint64_t v152 = v262;
                float v153 = v263;
                float v263 = 0.0;
                uint64_t v262 = 0;
                (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)v150 + 16))(v150, &v262, (v146 >> 2), v146 & 3);
                float v154 = (float)((float)((float)(*(float *)&v151 - *(float *)&v152) * *(float *)&v118)
                             + (float)((float)(*((float *)&v151 + 1) - *((float *)&v152 + 1)) * *((float *)&v118 + 1)))
                     + (float)((float)(v246 - v153) * v119);
                float v155 = (float)(*(float *)&v151 - *(float *)&v152) - (float)(v154 * *(float *)&v118);
                float v156 = (float)(*((float *)&v151 + 1) - *((float *)&v152 + 1)) - (float)(v154 * *((float *)&v118 + 1));
                float v157 = (float)(v246 - v153) - (float)(v154 * v119);
                float v158 = fabsf(v156);
                float v159 = fabsf(v157);
                if (fabsf(v155) <= 1.1755e-38 && v158 <= 1.1755e-38 && v159 <= 1.1755e-38)
                {
                  a2 = v259;
                  float v22 = 1.0;
                }
                else
                {
                  float v22 = 1.0;
                  float v162 = 1.0 / sqrtf((float)((float)(v156 * v156) + (float)(v155 * v155)) + (float)(v157 * v157));
                  float v155 = v162 * v155;
                  float v156 = v162 * v156;
                  float v157 = v162 * v157;
                  a2 = v259;
                }
                int v99 = v243;
                uint64_t v102 = v253;
                float v163 = (float)((float)((float)(*(float *)&v262 - *(float *)&v152) * *(float *)&v118)
                             + (float)((float)(*((float *)&v262 + 1) - *((float *)&v152 + 1)) * *((float *)&v118 + 1)))
                     + (float)((float)(v263 - v153) * v119);
                float v164 = (float)(*(float *)&v262 - *(float *)&v152) - (float)(v163 * *(float *)&v118);
                float v165 = (float)(*((float *)&v262 + 1) - *((float *)&v152 + 1)) - (float)(v163 * *((float *)&v118 + 1));
                float v166 = (float)(v263 - v153) - (float)(v163 * v119);
                float v167 = fabsf(v165);
                float v168 = fabsf(v166);
                if (fabsf(v164) > 1.1755e-38 || v167 > 1.1755e-38 || v168 > 1.1755e-38)
                {
                  float v171 = v22 / sqrtf((float)((float)(v165 * v165) + (float)(v164 * v164)) + (float)(v166 * v166));
                  float v164 = v171 * v164;
                  float v165 = v171 * v165;
                  float v166 = v171 * v166;
                }
                float v172 = (float)((float)(v166 * v157) + (float)(v165 * v156)) + (float)(v164 * v155);
                float v173 = -1.0;
                if (v172 >= -1.0) {
                  float v173 = v172;
                }
                if (v172 <= v22) {
                  float v174 = v173;
                }
                else {
                  float v174 = v22;
                }
                float v175 = acos(v174);
                float v100 = v257 + (float)(v250 * v175);
                float v103 = v103 + (float)(v251 * v175);
                float v104 = v104 + (float)(v252 * v175);
                float v105 = v105 + (float)(v247 * v175);
                float v106 = v256 + (float)(v248 * v175);
                float v107 = v255 + (float)(v249 * v175);
                *((void *)&v98 + 1) = *((void *)&v258 + 1);
                *(float32x2_t *)&long long v98 = vmla_n_f32(*(float32x2_t *)&v258, *(float32x2_t *)(a2 + 88 * (int)v110 + 64), v175);
                long long v97 = v254;
                *(float *)&long long v97 = *(float *)&v254 + v175;
                uint64_t v108 = a5;
                unsigned int v109 = v245;
              }
              --v101;
            }
            while (v101);
          }
          float v176 = fabsf(v103);
          float v177 = fabsf(v104);
          BOOL v179 = fabsf(v100) <= 1.1755e-38 && v176 <= 1.1755e-38 && v177 <= 1.1755e-38;
          uint64_t v14 = v236;
          if (!v179)
          {
            float v180 = v22 / sqrtf((float)((float)(v104 * v104) + (float)(v103 * v103)) + (float)(v100 * v100));
            float v100 = v180 * v100;
            float v103 = v180 * v103;
            float v104 = v180 * v104;
          }
          float v181 = fabsf(v106);
          float v182 = fabsf(v107);
          BOOL v184 = fabsf(v105) <= 1.1755e-38 && v181 <= 1.1755e-38 && v182 <= 1.1755e-38;
          int v15 = v234;
          a1 = v235;
          if (!v184)
          {
            float v185 = v22 / sqrtf((float)((float)(v107 * v107) + (float)(v106 * v106)) + (float)(v105 * v105));
            float v105 = v185 * v105;
            float v106 = v185 * v106;
            float v107 = v185 * v107;
          }
          if (*(float *)&v97 > 0.0) {
            *(float32x2_t *)&long long v98 = vdiv_f32(*(float32x2_t *)&v98, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v97, 0));
          }
          uint64_t v186 = (float *)&v236[40 * v109];
          float *v186 = v100;
          v186[1] = v103;
          v186[2] = v104;
          *((_DWORD *)v186 + 3) = v98;
          v186[4] = v105;
          v186[5] = v106;
          v186[6] = v107;
          v186[7] = *((float *)&v98 + 1);
          *((void *)v186 + 4) = 0;
          int v25 = v109 + 1;
        }
        else
        {
          unsigned int v91 = 0;
          while (1)
          {
            if (v60 == LODWORD(v15[2 * v91]))
            {
              if (v60 < 1) {
                break;
              }
              for (unsigned int i = 0; (int)i < v60; i += v17[i] == *((_DWORD *)v15[2 * v91 + 1] + i))
              {
                BOOL v93 = v17[i] == *((_DWORD *)v15[2 * v91 + 1] + i);
                if (v17[i] != *((_DWORD *)v15[2 * v91 + 1] + i)) {
                  break;
                }
              }
              if (v93) {
                break;
              }
            }
            if ((int)++v91 >= v25)
            {
              size_t v94 = 4 * v60;
              unint64_t v95 = malloc_type_malloc(v94, 0x100004052888210uLL);
              if (v95) {
                goto LABEL_88;
              }
              uint64_t v226 = v245;
              float v227 = v15 + 1;
              do
              {
                uint64_t v228 = *v227;
                v227 += 2;
                free(v228);
                --v226;
              }
              while (v226);
              goto LABEL_203;
            }
          }
        }
        uint64_t v187 = *(_DWORD *)(a2 + 88 * v242 + 80) + *(unsigned __int8 *)(a2 + 88 * v242 + v240 + 84);
        uint64_t v188 = a1 + 40 * v187;
        float v189 = &v14[40 * v91];
        if (*(_DWORD *)(v188 + 32) != 1)
        {
          long long v208 = *(_OWORD *)v189;
          long long v209 = *((_OWORD *)v189 + 1);
          *(void *)(v188 + 32) = *((void *)v189 + 4);
          *(_OWORD *)uint64_t v188 = v208;
          *(_OWORD *)(v188 + 16) = v209;
          int v210 = 1;
          unsigned int v23 = v238;
          uint64_t v211 = v241;
          goto LABEL_195;
        }
        unsigned int v190 = v91;
        uint64_t v191 = a1 + 40 * (int)v187;
        float v192 = *(float *)(v191 + 12);
        float32x2_t v193 = (float *)&v14[40 * v91];
        float v194 = v193[3];
        float v195 = *(float *)(v191 + 28);
        float v196 = v193[7];
        if (v192 != v194)
        {
          float v197 = *(float *)v188;
          float v198 = *(float *)v189;
          unsigned int v23 = v238;
LABEL_182:
          float v197 = v197 + v198;
          float v199 = *((float *)v189 + 1) + *(float *)(v188 + 4);
          float v200 = *((float *)v189 + 2) + *(float *)(v188 + 8);
          float v212 = fabsf(v199);
          float v213 = fabsf(v200);
          if (fabsf(v197) > 1.1755e-38 || v212 > 1.1755e-38 || v213 > 1.1755e-38)
          {
            float v216 = v22 / sqrtf((float)((float)(v197 * v197) + (float)(v199 * v199)) + (float)(v200 * v200));
            float v197 = v216 * v197;
            float v199 = v216 * v199;
            float v200 = v216 * v200;
          }
          float v192 = (float)(v194 + v192) * 0.5;
          float v195 = (float)(v196 + v195) * 0.5;
          float v217 = (float32x2_t *)(a1 + 40 * (int)v187);
          float v218 = (float32x2_t *)&v14[40 * v190];
          float32x2_t v205 = vadd_f32(v218[2], v217[2]);
          float v207 = v218[3].f32[0] + v217[3].f32[0];
          if (fabsf(v205.f32[0]) > 1.1755e-38
            || (v219.i32[1] = v205.i32[1],
                v219.f32[0] = v218[3].f32[0] + v217[3].f32[0],
                int8x8_t v220 = vmvn_s8((int8x8_t)vcgt_f32(vabs_f32(v219), (float32x2_t)0x80000000800000)),
                (v220.i8[4] & 1) == 0)
            || (v220.i8[0] & 1) == 0)
          {
            float v221 = v22 / sqrtf(vaddv_f32(vmul_f32(v205, v205)) + (float)(v207 * v207));
            float32x2_t v205 = vmul_n_f32(v205, v221);
            float v207 = v221 * v207;
          }
          goto LABEL_194;
        }
        float v197 = *(float *)v188;
        float v198 = *(float *)v189;
        unsigned int v23 = v238;
        if (v195 != v196) {
          goto LABEL_182;
        }
        float v199 = *(float *)(v188 + 4);
        float v200 = *(float *)(v188 + 8);
        BOOL v201 = v197 == v198 && v199 == *((float *)v189 + 1);
        if (!v201 || v200 != *((float *)v189 + 2)) {
          goto LABEL_182;
        }
        float v203 = (float32x2_t *)(a1 + 40 * (int)v187);
        float v204 = (float32x2_t *)&v14[40 * v190];
        float32x2_t v205 = v203[2];
        int8x8_t v206 = vmvn_s8((int8x8_t)vceq_f32(v205, v204[2]));
        if (v206.i8[0]) {
          goto LABEL_182;
        }
        if (v206.i8[4]) {
          goto LABEL_182;
        }
        float v207 = v203[3].f32[0];
        if (v207 != v204[3].f32[0]) {
          goto LABEL_182;
        }
LABEL_194:
        uint64_t v211 = v241;
        *(float *)uint64_t v188 = v197;
        *(float *)(v188 + 4) = v199;
        *(float *)(v188 + 8) = v200;
        *(float *)(v188 + 12) = v192;
        *(float32x2_t *)(v188 + 16) = v205;
        *(float *)(v188 + 24) = v207;
        *(float *)(v188 + 28) = v195;
        int v210 = 2;
        *(void *)(v188 + 32) = 0;
LABEL_195:
        *(_DWORD *)(v188 + 32) = v210;
        *(_DWORD *)(a1 + 40 * (int)v187 + 36) = *v237;
        uint64_t v24 = v211 + 1;
      }
      while (v24 < *v23);
      if (v25 >= 1)
      {
        uint64_t v222 = v25;
        int v223 = v229;
        do
        {
          int v224 = *v223;
          v223 += 2;
          free(v224);
          --v222;
        }
        while (v222);
      }
LABEL_199:
      uint64_t v21 = v232 + 1;
      if (v232 + 1 == v230)
      {
        free(v15);
        free(v17);
        free(v14);
        return 1;
      }
    }
  }
  if (v14) {
    free(v14);
  }
  if (v15) {
    free(v15);
  }
  if (v17)
  {
    unsigned int v20 = v17;
LABEL_204:
    free(v20);
  }
  return 0;
}

uint64_t sub_20B08D3F8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8 = result;
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a5 < a6)
  {
    uint64_t v9 = a5;
    do
    {
      if ((*(unsigned char *)(a2 + 88 * v9 + 76) & 2) == 0)
      {
        for (uint64_t i = 0; i != 3; ++i)
        {
          if (a5 >= 1)
          {
            unsigned int v11 = 0;
            uint64_t result = *(unsigned int *)(a3 + 4 * (i + 3 * v9));
            do
              int v12 = *(_DWORD *)(a3 + 4 * v11);
            while (result != v12 && (int)++v11 < 3 * a5);
            if (result == v12)
            {
              uint64_t v14 = v8
                  + 40
                  * (*(_DWORD *)(a2 + 88 * (v11 / 3) + 80) + *(unsigned __int8 *)(a2 + 88 * (v11 / 3) + v11 % 3 + 84));
              long long v15 = *(_OWORD *)v14;
              long long v16 = *(_OWORD *)(v14 + 16);
              uint64_t result = v8 + 40 * (*(_DWORD *)(a2 + 88 * v9 + 80) + *(unsigned __int8 *)(a2 + 88 * v9 + i + 84));
              *(void *)(result + 32) = *(void *)(v14 + 32);
              *(_OWORD *)uint64_t result = v15;
              *(_OWORD *)(result + 16) = v16;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != a6);
  }
  if (a5 >= 1)
  {
    uint64_t v17 = 0;
    BOOL v18 = (unsigned __int8 *)(a2 + 84);
    uint64_t v38 = a5;
    do
    {
      if ((*(unsigned char *)(a2 + 88 * v17 + 76) & 2) != 0)
      {
        int v19 = (1 << *(unsigned char *)(a2 + 88 * v17 + 85)) | (1 << *(unsigned char *)(a2 + 88 * v17 + 84)) | (1 << *(unsigned char *)(a2 + 88 * v17 + 86));
        if ((v19 & 8) != 0) {
          unsigned int v20 = 0;
        }
        else {
          unsigned int v20 = 3;
        }
        if ((v19 & 4) == 0) {
          unsigned int v20 = 2;
        }
        if ((v19 & 2) != 0) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 1;
        }
        uint64_t v22 = a2 + 88 * v17;
        int v23 = *(_DWORD *)(v22 + 72);
        float v40 = 0.0;
        uint64_t v39 = 0;
        uint64_t v24 = ((4 * v23) >> 2);
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)a4 + 16))(a4, &v39, v24, v21);
        uint64_t v25 = v39;
        float v37 = (_DWORD *)(v22 + 80);
        int v26 = -1;
        int v27 = v18;
        float v28 = v40;
        while (1)
        {
          int v30 = *v27++;
          int v29 = v30;
          float v40 = 0.0;
          uint64_t v39 = 0;
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)a4 + 16))(a4, &v39, v24, v30 & 3);
          BOOL v31 = *(float *)&v39 == *(float *)&v25 && *((float *)&v39 + 1) == *((float *)&v25 + 1);
          if (v31 && v40 == v28) {
            break;
          }
          if (++v26 >= 2) {
            goto LABEL_37;
          }
        }
        uint64_t v33 = v8 + 40 * (*v37 + v29);
        long long v34 = *(_OWORD *)v33;
        long long v35 = *(_OWORD *)(v33 + 16);
        uint64_t v36 = v8 + 40 * (*v37 + (int)v21);
        *(void *)(v36 + 32) = *(void *)(v33 + 32);
        *(_OWORD *)uint64_t v36 = v34;
        *(_OWORD *)(v36 + 16) = v35;
      }
LABEL_37:
      ++v17;
      v18 += 88;
    }
    while (v17 != v38);
  }
  return result;
}

uint64_t sub_20B08D6A8(float a1, float a2, float a3)
{
  int v3 = (int)(float)((float)((float)(a3 - a1) * 2048.0) / (float)(a2 - a1)) & ~((int)(float)((float)((float)(a3 - a1)
                                                                                                  * 2048.0)
                                                                                          / (float)(a2 - a1)) >> 31);
  if (v3 >= 2047) {
    return 2047;
  }
  else {
    return v3;
  }
}

uint64_t sub_20B08D6D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  while (2)
  {
    uint64_t v5 = a5;
    int v6 = a4;
    uint64_t v7 = a3;
    uint64_t v8 = a2;
    uint64_t v54 = result;
    v68[2] = *MEMORY[0x263EF8340];
    uint64_t v9 = (float *)(a2 + 16 * (int)a4);
    uint64_t v66 = *(void *)v9;
    uint64_t v10 = (int)a4;
    float v67 = v9[2];
    uint64_t v64 = v66;
    float v65 = v67;
    if ((int)a4 >= (int)a5) {
      goto LABEL_10;
    }
    uint64_t v11 = a2 + 16 * (int)a4 + 16;
    uint64_t v12 = (int)a4;
    do
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      ++v12;
      do
      {
        float v15 = *(float *)(v11 + v13);
        if (*(float *)((char *)&v66 + v13) <= v15)
        {
          long long v16 = (float *)((char *)&v64 + v13);
          if (*(float *)((char *)&v64 + v13) >= v15) {
            goto LABEL_8;
          }
        }
        else
        {
          long long v16 = (float *)&v66 + v14;
        }
        *long long v16 = v15;
LABEL_8:
        ++v14;
        v13 += 4;
      }
      while (v13 != 12);
      v11 += 16;
    }
    while (v12 != (int)a5);
LABEL_10:
    float v17 = v65 - v67;
    if ((float)(*((float *)&v64 + 1) - *((float *)&v66 + 1)) <= (float)(*(float *)&v64 - *(float *)&v66)
      || (float)(*((float *)&v64 + 1) - *((float *)&v66 + 1)) <= v17)
    {
      if (v17 <= (float)(*(float *)&v64 - *(float *)&v66)) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = 2;
      }
    }
    else
    {
      uint64_t v19 = 1;
    }
    float v20 = *((float *)&v64 + v19);
    float v21 = *((float *)&v66 + v19);
    float v22 = (float)(v21 + v20) * 0.5;
    if (v22 < v20 && v22 > v21)
    {
      uint64_t v40 = a4;
      if ((int)a4 < (int)a5)
      {
        uint64_t v41 = a2 + 4 * v19;
        LODWORD(v40) = a4;
        do
        {
          do
          {
            float v42 = *(float *)(v41 + 16 * (int)v40);
            if (v42 >= v22) {
              uint64_t v40 = v40;
            }
            else {
              uint64_t v40 = (v40 + 1);
            }
          }
          while (v42 < v22 && (int)v40 < (int)a5);
          if ((int)v40 < (int)a5)
          {
            do
            {
              float v44 = *(float *)(v41 + 16 * (int)a5);
              LODWORD(a5) = a5 - (v44 >= v22);
            }
            while (v44 >= v22 && (int)v40 < (int)a5);
            if (v42 >= v22 && v44 < v22)
            {
              long long v47 = *(_OWORD *)(a2 + 16 * (int)v40);
              *(_OWORD *)(a2 + 16 * (int)v40) = *(_OWORD *)(a2 + 16 * (int)a5);
              *(_OWORD *)(a2 + 16 * (int)a5) = v47;
              uint64_t v40 = (v40 + 1);
              LODWORD(a5) = a5 - 1;
            }
          }
        }
        while ((int)v40 < (int)a5);
      }
      if (v40 == a5)
      {
        float v48 = *(float *)(a2 + 16 * (int)v40 + 4 * v19);
        LODWORD(a5) = v40 - (v48 >= v22);
        if (v48 >= v22) {
          uint64_t v49 = v40;
        }
        else {
          uint64_t v49 = (v40 + 1);
        }
        uint64_t v40 = v49;
      }
      if ((int)a5 > (int)a4) {
        uint64_t result = sub_20B08D6D4(result, a2, a3, a4);
      }
      if ((int)v40 < (int)v5)
      {
        uint64_t result = v54;
        a2 = v8;
        a3 = v7;
        a4 = v40;
        a5 = v5;
        continue;
      }
    }
    else if ((int)a4 <= (int)a5)
    {
      int v52 = a5 + 1;
      uint64_t v24 = (int)a4;
      uint64_t v50 = (int)a4;
      int v51 = a4;
      do
      {
        uint64_t v53 = *(int *)(v8 + 16 * v24 + 12);
        int v25 = *(_DWORD *)(v54 + 4 * v53);
        memset(v68, 0, 12);
        uint64_t v26 = v25 & 3;
        uint64_t v27 = (v25 >> 2);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v68, v27, v26);
        uint64_t v57 = v68[0];
        unsigned int v61 = v68[1];
        memset(v68, 0, 12);
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, v68, v27, v26);
        unsigned int v59 = v68[0];
        uint64_t v55 = *(void *)((char *)v68 + 4);
        v68[0] = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v68, v27, v26);
        if (v24 > v10)
        {
          v28.i64[0] = v57;
          v28.i64[1] = __PAIR64__(v59, v61);
          v29.i64[0] = v55;
          v29.i64[1] = v68[0];
          int v30 = v6;
          float32x4_t v56 = v29;
          float32x4_t v58 = v28;
          do
          {
            uint64_t v31 = *(int *)(v8 + 16 * v30 + 12);
            int v32 = *(_DWORD *)(v54 + 4 * v31);
            memset(v68, 0, 12);
            uint64_t v33 = v32 & 3;
            uint64_t v34 = (v32 >> 2);
            __n128 v35 = ((__n128 (*)(uint64_t, void *, uint64_t, uint64_t))*(void *)(*(void *)v7 + 16))(v7, v68, v34, v33);
            v35.n128_u64[0] = v68[0];
            v35.n128_u32[2] = v68[1];
            __n128 v62 = v35;
            memset(v68, 0, 12);
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, v68, v34, v33);
            uint64_t v60 = *(void *)((char *)v68 + 4);
            __n128 v36 = v62;
            v36.n128_u32[3] = v68[0];
            float32x4_t v63 = (float32x4_t)v36;
            v68[0] = 0;
            uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, v68, v34, v33);
            v37.i64[0] = v60;
            v37.i64[1] = v68[0];
            int8x8_t v38 = vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_f32(v58, v63), (int16x8_t)vceqq_f32(v56, v37))), 7uLL));
            int8x8_t v39 = vand_s8(v38, (int8x8_t)0x8040201008040201);
            v39.i8[0] = vaddv_s8(v39);
            v30 += (vminv_u8((uint8x8_t)v38) & 1) == 0;
          }
          while (v24 > v30 && v39.i32[0] != 255);
          uint64_t v10 = v50;
          int v6 = v51;
          if (v39.i32[0] == 255) {
            *(_DWORD *)(v54 + 4 * v53) = *(_DWORD *)(v54 + 4 * v31);
          }
        }
        ++v24;
      }
      while (v52 != v24);
    }
    return result;
  }
}

uint64_t sub_20B08DBB0(uint64_t a1, int *a2)
{
  v8[1] = *MEMORY[0x263EF8340];
  int v4 = *a2;
  v8[0] = 0;
  (*(void (**)(uint64_t, void *, void, void))(*(void *)a1 + 32))(a1, v8, (v4 >> 2), v4 & 3);
  int v5 = a2[1];
  v8[0] = 0;
  (*(void (**)(uint64_t, void *, void, void))(*(void *)a1 + 32))(a1, v8, (v5 >> 2), v5 & 3);
  int v6 = a2[2];
  v8[0] = 0;
  return (*(uint64_t (**)(uint64_t, void *, void, void))(*(void *)a1 + 32))(a1, v8, (v6 >> 2), v6 & 3);
}

uint64_t sub_20B08DCA8(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  while ((int)a3 - a2 >= 1)
  {
    uint64_t v5 = a4;
    uint64_t v6 = a3;
    uint64_t v7 = result;
    if (a3 - a2 == 1)
    {
      uint64_t v8 = result + 12 * a2;
      uint64_t v9 = result + 12 * (int)a3;
      if (*(_DWORD *)(v8 + 4 * a4) > *(_DWORD *)(v9 + 4 * a4))
      {
        uint64_t v10 = *(void *)v8;
        int v11 = *(_DWORD *)(v8 + 8);
        int v12 = *(_DWORD *)(v9 + 8);
        *(void *)uint64_t v8 = *(void *)v9;
        *(_DWORD *)(v8 + 8) = v12;
        *(void *)uint64_t v9 = v10;
        *(_DWORD *)(v9 + 8) = v11;
      }
      return result;
    }
    unsigned int v13 = a5 + __ROR4__(a5, -(char)a5) + 3;
    int v14 = *(_DWORD *)(result + 12 * (int)(v13 % ((int)a3 - a2 + 1) + a2) + 4 * a4);
    int v15 = a2;
    do
    {
      uint64_t v16 = result + 12 * v15;
      do
      {
        int v17 = *(_DWORD *)(v16 + 4 * a4);
        ++v15;
        v16 += 12;
      }
      while (v17 < v14);
      uint64_t v18 = v16 - 12;
      uint64_t v19 = result + 12 * (int)a3;
      do
      {
        int v20 = *(_DWORD *)(v19 + 4 * a4);
        LODWORD(a3) = a3 - 1;
        v19 -= 12;
      }
      while (v20 > v14);
      if (v15 - 1 <= (int)a3 + 1)
      {
        uint64_t v21 = v19 + 12;
        uint64_t v22 = *(void *)v18;
        int v24 = *(_DWORD *)(v18 + 8);
        int v23 = *(_DWORD *)(v21 + 8);
        *(void *)uint64_t v18 = *(void *)v21;
        *(_DWORD *)(v18 + 8) = v23;
        *(void *)uint64_t v21 = v22;
        *(_DWORD *)(v21 + 8) = v24;
      }
      else
      {
        --v15;
        LODWORD(a3) = a3 + 1;
      }
    }
    while (v15 <= (int)a3);
    if ((int)a3 > a2) {
      uint64_t result = sub_20B08DCA8(result);
    }
    if (v15 >= (int)v6) {
      return result;
    }
    uint64_t result = v7;
    a2 = v15;
    a3 = v6;
    a4 = v5;
    a5 = v13;
  }
  return result;
}

uint64_t sub_20B08DE5C(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = result;
  do
  {
    int v8 = *(_DWORD *)(a4 + 16);
    uint64_t v9 = (_DWORD *)(v7 + 4 * (int)(3 * a3));
    if (*v9 == v8)
    {
      int v10 = 0;
      int v11 = 0;
    }
    else if (v9[1] == v8)
    {
      int v10 = 1;
      int v11 = 1;
    }
    else
    {
      BOOL v14 = v9[2] == v8;
      int v10 = v14;
      if (v14) {
        int v11 = 2;
      }
      else {
        int v11 = -1;
      }
    }
    int v12 = (void *)(a2 + 88 * a3 + 16);
    unsigned int v13 = &v12[v11];
    if (*v13) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = a4 == 0;
    }
    if (v14) {
      break;
    }
    uint64_t v15 = a2 + 88 * a3;
    unsigned int v18 = *(_DWORD *)(v15 + 76);
    int v17 = (unsigned int *)(v15 + 76);
    unsigned int v16 = v18;
    if ((v18 & 4) != 0 && !*v12 && !*(void *)(a2 + 88 * a3 + 24) && !*(void *)(a2 + 88 * a3 + 32))
    {
      unsigned int v16 = v16 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(a4 + 20) != 0));
      *int v17 = v16;
    }
    if (((v16 >> 3) & 1) != *(_DWORD *)(a4 + 20)) {
      break;
    }
    uint64_t v19 = a2 + 88 * a3;
    *(_DWORD *)(*(void *)(a4 + 8) + 4 * (int)(*(_DWORD *)a4)++) = a3;
    *unsigned int v13 = a4;
    int v20 = *(_DWORD *)(v19 + 4 * v11);
    uint64_t v21 = v11 - 1;
    uint64_t v22 = v10 ? v21 : 2;
    a3 = *(_DWORD *)(v19 + 4 * v22);
    if ((v20 & 0x80000000) == 0) {
      uint64_t result = sub_20B08DE5C(v7, a2);
    }
  }
  while ((a3 & 0x80000000) == 0);
  return result;
}

uint64_t sub_20B08DFB0(uint64_t result, int a2, int a3, unsigned int a4)
{
  uint64_t v7 = result;
  int v8 = a3 + 1;
  uint64_t v9 = result + 4;
  do
  {
    int v10 = a2;
    a4 += __ROR4__(a4, -(char)a4) + 3;
    int v11 = *(_DWORD *)(v7 + 4 * (int)(a4 % (v8 - a2) + a2));
    int v12 = a3;
    do
    {
      unsigned int v13 = (int *)(v7 + 4 * a2);
      int v14 = a2;
      do
      {
        int v16 = *v13++;
        int v15 = v16;
        ++v14;
      }
      while (v16 < v11);
      a2 = v14 - 1;
      int v17 = (_DWORD *)(v9 + 4 * v12);
      int v18 = v12;
      do
      {
        int v20 = *--v17;
        int v19 = v20;
        --v18;
      }
      while (v20 > v11);
      int v12 = v18 + 1;
      if (a2 <= v18 + 1)
      {
        *(v13 - 1) = v19;
        *int v17 = v15;
        int v12 = v18;
        a2 = v14;
      }
    }
    while (a2 <= v12);
    if (v12 > v10) {
      uint64_t result = sub_20B08DFB0(v7);
    }
  }
  while (a2 < a3);
  return result;
}

void sub_20B08FA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }

  _Unwind_Resume(a1);
}

id sub_20B08FC78()
{
  v0 = objc_opt_new();
  int v3 = objc_msgSend_attributes(v0, v1, v2);
  uint64_t v5 = objc_msgSend_objectAtIndexedSubscript_(v3, v4, 0);
  objc_msgSend_setName_(v5, v6, @"position");

  uint64_t v9 = objc_msgSend_attributes(v0, v7, v8);
  int v11 = objc_msgSend_objectAtIndexedSubscript_(v9, v10, 0);
  objc_msgSend_setFormat_(v11, v12, 786435);

  int v15 = objc_msgSend_attributes(v0, v13, v14);
  int v17 = objc_msgSend_objectAtIndexedSubscript_(v15, v16, 0);
  objc_msgSend_setBufferIndex_(v17, v18, 0);

  uint64_t v21 = objc_msgSend_attributes(v0, v19, v20);
  int v23 = objc_msgSend_objectAtIndexedSubscript_(v21, v22, 1);
  objc_msgSend_setName_(v23, v24, @"normal");

  uint64_t v27 = objc_msgSend_attributes(v0, v25, v26);
  float32x4_t v29 = objc_msgSend_objectAtIndexedSubscript_(v27, v28, 1);
  objc_msgSend_setFormat_(v29, v30, 786435);

  uint64_t v33 = objc_msgSend_attributes(v0, v31, v32);
  __n128 v35 = objc_msgSend_objectAtIndexedSubscript_(v33, v34, 1);
  objc_msgSend_setBufferIndex_(v35, v36, 0);

  int8x8_t v39 = objc_msgSend_attributes(v0, v37, v38);
  uint64_t v41 = objc_msgSend_objectAtIndexedSubscript_(v39, v40, 2);
  objc_msgSend_setName_(v41, v42, @"textureCoordinate");

  float v45 = objc_msgSend_attributes(v0, v43, v44);
  long long v47 = objc_msgSend_objectAtIndexedSubscript_(v45, v46, 2);
  objc_msgSend_setFormat_(v47, v48, 786434);

  int v51 = objc_msgSend_attributes(v0, v49, v50);
  uint64_t v53 = objc_msgSend_objectAtIndexedSubscript_(v51, v52, 2);
  objc_msgSend_setBufferIndex_(v53, v54, 0);

  objc_msgSend_setPackedOffsets(v0, v55, v56);
  objc_msgSend_setPackedStrides(v0, v57, v58);

  return v0;
}

void sub_20B08FEA0(_Unwind_Exception *a1)
{
  int v4 = v2;

  _Unwind_Resume(a1);
}

void sub_20B08FF0C(uint64_t a1, unint64_t a2, unint64_t a3, int a4, int32x4_t a5, float32x4_t a6, float a7, float a8, float a9)
{
  int v145 = 0;
  int v146 = 0;
  int v147 = 0;
  unint64_t v128 = a2 + 1;
  unint64_t v129 = a3 + 1;
  unint64_t v13 = (a3 + 1) * (a2 + 1);
  std::string __p = 0;
  BOOL v143 = 0;
  float v144 = 0;
  sub_20B07DBAC((void **)&v145, v13);
  sub_20B094FB0(&__p, v13);
  uint64_t v14 = 0;
  int32x4_t v15 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32(a6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a5, a5), (int8x16_t)a5, 0xCuLL))), (float32x4_t)a5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a6, (int32x4_t)a6), (int8x16_t)a6, 0xCuLL));
  float32x4_t v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL);
  float32x4_t v16 = vmulq_n_f32(v127, a9 * 0.5);
  float32x4_t v132 = v16;
  float v17 = 1.0 / (float)a3;
  float v18 = 1.0 / (float)a2;
  do
  {
    uint64_t v19 = 0;
    v16.f32[0] = (float)(int)v14 * v17;
    float32x4_t v138 = v16;
    float32x4_t v140 = vmlaq_n_f32(v132, a6, -(float)((float)(a8 * 0.5) - (float)((float)((float)(int)v14 * a8) * v17)));
    do
    {
      v20.i64[1] = a5.i64[1];
      float32x4_t v21 = vmlaq_n_f32(v140, (float32x4_t)a5, -(float)((float)(a7 * 0.5) - (float)((float)((float)(int)v19 * a7) * v18)));
      uint64_t v22 = v146;
      if (v146 >= v147)
      {
        float32x4_t v135 = v21;
        uint64_t v24 = ((char *)v146 - v145) >> 4;
        if ((unint64_t)(v24 + 1) >> 60) {
          sub_20B05D0BC();
        }
        unint64_t v25 = ((char *)v147 - v145) >> 3;
        if (v25 <= v24 + 1) {
          unint64_t v25 = v24 + 1;
        }
        if ((unint64_t)((char *)v147 - v145) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v25;
        }
        if (v26) {
          uint64_t v27 = (char *)sub_20B077E90((uint64_t)&v147, v26);
        }
        else {
          uint64_t v27 = 0;
        }
        float32x4_t v28 = (float32x4_t *)&v27[16 * v24];
        *float32x4_t v28 = v135;
        int v23 = v28 + 1;
        int v30 = v145;
        float32x4_t v29 = v146;
        if (v146 != (float32x4_t *)v145)
        {
          do
          {
            float32x4_t v31 = v29[-1];
            --v29;
            v28[-1] = v31;
            --v28;
          }
          while (v29 != (float32x4_t *)v30);
          float32x4_t v29 = (float32x4_t *)v145;
        }
        int v145 = (char *)v28;
        int v146 = v23;
        int v147 = (float32x4_t *)&v27[16 * v26];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        float32x4_t *v146 = v21;
        int v23 = v22 + 1;
      }
      int v146 = v23;
      v20.f32[0] = (float)(int)v19 * v18;
      float32x4_t v16 = v138;
      v20.i32[1] = v138.i32[0];
      uint64_t v32 = v143;
      if (v143 >= v144)
      {
        float32x4_t v136 = v20;
        uint64_t v34 = (v143 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          sub_20B05D0BC();
        }
        unint64_t v35 = (v144 - (unsigned char *)__p) >> 2;
        if (v35 <= v34 + 1) {
          unint64_t v35 = v34 + 1;
        }
        if ((unint64_t)(v144 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        if (v36) {
          float32x4_t v37 = (char *)sub_20B0602EC((uint64_t)&v144, v36);
        }
        else {
          float32x4_t v37 = 0;
        }
        uint64_t v38 = &v37[8 * v34];
        float32x4_t v16 = v136;
        *(void *)uint64_t v38 = v136.i64[0];
        uint64_t v33 = v38 + 8;
        uint64_t v40 = (char *)__p;
        int8x8_t v39 = v143;
        if (v143 != __p)
        {
          do
          {
            uint64_t v41 = *((void *)v39 - 1);
            v39 -= 8;
            v16.i32[1] = HIDWORD(v41);
            *((void *)v38 - 1) = v41;
            v38 -= 8;
          }
          while (v39 != v40);
          int8x8_t v39 = (char *)__p;
        }
        std::string __p = v38;
        BOOL v143 = v33;
        float v144 = &v37[8 * v36];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *(void *)BOOL v143 = v20.i64[0];
        uint64_t v33 = v32 + 8;
      }
      BOOL v143 = v33;
      BOOL v42 = v19++ == a2;
    }
    while (!v42);
    BOOL v42 = v14++ == a3;
  }
  while (!v42);
  if (a4) {
    unsigned int v43 = -1;
  }
  else {
    unsigned int v43 = 0;
  }
  sub_20B088B78((void **)a1, ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2) + 8 * v128 * v129);
  uint64_t v44 = v146;
  if (v146 != (float32x4_t *)v145)
  {
    unint64_t v45 = 0;
    int8x16_t v46 = vbslq_s8((int8x16_t)vdupq_n_s32(v43), (int8x16_t)vnegq_f32(v127), (int8x16_t)v127);
    long long v47 = (char **)(a1 + 16);
    __int32 v48 = v46.i32[1];
    __int32 v141 = v46.i32[0];
    __int32 v49 = v46.i32[2];
    uint64_t v50 = *(char **)(a1 + 8);
    uint64_t v44 = (float32x4_t *)v145;
    do
    {
      __int32 v51 = v44[v45].i32[0];
      int v52 = *v47;
      if (v50 >= *v47)
      {
        uint64_t v54 = *(char **)a1;
        uint64_t v55 = (uint64_t)&v50[-*(void *)a1] >> 2;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v57 = v52 - v54;
        if (v57 >> 1 > v56) {
          unint64_t v56 = v57 >> 1;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        if (v58)
        {
          unsigned int v59 = (char *)sub_20B05D1AC(a1 + 16, v58);
          uint64_t v54 = *(char **)a1;
          uint64_t v50 = *(char **)(a1 + 8);
        }
        else
        {
          unsigned int v59 = 0;
        }
        uint64_t v60 = &v59[4 * v55];
        *(_DWORD *)uint64_t v60 = v51;
        uint64_t v53 = v60 + 4;
        while (v50 != v54)
        {
          int v61 = *((_DWORD *)v50 - 1);
          v50 -= 4;
          *((_DWORD *)v60 - 1) = v61;
          v60 -= 4;
        }
        int v52 = &v59[4 * v58];
        *(void *)a1 = v60;
        *(void *)(a1 + 8) = v53;
        *(void *)(a1 + 16) = v52;
        if (v54)
        {
          operator delete(v54);
          int v52 = *v47;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v50 = v51;
        uint64_t v53 = v50 + 4;
      }
      *(void *)(a1 + 8) = v53;
      int v62 = *(_DWORD *)&v145[16 * v45 + 4];
      if (v53 >= v52)
      {
        uint64_t v64 = *(char **)a1;
        uint64_t v65 = (uint64_t)&v53[-*(void *)a1] >> 2;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v67 = v52 - v64;
        if (v67 >> 1 > v66) {
          unint64_t v66 = v67 >> 1;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          float v69 = (char *)sub_20B05D1AC(a1 + 16, v68);
          uint64_t v64 = *(char **)a1;
          uint64_t v53 = *(char **)(a1 + 8);
        }
        else
        {
          float v69 = 0;
        }
        float v70 = &v69[4 * v65];
        *(_DWORD *)float v70 = v62;
        float32x4_t v63 = v70 + 4;
        while (v53 != v64)
        {
          int v71 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        int v52 = &v69[4 * v68];
        *(void *)a1 = v70;
        *(void *)(a1 + 8) = v63;
        *(void *)(a1 + 16) = v52;
        if (v64)
        {
          operator delete(v64);
          int v52 = *v47;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v53 = v62;
        float32x4_t v63 = v53 + 4;
      }
      *(void *)(a1 + 8) = v63;
      int v72 = *(_DWORD *)&v145[16 * v45 + 8];
      if (v63 >= v52)
      {
        BOOL v74 = *(char **)a1;
        uint64_t v75 = (uint64_t)&v63[-*(void *)a1] >> 2;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v77 = v52 - v74;
        if (v77 >> 1 > v76) {
          unint64_t v76 = v77 >> 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78)
        {
          float v79 = (char *)sub_20B05D1AC(a1 + 16, v78);
          BOOL v74 = *(char **)a1;
          float32x4_t v63 = *(char **)(a1 + 8);
        }
        else
        {
          float v79 = 0;
        }
        float v80 = &v79[4 * v75];
        *(_DWORD *)float v80 = v72;
        float v73 = (__int32 *)(v80 + 4);
        while (v63 != v74)
        {
          int v81 = *((_DWORD *)v63 - 1);
          v63 -= 4;
          *((_DWORD *)v80 - 1) = v81;
          v80 -= 4;
        }
        int v52 = &v79[4 * v78];
        *(void *)a1 = v80;
        *(void *)(a1 + 8) = v73;
        *(void *)(a1 + 16) = v52;
        if (v74)
        {
          operator delete(v74);
          int v52 = *v47;
        }
      }
      else
      {
        *(_DWORD *)float32x4_t v63 = v72;
        float v73 = (__int32 *)(v63 + 4);
      }
      *(void *)(a1 + 8) = v73;
      if (v73 >= (__int32 *)v52)
      {
        float v83 = *(char **)a1;
        uint64_t v84 = ((uint64_t)v73 - *(void *)a1) >> 2;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v86 = v52 - v83;
        if (v86 >> 1 > v85) {
          unint64_t v85 = v86 >> 1;
        }
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v85;
        }
        if (v87)
        {
          float v88 = (char *)sub_20B05D1AC(a1 + 16, v87);
          float v83 = *(char **)a1;
          float v73 = *(__int32 **)(a1 + 8);
        }
        else
        {
          float v88 = 0;
        }
        float v89 = (__int32 *)&v88[4 * v84];
        __int32 *v89 = v141;
        float v82 = v89 + 1;
        while (v73 != (__int32 *)v83)
        {
          __int32 v90 = *--v73;
          *--float v89 = v90;
        }
        int v52 = &v88[4 * v87];
        *(void *)a1 = v89;
        *(void *)(a1 + 8) = v82;
        *(void *)(a1 + 16) = v52;
        if (v83)
        {
          operator delete(v83);
          int v52 = *v47;
        }
      }
      else
      {
        __int32 *v73 = v141;
        float v82 = v73 + 1;
      }
      *(void *)(a1 + 8) = v82;
      if (v82 >= (__int32 *)v52)
      {
        int v92 = *(char **)a1;
        uint64_t v93 = ((uint64_t)v82 - *(void *)a1) >> 2;
        unint64_t v94 = v93 + 1;
        if ((unint64_t)(v93 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v95 = v52 - v92;
        if (v95 >> 1 > v94) {
          unint64_t v94 = v95 >> 1;
        }
        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v96 = v94;
        }
        if (v96)
        {
          long long v97 = (char *)sub_20B05D1AC(a1 + 16, v96);
          int v92 = *(char **)a1;
          float v82 = *(__int32 **)(a1 + 8);
        }
        else
        {
          long long v97 = 0;
        }
        long long v98 = (__int32 *)&v97[4 * v93];
        __int32 *v98 = v48;
        unsigned int v91 = v98 + 1;
        while (v82 != (__int32 *)v92)
        {
          __int32 v99 = *--v82;
          *--long long v98 = v99;
        }
        int v52 = &v97[4 * v96];
        *(void *)a1 = v98;
        *(void *)(a1 + 8) = v91;
        *(void *)(a1 + 16) = v52;
        if (v92)
        {
          operator delete(v92);
          int v52 = *v47;
        }
      }
      else
      {
        __int32 *v82 = v48;
        unsigned int v91 = v82 + 1;
      }
      *(void *)(a1 + 8) = v91;
      if (v91 >= (__int32 *)v52)
      {
        uint64_t v101 = *(char **)a1;
        uint64_t v102 = ((uint64_t)v91 - *(void *)a1) >> 2;
        unint64_t v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v104 = v52 - v101;
        if (v104 >> 1 > v103) {
          unint64_t v103 = v104 >> 1;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (v105)
        {
          float v106 = (char *)sub_20B05D1AC(a1 + 16, v105);
          uint64_t v101 = *(char **)a1;
          unsigned int v91 = *(__int32 **)(a1 + 8);
        }
        else
        {
          float v106 = 0;
        }
        float v107 = (__int32 *)&v106[4 * v102];
        __int32 *v107 = v49;
        float v100 = (char *)(v107 + 1);
        while (v91 != (__int32 *)v101)
        {
          __int32 v108 = *--v91;
          *--float v107 = v108;
        }
        int v52 = &v106[4 * v105];
        *(void *)a1 = v107;
        *(void *)(a1 + 8) = v100;
        *(void *)(a1 + 16) = v52;
        if (v101)
        {
          operator delete(v101);
          int v52 = *v47;
        }
      }
      else
      {
        __int32 *v91 = v49;
        float v100 = (char *)(v91 + 1);
      }
      *(void *)(a1 + 8) = v100;
      if (v100 >= v52)
      {
        int v139 = *((void *)__p + v45);
        uint64_t v110 = *(char **)a1;
        uint64_t v111 = (uint64_t)&v100[-*(void *)a1] >> 2;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v113 = v52 - v110;
        if (v113 >> 1 > v112) {
          unint64_t v112 = v113 >> 1;
        }
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v114 = v112;
        }
        if (v114)
        {
          BOOL v115 = (char *)sub_20B05D1AC(a1 + 16, v114);
          uint64_t v110 = *(char **)a1;
          float v100 = *(char **)(a1 + 8);
        }
        else
        {
          BOOL v115 = 0;
        }
        uint64_t v116 = &v115[4 * v111];
        *(_DWORD *)uint64_t v116 = v139;
        unsigned int v109 = v116 + 4;
        while (v100 != v110)
        {
          int v117 = *((_DWORD *)v100 - 1);
          v100 -= 4;
          *((_DWORD *)v116 - 1) = v117;
          v116 -= 4;
        }
        int v52 = &v115[4 * v114];
        *(void *)a1 = v116;
        *(void *)(a1 + 8) = v109;
        *(void *)(a1 + 16) = v52;
        if (v110)
        {
          operator delete(v110);
          int v52 = *v47;
        }
      }
      else
      {
        *(_DWORD *)float v100 = *((void *)__p + v45);
        unsigned int v109 = v100 + 4;
      }
      *(void *)(a1 + 8) = v109;
      int v118 = *((_DWORD *)__p + 2 * v45 + 1);
      if (v109 >= v52)
      {
        float v119 = *(char **)a1;
        uint64_t v120 = (uint64_t)&v109[-*(void *)a1] >> 2;
        unint64_t v121 = v120 + 1;
        if ((unint64_t)(v120 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v122 = v52 - v119;
        if (v122 >> 1 > v121) {
          unint64_t v121 = v122 >> 1;
        }
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v123 = v121;
        }
        if (v123)
        {
          float v124 = (char *)sub_20B05D1AC(a1 + 16, v123);
          float v119 = *(char **)a1;
          unsigned int v109 = *(char **)(a1 + 8);
        }
        else
        {
          float v124 = 0;
        }
        float v125 = &v124[4 * v120];
        *(_DWORD *)float v125 = v118;
        uint64_t v50 = v125 + 4;
        while (v109 != v119)
        {
          int v126 = *((_DWORD *)v109 - 1);
          v109 -= 4;
          *((_DWORD *)v125 - 1) = v126;
          v125 -= 4;
        }
        *(void *)a1 = v125;
        *(void *)(a1 + 8) = v50;
        *(void *)(a1 + 16) = &v124[4 * v123];
        if (v119) {
          operator delete(v119);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v109 = v118;
        uint64_t v50 = v109 + 4;
      }
      *(void *)(a1 + 8) = v50;
      ++v45;
      uint64_t v44 = (float32x4_t *)v145;
    }
    while (v45 < ((char *)v146 - v145) >> 4);
  }
  if (__p)
  {
    BOOL v143 = (char *)__p;
    operator delete(__p);
    uint64_t v44 = (float32x4_t *)v145;
  }
  if (v44)
  {
    int v146 = v44;
    operator delete(v44);
  }
}

void sub_20B090854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(void *)(v31 - 168) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B090940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09378C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  float32x4_t v37 = *(void **)(v35 - 192);
  if (v37)
  {
    *(void *)(v35 - 184) = v37;
    operator delete(v37);
  }

  _Unwind_Resume(a1);
}

void sub_20B093B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B093BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B093FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_20B0940E0(uint64_t a1, int *a2, int a3, int a4, int a5, int a6, float32x4_t a7)
{
  int v11 = 0;
  int v12 = a4 & 1;
  if (!a6) {
    int v12 = 0;
  }
  float v13 = a7.f32[1];
  float v14 = -1.0;
  if (!a5) {
    float v14 = 1.0;
  }
  float v48 = v14;
  if (a5) {
    unsigned int v15 = -1;
  }
  else {
    unsigned int v15 = 0;
  }
  int8x16_t v52 = vbslq_s8((int8x16_t)vdupq_n_s32(v15), (int8x16_t)xmmword_20B1E74D0, (int8x16_t)xmmword_20B1E74C0);
  int v16 = *a2;
  int v17 = v12 + a4;
  double v18 = 1.0 / (double)a4;
  float v19 = 1.0 / (float)a4;
  double v20 = 1.0 / (double)a3;
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v47 = vdivq_f32(_Q1, a7);
  float v26 = 1.0 / (float)a3;
  int v27 = a3 + 1;
  do
  {
    double v28 = cos((double)v11 * 3.14159265 * v18);
    if ((a3 & 0x80000000) == 0)
    {
      float v29 = v28;
      float v51 = v29;
      double v30 = sin((double)v11 * 3.14159265 * v18);
      int v31 = 0;
      int v32 = 0;
      int v33 = (__PAIR64__(v51 > 0.0, LODWORD(v51)) - COERCE_UNSIGNED_INT(0.0)) >> 32;
      float v34 = (float)v33;
      if (a5) {
        float v34 = -(float)v33;
      }
      LODWORD(v35) = 0;
      *((float *)&v35 + 1) = v34;
      float32x4_t v49 = (float32x4_t)v35;
      do
      {
        __double2 v36 = __sincos_stret((double)v31 * 3.14159265 * v20);
        v38.f32[0] = v36.__cosval * v30;
        float32_t v37 = v36.__sinval * v30;
        v38.f32[1] = v51;
        v38.f32[2] = v37;
        if (v13 == 0.0)
        {
          float32x4_t v39 = v49;
          v39.i32[3] = v52.i32[3];
          float32x4_t v40 = v39;
        }
        else
        {
          float32x4_t v41 = vmulq_f32(vmulq_n_f32(v38, v48), v47);
          int32x4_t v42 = (int32x4_t)vmulq_f32(v41, v41);
          v42.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v42.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v42, 2)).u32[0];
          float32x2_t v43 = vrsqrte_f32((float32x2_t)v42.u32[0]);
          float32x2_t v44 = vmul_f32(vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v43, v43)), v43);
          float32x4_t v40 = vmulq_n_f32(v41, vmul_f32(v44, vrsqrts_f32((float32x2_t)v42.u32[0], vmul_f32(v44, v44))).f32[0]);
        }
        float32x4_t v45 = vmulq_f32(v38, a7);
        uint64_t v46 = a1 + 32 * (v16 + v32);
        *(void *)uint64_t v46 = v45.i64[0];
        *(_DWORD *)(v46 + 8) = v45.i32[2];
        *(_DWORD *)(v46 + 20) = v40.i32[2];
        v52.i32[3] = v40.i32[3];
        *(void *)(v46 + 12) = v40.i64[0];
        *(float *)(v46 + 24) = (float)v32 * v26;
        *(float *)(v46 + 28) = (float)v11 * v19;
        ++v32;
        v31 += 2;
      }
      while (v27 != v32);
      v16 += v32;
      *a2 = v16;
    }
  }
  while (v11++ != v17);
}

id sub_20B09433C(void *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  id v11 = a1;
  id v12 = a2;
  float v13 = (void *)MEMORY[0x210532AA0]();
  if (!v12)
  {
    sub_20B095058();
    id v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  unint64_t v14 = a4 >> a6;
  uint64_t v15 = 6 * a3;
  if (a5 != 2) {
    uint64_t v15 = 8 * a3;
  }
  unint64_t v16 = v14 * v15;
  size_t v17 = 2 * v14 * v15;
  double v18 = malloc_type_malloc(v17, 0xD247CD4BuLL);
  if (v14)
  {
    __int16 v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    __int16 v22 = a3 + 1;
    __int16 v23 = 1;
    do
    {
      if (a3)
      {
        int v24 = 0;
        __int16 v25 = v22 * (v20 + 1);
        do
        {
          __int16 v26 = v19 + v24;
          unint64_t v27 = (v24 + 1);
          __int16 v28 = v20 * v22 + v24 + 1;
          __int16 v29 = v22 * v23 + v24;
          __int16 v30 = v25 + v24 + 1;
          uint64_t v31 = v21 + 1;
          v18[v21] = v19 + v24;
          uint64_t v32 = v21 + 2;
          uint64_t v33 = v21 + 4;
          uint64_t v34 = v21 + 6;
          if (a5 == 2)
          {
            v18[v31] = v30;
            v18[v32] = v29;
            v18[v21 + 3] = v26;
            uint64_t v35 = v21 + 5;
            v18[v33] = v28;
            __int16 v26 = v25 + v24 + 1;
          }
          else
          {
            v18[v31] = v28;
            v18[v32] = v28;
            v18[v33] = v30;
            __double2 v36 = (char *)&v18[v21];
            *((_WORD *)v36 + 3) = v30;
            *((_WORD *)v36 + 5) = v29;
            uint64_t v35 = v21 + 7;
            v18[v34] = v29;
            uint64_t v34 = v21 + 8;
          }
          v18[v35] = v26;
          ++v24;
          uint64_t v21 = v34;
        }
        while (v27 < a3);
      }
      else
      {
        uint64_t v34 = v21;
      }
      ++v20;
      ++v23;
      v19 += v22;
      uint64_t v21 = v34;
    }
    while (v14 > v20);
  }
  id v37 = objc_alloc(MEMORY[0x263EFF8F8]);
  float32x4_t v39 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v37, v38, (uint64_t)v18, v17, 1);
  float32x4_t v41 = objc_msgSend_newBufferWithData_type_(v12, v40, (uint64_t)v39, 2);
  if (objc_msgSend_conformsToProtocol_(v41, v42, (uint64_t)&unk_26BF5ED88))
  {
    id v43 = v41;
    float32x4_t v45 = objc_msgSend_stringByAppendingString_(v11, v44, @"-Indices");
    objc_msgSend_setName_(v43, v46, (uint64_t)v45);
  }
  float32x4_t v47 = [MDLMaterial alloc];
  float v48 = objc_opt_new();
  uint64_t v50 = objc_msgSend_initWithName_scatteringFunction_(v47, v49, @"material", v48);

  float v51 = [MDLSubmesh alloc];
  uint64_t v53 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v51, v52, (uint64_t)v41, v16, 16, a5, v50);

  return v53;
}

void sub_20B0945D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_20B094638(void *a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  id v11 = a1;
  id v12 = a2;
  float v13 = (void *)MEMORY[0x210532AA0]();
  if (!v12)
  {
    sub_20B095058();
    id v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  unint64_t v14 = a4 >> a6;
  uint64_t v15 = 6 * a3;
  if (a5 != 2) {
    uint64_t v15 = 8 * a3;
  }
  unint64_t v16 = v14 * v15;
  size_t v17 = 4 * v14 * v15;
  double v18 = malloc_type_malloc(v17, 0xD247CD4BuLL);
  if (v14)
  {
    int v19 = 0;
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    int v22 = a3 + 1;
    int v23 = a3 + 1;
    int v24 = a3 + 1;
    do
    {
      if (a3)
      {
        int v25 = 0;
        int v26 = v22 * (v20 + 1);
        do
        {
          unint64_t v27 = (v25 + 1);
          int v28 = v20 * v22 + v27;
          int v29 = v26 + v27;
          int v30 = v19 + v25;
          uint64_t v31 = v21 + 1;
          v18[v21] = v19 + v25;
          uint64_t v32 = v21 + 2;
          uint64_t v33 = v21 + 4;
          uint64_t v34 = v21 + 6;
          if (a5 == 2)
          {
            v18[v31] = v29;
            v18[v32] = v24 + v25;
            v18[v21 + 3] = v30;
            uint64_t v35 = v21 + 5;
            v18[v33] = v28;
            int v30 = v26 + v27;
          }
          else
          {
            v18[v31] = v28;
            v18[v32] = v28;
            __double2 v36 = (char *)&v18[v21];
            *((_DWORD *)v36 + 3) = v29;
            v18[v33] = v29;
            int v37 = v24 + v25;
            *((_DWORD *)v36 + 5) = v24 + v25;
            uint64_t v35 = v21 + 7;
            v18[v34] = v37;
            uint64_t v34 = v21 + 8;
          }
          v18[v35] = v30;
          int v25 = v27;
          uint64_t v21 = v34;
        }
        while (v27 < a3);
      }
      else
      {
        uint64_t v34 = v21;
      }
      ++v20;
      v24 += v23;
      v19 += v23;
      uint64_t v21 = v34;
    }
    while (v14 > v20);
  }
  id v38 = objc_alloc(MEMORY[0x263EFF8F8]);
  float32x4_t v40 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v38, v39, (uint64_t)v18, v17, 1);
  int32x4_t v42 = objc_msgSend_newBufferWithData_type_(v12, v41, (uint64_t)v40, 2);
  if (objc_msgSend_conformsToProtocol_(v42, v43, (uint64_t)&unk_26BF5ED88))
  {
    id v44 = v42;
    uint64_t v46 = objc_msgSend_stringByAppendingString_(v11, v45, @"-Indices");
    objc_msgSend_setName_(v44, v47, (uint64_t)v46);
  }
  float v48 = [MDLMaterial alloc];
  float32x4_t v49 = objc_opt_new();
  float v51 = objc_msgSend_initWithName_scatteringFunction_(v48, v50, @"material", v49);

  int8x16_t v52 = [MDLSubmesh alloc];
  uint64_t v54 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v52, v53, (uint64_t)v42, v16, 32, a5, v51);

  return v54;
}

void sub_20B0948CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B094D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_20B094EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B094F30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B094FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B094FB0(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_20B05D0BC();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_20B0602EC(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    id v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    id v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

id sub_20B095058()
{
  v0 = (void *)qword_267691090;
  if (!qword_267691090)
  {
    uint64_t v1 = objc_opt_new();
    uint64_t v2 = (void *)qword_267691090;
    qword_267691090 = v1;

    v0 = (void *)qword_267691090;
  }

  return v0;
}

void sub_20B09516C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0956B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_20B09572C(uint64_t a1, unsigned char *a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0) {
      sub_20B05D0BC();
    }
    unint64_t v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v4 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_20B097114((char **)a1, v7);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4 + 1;
  uint64_t v8 = *(char **)a1;
  unint64_t v9 = v4 >> 6;
  uint64_t v10 = 1 << v4;
  if (*a2) {
    uint64_t v11 = *(void *)&v8[8 * v9] | v10;
  }
  else {
    uint64_t v11 = *(void *)&v8[8 * v9] & ~v10;
  }
  *(void *)&v8[8 * v9] = v11;
}

void sub_20B095868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLBufferViewAllocator;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B095A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B095D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B096010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_20B09622C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B096448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0965F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0967BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B096990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B096A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B096B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B096D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B096EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20B096FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B097114(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      sub_20B05D0BC();
    }
    uint64_t v10 = 0;
    long long v11 = 0uLL;
    sub_20B0971D4(&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    uint64_t v8 = *a1;
    int v9 = 0;
    unint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    sub_20B09721C(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    unint64_t v4 = *a1;
    *a1 = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void sub_20B0971BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B0971D4(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_20B05D0BC();
  }
  uint64_t result = sub_20B0602EC((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_20B09721C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  sub_20B0972C0(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_20B0972C0(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a1;
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v17 = v5;
  int v18 = v6;
  uint64_t v15 = v7;
  int v16 = v8;
  int v9 = *((_DWORD *)a3 + 2);
  uint64_t v13 = *a3;
  int v14 = v9;
  sub_20B097358((uint64_t)&v17, (uint64_t)&v15, (uint64_t)&v13, (uint64_t)&v19);
  int v10 = DWORD2(v19);
  uint64_t v11 = v20;
  int v12 = DWORD2(v20);
  *(void *)a4 = v19;
  *(_DWORD *)(a4 + 8) = v10;
  *(void *)(a4 + 16) = v11;
  *(_DWORD *)(a4 + 24) = v12;
}

void sub_20B097358(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_20B09B5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  unint64_t v27 = *(void **)(v25 - 248);
  if (v27)
  {
    *(void *)(v25 - 240) = v27;
    operator delete(v27);
  }
  int v28 = *(void **)(v25 - 224);
  if (v28)
  {
    *(void *)(v25 - 216) = v28;
    operator delete(v28);
  }
  int v29 = *(void **)(v25 - 200);
  if (v29)
  {
    *(void *)(v25 - 192) = v29;
    operator delete(v29);
  }
  int v30 = *(void **)(v25 - 176);
  if (v30)
  {
    *(void *)(v25 - 168) = v30;
    operator delete(v30);
  }

  _Unwind_Resume(a1);
}

void sub_20B09B898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_20B09B8A8(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  if (a1.f32[0] <= 0.0)
  {
    LODWORD(v3) = vsubq_f32(a3, a2).u32[0];
    float v4 = -vaddq_f32(a3, a2).f32[0];
  }
  else
  {
    float v3 = -vaddq_f32(a3, a2).f32[0];
    LODWORD(v4) = vsubq_f32(a3, a2).u32[0];
  }
  *(float *)&uint64_t v5 = v3;
  if (a1.f32[1] <= 0.0)
  {
    *((float *)&v5 + 1) = a3.f32[1] - a2.f32[1];
    float v6 = -(float)(a3.f32[1] + a2.f32[1]);
  }
  else
  {
    *((float *)&v5 + 1) = -(float)(a3.f32[1] + a2.f32[1]);
    float v6 = a3.f32[1] - a2.f32[1];
  }
  v7.i64[0] = v5;
  if (a1.f32[2] <= 0.0)
  {
    v7.f32[2] = a3.f32[2] - a2.f32[2];
    v7.i32[3] = 0;
    float v8 = -(float)(a3.f32[2] + a2.f32[2]);
  }
  else
  {
    v7.f32[2] = -(float)(a3.f32[2] + a2.f32[2]);
    v7.i32[3] = 0;
    float v8 = a3.f32[2] - a2.f32[2];
  }
  float32x4_t v9 = vmulq_f32(v7, a1);
  return (float)(vaddv_f32(*(float32x2_t *)v9.f32) + v9.f32[2]) <= 0.0
      && (float)((float)((float)(v6 * a1.f32[1]) + (float)(v4 * a1.f32[0])) + (float)(v8 * a1.f32[2])) >= 0.0;
}

BOOL sub_20B09B9AC(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  _Q2 = a3;
  float32x4_t v4 = vsubq_f32(a1[1], a2);
  float32x4_t v5 = vsubq_f32(a1[2], a2);
  float32x4_t v6 = vsubq_f32(a1[3], a2);
  _Q0 = vsubq_f32(v5, v4);
  float v8 = fabsf(_Q0.f32[1]);
  _S20 = fabsf(_Q0.f32[2]);
  _S5 = v4.f32[1];
  float v11 = v4.f32[2];
  __asm { FMLA            S7, S5, V0.S[2] }
  _S6 = v6.i32[1];
  __asm { FMLA            S16, S6, V0.S[2] }
  if (_S7 >= _S16) {
    float v18 = _S16;
  }
  else {
    float v18 = _S7;
  }
  if (_S7 < _S16) {
    _S7 = _S16;
  }
  float v19 = -(float)(vmuls_lane_f32(v8, _Q2, 2) + (float)(_S20 * _Q2.f32[1]));
  __asm { FMLA            S24, S20, V2.S[1] }
  if (v18 > _S24 || _S7 < v19) {
    return 0;
  }
  float v22 = fabsf(_Q0.f32[0]);
  float v23 = -(float)((float)(_Q0.f32[2] * v4.f32[0]) - (float)(_Q0.f32[0] * v4.f32[2]));
  float v24 = -(float)((float)(_Q0.f32[2] * v6.f32[0]) - (float)(_Q0.f32[0] * v6.f32[2]));
  if (v23 >= v24) {
    float v25 = -(float)((float)(_Q0.f32[2] * v6.f32[0]) - (float)(_Q0.f32[0] * v6.f32[2]));
  }
  else {
    float v25 = -(float)((float)(_Q0.f32[2] * v4.f32[0]) - (float)(_Q0.f32[0] * v4.f32[2]));
  }
  if (v23 >= v24) {
    float v24 = -(float)((float)(_Q0.f32[2] * v4.f32[0]) - (float)(_Q0.f32[0] * v4.f32[2]));
  }
  if (v25 > vmlas_n_f32(v22 * _Q2.f32[2], _S20, _Q2.f32[0])
    || v24 < (float)-(float)((float)(v22 * _Q2.f32[2]) + (float)(_S20 * _Q2.f32[0])))
  {
    return 0;
  }
  _S20 = v5.i32[1];
  float v28 = vmlas_n_f32(-(float)(_Q0.f32[0] * v5.f32[1]), _Q0.f32[1], v5.f32[0]);
  float v29 = -(float)((float)(_Q0.f32[0] * v6.f32[1]) - (float)(_Q0.f32[1] * v6.f32[0]));
  if (v29 >= v28) {
    float v30 = v28;
  }
  else {
    float v30 = -(float)((float)(_Q0.f32[0] * v6.f32[1]) - (float)(_Q0.f32[1] * v6.f32[0]));
  }
  if (v29 < v28) {
    float v29 = v28;
  }
  float v31 = (float)(v22 * _Q2.f32[1]) + (float)(v8 * _Q2.f32[0]);
  if (v30 > v31 || v29 < (float)-v31) {
    return 0;
  }
  _Q19 = vsubq_f32(v6, v5);
  float v34 = fabsf(_Q19.f32[1]);
  float v35 = fabsf(_Q19.f32[2]);
  __asm
  {
    FMLA            S24, S5, V19.S[2]
    FMLA            S26, S6, V19.S[2]
  }
  if (_S24 >= _S26) {
    float v38 = _S26;
  }
  else {
    float v38 = _S24;
  }
  if (_S24 < _S26) {
    _S24 = _S26;
  }
  float v39 = (float)(v34 * _Q2.f32[2]) + (float)(v35 * _Q2.f32[1]);
  if (v38 > v39 || _S24 < (float)-v39) {
    return 0;
  }
  float v41 = fabsf(_Q19.f32[0]);
  float v42 = -(float)((float)(_Q19.f32[2] * v4.f32[0]) - (float)(_Q19.f32[0] * v4.f32[2]));
  float v43 = -(float)((float)(_Q19.f32[2] * v6.f32[0]) - (float)(_Q19.f32[0] * v6.f32[2]));
  if (v42 >= v43) {
    float v44 = -(float)((float)(_Q19.f32[2] * v6.f32[0]) - (float)(_Q19.f32[0] * v6.f32[2]));
  }
  else {
    float v44 = -(float)((float)(_Q19.f32[2] * v4.f32[0]) - (float)(_Q19.f32[0] * v4.f32[2]));
  }
  if (v42 >= v43) {
    float v43 = -(float)((float)(_Q19.f32[2] * v4.f32[0]) - (float)(_Q19.f32[0] * v4.f32[2]));
  }
  float v45 = (float)(v41 * _Q2.f32[2]) + (float)(v35 * _Q2.f32[0]);
  if (v44 > v45 || v43 < (float)-v45) {
    return 0;
  }
  float v47 = -(float)((float)(_Q19.f32[0] * v4.f32[1]) - (float)(_Q19.f32[1] * v4.f32[0]));
  float v48 = -(float)((float)(_Q19.f32[0] * v5.f32[1]) - (float)(_Q19.f32[1] * v5.f32[0]));
  if (v47 >= v48) {
    float v49 = -(float)((float)(_Q19.f32[0] * v5.f32[1]) - (float)(_Q19.f32[1] * v5.f32[0]));
  }
  else {
    float v49 = -(float)((float)(_Q19.f32[0] * v4.f32[1]) - (float)(_Q19.f32[1] * v4.f32[0]));
  }
  if (v47 >= v48) {
    float v48 = -(float)((float)(_Q19.f32[0] * v4.f32[1]) - (float)(_Q19.f32[1] * v4.f32[0]));
  }
  float v50 = (float)(v41 * _Q2.f32[1]) + (float)(v34 * _Q2.f32[0]);
  if (v49 > v50 || v48 < (float)-v50) {
    return 0;
  }
  _Q23 = vsubq_f32(v4, v6);
  float v53 = fabsf(_Q23.f32[1]);
  float v54 = fabsf(_Q23.f32[2]);
  __asm
  {
    FMLA            S27, S5, V23.S[2]
    FMLA            S28, S20, V23.S[2]
  }
  if (_S27 >= _S28) {
    float v57 = _S28;
  }
  else {
    float v57 = _S27;
  }
  if (_S27 < _S28) {
    _S27 = _S28;
  }
  if (v57 > (float)((float)(v53 * _Q2.f32[2]) + (float)(v54 * _Q2.f32[1]))
    || _S27 < (float)-(float)((float)(v53 * _Q2.f32[2]) + (float)(v54 * _Q2.f32[1])))
  {
    return 0;
  }
  float v58 = fabsf(_Q23.f32[0]);
  float v59 = -(float)((float)(_Q23.f32[2] * v4.f32[0]) - (float)(_Q23.f32[0] * v4.f32[2]));
  float v60 = -(float)((float)(_Q23.f32[2] * v5.f32[0]) - (float)(_Q23.f32[0] * v5.f32[2]));
  if (v59 >= v60) {
    float v61 = -(float)((float)(_Q23.f32[2] * v5.f32[0]) - (float)(_Q23.f32[0] * v5.f32[2]));
  }
  else {
    float v61 = -(float)((float)(_Q23.f32[2] * v4.f32[0]) - (float)(_Q23.f32[0] * v4.f32[2]));
  }
  if (v59 >= v60) {
    float v60 = -(float)((float)(_Q23.f32[2] * v4.f32[0]) - (float)(_Q23.f32[0] * v4.f32[2]));
  }
  if (v61 > (float)((float)(v58 * _Q2.f32[2]) + (float)(v54 * _Q2.f32[0]))
    || v60 < (float)-(float)((float)(v58 * _Q2.f32[2]) + (float)(v54 * _Q2.f32[0])))
  {
    return 0;
  }
  float v62 = -(float)((float)(_Q23.f32[0] * v5.f32[1]) - (float)(_Q23.f32[1] * v5.f32[0]));
  float v63 = -(float)((float)(_Q23.f32[0] * v6.f32[1]) - (float)(_Q23.f32[1] * v6.f32[0]));
  if (v63 >= v62) {
    float v64 = v62;
  }
  else {
    float v64 = v63;
  }
  if (v63 < v62) {
    float v63 = v62;
  }
  if (v64 > (float)((float)(v58 * _Q2.f32[1]) + (float)(v53 * _Q2.f32[0]))
    || v63 < (float)-(float)((float)(v58 * _Q2.f32[1]) + (float)(v53 * _Q2.f32[0])))
  {
    return 0;
  }
  if (vmovn_s32(vcgtq_f32(v4, v5)).u8[0]) {
    float v65 = v5.f32[0];
  }
  else {
    float v65 = v4.f32[0];
  }
  if ((vmovn_s32(vcgtq_f32(v5, v4)).u8[0] & 1) == 0) {
    v5.f32[0] = v4.f32[0];
  }
  if (v6.f32[0] < v65) {
    float v65 = v6.f32[0];
  }
  if (v6.f32[0] <= v5.f32[0]) {
    v6.f32[0] = v5.f32[0];
  }
  if (v65 > _Q2.f32[0] || v6.f32[0] < (float)-_Q2.f32[0]) {
    return 0;
  }
  if (v5.f32[1] >= v4.f32[1]) {
    v6.f32[0] = v4.f32[1];
  }
  else {
    v6.f32[0] = v5.f32[1];
  }
  if (v5.f32[1] > v4.f32[1]) {
    _S5 = v5.f32[1];
  }
  if (v6.f32[1] < v6.f32[0]) {
    v6.f32[0] = v6.f32[1];
  }
  if (v6.f32[1] > _S5) {
    _S5 = v6.f32[1];
  }
  if (v6.f32[0] > _Q2.f32[1] || _S5 < (float)-_Q2.f32[1]) {
    return 0;
  }
  if (v5.f32[2] >= v4.f32[2]) {
    float v66 = v4.f32[2];
  }
  else {
    float v66 = v5.f32[2];
  }
  if (v5.f32[2] > v4.f32[2]) {
    float v11 = v5.f32[2];
  }
  if (v6.f32[2] < v66) {
    float v66 = v6.f32[2];
  }
  if (v6.f32[2] > v11) {
    float v11 = v6.f32[2];
  }
  if (v66 > _Q2.f32[2] || v11 < (float)-_Q2.f32[2]) {
    return 0;
  }
  int32x4_t v67 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q19, (int32x4_t)_Q19), (int8x16_t)_Q19, 0xCuLL), _Q0)), _Q19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
  return sub_20B09B8A8((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v67, v67), (int8x16_t)v67, 0xCuLL), v4, _Q2);
}

void sub_20B09BD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09BDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09BE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09C06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09C298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09C2C8(void *a1@<X0>, uint64_t a2@<X1>, float32x4_t *a3@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v5 = a1;
  a3[1].i64[0] = 0;
  a3[1].i64[1] = 0;
  __asm { FMOV            V0.4S, #-1.0 }
  *a3 = _Q0;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    float v11 = v5;
  }
  else {
    float v11 = 0;
  }
  id v38 = v11;
  if (v38)
  {
    objc_msgSend_boundingBox(v38, v12, v13);
    float32x4_t v48 = v14;
    long long v49 = v15;
    sub_20B0A25D0(a3, (long long *)&v48, (float32x4_t *)a2);
  }
  int v16 = objc_msgSend_children(v5, v12, v13);
  if (v16)
  {
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id v37 = v16;
    id v17 = v16;
    uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v43, v52, 16);
    if (v21)
    {
      uint64_t v22 = *(void *)v44;
      do
      {
        for (uint64_t i = 0; i != v21; ++i)
        {
          if (*(void *)v44 != v22) {
            objc_enumerationMutation(v17);
          }
          float v24 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          float v25 = objc_msgSend_transform(v24, v19, v20);
          float v28 = v25;
          if (v25)
          {
            long long v41 = 0u;
            long long v42 = 0u;
            float32x4_t v39 = 0u;
            long long v40 = 0u;
            objc_msgSend_matrix(v25, v26, v27);
            uint64_t v33 = 0;
            long long v34 = *(_OWORD *)(a2 + 16);
            long long v35 = *(_OWORD *)(a2 + 32);
            long long v36 = *(_OWORD *)(a2 + 48);
            v47[0] = *(_OWORD *)a2;
            v47[1] = v34;
            v47[2] = v35;
            v47[3] = v36;
            float32x4_t v48 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            do
            {
              *(float32x4_t *)((char *)&v48 + v33 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(v47[v33])), v30, *(float32x2_t *)&v47[v33], 1), v31, (float32x4_t)v47[v33], 2), v32, (float32x4_t)v47[v33], 3);
              ++v33;
            }
            while (v33 != 4);
            float32x4_t v39 = v48;
            long long v40 = v49;
            long long v41 = v50;
            long long v42 = v51;
            sub_20B09C2C8(&v48, v24, &v39);
            sub_20B0A2540(a3, &v48);
          }
          else
          {
            sub_20B09C2C8(&v48, v24, a2);
            sub_20B0A2540(a3, &v48);
          }
        }
        uint64_t v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v19, (uint64_t)&v43, v52, 16);
      }
      while (v21);
    }

    int v16 = v37;
  }
}

void sub_20B09C514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20B09C5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B09C6C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09C864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09C8A0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  if (objc_opt_isKindOfClass()) {
    objc_msgSend_addObject_(v6, v7, (uint64_t)v5);
  }
  float32x4_t v9 = objc_msgSend_children(v5, v7, v8);
  int v12 = v9;
  if (v9)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v13 = v9;
    uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v20, v24, 16);
    if (v15)
    {
      uint64_t v16 = *(void *)v21;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v21 != v16) {
            objc_enumerationMutation(v13);
          }
          sub_20B09C8A0(a1, *(void *)(*((void *)&v20 + 1) + 8 * v17++), v6);
        }
        while (v15 != v17);
        uint64_t v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v18, (uint64_t)&v20, v24, 16);
      }
      while (v15);
    }
  }
  float v19 = objc_msgSend_instance(v5, v10, v11, (void)v20);
  if (v19) {
    sub_20B09C8A0(a1, v19, v6);
  }
}

void sub_20B09CA1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09CB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09CD88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09CE60(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  float32x4_t v4 = objc_msgSend_submeshes(a2, (const char *)a2, a3, 0);
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v13, v17, 16);
  if (v8)
  {
    uint64_t v9 = *(void *)v14;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v4);
        }
        uint64_t v11 = objc_msgSend_material(*(void **)(*((void *)&v13 + 1) + 8 * v10), v6, v7);
        objc_msgSend_resolveTexturesWithResolver_(v11, v12, *(void *)(*(void *)(a1 + 32) + 112));

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v13, v17, 16);
    }
    while (v8);
  }
}

void sub_20B09CF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09D068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_20B09D088(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  float32x4_t v4 = objc_msgSend_submeshes(a2, (const char *)a2, a3, 0);
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v13, v17, 16);
  if (v8)
  {
    uint64_t v9 = *(void *)v14;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v4);
        }
        uint64_t v11 = objc_msgSend_material(*(void **)(*((void *)&v13 + 1) + 8 * v10), v6, v7);
        objc_msgSend_loadTexturesUsingResolver_cache_(v11, v12, *(void *)(*(void *)(a1 + 32) + 112), *(void *)(a1 + 40));

        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v13, v17, 16);
    }
    while (v8);
  }
}

void sub_20B09D19C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09D390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09D53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09D680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09D768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09D8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09D9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)MDLAsset;
  [(_Unwind_Exception *)&a10 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B09DAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09E018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_20B09E1E4(void *a1)
{
  v9[1] = *MEMORY[0x263EF8340];
  id v1 = a1;
  uint64_t v2 = (void *)MEMORY[0x263F087E8];
  uint64_t v8 = @"MDLErrorKey";
  v9[0] = v1;
  float32x4_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, v3, (uint64_t)v9, &v8, 1);
  id v6 = objc_msgSend_errorWithDomain_code_userInfo_(v2, v5, @"MDLErrorDomain", 0, v4);

  return v6;
}

void sub_20B09E2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B09E2D8(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  float v3 = objc_msgSend_layouts(a1, a2, a3, 0);
  uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v11, v15, 16);
  if (v7)
  {
    uint64_t v8 = *(void *)v12;
    while (2)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v3);
        }
        if (objc_msgSend_stride(*(void **)(*((void *)&v11 + 1) + 8 * i), v5, v6))
        {
          uint64_t v7 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v11, v15, 16);
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v7;
}

void sub_20B09E3D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B09E3F4(void *a1, uint64_t a2)
{
  id v69 = a1;
  unint64_t v68 = objc_msgSend_objectForKey_(v69, v3, @"kMDLAssetPreserveTopology");
  if (v68) {
    *(unsigned char *)a2 = objc_msgSend_BOOLValue(v68, v4, v5);
  }
  int32x4_t v67 = objc_msgSend_objectForKey_(v69, v4, @"kMDLAssetPreserveIndexing");
  if (v67)
  {
    int v8 = objc_msgSend_BOOLValue(v67, v6, v7);
    *(unsigned char *)(a2 + 1) = v8;
    if (v8) {
      *(unsigned char *)a2 = 1;
    }
  }
  uint64_t v9 = objc_msgSend_objectForKey_(v69, v6, @"kMDLAssetVertexDescriptor");
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    objc_storeStrong((id *)(a2 + 8), v9);
  }
  long long v12 = objc_msgSend_objectForKey_(v69, v10, @"kMDLAssetBufferAllocator");
  if (v12) {
    objc_storeStrong((id *)(a2 + 16), v12);
  }
  long long v13 = objc_msgSend_objectForKey_(v69, v11, @"kMDLAssetComputeFaceNormals");
  uint64_t v16 = v13;
  if (v13)
  {
    int v17 = objc_msgSend_BOOLValue(v13, v14, v15);
    *(unsigned char *)(a2 + 27) = v17;
    if (v17) {
      goto LABEL_20;
    }
  }
  else if (*(unsigned char *)(a2 + 27))
  {
    goto LABEL_20;
  }
  uint64_t v18 = objc_msgSend_objectForKey_(v69, v14, @"kMDLAssetComputeVertexNormals");
  long long v21 = v18;
  if (v18)
  {
    int v22 = objc_msgSend_BOOLValue(v18, v19, v20);
    *(unsigned char *)(a2 + 26) = v22;
    if (v22)
    {
      float v24 = objc_msgSend_objectForKey_(v69, v23, @"kMDLAssetNormalSmoothingThreshold");
      uint64_t v27 = v24;
      if (v24)
      {
        objc_msgSend_floatValue(v24, v25, v26);
        *(_DWORD *)(a2 + 28) = v28;
      }
    }
  }

LABEL_20:
  float32x4_t v29 = objc_msgSend_objectForKey_(v69, v14, @"kMDLAssetPreserveExistingNormals");
  float32x4_t v32 = v29;
  if (v29) {
    *(unsigned char *)(a2 + 32) = objc_msgSend_BOOLValue(v29, v30, v31);
  }
  uint64_t v33 = objc_msgSend_objectForKey_(v69, v30, @"kMDLAssetDisplayNURBSPatches");
  long long v36 = v33;
  if (v33) {
    *(unsigned char *)(a2 + 25) = objc_msgSend_BOOLValue(v33, v34, v35);
  }
  id v37 = objc_msgSend_objectForKey_(v69, v34, @"kMDLAssetAssetAtTime");
  long long v40 = v37;
  if (v37)
  {
    objc_msgSend_doubleValue(v37, v38, v39);
    *(void *)(a2 + 64) = v41;
    *(unsigned char *)(a2 + 35) = 0;
  }
  long long v42 = objc_msgSend_objectForKey_(v69, v38, @"kMDLAssetComputeTangents");
  long long v45 = v42;
  if (v42)
  {
    int v46 = objc_msgSend_BOOLValue(v42, v43, v44);
    *(unsigned char *)(a2 + 33) = v46;
    if (!v46) {
      goto LABEL_38;
    }
  }
  else if (!*(unsigned char *)(a2 + 33))
  {
    goto LABEL_38;
  }
  float v47 = objc_msgSend_objectForKey_(v69, v43, @"kMDLAssetComputeBitangents");
  long long v50 = v47;
  if (v47) {
    *(unsigned char *)(a2 + 34) = objc_msgSend_BOOLValue(v47, v48, v49);
  }

  if (*(unsigned char *)(a2 + 33))
  {
    long long v51 = objc_msgSend_objectForKey_(v69, v43, @"kMDLAssetTangentUVSet");
    uint64_t v53 = v51;
    if (v51)
    {
      id v54 = v51;
      uint64_t v57 = objc_msgSend_UTF8String(v54, v55, v56);
      MEMORY[0x210532310](a2 + 40, v57);
    }
    float v58 = objc_msgSend_objectForKey_(v69, v52, @"kMDLAssetTangentSmoothingThreshold");
    float v61 = v58;
    if (v58)
    {
      objc_msgSend_floatValue(v58, v59, v60);
      *(_DWORD *)(a2 + 36) = v62;
    }
  }
LABEL_38:
  float v63 = objc_msgSend_objectForKey_(v69, v43, @"kMDLAssetComputeExtents");
  float v66 = v63;
  if (v63) {
    *(unsigned char *)(a2 + 24) = objc_msgSend_BOOLValue(v63, v64, v65);
  }
}

void sub_20B09E750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B09E818()
{
}

void sub_20B09E834()
{
}

void sub_20B09E83C()
{
}

void sub_20B09EC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30)
{
  sub_20B09ECF0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20B09ECE4()
{
}

uint64_t sub_20B09ECF0(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }

  return a1;
}

uint64_t sub_20B09ED34(const __CFURL *a1)
{
  if (!a1) {
    return 0;
  }
  MainBundle = CFBundleGetMainBundle();
  if (!MainBundle) {
    return 0;
  }
  float v3 = MainBundle;
  *(void *)packageCreator = 0;
  CFBundleGetPackageInfo(MainBundle, &packageCreator[1], packageCreator);
  uint64_t v4 = 0;
  if (packageCreator[1] != 1095782476) {
    return v4;
  }
  CFURLRef v5 = CFBundleCopyBundleURL(v3);
  if (!v5) {
    return 0;
  }
  CFURLRef v6 = v5;
  uint64_t v7 = (__CFString *)CFURLCopyPath(v5);
  int v8 = (__CFString *)CFURLCopyPath(a1);
  long long v11 = v8;
  if (v7 && v8)
  {
    CFStringRef v12 = (const __CFString *)objc_msgSend_stringByStandardizingPath(v8, v9, v10);
    CFStringRef v15 = (const __CFString *)objc_msgSend_stringByStandardizingPath(v7, v13, v14);
    CFRange v16 = CFStringFind(v12, v15, 1uLL);
    if (v16.location) {
      BOOL v17 = 1;
    }
    else {
      BOOL v17 = v16.length <= 0;
    }
    uint64_t v18 = !v17;
    goto LABEL_16;
  }
  uint64_t v18 = 0;
  uint64_t v4 = 0;
  if (v7)
  {
LABEL_16:
    CFRelease(v7);
    uint64_t v4 = v18;
  }
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v6);
  return v4;
}

void sub_20B09FB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_20B1065E0(&a15);
  _Block_object_dispose(&a66, 8);

  _Block_object_dispose(&a70, 8);
  if (*(char *)(v73 - 233) < 0) {
    operator delete(*(void **)(v73 - 256));
  }
  if (*(char *)(v73 - 209) < 0) {
    operator delete(*(void **)(v73 - 232));
  }

  sub_20B09ECF0(v73 - 208);
  _Unwind_Resume(a1);
}

uint64_t sub_20B09FD00(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_20B09FD10(uint64_t a1)
{
}

void sub_20B09FD18(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

void sub_20B09FD54(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

void sub_20B09FD90(uint64_t a1, void *a2)
{
  id v8 = a2;
  NSLog(&cfstr_AssetloaderLoa.isa, v8);
  uint64_t v5 = objc_msgSend_localizedDescription(v8, v3, v4);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
}

void sub_20B09FE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B09FE24(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (objc_msgSend_length(v6, v4, v5))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_20B09FE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B09FFAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0A0000(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  memset(&__str, 0, sizeof(__str));
  objc_msgSend_path(a1, a2, a3);
  id v5 = objc_claimAutoreleasedReturnValue();
  uint64_t v7 = (char *)objc_msgSend_cStringUsingEncoding_(v5, v6, 4);
  sub_20B07F8E0(&__str, v7);

  std::string::size_type v8 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  a4->__r_.__value_.__r.__words[0] = 0;
  if (v8 != -1)
  {
    std::string::basic_string(&v16, &__str, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
    *a4 = v16;
    int v9 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
    std::string::size_type size = a4->__r_.__value_.__l.__size_;
    if (v9 >= 0) {
      std::string::size_type size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    }
    if (size)
    {
      unint64_t v11 = 0;
      unsigned int v12 = v9 >> 31;
      do
      {
        if (v12) {
          long long v13 = (std::string *)a4->__r_.__value_.__r.__words[0];
        }
        else {
          long long v13 = a4;
        }
        v13->__r_.__value_.__s.__data_[v11] = __toupper(v13->__r_.__value_.__s.__data_[v11]);
        ++v11;
        int v14 = SHIBYTE(a4->__r_.__value_.__r.__words[2]);
        unsigned int v12 = v14 >> 31;
        unint64_t v15 = a4->__r_.__value_.__l.__size_;
        if (v14 >= 0) {
          unint64_t v15 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
        }
      }
      while (v11 < v15);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20B0A011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0A0248(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20B0A0394(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

void sub_20B0A08A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  uint64_t v22 = va_arg(va1, void);

  sub_20B074E60((uint64_t)va);
  sub_20B09ECF0((uint64_t)va1);
  if (*(char *)(v12 - 137) < 0) {
    operator delete(*(void **)(v12 - 160));
  }
  if (*(char *)(v12 - 97) < 0) {
    operator delete(*(void **)(v12 - 120));
  }

  _Unwind_Resume(a1);
}

void sub_20B0A0D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B1065E0(va);

  if (*(char *)(v5 - 49) < 0) {
    operator delete(*(void **)(v5 - 72));
  }

  _Unwind_Resume(a1);
}

void sub_20B0A10A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20B0A22A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32)
{
  for (uint64_t i = 56; i != -8; i -= 8)
  _Unwind_Resume(a1);
}

float32x4_t *sub_20B0A2540(float32x4_t *result, float32x4_t *a2)
{
  float32x4_t v2 = a2[1];
  int8x16_t v3 = (int8x16_t)vcgtq_f32(v2, *a2);
  if (!v3.i32[0]
    || (v3.i32[0] = vextq_s8(v3, v3, 8uLL).u32[0],
        *(int32x2_t *)v3.i8 = vtst_s32(*(int32x2_t *)v3.i8, *(int32x2_t *)v3.i8),
        (v3.i8[4] & 1) == 0)
    || (v3.i8[0] & 1) == 0)
  {
    float32x4_t v4 = *result;
    float32x4_t v5 = result[1];
    int8x16_t v6 = (int8x16_t)vcgtq_f32(v5, *result);
    if (v6.i32[0]
      && (v6.i32[0] = vextq_s8(v6, v6, 8uLL).u32[0],
          *(int32x2_t *)v6.i8 = vtst_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v6.i8),
          (v6.i8[4] & 1) != 0)
      && (v6.i8[0] & 1) != 0)
    {
      result[1] = v2;
      float32x4_t v7 = *a2;
    }
    else
    {
      v5.i32[3] = 0;
      v2.i32[3] = 0;
      result[1] = vminnmq_f32(v5, v2);
      float32x4_t v8 = *a2;
      v4.i32[3] = 0;
      v8.i32[3] = 0;
      float32x4_t v7 = vmaxnmq_f32(v4, v8);
    }
    *uint64_t result = v7;
  }
  return result;
}

float32x4_t *sub_20B0A25D0(float32x4_t *a1, long long *a2, float32x4_t *a3)
{
  uint64_t v3 = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  long long v4 = a2[1];
  HIDWORD(v4) = 1.0;
  long long v5 = *a2;
  HIDWORD(v5) = 1.0;
  long long v6 = v5;
  DWORD2(v6) = *((void *)a2 + 1);
  long long v7 = v4;
  DWORD2(v4) = DWORD2(v6);
  long long v8 = a2[1];
  DWORD1(v8) = HIDWORD(*(void *)a2);
  HIDWORD(v8) = 1.0;
  long long v9 = v8;
  DWORD2(v8) = DWORD2(v6);
  long long v10 = *a2;
  DWORD1(v10) = HIDWORD(*((void *)a2 + 2));
  HIDWORD(v10) = 1.0;
  long long v11 = v10;
  DWORD2(v10) = DWORD2(v6);
  DWORD2(v7) = *((void *)a2 + 3);
  v24[0] = v7;
  v24[1] = v4;
  DWORD2(v9) = DWORD2(v7);
  DWORD2(v11) = DWORD2(v7);
  v24[2] = v9;
  v24[3] = v8;
  v24[4] = v11;
  v24[5] = v10;
  DWORD2(v5) = DWORD2(v7);
  v24[6] = v5;
  v24[7] = v6;
  float32x4_t v12 = *a3;
  float32x4_t v13 = a3[1];
  float32x4_t v14 = a3[2];
  float32x4_t v15 = a3[3];
  do
  {
    v24[v3] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(v24[v3])), v13, *(float32x2_t *)&v24[v3], 1), v14, (float32x4_t)v24[v3], 2), v15, (float32x4_t)v24[v3], 3);
    ++v3;
  }
  while (v3 != 8);
  uint64_t v16 = 0;
  float32x4_t v17 = (float32x4_t)xmmword_20B1E7510;
  float32x4_t v18 = (float32x4_t)xmmword_20B1E7520;
  do
  {
    float32x4_t v19 = (float32x4_t)v24[v16];
    int8x16_t v20 = vbslq_s8((int8x16_t)vcgtq_f32(v18, v19), (int8x16_t)v19, (int8x16_t)v18);
    v18.i64[0] = v20.i64[0];
    v18.i32[2] = v20.i32[2];
    int8x16_t v21 = vbslq_s8((int8x16_t)vcgtq_f32(v19, v17), (int8x16_t)v19, (int8x16_t)v17);
    v17.i64[0] = v21.i64[0];
    v17.i32[2] = v21.i32[2];
    ++v16;
  }
  while (v16 != 8);
  v23[0] = v17;
  v23[1] = v18;
  return sub_20B0A2540(a1, v23);
}

void sub_20B0A2718(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  unint64_t v9 = *(int *)(*(void *)(a1 + 8) + 88);
  unint64_t v10 = NumElements / v9;
  sub_20B0A2BE0((uint64_t)a4, NumElements / v9);
  unint64_t v11 = *(void *)(a1 + 152);
  uint64_t v12 = *a4;
  if (v11)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *(void *)(a1 + 184);
    do
      ++*(_DWORD *)(v12 + 4 * *(int *)(v14 + 4 * v13++));
    while (v11 > v13);
  }
  uint64_t v84 = 0;
  unint64_t v85 = 0;
  uint64_t v86 = 0;
  sub_20B0A2BE0((uint64_t)&v84, (a4[1] - v12) >> 2);
  float32x4_t v15 = v84;
  *(_DWORD *)uint64_t v84 = 0;
  if (v10 >= 2)
  {
    uint64_t v16 = 0;
    uint64_t v17 = *a4;
    for (unint64_t i = 1; i < v10; unint64_t i = (v16++ + 2))
      v15[i] = *(_DWORD *)(v17 + 4 * v16) + v15[v16];
  }
  sub_20B0A2C10((uint64_t)a3, *(void *)(a1 + 152));
  sub_20B0A2C54((uint64_t)a2, *(void *)(a1 + 152), 0);
  unint64_t v19 = *(void *)(a1 + 112);
  if (v19)
  {
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v22 = *(void *)(a1 + 144);
    uint64_t v23 = *(void *)(a1 + 184);
    float v24 = v84;
    uint64_t v25 = *a3;
    do
    {
      unsigned int v26 = *(_DWORD *)(v22 + 4 * v20);
      if (v26)
      {
        int v27 = 0;
        unsigned int v28 = v26 - 1;
        do
        {
          int v29 = v21 + v27;
          int v30 = (v28 + v27) % v26 + v21;
          if (v28 == v27) {
            int v31 = 0;
          }
          else {
            int v31 = v27 + 1;
          }
          int v32 = v31 + v21;
          uint64_t v33 = *(int *)(v23 + 4 * v29);
          int v34 = *(_DWORD *)(v23 + 4 * v32);
          uint64_t v35 = (_DWORD *)(v25 + 28 * v24[v33]);
          *uint64_t v35 = *(_DWORD *)(v23 + 4 * v30);
          v35[1] = v33;
          v35[2] = v34;
          v35[3] = v20;
          v35[4] = v30;
          v35[5] = v29;
          v35[6] = v32;
          ++v24[v33];
          ++v27;
        }
        while (v26 != v27);
      }
      v21 += v26;
      ++v20;
    }
    while (v19 > v20);
  }
  if (NumElements < v9) {
    goto LABEL_63;
  }
  uint64_t v36 = 0;
  unsigned int v37 = 0;
  unsigned int v38 = 0;
  do
  {
    unint64_t v39 = *(unsigned int *)(*a4 + 4 * v36);
    long long v40 = (const void *)(*a3 + 28 * v38);
    float v82 = 0;
    uint64_t v83 = 0;
    int v81 = 0;
    sub_20B0A6060(&v81, v40, (uint64_t)v40 + 28 * v39, v39);
    unint64_t v78 = 0;
    float v79 = 0;
    uint64_t v80 = 0;
    sub_20B0A2DD8((uint64_t)&v78, v39);
    if (!v39) {
      goto LABEL_43;
    }
    uint64_t v41 = 0;
    long long v42 = (int *)v81;
    long long v43 = (char *)v81 + 8;
    do
    {
      uint64_t v44 = 0;
      int v45 = v42[7 * v41];
      int v46 = (char *)v78 + 8 * v41;
      float v47 = (int *)v43;
      while (1)
      {
        int v48 = *v47;
        v47 += 7;
        if (v48 == v45) {
          break;
        }
LABEL_24:
        if (v39 == ++v44) {
          goto LABEL_27;
        }
      }
      if (*v46 == -1)
      {
        *int v46 = v44;
        goto LABEL_24;
      }
      *int v46 = -2;
LABEL_27:
      uint64_t v49 = 0;
      int v50 = v42[7 * v41 + 2];
      long long v51 = (char *)v78 + 8 * v41 + 4;
      int8x16_t v52 = v42;
      while (2)
      {
        int v53 = *v52;
        v52 += 7;
        if (v53 != v50)
        {
LABEL_31:
          if (v39 == ++v49) {
            goto LABEL_34;
          }
          continue;
        }
        break;
      }
      if (*v51 == -1)
      {
        *long long v51 = v49;
        goto LABEL_31;
      }
      *long long v51 = -2;
LABEL_34:
      ++v41;
    }
    while (v41 != v39);
    id v54 = v78;
    uint64_t v55 = (char *)v78 + 4;
    unint64_t v56 = v39;
    do
    {
      uint64_t v57 = *(v55 - 1);
      if ((v57 & 0x80000000) == 0)
      {
        int v58 = v54[2 * v57 + 1];
        if (v58 < 0) {
          *(v55 - 1) = v58;
        }
      }
      uint64_t v59 = *v55;
      if ((v59 & 0x80000000) == 0)
      {
        int v60 = v54[2 * v59];
        if (v60 < 0) {
          _DWORD *v55 = v60;
        }
      }
      v55 += 2;
      --v56;
    }
    while (v56);
LABEL_43:
    memset(__p, 0, sizeof(__p));
    sub_20B0A2C54((uint64_t)__p, v39, 0);
    float v61 = (char *)__p[0];
    if (v39)
    {
      unsigned int v62 = 0;
      int v63 = 0;
      float v64 = v78;
      uint64_t v65 = (char *)v81;
      do
      {
        if (((*(void *)&v61[((unint64_t)v62 >> 3) & 0x1FFFFFF8] >> v62) & 1) == 0)
        {
          unsigned int v66 = v64[2 * v62];
          for (j = v62; (v66 & 0x80000000) == 0; unsigned int v66 = v64[2 * v66])
          {
            unsigned int j = v66;
            if (v62 == v66) {
              break;
            }
          }
          unsigned int v68 = j;
          while (1)
          {
            unsigned int v69 = v64[2 * v68 + 1];
            *(void *)&v61[((unint64_t)(int)v68 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v68;
            float v70 = &v65[28 * v68];
            unint64_t v71 = v38 + v63;
            int v72 = (_OWORD *)(*a3 + 28 * v71);
            long long v73 = *(_OWORD *)v70;
            *(_OWORD *)((char *)v72 + 12) = *(_OWORD *)(v70 + 12);
            _OWORD *v72 = v73;
            uint64_t v74 = *a2;
            unint64_t v75 = v71 >> 6;
            uint64_t v76 = 1 << (v38 + v63);
            if ((v69 & 0x80000000) != 0) {
              break;
            }
            *(void *)(v74 + 8 * v75) |= v76;
            ++v63;
            unsigned int v68 = v69;
            if (j == v69) {
              goto LABEL_54;
            }
          }
          *(void *)(v74 + 8 * v75) &= ~v76;
          ++v63;
        }
LABEL_54:
        ++v62;
      }
      while (v62 != v39);
      v38 += v39;
LABEL_57:
      operator delete(v61);
    }
    else if (__p[0])
    {
      goto LABEL_57;
    }
    if (v78)
    {
      float v79 = v78;
      operator delete(v78);
    }
    if (v81)
    {
      float v82 = v81;
      operator delete(v81);
    }
    uint64_t v36 = ++v37;
  }
  while (v10 > v37);
LABEL_63:
  if (v84)
  {
    unint64_t v85 = v84;
    operator delete(v84);
  }
}

void sub_20B0A2B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0A2BE0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_20B0A5A90((char **)a1, a2 - v2);
  }
}

void sub_20B0A2C10(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20B0A5BAC((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 28 * a2;
  }
}

void sub_20B0A2C54(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      int v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        sub_20B05D0BC();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_20B097114(&v21, v12);
      uint64_t v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      uint64_t v23 = v21;
      int v24 = 0;
      sub_20B0A5DC8(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      uint64_t v17 = v19;
      LODWORD(v18) = v20;
      float32x4_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      int v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        int v21 = v17;
        LODWORD(v22) = v18;
        sub_20B0A5EFC(&v21, v6);
      }
      else
      {
        int v21 = v17;
        LODWORD(v22) = v18;
        sub_20B0A5FB0((uint64_t)&v21, v6);
      }
    }
  }
}

void sub_20B0A2DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0A2DD8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_20B0A6134((void **)a1, a2 - v2);
  }
}

void sub_20B0A2E08(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, int a5, float a6)
{
  uint64_t v9 = *a4;
  uint64_t v8 = a4[1];
  unint64_t v10 = *(void **)(a1 + 8);
  uint64_t v107 = 0;
  memset(v106, 0, sizeof(v106));
  sub_20B0A3504((uint64_t)v106, *(unsigned int *)(a1 + 152));
  uint64_t v105 = 0;
  memset(v104, 0, sizeof(v104));
  uint64_t v94 = sub_20B0A3578(v10);
  float v11 = 1.0;
  if (a5) {
    float v11 = -1.0;
  }
  float v92 = v11;
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    unint64_t v83 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v83)
    {
      uint64_t v84 = (const char *)(v83 + 16);
      if (*(char *)(v83 + 39) < 0) {
        uint64_t v84 = *(const char **)v84;
      }
    }
    else
    {
      uint64_t v84 = "";
    }
    NSLog(&cfstr_MeshSDoesConta_0.isa, v84);
    goto LABEL_56;
  }
  unint64_t v13 = v8 - v9;
  if ((v13 & 0x3FFFFFFFCLL) == 0)
  {
LABEL_50:
    sub_20B0A360C((void *)a1, v104, (uint64_t)v106);
    goto LABEL_56;
  }
  float v14 = 3.1416;
  if (a6 <= 3.1416) {
    float v14 = a6;
  }
  if (v14 < 0.0) {
    float v14 = 0.0;
  }
  float v18 = cosf(v14);
  uint64_t v19 = 0;
  unsigned int v20 = 0;
  int v101 = 0;
  uint64_t v88 = (v13 >> 2);
  while (1)
  {
    unsigned int v21 = *(_DWORD *)(*a4 + 4 * v19);
    _ZF = !v21 || 2 * v21 == 0;
    uint64_t v90 = v19;
    if (!_ZF) {
      break;
    }
LABEL_49:
    v20 += v21;
    uint64_t v19 = v90 + 1;
    if (v90 + 1 == v88) {
      goto LABEL_50;
    }
  }
  unsigned int v23 = 0;
  uint64_t v24 = *(void *)(v94 + 32) + 12 * v19;
  v15.i64[0] = *(void *)v24;
  v15.i32[2] = *(_DWORD *)(v24 + 8);
  float32x4_t v100 = v15;
  float32x4_t v25 = 0uLL;
  *(void *)&long long v17 = 0;
  int v26 = 1;
  unsigned int v93 = v20;
  while (1)
  {
    unsigned int v27 = v26 - 1;
    if (v26 - 1 - v23 >= v21)
    {
      __asm { FMOV            V1.4S, #1.0 }
      float32x4_t v73 = vmulq_f32(v25, vdivq_f32(_Q1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0)));
      int32x4_t v75 = (int32x4_t)vmulq_f32(v73, v73);
      float v74 = vaddq_f32(vaddq_f32((float32x4_t)v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.i8, 1)), (float32x4_t)vdupq_laneq_s32(v75, 2)).f32[0];
      v75.i64[0] = 0;
      v75.i32[2] = 0;
      if (v74 > COERCE_FLOAT(512))
      {
        float v76 = v74;
        float32x2_t v77 = vrsqrte_f32((float32x2_t)LODWORD(v74));
        float32x2_t v78 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v76), vmul_f32(v77, v77)), v77);
        int32x4_t v75 = (int32x4_t)vmulq_n_f32(v73, vmul_f32(v78, vrsqrts_f32((float32x2_t)LODWORD(v76), vmul_f32(v78, v78))).f32[0]);
      }
      uint64_t v102 = v75.i64[0];
      __int32 v103 = v75.i32[2];
      sub_20B0A6560((uint64_t)v104, &v102);
      ++v101;
      goto LABEL_49;
    }
    unint64_t v28 = v27 % v21 + v20;
    uint64_t v29 = *a3;
    int v30 = (int *)(*a3 + 28 * v28);
    uint64_t v31 = *(void *)(v94 + 32);
    uint64_t v32 = v31 + 12 * *v30;
    v15.i64[0] = *(void *)v32;
    v15.i32[2] = *(_DWORD *)(v32 + 8);
    int v34 = v30[2];
    uint64_t v33 = v30 + 2;
    uint64_t v35 = v31 + 12 * v34;
    v16.i64[0] = *(void *)v35;
    v16.i32[2] = *(_DWORD *)(v35 + 8);
    int32x4_t v36 = (int32x4_t)vsubq_f32(v15, v100);
    int32x4_t v37 = (int32x4_t)vsubq_f32(v16, v100);
    int32x4_t v38 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL))), (float32x4_t)v36, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL));
    int32x4_t v39 = (int32x4_t)vmulq_f32((float32x4_t)v38, (float32x4_t)v38);
    float32x4_t v40 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v39, 2), (float32x4_t)v39), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 1));
    float32x4_t v41 = 0uLL;
    if (v40.f32[0] > COERCE_FLOAT(512))
    {
      int32x4_t v38 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
      unsigned __int32 v42 = v40.i32[0];
      float32x2_t v43 = vrsqrte_f32((float32x2_t)v40.u32[0]);
      float32x2_t v44 = vmul_f32(vrsqrts_f32((float32x2_t)v42, vmul_f32(v43, v43)), v43);
      float32x4_t v41 = vmulq_n_f32((float32x4_t)v38, vmul_f32(v44, vrsqrts_f32((float32x2_t)v42, vmul_f32(v44, v44))).f32[0]);
    }
    float32x4_t v45 = vmulq_n_f32(v41, v92);
    int v46 = (int *)(v29 + 28 * (int)(v26 % v21 + v20));
    uint64_t v47 = v31 + 12 * *v46;
    v38.i64[0] = *(void *)v47;
    v38.i32[2] = *(_DWORD *)(v47 + 8);
    uint64_t v48 = v31 + 12 * v46[2];
    v40.i64[0] = *(void *)v48;
    v40.i32[2] = *(_DWORD *)(v48 + 8);
    int32x4_t v49 = (int32x4_t)vsubq_f32((float32x4_t)v38, v100);
    int32x4_t v50 = (int32x4_t)vsubq_f32(v40, v100);
    int32x4_t v51 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL))), (float32x4_t)v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v50, v50), (int8x16_t)v50, 0xCuLL));
    float32x4_t v52 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v51, v51), (int8x16_t)v51, 0xCuLL), v92);
    int32x4_t v53 = (int32x4_t)vmulq_f32(v52, v52);
    int32x2_t v54 = (int32x2_t)vaddq_f32(vaddq_f32((float32x4_t)v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.i8, 1)), (float32x4_t)vdupq_laneq_s32(v53, 2)).u64[0];
    *(float *)v54.i32 = sqrtf(*(float *)v54.i32);
    long long v97 = v17;
    float32x4_t v98 = v25;
    float32x4_t v96 = v45;
    if (*(float *)v54.i32 >= 0.0001)
    {
      __asm { FMOV            V2.4S, #1.0 }
      int32x4_t v60 = (int32x4_t)vmulq_f32(vmulq_f32(v52, v45), vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(v54, 0)));
      BOOL v55 = vaddq_f32(vaddq_f32((float32x4_t)v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.i8, 1)), (float32x4_t)vdupq_laneq_s32(v60, 2)).f32[0] < v18;
    }
    else
    {
      BOOL v55 = 1;
    }
    int v61 = v101;
    if (v27 >= v21)
    {
      uint64_t v62 = *(int *)(v29 + 28 * v28 + 20);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
      int v61 = *(_DWORD *)(v107 + 4 * v62);
    }
    uint64_t v63 = *(int *)(v29 + 28 * v28 + 20);
    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
    long long v17 = v97;
    v15.i32[3] = v96.i32[3];
    float32x4_t v25 = vaddq_f32(v96, v98);
    *(float *)&long long v17 = *(float *)&v97 + 1.0;
    *(_DWORD *)(v107 + 4 * v63) = v101;
    char v64 = ((*(void *)(*a2 + ((v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) == 0 || v55;
    if ((v64 & 1) == 0 && *v46 == *v33) {
      goto LABEL_37;
    }
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v66 = vmulq_f32(v25, vdivq_f32(_Q1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v17, 0)));
    int32x4_t v67 = (int32x4_t)vmulq_f32(v66, v66);
    float v68 = vaddq_f32(vaddq_f32((float32x4_t)v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.i8, 1)), (float32x4_t)vdupq_laneq_s32(v67, 2)).f32[0];
    float32x4_t v99 = 0u;
    if (v68 > COERCE_FLOAT(512))
    {
      float v69 = v68;
      float32x2_t v70 = vrsqrte_f32((float32x2_t)LODWORD(v68));
      float32x2_t v71 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v69), vmul_f32(v70, v70)), v70);
      float32x4_t v99 = vmulq_n_f32(v66, vmul_f32(v71, vrsqrts_f32((float32x2_t)LODWORD(v69), vmul_f32(v71, v71))).f32[0]);
    }
    if (v27 >= v21) {
      break;
    }
    uint64_t v102 = v99.i64[0];
    __int32 v103 = v99.i32[2];
    sub_20B0A6560((uint64_t)v104, &v102);
    ++v101;
    *(void *)&long long v17 = 0;
    float32x4_t v25 = 0uLL;
    if (v21 == v26)
    {
      unsigned int v23 = v26;
      unsigned int v20 = v93;
      if (*v46 != *v33) {
        goto LABEL_49;
      }
      goto LABEL_38;
    }
    unsigned int v23 = v26;
LABEL_37:
    unsigned int v20 = v93;
LABEL_38:
    if (v23 < v21 && v26++ < 2 * v21) {
      continue;
    }
    goto LABEL_49;
  }
  unsigned int v20 = v93;
  uint64_t v79 = *(int *)(*a3 + 28 * v93 + 20);
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
  unint64_t v80 = *(int *)(v107 + 4 * v79);
  if (v104[0].n128_u64[0] > v80)
  {
    sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v104);
    uint64_t v81 = v105 + 12 * (int)v80;
    v15.i32[3] = v99.i32[3];
    *(void *)uint64_t v81 = v99.i64[0];
    *(_DWORD *)(v81 + 8) = v99.i32[2];
    if ((v27 & 0x80000000) == 0)
    {
      do
      {
        uint64_t v82 = *(int *)(*a3 + 28 * (--v26 % v21 + v93) + 20);
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
        if (*(_DWORD *)(v107 + 4 * v82) != v101) {
          break;
        }
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v106);
        *(_DWORD *)(v107 + 4 * v82) = v61;
      }
      while (v26 > 0);
    }
    goto LABEL_49;
  }
  unint64_t v85 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
  if (v85)
  {
    uint64_t v86 = (const char *)(v85 + 16);
    if (*(char *)(v85 + 39) < 0) {
      uint64_t v86 = *(const char **)v86;
    }
  }
  else
  {
    uint64_t v86 = "";
  }
  NSLog(&cfstr_MeshSDoesConta.isa, v86);
LABEL_56:
  sub_20B06A6E8((uint64_t)v104);
  sub_20B06A6E8((uint64_t)v106);
}

void sub_20B0A34B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20B06A6E8((uint64_t)&a33);
  sub_20B06A6E8(v33 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A3504(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_20B06A85C((void *)a1);
  unint64_t v6 = &v5;
  sub_20B0A624C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B0A3560(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A3578(void *a1)
{
  if (sub_20B0A6414((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B0A644C, &unk_26BF4F030);
  }
}

uint64_t sub_20B0A360C(void *a1, __n128 *a2, uint64_t a3)
{
  v35[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  int v26 = a1 + 1;
  if (a1[2] == v4) {
    goto LABEL_9;
  }
  uint64_t v24 = a2;
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  unsigned int v7 = 1;
  char v8 = 1;
  do
  {
    MEMORY[0x2105310B0](v27, "normals");
    uint64_t v9 = *(void *)(v4 + 96 * v5 + 56);
    unint64_t v10 = (atomic_uint *)(v27[0] & 0xFFFFFFFFFFFFFFF8);
    if ((v27[0] & 7) != 0) {
      atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    v8 &= v11 != (void)v10;
    if ((atomic_uint *)v11 == v10) {
      unsigned int v6 = v7 - 1;
    }
    uint64_t v5 = v7;
    uint64_t v4 = a1[1];
  }
  while (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 5) > v7++);
  a2 = v24;
  if (v8)
  {
LABEL_9:
    v35[0] = 0;
    v35[1] = 0;
    sub_20B0A3ED0(v35, a2);
    sub_20B0A592C(v27, v35);
    long long v13 = *(_OWORD *)(a3 + 16);
    long long v28 = *(_OWORD *)a3;
    long long v29 = v13;
    uint64_t v14 = *(void *)(a3 + 32);
    uint64_t v30 = v14;
    if (v14)
    {
      float32x4_t v15 = (atomic_ullong *)(v14 - 16);
      if (*((void *)&v29 + 1)) {
        float32x4_t v15 = (atomic_ullong *)*((void *)&v29 + 1);
      }
      atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
    }
    MEMORY[0x2105310B0](&v31, "normals");
    MEMORY[0x2105310B0](v32, "normals");
    float32x4_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!v16) {
      float32x4_t v16 = sub_20B0A6508(MEMORY[0x263F90560]);
    }
    v32[1] = *((void *)v16 + 77);
    MEMORY[0x2105310B0](&v33, "faceVarying");
    int v34 = 1;
    unint64_t v17 = a1[2];
    if (v17 >= a1[3])
    {
      uint64_t v18 = sub_20B0A6FC4(v26, (uint64_t)v27);
    }
    else
    {
      sub_20B0A70D4((uint64_t)(a1 + 3), (void *)a1[2], (uint64_t)v27);
      uint64_t v18 = v17 + 96;
      a1[2] = v17 + 96;
    }
    a1[2] = v18;
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v32[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v31 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_20B06A6E8((uint64_t)&v28);
    sub_20B06A698((uint64_t)v27);
    return sub_20B06A698((uint64_t)v35);
  }
  else
  {
    sub_20B0A3ED0((void *)(v4 + 96 * v6), v24);
    sub_20B0A4010(*v26 + 96 * v6 + 16, (long long *)a3);
    MEMORY[0x2105310B0](v27, "normals");
    unsigned int v20 = (void *)(*v26 + 96 * v6 + 56);
    if (v27 == v20)
    {
      if ((v27[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *unsigned int v20 = v27[0];
    }
    MEMORY[0x2105310B0](v27, "normals");
    unsigned int v21 = (void *)(*v26 + 96 * v6 + 64);
    if (v27 == v21)
    {
      if ((v27[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *unsigned int v21 = v27[0];
    }
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!v22) {
      long long v22 = sub_20B0A6508(MEMORY[0x263F90560]);
    }
    *(void *)(*v26 + 96 * v6 + 72) = *((void *)v22 + 77);
    uint64_t result = MEMORY[0x2105310B0](v27, "faceVarying");
    unsigned int v23 = (void *)(*v26 + 96 * v6 + 80);
    if (v27 == v23)
    {
      if ((v27[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *unsigned int v23 = v27[0];
    }
    *(_DWORD *)(*v26 + 96 * v6 + 88) = 1;
  }
  return result;
}

void sub_20B0A3A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B0A3F88(va);
  sub_20B06A698(v4 - 104);
  _Unwind_Resume(a1);
}

void sub_20B0A3AF0(uint64_t a1, int a2)
{
  uint64_t v56 = 0;
  memset(v55, 0, sizeof(v55));
  sub_20B0A3504((uint64_t)v55, *(unsigned int *)(a1 + 152));
  uint64_t v54 = 0;
  memset(v53, 0, sizeof(v53));
  uint64_t v4 = sub_20B0A3578(*(void **)(a1 + 8));
  float v5 = 1.0;
  if (a2) {
    float v5 = -1.0;
  }
  float v50 = v5;
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    if (*(void *)(a1 + 112))
    {
      uint64_t v9 = 0;
      unsigned int v10 = 0;
      int v11 = 0;
      do
      {
        uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 144) + 4 * v9);
        if (v12)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *(void *)(a1 + 184);
          uint64_t v15 = *(void *)(v4 + 32);
          v16.i64[0] = 0;
          v16.i32[2] = 0;
          float v17 = 1.0;
          do
          {
            unsigned int v18 = ((int)v12 - 1 + (int)v13) % v12 + v11;
            BOOL v19 = v12 - 1 == v13;
            uint64_t v20 = v15 + 12 * *(int *)(v14 + 4 * (v11 + v13));
            v8.i64[0] = *(void *)v20;
            v8.i32[2] = *(_DWORD *)(v20 + 8);
            ++v13;
            uint64_t v21 = v15 + 12 * *(int *)(v14 + 4 * v18);
            v7.i64[0] = *(void *)v21;
            v7.i32[2] = *(_DWORD *)(v21 + 8);
            if (v19) {
              int v22 = 0;
            }
            else {
              int v22 = v13;
            }
            float32x4_t v23 = vsubq_f32((float32x4_t)v7, v8);
            int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
            float v25 = vaddq_f32(vaddq_f32((float32x4_t)v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x4_t)vdupq_laneq_s32(v24, 2)).f32[0];
            int32x4_t v7 = 0uLL;
            if (v25 > COERCE_FLOAT(512))
            {
              float v26 = v25;
              float32x2_t v27 = vrsqrte_f32((float32x2_t)LODWORD(v25));
              float32x2_t v28 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v26), vmul_f32(v27, v27)), v27);
              int32x4_t v7 = (int32x4_t)vmulq_n_f32(v23, vmul_f32(v28, vrsqrts_f32((float32x2_t)LODWORD(v26), vmul_f32(v28, v28))).f32[0]);
            }
            uint64_t v29 = v15 + 12 * *(int *)(v14 + 4 * (v22 + v11));
            v23.i64[0] = *(void *)v29;
            v23.i32[2] = *(_DWORD *)(v29 + 8);
            float32x4_t v30 = vsubq_f32(v23, v8);
            int32x4_t v31 = (int32x4_t)vmulq_f32(v30, v30);
            float v32 = vaddq_f32(vaddq_f32((float32x4_t)v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 1)), (float32x4_t)vdupq_laneq_s32(v31, 2)).f32[0];
            int32x4_t v33 = 0uLL;
            if (v32 > COERCE_FLOAT(512))
            {
              float v34 = v32;
              float32x2_t v35 = vrsqrte_f32((float32x2_t)LODWORD(v32));
              float32x2_t v36 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v34), vmul_f32(v35, v35)), v35);
              int32x4_t v33 = (int32x4_t)vmulq_n_f32(v30, vmul_f32(v36, vrsqrts_f32((float32x2_t)LODWORD(v34), vmul_f32(v36, v36))).f32[0]);
            }
            int32x4_t v37 = (int32x4_t)vmulq_f32((float32x4_t)v7, (float32x4_t)v7);
            float32x4_t v8 = vaddq_f32(vaddq_f32((float32x4_t)v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.i8, 1)), (float32x4_t)vdupq_laneq_s32(v37, 2));
            if (sqrtf(v8.f32[0]) != 0.0)
            {
              int32x4_t v38 = (int32x4_t)vmulq_f32((float32x4_t)v33, (float32x4_t)v33);
              BOOL v19 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 1)), (float32x4_t)vdupq_laneq_s32(v38, 2)).f32[0]) == 0.0;
              int32x4_t v39 = (int32x4_t)vmulq_f32((float32x4_t)v33, (float32x4_t)v7);
              float32x4_t v8 = vaddq_f32(vaddq_f32((float32x4_t)v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 1)), (float32x4_t)vdupq_laneq_s32(v39, 2));
              v8.f32[0] = fabsf(v8.f32[0]);
              if (!v19 && v8.f32[0] < v17)
              {
                int32x4_t v41 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v33, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v7, v7), (int8x16_t)v7, 0xCuLL))), (float32x4_t)v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL));
                float32x4_t v42 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL), v50);
                int32x4_t v16 = (int32x4_t)vmulq_f32(v42, v42);
                int32x4_t v7 = (int32x4_t)vaddq_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x4_t)vdupq_laneq_s32(v16, 2));
                v16.i64[0] = 0;
                v16.i32[2] = 0;
                if (*(float *)v7.i32 > COERCE_FLOAT(512))
                {
                  unsigned __int32 v43 = v7.i32[0];
                  float32x2_t v44 = vrsqrte_f32((float32x2_t)v7.u32[0]);
                  float32x2_t v45 = vmul_f32(vrsqrts_f32((float32x2_t)v43, vmul_f32(v44, v44)), v44);
                  int32x4_t v16 = (int32x4_t)vmulq_n_f32(v42, vmul_f32(v45, vrsqrts_f32((float32x2_t)v43, vmul_f32(v45, v45))).f32[0]);
                }
                float v17 = v8.f32[0];
              }
            }
          }
          while (v12 != v13);
        }
        else
        {
          v16.i64[0] = 0;
          v16.i32[2] = 0;
        }
        uint64_t v51 = v16.i64[0];
        __int32 v52 = v16.i32[2];
        sub_20B0A6560((uint64_t)v53, &v51);
        uint64_t v46 = v12;
        unsigned int v47 = v11;
        if (v12)
        {
          do
          {
            sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v55);
            *(_DWORD *)(v56 + 4 * v47++) = v10;
            --v46;
          }
          while (v46);
        }
        v11 += v12;
        uint64_t v9 = ++v10;
      }
      while (*(void *)(a1 + 112) > (unint64_t)v10);
    }
    sub_20B0A360C((void *)a1, v53, (uint64_t)v55);
  }
  else
  {
    unint64_t v48 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v48)
    {
      int32x4_t v49 = (const char *)(v48 + 16);
      if (*(char *)(v48 + 39) < 0) {
        int32x4_t v49 = *(const char **)v49;
      }
    }
    else
    {
      int32x4_t v49 = "";
    }
    NSLog(&cfstr_MeshSDoesConta_0.isa, v49);
  }
  sub_20B06A6E8((uint64_t)v53);
  sub_20B06A6E8((uint64_t)v55);
}

void sub_20B0A3EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);
  _Unwind_Resume(a1);
}

__n128 sub_20B0A3ED0(void *a1, __n128 *a2)
{
  if ((sub_20B0A6414((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_20B0A66F8((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_20B0A6E20(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20B0A3F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B0A3F88(void *a1)
{
  uint64_t v2 = a1[10];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[8];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = a1[7];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8((uint64_t)(a1 + 2));

  return sub_20B06A698((uint64_t)a1);
}

uint64_t sub_20B0A4010(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      unint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        unint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B0A40A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_20B0A40C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v1) {
    return 0;
  }
  uint64_t v3 = 0;
  unsigned int v4 = 1;
  do
  {
    uint64_t v5 = v1 + 96 * v3;
    MEMORY[0x2105310B0](&v10, "normals");
    unint64_t v6 = *(void *)(v5 + 56) & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v7 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
    BOOL result = v6 == (v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v6 == v7) {
      break;
    }
    uint64_t v3 = v4;
    uint64_t v1 = *(void *)(a1 + 8);
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v1) >> 5) > v4++);
  return result;
}

uint64_t sub_20B0A4194(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 8) + 112);
}

uint64_t sub_20B0A41A4(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 144) + 4 * a2);
}

float sub_20B0A41B8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  uint64_t v6 = *(void *)(sub_20B0A3578(*(void **)(v5 + 8)) + 32)
     + 12 * *(int *)(*(void *)(v5 + 184) + 4 * (3 * a3 + a4));
  *(_DWORD *)a2 = *(_DWORD *)v6;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v6 + 4);
  float result = *(float *)(v6 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20B0A422C(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = *(unsigned int *)(v5 + 4);
  if (v6 == -1)
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return result;
  }
  uint64_t v9 = *(void *)(v5 + 8);
  uint64_t v10 = sub_20B0A3578((void *)(*(void *)(v9 + 8) + 96 * v6));
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = v11 + 96 * v6;
  uint64_t v13 = *(void *)(v12 + 80);
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  float result = MEMORY[0x2105310B0](&v25, "faceVarying");
  int v14 = 3 * a3;
  uint64_t v15 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
  int32x4_t v16 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = (v14 + a4);
  unsigned int v18 = (void *)(v12 + 16);
  if (v15 == v16)
  {
    if (!*v18)
    {
      int32x4_t v24 = (_DWORD *)(*(void *)(v10 + 32) + 12 * v17);
      goto LABEL_29;
    }
    LODWORD(v23) = *(_DWORD *)(*(void *)(v11 + 96 * v6 + 48) + 4 * v17);
    goto LABEL_25;
  }
  float result = MEMORY[0x2105310B0](&v25, "vertex");
  BOOL v19 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 == v19)
  {
    unint64_t v23 = *(int *)(*(void *)(v9 + 184) + 4 * v17);
    if (!*v18) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  float result = MEMORY[0x2105310B0](&v25, "uniform");
  uint64_t v20 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v20, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 == v20)
  {
    unint64_t v23 = v17 / 3uLL;
    if (!*v18)
    {
      int32x4_t v24 = (_DWORD *)(*(void *)(v10 + 32) + 12 * v23);
      goto LABEL_29;
    }
LABEL_24:
    LODWORD(v23) = *(_DWORD *)(*(void *)(v11 + 96 * v6 + 48) + 4 * v23);
LABEL_25:
    int32x4_t v24 = (_DWORD *)(*(void *)(v10 + 32) + 12 * (int)v23);
    goto LABEL_29;
  }
  float result = MEMORY[0x2105310B0](&v25, "constant");
  uint64_t v21 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v21, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 != v21)
  {
    *(void *)a2 = 0;
    int v22 = 0;
    goto LABEL_30;
  }
  int32x4_t v24 = *(_DWORD **)(v10 + 32);
LABEL_29:
  *(_DWORD *)a2 = *v24;
  *(_DWORD *)(a2 + 4) = v24[1];
  int v22 = v24[2];
LABEL_30:
  *(_DWORD *)(a2 + 8) = v22;
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_20B0A4468(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A448C(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5 = *(unsigned int **)(result + 8);
  uint64_t v6 = *v5;
  if (v6 == -1)
  {
    *(void *)a2 = 0;
    return result;
  }
  uint64_t v9 = *((void *)v5 + 1);
  uint64_t v10 = sub_20B0A46C0((void *)(*(void *)(v9 + 8) + 96 * v6));
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = v11 + 96 * v6;
  uint64_t v13 = *(void *)(v12 + 80);
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  float result = MEMORY[0x2105310B0](&v25, "faceVarying");
  int v14 = 3 * a3;
  uint64_t v15 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
  int32x4_t v16 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = (v14 + a4);
  unsigned int v18 = (void *)(v12 + 16);
  if (v15 == v16)
  {
    if (!*v18)
    {
      int32x4_t v24 = (_DWORD *)(*(void *)(v10 + 32) + 8 * v17);
      goto LABEL_26;
    }
    unint64_t v23 = *(int *)(*(void *)(v11 + 96 * v6 + 48) + 4 * v17);
    goto LABEL_25;
  }
  float result = MEMORY[0x2105310B0](&v25, "vertex");
  BOOL v19 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 == v19)
  {
    unint64_t v23 = *(int *)(*(void *)(v9 + 184) + 4 * v17);
    goto LABEL_23;
  }
  float result = MEMORY[0x2105310B0](&v25, "uniform");
  uint64_t v20 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v20, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 == v20)
  {
    unint64_t v23 = v17 / 3uLL;
LABEL_23:
    if (*v18) {
      unint64_t v23 = *(int *)(*(void *)(v11 + 96 * v6 + 48) + 4 * v23);
    }
LABEL_25:
    int32x4_t v24 = (_DWORD *)(*(void *)(v10 + 32) + 8 * v23);
    goto LABEL_26;
  }
  float result = MEMORY[0x2105310B0](&v25, "constant");
  uint64_t v21 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit(v21, 0xFFFFFFFE, memory_order_release);
  }
  if (v15 != v21)
  {
    *(_DWORD *)a2 = 0;
    int v22 = 0;
    goto LABEL_27;
  }
  int32x4_t v24 = *(_DWORD **)(v10 + 32);
LABEL_26:
  *(_DWORD *)a2 = *v24;
  int v22 = v24[1];
LABEL_27:
  *(_DWORD *)(a2 + 4) = v22;
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_20B0A469C(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A46C0(void *a1)
{
  if (sub_20B0A7634((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      unsigned int v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B0A766C, &unk_26BF4F000);
  }
}

void sub_20B0A4754(uint64_t a1, int *a2, int a3, int a4, float a5)
{
  uint64_t v7 = *(void *)(a1 + 8);
  unsigned int v8 = 3 * a3 + a4;
  int v9 = *a2;
  sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(void *)(v7 + 48) + 16 * v8) = v9;
  int v10 = a2[1];
  sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(void *)(v7 + 48) + 16 * v8 + 4) = v10;
  int v11 = a2[2];
  sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(void *)(v7 + 48) + 16 * v8 + 8) = v11;
  sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(float *)(*(void *)(v7 + 48) + 16 * v8 + 12) = a5;
}

void sub_20B0A47F4(uint64_t a1, int *a2, int *a3, int a4, int a5, int a6)
{
  int v9 = *(void **)(a1 + 8);
  uint64_t v10 = (3 * a5 + a6);
  int v11 = *a2;
  sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10) = v11;
  int v12 = a2[1];
  sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10 + 4) = v12;
  int v13 = a2[2];
  sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10 + 8) = v13;
  if (a4) {
    float v14 = 1.0;
  }
  else {
    float v14 = -1.0;
  }
  sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(float *)(v9[6] + 16 * v10 + 12) = v14;
  int v15 = *a3;
  sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  uint64_t v16 = v10 + 2 * v10;
  *(_DWORD *)(v9[11] + 4 * v16) = v15;
  int v17 = a3[1];
  sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  *(_DWORD *)(v9[11] + 4 * v16 + 4) = v17;
  int v18 = a3[2];
  sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  *(_DWORD *)(v9[11] + 4 * v16 + 8) = v18;
}

uint64_t sub_20B0A4904(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = -1;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a2 + 16) == v5)
  {
    if (*(_DWORD *)(a1 + 4) != -1)
    {
LABEL_46:
      unint64_t v24 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v24)
      {
        uint64_t v25 = (const char *)(v24 + 16);
        if (*(char *)(v24 + 39) < 0) {
          uint64_t v25 = *(const char **)v25;
        }
      }
      else
      {
        uint64_t v25 = "";
      }
      NSLog(&cfstr_MeshSDoesNotCo.isa, v25);
      return 0;
    }
LABEL_49:
    unint64_t v26 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v26)
    {
      float32x2_t v27 = (const char *)(v26 + 16);
      if (*(char *)(v26 + 39) < 0) {
        float32x2_t v27 = *(const char **)v27;
      }
    }
    else
    {
      float32x2_t v27 = "";
    }
    NSLog(&cfstr_MeshSDoesConta_1.isa, v27);
    return 0;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  int v9 = -1;
  do
  {
    uint64_t v10 = v5 + 96 * v7;
    MEMORY[0x2105310B0](&v28, "normals");
    uint64_t v11 = *(void *)(v10 + 56);
    int v12 = (atomic_uint *)(v28 & 0xFFFFFFFFFFFFFFF8);
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)(v11 & 0xFFFFFFFFFFFFFFF8) == v12)
    {
      *(_DWORD *)(a1 + 4) = v8;
      goto LABEL_27;
    }
    if (!atomic_load(MEMORY[0x263F90560])) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
    {
      if (!atomic_load(MEMORY[0x263F90560])) {
        sub_20B0A6508(MEMORY[0x263F90560]);
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
        goto LABEL_27;
      }
    }
    if (v9 == -1) {
      int v9 = v8;
    }
    uint64_t v15 = *(void *)(a2 + 8) + 96 * v7;
    MEMORY[0x2105310C0](&v28, a3);
    uint64_t v16 = (atomic_uint *)(*(void *)(v15 + 56) & 0xFFFFFFFFFFFFFFF8);
    if (v16 == (atomic_uint *)(v28 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((v28 & 7) != 0) {
        atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
      }
LABEL_26:
      *(_DWORD *)a1 = v8;
      goto LABEL_27;
    }
    if (*((char *)a3 + 23) < 0)
    {
      if (a3[1])
      {
LABEL_17:
        char v17 = 0;
        goto LABEL_23;
      }
    }
    else if (*((unsigned char *)a3 + 23))
    {
      goto LABEL_17;
    }
    char v17 = 1;
LABEL_23:
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v17) {
      goto LABEL_26;
    }
LABEL_27:
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v7 = ++v8;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 16) - v5) >> 5) > v8);
  int v18 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == -1 && v9 != -1)
  {
    unint64_t v19 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v19)
    {
      uint64_t v20 = (const char *)(v19 + 16);
      if (*(char *)(v19 + 39) < 0) {
        uint64_t v20 = *(const char **)v20;
      }
    }
    else
    {
      uint64_t v20 = "";
    }
    if (*((char *)a3 + 23) < 0) {
      a3 = (uint64_t *)*a3;
    }
    NSLog(&cfstr_WarningMeshSUn.isa, v20, a3);
    *(_DWORD *)a1 = v9;
    int v18 = v9;
  }
  if (*(_DWORD *)(a1 + 4) == -1) {
    goto LABEL_49;
  }
  if (v18 == -1) {
    goto LABEL_46;
  }
  sub_20B06A31C((uint64_t)&v28, *(unsigned int *)(a2 + 152));
  if ((long long *)(a1 + 16) != &v28)
  {
    sub_20B06A6E8(a1 + 16);
    long long v21 = v29;
    *(_OWORD *)(a1 + 16) = v28;
    *(_OWORD *)(a1 + 32) = v21;
    long long v28 = 0u;
    long long v29 = 0u;
    *(void *)(a1 + 48) = v30;
    uint64_t v30 = 0;
  }
  sub_20B06A6E8((uint64_t)&v28);
  sub_20B0A4CAC((uint64_t)&v28, *(unsigned int *)(a2 + 152));
  if ((long long *)(a1 + 56) != &v28)
  {
    sub_20B06A6E8(a1 + 56);
    long long v22 = v29;
    *(_OWORD *)(a1 + 56) = v28;
    *(_OWORD *)(a1 + 72) = v22;
    long long v28 = 0u;
    long long v29 = 0u;
    *(void *)(a1 + 88) = v30;
    uint64_t v30 = 0;
  }
  sub_20B06A6E8((uint64_t)&v28);
  *(void *)(a1 + 8) = a2;
  return 1;
}

void sub_20B0A4C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A4CAC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v6 = 0;
  uint64_t v5 = 0;
  sub_20B06A85C((void *)a1);
  uint64_t v7 = &v5;
  sub_20B0A7728((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20B0A4D0C(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

void sub_20B0A4D24(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = a2[1];
  id v52 = v9;
  int32x4_t v53 = a2 + 1;
  if (a2[2] == v10)
  {
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
  }
  else
  {
    float v50 = a1;
    uint64_t v11 = 0;
    int v12 = -1;
    unsigned int v13 = 1;
    do
    {
      id v14 = v8;
      uint64_t v17 = objc_msgSend_UTF8String(v14, v15, v16);
      MEMORY[0x2105310B0](v57, v17);
      uint64_t v18 = *(void *)(v10 + 96 * v11 + 56);
      unint64_t v19 = (atomic_uint *)(v57[0] & 0xFFFFFFFFFFFFFFF8);
      if ((v57[0] & 7) != 0) {
        atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v18 & 0xFFFFFFFFFFFFFFF8) == v19) {
        int v12 = v13 - 1;
      }
      uint64_t v11 = v13;
      uint64_t v10 = a2[1];
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[2] - v10) >> 5) > v13++);
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    a1 = v50;
    if (v12 != -1)
    {
      sub_20B0A5254((void *)(v10 + 96 * v12), v50);
      sub_20B0A4010(*v53 + 96 * v12 + 16, &v54);
      id v21 = v14;
      uint64_t v24 = objc_msgSend_UTF8String(v21, v22, v23);
      MEMORY[0x2105310B0](v57, v24);
      uint64_t v25 = (void *)(*v53 + 96 * v12 + 56);
      if (v57 == v25)
      {
        if ((v57[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v25 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *uint64_t v25 = v57[0];
      }
      id v40 = v21;
      uint64_t v43 = objc_msgSend_UTF8String(v40, v41, v42);
      MEMORY[0x2105310B0](v57, v43);
      float32x2_t v44 = (void *)(*v53 + 96 * v12 + 64);
      if (v57 == v44)
      {
        if ((v57[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *float32x2_t v44 = v57[0];
      }
      *(void *)(*v53 + 96 * v12 + 72) = a5;
      id v45 = v52;
      uint64_t v48 = objc_msgSend_UTF8String(v45, v46, v47);
      MEMORY[0x2105310B0](v57, v48);
      int32x4_t v49 = (void *)(*v53 + 96 * v12 + 80);
      if (v57 == v49)
      {
        if ((v57[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v49 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *int32x4_t v49 = v57[0];
      }
      *(_DWORD *)(*v53 + 96 * v12 + 88) = 1;
      goto LABEL_39;
    }
  }
  sub_20B0A592C(v57, a1);
  v58[0] = v54;
  v58[1] = v55;
  uint64_t v59 = v56;
  id v26 = v8;
  uint64_t v29 = objc_msgSend_UTF8String(v26, v27, v28);
  MEMORY[0x2105310B0](&v60, v29);
  id v30 = v26;
  uint64_t v33 = objc_msgSend_UTF8String(v30, v31, v32);
  MEMORY[0x2105310B0](v61, v33);
  v61[1] = a5;
  id v34 = v52;
  uint64_t v37 = objc_msgSend_UTF8String(v34, v35, v36);
  MEMORY[0x2105310B0](&v62, v37);
  int v63 = 1;
  unint64_t v38 = a2[2];
  if (v38 >= a2[3])
  {
    uint64_t v39 = sub_20B0A6FC4(v53, (uint64_t)v57);
  }
  else
  {
    sub_20B0A70D4((uint64_t)(a2 + 3), (void *)a2[2], (uint64_t)v57);
    uint64_t v39 = v38 + 96;
    a2[2] = v38 + 96;
  }
  a2[2] = v39;
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v61[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8((uint64_t)v58);
  sub_20B06A698((uint64_t)v57);
LABEL_39:
  sub_20B06A6E8((uint64_t)&v54);
}

void sub_20B0A5184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_20B0A3F88(va1);
  sub_20B06A6E8((uint64_t)va);

  _Unwind_Resume(a1);
}

void *sub_20B0A5254(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a1[1])
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_20B0A5A2C((uint64_t)&v14, (uint64_t)&v12);
    uint64_t v4 = a1[1];
    int v5 = ~*((_DWORD *)a1 + 2);
    uint64_t v13 = v4;
    if ((v5 & 3) != 0) {
      (*(void (**)(void *, uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a1, &v12);
    }
    else {
      uint64_t v12 = *a1;
    }
    a1[1] = 0;
    if (v15) {
      (*(void (**)(uint64_t *))(v15 + 32))(&v14);
    }
    int v6 = a2 + 1;
    if (!a2[1])
    {
      uint64_t v8 = a1[1];
      if (v8 && (a1[1] & 3) != 3) {
        (*(void (**)(void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
      goto LABEL_19;
    }
  }
  else
  {
    int v6 = a2 + 1;
    if (!a2[1]) {
      return a1;
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_20B0A5A2C((uint64_t)&v14, (uint64_t)a1);
  uint64_t v7 = *v6;
  a1[1] = *v6;
  if ((~*(_DWORD *)v6 & 3) != 0) {
    (*(void (**)(void *, void *))((v7 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
  }
  else {
    *a1 = *a2;
  }
  *int v6 = 0;
  if (v15) {
    (*(void (**)(uint64_t *))(v15 + 32))(&v14);
  }
LABEL_19:
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_20B0A5A2C((uint64_t)&v14, (uint64_t)a2);
    uint64_t v9 = v13;
    char v10 = ~(_BYTE)v13;
    *int v6 = v13;
    if ((v10 & 3) != 0) {
      (*(void (**)(uint64_t *, void *))((v9 & 0xFFFFFFFFFFFFFFF8) + 40))(&v12, a2);
    }
    else {
      *a2 = v12;
    }
    uint64_t v13 = 0;
    if (v15) {
      (*(void (**)(uint64_t *))(v15 + 32))(&v14);
    }
  }
  else
  {
    if (*v6 && (*v6 & 3) != 3) {
      (*(void (**)(void *))((*v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    }
    *int v6 = 0;
  }
  sub_20B06A698((uint64_t)&v12);
  return a1;
}

void sub_20B0A5464(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_20B05D0D4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B0A54AC(void *a1, int a2, uint64_t a3, float a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  int32x4_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  memset(v27, 0, sizeof(v27));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B07F994(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v25 = *(void *)(a3 + 16);
  }
  int v7 = sub_20B0A4904((uint64_t)&v26, (uint64_t)a1, (uint64_t *)__p);
  int v8 = v7;
  if (SHIBYTE(v25) < 0)
  {
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_30;
    }
  }
  else if (!v7)
  {
    goto LABEL_30;
  }
  *(void *)&long long v28 = sub_20B0A4194;
  *((void *)&v28 + 1) = sub_20B0A41A4;
  *(void *)&long long v29 = sub_20B0A41B8;
  *((void *)&v29 + 1) = sub_20B0A422C;
  *(void *)&long long v30 = sub_20B0A448C;
  if (a2) {
    uint64_t v9 = sub_20B0A4754;
  }
  else {
    uint64_t v9 = 0;
  }
  if (a2) {
    char v10 = 0;
  }
  else {
    char v10 = sub_20B0A47F4;
  }
  *((void *)&v30 + 1) = v9;
  int32x4_t v31 = v10;
  v23[0] = &v28;
  v23[1] = &v26;
  float v11 = 3.1416;
  if (a4 <= 3.1416) {
    float v11 = a4;
  }
  if (v11 < 0.0) {
    float v11 = 0.0;
  }
  if (sub_20B08AAF8((uint64_t)v23, v11) == 1)
  {
    if (a2)
    {
      uint64_t v33 = &off_26BF50FF8;
      sub_20B0A6DA4();
    }
    uint64_t v22 = 0;
    memset(v21, 0, sizeof(v21));
    sub_20B0A4CAC((uint64_t)v21, *(unint64_t *)&v27[0]);
    if (*(void *)&v27[0])
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27);
        int v17 = *(_DWORD *)(*(void *)&v27[2] + v15);
        sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27);
        int v18 = *(_DWORD *)(*(void *)&v27[2] + v15 + 4);
        sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v27);
        int v19 = *(_DWORD *)(*(void *)&v27[2] + v15 + 8);
        sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v21);
        uint64_t v20 = (_DWORD *)(v22 + v14);
        *uint64_t v20 = v17;
        v20[1] = v18;
        v20[2] = v19;
        ++v16;
        v15 += 16;
        v14 += 12;
      }
      while (*(void *)&v27[0] > v16);
    }
    uint64_t v32 = &off_26BF50E88;
    sub_20B0A6DA4();
  }
  unint64_t v12 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    uint64_t v13 = (const char *)(v12 + 16);
    if (*(char *)(v12 + 39) < 0) {
      uint64_t v13 = *(const char **)v13;
    }
  }
  else
  {
    uint64_t v13 = "";
  }
  NSLog(&cfstr_FailedToGenera.isa, v13);
LABEL_30:
  sub_20B06A6E8((uint64_t)&v27[2] + 8);
  sub_20B06A6E8((uint64_t)v27);
}

void sub_20B0A585C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  sub_20B06A698(v26 - 136);
  sub_20B06A6E8((uint64_t)&a11);
  sub_20B0A58F0((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A58F0(uint64_t a1)
{
  return a1;
}

void *sub_20B0A592C(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  if (a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_20B0A5A2C((uint64_t)&v6, (uint64_t)a1);
    uint64_t v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
      (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
    }
    else {
      *a1 = *a2;
    }
    if (v7) {
      (*(void (**)(uint64_t *))(v7 + 32))(&v6);
    }
  }
  return a1;
}

void sub_20B0A59F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(char *))(a11 + 32))(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0A5A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    BOOL v4 = (~(_BYTE)v3 & 3) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = v5;
    if (v5) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
    }
  }
  return a1;
}

void sub_20B0A5A90(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_20B05D0BC();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_20B05D1AC(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    unint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    int v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_20B0A5BAC(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x924924924924924) {
      sub_20B05D0BC();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x492492492492492) {
      unint64_t v11 = 0x924924924924924;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_20B0A5D7C(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[28 * v8];
    uint64_t v15 = &v12[28 * v11];
    size_t v16 = 28 * ((28 * a2 - 28) / 0x1C) + 28;
    bzero(v14, v16);
    int v17 = &v14[v16];
    int v19 = (char *)*a1;
    int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 28);
        *((_OWORD *)v14 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)(v14 - 28) = v20;
        v14 -= 28;
        v18 -= 28;
      }
      while (v18 != v19);
      int v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *sub_20B0A5D7C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    sub_20B05D178();
  }
  return operator new(28 * a2);
}

unint64_t *sub_20B0A5DC8@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    size_t v16 = *(unint64_t **)a5;
  }
  else
  {
    unint64_t v9 = __src;
    std::string __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *std::string __src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      std::string __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      std::string __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    size_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *size_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *sub_20B0A5EFC(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *float result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    float result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_20B0A5FB0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void *sub_20B0A6060(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = sub_20B0A60DC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B0A60C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B0A60DC(void *a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    sub_20B05D0BC();
  }
  float result = (char *)sub_20B0A5D7C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[28 * v4];
  return result;
}

void sub_20B0A6134(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_20B0602EC(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v10];
    uint64_t v15 = &v13[8 * v12];
    memset(v14, 255, 8 * a2);
    size_t v16 = &v14[8 * a2];
    int v18 = (char *)*a1;
    int v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      int v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void sub_20B0A624C(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_20B06C280((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            unint64_t v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      long long v20 = sub_20B06C280((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)uint64_t v22 = v23;
          uint64_t v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      size_t v16 = sub_20B06C280((uint64_t)a1, a2);
      uint64_t v14 = v16;
      uint64_t v17 = 0;
      int v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

uint64_t sub_20B0A6414(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 21) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B0A644C()
{
}

uint64_t sub_20B0A64AC(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *sub_20B0A6508(atomic_ullong *a1)
{
  float result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x210530E90]();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(result);
      MEMORY[0x210532650]();
    }
    return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

void sub_20B0A6560(uint64_t a1, uint64_t *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v10 = v9;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v11 = *(uint64_t **)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    uint64_t v14 = sub_20B06C13C(a1, v13);
    uint64_t v15 = v14;
    if (v4)
    {
      uint64_t v16 = 12 * v4;
      uint64_t v17 = v14;
      do
      {
        uint64_t v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        *uint64_t v17 = v18;
        uint64_t v17 = (void *)((char *)v17 + 12);
        uint64_t v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    uint64_t v19 = *a2;
    long long v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(void *)long long v20 = v19;
    sub_20B06A6E8(a1);
    *(void *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_20B0A66F8(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_20B0A5A2C((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26BF50E88;
  sub_20B0A6DA4();
}

void sub_20B0A6790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B0A67CC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B0A67EC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B0A695C(a1);
}

uint64_t sub_20B0A67FC()
{
  return 1;
}

unint64_t sub_20B0A6804(uint64_t **a1)
{
  return sub_20B0A69C4((uint64_t)&v2, *a1);
}

BOOL sub_20B0A682C(void **a1, uint64_t *a2)
{
  return sub_20B0A6B38(*a1, *a2);
}

BOOL sub_20B0A6838(void **a1, uint64_t a2)
{
  return sub_20B0A6B38(*a1, a2);
}

uint64_t sub_20B0A6844()
{
  return 0;
}

uint64_t sub_20B0A6850(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B0A68A4()
{
  return &unk_26BF4F030;
}

uint64_t sub_20B0A68B0()
{
  return 1;
}

void *sub_20B0A68B8()
{
  return &unk_26BF4EF28;
}

uint64_t sub_20B0A68C4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B0A68CC(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B0A68D8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B0A690C(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F030, a2);
}

void *sub_20B0A6930()
{
  return &unk_26BF4F030;
}

uint64_t sub_20B0A693C(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B0A6944(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50E88;
  sub_20B0A6DA4();
}

uint64_t *sub_20B0A695C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B0A69C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    uint64_t v3 = (unsigned int *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 3;
      sub_20B0A6A3C((uint64_t)v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B0A6A3C(uint64_t a1, unsigned int *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_20B0A6ABC((uint64_t)v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_20B0A6ABC(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_20B0A6AF4(a1, a3, a4);
}

uint64_t sub_20B0A6AF4(uint64_t result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  *(void *)uint64_t result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

BOOL sub_20B0A6B38(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (float *)a1[4];
  unint64_t v6 = &v5[3 * *a1];
  for (unint64_t i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

BOOL sub_20B0A6C00(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v4 = (const void *)(a1 + 8);
  int v5 = v6;
  if (v6)
  {
    if (*(_DWORD *)(a1 + 12)) {
      int v7 = *(_DWORD *)(a1 + 16) ? 4 : 3;
    }
    else {
      int v7 = 2;
    }
  }
  else
  {
    int v7 = 1;
  }
  uint64_t v8 = (const void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12)) {
      int v9 = *(_DWORD *)(a2 + 16) ? 4 : 3;
    }
    else {
      int v9 = 2;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 != v9) {
    return 0;
  }
  if (v5)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      BOOL v10 = *(_DWORD *)(a1 + 16) == 0;
      uint64_t v11 = 3;
      if (!v10) {
        uint64_t v11 = 4;
      }
    }
    else
    {
      uint64_t v11 = 2;
    }
  }
  else
  {
    uint64_t v11 = 1;
  }
  return memcmp(v4, v8, 4 * v11 - 4) == 0;
}

uint64_t sub_20B0A6CE0(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B0A6D8C(void *a1, uint64_t a2)
{
  *a1 += 12;
  return MEMORY[0x270FA3F48](a2);
}

void sub_20B0A6DA4()
{
}

uint64_t sub_20B0A6E20(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20B0A6EB4(a1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return sub_20B0A6CE0((uint64_t)a1);
}

void *sub_20B0A6EB4(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    if (a2[1])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      sub_20B0A5A2C((uint64_t)&v8, (uint64_t)a1);
      uint64_t v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
        (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
      }
      else {
        *a1 = *a2;
      }
      a2[1] = 0;
      if (v9) {
        (*(void (**)(uint64_t *))(v9 + 32))(&v8);
      }
    }
    else
    {
      uint64_t v5 = a1[1];
      if (v5) {
        BOOL v6 = (a1[1] & 3) == 3;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        (*(void (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_20B0A6FAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_20B05D0D4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A6FC4(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_20B05D0BC();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    int v7 = (char *)sub_20B0A72A8((uint64_t)(a1 + 2), v6);
  }
  else {
    int v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[96 * v3];
  unint64_t v13 = &v7[96 * v6];
  sub_20B0A70D4((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 96;
  sub_20B0A7230(a1, &v10);
  uint64_t v8 = a1[1];
  sub_20B0A75B8(&v10);
  return v8;
}

void sub_20B0A70C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B0A75B8((void **)va);
  _Unwind_Resume(a1);
}

double sub_20B0A70D4(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = sub_20B0A7150(a2, (void *)a3);
  long long v5 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v4 + 2) = v5;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  v4[6] = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  v4[7] = *(void *)(a3 + 56);
  *(void *)(a3 + 56) = 0;
  v4[8] = *(void *)(a3 + 64);
  *(void *)(a3 + 64) = 0;
  v4[9] = *(void *)(a3 + 72);
  v4[10] = *(void *)(a3 + 80);
  *(void *)(a3 + 80) = 0;
  *((_DWORD *)v4 + 22) = *(_DWORD *)(a3 + 88);
  return result;
}

void *sub_20B0A7150(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  if (a2[1])
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_20B0A5A2C((uint64_t)&v6, (uint64_t)a1);
    uint64_t v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
      (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
    }
    else {
      *a1 = *a2;
    }
    a2[1] = 0;
    if (v7) {
      (*(void (**)(uint64_t *))(v7 + 32))(&v6);
    }
  }
  return a1;
}

void sub_20B0A7218(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_20B05D0D4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A7230(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B0A72F0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20B0A72A8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_20B05D178();
  }
  return operator new(96 * a2);
}

uint64_t sub_20B0A72F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  uint64_t v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 96;
      sub_20B0A73B8(a1, (void *)(v7 - 96), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 96;
      *((void *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_20B0A74A4((uint64_t)v13);
  return v11;
}

void sub_20B0A73A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_20B0A73B8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_20B0A592C(a2, (void *)a3);
  long long v5 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)result + 1) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)result + 2) = v5;
  uint64_t v6 = *(void *)(a3 + 48);
  result[6] = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (result[5]) {
      uint64_t v7 = (atomic_ullong *)result[5];
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(void *)(a3 + 56);
  result[7] = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[7] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *(void *)(a3 + 64);
  result[8] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[8] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[9] = *(void *)(a3 + 72);
  uint64_t v10 = *(void *)(a3 + 80);
  result[10] = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[10] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 22) = *(_DWORD *)(a3 + 88);
  return result;
}

uint64_t sub_20B0A74A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B0A74DC((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_20B0A74DC(uint64_t *result)
{
  unsigned int v1 = *(void **)(result[2] + 8);
  uint64_t v2 = *(void **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_20B0A7530(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20B0A7530(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[10];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = a2[8];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = a2[7];
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8((uint64_t)(a2 + 2));

  return sub_20B06A698((uint64_t)a2);
}

void **sub_20B0A75B8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_20B0A75EC(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 96;
      uint64_t result = sub_20B0A7530(v4, (void *)(v1 - 96));
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20B0A7634(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 22) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B0A766C()
{
}

uint64_t sub_20B0A76CC(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B0A7728(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_20B06C13C((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = (char *)v10 + v11;
                  uint64_t v13 = *(void *)(v9 + v11);
                  *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                  *(void *)uint64_t v12 = v13;
                  v11 += 12;
                }
                while (12 * v3 != v11);
              }
            }
            uint64_t v14 = *a3;
            uint64_t v15 = 12 * v3;
            do
            {
              long long v16 = (char *)v7 + v15;
              uint64_t v17 = *v14;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
              *(void *)long long v16 = v17;
              v15 += 12;
            }
            while (12 * a2 != v15);
          }
          uint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_20B06C13C((uint64_t)a1, a2);
      uint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 12 * v24;
        float32x2_t v27 = v25;
        do
        {
          uint64_t v28 = *v7;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
          *float32x2_t v27 = v28;
          float32x2_t v27 = (void *)((char *)v27 + 12);
          uint64_t v7 = (void *)((char *)v7 + 12);
          v26 -= 12;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        long long v29 = *a3;
        uint64_t v30 = 12 * v3;
        do
        {
          int32x4_t v31 = (char *)v25 + v30;
          uint64_t v32 = *v29;
          *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
          *(void *)int32x4_t v31 = v32;
          v30 += 12;
        }
        while (12 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0x1555555555555556)
    {
      uint64_t v19 = sub_20B06C13C((uint64_t)a1, a2);
      uint64_t v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        uint64_t v22 = (char *)v19 + v20;
        uint64_t v23 = *v21;
        *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
        *(void *)uint64_t v22 = v23;
        v20 += 12;
      }
      while (12 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

uint64_t *sub_20B0A7954(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B0A7974(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B0A7AE4(a1);
}

uint64_t sub_20B0A7984()
{
  return 1;
}

unint64_t sub_20B0A798C(uint64_t **a1)
{
  return sub_20B0A7B4C((uint64_t)&v2, *a1);
}

BOOL sub_20B0A79B4(void **a1, uint64_t *a2)
{
  return sub_20B0A7C84(*a1, *a2);
}

BOOL sub_20B0A79C0(void **a1, uint64_t a2)
{
  return sub_20B0A7C84(*a1, a2);
}

uint64_t sub_20B0A79CC()
{
  return 0;
}

uint64_t sub_20B0A79D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B0A7A2C()
{
  return &unk_26BF4F060;
}

uint64_t sub_20B0A7A38()
{
  return 1;
}

void *sub_20B0A7A40()
{
  return &unk_26BF4EF58;
}

uint64_t sub_20B0A7A4C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B0A7A54(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B0A7A60(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B0A7A94(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F060, a2);
}

void *sub_20B0A7AB8()
{
  return &unk_26BF4F060;
}

uint64_t sub_20B0A7AC4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B0A7ACC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50FF8;
  sub_20B0A6DA4();
}

uint64_t *sub_20B0A7AE4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B0A7B4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    unint64_t v3 = (unsigned int *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 4;
      sub_20B0A7BC4((uint64_t)v7, v3);
      unint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B0A7BC4(uint64_t a1, unsigned int *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_20B0A7C48((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_20B0A7C48(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_20B0A6ABC(a1, a3, a4, a5);
}

BOOL sub_20B0A7C84(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (float *)a1[4];
  uint64_t v6 = &v5[4 * *a1];
  for (unint64_t i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_20B0A7D58(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B0A7E04(void *a1, uint64_t a2)
{
  *a1 += 16;
  return MEMORY[0x270FA3F68](a2);
}

void sub_20B0A7E1C(const char *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  if ((unint64_t)a2 <= 0x7F)
  {
    sub_20B07F8E0(a3, "File is too small to be valid STL");
    return;
  }
  if (!strncmp("solid", a1, 5uLL))
  {
    uint64_t v6 = 0;
    while (strncmp("facet normal", &a1[v6], 0xCuLL))
    {
      if (++v6 == 128) {
        goto LABEL_9;
      }
    }
    float v76 = 0;
    uint64_t v77 = 0;
    uint64_t v78 = 0;
    int32x4_t v75 = a1;
    if (a2 < 1) {
      goto LABEL_112;
    }
    uint64_t v7 = &a1[a2];
    unint64_t v8 = (void *)*MEMORY[0x263F8C2B8];
    uint64_t v10 = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v9 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    while (1)
    {
      uint64_t v74 = 0;
      long long v72 = 0u;
      memset(v73, 0, sizeof(v73));
      *(_OWORD *)float32x2_t v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v65 = 0u;
      sub_20B0A8A14((void **)&v75, (unint64_t)v7, (std::string *)__p);
      sub_20B0A8B9C((uint64_t *)&v65, (const std::string *)__p, 24);
      if (SBYTE7(v52) < 0) {
        operator delete(__p[0]);
      }
      memset(&__str, 0, sizeof(__str));
      sub_20B06D9BC((uint64_t *)&v65, (uint64_t)&__str);
      int v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ != 5) {
          goto LABEL_30;
        }
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 5) {
          goto LABEL_26;
        }
        p_str = &__str;
      }
      int data = (int)p_str->__r_.__value_.__l.__data_;
      int v15 = p_str->__r_.__value_.__s.__data_[4];
      if (data == 1768714099 && v15 == 100)
      {
        sub_20B06D9BC((uint64_t *)&v65, (uint64_t)&v76);
        int v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_29:
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
LABEL_30:
          if (size == 8) {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
          }
          if (size != 5) {
            goto LABEL_39;
          }
          uint64_t v17 = (std::string *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_34;
        }
      }
      else if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        goto LABEL_29;
      }
LABEL_26:
      if (v11 != 5) {
        goto LABEL_40;
      }
      uint64_t v17 = &__str;
LABEL_34:
      int v18 = (int)v17->__r_.__value_.__l.__data_;
      int v19 = v17->__r_.__value_.__s.__data_[4];
      if (v18 == 1701011814 && v19 == 116)
      {
        sub_20B06D9BC((uint64_t *)&v65, (uint64_t)&__str);
        int v63 = 0;
        int v62 = 1065353216;
        int v61 = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__str.__r_.__value_.__l.__size_ == 6)
          {
            uint64_t v21 = (std::string *)__str.__r_.__value_.__r.__words[0];
            goto LABEL_49;
          }
        }
        else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 6)
        {
          uint64_t v21 = &__str;
LABEL_49:
          int v22 = (int)v21->__r_.__value_.__l.__data_;
          int v23 = WORD2(v21->__r_.__value_.__r.__words[0]);
          if (v22 == 1836216174 && v23 == 27745)
          {
            MEMORY[0x210532400](&v65, &v63);
            MEMORY[0x210532400](&v65, &v62);
            MEMORY[0x210532400](&v65, &v61);
          }
        }
        uint64_t v60 = 0;
        long long v58 = 0u;
        memset(v59, 0, sizeof(v59));
        *(_OWORD *)uint64_t v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        *(_OWORD *)std::string __p = 0u;
        sub_20B0A8A14((void **)&v75, (unint64_t)v7, (std::string *)v41);
        sub_20B0A8B9C((uint64_t *)__p, (const std::string *)v41, 24);
        if (SBYTE7(v42) < 0) {
          operator delete(v41[0]);
        }
        sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__str);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 5)
          {
            uint64_t v25 = &__str;
            goto LABEL_62;
          }
          goto LABEL_100;
        }
        if (__str.__r_.__value_.__l.__size_ != 5) {
          goto LABEL_100;
        }
        uint64_t v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_62:
        int v26 = (int)v25->__r_.__value_.__l.__data_;
        int v27 = v25->__r_.__value_.__s.__data_[4];
        if (v26 != 1702131055 || v27 != 114)
        {
LABEL_100:
          sub_20B0A8A14((void **)&v75, (unint64_t)v7, (std::string *)v41);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v41;
          __str.__r_.__value_.__r.__words[2] = v42;
          sub_20B077928(&__str);
          std::string::operator=(&__str, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ != 8) {
              goto LABEL_116;
            }
            unint64_t v38 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 8) {
              goto LABEL_116;
            }
            unint64_t v38 = &__str;
          }
          if (v38->__r_.__value_.__r.__words[0] != 0x7465636166646E65)
          {
LABEL_116:
            sub_20B07F8E0(a3, "endfacet tag missing, couldn't parse STL");
            __p[0] = v8;
            *(void **)((char *)__p + *((void *)v8 - 3)) = v10;
            *(void *)&long long v52 = v9;
            *((void *)&v52 + 1) = MEMORY[0x263F8C318] + 16;
            if (SHIBYTE(v57) < 0) {
              operator delete(v56[1]);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x2105325E0](v59);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            *(void *)&long long v65 = v8;
            *(void *)((char *)&v65 + *((void *)v8 - 3)) = v10;
            *(void *)&long long v66 = v9;
            *((void *)&v66 + 1) = MEMORY[0x263F8C318] + 16;
            if (SHIBYTE(v71) < 0) {
              operator delete(v70[1]);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x2105325E0](v73);
            goto LABEL_113;
          }
          __p[0] = v8;
          *(void **)((char *)__p + *((void *)v8 - 3)) = v10;
          *(void *)&long long v52 = v9;
          *((void *)&v52 + 1) = MEMORY[0x263F8C318] + 16;
          if (SHIBYTE(v57) < 0) {
            operator delete(v56[1]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x2105325E0](v59);
          if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_40;
          }
LABEL_39:
          operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_40;
        }
        while (2)
        {
          uint64_t v50 = 0;
          long long v48 = 0u;
          memset(v49, 0, sizeof(v49));
          *(_OWORD *)uint64_t v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)int32x4_t v41 = 0u;
          sub_20B0A8A14((void **)&v75, (unint64_t)v7, &v40);
          sub_20B0A8B9C((uint64_t *)v41, &v40, 24);
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          sub_20B06D9BC((uint64_t *)v41, (uint64_t)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            if (__str.__r_.__value_.__l.__size_ == 7)
            {
              long long v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_74:
              int v30 = (int)v29->__r_.__value_.__l.__data_;
              int v31 = *(_DWORD *)((char *)v29->__r_.__value_.__r.__words + 3);
              BOOL v32 = v30 == 1818521189 && v31 == 1886351212;
              char v33 = 1;
              if (v32 || v75 == v7) {
                goto LABEL_97;
              }
              LODWORD(v40.__r_.__value_.__l.__data_) = 0;
              uint64_t v39 = 0;
              if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0) {
                goto LABEL_83;
              }
            }
            else
            {
              if (v75 == v7) {
                goto LABEL_96;
              }
              LODWORD(v40.__r_.__value_.__l.__data_) = 0;
              uint64_t v39 = 0;
            }
            if (__str.__r_.__value_.__l.__size_ == 6)
            {
              uint64_t v34 = (std::string *)__str.__r_.__value_.__r.__words[0];
              goto LABEL_89;
            }
LABEL_95:
            char v33 = 0;
          }
          else
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 7)
            {
              long long v29 = &__str;
              goto LABEL_74;
            }
            if (v75 != v7)
            {
              LODWORD(v40.__r_.__value_.__l.__data_) = 0;
              uint64_t v39 = 0;
LABEL_83:
              if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 6)
              {
                uint64_t v34 = &__str;
LABEL_89:
                int v35 = (int)v34->__r_.__value_.__l.__data_;
                int v36 = WORD2(v34->__r_.__value_.__r.__words[0]);
                if (v35 == 1953654134 && v36 == 30821)
                {
                  MEMORY[0x210532400](v41, &v40);
                  MEMORY[0x210532400](v41, (char *)&v39 + 4);
                  MEMORY[0x210532400](v41, &v39);
                }
              }
              goto LABEL_95;
            }
LABEL_96:
            char v33 = 1;
          }
LABEL_97:
          v41[0] = v8;
          *(void **)((char *)v41 + *((void *)v8 - 3)) = v10;
          *(void *)&long long v42 = v9;
          *((void *)&v42 + 1) = MEMORY[0x263F8C318] + 16;
          if (SHIBYTE(v47) < 0) {
            operator delete(v46[1]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x2105325E0](v49);
          if (v33) {
            goto LABEL_100;
          }
          continue;
        }
      }
      if ((v11 & 0x80) != 0) {
        goto LABEL_39;
      }
LABEL_40:
      *(void *)&long long v65 = v8;
      *(void *)((char *)&v65 + *((void *)v8 - 3)) = v10;
      *(void *)&long long v66 = v9;
      *((void *)&v66 + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v71) < 0) {
        operator delete(v70[1]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2105325E0](v73);
      if (v75 >= v7) {
        goto LABEL_112;
      }
    }
  }
LABEL_9:
  float v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  MEMORY[0x210532320](&v76, a1, 80);
  if ((unint64_t)a2 >= 0x85 && *((_DWORD *)a1 + 20) >= 0xE38E38Fu)
  {
    sub_20B07F8E0(a3, "Bad triangle count, couldn't parse STL");
    goto LABEL_113;
  }
LABEL_112:
  sub_20B07F8E0(a3, "");
LABEL_113:
  if (SHIBYTE(v78) < 0) {
    operator delete(v76);
  }
}

void sub_20B0A894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  sub_20B0A8E60((uint64_t)&a55);
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    operator delete((void *)STACK[0x2A0]);
  }
  sub_20B0A8E60((uint64_t)&STACK[0x2C0]);
  if (*(char *)(v55 - 89) < 0) {
    operator delete(*(void **)(v55 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_20B0A8A14(void **a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    unsigned int v7 = 0;
    unint64_t v8 = (char *)*a1;
  }
  else
  {
    uint64_t v6 = 0;
    unsigned int v7 = a2 - v5;
    while (v5[v6] != 10)
    {
      *a1 = &v5[++v6];
      if (a2 - (void)v5 == v6)
      {
        unint64_t v8 = (char *)a2;
        goto LABEL_8;
      }
    }
    unint64_t v8 = &v5[v6];
    unsigned int v7 = v6;
  }
LABEL_8:
  if ((unint64_t)v8 < a2)
  {
    unint64_t v9 = a2 - (void)v8;
    uint64_t v10 = v8 + 1;
    do
    {
      if (*(v10 - 1) != 10) {
        break;
      }
      *a1 = v10++;
      --v9;
    }
    while (v9);
  }
  memset(&__dst, 0, sizeof(__dst));
  sub_20B0AB0C8(&__dst, v5, v7);
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  unsigned __int8 v16 = 92;
  uint64_t v13 = sub_20B0AB060(p_dst, (unsigned __int8 *)p_dst + size, &v16);
  uint64_t v14 = (char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    int v15 = &__dst;
  }
  else
  {
    uint64_t v14 = (char *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
    int v15 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__dst, v13 - (unsigned __int8 *)v15, v14 - (char *)v13);
  sub_20B077928(&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20B07F994(a3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = __dst;
  }
}

void sub_20B0A8B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B0A8B9C(uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  unsigned int v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  uint64_t v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  uint64_t v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  sub_20B07FADC(v9, a2, a3);
  return a1;
}

void sub_20B0A8E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_20B0A8E60(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2105325E0](a1 + 128);
  return a1;
}

void sub_20B0A8F98(uint64_t a1, unint64_t a2, unint64_t a3, void *a4)
{
  v335[1] = *MEMORY[0x263EF8340];
  id v291 = a4;
  if (a3 <= 0x7F)
  {
    NSLog(&cfstr_FileIsTooSmall.isa);
    goto LABEL_353;
  }
  if (!strncmp("solid", (const char *)a2, 5uLL))
  {
    uint64_t v6 = 0;
    while (v6 + 12 > a3 || strncmp("facet normal", (const char *)(a2 + v6), 0xCuLL))
    {
      if (++v6 == 128) {
        goto LABEL_8;
      }
    }
    int v7 = 1;
  }
  else
  {
LABEL_8:
    int v7 = 0;
  }
  memset(&v334, 0, sizeof(v334));
  unint64_t v8 = a2 + a3;
  uint64_t v331 = 0;
  float32x4_t v332 = 0;
  float32x4_t v333 = 0;
  if (v7)
  {
    unsigned int v9 = 0;
    unint64_t v330 = a2;
    uint64_t v10 = (void *)*MEMORY[0x263F8C2B8];
    uint64_t v11 = *(void **)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    while (1)
    {
      if (v330 >= v8) {
        goto LABEL_319;
      }
      uint64_t v329 = 0;
      long long v327 = 0u;
      memset(v328, 0, sizeof(v328));
      *(_OWORD *)int v325 = 0u;
      long long v326 = 0u;
      long long v323 = 0u;
      long long v324 = 0u;
      long long v321 = 0u;
      long long v322 = 0u;
      *(_OWORD *)uint64_t v320 = 0u;
      sub_20B0A8A14((void **)&v330, v8, (std::string *)__p);
      sub_20B0A8B9C((uint64_t *)v320, (const std::string *)__p, 24);
      if (SBYTE7(v307) < 0) {
        operator delete(__p[0]);
      }
      memset(&__str, 0, sizeof(__str));
      sub_20B06D9BC((uint64_t *)v320, (uint64_t)&__str);
      int v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_ != 5) {
          goto LABEL_28;
        }
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 5) {
          goto LABEL_24;
        }
        p_str = &__str;
      }
      int data = (int)p_str->__r_.__value_.__l.__data_;
      int v17 = p_str->__r_.__value_.__s.__data_[4];
      if (data == 1768714099 && v17 == 100)
      {
        sub_20B06D9BC((uint64_t *)v320, (uint64_t)&v334);
        int v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_27:
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
LABEL_28:
          std::string::size_type v20 = __str.__r_.__value_.__l.__size_;
          if (size != 8) {
            std::string::size_type v20 = size;
          }
          if (v20 != 5) {
            goto LABEL_36;
          }
          int v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_32;
        }
      }
      else if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        goto LABEL_27;
      }
LABEL_24:
      if (v13 != 5) {
        goto LABEL_36;
      }
      int v19 = &__str;
LABEL_32:
      int v21 = (int)v19->__r_.__value_.__l.__data_;
      int v22 = v19->__r_.__value_.__s.__data_[4];
      if (v21 != 1701011814 || v22 != 116) {
        goto LABEL_36;
      }
      sub_20B06D9BC((uint64_t *)v320, (uint64_t)&__str);
      int v318 = 0;
      int v317 = 1065353216;
      int v316 = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ != 6) {
          goto LABEL_54;
        }
        uint64_t v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 6) {
          goto LABEL_54;
        }
        uint64_t v25 = &__str;
      }
      int v26 = (int)v25->__r_.__value_.__l.__data_;
      int v27 = WORD2(v25->__r_.__value_.__r.__words[0]);
      if (v26 == 1836216174 && v27 == 27745)
      {
        MEMORY[0x210532400](v320, &v318);
        MEMORY[0x210532400](v320, &v317);
        MEMORY[0x210532400](v320, &v316);
      }
LABEL_54:
      uint64_t v315 = 0;
      long long v313 = 0u;
      memset(v314, 0, sizeof(v314));
      *(_OWORD *)int v311 = 0u;
      long long v312 = 0u;
      long long v309 = 0u;
      long long v310 = 0u;
      long long v307 = 0u;
      long long v308 = 0u;
      *(_OWORD *)std::string __p = 0u;
      sub_20B0A8A14((void **)&v330, v8, (std::string *)v296);
      sub_20B0A8B9C((uint64_t *)__p, (const std::string *)v296, 24);
      if (SBYTE7(v297) < 0) {
        operator delete(v296[0]);
      }
      sub_20B06D9BC((uint64_t *)__p, (uint64_t)&__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ == 5)
        {
          long long v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_61;
        }
      }
      else if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) == 5)
      {
        long long v29 = &__str;
LABEL_61:
        int v30 = (int)v29->__r_.__value_.__l.__data_;
        int v31 = v29->__r_.__value_.__s.__data_[4];
        if (v30 != 1702131055 || v31 != 114) {
          goto LABEL_192;
        }
        while (2)
        {
          uint64_t v305 = 0;
          long long v303 = 0u;
          memset(v304, 0, sizeof(v304));
          *(_OWORD *)int v301 = 0u;
          long long v302 = 0u;
          long long v299 = 0u;
          long long v300 = 0u;
          long long v297 = 0u;
          long long v298 = 0u;
          *(_OWORD *)int v296 = 0u;
          sub_20B0A8A14((void **)&v330, v8, &v295);
          sub_20B0A8B9C((uint64_t *)v296, &v295, 24);
          if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v295.__r_.__value_.__l.__data_);
          }
          sub_20B06D9BC((uint64_t *)v296, (uint64_t)&__str);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 7)
            {
              char v33 = &__str;
              goto LABEL_73;
            }
            LODWORD(v295.__r_.__value_.__l.__data_) = 0;
            uint64_t v294 = 0;
LABEL_80:
            if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 6)
            {
              uint64_t v37 = &__str;
LABEL_85:
              int v38 = (int)v37->__r_.__value_.__l.__data_;
              int v39 = WORD2(v37->__r_.__value_.__r.__words[0]);
              if (v38 == 1953654134 && v39 == 30821)
              {
                MEMORY[0x210532400](v296, &v295);
                MEMORY[0x210532400](v296, (char *)&v294 + 4);
                MEMORY[0x210532400](v296, &v294);
              }
            }
            goto LABEL_91;
          }
          if (__str.__r_.__value_.__l.__size_ == 7)
          {
            char v33 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_73:
            int v34 = (int)v33->__r_.__value_.__l.__data_;
            int v35 = *(_DWORD *)((char *)v33->__r_.__value_.__r.__words + 3);
            if (v34 == 1818521189 && v35 == 1886351212)
            {
              char v50 = 0;
            }
            else
            {
              LODWORD(v295.__r_.__value_.__l.__data_) = 0;
              uint64_t v294 = 0;
              if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0) {
                goto LABEL_80;
              }
LABEL_83:
              if (__str.__r_.__value_.__l.__size_ == 6)
              {
                uint64_t v37 = (std::string *)__str.__r_.__value_.__r.__words[0];
                goto LABEL_85;
              }
LABEL_91:
              long long v42 = v332;
              int32x4_t v41 = v333;
              if (v332 >= v333)
              {
                long long v44 = v331;
                uint64_t v45 = (v332 - (char *)v331) >> 2;
                unint64_t v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62) {
                  goto LABEL_355;
                }
                uint64_t v47 = v333 - (char *)v331;
                if ((v333 - (char *)v331) >> 1 > v46) {
                  unint64_t v46 = v47 >> 1;
                }
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v48 = v46;
                }
                if (v48)
                {
                  int32x4_t v49 = (char *)sub_20B05D1AC((uint64_t)&v333, v48);
                  long long v44 = v331;
                  long long v42 = v332;
                }
                else
                {
                  int32x4_t v49 = 0;
                }
                uint64_t v51 = &v49[4 * v45];
                *(_DWORD *)uint64_t v51 = v295.__r_.__value_.__l.__data_;
                long long v43 = v51 + 4;
                while (v42 != (char *)v44)
                {
                  int v52 = *((_DWORD *)v42 - 1);
                  v42 -= 4;
                  *((_DWORD *)v51 - 1) = v52;
                  v51 -= 4;
                }
                int32x4_t v41 = &v49[4 * v48];
                uint64_t v331 = (int *)v51;
                float32x4_t v332 = v43;
                float32x4_t v333 = v41;
                if (v44)
                {
                  operator delete(v44);
                  int32x4_t v41 = v333;
                }
              }
              else
              {
                *(_DWORD *)float32x4_t v332 = v295.__r_.__value_.__l.__data_;
                long long v43 = v42 + 4;
              }
              float32x4_t v332 = v43;
              if (v43 >= v41)
              {
                long long v54 = v331;
                uint64_t v55 = (v43 - (char *)v331) >> 2;
                unint64_t v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 62) {
                  goto LABEL_355;
                }
                uint64_t v57 = v41 - (char *)v331;
                if (v57 >> 1 > v56) {
                  unint64_t v56 = v57 >> 1;
                }
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v58 = v56;
                }
                if (v58)
                {
                  uint64_t v59 = (char *)sub_20B05D1AC((uint64_t)&v333, v58);
                  long long v54 = v331;
                  long long v43 = v332;
                }
                else
                {
                  uint64_t v59 = 0;
                }
                uint64_t v60 = &v59[4 * v55];
                *(_DWORD *)uint64_t v60 = HIDWORD(v294);
                long long v53 = v60 + 4;
                while (v43 != (char *)v54)
                {
                  int v61 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *((_DWORD *)v60 - 1) = v61;
                  v60 -= 4;
                }
                int32x4_t v41 = &v59[4 * v58];
                uint64_t v331 = (int *)v60;
                float32x4_t v332 = v53;
                float32x4_t v333 = v41;
                if (v54)
                {
                  operator delete(v54);
                  int32x4_t v41 = v333;
                }
              }
              else
              {
                *(_DWORD *)long long v43 = HIDWORD(v294);
                long long v53 = v43 + 4;
              }
              float32x4_t v332 = v53;
              if (v53 >= v41)
              {
                int v63 = v331;
                uint64_t v64 = (v53 - (char *)v331) >> 2;
                unint64_t v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62) {
                  goto LABEL_355;
                }
                uint64_t v66 = v41 - (char *)v331;
                if (v66 >> 1 > v65) {
                  unint64_t v65 = v66 >> 1;
                }
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v67 = v65;
                }
                if (v67)
                {
                  long long v68 = (char *)sub_20B05D1AC((uint64_t)&v333, v67);
                  int v63 = v331;
                  long long v53 = v332;
                }
                else
                {
                  long long v68 = 0;
                }
                long long v69 = &v68[4 * v64];
                *(_DWORD *)long long v69 = v294;
                int v62 = v69 + 4;
                while (v53 != (char *)v63)
                {
                  int v70 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *((_DWORD *)v69 - 1) = v70;
                  v69 -= 4;
                }
                int32x4_t v41 = &v68[4 * v67];
                uint64_t v331 = (int *)v69;
                float32x4_t v332 = v62;
                float32x4_t v333 = v41;
                if (v63)
                {
                  operator delete(v63);
                  int32x4_t v41 = v333;
                }
              }
              else
              {
                *(_DWORD *)long long v53 = v294;
                int v62 = v53 + 4;
              }
              float32x4_t v332 = v62;
              if (v62 >= v41)
              {
                long long v72 = v331;
                uint64_t v73 = (v62 - (char *)v331) >> 2;
                unint64_t v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 62) {
                  goto LABEL_355;
                }
                uint64_t v75 = v41 - (char *)v331;
                if (v75 >> 1 > v74) {
                  unint64_t v74 = v75 >> 1;
                }
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v76 = v74;
                }
                if (v76)
                {
                  uint64_t v77 = (char *)sub_20B05D1AC((uint64_t)&v333, v76);
                  long long v72 = v331;
                  int v62 = v332;
                }
                else
                {
                  uint64_t v77 = 0;
                }
                uint64_t v78 = (int *)&v77[4 * v73];
                int *v78 = v318;
                long long v71 = v78 + 1;
                while (v62 != (char *)v72)
                {
                  int v79 = *((_DWORD *)v62 - 1);
                  v62 -= 4;
                  *--uint64_t v78 = v79;
                }
                int32x4_t v41 = &v77[4 * v76];
                uint64_t v331 = v78;
                float32x4_t v332 = (char *)v71;
                float32x4_t v333 = v41;
                if (v72)
                {
                  operator delete(v72);
                  int32x4_t v41 = v333;
                }
              }
              else
              {
                *(_DWORD *)int v62 = v318;
                long long v71 = (int *)(v62 + 4);
              }
              float32x4_t v332 = (char *)v71;
              if (v71 >= (int *)v41)
              {
                uint64_t v81 = v331;
                uint64_t v82 = v71 - v331;
                unint64_t v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 62) {
                  goto LABEL_355;
                }
                uint64_t v84 = v41 - (char *)v331;
                if (v84 >> 1 > v83) {
                  unint64_t v83 = v84 >> 1;
                }
                if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v85 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v85 = v83;
                }
                if (v85)
                {
                  uint64_t v86 = (char *)sub_20B05D1AC((uint64_t)&v333, v85);
                  uint64_t v81 = v331;
                  long long v71 = (int *)v332;
                }
                else
                {
                  uint64_t v86 = 0;
                }
                unint64_t v87 = (int *)&v86[4 * v82];
                int *v87 = v317;
                unint64_t v80 = (char *)(v87 + 1);
                while (v71 != v81)
                {
                  int v88 = *--v71;
                  *--unint64_t v87 = v88;
                }
                int32x4_t v41 = &v86[4 * v85];
                uint64_t v331 = v87;
                float32x4_t v332 = v80;
                float32x4_t v333 = v41;
                if (v81)
                {
                  operator delete(v81);
                  int32x4_t v41 = v333;
                }
              }
              else
              {
                int *v71 = v317;
                unint64_t v80 = (char *)(v71 + 1);
              }
              float32x4_t v332 = v80;
              if (v80 >= v41)
              {
                uint64_t v90 = v331;
                uint64_t v91 = (v80 - (char *)v331) >> 2;
                unint64_t v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 62) {
LABEL_355:
                }
                  sub_20B05D0BC();
                uint64_t v93 = v41 - (char *)v331;
                if (v93 >> 1 > v92) {
                  unint64_t v92 = v93 >> 1;
                }
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v94 = v92;
                }
                if (v94)
                {
                  uint64_t v95 = (char *)sub_20B05D1AC((uint64_t)&v333, v94);
                  uint64_t v90 = v331;
                  unint64_t v80 = v332;
                }
                else
                {
                  uint64_t v95 = 0;
                }
                float32x4_t v96 = &v95[4 * v91];
                *(_DWORD *)float32x4_t v96 = v316;
                float v89 = v96 + 4;
                while (v80 != (char *)v90)
                {
                  int v97 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *((_DWORD *)v96 - 1) = v97;
                  v96 -= 4;
                }
                uint64_t v331 = (int *)v96;
                float32x4_t v332 = v89;
                float32x4_t v333 = &v95[4 * v94];
                if (v90) {
                  operator delete(v90);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v80 = v316;
                float v89 = v80 + 4;
              }
              float32x4_t v332 = v89;
              ++v9;
              char v50 = 1;
            }
            v296[0] = v10;
            *(void **)((char *)v296 + *((void *)v10 - 3)) = v11;
            *(void *)&long long v297 = v12;
            *((void *)&v297 + 1) = MEMORY[0x263F8C318] + 16;
            if (SHIBYTE(v302) < 0) {
              operator delete(v301[1]);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x2105325E0](v304);
            if ((v50 & 1) == 0) {
              goto LABEL_192;
            }
            continue;
          }
          break;
        }
        LODWORD(v295.__r_.__value_.__l.__data_) = 0;
        uint64_t v294 = 0;
        goto LABEL_83;
      }
LABEL_192:
      sub_20B0A8A14((void **)&v330, v8, (std::string *)v296);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v296;
      __str.__r_.__value_.__r.__words[2] = v297;
      sub_20B077928(&__str);
      std::string::operator=(&__str, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ != 8) {
          goto LABEL_200;
        }
        float32x4_t v98 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) != 8) {
          goto LABEL_200;
        }
        float32x4_t v98 = &__str;
      }
      if (v98->__r_.__value_.__r.__words[0] != 0x7465636166646E65)
      {
LABEL_200:
        NSLog(&cfstr_EndfacetTagMis.isa);
        __p[0] = v10;
        *(void **)((char *)__p + *((void *)v10 - 3)) = v11;
        *(void *)&long long v307 = v12;
        *((void *)&v307 + 1) = MEMORY[0x263F8C318] + 16;
        if (SHIBYTE(v312) < 0) {
          operator delete(v311[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2105325E0](v314);
        char v24 = 0;
        goto LABEL_37;
      }
      __p[0] = v10;
      *(void **)((char *)__p + *((void *)v10 - 3)) = v11;
      *(void *)&long long v307 = v12;
      *((void *)&v307 + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v312) < 0) {
        operator delete(v311[1]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2105325E0](v314);
LABEL_36:
      char v24 = 1;
LABEL_37:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v320[0] = v10;
      *(void **)((char *)v320 + *((void *)v10 - 3)) = v11;
      *(void *)&long long v321 = v12;
      *((void *)&v321 + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v326) < 0) {
        operator delete(v325[1]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2105325E0](v328);
      if ((v24 & 1) == 0) {
        goto LABEL_349;
      }
    }
  }
  MEMORY[0x210532320](&v334, a2, 80);
  if (a3 < 0x85)
  {
    unsigned int v99 = 0;
LABEL_210:
    sub_20B088B78((void **)&v331, 18 * v99);
    if (v99)
    {
      uint64_t v100 = 0;
      unint64_t v101 = a2 + 84;
      unsigned int v292 = v99;
      uint64_t v293 = v99;
      while (1)
      {
        uint64_t v102 = (int *)(v101 + 50 * v100);
        if ((unint64_t)(v102 + 12) > v8)
        {
          unsigned int v165 = v100;
          goto LABEL_318;
        }
        int v103 = 0;
        int v104 = *v102;
        int v105 = v102[1];
        int v106 = v102[2];
        uint64_t v107 = v332;
        do
        {
          int v109 = v102[3];
          int v108 = v102[4];
          v102 += 3;
          int v110 = v102[2];
          uint64_t v111 = v333;
          if (v107 >= v333)
          {
            uint64_t v113 = v331;
            uint64_t v114 = (v107 - (char *)v331) >> 2;
            unint64_t v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 62) {
              goto LABEL_354;
            }
            uint64_t v116 = v333 - (char *)v331;
            if ((v333 - (char *)v331) >> 1 > v115) {
              unint64_t v115 = v116 >> 1;
            }
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v117 = v115;
            }
            if (v117)
            {
              int v118 = (char *)sub_20B05D1AC((uint64_t)&v333, v117);
              uint64_t v113 = v331;
              uint64_t v107 = v332;
            }
            else
            {
              int v118 = 0;
            }
            float v119 = &v118[4 * v114];
            *(_DWORD *)float v119 = v109;
            unint64_t v112 = v119 + 4;
            while (v107 != (char *)v113)
            {
              int v120 = *((_DWORD *)v107 - 1);
              v107 -= 4;
              *((_DWORD *)v119 - 1) = v120;
              v119 -= 4;
            }
            uint64_t v111 = &v118[4 * v117];
            uint64_t v331 = (int *)v119;
            float32x4_t v332 = v112;
            float32x4_t v333 = v111;
            if (v113)
            {
              operator delete(v113);
              uint64_t v111 = v333;
            }
          }
          else
          {
            *(_DWORD *)uint64_t v107 = v109;
            unint64_t v112 = v107 + 4;
          }
          float32x4_t v332 = v112;
          if (v112 >= v111)
          {
            uint64_t v122 = v331;
            uint64_t v123 = (v112 - (char *)v331) >> 2;
            unint64_t v124 = v123 + 1;
            if ((unint64_t)(v123 + 1) >> 62) {
              goto LABEL_354;
            }
            uint64_t v125 = v111 - (char *)v331;
            if (v125 >> 1 > v124) {
              unint64_t v124 = v125 >> 1;
            }
            if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v126 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v126 = v124;
            }
            if (v126)
            {
              float32x4_t v127 = (char *)sub_20B05D1AC((uint64_t)&v333, v126);
              uint64_t v122 = v331;
              unint64_t v112 = v332;
            }
            else
            {
              float32x4_t v127 = 0;
            }
            unint64_t v128 = &v127[4 * v123];
            *(_DWORD *)unint64_t v128 = v108;
            unint64_t v121 = v128 + 4;
            while (v112 != (char *)v122)
            {
              int v129 = *((_DWORD *)v112 - 1);
              v112 -= 4;
              *((_DWORD *)v128 - 1) = v129;
              v128 -= 4;
            }
            uint64_t v111 = &v127[4 * v126];
            uint64_t v331 = (int *)v128;
            float32x4_t v332 = v121;
            float32x4_t v333 = v111;
            if (v122)
            {
              operator delete(v122);
              uint64_t v111 = v333;
            }
          }
          else
          {
            *(_DWORD *)unint64_t v112 = v108;
            unint64_t v121 = v112 + 4;
          }
          float32x4_t v332 = v121;
          if (v121 >= v111)
          {
            int v131 = v331;
            uint64_t v132 = (v121 - (char *)v331) >> 2;
            unint64_t v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62) {
              goto LABEL_354;
            }
            uint64_t v134 = v111 - (char *)v331;
            if (v134 >> 1 > v133) {
              unint64_t v133 = v134 >> 1;
            }
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v135 = v133;
            }
            if (v135)
            {
              float32x4_t v136 = (char *)sub_20B05D1AC((uint64_t)&v333, v135);
              int v131 = v331;
              unint64_t v121 = v332;
            }
            else
            {
              float32x4_t v136 = 0;
            }
            float v137 = &v136[4 * v132];
            *(_DWORD *)float v137 = v110;
            uint64_t v130 = v137 + 4;
            while (v121 != (char *)v131)
            {
              int v138 = *((_DWORD *)v121 - 1);
              v121 -= 4;
              *((_DWORD *)v137 - 1) = v138;
              v137 -= 4;
            }
            uint64_t v111 = &v136[4 * v135];
            uint64_t v331 = (int *)v137;
            float32x4_t v332 = v130;
            float32x4_t v333 = v111;
            if (v131)
            {
              operator delete(v131);
              uint64_t v111 = v333;
            }
          }
          else
          {
            *(_DWORD *)unint64_t v121 = v110;
            uint64_t v130 = v121 + 4;
          }
          float32x4_t v332 = v130;
          if (v130 >= v111)
          {
            float32x4_t v140 = v331;
            uint64_t v141 = (v130 - (char *)v331) >> 2;
            unint64_t v142 = v141 + 1;
            if ((unint64_t)(v141 + 1) >> 62) {
              goto LABEL_354;
            }
            uint64_t v143 = v111 - (char *)v331;
            if (v143 >> 1 > v142) {
              unint64_t v142 = v143 >> 1;
            }
            if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v144 = v142;
            }
            if (v144)
            {
              int v145 = (char *)sub_20B05D1AC((uint64_t)&v333, v144);
              float32x4_t v140 = v331;
              uint64_t v130 = v332;
            }
            else
            {
              int v145 = 0;
            }
            int v146 = &v145[4 * v141];
            *(_DWORD *)int v146 = v104;
            int v139 = v146 + 4;
            while (v130 != (char *)v140)
            {
              int v147 = *((_DWORD *)v130 - 1);
              v130 -= 4;
              *((_DWORD *)v146 - 1) = v147;
              v146 -= 4;
            }
            uint64_t v111 = &v145[4 * v144];
            uint64_t v331 = (int *)v146;
            float32x4_t v332 = v139;
            float32x4_t v333 = v111;
            if (v140)
            {
              operator delete(v140);
              uint64_t v111 = v333;
            }
          }
          else
          {
            *(_DWORD *)uint64_t v130 = v104;
            int v139 = v130 + 4;
          }
          float32x4_t v332 = v139;
          if (v139 >= v111)
          {
            int v149 = v331;
            uint64_t v150 = (v139 - (char *)v331) >> 2;
            unint64_t v151 = v150 + 1;
            if ((unint64_t)(v150 + 1) >> 62) {
              goto LABEL_354;
            }
            uint64_t v152 = v111 - (char *)v331;
            if (v152 >> 1 > v151) {
              unint64_t v151 = v152 >> 1;
            }
            if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v153 = v151;
            }
            if (v153)
            {
              float v154 = (char *)sub_20B05D1AC((uint64_t)&v333, v153);
              int v149 = v331;
              int v139 = v332;
            }
            else
            {
              float v154 = 0;
            }
            float v155 = &v154[4 * v150];
            *(_DWORD *)float v155 = v105;
            int v148 = v155 + 4;
            while (v139 != (char *)v149)
            {
              int v156 = *((_DWORD *)v139 - 1);
              v139 -= 4;
              *((_DWORD *)v155 - 1) = v156;
              v155 -= 4;
            }
            uint64_t v111 = &v154[4 * v153];
            uint64_t v331 = (int *)v155;
            float32x4_t v332 = v148;
            float32x4_t v333 = v111;
            if (v149)
            {
              operator delete(v149);
              uint64_t v111 = v333;
            }
          }
          else
          {
            *(_DWORD *)int v139 = v105;
            int v148 = v139 + 4;
          }
          float32x4_t v332 = v148;
          if (v148 >= v111)
          {
            float v157 = v331;
            uint64_t v158 = (v148 - (char *)v331) >> 2;
            unint64_t v159 = v158 + 1;
            if ((unint64_t)(v158 + 1) >> 62) {
LABEL_354:
            }
              sub_20B05D0BC();
            uint64_t v160 = v111 - (char *)v331;
            if (v160 >> 1 > v159) {
              unint64_t v159 = v160 >> 1;
            }
            if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v161 = v159;
            }
            if (v161)
            {
              float v162 = (char *)sub_20B05D1AC((uint64_t)&v333, v161);
              float v157 = v331;
              int v148 = v332;
            }
            else
            {
              float v162 = 0;
            }
            float v163 = &v162[4 * v158];
            *(_DWORD *)float v163 = v106;
            uint64_t v107 = v163 + 4;
            while (v148 != (char *)v157)
            {
              int v164 = *((_DWORD *)v148 - 1);
              v148 -= 4;
              *((_DWORD *)v163 - 1) = v164;
              v163 -= 4;
            }
            uint64_t v331 = (int *)v163;
            float32x4_t v332 = v107;
            float32x4_t v333 = &v162[4 * v161];
            if (v157) {
              operator delete(v157);
            }
          }
          else
          {
            *(_DWORD *)int v148 = v106;
            uint64_t v107 = v148 + 4;
          }
          float32x4_t v332 = v107;
          ++v103;
        }
        while (v103 != 3);
        unint64_t v101 = a2 + 84;
        if (50 * v100 + a2 + 84 + 50 > v8) {
          break;
        }
        if (++v100 == v293)
        {
          unsigned int v165 = v292;
          goto LABEL_318;
        }
      }
      unsigned int v165 = v100 + 1;
    }
    else
    {
      unsigned int v165 = 0;
    }
LABEL_318:
    unsigned int v9 = 3 * v165;
LABEL_319:
    float v166 = sub_20B077928(&v334);
    std::string::operator=(v166, &v334);
    if (v9 >= 0x10000) {
      uint64_t v167 = 32;
    }
    else {
      uint64_t v167 = 16;
    }
    uint64_t v168 = v9;
    if (HIWORD(v9))
    {
      v320[1] = 0;
      v320[0] = 0;
      *(void *)&long long v321 = 0;
      sub_20B0A2BE0((uint64_t)v320, v9);
      uint64_t v186 = 0;
      uint64_t v187 = v320[0];
      do
      {
        v187[v186] = v186;
        ++v186;
      }
      while (v9 != v186);
      id v188 = objc_alloc(MEMORY[0x263EFF8F8]);
      float v173 = objc_msgSend_initWithBytes_length_(v188, v189, (uint64_t)v320[0], 4 * v9);
      float v192 = objc_msgSend_bufferAllocator(v291, v190, v191);
      unint64_t v178 = objc_msgSend_newBufferWithData_type_(v192, v193, (uint64_t)v173, 2);

      if (objc_msgSend_conformsToProtocol_(v178, v194, (uint64_t)&unk_26BF5ED88))
      {
        if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          objc_msgSend_stringWithCString_encoding_(NSString, v195, (uint64_t)&v334, 4);
        }
        else {
        float v196 = objc_msgSend_stringWithCString_encoding_(NSString, v195, (uint64_t)v334.__r_.__value_.__l.__data_, 4);
        }
        id v197 = v178;
        float v199 = objc_msgSend_stringByAppendingString_(v196, v198, @"-Indices");
        objc_msgSend_setName_(v197, v200, (uint64_t)v199);
      }
    }
    else
    {
      v320[1] = 0;
      v320[0] = 0;
      *(void *)&long long v321 = 0;
      sub_20B0AABB4((uint64_t)v320, v9);
      if (v9)
      {
        unint64_t v169 = 0;
        int v170 = v320[0];
        do
        {
          v170[v169] = v169;
          ++v169;
        }
        while (v169 < (unsigned __int16)v9);
      }
      id v171 = objc_alloc(MEMORY[0x263EFF8F8]);
      float v173 = objc_msgSend_initWithBytes_length_(v171, v172, (uint64_t)v320[0], 2 * v9);
      float v176 = objc_msgSend_bufferAllocator(v291, v174, v175);
      unint64_t v178 = objc_msgSend_newBufferWithData_type_(v176, v177, (uint64_t)v173, 2);

      if (objc_msgSend_conformsToProtocol_(v178, v179, (uint64_t)&unk_26BF5ED88))
      {
        if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          objc_msgSend_stringWithCString_encoding_(NSString, v180, (uint64_t)&v334, 4);
        }
        else {
        float v181 = objc_msgSend_stringWithCString_encoding_(NSString, v180, (uint64_t)v334.__r_.__value_.__l.__data_, 4);
        }
        id v182 = v178;
        BOOL v184 = objc_msgSend_stringByAppendingString_(v181, v183, @"-Indices");
        objc_msgSend_setName_(v182, v185, (uint64_t)v184);
      }
    }

    if (v320[0])
    {
      v320[1] = v320[0];
      operator delete(v320[0]);
    }
    BOOL v201 = [MDLSubmesh alloc];
    float v202 = [MDLMaterial alloc];
    float v203 = objc_opt_new();
    float32x2_t v205 = objc_msgSend_initWithName_scatteringFunction_(v202, v204, @"STL material", v203);
    float v207 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v201, v206, (uint64_t)v178, v168, v167, 2, v205);

    long long v208 = objc_opt_new();
    uint64_t v211 = objc_msgSend_attributes(v208, v209, v210);
    float v213 = objc_msgSend_objectAtIndexedSubscript_(v211, v212, 0);
    objc_msgSend_setName_(v213, v214, @"position");

    float v217 = objc_msgSend_attributes(v208, v215, v216);
    float32x2_t v219 = objc_msgSend_objectAtIndexedSubscript_(v217, v218, 0);
    objc_msgSend_setFormat_(v219, v220, 786435);

    int v223 = objc_msgSend_attributes(v208, v221, v222);
    float v225 = objc_msgSend_objectAtIndexedSubscript_(v223, v224, 0);
    objc_msgSend_setBufferIndex_(v225, v226, 0);

    unsigned __int32 v229 = objc_msgSend_attributes(v208, v227, v228);
    uint64_t v231 = objc_msgSend_objectAtIndexedSubscript_(v229, v230, 0);
    objc_msgSend_setOffset_(v231, v232, 0);

    uint64_t v235 = objc_msgSend_attributes(v208, v233, v234);
    float32x4_t v237 = objc_msgSend_objectAtIndexedSubscript_(v235, v236, 1);
    objc_msgSend_setName_(v237, v238, @"normal");

    uint64_t v241 = objc_msgSend_attributes(v208, v239, v240);
    int v243 = objc_msgSend_objectAtIndexedSubscript_(v241, v242, 1);
    objc_msgSend_setFormat_(v243, v244, 786435);

    float v247 = objc_msgSend_attributes(v208, v245, v246);
    float v249 = objc_msgSend_objectAtIndexedSubscript_(v247, v248, 1);
    objc_msgSend_setBufferIndex_(v249, v250, 0);

    uint64_t v253 = objc_msgSend_attributes(v208, v251, v252);
    float v255 = objc_msgSend_objectAtIndexedSubscript_(v253, v254, 1);
    objc_msgSend_setOffset_(v255, v256, 12);

    uint64_t v259 = objc_msgSend_layouts(v208, v257, v258);
    id v261 = objc_msgSend_objectAtIndexedSubscript_(v259, v260, 0);
    objc_msgSend_setStride_(v261, v262, 24);

    unint64_t v265 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v263, (uint64_t)v331, v332 - (char *)v331);
    if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      objc_msgSend_stringWithCString_encoding_(NSString, v264, (uint64_t)&v334, 4);
    }
    else {
    uint64_t v266 = objc_msgSend_stringWithCString_encoding_(NSString, v264, (uint64_t)v334.__r_.__value_.__l.__data_, 4);
    }
    int v269 = objc_msgSend_bufferAllocator(v291, v267, v268);
    int v271 = objc_msgSend_newBufferWithData_type_(v269, v270, (uint64_t)v265, 1);

    if (objc_msgSend_conformsToProtocol_(v271, v272, (uint64_t)&unk_26BF5ED88))
    {
      id v273 = v271;
      unint64_t v275 = objc_msgSend_stringWithFormat_(NSString, v274, @"%@-%@", v266, @"position");
      objc_msgSend_setName_(v273, v276, (uint64_t)v275);
    }
    __int32 v277 = [MDLMesh alloc];
    v335[0] = v207;
    long long v279 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v278, (uint64_t)v335, 1);
    uint64_t v281 = objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v277, v280, (uint64_t)v271, v168, v208, v279);

    int v284 = objc_msgSend_vertexDescriptor(v291, v282, v283);
    BOOL v285 = v284 == 0;

    if (!v285)
    {
      int v288 = objc_msgSend_vertexDescriptor(v291, v286, v287);
      objc_msgSend_setVertexDescriptor_(v281, v289, (uint64_t)v288);
    }
    objc_msgSend_setName_(v281, v286, (uint64_t)v266);
    objc_msgSend_addObject_(v291, v290, (uint64_t)v281);

    goto LABEL_349;
  }
  unsigned int v99 = *(_DWORD *)(a2 + 80);
  if (v99 < 0xE38E38F) {
    goto LABEL_210;
  }
  NSLog(&cfstr_BadTriangleCou.isa);
LABEL_349:
  if (v331)
  {
    float32x4_t v332 = (char *)v331;
    operator delete(v331);
  }
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v334.__r_.__value_.__l.__data_);
  }
LABEL_353:
}

void sub_20B0AA88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  std::string::size_type v20 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v20;
    operator delete(v20);
  }

  int v21 = *(void **)(v18 - 200);
  if (v21)
  {
    *(void *)(v18 - 192) = v21;
    operator delete(v21);
  }
  if (*(char *)(v18 - 153) < 0) {
    operator delete(*(void **)(v18 - 176));
  }

  _Unwind_Resume(a1);
}

void sub_20B0AABB4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    sub_20B0AB174((char **)a1, a2 - v2);
  }
}

BOOL sub_20B0AABE4(char *a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v4 = fopen(a1, "wb");
  if (v4)
  {
    memset(&__str, 0, sizeof(__str));
    sub_20B07F8E0(&__str, a1);
    memset(&__p, 0, sizeof(__p));
    memset(&v30, 0, sizeof(v30));
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    else
    {
      p_str = &__str;
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    int v7 = (char *)&p_str[-1].__r_.__value_.__r.__words[2] + 7;
    do
    {
      if (!size) {
        goto LABEL_12;
      }
      int v8 = v7[size--];
    }
    while (v8 != 46);
    if (size == -1)
    {
LABEL_12:
      char v10 = 0;
      unsigned int v9 = 0;
      std::string::operator=(&__p, &__str);
      goto LABEL_13;
    }
    std::string::basic_string((std::string *)__ptr, &__str, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
    unsigned int v9 = *(void **)__ptr;
    char v10 = __ptr[23];
    std::string::basic_string((std::string *)__ptr, &__str, 0, size, (std::allocator<char> *)&v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = *(std::string *)__ptr;
LABEL_13:
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
    }
    int v13 = (char *)&p_p[-1].__r_.__value_.__r.__words[2] + 7;
    do
    {
      if (!v12) {
        goto LABEL_24;
      }
      int v14 = v13[v12--];
    }
    while (v14 != 47);
    if (v12 == -1)
    {
LABEL_24:
      std::string::operator=(&v30, &__p);
      goto LABEL_25;
    }
    std::string::basic_string((std::string *)__ptr, &__p, v12 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v29);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::string v30 = *(std::string *)__ptr;
LABEL_25:
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    memset(__ptr, 0, sizeof(__ptr));
    uint64_t v15 = &v30;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v15 = (std::string *)v30.__r_.__value_.__r.__words[0];
    }
    snprintf(__ptr, 0x50uLL, "%s", (const char *)v15);
    std::string::size_type v16 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v16 = v30.__r_.__value_.__l.__size_;
    }
    if (v16 >= 0x4F) {
      std::string::size_type v16 = 79;
    }
    memset(&__ptr[v16], 32, 80 - v16);
    fwrite(__ptr, 1uLL, 0x50uLL, v4);
    memset(__ptr, 0, 24);
    sub_20B056CAC(v3, __ptr);
    unsigned int v29 = -1227133513 * ((*(void *)&__ptr[8] - *(void *)__ptr) >> 5);
    fwrite(&v29, 1uLL, 4uLL, v4);
    BOOL v17 = v29 < 0x51EB852uLL;
    if (v29 >= 0x51EB852)
    {
      fclose(v4);
      NSLog(&cfstr_TooManyTriangl.isa);
    }
    else
    {
      uint64_t v18 = (char *)malloc_type_malloc(50 * v29, 0x88B69847uLL);
      if (v29)
      {
        uint64_t v19 = 0;
        unint64_t v20 = 0;
        int v21 = v18 + 20;
        do
        {
          int v22 = &v18[50 * v20];
          *(void *)int v22 = 0;
          *((_DWORD *)v22 + 2) = 0;
          uint64_t v23 = *(void *)__ptr + v19;
          uint64_t v24 = 16;
          uint64_t v25 = v21;
          do
          {
            long long v26 = *(_OWORD *)(v23 + v24);
            *((void *)v25 - 1) = v26;
            *uint64_t v25 = DWORD2(v26);
            v25 += 3;
            v24 += 16;
          }
          while (v24 != 64);
          *((_WORD *)v22 + 24) = 0;
          ++v20;
          int v21 = (_DWORD *)((char *)v21 + 50);
          v19 += 224;
        }
        while (v20 < v29);
        size_t v27 = 50 * v29;
      }
      else
      {
        size_t v27 = 0;
      }
      fwrite(v18, 1uLL, v27, v4);
      fclose(v4);
    }
    if (*(void *)__ptr)
    {
      *(void *)&__ptr[8] = *(void *)__ptr;
      operator delete(*(void **)__ptr);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v17 = 0;
  }

  return v17;
}

void sub_20B0AAFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31)
{
  if (v33 < 0) {
    operator delete(v32);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20B0AB060(void *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL result = (unsigned __int8 *)memchr(a1, (char)*a3, a2 - (unsigned char *)a1);
  if (!result) {
    BOOL result = a2;
  }
  uint64_t v6 = result + 1;
  if (result != a2 && v6 != a2)
  {
    do
    {
      int v8 = *v6;
      if (v8 != *a3) {
        *result++ = v8;
      }
      ++v6;
    }
    while (v6 != a2);
  }
  return result;
}

void *sub_20B0AB0C8(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_20B07D4E0();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *std::string __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void sub_20B0AB174(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  size_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    size_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      sub_20B05D0BC();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)sub_20B08AAC4(v4, v13);
      size_t v8 = *a1;
      size_t v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v15 = &v14[2 * v11];
    std::string::size_type v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    BOOL v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_20B0AB288(uint64_t a1)
{
  *(void *)a1 = 0x3FC90FDB40200000;
  *(_DWORD *)(a1 + 8) = 1070141403;
  *(_DWORD *)(a1 + 16) = 1036831949;
  *(_OWORD *)(a1 + 48) = xmmword_20B1E75A0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 84) = xmmword_20B1E75B0;
  operator new();
}

uint64_t sub_20B0AB31C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 104);
  if (v2)
  {
    if (*v2) {
      MEMORY[0x210532650](*v2, 0x1000C40265AC83CLL);
    }
    MEMORY[0x210532650](v2, 0x20C4093837F09);
  }
  free(*(void **)(a1 + 136));
  return a1;
}

void sub_20B0AB388(double a1, double a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, float32x4_t *a8, unsigned int a9, uint64_t a10)
{
  unint64_t v12 = a8;
  int v14 = a6 * a5;
  if (a7)
  {
    float32x4_t v15 = 0uLL;
    if (v14 >= 1)
    {
      uint64_t v16 = (a6 * a5);
      BOOL v17 = a8;
      do
      {
        float32x4_t v18 = *v17++;
        HIDWORD(a2) = v18.i32[1];
        float32x4_t v15 = vaddq_f32(v18, v15);
        --v16;
      }
      while (v16);
    }
    *(float *)&a2 = (float)v14;
    __asm { FMOV            V2.4S, #1.0 }
    float32x4_t v23 = vmulq_f32(v15, vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0)));
    *(void *)(a4 + 68) = v23.i64[0];
    *(_DWORD *)(a4 + 76) = v23.i32[2];
    float v24 = *(float *)(a4 + 64) * v23.f32[0];
  }
  else
  {
    float v24 = -0.0019;
  }
  uint64_t v95 = 0;
  long long v94 = 0u;
  memset(v93, 0, sizeof(v93));
  sub_20B0ABDCC((float *)v93, *(float *)(a4 + 48), *(float *)(a4 + 52), *(float *)(a4 + 56), *(float *)(a4 + 60), v24, *(float *)(a4 + 80), *(float *)(a4 + 84));
  if (a9)
  {
    if (a9 > 2)
    {
      if (a9 == 3 && v14 >= 1)
      {
        uint64_t v74 = 0;
        uint64_t v75 = &v12->f32[1];
        do
        {
          float v76 = *v75;
          float v77 = v75[1];
          *(float *)&uint64_t v78 = sub_20B0ABA18((float *)v93, *(v75 - 1));
          v88.i64[0] = v78;
          float v92 = sub_20B0ABA18((float *)&v93[1] + 2, v76);
          float v79 = sub_20B0ABA18((float *)&v94, v77);
          float32x4_t v80 = v88;
          v80.f32[1] = v92;
          double v81 = v88.f32[0] * 0.212655 + v92 * 0.715158 + v79 * 0.072187;
          *(float *)&double v81 = v81;
          v80.f32[2] = v79;
          float32x4_t v82 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v81, 0);
          v82.i32[3] = 1.0;
          float32x4_t v83 = vmlaq_n_f32(vnegq_f32(v82), v80, COERCE_FLOAT(*(void *)(a4 + 88)));
          v80.i64[0] = 0xBF000000BF000000;
          v80.i64[1] = 0xBF000000BF000000;
          float32x4_t v84 = vmlaq_n_f32(vaddq_f32(v82, v80), v83, COERCE_FLOAT(*(_OWORD *)(a4 + 92)));
          v80.i64[0] = 0x3F0000003F000000;
          v80.i64[1] = 0x3F0000003F000000;
          float32x4_t v85 = vmlaq_n_f32(v80, v84, COERCE_FLOAT(*(_OWORD *)(a4 + 96)));
          *(void *)(a10 + 4 * v74) = v85.i64[0];
          *(_DWORD *)(a10 + 4 * (v74 + 2)) = v85.i32[2];
          *(_DWORD *)(a10 + 4 * (v74 + 3)) = 1065353216;
          v74 += 4;
          v75 += 4;
        }
        while (4 * v14 != v74);
      }
    }
    else if (v14 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 4 * v14;
      float32x4_t v27 = 0uLL;
      do
      {
        float32x4_t v28 = *v12;
        if (a9 != 2)
        {
          LODWORD(v29) = v12->i64[1];
          LODWORD(v30) = HIDWORD(v12->i64[0]);
          *(float *)&uint64_t v31 = sub_20B0ABA18((float *)v93, v28.f32[0]);
          v90.i64[0] = v31;
          float v89 = sub_20B0ABA18((float *)&v93[1] + 2, v30);
          float v32 = sub_20B0ABA18((float *)&v94, v29);
          float32x4_t v33 = v90;
          v33.f32[1] = v89;
          v33.f32[2] = v32;
          double v34 = v90.f32[0] * 0.212655 + v89 * 0.715158 + v32 * 0.072187;
          *(float *)&double v34 = v34;
          float32x4_t v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34, 0);
          v35.i32[3] = 1.0;
          float32x4_t v36 = vmlaq_n_f32(vnegq_f32(v35), v33, COERCE_FLOAT(*(void *)(a4 + 88)));
          v33.i64[0] = 0xBF000000BF000000;
          v33.i64[1] = 0xBF000000BF000000;
          float32x4_t v37 = vmlaq_n_f32(vaddq_f32(v35, v33), v36, COERCE_FLOAT(*(_OWORD *)(a4 + 92)));
          v35.i64[0] = 0x3F0000003F000000;
          v35.i64[1] = 0x3F0000003F000000;
          float32x4_t v28 = vmlaq_n_f32(v35, v37, COERCE_FLOAT(*(_OWORD *)(a4 + 96)));
          float32x4_t v27 = 0uLL;
        }
        v28.i32[3] = 0;
        float32x4_t v38 = vmaxnmq_f32(v28, v27);
        unsigned int v39 = v38.i32[0] & 0x7FFFFFFF;
        unsigned int v40 = HIWORD(v38.i32[0]) & 0x8000;
        if ((v38.i32[0] & 0x7FFFFFFFu) <= 0x387FFFFF)
        {
          if (v39 >= 0x33000001)
          {
            int v42 = 126 - (v39 >> 23);
            unsigned __int32 v43 = v38.i32[0] & 0x7FFFFF | 0x800000;
            unsigned int v44 = v43 << ((v39 >> 23) - 94);
            unsigned int v40 = (v43 >> v42) | HIWORD(v38.i32[0]) & 0x8000;
            if (v44 > 0x80000000 || (v44 == 0x80000000 ? (_ZF = ((v43 >> v42) & 1) == 0) : (_ZF = 1), !_ZF)) {
              LOWORD(v40) = v40 + 1;
            }
          }
        }
        else
        {
          unsigned int v41 = v40 | ((v38.i32[0] + 134221823 + (((unsigned __int32)v38.i32[0] >> 13) & 1)) >> 13);
          LOWORD(v40) = v40 | 0x7C00;
          if (v39 > 0x477FEFFF) {
            LOWORD(v41) = v40;
          }
          if (v39 != 2139095040) {
            LOWORD(v40) = ((((unsigned __int32)v38.i32[0] >> 13) & 0x3FF) == 0) | ((unsigned __int32)v38.i32[0] >> 13) & 0x3FF | v40;
          }
          if (v39 <= 0x7F7FFFFF) {
            LOWORD(v40) = v41;
          }
        }
        *(_WORD *)(a10 + 2 * v25) = v40;
        unsigned int v46 = v38.i32[1] & 0x7FFFFFFF;
        int v47 = HIWORD(v38.i32[1]) & 0x8000;
        if ((v38.i32[1] & 0x7FFFFFFFu) <= 0x387FFFFF)
        {
          if (v46 >= 0x33000001)
          {
            int v49 = 126 - (v46 >> 23);
            unsigned int v50 = v38.i32[1] & 0x7FFFFF | 0x800000;
            unsigned int v51 = v50 << ((v46 >> 23) - 94);
            int v47 = (v50 >> v49) | HIWORD(v38.i32[1]) & 0x8000;
            if (v51 > 0x80000000 || (v51 == 0x80000000 ? (BOOL v52 = ((v50 >> v49) & 1) == 0) : (BOOL v52 = 1), !v52)) {
              LOWORD(v47) = v47 + 1;
            }
          }
        }
        else
        {
          unsigned int v48 = v47 | ((v38.i32[1] + 134221823 + (((unsigned __int32)v38.i32[1] >> 13) & 1)) >> 13);
          LOWORD(v47) = v47 | 0x7C00;
          if (v46 > 0x477FEFFF) {
            LOWORD(v48) = v47;
          }
          if (v46 != 2139095040) {
            LOWORD(v47) = ((((unsigned __int32)v38.i32[1] >> 13) & 0x3FF) == 0) | ((unsigned __int32)v38.i32[1] >> 13) & 0x3FF | v47;
          }
          if (v46 <= 0x7F7FFFFF) {
            LOWORD(v47) = v48;
          }
        }
        *(_WORD *)(a10 + 2 * (v25 + 1)) = v47;
        unsigned int v53 = v38.i32[2] & 0x7FFFFFFF;
        int v54 = HIWORD(v38.i32[2]) & 0x8000;
        if ((v38.i32[2] & 0x7FFFFFFFu) <= 0x387FFFFF)
        {
          if (v53 >= 0x33000001)
          {
            int v56 = 126 - (v53 >> 23);
            unsigned int v57 = v38.i32[2] & 0x7FFFFF | 0x800000;
            unsigned int v58 = v57 << ((v53 >> 23) - 94);
            int v54 = (v57 >> v56) | HIWORD(v38.i32[2]) & 0x8000;
            if (v58 > 0x80000000 || (v58 == 0x80000000 ? (BOOL v59 = ((v57 >> v56) & 1) == 0) : (BOOL v59 = 1), !v59)) {
              LOWORD(v54) = v54 + 1;
            }
          }
        }
        else
        {
          unsigned int v55 = v54 | ((v38.i32[2] + 134221823 + (((unsigned __int32)v38.i32[2] >> 13) & 1)) >> 13);
          LOWORD(v54) = v54 | 0x7C00;
          if (v53 > 0x477FEFFF) {
            LOWORD(v55) = v54;
          }
          if (v53 != 2139095040) {
            LOWORD(v54) = ((((unsigned __int32)v38.i32[2] >> 13) & 0x3FF) == 0) | ((unsigned __int32)v38.i32[2] >> 13) & 0x3FF | v54;
          }
          if (v53 <= 0x7F7FFFFF) {
            LOWORD(v54) = v55;
          }
        }
        *(_WORD *)(a10 + 2 * (v25 + 2)) = v54;
        *(_WORD *)(a10 + 2 * (v25 + 3)) = 15360;
        ++v12;
        v25 += 4;
      }
      while (v26 != v25);
    }
  }
  else if (v14 >= 1)
  {
    uint64_t v60 = 0;
    int v61 = &v12->f32[1];
    float32x4_t v86 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    float32x4_t v87 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    do
    {
      float v62 = *v61;
      float v63 = v61[1];
      *(float *)&uint64_t v64 = sub_20B0ABA18((float *)v93, *(v61 - 1));
      v88.i64[0] = v64;
      float v91 = sub_20B0ABA18((float *)&v93[1] + 2, v62);
      float v65 = sub_20B0ABA18((float *)&v94, v63);
      float32x4_t v66 = v88;
      v66.f32[1] = v91;
      v66.f32[2] = v65;
      double v67 = v88.f32[0] * 0.212655 + v91 * 0.715158 + v65 * 0.072187;
      *(float *)&double v67 = v67;
      float32x4_t v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v67, 0);
      float32x4_t v69 = vmulq_n_f32(v66, COERCE_FLOAT(*(void *)(a4 + 88)));
      v68.i32[3] = 1.0;
      v69.i32[3] = 1.0;
      float32x4_t v70 = vsubq_f32(v69, v68);
      v71.i64[0] = 0xBF000000BF000000;
      v71.i64[1] = 0xBF000000BF000000;
      float32x4_t v72 = vmlaq_n_f32(vaddq_f32(v68, v71), v70, COERCE_FLOAT(*(_OWORD *)(a4 + 92)));
      v70.i32[0] = 1132396544;
      float32x4_t v73 = vminnmq_f32(vmaxnmq_f32(vmlaq_n_f32(v87, v72, vmulq_f32(*(float32x4_t *)(a4 + 96), v70).f32[0]), (float32x4_t)0), v86);
      *(unsigned char *)(a10 + v60) = (int)v73.f32[0];
      *(unsigned char *)(a10 + (v60 + 1)) = (int)v73.f32[1];
      *(unsigned char *)(a10 + (v60 + 2)) = (int)v73.f32[2];
      *(unsigned char *)(a10 + (v60 + 3)) = -1;
      v60 += 4;
      v61 += 4;
    }
    while (4 * v14 != v60);
  }
}

float sub_20B0ABA18(float *a1, float a2)
{
  float v3 = fmaxf(a2 - a1[2], 0.0) * a1[1];
  float v4 = a1[3];
  if (v3 > v4)
  {
    float v5 = a1[4];
    float v3 = (float)(logf((float)(v5 * (float)(v3 - v4)) + 1.0) / v5) + v4;
  }
  float v6 = powf(v3, *a1) * a1[5];
  if (v6 < 0.0) {
    float v6 = 0.0;
  }
  return fminf(v6, 1.0);
}

void sub_20B0ABAA4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    MEMORY[0x210532650](v1, 0x1000C40265AC83CLL);
  }
  operator new();
}

void sub_20B0ABB5C(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x1000C40265AC83CLL);
  _Unwind_Resume(a1);
}

void sub_20B0ABB80(uint64_t a1)
{
}

float *sub_20B0ABDCC(float *a1, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  float32x4_t v15 = sub_20B0ABE6C(a1, a2, a5, a6, a7, a8);
  sub_20B0ABE6C(v15 + 6, a3, a5, a6, a7, a8);
  sub_20B0ABE6C(a1 + 12, a4, a5, a6, a7, a8);
  return a1;
}

float *sub_20B0ABE6C(float *a1, float a2, float a3, float a4, float a5, float a6)
{
  *a1 = a2;
  float v11 = exp2(a3 + 2.47393);
  a1[1] = v11;
  a1[2] = a4;
  float v12 = exp2(a5);
  a1[3] = v12;
  float v13 = exp2(a6) - v12;
  float v14 = 11.3137085 - v12;
  float v15 = 0.0;
  float v16 = 1.0;
  if (logf(v13 + 1.0) > v14)
  {
    do
    {
      float v15 = v16;
      float v16 = v16 + v16;
    }
    while ((float)(logf((float)(v16 * v13) + 1.0) / v16) > v14);
  }
  int v17 = 30;
  do
  {
    if ((float)(logf((float)((float)((float)(v16 + v15) * 0.5) * v13) + 1.0) / (float)((float)(v16 + v15) * 0.5)) >= v14) {
      float v15 = (float)(v16 + v15) * 0.5;
    }
    else {
      float v16 = (float)(v16 + v15) * 0.5;
    }
    --v17;
  }
  while (v17);
  a1[4] = (float)(v15 + v16) * 0.5;
  float v18 = exp2(a2 * -3.5);
  a1[5] = v18;
  return a1;
}

uint64_t sub_20B0ABFA8(uint64_t a1, double a2, double a3, double a4)
{
  *(double *)(a1 + 120) = a2;
  *(double *)(a1 + 128) = a3;
  *(double *)(a1 + 136) = a4;
  sub_20B0AC0AC(a2, a3, a4, a1, (uint64_t)&unk_267689750, a1);
  sub_20B0AC0AC(a2, a3, a4, a1, (uint64_t)&unk_26768B910, a1 + 36);
  sub_20B0AC0AC(a2, a3, a4, a1, (uint64_t)&unk_26768DAD0, a1 + 72);
  sub_20B0AC32C(a2, a3, a4, a1, (uint64_t)&unk_26768FC90);
  *(float *)&double v8 = v8;
  *(_DWORD *)(a1 + 108) = LODWORD(v8);
  sub_20B0AC32C(a2, a3, a4, a1, (uint64_t)&unk_267690050);
  *(float *)&double v9 = v9;
  *(_DWORD *)(a1 + 112) = LODWORD(v9);
  sub_20B0AC32C(a2, a3, a4, a1, (uint64_t)&unk_267690410);
  *(float *)&double v10 = v10;
  *(_DWORD *)(a1 + 116) = LODWORD(v10);
  return a1;
}

void sub_20B0AC0AC(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v9 = (int)a1;
  double v10 = a1 - trunc(a1);
  long double v11 = pow(a3 * 0.636619772, 0.333333333);
  uint64_t v12 = 0;
  long double v13 = 1.0 - v11;
  long double v14 = v13 * v13;
  double v15 = (1.0 - v11) * (v14 * v14);
  long double v16 = v11 * v11;
  long double v17 = v11 * (v11 * v11);
  double v18 = v11 * (v16 * v16);
  int v19 = 54 * v9;
  double v20 = v14 * v14 * v11;
  double v21 = v13 * v16 * (v13 * v13);
  double v22 = v13 * v13 * v17;
  double v23 = v16 * v16 * v13;
  float v24 = (double *)(a5 + 8 * (54 * v9 - 54) + 216);
  do
  {
    float v25 = (1.0 - v10)
        * (1.0 - a2)
        * (*(v24 - 27) * v15
         + v24[18] * v18
         + (v21 * *(v24 - 9) + v22 * *v24) * 10.0
         + (v20 * *(v24 - 18) + v23 * v24[9]) * 5.0);
    *(float *)(a6 + v12) = v25;
    v12 += 4;
    ++v24;
  }
  while (v12 != 36);
  uint64_t v26 = 0;
  float32x4_t v27 = (double *)(a5 + 8 * (v19 + 486) + 216);
  do
  {
    float v28 = *(float *)(a6 + v26)
        + (1.0 - v10)
        * a2
        * (*(v27 - 27) * v15
         + v27[18] * v18
         + (v21 * *(v27 - 9) + v22 * *v27) * 10.0
         + (v20 * *(v27 - 18) + v23 * v27[9]) * 5.0);
    *(float *)(a6 + v26) = v28;
    v26 += 4;
    ++v27;
  }
  while (v26 != 36);
  if (v9 != 10)
  {
    uint64_t v29 = 0;
    float v30 = (double *)(a5 + 8 * v19 + 144);
    do
    {
      float v31 = *(float *)(a6 + v29)
          + v10
          * (1.0 - a2)
          * (*(v30 - 18) * v15
           + v30[27] * v18
           + (v21 * *v30 + v22 * v30[9]) * 10.0
           + (v20 * *(v30 - 9) + v23 * v30[18]) * 5.0);
      *(float *)(a6 + v29) = v31;
      v29 += 4;
      ++v30;
    }
    while (v29 != 36);
    uint64_t v32 = 0;
    float32x4_t v33 = (double *)(a5 + 8 * (v19 + 540) + 144);
    do
    {
      float v34 = *(float *)(a6 + v32)
          + v10
          * a2
          * (*(v33 - 18) * v15
           + v33[27] * v18
           + (v21 * *v33 + v22 * v33[9]) * 10.0
           + (v20 * *(v33 - 9) + v23 * v33[18]) * 5.0);
      *(float *)(a6 + v32) = v34;
      v32 += 4;
      ++v33;
    }
    while (v32 != 36);
  }
}

void sub_20B0AC32C(double a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  int v6 = (int)a1;
  long double v7 = pow(a3 * 0.636619772, 0.333333333);
  v8.f64[0] = 1.0 - v7;
  v8.f64[1] = v7;
  float64x2_t v9 = vmulq_f64(v8, v8);
  _Q5 = vmulq_f64(v8, v9);
  __asm { FMOV            V6.2D, #10.0 }
  int8x16_t v16 = (int8x16_t)vmulq_f64(v9, _Q6);
  _Q6 = vmulq_f64((float64x2_t)vextq_s8(v16, v16, 8uLL), _Q5);
  _Q5.f64[0] = *(float64_t *)(a5 + 8 * (6 * v6 - 6) + 24);
  __asm { FMLA            D17, D5, V6.D[1] }
  _D18 = *(void *)(a5 + 8 * (6 * v6 + 54) + 24);
  __asm { FMLA            D7, D18, V6.D[1] }
}

void sub_20B0AC4AC(float *a1, float a2, float a3, float a4, float a5)
{
  __float2 v10 = __sincosf_stret(a3);
  __float2 v11 = __sincosf_stret(a4);
  float v12 = (float)(v11.__cosval * v10.__cosval) + (float)((float)(v11.__sinval * v10.__sinval) * cosf(a5 - a2));
  float v13 = 0.0;
  if (v12 <= 1.0)
  {
    if (v12 >= -1.0) {
      float v13 = acosf(v12);
    }
    else {
      float v13 = 3.1416;
    }
  }
  float v14 = 1.5698;
  if (a3 <= 1.5698) {
    float v14 = a3;
  }
  float v15 = cosf(v14);
  float v17 = a1[27] * sub_20B0AC670(v15, v13, (uint64_t)a1, a1);
  float v16 = a1[28] * sub_20B0AC670(v15, v13, (uint64_t)a1, a1 + 9);
  vmulq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_20B1E75D0, v17), (float32x4_t)xmmword_20B1E75E0, v16), (float32x4_t)xmmword_20B1E75F0, a1[29] * sub_20B0AC670(v15, v13, (uint64_t)a1, a1 + 18)), (float32x4_t)vdupq_n_s32(0x3C96B90Du));
}

float sub_20B0AC670(float a1, float a2, uint64_t a3, float *a4)
{
  float v7 = cosf(a2);
  float v8 = expf(a4[4] * a2);
  return (float)((float)((float)((float)(a4[2] + (float)(a4[3] * v8)) + (float)(a4[5] * (float)(v7 * v7)))
                       + (float)((float)(a4[6] * (float)((float)(v7 * v7) + 1.0))
                               / (float)(sqrtf((float)((float)(a4[8] + (float)(v7 * -2.0)) * a4[8]) + 1.0)
                                       * (float)((float)((float)(a4[8] + (float)(v7 * -2.0)) * a4[8]) + 1.0))))
               + (float)(a4[7] * sqrtf(a1)))
       * (float)((float)(expf(a4[1] / (float)(a1 + 0.01)) * *a4) + 1.0);
}

void sub_20B0AC7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B0AC948(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v2, 0x10A1C40D5506429);
  _Unwind_Resume(a1);
}

void sub_20B0ACA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLLight;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B0ACB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0ACC20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0ACDAC(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v2, 0x10A1C409F50DDA3);

  _Unwind_Resume(a1);
}

void sub_20B0AD0E0(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v2, 0x10A1C402B854A62);
  _Unwind_Resume(a1);
}

void sub_20B0AD1AC(void **a1@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v6 = *a1;
  if ((unint64_t)*a1 >= a2)
  {
    unsigned int v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = a2 - v6;
    while (v6[v7] != 10)
    {
      *a1 = &v6[++v7];
      if (a2 - (void)v6 == v7) {
        goto LABEL_8;
      }
    }
    unsigned int v8 = v7;
  }
LABEL_8:
  memset(&__dst, 0, sizeof(__dst));
  sub_20B0AB0C8(&__dst, v6, v8);
  float64x2_t v9 = (char *)*a1;
  if ((unint64_t)*a1 < a2)
  {
    unint64_t v10 = a2 - (void)v9;
    __float2 v11 = v9 + 1;
    do
    {
      if (*(v11 - 1) != 10) {
        break;
      }
      *a1 = v11++;
      --v10;
    }
    while (v10);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v12 = (std::string *)((char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]));
  }
  else {
    float v12 = (std::string *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  uint64_t v14 = MEMORY[0x263EF8318];
  while (v12 != p_dst)
  {
    unsigned int v16 = SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]);
    float v12 = (std::string *)((char *)v12 - 1);
    unsigned int v15 = v16;
    if ((v16 & 0x80000000) != 0) {
      int v17 = __maskrune(v15, 0x4000uLL);
    }
    else {
      int v17 = *(_DWORD *)(v14 + 4 * v15 + 60) & 0x4000;
    }
    if (!v17)
    {
      p_dst = (std::string *)((char *)&v12->__r_.__value_.__l.__data_ + 1);
      break;
    }
  }
  double v18 = (char *)&__dst + HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    int v19 = &__dst;
  }
  else
  {
    double v18 = (char *)(__dst.__r_.__value_.__r.__words[0] + __dst.__r_.__value_.__l.__size_);
    int v19 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  std::string::erase(&__dst, (char *)p_dst - (char *)v19, v18 - (char *)p_dst);
  char v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  double v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v22 = &__dst;
  }
  else {
    double v22 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    float v24 = (std::string *)((char *)v22 + size);
    float v25 = v22;
    while (1)
    {
      unsigned int v26 = v25->__r_.__value_.__s.__data_[0];
      if (!((v26 & 0x80000000) != 0 ? __maskrune(v26, 0x4000uLL) : *(_DWORD *)(v14 + 4 * v26 + 60) & 0x4000)) {
        break;
      }
      float v25 = (std::string *)((char *)v25 + 1);
      if (!--size)
      {
        float v25 = v24;
        break;
      }
    }
    char v20 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    double v21 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    float v25 = v22;
  }
  if (v20 >= 0) {
    double v21 = &__dst;
  }
  std::string::erase(&__dst, (char *)v22 - (char *)v21, (char *)v25 - (char *)v22);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20B07F994(a3, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a3 = __dst;
  }
}

void sub_20B0AD3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0AD3F0(const char **a1, unint64_t a2, int a3, uint64_t a4)
{
  float v5 = *a1;
  if (a3 < 1) {
    goto LABEL_37;
  }
  int v9 = 0;
  uint64_t v10 = MEMORY[0x263EF8318];
  uint64_t v25 = a4 + 16;
  do
  {
    __float2 v11 = *a1;
    while ((unint64_t)v11 < a2)
    {
      unsigned int v12 = *v5;
      if ((v12 & 0x80000000) != 0)
      {
        if (__maskrune(v12, 0x4000uLL))
        {
LABEL_7:
          __float2 v11 = *a1;
          goto LABEL_10;
        }
      }
      else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000) != 0)
      {
        goto LABEL_7;
      }
      __float2 v11 = *a1;
      if (*v5 != 44) {
        break;
      }
LABEL_10:
      ++v5;
    }
    if ((unint64_t)v11 >= a2) {
      break;
    }
    int v26 = 0;
    sscanf(v5, "%f", &v26);
    uint64_t v14 = *(_DWORD **)(a4 + 8);
    unint64_t v13 = *(void *)(a4 + 16);
    if ((unint64_t)v14 >= v13)
    {
      unsigned int v16 = *(_DWORD **)a4;
      uint64_t v17 = ((uint64_t)v14 - *(void *)a4) >> 2;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62) {
        sub_20B05D0BC();
      }
      uint64_t v19 = v13 - (void)v16;
      if (v19 >> 1 > v18) {
        unint64_t v18 = v19 >> 1;
      }
      unint64_t v20 = (unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v18;
      if (v20)
      {
        double v21 = (char *)sub_20B05D1AC(v25, v20);
        unsigned int v16 = *(_DWORD **)a4;
        uint64_t v14 = *(_DWORD **)(a4 + 8);
      }
      else
      {
        double v21 = 0;
      }
      double v22 = &v21[4 * v17];
      *(_DWORD *)double v22 = v26;
      unsigned int v15 = v22 + 4;
      while (v14 != v16)
      {
        int v23 = *--v14;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }
      *(void *)a4 = v22;
      *(void *)(a4 + 8) = v15;
      *(void *)(a4 + 16) = &v21[4 * v20];
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *uint64_t v14 = v26;
      unsigned int v15 = v14 + 1;
    }
    *(void *)(a4 + 8) = v15;
    while ((unint64_t)*a1 < a2)
    {
      unsigned int v24 = *v5;
      if ((v24 & 0x80000000) != 0)
      {
        if (__maskrune(v24, 0x4000uLL)) {
          break;
        }
      }
      else if ((*(_DWORD *)(v10 + 4 * v24 + 60) & 0x4000) != 0)
      {
        break;
      }
      if (*v5 == 44) {
        break;
      }
      ++v5;
    }
    ++v9;
  }
  while (v9 != a3);
LABEL_37:
  *a1 = v5;
}

uint64_t sub_20B0AD5E8(void *a1, unint64_t a2, uint64_t a3)
{
  memset(v67, 0, 24);
  uint64_t v64 = 0;
  float v65 = 0;
  uint64_t v66 = 0;
  *(_DWORD *)(a3 + 88) = -1082130432;
  uint64_t v6 = a3 + 88;
  int v61 = 0;
  float v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = a1;
  memset(&v59, 0, sizeof(v59));
  uint64_t v7 = &v59;
  sub_20B0AD1AC(&v60, a2, &v59);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = v59.__r_.__value_.__l.__size_;
  }
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v59.__r_.__value_.__r.__words[0];
  }
  int v9 = (char *)v7 + size;
  if (size >= 16)
  {
    int64_t v10 = size;
    __float2 v11 = v7;
    do
    {
      unsigned int v12 = (char *)memchr(v11, 73, v10 - 15);
      if (!v12) {
        break;
      }
      if (*(void *)v12 == 0x4D4C3A414E534549 && *((void *)v12 + 1) == 0x323030322D33362DLL)
      {
        if (v12 != v9 && v12 - (char *)v7 != -1) {
          goto LABEL_51;
        }
        break;
      }
      __float2 v11 = (std::string *)(v12 + 1);
      int64_t v10 = v9 - (char *)v11;
    }
    while (v9 - (char *)v11 >= 16);
    int64_t v14 = size;
    unsigned int v15 = v7;
    do
    {
      unsigned int v16 = (char *)memchr(v15, 73, v14 - 15);
      if (!v16) {
        break;
      }
      if (*(void *)v16 == 0x4D4C3A414E534549 && *((void *)v16 + 1) == 0x353939312D33362DLL)
      {
        if (v16 != v9 && v16 - (char *)v7 != -1) {
          goto LABEL_51;
        }
        break;
      }
      unsigned int v15 = (std::string *)(v16 + 1);
      int64_t v14 = v9 - (char *)v15;
    }
    while (v9 - (char *)v15 >= 16);
  }
  if (size >= 7)
  {
    int64_t v18 = size;
    uint64_t v19 = v7;
    do
    {
      unint64_t v20 = (char *)memchr(v19, 73, v18 - 6);
      if (!v20) {
        break;
      }
      if (*(_DWORD *)v20 == 1314080073 && *(_DWORD *)(v20 + 3) == 825835854)
      {
        if (v20 != v9 && v20 - (char *)v7 != -1) {
          goto LABEL_51;
        }
        break;
      }
      uint64_t v19 = (std::string *)(v20 + 1);
      int64_t v18 = v9 - (char *)v19;
    }
    while (v9 - (char *)v19 >= 7);
    if (size >= 16)
    {
      double v22 = v7;
      do
      {
        int v23 = (char *)memchr(v22, 73, size - 15);
        if (!v23) {
          break;
        }
        if (*(void *)v23 == 0x4D4C3A414E534549 && *((void *)v23 + 1) == 0x313939312D33362DLL)
        {
          if (v23 != v9 && v23 - (char *)v7 != -1) {
            goto LABEL_51;
          }
          break;
        }
        double v22 = (std::string *)(v23 + 1);
        int64_t size = v9 - (char *)v22;
      }
      while (v9 - (char *)v22 >= 16);
    }
  }
  if (sub_20B0ADD10((uint64_t *)&v59, "IESNA:LM-63-1986", 0) == -1) {
    uint64_t v60 = a1;
  }
LABEL_51:
  memset(&__p, 0, sizeof(__p));
  sub_20B07F8E0(&__p, "");
LABEL_52:
  while (1)
  {
    int64_t v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      p_p = &__p;
    }
    else
    {
      int64_t v25 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v25 >= 4)
    {
      float32x4_t v27 = (std::string *)((char *)p_p + v25);
      float v28 = p_p;
      while (1)
      {
        uint64_t v29 = (std::string *)memchr(v28, 84, v25 - 3);
        if (!v29) {
          goto LABEL_63;
        }
        if (LODWORD(v29->__r_.__value_.__l.__data_) == 1414285652) {
          break;
        }
        float v28 = (std::string *)((char *)&v29->__r_.__value_.__l.__data_ + 1);
        int64_t v25 = (char *)v27 - (char *)v28;
        if ((char *)v27 - (char *)v28 < 4) {
          goto LABEL_63;
        }
      }
      if (v29 != v27 && v29 == p_p) {
        break;
      }
    }
LABEL_63:
    sub_20B0AD1AC(&v60, a2, &v57);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v57;
    int64_t v30 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      float v31 = &__p;
    }
    else
    {
      int64_t v30 = v57.__r_.__value_.__l.__size_;
      float v31 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if (v30 >= 15)
    {
      uint64_t v32 = (char *)v31 + v30;
      float32x4_t v33 = v31;
      while (1)
      {
        float v34 = (char *)memchr(v33, 95, v30 - 14);
        if (!v34) {
          break;
        }
        if (*(void *)v34 == 0x54554C4F5342415FLL && *(void *)(v34 + 7) == 0x534E454D554C4554)
        {
          if (v34 != v32 && v34 - (char *)v31 != -1) {
            sscanf((const char *)v31, "[_ABSOLUTELUMENS]%f", v6);
          }
          goto LABEL_52;
        }
        float32x4_t v33 = (std::string *)(v34 + 1);
        int64_t v30 = v32 - (char *)v33;
        if (v32 - (char *)v33 < 15) {
          goto LABEL_52;
        }
      }
    }
  }
  memset(&v57, 0, sizeof(v57));
  sub_20B0AD3F0((const char **)&v60, a2, 10, (uint64_t)&v57);
  int v36 = *(_DWORD *)(v57.__r_.__value_.__r.__words[0] + 8);
  float v37 = *(float *)(v57.__r_.__value_.__r.__words[0] + 12);
  float v38 = *(float *)(v57.__r_.__value_.__r.__words[0] + 16);
  v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
  sub_20B0AD3F0((const char **)&v60, a2, 3, (uint64_t)&v57);
  sub_20B0AD3F0((const char **)&v60, a2, (int)v37, (uint64_t)&v61);
  int v39 = (int)v38;
  sub_20B0AD3F0((const char **)&v60, a2, (int)v38, (uint64_t)&v64);
  if (*(float *)v61 != 0.0) {
    goto LABEL_111;
  }
  float v40 = *(v62 - 1);
  if (v40 == 90.0)
  {
    int v41 = 0;
  }
  else
  {
    if (v40 != 180.0) {
      goto LABEL_111;
    }
    int v41 = 1;
  }
  *(_DWORD *)a3 = v41;
  if ((char *)v65 - (unsigned char *)v64 != 4)
  {
    if (*(float *)v64 == 0.0)
    {
      float v42 = *(v65 - 1);
      if (v42 == 360.0) {
        goto LABEL_88;
      }
      if (v42 == 90.0)
      {
        int v43 = 0;
        goto LABEL_89;
      }
      if (v42 == 180.0)
      {
        int v43 = 1;
        goto LABEL_89;
      }
    }
LABEL_111:
    uint64_t v52 = 0;
    goto LABEL_112;
  }
LABEL_88:
  int v43 = 2;
LABEL_89:
  *(_DWORD *)(a3 + 4) = v43;
  int v54 = 0;
  unsigned int v55 = 0;
  uint64_t v56 = 0;
  if (v39 < 1)
  {
    unsigned int v50 = 0;
    unsigned int v51 = 0;
    unsigned int v44 = 0;
    uint64_t v45 = 0;
    float v46 = 0.0;
  }
  else
  {
    do
    {
      sub_20B0AD3F0((const char **)&v60, a2, (int)v37, (uint64_t)&v54);
      --v39;
    }
    while (v39);
    unsigned int v44 = (char *)v54;
    uint64_t v45 = (uint64_t)v55;
    float v46 = 0.0;
    if (v54 != v55)
    {
      int v47 = (float *)v54;
      do
      {
        float v48 = *v47++;
        float v49 = v48;
        if (v46 < v48) {
          float v46 = v49;
        }
      }
      while (v47 != (float *)v55);
    }
    unsigned int v50 = v55;
    unsigned int v51 = v54;
  }
  if ((void **)(a3 + 56) != &v54) {
    sub_20B0AF4FC((char *)(a3 + 56), v44, v45, (v50 - v51) >> 2);
  }
  if ((void **)(a3 + 8) != &v61) {
    sub_20B0AF4FC((char *)(a3 + 8), (char *)v61, (uint64_t)v62, ((char *)v62 - (unsigned char *)v61) >> 2);
  }
  if ((void **)(a3 + 32) != &v64) {
    sub_20B0AF4FC((char *)(a3 + 32), (char *)v64, (uint64_t)v65, ((char *)v65 - (unsigned char *)v64) >> 2);
  }
  *(_DWORD *)(a3 + 80) = v36;
  *(float *)(a3 + 84) = 1.0 / v46;
  if (v54)
  {
    unsigned int v55 = v54;
    operator delete(v54);
  }
  uint64_t v52 = 1;
LABEL_112:
  if (v57.__r_.__value_.__r.__words[0])
  {
    v57.__r_.__value_.__l.__size_ = v57.__r_.__value_.__r.__words[0];
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v61)
  {
    float v62 = (float *)v61;
    operator delete(v61);
  }
  if (v64)
  {
    float v65 = (float *)v64;
    operator delete(v64);
  }
  uint64_t v64 = v67;
  sub_20B0AF458((void ***)&v64);
  return v52;
}

void sub_20B0ADC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  a34 = (void *)(v35 - 144);
  sub_20B0AF458((void ***)&a34);
  _Unwind_Resume(a1);
}

unint64_t sub_20B0ADD10(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    int v9 = (void *)(v5 + a3);
    int64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        unsigned int v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        unsigned int v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        int v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    unsigned int v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

void sub_20B0ADE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B0AE194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(a1);
}

void *sub_20B0AE258(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  float v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  float v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_20B0AE4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B0AE640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0AED04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0AF10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void *sub_20B0AF3DC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    BOOL result = sub_20B0812C0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B0AF43C(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0AF458(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_20B0AF4AC((uint64_t *)v2);
    float v3 = **a1;
    operator delete(v3);
  }
}

void sub_20B0AF4AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

char *sub_20B0AF4FC(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  int v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_20B05D0BC();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    BOOL result = sub_20B0812C0(v7, v11);
    unint64_t v13 = (char *)v7[1];
    unsigned int v12 = (void **)(v7 + 1);
    int v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unsigned int v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unsigned int v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    BOOL result = (char *)memmove(*(void **)result, __src, v14 - v9);
    int v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    BOOL result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unsigned int v12 = &v9[v17];
  return result;
}

void sub_20B0AF608()
{
  unsigned int v12 = 0;
  memset(v11, 0, sizeof(v11));
  v0 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_20B06A31C((uint64_t)v11, 1uLL);
  sub_20B06ABD8(v0);
  __asm { FMOV            V0.4S, #1.0 }
  *unsigned int v12 = _Q0;
  memset(&v10[1], 0, 48);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v9 = 0;
  v10[0] = MEMORY[0x263F906B0] + 16;
  long long v7 = 0u;
  long long v8 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar(&v6, (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)v10);
  sub_20B0B0150();
}

void sub_20B0AFFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if ((a29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8(v32 - 176);
  _Unwind_Resume(a1);
}

void sub_20B0B0150()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
}

void sub_20B0B0354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_20B06A6E8((uint64_t)&a29);
  sub_20B06A6E8(v29 - 96);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B0B03D4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  float v4 = (_DWORD *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_20B0B0824(a2, v4);
      uint64_t v5 = a2 + 1;
      uint64_t v6 = (_DWORD *)(a1 + 20);
LABEL_7:
      return sub_20B0B0870(v5, v6);
    }
    uint64_t v9 = a1 + 24;
    uint64_t v10 = v4;
LABEL_15:
    return (_DWORD *)MEMORY[0x270FA4CB8](v10, v9);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_20B0B0824(a2, (_DWORD *)(v7 + 16));
      uint64_t v5 = a2 + 1;
      uint64_t v6 = (_DWORD *)(v7 + 20);
      goto LABEL_7;
    }
    uint64_t v9 = a1 + 24;
    uint64_t v10 = (_DWORD *)(v7 + 16);
    goto LABEL_15;
  }
  *(void *)a2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();

  return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
}

uint64_t sub_20B0B04EC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return sub_20B06A424(a1);
}

void *sub_20B0B052C(void *a1)
{
  uint64_t v2 = a1[4];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[3];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)(a1 + 2));
  uint64_t v4 = a1[1];
  if (v4) {
    sub_20B06A5E0(v4);
  }
  return a1;
}

void sub_20B0B05A0()
{
  uint64_t v2 = 0;
  long long v0 = 0u;
  long long v1 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
}

void sub_20B0B07A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_20B06A6E8((uint64_t)&a29);
  sub_20B06A6E8(v29 - 96);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B0B0824(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()+ 8), 1u, memory_order_relaxed);
  }
  return a1;
}

_DWORD *sub_20B0B0870(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL()) {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
  }
  return a1;
}

uint64_t sub_20B0B08B0(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B0B0948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B0B0964(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    int v61 = "usdGeom/primvar.h";
    float v62 = "_ComputeFlattenedHelper";
    v63[0] = 862;
    v63[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = pxrInternal__aapl__pxr"
             "Reserved__::GfVec3f]";
    char v64 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  unint64_t v10 = *a2 * (int)v7;
  LODWORD(v62) = 0;
  int v61 = 0;
  __p[0] = &v61;
  sub_20B0A7728(a4, v10, (uint64_t **)__p);
  int v61 = 0;
  float v62 = 0;
  v63[0] = 0;
  if (*a2)
  {
    int v54 = a5;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (int)v7;
    }
    uint64_t v53 = v14;
    uint64_t v15 = 12 * (int)v7;
    uint64_t v16 = 1;
    uint64_t v51 = v15;
    uint64_t v52 = a2;
    do
    {
      int v17 = *(_DWORD *)(a2[4] + 4 * v13);
      if (v17 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v17))
      {
        int64_t v18 = v62;
        if ((unint64_t)v62 >= v63[0])
        {
          unint64_t v20 = v61;
          uint64_t v21 = (v62 - v61) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            sub_20B05D0BC();
          }
          uint64_t v23 = v63[0] - (void)v61;
          if ((uint64_t)(v63[0] - (void)v61) >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v22;
          }
          if (v11)
          {
            unsigned int v24 = (char *)sub_20B0602EC((uint64_t)v63, v11);
            unint64_t v20 = v61;
            int64_t v18 = v62;
          }
          else
          {
            unsigned int v24 = 0;
          }
          float32x4_t v33 = &v24[8 * v21];
          *(void *)float32x4_t v33 = v13;
          uint64_t v19 = v33 + 8;
          while (v18 != v20)
          {
            uint64_t v34 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v33 - 1) = v34;
            v33 -= 8;
          }
          int v61 = v33;
          float v62 = v19;
          v63[0] = &v24[8 * v11];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(void *)float v62 = v13;
          uint64_t v19 = v18 + 8;
        }
        uint64_t v16 = 0;
        float v62 = v19;
      }
      else if (v7)
      {
        uint64_t v25 = v16;
        uint64_t v26 = v7;
        uint64_t v27 = 12 * v17 * (int)v7;
        uint64_t v28 = v12;
        uint64_t v29 = v53;
        do
        {
          uint64_t v30 = a1[4];
          sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4);
          uint64_t v31 = a4[4] + v28;
          uint64_t v32 = *(void *)(v30 + v27);
          *(_DWORD *)(v31 + 8) = *(_DWORD *)(v30 + v27 + 8);
          *(void *)uint64_t v31 = v32;
          v28 += 12;
          v27 += 12;
          --v29;
        }
        while (v29);
        uint64_t v7 = v26;
        uint64_t v16 = v25;
        uint64_t v15 = v51;
        a2 = v52;
      }
      ++v13;
      v12 += v15;
    }
    while (v13 < *a2);
    uint64_t v35 = v61;
    if (v54 && v61 != v62)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, (v62 - v61) >> 3, *a1, v7);
      if (SHIBYTE(v54->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v54->__r_.__value_.__r.__words[2] = v60;
      uint64_t v35 = v61;
      unint64_t v37 = (v62 - v61) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = *(void *)&v61[v38];
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf(v57, (pxrInternal__aapl__pxrReserved__ *)"index %i", v36, v42);
            unsigned int v44 = (void **)v57[0];
            BOOL v45 = v58 < 0;
            float v46 = (void **)v57;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v55, (pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v36, (v41 * v7), (v7 - 1 + v42));
            unsigned int v44 = (void **)v55[0];
            BOOL v45 = v56 < 0;
            float v46 = v55;
          }
          if (v45) {
            float v46 = v44;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v41, v40, v46);
          if (v60 >= 0) {
            int v47 = __p;
          }
          else {
            int v47 = (void **)__p[0];
          }
          if (v60 >= 0) {
            std::string::size_type v48 = HIBYTE(v60);
          }
          else {
            std::string::size_type v48 = (std::string::size_type)__p[1];
          }
          std::string::append(v54, (const std::string::value_type *)v47, v48);
          if (SHIBYTE(v60) < 0) {
            operator delete(__p[0]);
          }
          if (v7 == 1)
          {
            if (v58 < 0)
            {
              float v49 = (void *)v57[0];
LABEL_58:
              operator delete(v49);
            }
          }
          else if (v56 < 0)
          {
            float v49 = v55[0];
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            uint64_t v35 = v61;
            break;
          }
        }
      }
    }
    if (v35)
    {
      float v62 = v35;
      operator delete(v35);
    }
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  return v16 & 1;
}

void sub_20B0B0D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  unint64_t v37 = *(void **)(v35 - 128);
  if (v37)
  {
    *(void *)(v35 - 120) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0B0DC8(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B0B0E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B0B0E7C(void *a1, unint64_t *a2, uint64_t a3, unint64_t *a4, std::string *a5)
{
  uint64_t v7 = a3;
  if ((int)a3 <= 0)
  {
    std::string __p = "usdGeom/primvar.h";
    int v61 = "_ComputeFlattenedHelper";
    v62[0] = 862;
    v62[1] = "static BOOL pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::_ComputeFlattenedHelper(const VtArray<ScalarT"
             "ype> &, const VtIntArray &, int, VtArray<ScalarType> *, std::string *) [ScalarType = float]";
    char v63 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  unint64_t v10 = *a2 * (int)v7;
  LODWORD(v58[0]) = 0;
  std::string __p = v58;
  sub_20B0B12DC(a4, v10, (_DWORD **)&__p);
  std::string __p = 0;
  int v61 = 0;
  v62[0] = 0;
  if (*a2)
  {
    uint64_t v53 = a5;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    if ((unint64_t)(int)v7 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (int)v7;
    }
    uint64_t v52 = v14;
    uint64_t v15 = 4 * (int)v7;
    uint64_t v16 = 1;
    uint64_t v51 = a2;
    do
    {
      int v17 = *(_DWORD *)(a2[4] + 4 * v13);
      if (v17 < 0 || *a1 < (unint64_t)((int)v7 + (int)v7 * v17))
      {
        int64_t v18 = v61;
        if ((unint64_t)v61 >= v62[0])
        {
          unint64_t v20 = (char *)__p;
          uint64_t v21 = (v61 - (unsigned char *)__p) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            sub_20B05D0BC();
          }
          uint64_t v23 = v62[0] - (void)__p;
          if ((uint64_t)(v62[0] - (void)__p) >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v22;
          }
          if (v11)
          {
            unsigned int v24 = (char *)sub_20B0602EC((uint64_t)v62, v11);
            unint64_t v20 = (char *)__p;
            int64_t v18 = v61;
          }
          else
          {
            unsigned int v24 = 0;
          }
          float32x4_t v33 = &v24[8 * v21];
          *(void *)float32x4_t v33 = v13;
          uint64_t v19 = v33 + 8;
          while (v18 != v20)
          {
            uint64_t v34 = *((void *)v18 - 1);
            v18 -= 8;
            *((void *)v33 - 1) = v34;
            v33 -= 8;
          }
          std::string __p = v33;
          int v61 = v19;
          v62[0] = &v24[8 * v11];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *(void *)int v61 = v13;
          uint64_t v19 = v18 + 8;
        }
        uint64_t v16 = 0;
        int v61 = v19;
      }
      else if (v7)
      {
        uint64_t v25 = v15;
        uint64_t v26 = v7;
        uint64_t v27 = v16;
        uint64_t v28 = v26;
        uint64_t v29 = 4 * v17 * (int)v26;
        uint64_t v30 = v12;
        uint64_t v31 = v52;
        do
        {
          int v32 = *(_DWORD *)(a1[4] + v29);
          sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4);
          *(_DWORD *)(a4[4] + v30) = v32;
          v30 += 4;
          v29 += 4;
          --v31;
        }
        while (v31);
        uint64_t v16 = v27;
        uint64_t v7 = v28;
        uint64_t v15 = v25;
        a2 = v51;
      }
      ++v13;
      v12 += v15;
    }
    while (v13 < *a2);
    uint64_t v35 = (char *)__p;
    if (v53 && __p != v61)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v58, (pxrInternal__aapl__pxrReserved__ *)"Found %ld invalid indices into authored array of size %ld with element size of %i:", (const char *)v11, (v61 - (unsigned char *)__p) >> 3, *a1, v7);
      if (SHIBYTE(v53->__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53->__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = *(_OWORD *)v58;
      uint64_t v35 = (char *)__p;
      v53->__r_.__value_.__r.__words[2] = v59;
      unint64_t v37 = (v61 - v35) >> 3;
      if (v37 >= 5) {
        unint64_t v37 = 5;
      }
      if (v37)
      {
        uint64_t v38 = 0;
        uint64_t v39 = 8 * v37;
        while (1)
        {
          uint64_t v40 = *(void *)((char *)__p + v38);
          uint64_t v41 = *(unsigned int *)(a2[4] + 4 * v40);
          uint64_t v42 = (v41 * v7);
          if (v7 == 1)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf(v56, (pxrInternal__aapl__pxrReserved__ *)"index %i", v36, v42);
            unsigned int v44 = (void **)v56[0];
            BOOL v45 = v57 < 0;
            float v46 = (void **)v56;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v54, (pxrInternal__aapl__pxrReserved__ *)"indices [%i,...,%i]", v36, (v41 * v7), (v7 - 1 + v42));
            unsigned int v44 = (void **)v54[0];
            BOOL v45 = v55 < 0;
            float v46 = v54;
          }
          if (v45) {
            float v46 = v44;
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v58, (pxrInternal__aapl__pxrReserved__ *)"\n\t Invalid index %i at position %ld refers to %s of the authored array, which is out of bounds", v43, v41, v40, v46);
          if (v59 >= 0) {
            int v47 = v58;
          }
          else {
            int v47 = (void **)v58[0];
          }
          if (v59 >= 0) {
            std::string::size_type v48 = HIBYTE(v59);
          }
          else {
            std::string::size_type v48 = (std::string::size_type)v58[1];
          }
          std::string::append(v53, (const std::string::value_type *)v47, v48);
          if (SHIBYTE(v59) < 0) {
            operator delete(v58[0]);
          }
          if (v7 == 1)
          {
            if (v57 < 0)
            {
              float v49 = (void *)v56[0];
LABEL_58:
              operator delete(v49);
            }
          }
          else if (v55 < 0)
          {
            float v49 = v54[0];
            goto LABEL_58;
          }
          v38 += 8;
          if (v39 == v38)
          {
            uint64_t v35 = (char *)__p;
            break;
          }
        }
      }
    }
    if (v35)
    {
      int v61 = v35;
      operator delete(v35);
    }
  }
  else
  {
    LOBYTE(v16) = 1;
  }
  return v16 & 1;
}

void sub_20B0B1264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0B12DC(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              unint64_t v10 = sub_20B0B14A4((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      unint64_t v20 = sub_20B0B14A4((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        unint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)unint64_t v22 = v23;
          unint64_t v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        unsigned int v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      uint64_t v16 = sub_20B0B14A4((uint64_t)a1, a2);
      uint64_t v14 = v16;
      uint64_t v17 = 0;
      int64_t v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B0B14A4(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B0B1530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B0B1548(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique() [T = float]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      long long v6 = sub_20B0B14A4((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        unint64_t v9 = v6;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t sub_20B0B15E0(void *a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (uint64_t *)a1[17];
  if (v4)
  {
    char v8 = 0;
    do
    {
      int v9 = *((_DWORD *)v4 + 4);
      uint64_t v10 = *(void *)(*a1 + 200);
      float v38 = 0.0;
      if (sub_20B199F34((float32x4_t *)(v10 + 224 * v9), &v38, *a2, a2[1]))
      {
        if (a2[3].f32[1] <= v38 && a2[3].f32[2] > v38 && v38 < *(float *)a3)
        {
          sub_20B05FB44(a4, (int *)v4 + 4, (_DWORD *)v4 + 4);
          float32x4_t v13 = vmlaq_n_f32(*a2, a2[1], v38);
          *(float *)a3 = v38;
          *(float32x4_t *)(a3 + 80) = v13;
          *(__n64 *)v14.i8 = sub_20B199C5C((float32x4_t *)(v10 + 224 * v9), v13);
          uint64_t v15 = v10 + 224 * v9;
          float32x2_t v16 = (float32x2_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1).u64[0];
          float32x2_t v17 = (float32x2_t)vdupq_laneq_s32(v14, 2).u64[0];
          *(float32x2_t *)(a3 + 96) = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)(v15 + 176), *(float *)v14.i32), v16, *(float32x2_t *)(v15 + 184)), v17, *(float32x2_t *)(v15 + 192));
          *(float32x2_t *)(a3 + 104) = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)(v15 + 200), *(float *)v14.i32), v16, *(float32x2_t *)(v15 + 208)), v17, *(float32x2_t *)(v15 + 216));
          float32x4_t v18 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(v15 + 64), *(float *)v14.i32), *(float32x4_t *)(v15 + 80), *(float32x2_t *)v14.i8, 1), *(float32x4_t *)(v15 + 96), (float32x4_t)v14, 2);
          int32x4_t v19 = (int32x4_t)vmulq_f32(v18, v18);
          v19.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v19.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2)).u32[0];
          float32x2_t v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
          int32x4_t v21 = (int32x4_t)vmulq_n_f32(v18, vmul_f32(vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)), v20).f32[0]);
          *(int32x4_t *)(a3 + 16) = v21;
          *(void *)(a3 + 112) = *(void *)(v15 + 8);
          float32x4_t v22 = vsubq_f32(*(float32x4_t *)(v15 + 32), *(float32x4_t *)(v15 + 16));
          int32x4_t v23 = (int32x4_t)vmulq_f32(v22, v22);
          v23.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2)).u32[0];
          float32x2_t v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
          float32x2_t v25 = vmul_f32(vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)), v24);
          float32x4_t v26 = vmlaq_n_f32((float32x4_t)xmmword_20B1E6140, v22, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
          int32x4_t v27 = (int32x4_t)vmulq_f32(v26, v26);
          v27.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2)).u32[0];
          *(float32x2_t *)v23.i8 = vrsqrte_f32((float32x2_t)v27.u32[0]);
          int32x4_t v28 = (int32x4_t)vmulq_n_f32(v26, vmul_f32(vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)), *(float32x2_t *)v23.i8).f32[0]);
          float32x4_t v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL);
          int32x4_t v30 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v28, v29)), (float32x4_t)v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL));
          int32x4_t v31 = (int32x4_t)vmulq_f32((float32x4_t)v30, (float32x4_t)v30);
          v31.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v31, 2), *(float32x2_t *)v31.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v31.i8, 1)).u32[0];
          *(float32x2_t *)v23.i8 = vrsqrte_f32((float32x2_t)v31.u32[0]);
          int32x4_t v32 = (int32x4_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v30, v30), (int8x16_t)v30, 0xCuLL), vmul_f32(vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(*(float32x2_t *)v23.i8, *(float32x2_t *)v23.i8)), *(float32x2_t *)v23.i8).f32[0]);
          int32x4_t v33 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v32, v29)), (float32x4_t)v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v32, v32), (int8x16_t)v32, 0xCuLL));
          float32x4_t v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
          int32x4_t v35 = (int32x4_t)vmulq_f32((float32x4_t)v33, (float32x4_t)v33);
          v35.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), *(float32x2_t *)v35.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1)).u32[0];
          *(float32x2_t *)v33.i8 = vrsqrte_f32((float32x2_t)v35.u32[0]);
          *(float32x4_t *)(a3 + 32) = vmulq_n_f32(v34, vmul_f32(vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v33.i8)), *(float32x2_t *)v33.i8).f32[0]);
          *(int32x4_t *)(a3 + 48) = v32;
          char v8 = 1;
        }
      }
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_20B0B1870(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8)
{
  uint64_t result = 0;
  if (a8.f32[0] >= 0.0)
  {
    unsigned __int32 v10 = a8.u32[1];
    if (a8.f32[1] >= 0.0)
    {
      unsigned __int32 v11 = a8.u32[2];
      if (a8.f32[2] >= 0.0)
      {
        if (*(unsigned char *)(a1 + 112))
        {
          float32x4_t v17 = a7;
          v18.i64[0] = 0x3F0000003F000000;
          v18.i64[1] = 0x3F0000003F000000;
          int8x16_t v19 = (int8x16_t)vmulq_f32(vaddq_f32(a8, a7), v18);
          unsigned int v20 = 4 * (*(float *)v19.i32 < a7.f32[2]);
          if (*(float *)&v19.i32[1] < a7.f32[2]) {
            v20 |= 2u;
          }
          int v21 = 4 * (*(float *)v19.i32 < a7.f32[1]);
          if (*(float *)&v19.i32[2] < a7.f32[1]) {
            v21 |= 1u;
          }
          v22.i32[1] = v19.i32[1];
          v22.i32[0] = vextq_s8(v19, v19, 8uLL).u32[0];
          if (a7.f32[1] < a7.f32[2]) {
            unsigned int v20 = v21;
          }
          int32x2_t v23 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)a7.f32, 0), v22);
          if (v23.i8[4]) {
            int v24 = 2;
          }
          else {
            int v24 = 0;
          }
          if (v23.i8[0]) {
            v24 |= 1u;
          }
          if (a7.f32[0] < a7.f32[1] && a7.f32[0] < a7.f32[2]) {
            unsigned int v20 = v24;
          }
          __n128 v26 = (__n128)v19;
          v26.n128_u32[2] = a7.u32[2];
          __n128 v70 = v26;
          float32x4_t v27 = a8;
          v27.i32[2] = v19.i32[2];
          __n128 v69 = (__n128)v27;
          uint64_t v28 = a1 + 48;
          float32x4_t v84 = (void *)(a1 + 48 + 8 * (a5 ^ 6));
          BOOL v29 = a8.f32[0] < a8.f32[1];
          BOOL v30 = a8.f32[0] < a8.f32[2];
          if (a8.f32[0] >= *(float *)&v19.i32[1]) {
            BOOL v30 = 0;
          }
          if (a8.f32[0] >= *(float *)&v19.i32[2]) {
            BOOL v29 = 0;
          }
          BOOL v77 = v29;
          BOOL v78 = v30;
          BOOL v31 = a8.f32[0] < *(float *)&v19.i32[2] && a8.f32[0] < *(float *)&v19.i32[1];
          BOOL v76 = v31;
          BOOL v32 = *(float *)v19.i32 < a8.f32[2] && *(float *)v19.i32 < a8.f32[1];
          BOOL v75 = v32;
          BOOL v33 = *(float *)v19.i32 < *(float *)&v19.i32[2];
          if (a8.f32[1] >= *(float *)&v19.i32[2]) {
            int v34 = 7;
          }
          else {
            int v34 = 8;
          }
          unsigned int v74 = v34;
          __n128 v35 = (__n128)v19;
          v35.n128_u32[1] = a7.u32[1];
          v35.n128_u32[2] = v19.u32[2];
          __n128 v68 = v35;
          float32x4_t v36 = a8;
          v36.i32[1] = v19.i32[1];
          float32x4_t v83 = (void *)(v28 + 8 * (a5 ^ 5));
          v36.i32[2] = a8.i32[2];
          __n128 v67 = (__n128)v36;
          if (a8.f32[1] >= *(float *)&v19.i32[2]) {
            int v37 = 3;
          }
          else {
            int v37 = 8;
          }
          if (*(float *)v19.i32 < a8.f32[1] && v33) {
            int v38 = 6;
          }
          else {
            int v38 = v37;
          }
          BOOL v39 = *(float *)v19.i32 < *(float *)&v19.i32[1];
          if (*(float *)&v19.i32[1] >= a8.f32[2]) {
            int v40 = 8;
          }
          else {
            int v40 = 7;
          }
          unsigned int v73 = v40;
          float32x4_t v41 = a7;
          v41.i32[0] = v19.i32[0];
          __n128 v66 = (__n128)v41;
          __n128 v42 = (__n128)v19;
          v42.n128_u32[0] = a8.i32[0];
          __n128 v65 = v42;
          float32x4_t v82 = (void *)(v28 + 8 * (a5 ^ 4));
          if (*(float *)&v19.i32[1] >= a8.f32[2]) {
            int v43 = 8;
          }
          else {
            int v43 = 3;
          }
          if (v39 && *(float *)v19.i32 < a8.f32[2]) {
            int v44 = 5;
          }
          else {
            int v44 = v43;
          }
          BOOL v45 = *(float *)&v19.i32[1] < *(float *)&v19.i32[2];
          if (*(float *)&v19.i32[1] >= *(float *)&v19.i32[2]) {
            int v46 = 5;
          }
          else {
            int v46 = 6;
          }
          unsigned int v72 = v46;
          __n128 v47 = (__n128)v19;
          v47.n128_u32[0] = a7.i32[0];
          __n128 v64 = v47;
          __n128 v48 = (__n128)v19;
          v48.n128_u32[1] = v10;
          __n128 v49 = v48;
          v49.n128_u32[2] = v11;
          __n128 v62 = v49;
          double v81 = (void *)(v28 + 8 * (a5 ^ 3));
          float32x4_t v50 = a7;
          v50.i32[1] = v19.i32[1];
          v48.n128_u32[2] = v19.u32[2];
          __n128 v63 = v48;
          float32x4_t v80 = (void *)(v28 + 8 * (a5 ^ 2));
          v50.i32[2] = a7.i32[2];
          v17.i32[2] = v19.i32[2];
          __n128 v60 = (__n128)v17;
          __n128 v61 = (__n128)v50;
          __n128 v71 = (__n128)v19;
          v19.i32[2] = v11;
          __n128 v59 = (__n128)v19;
          float v79 = (void *)(v28 + 8 * (a5 ^ 1));
          uint64_t v51 = (void *)(v28 + 8 * a5);
          if (v45) {
            int v52 = 2;
          }
          else {
            int v52 = 1;
          }
          if (v39 && v33) {
            int v53 = 4;
          }
          else {
            int v53 = v52;
          }
          while (2)
          {
            switch(v20)
            {
              case 1u:
                unsigned int v20 = v44;
                if (!*v79) {
                  goto LABEL_84;
                }
                char v55 = sub_20B0B1870(*v79, a2, a3, a4, a5, a6, v60, v59);
                unsigned int v20 = v44;
                if ((v55 & 1) == 0) {
                  goto LABEL_84;
                }
                return 1;
              case 2u:
                unsigned int v20 = v38;
                if (*v80)
                {
                  char v56 = sub_20B0B1870(*v80, a2, a3, a4, a5, a6, v61, v63);
                  unsigned int v20 = v38;
                  if (v56) {
                    return 1;
                  }
                }
                goto LABEL_84;
              case 3u:
                if (*v81 && (sub_20B0B1870(*v81, a2, a3, a4, a5, a6, v64, v62) & 1) != 0) {
                  return 1;
                }
                if (!v75) {
                  goto LABEL_85;
                }
                unsigned int v20 = 7;
LABEL_84:
                if (v20 < 8) {
                  continue;
                }
LABEL_85:
                uint64_t result = 0;
                break;
              case 4u:
                if (*v82 && (sub_20B0B1870(*v82, a2, a3, a4, a5, a6, v66, v65) & 1) != 0) {
                  return 1;
                }
                unsigned int v20 = v72;
                if (v76) {
                  goto LABEL_85;
                }
                goto LABEL_84;
              case 5u:
                if (*v83 && (sub_20B0B1870(*v83, a2, a3, a4, a5, a6, v68, v67) & 1) != 0) {
                  return 1;
                }
                unsigned int v20 = v73;
                if (v78) {
                  goto LABEL_85;
                }
                goto LABEL_84;
              case 6u:
                if (*v84 && (sub_20B0B1870(*v84, a2, a3, a4, a5, a6, v70, v69) & 1) != 0) {
                  return 1;
                }
                unsigned int v20 = v74;
                if (!v77) {
                  goto LABEL_84;
                }
                goto LABEL_85;
              case 7u:
                uint64_t v57 = *(void *)(a1 + 8 * (a5 ^ 7) + 48);
                if (v57 && (sub_20B0B1870(v57, a2, a3, a4, a5, a6, v71, (__n128)a8) & 1) != 0) {
                  return 1;
                }
                goto LABEL_85;
              default:
                unsigned int v20 = v53;
                if (!*v51) {
                  goto LABEL_84;
                }
                char v54 = sub_20B0B1870(*v51, a2, a3, a4, a5, a6, (__n128)a7, v71);
                unsigned int v20 = v53;
                if ((v54 & 1) == 0) {
                  goto LABEL_84;
                }
                return 1;
            }
            break;
          }
        }
        else
        {
          return sub_20B0B15E0((void *)a1, a3, a4, a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20B0B1DA0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, float32x4_t a8)
{
  float32x4_t v22 = 0u;
  long long v23 = 0u;
  float32x4_t v8 = *(float32x4_t *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  float32x4_t v20 = *(float32x4_t *)a2;
  long long v21 = v9;
  *(void *)((char *)&v23 + 4) = *(void *)(a2 + 52);
  uint64_t v10 = *a1;
  float32x4_t v11 = *(float32x4_t *)(v10 + 16);
  float v12 = *((float *)&v9 + 1);
  if (*(float *)&v9 >= 0.0)
  {
    uint64_t v13 = 0;
    a8.i32[0] = v9;
  }
  else
  {
    a8.f32[0] = -*(float *)&v9;
    v20.f32[0] = -v8.f32[0];
    *(float *)&long long v21 = -*(float *)&v9;
    uint64_t v13 = 4;
  }
  LODWORD(v9) = DWORD2(v9);
  if (*((float *)&v9 + 1) < 0.0)
  {
    float v12 = -*((float *)&v9 + 1);
    v20.f32[1] = -v8.f32[1];
    *((float *)&v21 + 1) = -*((float *)&v9 + 1);
    uint64_t v13 = v13 | 2;
  }
  float32x4_t v14 = *(float32x4_t *)(v10 + 32);
  if (*((float *)&v9 + 2) < 0.0)
  {
    *(float *)&long long v9 = -*((float *)&v9 + 2);
    v20.f32[2] = -v8.f32[2];
    *((float *)&v21 + 2) = -*((float *)&v9 + 2);
    uint64_t v13 = v13 | 1;
  }
  a8.f32[0] = 1.0 / a8.f32[0];
  float32_t v15 = 1.0 / *(float *)&v9;
  float32x4_t v16 = a8;
  v16.f32[1] = 1.0 / v12;
  v16.f32[2] = v15;
  float32x4_t v22 = v16;
  LOBYTE(v23) = a8.f32[0] < 0.0;
  BYTE1(v23) = (float)(1.0 / v12) < 0.0;
  BYTE2(v23) = v15 < 0.0;
  float32x4_t v17 = vmulq_f32(vsubq_f32(v14, v20), v16);
  float32x4_t v18 = vmulq_f32(vsubq_f32(v11, v20), v16);
  if (fmaxf(v17.f32[0], fmaxf(v17.f32[1], v17.f32[2])) >= fminf(v18.f32[0], fminf(v18.f32[1], v18.f32[2]))) {
    return 0;
  }
  else {
    return sub_20B0B1870(v10, (uint64_t)&v20, (float32x4_t *)a2, a3, v13, a4, v17, v18);
  }
}

id sub_20B0B1EEC(uint64_t *a1, int a2, uint64_t a3, int a4)
{
  v184[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if (!*a1)
  {
    float32_t v15 = 0;
    goto LABEL_89;
  }
  float v181 = 0;
  id v182 = 0;
  uint64_t v183 = 0;
  unint64_t v178 = 0;
  BOOL v179 = 0;
  long long v9 = (void **)(a1 + 1);
  uint64_t v10 = (_DWORD *)a1[1];
  uint64_t v180 = 0;
  std::string __p = 0;
  float v176 = 0;
  uint64_t v177 = 0;
  a1[2] = (uint64_t)v10;
  __n128 v11 = *(__n128 *)(v4 + 32);
  if ((a3 & 1) == 0)
  {
    __n128 v172 = *(__n128 *)(v4 + 32);
    sub_20B0B2A60(0, (uint64_t)&v181, (char **)&v178, v11, *(__n128 *)(v4 + 16));
    unint64_t v16 = a1[3];
    float32x4_t v17 = (char *)a1[2];
    if ((unint64_t)v17 < v16)
    {
      *(_DWORD *)float32x4_t v17 = 1;
      float32x4_t v14 = v17 + 4;
LABEL_32:
      __n128 v11 = v172;
      goto LABEL_33;
    }
    float32x4_t v27 = (char *)*v9;
    uint64_t v28 = (v17 - (unsigned char *)*v9) >> 2;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 62) {
      sub_20B05D0BC();
    }
    uint64_t v30 = v16 - (void)v27;
    if (v30 >> 1 > v29) {
      unint64_t v29 = v30 >> 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    if (v31)
    {
      BOOL v32 = (char *)sub_20B05D1AC((uint64_t)(a1 + 3), v31);
      float32x4_t v27 = (char *)a1[1];
      float32x4_t v17 = (char *)a1[2];
    }
    else
    {
      BOOL v32 = 0;
    }
    BOOL v33 = &v32[4 * v28];
    int v34 = &v32[4 * v31];
    *(_DWORD *)BOOL v33 = 1;
    float32x4_t v14 = v33 + 4;
    while (v17 != v27)
    {
      int v35 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *((_DWORD *)v33 - 1) = v35;
      v33 -= 4;
    }
    a1[1] = (uint64_t)v33;
    a1[2] = (uint64_t)v14;
    a1[3] = (uint64_t)v34;
    if (!v27) {
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v27);
    goto LABEL_32;
  }
  uint64_t v12 = (uint64_t)(a1 + 3);
  unint64_t v13 = a1[3];
  if ((unint64_t)v10 >= v13)
  {
    __n128 v172 = v11;
    uint64_t v18 = v13 - (void)v10;
    uint64_t v19 = v18 >> 1;
    if ((unint64_t)(v18 >> 1) <= 1) {
      uint64_t v19 = 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    long long v21 = sub_20B05D1AC(v12, v20);
    float32x4_t v22 = (char *)a1[1];
    uint64_t v23 = a1[2];
    float32x2_t v25 = &v21[v24];
    *long long v21 = 0;
    float32x4_t v14 = v21 + 1;
    while ((char *)v23 != v22)
    {
      int v26 = *(_DWORD *)(v23 - 4);
      v23 -= 4;
      *--long long v21 = v26;
    }
    a1[1] = (uint64_t)v21;
    a1[2] = (uint64_t)v14;
    a1[3] = (uint64_t)v25;
    if (!v22) {
      goto LABEL_32;
    }
    float32x4_t v27 = v22;
    goto LABEL_31;
  }
  *uint64_t v10 = 0;
  float32x4_t v14 = v10 + 1;
LABEL_33:
  a1[2] = (uint64_t)v14;
  sub_20B0567B4((uint64_t)&__p, *a1, a2 - 1, a3 | a4, a3, vsubq_f32(*(float32x4_t *)(*a1 + 16), *(float32x4_t *)(*a1 + 32)), (int8x16_t)v11);
  int v37 = (__n128 **)__p;
  float32x4_t v36 = v176;
  if (v176 != __p)
  {
    sub_20B0BC768((uint64_t)__p, v176, 126 - 2 * __clz(((char *)v176 - (unsigned char *)__p) >> 3), 1);
    __n128 v173 = (*v37)[1];
    unint64_t v38 = a1[3];
    int v40 = (_DWORD *)a1[1];
    BOOL v39 = (_DWORD *)a1[2];
    if ((unint64_t)v39 >= v38)
    {
      uint64_t v42 = v39 - v40;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 62) {
        sub_20B05D0BC();
      }
      uint64_t v44 = v38 - (void)v40;
      if (v44 >> 1 > v43) {
        unint64_t v43 = v44 >> 1;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45)
      {
        int v46 = (char *)sub_20B05D1AC((uint64_t)(a1 + 3), v45);
        __n128 v47 = (_DWORD *)a1[1];
        BOOL v39 = (_DWORD *)a1[2];
      }
      else
      {
        int v46 = 0;
        __n128 v47 = (_DWORD *)a1[1];
      }
      __n128 v48 = &v46[4 * v42];
      __n128 v49 = &v46[4 * v45];
      *(_DWORD *)__n128 v48 = *v40;
      float32x4_t v41 = v48 + 4;
      while (v39 != v47)
      {
        int v50 = *--v39;
        *((_DWORD *)v48 - 1) = v50;
        v48 -= 4;
      }
      a1[1] = (uint64_t)v48;
      a1[2] = (uint64_t)v41;
      a1[3] = (uint64_t)v49;
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *BOOL v39 = *v40;
      float32x4_t v41 = v39 + 1;
    }
    a1[2] = (uint64_t)v41;
    float v51 = v173.n128_f32[1];
    int v52 = 1;
    do
    {
      int v53 = *v37;
      sub_20B0B2A60(a3, (uint64_t)&v181, (char **)&v178, (*v37)[1], (*v37)[2]);
      float v54 = v53[1].n128_f32[1];
      char v55 = *v9;
      if (v51 < v54)
      {
        uint64_t v57 = (_DWORD *)a1[2];
        unint64_t v56 = a1[3];
        if ((unint64_t)v57 >= v56)
        {
          uint64_t v59 = ((char *)v57 - v55) >> 2;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62) {
            sub_20B05D0BC();
          }
          uint64_t v61 = v56 - (void)v55;
          if (v61 >> 1 > v60) {
            unint64_t v60 = v61 >> 1;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62)
          {
            __n128 v63 = (char *)sub_20B05D1AC((uint64_t)(a1 + 3), v62);
            __n128 v64 = (_DWORD *)a1[1];
            uint64_t v57 = (_DWORD *)a1[2];
          }
          else
          {
            __n128 v63 = 0;
            __n128 v64 = *v9;
          }
          __n128 v65 = &v63[4 * v59];
          *(_DWORD *)__n128 v65 = *(_DWORD *)&v55[4 * v52];
          char v58 = v65 + 4;
          while (v57 != v64)
          {
            int v66 = *--v57;
            *((_DWORD *)v65 - 1) = v66;
            v65 -= 4;
          }
          a1[1] = (uint64_t)v65;
          a1[2] = (uint64_t)v58;
          a1[3] = (uint64_t)&v63[4 * v62];
          if (v64) {
            operator delete(v64);
          }
        }
        else
        {
          *uint64_t v57 = *(_DWORD *)&v55[4 * v52];
          char v58 = v57 + 1;
        }
        ++v52;
        a1[2] = (uint64_t)v58;
        char v55 = (unsigned char *)a1[1];
        float v51 = v54;
      }
      ++*(_DWORD *)&v55[4 * v52];
      ++v37;
    }
    while (v37 != (__n128 **)v36);
  }
  __n128 v67 = objc_alloc_init(MDLMeshBufferDataAllocator);
  __n128 v69 = v178;
  __n128 v68 = v179;
  int v170 = v67;
  id v70 = objc_alloc(MEMORY[0x263EFF8F8]);
  uint64_t v168 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v70, v71, (uint64_t)v178, v68 - v69, 0);
  float v174 = objc_msgSend_newBufferWithData_type_(v67, v72, (uint64_t)v168, 2);
  if (objc_msgSend_conformsToProtocol_(v174, v73, (uint64_t)&unk_26BF5ED88))
  {
    id v75 = v174;
    BOOL v77 = objc_msgSend_stringByAppendingString_(@"mesh", v76, @"-Indices");
    objc_msgSend_setName_(v75, v78, (uint64_t)v77);
  }
  id v171 = objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x263EFF8F8], v74, (uint64_t)v181, v182 - (unsigned char *)v181, 0);
  float v79 = objc_opt_new();
  unint64_t v169 = v79;
  float32x4_t v82 = objc_msgSend_attributes(v79, v80, v81);
  float32x4_t v84 = objc_msgSend_objectAtIndexedSubscript_(v82, v83, 0);
  objc_msgSend_setName_(v84, v85, @"position");

  float32x4_t v88 = objc_msgSend_attributes(v79, v86, v87);
  float32x4_t v90 = objc_msgSend_objectAtIndexedSubscript_(v88, v89, 0);
  objc_msgSend_setFormat_(v90, v91, 786435);

  long long v94 = objc_msgSend_attributes(v79, v92, v93);
  float32x4_t v96 = objc_msgSend_objectAtIndexedSubscript_(v94, v95, 0);
  objc_msgSend_setOffset_(v96, v97, 0);

  uint64_t v100 = objc_msgSend_attributes(v79, v98, v99);
  uint64_t v102 = objc_msgSend_objectAtIndexedSubscript_(v100, v101, 0);
  objc_msgSend_setBufferIndex_(v102, v103, 0);

  if (a3)
  {
    int v106 = objc_msgSend_attributes(v79, v104, v105);
    int v108 = objc_msgSend_objectAtIndexedSubscript_(v106, v107, 1);
    objc_msgSend_setName_(v108, v109, @"normal");

    unint64_t v112 = objc_msgSend_attributes(v79, v110, v111);
    uint64_t v114 = objc_msgSend_objectAtIndexedSubscript_(v112, v113, 1);
    objc_msgSend_setFormat_(v114, v115, 786435);

    int v118 = objc_msgSend_attributes(v79, v116, v117);
    int v120 = objc_msgSend_objectAtIndexedSubscript_(v118, v119, 1);
    objc_msgSend_setOffset_(v120, v121, 12);

    unint64_t v124 = objc_msgSend_attributes(v79, v122, v123);
    unint64_t v126 = objc_msgSend_objectAtIndexedSubscript_(v124, v125, 1);
    objc_msgSend_setBufferIndex_(v126, v127, 0);

    unint64_t v128 = 6;
  }
  else
  {
    unint64_t v128 = 3;
  }
  int v129 = objc_msgSend_layouts(v79, v104, v105);
  int v131 = objc_msgSend_objectAtIndexedSubscript_(v129, v130, 0);
  objc_msgSend_setStride_(v131, v132, 4 * v128);

  uint64_t v134 = objc_msgSend_newBufferWithData_type_(v170, v133, (uint64_t)v171, 1);
  if (objc_msgSend_conformsToProtocol_(v134, v135, (uint64_t)&unk_26BF5ED88))
  {
    id v137 = v134;
    int v139 = objc_msgSend_stringWithFormat_(NSString, v138, @"%@-%@", @"mesh", @"position");
    objc_msgSend_setName_(v137, v140, (uint64_t)v139);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_2676910A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_2676910A8))
  {
    float v163 = [MDLMaterial alloc];
    unsigned int v165 = objc_msgSend_stringByAppendingString_(@"mesh", v164, @"-Material");
    float v166 = objc_opt_new();
    qword_2676910A0 = objc_msgSend_initWithName_scatteringFunction_(v163, v167, (uint64_t)v165, v166);

    __cxa_guard_release(&qword_2676910A8);
  }
  uint64_t v141 = objc_msgSend_propertyWithSemantic_((void *)qword_2676910A0, v136, 2);
  objc_msgSend_setFloatValue_(v141, v142, v143, 0.0);
  int v145 = objc_msgSend_propertyWithSemantic_((void *)qword_2676910A0, v144, 6);

  LODWORD(v146) = 1.0;
  objc_msgSend_setFloatValue_(v145, v147, v148, v146);
  int v149 = [MDLSubmesh alloc];
  uint64_t v151 = (v179 - (unsigned char *)v178) >> 2;
  if (a3) {
    uint64_t v152 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v149, v150, (uint64_t)v174, v151, 32, 2, qword_2676910A0);
  }
  else {
    uint64_t v152 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v149, v150, (uint64_t)v174, v151, 32, 1, qword_2676910A0);
  }
  unint64_t v153 = (void *)v152;
  float v155 = v181;
  float v154 = v182;
  int v156 = [MDLMesh alloc];
  v184[0] = v153;
  uint64_t v158 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v157, (uint64_t)v184, 1);
  float32_t v15 = objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v156, v159, (uint64_t)v134, ((v154 - v155) >> 2) / v128, v169, v158);

  if (a3)
  {
    LODWORD(v161) = 1045220557;
    objc_msgSend_addNormalsWithAttributeNamed_creaseThreshold_(v15, v160, @"normal", v161);
  }

  if (__p) {
    operator delete(__p);
  }
  if (v178)
  {
    BOOL v179 = v178;
    operator delete(v178);
  }
  if (v181)
  {
    id v182 = v181;
    operator delete(v181);
  }
LABEL_89:

  return v15;
}

void sub_20B0B2838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  __cxa_guard_abort(&qword_2676910A8);
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void sub_20B0B2A60(int a1, uint64_t a2, char **a3, __n128 a4, __n128 a5)
{
  __n128 v2149 = a4;
  long long v9 = (unsigned __int32 **)(a2 + 8);
  float32x4_t v8 = *(unsigned __int32 **)(a2 + 8);
  uint64_t v10 = *(unsigned __int32 **)a2;
  unint64_t v11 = ((uint64_t)v8 - *(void *)a2) >> 2;
  unint64_t v13 = (char **)(a2 + 16);
  uint64_t v12 = *(char **)(a2 + 16);
  if (!a1)
  {
    if (v8 >= (unsigned __int32 *)v12)
    {
      unint64_t v21 = v11 + 1;
      if ((v11 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v22 = v12 - (char *)v10;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        uint64_t v24 = (char *)sub_20B05D1AC((uint64_t)v13, v23);
        a4.n128_u64[0] = v2149.n128_u64[0];
        float32x2_t v25 = v24;
        uint64_t v10 = *(unsigned __int32 **)a2;
        float32x4_t v8 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        float32x2_t v25 = 0;
      }
      float32x4_t v36 = &v25[4 * v11];
      uint64_t v12 = &v25[4 * v23];
      *(_DWORD *)float32x4_t v36 = a4.n128_u32[0];
      float32_t v15 = (unsigned __int32 *)(v36 + 4);
      while (v8 != v10)
      {
        int v37 = *--v8;
        *((_DWORD *)v36 - 1) = v37;
        v36 -= 4;
      }
      *(void *)a2 = v36;
      *(void *)(a2 + 8) = v15;
      *(void *)(a2 + 16) = v12;
      if (v10)
      {
        operator delete(v10);
        a4.n128_u32[1] = v2149.n128_u32[1];
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *float32x4_t v8 = a4.n128_u32[0];
      float32_t v15 = v8 + 1;
    }
    *long long v9 = v15;
    unsigned __int32 v38 = a4.n128_u32[1];
    if (v15 >= (unsigned __int32 *)v12)
    {
      int v40 = *(unsigned __int32 **)a2;
      uint64_t v41 = ((uint64_t)v15 - *(void *)a2) >> 2;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v43 = v12 - (char *)v40;
      if (v43 >> 1 > v42) {
        unint64_t v42 = v43 >> 1;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        unint64_t v45 = (char *)sub_20B05D1AC((uint64_t)v13, v44);
        int v40 = *(unsigned __int32 **)a2;
        float32_t v15 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        unint64_t v45 = 0;
      }
      unint64_t v56 = (unsigned __int32 *)&v45[4 * v41];
      uint64_t v12 = &v45[4 * v44];
      *unint64_t v56 = v38;
      BOOL v39 = v56 + 1;
      while (v15 != v40)
      {
        unsigned __int32 v57 = *--v15;
        *--unint64_t v56 = v57;
      }
      *(void *)a2 = v56;
      *(void *)(a2 + 8) = v39;
      *(void *)(a2 + 16) = v12;
      if (v40)
      {
        operator delete(v40);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *float32_t v15 = a4.n128_u32[1];
      BOOL v39 = v15 + 1;
    }
    *long long v9 = v39;
    if (v39 >= (unsigned __int32 *)v12)
    {
      uint64_t v59 = *(unsigned __int32 **)a2;
      uint64_t v60 = ((uint64_t)v39 - *(void *)a2) >> 2;
      unint64_t v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v62 = v12 - (char *)v59;
      if (v62 >> 1 > v61) {
        unint64_t v61 = v62 >> 1;
      }
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v63 = v61;
      }
      if (v63)
      {
        __n128 v64 = (char *)sub_20B05D1AC((uint64_t)v13, v63);
        uint64_t v59 = *(unsigned __int32 **)a2;
        BOOL v39 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        __n128 v64 = 0;
      }
      unsigned int v74 = &v64[4 * v60];
      uint64_t v12 = &v64[4 * v63];
      *(_DWORD *)unsigned int v74 = v2149.n128_u32[2];
      char v58 = (unsigned __int32 *)(v74 + 4);
      while (v39 != v59)
      {
        int v75 = *--v39;
        *((_DWORD *)v74 - 1) = v75;
        v74 -= 4;
      }
      *(void *)a2 = v74;
      *(void *)(a2 + 8) = v58;
      *(void *)(a2 + 16) = v12;
      if (v59)
      {
        operator delete(v59);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *BOOL v39 = v2149.n128_u32[2];
      char v58 = v39 + 1;
    }
    *long long v9 = v58;
    if (v58 >= (unsigned __int32 *)v12)
    {
      BOOL v77 = *(unsigned __int32 **)a2;
      uint64_t v78 = ((uint64_t)v58 - *(void *)a2) >> 2;
      unint64_t v79 = v78 + 1;
      if ((unint64_t)(v78 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v80 = v12 - (char *)v77;
      if (v80 >> 1 > v79) {
        unint64_t v79 = v80 >> 1;
      }
      if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v81 = v79;
      }
      if (v81)
      {
        float32x4_t v82 = (char *)sub_20B05D1AC((uint64_t)v13, v81);
        BOOL v77 = *(unsigned __int32 **)a2;
        char v58 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        float32x4_t v82 = 0;
      }
      float v92 = &v82[4 * v78];
      uint64_t v12 = &v82[4 * v81];
      *(_DWORD *)float v92 = a5.n128_u32[0];
      BOOL v76 = (unsigned __int32 *)(v92 + 4);
      while (v58 != v77)
      {
        int v93 = *--v58;
        *((_DWORD *)v92 - 1) = v93;
        v92 -= 4;
      }
      *(void *)a2 = v92;
      *(void *)(a2 + 8) = v76;
      *(void *)(a2 + 16) = v12;
      if (v77)
      {
        operator delete(v77);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *char v58 = a5.n128_u32[0];
      BOOL v76 = v58 + 1;
    }
    *long long v9 = v76;
    if (v76 >= (unsigned __int32 *)v12)
    {
      uint64_t v95 = *(unsigned __int32 **)a2;
      uint64_t v96 = ((uint64_t)v76 - *(void *)a2) >> 2;
      unint64_t v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v98 = v12 - (char *)v95;
      if (v98 >> 1 > v97) {
        unint64_t v97 = v98 >> 1;
      }
      if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v99 = v97;
      }
      if (v99)
      {
        uint64_t v100 = (char *)sub_20B05D1AC((uint64_t)v13, v99);
        uint64_t v95 = *(unsigned __int32 **)a2;
        BOOL v76 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        uint64_t v100 = 0;
      }
      int v110 = (unsigned __int32 *)&v100[4 * v96];
      uint64_t v12 = &v100[4 * v99];
      unsigned __int32 *v110 = v38;
      long long v94 = v110 + 1;
      while (v76 != v95)
      {
        unsigned __int32 v111 = *--v76;
        *--int v110 = v111;
      }
      *(void *)a2 = v110;
      *(void *)(a2 + 8) = v94;
      *(void *)(a2 + 16) = v12;
      if (v95)
      {
        operator delete(v95);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v76 = v38;
      long long v94 = v76 + 1;
    }
    *long long v9 = v94;
    if (v94 >= (unsigned __int32 *)v12)
    {
      uint64_t v113 = *(unsigned __int32 **)a2;
      uint64_t v114 = ((uint64_t)v94 - *(void *)a2) >> 2;
      unint64_t v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v116 = v12 - (char *)v113;
      if (v116 >> 1 > v115) {
        unint64_t v115 = v116 >> 1;
      }
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v117 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v117 = v115;
      }
      if (v117)
      {
        int v118 = (char *)sub_20B05D1AC((uint64_t)v13, v117);
        uint64_t v113 = *(unsigned __int32 **)a2;
        long long v94 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        int v118 = 0;
      }
      unint64_t v128 = &v118[4 * v114];
      uint64_t v12 = &v118[4 * v117];
      *(_DWORD *)unint64_t v128 = v2149.n128_u32[2];
      unint64_t v112 = (unsigned __int32 *)(v128 + 4);
      while (v94 != v113)
      {
        int v129 = *--v94;
        *((_DWORD *)v128 - 1) = v129;
        v128 -= 4;
      }
      *(void *)a2 = v128;
      *(void *)(a2 + 8) = v112;
      *(void *)(a2 + 16) = v12;
      if (v113)
      {
        operator delete(v113);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v94 = v2149.n128_u32[2];
      unint64_t v112 = v94 + 1;
    }
    *long long v9 = v112;
    if (v112 >= (unsigned __int32 *)v12)
    {
      int v131 = *(unsigned __int32 **)a2;
      uint64_t v132 = ((uint64_t)v112 - *(void *)a2) >> 2;
      unint64_t v133 = v132 + 1;
      if ((unint64_t)(v132 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v134 = v12 - (char *)v131;
      if (v134 >> 1 > v133) {
        unint64_t v133 = v134 >> 1;
      }
      if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v135 = v133;
      }
      if (v135)
      {
        float32x4_t v136 = (char *)sub_20B05D1AC((uint64_t)v13, v135);
        int v131 = *(unsigned __int32 **)a2;
        unint64_t v112 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        float32x4_t v136 = 0;
      }
      double v146 = &v136[4 * v132];
      uint64_t v12 = &v136[4 * v135];
      *(_DWORD *)double v146 = v2149.n128_u32[0];
      uint64_t v130 = (unsigned __int32 *)(v146 + 4);
      while (v112 != v131)
      {
        int v147 = *--v112;
        *((_DWORD *)v146 - 1) = v147;
        v146 -= 4;
      }
      *(void *)a2 = v146;
      *(void *)(a2 + 8) = v130;
      *(void *)(a2 + 16) = v12;
      if (v131)
      {
        operator delete(v131);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v112 = v2149.n128_u32[0];
      uint64_t v130 = v112 + 1;
    }
    *long long v9 = v130;
    if (v130 >= (unsigned __int32 *)v12)
    {
      int v149 = *(unsigned __int32 **)a2;
      uint64_t v150 = ((uint64_t)v130 - *(void *)a2) >> 2;
      unint64_t v151 = v150 + 1;
      if ((unint64_t)(v150 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v152 = v12 - (char *)v149;
      if (v152 >> 1 > v151) {
        unint64_t v151 = v152 >> 1;
      }
      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v153 = v151;
      }
      if (v153)
      {
        float v154 = (char *)sub_20B05D1AC((uint64_t)v13, v153);
        int v149 = *(unsigned __int32 **)a2;
        uint64_t v130 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        float v154 = 0;
      }
      int v164 = &v154[4 * v150];
      uint64_t v12 = &v154[4 * v153];
      *(_DWORD *)int v164 = a5.n128_u32[1];
      uint64_t v148 = (unsigned __int32 *)(v164 + 4);
      while (v130 != v149)
      {
        int v165 = *--v130;
        *((_DWORD *)v164 - 1) = v165;
        v164 -= 4;
      }
      *(void *)a2 = v164;
      *(void *)(a2 + 8) = v148;
      *(void *)(a2 + 16) = v12;
      if (v149)
      {
        operator delete(v149);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v130 = a5.n128_u32[1];
      uint64_t v148 = v130 + 1;
    }
    *long long v9 = v148;
    if (v148 >= (unsigned __int32 *)v12)
    {
      uint64_t v167 = *(unsigned __int32 **)a2;
      uint64_t v168 = ((uint64_t)v148 - *(void *)a2) >> 2;
      unint64_t v169 = v168 + 1;
      if ((unint64_t)(v168 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v170 = v12 - (char *)v167;
      if (v170 >> 1 > v169) {
        unint64_t v169 = v170 >> 1;
      }
      if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v171 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v171 = v169;
      }
      if (v171)
      {
        __n128 v172 = (char *)sub_20B05D1AC((uint64_t)v13, v171);
        uint64_t v167 = *(unsigned __int32 **)a2;
        uint64_t v148 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        __n128 v172 = 0;
      }
      id v182 = &v172[4 * v168];
      uint64_t v12 = &v172[4 * v171];
      *(_DWORD *)id v182 = v2149.n128_u32[2];
      float v166 = (unsigned __int32 *)(v182 + 4);
      while (v148 != v167)
      {
        int v183 = *--v148;
        *((_DWORD *)v182 - 1) = v183;
        v182 -= 4;
      }
      *(void *)a2 = v182;
      *(void *)(a2 + 8) = v166;
      *(void *)(a2 + 16) = v12;
      if (v167)
      {
        operator delete(v167);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v148 = v2149.n128_u32[2];
      float v166 = v148 + 1;
    }
    *long long v9 = v166;
    if (v166 >= (unsigned __int32 *)v12)
    {
      float v185 = *(unsigned __int32 **)a2;
      uint64_t v186 = ((uint64_t)v166 - *(void *)a2) >> 2;
      unint64_t v187 = v186 + 1;
      if ((unint64_t)(v186 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v188 = v12 - (char *)v185;
      if (v188 >> 1 > v187) {
        unint64_t v187 = v188 >> 1;
      }
      if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v189 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v189 = v187;
      }
      if (v189)
      {
        unsigned int v190 = (char *)sub_20B05D1AC((uint64_t)v13, v189);
        float v185 = *(unsigned __int32 **)a2;
        float v166 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        unsigned int v190 = 0;
      }
      float v200 = &v190[4 * v186];
      uint64_t v12 = &v190[4 * v189];
      *(_DWORD *)float v200 = a5.n128_u32[0];
      BOOL v184 = (unsigned __int32 *)(v200 + 4);
      while (v166 != v185)
      {
        int v201 = *--v166;
        *((_DWORD *)v200 - 1) = v201;
        v200 -= 4;
      }
      *(void *)a2 = v200;
      *(void *)(a2 + 8) = v184;
      *(void *)(a2 + 16) = v12;
      if (v185)
      {
        operator delete(v185);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v166 = a5.n128_u32[0];
      BOOL v184 = v166 + 1;
    }
    *long long v9 = v184;
    if (v184 >= (unsigned __int32 *)v12)
    {
      float v203 = *(unsigned __int32 **)a2;
      uint64_t v204 = ((uint64_t)v184 - *(void *)a2) >> 2;
      unint64_t v205 = v204 + 1;
      if ((unint64_t)(v204 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v206 = v12 - (char *)v203;
      if (v206 >> 1 > v205) {
        unint64_t v205 = v206 >> 1;
      }
      if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v207 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v207 = v205;
      }
      if (v207)
      {
        long long v208 = (char *)sub_20B05D1AC((uint64_t)v13, v207);
        float v203 = *(unsigned __int32 **)a2;
        BOOL v184 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        long long v208 = 0;
      }
      float v218 = &v208[4 * v204];
      uint64_t v12 = &v208[4 * v207];
      *(_DWORD *)float v218 = a5.n128_u32[1];
      float v202 = (unsigned __int32 *)(v218 + 4);
      while (v184 != v203)
      {
        int v219 = *--v184;
        *((_DWORD *)v218 - 1) = v219;
        v218 -= 4;
      }
      *(void *)a2 = v218;
      *(void *)(a2 + 8) = v202;
      *(void *)(a2 + 16) = v12;
      if (v203)
      {
        operator delete(v203);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v184 = a5.n128_u32[1];
      float v202 = v184 + 1;
    }
    *long long v9 = v202;
    if (v202 >= (unsigned __int32 *)v12)
    {
      float v221 = *(unsigned __int32 **)a2;
      uint64_t v222 = ((uint64_t)v202 - *(void *)a2) >> 2;
      unint64_t v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v224 = v12 - (char *)v221;
      if (v224 >> 1 > v223) {
        unint64_t v223 = v224 >> 1;
      }
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v225 = v223;
      }
      if (v225)
      {
        uint64_t v226 = (char *)sub_20B05D1AC((uint64_t)v13, v225);
        float v221 = *(unsigned __int32 **)a2;
        float v202 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        uint64_t v226 = 0;
      }
      uint64_t v236 = &v226[4 * v222];
      uint64_t v12 = &v226[4 * v225];
      *(_DWORD *)uint64_t v236 = v2149.n128_u32[2];
      int8x8_t v220 = (unsigned __int32 *)(v236 + 4);
      while (v202 != v221)
      {
        int v237 = *--v202;
        *((_DWORD *)v236 - 1) = v237;
        v236 -= 4;
      }
      *(void *)a2 = v236;
      *(void *)(a2 + 8) = v220;
      *(void *)(a2 + 16) = v12;
      if (v221)
      {
        operator delete(v221);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v202 = v2149.n128_u32[2];
      int8x8_t v220 = v202 + 1;
    }
    *long long v9 = v220;
    if (v220 >= (unsigned __int32 *)v12)
    {
      float32x4_t v239 = *(unsigned __int32 **)a2;
      uint64_t v240 = ((uint64_t)v220 - *(void *)a2) >> 2;
      unint64_t v241 = v240 + 1;
      if ((unint64_t)(v240 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v242 = v12 - (char *)v239;
      if (v242 >> 1 > v241) {
        unint64_t v241 = v242 >> 1;
      }
      if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v243 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v243 = v241;
      }
      if (v243)
      {
        int v244 = (char *)sub_20B05D1AC((uint64_t)v13, v243);
        float32x4_t v239 = *(unsigned __int32 **)a2;
        int8x8_t v220 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        int v244 = 0;
      }
      long long v254 = &v244[4 * v240];
      uint64_t v12 = &v244[4 * v243];
      *(_DWORD *)long long v254 = v2149.n128_u32[0];
      uint64_t v238 = (unsigned __int32 *)(v254 + 4);
      while (v220 != v239)
      {
        int v255 = *--v220;
        *((_DWORD *)v254 - 1) = v255;
        v254 -= 4;
      }
      *(void *)a2 = v254;
      *(void *)(a2 + 8) = v238;
      *(void *)(a2 + 16) = v12;
      if (v239)
      {
        operator delete(v239);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v220 = v2149.n128_u32[0];
      uint64_t v238 = v220 + 1;
    }
    *long long v9 = v238;
    if (v238 >= (unsigned __int32 *)v12)
    {
      float v257 = *(unsigned __int32 **)a2;
      uint64_t v258 = ((uint64_t)v238 - *(void *)a2) >> 2;
      unint64_t v259 = v258 + 1;
      if ((unint64_t)(v258 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v260 = v12 - (char *)v257;
      if (v260 >> 1 > v259) {
        unint64_t v259 = v260 >> 1;
      }
      if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v261 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v261 = v259;
      }
      if (v261)
      {
        uint64_t v262 = (char *)sub_20B05D1AC((uint64_t)v13, v261);
        float v257 = *(unsigned __int32 **)a2;
        uint64_t v238 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        uint64_t v262 = 0;
      }
      uint64_t v272 = (unsigned __int32 *)&v262[4 * v258];
      uint64_t v12 = &v262[4 * v261];
      unsigned __int32 *v272 = v38;
      float v256 = v272 + 1;
      while (v238 != v257)
      {
        unsigned __int32 v273 = *--v238;
        *--uint64_t v272 = v273;
      }
      *(void *)a2 = v272;
      *(void *)(a2 + 8) = v256;
      *(void *)(a2 + 16) = v12;
      if (v257)
      {
        operator delete(v257);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *uint64_t v238 = v38;
      float v256 = v238 + 1;
    }
    *long long v9 = v256;
    if (v256 >= (unsigned __int32 *)v12)
    {
      unint64_t v275 = *(unsigned __int32 **)a2;
      uint64_t v276 = ((uint64_t)v256 - *(void *)a2) >> 2;
      unint64_t v277 = v276 + 1;
      if ((unint64_t)(v276 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v278 = v12 - (char *)v275;
      if (v278 >> 1 > v277) {
        unint64_t v277 = v278 >> 1;
      }
      if ((unint64_t)v278 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v279 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v279 = v277;
      }
      if (v279)
      {
        long long v280 = (char *)sub_20B05D1AC((uint64_t)v13, v279);
        unint64_t v275 = *(unsigned __int32 **)a2;
        float v256 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        long long v280 = 0;
      }
      unint64_t v290 = &v280[4 * v276];
      uint64_t v12 = &v280[4 * v279];
      *(_DWORD *)unint64_t v290 = a5.n128_u32[2];
      int v274 = (unsigned __int32 *)(v290 + 4);
      while (v256 != v275)
      {
        int v291 = *--v256;
        *((_DWORD *)v290 - 1) = v291;
        v290 -= 4;
      }
      *(void *)a2 = v290;
      *(void *)(a2 + 8) = v274;
      *(void *)(a2 + 16) = v12;
      if (v275)
      {
        operator delete(v275);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *float v256 = a5.n128_u32[2];
      int v274 = v256 + 1;
    }
    *long long v9 = v274;
    if (v274 >= (unsigned __int32 *)v12)
    {
      uint64_t v293 = *(unsigned __int32 **)a2;
      uint64_t v294 = ((uint64_t)v274 - *(void *)a2) >> 2;
      unint64_t v295 = v294 + 1;
      if ((unint64_t)(v294 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v296 = v12 - (char *)v293;
      if (v296 >> 1 > v295) {
        unint64_t v295 = v296 >> 1;
      }
      if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v297 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v297 = v295;
      }
      if (v297)
      {
        long long v298 = (char *)sub_20B05D1AC((uint64_t)v13, v297);
        uint64_t v293 = *(unsigned __int32 **)a2;
        int v274 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        long long v298 = 0;
      }
      long long v308 = &v298[4 * v294];
      uint64_t v12 = &v298[4 * v297];
      *(_DWORD *)long long v308 = a5.n128_u32[0];
      unsigned int v292 = (unsigned __int32 *)(v308 + 4);
      while (v274 != v293)
      {
        int v309 = *--v274;
        *((_DWORD *)v308 - 1) = v309;
        v308 -= 4;
      }
      *(void *)a2 = v308;
      *(void *)(a2 + 8) = v292;
      *(void *)(a2 + 16) = v12;
      if (v293)
      {
        operator delete(v293);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *int v274 = a5.n128_u32[0];
      unsigned int v292 = v274 + 1;
    }
    *long long v9 = v292;
    if (v292 >= (unsigned __int32 *)v12)
    {
      int v311 = *(unsigned __int32 **)a2;
      uint64_t v312 = ((uint64_t)v292 - *(void *)a2) >> 2;
      unint64_t v313 = v312 + 1;
      if ((unint64_t)(v312 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v314 = v12 - (char *)v311;
      if (v314 >> 1 > v313) {
        unint64_t v313 = v314 >> 1;
      }
      if ((unint64_t)v314 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v315 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v315 = v313;
      }
      if (v315)
      {
        int v316 = (char *)sub_20B05D1AC((uint64_t)v13, v315);
        int v311 = *(unsigned __int32 **)a2;
        unsigned int v292 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        int v316 = 0;
      }
      long long v326 = (unsigned __int32 *)&v316[4 * v312];
      uint64_t v12 = &v316[4 * v315];
      *long long v326 = v38;
      long long v310 = v326 + 1;
      while (v292 != v311)
      {
        unsigned __int32 v327 = *--v292;
        *--long long v326 = v327;
      }
      *(void *)a2 = v326;
      *(void *)(a2 + 8) = v310;
      *(void *)(a2 + 16) = v12;
      if (v311)
      {
        operator delete(v311);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *unsigned int v292 = v38;
      long long v310 = v292 + 1;
    }
    *long long v9 = v310;
    unsigned __int32 v328 = v2149.n128_u32[0];
    if (v310 >= (unsigned __int32 *)v12)
    {
      unint64_t v330 = *(unsigned __int32 **)a2;
      uint64_t v331 = ((uint64_t)v310 - *(void *)a2) >> 2;
      unint64_t v332 = v331 + 1;
      if ((unint64_t)(v331 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v333 = v12 - (char *)v330;
      if (v333 >> 1 > v332) {
        unint64_t v332 = v333 >> 1;
      }
      if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v334 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v334 = v332;
      }
      if (v334)
      {
        uint64_t v335 = (char *)sub_20B05D1AC((uint64_t)v13, v334);
        unint64_t v330 = *(unsigned __int32 **)a2;
        long long v310 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        uint64_t v335 = 0;
      }
      unint64_t v345 = &v335[4 * v331];
      uint64_t v12 = &v335[4 * v334];
      *(_DWORD *)unint64_t v345 = a5.n128_u32[2];
      uint64_t v329 = (unsigned __int32 *)(v345 + 4);
      while (v310 != v330)
      {
        int v346 = *--v310;
        *((_DWORD *)v345 - 1) = v346;
        v345 -= 4;
      }
      *(void *)a2 = v345;
      *(void *)(a2 + 8) = v329;
      *(void *)(a2 + 16) = v12;
      if (v330)
      {
        operator delete(v330);
        uint64_t v12 = *v13;
      }
      unsigned __int32 v328 = v2149.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v310 = a5.n128_u32[2];
      uint64_t v329 = v310 + 1;
    }
    *long long v9 = v329;
    if (v329 >= (unsigned __int32 *)v12)
    {
      float v348 = *(unsigned __int32 **)a2;
      uint64_t v349 = ((uint64_t)v329 - *(void *)a2) >> 2;
      unint64_t v350 = v349 + 1;
      if ((unint64_t)(v349 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v351 = v12 - (char *)v348;
      if (v351 >> 1 > v350) {
        unint64_t v350 = v351 >> 1;
      }
      if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v352 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v352 = v350;
      }
      if (v352)
      {
        unint64_t v353 = (char *)sub_20B05D1AC((uint64_t)v13, v352);
        unsigned __int32 v328 = v2149.n128_u32[0];
        long long v354 = v353;
        float v348 = *(unsigned __int32 **)a2;
        uint64_t v329 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        long long v354 = 0;
      }
      int32x4_t v364 = (unsigned __int32 *)&v354[4 * v349];
      uint64_t v12 = &v354[4 * v352];
      *int32x4_t v364 = v328;
      float v347 = v364 + 1;
      while (v329 != v348)
      {
        unsigned __int32 v365 = *--v329;
        *--int32x4_t v364 = v365;
      }
      *(void *)a2 = v364;
      *(void *)(a2 + 8) = v347;
      *(void *)(a2 + 16) = v12;
      if (v348)
      {
        operator delete(v348);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v329 = v328;
      float v347 = v329 + 1;
    }
    *long long v9 = v347;
    if (v347 >= (unsigned __int32 *)v12)
    {
      float v367 = *(unsigned __int32 **)a2;
      uint64_t v368 = ((uint64_t)v347 - *(void *)a2) >> 2;
      unint64_t v369 = v368 + 1;
      if ((unint64_t)(v368 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v370 = v12 - (char *)v367;
      if (v370 >> 1 > v369) {
        unint64_t v369 = v370 >> 1;
      }
      if ((unint64_t)v370 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v371 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v371 = v369;
      }
      if (v371)
      {
        float32x4_t v372 = (char *)sub_20B05D1AC((uint64_t)v13, v371);
        float v367 = *(unsigned __int32 **)a2;
        float v347 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        float32x4_t v372 = 0;
      }
      uint64_t v382 = &v372[4 * v368];
      uint64_t v12 = &v372[4 * v371];
      *(_DWORD *)uint64_t v382 = a5.n128_u32[1];
      float v366 = (unsigned __int32 *)(v382 + 4);
      while (v347 != v367)
      {
        int v383 = *--v347;
        *((_DWORD *)v382 - 1) = v383;
        v382 -= 4;
      }
      *(void *)a2 = v382;
      *(void *)(a2 + 8) = v366;
      *(void *)(a2 + 16) = v12;
      if (v367)
      {
        operator delete(v367);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      *float v347 = a5.n128_u32[1];
      float v366 = v347 + 1;
    }
    *long long v9 = v366;
    if (v366 >= (unsigned __int32 *)v12)
    {
      __int32 v385 = *(unsigned __int32 **)a2;
      uint64_t v386 = ((uint64_t)v366 - *(void *)a2) >> 2;
      unint64_t v387 = v386 + 1;
      if ((unint64_t)(v386 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v388 = v12 - (char *)v385;
      if (v388 >> 1 > v387) {
        unint64_t v387 = v388 >> 1;
      }
      if ((unint64_t)v388 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v389 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v389 = v387;
      }
      if (v389)
      {
        uint64_t v390 = (char *)sub_20B05D1AC((uint64_t)v13, v389);
        __int32 v385 = *(unsigned __int32 **)a2;
        float v366 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        uint64_t v390 = 0;
      }
      __int32 v400 = &v390[4 * v386];
      uint64_t v12 = &v390[4 * v389];
      *(_DWORD *)__int32 v400 = a5.n128_u32[2];
      v384 = (unsigned __int32 *)(v400 + 4);
      while (v366 != v385)
      {
        int v401 = *--v366;
        *((_DWORD *)v400 - 1) = v401;
        v400 -= 4;
      }
      *(void *)a2 = v400;
      *(void *)(a2 + 8) = v384;
      *(void *)(a2 + 16) = v12;
      if (v385)
      {
        operator delete(v385);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v366 = a5.n128_u32[2];
      v384 = v366 + 1;
    }
    *long long v9 = v384;
    if (v384 >= (unsigned __int32 *)v12)
    {
      unint64_t v403 = *(unsigned __int32 **)a2;
      uint64_t v404 = ((uint64_t)v384 - *(void *)a2) >> 2;
      unint64_t v405 = v404 + 1;
      if ((unint64_t)(v404 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v406 = v12 - (char *)v403;
      if (v406 >> 1 > v405) {
        unint64_t v405 = v406 >> 1;
      }
      if ((unint64_t)v406 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v407 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v407 = v405;
      }
      if (v407)
      {
        __int32 v408 = (char *)sub_20B05D1AC((uint64_t)v13, v407);
        unint64_t v403 = *(unsigned __int32 **)a2;
        v384 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        __int32 v408 = 0;
      }
      uint64_t v418 = &v408[4 * v404];
      uint64_t v12 = &v408[4 * v407];
      *(_DWORD *)uint64_t v418 = a5.n128_u32[0];
      uint64_t v402 = (unsigned __int32 *)(v418 + 4);
      while (v384 != v403)
      {
        int v419 = *--v384;
        *((_DWORD *)v418 - 1) = v419;
        v418 -= 4;
      }
      *(void *)a2 = v418;
      *(void *)(a2 + 8) = v402;
      *(void *)(a2 + 16) = v12;
      if (v403)
      {
        operator delete(v403);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v384 = a5.n128_u32[0];
      uint64_t v402 = v384 + 1;
    }
    *long long v9 = v402;
    if (v402 >= (unsigned __int32 *)v12)
    {
      v421 = *(unsigned __int32 **)a2;
      uint64_t v422 = ((uint64_t)v402 - *(void *)a2) >> 2;
      unint64_t v423 = v422 + 1;
      if ((unint64_t)(v422 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v424 = v12 - (char *)v421;
      if (v424 >> 1 > v423) {
        unint64_t v423 = v424 >> 1;
      }
      if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v425 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v425 = v423;
      }
      if (v425)
      {
        unint64_t v426 = (char *)sub_20B05D1AC((uint64_t)v13, v425);
        v421 = *(unsigned __int32 **)a2;
        uint64_t v402 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        unint64_t v426 = 0;
      }
      float32x4_t v436 = &v426[4 * v422];
      uint64_t v12 = &v426[4 * v425];
      *(_DWORD *)float32x4_t v436 = a5.n128_u32[1];
      uint64_t v420 = (unsigned __int32 *)(v436 + 4);
      while (v402 != v421)
      {
        int v437 = *--v402;
        *((_DWORD *)v436 - 1) = v437;
        v436 -= 4;
      }
      *(void *)a2 = v436;
      *(void *)(a2 + 8) = v420;
      *(void *)(a2 + 16) = v12;
      if (v421)
      {
        operator delete(v421);
        uint64_t v12 = *v13;
      }
    }
    else
    {
      unsigned __int32 *v402 = a5.n128_u32[1];
      uint64_t v420 = v402 + 1;
    }
    *long long v9 = v420;
    if (v420 >= (unsigned __int32 *)v12)
    {
      int32x4_t v439 = *(unsigned __int32 **)a2;
      uint64_t v440 = ((uint64_t)v420 - *(void *)a2) >> 2;
      unint64_t v441 = v440 + 1;
      if ((unint64_t)(v440 + 1) >> 62) {
        goto LABEL_3660;
      }
      uint64_t v442 = v12 - (char *)v439;
      if (v442 >> 1 > v441) {
        unint64_t v441 = v442 >> 1;
      }
      if ((unint64_t)v442 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v443 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v443 = v441;
      }
      if (v443)
      {
        int32x4_t v444 = (char *)sub_20B05D1AC((uint64_t)v13, v443);
        int32x4_t v439 = *(unsigned __int32 **)a2;
        uint64_t v420 = *(unsigned __int32 **)(a2 + 8);
      }
      else
      {
        int32x4_t v444 = 0;
      }
      v459 = &v444[4 * v440];
      v460 = &v444[4 * v443];
      *(_DWORD *)v459 = a5.n128_u32[2];
      unint64_t v438 = (unsigned __int32 *)(v459 + 4);
      while (v420 != v439)
      {
        int v461 = *--v420;
        *((_DWORD *)v459 - 1) = v461;
        v459 -= 4;
      }
      *(void *)a2 = v459;
      *(void *)(a2 + 8) = v438;
      *(void *)(a2 + 16) = v460;
      if (v439) {
        operator delete(v439);
      }
    }
    else
    {
      unsigned __int32 *v420 = a5.n128_u32[2];
      unint64_t v438 = v420 + 1;
    }
    unint64_t v462 = v11 / 3;
    *long long v9 = v438;
    float32x4_t v464 = a3 + 2;
    uint64_t v463 = a3[2];
    v465 = a3[1];
    if (v465 >= v463)
    {
      unint64_t v467 = *a3;
      uint64_t v468 = (v465 - *a3) >> 2;
      unint64_t v469 = v468 + 1;
      if ((unint64_t)(v468 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v470 = v463 - v467;
      if (v470 >> 1 > v469) {
        unint64_t v469 = v470 >> 1;
      }
      if ((unint64_t)v470 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v471 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v471 = v469;
      }
      if (v471)
      {
        unint64_t v472 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v471);
        unint64_t v467 = *a3;
        v465 = a3[1];
      }
      else
      {
        unint64_t v472 = 0;
      }
      v483 = &v472[4 * v468];
      uint64_t v463 = &v472[4 * v471];
      *(_DWORD *)v483 = v462;
      unint64_t v466 = v483 + 4;
      while (v465 != v467)
      {
        int v484 = *((_DWORD *)v465 - 1);
        v465 -= 4;
        *((_DWORD *)v483 - 1) = v484;
        v483 -= 4;
      }
      *a3 = v483;
      a3[1] = v466;
      a3[2] = v463;
      if (v467)
      {
        operator delete(v467);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v465 = v462;
      unint64_t v466 = v465 + 4;
    }
    a3[1] = v466;
    int v485 = v462 + 1;
    if (v466 >= v463)
    {
      long long v487 = *a3;
      uint64_t v488 = (v466 - *a3) >> 2;
      unint64_t v489 = v488 + 1;
      if ((unint64_t)(v488 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v490 = v463 - v487;
      if (v490 >> 1 > v489) {
        unint64_t v489 = v490 >> 1;
      }
      if ((unint64_t)v490 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v491 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v491 = v489;
      }
      if (v491)
      {
        uint64_t v492 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v491);
        long long v487 = *a3;
        unint64_t v466 = a3[1];
      }
      else
      {
        uint64_t v492 = 0;
      }
      uint64_t v503 = &v492[4 * v488];
      uint64_t v463 = &v492[4 * v491];
      *(_DWORD *)uint64_t v503 = v485;
      uint64_t v486 = v503 + 4;
      while (v466 != v487)
      {
        int v504 = *((_DWORD *)v466 - 1);
        v466 -= 4;
        *((_DWORD *)v503 - 1) = v504;
        v503 -= 4;
      }
      *a3 = v503;
      a3[1] = v486;
      a3[2] = v463;
      if (v487)
      {
        operator delete(v487);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v466 = v485;
      uint64_t v486 = v466 + 4;
    }
    a3[1] = v486;
    if (v486 >= v463)
    {
      uint64_t v506 = *a3;
      uint64_t v507 = (v486 - *a3) >> 2;
      unint64_t v508 = v507 + 1;
      if ((unint64_t)(v507 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v509 = v463 - v506;
      if (v509 >> 1 > v508) {
        unint64_t v508 = v509 >> 1;
      }
      if ((unint64_t)v509 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v510 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v510 = v508;
      }
      if (v510)
      {
        unint64_t v511 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v510);
        uint64_t v506 = *a3;
        uint64_t v486 = a3[1];
      }
      else
      {
        unint64_t v511 = 0;
      }
      unint64_t v521 = &v511[4 * v507];
      uint64_t v463 = &v511[4 * v510];
      *(_DWORD *)unint64_t v521 = v462;
      long long v505 = v521 + 4;
      while (v486 != v506)
      {
        int v522 = *((_DWORD *)v486 - 1);
        v486 -= 4;
        *((_DWORD *)v521 - 1) = v522;
        v521 -= 4;
      }
      *a3 = v521;
      a3[1] = v505;
      a3[2] = v463;
      if (v506)
      {
        operator delete(v506);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v486 = v462;
      long long v505 = v486 + 4;
    }
    a3[1] = v505;
    int v523 = v462 + 2;
    if (v505 >= v463)
    {
      v525 = *a3;
      uint64_t v526 = (v505 - *a3) >> 2;
      unint64_t v527 = v526 + 1;
      if ((unint64_t)(v526 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v528 = v463 - v525;
      if (v528 >> 1 > v527) {
        unint64_t v527 = v528 >> 1;
      }
      if ((unint64_t)v528 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v529 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v529 = v527;
      }
      if (v529)
      {
        v530 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v529);
        v525 = *a3;
        long long v505 = a3[1];
      }
      else
      {
        v530 = 0;
      }
      unint64_t v541 = &v530[4 * v526];
      uint64_t v463 = &v530[4 * v529];
      *(_DWORD *)unint64_t v541 = v523;
      unint64_t v524 = v541 + 4;
      while (v505 != v525)
      {
        int v542 = *((_DWORD *)v505 - 1);
        v505 -= 4;
        *((_DWORD *)v541 - 1) = v542;
        v541 -= 4;
      }
      *a3 = v541;
      a3[1] = v524;
      a3[2] = v463;
      if (v525)
      {
        operator delete(v525);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)long long v505 = v523;
      unint64_t v524 = v505 + 4;
    }
    a3[1] = v524;
    if (v524 >= v463)
    {
      long long v544 = *a3;
      uint64_t v545 = (v524 - *a3) >> 2;
      unint64_t v546 = v545 + 1;
      if ((unint64_t)(v545 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v547 = v463 - v544;
      if (v547 >> 1 > v546) {
        unint64_t v546 = v547 >> 1;
      }
      if ((unint64_t)v547 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v548 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v548 = v546;
      }
      if (v548)
      {
        uint64_t v549 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v548);
        long long v544 = *a3;
        unint64_t v524 = a3[1];
      }
      else
      {
        uint64_t v549 = 0;
      }
      uint64_t v560 = &v549[4 * v545];
      uint64_t v463 = &v549[4 * v548];
      *(_DWORD *)uint64_t v560 = v462;
      unint64_t v543 = v560 + 4;
      while (v524 != v544)
      {
        int v561 = *((_DWORD *)v524 - 1);
        v524 -= 4;
        *((_DWORD *)v560 - 1) = v561;
        v560 -= 4;
      }
      *a3 = v560;
      a3[1] = v543;
      a3[2] = v463;
      if (v544)
      {
        operator delete(v544);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v524 = v462;
      unint64_t v543 = v524 + 4;
    }
    a3[1] = v543;
    int v562 = v462 + 4;
    if (v543 >= v463)
    {
      int v564 = *a3;
      uint64_t v565 = (v543 - *a3) >> 2;
      unint64_t v566 = v565 + 1;
      if ((unint64_t)(v565 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v567 = v463 - v564;
      if (v567 >> 1 > v566) {
        unint64_t v566 = v567 >> 1;
      }
      if ((unint64_t)v567 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v568 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v568 = v566;
      }
      if (v568)
      {
        uint64_t v569 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v568);
        int v564 = *a3;
        unint64_t v543 = a3[1];
      }
      else
      {
        uint64_t v569 = 0;
      }
      unint64_t v582 = &v569[4 * v565];
      uint64_t v463 = &v569[4 * v568];
      *(_DWORD *)unint64_t v582 = v562;
      __int32 v563 = v582 + 4;
      while (v543 != v564)
      {
        int v583 = *((_DWORD *)v543 - 1);
        v543 -= 4;
        *((_DWORD *)v582 - 1) = v583;
        v582 -= 4;
      }
      *a3 = v582;
      a3[1] = v563;
      a3[2] = v463;
      if (v564)
      {
        operator delete(v564);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v543 = v562;
      __int32 v563 = v543 + 4;
    }
    a3[1] = v563;
    if (v563 >= v463)
    {
      id v585 = *a3;
      uint64_t v586 = (v563 - *a3) >> 2;
      unint64_t v587 = v586 + 1;
      if ((unint64_t)(v586 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v588 = v463 - v585;
      if (v588 >> 1 > v587) {
        unint64_t v587 = v588 >> 1;
      }
      if ((unint64_t)v588 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v589 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v589 = v587;
      }
      if (v589)
      {
        uint64_t v590 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v589);
        id v585 = *a3;
        __int32 v563 = a3[1];
      }
      else
      {
        uint64_t v590 = 0;
      }
      uint64_t v600 = &v590[4 * v586];
      uint64_t v463 = &v590[4 * v589];
      *(_DWORD *)uint64_t v600 = v485;
      int64_t v584 = v600 + 4;
      while (v563 != v585)
      {
        int v601 = *((_DWORD *)v563 - 1);
        v563 -= 4;
        *((_DWORD *)v600 - 1) = v601;
        v600 -= 4;
      }
      *a3 = v600;
      a3[1] = v584;
      a3[2] = v463;
      if (v585)
      {
        operator delete(v585);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)__int32 v563 = v485;
      int64_t v584 = v563 + 4;
    }
    a3[1] = v584;
    int v602 = v462 + 3;
    if (v584 >= v463)
    {
      uint64_t v604 = *a3;
      uint64_t v605 = (v584 - *a3) >> 2;
      unint64_t v606 = v605 + 1;
      if ((unint64_t)(v605 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v607 = v463 - v604;
      if (v607 >> 1 > v606) {
        unint64_t v606 = v607 >> 1;
      }
      if ((unint64_t)v607 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v608 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v608 = v606;
      }
      if (v608)
      {
        v609 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v608);
        uint64_t v604 = *a3;
        int64_t v584 = a3[1];
      }
      else
      {
        v609 = 0;
      }
      v619 = &v609[4 * v605];
      uint64_t v463 = &v609[4 * v608];
      *(_DWORD *)v619 = v602;
      unint64_t v603 = v619 + 4;
      while (v584 != v604)
      {
        int v620 = *((_DWORD *)v584 - 1);
        v584 -= 4;
        *((_DWORD *)v619 - 1) = v620;
        v619 -= 4;
      }
      *a3 = v619;
      a3[1] = v603;
      a3[2] = v463;
      if (v604)
      {
        operator delete(v604);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)int64_t v584 = v602;
      unint64_t v603 = v584 + 4;
    }
    a3[1] = v603;
    if (v603 >= v463)
    {
      uint64_t v622 = *a3;
      uint64_t v623 = (v603 - *a3) >> 2;
      unint64_t v624 = v623 + 1;
      if ((unint64_t)(v623 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v625 = v463 - v622;
      if (v625 >> 1 > v624) {
        unint64_t v624 = v625 >> 1;
      }
      if ((unint64_t)v625 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v626 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v626 = v624;
      }
      if (v626)
      {
        v627 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v626);
        uint64_t v622 = *a3;
        unint64_t v603 = a3[1];
      }
      else
      {
        v627 = 0;
      }
      v637 = &v627[4 * v623];
      uint64_t v463 = &v627[4 * v626];
      *(_DWORD *)v637 = v485;
      unint64_t v621 = v637 + 4;
      while (v603 != v622)
      {
        int v638 = *((_DWORD *)v603 - 1);
        v603 -= 4;
        *((_DWORD *)v637 - 1) = v638;
        v637 -= 4;
      }
      *a3 = v637;
      a3[1] = v621;
      a3[2] = v463;
      if (v622)
      {
        operator delete(v622);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v603 = v485;
      unint64_t v621 = v603 + 4;
    }
    a3[1] = v621;
    int v639 = v462 + 5;
    if (v621 >= v463)
    {
      uint64_t v641 = *a3;
      uint64_t v642 = (v621 - *a3) >> 2;
      unint64_t v643 = v642 + 1;
      if ((unint64_t)(v642 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v644 = v463 - v641;
      if (v644 >> 1 > v643) {
        unint64_t v643 = v644 >> 1;
      }
      if ((unint64_t)v644 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v645 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v645 = v643;
      }
      if (v645)
      {
        v646 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v645);
        uint64_t v641 = *a3;
        unint64_t v621 = a3[1];
      }
      else
      {
        v646 = 0;
      }
      v656 = &v646[4 * v642];
      uint64_t v463 = &v646[4 * v645];
      *(_DWORD *)v656 = v639;
      uint64_t v640 = v656 + 4;
      while (v621 != v641)
      {
        int v657 = *((_DWORD *)v621 - 1);
        v621 -= 4;
        *((_DWORD *)v656 - 1) = v657;
        v656 -= 4;
      }
      *a3 = v656;
      a3[1] = v640;
      a3[2] = v463;
      if (v641)
      {
        operator delete(v641);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v621 = v639;
      uint64_t v640 = v621 + 4;
    }
    a3[1] = v640;
    if (v640 >= v463)
    {
      unint64_t v659 = *a3;
      uint64_t v660 = (v640 - *a3) >> 2;
      unint64_t v661 = v660 + 1;
      if ((unint64_t)(v660 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v662 = v463 - v659;
      if (v662 >> 1 > v661) {
        unint64_t v661 = v662 >> 1;
      }
      if ((unint64_t)v662 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v663 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v663 = v661;
      }
      if (v663)
      {
        int v664 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v663);
        unint64_t v659 = *a3;
        uint64_t v640 = a3[1];
      }
      else
      {
        int v664 = 0;
      }
      int v674 = &v664[4 * v660];
      uint64_t v463 = &v664[4 * v663];
      *(_DWORD *)int v674 = v523;
      uint64_t v658 = v674 + 4;
      while (v640 != v659)
      {
        int v675 = *((_DWORD *)v640 - 1);
        v640 -= 4;
        *((_DWORD *)v674 - 1) = v675;
        v674 -= 4;
      }
      *a3 = v674;
      a3[1] = v658;
      a3[2] = v463;
      if (v659)
      {
        operator delete(v659);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v640 = v523;
      uint64_t v658 = v640 + 4;
    }
    a3[1] = v658;
    if (v658 >= v463)
    {
      uint64_t v677 = *a3;
      uint64_t v678 = (v658 - *a3) >> 2;
      unint64_t v679 = v678 + 1;
      if ((unint64_t)(v678 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v680 = v463 - v677;
      if (v680 >> 1 > v679) {
        unint64_t v679 = v680 >> 1;
      }
      if ((unint64_t)v680 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v681 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v681 = v679;
      }
      if (v681)
      {
        uint64_t v682 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v681);
        uint64_t v677 = *a3;
        uint64_t v658 = a3[1];
      }
      else
      {
        uint64_t v682 = 0;
      }
      uint64_t v692 = &v682[4 * v678];
      uint64_t v463 = &v682[4 * v681];
      *(_DWORD *)uint64_t v692 = v602;
      uint64_t v676 = v692 + 4;
      while (v658 != v677)
      {
        int v693 = *((_DWORD *)v658 - 1);
        v658 -= 4;
        *((_DWORD *)v692 - 1) = v693;
        v692 -= 4;
      }
      *a3 = v692;
      a3[1] = v676;
      a3[2] = v463;
      if (v677)
      {
        operator delete(v677);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v658 = v602;
      uint64_t v676 = v658 + 4;
    }
    a3[1] = v676;
    if (v676 >= v463)
    {
      uint64_t v695 = *a3;
      uint64_t v696 = (v676 - *a3) >> 2;
      unint64_t v697 = v696 + 1;
      if ((unint64_t)(v696 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v698 = v463 - v695;
      if (v698 >> 1 > v697) {
        unint64_t v697 = v698 >> 1;
      }
      if ((unint64_t)v698 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v699 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v699 = v697;
      }
      if (v699)
      {
        uint64_t v700 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v699);
        uint64_t v695 = *a3;
        uint64_t v676 = a3[1];
      }
      else
      {
        uint64_t v700 = 0;
      }
      float v710 = &v700[4 * v696];
      uint64_t v463 = &v700[4 * v699];
      *(_DWORD *)float v710 = v523;
      uint64_t v694 = v710 + 4;
      while (v676 != v695)
      {
        int v711 = *((_DWORD *)v676 - 1);
        v676 -= 4;
        *((_DWORD *)v710 - 1) = v711;
        v710 -= 4;
      }
      *a3 = v710;
      a3[1] = v694;
      a3[2] = v463;
      if (v695)
      {
        operator delete(v695);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v676 = v523;
      uint64_t v694 = v676 + 4;
    }
    a3[1] = v694;
    int v712 = v462 + 6;
    if (v694 >= v463)
    {
      uint64_t v714 = *a3;
      uint64_t v715 = (v694 - *a3) >> 2;
      unint64_t v716 = v715 + 1;
      if ((unint64_t)(v715 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v717 = v463 - v714;
      if (v717 >> 1 > v716) {
        unint64_t v716 = v717 >> 1;
      }
      if ((unint64_t)v717 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v718 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v718 = v716;
      }
      if (v718)
      {
        unint64_t v719 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v718);
        uint64_t v714 = *a3;
        uint64_t v694 = a3[1];
      }
      else
      {
        unint64_t v719 = 0;
      }
      uint64_t v729 = &v719[4 * v715];
      uint64_t v463 = &v719[4 * v718];
      *(_DWORD *)uint64_t v729 = v712;
      int v713 = v729 + 4;
      while (v694 != v714)
      {
        int v730 = *((_DWORD *)v694 - 1);
        v694 -= 4;
        *((_DWORD *)v729 - 1) = v730;
        v729 -= 4;
      }
      *a3 = v729;
      a3[1] = v713;
      a3[2] = v463;
      if (v714)
      {
        operator delete(v714);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v694 = v712;
      int v713 = v694 + 4;
    }
    a3[1] = v713;
    if (v713 >= v463)
    {
      uint64_t v732 = *a3;
      uint64_t v733 = (v713 - *a3) >> 2;
      unint64_t v734 = v733 + 1;
      if ((unint64_t)(v733 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v735 = v463 - v732;
      if (v735 >> 1 > v734) {
        unint64_t v734 = v735 >> 1;
      }
      if ((unint64_t)v735 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v736 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v736 = v734;
      }
      if (v736)
      {
        uint64_t v737 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v736);
        uint64_t v732 = *a3;
        int v713 = a3[1];
      }
      else
      {
        uint64_t v737 = 0;
      }
      unint64_t v747 = &v737[4 * v733];
      uint64_t v463 = &v737[4 * v736];
      *(_DWORD *)unint64_t v747 = v602;
      int v731 = v747 + 4;
      while (v713 != v732)
      {
        int v748 = *((_DWORD *)v713 - 1);
        v713 -= 4;
        *((_DWORD *)v747 - 1) = v748;
        v747 -= 4;
      }
      *a3 = v747;
      a3[1] = v731;
      a3[2] = v463;
      if (v732)
      {
        operator delete(v732);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)int v713 = v602;
      int v731 = v713 + 4;
    }
    a3[1] = v731;
    int v749 = v462 + 7;
    if (v731 >= v463)
    {
      v751 = *a3;
      uint64_t v752 = (v731 - *a3) >> 2;
      unint64_t v753 = v752 + 1;
      if ((unint64_t)(v752 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v754 = v463 - v751;
      if (v754 >> 1 > v753) {
        unint64_t v753 = v754 >> 1;
      }
      if ((unint64_t)v754 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v755 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v755 = v753;
      }
      if (v755)
      {
        uint64_t v756 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v755);
        v751 = *a3;
        int v731 = a3[1];
      }
      else
      {
        uint64_t v756 = 0;
      }
      uint64_t v766 = &v756[4 * v752];
      uint64_t v463 = &v756[4 * v755];
      *(_DWORD *)uint64_t v766 = v749;
      int v750 = v766 + 4;
      while (v731 != v751)
      {
        int v767 = *((_DWORD *)v731 - 1);
        v731 -= 4;
        *((_DWORD *)v766 - 1) = v767;
        v766 -= 4;
      }
      *a3 = v766;
      a3[1] = v750;
      a3[2] = v463;
      if (v751)
      {
        operator delete(v751);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)int v731 = v749;
      int v750 = v731 + 4;
    }
    a3[1] = v750;
    if (v750 >= v463)
    {
      int v769 = *a3;
      uint64_t v770 = (v750 - *a3) >> 2;
      unint64_t v771 = v770 + 1;
      if ((unint64_t)(v770 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v772 = v463 - v769;
      if (v772 >> 1 > v771) {
        unint64_t v771 = v772 >> 1;
      }
      if ((unint64_t)v772 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v773 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v773 = v771;
      }
      if (v773)
      {
        long long v774 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v773);
        int v769 = *a3;
        int v750 = a3[1];
      }
      else
      {
        long long v774 = 0;
      }
      long long v784 = &v774[4 * v770];
      uint64_t v463 = &v774[4 * v773];
      *(_DWORD *)long long v784 = v562;
      float32x4_t v768 = v784 + 4;
      while (v750 != v769)
      {
        int v785 = *((_DWORD *)v750 - 1);
        v750 -= 4;
        *((_DWORD *)v784 - 1) = v785;
        v784 -= 4;
      }
      *a3 = v784;
      a3[1] = v768;
      a3[2] = v463;
      if (v769)
      {
        operator delete(v769);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)int v750 = v562;
      float32x4_t v768 = v750 + 4;
    }
    a3[1] = v768;
    if (v768 >= v463)
    {
      long long v787 = *a3;
      uint64_t v788 = (v768 - *a3) >> 2;
      unint64_t v789 = v788 + 1;
      if ((unint64_t)(v788 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v790 = v463 - v787;
      if (v790 >> 1 > v789) {
        unint64_t v789 = v790 >> 1;
      }
      if ((unint64_t)v790 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v791 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v791 = v789;
      }
      if (v791)
      {
        uint64_t v792 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v791);
        long long v787 = *a3;
        float32x4_t v768 = a3[1];
      }
      else
      {
        uint64_t v792 = 0;
      }
      unint64_t v802 = &v792[4 * v788];
      uint64_t v463 = &v792[4 * v791];
      *(_DWORD *)unint64_t v802 = v639;
      long long v786 = v802 + 4;
      while (v768 != v787)
      {
        int v803 = *((_DWORD *)v768 - 1);
        v768 -= 4;
        *((_DWORD *)v802 - 1) = v803;
        v802 -= 4;
      }
      *a3 = v802;
      a3[1] = v786;
      a3[2] = v463;
      if (v787)
      {
        operator delete(v787);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)float32x4_t v768 = v639;
      long long v786 = v768 + 4;
    }
    a3[1] = v786;
    if (v786 >= v463)
    {
      long long v805 = *a3;
      uint64_t v806 = (v786 - *a3) >> 2;
      unint64_t v807 = v806 + 1;
      if ((unint64_t)(v806 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v808 = v463 - v805;
      if (v808 >> 1 > v807) {
        unint64_t v807 = v808 >> 1;
      }
      if ((unint64_t)v808 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v809 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v809 = v807;
      }
      if (v809)
      {
        uint64_t v810 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v809);
        long long v805 = *a3;
        long long v786 = a3[1];
      }
      else
      {
        uint64_t v810 = 0;
      }
      long long v820 = &v810[4 * v806];
      uint64_t v463 = &v810[4 * v809];
      *(_DWORD *)long long v820 = v562;
      unint64_t v804 = v820 + 4;
      while (v786 != v805)
      {
        int v821 = *((_DWORD *)v786 - 1);
        v786 -= 4;
        *((_DWORD *)v820 - 1) = v821;
        v820 -= 4;
      }
      *a3 = v820;
      a3[1] = v804;
      a3[2] = v463;
      if (v805)
      {
        operator delete(v805);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)long long v786 = v562;
      unint64_t v804 = v786 + 4;
    }
    a3[1] = v804;
    if (v804 >= v463)
    {
      int v823 = *a3;
      uint64_t v824 = (v804 - *a3) >> 2;
      unint64_t v825 = v824 + 1;
      if ((unint64_t)(v824 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v826 = v463 - v823;
      if (v826 >> 1 > v825) {
        unint64_t v825 = v826 >> 1;
      }
      if ((unint64_t)v826 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v827 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v827 = v825;
      }
      if (v827)
      {
        uint64_t v828 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v827);
        int v823 = *a3;
        unint64_t v804 = a3[1];
      }
      else
      {
        uint64_t v828 = 0;
      }
      unint64_t v838 = &v828[4 * v824];
      uint64_t v463 = &v828[4 * v827];
      *(_DWORD *)unint64_t v838 = v712;
      v822 = v838 + 4;
      while (v804 != v823)
      {
        int v839 = *((_DWORD *)v804 - 1);
        v804 -= 4;
        *((_DWORD *)v838 - 1) = v839;
        v838 -= 4;
      }
      *a3 = v838;
      a3[1] = v822;
      a3[2] = v463;
      if (v823)
      {
        operator delete(v823);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)unint64_t v804 = v712;
      v822 = v804 + 4;
    }
    a3[1] = v822;
    if (v822 >= v463)
    {
      unsigned __int32 v841 = *a3;
      uint64_t v842 = (v822 - *a3) >> 2;
      unint64_t v843 = v842 + 1;
      if ((unint64_t)(v842 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v844 = v463 - v841;
      if (v844 >> 1 > v843) {
        unint64_t v843 = v844 >> 1;
      }
      if ((unint64_t)v844 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v845 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v845 = v843;
      }
      if (v845)
      {
        uint64_t v846 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v845);
        unsigned __int32 v841 = *a3;
        v822 = a3[1];
      }
      else
      {
        uint64_t v846 = 0;
      }
      unint64_t v856 = &v846[4 * v842];
      uint64_t v463 = &v846[4 * v845];
      *(_DWORD *)unint64_t v856 = v639;
      v840 = v856 + 4;
      while (v822 != v841)
      {
        int v857 = *((_DWORD *)v822 - 1);
        v822 -= 4;
        *((_DWORD *)v856 - 1) = v857;
        v856 -= 4;
      }
      *a3 = v856;
      a3[1] = v840;
      a3[2] = v463;
      if (v841)
      {
        operator delete(v841);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v822 = v639;
      v840 = v822 + 4;
    }
    a3[1] = v840;
    if (v840 >= v463)
    {
      int v859 = *a3;
      uint64_t v860 = (v840 - *a3) >> 2;
      unint64_t v861 = v860 + 1;
      if ((unint64_t)(v860 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v862 = v463 - v859;
      if (v862 >> 1 > v861) {
        unint64_t v861 = v862 >> 1;
      }
      if ((unint64_t)v862 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v863 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v863 = v861;
      }
      if (v863)
      {
        uint64_t v864 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v863);
        int v859 = *a3;
        v840 = a3[1];
      }
      else
      {
        uint64_t v864 = 0;
      }
      unint64_t v874 = &v864[4 * v860];
      uint64_t v463 = &v864[4 * v863];
      *(_DWORD *)unint64_t v874 = v749;
      v858 = v874 + 4;
      while (v840 != v859)
      {
        int v875 = *((_DWORD *)v840 - 1);
        v840 -= 4;
        *((_DWORD *)v874 - 1) = v875;
        v874 -= 4;
      }
      *a3 = v874;
      a3[1] = v858;
      a3[2] = v463;
      if (v859)
      {
        operator delete(v859);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v840 = v749;
      v858 = v840 + 4;
    }
    a3[1] = v858;
    if (v858 >= v463)
    {
      int v877 = *a3;
      uint64_t v878 = (v858 - *a3) >> 2;
      unint64_t v879 = v878 + 1;
      if ((unint64_t)(v878 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v880 = v463 - v877;
      if (v880 >> 1 > v879) {
        unint64_t v879 = v880 >> 1;
      }
      if ((unint64_t)v880 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v881 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v881 = v879;
      }
      if (v881)
      {
        uint64_t v882 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v881);
        int v877 = *a3;
        v858 = a3[1];
      }
      else
      {
        uint64_t v882 = 0;
      }
      unint64_t v892 = &v882[4 * v878];
      uint64_t v463 = &v882[4 * v881];
      *(_DWORD *)unint64_t v892 = v712;
      v876 = v892 + 4;
      while (v858 != v877)
      {
        int v893 = *((_DWORD *)v858 - 1);
        v858 -= 4;
        *((_DWORD *)v892 - 1) = v893;
        v892 -= 4;
      }
      *a3 = v892;
      a3[1] = v876;
      a3[2] = v463;
      if (v877)
      {
        operator delete(v877);
        uint64_t v463 = *v464;
      }
    }
    else
    {
      *(_DWORD *)v858 = v712;
      v876 = v858 + 4;
    }
    a3[1] = v876;
    if (v876 >= v463)
    {
      int v895 = *a3;
      uint64_t v896 = (v876 - *a3) >> 2;
      unint64_t v897 = v896 + 1;
      if ((unint64_t)(v896 + 1) >> 62) {
        goto LABEL_3661;
      }
      uint64_t v898 = v463 - v895;
      if (v898 >> 1 > v897) {
        unint64_t v897 = v898 >> 1;
      }
      if ((unint64_t)v898 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v899 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v899 = v897;
      }
      if (v899)
      {
        uint64_t v900 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v899);
        int v895 = *a3;
        v876 = a3[1];
      }
      else
      {
        uint64_t v900 = 0;
      }
      unint64_t v910 = &v900[4 * v896];
      v911 = &v900[4 * v899];
      *(_DWORD *)unint64_t v910 = v749;
      v894 = v910 + 4;
      while (v876 != v895)
      {
        int v912 = *((_DWORD *)v876 - 1);
        v876 -= 4;
        *((_DWORD *)v910 - 1) = v912;
        v910 -= 4;
      }
      *a3 = v910;
      a3[1] = v894;
      a3[2] = v911;
      if (v895) {
        operator delete(v895);
      }
    }
    else
    {
      *(_DWORD *)v876 = v749;
      v894 = v876 + 4;
    }
    a3[1] = v894;
    return;
  }
  if (v8 >= (unsigned __int32 *)v12)
  {
    unint64_t v16 = v11 + 1;
    if ((v11 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v17 = v12 - (char *)v10;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      uint64_t v19 = (char *)sub_20B05D1AC((uint64_t)v13, v18);
      a4 = v2149;
      unint64_t v20 = v19;
      uint64_t v10 = *(unsigned __int32 **)a2;
      float32x4_t v8 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v20 = 0;
    }
    int v26 = &v20[4 * v11];
    uint64_t v12 = &v20[4 * v18];
    *(_DWORD *)int v26 = a4.n128_u32[0];
    float32x4_t v14 = (unsigned __int32 *)(v26 + 4);
    while (v8 != v10)
    {
      int v27 = *--v8;
      *((_DWORD *)v26 - 1) = v27;
      v26 -= 4;
    }
    *(void *)a2 = v26;
    *(void *)(a2 + 8) = v14;
    *(void *)(a2 + 16) = v12;
    if (v10)
    {
      operator delete(v10);
      a4 = v2149;
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *float32x4_t v8 = a4.n128_u32[0];
    float32x4_t v14 = v8 + 1;
  }
  *long long v9 = v14;
  unsigned __int32 v28 = a4.n128_u32[1];
  if (v14 >= (unsigned __int32 *)v12)
  {
    uint64_t v30 = *(unsigned __int32 **)a2;
    uint64_t v31 = ((uint64_t)v14 - *(void *)a2) >> 2;
    unint64_t v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v33 = v12 - (char *)v30;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      int v35 = (char *)sub_20B05D1AC((uint64_t)v13, v34);
      uint64_t v30 = *(unsigned __int32 **)a2;
      float32x4_t v14 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v35 = 0;
    }
    int v46 = (unsigned __int32 *)&v35[4 * v31];
    uint64_t v12 = &v35[4 * v34];
    *int v46 = v28;
    unint64_t v29 = v46 + 1;
    while (v14 != v30)
    {
      unsigned __int32 v47 = *--v14;
      *--int v46 = v47;
    }
    *(void *)a2 = v46;
    *(void *)(a2 + 8) = v29;
    *(void *)(a2 + 16) = v12;
    if (v30)
    {
      operator delete(v30);
      uint64_t v12 = *v13;
    }
    a4.n128_u32[2] = v2149.n128_u32[2];
  }
  else
  {
    *float32x4_t v14 = a4.n128_u32[1];
    unint64_t v29 = v14 + 1;
  }
  *long long v9 = v29;
  unsigned __int32 v48 = a4.n128_u32[2];
  if (v29 >= (unsigned __int32 *)v12)
  {
    int v50 = *(unsigned __int32 **)a2;
    uint64_t v51 = ((uint64_t)v29 - *(void *)a2) >> 2;
    unint64_t v52 = v51 + 1;
    if ((unint64_t)(v51 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v53 = v12 - (char *)v50;
    if (v53 >> 1 > v52) {
      unint64_t v52 = v53 >> 1;
    }
    if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v54 = v52;
    }
    if (v54)
    {
      char v55 = (char *)sub_20B05D1AC((uint64_t)v13, v54);
      int v50 = *(unsigned __int32 **)a2;
      unint64_t v29 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      char v55 = 0;
    }
    __n128 v65 = (unsigned __int32 *)&v55[4 * v51];
    uint64_t v12 = &v55[4 * v54];
    unsigned __int32 *v65 = v48;
    __n128 v49 = v65 + 1;
    while (v29 != v50)
    {
      unsigned __int32 v66 = *--v29;
      *--__n128 v65 = v66;
    }
    *(void *)a2 = v65;
    *(void *)(a2 + 8) = v49;
    *(void *)(a2 + 16) = v12;
    if (v50)
    {
      operator delete(v50);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v29 = a4.n128_u32[2];
    __n128 v49 = v29 + 1;
  }
  *long long v9 = v49;
  if (v49 >= (unsigned __int32 *)v12)
  {
    __n128 v68 = *(unsigned __int32 **)a2;
    uint64_t v69 = ((uint64_t)v49 - *(void *)a2) >> 2;
    unint64_t v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v71 = v12 - (char *)v68;
    if (v71 >> 1 > v70) {
      unint64_t v70 = v71 >> 1;
    }
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v72 = v70;
    }
    if (v72)
    {
      unsigned int v73 = (char *)sub_20B05D1AC((uint64_t)v13, v72);
      __n128 v68 = *(unsigned __int32 **)a2;
      __n128 v49 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unsigned int v73 = 0;
    }
    float32x4_t v83 = &v73[4 * v69];
    uint64_t v12 = &v73[4 * v72];
    *(_DWORD *)float32x4_t v83 = v2149.n128_u32[0];
    __n128 v67 = (unsigned __int32 *)(v83 + 4);
    while (v49 != v68)
    {
      int v84 = *--v49;
      *((_DWORD *)v83 - 1) = v84;
      v83 -= 4;
    }
    *(void *)a2 = v83;
    *(void *)(a2 + 8) = v67;
    *(void *)(a2 + 16) = v12;
    if (v68)
    {
      operator delete(v68);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *__n128 v49 = v2149.n128_u32[0];
    __n128 v67 = v49 + 1;
  }
  *long long v9 = v67;
  if (v67 >= (unsigned __int32 *)v12)
  {
    float32x4_t v86 = *(unsigned __int32 **)a2;
    uint64_t v87 = ((uint64_t)v67 - *(void *)a2) >> 2;
    unint64_t v88 = v87 + 1;
    if ((unint64_t)(v87 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v89 = v12 - (char *)v86;
    if (v89 >> 1 > v88) {
      unint64_t v88 = v89 >> 1;
    }
    if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v90 = v88;
    }
    if (v90)
    {
      float v91 = (char *)sub_20B05D1AC((uint64_t)v13, v90);
      float32x4_t v86 = *(unsigned __int32 **)a2;
      __n128 v67 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      float v91 = 0;
    }
    unint64_t v101 = (unsigned __int32 *)&v91[4 * v87];
    uint64_t v12 = &v91[4 * v90];
    unsigned __int32 *v101 = v28;
    float32x4_t v85 = v101 + 1;
    while (v67 != v86)
    {
      unsigned __int32 v102 = *--v67;
      *--unint64_t v101 = v102;
    }
    *(void *)a2 = v101;
    *(void *)(a2 + 8) = v85;
    *(void *)(a2 + 16) = v12;
    if (v86)
    {
      operator delete(v86);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v67 = v28;
    float32x4_t v85 = v67 + 1;
  }
  *long long v9 = v85;
  if (v85 >= (unsigned __int32 *)v12)
  {
    int v104 = *(unsigned __int32 **)a2;
    uint64_t v105 = ((uint64_t)v85 - *(void *)a2) >> 2;
    unint64_t v106 = v105 + 1;
    if ((unint64_t)(v105 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v107 = v12 - (char *)v104;
    if (v107 >> 1 > v106) {
      unint64_t v106 = v107 >> 1;
    }
    if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v108 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v108 = v106;
    }
    if (v108)
    {
      int v109 = (char *)sub_20B05D1AC((uint64_t)v13, v108);
      int v104 = *(unsigned __int32 **)a2;
      float32x4_t v85 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v109 = 0;
    }
    float v119 = (unsigned __int32 *)&v109[4 * v105];
    uint64_t v12 = &v109[4 * v108];
    unsigned __int32 *v119 = v48;
    int v103 = v119 + 1;
    while (v85 != v104)
    {
      unsigned __int32 v120 = *--v85;
      *--float v119 = v120;
    }
    *(void *)a2 = v119;
    *(void *)(a2 + 8) = v103;
    *(void *)(a2 + 16) = v12;
    if (v104)
    {
      operator delete(v104);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v85 = v48;
    int v103 = v85 + 1;
  }
  *long long v9 = v103;
  if (v103 >= (unsigned __int32 *)v12)
  {
    uint64_t v122 = *(unsigned __int32 **)a2;
    uint64_t v123 = ((uint64_t)v103 - *(void *)a2) >> 2;
    unint64_t v124 = v123 + 1;
    if ((unint64_t)(v123 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v125 = v12 - (char *)v122;
    if (v125 >> 1 > v124) {
      unint64_t v124 = v125 >> 1;
    }
    if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v126 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v126 = v124;
    }
    if (v126)
    {
      float32x4_t v127 = (char *)sub_20B05D1AC((uint64_t)v13, v126);
      uint64_t v122 = *(unsigned __int32 **)a2;
      int v103 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      float32x4_t v127 = 0;
    }
    id v137 = &v127[4 * v123];
    uint64_t v12 = &v127[4 * v126];
    *(_DWORD *)id v137 = a5.n128_u32[0];
    unint64_t v121 = (unsigned __int32 *)(v137 + 4);
    while (v103 != v122)
    {
      int v138 = *--v103;
      *((_DWORD *)v137 - 1) = v138;
      v137 -= 4;
    }
    *(void *)a2 = v137;
    *(void *)(a2 + 8) = v121;
    *(void *)(a2 + 16) = v12;
    if (v122)
    {
      operator delete(v122);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v103 = a5.n128_u32[0];
    unint64_t v121 = v103 + 1;
  }
  *long long v9 = v121;
  if (v121 >= (unsigned __int32 *)v12)
  {
    float32x4_t v140 = *(unsigned __int32 **)a2;
    uint64_t v141 = ((uint64_t)v121 - *(void *)a2) >> 2;
    unint64_t v142 = v141 + 1;
    if ((unint64_t)(v141 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v143 = v12 - (char *)v140;
    if (v143 >> 1 > v142) {
      unint64_t v142 = v143 >> 1;
    }
    if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v144 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v144 = v142;
    }
    if (v144)
    {
      int v145 = (char *)sub_20B05D1AC((uint64_t)v13, v144);
      float32x4_t v140 = *(unsigned __int32 **)a2;
      unint64_t v121 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v145 = 0;
    }
    float v155 = (unsigned __int32 *)&v145[4 * v141];
    uint64_t v12 = &v145[4 * v144];
    *float v155 = v28;
    int v139 = v155 + 1;
    while (v121 != v140)
    {
      unsigned __int32 v156 = *--v121;
      *--float v155 = v156;
    }
    *(void *)a2 = v155;
    *(void *)(a2 + 8) = v139;
    *(void *)(a2 + 16) = v12;
    if (v140)
    {
      operator delete(v140);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v121 = v28;
    int v139 = v121 + 1;
  }
  *long long v9 = v139;
  if (v139 >= (unsigned __int32 *)v12)
  {
    uint64_t v158 = *(unsigned __int32 **)a2;
    uint64_t v159 = ((uint64_t)v139 - *(void *)a2) >> 2;
    unint64_t v160 = v159 + 1;
    if ((unint64_t)(v159 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v161 = v12 - (char *)v158;
    if (v161 >> 1 > v160) {
      unint64_t v160 = v161 >> 1;
    }
    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v162 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v162 = v160;
    }
    if (v162)
    {
      float v163 = (char *)sub_20B05D1AC((uint64_t)v13, v162);
      uint64_t v158 = *(unsigned __int32 **)a2;
      int v139 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      float v163 = 0;
    }
    __n128 v173 = (unsigned __int32 *)&v163[4 * v159];
    uint64_t v12 = &v163[4 * v162];
    unsigned __int32 *v173 = v48;
    float v157 = v173 + 1;
    while (v139 != v158)
    {
      unsigned __int32 v174 = *--v139;
      *--__n128 v173 = v174;
    }
    *(void *)a2 = v173;
    *(void *)(a2 + 8) = v157;
    *(void *)(a2 + 16) = v12;
    if (v158)
    {
      operator delete(v158);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v139 = v48;
    float v157 = v139 + 1;
  }
  *long long v9 = v157;
  if (v157 >= (unsigned __int32 *)v12)
  {
    float v176 = *(unsigned __int32 **)a2;
    uint64_t v177 = ((uint64_t)v157 - *(void *)a2) >> 2;
    unint64_t v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v179 = v12 - (char *)v176;
    if (v179 >> 1 > v178) {
      unint64_t v178 = v179 >> 1;
    }
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v180 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v180 = v178;
    }
    if (v180)
    {
      float v181 = (char *)sub_20B05D1AC((uint64_t)v13, v180);
      float v176 = *(unsigned __int32 **)a2;
      float v157 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      float v181 = 0;
    }
    uint64_t v191 = &v181[4 * v177];
    uint64_t v12 = &v181[4 * v180];
    *(_DWORD *)uint64_t v191 = a5.n128_u32[0];
    uint64_t v175 = (unsigned __int32 *)(v191 + 4);
    while (v157 != v176)
    {
      int v192 = *--v157;
      *((_DWORD *)v191 - 1) = v192;
      v191 -= 4;
    }
    *(void *)a2 = v191;
    *(void *)(a2 + 8) = v175;
    *(void *)(a2 + 16) = v12;
    if (v176)
    {
      operator delete(v176);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v157 = a5.n128_u32[0];
    uint64_t v175 = v157 + 1;
  }
  *long long v9 = v175;
  if (v175 >= (unsigned __int32 *)v12)
  {
    float v194 = *(unsigned __int32 **)a2;
    uint64_t v195 = ((uint64_t)v175 - *(void *)a2) >> 2;
    unint64_t v196 = v195 + 1;
    if ((unint64_t)(v195 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v197 = v12 - (char *)v194;
    if (v197 >> 1 > v196) {
      unint64_t v196 = v197 >> 1;
    }
    if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v198 = v196;
    }
    if (v198)
    {
      float v199 = (char *)sub_20B05D1AC((uint64_t)v13, v198);
      float v194 = *(unsigned __int32 **)a2;
      uint64_t v175 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      float v199 = 0;
    }
    long long v209 = (unsigned __int32 *)&v199[4 * v195];
    uint64_t v12 = &v199[4 * v198];
    unsigned __int32 *v209 = v28;
    float32x2_t v193 = v209 + 1;
    while (v175 != v194)
    {
      unsigned __int32 v210 = *--v175;
      *--long long v209 = v210;
    }
    *(void *)a2 = v209;
    *(void *)(a2 + 8) = v193;
    *(void *)(a2 + 16) = v12;
    if (v194)
    {
      operator delete(v194);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v175 = v28;
    float32x2_t v193 = v175 + 1;
  }
  *long long v9 = v193;
  if (v193 >= (unsigned __int32 *)v12)
  {
    float v212 = *(unsigned __int32 **)a2;
    uint64_t v213 = ((uint64_t)v193 - *(void *)a2) >> 2;
    unint64_t v214 = v213 + 1;
    if ((unint64_t)(v213 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v215 = v12 - (char *)v212;
    if (v215 >> 1 > v214) {
      unint64_t v214 = v215 >> 1;
    }
    if ((unint64_t)v215 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v216 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v216 = v214;
    }
    if (v216)
    {
      float v217 = (char *)sub_20B05D1AC((uint64_t)v13, v216);
      float v212 = *(unsigned __int32 **)a2;
      float32x2_t v193 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      float v217 = 0;
    }
    float v227 = (unsigned __int32 *)&v217[4 * v213];
    uint64_t v12 = &v217[4 * v216];
    unsigned __int32 *v227 = v48;
    uint64_t v211 = v227 + 1;
    while (v193 != v212)
    {
      unsigned __int32 v228 = *--v193;
      *--float v227 = v228;
    }
    *(void *)a2 = v227;
    *(void *)(a2 + 8) = v211;
    *(void *)(a2 + 16) = v12;
    if (v212)
    {
      operator delete(v212);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v193 = v48;
    uint64_t v211 = v193 + 1;
  }
  *long long v9 = v211;
  if (v211 >= (unsigned __int32 *)v12)
  {
    uint64_t v230 = *(unsigned __int32 **)a2;
    uint64_t v231 = ((uint64_t)v211 - *(void *)a2) >> 2;
    unint64_t v232 = v231 + 1;
    if ((unint64_t)(v231 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v233 = v12 - (char *)v230;
    if (v233 >> 1 > v232) {
      unint64_t v232 = v233 >> 1;
    }
    if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v234 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v234 = v232;
    }
    if (v234)
    {
      uint64_t v235 = (char *)sub_20B05D1AC((uint64_t)v13, v234);
      uint64_t v230 = *(unsigned __int32 **)a2;
      uint64_t v211 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v235 = 0;
    }
    unsigned int v245 = &v235[4 * v231];
    uint64_t v12 = &v235[4 * v234];
    *(_DWORD *)unsigned int v245 = v2149.n128_u32[0];
    unsigned __int32 v229 = (unsigned __int32 *)(v245 + 4);
    while (v211 != v230)
    {
      int v246 = *--v211;
      *((_DWORD *)v245 - 1) = v246;
      v245 -= 4;
    }
    *(void *)a2 = v245;
    *(void *)(a2 + 8) = v229;
    *(void *)(a2 + 16) = v12;
    if (v230)
    {
      operator delete(v230);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v211 = v2149.n128_u32[0];
    unsigned __int32 v229 = v211 + 1;
  }
  *long long v9 = v229;
  if (v229 >= (unsigned __int32 *)v12)
  {
    float v248 = *(unsigned __int32 **)a2;
    uint64_t v249 = ((uint64_t)v229 - *(void *)a2) >> 2;
    unint64_t v250 = v249 + 1;
    if ((unint64_t)(v249 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v251 = v12 - (char *)v248;
    if (v251 >> 1 > v250) {
      unint64_t v250 = v251 >> 1;
    }
    if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v252 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v252 = v250;
    }
    if (v252)
    {
      uint64_t v253 = (char *)sub_20B05D1AC((uint64_t)v13, v252);
      float v248 = *(unsigned __int32 **)a2;
      unsigned __int32 v229 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v253 = 0;
    }
    float v263 = &v253[4 * v249];
    uint64_t v12 = &v253[4 * v252];
    *(_DWORD *)float v263 = a5.n128_u32[1];
    float v247 = (unsigned __int32 *)(v263 + 4);
    while (v229 != v248)
    {
      int v264 = *--v229;
      *((_DWORD *)v263 - 1) = v264;
      v263 -= 4;
    }
    *(void *)a2 = v263;
    *(void *)(a2 + 8) = v247;
    *(void *)(a2 + 16) = v12;
    if (v248)
    {
      operator delete(v248);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *unsigned __int32 v229 = a5.n128_u32[1];
    float v247 = v229 + 1;
  }
  *long long v9 = v247;
  if (v247 >= (unsigned __int32 *)v12)
  {
    uint64_t v266 = *(unsigned __int32 **)a2;
    uint64_t v267 = ((uint64_t)v247 - *(void *)a2) >> 2;
    unint64_t v268 = v267 + 1;
    if ((unint64_t)(v267 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v269 = v12 - (char *)v266;
    if (v269 >> 1 > v268) {
      unint64_t v268 = v269 >> 1;
    }
    if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v270 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v270 = v268;
    }
    if (v270)
    {
      int v271 = (char *)sub_20B05D1AC((uint64_t)v13, v270);
      uint64_t v266 = *(unsigned __int32 **)a2;
      float v247 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v271 = 0;
    }
    uint64_t v281 = (unsigned __int32 *)&v271[4 * v267];
    uint64_t v12 = &v271[4 * v270];
    unsigned __int32 *v281 = v48;
    unint64_t v265 = v281 + 1;
    while (v247 != v266)
    {
      unsigned __int32 v282 = *--v247;
      *--uint64_t v281 = v282;
    }
    *(void *)a2 = v281;
    *(void *)(a2 + 8) = v265;
    *(void *)(a2 + 16) = v12;
    if (v266)
    {
      operator delete(v266);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *float v247 = v48;
    unint64_t v265 = v247 + 1;
  }
  *long long v9 = v265;
  if (v265 >= (unsigned __int32 *)v12)
  {
    int v284 = *(unsigned __int32 **)a2;
    uint64_t v285 = ((uint64_t)v265 - *(void *)a2) >> 2;
    unint64_t v286 = v285 + 1;
    if ((unint64_t)(v285 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v287 = v12 - (char *)v284;
    if (v287 >> 1 > v286) {
      unint64_t v286 = v287 >> 1;
    }
    if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v288 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v288 = v286;
    }
    if (v288)
    {
      uint64_t v289 = (char *)sub_20B05D1AC((uint64_t)v13, v288);
      int v284 = *(unsigned __int32 **)a2;
      unint64_t v265 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v289 = 0;
    }
    long long v299 = &v289[4 * v285];
    uint64_t v12 = &v289[4 * v288];
    *(_DWORD *)long long v299 = v2149.n128_u32[0];
    uint64_t v283 = (unsigned __int32 *)(v299 + 4);
    while (v265 != v284)
    {
      int v300 = *--v265;
      *((_DWORD *)v299 - 1) = v300;
      v299 -= 4;
    }
    *(void *)a2 = v299;
    *(void *)(a2 + 8) = v283;
    *(void *)(a2 + 16) = v12;
    if (v284)
    {
      operator delete(v284);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *unint64_t v265 = v2149.n128_u32[0];
    uint64_t v283 = v265 + 1;
  }
  *long long v9 = v283;
  if (v283 >= (unsigned __int32 *)v12)
  {
    long long v302 = *(unsigned __int32 **)a2;
    uint64_t v303 = ((uint64_t)v283 - *(void *)a2) >> 2;
    unint64_t v304 = v303 + 1;
    if ((unint64_t)(v303 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v305 = v12 - (char *)v302;
    if (v305 >> 1 > v304) {
      unint64_t v304 = v305 >> 1;
    }
    if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v306 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v306 = v304;
    }
    if (v306)
    {
      long long v307 = (char *)sub_20B05D1AC((uint64_t)v13, v306);
      long long v302 = *(unsigned __int32 **)a2;
      uint64_t v283 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      long long v307 = 0;
    }
    int v317 = &v307[4 * v303];
    uint64_t v12 = &v307[4 * v306];
    *(_DWORD *)int v317 = a5.n128_u32[1];
    int v301 = (unsigned __int32 *)(v317 + 4);
    while (v283 != v302)
    {
      int v318 = *--v283;
      *((_DWORD *)v317 - 1) = v318;
      v317 -= 4;
    }
    *(void *)a2 = v317;
    *(void *)(a2 + 8) = v301;
    *(void *)(a2 + 16) = v12;
    if (v302)
    {
      operator delete(v302);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *uint64_t v283 = a5.n128_u32[1];
    int v301 = v283 + 1;
  }
  *long long v9 = v301;
  if (v301 >= (unsigned __int32 *)v12)
  {
    uint64_t v320 = *(unsigned __int32 **)a2;
    uint64_t v321 = ((uint64_t)v301 - *(void *)a2) >> 2;
    unint64_t v322 = v321 + 1;
    if ((unint64_t)(v321 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v323 = v12 - (char *)v320;
    if (v323 >> 1 > v322) {
      unint64_t v322 = v323 >> 1;
    }
    if ((unint64_t)v323 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v324 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v324 = v322;
    }
    if (v324)
    {
      int v325 = (char *)sub_20B05D1AC((uint64_t)v13, v324);
      uint64_t v320 = *(unsigned __int32 **)a2;
      int v301 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v325 = 0;
    }
    unsigned __int32 v336 = (unsigned __int32 *)&v325[4 * v321];
    uint64_t v12 = &v325[4 * v324];
    *unsigned __int32 v336 = v48;
    uint64_t v319 = v336 + 1;
    while (v301 != v320)
    {
      unsigned __int32 v337 = *--v301;
      *--unsigned __int32 v336 = v337;
    }
    *(void *)a2 = v336;
    *(void *)(a2 + 8) = v319;
    *(void *)(a2 + 16) = v12;
    if (v320)
    {
      operator delete(v320);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    *int v301 = v48;
    uint64_t v319 = v301 + 1;
  }
  *long long v9 = v319;
  if (v319 >= (unsigned __int32 *)v12)
  {
    float v339 = *(unsigned __int32 **)a2;
    uint64_t v340 = ((uint64_t)v319 - *(void *)a2) >> 2;
    unint64_t v341 = v340 + 1;
    if ((unint64_t)(v340 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v342 = v12 - (char *)v339;
    if (v342 >> 1 > v341) {
      unint64_t v341 = v342 >> 1;
    }
    if ((unint64_t)v342 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v343 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v343 = v341;
    }
    if (v343)
    {
      v344 = (char *)sub_20B05D1AC((uint64_t)v13, v343);
      float v339 = *(unsigned __int32 **)a2;
      uint64_t v319 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v344 = 0;
    }
    long long v355 = &v344[4 * v340];
    uint64_t v12 = &v344[4 * v343];
    *(_DWORD *)long long v355 = a5.n128_u32[0];
    float v338 = (unsigned __int32 *)(v355 + 4);
    while (v319 != v339)
    {
      int v356 = *--v319;
      *((_DWORD *)v355 - 1) = v356;
      v355 -= 4;
    }
    *(void *)a2 = v355;
    *(void *)(a2 + 8) = v338;
    *(void *)(a2 + 16) = v12;
    if (v339)
    {
      operator delete(v339);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v319 = a5.n128_u32[0];
    float v338 = v319 + 1;
  }
  *long long v9 = v338;
  if (v338 >= (unsigned __int32 *)v12)
  {
    long long v358 = *(unsigned __int32 **)a2;
    uint64_t v359 = ((uint64_t)v338 - *(void *)a2) >> 2;
    unint64_t v360 = v359 + 1;
    if ((unint64_t)(v359 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v361 = v12 - (char *)v358;
    if (v361 >> 1 > v360) {
      unint64_t v360 = v361 >> 1;
    }
    if ((unint64_t)v361 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v362 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v362 = v360;
    }
    if (v362)
    {
      int32x4_t v363 = (char *)sub_20B05D1AC((uint64_t)v13, v362);
      long long v358 = *(unsigned __int32 **)a2;
      float v338 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int32x4_t v363 = 0;
    }
    int32x4_t v373 = &v363[4 * v359];
    uint64_t v12 = &v363[4 * v362];
    *(_DWORD *)int32x4_t v373 = a5.n128_u32[1];
    long long v357 = (unsigned __int32 *)(v373 + 4);
    while (v338 != v358)
    {
      int v374 = *--v338;
      *((_DWORD *)v373 - 1) = v374;
      v373 -= 4;
    }
    *(void *)a2 = v373;
    *(void *)(a2 + 8) = v357;
    *(void *)(a2 + 16) = v12;
    if (v358)
    {
      operator delete(v358);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v338 = a5.n128_u32[1];
    long long v357 = v338 + 1;
  }
  *long long v9 = v357;
  if (v357 >= (unsigned __int32 *)v12)
  {
    v376 = *(unsigned __int32 **)a2;
    uint64_t v377 = ((uint64_t)v357 - *(void *)a2) >> 2;
    unint64_t v378 = v377 + 1;
    if ((unint64_t)(v377 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v379 = v12 - (char *)v376;
    if (v379 >> 1 > v378) {
      unint64_t v378 = v379 >> 1;
    }
    if ((unint64_t)v379 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v380 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v380 = v378;
    }
    if (v380)
    {
      uint64_t v381 = (char *)sub_20B05D1AC((uint64_t)v13, v380);
      v376 = *(unsigned __int32 **)a2;
      long long v357 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v381 = 0;
    }
    uint64_t v391 = (unsigned __int32 *)&v381[4 * v377];
    uint64_t v12 = &v381[4 * v380];
    *uint64_t v391 = v48;
    v375 = v391 + 1;
    while (v357 != v376)
    {
      unsigned __int32 v392 = *--v357;
      *--uint64_t v391 = v392;
    }
    *(void *)a2 = v391;
    *(void *)(a2 + 8) = v375;
    *(void *)(a2 + 16) = v12;
    if (v376)
    {
      operator delete(v376);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v357 = v48;
    v375 = v357 + 1;
  }
  *long long v9 = v375;
  if (v375 >= (unsigned __int32 *)v12)
  {
    v394 = *(unsigned __int32 **)a2;
    uint64_t v395 = ((uint64_t)v375 - *(void *)a2) >> 2;
    unint64_t v396 = v395 + 1;
    if ((unint64_t)(v395 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v397 = v12 - (char *)v394;
    if (v397 >> 1 > v396) {
      unint64_t v396 = v397 >> 1;
    }
    if ((unint64_t)v397 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v398 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v398 = v396;
    }
    if (v398)
    {
      unint64_t v399 = (char *)sub_20B05D1AC((uint64_t)v13, v398);
      v394 = *(unsigned __int32 **)a2;
      v375 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v399 = 0;
    }
    uint64_t v409 = &v399[4 * v395];
    uint64_t v12 = &v399[4 * v398];
    *(_DWORD *)uint64_t v409 = a5.n128_u32[0];
    __int32 v393 = (unsigned __int32 *)(v409 + 4);
    while (v375 != v394)
    {
      int v410 = *--v375;
      *((_DWORD *)v409 - 1) = v410;
      v409 -= 4;
    }
    *(void *)a2 = v409;
    *(void *)(a2 + 8) = v393;
    *(void *)(a2 + 16) = v12;
    if (v394)
    {
      operator delete(v394);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v375 = a5.n128_u32[0];
    __int32 v393 = v375 + 1;
  }
  *long long v9 = v393;
  if (v393 >= (unsigned __int32 *)v12)
  {
    unint64_t v412 = *(unsigned __int32 **)a2;
    uint64_t v413 = ((uint64_t)v393 - *(void *)a2) >> 2;
    unint64_t v414 = v413 + 1;
    if ((unint64_t)(v413 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v415 = v12 - (char *)v412;
    if (v415 >> 1 > v414) {
      unint64_t v414 = v415 >> 1;
    }
    if ((unint64_t)v415 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v416 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v416 = v414;
    }
    if (v416)
    {
      unint64_t v417 = (char *)sub_20B05D1AC((uint64_t)v13, v416);
      unint64_t v412 = *(unsigned __int32 **)a2;
      __int32 v393 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v417 = 0;
    }
    uint64_t v427 = &v417[4 * v413];
    uint64_t v12 = &v417[4 * v416];
    *(_DWORD *)uint64_t v427 = a5.n128_u32[1];
    uint64_t v411 = (unsigned __int32 *)(v427 + 4);
    while (v393 != v412)
    {
      int v428 = *--v393;
      *((_DWORD *)v427 - 1) = v428;
      v427 -= 4;
    }
    *(void *)a2 = v427;
    *(void *)(a2 + 8) = v411;
    *(void *)(a2 + 16) = v12;
    if (v412)
    {
      operator delete(v412);
      uint64_t v12 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v393 = a5.n128_u32[1];
    uint64_t v411 = v393 + 1;
  }
  *long long v9 = v411;
  if (v411 >= (unsigned __int32 *)v12)
  {
    float v430 = *(unsigned __int32 **)a2;
    uint64_t v431 = ((uint64_t)v411 - *(void *)a2) >> 2;
    unint64_t v432 = v431 + 1;
    if ((unint64_t)(v431 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v433 = v12 - (char *)v430;
    if (v433 >> 1 > v432) {
      unint64_t v432 = v433 >> 1;
    }
    if ((unint64_t)v433 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v434 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v434 = v432;
    }
    if (v434)
    {
      int32x4_t v435 = (char *)sub_20B05D1AC((uint64_t)v13, v434);
      float v430 = *(unsigned __int32 **)a2;
      uint64_t v411 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int32x4_t v435 = 0;
    }
    float32x4_t v445 = (unsigned __int32 *)&v435[4 * v431];
    int32x4_t v446 = &v435[4 * v434];
    *float32x4_t v445 = v48;
    int32x4_t v429 = v445 + 1;
    while (v411 != v430)
    {
      unsigned __int32 v447 = *--v411;
      *--float32x4_t v445 = v447;
    }
    *(void *)a2 = v445;
    *(void *)(a2 + 8) = v429;
    *(void *)(a2 + 16) = v446;
    if (v430) {
      operator delete(v430);
    }
  }
  else
  {
    unsigned __int32 *v411 = v48;
    int32x4_t v429 = v411 + 1;
  }
  unint64_t v448 = v11 / 6;
  *long long v9 = v429;
  int32x4_t v450 = a3 + 2;
  float32x4_t v449 = a3[2];
  int32x4_t v451 = a3[1];
  if (v451 >= v449)
  {
    unint64_t v453 = *a3;
    uint64_t v454 = (v451 - *a3) >> 2;
    unint64_t v455 = v454 + 1;
    if ((unint64_t)(v454 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v456 = v449 - v453;
    if (v456 >> 1 > v455) {
      unint64_t v455 = v456 >> 1;
    }
    if ((unint64_t)v456 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v457 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v457 = v455;
    }
    if (v457)
    {
      unsigned __int32 v458 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v457);
      unint64_t v453 = *a3;
      int32x4_t v451 = a3[1];
    }
    else
    {
      unsigned __int32 v458 = 0;
    }
    v473 = &v458[4 * v454];
    float32x4_t v449 = &v458[4 * v457];
    *(_DWORD *)v473 = v448;
    uint64_t v452 = v473 + 4;
    while (v451 != v453)
    {
      int v474 = *((_DWORD *)v451 - 1);
      v451 -= 4;
      *((_DWORD *)v473 - 1) = v474;
      v473 -= 4;
    }
    *a3 = v473;
    a3[1] = v452;
    a3[2] = v449;
    if (v453)
    {
      operator delete(v453);
      float32x4_t v449 = *v450;
    }
  }
  else
  {
    *(_DWORD *)int32x4_t v451 = v448;
    uint64_t v452 = v451 + 4;
  }
  a3[1] = v452;
  int v475 = v448 + 2;
  if (v452 >= v449)
  {
    uint64_t v477 = *a3;
    uint64_t v478 = (v452 - *a3) >> 2;
    unint64_t v479 = v478 + 1;
    if ((unint64_t)(v478 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v480 = v449 - v477;
    if (v480 >> 1 > v479) {
      unint64_t v479 = v480 >> 1;
    }
    if ((unint64_t)v480 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v481 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v481 = v479;
    }
    if (v481)
    {
      int32x4_t v482 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v481);
      uint64_t v477 = *a3;
      uint64_t v452 = a3[1];
    }
    else
    {
      int32x4_t v482 = 0;
    }
    v493 = &v482[4 * v478];
    float32x4_t v449 = &v482[4 * v481];
    *(_DWORD *)v493 = v475;
    unint64_t v476 = v493 + 4;
    while (v452 != v477)
    {
      int v494 = *((_DWORD *)v452 - 1);
      v452 -= 4;
      *((_DWORD *)v493 - 1) = v494;
      v493 -= 4;
    }
    *a3 = v493;
    a3[1] = v476;
    a3[2] = v449;
    if (v477)
    {
      operator delete(v477);
      float32x4_t v449 = *v450;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v452 = v475;
    unint64_t v476 = v452 + 4;
  }
  a3[1] = v476;
  int v495 = v448 + 1;
  v2148 = a3 + 2;
  if (v476 >= v449)
  {
    long long v497 = *a3;
    uint64_t v498 = (v476 - *a3) >> 2;
    unint64_t v499 = v498 + 1;
    if ((unint64_t)(v498 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v500 = v449 - v497;
    if (v500 >> 1 > v499) {
      unint64_t v499 = v500 >> 1;
    }
    if ((unint64_t)v500 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v501 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v501 = v499;
    }
    if (v501)
    {
      v502 = (char *)sub_20B05D1AC((uint64_t)(a3 + 2), v501);
      long long v497 = *a3;
      unint64_t v476 = a3[1];
    }
    else
    {
      v502 = 0;
    }
    uint64_t v512 = &v502[4 * v498];
    float32x4_t v449 = &v502[4 * v501];
    *(_DWORD *)uint64_t v512 = v495;
    uint64_t v496 = v512 + 4;
    while (v476 != v497)
    {
      int v513 = *((_DWORD *)v476 - 1);
      v476 -= 4;
      *((_DWORD *)v512 - 1) = v513;
      v512 -= 4;
    }
    *a3 = v512;
    a3[1] = v496;
    a3[2] = v449;
    if (v497)
    {
      operator delete(v497);
      float32x4_t v449 = *v2148;
    }
  }
  else
  {
    *(_DWORD *)unint64_t v476 = v495;
    uint64_t v496 = v476 + 4;
  }
  a3[1] = v496;
  if (v496 >= v449)
  {
    float32x2_t v515 = *a3;
    uint64_t v516 = (v496 - *a3) >> 2;
    unint64_t v517 = v516 + 1;
    if ((unint64_t)(v516 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v518 = v449 - v515;
    if (v518 >> 1 > v517) {
      unint64_t v517 = v518 >> 1;
    }
    if ((unint64_t)v518 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v519 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v519 = v517;
    }
    if (v519)
    {
      v520 = (char *)sub_20B05D1AC((uint64_t)v2148, v519);
      float32x2_t v515 = *a3;
      uint64_t v496 = a3[1];
    }
    else
    {
      v520 = 0;
    }
    long long v531 = &v520[4 * v516];
    float32x4_t v449 = &v520[4 * v519];
    *(_DWORD *)long long v531 = v495;
    uint64_t v514 = v531 + 4;
    while (v496 != v515)
    {
      int v532 = *((_DWORD *)v496 - 1);
      v496 -= 4;
      *((_DWORD *)v531 - 1) = v532;
      v531 -= 4;
    }
    *a3 = v531;
    a3[1] = v514;
    a3[2] = v449;
    if (v515)
    {
      operator delete(v515);
      uint64_t v533 = a3 + 2;
      float32x4_t v449 = *v2148;
      goto LABEL_895;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v496 = v495;
    uint64_t v514 = v496 + 4;
  }
  uint64_t v533 = a3 + 2;
LABEL_895:
  a3[1] = v514;
  if (v514 >= v449)
  {
    unint64_t v535 = *a3;
    uint64_t v536 = (v514 - *a3) >> 2;
    unint64_t v537 = v536 + 1;
    if ((unint64_t)(v536 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v538 = v449 - v535;
    if (v538 >> 1 > v537) {
      unint64_t v537 = v538 >> 1;
    }
    if ((unint64_t)v538 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v539 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v539 = v537;
    }
    if (v539)
    {
      uint64_t v540 = (char *)sub_20B05D1AC((uint64_t)v533, v539);
      unint64_t v535 = *a3;
      uint64_t v514 = a3[1];
    }
    else
    {
      uint64_t v540 = 0;
    }
    long long v550 = &v540[4 * v536];
    float32x4_t v449 = &v540[4 * v539];
    *(_DWORD *)long long v550 = v475;
    unint64_t v534 = v550 + 4;
    while (v514 != v535)
    {
      int v551 = *((_DWORD *)v514 - 1);
      v514 -= 4;
      *((_DWORD *)v550 - 1) = v551;
      v550 -= 4;
    }
    *a3 = v550;
    a3[1] = v534;
    a3[2] = v449;
    if (v535)
    {
      operator delete(v535);
      float32x4_t v449 = *v533;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v514 = v475;
    unint64_t v534 = v514 + 4;
  }
  a3[1] = v534;
  int v552 = v448 + 3;
  if (v534 >= v449)
  {
    v554 = *a3;
    uint64_t v555 = (v534 - *a3) >> 2;
    unint64_t v556 = v555 + 1;
    if ((unint64_t)(v555 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v557 = v449 - v554;
    if (v557 >> 1 > v556) {
      unint64_t v556 = v557 >> 1;
    }
    if ((unint64_t)v557 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v558 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v558 = v556;
    }
    if (v558)
    {
      unint64_t v559 = (char *)sub_20B05D1AC((uint64_t)v533, v558);
      v554 = *a3;
      unint64_t v534 = a3[1];
    }
    else
    {
      unint64_t v559 = 0;
    }
    unint64_t v570 = &v559[4 * v555];
    unint64_t v571 = &v559[4 * v558];
    *(_DWORD *)unint64_t v570 = v552;
    v553 = v570 + 4;
    while (v534 != v554)
    {
      int v572 = *((_DWORD *)v534 - 1);
      v534 -= 4;
      *((_DWORD *)v570 - 1) = v572;
      v570 -= 4;
    }
    *a3 = v570;
    a3[1] = v553;
    a3[2] = v571;
    if (v554) {
      operator delete(v554);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v534 = v552;
    v553 = v534 + 4;
  }
  a3[1] = v553;
  __int32 v573 = *v9;
  __int32 v574 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    int v576 = *(unsigned __int32 **)a2;
    uint64_t v577 = ((uint64_t)v573 - *(void *)a2) >> 2;
    unint64_t v578 = v577 + 1;
    if ((unint64_t)(v577 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v579 = v574 - (char *)v576;
    if (v579 >> 1 > v578) {
      unint64_t v578 = v579 >> 1;
    }
    if ((unint64_t)v579 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v580 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v580 = v578;
    }
    if (v580)
    {
      uint64_t v581 = (char *)sub_20B05D1AC((uint64_t)v13, v580);
      int v576 = *(unsigned __int32 **)a2;
      __int32 v573 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v581 = 0;
    }
    unint64_t v591 = &v581[4 * v577];
    __int32 v574 = &v581[4 * v580];
    *(_DWORD *)unint64_t v591 = v2149.n128_u32[0];
    int v575 = (unsigned __int32 *)(v591 + 4);
    while (v573 != v576)
    {
      int v592 = *--v573;
      *((_DWORD *)v591 - 1) = v592;
      v591 -= 4;
    }
    *(void *)a2 = v591;
    *(void *)(a2 + 8) = v575;
    *(void *)(a2 + 16) = v574;
    if (v576)
    {
      operator delete(v576);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v573 = v2149.n128_u32[0];
    int v575 = v573 + 1;
  }
  *long long v9 = v575;
  if (v575 >= (unsigned __int32 *)v574)
  {
    v594 = *(unsigned __int32 **)a2;
    uint64_t v595 = ((uint64_t)v575 - *(void *)a2) >> 2;
    unint64_t v596 = v595 + 1;
    if ((unint64_t)(v595 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v597 = v574 - (char *)v594;
    if (v597 >> 1 > v596) {
      unint64_t v596 = v597 >> 1;
    }
    if ((unint64_t)v597 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v598 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v598 = v596;
    }
    if (v598)
    {
      v599 = (char *)sub_20B05D1AC((uint64_t)v13, v598);
      v594 = *(unsigned __int32 **)a2;
      int v575 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v599 = 0;
    }
    uint64_t v610 = (unsigned __int32 *)&v599[4 * v595];
    __int32 v574 = &v599[4 * v598];
    *uint64_t v610 = v28;
    id v593 = v610 + 1;
    while (v575 != v594)
    {
      unsigned __int32 v611 = *--v575;
      *--uint64_t v610 = v611;
    }
    *(void *)a2 = v610;
    *(void *)(a2 + 8) = v593;
    *(void *)(a2 + 16) = v574;
    if (v594)
    {
      operator delete(v594);
      __int32 v574 = *v13;
    }
  }
  else
  {
    *int v575 = v28;
    id v593 = v575 + 1;
  }
  *long long v9 = v593;
  if (v593 >= (unsigned __int32 *)v574)
  {
    uint64_t v613 = *(unsigned __int32 **)a2;
    uint64_t v614 = ((uint64_t)v593 - *(void *)a2) >> 2;
    unint64_t v615 = v614 + 1;
    if ((unint64_t)(v614 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v616 = v574 - (char *)v613;
    if (v616 >> 1 > v615) {
      unint64_t v615 = v616 >> 1;
    }
    if ((unint64_t)v616 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v617 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v617 = v615;
    }
    if (v617)
    {
      v618 = (char *)sub_20B05D1AC((uint64_t)v13, v617);
      uint64_t v613 = *(unsigned __int32 **)a2;
      id v593 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v618 = 0;
    }
    v628 = (unsigned __int32 *)&v618[4 * v614];
    __int32 v574 = &v618[4 * v617];
    unsigned __int32 *v628 = v48;
    uint64_t v612 = v628 + 1;
    while (v593 != v613)
    {
      unsigned __int32 v629 = *--v593;
      *--v628 = v629;
    }
    *(void *)a2 = v628;
    *(void *)(a2 + 8) = v612;
    *(void *)(a2 + 16) = v574;
    if (v613)
    {
      operator delete(v613);
      __int32 v574 = *v13;
    }
  }
  else
  {
    *id v593 = v48;
    uint64_t v612 = v593 + 1;
  }
  *long long v9 = v612;
  if (v612 >= (unsigned __int32 *)v574)
  {
    uint64_t v631 = *(unsigned __int32 **)a2;
    uint64_t v632 = ((uint64_t)v612 - *(void *)a2) >> 2;
    unint64_t v633 = v632 + 1;
    if ((unint64_t)(v632 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v634 = v574 - (char *)v631;
    if (v634 >> 1 > v633) {
      unint64_t v633 = v634 >> 1;
    }
    if ((unint64_t)v634 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v635 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v635 = v633;
    }
    if (v635)
    {
      v636 = (char *)sub_20B05D1AC((uint64_t)v13, v635);
      uint64_t v631 = *(unsigned __int32 **)a2;
      uint64_t v612 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v636 = 0;
    }
    uint64_t v647 = &v636[4 * v632];
    __int32 v574 = &v636[4 * v635];
    *(_DWORD *)uint64_t v647 = v2149.n128_u32[0];
    unint64_t v630 = (unsigned __int32 *)(v647 + 4);
    while (v612 != v631)
    {
      int v648 = *--v612;
      *((_DWORD *)v647 - 1) = v648;
      v647 -= 4;
    }
    *(void *)a2 = v647;
    *(void *)(a2 + 8) = v630;
    *(void *)(a2 + 16) = v574;
    if (v631)
    {
      operator delete(v631);
      __int32 v574 = *v13;
    }
  }
  else
  {
    *uint64_t v612 = v2149.n128_u32[0];
    unint64_t v630 = v612 + 1;
  }
  *long long v9 = v630;
  if (v630 >= (unsigned __int32 *)v574)
  {
    uint64_t v650 = *(unsigned __int32 **)a2;
    uint64_t v651 = ((uint64_t)v630 - *(void *)a2) >> 2;
    unint64_t v652 = v651 + 1;
    if ((unint64_t)(v651 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v653 = v574 - (char *)v650;
    if (v653 >> 1 > v652) {
      unint64_t v652 = v653 >> 1;
    }
    if ((unint64_t)v653 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v654 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v654 = v652;
    }
    if (v654)
    {
      v655 = (char *)sub_20B05D1AC((uint64_t)v13, v654);
      uint64_t v650 = *(unsigned __int32 **)a2;
      unint64_t v630 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v655 = 0;
    }
    uint64_t v665 = (unsigned __int32 *)&v655[4 * v651];
    __int32 v574 = &v655[4 * v654];
    unsigned __int32 *v665 = v28;
    unint64_t v649 = v665 + 1;
    while (v630 != v650)
    {
      unsigned __int32 v666 = *--v630;
      *--uint64_t v665 = v666;
    }
    *(void *)a2 = v665;
    *(void *)(a2 + 8) = v649;
    *(void *)(a2 + 16) = v574;
    if (v650)
    {
      operator delete(v650);
      __int32 v574 = *v13;
    }
  }
  else
  {
    *unint64_t v630 = v28;
    unint64_t v649 = v630 + 1;
  }
  *long long v9 = v649;
  if (v649 >= (unsigned __int32 *)v574)
  {
    unint64_t v668 = *(unsigned __int32 **)a2;
    uint64_t v669 = ((uint64_t)v649 - *(void *)a2) >> 2;
    unint64_t v670 = v669 + 1;
    if ((unint64_t)(v669 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v671 = v574 - (char *)v668;
    if (v671 >> 1 > v670) {
      unint64_t v670 = v671 >> 1;
    }
    if ((unint64_t)v671 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v672 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v672 = v670;
    }
    if (v672)
    {
      int v673 = (char *)sub_20B05D1AC((uint64_t)v13, v672);
      unint64_t v668 = *(unsigned __int32 **)a2;
      unint64_t v649 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v673 = 0;
    }
    uint64_t v683 = (unsigned __int32 *)&v673[4 * v669];
    __int32 v574 = &v673[4 * v672];
    *uint64_t v683 = v48;
    uint64_t v667 = v683 + 1;
    while (v649 != v668)
    {
      unsigned __int32 v684 = *--v649;
      *--uint64_t v683 = v684;
    }
    *(void *)a2 = v683;
    *(void *)(a2 + 8) = v667;
    *(void *)(a2 + 16) = v574;
    if (v668)
    {
      operator delete(v668);
      __int32 v574 = *v13;
    }
  }
  else
  {
    *unint64_t v649 = v48;
    uint64_t v667 = v649 + 1;
  }
  *long long v9 = v667;
  if (v667 >= (unsigned __int32 *)v574)
  {
    uint64_t v686 = *(unsigned __int32 **)a2;
    uint64_t v687 = ((uint64_t)v667 - *(void *)a2) >> 2;
    unint64_t v688 = v687 + 1;
    if ((unint64_t)(v687 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v689 = v574 - (char *)v686;
    if (v689 >> 1 > v688) {
      unint64_t v688 = v689 >> 1;
    }
    if ((unint64_t)v689 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v690 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v690 = v688;
    }
    if (v690)
    {
      unint64_t v691 = (char *)sub_20B05D1AC((uint64_t)v13, v690);
      uint64_t v686 = *(unsigned __int32 **)a2;
      uint64_t v667 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v691 = 0;
    }
    long long v701 = &v691[4 * v687];
    __int32 v574 = &v691[4 * v690];
    *(_DWORD *)long long v701 = v2149.n128_u32[0];
    v685 = (unsigned __int32 *)(v701 + 4);
    while (v667 != v686)
    {
      int v702 = *--v667;
      *((_DWORD *)v701 - 1) = v702;
      v701 -= 4;
    }
    *(void *)a2 = v701;
    *(void *)(a2 + 8) = v685;
    *(void *)(a2 + 16) = v574;
    if (v686)
    {
      operator delete(v686);
      __int32 v574 = *v13;
    }
  }
  else
  {
    *uint64_t v667 = v2149.n128_u32[0];
    v685 = v667 + 1;
  }
  *long long v9 = v685;
  if (v685 >= (unsigned __int32 *)v574)
  {
    int v704 = *(unsigned __int32 **)a2;
    uint64_t v705 = ((uint64_t)v685 - *(void *)a2) >> 2;
    unint64_t v706 = v705 + 1;
    if ((unint64_t)(v705 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v707 = v574 - (char *)v704;
    if (v707 >> 1 > v706) {
      unint64_t v706 = v707 >> 1;
    }
    if ((unint64_t)v707 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v708 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v708 = v706;
    }
    if (v708)
    {
      uint64_t v709 = (char *)sub_20B05D1AC((uint64_t)v13, v708);
      int v704 = *(unsigned __int32 **)a2;
      v685 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v709 = 0;
    }
    BOOL v720 = &v709[4 * v705];
    __int32 v574 = &v709[4 * v708];
    *(_DWORD *)BOOL v720 = a5.n128_u32[1];
    v703 = (unsigned __int32 *)(v720 + 4);
    while (v685 != v704)
    {
      int v721 = *--v685;
      *((_DWORD *)v720 - 1) = v721;
      v720 -= 4;
    }
    *(void *)a2 = v720;
    *(void *)(a2 + 8) = v703;
    *(void *)(a2 + 16) = v574;
    if (v704)
    {
      operator delete(v704);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v685 = a5.n128_u32[1];
    v703 = v685 + 1;
  }
  *long long v9 = v703;
  if (v703 >= (unsigned __int32 *)v574)
  {
    int v723 = *(unsigned __int32 **)a2;
    uint64_t v724 = ((uint64_t)v703 - *(void *)a2) >> 2;
    unint64_t v725 = v724 + 1;
    if ((unint64_t)(v724 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v726 = v574 - (char *)v723;
    if (v726 >> 1 > v725) {
      unint64_t v725 = v726 >> 1;
    }
    if ((unint64_t)v726 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v727 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v727 = v725;
    }
    if (v727)
    {
      uint64_t v728 = (char *)sub_20B05D1AC((uint64_t)v13, v727);
      int v723 = *(unsigned __int32 **)a2;
      v703 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v728 = 0;
    }
    uint64_t v738 = (unsigned __int32 *)&v728[4 * v724];
    __int32 v574 = &v728[4 * v727];
    *uint64_t v738 = v48;
    uint64_t v722 = v738 + 1;
    while (v703 != v723)
    {
      unsigned __int32 v739 = *--v703;
      *--uint64_t v738 = v739;
    }
    *(void *)a2 = v738;
    *(void *)(a2 + 8) = v722;
    *(void *)(a2 + 16) = v574;
    if (v723)
    {
      operator delete(v723);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v703 = v48;
    uint64_t v722 = v703 + 1;
  }
  *long long v9 = v722;
  if (v722 >= (unsigned __int32 *)v574)
  {
    int v741 = *(unsigned __int32 **)a2;
    uint64_t v742 = ((uint64_t)v722 - *(void *)a2) >> 2;
    unint64_t v743 = v742 + 1;
    if ((unint64_t)(v742 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v744 = v574 - (char *)v741;
    if (v744 >> 1 > v743) {
      unint64_t v743 = v744 >> 1;
    }
    if ((unint64_t)v744 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v745 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v745 = v743;
    }
    if (v745)
    {
      uint64_t v746 = (char *)sub_20B05D1AC((uint64_t)v13, v745);
      int v741 = *(unsigned __int32 **)a2;
      uint64_t v722 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v746 = 0;
    }
    id v757 = &v746[4 * v742];
    __int32 v574 = &v746[4 * v745];
    *(_DWORD *)id v757 = v2149.n128_u32[0];
    uint64_t v740 = (unsigned __int32 *)(v757 + 4);
    while (v722 != v741)
    {
      int v758 = *--v722;
      *((_DWORD *)v757 - 1) = v758;
      v757 -= 4;
    }
    *(void *)a2 = v757;
    *(void *)(a2 + 8) = v740;
    *(void *)(a2 + 16) = v574;
    if (v741)
    {
      operator delete(v741);
      __int32 v574 = *v13;
    }
  }
  else
  {
    *uint64_t v722 = v2149.n128_u32[0];
    uint64_t v740 = v722 + 1;
  }
  *long long v9 = v740;
  if (v740 >= (unsigned __int32 *)v574)
  {
    uint64_t v760 = *(unsigned __int32 **)a2;
    uint64_t v761 = ((uint64_t)v740 - *(void *)a2) >> 2;
    unint64_t v762 = v761 + 1;
    if ((unint64_t)(v761 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v763 = v574 - (char *)v760;
    if (v763 >> 1 > v762) {
      unint64_t v762 = v763 >> 1;
    }
    if ((unint64_t)v763 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v764 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v764 = v762;
    }
    if (v764)
    {
      uint64_t v765 = (char *)sub_20B05D1AC((uint64_t)v13, v764);
      uint64_t v760 = *(unsigned __int32 **)a2;
      uint64_t v740 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v765 = 0;
    }
    int32x4_t v775 = &v765[4 * v761];
    __int32 v574 = &v765[4 * v764];
    *(_DWORD *)int32x4_t v775 = a5.n128_u32[1];
    uint64_t v759 = (unsigned __int32 *)(v775 + 4);
    while (v740 != v760)
    {
      int v776 = *--v740;
      *((_DWORD *)v775 - 1) = v776;
      v775 -= 4;
    }
    *(void *)a2 = v775;
    *(void *)(a2 + 8) = v759;
    *(void *)(a2 + 16) = v574;
    if (v760)
    {
      operator delete(v760);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v740 = a5.n128_u32[1];
    uint64_t v759 = v740 + 1;
  }
  *long long v9 = v759;
  if (v759 >= (unsigned __int32 *)v574)
  {
    int v778 = *(unsigned __int32 **)a2;
    uint64_t v779 = ((uint64_t)v759 - *(void *)a2) >> 2;
    unint64_t v780 = v779 + 1;
    if ((unint64_t)(v779 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v781 = v574 - (char *)v778;
    if (v781 >> 1 > v780) {
      unint64_t v780 = v781 >> 1;
    }
    if ((unint64_t)v781 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v782 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v782 = v780;
    }
    if (v782)
    {
      long long v783 = (char *)sub_20B05D1AC((uint64_t)v13, v782);
      int v778 = *(unsigned __int32 **)a2;
      uint64_t v759 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      long long v783 = 0;
    }
    unint64_t v793 = (unsigned __int32 *)&v783[4 * v779];
    __int32 v574 = &v783[4 * v782];
    *unint64_t v793 = v48;
    v777 = v793 + 1;
    while (v759 != v778)
    {
      unsigned __int32 v794 = *--v759;
      *--unint64_t v793 = v794;
    }
    *(void *)a2 = v793;
    *(void *)(a2 + 8) = v777;
    *(void *)(a2 + 16) = v574;
    if (v778)
    {
      operator delete(v778);
      __int32 v574 = *v13;
    }
  }
  else
  {
    *uint64_t v759 = v48;
    v777 = v759 + 1;
  }
  *long long v9 = v777;
  if (v777 >= (unsigned __int32 *)v574)
  {
    int v796 = *(unsigned __int32 **)a2;
    uint64_t v797 = ((uint64_t)v777 - *(void *)a2) >> 2;
    unint64_t v798 = v797 + 1;
    if ((unint64_t)(v797 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v799 = v574 - (char *)v796;
    if (v799 >> 1 > v798) {
      unint64_t v798 = v799 >> 1;
    }
    if ((unint64_t)v799 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v800 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v800 = v798;
    }
    if (v800)
    {
      uint64_t v801 = (char *)sub_20B05D1AC((uint64_t)v13, v800);
      int v796 = *(unsigned __int32 **)a2;
      v777 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v801 = 0;
    }
    unint64_t v811 = &v801[4 * v797];
    __int32 v574 = &v801[4 * v800];
    *(_DWORD *)unint64_t v811 = v2149.n128_u32[0];
    v795 = (unsigned __int32 *)(v811 + 4);
    while (v777 != v796)
    {
      int v812 = *--v777;
      *((_DWORD *)v811 - 1) = v812;
      v811 -= 4;
    }
    *(void *)a2 = v811;
    *(void *)(a2 + 8) = v795;
    *(void *)(a2 + 16) = v574;
    if (v796)
    {
      operator delete(v796);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v777 = v2149.n128_u32[0];
    v795 = v777 + 1;
  }
  *long long v9 = v795;
  if (v795 >= (unsigned __int32 *)v574)
  {
    int v814 = *(unsigned __int32 **)a2;
    uint64_t v815 = ((uint64_t)v795 - *(void *)a2) >> 2;
    unint64_t v816 = v815 + 1;
    if ((unint64_t)(v815 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v817 = v574 - (char *)v814;
    if (v817 >> 1 > v816) {
      unint64_t v816 = v817 >> 1;
    }
    if ((unint64_t)v817 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v818 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v818 = v816;
    }
    if (v818)
    {
      uint64_t v819 = (char *)sub_20B05D1AC((uint64_t)v13, v818);
      int v814 = *(unsigned __int32 **)a2;
      v795 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v819 = 0;
    }
    unint64_t v829 = (unsigned __int32 *)&v819[4 * v815];
    __int32 v574 = &v819[4 * v818];
    *unint64_t v829 = v28;
    v813 = v829 + 1;
    while (v795 != v814)
    {
      unsigned __int32 v830 = *--v795;
      *--unint64_t v829 = v830;
    }
    *(void *)a2 = v829;
    *(void *)(a2 + 8) = v813;
    *(void *)(a2 + 16) = v574;
    if (v814)
    {
      operator delete(v814);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v795 = v28;
    v813 = v795 + 1;
  }
  *long long v9 = v813;
  if (v813 >= (unsigned __int32 *)v574)
  {
    int v832 = *(unsigned __int32 **)a2;
    uint64_t v833 = ((uint64_t)v813 - *(void *)a2) >> 2;
    unint64_t v834 = v833 + 1;
    if ((unint64_t)(v833 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v835 = v574 - (char *)v832;
    if (v835 >> 1 > v834) {
      unint64_t v834 = v835 >> 1;
    }
    if ((unint64_t)v835 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v836 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v836 = v834;
    }
    if (v836)
    {
      uint64_t v837 = (char *)sub_20B05D1AC((uint64_t)v13, v836);
      int v832 = *(unsigned __int32 **)a2;
      v813 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v837 = 0;
    }
    unint64_t v847 = &v837[4 * v833];
    __int32 v574 = &v837[4 * v836];
    *(_DWORD *)unint64_t v847 = a5.n128_u32[2];
    v831 = (unsigned __int32 *)(v847 + 4);
    while (v813 != v832)
    {
      int v848 = *--v813;
      *((_DWORD *)v847 - 1) = v848;
      v847 -= 4;
    }
    *(void *)a2 = v847;
    *(void *)(a2 + 8) = v831;
    *(void *)(a2 + 16) = v574;
    if (v832)
    {
      operator delete(v832);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v813 = a5.n128_u32[2];
    v831 = v813 + 1;
  }
  *long long v9 = v831;
  if (v831 >= (unsigned __int32 *)v574)
  {
    int v850 = *(unsigned __int32 **)a2;
    uint64_t v851 = ((uint64_t)v831 - *(void *)a2) >> 2;
    unint64_t v852 = v851 + 1;
    if ((unint64_t)(v851 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v853 = v574 - (char *)v850;
    if (v853 >> 1 > v852) {
      unint64_t v852 = v853 >> 1;
    }
    if ((unint64_t)v853 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v854 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v854 = v852;
    }
    if (v854)
    {
      uint64_t v855 = (char *)sub_20B05D1AC((uint64_t)v13, v854);
      int v850 = *(unsigned __int32 **)a2;
      v831 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v855 = 0;
    }
    unint64_t v865 = &v855[4 * v851];
    __int32 v574 = &v855[4 * v854];
    *(_DWORD *)unint64_t v865 = v2149.n128_u32[0];
    v849 = (unsigned __int32 *)(v865 + 4);
    while (v831 != v850)
    {
      int v866 = *--v831;
      *((_DWORD *)v865 - 1) = v866;
      v865 -= 4;
    }
    *(void *)a2 = v865;
    *(void *)(a2 + 8) = v849;
    *(void *)(a2 + 16) = v574;
    if (v850)
    {
      operator delete(v850);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v831 = v2149.n128_u32[0];
    v849 = v831 + 1;
  }
  *long long v9 = v849;
  if (v849 >= (unsigned __int32 *)v574)
  {
    int v868 = *(unsigned __int32 **)a2;
    uint64_t v869 = ((uint64_t)v849 - *(void *)a2) >> 2;
    unint64_t v870 = v869 + 1;
    if ((unint64_t)(v869 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v871 = v574 - (char *)v868;
    if (v871 >> 1 > v870) {
      unint64_t v870 = v871 >> 1;
    }
    if ((unint64_t)v871 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v872 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v872 = v870;
    }
    if (v872)
    {
      uint64_t v873 = (char *)sub_20B05D1AC((uint64_t)v13, v872);
      int v868 = *(unsigned __int32 **)a2;
      v849 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v873 = 0;
    }
    unint64_t v883 = (unsigned __int32 *)&v873[4 * v869];
    __int32 v574 = &v873[4 * v872];
    *unint64_t v883 = v28;
    v867 = v883 + 1;
    while (v849 != v868)
    {
      unsigned __int32 v884 = *--v849;
      *--unint64_t v883 = v884;
    }
    *(void *)a2 = v883;
    *(void *)(a2 + 8) = v867;
    *(void *)(a2 + 16) = v574;
    if (v868)
    {
      operator delete(v868);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v849 = v28;
    v867 = v849 + 1;
  }
  *long long v9 = v867;
  if (v867 >= (unsigned __int32 *)v574)
  {
    int v886 = *(unsigned __int32 **)a2;
    uint64_t v887 = ((uint64_t)v867 - *(void *)a2) >> 2;
    unint64_t v888 = v887 + 1;
    if ((unint64_t)(v887 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v889 = v574 - (char *)v886;
    if (v889 >> 1 > v888) {
      unint64_t v888 = v889 >> 1;
    }
    if ((unint64_t)v889 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v890 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v890 = v888;
    }
    if (v890)
    {
      uint64_t v891 = (char *)sub_20B05D1AC((uint64_t)v13, v890);
      int v886 = *(unsigned __int32 **)a2;
      v867 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v891 = 0;
    }
    unint64_t v901 = &v891[4 * v887];
    __int32 v574 = &v891[4 * v890];
    *(_DWORD *)unint64_t v901 = a5.n128_u32[2];
    v885 = (unsigned __int32 *)(v901 + 4);
    while (v867 != v886)
    {
      int v902 = *--v867;
      *((_DWORD *)v901 - 1) = v902;
      v901 -= 4;
    }
    *(void *)a2 = v901;
    *(void *)(a2 + 8) = v885;
    *(void *)(a2 + 16) = v574;
    if (v886)
    {
      operator delete(v886);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v867 = a5.n128_u32[2];
    v885 = v867 + 1;
  }
  *long long v9 = v885;
  if (v885 >= (unsigned __int32 *)v574)
  {
    int v904 = *(unsigned __int32 **)a2;
    uint64_t v905 = ((uint64_t)v885 - *(void *)a2) >> 2;
    unint64_t v906 = v905 + 1;
    if ((unint64_t)(v905 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v907 = v574 - (char *)v904;
    if (v907 >> 1 > v906) {
      unint64_t v906 = v907 >> 1;
    }
    if ((unint64_t)v907 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v908 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v908 = v906;
    }
    if (v908)
    {
      uint64_t v909 = (char *)sub_20B05D1AC((uint64_t)v13, v908);
      int v904 = *(unsigned __int32 **)a2;
      v885 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v909 = 0;
    }
    int v913 = &v909[4 * v905];
    __int32 v574 = &v909[4 * v908];
    *(_DWORD *)int v913 = v2149.n128_u32[0];
    v903 = (unsigned __int32 *)(v913 + 4);
    while (v885 != v904)
    {
      int v914 = *--v885;
      *((_DWORD *)v913 - 1) = v914;
      v913 -= 4;
    }
    *(void *)a2 = v913;
    *(void *)(a2 + 8) = v903;
    *(void *)(a2 + 16) = v574;
    if (v904)
    {
      operator delete(v904);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v885 = v2149.n128_u32[0];
    v903 = v885 + 1;
  }
  *long long v9 = v903;
  if (v903 >= (unsigned __int32 *)v574)
  {
    uint64_t v916 = *(unsigned __int32 **)a2;
    uint64_t v917 = ((uint64_t)v903 - *(void *)a2) >> 2;
    unint64_t v918 = v917 + 1;
    if ((unint64_t)(v917 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v919 = v574 - (char *)v916;
    if (v919 >> 1 > v918) {
      unint64_t v918 = v919 >> 1;
    }
    if ((unint64_t)v919 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v920 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v920 = v918;
    }
    if (v920)
    {
      v921 = (char *)sub_20B05D1AC((uint64_t)v13, v920);
      uint64_t v916 = *(unsigned __int32 **)a2;
      v903 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v921 = 0;
    }
    v922 = &v921[4 * v917];
    __int32 v574 = &v921[4 * v920];
    *(_DWORD *)v922 = a5.n128_u32[1];
    v915 = (unsigned __int32 *)(v922 + 4);
    while (v903 != v916)
    {
      int v923 = *--v903;
      *((_DWORD *)v922 - 1) = v923;
      v922 -= 4;
    }
    *(void *)a2 = v922;
    *(void *)(a2 + 8) = v915;
    *(void *)(a2 + 16) = v574;
    if (v916)
    {
      operator delete(v916);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v903 = a5.n128_u32[1];
    v915 = v903 + 1;
  }
  *long long v9 = v915;
  if (v915 >= (unsigned __int32 *)v574)
  {
    int v925 = *(unsigned __int32 **)a2;
    uint64_t v926 = ((uint64_t)v915 - *(void *)a2) >> 2;
    unint64_t v927 = v926 + 1;
    if ((unint64_t)(v926 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v928 = v574 - (char *)v925;
    if (v928 >> 1 > v927) {
      unint64_t v927 = v928 >> 1;
    }
    if ((unint64_t)v928 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v929 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v929 = v927;
    }
    if (v929)
    {
      uint64_t v930 = (char *)sub_20B05D1AC((uint64_t)v13, v929);
      int v925 = *(unsigned __int32 **)a2;
      v915 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v930 = 0;
    }
    unint64_t v931 = &v930[4 * v926];
    __int32 v574 = &v930[4 * v929];
    *(_DWORD *)unint64_t v931 = a5.n128_u32[2];
    v924 = (unsigned __int32 *)(v931 + 4);
    while (v915 != v925)
    {
      int v932 = *--v915;
      *((_DWORD *)v931 - 1) = v932;
      v931 -= 4;
    }
    *(void *)a2 = v931;
    *(void *)(a2 + 8) = v924;
    *(void *)(a2 + 16) = v574;
    if (v925)
    {
      operator delete(v925);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v915 = a5.n128_u32[2];
    v924 = v915 + 1;
  }
  *long long v9 = v924;
  if (v924 >= (unsigned __int32 *)v574)
  {
    int v934 = *(unsigned __int32 **)a2;
    uint64_t v935 = ((uint64_t)v924 - *(void *)a2) >> 2;
    unint64_t v936 = v935 + 1;
    if ((unint64_t)(v935 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v937 = v574 - (char *)v934;
    if (v937 >> 1 > v936) {
      unint64_t v936 = v937 >> 1;
    }
    if ((unint64_t)v937 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v938 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v938 = v936;
    }
    if (v938)
    {
      uint64_t v939 = (char *)sub_20B05D1AC((uint64_t)v13, v938);
      int v934 = *(unsigned __int32 **)a2;
      v924 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v939 = 0;
    }
    unint64_t v940 = &v939[4 * v935];
    __int32 v574 = &v939[4 * v938];
    *(_DWORD *)unint64_t v940 = v2149.n128_u32[0];
    v933 = (unsigned __int32 *)(v940 + 4);
    while (v924 != v934)
    {
      int v941 = *--v924;
      *((_DWORD *)v940 - 1) = v941;
      v940 -= 4;
    }
    *(void *)a2 = v940;
    *(void *)(a2 + 8) = v933;
    *(void *)(a2 + 16) = v574;
    if (v934)
    {
      operator delete(v934);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v924 = v2149.n128_u32[0];
    v933 = v924 + 1;
  }
  *long long v9 = v933;
  if (v933 >= (unsigned __int32 *)v574)
  {
    v943 = *(unsigned __int32 **)a2;
    uint64_t v944 = ((uint64_t)v933 - *(void *)a2) >> 2;
    unint64_t v945 = v944 + 1;
    if ((unint64_t)(v944 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v946 = v574 - (char *)v943;
    if (v946 >> 1 > v945) {
      unint64_t v945 = v946 >> 1;
    }
    if ((unint64_t)v946 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v947 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v947 = v945;
    }
    if (v947)
    {
      v948 = (char *)sub_20B05D1AC((uint64_t)v13, v947);
      v943 = *(unsigned __int32 **)a2;
      v933 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v948 = 0;
    }
    v949 = &v948[4 * v944];
    __int32 v574 = &v948[4 * v947];
    *(_DWORD *)v949 = a5.n128_u32[1];
    v942 = (unsigned __int32 *)(v949 + 4);
    while (v933 != v943)
    {
      int v950 = *--v933;
      *((_DWORD *)v949 - 1) = v950;
      v949 -= 4;
    }
    *(void *)a2 = v949;
    *(void *)(a2 + 8) = v942;
    *(void *)(a2 + 16) = v574;
    if (v943)
    {
      operator delete(v943);
      __int32 v574 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v933 = a5.n128_u32[1];
    v942 = v933 + 1;
  }
  *long long v9 = v942;
  if (v942 >= (unsigned __int32 *)v574)
  {
    uint64_t v952 = *(unsigned __int32 **)a2;
    uint64_t v953 = ((uint64_t)v942 - *(void *)a2) >> 2;
    unint64_t v954 = v953 + 1;
    if ((unint64_t)(v953 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v955 = v574 - (char *)v952;
    if (v955 >> 1 > v954) {
      unint64_t v954 = v955 >> 1;
    }
    if ((unint64_t)v955 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v956 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v956 = v954;
    }
    if (v956)
    {
      int v957 = (char *)sub_20B05D1AC((uint64_t)v13, v956);
      uint64_t v952 = *(unsigned __int32 **)a2;
      v942 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v957 = 0;
    }
    v958 = &v957[4 * v953];
    v959 = &v957[4 * v956];
    *(_DWORD *)v958 = a5.n128_u32[2];
    unint64_t v951 = (unsigned __int32 *)(v958 + 4);
    while (v942 != v952)
    {
      int v960 = *--v942;
      *((_DWORD *)v958 - 1) = v960;
      v958 -= 4;
    }
    *(void *)a2 = v958;
    *(void *)(a2 + 8) = v951;
    *(void *)(a2 + 16) = v959;
    if (v952) {
      operator delete(v952);
    }
  }
  else
  {
    unsigned __int32 *v942 = a5.n128_u32[2];
    unint64_t v951 = v942 + 1;
  }
  *long long v9 = v951;
  int v961 = v448 + 4;
  unint64_t v963 = a3[1];
  uint64_t v962 = a3[2];
  if (v963 >= v962)
  {
    v965 = *a3;
    uint64_t v966 = (v963 - *a3) >> 2;
    unint64_t v967 = v966 + 1;
    if ((unint64_t)(v966 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v968 = v962 - v965;
    if (v968 >> 1 > v967) {
      unint64_t v967 = v968 >> 1;
    }
    if ((unint64_t)v968 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v969 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v969 = v967;
    }
    if (v969)
    {
      uint64_t v970 = (char *)sub_20B05D1AC((uint64_t)v533, v969);
      v965 = *a3;
      unint64_t v963 = a3[1];
    }
    else
    {
      uint64_t v970 = 0;
    }
    unint64_t v971 = &v970[4 * v966];
    uint64_t v962 = &v970[4 * v969];
    *(_DWORD *)unint64_t v971 = v961;
    v964 = v971 + 4;
    while (v963 != v965)
    {
      int v972 = *((_DWORD *)v963 - 1);
      v963 -= 4;
      *((_DWORD *)v971 - 1) = v972;
      v971 -= 4;
    }
    *a3 = v971;
    a3[1] = v964;
    a3[2] = v962;
    if (v965)
    {
      operator delete(v965);
      uint64_t v962 = *v533;
    }
  }
  else
  {
    *(_DWORD *)unint64_t v963 = v961;
    v964 = v963 + 4;
  }
  a3[1] = v964;
  int v973 = v448 + 6;
  if (v964 >= v962)
  {
    v975 = *a3;
    uint64_t v976 = (v964 - *a3) >> 2;
    unint64_t v977 = v976 + 1;
    if ((unint64_t)(v976 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v978 = v962 - v975;
    if (v978 >> 1 > v977) {
      unint64_t v977 = v978 >> 1;
    }
    if ((unint64_t)v978 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v979 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v979 = v977;
    }
    if (v979)
    {
      unint64_t v980 = (char *)sub_20B05D1AC((uint64_t)v533, v979);
      v975 = *a3;
      v964 = a3[1];
    }
    else
    {
      unint64_t v980 = 0;
    }
    uint64_t v981 = &v980[4 * v976];
    uint64_t v962 = &v980[4 * v979];
    *(_DWORD *)uint64_t v981 = v973;
    v974 = v981 + 4;
    while (v964 != v975)
    {
      int v982 = *((_DWORD *)v964 - 1);
      v964 -= 4;
      *((_DWORD *)v981 - 1) = v982;
      v981 -= 4;
    }
    *a3 = v981;
    a3[1] = v974;
    a3[2] = v962;
    if (v975)
    {
      operator delete(v975);
      uint64_t v962 = *v533;
    }
  }
  else
  {
    *(_DWORD *)v964 = v973;
    v974 = v964 + 4;
  }
  a3[1] = v974;
  int v983 = v448 + 5;
  if (v974 >= v962)
  {
    int v985 = *a3;
    uint64_t v986 = (v974 - *a3) >> 2;
    unint64_t v987 = v986 + 1;
    if ((unint64_t)(v986 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v988 = v962 - v985;
    if (v988 >> 1 > v987) {
      unint64_t v987 = v988 >> 1;
    }
    if ((unint64_t)v988 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v989 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v989 = v987;
    }
    if (v989)
    {
      uint64_t v990 = (char *)sub_20B05D1AC((uint64_t)v533, v989);
      int v985 = *a3;
      v974 = a3[1];
    }
    else
    {
      uint64_t v990 = 0;
    }
    unint64_t v991 = &v990[4 * v986];
    uint64_t v962 = &v990[4 * v989];
    *(_DWORD *)unint64_t v991 = v983;
    v984 = v991 + 4;
    while (v974 != v985)
    {
      int v992 = *((_DWORD *)v974 - 1);
      v974 -= 4;
      *((_DWORD *)v991 - 1) = v992;
      v991 -= 4;
    }
    *a3 = v991;
    a3[1] = v984;
    a3[2] = v962;
    if (v985)
    {
      operator delete(v985);
      uint64_t v962 = *v2148;
    }
  }
  else
  {
    *(_DWORD *)v974 = v983;
    v984 = v974 + 4;
  }
  a3[1] = v984;
  if (v984 >= v962)
  {
    v994 = *a3;
    uint64_t v995 = (v984 - *a3) >> 2;
    unint64_t v996 = v995 + 1;
    if ((unint64_t)(v995 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v997 = v962 - v994;
    if (v997 >> 1 > v996) {
      unint64_t v996 = v997 >> 1;
    }
    if ((unint64_t)v997 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v998 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v998 = v996;
    }
    if (v998)
    {
      uint64_t v999 = (char *)sub_20B05D1AC((uint64_t)v2148, v998);
      v994 = *a3;
      v984 = a3[1];
    }
    else
    {
      uint64_t v999 = 0;
    }
    unint64_t v1000 = &v999[4 * v995];
    uint64_t v962 = &v999[4 * v998];
    *(_DWORD *)unint64_t v1000 = v983;
    unint64_t v993 = v1000 + 4;
    while (v984 != v994)
    {
      int v1001 = *((_DWORD *)v984 - 1);
      v984 -= 4;
      *((_DWORD *)v1000 - 1) = v1001;
      v1000 -= 4;
    }
    *a3 = v1000;
    a3[1] = v993;
    a3[2] = v962;
    if (v994)
    {
      operator delete(v994);
      unint64_t v1002 = a3 + 2;
      uint64_t v962 = *v2148;
      goto LABEL_1703;
    }
  }
  else
  {
    *(_DWORD *)v984 = v983;
    unint64_t v993 = v984 + 4;
  }
  unint64_t v1002 = a3 + 2;
LABEL_1703:
  a3[1] = v993;
  if (v993 >= v962)
  {
    v1004 = *a3;
    uint64_t v1005 = (v993 - *a3) >> 2;
    unint64_t v1006 = v1005 + 1;
    if ((unint64_t)(v1005 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1007 = v962 - v1004;
    if (v1007 >> 1 > v1006) {
      unint64_t v1006 = v1007 >> 1;
    }
    if ((unint64_t)v1007 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1008 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1008 = v1006;
    }
    if (v1008)
    {
      v1009 = (char *)sub_20B05D1AC((uint64_t)v1002, v1008);
      v1004 = *a3;
      unint64_t v993 = a3[1];
    }
    else
    {
      v1009 = 0;
    }
    v1010 = &v1009[4 * v1005];
    uint64_t v962 = &v1009[4 * v1008];
    *(_DWORD *)v1010 = v973;
    v1003 = v1010 + 4;
    while (v993 != v1004)
    {
      int v1011 = *((_DWORD *)v993 - 1);
      v993 -= 4;
      *((_DWORD *)v1010 - 1) = v1011;
      v1010 -= 4;
    }
    *a3 = v1010;
    a3[1] = v1003;
    a3[2] = v962;
    if (v1004)
    {
      operator delete(v1004);
      uint64_t v962 = *v1002;
    }
  }
  else
  {
    *(_DWORD *)unint64_t v993 = v973;
    v1003 = v993 + 4;
  }
  a3[1] = v1003;
  int v1012 = v448 + 7;
  if (v1003 >= v962)
  {
    unint64_t v1014 = *a3;
    uint64_t v1015 = (v1003 - *a3) >> 2;
    unint64_t v1016 = v1015 + 1;
    if ((unint64_t)(v1015 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1017 = v962 - v1014;
    if (v1017 >> 1 > v1016) {
      unint64_t v1016 = v1017 >> 1;
    }
    if ((unint64_t)v1017 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1018 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1018 = v1016;
    }
    if (v1018)
    {
      v1019 = (char *)sub_20B05D1AC((uint64_t)v1002, v1018);
      unint64_t v1014 = *a3;
      v1003 = a3[1];
    }
    else
    {
      v1019 = 0;
    }
    uint64_t v1020 = &v1019[4 * v1015];
    unint64_t v1021 = &v1019[4 * v1018];
    *(_DWORD *)uint64_t v1020 = v1012;
    uint64_t v1013 = v1020 + 4;
    while (v1003 != v1014)
    {
      int v1022 = *((_DWORD *)v1003 - 1);
      v1003 -= 4;
      *((_DWORD *)v1020 - 1) = v1022;
      v1020 -= 4;
    }
    *a3 = v1020;
    a3[1] = v1013;
    a3[2] = v1021;
    if (v1014) {
      operator delete(v1014);
    }
  }
  else
  {
    *(_DWORD *)v1003 = v1012;
    uint64_t v1013 = v1003 + 4;
  }
  a3[1] = v1013;
  unint64_t v1023 = *v9;
  v1024 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    unsigned __int32 v1026 = *(unsigned __int32 **)a2;
    uint64_t v1027 = ((uint64_t)v1023 - *(void *)a2) >> 2;
    unint64_t v1028 = v1027 + 1;
    if ((unint64_t)(v1027 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1029 = v1024 - (char *)v1026;
    if (v1029 >> 1 > v1028) {
      unint64_t v1028 = v1029 >> 1;
    }
    if ((unint64_t)v1029 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1030 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1030 = v1028;
    }
    if (v1030)
    {
      uint64_t v1031 = (char *)sub_20B05D1AC((uint64_t)v13, v1030);
      unsigned __int32 v1026 = *(unsigned __int32 **)a2;
      unint64_t v1023 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1031 = 0;
    }
    unint64_t v1032 = &v1031[4 * v1027];
    v1024 = &v1031[4 * v1030];
    *(_DWORD *)unint64_t v1032 = v2149.n128_u32[0];
    v1025 = (unsigned __int32 *)(v1032 + 4);
    while (v1023 != v1026)
    {
      int v1033 = *--v1023;
      *((_DWORD *)v1032 - 1) = v1033;
      v1032 -= 4;
    }
    *(void *)a2 = v1032;
    *(void *)(a2 + 8) = v1025;
    *(void *)(a2 + 16) = v1024;
    if (v1026)
    {
      operator delete(v1026);
      v1024 = *v13;
    }
  }
  else
  {
    *unint64_t v1023 = v2149.n128_u32[0];
    v1025 = v1023 + 1;
  }
  *long long v9 = v1025;
  if (v1025 >= (unsigned __int32 *)v1024)
  {
    unsigned __int32 v1035 = *(unsigned __int32 **)a2;
    uint64_t v1036 = ((uint64_t)v1025 - *(void *)a2) >> 2;
    unint64_t v1037 = v1036 + 1;
    if ((unint64_t)(v1036 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1038 = v1024 - (char *)v1035;
    if (v1038 >> 1 > v1037) {
      unint64_t v1037 = v1038 >> 1;
    }
    if ((unint64_t)v1038 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1039 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1039 = v1037;
    }
    if (v1039)
    {
      uint64_t v1040 = (char *)sub_20B05D1AC((uint64_t)v13, v1039);
      unsigned __int32 v1035 = *(unsigned __int32 **)a2;
      v1025 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1040 = 0;
    }
    unint64_t v1041 = (unsigned __int32 *)&v1040[4 * v1036];
    v1024 = &v1040[4 * v1039];
    *unint64_t v1041 = v28;
    v1034 = v1041 + 1;
    while (v1025 != v1035)
    {
      unsigned __int32 v1042 = *--v1025;
      *--unint64_t v1041 = v1042;
    }
    *(void *)a2 = v1041;
    *(void *)(a2 + 8) = v1034;
    *(void *)(a2 + 16) = v1024;
    if (v1035)
    {
      operator delete(v1035);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1025 = v28;
    v1034 = v1025 + 1;
  }
  *long long v9 = v1034;
  if (v1034 >= (unsigned __int32 *)v1024)
  {
    int v1044 = *(unsigned __int32 **)a2;
    uint64_t v1045 = ((uint64_t)v1034 - *(void *)a2) >> 2;
    unint64_t v1046 = v1045 + 1;
    if ((unint64_t)(v1045 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1047 = v1024 - (char *)v1044;
    if (v1047 >> 1 > v1046) {
      unint64_t v1046 = v1047 >> 1;
    }
    if ((unint64_t)v1047 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1048 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1048 = v1046;
    }
    if (v1048)
    {
      uint64_t v1049 = (char *)sub_20B05D1AC((uint64_t)v13, v1048);
      int v1044 = *(unsigned __int32 **)a2;
      v1034 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1049 = 0;
    }
    unint64_t v1050 = &v1049[4 * v1045];
    v1024 = &v1049[4 * v1048];
    *(_DWORD *)unint64_t v1050 = a5.n128_u32[2];
    v1043 = (unsigned __int32 *)(v1050 + 4);
    while (v1034 != v1044)
    {
      int v1051 = *--v1034;
      *((_DWORD *)v1050 - 1) = v1051;
      v1050 -= 4;
    }
    *(void *)a2 = v1050;
    *(void *)(a2 + 8) = v1043;
    *(void *)(a2 + 16) = v1024;
    if (v1044)
    {
      operator delete(v1044);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1034 = a5.n128_u32[2];
    v1043 = v1034 + 1;
  }
  *long long v9 = v1043;
  if (v1043 >= (unsigned __int32 *)v1024)
  {
    int v1053 = *(unsigned __int32 **)a2;
    uint64_t v1054 = ((uint64_t)v1043 - *(void *)a2) >> 2;
    unint64_t v1055 = v1054 + 1;
    if ((unint64_t)(v1054 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1056 = v1024 - (char *)v1053;
    if (v1056 >> 1 > v1055) {
      unint64_t v1055 = v1056 >> 1;
    }
    if ((unint64_t)v1056 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1057 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1057 = v1055;
    }
    if (v1057)
    {
      uint64_t v1058 = (char *)sub_20B05D1AC((uint64_t)v13, v1057);
      int v1053 = *(unsigned __int32 **)a2;
      v1043 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1058 = 0;
    }
    unint64_t v1059 = &v1058[4 * v1054];
    v1024 = &v1058[4 * v1057];
    *(_DWORD *)unint64_t v1059 = v2149.n128_u32[0];
    v1052 = (unsigned __int32 *)(v1059 + 4);
    while (v1043 != v1053)
    {
      int v1060 = *--v1043;
      *((_DWORD *)v1059 - 1) = v1060;
      v1059 -= 4;
    }
    *(void *)a2 = v1059;
    *(void *)(a2 + 8) = v1052;
    *(void *)(a2 + 16) = v1024;
    if (v1053)
    {
      operator delete(v1053);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1043 = v2149.n128_u32[0];
    v1052 = v1043 + 1;
  }
  *long long v9 = v1052;
  if (v1052 >= (unsigned __int32 *)v1024)
  {
    unsigned __int32 v1062 = *(unsigned __int32 **)a2;
    uint64_t v1063 = ((uint64_t)v1052 - *(void *)a2) >> 2;
    unint64_t v1064 = v1063 + 1;
    if ((unint64_t)(v1063 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1065 = v1024 - (char *)v1062;
    if (v1065 >> 1 > v1064) {
      unint64_t v1064 = v1065 >> 1;
    }
    if ((unint64_t)v1065 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1066 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1066 = v1064;
    }
    if (v1066)
    {
      uint64_t v1067 = (char *)sub_20B05D1AC((uint64_t)v13, v1066);
      unsigned __int32 v1062 = *(unsigned __int32 **)a2;
      v1052 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1067 = 0;
    }
    unint64_t v1068 = (unsigned __int32 *)&v1067[4 * v1063];
    v1024 = &v1067[4 * v1066];
    *unint64_t v1068 = v28;
    v1061 = v1068 + 1;
    while (v1052 != v1062)
    {
      unsigned __int32 v1069 = *--v1052;
      *--unint64_t v1068 = v1069;
    }
    *(void *)a2 = v1068;
    *(void *)(a2 + 8) = v1061;
    *(void *)(a2 + 16) = v1024;
    if (v1062)
    {
      operator delete(v1062);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1052 = v28;
    v1061 = v1052 + 1;
  }
  *long long v9 = v1061;
  if (v1061 >= (unsigned __int32 *)v1024)
  {
    int v1071 = *(unsigned __int32 **)a2;
    uint64_t v1072 = ((uint64_t)v1061 - *(void *)a2) >> 2;
    unint64_t v1073 = v1072 + 1;
    if ((unint64_t)(v1072 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1074 = v1024 - (char *)v1071;
    if (v1074 >> 1 > v1073) {
      unint64_t v1073 = v1074 >> 1;
    }
    if ((unint64_t)v1074 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1075 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1075 = v1073;
    }
    if (v1075)
    {
      uint64_t v1076 = (char *)sub_20B05D1AC((uint64_t)v13, v1075);
      int v1071 = *(unsigned __int32 **)a2;
      v1061 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1076 = 0;
    }
    unint64_t v1077 = &v1076[4 * v1072];
    v1024 = &v1076[4 * v1075];
    *(_DWORD *)unint64_t v1077 = a5.n128_u32[2];
    v1070 = (unsigned __int32 *)(v1077 + 4);
    while (v1061 != v1071)
    {
      int v1078 = *--v1061;
      *((_DWORD *)v1077 - 1) = v1078;
      v1077 -= 4;
    }
    *(void *)a2 = v1077;
    *(void *)(a2 + 8) = v1070;
    *(void *)(a2 + 16) = v1024;
    if (v1071)
    {
      operator delete(v1071);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1061 = a5.n128_u32[2];
    v1070 = v1061 + 1;
  }
  *long long v9 = v1070;
  if (v1070 >= (unsigned __int32 *)v1024)
  {
    unsigned __int32 v1080 = *(unsigned __int32 **)a2;
    uint64_t v1081 = ((uint64_t)v1070 - *(void *)a2) >> 2;
    unint64_t v1082 = v1081 + 1;
    if ((unint64_t)(v1081 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1083 = v1024 - (char *)v1080;
    if (v1083 >> 1 > v1082) {
      unint64_t v1082 = v1083 >> 1;
    }
    if ((unint64_t)v1083 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1084 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1084 = v1082;
    }
    if (v1084)
    {
      uint64_t v1085 = (char *)sub_20B05D1AC((uint64_t)v13, v1084);
      unsigned __int32 v1080 = *(unsigned __int32 **)a2;
      v1070 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1085 = 0;
    }
    unint64_t v1086 = &v1085[4 * v1081];
    v1024 = &v1085[4 * v1084];
    *(_DWORD *)unint64_t v1086 = a5.n128_u32[0];
    v1079 = (unsigned __int32 *)(v1086 + 4);
    while (v1070 != v1080)
    {
      int v1087 = *--v1070;
      *((_DWORD *)v1086 - 1) = v1087;
      v1086 -= 4;
    }
    *(void *)a2 = v1086;
    *(void *)(a2 + 8) = v1079;
    *(void *)(a2 + 16) = v1024;
    if (v1080)
    {
      operator delete(v1080);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1070 = a5.n128_u32[0];
    v1079 = v1070 + 1;
  }
  *long long v9 = v1079;
  if (v1079 >= (unsigned __int32 *)v1024)
  {
    int v1089 = *(unsigned __int32 **)a2;
    uint64_t v1090 = ((uint64_t)v1079 - *(void *)a2) >> 2;
    unint64_t v1091 = v1090 + 1;
    if ((unint64_t)(v1090 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1092 = v1024 - (char *)v1089;
    if (v1092 >> 1 > v1091) {
      unint64_t v1091 = v1092 >> 1;
    }
    if ((unint64_t)v1092 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1093 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1093 = v1091;
    }
    if (v1093)
    {
      uint64_t v1094 = (char *)sub_20B05D1AC((uint64_t)v13, v1093);
      int v1089 = *(unsigned __int32 **)a2;
      v1079 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1094 = 0;
    }
    unint64_t v1095 = (unsigned __int32 *)&v1094[4 * v1090];
    v1024 = &v1094[4 * v1093];
    *unint64_t v1095 = v28;
    v1088 = v1095 + 1;
    while (v1079 != v1089)
    {
      unsigned __int32 v1096 = *--v1079;
      *--unint64_t v1095 = v1096;
    }
    *(void *)a2 = v1095;
    *(void *)(a2 + 8) = v1088;
    *(void *)(a2 + 16) = v1024;
    if (v1089)
    {
      operator delete(v1089);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1079 = v28;
    v1088 = v1079 + 1;
  }
  *long long v9 = v1088;
  if (v1088 >= (unsigned __int32 *)v1024)
  {
    int v1098 = *(unsigned __int32 **)a2;
    uint64_t v1099 = ((uint64_t)v1088 - *(void *)a2) >> 2;
    unint64_t v1100 = v1099 + 1;
    if ((unint64_t)(v1099 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1101 = v1024 - (char *)v1098;
    if (v1101 >> 1 > v1100) {
      unint64_t v1100 = v1101 >> 1;
    }
    if ((unint64_t)v1101 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1102 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1102 = v1100;
    }
    if (v1102)
    {
      uint64_t v1103 = (char *)sub_20B05D1AC((uint64_t)v13, v1102);
      int v1098 = *(unsigned __int32 **)a2;
      v1088 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1103 = 0;
    }
    unint64_t v1104 = &v1103[4 * v1099];
    v1024 = &v1103[4 * v1102];
    *(_DWORD *)unint64_t v1104 = a5.n128_u32[2];
    v1097 = (unsigned __int32 *)(v1104 + 4);
    while (v1088 != v1098)
    {
      int v1105 = *--v1088;
      *((_DWORD *)v1104 - 1) = v1105;
      v1104 -= 4;
    }
    *(void *)a2 = v1104;
    *(void *)(a2 + 8) = v1097;
    *(void *)(a2 + 16) = v1024;
    if (v1098)
    {
      operator delete(v1098);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1088 = a5.n128_u32[2];
    v1097 = v1088 + 1;
  }
  *long long v9 = v1097;
  if (v1097 >= (unsigned __int32 *)v1024)
  {
    int v1107 = *(unsigned __int32 **)a2;
    uint64_t v1108 = ((uint64_t)v1097 - *(void *)a2) >> 2;
    unint64_t v1109 = v1108 + 1;
    if ((unint64_t)(v1108 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1110 = v1024 - (char *)v1107;
    if (v1110 >> 1 > v1109) {
      unint64_t v1109 = v1110 >> 1;
    }
    if ((unint64_t)v1110 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1111 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1111 = v1109;
    }
    if (v1111)
    {
      uint64_t v1112 = (char *)sub_20B05D1AC((uint64_t)v13, v1111);
      int v1107 = *(unsigned __int32 **)a2;
      v1097 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1112 = 0;
    }
    unint64_t v1113 = &v1112[4 * v1108];
    v1024 = &v1112[4 * v1111];
    *(_DWORD *)unint64_t v1113 = a5.n128_u32[0];
    v1106 = (unsigned __int32 *)(v1113 + 4);
    while (v1097 != v1107)
    {
      int v1114 = *--v1097;
      *((_DWORD *)v1113 - 1) = v1114;
      v1113 -= 4;
    }
    *(void *)a2 = v1113;
    *(void *)(a2 + 8) = v1106;
    *(void *)(a2 + 16) = v1024;
    if (v1107)
    {
      operator delete(v1107);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1097 = a5.n128_u32[0];
    v1106 = v1097 + 1;
  }
  *long long v9 = v1106;
  if (v1106 >= (unsigned __int32 *)v1024)
  {
    v1116 = *(unsigned __int32 **)a2;
    uint64_t v1117 = ((uint64_t)v1106 - *(void *)a2) >> 2;
    unint64_t v1118 = v1117 + 1;
    if ((unint64_t)(v1117 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1119 = v1024 - (char *)v1116;
    if (v1119 >> 1 > v1118) {
      unint64_t v1118 = v1119 >> 1;
    }
    if ((unint64_t)v1119 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1120 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1120 = v1118;
    }
    if (v1120)
    {
      v1121 = (char *)sub_20B05D1AC((uint64_t)v13, v1120);
      v1116 = *(unsigned __int32 **)a2;
      v1106 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1121 = 0;
    }
    v1122 = (unsigned __int32 *)&v1121[4 * v1117];
    v1024 = &v1121[4 * v1120];
    unsigned __int32 *v1122 = v28;
    v1115 = v1122 + 1;
    while (v1106 != v1116)
    {
      unsigned __int32 v1123 = *--v1106;
      *--v1122 = v1123;
    }
    *(void *)a2 = v1122;
    *(void *)(a2 + 8) = v1115;
    *(void *)(a2 + 16) = v1024;
    if (v1116)
    {
      operator delete(v1116);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1106 = v28;
    v1115 = v1106 + 1;
  }
  *long long v9 = v1115;
  if (v1115 >= (unsigned __int32 *)v1024)
  {
    uint64_t v1125 = *(unsigned __int32 **)a2;
    uint64_t v1126 = ((uint64_t)v1115 - *(void *)a2) >> 2;
    unint64_t v1127 = v1126 + 1;
    if ((unint64_t)(v1126 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1128 = v1024 - (char *)v1125;
    if (v1128 >> 1 > v1127) {
      unint64_t v1127 = v1128 >> 1;
    }
    if ((unint64_t)v1128 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1129 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1129 = v1127;
    }
    if (v1129)
    {
      int v1130 = (char *)sub_20B05D1AC((uint64_t)v13, v1129);
      uint64_t v1125 = *(unsigned __int32 **)a2;
      v1115 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v1130 = 0;
    }
    v1131 = &v1130[4 * v1126];
    v1024 = &v1130[4 * v1129];
    *(_DWORD *)v1131 = a5.n128_u32[2];
    unint64_t v1124 = (unsigned __int32 *)(v1131 + 4);
    while (v1115 != v1125)
    {
      int v1132 = *--v1115;
      *((_DWORD *)v1131 - 1) = v1132;
      v1131 -= 4;
    }
    *(void *)a2 = v1131;
    *(void *)(a2 + 8) = v1124;
    *(void *)(a2 + 16) = v1024;
    if (v1125)
    {
      operator delete(v1125);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1115 = a5.n128_u32[2];
    unint64_t v1124 = v1115 + 1;
  }
  *long long v9 = v1124;
  if (v1124 >= (unsigned __int32 *)v1024)
  {
    unint64_t v1134 = *(unsigned __int32 **)a2;
    uint64_t v1135 = ((uint64_t)v1124 - *(void *)a2) >> 2;
    unint64_t v1136 = v1135 + 1;
    if ((unint64_t)(v1135 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1137 = v1024 - (char *)v1134;
    if (v1137 >> 1 > v1136) {
      unint64_t v1136 = v1137 >> 1;
    }
    if ((unint64_t)v1137 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1138 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1138 = v1136;
    }
    if (v1138)
    {
      int v1139 = (char *)sub_20B05D1AC((uint64_t)v13, v1138);
      unint64_t v1134 = *(unsigned __int32 **)a2;
      unint64_t v1124 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v1139 = 0;
    }
    int v1140 = &v1139[4 * v1135];
    v1024 = &v1139[4 * v1138];
    *(_DWORD *)int v1140 = v2149.n128_u32[0];
    uint64_t v1133 = (unsigned __int32 *)(v1140 + 4);
    while (v1124 != v1134)
    {
      int v1141 = *--v1124;
      *((_DWORD *)v1140 - 1) = v1141;
      v1140 -= 4;
    }
    *(void *)a2 = v1140;
    *(void *)(a2 + 8) = v1133;
    *(void *)(a2 + 16) = v1024;
    if (v1134)
    {
      operator delete(v1134);
      v1024 = *v13;
    }
  }
  else
  {
    *unint64_t v1124 = v2149.n128_u32[0];
    uint64_t v1133 = v1124 + 1;
  }
  *long long v9 = v1133;
  if (v1133 >= (unsigned __int32 *)v1024)
  {
    uint64_t v1143 = *(unsigned __int32 **)a2;
    uint64_t v1144 = ((uint64_t)v1133 - *(void *)a2) >> 2;
    unint64_t v1145 = v1144 + 1;
    if ((unint64_t)(v1144 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1146 = v1024 - (char *)v1143;
    if (v1146 >> 1 > v1145) {
      unint64_t v1145 = v1146 >> 1;
    }
    if ((unint64_t)v1146 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1147 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1147 = v1145;
    }
    if (v1147)
    {
      v1148 = (char *)sub_20B05D1AC((uint64_t)v13, v1147);
      uint64_t v1143 = *(unsigned __int32 **)a2;
      uint64_t v1133 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1148 = 0;
    }
    int v1149 = &v1148[4 * v1144];
    v1024 = &v1148[4 * v1147];
    *(_DWORD *)int v1149 = a5.n128_u32[1];
    v1142 = (unsigned __int32 *)(v1149 + 4);
    while (v1133 != v1143)
    {
      int v1150 = *--v1133;
      *((_DWORD *)v1149 - 1) = v1150;
      v1149 -= 4;
    }
    *(void *)a2 = v1149;
    *(void *)(a2 + 8) = v1142;
    *(void *)(a2 + 16) = v1024;
    if (v1143)
    {
      operator delete(v1143);
      v1024 = *v13;
    }
  }
  else
  {
    *uint64_t v1133 = a5.n128_u32[1];
    v1142 = v1133 + 1;
  }
  *long long v9 = v1142;
  if (v1142 >= (unsigned __int32 *)v1024)
  {
    uint64_t v1152 = *(unsigned __int32 **)a2;
    uint64_t v1153 = ((uint64_t)v1142 - *(void *)a2) >> 2;
    unint64_t v1154 = v1153 + 1;
    if ((unint64_t)(v1153 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1155 = v1024 - (char *)v1152;
    if (v1155 >> 1 > v1154) {
      unint64_t v1154 = v1155 >> 1;
    }
    if ((unint64_t)v1155 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1156 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1156 = v1154;
    }
    if (v1156)
    {
      v1157 = (char *)sub_20B05D1AC((uint64_t)v13, v1156);
      uint64_t v1152 = *(unsigned __int32 **)a2;
      v1142 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1157 = 0;
    }
    int v1158 = &v1157[4 * v1153];
    v1024 = &v1157[4 * v1156];
    *(_DWORD *)int v1158 = a5.n128_u32[2];
    v1151 = (unsigned __int32 *)(v1158 + 4);
    while (v1142 != v1152)
    {
      int v1159 = *--v1142;
      *((_DWORD *)v1158 - 1) = v1159;
      v1158 -= 4;
    }
    *(void *)a2 = v1158;
    *(void *)(a2 + 8) = v1151;
    *(void *)(a2 + 16) = v1024;
    if (v1152)
    {
      operator delete(v1152);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1142 = a5.n128_u32[2];
    v1151 = v1142 + 1;
  }
  *long long v9 = v1151;
  if (v1151 >= (unsigned __int32 *)v1024)
  {
    v1161 = *(unsigned __int32 **)a2;
    uint64_t v1162 = ((uint64_t)v1151 - *(void *)a2) >> 2;
    unint64_t v1163 = v1162 + 1;
    if ((unint64_t)(v1162 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1164 = v1024 - (char *)v1161;
    if (v1164 >> 1 > v1163) {
      unint64_t v1163 = v1164 >> 1;
    }
    if ((unint64_t)v1164 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1165 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1165 = v1163;
    }
    if (v1165)
    {
      unint64_t v1166 = (char *)sub_20B05D1AC((uint64_t)v13, v1165);
      v1161 = *(unsigned __int32 **)a2;
      v1151 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1166 = 0;
    }
    v1167 = &v1166[4 * v1162];
    v1024 = &v1166[4 * v1165];
    *(_DWORD *)v1167 = v2149.n128_u32[0];
    int v1160 = (unsigned __int32 *)(v1167 + 4);
    while (v1151 != v1161)
    {
      int v1168 = *--v1151;
      *((_DWORD *)v1167 - 1) = v1168;
      v1167 -= 4;
    }
    *(void *)a2 = v1167;
    *(void *)(a2 + 8) = v1160;
    *(void *)(a2 + 16) = v1024;
    if (v1161)
    {
      operator delete(v1161);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1151 = v2149.n128_u32[0];
    int v1160 = v1151 + 1;
  }
  *long long v9 = v1160;
  if (v1160 >= (unsigned __int32 *)v1024)
  {
    v1170 = *(unsigned __int32 **)a2;
    uint64_t v1171 = ((uint64_t)v1160 - *(void *)a2) >> 2;
    unint64_t v1172 = v1171 + 1;
    if ((unint64_t)(v1171 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1173 = v1024 - (char *)v1170;
    if (v1173 >> 1 > v1172) {
      unint64_t v1172 = v1173 >> 1;
    }
    if ((unint64_t)v1173 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1174 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1174 = v1172;
    }
    if (v1174)
    {
      unint64_t v1175 = (char *)sub_20B05D1AC((uint64_t)v13, v1174);
      v1170 = *(unsigned __int32 **)a2;
      int v1160 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1175 = 0;
    }
    v1176 = &v1175[4 * v1171];
    v1024 = &v1175[4 * v1174];
    *(_DWORD *)v1176 = a5.n128_u32[1];
    int v1169 = (unsigned __int32 *)(v1176 + 4);
    while (v1160 != v1170)
    {
      int v1177 = *--v1160;
      *((_DWORD *)v1176 - 1) = v1177;
      v1176 -= 4;
    }
    *(void *)a2 = v1176;
    *(void *)(a2 + 8) = v1169;
    *(void *)(a2 + 16) = v1024;
    if (v1170)
    {
      operator delete(v1170);
      v1024 = *v13;
    }
  }
  else
  {
    *int v1160 = a5.n128_u32[1];
    int v1169 = v1160 + 1;
  }
  *long long v9 = v1169;
  if (v1169 >= (unsigned __int32 *)v1024)
  {
    int v1179 = *(unsigned __int32 **)a2;
    uint64_t v1180 = ((uint64_t)v1169 - *(void *)a2) >> 2;
    unint64_t v1181 = v1180 + 1;
    if ((unint64_t)(v1180 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1182 = v1024 - (char *)v1179;
    if (v1182 >> 1 > v1181) {
      unint64_t v1181 = v1182 >> 1;
    }
    if ((unint64_t)v1182 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1183 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1183 = v1181;
    }
    if (v1183)
    {
      uint64_t v1184 = (char *)sub_20B05D1AC((uint64_t)v13, v1183);
      int v1179 = *(unsigned __int32 **)a2;
      int v1169 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1184 = 0;
    }
    unint64_t v1185 = &v1184[4 * v1180];
    v1024 = &v1184[4 * v1183];
    *(_DWORD *)unint64_t v1185 = a5.n128_u32[2];
    v1178 = (unsigned __int32 *)(v1185 + 4);
    while (v1169 != v1179)
    {
      int v1186 = *--v1169;
      *((_DWORD *)v1185 - 1) = v1186;
      v1185 -= 4;
    }
    *(void *)a2 = v1185;
    *(void *)(a2 + 8) = v1178;
    *(void *)(a2 + 16) = v1024;
    if (v1179)
    {
      operator delete(v1179);
      v1024 = *v13;
    }
  }
  else
  {
    *int v1169 = a5.n128_u32[2];
    v1178 = v1169 + 1;
  }
  *long long v9 = v1178;
  if (v1178 >= (unsigned __int32 *)v1024)
  {
    v1188 = *(unsigned __int32 **)a2;
    uint64_t v1189 = ((uint64_t)v1178 - *(void *)a2) >> 2;
    unint64_t v1190 = v1189 + 1;
    if ((unint64_t)(v1189 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1191 = v1024 - (char *)v1188;
    if (v1191 >> 1 > v1190) {
      unint64_t v1190 = v1191 >> 1;
    }
    if ((unint64_t)v1191 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1192 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1192 = v1190;
    }
    if (v1192)
    {
      uint64_t v1193 = (char *)sub_20B05D1AC((uint64_t)v13, v1192);
      v1188 = *(unsigned __int32 **)a2;
      v1178 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1193 = 0;
    }
    unint64_t v1194 = &v1193[4 * v1189];
    v1024 = &v1193[4 * v1192];
    *(_DWORD *)unint64_t v1194 = a5.n128_u32[0];
    unint64_t v1187 = (unsigned __int32 *)(v1194 + 4);
    while (v1178 != v1188)
    {
      int v1195 = *--v1178;
      *((_DWORD *)v1194 - 1) = v1195;
      v1194 -= 4;
    }
    *(void *)a2 = v1194;
    *(void *)(a2 + 8) = v1187;
    *(void *)(a2 + 16) = v1024;
    if (v1188)
    {
      operator delete(v1188);
      v1024 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1178 = a5.n128_u32[0];
    unint64_t v1187 = v1178 + 1;
  }
  *long long v9 = v1187;
  if (v1187 >= (unsigned __int32 *)v1024)
  {
    v1197 = *(unsigned __int32 **)a2;
    uint64_t v1198 = ((uint64_t)v1187 - *(void *)a2) >> 2;
    unint64_t v1199 = v1198 + 1;
    if ((unint64_t)(v1198 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1200 = v1024 - (char *)v1197;
    if (v1200 >> 1 > v1199) {
      unint64_t v1199 = v1200 >> 1;
    }
    if ((unint64_t)v1200 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1201 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1201 = v1199;
    }
    if (v1201)
    {
      uint64_t v1202 = (char *)sub_20B05D1AC((uint64_t)v13, v1201);
      v1197 = *(unsigned __int32 **)a2;
      unint64_t v1187 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1202 = 0;
    }
    unint64_t v1203 = &v1202[4 * v1198];
    v1024 = &v1202[4 * v1201];
    *(_DWORD *)unint64_t v1203 = a5.n128_u32[1];
    unint64_t v1196 = (unsigned __int32 *)(v1203 + 4);
    while (v1187 != v1197)
    {
      int v1204 = *--v1187;
      *((_DWORD *)v1203 - 1) = v1204;
      v1203 -= 4;
    }
    *(void *)a2 = v1203;
    *(void *)(a2 + 8) = v1196;
    *(void *)(a2 + 16) = v1024;
    if (v1197)
    {
      operator delete(v1197);
      v1024 = *v13;
    }
  }
  else
  {
    *unint64_t v1187 = a5.n128_u32[1];
    unint64_t v1196 = v1187 + 1;
  }
  *long long v9 = v1196;
  if (v1196 >= (unsigned __int32 *)v1024)
  {
    v1206 = *(unsigned __int32 **)a2;
    uint64_t v1207 = ((uint64_t)v1196 - *(void *)a2) >> 2;
    unint64_t v1208 = v1207 + 1;
    if ((unint64_t)(v1207 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1209 = v1024 - (char *)v1206;
    if (v1209 >> 1 > v1208) {
      unint64_t v1208 = v1209 >> 1;
    }
    if ((unint64_t)v1209 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1210 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1210 = v1208;
    }
    if (v1210)
    {
      uint64_t v1211 = (char *)sub_20B05D1AC((uint64_t)v13, v1210);
      v1206 = *(unsigned __int32 **)a2;
      unint64_t v1196 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1211 = 0;
    }
    unint64_t v1212 = &v1211[4 * v1207];
    v1024 = &v1211[4 * v1210];
    *(_DWORD *)unint64_t v1212 = a5.n128_u32[2];
    unint64_t v1205 = (unsigned __int32 *)(v1212 + 4);
    while (v1196 != v1206)
    {
      int v1213 = *--v1196;
      *((_DWORD *)v1212 - 1) = v1213;
      v1212 -= 4;
    }
    *(void *)a2 = v1212;
    *(void *)(a2 + 8) = v1205;
    *(void *)(a2 + 16) = v1024;
    if (v1206)
    {
      operator delete(v1206);
      v1024 = *v13;
    }
  }
  else
  {
    *unint64_t v1196 = a5.n128_u32[2];
    unint64_t v1205 = v1196 + 1;
  }
  *long long v9 = v1205;
  if (v1205 >= (unsigned __int32 *)v1024)
  {
    v1215 = *(unsigned __int32 **)a2;
    uint64_t v1216 = ((uint64_t)v1205 - *(void *)a2) >> 2;
    unint64_t v1217 = v1216 + 1;
    if ((unint64_t)(v1216 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1218 = v1024 - (char *)v1215;
    if (v1218 >> 1 > v1217) {
      unint64_t v1217 = v1218 >> 1;
    }
    if ((unint64_t)v1218 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1219 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1219 = v1217;
    }
    if (v1219)
    {
      uint64_t v1220 = (char *)sub_20B05D1AC((uint64_t)v13, v1219);
      v1215 = *(unsigned __int32 **)a2;
      unint64_t v1205 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1220 = 0;
    }
    unint64_t v1221 = &v1220[4 * v1216];
    v1024 = &v1220[4 * v1219];
    *(_DWORD *)unint64_t v1221 = a5.n128_u32[0];
    unint64_t v1214 = (unsigned __int32 *)(v1221 + 4);
    while (v1205 != v1215)
    {
      int v1222 = *--v1205;
      *((_DWORD *)v1221 - 1) = v1222;
      v1221 -= 4;
    }
    *(void *)a2 = v1221;
    *(void *)(a2 + 8) = v1214;
    *(void *)(a2 + 16) = v1024;
    if (v1215)
    {
      operator delete(v1215);
      v1024 = *v13;
    }
  }
  else
  {
    *unint64_t v1205 = a5.n128_u32[0];
    unint64_t v1214 = v1205 + 1;
  }
  *long long v9 = v1214;
  if (v1214 >= (unsigned __int32 *)v1024)
  {
    v1224 = *(unsigned __int32 **)a2;
    uint64_t v1225 = ((uint64_t)v1214 - *(void *)a2) >> 2;
    unint64_t v1226 = v1225 + 1;
    if ((unint64_t)(v1225 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1227 = v1024 - (char *)v1224;
    if (v1227 >> 1 > v1226) {
      unint64_t v1226 = v1227 >> 1;
    }
    if ((unint64_t)v1227 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1228 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1228 = v1226;
    }
    if (v1228)
    {
      uint64_t v1229 = (char *)sub_20B05D1AC((uint64_t)v13, v1228);
      v1224 = *(unsigned __int32 **)a2;
      unint64_t v1214 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1229 = 0;
    }
    unint64_t v1230 = &v1229[4 * v1225];
    v1024 = &v1229[4 * v1228];
    *(_DWORD *)unint64_t v1230 = a5.n128_u32[1];
    unint64_t v1223 = (unsigned __int32 *)(v1230 + 4);
    while (v1214 != v1224)
    {
      int v1231 = *--v1214;
      *((_DWORD *)v1230 - 1) = v1231;
      v1230 -= 4;
    }
    *(void *)a2 = v1230;
    *(void *)(a2 + 8) = v1223;
    *(void *)(a2 + 16) = v1024;
    if (v1224)
    {
      operator delete(v1224);
      v1024 = *v13;
    }
  }
  else
  {
    *unint64_t v1214 = a5.n128_u32[1];
    unint64_t v1223 = v1214 + 1;
  }
  *long long v9 = v1223;
  if (v1223 >= (unsigned __int32 *)v1024)
  {
    v1233 = *(unsigned __int32 **)a2;
    uint64_t v1234 = ((uint64_t)v1223 - *(void *)a2) >> 2;
    unint64_t v1235 = v1234 + 1;
    if ((unint64_t)(v1234 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1236 = v1024 - (char *)v1233;
    if (v1236 >> 1 > v1235) {
      unint64_t v1235 = v1236 >> 1;
    }
    if ((unint64_t)v1236 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1237 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1237 = v1235;
    }
    if (v1237)
    {
      uint64_t v1238 = (char *)sub_20B05D1AC((uint64_t)v13, v1237);
      v1233 = *(unsigned __int32 **)a2;
      unint64_t v1223 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1238 = 0;
    }
    unint64_t v1239 = &v1238[4 * v1234];
    uint64_t v1240 = &v1238[4 * v1237];
    *(_DWORD *)unint64_t v1239 = a5.n128_u32[2];
    unint64_t v1232 = (unsigned __int32 *)(v1239 + 4);
    while (v1223 != v1233)
    {
      int v1241 = *--v1223;
      *((_DWORD *)v1239 - 1) = v1241;
      v1239 -= 4;
    }
    *(void *)a2 = v1239;
    *(void *)(a2 + 8) = v1232;
    *(void *)(a2 + 16) = v1240;
    if (v1233) {
      operator delete(v1233);
    }
  }
  else
  {
    *unint64_t v1223 = a5.n128_u32[2];
    unint64_t v1232 = v1223 + 1;
  }
  *long long v9 = v1232;
  int v1242 = v448 + 8;
  int v1244 = a3[1];
  v1243 = a3[2];
  if (v1244 >= v1243)
  {
    v1246 = *a3;
    uint64_t v1247 = (v1244 - *a3) >> 2;
    unint64_t v1248 = v1247 + 1;
    if ((unint64_t)(v1247 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1249 = v1243 - v1246;
    if (v1249 >> 1 > v1248) {
      unint64_t v1248 = v1249 >> 1;
    }
    if ((unint64_t)v1249 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1250 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1250 = v1248;
    }
    if (v1250)
    {
      v1251 = (char *)sub_20B05D1AC((uint64_t)v1002, v1250);
      v1246 = *a3;
      int v1244 = a3[1];
    }
    else
    {
      v1251 = 0;
    }
    v1252 = &v1251[4 * v1247];
    v1243 = &v1251[4 * v1250];
    *(_DWORD *)v1252 = v1242;
    v1245 = v1252 + 4;
    while (v1244 != v1246)
    {
      int v1253 = *((_DWORD *)v1244 - 1);
      v1244 -= 4;
      *((_DWORD *)v1252 - 1) = v1253;
      v1252 -= 4;
    }
    *a3 = v1252;
    a3[1] = v1245;
    a3[2] = v1243;
    if (v1246)
    {
      operator delete(v1246);
      v1243 = *v1002;
    }
  }
  else
  {
    *(_DWORD *)int v1244 = v1242;
    v1245 = v1244 + 4;
  }
  a3[1] = v1245;
  int v1254 = v448 + 9;
  if (v1245 >= v1243)
  {
    uint64_t v1256 = *a3;
    uint64_t v1257 = (v1245 - *a3) >> 2;
    unint64_t v1258 = v1257 + 1;
    if ((unint64_t)(v1257 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1259 = v1243 - v1256;
    if (v1259 >> 1 > v1258) {
      unint64_t v1258 = v1259 >> 1;
    }
    if ((unint64_t)v1259 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1260 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1260 = v1258;
    }
    if (v1260)
    {
      v1261 = (char *)sub_20B05D1AC((uint64_t)v1002, v1260);
      uint64_t v1256 = *a3;
      v1245 = a3[1];
    }
    else
    {
      v1261 = 0;
    }
    int v1262 = &v1261[4 * v1257];
    v1243 = &v1261[4 * v1260];
    *(_DWORD *)int v1262 = v1254;
    v1255 = v1262 + 4;
    while (v1245 != v1256)
    {
      int v1263 = *((_DWORD *)v1245 - 1);
      v1245 -= 4;
      *((_DWORD *)v1262 - 1) = v1263;
      v1262 -= 4;
    }
    *a3 = v1262;
    a3[1] = v1255;
    a3[2] = v1243;
    if (v1256)
    {
      operator delete(v1256);
      v1243 = *v1002;
    }
  }
  else
  {
    *(_DWORD *)v1245 = v1254;
    v1255 = v1245 + 4;
  }
  a3[1] = v1255;
  int v1264 = v448 + 10;
  if (v1255 >= v1243)
  {
    unint64_t v1266 = *a3;
    uint64_t v1267 = (v1255 - *a3) >> 2;
    unint64_t v1268 = v1267 + 1;
    if ((unint64_t)(v1267 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1269 = v1243 - v1266;
    if (v1269 >> 1 > v1268) {
      unint64_t v1268 = v1269 >> 1;
    }
    if ((unint64_t)v1269 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1270 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1270 = v1268;
    }
    if (v1270)
    {
      int v1271 = (char *)sub_20B05D1AC((uint64_t)v1002, v1270);
      unint64_t v1266 = *a3;
      v1255 = a3[1];
    }
    else
    {
      int v1271 = 0;
    }
    v1272 = &v1271[4 * v1267];
    v1243 = &v1271[4 * v1270];
    *(_DWORD *)v1272 = v1264;
    uint64_t v1265 = v1272 + 4;
    while (v1255 != v1266)
    {
      int v1273 = *((_DWORD *)v1255 - 1);
      v1255 -= 4;
      *((_DWORD *)v1272 - 1) = v1273;
      v1272 -= 4;
    }
    *a3 = v1272;
    a3[1] = v1265;
    a3[2] = v1243;
    if (v1266)
    {
      operator delete(v1266);
      v1243 = *v2148;
    }
  }
  else
  {
    *(_DWORD *)v1255 = v1264;
    uint64_t v1265 = v1255 + 4;
  }
  a3[1] = v1265;
  if (v1265 >= v1243)
  {
    unint64_t v1275 = *a3;
    uint64_t v1276 = (v1265 - *a3) >> 2;
    unint64_t v1277 = v1276 + 1;
    if ((unint64_t)(v1276 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1278 = v1243 - v1275;
    if (v1278 >> 1 > v1277) {
      unint64_t v1277 = v1278 >> 1;
    }
    if ((unint64_t)v1278 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1279 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1279 = v1277;
    }
    if (v1279)
    {
      unsigned __int32 v1280 = (char *)sub_20B05D1AC((uint64_t)v2148, v1279);
      unint64_t v1275 = *a3;
      uint64_t v1265 = a3[1];
    }
    else
    {
      unsigned __int32 v1280 = 0;
    }
    v1281 = &v1280[4 * v1276];
    v1243 = &v1280[4 * v1279];
    *(_DWORD *)v1281 = v1254;
    uint64_t v1274 = v1281 + 4;
    while (v1265 != v1275)
    {
      int v1282 = *((_DWORD *)v1265 - 1);
      v1265 -= 4;
      *((_DWORD *)v1281 - 1) = v1282;
      v1281 -= 4;
    }
    *a3 = v1281;
    a3[1] = v1274;
    a3[2] = v1243;
    if (v1275)
    {
      operator delete(v1275);
      uint64_t v1283 = a3 + 2;
      v1243 = *v2148;
      goto LABEL_2184;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v1265 = v1254;
    uint64_t v1274 = v1265 + 4;
  }
  uint64_t v1283 = a3 + 2;
LABEL_2184:
  a3[1] = v1274;
  int v1284 = v448 + 11;
  if (v1274 >= v1243)
  {
    unint64_t v1286 = *a3;
    uint64_t v1287 = (v1274 - *a3) >> 2;
    unint64_t v1288 = v1287 + 1;
    if ((unint64_t)(v1287 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1289 = v1243 - v1286;
    if (v1289 >> 1 > v1288) {
      unint64_t v1288 = v1289 >> 1;
    }
    if ((unint64_t)v1289 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1290 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1290 = v1288;
    }
    if (v1290)
    {
      int v1291 = (char *)sub_20B05D1AC((uint64_t)v1283, v1290);
      unint64_t v1286 = *a3;
      uint64_t v1274 = a3[1];
    }
    else
    {
      int v1291 = 0;
    }
    v1292 = &v1291[4 * v1287];
    v1243 = &v1291[4 * v1290];
    *(_DWORD *)v1292 = v1284;
    uint64_t v1285 = v1292 + 4;
    while (v1274 != v1286)
    {
      int v1293 = *((_DWORD *)v1274 - 1);
      v1274 -= 4;
      *((_DWORD *)v1292 - 1) = v1293;
      v1292 -= 4;
    }
    *a3 = v1292;
    a3[1] = v1285;
    a3[2] = v1243;
    if (v1286)
    {
      operator delete(v1286);
      v1243 = *v1283;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v1274 = v1284;
    uint64_t v1285 = v1274 + 4;
  }
  a3[1] = v1285;
  if (v1285 >= v1243)
  {
    v1295 = *a3;
    uint64_t v1296 = (v1285 - *a3) >> 2;
    unint64_t v1297 = v1296 + 1;
    if ((unint64_t)(v1296 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1298 = v1243 - v1295;
    if (v1298 >> 1 > v1297) {
      unint64_t v1297 = v1298 >> 1;
    }
    if ((unint64_t)v1298 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1299 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1299 = v1297;
    }
    if (v1299)
    {
      v1300 = (char *)sub_20B05D1AC((uint64_t)v1283, v1299);
      v1295 = *a3;
      uint64_t v1285 = a3[1];
    }
    else
    {
      v1300 = 0;
    }
    v1301 = &v1300[4 * v1296];
    int v1302 = &v1300[4 * v1299];
    *(_DWORD *)v1301 = v1264;
    v1294 = v1301 + 4;
    while (v1285 != v1295)
    {
      int v1303 = *((_DWORD *)v1285 - 1);
      v1285 -= 4;
      *((_DWORD *)v1301 - 1) = v1303;
      v1301 -= 4;
    }
    *a3 = v1301;
    a3[1] = v1294;
    a3[2] = v1302;
    if (v1295) {
      operator delete(v1295);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v1285 = v1264;
    v1294 = v1285 + 4;
  }
  a3[1] = v1294;
  v1304 = *v9;
  v1305 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    unint64_t v1307 = *(unsigned __int32 **)a2;
    uint64_t v1308 = ((uint64_t)v1304 - *(void *)a2) >> 2;
    unint64_t v1309 = v1308 + 1;
    if ((unint64_t)(v1308 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1310 = v1305 - (char *)v1307;
    if (v1310 >> 1 > v1309) {
      unint64_t v1309 = v1310 >> 1;
    }
    if ((unint64_t)v1310 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1311 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1311 = v1309;
    }
    if (v1311)
    {
      int v1312 = (char *)sub_20B05D1AC((uint64_t)v13, v1311);
      unint64_t v1307 = *(unsigned __int32 **)a2;
      v1304 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v1312 = 0;
    }
    int v1313 = &v1312[4 * v1308];
    v1305 = &v1312[4 * v1311];
    *(_DWORD *)int v1313 = a5.n128_u32[0];
    uint64_t v1306 = (unsigned __int32 *)(v1313 + 4);
    while (v1304 != v1307)
    {
      int v1314 = *--v1304;
      *((_DWORD *)v1313 - 1) = v1314;
      v1313 -= 4;
    }
    *(void *)a2 = v1313;
    *(void *)(a2 + 8) = v1306;
    *(void *)(a2 + 16) = v1305;
    if (v1307)
    {
      operator delete(v1307);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1304 = a5.n128_u32[0];
    uint64_t v1306 = v1304 + 1;
  }
  *long long v9 = v1306;
  if (v1306 >= (unsigned __int32 *)v1305)
  {
    uint64_t v1316 = *(unsigned __int32 **)a2;
    uint64_t v1317 = ((uint64_t)v1306 - *(void *)a2) >> 2;
    unint64_t v1318 = v1317 + 1;
    if ((unint64_t)(v1317 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1319 = v1305 - (char *)v1316;
    if (v1319 >> 1 > v1318) {
      unint64_t v1318 = v1319 >> 1;
    }
    if ((unint64_t)v1319 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1320 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1320 = v1318;
    }
    if (v1320)
    {
      v1321 = (char *)sub_20B05D1AC((uint64_t)v13, v1320);
      uint64_t v1316 = *(unsigned __int32 **)a2;
      uint64_t v1306 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1321 = 0;
    }
    int v1322 = (unsigned __int32 *)&v1321[4 * v1317];
    v1305 = &v1321[4 * v1320];
    *int v1322 = v28;
    v1315 = v1322 + 1;
    while (v1306 != v1316)
    {
      unsigned __int32 v1323 = *--v1306;
      *--int v1322 = v1323;
    }
    *(void *)a2 = v1322;
    *(void *)(a2 + 8) = v1315;
    *(void *)(a2 + 16) = v1305;
    if (v1316)
    {
      operator delete(v1316);
      v1305 = *v13;
    }
  }
  else
  {
    *uint64_t v1306 = v28;
    v1315 = v1306 + 1;
  }
  *long long v9 = v1315;
  if (v1315 >= (unsigned __int32 *)v1305)
  {
    uint64_t v1325 = *(unsigned __int32 **)a2;
    uint64_t v1326 = ((uint64_t)v1315 - *(void *)a2) >> 2;
    unint64_t v1327 = v1326 + 1;
    if ((unint64_t)(v1326 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1328 = v1305 - (char *)v1325;
    if (v1328 >> 1 > v1327) {
      unint64_t v1327 = v1328 >> 1;
    }
    if ((unint64_t)v1328 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1329 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1329 = v1327;
    }
    if (v1329)
    {
      v1330 = (char *)sub_20B05D1AC((uint64_t)v13, v1329);
      uint64_t v1325 = *(unsigned __int32 **)a2;
      v1315 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1330 = 0;
    }
    int v1331 = (unsigned __int32 *)&v1330[4 * v1326];
    v1305 = &v1330[4 * v1329];
    *int v1331 = v48;
    v1324 = v1331 + 1;
    while (v1315 != v1325)
    {
      unsigned __int32 v1332 = *--v1315;
      *--int v1331 = v1332;
    }
    *(void *)a2 = v1331;
    *(void *)(a2 + 8) = v1324;
    *(void *)(a2 + 16) = v1305;
    if (v1325)
    {
      operator delete(v1325);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1315 = v48;
    v1324 = v1315 + 1;
  }
  *long long v9 = v1324;
  if (v1324 >= (unsigned __int32 *)v1305)
  {
    uint64_t v1334 = *(unsigned __int32 **)a2;
    uint64_t v1335 = ((uint64_t)v1324 - *(void *)a2) >> 2;
    unint64_t v1336 = v1335 + 1;
    if ((unint64_t)(v1335 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1337 = v1305 - (char *)v1334;
    if (v1337 >> 1 > v1336) {
      unint64_t v1336 = v1337 >> 1;
    }
    if ((unint64_t)v1337 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1338 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1338 = v1336;
    }
    if (v1338)
    {
      v1339 = (char *)sub_20B05D1AC((uint64_t)v13, v1338);
      uint64_t v1334 = *(unsigned __int32 **)a2;
      v1324 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1339 = 0;
    }
    int v1340 = &v1339[4 * v1335];
    v1305 = &v1339[4 * v1338];
    *(_DWORD *)int v1340 = a5.n128_u32[0];
    v1333 = (unsigned __int32 *)(v1340 + 4);
    while (v1324 != v1334)
    {
      int v1341 = *--v1324;
      *((_DWORD *)v1340 - 1) = v1341;
      v1340 -= 4;
    }
    *(void *)a2 = v1340;
    *(void *)(a2 + 8) = v1333;
    *(void *)(a2 + 16) = v1305;
    if (v1334)
    {
      operator delete(v1334);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1324 = a5.n128_u32[0];
    v1333 = v1324 + 1;
  }
  *long long v9 = v1333;
  if (v1333 >= (unsigned __int32 *)v1305)
  {
    v1343 = *(unsigned __int32 **)a2;
    uint64_t v1344 = ((uint64_t)v1333 - *(void *)a2) >> 2;
    unint64_t v1345 = v1344 + 1;
    if ((unint64_t)(v1344 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1346 = v1305 - (char *)v1343;
    if (v1346 >> 1 > v1345) {
      unint64_t v1345 = v1346 >> 1;
    }
    if ((unint64_t)v1346 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1347 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1347 = v1345;
    }
    if (v1347)
    {
      v1348 = (char *)sub_20B05D1AC((uint64_t)v13, v1347);
      v1343 = *(unsigned __int32 **)a2;
      v1333 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1348 = 0;
    }
    v1349 = (unsigned __int32 *)&v1348[4 * v1344];
    v1305 = &v1348[4 * v1347];
    unsigned __int32 *v1349 = v28;
    v1342 = v1349 + 1;
    while (v1333 != v1343)
    {
      unsigned __int32 v1350 = *--v1333;
      *--v1349 = v1350;
    }
    *(void *)a2 = v1349;
    *(void *)(a2 + 8) = v1342;
    *(void *)(a2 + 16) = v1305;
    if (v1343)
    {
      operator delete(v1343);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1333 = v28;
    v1342 = v1333 + 1;
  }
  *long long v9 = v1342;
  if (v1342 >= (unsigned __int32 *)v1305)
  {
    v1352 = *(unsigned __int32 **)a2;
    uint64_t v1353 = ((uint64_t)v1342 - *(void *)a2) >> 2;
    unint64_t v1354 = v1353 + 1;
    if ((unint64_t)(v1353 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1355 = v1305 - (char *)v1352;
    if (v1355 >> 1 > v1354) {
      unint64_t v1354 = v1355 >> 1;
    }
    if ((unint64_t)v1355 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1356 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1356 = v1354;
    }
    if (v1356)
    {
      unint64_t v1357 = (char *)sub_20B05D1AC((uint64_t)v13, v1356);
      v1352 = *(unsigned __int32 **)a2;
      v1342 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1357 = 0;
    }
    uint64_t v1358 = (unsigned __int32 *)&v1357[4 * v1353];
    v1305 = &v1357[4 * v1356];
    *uint64_t v1358 = v48;
    int v1351 = v1358 + 1;
    while (v1342 != v1352)
    {
      unsigned __int32 v1359 = *--v1342;
      *--uint64_t v1358 = v1359;
    }
    *(void *)a2 = v1358;
    *(void *)(a2 + 8) = v1351;
    *(void *)(a2 + 16) = v1305;
    if (v1352)
    {
      operator delete(v1352);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1342 = v48;
    int v1351 = v1342 + 1;
  }
  *long long v9 = v1351;
  if (v1351 >= (unsigned __int32 *)v1305)
  {
    v1361 = *(unsigned __int32 **)a2;
    uint64_t v1362 = ((uint64_t)v1351 - *(void *)a2) >> 2;
    unint64_t v1363 = v1362 + 1;
    if ((unint64_t)(v1362 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1364 = v1305 - (char *)v1361;
    if (v1364 >> 1 > v1363) {
      unint64_t v1363 = v1364 >> 1;
    }
    if ((unint64_t)v1364 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1365 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1365 = v1363;
    }
    if (v1365)
    {
      unint64_t v1366 = (char *)sub_20B05D1AC((uint64_t)v13, v1365);
      v1361 = *(unsigned __int32 **)a2;
      int v1351 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1366 = 0;
    }
    uint64_t v1367 = &v1366[4 * v1362];
    v1305 = &v1366[4 * v1365];
    *(_DWORD *)uint64_t v1367 = a5.n128_u32[0];
    v1360 = (unsigned __int32 *)(v1367 + 4);
    while (v1351 != v1361)
    {
      int v1368 = *--v1351;
      *((_DWORD *)v1367 - 1) = v1368;
      v1367 -= 4;
    }
    *(void *)a2 = v1367;
    *(void *)(a2 + 8) = v1360;
    *(void *)(a2 + 16) = v1305;
    if (v1361)
    {
      operator delete(v1361);
      v1305 = *v13;
    }
  }
  else
  {
    *int v1351 = a5.n128_u32[0];
    v1360 = v1351 + 1;
  }
  *long long v9 = v1360;
  if (v1360 >= (unsigned __int32 *)v1305)
  {
    v1370 = *(unsigned __int32 **)a2;
    uint64_t v1371 = ((uint64_t)v1360 - *(void *)a2) >> 2;
    unint64_t v1372 = v1371 + 1;
    if ((unint64_t)(v1371 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1373 = v1305 - (char *)v1370;
    if (v1373 >> 1 > v1372) {
      unint64_t v1372 = v1373 >> 1;
    }
    if ((unint64_t)v1373 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1374 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1374 = v1372;
    }
    if (v1374)
    {
      unint64_t v1375 = (char *)sub_20B05D1AC((uint64_t)v13, v1374);
      v1370 = *(unsigned __int32 **)a2;
      v1360 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1375 = 0;
    }
    uint64_t v1376 = &v1375[4 * v1371];
    v1305 = &v1375[4 * v1374];
    *(_DWORD *)uint64_t v1376 = a5.n128_u32[1];
    v1369 = (unsigned __int32 *)(v1376 + 4);
    while (v1360 != v1370)
    {
      int v1377 = *--v1360;
      *((_DWORD *)v1376 - 1) = v1377;
      v1376 -= 4;
    }
    *(void *)a2 = v1376;
    *(void *)(a2 + 8) = v1369;
    *(void *)(a2 + 16) = v1305;
    if (v1370)
    {
      operator delete(v1370);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1360 = a5.n128_u32[1];
    v1369 = v1360 + 1;
  }
  *long long v9 = v1369;
  if (v1369 >= (unsigned __int32 *)v1305)
  {
    v1379 = *(unsigned __int32 **)a2;
    uint64_t v1380 = ((uint64_t)v1369 - *(void *)a2) >> 2;
    unint64_t v1381 = v1380 + 1;
    if ((unint64_t)(v1380 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1382 = v1305 - (char *)v1379;
    if (v1382 >> 1 > v1381) {
      unint64_t v1381 = v1382 >> 1;
    }
    if ((unint64_t)v1382 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1383 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1383 = v1381;
    }
    if (v1383)
    {
      unint64_t v1384 = (char *)sub_20B05D1AC((uint64_t)v13, v1383);
      v1379 = *(unsigned __int32 **)a2;
      v1369 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1384 = 0;
    }
    uint64_t v1385 = (unsigned __int32 *)&v1384[4 * v1380];
    v1305 = &v1384[4 * v1383];
    *uint64_t v1385 = v48;
    v1378 = v1385 + 1;
    while (v1369 != v1379)
    {
      unsigned __int32 v1386 = *--v1369;
      *--uint64_t v1385 = v1386;
    }
    *(void *)a2 = v1385;
    *(void *)(a2 + 8) = v1378;
    *(void *)(a2 + 16) = v1305;
    if (v1379)
    {
      operator delete(v1379);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1369 = v48;
    v1378 = v1369 + 1;
  }
  *long long v9 = v1378;
  if (v1378 >= (unsigned __int32 *)v1305)
  {
    v1388 = *(unsigned __int32 **)a2;
    uint64_t v1389 = ((uint64_t)v1378 - *(void *)a2) >> 2;
    unint64_t v1390 = v1389 + 1;
    if ((unint64_t)(v1389 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1391 = v1305 - (char *)v1388;
    if (v1391 >> 1 > v1390) {
      unint64_t v1390 = v1391 >> 1;
    }
    if ((unint64_t)v1391 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1392 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1392 = v1390;
    }
    if (v1392)
    {
      unint64_t v1393 = (char *)sub_20B05D1AC((uint64_t)v13, v1392);
      v1388 = *(unsigned __int32 **)a2;
      v1378 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1393 = 0;
    }
    uint64_t v1394 = &v1393[4 * v1389];
    v1305 = &v1393[4 * v1392];
    *(_DWORD *)uint64_t v1394 = a5.n128_u32[0];
    v1387 = (unsigned __int32 *)(v1394 + 4);
    while (v1378 != v1388)
    {
      int v1395 = *--v1378;
      *((_DWORD *)v1394 - 1) = v1395;
      v1394 -= 4;
    }
    *(void *)a2 = v1394;
    *(void *)(a2 + 8) = v1387;
    *(void *)(a2 + 16) = v1305;
    if (v1388)
    {
      operator delete(v1388);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1378 = a5.n128_u32[0];
    v1387 = v1378 + 1;
  }
  *long long v9 = v1387;
  if (v1387 >= (unsigned __int32 *)v1305)
  {
    v1397 = *(unsigned __int32 **)a2;
    uint64_t v1398 = ((uint64_t)v1387 - *(void *)a2) >> 2;
    unint64_t v1399 = v1398 + 1;
    if ((unint64_t)(v1398 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1400 = v1305 - (char *)v1397;
    if (v1400 >> 1 > v1399) {
      unint64_t v1399 = v1400 >> 1;
    }
    if ((unint64_t)v1400 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1401 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1401 = v1399;
    }
    if (v1401)
    {
      unint64_t v1402 = (char *)sub_20B05D1AC((uint64_t)v13, v1401);
      v1397 = *(unsigned __int32 **)a2;
      v1387 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1402 = 0;
    }
    uint64_t v1403 = &v1402[4 * v1398];
    v1305 = &v1402[4 * v1401];
    *(_DWORD *)uint64_t v1403 = a5.n128_u32[1];
    v1396 = (unsigned __int32 *)(v1403 + 4);
    while (v1387 != v1397)
    {
      int v1404 = *--v1387;
      *((_DWORD *)v1403 - 1) = v1404;
      v1403 -= 4;
    }
    *(void *)a2 = v1403;
    *(void *)(a2 + 8) = v1396;
    *(void *)(a2 + 16) = v1305;
    if (v1397)
    {
      operator delete(v1397);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1387 = a5.n128_u32[1];
    v1396 = v1387 + 1;
  }
  *long long v9 = v1396;
  if (v1396 >= (unsigned __int32 *)v1305)
  {
    v1406 = *(unsigned __int32 **)a2;
    uint64_t v1407 = ((uint64_t)v1396 - *(void *)a2) >> 2;
    unint64_t v1408 = v1407 + 1;
    if ((unint64_t)(v1407 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1409 = v1305 - (char *)v1406;
    if (v1409 >> 1 > v1408) {
      unint64_t v1408 = v1409 >> 1;
    }
    if ((unint64_t)v1409 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1410 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1410 = v1408;
    }
    if (v1410)
    {
      uint64_t v1411 = (char *)sub_20B05D1AC((uint64_t)v13, v1410);
      v1406 = *(unsigned __int32 **)a2;
      v1396 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1411 = 0;
    }
    unint64_t v1412 = (unsigned __int32 *)&v1411[4 * v1407];
    v1305 = &v1411[4 * v1410];
    *unint64_t v1412 = v48;
    v1405 = v1412 + 1;
    while (v1396 != v1406)
    {
      unsigned __int32 v1413 = *--v1396;
      *--unint64_t v1412 = v1413;
    }
    *(void *)a2 = v1412;
    *(void *)(a2 + 8) = v1405;
    *(void *)(a2 + 16) = v1305;
    if (v1406)
    {
      operator delete(v1406);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1396 = v48;
    v1405 = v1396 + 1;
  }
  *long long v9 = v1405;
  if (v1405 >= (unsigned __int32 *)v1305)
  {
    v1415 = *(unsigned __int32 **)a2;
    uint64_t v1416 = ((uint64_t)v1405 - *(void *)a2) >> 2;
    unint64_t v1417 = v1416 + 1;
    if ((unint64_t)(v1416 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1418 = v1305 - (char *)v1415;
    if (v1418 >> 1 > v1417) {
      unint64_t v1417 = v1418 >> 1;
    }
    if ((unint64_t)v1418 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1419 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1419 = v1417;
    }
    if (v1419)
    {
      v1420 = (char *)sub_20B05D1AC((uint64_t)v13, v1419);
      v1415 = *(unsigned __int32 **)a2;
      v1405 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1420 = 0;
    }
    uint64_t v1421 = &v1420[4 * v1416];
    v1305 = &v1420[4 * v1419];
    *(_DWORD *)uint64_t v1421 = a5.n128_u32[0];
    unint64_t v1414 = (unsigned __int32 *)(v1421 + 4);
    while (v1405 != v1415)
    {
      int v1422 = *--v1405;
      *((_DWORD *)v1421 - 1) = v1422;
      v1421 -= 4;
    }
    *(void *)a2 = v1421;
    *(void *)(a2 + 8) = v1414;
    *(void *)(a2 + 16) = v1305;
    if (v1415)
    {
      operator delete(v1415);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1405 = a5.n128_u32[0];
    unint64_t v1414 = v1405 + 1;
  }
  *long long v9 = v1414;
  if (v1414 >= (unsigned __int32 *)v1305)
  {
    unint64_t v1424 = *(unsigned __int32 **)a2;
    uint64_t v1425 = ((uint64_t)v1414 - *(void *)a2) >> 2;
    unint64_t v1426 = v1425 + 1;
    if ((unint64_t)(v1425 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1427 = v1305 - (char *)v1424;
    if (v1427 >> 1 > v1426) {
      unint64_t v1426 = v1427 >> 1;
    }
    if ((unint64_t)v1427 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1428 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1428 = v1426;
    }
    if (v1428)
    {
      v1429 = (char *)sub_20B05D1AC((uint64_t)v13, v1428);
      unint64_t v1424 = *(unsigned __int32 **)a2;
      unint64_t v1414 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1429 = 0;
    }
    uint64_t v1430 = (unsigned __int32 *)&v1429[4 * v1425];
    v1305 = &v1429[4 * v1428];
    *uint64_t v1430 = v28;
    uint64_t v1423 = v1430 + 1;
    while (v1414 != v1424)
    {
      unsigned __int32 v1431 = *--v1414;
      *--uint64_t v1430 = v1431;
    }
    *(void *)a2 = v1430;
    *(void *)(a2 + 8) = v1423;
    *(void *)(a2 + 16) = v1305;
    if (v1424)
    {
      operator delete(v1424);
      v1305 = *v13;
    }
  }
  else
  {
    *unint64_t v1414 = v28;
    uint64_t v1423 = v1414 + 1;
  }
  *long long v9 = v1423;
  if (v1423 >= (unsigned __int32 *)v1305)
  {
    unint64_t v1433 = *(unsigned __int32 **)a2;
    uint64_t v1434 = ((uint64_t)v1423 - *(void *)a2) >> 2;
    unint64_t v1435 = v1434 + 1;
    if ((unint64_t)(v1434 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1436 = v1305 - (char *)v1433;
    if (v1436 >> 1 > v1435) {
      unint64_t v1435 = v1436 >> 1;
    }
    if ((unint64_t)v1436 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1437 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1437 = v1435;
    }
    if (v1437)
    {
      v1438 = (char *)sub_20B05D1AC((uint64_t)v13, v1437);
      unint64_t v1433 = *(unsigned __int32 **)a2;
      uint64_t v1423 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1438 = 0;
    }
    uint64_t v1439 = &v1438[4 * v1434];
    v1305 = &v1438[4 * v1437];
    *(_DWORD *)uint64_t v1439 = a5.n128_u32[2];
    uint64_t v1432 = (unsigned __int32 *)(v1439 + 4);
    while (v1423 != v1433)
    {
      int v1440 = *--v1423;
      *((_DWORD *)v1439 - 1) = v1440;
      v1439 -= 4;
    }
    *(void *)a2 = v1439;
    *(void *)(a2 + 8) = v1432;
    *(void *)(a2 + 16) = v1305;
    if (v1433)
    {
      operator delete(v1433);
      v1305 = *v13;
    }
  }
  else
  {
    *uint64_t v1423 = a5.n128_u32[2];
    uint64_t v1432 = v1423 + 1;
  }
  *long long v9 = v1432;
  if (v1432 >= (unsigned __int32 *)v1305)
  {
    unint64_t v1442 = *(unsigned __int32 **)a2;
    uint64_t v1443 = ((uint64_t)v1432 - *(void *)a2) >> 2;
    unint64_t v1444 = v1443 + 1;
    if ((unint64_t)(v1443 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1445 = v1305 - (char *)v1442;
    if (v1445 >> 1 > v1444) {
      unint64_t v1444 = v1445 >> 1;
    }
    if ((unint64_t)v1445 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1446 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1446 = v1444;
    }
    if (v1446)
    {
      v1447 = (char *)sub_20B05D1AC((uint64_t)v13, v1446);
      unint64_t v1442 = *(unsigned __int32 **)a2;
      uint64_t v1432 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1447 = 0;
    }
    uint64_t v1448 = &v1447[4 * v1443];
    v1305 = &v1447[4 * v1446];
    *(_DWORD *)uint64_t v1448 = a5.n128_u32[0];
    uint64_t v1441 = (unsigned __int32 *)(v1448 + 4);
    while (v1432 != v1442)
    {
      int v1449 = *--v1432;
      *((_DWORD *)v1448 - 1) = v1449;
      v1448 -= 4;
    }
    *(void *)a2 = v1448;
    *(void *)(a2 + 8) = v1441;
    *(void *)(a2 + 16) = v1305;
    if (v1442)
    {
      operator delete(v1442);
      v1305 = *v13;
    }
  }
  else
  {
    *uint64_t v1432 = a5.n128_u32[0];
    uint64_t v1441 = v1432 + 1;
  }
  *long long v9 = v1441;
  if (v1441 >= (unsigned __int32 *)v1305)
  {
    unint64_t v1451 = *(unsigned __int32 **)a2;
    uint64_t v1452 = ((uint64_t)v1441 - *(void *)a2) >> 2;
    unint64_t v1453 = v1452 + 1;
    if ((unint64_t)(v1452 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1454 = v1305 - (char *)v1451;
    if (v1454 >> 1 > v1453) {
      unint64_t v1453 = v1454 >> 1;
    }
    if ((unint64_t)v1454 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1455 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1455 = v1453;
    }
    if (v1455)
    {
      v1456 = (char *)sub_20B05D1AC((uint64_t)v13, v1455);
      unint64_t v1451 = *(unsigned __int32 **)a2;
      uint64_t v1441 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1456 = 0;
    }
    uint64_t v1457 = (unsigned __int32 *)&v1456[4 * v1452];
    v1305 = &v1456[4 * v1455];
    *uint64_t v1457 = v28;
    uint64_t v1450 = v1457 + 1;
    while (v1441 != v1451)
    {
      unsigned __int32 v1458 = *--v1441;
      *--uint64_t v1457 = v1458;
    }
    *(void *)a2 = v1457;
    *(void *)(a2 + 8) = v1450;
    *(void *)(a2 + 16) = v1305;
    if (v1451)
    {
      operator delete(v1451);
      v1305 = *v13;
    }
  }
  else
  {
    *uint64_t v1441 = v28;
    uint64_t v1450 = v1441 + 1;
  }
  *long long v9 = v1450;
  if (v1450 >= (unsigned __int32 *)v1305)
  {
    unint64_t v1460 = *(unsigned __int32 **)a2;
    uint64_t v1461 = ((uint64_t)v1450 - *(void *)a2) >> 2;
    unint64_t v1462 = v1461 + 1;
    if ((unint64_t)(v1461 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1463 = v1305 - (char *)v1460;
    if (v1463 >> 1 > v1462) {
      unint64_t v1462 = v1463 >> 1;
    }
    if ((unint64_t)v1463 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1464 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1464 = v1462;
    }
    if (v1464)
    {
      int v1465 = (char *)sub_20B05D1AC((uint64_t)v13, v1464);
      unint64_t v1460 = *(unsigned __int32 **)a2;
      uint64_t v1450 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      int v1465 = 0;
    }
    v1466 = &v1465[4 * v1461];
    v1305 = &v1465[4 * v1464];
    *(_DWORD *)v1466 = a5.n128_u32[2];
    uint64_t v1459 = (unsigned __int32 *)(v1466 + 4);
    while (v1450 != v1460)
    {
      int v1467 = *--v1450;
      *((_DWORD *)v1466 - 1) = v1467;
      v1466 -= 4;
    }
    *(void *)a2 = v1466;
    *(void *)(a2 + 8) = v1459;
    *(void *)(a2 + 16) = v1305;
    if (v1460)
    {
      operator delete(v1460);
      v1305 = *v13;
    }
  }
  else
  {
    *uint64_t v1450 = a5.n128_u32[2];
    uint64_t v1459 = v1450 + 1;
  }
  *long long v9 = v1459;
  if (v1459 >= (unsigned __int32 *)v1305)
  {
    v1469 = *(unsigned __int32 **)a2;
    uint64_t v1470 = ((uint64_t)v1459 - *(void *)a2) >> 2;
    unint64_t v1471 = v1470 + 1;
    if ((unint64_t)(v1470 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1472 = v1305 - (char *)v1469;
    if (v1472 >> 1 > v1471) {
      unint64_t v1471 = v1472 >> 1;
    }
    if ((unint64_t)v1472 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1473 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1473 = v1471;
    }
    if (v1473)
    {
      v1474 = (char *)sub_20B05D1AC((uint64_t)v13, v1473);
      v1469 = *(unsigned __int32 **)a2;
      uint64_t v1459 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1474 = 0;
    }
    v1475 = &v1474[4 * v1470];
    v1305 = &v1474[4 * v1473];
    *(_DWORD *)v1475 = a5.n128_u32[0];
    v1468 = (unsigned __int32 *)(v1475 + 4);
    while (v1459 != v1469)
    {
      int v1476 = *--v1459;
      *((_DWORD *)v1475 - 1) = v1476;
      v1475 -= 4;
    }
    *(void *)a2 = v1475;
    *(void *)(a2 + 8) = v1468;
    *(void *)(a2 + 16) = v1305;
    if (v1469)
    {
      operator delete(v1469);
      v1305 = *v13;
    }
  }
  else
  {
    *uint64_t v1459 = a5.n128_u32[0];
    v1468 = v1459 + 1;
  }
  *long long v9 = v1468;
  if (v1468 >= (unsigned __int32 *)v1305)
  {
    v1478 = *(unsigned __int32 **)a2;
    uint64_t v1479 = ((uint64_t)v1468 - *(void *)a2) >> 2;
    unint64_t v1480 = v1479 + 1;
    if ((unint64_t)(v1479 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1481 = v1305 - (char *)v1478;
    if (v1481 >> 1 > v1480) {
      unint64_t v1480 = v1481 >> 1;
    }
    if ((unint64_t)v1481 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1482 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1482 = v1480;
    }
    if (v1482)
    {
      unint64_t v1483 = (char *)sub_20B05D1AC((uint64_t)v13, v1482);
      v1478 = *(unsigned __int32 **)a2;
      v1468 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1483 = 0;
    }
    v1484 = &v1483[4 * v1479];
    v1305 = &v1483[4 * v1482];
    *(_DWORD *)v1484 = a5.n128_u32[1];
    int v1477 = (unsigned __int32 *)(v1484 + 4);
    while (v1468 != v1478)
    {
      int v1485 = *--v1468;
      *((_DWORD *)v1484 - 1) = v1485;
      v1484 -= 4;
    }
    *(void *)a2 = v1484;
    *(void *)(a2 + 8) = v1477;
    *(void *)(a2 + 16) = v1305;
    if (v1478)
    {
      operator delete(v1478);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1468 = a5.n128_u32[1];
    int v1477 = v1468 + 1;
  }
  *long long v9 = v1477;
  if (v1477 >= (unsigned __int32 *)v1305)
  {
    int v1487 = *(unsigned __int32 **)a2;
    uint64_t v1488 = ((uint64_t)v1477 - *(void *)a2) >> 2;
    unint64_t v1489 = v1488 + 1;
    if ((unint64_t)(v1488 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1490 = v1305 - (char *)v1487;
    if (v1490 >> 1 > v1489) {
      unint64_t v1489 = v1490 >> 1;
    }
    if ((unint64_t)v1490 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1491 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1491 = v1489;
    }
    if (v1491)
    {
      uint64_t v1492 = (char *)sub_20B05D1AC((uint64_t)v13, v1491);
      int v1487 = *(unsigned __int32 **)a2;
      int v1477 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1492 = 0;
    }
    unint64_t v1493 = &v1492[4 * v1488];
    v1305 = &v1492[4 * v1491];
    *(_DWORD *)unint64_t v1493 = a5.n128_u32[2];
    int v1486 = (unsigned __int32 *)(v1493 + 4);
    while (v1477 != v1487)
    {
      int v1494 = *--v1477;
      *((_DWORD *)v1493 - 1) = v1494;
      v1493 -= 4;
    }
    *(void *)a2 = v1493;
    *(void *)(a2 + 8) = v1486;
    *(void *)(a2 + 16) = v1305;
    if (v1487)
    {
      operator delete(v1487);
      v1305 = *v13;
    }
  }
  else
  {
    *int v1477 = a5.n128_u32[2];
    int v1486 = v1477 + 1;
  }
  *long long v9 = v1486;
  if (v1486 >= (unsigned __int32 *)v1305)
  {
    int v1496 = *(unsigned __int32 **)a2;
    uint64_t v1497 = ((uint64_t)v1486 - *(void *)a2) >> 2;
    unint64_t v1498 = v1497 + 1;
    if ((unint64_t)(v1497 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1499 = v1305 - (char *)v1496;
    if (v1499 >> 1 > v1498) {
      unint64_t v1498 = v1499 >> 1;
    }
    if ((unint64_t)v1499 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1500 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1500 = v1498;
    }
    if (v1500)
    {
      uint64_t v1501 = (char *)sub_20B05D1AC((uint64_t)v13, v1500);
      int v1496 = *(unsigned __int32 **)a2;
      int v1486 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1501 = 0;
    }
    unint64_t v1502 = &v1501[4 * v1497];
    v1305 = &v1501[4 * v1500];
    *(_DWORD *)unint64_t v1502 = a5.n128_u32[0];
    v1495 = (unsigned __int32 *)(v1502 + 4);
    while (v1486 != v1496)
    {
      int v1503 = *--v1486;
      *((_DWORD *)v1502 - 1) = v1503;
      v1502 -= 4;
    }
    *(void *)a2 = v1502;
    *(void *)(a2 + 8) = v1495;
    *(void *)(a2 + 16) = v1305;
    if (v1496)
    {
      operator delete(v1496);
      v1305 = *v13;
    }
  }
  else
  {
    *int v1486 = a5.n128_u32[0];
    v1495 = v1486 + 1;
  }
  *long long v9 = v1495;
  if (v1495 >= (unsigned __int32 *)v1305)
  {
    int v1505 = *(unsigned __int32 **)a2;
    uint64_t v1506 = ((uint64_t)v1495 - *(void *)a2) >> 2;
    unint64_t v1507 = v1506 + 1;
    if ((unint64_t)(v1506 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1508 = v1305 - (char *)v1505;
    if (v1508 >> 1 > v1507) {
      unint64_t v1507 = v1508 >> 1;
    }
    if ((unint64_t)v1508 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1509 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1509 = v1507;
    }
    if (v1509)
    {
      uint64_t v1510 = (char *)sub_20B05D1AC((uint64_t)v13, v1509);
      int v1505 = *(unsigned __int32 **)a2;
      v1495 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      uint64_t v1510 = 0;
    }
    unint64_t v1511 = &v1510[4 * v1506];
    v1305 = &v1510[4 * v1509];
    *(_DWORD *)unint64_t v1511 = a5.n128_u32[1];
    v1504 = (unsigned __int32 *)(v1511 + 4);
    while (v1495 != v1505)
    {
      int v1512 = *--v1495;
      *((_DWORD *)v1511 - 1) = v1512;
      v1511 -= 4;
    }
    *(void *)a2 = v1511;
    *(void *)(a2 + 8) = v1504;
    *(void *)(a2 + 16) = v1305;
    if (v1505)
    {
      operator delete(v1505);
      v1305 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1495 = a5.n128_u32[1];
    v1504 = v1495 + 1;
  }
  *long long v9 = v1504;
  if (v1504 >= (unsigned __int32 *)v1305)
  {
    int v1514 = *(unsigned __int32 **)a2;
    uint64_t v1515 = ((uint64_t)v1504 - *(void *)a2) >> 2;
    unint64_t v1516 = v1515 + 1;
    if ((unint64_t)(v1515 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1517 = v1305 - (char *)v1514;
    if (v1517 >> 1 > v1516) {
      unint64_t v1516 = v1517 >> 1;
    }
    if ((unint64_t)v1517 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1518 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1518 = v1516;
    }
    if (v1518)
    {
      unint64_t v1519 = (char *)sub_20B05D1AC((uint64_t)v13, v1518);
      int v1514 = *(unsigned __int32 **)a2;
      v1504 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      unint64_t v1519 = 0;
    }
    uint64_t v1520 = &v1519[4 * v1515];
    unint64_t v1521 = &v1519[4 * v1518];
    *(_DWORD *)uint64_t v1520 = a5.n128_u32[2];
    v1513 = (unsigned __int32 *)(v1520 + 4);
    while (v1504 != v1514)
    {
      int v1522 = *--v1504;
      *((_DWORD *)v1520 - 1) = v1522;
      v1520 -= 4;
    }
    *(void *)a2 = v1520;
    *(void *)(a2 + 8) = v1513;
    *(void *)(a2 + 16) = v1521;
    if (v1514) {
      operator delete(v1514);
    }
  }
  else
  {
    unsigned __int32 *v1504 = a5.n128_u32[2];
    v1513 = v1504 + 1;
  }
  *long long v9 = v1513;
  int v1523 = v448 + 12;
  int v1525 = a3[1];
  v1524 = a3[2];
  if (v1525 >= v1524)
  {
    __n128 v1527 = *a3;
    uint64_t v1528 = (v1525 - *a3) >> 2;
    unint64_t v1529 = v1528 + 1;
    if ((unint64_t)(v1528 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1530 = v1524 - v1527;
    if (v1530 >> 1 > v1529) {
      unint64_t v1529 = v1530 >> 1;
    }
    if ((unint64_t)v1530 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1531 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1531 = v1529;
    }
    if (v1531)
    {
      v1532 = (char *)sub_20B05D1AC((uint64_t)v1283, v1531);
      __n128 v1527 = *a3;
      int v1525 = a3[1];
    }
    else
    {
      v1532 = 0;
    }
    v1533 = &v1532[4 * v1528];
    v1524 = &v1532[4 * v1531];
    *(_DWORD *)v1533 = v1523;
    v1526 = v1533 + 4;
    while (v1525 != v1527)
    {
      int v1534 = *((_DWORD *)v1525 - 1);
      v1525 -= 4;
      *((_DWORD *)v1533 - 1) = v1534;
      v1533 -= 4;
    }
    *a3 = v1533;
    a3[1] = v1526;
    a3[2] = v1524;
    if (v1527)
    {
      operator delete(v1527);
      v1524 = *v1283;
    }
  }
  else
  {
    *(_DWORD *)int v1525 = v1523;
    v1526 = v1525 + 4;
  }
  a3[1] = v1526;
  int v1535 = v448 + 15;
  if (v1526 >= v1524)
  {
    v1537 = *a3;
    uint64_t v1538 = (v1526 - *a3) >> 2;
    unint64_t v1539 = v1538 + 1;
    if ((unint64_t)(v1538 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1540 = v1524 - v1537;
    if (v1540 >> 1 > v1539) {
      unint64_t v1539 = v1540 >> 1;
    }
    if ((unint64_t)v1540 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1541 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1541 = v1539;
    }
    if (v1541)
    {
      v1542 = (char *)sub_20B05D1AC((uint64_t)v1283, v1541);
      v1537 = *a3;
      v1526 = a3[1];
    }
    else
    {
      v1542 = 0;
    }
    v1543 = &v1542[4 * v1538];
    v1524 = &v1542[4 * v1541];
    *(_DWORD *)v1543 = v1535;
    v1536 = v1543 + 4;
    while (v1526 != v1537)
    {
      int v1544 = *((_DWORD *)v1526 - 1);
      v1526 -= 4;
      *((_DWORD *)v1543 - 1) = v1544;
      v1543 -= 4;
    }
    *a3 = v1543;
    a3[1] = v1536;
    a3[2] = v1524;
    if (v1537)
    {
      operator delete(v1537);
      v1524 = *v1283;
    }
  }
  else
  {
    *(_DWORD *)v1526 = v1535;
    v1536 = v1526 + 4;
  }
  a3[1] = v1536;
  int v1545 = v448 + 14;
  if (v1536 >= v1524)
  {
    v1547 = *a3;
    uint64_t v1548 = (v1536 - *a3) >> 2;
    unint64_t v1549 = v1548 + 1;
    if ((unint64_t)(v1548 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1550 = v1524 - v1547;
    if (v1550 >> 1 > v1549) {
      unint64_t v1549 = v1550 >> 1;
    }
    if ((unint64_t)v1550 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1551 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1551 = v1549;
    }
    if (v1551)
    {
      v1552 = (char *)sub_20B05D1AC((uint64_t)v2148, v1551);
      v1547 = *a3;
      v1536 = a3[1];
    }
    else
    {
      v1552 = 0;
    }
    v1553 = &v1552[4 * v1548];
    v1524 = &v1552[4 * v1551];
    *(_DWORD *)v1553 = v1545;
    v1546 = v1553 + 4;
    while (v1536 != v1547)
    {
      int v1554 = *((_DWORD *)v1536 - 1);
      v1536 -= 4;
      *((_DWORD *)v1553 - 1) = v1554;
      v1553 -= 4;
    }
    *a3 = v1553;
    a3[1] = v1546;
    a3[2] = v1524;
    if (v1547)
    {
      operator delete(v1547);
      v1524 = *v2148;
    }
  }
  else
  {
    *(_DWORD *)v1536 = v1545;
    v1546 = v1536 + 4;
  }
  a3[1] = v1546;
  if (v1546 >= v1524)
  {
    v1556 = *a3;
    uint64_t v1557 = (v1546 - *a3) >> 2;
    unint64_t v1558 = v1557 + 1;
    if ((unint64_t)(v1557 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1559 = v1524 - v1556;
    if (v1559 >> 1 > v1558) {
      unint64_t v1558 = v1559 >> 1;
    }
    if ((unint64_t)v1559 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1560 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1560 = v1558;
    }
    if (v1560)
    {
      v1561 = (char *)sub_20B05D1AC((uint64_t)v2148, v1560);
      v1556 = *a3;
      v1546 = a3[1];
    }
    else
    {
      v1561 = 0;
    }
    v1562 = &v1561[4 * v1557];
    v1524 = &v1561[4 * v1560];
    *(_DWORD *)v1562 = v1523;
    v1555 = v1562 + 4;
    while (v1546 != v1556)
    {
      int v1563 = *((_DWORD *)v1546 - 1);
      v1546 -= 4;
      *((_DWORD *)v1562 - 1) = v1563;
      v1562 -= 4;
    }
    *a3 = v1562;
    a3[1] = v1555;
    a3[2] = v1524;
    if (v1556)
    {
      operator delete(v1556);
      v1564 = a3 + 2;
      v1524 = *v2148;
      goto LABEL_2665;
    }
  }
  else
  {
    *(_DWORD *)v1546 = v1523;
    v1555 = v1546 + 4;
  }
  v1564 = a3 + 2;
LABEL_2665:
  a3[1] = v1555;
  int v1565 = v448 + 13;
  if (v1555 >= v1524)
  {
    v1567 = *a3;
    uint64_t v1568 = (v1555 - *a3) >> 2;
    unint64_t v1569 = v1568 + 1;
    if ((unint64_t)(v1568 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1570 = v1524 - v1567;
    if (v1570 >> 1 > v1569) {
      unint64_t v1569 = v1570 >> 1;
    }
    if ((unint64_t)v1570 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1571 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1571 = v1569;
    }
    if (v1571)
    {
      v1572 = (char *)sub_20B05D1AC((uint64_t)v1564, v1571);
      v1567 = *a3;
      v1555 = a3[1];
    }
    else
    {
      v1572 = 0;
    }
    v1573 = &v1572[4 * v1568];
    v1524 = &v1572[4 * v1571];
    *(_DWORD *)v1573 = v1565;
    v1566 = v1573 + 4;
    while (v1555 != v1567)
    {
      int v1574 = *((_DWORD *)v1555 - 1);
      v1555 -= 4;
      *((_DWORD *)v1573 - 1) = v1574;
      v1573 -= 4;
    }
    *a3 = v1573;
    a3[1] = v1566;
    a3[2] = v1524;
    if (v1567)
    {
      operator delete(v1567);
      v1524 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1555 = v1565;
    v1566 = v1555 + 4;
  }
  a3[1] = v1566;
  if (v1566 >= v1524)
  {
    v1576 = *a3;
    uint64_t v1577 = (v1566 - *a3) >> 2;
    unint64_t v1578 = v1577 + 1;
    if ((unint64_t)(v1577 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1579 = v1524 - v1576;
    if (v1579 >> 1 > v1578) {
      unint64_t v1578 = v1579 >> 1;
    }
    if ((unint64_t)v1579 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1580 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1580 = v1578;
    }
    if (v1580)
    {
      v1581 = (char *)sub_20B05D1AC((uint64_t)v1564, v1580);
      v1576 = *a3;
      v1566 = a3[1];
    }
    else
    {
      v1581 = 0;
    }
    v1582 = &v1581[4 * v1577];
    v1583 = &v1581[4 * v1580];
    *(_DWORD *)v1582 = v1535;
    v1575 = v1582 + 4;
    while (v1566 != v1576)
    {
      int v1584 = *((_DWORD *)v1566 - 1);
      v1566 -= 4;
      *((_DWORD *)v1582 - 1) = v1584;
      v1582 -= 4;
    }
    *a3 = v1582;
    a3[1] = v1575;
    a3[2] = v1583;
    if (v1576) {
      operator delete(v1576);
    }
  }
  else
  {
    *(_DWORD *)v1566 = v1535;
    v1575 = v1566 + 4;
  }
  a3[1] = v1575;
  v1585 = *v9;
  v1586 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1588 = *(unsigned __int32 **)a2;
    uint64_t v1589 = ((uint64_t)v1585 - *(void *)a2) >> 2;
    unint64_t v1590 = v1589 + 1;
    if ((unint64_t)(v1589 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1591 = v1586 - (char *)v1588;
    if (v1591 >> 1 > v1590) {
      unint64_t v1590 = v1591 >> 1;
    }
    if ((unint64_t)v1591 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1592 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1592 = v1590;
    }
    if (v1592)
    {
      v1593 = (char *)sub_20B05D1AC((uint64_t)v13, v1592);
      v1588 = *(unsigned __int32 **)a2;
      v1585 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1593 = 0;
    }
    v1594 = &v1593[4 * v1589];
    v1586 = &v1593[4 * v1592];
    *(_DWORD *)v1594 = v2149.n128_u32[0];
    v1587 = (unsigned __int32 *)(v1594 + 4);
    while (v1585 != v1588)
    {
      int v1595 = *--v1585;
      *((_DWORD *)v1594 - 1) = v1595;
      v1594 -= 4;
    }
    *(void *)a2 = v1594;
    *(void *)(a2 + 8) = v1587;
    *(void *)(a2 + 16) = v1586;
    if (v1588)
    {
      operator delete(v1588);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1585 = v2149.n128_u32[0];
    v1587 = v1585 + 1;
  }
  *long long v9 = v1587;
  if (v1587 >= (unsigned __int32 *)v1586)
  {
    v1597 = *(unsigned __int32 **)a2;
    uint64_t v1598 = ((uint64_t)v1587 - *(void *)a2) >> 2;
    unint64_t v1599 = v1598 + 1;
    if ((unint64_t)(v1598 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1600 = v1586 - (char *)v1597;
    if (v1600 >> 1 > v1599) {
      unint64_t v1599 = v1600 >> 1;
    }
    if ((unint64_t)v1600 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1601 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1601 = v1599;
    }
    if (v1601)
    {
      v1602 = (char *)sub_20B05D1AC((uint64_t)v13, v1601);
      v1597 = *(unsigned __int32 **)a2;
      v1587 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1602 = 0;
    }
    v1603 = (unsigned __int32 *)&v1602[4 * v1598];
    v1586 = &v1602[4 * v1601];
    unsigned __int32 *v1603 = v28;
    v1596 = v1603 + 1;
    while (v1587 != v1597)
    {
      unsigned __int32 v1604 = *--v1587;
      *--v1603 = v1604;
    }
    *(void *)a2 = v1603;
    *(void *)(a2 + 8) = v1596;
    *(void *)(a2 + 16) = v1586;
    if (v1597)
    {
      operator delete(v1597);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1587 = v28;
    v1596 = v1587 + 1;
  }
  *long long v9 = v1596;
  if (v1596 >= (unsigned __int32 *)v1586)
  {
    v1606 = *(unsigned __int32 **)a2;
    uint64_t v1607 = ((uint64_t)v1596 - *(void *)a2) >> 2;
    unint64_t v1608 = v1607 + 1;
    if ((unint64_t)(v1607 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1609 = v1586 - (char *)v1606;
    if (v1609 >> 1 > v1608) {
      unint64_t v1608 = v1609 >> 1;
    }
    if ((unint64_t)v1609 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1610 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1610 = v1608;
    }
    if (v1610)
    {
      v1611 = (char *)sub_20B05D1AC((uint64_t)v13, v1610);
      v1606 = *(unsigned __int32 **)a2;
      v1596 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1611 = 0;
    }
    v1612 = (unsigned __int32 *)&v1611[4 * v1607];
    v1586 = &v1611[4 * v1610];
    unsigned __int32 *v1612 = v48;
    v1605 = v1612 + 1;
    while (v1596 != v1606)
    {
      unsigned __int32 v1613 = *--v1596;
      *--v1612 = v1613;
    }
    *(void *)a2 = v1612;
    *(void *)(a2 + 8) = v1605;
    *(void *)(a2 + 16) = v1586;
    if (v1606)
    {
      operator delete(v1606);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1596 = v48;
    v1605 = v1596 + 1;
  }
  *long long v9 = v1605;
  if (v1605 >= (unsigned __int32 *)v1586)
  {
    v1615 = *(unsigned __int32 **)a2;
    uint64_t v1616 = ((uint64_t)v1605 - *(void *)a2) >> 2;
    unint64_t v1617 = v1616 + 1;
    if ((unint64_t)(v1616 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1618 = v1586 - (char *)v1615;
    if (v1618 >> 1 > v1617) {
      unint64_t v1617 = v1618 >> 1;
    }
    if ((unint64_t)v1618 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1619 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1619 = v1617;
    }
    if (v1619)
    {
      v1620 = (char *)sub_20B05D1AC((uint64_t)v13, v1619);
      v1615 = *(unsigned __int32 **)a2;
      v1605 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1620 = 0;
    }
    v1621 = &v1620[4 * v1616];
    v1586 = &v1620[4 * v1619];
    *(_DWORD *)v1621 = v2149.n128_u32[0];
    v1614 = (unsigned __int32 *)(v1621 + 4);
    while (v1605 != v1615)
    {
      int v1622 = *--v1605;
      *((_DWORD *)v1621 - 1) = v1622;
      v1621 -= 4;
    }
    *(void *)a2 = v1621;
    *(void *)(a2 + 8) = v1614;
    *(void *)(a2 + 16) = v1586;
    if (v1615)
    {
      operator delete(v1615);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1605 = v2149.n128_u32[0];
    v1614 = v1605 + 1;
  }
  *long long v9 = v1614;
  if (v1614 >= (unsigned __int32 *)v1586)
  {
    v1624 = *(unsigned __int32 **)a2;
    uint64_t v1625 = ((uint64_t)v1614 - *(void *)a2) >> 2;
    unint64_t v1626 = v1625 + 1;
    if ((unint64_t)(v1625 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1627 = v1586 - (char *)v1624;
    if (v1627 >> 1 > v1626) {
      unint64_t v1626 = v1627 >> 1;
    }
    if ((unint64_t)v1627 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1628 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1628 = v1626;
    }
    if (v1628)
    {
      v1629 = (char *)sub_20B05D1AC((uint64_t)v13, v1628);
      v1624 = *(unsigned __int32 **)a2;
      v1614 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1629 = 0;
    }
    v1630 = (unsigned __int32 *)&v1629[4 * v1625];
    v1586 = &v1629[4 * v1628];
    unsigned __int32 *v1630 = v28;
    v1623 = v1630 + 1;
    while (v1614 != v1624)
    {
      unsigned __int32 v1631 = *--v1614;
      *--v1630 = v1631;
    }
    *(void *)a2 = v1630;
    *(void *)(a2 + 8) = v1623;
    *(void *)(a2 + 16) = v1586;
    if (v1624)
    {
      operator delete(v1624);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1614 = v28;
    v1623 = v1614 + 1;
  }
  *long long v9 = v1623;
  if (v1623 >= (unsigned __int32 *)v1586)
  {
    v1633 = *(unsigned __int32 **)a2;
    uint64_t v1634 = ((uint64_t)v1623 - *(void *)a2) >> 2;
    unint64_t v1635 = v1634 + 1;
    if ((unint64_t)(v1634 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1636 = v1586 - (char *)v1633;
    if (v1636 >> 1 > v1635) {
      unint64_t v1635 = v1636 >> 1;
    }
    if ((unint64_t)v1636 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1637 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1637 = v1635;
    }
    if (v1637)
    {
      v1638 = (char *)sub_20B05D1AC((uint64_t)v13, v1637);
      v1633 = *(unsigned __int32 **)a2;
      v1623 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1638 = 0;
    }
    v1639 = (unsigned __int32 *)&v1638[4 * v1634];
    v1586 = &v1638[4 * v1637];
    unsigned __int32 *v1639 = v48;
    v1632 = v1639 + 1;
    while (v1623 != v1633)
    {
      unsigned __int32 v1640 = *--v1623;
      *--v1639 = v1640;
    }
    *(void *)a2 = v1639;
    *(void *)(a2 + 8) = v1632;
    *(void *)(a2 + 16) = v1586;
    if (v1633)
    {
      operator delete(v1633);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1623 = v48;
    v1632 = v1623 + 1;
  }
  *long long v9 = v1632;
  if (v1632 >= (unsigned __int32 *)v1586)
  {
    v1642 = *(unsigned __int32 **)a2;
    uint64_t v1643 = ((uint64_t)v1632 - *(void *)a2) >> 2;
    unint64_t v1644 = v1643 + 1;
    if ((unint64_t)(v1643 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1645 = v1586 - (char *)v1642;
    if (v1645 >> 1 > v1644) {
      unint64_t v1644 = v1645 >> 1;
    }
    if ((unint64_t)v1645 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1646 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1646 = v1644;
    }
    if (v1646)
    {
      v1647 = (char *)sub_20B05D1AC((uint64_t)v13, v1646);
      v1642 = *(unsigned __int32 **)a2;
      v1632 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1647 = 0;
    }
    v1648 = &v1647[4 * v1643];
    v1586 = &v1647[4 * v1646];
    *(_DWORD *)v1648 = a5.n128_u32[0];
    v1641 = (unsigned __int32 *)(v1648 + 4);
    while (v1632 != v1642)
    {
      int v1649 = *--v1632;
      *((_DWORD *)v1648 - 1) = v1649;
      v1648 -= 4;
    }
    *(void *)a2 = v1648;
    *(void *)(a2 + 8) = v1641;
    *(void *)(a2 + 16) = v1586;
    if (v1642)
    {
      operator delete(v1642);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1632 = a5.n128_u32[0];
    v1641 = v1632 + 1;
  }
  *long long v9 = v1641;
  if (v1641 >= (unsigned __int32 *)v1586)
  {
    v1651 = *(unsigned __int32 **)a2;
    uint64_t v1652 = ((uint64_t)v1641 - *(void *)a2) >> 2;
    unint64_t v1653 = v1652 + 1;
    if ((unint64_t)(v1652 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1654 = v1586 - (char *)v1651;
    if (v1654 >> 1 > v1653) {
      unint64_t v1653 = v1654 >> 1;
    }
    if ((unint64_t)v1654 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1655 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1655 = v1653;
    }
    if (v1655)
    {
      v1656 = (char *)sub_20B05D1AC((uint64_t)v13, v1655);
      v1651 = *(unsigned __int32 **)a2;
      v1641 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1656 = 0;
    }
    v1657 = (unsigned __int32 *)&v1656[4 * v1652];
    v1586 = &v1656[4 * v1655];
    unsigned __int32 *v1657 = v28;
    v1650 = v1657 + 1;
    while (v1641 != v1651)
    {
      unsigned __int32 v1658 = *--v1641;
      *--v1657 = v1658;
    }
    *(void *)a2 = v1657;
    *(void *)(a2 + 8) = v1650;
    *(void *)(a2 + 16) = v1586;
    if (v1651)
    {
      operator delete(v1651);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1641 = v28;
    v1650 = v1641 + 1;
  }
  *long long v9 = v1650;
  if (v1650 >= (unsigned __int32 *)v1586)
  {
    v1660 = *(unsigned __int32 **)a2;
    uint64_t v1661 = ((uint64_t)v1650 - *(void *)a2) >> 2;
    unint64_t v1662 = v1661 + 1;
    if ((unint64_t)(v1661 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1663 = v1586 - (char *)v1660;
    if (v1663 >> 1 > v1662) {
      unint64_t v1662 = v1663 >> 1;
    }
    if ((unint64_t)v1663 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1664 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1664 = v1662;
    }
    if (v1664)
    {
      v1665 = (char *)sub_20B05D1AC((uint64_t)v13, v1664);
      v1660 = *(unsigned __int32 **)a2;
      v1650 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1665 = 0;
    }
    v1666 = (unsigned __int32 *)&v1665[4 * v1661];
    v1586 = &v1665[4 * v1664];
    unsigned __int32 *v1666 = v48;
    v1659 = v1666 + 1;
    while (v1650 != v1660)
    {
      unsigned __int32 v1667 = *--v1650;
      *--v1666 = v1667;
    }
    *(void *)a2 = v1666;
    *(void *)(a2 + 8) = v1659;
    *(void *)(a2 + 16) = v1586;
    if (v1660)
    {
      operator delete(v1660);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1650 = v48;
    v1659 = v1650 + 1;
  }
  *long long v9 = v1659;
  if (v1659 >= (unsigned __int32 *)v1586)
  {
    v1669 = *(unsigned __int32 **)a2;
    uint64_t v1670 = ((uint64_t)v1659 - *(void *)a2) >> 2;
    unint64_t v1671 = v1670 + 1;
    if ((unint64_t)(v1670 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1672 = v1586 - (char *)v1669;
    if (v1672 >> 1 > v1671) {
      unint64_t v1671 = v1672 >> 1;
    }
    if ((unint64_t)v1672 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1673 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1673 = v1671;
    }
    if (v1673)
    {
      v1674 = (char *)sub_20B05D1AC((uint64_t)v13, v1673);
      v1669 = *(unsigned __int32 **)a2;
      v1659 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1674 = 0;
    }
    v1675 = &v1674[4 * v1670];
    v1586 = &v1674[4 * v1673];
    *(_DWORD *)v1675 = a5.n128_u32[0];
    v1668 = (unsigned __int32 *)(v1675 + 4);
    while (v1659 != v1669)
    {
      int v1676 = *--v1659;
      *((_DWORD *)v1675 - 1) = v1676;
      v1675 -= 4;
    }
    *(void *)a2 = v1675;
    *(void *)(a2 + 8) = v1668;
    *(void *)(a2 + 16) = v1586;
    if (v1669)
    {
      operator delete(v1669);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1659 = a5.n128_u32[0];
    v1668 = v1659 + 1;
  }
  *long long v9 = v1668;
  if (v1668 >= (unsigned __int32 *)v1586)
  {
    v1678 = *(unsigned __int32 **)a2;
    uint64_t v1679 = ((uint64_t)v1668 - *(void *)a2) >> 2;
    unint64_t v1680 = v1679 + 1;
    if ((unint64_t)(v1679 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1681 = v1586 - (char *)v1678;
    if (v1681 >> 1 > v1680) {
      unint64_t v1680 = v1681 >> 1;
    }
    if ((unint64_t)v1681 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1682 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1682 = v1680;
    }
    if (v1682)
    {
      v1683 = (char *)sub_20B05D1AC((uint64_t)v13, v1682);
      v1678 = *(unsigned __int32 **)a2;
      v1668 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1683 = 0;
    }
    v1684 = (unsigned __int32 *)&v1683[4 * v1679];
    v1586 = &v1683[4 * v1682];
    unsigned __int32 *v1684 = v28;
    v1677 = v1684 + 1;
    while (v1668 != v1678)
    {
      unsigned __int32 v1685 = *--v1668;
      *--v1684 = v1685;
    }
    *(void *)a2 = v1684;
    *(void *)(a2 + 8) = v1677;
    *(void *)(a2 + 16) = v1586;
    if (v1678)
    {
      operator delete(v1678);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1668 = v28;
    v1677 = v1668 + 1;
  }
  *long long v9 = v1677;
  if (v1677 >= (unsigned __int32 *)v1586)
  {
    v1687 = *(unsigned __int32 **)a2;
    uint64_t v1688 = ((uint64_t)v1677 - *(void *)a2) >> 2;
    unint64_t v1689 = v1688 + 1;
    if ((unint64_t)(v1688 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1690 = v1586 - (char *)v1687;
    if (v1690 >> 1 > v1689) {
      unint64_t v1689 = v1690 >> 1;
    }
    if ((unint64_t)v1690 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1691 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1691 = v1689;
    }
    if (v1691)
    {
      v1692 = (char *)sub_20B05D1AC((uint64_t)v13, v1691);
      v1687 = *(unsigned __int32 **)a2;
      v1677 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1692 = 0;
    }
    v1693 = (unsigned __int32 *)&v1692[4 * v1688];
    v1586 = &v1692[4 * v1691];
    unsigned __int32 *v1693 = v48;
    v1686 = v1693 + 1;
    while (v1677 != v1687)
    {
      unsigned __int32 v1694 = *--v1677;
      *--v1693 = v1694;
    }
    *(void *)a2 = v1693;
    *(void *)(a2 + 8) = v1686;
    *(void *)(a2 + 16) = v1586;
    if (v1687)
    {
      operator delete(v1687);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1677 = v48;
    v1686 = v1677 + 1;
  }
  *long long v9 = v1686;
  if (v1686 >= (unsigned __int32 *)v1586)
  {
    v1696 = *(unsigned __int32 **)a2;
    uint64_t v1697 = ((uint64_t)v1686 - *(void *)a2) >> 2;
    unint64_t v1698 = v1697 + 1;
    if ((unint64_t)(v1697 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1699 = v1586 - (char *)v1696;
    if (v1699 >> 1 > v1698) {
      unint64_t v1698 = v1699 >> 1;
    }
    if ((unint64_t)v1699 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1700 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1700 = v1698;
    }
    if (v1700)
    {
      v1701 = (char *)sub_20B05D1AC((uint64_t)v13, v1700);
      v1696 = *(unsigned __int32 **)a2;
      v1686 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1701 = 0;
    }
    v1702 = &v1701[4 * v1697];
    v1586 = &v1701[4 * v1700];
    *(_DWORD *)v1702 = v2149.n128_u32[0];
    v1695 = (unsigned __int32 *)(v1702 + 4);
    while (v1686 != v1696)
    {
      int v1703 = *--v1686;
      *((_DWORD *)v1702 - 1) = v1703;
      v1702 -= 4;
    }
    *(void *)a2 = v1702;
    *(void *)(a2 + 8) = v1695;
    *(void *)(a2 + 16) = v1586;
    if (v1696)
    {
      operator delete(v1696);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1686 = v2149.n128_u32[0];
    v1695 = v1686 + 1;
  }
  *long long v9 = v1695;
  if (v1695 >= (unsigned __int32 *)v1586)
  {
    v1705 = *(unsigned __int32 **)a2;
    uint64_t v1706 = ((uint64_t)v1695 - *(void *)a2) >> 2;
    unint64_t v1707 = v1706 + 1;
    if ((unint64_t)(v1706 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1708 = v1586 - (char *)v1705;
    if (v1708 >> 1 > v1707) {
      unint64_t v1707 = v1708 >> 1;
    }
    if ((unint64_t)v1708 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1709 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1709 = v1707;
    }
    if (v1709)
    {
      v1710 = (char *)sub_20B05D1AC((uint64_t)v13, v1709);
      v1705 = *(unsigned __int32 **)a2;
      v1695 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1710 = 0;
    }
    v1711 = (unsigned __int32 *)&v1710[4 * v1706];
    v1586 = &v1710[4 * v1709];
    unsigned __int32 *v1711 = v28;
    v1704 = v1711 + 1;
    while (v1695 != v1705)
    {
      unsigned __int32 v1712 = *--v1695;
      *--v1711 = v1712;
    }
    *(void *)a2 = v1711;
    *(void *)(a2 + 8) = v1704;
    *(void *)(a2 + 16) = v1586;
    if (v1705)
    {
      operator delete(v1705);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1695 = v28;
    v1704 = v1695 + 1;
  }
  *long long v9 = v1704;
  if (v1704 >= (unsigned __int32 *)v1586)
  {
    v1714 = *(unsigned __int32 **)a2;
    uint64_t v1715 = ((uint64_t)v1704 - *(void *)a2) >> 2;
    unint64_t v1716 = v1715 + 1;
    if ((unint64_t)(v1715 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1717 = v1586 - (char *)v1714;
    if (v1717 >> 1 > v1716) {
      unint64_t v1716 = v1717 >> 1;
    }
    if ((unint64_t)v1717 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1718 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1718 = v1716;
    }
    if (v1718)
    {
      v1719 = (char *)sub_20B05D1AC((uint64_t)v13, v1718);
      v1714 = *(unsigned __int32 **)a2;
      v1704 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1719 = 0;
    }
    v1720 = &v1719[4 * v1715];
    v1586 = &v1719[4 * v1718];
    *(_DWORD *)v1720 = a5.n128_u32[2];
    v1713 = (unsigned __int32 *)(v1720 + 4);
    while (v1704 != v1714)
    {
      int v1721 = *--v1704;
      *((_DWORD *)v1720 - 1) = v1721;
      v1720 -= 4;
    }
    *(void *)a2 = v1720;
    *(void *)(a2 + 8) = v1713;
    *(void *)(a2 + 16) = v1586;
    if (v1714)
    {
      operator delete(v1714);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1704 = a5.n128_u32[2];
    v1713 = v1704 + 1;
  }
  *long long v9 = v1713;
  if (v1713 >= (unsigned __int32 *)v1586)
  {
    v1723 = *(unsigned __int32 **)a2;
    uint64_t v1724 = ((uint64_t)v1713 - *(void *)a2) >> 2;
    unint64_t v1725 = v1724 + 1;
    if ((unint64_t)(v1724 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1726 = v1586 - (char *)v1723;
    if (v1726 >> 1 > v1725) {
      unint64_t v1725 = v1726 >> 1;
    }
    if ((unint64_t)v1726 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1727 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1727 = v1725;
    }
    if (v1727)
    {
      v1728 = (char *)sub_20B05D1AC((uint64_t)v13, v1727);
      v1723 = *(unsigned __int32 **)a2;
      v1713 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1728 = 0;
    }
    v1729 = &v1728[4 * v1724];
    v1586 = &v1728[4 * v1727];
    *(_DWORD *)v1729 = v2149.n128_u32[0];
    v1722 = (unsigned __int32 *)(v1729 + 4);
    while (v1713 != v1723)
    {
      int v1730 = *--v1713;
      *((_DWORD *)v1729 - 1) = v1730;
      v1729 -= 4;
    }
    *(void *)a2 = v1729;
    *(void *)(a2 + 8) = v1722;
    *(void *)(a2 + 16) = v1586;
    if (v1723)
    {
      operator delete(v1723);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1713 = v2149.n128_u32[0];
    v1722 = v1713 + 1;
  }
  *long long v9 = v1722;
  if (v1722 >= (unsigned __int32 *)v1586)
  {
    v1732 = *(unsigned __int32 **)a2;
    uint64_t v1733 = ((uint64_t)v1722 - *(void *)a2) >> 2;
    unint64_t v1734 = v1733 + 1;
    if ((unint64_t)(v1733 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1735 = v1586 - (char *)v1732;
    if (v1735 >> 1 > v1734) {
      unint64_t v1734 = v1735 >> 1;
    }
    if ((unint64_t)v1735 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1736 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1736 = v1734;
    }
    if (v1736)
    {
      v1737 = (char *)sub_20B05D1AC((uint64_t)v13, v1736);
      v1732 = *(unsigned __int32 **)a2;
      v1722 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1737 = 0;
    }
    v1738 = (unsigned __int32 *)&v1737[4 * v1733];
    v1586 = &v1737[4 * v1736];
    unsigned __int32 *v1738 = v28;
    v1731 = v1738 + 1;
    while (v1722 != v1732)
    {
      unsigned __int32 v1739 = *--v1722;
      *--v1738 = v1739;
    }
    *(void *)a2 = v1738;
    *(void *)(a2 + 8) = v1731;
    *(void *)(a2 + 16) = v1586;
    if (v1732)
    {
      operator delete(v1732);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1722 = v28;
    v1731 = v1722 + 1;
  }
  *long long v9 = v1731;
  if (v1731 >= (unsigned __int32 *)v1586)
  {
    v1741 = *(unsigned __int32 **)a2;
    uint64_t v1742 = ((uint64_t)v1731 - *(void *)a2) >> 2;
    unint64_t v1743 = v1742 + 1;
    if ((unint64_t)(v1742 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1744 = v1586 - (char *)v1741;
    if (v1744 >> 1 > v1743) {
      unint64_t v1743 = v1744 >> 1;
    }
    if ((unint64_t)v1744 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1745 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1745 = v1743;
    }
    if (v1745)
    {
      v1746 = (char *)sub_20B05D1AC((uint64_t)v13, v1745);
      v1741 = *(unsigned __int32 **)a2;
      v1731 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1746 = 0;
    }
    v1747 = &v1746[4 * v1742];
    v1586 = &v1746[4 * v1745];
    *(_DWORD *)v1747 = a5.n128_u32[2];
    v1740 = (unsigned __int32 *)(v1747 + 4);
    while (v1731 != v1741)
    {
      int v1748 = *--v1731;
      *((_DWORD *)v1747 - 1) = v1748;
      v1747 -= 4;
    }
    *(void *)a2 = v1747;
    *(void *)(a2 + 8) = v1740;
    *(void *)(a2 + 16) = v1586;
    if (v1741)
    {
      operator delete(v1741);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1731 = a5.n128_u32[2];
    v1740 = v1731 + 1;
  }
  *long long v9 = v1740;
  if (v1740 >= (unsigned __int32 *)v1586)
  {
    v1750 = *(unsigned __int32 **)a2;
    uint64_t v1751 = ((uint64_t)v1740 - *(void *)a2) >> 2;
    unint64_t v1752 = v1751 + 1;
    if ((unint64_t)(v1751 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1753 = v1586 - (char *)v1750;
    if (v1753 >> 1 > v1752) {
      unint64_t v1752 = v1753 >> 1;
    }
    if ((unint64_t)v1753 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1754 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1754 = v1752;
    }
    if (v1754)
    {
      v1755 = (char *)sub_20B05D1AC((uint64_t)v13, v1754);
      v1750 = *(unsigned __int32 **)a2;
      v1740 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1755 = 0;
    }
    v1756 = &v1755[4 * v1751];
    v1586 = &v1755[4 * v1754];
    *(_DWORD *)v1756 = a5.n128_u32[0];
    v1749 = (unsigned __int32 *)(v1756 + 4);
    while (v1740 != v1750)
    {
      int v1757 = *--v1740;
      *((_DWORD *)v1756 - 1) = v1757;
      v1756 -= 4;
    }
    *(void *)a2 = v1756;
    *(void *)(a2 + 8) = v1749;
    *(void *)(a2 + 16) = v1586;
    if (v1750)
    {
      operator delete(v1750);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1740 = a5.n128_u32[0];
    v1749 = v1740 + 1;
  }
  *long long v9 = v1749;
  if (v1749 >= (unsigned __int32 *)v1586)
  {
    v1759 = *(unsigned __int32 **)a2;
    uint64_t v1760 = ((uint64_t)v1749 - *(void *)a2) >> 2;
    unint64_t v1761 = v1760 + 1;
    if ((unint64_t)(v1760 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1762 = v1586 - (char *)v1759;
    if (v1762 >> 1 > v1761) {
      unint64_t v1761 = v1762 >> 1;
    }
    if ((unint64_t)v1762 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1763 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1763 = v1761;
    }
    if (v1763)
    {
      v1764 = (char *)sub_20B05D1AC((uint64_t)v13, v1763);
      v1759 = *(unsigned __int32 **)a2;
      v1749 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1764 = 0;
    }
    v1765 = (unsigned __int32 *)&v1764[4 * v1760];
    v1586 = &v1764[4 * v1763];
    unsigned __int32 *v1765 = v28;
    v1758 = v1765 + 1;
    while (v1749 != v1759)
    {
      unsigned __int32 v1766 = *--v1749;
      *--v1765 = v1766;
    }
    *(void *)a2 = v1765;
    *(void *)(a2 + 8) = v1758;
    *(void *)(a2 + 16) = v1586;
    if (v1759)
    {
      operator delete(v1759);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1749 = v28;
    v1758 = v1749 + 1;
  }
  *long long v9 = v1758;
  if (v1758 >= (unsigned __int32 *)v1586)
  {
    v1768 = *(unsigned __int32 **)a2;
    uint64_t v1769 = ((uint64_t)v1758 - *(void *)a2) >> 2;
    unint64_t v1770 = v1769 + 1;
    if ((unint64_t)(v1769 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1771 = v1586 - (char *)v1768;
    if (v1771 >> 1 > v1770) {
      unint64_t v1770 = v1771 >> 1;
    }
    if ((unint64_t)v1771 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1772 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1772 = v1770;
    }
    if (v1772)
    {
      v1773 = (char *)sub_20B05D1AC((uint64_t)v13, v1772);
      v1768 = *(unsigned __int32 **)a2;
      v1758 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1773 = 0;
    }
    v1774 = &v1773[4 * v1769];
    v1586 = &v1773[4 * v1772];
    *(_DWORD *)v1774 = a5.n128_u32[2];
    v1767 = (unsigned __int32 *)(v1774 + 4);
    while (v1758 != v1768)
    {
      int v1775 = *--v1758;
      *((_DWORD *)v1774 - 1) = v1775;
      v1774 -= 4;
    }
    *(void *)a2 = v1774;
    *(void *)(a2 + 8) = v1767;
    *(void *)(a2 + 16) = v1586;
    if (v1768)
    {
      operator delete(v1768);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1758 = a5.n128_u32[2];
    v1767 = v1758 + 1;
  }
  *long long v9 = v1767;
  if (v1767 >= (unsigned __int32 *)v1586)
  {
    v1777 = *(unsigned __int32 **)a2;
    uint64_t v1778 = ((uint64_t)v1767 - *(void *)a2) >> 2;
    unint64_t v1779 = v1778 + 1;
    if ((unint64_t)(v1778 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1780 = v1586 - (char *)v1777;
    if (v1780 >> 1 > v1779) {
      unint64_t v1779 = v1780 >> 1;
    }
    if ((unint64_t)v1780 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1781 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1781 = v1779;
    }
    if (v1781)
    {
      v1782 = (char *)sub_20B05D1AC((uint64_t)v13, v1781);
      v1777 = *(unsigned __int32 **)a2;
      v1767 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1782 = 0;
    }
    v1783 = &v1782[4 * v1778];
    v1586 = &v1782[4 * v1781];
    *(_DWORD *)v1783 = a5.n128_u32[0];
    v1776 = (unsigned __int32 *)(v1783 + 4);
    while (v1767 != v1777)
    {
      int v1784 = *--v1767;
      *((_DWORD *)v1783 - 1) = v1784;
      v1783 -= 4;
    }
    *(void *)a2 = v1783;
    *(void *)(a2 + 8) = v1776;
    *(void *)(a2 + 16) = v1586;
    if (v1777)
    {
      operator delete(v1777);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1767 = a5.n128_u32[0];
    v1776 = v1767 + 1;
  }
  *long long v9 = v1776;
  if (v1776 >= (unsigned __int32 *)v1586)
  {
    v1786 = *(unsigned __int32 **)a2;
    uint64_t v1787 = ((uint64_t)v1776 - *(void *)a2) >> 2;
    unint64_t v1788 = v1787 + 1;
    if ((unint64_t)(v1787 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1789 = v1586 - (char *)v1786;
    if (v1789 >> 1 > v1788) {
      unint64_t v1788 = v1789 >> 1;
    }
    if ((unint64_t)v1789 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1790 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1790 = v1788;
    }
    if (v1790)
    {
      v1791 = (char *)sub_20B05D1AC((uint64_t)v13, v1790);
      v1786 = *(unsigned __int32 **)a2;
      v1776 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1791 = 0;
    }
    v1792 = (unsigned __int32 *)&v1791[4 * v1787];
    v1586 = &v1791[4 * v1790];
    unsigned __int32 *v1792 = v28;
    v1785 = v1792 + 1;
    while (v1776 != v1786)
    {
      unsigned __int32 v1793 = *--v1776;
      *--v1792 = v1793;
    }
    *(void *)a2 = v1792;
    *(void *)(a2 + 8) = v1785;
    *(void *)(a2 + 16) = v1586;
    if (v1786)
    {
      operator delete(v1786);
      v1586 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1776 = v28;
    v1785 = v1776 + 1;
  }
  *long long v9 = v1785;
  if (v1785 >= (unsigned __int32 *)v1586)
  {
    v1795 = *(unsigned __int32 **)a2;
    uint64_t v1796 = ((uint64_t)v1785 - *(void *)a2) >> 2;
    unint64_t v1797 = v1796 + 1;
    if ((unint64_t)(v1796 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1798 = v1586 - (char *)v1795;
    if (v1798 >> 1 > v1797) {
      unint64_t v1797 = v1798 >> 1;
    }
    if ((unint64_t)v1798 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1799 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1799 = v1797;
    }
    if (v1799)
    {
      v1800 = (char *)sub_20B05D1AC((uint64_t)v13, v1799);
      v1795 = *(unsigned __int32 **)a2;
      v1785 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1800 = 0;
    }
    v1801 = &v1800[4 * v1796];
    v1802 = &v1800[4 * v1799];
    *(_DWORD *)v1801 = a5.n128_u32[2];
    v1794 = (unsigned __int32 *)(v1801 + 4);
    while (v1785 != v1795)
    {
      int v1803 = *--v1785;
      *((_DWORD *)v1801 - 1) = v1803;
      v1801 -= 4;
    }
    *(void *)a2 = v1801;
    *(void *)(a2 + 8) = v1794;
    *(void *)(a2 + 16) = v1802;
    if (v1795) {
      operator delete(v1795);
    }
  }
  else
  {
    unsigned __int32 *v1785 = a5.n128_u32[2];
    v1794 = v1785 + 1;
  }
  *long long v9 = v1794;
  int v1804 = v448 + 16;
  v1806 = a3[1];
  v1805 = a3[2];
  if (v1806 >= v1805)
  {
    v1808 = *a3;
    uint64_t v1809 = (v1806 - *a3) >> 2;
    unint64_t v1810 = v1809 + 1;
    if ((unint64_t)(v1809 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1811 = v1805 - v1808;
    if (v1811 >> 1 > v1810) {
      unint64_t v1810 = v1811 >> 1;
    }
    if ((unint64_t)v1811 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1812 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1812 = v1810;
    }
    if (v1812)
    {
      v1813 = (char *)sub_20B05D1AC((uint64_t)v1564, v1812);
      v1808 = *a3;
      v1806 = a3[1];
    }
    else
    {
      v1813 = 0;
    }
    v1814 = &v1813[4 * v1809];
    v1805 = &v1813[4 * v1812];
    *(_DWORD *)v1814 = v1804;
    v1807 = v1814 + 4;
    while (v1806 != v1808)
    {
      int v1815 = *((_DWORD *)v1806 - 1);
      v1806 -= 4;
      *((_DWORD *)v1814 - 1) = v1815;
      v1814 -= 4;
    }
    *a3 = v1814;
    a3[1] = v1807;
    a3[2] = v1805;
    if (v1808)
    {
      operator delete(v1808);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1806 = v1804;
    v1807 = v1806 + 4;
  }
  a3[1] = v1807;
  int v1816 = v448 + 17;
  if (v1807 >= v1805)
  {
    v1818 = *a3;
    uint64_t v1819 = (v1807 - *a3) >> 2;
    unint64_t v1820 = v1819 + 1;
    if ((unint64_t)(v1819 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1821 = v1805 - v1818;
    if (v1821 >> 1 > v1820) {
      unint64_t v1820 = v1821 >> 1;
    }
    if ((unint64_t)v1821 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1822 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1822 = v1820;
    }
    if (v1822)
    {
      v1823 = (char *)sub_20B05D1AC((uint64_t)v1564, v1822);
      v1818 = *a3;
      v1807 = a3[1];
    }
    else
    {
      v1823 = 0;
    }
    v1824 = &v1823[4 * v1819];
    v1805 = &v1823[4 * v1822];
    *(_DWORD *)v1824 = v1816;
    v1817 = v1824 + 4;
    while (v1807 != v1818)
    {
      int v1825 = *((_DWORD *)v1807 - 1);
      v1807 -= 4;
      *((_DWORD *)v1824 - 1) = v1825;
      v1824 -= 4;
    }
    *a3 = v1824;
    a3[1] = v1817;
    a3[2] = v1805;
    if (v1818)
    {
      operator delete(v1818);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1807 = v1816;
    v1817 = v1807 + 4;
  }
  a3[1] = v1817;
  int v1826 = v448 + 19;
  if (v1817 >= v1805)
  {
    v1828 = *a3;
    uint64_t v1829 = (v1817 - *a3) >> 2;
    unint64_t v1830 = v1829 + 1;
    if ((unint64_t)(v1829 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1831 = v1805 - v1828;
    if (v1831 >> 1 > v1830) {
      unint64_t v1830 = v1831 >> 1;
    }
    if ((unint64_t)v1831 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1832 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1832 = v1830;
    }
    if (v1832)
    {
      v1833 = (char *)sub_20B05D1AC((uint64_t)v1564, v1832);
      v1828 = *a3;
      v1817 = a3[1];
    }
    else
    {
      v1833 = 0;
    }
    v1834 = &v1833[4 * v1829];
    v1805 = &v1833[4 * v1832];
    *(_DWORD *)v1834 = v1826;
    v1827 = v1834 + 4;
    while (v1817 != v1828)
    {
      int v1835 = *((_DWORD *)v1817 - 1);
      v1817 -= 4;
      *((_DWORD *)v1834 - 1) = v1835;
      v1834 -= 4;
    }
    *a3 = v1834;
    a3[1] = v1827;
    a3[2] = v1805;
    if (v1828)
    {
      operator delete(v1828);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1817 = v1826;
    v1827 = v1817 + 4;
  }
  a3[1] = v1827;
  if (v1827 >= v1805)
  {
    v1837 = *a3;
    uint64_t v1838 = (v1827 - *a3) >> 2;
    unint64_t v1839 = v1838 + 1;
    if ((unint64_t)(v1838 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1840 = v1805 - v1837;
    if (v1840 >> 1 > v1839) {
      unint64_t v1839 = v1840 >> 1;
    }
    if ((unint64_t)v1840 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1841 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1841 = v1839;
    }
    if (v1841)
    {
      v1842 = (char *)sub_20B05D1AC((uint64_t)v1564, v1841);
      v1837 = *a3;
      v1827 = a3[1];
    }
    else
    {
      v1842 = 0;
    }
    v1843 = &v1842[4 * v1838];
    v1805 = &v1842[4 * v1841];
    *(_DWORD *)v1843 = v1804;
    v1836 = v1843 + 4;
    while (v1827 != v1837)
    {
      int v1844 = *((_DWORD *)v1827 - 1);
      v1827 -= 4;
      *((_DWORD *)v1843 - 1) = v1844;
      v1843 -= 4;
    }
    *a3 = v1843;
    a3[1] = v1836;
    a3[2] = v1805;
    if (v1837)
    {
      operator delete(v1837);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1827 = v1804;
    v1836 = v1827 + 4;
  }
  a3[1] = v1836;
  if (v1836 >= v1805)
  {
    v1846 = *a3;
    uint64_t v1847 = (v1836 - *a3) >> 2;
    unint64_t v1848 = v1847 + 1;
    if ((unint64_t)(v1847 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1849 = v1805 - v1846;
    if (v1849 >> 1 > v1848) {
      unint64_t v1848 = v1849 >> 1;
    }
    if ((unint64_t)v1849 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1850 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1850 = v1848;
    }
    if (v1850)
    {
      v1851 = (char *)sub_20B05D1AC((uint64_t)v1564, v1850);
      v1846 = *a3;
      v1836 = a3[1];
    }
    else
    {
      v1851 = 0;
    }
    v1852 = &v1851[4 * v1847];
    v1805 = &v1851[4 * v1850];
    *(_DWORD *)v1852 = v1826;
    v1845 = v1852 + 4;
    while (v1836 != v1846)
    {
      int v1853 = *((_DWORD *)v1836 - 1);
      v1836 -= 4;
      *((_DWORD *)v1852 - 1) = v1853;
      v1852 -= 4;
    }
    *a3 = v1852;
    a3[1] = v1845;
    a3[2] = v1805;
    if (v1846)
    {
      operator delete(v1846);
      v1805 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v1836 = v1826;
    v1845 = v1836 + 4;
  }
  a3[1] = v1845;
  int v1854 = v448 + 18;
  if (v1845 >= v1805)
  {
    v1856 = *a3;
    uint64_t v1857 = (v1845 - *a3) >> 2;
    unint64_t v1858 = v1857 + 1;
    if ((unint64_t)(v1857 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v1859 = v1805 - v1856;
    if (v1859 >> 1 > v1858) {
      unint64_t v1858 = v1859 >> 1;
    }
    if ((unint64_t)v1859 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1860 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1860 = v1858;
    }
    if (v1860)
    {
      v1861 = (char *)sub_20B05D1AC((uint64_t)v1564, v1860);
      v1856 = *a3;
      v1845 = a3[1];
    }
    else
    {
      v1861 = 0;
    }
    v1862 = &v1861[4 * v1857];
    v1863 = &v1861[4 * v1860];
    *(_DWORD *)v1862 = v1854;
    v1855 = v1862 + 4;
    while (v1845 != v1856)
    {
      int v1864 = *((_DWORD *)v1845 - 1);
      v1845 -= 4;
      *((_DWORD *)v1862 - 1) = v1864;
      v1862 -= 4;
    }
    *a3 = v1862;
    a3[1] = v1855;
    a3[2] = v1863;
    if (v1856) {
      operator delete(v1856);
    }
  }
  else
  {
    *(_DWORD *)v1845 = v1854;
    v1855 = v1845 + 4;
  }
  a3[1] = v1855;
  v1865 = *v9;
  v1866 = *v13;
  if (*v9 >= (unsigned __int32 *)*v13)
  {
    v1868 = *(unsigned __int32 **)a2;
    uint64_t v1869 = ((uint64_t)v1865 - *(void *)a2) >> 2;
    unint64_t v1870 = v1869 + 1;
    if ((unint64_t)(v1869 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1871 = v1866 - (char *)v1868;
    if (v1871 >> 1 > v1870) {
      unint64_t v1870 = v1871 >> 1;
    }
    if ((unint64_t)v1871 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1872 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1872 = v1870;
    }
    if (v1872)
    {
      v1873 = (char *)sub_20B05D1AC((uint64_t)v13, v1872);
      v1868 = *(unsigned __int32 **)a2;
      v1865 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1873 = 0;
    }
    v1874 = &v1873[4 * v1869];
    v1866 = &v1873[4 * v1872];
    *(_DWORD *)v1874 = v2149.n128_u32[0];
    v1867 = (unsigned __int32 *)(v1874 + 4);
    while (v1865 != v1868)
    {
      int v1875 = *--v1865;
      *((_DWORD *)v1874 - 1) = v1875;
      v1874 -= 4;
    }
    *(void *)a2 = v1874;
    *(void *)(a2 + 8) = v1867;
    *(void *)(a2 + 16) = v1866;
    if (v1868)
    {
      operator delete(v1868);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1865 = v2149.n128_u32[0];
    v1867 = v1865 + 1;
  }
  *long long v9 = v1867;
  if (v1867 >= (unsigned __int32 *)v1866)
  {
    v1877 = *(unsigned __int32 **)a2;
    uint64_t v1878 = ((uint64_t)v1867 - *(void *)a2) >> 2;
    unint64_t v1879 = v1878 + 1;
    if ((unint64_t)(v1878 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1880 = v1866 - (char *)v1877;
    if (v1880 >> 1 > v1879) {
      unint64_t v1879 = v1880 >> 1;
    }
    if ((unint64_t)v1880 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1881 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1881 = v1879;
    }
    if (v1881)
    {
      v1882 = (char *)sub_20B05D1AC((uint64_t)v13, v1881);
      v1877 = *(unsigned __int32 **)a2;
      v1867 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1882 = 0;
    }
    v1883 = &v1882[4 * v1878];
    v1866 = &v1882[4 * v1881];
    *(_DWORD *)v1883 = a5.n128_u32[1];
    v1876 = (unsigned __int32 *)(v1883 + 4);
    while (v1867 != v1877)
    {
      int v1884 = *--v1867;
      *((_DWORD *)v1883 - 1) = v1884;
      v1883 -= 4;
    }
    *(void *)a2 = v1883;
    *(void *)(a2 + 8) = v1876;
    *(void *)(a2 + 16) = v1866;
    if (v1877)
    {
      operator delete(v1877);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1867 = a5.n128_u32[1];
    v1876 = v1867 + 1;
  }
  *long long v9 = v1876;
  if (v1876 >= (unsigned __int32 *)v1866)
  {
    v1886 = *(unsigned __int32 **)a2;
    uint64_t v1887 = ((uint64_t)v1876 - *(void *)a2) >> 2;
    unint64_t v1888 = v1887 + 1;
    if ((unint64_t)(v1887 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1889 = v1866 - (char *)v1886;
    if (v1889 >> 1 > v1888) {
      unint64_t v1888 = v1889 >> 1;
    }
    if ((unint64_t)v1889 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1890 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1890 = v1888;
    }
    if (v1890)
    {
      v1891 = (char *)sub_20B05D1AC((uint64_t)v13, v1890);
      v1886 = *(unsigned __int32 **)a2;
      v1876 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1891 = 0;
    }
    v1892 = (unsigned __int32 *)&v1891[4 * v1887];
    v1866 = &v1891[4 * v1890];
    unsigned __int32 *v1892 = v48;
    v1885 = v1892 + 1;
    while (v1876 != v1886)
    {
      unsigned __int32 v1893 = *--v1876;
      *--v1892 = v1893;
    }
    *(void *)a2 = v1892;
    *(void *)(a2 + 8) = v1885;
    *(void *)(a2 + 16) = v1866;
    if (v1886)
    {
      operator delete(v1886);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1876 = v48;
    v1885 = v1876 + 1;
  }
  *long long v9 = v1885;
  if (v1885 >= (unsigned __int32 *)v1866)
  {
    v1895 = *(unsigned __int32 **)a2;
    uint64_t v1896 = ((uint64_t)v1885 - *(void *)a2) >> 2;
    unint64_t v1897 = v1896 + 1;
    if ((unint64_t)(v1896 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1898 = v1866 - (char *)v1895;
    if (v1898 >> 1 > v1897) {
      unint64_t v1897 = v1898 >> 1;
    }
    if ((unint64_t)v1898 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1899 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1899 = v1897;
    }
    if (v1899)
    {
      v1900 = (char *)sub_20B05D1AC((uint64_t)v13, v1899);
      v1895 = *(unsigned __int32 **)a2;
      v1885 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1900 = 0;
    }
    v1901 = &v1900[4 * v1896];
    v1866 = &v1900[4 * v1899];
    *(_DWORD *)v1901 = v2149.n128_u32[0];
    v1894 = (unsigned __int32 *)(v1901 + 4);
    while (v1885 != v1895)
    {
      int v1902 = *--v1885;
      *((_DWORD *)v1901 - 1) = v1902;
      v1901 -= 4;
    }
    *(void *)a2 = v1901;
    *(void *)(a2 + 8) = v1894;
    *(void *)(a2 + 16) = v1866;
    if (v1895)
    {
      operator delete(v1895);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1885 = v2149.n128_u32[0];
    v1894 = v1885 + 1;
  }
  *long long v9 = v1894;
  if (v1894 >= (unsigned __int32 *)v1866)
  {
    v1904 = *(unsigned __int32 **)a2;
    uint64_t v1905 = ((uint64_t)v1894 - *(void *)a2) >> 2;
    unint64_t v1906 = v1905 + 1;
    if ((unint64_t)(v1905 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1907 = v1866 - (char *)v1904;
    if (v1907 >> 1 > v1906) {
      unint64_t v1906 = v1907 >> 1;
    }
    if ((unint64_t)v1907 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1908 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1908 = v1906;
    }
    if (v1908)
    {
      v1909 = (char *)sub_20B05D1AC((uint64_t)v13, v1908);
      v1904 = *(unsigned __int32 **)a2;
      v1894 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1909 = 0;
    }
    v1910 = &v1909[4 * v1905];
    v1866 = &v1909[4 * v1908];
    *(_DWORD *)v1910 = a5.n128_u32[1];
    v1903 = (unsigned __int32 *)(v1910 + 4);
    while (v1894 != v1904)
    {
      int v1911 = *--v1894;
      *((_DWORD *)v1910 - 1) = v1911;
      v1910 -= 4;
    }
    *(void *)a2 = v1910;
    *(void *)(a2 + 8) = v1903;
    *(void *)(a2 + 16) = v1866;
    if (v1904)
    {
      operator delete(v1904);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1894 = a5.n128_u32[1];
    v1903 = v1894 + 1;
  }
  *long long v9 = v1903;
  if (v1903 >= (unsigned __int32 *)v1866)
  {
    v1913 = *(unsigned __int32 **)a2;
    uint64_t v1914 = ((uint64_t)v1903 - *(void *)a2) >> 2;
    unint64_t v1915 = v1914 + 1;
    if ((unint64_t)(v1914 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1916 = v1866 - (char *)v1913;
    if (v1916 >> 1 > v1915) {
      unint64_t v1915 = v1916 >> 1;
    }
    if ((unint64_t)v1916 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1917 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1917 = v1915;
    }
    if (v1917)
    {
      v1918 = (char *)sub_20B05D1AC((uint64_t)v13, v1917);
      v1913 = *(unsigned __int32 **)a2;
      v1903 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1918 = 0;
    }
    v1919 = (unsigned __int32 *)&v1918[4 * v1914];
    v1866 = &v1918[4 * v1917];
    unsigned __int32 *v1919 = v48;
    v1912 = v1919 + 1;
    while (v1903 != v1913)
    {
      unsigned __int32 v1920 = *--v1903;
      *--v1919 = v1920;
    }
    *(void *)a2 = v1919;
    *(void *)(a2 + 8) = v1912;
    *(void *)(a2 + 16) = v1866;
    if (v1913)
    {
      operator delete(v1913);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1903 = v48;
    v1912 = v1903 + 1;
  }
  *long long v9 = v1912;
  if (v1912 >= (unsigned __int32 *)v1866)
  {
    v1922 = *(unsigned __int32 **)a2;
    uint64_t v1923 = ((uint64_t)v1912 - *(void *)a2) >> 2;
    unint64_t v1924 = v1923 + 1;
    if ((unint64_t)(v1923 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1925 = v1866 - (char *)v1922;
    if (v1925 >> 1 > v1924) {
      unint64_t v1924 = v1925 >> 1;
    }
    if ((unint64_t)v1925 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1926 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1926 = v1924;
    }
    if (v1926)
    {
      v1927 = (char *)sub_20B05D1AC((uint64_t)v13, v1926);
      v1922 = *(unsigned __int32 **)a2;
      v1912 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1927 = 0;
    }
    v1928 = &v1927[4 * v1923];
    v1866 = &v1927[4 * v1926];
    *(_DWORD *)v1928 = a5.n128_u32[0];
    v1921 = (unsigned __int32 *)(v1928 + 4);
    while (v1912 != v1922)
    {
      int v1929 = *--v1912;
      *((_DWORD *)v1928 - 1) = v1929;
      v1928 -= 4;
    }
    *(void *)a2 = v1928;
    *(void *)(a2 + 8) = v1921;
    *(void *)(a2 + 16) = v1866;
    if (v1922)
    {
      operator delete(v1922);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1912 = a5.n128_u32[0];
    v1921 = v1912 + 1;
  }
  *long long v9 = v1921;
  if (v1921 >= (unsigned __int32 *)v1866)
  {
    v1931 = *(unsigned __int32 **)a2;
    uint64_t v1932 = ((uint64_t)v1921 - *(void *)a2) >> 2;
    unint64_t v1933 = v1932 + 1;
    if ((unint64_t)(v1932 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1934 = v1866 - (char *)v1931;
    if (v1934 >> 1 > v1933) {
      unint64_t v1933 = v1934 >> 1;
    }
    if ((unint64_t)v1934 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1935 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1935 = v1933;
    }
    if (v1935)
    {
      v1936 = (char *)sub_20B05D1AC((uint64_t)v13, v1935);
      v1931 = *(unsigned __int32 **)a2;
      v1921 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1936 = 0;
    }
    v1937 = &v1936[4 * v1932];
    v1866 = &v1936[4 * v1935];
    *(_DWORD *)v1937 = a5.n128_u32[1];
    v1930 = (unsigned __int32 *)(v1937 + 4);
    while (v1921 != v1931)
    {
      int v1938 = *--v1921;
      *((_DWORD *)v1937 - 1) = v1938;
      v1937 -= 4;
    }
    *(void *)a2 = v1937;
    *(void *)(a2 + 8) = v1930;
    *(void *)(a2 + 16) = v1866;
    if (v1931)
    {
      operator delete(v1931);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1921 = a5.n128_u32[1];
    v1930 = v1921 + 1;
  }
  *long long v9 = v1930;
  if (v1930 >= (unsigned __int32 *)v1866)
  {
    v1940 = *(unsigned __int32 **)a2;
    uint64_t v1941 = ((uint64_t)v1930 - *(void *)a2) >> 2;
    unint64_t v1942 = v1941 + 1;
    if ((unint64_t)(v1941 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1943 = v1866 - (char *)v1940;
    if (v1943 >> 1 > v1942) {
      unint64_t v1942 = v1943 >> 1;
    }
    if ((unint64_t)v1943 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1944 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1944 = v1942;
    }
    if (v1944)
    {
      v1945 = (char *)sub_20B05D1AC((uint64_t)v13, v1944);
      v1940 = *(unsigned __int32 **)a2;
      v1930 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1945 = 0;
    }
    v1946 = (unsigned __int32 *)&v1945[4 * v1941];
    v1866 = &v1945[4 * v1944];
    unsigned __int32 *v1946 = v48;
    v1939 = v1946 + 1;
    while (v1930 != v1940)
    {
      unsigned __int32 v1947 = *--v1930;
      *--v1946 = v1947;
    }
    *(void *)a2 = v1946;
    *(void *)(a2 + 8) = v1939;
    *(void *)(a2 + 16) = v1866;
    if (v1940)
    {
      operator delete(v1940);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1930 = v48;
    v1939 = v1930 + 1;
  }
  *long long v9 = v1939;
  if (v1939 >= (unsigned __int32 *)v1866)
  {
    v1949 = *(unsigned __int32 **)a2;
    uint64_t v1950 = ((uint64_t)v1939 - *(void *)a2) >> 2;
    unint64_t v1951 = v1950 + 1;
    if ((unint64_t)(v1950 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1952 = v1866 - (char *)v1949;
    if (v1952 >> 1 > v1951) {
      unint64_t v1951 = v1952 >> 1;
    }
    if ((unint64_t)v1952 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1953 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1953 = v1951;
    }
    if (v1953)
    {
      v1954 = (char *)sub_20B05D1AC((uint64_t)v13, v1953);
      v1949 = *(unsigned __int32 **)a2;
      v1939 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1954 = 0;
    }
    v1955 = &v1954[4 * v1950];
    v1866 = &v1954[4 * v1953];
    *(_DWORD *)v1955 = a5.n128_u32[0];
    v1948 = (unsigned __int32 *)(v1955 + 4);
    while (v1939 != v1949)
    {
      int v1956 = *--v1939;
      *((_DWORD *)v1955 - 1) = v1956;
      v1955 -= 4;
    }
    *(void *)a2 = v1955;
    *(void *)(a2 + 8) = v1948;
    *(void *)(a2 + 16) = v1866;
    if (v1949)
    {
      operator delete(v1949);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1939 = a5.n128_u32[0];
    v1948 = v1939 + 1;
  }
  *long long v9 = v1948;
  if (v1948 >= (unsigned __int32 *)v1866)
  {
    v1958 = *(unsigned __int32 **)a2;
    uint64_t v1959 = ((uint64_t)v1948 - *(void *)a2) >> 2;
    unint64_t v1960 = v1959 + 1;
    if ((unint64_t)(v1959 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1961 = v1866 - (char *)v1958;
    if (v1961 >> 1 > v1960) {
      unint64_t v1960 = v1961 >> 1;
    }
    if ((unint64_t)v1961 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1962 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1962 = v1960;
    }
    if (v1962)
    {
      v1963 = (char *)sub_20B05D1AC((uint64_t)v13, v1962);
      v1958 = *(unsigned __int32 **)a2;
      v1948 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1963 = 0;
    }
    v1964 = &v1963[4 * v1959];
    v1866 = &v1963[4 * v1962];
    *(_DWORD *)v1964 = a5.n128_u32[1];
    v1957 = (unsigned __int32 *)(v1964 + 4);
    while (v1948 != v1958)
    {
      int v1965 = *--v1948;
      *((_DWORD *)v1964 - 1) = v1965;
      v1964 -= 4;
    }
    *(void *)a2 = v1964;
    *(void *)(a2 + 8) = v1957;
    *(void *)(a2 + 16) = v1866;
    if (v1958)
    {
      operator delete(v1958);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1948 = a5.n128_u32[1];
    v1957 = v1948 + 1;
  }
  *long long v9 = v1957;
  if (v1957 >= (unsigned __int32 *)v1866)
  {
    v1967 = *(unsigned __int32 **)a2;
    uint64_t v1968 = ((uint64_t)v1957 - *(void *)a2) >> 2;
    unint64_t v1969 = v1968 + 1;
    if ((unint64_t)(v1968 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1970 = v1866 - (char *)v1967;
    if (v1970 >> 1 > v1969) {
      unint64_t v1969 = v1970 >> 1;
    }
    if ((unint64_t)v1970 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1971 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1971 = v1969;
    }
    if (v1971)
    {
      v1972 = (char *)sub_20B05D1AC((uint64_t)v13, v1971);
      v1967 = *(unsigned __int32 **)a2;
      v1957 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1972 = 0;
    }
    v1973 = (unsigned __int32 *)&v1972[4 * v1968];
    v1866 = &v1972[4 * v1971];
    unsigned __int32 *v1973 = v48;
    v1966 = v1973 + 1;
    while (v1957 != v1967)
    {
      unsigned __int32 v1974 = *--v1957;
      *--v1973 = v1974;
    }
    *(void *)a2 = v1973;
    *(void *)(a2 + 8) = v1966;
    *(void *)(a2 + 16) = v1866;
    if (v1967)
    {
      operator delete(v1967);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1957 = v48;
    v1966 = v1957 + 1;
  }
  unsigned __int32 v1975 = v2149.n128_u32[0];
  *long long v9 = v1966;
  if (v1966 >= (unsigned __int32 *)v1866)
  {
    v1977 = *(unsigned __int32 **)a2;
    uint64_t v1978 = ((uint64_t)v1966 - *(void *)a2) >> 2;
    unint64_t v1979 = v1978 + 1;
    if ((unint64_t)(v1978 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1980 = v1866 - (char *)v1977;
    if (v1980 >> 1 > v1979) {
      unint64_t v1979 = v1980 >> 1;
    }
    if ((unint64_t)v1980 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1981 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1981 = v1979;
    }
    if (v1981)
    {
      v1982 = (char *)sub_20B05D1AC((uint64_t)v13, v1981);
      unsigned __int32 v1975 = v2149.n128_u32[0];
      v1983 = v1982;
      v1977 = *(unsigned __int32 **)a2;
      v1966 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1983 = 0;
    }
    v1984 = (unsigned __int32 *)&v1983[4 * v1978];
    v1866 = &v1983[4 * v1981];
    unsigned __int32 *v1984 = v1975;
    v1976 = v1984 + 1;
    while (v1966 != v1977)
    {
      unsigned __int32 v1985 = *--v1966;
      *--v1984 = v1985;
    }
    *(void *)a2 = v1984;
    *(void *)(a2 + 8) = v1976;
    *(void *)(a2 + 16) = v1866;
    if (v1977)
    {
      operator delete(v1977);
      unsigned __int32 v1975 = v2149.n128_u32[0];
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1966 = v2149.n128_u32[0];
    v1976 = v1966 + 1;
  }
  *long long v9 = v1976;
  if (v1976 >= (unsigned __int32 *)v1866)
  {
    v1987 = *(unsigned __int32 **)a2;
    uint64_t v1988 = ((uint64_t)v1976 - *(void *)a2) >> 2;
    unint64_t v1989 = v1988 + 1;
    if ((unint64_t)(v1988 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1990 = v1866 - (char *)v1987;
    if (v1990 >> 1 > v1989) {
      unint64_t v1989 = v1990 >> 1;
    }
    if ((unint64_t)v1990 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1991 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1991 = v1989;
    }
    if (v1991)
    {
      v1992 = (char *)sub_20B05D1AC((uint64_t)v13, v1991);
      v1987 = *(unsigned __int32 **)a2;
      v1976 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v1992 = 0;
    }
    v1993 = &v1992[4 * v1988];
    v1866 = &v1992[4 * v1991];
    *(_DWORD *)v1993 = a5.n128_u32[1];
    v1986 = (unsigned __int32 *)(v1993 + 4);
    while (v1976 != v1987)
    {
      int v1994 = *--v1976;
      *((_DWORD *)v1993 - 1) = v1994;
      v1993 -= 4;
    }
    *(void *)a2 = v1993;
    *(void *)(a2 + 8) = v1986;
    *(void *)(a2 + 16) = v1866;
    if (v1987)
    {
      operator delete(v1987);
      v1866 = *v13;
    }
    unsigned __int32 v1975 = v2149.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v1976 = a5.n128_u32[1];
    v1986 = v1976 + 1;
  }
  *long long v9 = v1986;
  if (v1986 >= (unsigned __int32 *)v1866)
  {
    v1996 = *(unsigned __int32 **)a2;
    uint64_t v1997 = ((uint64_t)v1986 - *(void *)a2) >> 2;
    unint64_t v1998 = v1997 + 1;
    if ((unint64_t)(v1997 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v1999 = v1866 - (char *)v1996;
    if (v1999 >> 1 > v1998) {
      unint64_t v1998 = v1999 >> 1;
    }
    if ((unint64_t)v1999 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2000 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2000 = v1998;
    }
    if (v2000)
    {
      v2001 = (char *)sub_20B05D1AC((uint64_t)v13, v2000);
      v1996 = *(unsigned __int32 **)a2;
      v1986 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2001 = 0;
    }
    v2002 = &v2001[4 * v1997];
    v1866 = &v2001[4 * v2000];
    *(_DWORD *)v2002 = a5.n128_u32[2];
    v1995 = (unsigned __int32 *)(v2002 + 4);
    while (v1986 != v1996)
    {
      int v2003 = *--v1986;
      *((_DWORD *)v2002 - 1) = v2003;
      v2002 -= 4;
    }
    *(void *)a2 = v2002;
    *(void *)(a2 + 8) = v1995;
    *(void *)(a2 + 16) = v1866;
    if (v1996)
    {
      operator delete(v1996);
      v1866 = *v13;
    }
    unsigned __int32 v1975 = v2149.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v1986 = a5.n128_u32[2];
    v1995 = v1986 + 1;
  }
  *long long v9 = v1995;
  if (v1995 >= (unsigned __int32 *)v1866)
  {
    v2005 = *(unsigned __int32 **)a2;
    uint64_t v2006 = ((uint64_t)v1995 - *(void *)a2) >> 2;
    unint64_t v2007 = v2006 + 1;
    if ((unint64_t)(v2006 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v2008 = v1866 - (char *)v2005;
    if (v2008 >> 1 > v2007) {
      unint64_t v2007 = v2008 >> 1;
    }
    if ((unint64_t)v2008 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2009 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2009 = v2007;
    }
    if (v2009)
    {
      v2010 = (char *)sub_20B05D1AC((uint64_t)v13, v2009);
      unsigned __int32 v1975 = v2149.n128_u32[0];
      v2011 = v2010;
      v2005 = *(unsigned __int32 **)a2;
      v1995 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2011 = 0;
    }
    v2012 = (unsigned __int32 *)&v2011[4 * v2006];
    v1866 = &v2011[4 * v2009];
    unsigned __int32 *v2012 = v1975;
    v2004 = v2012 + 1;
    while (v1995 != v2005)
    {
      unsigned __int32 v2013 = *--v1995;
      *--v2012 = v2013;
    }
    *(void *)a2 = v2012;
    *(void *)(a2 + 8) = v2004;
    *(void *)(a2 + 16) = v1866;
    if (v2005)
    {
      operator delete(v2005);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v1995 = v1975;
    v2004 = v1995 + 1;
  }
  *long long v9 = v2004;
  if (v2004 >= (unsigned __int32 *)v1866)
  {
    v2015 = *(unsigned __int32 **)a2;
    uint64_t v2016 = ((uint64_t)v2004 - *(void *)a2) >> 2;
    unint64_t v2017 = v2016 + 1;
    if ((unint64_t)(v2016 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v2018 = v1866 - (char *)v2015;
    if (v2018 >> 1 > v2017) {
      unint64_t v2017 = v2018 >> 1;
    }
    if ((unint64_t)v2018 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2019 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2019 = v2017;
    }
    if (v2019)
    {
      v2020 = (char *)sub_20B05D1AC((uint64_t)v13, v2019);
      v2015 = *(unsigned __int32 **)a2;
      v2004 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2020 = 0;
    }
    v2021 = &v2020[4 * v2016];
    v1866 = &v2020[4 * v2019];
    *(_DWORD *)v2021 = a5.n128_u32[1];
    v2014 = (unsigned __int32 *)(v2021 + 4);
    while (v2004 != v2015)
    {
      int v2022 = *--v2004;
      *((_DWORD *)v2021 - 1) = v2022;
      v2021 -= 4;
    }
    *(void *)a2 = v2021;
    *(void *)(a2 + 8) = v2014;
    *(void *)(a2 + 16) = v1866;
    if (v2015)
    {
      operator delete(v2015);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v2004 = a5.n128_u32[1];
    v2014 = v2004 + 1;
  }
  *long long v9 = v2014;
  if (v2014 >= (unsigned __int32 *)v1866)
  {
    v2024 = *(unsigned __int32 **)a2;
    uint64_t v2025 = ((uint64_t)v2014 - *(void *)a2) >> 2;
    unint64_t v2026 = v2025 + 1;
    if ((unint64_t)(v2025 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v2027 = v1866 - (char *)v2024;
    if (v2027 >> 1 > v2026) {
      unint64_t v2026 = v2027 >> 1;
    }
    if ((unint64_t)v2027 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2028 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2028 = v2026;
    }
    if (v2028)
    {
      v2029 = (char *)sub_20B05D1AC((uint64_t)v13, v2028);
      v2024 = *(unsigned __int32 **)a2;
      v2014 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2029 = 0;
    }
    v2030 = &v2029[4 * v2025];
    v1866 = &v2029[4 * v2028];
    *(_DWORD *)v2030 = a5.n128_u32[2];
    v2023 = (unsigned __int32 *)(v2030 + 4);
    while (v2014 != v2024)
    {
      int v2031 = *--v2014;
      *((_DWORD *)v2030 - 1) = v2031;
      v2030 -= 4;
    }
    *(void *)a2 = v2030;
    *(void *)(a2 + 8) = v2023;
    *(void *)(a2 + 16) = v1866;
    if (v2024)
    {
      operator delete(v2024);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v2014 = a5.n128_u32[2];
    v2023 = v2014 + 1;
  }
  *long long v9 = v2023;
  if (v2023 >= (unsigned __int32 *)v1866)
  {
    v2033 = *(unsigned __int32 **)a2;
    uint64_t v2034 = ((uint64_t)v2023 - *(void *)a2) >> 2;
    unint64_t v2035 = v2034 + 1;
    if ((unint64_t)(v2034 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v2036 = v1866 - (char *)v2033;
    if (v2036 >> 1 > v2035) {
      unint64_t v2035 = v2036 >> 1;
    }
    if ((unint64_t)v2036 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2037 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2037 = v2035;
    }
    if (v2037)
    {
      v2038 = (char *)sub_20B05D1AC((uint64_t)v13, v2037);
      v2033 = *(unsigned __int32 **)a2;
      v2023 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2038 = 0;
    }
    v2039 = &v2038[4 * v2034];
    v1866 = &v2038[4 * v2037];
    *(_DWORD *)v2039 = a5.n128_u32[0];
    v2032 = (unsigned __int32 *)(v2039 + 4);
    while (v2023 != v2033)
    {
      int v2040 = *--v2023;
      *((_DWORD *)v2039 - 1) = v2040;
      v2039 -= 4;
    }
    *(void *)a2 = v2039;
    *(void *)(a2 + 8) = v2032;
    *(void *)(a2 + 16) = v1866;
    if (v2033)
    {
      operator delete(v2033);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v2023 = a5.n128_u32[0];
    v2032 = v2023 + 1;
  }
  *long long v9 = v2032;
  if (v2032 >= (unsigned __int32 *)v1866)
  {
    v2042 = *(unsigned __int32 **)a2;
    uint64_t v2043 = ((uint64_t)v2032 - *(void *)a2) >> 2;
    unint64_t v2044 = v2043 + 1;
    if ((unint64_t)(v2043 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v2045 = v1866 - (char *)v2042;
    if (v2045 >> 1 > v2044) {
      unint64_t v2044 = v2045 >> 1;
    }
    if ((unint64_t)v2045 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2046 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2046 = v2044;
    }
    if (v2046)
    {
      v2047 = (char *)sub_20B05D1AC((uint64_t)v13, v2046);
      v2042 = *(unsigned __int32 **)a2;
      v2032 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2047 = 0;
    }
    v2048 = &v2047[4 * v2043];
    v1866 = &v2047[4 * v2046];
    *(_DWORD *)v2048 = a5.n128_u32[1];
    v2041 = (unsigned __int32 *)(v2048 + 4);
    while (v2032 != v2042)
    {
      int v2049 = *--v2032;
      *((_DWORD *)v2048 - 1) = v2049;
      v2048 -= 4;
    }
    *(void *)a2 = v2048;
    *(void *)(a2 + 8) = v2041;
    *(void *)(a2 + 16) = v1866;
    if (v2042)
    {
      operator delete(v2042);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v2032 = a5.n128_u32[1];
    v2041 = v2032 + 1;
  }
  *long long v9 = v2041;
  if (v2041 >= (unsigned __int32 *)v1866)
  {
    v2051 = *(unsigned __int32 **)a2;
    uint64_t v2052 = ((uint64_t)v2041 - *(void *)a2) >> 2;
    unint64_t v2053 = v2052 + 1;
    if ((unint64_t)(v2052 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v2054 = v1866 - (char *)v2051;
    if (v2054 >> 1 > v2053) {
      unint64_t v2053 = v2054 >> 1;
    }
    if ((unint64_t)v2054 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2055 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2055 = v2053;
    }
    if (v2055)
    {
      v2056 = (char *)sub_20B05D1AC((uint64_t)v13, v2055);
      v2051 = *(unsigned __int32 **)a2;
      v2041 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2056 = 0;
    }
    v2057 = &v2056[4 * v2052];
    v1866 = &v2056[4 * v2055];
    *(_DWORD *)v2057 = a5.n128_u32[2];
    v2050 = (unsigned __int32 *)(v2057 + 4);
    while (v2041 != v2051)
    {
      int v2058 = *--v2041;
      *((_DWORD *)v2057 - 1) = v2058;
      v2057 -= 4;
    }
    *(void *)a2 = v2057;
    *(void *)(a2 + 8) = v2050;
    *(void *)(a2 + 16) = v1866;
    if (v2051)
    {
      operator delete(v2051);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v2041 = a5.n128_u32[2];
    v2050 = v2041 + 1;
  }
  *long long v9 = v2050;
  if (v2050 >= (unsigned __int32 *)v1866)
  {
    v2060 = *(unsigned __int32 **)a2;
    uint64_t v2061 = ((uint64_t)v2050 - *(void *)a2) >> 2;
    unint64_t v2062 = v2061 + 1;
    if ((unint64_t)(v2061 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v2063 = v1866 - (char *)v2060;
    if (v2063 >> 1 > v2062) {
      unint64_t v2062 = v2063 >> 1;
    }
    if ((unint64_t)v2063 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2064 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2064 = v2062;
    }
    if (v2064)
    {
      v2065 = (char *)sub_20B05D1AC((uint64_t)v13, v2064);
      v2060 = *(unsigned __int32 **)a2;
      v2050 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2065 = 0;
    }
    v2066 = &v2065[4 * v2061];
    v1866 = &v2065[4 * v2064];
    *(_DWORD *)v2066 = a5.n128_u32[0];
    v2059 = (unsigned __int32 *)(v2066 + 4);
    while (v2050 != v2060)
    {
      int v2067 = *--v2050;
      *((_DWORD *)v2066 - 1) = v2067;
      v2066 -= 4;
    }
    *(void *)a2 = v2066;
    *(void *)(a2 + 8) = v2059;
    *(void *)(a2 + 16) = v1866;
    if (v2060)
    {
      operator delete(v2060);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v2050 = a5.n128_u32[0];
    v2059 = v2050 + 1;
  }
  *long long v9 = v2059;
  if (v2059 >= (unsigned __int32 *)v1866)
  {
    v2069 = *(unsigned __int32 **)a2;
    uint64_t v2070 = ((uint64_t)v2059 - *(void *)a2) >> 2;
    unint64_t v2071 = v2070 + 1;
    if ((unint64_t)(v2070 + 1) >> 62) {
      goto LABEL_3660;
    }
    uint64_t v2072 = v1866 - (char *)v2069;
    if (v2072 >> 1 > v2071) {
      unint64_t v2071 = v2072 >> 1;
    }
    if ((unint64_t)v2072 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2073 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2073 = v2071;
    }
    if (v2073)
    {
      v2074 = (char *)sub_20B05D1AC((uint64_t)v13, v2073);
      v2069 = *(unsigned __int32 **)a2;
      v2059 = *(unsigned __int32 **)(a2 + 8);
    }
    else
    {
      v2074 = 0;
    }
    v2075 = &v2074[4 * v2070];
    v1866 = &v2074[4 * v2073];
    *(_DWORD *)v2075 = a5.n128_u32[1];
    v2068 = (unsigned __int32 *)(v2075 + 4);
    while (v2059 != v2069)
    {
      int v2076 = *--v2059;
      *((_DWORD *)v2075 - 1) = v2076;
      v2075 -= 4;
    }
    *(void *)a2 = v2075;
    *(void *)(a2 + 8) = v2068;
    *(void *)(a2 + 16) = v1866;
    if (v2069)
    {
      operator delete(v2069);
      v1866 = *v13;
    }
  }
  else
  {
    unsigned __int32 *v2059 = a5.n128_u32[1];
    v2068 = v2059 + 1;
  }
  *long long v9 = v2068;
  if (v2068 < (unsigned __int32 *)v1866)
  {
    unsigned __int32 *v2068 = a5.n128_u32[2];
    v2077 = v2068 + 1;
    goto LABEL_3563;
  }
  v2078 = *(unsigned __int32 **)a2;
  uint64_t v2079 = ((uint64_t)v2068 - *(void *)a2) >> 2;
  unint64_t v2080 = v2079 + 1;
  if ((unint64_t)(v2079 + 1) >> 62) {
LABEL_3660:
  }
    sub_20B05D0BC();
  uint64_t v2081 = v1866 - (char *)v2078;
  if (v2081 >> 1 > v2080) {
    unint64_t v2080 = v2081 >> 1;
  }
  if ((unint64_t)v2081 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v2082 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v2082 = v2080;
  }
  if (v2082)
  {
    v2083 = (char *)sub_20B05D1AC((uint64_t)v13, v2082);
    v2078 = *(unsigned __int32 **)a2;
    v2068 = *(unsigned __int32 **)(a2 + 8);
  }
  else
  {
    v2083 = 0;
  }
  v2084 = &v2083[4 * v2079];
  v2085 = &v2083[4 * v2082];
  *(_DWORD *)v2084 = a5.n128_u32[2];
  v2077 = (unsigned __int32 *)(v2084 + 4);
  while (v2068 != v2078)
  {
    int v2086 = *--v2068;
    *((_DWORD *)v2084 - 1) = v2086;
    v2084 -= 4;
  }
  *(void *)a2 = v2084;
  *(void *)(a2 + 8) = v2077;
  *(void *)(a2 + 16) = v2085;
  if (v2078) {
    operator delete(v2078);
  }
LABEL_3563:
  *long long v9 = v2077;
  int v2087 = v448 + 20;
  v2089 = a3[1];
  v2088 = a3[2];
  if (v2089 >= v2088)
  {
    v2091 = *a3;
    uint64_t v2092 = (v2089 - *a3) >> 2;
    unint64_t v2093 = v2092 + 1;
    if ((unint64_t)(v2092 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v2094 = v2088 - v2091;
    if (v2094 >> 1 > v2093) {
      unint64_t v2093 = v2094 >> 1;
    }
    if ((unint64_t)v2094 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2095 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2095 = v2093;
    }
    if (v2095)
    {
      v2096 = (char *)sub_20B05D1AC((uint64_t)v1564, v2095);
      v2091 = *a3;
      v2089 = a3[1];
    }
    else
    {
      v2096 = 0;
    }
    v2097 = &v2096[4 * v2092];
    v2088 = &v2096[4 * v2095];
    *(_DWORD *)v2097 = v2087;
    v2090 = v2097 + 4;
    while (v2089 != v2091)
    {
      int v2098 = *((_DWORD *)v2089 - 1);
      v2089 -= 4;
      *((_DWORD *)v2097 - 1) = v2098;
      v2097 -= 4;
    }
    *a3 = v2097;
    a3[1] = v2090;
    a3[2] = v2088;
    if (v2091)
    {
      operator delete(v2091);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2089 = v2087;
    v2090 = v2089 + 4;
  }
  a3[1] = v2090;
  int v2099 = v448 + 22;
  if (v2090 >= v2088)
  {
    v2101 = *a3;
    uint64_t v2102 = (v2090 - *a3) >> 2;
    unint64_t v2103 = v2102 + 1;
    if ((unint64_t)(v2102 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v2104 = v2088 - v2101;
    if (v2104 >> 1 > v2103) {
      unint64_t v2103 = v2104 >> 1;
    }
    if ((unint64_t)v2104 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2105 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2105 = v2103;
    }
    if (v2105)
    {
      v2106 = (char *)sub_20B05D1AC((uint64_t)v1564, v2105);
      v2101 = *a3;
      v2090 = a3[1];
    }
    else
    {
      v2106 = 0;
    }
    v2107 = &v2106[4 * v2102];
    v2088 = &v2106[4 * v2105];
    *(_DWORD *)v2107 = v2099;
    v2100 = v2107 + 4;
    while (v2090 != v2101)
    {
      int v2108 = *((_DWORD *)v2090 - 1);
      v2090 -= 4;
      *((_DWORD *)v2107 - 1) = v2108;
      v2107 -= 4;
    }
    *a3 = v2107;
    a3[1] = v2100;
    a3[2] = v2088;
    if (v2101)
    {
      operator delete(v2101);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2090 = v2099;
    v2100 = v2090 + 4;
  }
  a3[1] = v2100;
  int v2109 = v448 + 21;
  if (v2100 >= v2088)
  {
    v2111 = *a3;
    uint64_t v2112 = (v2100 - *a3) >> 2;
    unint64_t v2113 = v2112 + 1;
    if ((unint64_t)(v2112 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v2114 = v2088 - v2111;
    if (v2114 >> 1 > v2113) {
      unint64_t v2113 = v2114 >> 1;
    }
    if ((unint64_t)v2114 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2115 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2115 = v2113;
    }
    if (v2115)
    {
      v2116 = (char *)sub_20B05D1AC((uint64_t)v1564, v2115);
      v2111 = *a3;
      v2100 = a3[1];
    }
    else
    {
      v2116 = 0;
    }
    v2117 = &v2116[4 * v2112];
    v2088 = &v2116[4 * v2115];
    *(_DWORD *)v2117 = v2109;
    v2110 = v2117 + 4;
    while (v2100 != v2111)
    {
      int v2118 = *((_DWORD *)v2100 - 1);
      v2100 -= 4;
      *((_DWORD *)v2117 - 1) = v2118;
      v2117 -= 4;
    }
    *a3 = v2117;
    a3[1] = v2110;
    a3[2] = v2088;
    if (v2111)
    {
      operator delete(v2111);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2100 = v2109;
    v2110 = v2100 + 4;
  }
  a3[1] = v2110;
  if (v2110 >= v2088)
  {
    v2120 = *a3;
    uint64_t v2121 = (v2110 - *a3) >> 2;
    unint64_t v2122 = v2121 + 1;
    if ((unint64_t)(v2121 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v2123 = v2088 - v2120;
    if (v2123 >> 1 > v2122) {
      unint64_t v2122 = v2123 >> 1;
    }
    if ((unint64_t)v2123 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2124 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2124 = v2122;
    }
    if (v2124)
    {
      v2125 = (char *)sub_20B05D1AC((uint64_t)v1564, v2124);
      v2120 = *a3;
      v2110 = a3[1];
    }
    else
    {
      v2125 = 0;
    }
    v2126 = &v2125[4 * v2121];
    v2088 = &v2125[4 * v2124];
    *(_DWORD *)v2126 = v2109;
    v2119 = v2126 + 4;
    while (v2110 != v2120)
    {
      int v2127 = *((_DWORD *)v2110 - 1);
      v2110 -= 4;
      *((_DWORD *)v2126 - 1) = v2127;
      v2126 -= 4;
    }
    *a3 = v2126;
    a3[1] = v2119;
    a3[2] = v2088;
    if (v2120)
    {
      operator delete(v2120);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2110 = v2109;
    v2119 = v2110 + 4;
  }
  a3[1] = v2119;
  if (v2119 >= v2088)
  {
    v2129 = *a3;
    uint64_t v2130 = (v2119 - *a3) >> 2;
    unint64_t v2131 = v2130 + 1;
    if ((unint64_t)(v2130 + 1) >> 62) {
      goto LABEL_3661;
    }
    uint64_t v2132 = v2088 - v2129;
    if (v2132 >> 1 > v2131) {
      unint64_t v2131 = v2132 >> 1;
    }
    if ((unint64_t)v2132 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v2133 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v2133 = v2131;
    }
    if (v2133)
    {
      v2134 = (char *)sub_20B05D1AC((uint64_t)v1564, v2133);
      v2129 = *a3;
      v2119 = a3[1];
    }
    else
    {
      v2134 = 0;
    }
    v2135 = &v2134[4 * v2130];
    v2088 = &v2134[4 * v2133];
    *(_DWORD *)v2135 = v2099;
    v2128 = v2135 + 4;
    while (v2119 != v2129)
    {
      int v2136 = *((_DWORD *)v2119 - 1);
      v2119 -= 4;
      *((_DWORD *)v2135 - 1) = v2136;
      v2135 -= 4;
    }
    *a3 = v2135;
    a3[1] = v2128;
    a3[2] = v2088;
    if (v2129)
    {
      operator delete(v2129);
      v2088 = *v1564;
    }
  }
  else
  {
    *(_DWORD *)v2119 = v2099;
    v2128 = v2119 + 4;
  }
  a3[1] = v2128;
  int v2137 = v448 + 23;
  if (v2128 >= v2088)
  {
    v2139 = *a3;
    uint64_t v2140 = (v2128 - *a3) >> 2;
    unint64_t v2141 = v2140 + 1;
    if (!((unint64_t)(v2140 + 1) >> 62))
    {
      uint64_t v2142 = v2088 - v2139;
      if (v2142 >> 1 > v2141) {
        unint64_t v2141 = v2142 >> 1;
      }
      if ((unint64_t)v2142 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v2143 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v2143 = v2141;
      }
      if (v2143)
      {
        v2144 = (char *)sub_20B05D1AC((uint64_t)v1564, v2143);
        v2139 = *a3;
        v2128 = a3[1];
      }
      else
      {
        v2144 = 0;
      }
      v2145 = &v2144[4 * v2140];
      v2146 = &v2144[4 * v2143];
      *(_DWORD *)v2145 = v2137;
      v2138 = v2145 + 4;
      while (v2128 != v2139)
      {
        int v2147 = *((_DWORD *)v2128 - 1);
        v2128 -= 4;
        *((_DWORD *)v2145 - 1) = v2147;
        v2145 -= 4;
      }
      *a3 = v2145;
      a3[1] = v2138;
      a3[2] = v2146;
      if (v2139) {
        operator delete(v2139);
      }
      goto LABEL_3659;
    }
LABEL_3661:
    sub_20B05D0BC();
  }
  *(_DWORD *)v2128 = v2137;
  v2138 = v2128 + 4;
LABEL_3659:
  a3[1] = v2138;
}

uint64_t sub_20B0BBFE8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20B0DAE10(a1 + 40, v6);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  long long v9 = (void **)(a1 + 200);
  *(void *)(a1 + 216) = 0;
  if (a3 >= 1)
  {
    objc_msgSend_boundingBox(v5, v7, v8);
    *(float32x4_t *)(a1 + 160) = v10;
    *(float32x4_t *)(a1 + 176) = v11;
    float v12 = COERCE_FLOAT(vsubq_f32(v10, v11).i32[1]) / (float)a3;
    if (v12 > 0.0)
    {
      float v13 = fabsf(v11.f32[0]);
      float v14 = fabsf(v10.f32[0]);
      if (v13 < v14) {
        float v13 = v14;
      }
      float32x2_t v15 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL).u64[0];
      float32x2_t v16 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
      int8x8_t v17 = vbsl_s8((int8x8_t)vcagt_f32(v16, v15), (int8x8_t)vabs_f32(v16), (int8x8_t)vabs_f32(v15));
      if (*(float *)v17.i32 < *(float *)&v17.i32[1]) {
        v17.i32[0] = v17.i32[1];
      }
      if (v13 >= *(float *)v17.i32) {
        *(float *)v17.i32 = v13;
      }
      *(_DWORD *)(a1 + 32) = (int)(float)((float)(*(float *)v17.i32 * 4.0) / v12);
      sub_20B056CAC(v5, &v22);
      uint64_t v19 = *v9;
      if (*v9)
      {
        *(void *)(a1 + 208) = v19;
        operator delete(v19);
        *long long v9 = 0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
      }
      double v20 = *(double *)&v22;
      *(_OWORD *)(a1 + 200) = v22;
      *(void *)(a1 + 216) = v23;
      sub_20B0BC154(a1, v20, v18);
    }
  }

  return a1;
}

void sub_20B0BC10C(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    v2[26] = v6;
    operator delete(v6);
  }
  sub_20B0BC32C(v3);
  uint64_t v7 = (void *)v2[1];
  if (v7)
  {
    v2[2] = v7;
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_20B0BC154(uint64_t result, double a2, double a3)
{
  float v3 = *(float *)(result + 160);
  if (v3 < *(float *)(result + 164)) {
    float v3 = *(float *)(result + 164);
  }
  if (v3 < *(float *)(result + 168)) {
    float v3 = *(float *)(result + 168);
  }
  float v4 = *(float *)(result + 176);
  if (*(float *)(result + 180) < v4) {
    float v4 = *(float *)(result + 180);
  }
  if (*(float *)(result + 184) < v4) {
    float v4 = *(float *)(result + 184);
  }
  *(float *)&a2 = fabsf(v3);
  float v5 = fabsf(v4);
  if (*(float *)&a2 < v5) {
    *(float *)&a2 = v5;
  }
  *(float *)&a3 = -*(float *)&a2;
  *(int32x4_t *)(result + 160) = vdupq_lane_s32(*(int32x2_t *)&a2, 0);
  *(int32x4_t *)(result + 176) = vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  if (*(void *)(result + 208) != *(void *)(result + 200)) {
    operator new();
  }
  return result;
}

uint64_t sub_20B0BC32C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  float v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  float v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B0BC384(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20B0DAE10(a1 + 40, v6);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  long long v9 = (void **)(a1 + 200);
  *(void *)(a1 + 216) = 0;
  if (a3 >= 1)
  {
    objc_msgSend_boundingBoxAtTime_(v5, v7, v8, 0.0);
    *(float32x4_t *)(a1 + 160) = v10;
    *(float32x4_t *)(a1 + 176) = v11;
    float v12 = COERCE_FLOAT(vsubq_f32(v10, v11).i32[1]) / (float)a3;
    if (v12 > 0.0)
    {
      float v13 = fabsf(v11.f32[0]);
      float v14 = fabsf(v10.f32[0]);
      if (v13 < v14) {
        float v13 = v14;
      }
      float32x2_t v15 = (float32x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL).u64[0];
      float32x2_t v16 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 4uLL).u64[0];
      int8x8_t v17 = vbsl_s8((int8x8_t)vcagt_f32(v16, v15), (int8x8_t)vabs_f32(v16), (int8x8_t)vabs_f32(v15));
      if (*(float *)v17.i32 < *(float *)&v17.i32[1]) {
        v17.i32[0] = v17.i32[1];
      }
      if (v13 >= *(float *)v17.i32) {
        *(float *)v17.i32 = v13;
      }
      *(_DWORD *)(a1 + 32) = (int)(float)((float)(*(float *)v17.i32 * 4.0) / v12);
      sub_20B0573EC(v5, (uint64_t *)&v22);
      uint64_t v19 = *v9;
      if (*v9)
      {
        *(void *)(a1 + 208) = v19;
        operator delete(v19);
        *long long v9 = 0;
        *(void *)(a1 + 208) = 0;
        *(void *)(a1 + 216) = 0;
      }
      double v20 = *(double *)&v22;
      *(_OWORD *)(a1 + 200) = v22;
      *(void *)(a1 + 216) = v23;
      sub_20B0BC154(a1, v20, v18);
    }
  }

  return a1;
}

void sub_20B0BC4AC(_Unwind_Exception *a1)
{
  uint64_t v6 = *v4;
  if (*v4)
  {
    v2[26] = v6;
    operator delete(v6);
  }
  sub_20B0BC32C(v3);
  uint64_t v7 = (void *)v2[1];
  if (v7)
  {
    v2[2] = v7;
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_20B0BC4F8(float32x4_t *a1, float32x4_t a2, double a3, double a4)
{
  float v4 = a1[12].f32[0];
  *(float *)&a4 = v4 * 0.5;
  float32x4_t v5 = vmulq_n_f32(vsubq_f32(vsubq_f32(a2, a1[8]), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0)), 1.0 / v4);
  __int16 v6 = llroundf(v5.f32[0]);
  __int16 v7 = llroundf(v5.f32[1]);
  __int16 v8 = llroundf(v5.f32[2]);
  return *(void *)(a1[5].i64[1] + 8 * v8) | ((*(void *)(a1[4].i64[0] + 8 * HIBYTE(v7)) | *(void *)(a1[5].i64[1] + 8 * HIBYTE(v8)) | *(void *)(a1[2].i64[1] + 8 * HIBYTE(v6))) << 24) | *(void *)(a1[4].i64[0] + 8 * v7) | *(void *)(a1[2].i64[1] + 8 * v6);
}

uint64_t sub_20B0BC588(uint64_t a1, uint64_t a2, float32x4_t *a3, int a4, double a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v14 = 0;
  uint64_t v15 = (a4 - 1);
  float32x2_t v16 = &a3[10].i32[3];
  uint64_t v17 = a2 + 48;
  __asm { FMOV            V0.4S, #0.25 }
  float32x4_t v32 = (float32x4_t)_Q0;
  do
  {
    _Q0.i32[0] = 0;
    int32x4_t v24 = *(int32x4_t *)(a2 + 16);
    float32x4_t v23 = *(float32x4_t *)(a2 + 32);
    v25.i64[0] = 0x3F0000003F000000;
    v25.i64[1] = 0x3F0000003F000000;
    float32x4_t v26 = vmulq_f32(vaddq_f32((float32x4_t)v24, v23), v25);
    float32x4_t v27 = vsubq_f32((float32x4_t)v24, v23);
    v24.i32[0] = v14 & 4;
    int8x16_t v28 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v24, _Q0), 0);
    *(float *)v24.i32 = 0.25 * v27.f32[0];
    v25.f32[0] = v26.f32[0] + (float)(0.25 * v27.f32[0]);
    v25.i32[1] = v26.i32[1];
    v25.i32[2] = v26.i32[2];
    *(float *)a10.i32 = v26.f32[0] - (float)(0.25 * v27.f32[0]);
    a10.i32[1] = v26.i32[1];
    a10.i32[2] = v26.i32[2];
    int8x16_t v29 = vbslq_s8(v28, a10, (int8x16_t)v25);
    v25.f32[0] = -(float)(v27.f32[0] * 0.25);
    *(float32x2_t *)v24.i8 = vadd_f32((float32x2_t)vext_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL), 4uLL), (float32x2_t)vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v14), (int8x8_t)0x100000002)), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v25.f32, 0), (int8x8_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 0)));
    uint64_t result = sub_20B09B9AC(a3, (float32x4_t)vextq_s8(vextq_s8(v29, v29, 4uLL), (int8x16_t)v24, 0xCuLL), vmulq_f32(v27, v32));
    if (result)
    {
      uint64_t v31 = *(void *)(v17 + 8 * v14);
      if (!v31) {
        operator new();
      }
      if (a4 < 1) {
        uint64_t result = (uint64_t)sub_20B05FB44(v31 + 120, v16, v16);
      }
      else {
        uint64_t result = sub_20B0BC588(a1, v31, a3, v15);
      }
    }
    ++v14;
  }
  while (v14 != 8);
  return result;
}

uint64_t sub_20B0BC768(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  long long v9 = (uint64_t *)result;
  while (2)
  {
    float32x4_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          long long v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                uint64_t v42 = *(a2 - 1);
                uint64_t v43 = *v10;
                if (*(float *)(v42 + 20) < *(float *)(*v10 + 20))
                {
                  *float32x4_t v10 = v42;
                  *(a2 - 1) = v43;
                }
                break;
              case 3uLL:
                uint64_t result = (uint64_t)sub_20B05EB38(v10, v10 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = (uint64_t)sub_20B05EDDC(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5uLL:
                unint64_t v44 = v10 + 1;
                unint64_t v45 = v10 + 2;
                int v46 = v10 + 3;
                uint64_t result = (uint64_t)sub_20B05EDDC(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v47 = *(a2 - 1);
                uint64_t v48 = v10[3];
                if (*(float *)(v47 + 20) < *(float *)(v48 + 20))
                {
                  *int v46 = v47;
                  *(a2 - 1) = v48;
                  uint64_t v49 = *v46;
                  uint64_t v50 = *v45;
                  if (*(float *)(*v46 + 20) < *(float *)(*v45 + 20))
                  {
                    *unint64_t v45 = v49;
                    *int v46 = v50;
                    uint64_t v51 = *v44;
                    if (*(float *)(v49 + 20) < *(float *)(*v44 + 20))
                    {
                      v10[1] = v49;
                      _OWORD v10[2] = v51;
                      uint64_t v52 = *v10;
                      if (*(float *)(v49 + 20) < *(float *)(*v10 + 20))
                      {
                        *float32x4_t v10 = v49;
                        v10[1] = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v53 = v10 + 1;
            BOOL v55 = v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 0;
                unsigned __int32 v57 = v10;
                do
                {
                  uint64_t v59 = *v57;
                  uint64_t v58 = v57[1];
                  unsigned __int32 v57 = v53;
                  if (*(float *)(v58 + 20) < *(float *)(v59 + 20))
                  {
                    uint64_t v60 = v56;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v60 + 8) = v59;
                      if (!v60) {
                        break;
                      }
                      uint64_t v59 = *(uint64_t *)((char *)v10 + v60 - 8);
                      v60 -= 8;
                      if (*(float *)(v58 + 20) >= *(float *)(v59 + 20))
                      {
                        unint64_t v61 = (uint64_t *)((char *)v10 + v60 + 8);
                        goto LABEL_85;
                      }
                    }
                    unint64_t v61 = v10;
LABEL_85:
                    *unint64_t v61 = v58;
                  }
                  uint64_t v53 = v57 + 1;
                  v56 += 8;
                }
                while (v57 + 1 != a2);
              }
            }
            else if (!v55)
            {
              do
              {
                uint64_t v88 = *v9;
                uint64_t v87 = v9[1];
                long long v9 = v53;
                if (*(float *)(v87 + 20) < *(float *)(v88 + 20))
                {
                  do
                  {
                    uint64_t *v53 = v88;
                    uint64_t v88 = *(v53 - 2);
                    --v53;
                  }
                  while (*(float *)(v87 + 20) < *(float *)(v88 + 20));
                  uint64_t *v53 = v87;
                }
                uint64_t v53 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  unsigned __int32 v66 = &v10[v65];
                  if (2 * v64 + 2 < (uint64_t)v12 && *(float *)(*v66 + 20) < *(float *)(v66[1] + 20))
                  {
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  __n128 v67 = &v10[v64];
                  uint64_t v68 = *v66;
                  uint64_t v69 = *v67;
                  if (*(float *)(*v66 + 20) >= *(float *)(*v67 + 20))
                  {
                    do
                    {
                      unint64_t v70 = v66;
                      uint64_t *v67 = v68;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = 2 * v65;
                      uint64_t v65 = (2 * v65) | 1;
                      unsigned __int32 v66 = &v10[v65];
                      uint64_t v72 = v71 + 2;
                      if (v72 < (uint64_t)v12)
                      {
                        uint64_t result = *v66;
                        if (*(float *)(*v66 + 20) < *(float *)(v66[1] + 20))
                        {
                          ++v66;
                          uint64_t v65 = v72;
                        }
                      }
                      uint64_t v68 = *v66;
                      __n128 v67 = v70;
                    }
                    while (*(float *)(*v66 + 20) >= *(float *)(v69 + 20));
                    *unint64_t v70 = v69;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              uint64_t v73 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v74 = 0;
                uint64_t v75 = *v10;
                BOOL v76 = v10;
                do
                {
                  BOOL v77 = v76;
                  v76 += v74 + 1;
                  uint64_t v78 = 2 * v74;
                  uint64_t v74 = (2 * v74) | 1;
                  uint64_t v79 = v78 + 2;
                  if (v79 < v73 && *(float *)(*v76 + 20) < *(float *)(v76[1] + 20))
                  {
                    ++v76;
                    uint64_t v74 = v79;
                  }
                  *BOOL v77 = *v76;
                }
                while (v74 <= (uint64_t)((unint64_t)(v73 - 2) >> 1));
                if (v76 == --a2)
                {
                  uint64_t *v76 = v75;
                }
                else
                {
                  uint64_t *v76 = *a2;
                  *a2 = v75;
                  uint64_t v80 = (char *)v76 - (char *)v10 + 8;
                  if (v80 >= 9)
                  {
                    unint64_t v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                    float32x4_t v82 = &v10[v81];
                    uint64_t v83 = *v82;
                    uint64_t v84 = *v76;
                    if (*(float *)(*v82 + 20) < *(float *)(*v76 + 20))
                    {
                      do
                      {
                        float32x4_t v85 = v82;
                        uint64_t *v76 = v83;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        float32x4_t v82 = &v10[v81];
                        uint64_t v83 = *v82;
                        BOOL v76 = v85;
                      }
                      while (*(float *)(*v82 + 20) < *(float *)(v84 + 20));
                      uint64_t *v85 = v84;
                    }
                  }
                }
              }
              while (v73-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_20B05EB38(v9, &v9[v12 >> 1], a2 - 1);
            sub_20B05EB38(v9 + 1, v14 - 1, a2 - 2);
            sub_20B05EB38(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = (uint64_t)sub_20B05EB38(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *long long v9 = *v14;
            *uint64_t v14 = v15;
          }
          else
          {
            uint64_t result = (uint64_t)sub_20B05EB38(&v9[v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          float v17 = *(float *)(v16 + 20);
          if (*(float *)(*(v9 - 1) + 20) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(float *)(*(a2 - 1) + 20))
          {
            uint64_t v33 = v9 + 1;
            do
            {
              float32x4_t v10 = v33;
              if (v33 >= a2) {
                break;
              }
              ++v33;
            }
            while (v17 >= *(float *)(*v10 + 20));
          }
          else
          {
            float32x4_t v10 = v9;
            do
            {
              uint64_t v32 = v10[1];
              ++v10;
            }
            while (v17 >= *(float *)(v32 + 20));
          }
          unint64_t v34 = a2;
          if (v10 < a2)
          {
            unint64_t v34 = a2;
            do
              uint64_t v35 = *--v34;
            while (v17 < *(float *)(v35 + 20));
          }
          if (v10 < v34)
          {
            uint64_t v36 = *v10;
            uint64_t v37 = *v34;
            do
            {
              *float32x4_t v10 = v37;
              *unint64_t v34 = v36;
              float v38 = *(float *)(v16 + 20);
              do
              {
                uint64_t v39 = v10[1];
                ++v10;
                uint64_t v36 = v39;
              }
              while (v38 >= *(float *)(v39 + 20));
              do
              {
                uint64_t v40 = *--v34;
                uint64_t v37 = v40;
              }
              while (v38 < *(float *)(v40 + 20));
            }
            while (v10 < v34);
          }
          uint64_t v41 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *long long v9 = *v41;
          }
          a4 = 0;
          *uint64_t v41 = v16;
        }
        float v17 = *(float *)(v16 + 20);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(float *)(v19 + 20) < v17);
        double v20 = &v9[v18];
        unint64_t v21 = a2;
        if (v18 == 1)
        {
          unint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(float *)(v23 + 20) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(float *)(v22 + 20) >= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v30 = v20 - 1;
        }
        else
        {
          uint64_t v24 = *v21;
          float32x4_t v25 = v21;
          float32x4_t v26 = &v9[v18];
          do
          {
            *float32x4_t v26 = v24;
            *float32x4_t v25 = v19;
            float v27 = *(float *)(v16 + 20);
            do
            {
              uint64_t v28 = v26[1];
              ++v26;
              uint64_t v19 = v28;
            }
            while (*(float *)(v28 + 20) < v27);
            do
            {
              uint64_t v29 = *--v25;
              uint64_t v24 = v29;
            }
            while (*(float *)(v29 + 20) >= v27);
          }
          while (v26 < v25);
          uint64_t v30 = v26 - 1;
        }
        if (v30 != v9) {
          *long long v9 = *v30;
        }
        uint64_t *v30 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = sub_20B0BC768(v9, v30, a3, a4 & 1);
        a4 = 0;
        float32x4_t v10 = v30 + 1;
      }
      BOOL v31 = sub_20B0BCED0(v9, v30);
      float32x4_t v10 = v30 + 1;
      uint64_t result = sub_20B0BCED0(v30 + 1, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_34;
      }
    }
    a2 = v30;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL sub_20B0BCED0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(float *)(v6 + 20) < *(float *)(*a1 + 20))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_20B05EB38(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_20B05EDDC(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      float v17 = a1 + 1;
      uint64_t v18 = a1 + 2;
      uint64_t v19 = a1 + 3;
      sub_20B05EDDC(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v20 = *(a2 - 1);
      uint64_t v21 = a1[3];
      if (*(float *)(v20 + 20) < *(float *)(v21 + 20))
      {
        *uint64_t v19 = v20;
        *(a2 - 1) = v21;
        uint64_t v22 = *v19;
        uint64_t v23 = *v18;
        if (*(float *)(*v19 + 20) < *(float *)(*v18 + 20))
        {
          *uint64_t v18 = v22;
          *uint64_t v19 = v23;
          uint64_t v24 = *v17;
          if (*(float *)(v22 + 20) < *(float *)(*v17 + 20))
          {
            a1[1] = v22;
            a1[2] = v24;
            uint64_t v25 = *a1;
            if (*(float *)(v22 + 20) < *(float *)(*a1 + 20))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      __int16 v8 = a1 + 2;
      sub_20B05EB38(a1, a1 + 1, a1 + 2);
      long long v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    if (*(float *)(*v9 + 20) < *(float *)(*v8 + 20))
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 8;
        if (v14 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (*(float *)(v12 + 20) >= *(float *)(v13 + 20))
        {
          uint64_t v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      uint64_t v16 = a1;
LABEL_13:
      *uint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    __int16 v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void sub_20B0BEFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v44 = *(void **)(v42 - 224);
  if (v44)
  {
    *(void *)(v42 - 216) = v44;
    operator delete(v44);
  }
  unint64_t v45 = *(void **)(v42 - 200);
  if (v45)
  {
    *(void *)(v42 - 192) = v45;
    operator delete(v45);
  }
  int v46 = *(void **)(v42 - 176);
  if (v46)
  {
    *(void *)(v42 - 168) = v46;
    operator delete(v46);
  }

  _Unwind_Resume(a1);
}

void sub_20B0BF32C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float sub_20B0BF33C(int a1)
{
  dword_267691144 = a1;
  float result = 1.0 / (double)a1;
  dword_267691148 = LODWORD(result);
  dword_26769114C = 1067030938;
  dword_267691150 = 1061997773;
  return result;
}

BOOL sub_20B0BF380(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4 = vsub_f32(a2, a1);
  int32x2_t v5 = (int32x2_t)vsub_f32(a3, a1);
  int32x2_t v6 = (int32x2_t)vsub_f32(a4, a1);
  float32x2_t v7 = vmla_lane_f32(vneg_f32(vmul_n_f32((float32x2_t)vzip2_s32(v6, v5), v4.f32[0])), (float32x2_t)vzip1_s32(v6, v5), v4, 1);
  if (vmul_lane_f32(v7, v7, 1).f32[0] >= 0.0) {
    return 0;
  }
  float32x2_t v8 = vsub_f32(a4, a3);
  int32x2_t v9 = (int32x2_t)vsub_f32(a1, a3);
  int32x2_t v10 = (int32x2_t)vsub_f32(a2, a3);
  float32x2_t v11 = vmla_lane_f32(vneg_f32(vmul_n_f32((float32x2_t)vzip2_s32(v9, v10), v8.f32[0])), (float32x2_t)vzip1_s32(v9, v10), v8, 1);
  return vmul_lane_f32(v11, v11, 1).f32[0] < 0.0;
}

double sub_20B0BF3E4(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4 = vsub_f32(a2, a1);
  float32x2_t v5 = vsub_f32(a4, a3);
  float32x2_t v6 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v5), v4);
  float32x2_t v7 = vsub_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1));
  float32x2_t v8 = vsub_f32(a3, a1);
  if (v7.f32[0] == 0.0)
  {
    float v9 = vaddv_f32(vmul_f32(vsub_f32(a4, a1), v8));
    BOOL v10 = vaddv_f32(vmul_f32(vsub_f32(a4, a2), vsub_f32(a3, a2))) < 0.0;
    float32x2_t v11 = vmul_f32(vsub_f32(a1, a3), vsub_f32(a2, a3));
    double v12 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(0, vadd_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1))), 0), (int8x8_t)a3, (int8x8_t)a4));
    if (!v10) {
      *(double *)&a2 = v12;
    }
    if (v9 >= 0.0) {
      float32x2_t v13 = a2;
    }
    else {
      float32x2_t v13 = a1;
    }
  }
  else
  {
    float32x2_t v14 = vmul_f32(v8, (float32x2_t)vrev64_s32((int32x2_t)v4));
    float32x2_t v13 = vmla_n_f32(a3, v5, vdiv_f32(vsub_f32(v14, (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1)), v7).f32[0]);
  }
  return *(double *)&v13;
}

uint64_t sub_20B0BF47C(float32x4_t a1, float a2)
{
  float v2 = 1.0 / a2;
  unsigned int v3 = vcvtms_u32_f32(v2 * a1.f32[0]);
  unsigned int v4 = vcvtms_u32_f32(vmuls_lane_f32(v2, *(float32x2_t *)a1.f32, 1));
  unint64_t v5 = (((unint64_t)(v3 & 0x1FFFFF) << 16) | ((unint64_t)(v3 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v3;
  uint64_t v6 = (v5 | (v5 << 8)) & 0x1003003003003003 | (16 * ((v5 | (v5 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  unint64_t v7 = (((unint64_t)(v4 & 0x1FFFFF) << 16) | ((unint64_t)(v4 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v4;
  uint64_t v8 = (v7 | (v7 << 8)) & 0x1003003003003003 | (16 * ((v7 | (v7 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  uint64_t v9 = vcvtms_u32_f32(vmuls_lane_f32(v2, a1, 2)) & 0x1FFFFF;
  unint64_t v10 = (((unint64_t)v9 << 16) | (v9 << 32) | v9) & 0xF00000F00000FLL | (((((unint64_t)v9 << 16) | (v9 << 32) | v9) & 0x1F0000FF0000FFLL) << 8) & 0x100F00F00F00F00FLL;
  return ((8 * v8) | (2 * v8)) & 0x2492492492492492 | ((16 * ((v10 | (16 * v10)) & 0x10C30C30C30C30C3)) | (4 * ((v10 | (16 * v10)) & 0x10C30C30C30C30C3))) & 0x4924924924924924 | (v6 | (4 * v6)) & 0x1249249249249249;
}

float32x2_t sub_20B0BF590(float32x2_t a1)
{
  return vmul_n_f32(vrndm_f32(vmul_n_f32(a1, (float)dword_267691144)), *(float *)&dword_267691148);
}

uint64_t sub_20B0BF5B4(float32x4_t a1, uint64_t a2, unint64_t *a3)
{
  a1.i64[0] = *a3;
  return sub_20B0BF47C(a1, 0.000001);
}

BOOL sub_20B0BF5C4(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float32x2_t v3 = vsub_f32(*a2, *a3);
  return vaddv_f32(vmul_f32(v3, v3)) < 1.0e-12;
}

uint64_t sub_20B0BF5EC(uint64_t a1, float32x4_t *a2)
{
  return sub_20B0BF47C(*a2, 0.000001);
}

BOOL sub_20B0BF5FC(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = vsubq_f32(*a2, *a3);
  float32x4_t v4 = vmulq_f32(v3, v3);
  return vaddq_f32(vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2)).f32[0] < 1.0e-12;
}

uint64_t sub_20B0BF630(uint64_t a1, _OWORD *a2)
{
  long long v2 = *a2;
  uint64_t v3 = 2654435769;
  unint64_t v4 = *a2 + 2654435769;
  if (COERCE_FLOAT(*a2) == 0.0) {
    unint64_t v4 = 2654435769;
  }
  uint64_t v5 = DWORD1(v2) + 2654435769;
  if (*((float *)&v2 + 1) == 0.0) {
    uint64_t v5 = 2654435769;
  }
  unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2)) ^ v4;
  uint64_t v7 = DWORD2(v2) + 2654435769;
  if (*((float *)&v2 + 2) == 0.0) {
    uint64_t v7 = 2654435769;
  }
  unint64_t v8 = (v7 + (v6 << 6) + (v6 >> 2)) ^ v6;
  if (*((float *)&v2 + 3) != 0.0) {
    uint64_t v3 = HIDWORD(v2) + 2654435769;
  }
  return (v3 + (v8 << 6) + (v8 >> 2)) ^ v8;
}

BOOL sub_20B0BF6B0(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = vsubq_f32(*a2, *a3);
  int8x16_t v4 = (int8x16_t)vmulq_f32(v3, v3);
  return vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL))) < 1.0e-12;
}

uint64_t sub_20B0BF6E0(uint64_t a1, long long **a2)
{
  long long v2 = **a2;
  long long v3 = (*a2)[1];
  uint64_t v4 = 2654435769;
  unint64_t v5 = v2 + 2654435769;
  if (*(float *)&v2 == 0.0) {
    unint64_t v5 = 2654435769;
  }
  uint64_t v6 = DWORD1(v2) + 2654435769;
  if (*((float *)&v2 + 1) == 0.0) {
    uint64_t v6 = 2654435769;
  }
  unint64_t v7 = (v6 + (v5 << 6) + (v5 >> 2)) ^ v5;
  uint64_t v8 = DWORD2(v2) + 2654435769;
  if (*((float *)&v2 + 2) == 0.0) {
    uint64_t v8 = 2654435769;
  }
  unint64_t v9 = (v8 + (v7 << 6) + (v7 >> 2)) ^ v7;
  uint64_t v10 = v3 + 2654435769;
  if (*(float *)&v3 == 0.0) {
    uint64_t v10 = 2654435769;
  }
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2)) ^ v9;
  uint64_t v12 = DWORD1(v3) + 2654435769;
  if (*((float *)&v3 + 1) == 0.0) {
    uint64_t v12 = 2654435769;
  }
  unint64_t v13 = (v12 + (v11 << 6) + (v11 >> 2)) ^ v11;
  if (*((float *)&v3 + 2) != 0.0) {
    uint64_t v4 = DWORD2(v3) + 2654435769;
  }
  return (v4 + (v13 << 6) + (v13 >> 2)) ^ v13;
}

BOOL sub_20B0BF7A0(uint64_t a1, float32x4_t **a2, float32x4_t **a3)
{
  float32x4_t v3 = vsubq_f32(**a2, **a3);
  float32x4_t v4 = vmulq_f32(v3, v3);
  if (vaddq_f32(vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2)).f32[0] >= 1.0e-12)return 0; {
  float32x4_t v5 = vsubq_f32((*a2)[1], (*a3)[1]);
  }
  float32x4_t v6 = vmulq_f32(v5, v5);
  return vaddq_f32(vaddq_f32(v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2)).f32[0] < 1.0e-12;
}

uint64_t sub_20B0BF80C(uint64_t a1, int32x2_t *a2)
{
  int64x2_t v2 = vaddw_s32(vdupq_n_s64(0x9E3779B9uLL), vrev64_s32(*a2));
  unint64_t v3 = (v2.i64[0] + (v2.i64[1] << 6) + ((unint64_t)v2.i64[1] >> 2)) ^ v2.i64[1];
  unint64_t v4 = ((v3 << 6) + (int)*(void *)&a2[1] + (v3 >> 2) + 2654435769u) ^ v3;
  return ((v4 << 6) + (int)HIDWORD(*(_OWORD *)a2->i8) + (v4 >> 2) + 2654435769u) ^ v4;
}

uint64_t sub_20B0BF86C(uint64_t a1, float32x4_t *a2)
{
  return sub_20B0BF47C(*a2, *(float *)&dword_267691154);
}

BOOL sub_20B0BF87C(int32x2_t a1, float32x4_t a2, float32x4_t a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6)
{
  a1.i32[0] = dword_267691154;
  __asm { FMOV            V3.2S, #1.0 }
  *(float32x2_t *)a2.f32 = vdiv_f32(_D3, (float32x2_t)vdup_lane_s32(a1, 0));
  *(float32x2_t *)a3.f32 = vmul_n_f32(vrndm_f32(vmul_f32(*a5, *(float32x2_t *)a2.f32)), *(float *)&dword_267691154);
  a3.f32[2] = floorf(a5[1].f32[0] / *(float *)&dword_267691154) * *(float *)&dword_267691154;
  *(float32x2_t *)a2.f32 = vmul_n_f32(vrndm_f32(vmul_f32(*a6, *(float32x2_t *)a2.f32)), *(float *)&dword_267691154);
  a2.f32[2] = floorf(a6[1].f32[0] / *(float *)&dword_267691154) * *(float *)&dword_267691154;
  float32x4_t v11 = vsubq_f32(a3, a2);
  float32x4_t v12 = vmulq_f32(v11, v11);
  return vaddq_f32(vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2)).f32[0] < 1.0e-12;
}

int8x16_t *sub_20B0BF904(int8x16_t *a1, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4 = sub_20B0BF47C((float32x4_t)a2, 0.000001);
  uint64_t v5 = sub_20B0BF47C((float32x4_t)a3, 0.000001);
  v6.i64[0] = v4;
  v7.i64[0] = v5;
  int8x16_t v8 = (int8x16_t)vdupq_lane_s64(vcgtq_u64(v7, v6).i64[0], 0);
  *a1 = vbslq_s8(v8, a2, a3);
  a1[1] = vbslq_s8(v8, a3, a2);
  if (v4 == v5)
  {
    unint64_t v9 = sub_20B07FC90(MEMORY[0x263F8C100], (uint64_t)"Can't choose for edge creation", 30);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
    uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v14);
    std::ostream::put();
    std::ostream::flush();
    *a1 = a2;
    a1[1] = a3;
  }
  return a1;
}

void sub_20B0BFA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
}

double sub_20B0BFA48(_OWORD *a1)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_20B0BFA54(float32x4_t *a1)
{
  uint64_t v2 = sub_20B0BF47C(*a1, 0.000001);
  return v2 ^ (sub_20B0BF47C(a1[1], 0.000001) << 32);
}

float sub_20B0BFAA4(float32x4_t *a1)
{
  float32x4_t v1 = vsubq_f32(*a1, a1[1]);
  float32x4_t v2 = vmulq_f32(v1, v1);
  return sqrtf(vaddq_f32(vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2)).f32[0]);
}

BOOL sub_20B0BFAC8(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2 = vsubq_f32(*a1, *a2);
  float32x4_t v3 = vmulq_f32(v2, v2);
  if (sqrtf(vaddq_f32(vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2)).f32[0]) >= 0.000001)return 0; {
  float32x4_t v4 = vsubq_f32(a1[1], a2[1]);
  }
  float32x4_t v5 = vmulq_f32(v4, v4);
  return sqrtf(vaddq_f32(vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2)).f32[0]) < 0.000001;
}

float32x2_t sub_20B0BFB34(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2 = vmul_f32(a1[3], a2);
  a1[2] = vmul_f32(a1[2], a2);
  a1[3] = v2;
  float32x2_t result = vmul_f32(a1[4], a2);
  a1[4] = result;
  return result;
}

float32x2_t sub_20B0BFB54(float32x2_t *a1, float32x2_t a2)
{
  float32x2_t v2 = vadd_f32(a1[3], a2);
  a1[2] = vadd_f32(a1[2], a2);
  a1[3] = v2;
  float32x2_t result = vadd_f32(a1[4], a2);
  a1[4] = result;
  return result;
}

float sub_20B0BFB74(void *a1)
{
  float32x2_t v1 = (float32x2_t)a1[2];
  float32x2_t v2 = (float32x2_t)a1[3];
  float32x2_t v3 = vsub_f32(v1, v2);
  int32x2_t v4 = (int32x2_t)vmul_f32(v3, v3);
  float32x2_t v5 = (float32x2_t)a1[4];
  float32x2_t v6 = vsub_f32(v2, v5);
  int32x2_t v7 = (int32x2_t)vmul_f32(v6, v6);
  float32x2_t v8 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v7, v4), (float32x2_t)vzip2_s32(v7, v4)));
  float32x2_t v9 = vsub_f32(v5, v1);
  v9.f32[0] = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
  v5.f32[0] = (float)(vaddv_f32(v8) + v9.f32[0]) * 0.5;
  v9.f32[0] = (float)((float)(v5.f32[0] - v8.f32[1]) * v5.f32[0])
            * (float)((float)(v5.f32[0] - v8.f32[0]) * (float)(v5.f32[0] - v9.f32[0]));
  float v10 = sqrtf(v9.f32[0]);
  BOOL v11 = v9.f32[0] <= 0.0;
  float result = 0.0;
  if (!v11) {
    return v10;
  }
  return result;
}

float sub_20B0BFBEC(float32x4_t *a1)
{
  float32x4_t v1 = a1[4];
  float32x4_t v2 = a1[5];
  float32x4_t v3 = vsubq_f32(v1, v2);
  float32x4_t v4 = vmulq_f32(v3, v3);
  float32x4_t v5 = a1[6];
  float32x4_t v6 = vsubq_f32(v2, v5);
  float32x4_t v7 = vmulq_f32(v6, v6);
  v4.f32[0] = sqrtf(vaddq_f32(vaddq_f32(v4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 2)).f32[0]);
  v7.f32[0] = sqrtf(vaddq_f32(vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2)).f32[0]);
  float32x4_t v8 = vsubq_f32(v5, v1);
  float32x4_t v9 = vmulq_f32(v8, v8);
  v9.f32[0] = sqrtf(vaddq_f32(vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2)).f32[0]);
  v9.f32[0] = (float)((float)((float)((float)((float)(v7.f32[0] + v4.f32[0]) + v9.f32[0]) * 0.5) - v4.f32[0])
                    * (float)((float)((float)(v7.f32[0] + v4.f32[0]) + v9.f32[0]) * 0.5))
            * (float)((float)((float)((float)((float)(v7.f32[0] + v4.f32[0]) + v9.f32[0]) * 0.5) - v7.f32[0])
                    * (float)((float)((float)((float)(v7.f32[0] + v4.f32[0]) + v9.f32[0]) * 0.5) - v9.f32[0]));
  float v10 = sqrtf(v9.f32[0]);
  BOOL v11 = v9.f32[0] <= 0.0;
  float result = 0.0;
  if (!v11) {
    return v10;
  }
  return result;
}

void *sub_20B0BFC84(void *result)
{
  *float result = 0;
  result[1] = 0;
  result[32] = 0;
  result[33] = 0;
  return result;
}

__n128 sub_20B0BFC90(uint64_t a1)
{
  float32x4_t v2 = *(float32x4_t *)(a1 + 80);
  float32x4_t v26 = *(float32x4_t *)(a1 + 96);
  float32x4_t v3 = *(float32x4_t *)(a1 + 64);
  float32x4_t v4 = vsubq_f32(v2, v26);
  int32x4_t v5 = (int32x4_t)vmulq_f32(v4, v4);
  *(float *)v5.i32 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 1)), (float32x4_t)vdupq_laneq_s32(v5, 2)).f32[0]);
  float32x4_t v6 = vsubq_f32(v3, v26);
  int32x4_t v7 = (int32x4_t)vmulq_f32(v6, v6);
  float32x4_t v24 = v3;
  int32x4_t v25 = (int32x4_t)vsubq_f32(v2, v3);
  int32x4_t v8 = (int32x4_t)vmulq_f32((float32x4_t)v25, (float32x4_t)v25);
  float v9 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.i8, 1)), (float32x4_t)vdupq_laneq_s32(v7, 2)).f32[0]);
  *(float *)&unsigned int v10 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.i8, 1)), (float32x4_t)vdupq_laneq_s32(v8, 2)).f32[0]);
  float v22 = (float)((float)(v9 * v9)
              - (float)((float)(*(float *)v5.i32 * *(float *)v5.i32) - (float)(*(float *)&v10 * *(float *)&v10)))
      / (float)(v9 * (float)(*(float *)&v10 + *(float *)&v10));
  float v23 = v9;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v10;
  float v11 = acosf(v22);
  *(float32x2_t *)(a1 + 32) = vmul_n_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sinf(v11)), LODWORD(v22)), v23);
  __asm { FMOV            V0.4S, #1.0 }
  *(__n128 *)(a1 + 224) = result;
  *(__n128 *)(a1 + 240) = result;
  int32x4_t v17 = (int32x4_t)vsubq_f32(v26, v24);
  int32x4_t v18 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL), (float32x4_t)v17)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), (float32x4_t)v25);
  int32x4_t v19 = (int32x4_t)vmulq_f32((float32x4_t)v18, (float32x4_t)v18);
  v19.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v19, 2), *(float32x2_t *)v19.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.i8, 1)).u32[0];
  float32x2_t v20 = vrsqrte_f32((float32x2_t)v19.u32[0]);
  float32x2_t v21 = vmul_f32(vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v20, v20)), v20);
  *(float32x4_t *)(a1 + 192) = vnegq_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL), vmul_f32(v21, vrsqrts_f32((float32x2_t)v19.u32[0], vmul_f32(v21, v21))).f32[0]));
  *(__n128 *)(a1 + 208) = result;
  return result;
}

uint64_t sub_20B0BFDDC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 264) = 0;
  sub_20B0BFC90(a1);
  return a1;
}

void *sub_20B0BFE5C@<X0>(void *result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  float32x2_t v4 = (float32x2_t)result[2];
  float32x2_t v3 = (float32x2_t)result[3];
  float32x2_t v5 = (float32x2_t)result[4];
  unsigned __int8 v6 = vcgt_f32(v5, v3).u8[0];
  _ZF = (v6 & 1) == 0;
  if (v6) {
    LODWORD(v8) = result[4];
  }
  else {
    LODWORD(v8) = result[3];
  }
  if (_ZF) {
    LODWORD(v9) = result[4];
  }
  else {
    LODWORD(v9) = result[3];
  }
  if (v4.f32[0] >= v8) {
    LODWORD(v8) = result[2];
  }
  if (v4.f32[0] < v9) {
    LODWORD(v9) = result[2];
  }
  if (*(float *)&a3 < v9 || *(float *)&a3 > v8) {
    goto LABEL_30;
  }
  LODWORD(v11) = HIDWORD(result[2]);
  LODWORD(v12) = HIDWORD(result[3]);
  if (v3.f32[1] >= v5.f32[1]) {
    LODWORD(v13) = HIDWORD(result[4]);
  }
  else {
    LODWORD(v13) = HIDWORD(result[3]);
  }
  if (v3.f32[1] < v5.f32[1]) {
    LODWORD(v12) = HIDWORD(result[4]);
  }
  if (v4.f32[1] >= v13) {
    float v14 = v13;
  }
  else {
    LODWORD(v14) = HIDWORD(result[2]);
  }
  if (v4.f32[1] < v12) {
    float v11 = v12;
  }
  if (*((float *)&a3 + 1) < v14 || *((float *)&a3 + 1) > v11) {
    goto LABEL_30;
  }
  float32x2_t v19 = vsub_f32(v3, v4);
  int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
  float32x2_t v21 = vsub_f32(v5, v4);
  int32x2_t v22 = (int32x2_t)vmul_f32(v21, v21);
  float32x2_t v23 = vadd_f32((float32x2_t)vzip1_s32(v22, v20), (float32x2_t)vzip2_s32(v22, v20));
  float32x2_t v24 = vrsqrte_f32((float32x2_t)v23.u32[1]);
  float32x2_t v25 = vmul_f32(vrsqrts_f32((float32x2_t)v23.u32[1], vmul_f32(v24, v24)), v24);
  float32x2_t v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[1], vmul_f32(v25, v25)));
  float32x2_t v27 = vrsqrte_f32((float32x2_t)v23.u32[0]);
  float32x2_t v28 = vmul_f32(vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v27, v27)), v27);
  float32x2_t v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v28, v28)));
  float32x2_t v30 = vmul_f32(v21, v19);
  int32x2_t v31 = (int32x2_t)vmul_n_f32(v30, vmul_f32(v29, v26).f32[0]);
  float32x2_t v32 = vsub_f32(v4, v3);
  float32x2_t v33 = vmul_f32(v32, v32);
  float32x2_t v34 = vadd_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1));
  float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
  float32x2_t v36 = vmul_f32(vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)), v35);
  float32x2_t v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36)));
  float32x2_t v38 = vsub_f32(v5, v3);
  float32x2_t v39 = vmul_f32(v38, v38);
  float32x2_t v40 = vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1));
  float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
  float32x2_t v42 = vmul_f32(vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)), v41);
  float32x2_t v43 = vmul_f32(v38, v32);
  float v44 = fabsf(vaddv_f32(vmul_n_f32(v43, vmul_f32(vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))), v37).f32[0])));
  float32x2_t v45 = vsub_f32(v4, v5);
  int32x2_t v46 = (int32x2_t)vmul_f32(v45, v45);
  float32x2_t v47 = vsub_f32(v3, v5);
  int32x2_t v48 = (int32x2_t)vmul_f32(v47, v47);
  float32x2_t v49 = vadd_f32((float32x2_t)vzip1_s32(v48, v46), (float32x2_t)vzip2_s32(v48, v46));
  float32x2_t v50 = vrsqrte_f32((float32x2_t)v49.u32[1]);
  float32x2_t v51 = vmul_f32(vrsqrts_f32((float32x2_t)v49.u32[1], vmul_f32(v50, v50)), v50);
  float32x2_t v52 = vrsqrte_f32((float32x2_t)v49.u32[0]);
  float32x2_t v53 = vmul_f32(vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v52, v52)), v52);
  float32x2_t v54 = vmul_f32(v53, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v53, v53)));
  float32x2_t v55 = vmul_f32(v47, v45);
  int32x2_t v56 = (int32x2_t)vmul_n_f32(v55, vmul_f32(v54, vmul_f32(v51, vrsqrts_f32((float32x2_t)v49.u32[1], vmul_f32(v51, v51)))).f32[0]);
  float32x2_t v57 = vabs_f32(vadd_f32((float32x2_t)vzip1_s32(v31, v56), (float32x2_t)vzip2_s32(v31, v56)));
  if (v57.f32[0] >= v44 || v57.f32[0] >= v57.f32[1])
  {
    if (v44 < v57.f32[0] && v44 < v57.f32[1])
    {
      _S4 = vaddv_f32(v39);
      int32x2_t v74 = (int32x2_t)vmul_f32(vsub_f32(*(float32x2_t *)&a3, v3), v32);
      _D0 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)v43, v74), (float32x2_t)vzip2_s32((int32x2_t)v43, v74));
      float v76 = vmla_f32(vneg_f32(vmul_f32(_D0, _D0)), v34, v40).f32[0];
      __asm { FMLA            S1, S4, V0.S[1] }
      float v78 = _S1 / v76;
      if (v78 >= 0.0)
      {
        _S4 = _D0.i32[1];
        __asm { FMLS            S3, S4, V0.S[0] }
        float v66 = _S3 / v76;
        if ((float)(_S3 / v76) >= 0.0 && (float)(v78 + v66) <= 1.0001)
        {
          *(float *)a2 = v78;
          *(float *)(a2 + 4) = 1.0 - (float)(v78 + v66);
          goto LABEL_51;
        }
      }
    }
    else
    {
      float32x2_t v60 = vsub_f32(*(float32x2_t *)&a3, v5);
      float32x2_t v61 = vadd_f32(v55, (float32x2_t)vdup_lane_s32((int32x2_t)v55, 1));
      int32x2_t v62 = (int32x2_t)vmul_f32(v60, v45);
      int32x2_t v63 = (int32x2_t)vmul_f32(v60, v47);
      float32x2_t v64 = vadd_f32((float32x2_t)vzip1_s32(v62, v63), (float32x2_t)vzip2_s32(v62, v63));
      float32x2_t v65 = vdiv_f32(vmla_f32(vneg_f32(vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)v64), v61.f32[0])), v64, v49), (float32x2_t)vdup_lane_s32((int32x2_t)vmla_lane_f32(vneg_f32(vmul_f32(v61, v61)), v49, v49, 1), 0));
      if (v65.f32[0] >= 0.0 && v65.f32[1] >= 0.0 && (float)(v65.f32[0] + v65.f32[1]) <= 1.0001)
      {
        *(float32x2_t *)a2 = v65;
        float v66 = 1.0 - (float)(v65.f32[0] + v65.f32[1]);
LABEL_51:
        *(float *)(a2 + 8) = v66;
        goto LABEL_52;
      }
    }
LABEL_30:
    __asm { FMOV            V0.2S, #-1.0 }
    *(void *)a2 = _D0;
    *(_DWORD *)(a2 + 8) = -1082130432;
    return result;
  }
  float32x2_t v67 = vsub_f32(*(float32x2_t *)&a3, v4);
  float32x2_t v68 = vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1));
  int32x2_t v69 = (int32x2_t)vmul_f32(v19, v67);
  int32x2_t v70 = (int32x2_t)vmul_f32(v21, v67);
  float32x2_t v71 = vadd_f32((float32x2_t)vzip1_s32(v69, v70), (float32x2_t)vzip2_s32(v69, v70));
  float32x2_t v72 = vdiv_f32(vmla_f32(vneg_f32(vmul_n_f32((float32x2_t)vrev64_s32((int32x2_t)v71), v68.f32[0])), v23, v71), (float32x2_t)vdup_lane_s32((int32x2_t)vmla_lane_f32(vneg_f32(vmul_f32(v68, v68)), v23, v23, 1), 0));
  if (v72.f32[0] < 0.0 || v72.f32[1] < 0.0 || (float)(v72.f32[0] + v72.f32[1]) > 1.0001) {
    goto LABEL_30;
  }
  *(float *)a2 = 1.0 - (float)(v72.f32[0] + v72.f32[1]);
  *(float32x2_t *)(a2 + 4) = v72;
LABEL_52:
  *(void *)(a2 + 16) = result;
  return result;
}

uint64_t sub_20B0C0204(uint64_t a1, void *a2, float32x4_t a3, float32x4_t a4)
{
  v12[0] = a3;
  v12[1] = a4;
  if (!sub_20B0C04F4(a2, v12)) {
    return 0;
  }
  unsigned __int8 v6 = sub_20B0C04F4(a2, v12);
  if (!v6) {
    sub_20B07FA4C("unordered_map::at: key not found");
  }
  std::string __p = 0;
  unsigned int v10 = 0;
  uint64_t v11 = 0;
  sub_20B0C0658(&__p, (const void *)v6[3].i64[0], v6[3].i64[1], (v6[3].i64[1] - v6[3].i64[0]) >> 3);
  uint64_t v7 = *(void *)__p;
  if (*(void *)__p == a1)
  {
    if ((unint64_t)(v10 - (unsigned char *)__p) < 9) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = *((void *)__p + 1);
    }
  }
  unsigned int v10 = __p;
  operator delete(__p);
  return v7;
}

double sub_20B0C02BC(float32x2_t *a1)
{
  *(float32x2_t *)v1.i8 = a1[2];
  v2.i64[0] = v1.i64[0];
  v2.i64[1] = v1.i64[0];
  *(float32x2_t *)v3.i8 = a1[4];
  int16x4_t v4 = (int16x4_t)vcgt_f32(*(float32x2_t *)v3.i8, a1[3]);
  *(float32x2_t *)v5.i8 = a1[3];
  v5.i64[1] = v3.i64[0];
  v3.i64[1] = v5.i64[0];
  float32x4_t v6 = (float32x4_t)vbslq_s8((int8x16_t)vmovl_s16(vuzp1_s16(v4, v4)), v5, v3);
  int8x16_t v7 = (int8x16_t)vcgtq_f32(v6, v2);
  v3.i64[0] = vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL).u64[0];
  v6.i64[1] = v1.i64[0];
  v1.i64[1] = v3.i64[0];
  *(void *)&double result = vbslq_s8(v7, v1, (int8x16_t)v6).u64[0];
  return result;
}

__n128 sub_20B0C0304(__n128 *a1)
{
  return a1[12];
}

BOOL sub_20B0C030C(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t v2 = vsubq_f32(a2, a1[4]);
  float32x4_t v3 = vmulq_f32(v2, v2);
  if (sqrtf(vaddq_f32(vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2)).f32[0]) < 0.000001)return 1; {
  float32x4_t v4 = vsubq_f32(a2, a1[5]);
  }
  float32x4_t v5 = vmulq_f32(v4, v4);
  if (sqrtf(vaddq_f32(vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2)).f32[0]) < 0.000001)return 1; {
  float32x4_t v7 = vsubq_f32(a2, a1[6]);
  }
  float32x4_t v8 = vmulq_f32(v7, v7);
  return sqrtf(vaddq_f32(vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2)).f32[0]) < 0.000001;
}

float32x2_t sub_20B0C0398(float32x2_t *a1)
{
  return vmul_f32(vadd_f32(vadd_f32(a1[3], a1[2]), a1[4]), (float32x2_t)vdup_n_s32(0x3EAAAAABu));
}

unint64_t sub_20B0C03BC(float32x4_t *a1)
{
  unint64_t v2 = sub_20B0BF47C(a1[4], 0.000001);
  unint64_t v3 = sub_20B0BF47C(a1[5], 0.000001);
  unint64_t v4 = sub_20B0BF47C(a1[6], 0.000001);
  if (v4 >= v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v4 <= v3) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6 >= v2) {
    unint64_t v7 = v2;
  }
  else {
    unint64_t v7 = v6;
  }
  if (v6 <= v2) {
    unint64_t v6 = v2;
  }
  if (v5 >= v7) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v5 <= v7) {
    unint64_t v5 = v7;
  }
  return v6 ^ (v5 << 21) ^ (v8 << 42);
}

BOOL sub_20B0C044C(float32x4_t *a1, float32x4_t *a2)
{
  unint64_t v4 = sub_20B0C03BC(a1);
  if (v4 != sub_20B0C03BC(a2)) {
    return 0;
  }
  float32x4_t v5 = vmulq_f32(vsubq_f32(vaddq_f32(vaddq_f32(a1[5], a1[4]), a1[6]), vaddq_f32(vaddq_f32(a2[4], a2[5]), a2[6])), (float32x4_t)vdupq_n_s32(0x3EAAAAABu));
  int32x4_t v6 = (int32x4_t)vmulq_f32(v5, v5);
  return sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.i8, 1)), (float32x4_t)vdupq_laneq_s32(v6, 2)).f32[0]) < 0.000001;
}

float32x4_t *sub_20B0C04F4(void *a1, float32x4_t *a2)
{
  float32x4_t v21 = *a2;
  uint64_t v4 = sub_20B0BF47C(*a2, 0.000001);
  float32x4_t v20 = a2[1];
  uint64_t v5 = sub_20B0BF47C(v20, 0.000001);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = v4 ^ (v5 << 32);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v10 = v4 ^ (v5 << 32);
    float32x4_t v12 = v20;
    float32x4_t v11 = v21;
    if (v7 >= *(void *)&v6) {
      uint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v10 = (*(void *)&v6 - 1) & v7;
    float32x4_t v12 = v20;
    float32x4_t v11 = v21;
  }
  float v13 = *(float32x4_t ***)(*a1 + 8 * v10);
  if (!v13) {
    return 0;
  }
  for (double result = *v13; result; double result = (float32x4_t *)result->i64[0])
  {
    unint64_t v15 = result->u64[1];
    if (v7 == v15)
    {
      float32x4_t v16 = vsubq_f32(result[1], v11);
      int32x4_t v17 = (int32x4_t)vmulq_f32(v16, v16);
      if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1)), (float32x4_t)vdupq_laneq_s32(v17, 2)).f32[0]) < 0.000001)
      {
        float32x4_t v18 = vsubq_f32(result[2], v12);
        int32x4_t v19 = (int32x4_t)vmulq_f32(v18, v18);
        if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1)), (float32x4_t)vdupq_laneq_s32(v19, 2)).f32[0]) < 0.000001)return result; {
      }
        }
    }
    else
    {
      if (v9 > 1)
      {
        if (v15 >= *(void *)&v6) {
          v15 %= *(void *)&v6;
        }
      }
      else
      {
        v15 &= *(void *)&v6 - 1;
      }
      if (v15 != v10) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_20B0C0658(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int8x8_t v6 = result;
    double result = sub_20B0602A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B0C06B8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_20B0C06D4(uint64_t *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26ACF4738, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26ACF4738))
  {
    operator new();
  }
  id v17 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v4 = 0;
    do
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      sub_20B0A592C(&v19, (void *)v2);
      long long v5 = *(_OWORD *)(v2 + 32);
      long long v20 = *(_OWORD *)(v2 + 16);
      long long v21 = v5;
      uint64_t v6 = *(void *)(v2 + 48);
      *(void *)&long long v22 = v6;
      if (v6)
      {
        uint64_t v7 = (atomic_ullong *)(v6 - 16);
        if (*((void *)&v21 + 1)) {
          uint64_t v7 = (atomic_ullong *)*((void *)&v21 + 1);
        }
        atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(void *)(v2 + 56);
      *((void *)&v22 + 1) = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)&v22 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v9 = *(void *)(v2 + 64);
      *(void *)&long long v23 = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&long long v23 = v23 & 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)&v23 + 1) = *(void *)(v2 + 72);
      uint64_t v10 = *(void *)(v2 + 80);
      *(void *)&long long v24 = v10;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&long long v24 = v24 & 0xFFFFFFFFFFFFFFF8;
      }
      DWORD2(v24) = *(_DWORD *)(v2 + 88);
      if ((void *)(qword_26ACF4748 + 8) != sub_20B0C7660(qword_26ACF4748, (uint64_t *)&v23))
      {
        unint64_t v18 = (unint64_t)&v23;
        id v11 = (id)sub_20B0C6F8C((uint64_t **)qword_26ACF4748, (uint64_t *)&v23, (uint64_t)&unk_20B1E7420, (uint64_t **)&v18)[5];
        MEMORY[0x2105310B0](&v18, "textureCoordinates");
        uint64_t v13 = v23;
        float v14 = (atomic_uint *)(v18 & 0xFFFFFFFFFFFFFFF8);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8) == v14)
        {
          if ((int)v4 >= 1)
          {
            int v15 = v4;
            uint64_t v4 = objc_msgSend_stringWithFormat_(NSString, v12, @"%@%d", v11, v4);

            id v11 = (id)v4;
            LODWORD(v4) = v15;
          }
          uint64_t v4 = (v4 + 1);
        }
        objc_msgSend_addObject_(v17, v12, (uint64_t)v11);
      }
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((BYTE8(v22) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v22 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      sub_20B06A6E8((uint64_t)&v20);
      sub_20B06A698((uint64_t)&v19);
      v2 += 96;
    }
    while (v2 != v3);
  }

  return v17;
}

void sub_20B0C0C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v23 = 0;
  while (1)
  {

    uint64_t v24 = *(void *)(v21 + v23 + 112);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 16;
    if (v23 == -128)
    {
      if ((a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x210532650](v20, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_26ACF4738);
      _Unwind_Resume(a1);
    }
  }
}

void sub_20B0C0EB0(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v50 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v5 = objc_opt_new();
  uint64_t v6 = *(void **)(a3 + 24);
  *(void *)(a3 + 24) = v5;

  float32x2_t v51 = sub_20B0C06D4(a1 + 1);
  uint64_t v9 = a1[1];
  uint64_t v8 = a1[2];
  float32x2_t v49 = a1;
  if (v9 != v8)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      float32x4_t v12 = objc_msgSend_objectAtIndexedSubscript_(v51, v7, v10);
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v56, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v9 + 72));
      EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20B0C1304(&v56, *(_DWORD *)(v9 + 88));
      float v14 = EmptyString;
      if ((v56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (*(int *)(v9 + 88) >= 256)
      {
        if ((*(void *)(v9 + 56) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          unint64_t v15 = (*(void *)(v9 + 56) & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          unint64_t v15 = (unint64_t)EmptyString;
        }
        if (*(char *)(v15 + 23) < 0) {
          unint64_t v15 = *(void *)v15;
        }
        if ((*v49 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v16 = (*v49 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        }
        if (*(char *)(v16 + 23) < 0) {
          unint64_t v16 = *(void *)v16;
        }
        NSLog(&cfstr_WarningAttribu.isa, v15, v16, *(unsigned int *)(v9 + 88), 255);
        float v14 = 0;
      }
      uint64_t v17 = *(void *)(v9 + 80);
      uint64_t v55 = v17;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v55 &= 0xFFFFFFFFFFFFFFF8;
      }
      BOOL v18 = sub_20B0C1BA4(&v55);
      if ((v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      id location = 0;
      float32x2_t v53 = 0;
      unint64_t v54 = 0;
      if (v12 && v14 && v18)
      {
        long long v19 = [MDLVertexAttribute alloc];
        uint64_t v21 = objc_msgSend_initWithName_format_offset_bufferIndex_(v19, v20, (uint64_t)v12, v14, 0, v11);
        unint64_t v54 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v9)
            / (unint64_t)*(int *)(v9 + 88);
        uint64_t v23 = objc_msgSend_numberWithInteger_(NSNumber, v22, v54);
        objc_msgSend_addObject_(v50, v24, (uint64_t)v23);

        if ((objc_msgSend_isEqualToString_(v12, v25, @"jointIndices") & 1) != 0
          || objc_msgSend_isEqualToString_(v12, v26, @"jointWeights"))
        {
          objc_msgSend_setInitializationValue_(v21, v26, v27, 0.0);
        }
        objc_msgSend_addOrReplaceAttribute_(*(void **)(a3 + 24), v26, (uint64_t)v21);
        uint64_t v30 = objc_msgSend_format(v21, v28, v29);
        uint64_t v31 = sub_20B1AB7B4(v30);
        float32x2_t v34 = objc_msgSend_layouts(*(void **)(a3 + 24), v32, v33);
        float32x2_t v36 = objc_msgSend_objectAtIndexedSubscript_(v34, v35, v11);
        objc_msgSend_setStride_(v36, v37, v31);

        ++v11;
      }
      else
      {
        if ((*(void *)(v9 + 56) & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v38 = (*(void *)(v9 + 56) & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v38 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v18);
        }
        if (*(char *)(v38 + 23) < 0) {
          unint64_t v38 = *(void *)v38;
        }
        uint64_t v21 = 0;
        NSLog(&cfstr_WarningUnableT.isa, v38);
      }
      objc_storeStrong(&location, v21);
      float32x2_t v41 = objc_msgSend_copy(v21, v39, v40);
      float32x2_t v42 = v53;
      float32x2_t v53 = v41;

      objc_msgSend_initializationValue(location, v43, v44);
      objc_msgSend_setInitializationValue_(v53, v45, v46);
      float32x2_t v47 = *(void **)(a3 + 8);
      if ((unint64_t)v47 >= *(void *)(a3 + 16))
      {
        uint64_t v48 = sub_20B0C76F0((uint64_t *)a3, (uint64_t)&location);
      }
      else
      {
        *float32x2_t v47 = location;
        v47[1] = v53;
        v47[2] = v54;
        uint64_t v48 = (uint64_t)(v47 + 3);
      }
      *(void *)(a3 + 8) = v48;

      v9 += 96;
      ++v10;
    }
    while (v9 != v8);
  }
}

void sub_20B0C1260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  sub_20B0C1D94(v16);

  _Unwind_Resume(a1);
}

unint64_t sub_20B0C1304(uint64_t *a1, int a2)
{
  v5[28] = *(uint64_t **)MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26ACF4710, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26ACF4710))
  {
    operator new();
  }
  v5[0] = a1;
  if (a2 < 2) {
    return sub_20B0C6F8C((uint64_t **)qword_26ACF4720, a1, (uint64_t)&unk_20B1E7420, v5)[5];
  }
  else {
    return sub_20B0C6F8C((uint64_t **)qword_26ACF4720, a1, (uint64_t)&unk_20B1E7420, v5)[5] & 0xFFFFFFFFFFFFF000 | a2;
  }
}

void sub_20B0C1900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v26 = 208;
  while (1)
  {
    uint64_t v27 = *(void *)(v24 + v26);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v26 -= 16;
    if (v26 == -16)
    {
      if ((a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x210532650](v23, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_26ACF4710);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_20B0C1BA4(void *a1)
{
  MEMORY[0x2105310B0](&v11, "constant");
  uint64_t v2 = v11;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL result = 1;
  }
  else
  {
    MEMORY[0x2105310B0](&v10, "uniform");
    uint64_t v3 = v10;
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v10 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL result = 1;
    }
    else
    {
      MEMORY[0x2105310B0](&v9, "varying");
      uint64_t v4 = v9;
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v9 & 0xFFFFFFFFFFFFFFF8))
      {
        BOOL result = 1;
      }
      else
      {
        MEMORY[0x2105310B0](&v8, "vertex");
        uint64_t v5 = v8;
        if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v8 & 0xFFFFFFFFFFFFFFF8))
        {
          BOOL result = 1;
        }
        else
        {
          MEMORY[0x2105310B0](&v7, "faceVarying");
          BOOL result = (*a1 & 0xFFFFFFFFFFFFFFF8) == (v7 & 0xFFFFFFFFFFFFFFF8);
          if ((v7 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v5 = v8;
        }
        if ((v5 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v4 = v9;
      }
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v3 = v10;
    }
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v2 = v11;
  }
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void **sub_20B0C1D94(void **a1)
{
  uint64_t v3 = a1;
  sub_20B0C70B0(&v3);
  return a1;
}

void sub_20B0C1DD4(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v145 = *MEMORY[0x263EF8340];
  id v9 = a3;
  id v130 = a7;
  int v131 = v9;
  int v129 = objc_msgSend_copy(v9, v10, v11);
  unint64_t v14 = 0;
  unsigned int v15 = 0;
  while (1)
  {
    unint64_t v16 = objc_msgSend_layouts(v9, v12, v13);
    unint64_t v19 = objc_msgSend_count(v16, v17, v18);

    if (v19 <= v14) {
      break;
    }
    long long v22 = objc_msgSend_layouts(v9, v20, v21);
    uint64_t v24 = objc_msgSend_objectAtIndexedSubscript_(v22, v23, v14);
    uint64_t v27 = objc_msgSend_stride(v24, v25, v26);

    ++v14;
    if (v27) {
      unsigned int v15 = v14;
    }
  }
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  float32x2_t v28 = objc_msgSend_attributes(v9, v20, v21);
  uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v29, (uint64_t)&v139, v144, 16);
  if (v32)
  {
    uint64_t v33 = *(void *)v140;
    do
    {
      for (uint64_t i = 0; i != v32; ++i)
      {
        if (*(void *)v140 != v33) {
          objc_enumerationMutation(v28);
        }
        float32x2_t v35 = *(void **)(*((void *)&v139 + 1) + 8 * i);
        if (objc_msgSend_format(v35, v30, v31))
        {
          int v36 = objc_msgSend_bufferIndex(v35, v30, v31);
          if (v15 <= v36 + 1) {
            unsigned int v15 = v36 + 1;
          }
        }
      }
      uint64_t v32 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v30, (uint64_t)&v139, v144, 16);
    }
    while (v32);
  }

  objc_msgSend_removeAllObjects(v130, v37, v38);
  if (v15)
  {
    uint64_t v41 = v15;
    do
    {
      float32x2_t v42 = objc_msgSend_numberWithInteger_(NSNumber, v39, 0);
      objc_msgSend_addObject_(v130, v43, (uint64_t)v42);

      --v41;
    }
    while (v41);
  }
  uint64_t v44 = (id *)*a2;
  float32x2_t v45 = (id *)a2[1];
  while (v44 != v45)
  {
    id v46 = *v44;
    id v47 = v44[1];
    id v50 = objc_msgSend_name(v46, v48, v49);
    float32x2_t v52 = objc_msgSend_attributeNamed_(v129, v51, (uint64_t)v50);

    if (v52)
    {
      uint64_t v55 = objc_msgSend_bufferIndex(v52, v53, v54);
      objc_msgSend_setBufferIndex_(v47, v56, v55);
      uint64_t v59 = objc_msgSend_offset(v52, v57, v58);
      objc_msgSend_setOffset_(v47, v60, v59);
      uint64_t v63 = objc_msgSend_format(v52, v61, v62);
      objc_msgSend_setFormat_(v47, v64, v63);
    }
    else
    {
      id v65 = v44[1];
      v44[1] = 0;
    }
    v44 += 3;
  }
  long long v137 = 0u;
  long long v138 = 0u;
  long long v135 = 0u;
  long long v136 = 0u;
  float v66 = objc_msgSend_attributes(v129, v39, v40);
  uint64_t v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v66, v67, (uint64_t)&v135, v143, 16);
  if (v68)
  {
    uint64_t v69 = *(void *)v136;
    do
    {
      for (uint64_t j = 0; j != v68; ++j)
      {
        if (*(void *)v136 != v69) {
          objc_enumerationMutation(v66);
        }
        float32x2_t v71 = *(void **)(*((void *)&v135 + 1) + 8 * j);
        id v72 = v71;
        uint64_t v73 = (void *)a2[3];
        float v76 = objc_msgSend_name(v72, v74, v75);
        float v78 = objc_msgSend_attributeNamed_(v73, v77, (uint64_t)v76);

        if (!v78)
        {
          id v132 = 0;
          id v133 = 0;
          uint64_t v134 = 0;
          objc_storeStrong(&v133, v71);
          uint64_t v79 = (void *)a2[1];
          if ((unint64_t)v79 >= a2[2])
          {
            uint64_t v80 = sub_20B0C76F0(a2, (uint64_t)&v132);
          }
          else
          {
            void *v79 = v132;
            v79[1] = v133;
            v79[2] = v134;
            uint64_t v80 = (uint64_t)(v79 + 3);
          }
          a2[1] = v80;
        }
      }
      uint64_t v68 = objc_msgSend_countByEnumeratingWithState_objects_count_(v66, v81, (uint64_t)&v135, v143, 16);
    }
    while (v68);
  }

  uint64_t v84 = (void *)*a2;
  float32x4_t v85 = (void *)a2[1];
  if ((void *)*a2 != v85)
  {
    char v128 = 1;
    do
    {
      float32x4_t v86 = (void *)v84[1];
      if (v86)
      {
        uint64_t v87 = objc_msgSend_bufferIndex(v86, v82, v83);
        if (*v84)
        {
          uint64_t v88 = v87;
          uint64_t v89 = objc_msgSend_numberWithInteger_(NSNumber, v82, v84[2]);
          float v91 = objc_msgSend_objectAtIndexedSubscript_(v130, v90, v88);
          BOOL v94 = objc_msgSend_integerValue(v91, v92, v93) == 0;

          if (v94)
          {
            objc_msgSend_setObject_atIndexedSubscript_(v130, v95, (uint64_t)v89, v88);
          }
          else
          {
            uint64_t v96 = objc_msgSend_objectAtIndexedSubscript_(v130, v95, v88);
            uint64_t v99 = objc_msgSend_integerValue(v96, v97, v98);
            BOOL v102 = v99 == objc_msgSend_integerValue(v89, v100, v101);

            if (!v102)
            {
              int v104 = NSNumber;
              uint64_t v105 = objc_msgSend_objectAtIndexedSubscript_(v130, v103, v88);
              uint64_t v108 = objc_msgSend_integerValue(v105, v106, v107);
              uint64_t v111 = objc_msgSend_integerValue(v89, v109, v110);
              if (v111 >= v108) {
                objc_msgSend_numberWithInteger_(v104, v112, v108);
              }
              else {
              uint64_t v113 = objc_msgSend_numberWithInteger_(v104, v112, v111);
              }
              objc_msgSend_setObject_atIndexedSubscript_(v130, v114, (uint64_t)v113, v88);

              if (v128) {
                NSLog(&cfstr_WarningTryingT.isa, v88);
              }
              char v128 = 0;
            }
          }
        }
      }
      v84 += 3;
    }
    while (v84 != v85);
    unint64_t v115 = (void *)*a2;
    uint64_t v116 = (void *)a2[1];
    while (v115 != v116)
    {
      unint64_t v117 = (void *)v115[1];
      if (v117)
      {
        uint64_t v118 = objc_msgSend_bufferIndex(v117, v82, v83);
        if (!*v115)
        {
          uint64_t v119 = v118;
          unsigned __int32 v120 = objc_msgSend_objectAtIndexedSubscript_(v130, v82, v118);
          BOOL v123 = objc_msgSend_integerValue(v120, v121, v122) == 0;

          if (v123)
          {
            unint64_t v124 = objc_msgSend_numberWithInteger_(NSNumber, v82, a4);
            objc_msgSend_setObject_atIndexedSubscript_(v130, v125, (uint64_t)v124, v119);
          }
        }
      }
      v115 += 3;
    }
  }
  unint64_t v126 = (void *)a2[3];
  a2[3] = (uint64_t)v129;
}

void sub_20B0C238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_20B0C24EC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  uint64_t v11 = objc_msgSend_vertexCount(v7, v9, v10);
  if (*a4 == v11)
  {
    float32x4_t v12 = [MDLMesh alloc];
    unsigned int v15 = objc_msgSend_initWithBufferAllocator_(v12, v13, (uint64_t)v8);
    if (*(char *)(a2 + 23) < 0) {
      a2 = *(void *)a2;
    }
    unint64_t v16 = objc_msgSend_stringWithUTF8String_(NSString, v14, a2);
    objc_msgSend_setName_(v15, v17, (uint64_t)v16);

    objc_msgSend_setVertexCount_(v15, v18, v11);
    uint64_t v21 = objc_msgSend_submeshes(v7, v19, v20);
    objc_msgSend_setSubmeshes_(v15, v22, (uint64_t)v21);

    objc_msgSend_addAttributeWithName_format_(v15, v23, @"position", 786435);
    uint64_t v25 = objc_msgSend_vertexAttributeDataForAttributeNamed_(v15, v24, @"position");
    uint64_t v28 = objc_msgSend_dataStart(v25, v26, v27);
    if (v11)
    {
      uint64_t v31 = v28;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      do
      {
        if (4 * v33 + 8 <= (unint64_t)objc_msgSend_bufferSize(v25, v29, v30))
        {
          uint64_t v34 = a4[4] + v32;
          int v35 = *(_DWORD *)(v34 + 8);
          uint64_t v36 = v31 + 4 * v33;
          *(void *)uint64_t v36 = *(void *)v34;
          v33 += 3;
          *(_DWORD *)(v36 + 8) = v35;
        }
        v32 += 12;
        --v11;
      }
      while (v11);
    }
  }
  else
  {
    NSLog(&cfstr_WarningTargetS.isa);
    unsigned int v15 = 0;
  }

  return v15;
}

void sub_20B0C2694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_20B0C26D4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  id v7 = objc_opt_new();
  id v8 = *(uint64_t **)a2;
  id v9 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 == v9)
  {
LABEL_21:
    uint64_t v19 = sub_20B0C2AB8((void *)(a2 + 24));
    long long v20 = *(_OWORD *)(v19 + 16);
    long long v42 = *(_OWORD *)v19;
    long long v43 = v20;
    uint64_t v21 = *(void *)(v19 + 32);
    uint64_t v44 = v21;
    if (v21)
    {
      long long v22 = (atomic_ullong *)(v21 - 16);
      if (*((void *)&v43 + 1)) {
        long long v22 = (atomic_ullong *)*((void *)&v43 + 1);
      }
      atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = sub_20B0C2B4C((void *)(a2 + 40));
    long long v24 = *(_OWORD *)(v23 + 16);
    long long v37 = *(_OWORD *)v23;
    long long v38 = v24;
    uint64_t v25 = *(void *)(v23 + 32);
    uint64_t v39 = v25;
    if (v25)
    {
      uint64_t v26 = (atomic_ullong *)(v25 - 16);
      if (*((void *)&v38 + 1)) {
        uint64_t v26 = (atomic_ullong *)*((void *)&v38 + 1);
      }
      atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = [MDLMorphDeformer alloc];
    sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v42);
    uint64_t v28 = v44;
    uint64_t v29 = v42;
    sub_20B0C7CA8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37);
    uint64_t v31 = objc_msgSend_initWithTargetShapes_shapeSetTargetWeights_count_shapeSetTargetCounts_count_(v27, v30, (uint64_t)v7, v28, v29, v39, (void)v37);
    uint64_t v34 = objc_msgSend_weights(v31, v32, v33);
    objc_msgSend_resetWithAnimatedValue_(v34, v35, *(void *)(a2 + 56));

    sub_20B06A6E8((uint64_t)&v37);
    sub_20B06A6E8((uint64_t)&v42);
  }
  else
  {
    while (1)
    {
      long long v37 = 0u;
      long long v38 = 0u;
      uint64_t v10 = *v8;
      *(void *)&long long v37 = v10;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&long long v37 = v37 & 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)&v37 + 1) = 0;
      long long v38 = 0uLL;
      sub_20B0C7158((void *)&v37 + 1, v8[1], v8[2], 0xAAAAAAAAAAAAAAABLL * ((v8[2] - v8[1]) >> 5));
      uint64_t v44 = 0;
      long long v42 = 0u;
      long long v43 = 0u;
      uint64_t v11 = sub_20B0A3578(*((void **)&v37 + 1));
      long long v12 = *(_OWORD *)(v11 + 16);
      long long v42 = *(_OWORD *)v11;
      long long v43 = v12;
      uint64_t v13 = *(void *)(v11 + 32);
      uint64_t v44 = v13;
      if (v13)
      {
        unint64_t v14 = (atomic_ullong *)(v13 - 16);
        if (*((void *)&v43 + 1)) {
          unint64_t v14 = (atomic_ullong *)*((void *)&v43 + 1);
        }
        atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
      }
      if ((v37 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (v37 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v11);
      }
      if (*(char *)(EmptyString + 23) < 0)
      {
        sub_20B07F994(__p, *(void **)EmptyString, *(void *)(EmptyString + 8));
      }
      else
      {
        long long v16 = *(_OWORD *)EmptyString;
        uint64_t v41 = *(void *)(EmptyString + 16);
        *(_OWORD *)std::string __p = v16;
      }
      uint64_t v18 = sub_20B0C24EC(v5, (uint64_t)__p, v6, &v42);
      if (SHIBYTE(v41) < 0) {
        operator delete(__p[0]);
      }
      if (!v18) {
        break;
      }
      objc_msgSend_addObject_(v7, v17, (uint64_t)v18);

      sub_20B06A6E8((uint64_t)&v42);
      *(void *)&long long v42 = (char *)&v37 + 8;
      sub_20B0C7368((void ***)&v42);
      if ((v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v8 += 4;
      if (v8 == v9) {
        goto LABEL_21;
      }
    }
    sub_20B06A6E8((uint64_t)&v42);
    *(void *)&long long v42 = (char *)&v37 + 8;
    sub_20B0C7368((void ***)&v42);
    if ((v37 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v31 = 0;
  }

  return v31;
}

void sub_20B0C29E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  sub_20B06A6E8((uint64_t)&a11);
  sub_20B06A6E8((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t sub_20B0C2AB8(void *a1)
{
  if (sub_20B0C7AC0((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B0C7AF8, &unk_26BF4F0C0);
  }
}

uint64_t sub_20B0C2B4C(void *a1)
{
  if (sub_20B0C7BB4((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B0C7BEC, &unk_26BF4F108);
  }
}

id sub_20B0C2BE0(void *a1, void *a2)
{
  id v25 = a2;
  id v3 = objc_alloc_init(MEMORY[0x263EFF980]);
  id v5 = (void *)a1[55];
  for (uint64_t i = (void *)a1[56]; v5 != i; v5 += 7)
  {
    uint64_t v27 = 0;
    memset(v26, 0, sizeof(v26));
    uint64_t v6 = v5[1];
    if (v6)
    {
      int v28 = 0;
      uint64_t v29 = &v28;
      sub_20B0A624C((unint64_t *)v26, 3 * v6, &v29);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v5 + 1));
      id v7 = (int *)v5[5];
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v5 + 1));
      uint64_t v8 = v5[5] + 4 * v5[1];
      if (v7 != (int *)v8)
      {
        uint64_t v9 = 0;
        do
        {
          uint64_t v10 = *v7;
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
          int v11 = 3 * v10;
          LODWORD(v10) = *(_DWORD *)(a1[23] + 12 * v10);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26);
          *(_DWORD *)(v27 + v9) = v10;
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
          LODWORD(v10) = *(_DWORD *)(a1[23] + 4 * v11 + 4);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26);
          *(_DWORD *)(v27 + v9 + 4) = v10;
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
          LODWORD(v10) = *(_DWORD *)(a1[23] + 4 * v11 + 8);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26);
          *(_DWORD *)(v27 + v9 + 8) = v10;
          ++v7;
          v9 += 12;
        }
        while (v7 != (int *)v8);
      }
    }
    else
    {
      sub_20B0A4010((uint64_t)v26, (long long *)(a1 + 19));
    }
    id v12 = objc_alloc(MEMORY[0x263EFF8F8]);
    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26);
    unint64_t v14 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v12, v13, v27, 4 * *(void *)&v26[0], 0);
    long long v16 = objc_msgSend_newBufferWithData_type_(v25, v15, (uint64_t)v14, 2);
    if (objc_msgSend_conformsToProtocol_(v16, v17, (uint64_t)&unk_26BF5ED88))
    {
      id v18 = v16;
      objc_msgSend_setName_(v18, v19, @"indices");
    }
    long long v20 = [MDLSubmesh alloc];
    long long v22 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v20, v21, @"submesh", v16, *(void *)&v26[0], 32, 2, v5[6], 0);
    objc_msgSend_addObject_(v3, v23, (uint64_t)v22);

    sub_20B06A6E8((uint64_t)v26);
  }

  return v3;
}

void sub_20B0C2E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

MDLSubmeshTopology *sub_20B0C2EA4(uint64_t a1, uint64_t a2, void *a3)
{
  v30[2] = *(unsigned char **)MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = (uint64_t *)(a1 + 8);
  if (*(void *)(a1 + 8))
  {
    uint64_t v7 = 0;
    while (1)
    {
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 8));
      uint64_t v8 = *(int *)(*(void *)(a1 + 40) + 4 * v7);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 112));
      if (*(int *)(*(void *)(a2 + 144) + 4 * v8) >= 256) {
        break;
      }
      if (*v6 <= (unint64_t)++v7) {
        goto LABEL_5;
      }
    }
LABEL_13:
    uint64_t v17 = 0;
  }
  else
  {
    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 112));
    unsigned int v15 = *(int **)(a2 + 144);
    while (1)
    {
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 112));
      if (v15 == (int *)(*(void *)(a2 + 144) + 4 * *(void *)(a2 + 112))) {
        break;
      }
      int v16 = *v15++;
      if (v16 > 255) {
        goto LABEL_13;
      }
    }
LABEL_5:
    uint64_t v9 = objc_alloc_init(MDLSubmeshTopology);
    int v11 = v9;
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    if (!*v6)
    {
      objc_msgSend_setFaceCount_(v9, v10, *(void *)(a2 + 112));
      v30[1] = &off_26BF512D8;
      sub_20B0C8144();
    }
    objc_msgSend_setFaceCount_(v9, v10, *v6);
    unint64_t v12 = *v6;
    char v29 = 0;
    v30[0] = &v29;
    sub_20B0C82B4((unint64_t *)&v26, v12, v30);
    if (*v6)
    {
      unint64_t v13 = 0;
      do
      {
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 8));
        uint64_t v14 = *(int *)(*(void *)(a1 + 40) + 4 * v13);
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 112));
        LODWORD(v14) = *(_DWORD *)(*(void *)(a2 + 144) + 4 * v14);
        sub_20B0C84E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v26);
        *(unsigned char *)(v28 + v13++) = v14;
      }
      while (*v6 > v13);
    }
    id v18 = objc_alloc(MEMORY[0x263EFF8F8]);
    sub_20B0C84E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v26);
    long long v20 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v18, v19, v28, (void)v26, 0);
    long long v22 = objc_msgSend_newBufferWithData_type_(v5, v21, (uint64_t)v20, 2);
    if (objc_msgSend_conformsToProtocol_(v22, v23, (uint64_t)&unk_26BF5ED88)) {
      objc_msgSend_setName_(v22, v24, @"faceVertexCounts");
    }
    objc_msgSend_setFaceTopology_(v11, v24, (uint64_t)v22, v26, v27);
    uint64_t v17 = v11;

    sub_20B06A6E8((uint64_t)&v26);
  }

  return v17;
}

void sub_20B0C312C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B06A6E8((uint64_t)&a9);

  _Unwind_Resume(a1);
}

std::type_info *sub_20B0C31B0(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B0C81C0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4F0D8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B0C323C(void *a1)
{
  if (sub_20B0C81C0((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B0C81F8, &unk_26BF4F0D8);
  }
}

uint64_t sub_20B0C32D0(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      id v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        id v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B0C3368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B0C3384(uint64_t *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1[40] || !a1[45])
  {
LABEL_15:
    if (a1[30] && a1[35])
    {
      id v29 = objc_alloc(MEMORY[0x263EFF8F8]);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 30));
      uint64_t v31 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v29, v30, a1[34], 4 * a1[30], 0);
      uint64_t v33 = objc_msgSend_newBufferWithData_type_(v5, v32, (uint64_t)v31, 2);
      if (objc_msgSend_conformsToProtocol_(v33, v34, (uint64_t)&unk_26BF5ED88)) {
        objc_msgSend_setName_(v33, v35, @"vertexCreaseIndices");
      }
      objc_msgSend_setVertexCreaseIndices_(v6, v35, (uint64_t)v33);
      objc_msgSend_setVertexCreaseCount_(v6, v36, a1[30]);
      id v37 = objc_alloc(MEMORY[0x263EFF8F8]);
      sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 35));
      uint64_t v39 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v37, v38, a1[39], 4 * a1[35], 0);

      uint64_t v41 = objc_msgSend_newBufferWithData_type_(v5, v40, (uint64_t)v39, 2);
      if (objc_msgSend_conformsToProtocol_(v41, v42, (uint64_t)&unk_26BF5ED88)) {
        objc_msgSend_setName_(v41, v43, @"vertexCreaseSharpness");
      }
      objc_msgSend_setVertexCreases_(v6, v43, (uint64_t)v41);
    }
    goto LABEL_23;
  }
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  uint64_t v46 = 0;
  memset(v45, 0, sizeof(v45));
  uint64_t v44 = v5;
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 45));
  uint64_t v7 = (int *)a1[49];
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 45));
  uint64_t v8 = a1[49] + 4 * a1[45];
  if (v7 == (int *)v8)
  {
LABEL_10:
    id v14 = objc_alloc(MEMORY[0x263EFF8F8]);
    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v45);
    int v16 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v14, v15, v46, 4 * *(void *)&v45[0], 0);
    id v5 = v44;
    id v18 = objc_msgSend_newBufferWithData_type_(v44, v17, (uint64_t)v16, 2);
    if (objc_msgSend_conformsToProtocol_(v18, v19, (uint64_t)&unk_26BF5ED88)) {
      objc_msgSend_setName_(v18, v20, @"creaseIndices");
    }
    objc_msgSend_setEdgeCreaseIndices_(v6, v20, (uint64_t)v18);
    objc_msgSend_setEdgeCreaseCount_(v6, v21, *(void *)&v45[0] >> 1);
    id v22 = objc_alloc(MEMORY[0x263EFF8F8]);
    sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v47);
    long long v24 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v22, v23, v48, 4 * *(void *)&v47[0], 0);

    long long v26 = objc_msgSend_newBufferWithData_type_(v44, v25, (uint64_t)v24, 2);
    if (objc_msgSend_conformsToProtocol_(v26, v27, (uint64_t)&unk_26BF5ED88)) {
      objc_msgSend_setName_(v26, v28, @"creaseSharpness");
    }
    objc_msgSend_setEdgeCreases_(v6, v28, (uint64_t)v26);

    sub_20B06A6E8((uint64_t)v45);
    sub_20B06A6E8((uint64_t)v47);
    goto LABEL_15;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  while (1)
  {
    int v11 = *v7;
    if (a1[40] < (unint64_t)(*v7 + v10)) {
      break;
    }
    if (v11 >= 2)
    {
      uint64_t v12 = 4 * v10;
      int v13 = v11 - 1;
      do
      {
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 40));
        sub_20B0C857C((uint64_t)v45, (_DWORD *)(a1[44] + v12));
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 40));
        sub_20B0C857C((uint64_t)v45, (_DWORD *)(a1[44] + v12 + 4));
        sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 50));
        sub_20B0C86E4((uint64_t)v47, (_DWORD *)(a1[54] + 4 * v9));
        v12 += 4;
        ++v10;
        --v13;
      }
      while (v13);
    }
    ++v9;
    ++v10;
    if (++v7 == (int *)v8) {
      goto LABEL_10;
    }
  }
  sub_20B06A6E8((uint64_t)v45);
  sub_20B06A6E8((uint64_t)v47);
  id v5 = v44;
LABEL_23:
}

void sub_20B0C3724(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);

  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);

  _Unwind_Resume(a1);
}

id sub_20B0C37F4(uint64_t a1, void *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a4)
{
  id v7 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v8 = (long long *)a2[1];
  id v39 = v7;
  uint64_t v40 = (long long *)a2[2];
  if (v8 != v40)
  {
    int v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 8);
    uint64_t v41 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 14);
    unsigned int v12 = -1;
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 8);
    uint64_t v35 = a1;
    do
    {
      MEMORY[0x2105310B0](&v42, "vertex");
      uint64_t v14 = *((void *)v8 + 10);
      unsigned int v15 = (atomic_uint *)(v42 & 0xFFFFFFFFFFFFFFF8);
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8) == v15)
      {
        if ((v9 & 1) == 0)
        {
          uint64_t v44 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          if (*(void *)v11)
          {
            sub_20B06C1E8(v11);
            uint64_t v23 = *(int **)(a1 + 40);
            sub_20B06C1E8(v11);
            uint64_t v24 = *(void *)(a1 + 40) + 4 * *(void *)(a1 + 8);
            while (v23 != (int *)v24)
            {
              uint64_t v25 = *v23;
              sub_20B06C1E8(v41);
              uint64_t v26 = *(unsigned int *)(a2[18] + 4 * v25);
              sub_20B06C1E8(a4);
              if ((int)v26 >= 1)
              {
                uint64_t v27 = 4 * *(int *)(*((void *)a4 + 4) + 4 * v25);
                do
                {
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 19));
                  sub_20B0C857C((uint64_t)&v42, (_DWORD *)(a2[23] + v27));
                  v27 += 4;
                  --v26;
                }
                while (v26);
              }
              ++v23;
            }
          }
          else
          {
            sub_20B0A4010((uint64_t)&v42, (long long *)(a2 + 19));
          }
          sub_20B0C3BB4(a3, (uint64_t)&v42);
          sub_20B06A6E8((uint64_t)&v42);
          unsigned int v12 = v10;
          uint64_t v11 = v34;
          a1 = v35;
        }
        uint64_t v31 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v13, v12);
        objc_msgSend_addObject_(v39, v32, (uint64_t)v31);

        int v9 = 1;
      }
      else
      {
        MEMORY[0x2105310B0](&v42, "faceVarying");
        uint64_t v16 = *((void *)v8 + 10);
        uint64_t v17 = (atomic_uint *)(v42 & 0xFFFFFFFFFFFFFFF8);
        if ((v42 & 7) != 0) {
          atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8) == v17)
        {
          uint64_t v44 = 0;
          long long v42 = 0u;
          long long v43 = 0u;
          int v36 = v9;
          unsigned int v37 = v12;
          if (*(void *)v11)
          {
            sub_20B06C1E8(v11);
            id v18 = *(int **)(a1 + 40);
            sub_20B06C1E8(v11);
            for (uint64_t i = *(void *)(a1 + 40) + 4 * *(void *)(a1 + 8); v18 != (int *)i; ++v18)
            {
              uint64_t v20 = *v18;
              sub_20B06C1E8(v41);
              uint64_t v21 = *(unsigned int *)(a2[18] + 4 * v20);
              sub_20B06C1E8(a4);
              if ((int)v21 >= 1)
              {
                uint64_t v22 = 4 * *(int *)(*((void *)a4 + 4) + 4 * v20);
                do
                {
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v8 + 1));
                  sub_20B0C857C((uint64_t)&v42, (_DWORD *)(*((void *)v8 + 6) + v22));
                  v22 += 4;
                  --v21;
                }
                while (v21);
              }
            }
          }
          else
          {
            sub_20B0A4010((uint64_t)&v42, v8 + 1);
          }
          sub_20B0C3BB4(a3, (uint64_t)&v42);
          id v29 = objc_msgSend_numberWithUnsignedInteger_(NSNumber, v28, -1 - 0x3333333333333333 * ((a3[1] - *a3) >> 3));
          objc_msgSend_addObject_(v39, v30, (uint64_t)v29);

          sub_20B06A6E8((uint64_t)&v42);
          a1 = v35;
          int v9 = v36;
          unsigned int v12 = v37;
          uint64_t v11 = v34;
        }
      }
      ++v10;
      v8 += 6;
    }
    while (v8 != v40);
  }

  return v39;
}

void sub_20B0C3B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_20B06A6E8((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_20B0C3BB4(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666) {
      sub_20B05D0BC();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x333333333333333) {
      unint64_t v15 = 0x666666666666666;
    }
    else {
      unint64_t v15 = v13;
    }
    v22[4] = result;
    uint64_t v16 = (char *)sub_20B0C88C4(result, v15);
    uint64_t v17 = &v16[40 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[40 * v18];
    long long v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
    *((_OWORD *)v17 + 1) = v19;
    uint64_t v20 = *(void *)(a2 + 32);
    *((void *)v17 + 4) = v20;
    if (v20)
    {
      uint64_t v21 = (atomic_ullong *)(v20 - 16);
      if (*((void *)v17 + 3)) {
        uint64_t v21 = (atomic_ullong *)*((void *)v17 + 3);
      }
      atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
    }
    v22[2] = v17 + 40;
    sub_20B0C884C(a1, v22);
    uint64_t v11 = a1[1];
    uint64_t result = sub_20B0C8ACC((uint64_t)v22);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(v7 + 32) = v9;
    if (v9)
    {
      unsigned int v10 = (atomic_ullong *)(v9 - 16);
      if (*(void *)(v7 + 24)) {
        unsigned int v10 = *(atomic_ullong **)(v7 + 24);
      }
      atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v11;
  return result;
}

void sub_20B0C3CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B0C8ACC((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_20B0C3D0C(uint64_t *a1, void *a2, int a3)
{
  id v49 = a2;
  id v46 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v59 = 0;
  memset(v58, 0, sizeof(v58));
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14);
  sub_20B0A3504((uint64_t)v58, a1[14]);
  if (a1[14])
  {
    unint64_t v6 = 0;
    int v7 = 0;
    do
    {
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
      *(_DWORD *)(v59 + 4 * v6) = v7;
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
      v7 += *(_DWORD *)(a1[18] + 4 * v6++);
    }
    while (a1[14] > v6);
  }
  long long v8 = (void *)a1[55];
  for (uint64_t i = (void *)a1[56]; v8 != i; v8 += 7)
  {
    uint64_t v57 = 0;
    memset(v56, 0, sizeof(v56));
    if (a3)
    {
      float32x2_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      id v50 = sub_20B0C37F4((uint64_t)v8, a1, (uint64_t *)&v53, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
      uint64_t v9 = *v53;
      unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v54 - v53) * *v53;
      int v60 = 0;
      float32x2_t v61 = &v60;
      sub_20B0A624C((unint64_t *)v56, v10, &v61);
      if (v9)
      {
        uint64_t v11 = 0;
        unint64_t v13 = v53;
        unint64_t v12 = v54;
        uint64_t v51 = v9;
        float32x2_t v52 = v8;
        do
        {
          if (v12 == v13)
          {
            unint64_t v12 = v13;
          }
          else
          {
            unint64_t v14 = v4;
            unint64_t v15 = 0;
            uint64_t v16 = 4;
            do
            {
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v13[v16 - 4]);
              int v17 = *(_DWORD *)(v13[v16] + 4 * v11);
              long long v19 = v53;
              uint64_t v18 = v54;
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v56);
              *(_DWORD *)(v57 + 4 * (v15 - 0x3333333333333333 * (v18 - v19) * v11)) = v17;
              ++v15;
              unint64_t v13 = v53;
              unint64_t v12 = v54;
              v16 += 5;
            }
            while (0xCCCCCCCCCCCCCCCDLL * (v54 - v53) > v15);
            uint64_t v4 = v14;
            uint64_t v9 = v51;
            long long v8 = v52;
          }
          ++v11;
        }
        while (v11 != v9);
      }
      uint64_t v62 = (void **)&v53;
      sub_20B0C8B48(&v62);
    }
    else
    {
      if (v8[1])
      {
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v8 + 1));
        uint64_t v20 = (int *)v8[5];
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v8 + 1));
        uint64_t v21 = v8[5] + 4 * v8[1];
        while (v20 != (int *)v21)
        {
          uint64_t v22 = *v20;
          sub_20B06C1E8(v4);
          uint64_t v23 = *(unsigned int *)(a1[18] + 4 * v22);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
          if ((int)v23 >= 1)
          {
            uint64_t v24 = 4 * *(int *)(v59 + 4 * v22);
            do
            {
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 19));
              sub_20B0C857C((uint64_t)v56, (_DWORD *)(a1[23] + v24));
              v24 += 4;
              --v23;
            }
            while (v23);
          }
          ++v20;
        }
      }
      else
      {
        sub_20B0A4010((uint64_t)v56, (long long *)(a1 + 19));
      }
      id v50 = 0;
    }
    id v25 = objc_alloc(MEMORY[0x263EFF8F8]);
    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v56);
    uint64_t v27 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v25, v26, v57, 4 * *(void *)&v56[0], 0);
    id v29 = objc_msgSend_newBufferWithData_type_(v49, v28, (uint64_t)v27, 2);
    if (objc_msgSend_conformsToProtocol_(v29, v30, (uint64_t)&unk_26BF5ED88))
    {
      id v31 = v29;
      objc_msgSend_setName_(v31, v32, @"indices");
    }
    uint64_t v33 = sub_20B0C2EA4((uint64_t)v8, (uint64_t)a1, v49);
    if (a3)
    {
      uint64_t v34 = [MDLSubmesh alloc];
      unsigned int v37 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_faceIndexing_geometryType_material_topology_(v34, v35, @"submesh", v29, *(void *)&v56[0], 32, v50, 5, v8[6], v33);
      if (v37) {
        goto LABEL_30;
      }
    }
    else
    {
      long long v38 = [MDLSubmesh alloc];
      unsigned int v37 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v38, v39, @"submesh", v29, *(void *)&v56[0], 32, 5, v8[6], v33);
      if (v37)
      {
LABEL_30:
        objc_msgSend_addObject_(v46, v36, (uint64_t)v37);
      }
    }

    sub_20B06A6E8((uint64_t)v56);
  }
  uint64_t v40 = objc_msgSend_objectAtIndexedSubscript_(v46, v5, 0);
  long long v43 = objc_msgSend_topology(v40, v41, v42);
  sub_20B0C3384(a1, v49, v43);

  id v44 = v46;
  sub_20B06A6E8((uint64_t)v58);

  return v44;
}

void sub_20B0C4158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B06A6E8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C425C(void *a1, uint64_t a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 16);
  if (*(void *)(a2 + 16))
  {
    memset(v19, 0, 40);
    sub_20B0A3504((uint64_t)v19, a1[19]);
    if (a1[14])
    {
      unint64_t v5 = 0;
      LODWORD(i) = 0;
      do
      {
        int v7 = 0;
        for (uint64_t i = (int)i; ; ++i)
        {
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
          if (v7 >= *(_DWORD *)(a1[18] + 4 * v5)) {
            break;
          }
          sub_20B06C1E8(v4);
          int v8 = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v5);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
          *(_DWORD *)(*(void *)&v19[2] + 4 * i) = v8;
          ++v7;
        }
        ++v5;
      }
      while (a1[14] > v5);
    }
    unint64_t v9 = a1[19];
    int v20 = 0;
    v21[0] = &v20;
    sub_20B0A624C((unint64_t *)v4, v9, v21);
    uint64_t v10 = *((void *)v4 + 2);
    long long v11 = *(_OWORD *)v4;
    *(_OWORD *)uint64_t v4 = v19[0];
    *((void *)v4 + 2) = *(void *)&v19[1];
    v19[0] = v11;
    *(void *)&v19[1] = v10;
    long long v12 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)&v19[1] + 8);
    *(_OWORD *)((char *)&v19[1] + 8) = v12;
    sub_20B06A6E8((uint64_t)v19);
  }
  else
  {
    unint64_t v13 = a1[19];
    LODWORD(v21[0]) = 0;
    *(void *)&v19[0] = v21;
    sub_20B0A624C((unint64_t *)v4, v13, (_DWORD **)v19);
    if (a1[14])
    {
      unint64_t v14 = 0;
      int v15 = 0;
      do
      {
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
        if (*(int *)(a1[18] + 4 * v14) >= 1)
        {
          uint64_t v16 = 0;
          do
          {
            sub_20B06C1E8(v4);
            *(_DWORD *)(*(void *)(a2 + 48) + 4 * v15 + 4 * v16) = v14;
            sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14));
            ++v16;
          }
          while ((int)v16 < *(_DWORD *)(a1[18] + 4 * v14));
          v15 += v16;
        }
        ++v14;
      }
      while (a1[14] > v14);
    }
  }
  uint64_t result = MEMORY[0x2105310B0](v19, "faceVarying");
  uint64_t v18 = (void *)(a2 + 80);
  if (v19 == (_OWORD *)(a2 + 80))
  {
    if ((v19[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v19[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *uint64_t v18 = *(void *)&v19[0];
  }
  return result;
}

void sub_20B0C4480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B0C449C(uint64_t a1, uint64_t a2)
{
  memset(v12, 0, 40);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152);
  sub_20B0A3504((uint64_t)v12, *(void *)(a1 + 152));
  if (*(void *)v4)
  {
    unint64_t v5 = 0;
    do
    {
      sub_20B06C1E8(v4);
      uint64_t v6 = *(int *)(*(void *)(a1 + 184) + 4 * v5);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a2 + 16));
      LODWORD(v6) = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v6);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12);
      *(_DWORD *)(*(void *)&v12[2] + 4 * v5++) = v6;
      unint64_t v7 = *(void *)v4;
    }
    while (*(void *)v4 > v5);
  }
  else
  {
    unint64_t v7 = 0;
  }
  int v13 = 0;
  v14[0] = &v13;
  sub_20B0A624C((unint64_t *)(a2 + 16), v7, v14);
  uint64_t v8 = *(void *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a2 + 16) = v12[0];
  *(void *)(a2 + 32) = *(void *)&v12[1];
  v12[0] = v9;
  *(void *)&v12[1] = v8;
  long long v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)&v12[1] + 8);
  *(_OWORD *)((char *)&v12[1] + 8) = v10;
  MEMORY[0x2105310B0](v14, "faceVarying");
  long long v11 = (void *)(a2 + 80);
  if (v14 == (_DWORD **)(a2 + 80))
  {
    if (((uint64_t)v14[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v14[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *long long v11 = v14[0];
  }
  sub_20B06A6E8((uint64_t)v12);
}

void sub_20B0C4600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B0C4620(__n128 *a1, int a2)
{
  uint64_t v4 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    uint64_t v62 = 0;
    __n128 v60 = 0u;
    long long v61 = 0u;
    sub_20B06A31C((uint64_t)&v60, a2);
    uint64_t v6 = sub_20B06A288(a1);
    long long v7 = *(_OWORD *)(v6 + 16);
    long long v57 = *(_OWORD *)v6;
    long long v58 = v7;
    uint64_t v8 = *(_OWORD **)(v6 + 32);
    uint64_t v59 = v8;
    if (v8)
    {
      long long v9 = (atomic_ullong *)(v8 - 1);
      if (*((void *)&v58 + 1)) {
        long long v9 = (atomic_ullong *)*((void *)&v58 + 1);
      }
      atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
    }
    if ((void)v57)
    {
      sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
      long long v10 = v62;
      sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
      long long v11 = v62;
      unint64_t v12 = v60.n128_u64[0];
      sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
      uint64_t v13 = &v11[16 * v12] - v10;
      if (v13 >= 1)
      {
        unint64_t v14 = v59;
        unint64_t v15 = ((unint64_t)v13 >> 4) + 1;
        do
        {
          *(_OWORD *)long long v10 = *v14;
          v10 += 16;
          --v15;
        }
        while (v15 > 1);
      }
      sub_20B0C4C84(a1, &v60);
    }
LABEL_29:
    sub_20B06A6E8((uint64_t)&v57);
    sub_20B06A6E8((uint64_t)&v60);
    goto LABEL_30;
  }
  if (!atomic_load(v4)) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_20;
  }
  if (!atomic_load(v4)) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_20:
    uint64_t v62 = 0;
    __n128 v60 = 0u;
    long long v61 = 0u;
    sub_20B0A4CAC((uint64_t)&v60, a2);
    uint64_t v18 = sub_20B0A3578(a1);
    long long v19 = *(_OWORD *)(v18 + 16);
    long long v57 = *(_OWORD *)v18;
    long long v58 = v19;
    int v20 = *(_OWORD **)(v18 + 32);
    uint64_t v59 = v20;
    if (v20)
    {
      uint64_t v21 = (atomic_ullong *)(v20 - 1);
      if (*((void *)&v58 + 1)) {
        uint64_t v21 = (atomic_ullong *)*((void *)&v58 + 1);
      }
      atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
    }
    if ((void)v57)
    {
      sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
      uint64_t v22 = v62;
      sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
      uint64_t v23 = v62;
      unint64_t v24 = v60.n128_u64[0];
      sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
      uint64_t v25 = (char *)v23 + 12 * v24 - (char *)v22;
      if (v25 >= 1)
      {
        uint64_t v26 = v59;
        unint64_t v27 = v25 / 0xCuLL + 1;
        do
        {
          uint64_t v28 = *(void *)v26;
          *((_DWORD *)v22 + 2) = *((_DWORD *)v26 + 2);
          *(void *)uint64_t v22 = v28;
          uint64_t v22 = (_OWORD *)((char *)v22 + 12);
          --v27;
        }
        while (v27 > 1);
      }
      sub_20B0A3ED0(a1, &v60);
    }
    goto LABEL_29;
  }
  if (!atomic_load(v4)) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    uint64_t v62 = 0;
    __n128 v60 = 0u;
    long long v61 = 0u;
    sub_20B0C4D3C((uint64_t)&v60, a1[5].n128_i32[2] * (uint64_t)a2);
    uint64_t v59 = 0;
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v32 = sub_20B0C4DB0(a1);
    long long v33 = *(_OWORD *)(v32 + 16);
    long long v57 = *(_OWORD *)v32;
    long long v58 = v33;
    uint64_t v34 = *(_OWORD **)(v32 + 32);
    uint64_t v59 = v34;
    if (v34)
    {
      uint64_t v35 = (atomic_ullong *)(v34 - 1);
      if (*((void *)&v58 + 1)) {
        uint64_t v35 = (atomic_ullong *)*((void *)&v58 + 1);
      }
      atomic_fetch_add_explicit(v35, 1uLL, memory_order_relaxed);
    }
    if ((void)v57)
    {
      if (a1[5].n128_u32[2] == 1)
      {
        sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
        int v36 = v62;
        sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
        unsigned int v37 = v62;
        unint64_t v38 = v60.n128_u64[0];
        sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
        uint64_t v39 = (char *)v37 + 2 * v38 - v36;
        if (v39 >= 1)
        {
          uint64_t v40 = v59;
          unint64_t v41 = ((unint64_t)v39 >> 1) + 1;
          do
          {
            *(_WORD *)int v36 = *v40;
            v36 += 2;
            --v41;
          }
          while (v41 > 1);
        }
      }
      else
      {
        sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
        float32x2_t v53 = v62;
        while (1)
        {
          sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
          if (v53 == &v62[2 * v60.n128_u64[0]]) {
            break;
          }
          if (a1[5].n128_u32[2])
          {
            unint64_t v54 = 0;
            do
            {
              sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
              *(_WORD *)float32x2_t v53 = *((_WORD *)v59 + v54);
              v53 += 2;
              ++v54;
            }
            while (v54 < a1[5].n128_i32[2]);
          }
        }
      }
      sub_20B0C4E44(a1, &v60);
    }
    goto LABEL_29;
  }
  if (!atomic_load(v4)) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    uint64_t v62 = 0;
    __n128 v60 = 0u;
    long long v61 = 0u;
    sub_20B0C4EFC((uint64_t)&v60, a1[5].n128_i32[2] * (uint64_t)a2);
    uint64_t v59 = 0;
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v43 = sub_20B0C2AB8(a1);
    long long v44 = *(_OWORD *)(v43 + 16);
    long long v57 = *(_OWORD *)v43;
    long long v58 = v44;
    float32x2_t v45 = *(_OWORD **)(v43 + 32);
    uint64_t v59 = v45;
    if (v45)
    {
      id v46 = (atomic_ullong *)(v45 - 1);
      if (*((void *)&v58 + 1)) {
        id v46 = (atomic_ullong *)*((void *)&v58 + 1);
      }
      atomic_fetch_add_explicit(v46, 1uLL, memory_order_relaxed);
    }
    if ((void)v57)
    {
      if (a1[5].n128_u32[2] == 1)
      {
        sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
        id v47 = v62;
        sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
        uint64_t v48 = v62;
        unint64_t v49 = v60.n128_u64[0];
        sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
        uint64_t v50 = (char *)v48 + 4 * v49 - v47;
        if (v50 >= 1)
        {
          uint64_t v51 = v59;
          unint64_t v52 = ((unint64_t)v50 >> 2) + 1;
          do
          {
            *(_DWORD *)id v47 = *v51;
            v47 += 4;
            --v52;
          }
          while (v52 > 1);
        }
      }
      else
      {
        sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
        uint64_t v55 = v62;
        while (1)
        {
          sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
          if (v55 == &v62[4 * v60.n128_u64[0]]) {
            break;
          }
          if (a1[5].n128_u32[2])
          {
            unint64_t v56 = 0;
            do
            {
              sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
              *(_DWORD *)uint64_t v55 = *((_DWORD *)v59 + v56);
              v55 += 4;
              ++v56;
            }
            while (v56 < a1[5].n128_i32[2]);
          }
        }
      }
      sub_20B0C4F70(a1, &v60);
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = MEMORY[0x2105310B0](&v60, "vertex");
  uint64_t v30 = a1 + 5;
  if (&v60 == &a1[5])
  {
    if ((v60.n128_u8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v60.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((v30->n128_u64[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30->n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v30->n128_u64[0] = v60.n128_u64[0];
  }
  return result;
}

void sub_20B0C4BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

__n128 sub_20B0C4C84(void *a1, __n128 *a2)
{
  if ((sub_20B06A768((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_20B0C8BEC((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_20B0C8CC0(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20B0C4D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B0C4D3C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v5 = 0;
  sub_20B06A85C((void *)a1);
  unint64_t v6 = &v5;
  sub_20B0C8D54((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B0C4D98(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C4DB0(void *a1)
{
  if (sub_20B0C8FC0((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B0C8FF8, &unk_26BF4F120);
  }
}

__n128 sub_20B0C4E44(void *a1, __n128 *a2)
{
  if ((sub_20B0C8FC0((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_20B0C914C((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_20B0C9598(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20B0C4EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B0C4EFC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_20B06A85C((void *)a1);
  unint64_t v6 = &v5;
  sub_20B0B12DC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B0C4F58(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20B0C4F70(void *a1, __n128 *a2)
{
  if ((sub_20B0C7AC0((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_20B0C962C((uint64_t)a1);
  }
  uint64_t v4 = (__n128 *)sub_20B0C9AE0(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *uint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20B0C5010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_20B0C5028(uint64_t a1, void *a2, void *a3, char a4, int a5)
{
  id v114 = a2;
  id v115 = a3;
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  uint64_t v122 = (void *)a1;
  unint64_t v9 = *(__n128 **)(a1 + 8);
  unint64_t v116 = NumElements / v9[5].n128_i32[2];
  int v113 = a5;
  if (a5)
  {
    for (uint64_t i = *(__n128 **)(a1 + 16); v9 != i; v9 += 6)
    {
      MEMORY[0x2105310B0](&v125, "uniform");
      unint64_t v11 = v9[5].n128_u64[0];
      unint64_t v12 = v125 & 0xFFFFFFFFFFFFFFF8;
      if ((v125 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)v12, 0xFFFFFFFE, memory_order_release);
      }
      if ((v11 & 0xFFFFFFFFFFFFFFF8) == v12)
      {
        sub_20B0C425C((void *)a1, (uint64_t)v9);
      }
      else
      {
        MEMORY[0x2105310B0](&v125, "constant");
        unint64_t v13 = v9[5].n128_u64[0];
        unint64_t v14 = v125 & 0xFFFFFFFFFFFFFFF8;
        if ((v125 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)v14, 0xFFFFFFFE, memory_order_release);
        }
        if ((v13 & 0xFFFFFFFFFFFFFFF8) == v14)
        {
          sub_20B0C4620(v9, v116);
        }
        else
        {
          MEMORY[0x2105310B0](&v125, "vertex");
          unint64_t v15 = v9[5].n128_u64[0];
          unint64_t v16 = v125 & 0xFFFFFFFFFFFFFFF8;
          if ((v125 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)v16, 0xFFFFFFFE, memory_order_release);
          }
          if ((v15 & 0xFFFFFFFFFFFFFFF8) == v16)
          {
            if (v9[1].n128_u64[0]) {
              sub_20B0C449C(a1, (uint64_t)v9);
            }
          }
          else
          {
            MEMORY[0x2105310B0](&v125, "faceVarying");
            unint64_t v17 = v9[5].n128_u64[0];
            unint64_t v18 = v125 & 0xFFFFFFFFFFFFFFF8;
            if ((v125 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)v18, 0xFFFFFFFE, memory_order_release);
            }
            if ((v17 & 0xFFFFFFFFFFFFFFF8) == v18 && !v9[1].n128_u64[0])
            {
              unint64_t v19 = *(void *)(a1 + 152);
              LODWORD(v127[0]) = 0;
              *(void *)&long long v125 = v127;
              sub_20B0A624C(v9[1].n128_u64, v19, (_DWORD **)&v125);
              if (*(void *)(a1 + 152))
              {
                unint64_t v20 = 0;
                do
                {
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v9[1]);
                  *(_DWORD *)(v9[3].n128_u64[0] + 4 * v20) = v20;
                  ++v20;
                }
                while (*(void *)(a1 + 152) > v20);
              }
            }
          }
        }
      }
    }
  }
  id v21 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v125 = 0u;
  long long v126 = 0u;
  sub_20B0C0EB0(v122, v21, (uint64_t)&v125);
  if (v114 && (a5 & 1) == 0) {
    sub_20B0C1DD4(v22, (uint64_t *)&v125, v114, v116, v23, v24, v21);
  }
  id v117 = *((id *)&v126 + 1);
  unint64_t v112 = v21;
  unsigned __int32 v120 = sub_20B1963D4(v117, v115, 0, v21);
  uint64_t v25 = v122[1];
  if (v122[2] != v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    do
    {
      uint64_t v29 = v125;
      unint64_t v30 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + v27));
      unint64_t v31 = *(int *)(v25 + v27 + 88);
      uint64_t v123 = v28;
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + v27)))
      {
        ElementTypeid = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + v27));
        uint64_t v34 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(ElementTypeid, v33);
        uint64_t Sizeof = pxrInternal__aapl__pxrReserved__::TfType::GetSizeof(v34);
        uint64_t v121 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + v27))
             * Sizeof;
      }
      else
      {
        v127[0] = (void **)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(v25 + v27));
        uint64_t v121 = pxrInternal__aapl__pxrReserved__::TfType::GetSizeof((pxrInternal__aapl__pxrReserved__::TfType *)v127);
      }
      uint64_t v38 = v29 + v26;
      uint64_t v39 = *(void **)(v29 + v26 + 8);
      if (v39)
      {
        unint64_t v40 = v30 / v31;
        if (*(void *)(v29 + v26))
        {
          unint64_t v41 = objc_msgSend_layouts(v117, v36, v37);
          uint64_t v44 = objc_msgSend_bufferIndex(*(void **)(v38 + 8), v42, v43);
          id v46 = objc_msgSend_objectAtIndexedSubscript_(v41, v45, v44);
          uint64_t v119 = (float *)objc_msgSend_stride(v46, v47, v48);

          uint64_t v51 = objc_msgSend_bufferIndex(*(void **)(v38 + 8), v49, v50);
          float32x2_t v53 = objc_msgSend_objectAtIndexedSubscript_(v120, v52, v51);
          unint64_t v118 = objc_msgSend_length(v53, v54, v55);

          uint64_t v58 = objc_msgSend_bufferIndex(*(void **)(v38 + 8), v56, v57);
          __n128 v60 = objc_msgSend_objectAtIndexedSubscript_(v120, v59, v58);
          long long v61 = (float *)v40;
          float32x2_t v64 = objc_msgSend_map(v60, v62, v63);

          uint64_t v69 = objc_msgSend_bytes(v64, v65, v66);
          uint64_t v70 = *(void *)(v25 + v27 + 8);
          if ((v70 & 4) != 0) {
            uint64_t v71 = (*(uint64_t (**)(uint64_t))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(v25 + v27);
          }
          else {
            uint64_t v71 = *(void *)(v25 + v27);
          }
          uint64_t v72 = *(void *)(v71 + 32);
          uint64_t v73 = *(void **)(v38 + 8);
          uint64_t v74 = objc_msgSend_format(*(void **)(v29 + v26), v67, v68);
          uint64_t v75 = (float *)sub_20B1AB7B4(v74);
          sub_20B1ABDA8(v69, v119, v73, v72, v75, *(void **)(v29 + v26), v61, v118, (float *)v121);
        }
        else
        {
          uint64_t v76 = objc_msgSend_bufferIndex(v39, v36, v37);
          float32x2_t v64 = objc_msgSend_objectAtIndexedSubscript_(v120, v77, v76);
          uint64_t v80 = objc_msgSend_layouts(v117, v78, v79);
          uint64_t v83 = objc_msgSend_bufferIndex(*(void **)(v38 + 8), v81, v82);
          float32x4_t v85 = objc_msgSend_objectAtIndexedSubscript_(v80, v84, v83);
          uint64_t v88 = (float *)objc_msgSend_stride(v85, v86, v87);
          sub_20B1AB93C(v64, v88, *(void **)(v38 + 8), (float *)v40);
        }
      }
      uint64_t v28 = v123 + 1;
      uint64_t v25 = v122[1];
      v27 += 96;
      v26 += 24;
    }
    while (v123 + 1 < 0xAAAAAAAAAAAAAAABLL * ((v122[2] - v25) >> 5));
  }
  if (a4) {
    sub_20B0C3D0C(v122, v115, v113);
  }
  else {
  uint64_t v89 = sub_20B0C2BE0(v122, v115);
  }
  unint64_t v90 = [MDLMesh alloc];
  float v92 = (pxrInternal__aapl__pxrReserved__::TfToken *)objc_msgSend_initWithVertexBuffers_vertexCount_descriptor_submeshes_(v90, v91, (uint64_t)v120, v116, v117, v89);
  BOOL v94 = v92;
  uint64_t v95 = NSString;
  if ((*v122 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t EmptyString = (*v122 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v92);
  }
  if (*(char *)(EmptyString + 23) < 0) {
    uint64_t EmptyString = *(void *)EmptyString;
  }
  unint64_t v97 = objc_msgSend_stringWithUTF8String_(v95, v93, EmptyString);
  objc_msgSend_setName_(v94, v98, (uint64_t)v97);
  objc_msgSend_setName_(v94, v99, (uint64_t)v97);

  uint64_t v100 = v122[29];
  uint64_t v124 = v100;
  if ((v100 & 7) != 0)
  {
    uint64_t v101 = (atomic_uint *)(v100 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v101, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v124 = (uint64_t)v101;
    }
  }
  uint64_t v102 = sub_20B0C57F8(&v124);
  objc_msgSend_setSubdivisionScheme_(v94, v103, v102);
  if ((v124 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v124 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v105 = v122[12];
  if (v105) {
    objc_msgSend_setComponent_forProtocol_(v94, v104, v105, &unk_26BF5E970);
  }
  unint64_t v106 = (const char *)(v122 + 4);
  if (v122[5] != v122[4])
  {
    uint64_t v107 = sub_20B0C26D4(v94, (uint64_t)v106, v115);
    objc_msgSend_setComponent_forProtocol_(v94, v108, (uint64_t)v107, &unk_26BF5FCE8);
  }
  uint64_t v109 = v122[13];
  if (v109) {
    objc_msgSend_setComponent_forProtocol_(v94, v106, v109, &unk_26BF5E758);
  }

  v127[0] = (void **)&v125;
  sub_20B0C70B0(v127);

  return v94;
}

void sub_20B0C56C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_20B0C1D94((void **)va);

  _Unwind_Resume(a1);
}

uint64_t sub_20B0C57F8(uint64_t *a1)
{
  v3[8] = *(uint64_t **)MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26ACF4718, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26ACF4718))
  {
    operator new();
  }
  v3[0] = a1;
  return sub_20B0C6F8C((uint64_t **)qword_26ACF4728, a1, (uint64_t)&unk_20B1E7420, v3)[5];
}

void sub_20B0C5A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  while (1)
  {
    uint64_t v14 = *((void *)v11 - 2);
    v11 -= 16;
    uint64_t v13 = v14;
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v11 == &a10)
    {
      MEMORY[0x210532650](v10, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_26ACF4718);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20B0C5B04(uint64_t a1, void *a2)
{
  if ((*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  __dst[1] = 0;
  uint64_t v54 = 0;
  __dst[0] = 0;
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)EmptyString;
    uint64_t v54 = *(void *)(EmptyString + 16);
    *(_OWORD *)std::string __dst = v5;
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)a2[1];
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)a2[2] == v6 || !*((void *)v6 + 1))
  {
    uint64_t v12 = 0;
    goto LABEL_78;
  }
  unint64_t NumElements = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v6);
  unint64_t v8 = NumElements;
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)a2[14];
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)a2[19];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v52 = 0;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t v11 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NumElements);
  }
  if (*(char *)(v11 + 23) < 0)
  {
    sub_20B07F994(__p, *(void **)v11, *(void *)(v11 + 8));
  }
  else
  {
    long long v13 = *(_OWORD *)v11;
    uint64_t v52 = *(void *)(v11 + 16);
    *(_OWORD *)std::string __p = v13;
  }
  MEMORY[0x2105310B0](&v50, "constant");
  unint64_t v14 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (atomic_uint *)(v50 & 0xFFFFFFFFFFFFFFF8);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v14 != v15)
  {
    MEMORY[0x2105310B0](&v50, "vertex");
    unint64_t v16 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (atomic_uint *)(v50 & 0xFFFFFFFFFFFFFFF8);
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v16 == v17)
    {
      uint64_t v31 = *(void *)(a1 + 16);
      if (v31)
      {
        if (v31 != (int)v8)
        {
          uint64_t v32 = (void **)__p[0];
          if (v52 >= 0) {
            uint64_t v32 = __p;
          }
          long long v33 = (void **)__dst[0];
          if (v54 >= 0) {
            long long v33 = __dst;
          }
          NSLog(&cfstr_WarningSAttrib_0.isa, v32, v33, v31, v8);
          goto LABEL_75;
        }
        goto LABEL_68;
      }
      unint64_t v40 = (unsigned int *)(a1 + 88);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)(int)v8) {
        goto LABEL_68;
      }
      char v41 = HIBYTE(v52);
      uint64_t v42 = (void **)__p[0];
      char v43 = HIBYTE(v54);
      uint64_t v44 = (void **)__dst[0];
      uint64_t v45 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
      id v46 = @"Warning: %s: attribute %s is vertex varying and not indexed, but the attribute buffer (%lu) is not the same size as the mesh's vertex count (%d) * attribute's element size (%d). \n";
    }
    else
    {
      MEMORY[0x2105310B0](&v50, "uniform");
      unint64_t v18 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v19 = (atomic_uint *)(v50 & 0xFFFFFFFFFFFFFFF8);
      if ((v50 & 7) != 0) {
        atomic_fetch_add_explicit(v19, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v18 == v19)
      {
        uint64_t v34 = *(void *)(a1 + 16);
        if (v34)
        {
          if (v34 != (int)v9)
          {
            uint64_t v35 = (void **)__p[0];
            if (v52 >= 0) {
              uint64_t v35 = __p;
            }
            int v36 = (void **)__dst[0];
            if (v54 >= 0) {
              int v36 = __dst;
            }
            NSLog(&cfstr_WarningSAttrib_2.isa, v35, v36, v34, v9);
            goto LABEL_75;
          }
          goto LABEL_68;
        }
        unint64_t v40 = (unsigned int *)(a1 + 88);
        if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)(int)v9) {
          goto LABEL_68;
        }
        char v41 = HIBYTE(v52);
        uint64_t v42 = (void **)__p[0];
        char v43 = HIBYTE(v54);
        uint64_t v44 = (void **)__dst[0];
        uint64_t v45 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
        id v46 = @"Warning: %s: attribute %s is uniform varying and not indexed, but the attribute buffer (%lu) is not the same size as the mesh's face count (%d) * attribute's element size (%d). \n";
        unint64_t v8 = v9;
      }
      else
      {
        MEMORY[0x2105310B0](&v50, "faceVarying");
        unint64_t v20 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
        id v21 = (atomic_uint *)(v50 & 0xFFFFFFFFFFFFFFF8);
        if ((v50 & 7) != 0) {
          atomic_fetch_add_explicit(v21, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)v20 != v21)
        {
          uint64_t v22 = __p;
          if (v52 < 0) {
            uint64_t v22 = (void **)__p[0];
          }
          uint64_t v23 = __dst;
          if (v54 < 0) {
            uint64_t v23 = (void **)__dst[0];
          }
          NSLog(&cfstr_WarningSAttrib_6.isa, v22, v23);
          goto LABEL_75;
        }
        uint64_t v37 = *(void *)(a1 + 16);
        if (v37)
        {
          if (v37 != (int)v10)
          {
            uint64_t v38 = (void **)__p[0];
            if (v52 >= 0) {
              uint64_t v38 = __p;
            }
            uint64_t v39 = (void **)__dst[0];
            if (v54 >= 0) {
              uint64_t v39 = __dst;
            }
            NSLog(&cfstr_WarningSAttrib_4.isa, v38, v39, v37, v10);
            goto LABEL_75;
          }
LABEL_68:
          uint64_t v12 = 1;
          goto LABEL_76;
        }
        unint64_t v40 = (unsigned int *)(a1 + 88);
        if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)(int)v10) {
          goto LABEL_68;
        }
        char v41 = HIBYTE(v52);
        uint64_t v42 = (void **)__p[0];
        char v43 = HIBYTE(v54);
        uint64_t v44 = (void **)__dst[0];
        uint64_t v45 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
        id v46 = @"Warning: %s: attribute %s is face varying and not indexed, but the attribute buffer (%lu) is not the same size as mesh's face vertex count (%d) * attribute's element size (%d). \n";
        unint64_t v8 = v10;
      }
    }
    id v47 = __dst;
    if (v43 < 0) {
      id v47 = v44;
    }
    uint64_t v48 = __p;
    if (v41 < 0) {
      uint64_t v48 = v42;
    }
    NSLog(&v46->isa, v48, v47, v45, v8, *v40);
    goto LABEL_75;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(_DWORD *)(a1 + 88)) {
    goto LABEL_68;
  }
  int v24 = SHIBYTE(v52);
  uint64_t v25 = (void **)__p[0];
  int v26 = SHIBYTE(v54);
  uint64_t v27 = (void **)__dst[0];
  uint64_t v28 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1);
  if (v26 >= 0) {
    uint64_t v29 = __dst;
  }
  else {
    uint64_t v29 = v27;
  }
  if (v24 >= 0) {
    unint64_t v30 = __p;
  }
  else {
    unint64_t v30 = v25;
  }
  NSLog(&cfstr_WarningSAttrib.isa, v30, v29, v28, *(unsigned int *)(a1 + 88));
LABEL_75:
  uint64_t v12 = 0;
LABEL_76:
  if (SHIBYTE(v52) < 0) {
    operator delete(__p[0]);
  }
LABEL_78:
  if (SHIBYTE(v54) < 0) {
    operator delete(__dst[0]);
  }
  return v12;
}

void sub_20B0C5F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C5FD4(void *a1)
{
  long long v3 = a1 + 1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)a1[1];
  if ((pxrInternal__aapl__pxrReserved__::VtValue *)v3[1] == v2 || !*((void *)v2 + 1)) {
    return 0;
  }
  unint64_t NumElements = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v2);
  long long v5 = NumElements;
  unint64_t v6 = a1[19];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v28 = 0;
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NumElements);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_20B07F994(__p, *(void **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)EmptyString;
    uint64_t v28 = *(void *)(EmptyString + 16);
    *(_OWORD *)std::string __p = v9;
  }
  unint64_t v10 = a1[14];
  if (v10)
  {
    for (uint64_t i = 0; i != v10; ++i)
    {
      unint64_t v12 = *(int *)(a1[18] + 4 * i);
      if ((v12 & 0x80000000) != 0 || (unint64_t v13 = v6 - v12, v6 < v12))
      {
        uint64_t v23 = __p;
        if (v28 < 0) {
          uint64_t v23 = (void **)__p[0];
        }
        NSLog(&cfstr_SFaceZuVertexC.isa, v23, i, *(int *)(a1[18] + 4 * i), v6);
        goto LABEL_40;
      }
      v6 -= v12;
    }
    if (!v13) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (v6)
  {
LABEL_16:
    unint64_t v14 = __p;
    if (v28 < 0) {
      unint64_t v14 = (void **)__p[0];
    }
    NSLog(&cfstr_SFaceVertexInd.isa, v14);
    goto LABEL_40;
  }
LABEL_20:
  uint64_t v15 = a1[19];
  if (v15)
  {
    unint64_t v16 = (unsigned int *)a1[23];
    uint64_t v17 = 4 * v15;
    while (1)
    {
      unint64_t v18 = *v16;
      if ((v18 & 0x80000000) != 0 || (unint64_t)v5 <= v18) {
        break;
      }
      ++v16;
      v17 -= 4;
      if (!v17) {
        goto LABEL_25;
      }
    }
    int v24 = __p;
    if (v28 < 0) {
      int v24 = (void **)__p[0];
    }
    NSLog(&cfstr_SFaceVertexInd_0.isa, v24);
  }
  else
  {
LABEL_25:
    uint64_t v19 = a1[24];
    if (!v19)
    {
LABEL_30:
      uint64_t v8 = 1;
      goto LABEL_41;
    }
    unint64_t v20 = (unsigned int *)a1[28];
    uint64_t v21 = 4 * v19;
    while (1)
    {
      unint64_t v22 = *v20;
      if ((v22 & 0x80000000) != 0 || v10 < v22) {
        break;
      }
      ++v20;
      v21 -= 4;
      if (!v21) {
        goto LABEL_30;
      }
    }
    uint64_t v25 = __p;
    if (v28 < 0) {
      uint64_t v25 = (void **)__p[0];
    }
    NSLog(&cfstr_SHoleIndexOutO.isa, v25);
  }
LABEL_40:
  uint64_t v8 = 0;
LABEL_41:
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_20B0C61C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C61F0(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  __p[1] = 0;
  uint64_t v35 = 0;
  __p[0] = 0;
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_20B07F994(__p, *(void **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)EmptyString;
    uint64_t v35 = *(void *)(EmptyString + 16);
    *(_OWORD *)std::string __p = v3;
  }
  if (*((void *)a1 + 30) != *((void *)a1 + 35))
  {
    uint64_t v19 = __p;
    if (v35 < 0) {
      uint64_t v19 = (void **)__p[0];
    }
    NSLog(&cfstr_SMismatchCorne.isa, v19);
    goto LABEL_34;
  }
  if (*((void *)a1 + 45) != *((void *)a1 + 50))
  {
    unint64_t v20 = __p;
    if (v35 < 0) {
      unint64_t v20 = (void **)__p[0];
    }
    NSLog(&cfstr_SMismatchCreas.isa, v20);
    goto LABEL_34;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((void *)a1 + 1);
  if (*((pxrInternal__aapl__pxrReserved__::VtValue **)a1 + 2) == v4 || !*((void *)v4 + 1))
  {
    uint64_t v21 = __p;
    if (v35 < 0) {
      uint64_t v21 = (void **)__p[0];
    }
    NSLog(&cfstr_SInvalidPoints.isa, v21);
    goto LABEL_34;
  }
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v4);
  uint64_t v6 = *((void *)a1 + 30);
  if (v6)
  {
    long long v7 = (unsigned int *)*((void *)a1 + 34);
    uint64_t v8 = 4 * v6;
    while (1)
    {
      unint64_t v9 = *v7;
      if ((v9 & 0x80000000) != 0 || NumElements <= v9) {
        break;
      }
      ++v7;
      v8 -= 4;
      if (!v8) {
        goto LABEL_16;
      }
    }
    int v24 = __p;
    if (v35 < 0) {
      int v24 = (void **)__p[0];
    }
    NSLog(&cfstr_SCornerIndexOu.isa, v24);
    goto LABEL_34;
  }
LABEL_16:
  uint64_t v10 = *((void *)a1 + 40);
  if (v10)
  {
    unint64_t v11 = (unsigned int *)*((void *)a1 + 44);
    uint64_t v12 = 4 * v10;
    while (1)
    {
      unint64_t v13 = *v11;
      if ((v13 & 0x80000000) != 0 || NumElements <= v13) {
        break;
      }
      ++v11;
      v12 -= 4;
      if (!v12) {
        goto LABEL_21;
      }
    }
    uint64_t v25 = __p;
    if (v35 < 0) {
      uint64_t v25 = (void **)__p[0];
    }
    NSLog(&cfstr_SCreaseIndexOu.isa, v25);
    goto LABEL_34;
  }
LABEL_21:
  uint64_t v14 = *((void *)a1 + 45);
  if (v14)
  {
    LODWORD(v15) = 0;
    unint64_t v16 = (int *)*((void *)a1 + 49);
    uint64_t v17 = 4 * v14;
    do
    {
      uint64_t v18 = *v16++;
      uint64_t v15 = v18 + (int)v15;
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (v10 != v15)
  {
    uint64_t v31 = __p;
    if (v35 < 0) {
      uint64_t v31 = (void **)__p[0];
    }
    NSLog(&cfstr_SMismatchCreas_0.isa, v31);
LABEL_34:
    uint64_t v22 = 0;
    goto LABEL_35;
  }
  uint64_t v26 = *((void *)a1 + 55);
  uint64_t v27 = *((void *)a1 + 56);
  if (v26 != v27)
  {
    uint64_t v22 = 1;
    while (1)
    {
      uint64_t v28 = *(void *)(v26 + 8);
      if (v28) {
        break;
      }
LABEL_52:
      v26 += 56;
      if (v26 == v27) {
        goto LABEL_35;
      }
    }
    uint64_t v29 = *(int **)(v26 + 40);
    uint64_t v30 = 4 * v28;
    while (*((void *)a1 + 14) > (unint64_t)*v29)
    {
      ++v29;
      v30 -= 4;
      if (!v30) {
        goto LABEL_52;
      }
    }
    unint64_t v32 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v32)
    {
      long long v33 = (const char *)(v32 + 16);
      if (*(char *)(v32 + 39) < 0) {
        long long v33 = *(const char **)v33;
      }
    }
    else
    {
      long long v33 = "";
    }
    NSLog(&cfstr_WarningMeshHas.isa, v33);
    goto LABEL_34;
  }
  uint64_t v22 = 1;
LABEL_35:
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  return v22;
}

void sub_20B0C64A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20B0C64D8(unint64_t *a1, long long *a2)
{
  memset(v14, 0, 40);
  sub_20B0C65F4((unint64_t *)v14, *(void *)a2);
  if (*a1)
  {
    unint64_t v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v6 = *(int *)(a1[4] + 4 * v4);
      uint64_t v7 = v6 + 1;
      for (uint64_t i = 4 * (v6 + v5) - 4; v7-- > 1; i -= 4)
      {
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        sub_20B0C857C((uint64_t)v14, (_DWORD *)(*((void *)a2 + 4) + i));
      }
      v5 += v6;
      ++v4;
    }
    while (*a1 > v4);
  }
  uint64_t v10 = *((void *)a2 + 2);
  long long v11 = *a2;
  *a2 = v14[0];
  *((void *)a2 + 2) = *(void *)&v14[1];
  v14[0] = v11;
  *(void *)&v14[1] = v10;
  long long v12 = *(long long *)((char *)a2 + 24);
  *(long long *)((char *)a2 + 24) = *(_OWORD *)((char *)&v14[1] + 8);
  *(_OWORD *)((char *)&v14[1] + 8) = v12;
  sub_20B06A6E8((uint64_t)v14);
  return result;
}

void sub_20B0C65D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B0C65F4(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    uint64_t v7 = sub_20B06C280((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    uint64_t v6 = sub_20B06C280((uint64_t)a1, a2);
    uint64_t v7 = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    sub_20B06A6E8((uint64_t)a1);
    a1[4] = (unint64_t)v7;
  }
}

void sub_20B0C6690(uint64_t a1)
{
  uint64_t v2 = (unint64_t *)(a1 + 112);
  __n128 v3 = sub_20B0C64D8((unint64_t *)(a1 + 112), (long long *)(a1 + 152));
  unint64_t v4 = *(unint64_t **)(a1 + 8);
  unint64_t v5 = *(unint64_t **)(a1 + 16);
  if (v4 != v5)
  {
    uint64_t v6 = *(void *)(a1 + 152);
    do
    {
      MEMORY[0x2105310B0](&v13, "faceVarying", v3);
      unint64_t v7 = v4[10];
      uint64_t v8 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit(v8, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8) != v8) {
        goto LABEL_16;
      }
      unint64_t v9 = v4[2];
      if (v9)
      {
        if (v9 != (int)v6)
        {
          unint64_t v10 = v4[7] & 0xFFFFFFFFFFFFFFF8;
          if (v10)
          {
            long long v11 = (const char *)(v10 + 16);
            if (*(char *)(v10 + 39) < 0) {
              long long v11 = *(const char **)v11;
            }
          }
          else
          {
            long long v11 = "";
          }
          NSLog(&cfstr_UnableToUnwind.isa, v11);
          goto LABEL_16;
        }
      }
      else
      {
        sub_20B0C65F4(v4 + 2, (int)v6);
        int v12 = 0;
        if ((int)v6 >= 1)
        {
          do
          {
            sub_20B0C857C((uint64_t)(v4 + 2), &v12);
            ++v12;
          }
          while (v12 < (int)v6);
        }
      }
      __n128 v3 = sub_20B0C64D8(v2, (long long *)v4 + 1);
LABEL_16:
      v4 += 12;
    }
    while (v4 != v5);
  }
}

uint64_t sub_20B0C67E0(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (!v1) {
    return 1;
  }
  __n128 v3 = (int *)*((void *)this + 6);
  uint64_t v4 = 4 * v1;
  while (1)
  {
    int v5 = *v3;
    unint64_t NumElements = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(this);
    if (v5 < 0 || v5 >= (int)NumElements / *((_DWORD *)this + 22)) {
      break;
    }
    ++v3;
    v4 -= 4;
    if (!v4) {
      return 1;
    }
  }
  if ((*((void *)this + 7) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*((void *)this + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NumElements);
  }
  if (*(char *)(EmptyString + 23) < 0) {
    unint64_t EmptyString = *(void *)EmptyString;
  }
  NSLog(&cfstr_SAttributeHasI.isa, EmptyString);
  return 0;
}

uint64_t sub_20B0C688C(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  if (*((void *)a1 + 2) == *((void *)a1 + 1)) {
    return 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_20B07F994(__p, *(void **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)EmptyString;
    uint64_t v10 = *(void *)(EmptyString + 16);
    *(_OWORD *)std::string __p = v4;
  }
  int v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((void *)a1 + 1);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((void *)a1 + 2);
  while (v5 != v6)
  {
    if ((sub_20B0C5B04((uint64_t)v5, a1) & 1) == 0) {
      goto LABEL_20;
    }
    if (*((void *)v5 + 2) && (sub_20B0C67E0(v5) & 1) == 0)
    {
      unint64_t v7 = __p;
      if (v10 < 0) {
        unint64_t v7 = (void **)__p[0];
      }
      NSLog(&cfstr_SHasAttributeW.isa, v7);
      goto LABEL_20;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v5 + 96);
  }
  if (sub_20B0C5FD4(a1))
  {
    uint64_t v3 = sub_20B0C61F0(a1);
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v3 = 0;
LABEL_21:
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_20B0C69A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C69CC(uint64_t a1)
{
  sub_20B06A6E8(a1 + 8);
  return a1;
}

uint64_t sub_20B0C6A04(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_20B06A85C((void *)a1);
  uint64_t v6 = &v5;
  sub_20B0C9BA0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B0C6A60(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C6A78(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_20B0C6AF8((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_20B0C6AE0(_Unwind_Exception *a1)
{
  sub_20B0C6F20(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0C6AF8(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v6 = (uint64_t **)sub_20B0C6B88(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_20B0C6D34((uint64_t)a1, a4, v8);
    sub_20B05FAEC(a1, v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

uint64_t *sub_20B0C6B88(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_20B0C6E54((uint64_t)(a1 + 2), a5, a2 + 4))
  {
    if (!sub_20B0C6E54((uint64_t)(a1 + 2), a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_20B0C6E54((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    int v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  long long v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      int v12 = v11;
      long long v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    unint64_t v16 = a2;
    do
    {
      int v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      unint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_20B0C6E54((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_20B0C6DB4((uint64_t)a1, a3, a5);
}

void *sub_20B0C6D34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __n128 result = operator new(0x30uLL);
  *a3 = result;
  a3[1] = v5;
  uint64_t v7 = *a2;
  result[4] = *a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = a2[1];
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void *sub_20B0C6DB4(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = v4 + 4;
        if (!sub_20B0C6E54(v7, a3, v4 + 4)) {
          break;
        }
        long long v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_20B0C6E54(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      long long v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_20B0C6E54(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (*a2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v3) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v4 == 0;
    }
    return !v6;
  }
  else
  {
    if (v3 == v4) {
      return 0;
    }
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(v9 + 8);
    if (v10 < v11) {
      return 1;
    }
    if (v10 != v11)
    {
      return 0;
    }
    else
    {
      uint64_t v14 = *(const void **)(v9 + 16);
      unint64_t v12 = v9 + 16;
      uint64_t v13 = v14;
      int v15 = *(char *)(v12 + 23);
      uint64_t v18 = *(const void **)(v8 + 16);
      unint64_t v16 = v8 + 16;
      BOOL v17 = v18;
      int v19 = *(char *)(v16 + 23);
      if (v19 >= 0) {
        size_t v20 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        size_t v20 = *(void *)(v16 + 8);
      }
      if (v19 >= 0) {
        uint64_t v21 = (const void *)v16;
      }
      else {
        uint64_t v21 = v17;
      }
      if (v15 >= 0) {
        size_t v22 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        size_t v22 = *(void *)(v12 + 8);
      }
      if (v15 >= 0) {
        uint64_t v23 = (const void *)v12;
      }
      else {
        uint64_t v23 = v13;
      }
      if (v22 >= v20) {
        size_t v24 = v20;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v21, v23, v24);
      if (v25) {
        return v25 < 0;
      }
      else {
        return v20 < v22;
      }
    }
  }
}

void sub_20B0C6F20(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20B0C6F20(a1, *a2);
    sub_20B0C6F20(a1, a2[1]);
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

uint64_t *sub_20B0C6F8C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v9 = 0;
  BOOL v6 = (uint64_t **)sub_20B0C6DB4((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_20B0C7030((uint64_t)a1, a4, v8);
    sub_20B05FAEC(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void *sub_20B0C7030@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __n128 result = operator new(0x30uLL);
  *a3 = result;
  a3[1] = v5;
  uint64_t v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B0C70B0(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_20B0C7104((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_20B0C7104(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 24)
  {

    uint64_t v5 = *(void **)(i - 24);
  }
  *(void *)(a1 + 8) = a2;
}

void *sub_20B0C7158(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    sub_20B0C71E0(result, a4);
    __n128 result = sub_20B0C7234((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20B0C71C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_20B0C7368(&a9);
  _Unwind_Resume(a1);
}

char *sub_20B0C71E0(void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_20B05D0BC();
  }
  __n128 result = (char *)sub_20B0A72A8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *sub_20B0C7234(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v11 = a4;
  unint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_20B0A73B8(a1, v4, v6);
      v6 += 96;
      uint64_t v4 = v12 + 12;
      v12 += 12;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  sub_20B0C72DC((uint64_t)v9);
  return v4;
}

void sub_20B0C72C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B0C72DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B0C7314((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_20B0C7314(uint64_t *result)
{
  uint64_t v2 = (void *)result[1];
  uint64_t v1 = (void **)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)*v2;
  if (*v1 != (void *)*v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 12;
      __n128 result = (uint64_t *)sub_20B0A7530(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void sub_20B0C7368(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_20B0A7530((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B0C7400(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_20B0C6AF8((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_20B0C7468(_Unwind_Exception *a1)
{
  sub_20B0C6F20(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C7480(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_20B0C7500((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_20B0C74E8(_Unwind_Exception *a1)
{
  sub_20B0C75EC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0C7500(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v6 = sub_20B0C6B88(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    sub_20B0C7590(v7 + 4, a4);
    sub_20B05FAEC(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_20B0C7590(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = (uint64_t)(id)a2[1];
  return a1;
}

void sub_20B0C75EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20B0C75EC(a1, *a2);
    sub_20B0C75EC(a1, a2[1]);

    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void *sub_20B0C7660(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = sub_20B0C6E54(v5, v3 + 4, a2);
    unint64_t v8 = v3 + 1;
    if (!v7)
    {
      unint64_t v8 = v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_20B0C6E54(v5, a2, v6 + 4)) {
    return v2;
  }
  return v6;
}

uint64_t sub_20B0C76F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v14[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_20B07D5B8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(void *)uint64_t v11 = *(id *)a2;
  *((void *)v11 + 1) = *(id *)(a2 + 8);
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  v14[2] = v11 + 24;
  sub_20B0C7808(a1, v14);
  uint64_t v12 = a1[1];
  sub_20B0C7A2C((uint64_t)v14);
  return v12;
}

void sub_20B0C77F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B0C7A2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C7808(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B0C7880((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B0C7880(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  float32x4_t v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *a3 = 0;
      a3[1] = 0;
      *(_OWORD *)(v8 - 24) = v9;
      v8 -= 24;
      *(void *)(v8 + 16) = a3[2];
      v7 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v8;
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_20B0C7918((uint64_t)v12);
  return v10;
}

uint64_t sub_20B0C7918(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B0C7950((uint64_t *)a1);
  }
  return a1;
}

void sub_20B0C7950(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_20B0C79C8(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_20B0C79C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(id **)(a2 + 32); i != *(id **)(a3 + 32); *(void *)(a2 + 32) = i)
  {

    uint64_t i = (id *)(*(void *)(a2 + 32) + 24);
  }
}

uint64_t sub_20B0C7A2C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B0C7A64(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
  }
}

uint64_t sub_20B0C7AC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 57) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B0C7AF8()
{
}

uint64_t sub_20B0C7B58(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B0C7BB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 53) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B0C7BEC()
{
}

uint64_t sub_20B0C7C4C(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B0C7CA8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique() [T = unsigned int]");
      uint64_t v4 = (int *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B0C7D40((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 4 * v5;
        uint64_t v9 = v6;
        do
        {
          int v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_20B0C7D40(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B0C7DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B0C7DE4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B0C7E04(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B0C7FA8(a1);
}

uint64_t sub_20B0C7E14()
{
  return 1;
}

unint64_t sub_20B0C7E1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v3[1] = 1;
  v3[0] = *(void *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_20B0C7E78(uint64_t *a1, uint64_t *a2)
{
  return sub_20B0C8010(*a1, *a2);
}

uint64_t sub_20B0C7E84(uint64_t *a1, uint64_t a2)
{
  return sub_20B0C8010(*a1, a2);
}

uint64_t sub_20B0C7E90()
{
  return 0;
}

uint64_t sub_20B0C7E9C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B0C7EF0()
{
  return &unk_26BF4F0F0;
}

uint64_t sub_20B0C7EFC()
{
  return 1;
}

uint64_t sub_20B0C7F04()
{
  return MEMORY[0x263F8C258];
}

uint64_t sub_20B0C7F10(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B0C7F18(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B0C7F24(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B0C7F58(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F0F0, a2);
}

void *sub_20B0C7F7C()
{
  return &unk_26BF4F0F0;
}

uint64_t sub_20B0C7F88(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B0C7F90(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF512D8;
  sub_20B0C8144();
}

uint64_t *sub_20B0C7FA8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t sub_20B0C8010(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && sub_20B0A6C00(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = sub_20B0A6C00(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * *(void *)a1) == 0;
  }
  return result;
}

uint64_t sub_20B0C8098(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_20B0C8144()
{
}

uint64_t sub_20B0C81C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 49) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B0C81F8()
{
}

uint64_t sub_20B0C8258(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B0C82B4(unint64_t *a1, unint64_t a2, unsigned char **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              int v10 = sub_20B0C8454((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  *((unsigned char *)v10 + i) = *(unsigned char *)(v9 + i);
              }
            }
            uint64_t v12 = *a3;
            do
              *((unsigned char *)v7 + v3++) = *v12;
            while (a2 != v3);
          }
          uint64_t v13 = v7;
          goto LABEL_30;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v17 = a2;
      }
      else {
        unint64_t v17 = *a1;
      }
      uint64_t v18 = sub_20B0C8454((uint64_t)a1, a2);
      uint64_t v13 = v18;
      if (v17)
      {
        int v19 = v18;
        do
        {
          char v20 = *(unsigned char *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 1);
          *(unsigned char *)int v19 = v20;
          int v19 = (unint64_t *)((char *)v19 + 1);
          --v17;
        }
        while (v17);
      }
      if (v3 < a2)
      {
        uint64_t v21 = *a3;
        do
          *((unsigned char *)v18 + v3++) = *v21;
        while (a2 != v3);
      }
      goto LABEL_30;
    }
    uint64_t v14 = sub_20B0C8454((uint64_t)a1, a2);
    uint64_t v13 = v14;
    uint64_t v15 = 0;
    uint64_t v16 = *a3;
    do
      *((unsigned char *)v14 + v15++) = *v16;
    while (a2 != v15);
LABEL_30:
    if (v13 != (unint64_t *)a1[4])
    {
      sub_20B06A6E8((uint64_t)a1);
      a1[4] = (unint64_t)v13;
    }
    *a1 = a2;
    return;
  }

  sub_20B06A85C(a1);
}

void *sub_20B0C8454(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 >= 0xFFFFFFFFFFFFFFF0) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B0C84D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B0C84E8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique() [T = unsigned char]");
      uint64_t v4 = (char *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B0C8454((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = v6;
        do
        {
          char v9 = *v4++;
          *v8++ = v9;
          --v5;
        }
        while (v5);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_20B0C857C(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    char v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_20B06C280(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20B06A6E8(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_20B0C86E4(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    char v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_20B0B14A4(a1, v11);
    uint64_t v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20B06A6E8(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

uint64_t sub_20B0C884C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B0C890C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20B0C88C4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_20B05D178();
  }
  return operator new(40 * a2);
}

uint64_t sub_20B0C890C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  uint64_t v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      uint64_t v9 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v9;
      if (v9)
      {
        uint64_t v10 = (atomic_ullong *)(v9 - 16);
        if (*(void *)(v7 - 16)) {
          uint64_t v10 = *(atomic_ullong **)(v7 - 16);
        }
        atomic_fetch_add_explicit(v10, 1uLL, memory_order_relaxed);
        uint64_t v7 = *((void *)&v16 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((void *)&v16 + 1) = v7;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_20B0C89C8((uint64_t)v13);
  return v11;
}

uint64_t sub_20B0C89C8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B0C8A00((uint64_t *)a1);
  }
  return a1;
}

uint64_t sub_20B0C8A00(uint64_t *a1)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_20B0C8A78(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_20B0C8A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void *)(a2 + 32); result != *(void *)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    sub_20B06A6E8(result);
    uint64_t result = *(void *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_20B0C8ACC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B0C8B04(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 40;
    sub_20B06A6E8(v4 - 40);
  }
}

void sub_20B0C8B48(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_20B0C8B9C((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_20B0C8B9C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; sub_20B06A6E8(i))
    i -= 40;
  *(void *)(a1 + 8) = a2;
}

void sub_20B0C8BEC(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_20B0A5A2C((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26BF50FF8;
  sub_20B0A6DA4();
}

void sub_20B0C8C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C8CC0(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20B0A6EB4(a1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return sub_20B0A7D58((uint64_t)a1);
}

void sub_20B0C8D54(unint64_t *a1, unint64_t a2, _WORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_20B0C8F1C((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_WORD *)((char *)v10 + v11) = *(_WORD *)(v9 + v11);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_WORD *)((char *)v7 + v13) = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_20B0C8F1C((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 2 * v19;
        size_t v22 = v20;
        do
        {
          __int16 v23 = *(_WORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 2);
          *(_WORD *)size_t v22 = v23;
          size_t v22 = (unint64_t *)((char *)v22 + 2);
          v21 -= 2;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        size_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_WORD *)((char *)v20 + v25) = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 2 * a2;
    if (2 * a2 / a2 == 2)
    {
      uint64_t v16 = sub_20B0C8F1C((uint64_t)a1, a2);
      uint64_t v14 = v16;
      uint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_WORD *)((char *)v16 + v17) = *v18;
        v17 += 2;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B0C8F1C(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 2 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B0C8FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B0C8FC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 51) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B0C8FF8()
{
}

uint64_t sub_20B0C9058(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B0C90B4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned short>::_DetachIfNotUnique() [T = unsigned short]");
      uint64_t v4 = (__int16 *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B0C8F1C((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 2 * v5;
        unint64_t v9 = v6;
        do
        {
          __int16 v10 = *v4++;
          *v9++ = v10;
          v8 -= 2;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_20B0C914C(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_20B0A5A2C((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26BF51448;
  sub_20B0C8144();
}

void sub_20B0C91E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B0C9220(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B0C9240(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B0C93E4(a1);
}

uint64_t sub_20B0C9250()
{
  return 1;
}

unint64_t sub_20B0C9258(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v3[1] = 1;
  v3[0] = *(void *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_20B0C92B4(uint64_t *a1, uint64_t *a2)
{
  return sub_20B0C944C(*a1, *a2);
}

uint64_t sub_20B0C92C0(uint64_t *a1, uint64_t a2)
{
  return sub_20B0C944C(*a1, a2);
}

uint64_t sub_20B0C92CC()
{
  return 0;
}

uint64_t sub_20B0C92D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B0C932C()
{
  return &unk_26BF4F120;
}

uint64_t sub_20B0C9338()
{
  return 1;
}

uint64_t sub_20B0C9340()
{
  return MEMORY[0x263F8C280];
}

uint64_t sub_20B0C934C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B0C9354(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B0C9360(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayItEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B0C9394(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F120, a2);
}

void *sub_20B0C93B8()
{
  return &unk_26BF4F120;
}

uint64_t sub_20B0C93C4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B0C93CC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF51448;
  sub_20B0C8144();
}

uint64_t *sub_20B0C93E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t sub_20B0C944C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && sub_20B0A6C00(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = sub_20B0A6C00(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 2 * *(void *)a1) == 0;
  }
  return result;
}

uint64_t sub_20B0C94D4(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B0C9580(void *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int16 *)*a1;
  *a1 += 2;
  return MEMORY[0x270F987D0](a2, v3);
}

uint64_t sub_20B0C9598(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20B0A6EB4(a1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return sub_20B0C94D4((uint64_t)a1);
}

void sub_20B0C962C(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_20B0A5A2C((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26BF51220;
  sub_20B0C9A64();
}

void sub_20B0C96C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B0C9700(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B0C9720(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B0C98B0(a1);
}

uint64_t sub_20B0C9730()
{
  return 1;
}

unint64_t sub_20B0C9738(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    uint64_t v2 = (unsigned int *)(*a1)[4];
    unint64_t v3 = **a1;
    do
    {
      unsigned int v4 = *v2++;
      unint64_t v1 = v4 + ((v1 + v4 + (v1 + v4) * (v1 + v4)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_20B0C9780(void **a1, uint64_t *a2)
{
  return sub_20B0C9918(*a1, *a2);
}

BOOL sub_20B0C978C(void **a1, uint64_t a2)
{
  return sub_20B0C9918(*a1, a2);
}

uint64_t sub_20B0C9798()
{
  return 0;
}

uint64_t sub_20B0C97A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B0C97F8()
{
  return &unk_26BF4F0C0;
}

uint64_t sub_20B0C9804()
{
  return 1;
}

uint64_t sub_20B0C980C()
{
  return MEMORY[0x263F8C248];
}

uint64_t sub_20B0C9818(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B0C9820(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B0C982C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIfEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B0C9860(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F0C0, a2);
}

void *sub_20B0C9884()
{
  return &unk_26BF4F0C0;
}

uint64_t sub_20B0C9890(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B0C9898(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF51220;
  sub_20B0C9A64();
}

uint64_t *sub_20B0C98B0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x10A0C407A159F4ELL);
  }
  return a1;
}

BOOL sub_20B0C9918(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (float *)a1[4];
  uint64_t v6 = *(float **)(a2 + 32);
  uint64_t v7 = 4 * *a1 - 4;
  do
  {
    float v8 = *v5++;
    float v9 = v8;
    float v10 = *v6++;
    BOOL result = v9 == v10;
    BOOL v11 = v9 != v10 || v7 == 0;
    v7 -= 4;
  }
  while (!v11);
  return result;
}

uint64_t sub_20B0C99B8(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_20B0C9A64()
{
}

uint64_t sub_20B0C9AE0(void *a1)
{
  v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20B0A6EB4(a1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return sub_20B0C99B8((uint64_t)a1);
}

uint64_t sub_20B0C9B74(void *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

uint64_t sub_20B0C9B8C(void *a1)
{
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

void sub_20B0C9BA0(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_20B0C9D68((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_20B0C9D68((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        size_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        size_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      uint64_t v16 = sub_20B0C9D68((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B0C9D68(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unsigned int v4 = operator new(v3);
  *unsigned int v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B0C9DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B0C9E0C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique() [T = double]");
      unsigned int v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B0C9D68((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        unint64_t v9 = v6;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

uint64_t sub_20B0C9EA4(void *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

uint64_t sub_20B0C9EB8(uint64_t result)
{
  uint64_t v1 = *(double **)result;
  uint64_t v2 = *(double **)(result + 8);
  if (*(double **)result == v2)
  {
    double v5 = 1.79769313e308;
    double v3 = 1.79769313e308;
  }
  else
  {
    double v3 = 1.79769313e308;
    double v4 = 1.79769313e308;
    do
    {
      double v5 = *v1;
      if (*v1 == 1.79769313e308) {
        goto LABEL_11;
      }
      if (v3 == 1.79769313e308) {
        double v3 = *v1;
      }
      if (v4 == 1.79769313e308) {
        double v4 = *v1;
      }
      if (v3 > v5) {
        double v3 = *v1;
      }
      if (v4 >= v5) {
LABEL_11:
      }
        double v5 = v4;
      v1 += 4;
      double v4 = v5;
    }
    while (v1 != v2);
  }
  uint64_t v6 = *(double **)(result + 24);
  uint64_t v7 = *(double **)(result + 32);
  if (v6 == v7)
  {
    double v8 = v5;
  }
  else
  {
    do
    {
      double v8 = *v6;
      if (*v6 == 1.79769313e308) {
        goto LABEL_24;
      }
      if (v3 == 1.79769313e308) {
        double v3 = *v6;
      }
      if (v5 == 1.79769313e308) {
        double v5 = *v6;
      }
      if (v3 > v8) {
        double v3 = *v6;
      }
      if (v5 >= v8) {
LABEL_24:
      }
        double v8 = v5;
      v6 += 4;
      double v5 = v8;
    }
    while (v6 != v7);
  }
  unint64_t v9 = *(double **)(result + 48);
  uint64_t v10 = *(double **)(result + 56);
  if (v9 == v10)
  {
    double v11 = v8;
  }
  else
  {
    do
    {
      double v11 = *v9;
      if (*v9 == 1.79769313e308) {
        goto LABEL_37;
      }
      if (v3 == 1.79769313e308) {
        double v3 = *v9;
      }
      if (v8 == 1.79769313e308) {
        double v8 = *v9;
      }
      if (v3 > v11) {
        double v3 = *v9;
      }
      if (v8 >= v11) {
LABEL_37:
      }
        double v11 = v8;
      v9 += 4;
      double v8 = v11;
    }
    while (v9 != v10);
  }
  uint64_t v12 = *(double **)(result + 72);
  uint64_t v13 = *(double **)(result + 80);
  if (v12 == v13)
  {
    double v14 = v11;
  }
  else
  {
    do
    {
      double v14 = *v12;
      if (*v12 == 1.79769313e308) {
        goto LABEL_50;
      }
      if (v3 == 1.79769313e308) {
        double v3 = *v12;
      }
      if (v11 == 1.79769313e308) {
        double v11 = *v12;
      }
      if (v3 > v14) {
        double v3 = *v12;
      }
      if (v11 >= v14) {
LABEL_50:
      }
        double v14 = v11;
      v12 += 4;
      double v11 = v14;
    }
    while (v12 != v13);
  }
  *(double *)(result + 96) = v3;
  *(double *)(result + 104) = v14;
  return result;
}

void sub_20B0CA050(uint64_t a1, double a2)
{
  *(double *)(a1 + 120) = a2;
  sub_20B0C9EB8(a1);
  double v4 = sub_20B0CA368(a1, a2);
  int v54 = 5;
  int v53 = v5;
  double v52 = v4;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  sub_20B0CA430((uint64_t)&v52, (uint64_t)&v48);
  long long v7 = v49;
  *(_OWORD *)(a1 + 256) = v48;
  *(_OWORD *)(a1 + 272) = v7;
  long long v8 = v51;
  *(_OWORD *)(a1 + 288) = v50;
  *(_OWORD *)(a1 + 304) = v8;
  float32x4_t v44 = *(float32x4_t *)MEMORY[0x263EF89A8];
  float32x4_t v45 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
  float32x4_t v46 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
  float32x4_t v47 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  *(double *)v9.i64 = sub_20B0CA5F4((float32x4_t **)a1, a2);
  v9.i32[3] = v47.i32[3];
  float32x4_t v41 = v9;
  *(double *)v10.i64 = sub_20B0CA6BC(a1, a2);
  float32x4_t v11 = v45;
  v11.i32[0] = v10.i32[0];
  int8x16_t v42 = v10;
  float32x4_t v43 = v11;
  double v12 = sub_20B0CA784(a1, a2);
  float32x4_t v14 = v44;
  float32x4_t v15 = v45;
  float32x4_t v16 = v46;
  float32x4_t v17 = v47;
  unint64_t v18 = 0;
  float32x4_t v19 = v45;
  v19.i32[1] = HIDWORD(v12);
  float32x4_t v20 = *(float32x4_t *)(a1 + 272);
  float32x4_t v21 = *(float32x4_t *)(a1 + 288);
  float32x4_t v22 = *(float32x4_t *)(a1 + 304);
  float32x4_t v55 = *(float32x4_t *)(a1 + 256);
  float32x4_t v56 = v20;
  float32x4_t v57 = v21;
  float32x4_t v58 = v22;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v18 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v18 * 4))), v45, *(float32x2_t *)&v55.f32[v18], 1), v46, *(float32x4_t *)((char *)&v55 + v18 * 4), 2), v41, *(float32x4_t *)((char *)&v55 + v18 * 4), 3);
    v18 += 4;
  }
  while (v18 != 16);
  unint64_t v23 = 0;
  v24.i64[0] = vextq_s8(v42, (int8x16_t)v46, 4uLL).u64[0];
  v24.i64[1] = v46.i64[1];
  float32x4_t v25 = v44;
  v25.i32[0] = LODWORD(v12);
  float32x4_t v26 = (float32x4_t)v59.columns[0];
  float32x4_t v27 = (float32x4_t)v59.columns[1];
  float32x4_t v28 = (float32x4_t)v59.columns[2];
  float32x4_t v29 = (float32x4_t)v59.columns[3];
  float32x4_t v55 = v44;
  float32x4_t v56 = v43;
  float32x4_t v57 = v24;
  float32x4_t v58 = v47;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v23 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v23 * 4))), v27, *(float32x2_t *)&v55.f32[v23], 1), v28, *(float32x4_t *)((char *)&v55 + v23 * 4), 2), v29, *(float32x4_t *)((char *)&v55 + v23 * 4), 3);
    v23 += 4;
  }
  while (v23 != 16);
  unint64_t v30 = 0;
  float32x4_t v31 = v46;
  v31.i32[2] = v13;
  float32x4_t v32 = (float32x4_t)v59.columns[0];
  float32x4_t v33 = (float32x4_t)v59.columns[1];
  float32x4_t v34 = (float32x4_t)v59.columns[2];
  float32x4_t v35 = (float32x4_t)v59.columns[3];
  float32x4_t v55 = v25;
  float32x4_t v56 = v19;
  float32x4_t v57 = v31;
  float32x4_t v58 = v47;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v30 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v30 * 4))), v33, *(float32x2_t *)&v55.f32[v30], 1), v34, *(float32x4_t *)((char *)&v55 + v30 * 4), 2), v35, *(float32x4_t *)((char *)&v55 + v30 * 4), 3);
    v30 += 4;
  }
  while (v30 != 16);
  simd_float4x4 v36 = v59;
  *(simd_float4 *)(a1 + 128) = v59.columns[0];
  *(simd_float4 *)(a1 + 144) = v36.columns[1];
  *(simd_float4 *)(a1 + 160) = v36.columns[2];
  *(simd_float4 *)(a1 + 176) = v36.columns[3];
  float32x4_t v37 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v37, vabsq_f32(vsubq_f32((float32x4_t)v36.columns[0], v44)))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v37, vabsq_f32(vsubq_f32((float32x4_t)v36.columns[1], v45)))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x38D1B717u), vabsq_f32(vsubq_f32((float32x4_t)v36.columns[2], v46)))))) & 1) != 0|| (unsigned long long v38 = *(_OWORD *)&vsubq_f32((float32x4_t)v36.columns[3], v47) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL), LODWORD(v38) = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0], v39 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_n_s32(0x38D1B717u), *(float32x2_t *)&v38)), (v39.i8[0])|| (v40 = vabdq_f32((float32x4_t)v36.columns[3], v47), v40.f32[0] > 0.0001)|| (v39.i8[4])
  {
    *(unsigned char *)(a1 + 112) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 112) = v40.f32[3] <= 0.0001;
    if (v40.f32[3] <= 0.0001)
    {
      *(float32x4_t *)(a1 + 128) = v44;
      *(float32x4_t *)(a1 + 144) = v45;
      *(float32x4_t *)(a1 + 160) = v46;
      *(float32x4_t *)(a1 + 176) = v47;
      *(float32x4_t *)(a1 + 192) = v44;
      *(float32x4_t *)(a1 + 208) = v45;
      *(float32x4_t *)(a1 + 224) = v46;
      *(float32x4_t *)(a1 + 240) = v47;
      goto LABEL_12;
    }
  }
  *(simd_float4x4 *)(a1 + 192) = __invert_f4(v36);
  uint64_t v6 = (const float *)(a1 + 256);
  *(float32x4x4_t *)v14.f32 = vld4q_f32(v6);
LABEL_12:
  *(float32x4_t *)(a1 + 320) = v14;
  *(float32x4_t *)(a1 + 336) = v15;
  *(float32x4_t *)(a1 + 352) = v16;
  *(float32x4_t *)(a1 + 368) = v17;
}

double sub_20B0CA368(uint64_t a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    float32x4_t v4 = *(float32x4_t *)(*(void *)(a1 + 32) - 16);
  }
  else
  {
    uint64_t v2 = *(double **)(a1 + 24);
    double v3 = *v2;
    float32x4_t v4 = *(float32x4_t *)(v2 + 2);
    if (*v2 + 2.22044605e-16 < a2)
    {
      int v5 = *(double **)(a1 + 32);
      if (v2 == v5)
      {
LABEL_11:
        float32x4_t v4 = *(float32x4_t *)(v5 - 2);
        return *(double *)v4.i64;
      }
      double v6 = *v2 + 2.22044605e-16;
      if (v6 < a2)
      {
        long long v7 = v2 + 4;
        while (v7 != v5)
        {
          double v3 = v6;
          double v8 = *v7;
          v7 += 4;
          double v6 = v8 + 2.22044605e-16;
          if (v8 + 2.22044605e-16 >= a2)
          {
            float32x4_t v4 = *(float32x4_t *)(v7 - 6);
            uint64_t v2 = v7 - 4;
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
LABEL_9:
      double v9 = (a2 - v3) / (v6 - v3);
      float v10 = 1.0 - v9;
      *(float *)&double v9 = v9;
      v4.i64[0] = vmlaq_n_f32(vmulq_n_f32(v4, v10), *(float32x4_t *)(v2 + 2), *(float *)&v9).u64[0];
    }
  }
  return *(double *)v4.i64;
}

void sub_20B0CA430(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  unsigned int v4 = (v3 >> 3) & 3;
  int v5 = v4 - 1;
  if (v4) {
    int v6 = v4 - 1;
  }
  else {
    int v6 = 2;
  }
  if (v4 < 2) {
    int v7 = 1;
  }
  else {
    int v7 = -2;
  }
  unsigned int v8 = v7 + v4;
  if (!v4) {
    int v5 = 2;
  }
  if ((v3 & 4) != 0) {
    int v9 = v8;
  }
  else {
    int v9 = v6;
  }
  if ((v3 & 4) != 0) {
    int v10 = v5;
  }
  else {
    int v10 = v8;
  }
  float v11 = *(float *)(a1 + 8 * ((v3 & 1) == 0));
  if ((v3 & 4) != 0)
  {
    float v12 = *(float *)(a1 + 4);
  }
  else
  {
    float v11 = -v11;
    float v12 = -*(float *)(a1 + 4);
  }
  if ((v3 & 4) != 0) {
    float v13 = *(float *)(a1 + 8 * (v3 & 1));
  }
  else {
    float v13 = -*(float *)(a1 + 8 * (v3 & 1));
  }
  __float2 v14 = __sincosf_stret(v11);
  __float2 v15 = __sincosf_stret(v12);
  __float2 v16 = __sincosf_stret(v13);
  *(_DWORD *)a2 = 1065353216;
  *(void *)(a2 + 12) = 0;
  float v17 = v14.__cosval * v16.__cosval;
  float v18 = v14.__cosval * v16.__sinval;
  float v19 = v14.__sinval * v16.__cosval;
  *(void *)(a2 + 4) = 0;
  float v20 = v14.__sinval * v16.__sinval;
  *(_DWORD *)(a2 + 20) = 1065353216;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 1065353216;
  *(void *)(a2 + 52) = 0;
  *(void *)(a2 + 44) = 0;
  *(_DWORD *)(a2 + 60) = 1065353216;
  uint64_t v21 = a2 + 16 * v4;
  if ((v3 & 2) != 0)
  {
    *(float *)(v21 + 4 * v4) = v15.__cosval;
    uint64_t v25 = a2 + 16 * v9;
    *(float *)(v25 + 4 * v4) = v14.__sinval * v15.__sinval;
    uint64_t v23 = a2 + 16 * v10;
    *(float *)(v23 + 4 * v4) = v14.__cosval * v15.__sinval;
    *(float *)(v21 + 4 * v9) = v15.__sinval * v16.__sinval;
    *(float *)(v25 + 4 * v9) = v17 - (float)(v20 * v15.__cosval);
    *(float *)(v23 + 4 * v9) = -(float)(v19 + (float)(v18 * v15.__cosval));
    *(float *)(v21 + 4 * v10) = -(float)(v16.__cosval * v15.__sinval);
    *(float *)(v25 + 4 * v10) = v18 + (float)(v19 * v15.__cosval);
    float v24 = -(float)(v20 - (float)(v17 * v15.__cosval));
  }
  else
  {
    *(float *)(v21 + 4 * v4) = v15.__cosval * v16.__cosval;
    uint64_t v22 = a2 + 16 * v9;
    *(float *)(v22 + 4 * v4) = -(float)(v18 - (float)(v19 * v15.__sinval));
    uint64_t v23 = a2 + 16 * v10;
    *(float *)(v23 + 4 * v4) = v20 + (float)(v17 * v15.__sinval);
    *(float *)(v21 + 4 * v9) = v15.__cosval * v16.__sinval;
    *(float *)(v22 + 4 * v9) = v17 + (float)(v20 * v15.__sinval);
    *(float *)(v23 + 4 * v9) = -(float)(v19 - (float)(v18 * v15.__sinval));
    *(float *)(v21 + 4 * v10) = -v15.__sinval;
    *(float *)(v22 + 4 * v10) = v14.__sinval * v15.__cosval;
    float v24 = v14.__cosval * v15.__cosval;
  }
  *(float *)(v23 + 4 * v10) = v24;
}

double sub_20B0CA5F4(float32x4_t **a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    float32x4_t v4 = a1[1][-1];
  }
  else
  {
    uint64_t v2 = (double *)*a1;
    double v3 = *(double *)(*a1)->i64;
    float32x4_t v4 = (*a1)[1];
    if (v3 + 2.22044605e-16 < a2)
    {
      int v5 = a1[1];
      if (v2 == (double *)v5)
      {
LABEL_11:
        float32x4_t v4 = v5[-1];
        return *(double *)v4.i64;
      }
      double v6 = *v2 + 2.22044605e-16;
      if (v6 < a2)
      {
        int v7 = v2 + 4;
        while (v7 != (double *)v5)
        {
          double v3 = v6;
          double v8 = *v7;
          v7 += 4;
          double v6 = v8 + 2.22044605e-16;
          if (v8 + 2.22044605e-16 >= a2)
          {
            float32x4_t v4 = *(float32x4_t *)(v7 - 6);
            uint64_t v2 = v7 - 4;
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
LABEL_9:
      double v9 = (a2 - v3) / (v6 - v3);
      float v10 = 1.0 - v9;
      *(float *)&double v9 = v9;
      v4.i64[0] = vmlaq_n_f32(vmulq_n_f32(v4, v10), *(float32x4_t *)(v2 + 2), *(float *)&v9).u64[0];
    }
  }
  return *(double *)v4.i64;
}

double sub_20B0CA6BC(uint64_t a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    float32x4_t v4 = *(float32x4_t *)(*(void *)(a1 + 56) - 16);
  }
  else
  {
    uint64_t v2 = *(double **)(a1 + 48);
    double v3 = *v2;
    float32x4_t v4 = *(float32x4_t *)(v2 + 2);
    if (*v2 + 2.22044605e-16 < a2)
    {
      int v5 = *(double **)(a1 + 56);
      if (v2 == v5)
      {
LABEL_11:
        float32x4_t v4 = *(float32x4_t *)(v5 - 2);
        return *(double *)v4.i64;
      }
      double v6 = *v2 + 2.22044605e-16;
      if (v6 < a2)
      {
        int v7 = v2 + 4;
        while (v7 != v5)
        {
          double v3 = v6;
          double v8 = *v7;
          v7 += 4;
          double v6 = v8 + 2.22044605e-16;
          if (v8 + 2.22044605e-16 >= a2)
          {
            float32x4_t v4 = *(float32x4_t *)(v7 - 6);
            uint64_t v2 = v7 - 4;
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
LABEL_9:
      double v9 = (a2 - v3) / (v6 - v3);
      float v10 = 1.0 - v9;
      *(float *)&double v9 = v9;
      v4.i64[0] = vmlaq_n_f32(vmulq_n_f32(v4, v10), *(float32x4_t *)(v2 + 2), *(float *)&v9).u64[0];
    }
  }
  return *(double *)v4.i64;
}

double sub_20B0CA784(uint64_t a1, double a2)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    float32x4_t v4 = *(float32x4_t *)(*(void *)(a1 + 80) - 16);
  }
  else
  {
    uint64_t v2 = *(double **)(a1 + 72);
    double v3 = *v2;
    float32x4_t v4 = *(float32x4_t *)(v2 + 2);
    if (*v2 + 2.22044605e-16 < a2)
    {
      int v5 = *(double **)(a1 + 80);
      if (v2 == v5)
      {
LABEL_11:
        float32x4_t v4 = *(float32x4_t *)(v5 - 2);
        return *(double *)v4.i64;
      }
      double v6 = *v2 + 2.22044605e-16;
      if (v6 < a2)
      {
        int v7 = v2 + 4;
        while (v7 != v5)
        {
          double v3 = v6;
          double v8 = *v7;
          v7 += 4;
          double v6 = v8 + 2.22044605e-16;
          if (v8 + 2.22044605e-16 >= a2)
          {
            float32x4_t v4 = *(float32x4_t *)(v7 - 6);
            uint64_t v2 = v7 - 4;
            goto LABEL_9;
          }
        }
        goto LABEL_11;
      }
LABEL_9:
      double v9 = (a2 - v3) / (v6 - v3);
      float v10 = 1.0 - v9;
      *(float *)&double v9 = v9;
      v4.i64[0] = vmlaq_n_f32(vmulq_n_f32(v4, v10), *(float32x4_t *)(v2 + 2), *(float *)&v9).u64[0];
    }
  }
  return *(double *)v4.i64;
}

void sub_20B0CA84C(uint64_t a1)
{
}

void sub_20B0CA858(uint64_t a1, double a2)
{
  double v4 = sub_20B0CA368(a1, a2);
  int v54 = 5;
  int v53 = v5;
  double v52 = v4;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  sub_20B0CA430((uint64_t)&v52, (uint64_t)&v48);
  long long v7 = v49;
  *(_OWORD *)(a1 + 256) = v48;
  *(_OWORD *)(a1 + 272) = v7;
  long long v8 = v51;
  *(_OWORD *)(a1 + 288) = v50;
  *(_OWORD *)(a1 + 304) = v8;
  float32x4_t v44 = *(float32x4_t *)MEMORY[0x263EF89A8];
  float32x4_t v45 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
  float32x4_t v46 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
  float32x4_t v47 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  *(double *)v9.i64 = sub_20B0CA5F4((float32x4_t **)a1, a2);
  v9.i32[3] = v47.i32[3];
  float32x4_t v41 = v9;
  *(double *)v10.i64 = sub_20B0CA6BC(a1, a2);
  float32x4_t v11 = v45;
  v11.i32[0] = v10.i32[0];
  int8x16_t v42 = v10;
  float32x4_t v43 = v11;
  double v12 = sub_20B0CA784(a1, a2);
  float32x4_t v14 = v44;
  float32x4_t v15 = v45;
  float32x4_t v16 = v46;
  float32x4_t v17 = v47;
  unint64_t v18 = 0;
  float32x4_t v19 = v45;
  v19.i32[1] = HIDWORD(v12);
  float32x4_t v20 = *(float32x4_t *)(a1 + 272);
  float32x4_t v21 = *(float32x4_t *)(a1 + 288);
  float32x4_t v22 = *(float32x4_t *)(a1 + 304);
  float32x4_t v55 = *(float32x4_t *)(a1 + 256);
  float32x4_t v56 = v20;
  float32x4_t v57 = v21;
  float32x4_t v58 = v22;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v18 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v44, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v18 * 4))), v45, *(float32x2_t *)&v55.f32[v18], 1), v46, *(float32x4_t *)((char *)&v55 + v18 * 4), 2), v41, *(float32x4_t *)((char *)&v55 + v18 * 4), 3);
    v18 += 4;
  }
  while (v18 != 16);
  unint64_t v23 = 0;
  v24.i64[0] = vextq_s8(v42, (int8x16_t)v46, 4uLL).u64[0];
  v24.i64[1] = v46.i64[1];
  float32x4_t v25 = v44;
  v25.i32[0] = LODWORD(v12);
  float32x4_t v26 = (float32x4_t)v59.columns[0];
  float32x4_t v27 = (float32x4_t)v59.columns[1];
  float32x4_t v28 = (float32x4_t)v59.columns[2];
  float32x4_t v29 = (float32x4_t)v59.columns[3];
  float32x4_t v55 = v44;
  float32x4_t v56 = v43;
  float32x4_t v57 = v24;
  float32x4_t v58 = v47;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v23 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v23 * 4))), v27, *(float32x2_t *)&v55.f32[v23], 1), v28, *(float32x4_t *)((char *)&v55 + v23 * 4), 2), v29, *(float32x4_t *)((char *)&v55 + v23 * 4), 3);
    v23 += 4;
  }
  while (v23 != 16);
  unint64_t v30 = 0;
  float32x4_t v31 = v46;
  v31.i32[2] = v13;
  float32x4_t v32 = (float32x4_t)v59.columns[0];
  float32x4_t v33 = (float32x4_t)v59.columns[1];
  float32x4_t v34 = (float32x4_t)v59.columns[2];
  float32x4_t v35 = (float32x4_t)v59.columns[3];
  float32x4_t v55 = v25;
  float32x4_t v56 = v19;
  float32x4_t v57 = v31;
  float32x4_t v58 = v47;
  memset(&v59, 0, sizeof(v59));
  do
  {
    v59.columns[v30 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)((char *)&v55 + v30 * 4))), v33, *(float32x2_t *)&v55.f32[v30], 1), v34, *(float32x4_t *)((char *)&v55 + v30 * 4), 2), v35, *(float32x4_t *)((char *)&v55 + v30 * 4), 3);
    v30 += 4;
  }
  while (v30 != 16);
  simd_float4x4 v36 = v59;
  *(simd_float4 *)(a1 + 128) = v59.columns[0];
  *(simd_float4 *)(a1 + 144) = v36.columns[1];
  *(simd_float4 *)(a1 + 160) = v36.columns[2];
  *(simd_float4 *)(a1 + 176) = v36.columns[3];
  float32x4_t v37 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v37, vabsq_f32(vsubq_f32((float32x4_t)v36.columns[0], v44)))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v37, vabsq_f32(vsubq_f32((float32x4_t)v36.columns[1], v45)))))) & 1) != 0|| (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x38D1B717u), vabsq_f32(vsubq_f32((float32x4_t)v36.columns[2], v46)))))) & 1) != 0|| (unsigned long long v38 = *(_OWORD *)&vsubq_f32((float32x4_t)v36.columns[3], v47) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL), LODWORD(v38) = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u32[0], v39 = vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_n_s32(0x38D1B717u), *(float32x2_t *)&v38)), (v39.i8[0])|| (v40 = vabdq_f32((float32x4_t)v36.columns[3], v47), v40.f32[0] > 0.0001)|| (v39.i8[4])
  {
    *(unsigned char *)(a1 + 112) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 112) = v40.f32[3] <= 0.0001;
    if (v40.f32[3] <= 0.0001)
    {
      *(float32x4_t *)(a1 + 128) = v44;
      *(float32x4_t *)(a1 + 144) = v45;
      *(float32x4_t *)(a1 + 160) = v46;
      *(float32x4_t *)(a1 + 176) = v47;
      *(float32x4_t *)(a1 + 192) = v44;
      *(float32x4_t *)(a1 + 208) = v45;
      *(float32x4_t *)(a1 + 224) = v46;
      *(float32x4_t *)(a1 + 240) = v47;
      goto LABEL_12;
    }
  }
  *(simd_float4x4 *)(a1 + 192) = __invert_f4(v36);
  double v6 = (const float *)(a1 + 256);
  *(float32x4x4_t *)v14.f32 = vld4q_f32(v6);
LABEL_12:
  *(float32x4_t *)(a1 + 320) = v14;
  *(float32x4_t *)(a1 + 336) = v15;
  *(float32x4_t *)(a1 + 352) = v16;
  *(float32x4_t *)(a1 + 368) = v17;
}

__n128 sub_20B0CAB60(uint64_t a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *(_OWORD *)float32x4_t v15 = *a2;
  *(_OWORD *)&v15[16] = v3;
  long long v4 = a2[3];
  *(_OWORD *)float32x4_t v16 = a2[2];
  *(_OWORD *)&v16[16] = v4;
  if (!sub_20B0CAC94((uint64_t)a2))
  {
    *(_DWORD *)float32x4_t v15 = 1065353216;
    *(void *)&v15[12] = 0;
    *(void *)&v15[4] = 0;
    *(_DWORD *)&v15[20] = 1065353216;
    *(void *)&v15[24] = 0;
    *(void *)float32x4_t v16 = 0;
    *(_DWORD *)&v16[8] = 1065353216;
    *(void *)&v16[20] = 0;
    *(void *)&v16[12] = 0;
    *(_DWORD *)&v16[28] = 1065353216;
  }
  int v14 = 0;
  float32x2_t v13 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  int v10 = 0;
  uint64_t v9 = 0;
  int v8 = 0;
  uint64_t v7 = 0;
  sub_20B0CBCE0((uint64_t)v15, &v13, (float *)&v11, (float *)&v9, &v7, 1, 0x101u);
  sub_20B06C3BC((char **)a1);
  *(void *)&long long v5 = v7;
  DWORD2(v5) = v8;
  *(_OWORD *)(*(void *)a1 + 16) = v5;
  *(void *)&long long v5 = v9;
  DWORD2(v5) = v10;
  *(_OWORD *)(*(void *)(a1 + 24) + 16) = v5;
  *(void *)&long long v5 = v11;
  DWORD2(v5) = v12;
  *(_OWORD *)(*(void *)(a1 + 48) + 16) = v5;
  *(float32x2_t *)&long long v5 = v13;
  DWORD2(v5) = v14;
  *(_OWORD *)(*(void *)(a1 + 72) + 16) = v5;
  sub_20B0CA050(a1, 1.79769313e308);
  return result;
}

BOOL sub_20B0CAC94(uint64_t a1)
{
  v1.columns[0] = *(simd_float4 *)a1;
  if (fabsf(COERCE_FLOAT(HIDWORD(*(_OWORD *)a1))) > 0.00000001) {
    return 0;
  }
  if (fabsf(*(float *)(a1 + 28)) > 0.00000001) {
    return 0;
  }
  if (fabsf(*(float *)(a1 + 44)) > 0.00000001) {
    return 0;
  }
  if (fabsf(*(float *)(a1 + 60) + -1.0) > 0.00000001) {
    return 0;
  }
  v1.columns[1] = *(simd_float4 *)(a1 + 16);
  v1.columns[2] = *(simd_float4 *)(a1 + 32);
  v1.columns[3] = *(simd_float4 *)(a1 + 48);
  float32x4_t v3 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[2], (int8x16_t)v1.columns[2], 8uLL);
  float32x4_t v4 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[3], (int8x16_t)v1.columns[3], 0xCuLL);
  float32x4_t v5 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[2], (int8x16_t)v1.columns[2], 0xCuLL);
  float32x4_t v6 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[3], (int8x16_t)v1.columns[3], 8uLL);
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[3], (int8x16_t)v1.columns[3], 4uLL);
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)v1.columns[2], (int8x16_t)v1.columns[2], 4uLL);
  int8x16_t v9 = (int8x16_t)vmulq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(vmlaq_f32(vnegq_f32(vmulq_f32(v4, v8)), v5, v7), (float32x4_t)vextq_s8((int8x16_t)v1.columns[1], (int8x16_t)v1.columns[1], 8uLL)), (float32x4_t)vextq_s8((int8x16_t)v1.columns[1], (int8x16_t)v1.columns[1], 4uLL), vmlaq_f32(vnegq_f32(vmulq_f32(v6, v5)), v3, v4)), (float32x4_t)vextq_s8((int8x16_t)v1.columns[1], (int8x16_t)v1.columns[1], 0xCuLL), vmlaq_f32(vnegq_f32(vmulq_f32(v7, v3)), v8, v6)), (float32x4_t)v1.columns[0]);
  v3.i64[0] = vextq_s8(v9, v9, 8uLL).u64[0];
  if (fabsf(vaddv_f32(vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v3.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v3.f32)))) <= 0.00000001)return 0; {
  simd_float4 v24 = *(simd_float4 *)a1;
  }
  simd_float4x4 v29 = __invert_f4(v1);
  float32x4_t v25 = (float32x4_t)v29.columns[0];
  float32x4_t v26 = (float32x4_t)v29.columns[1];
  float32x4_t v27 = (float32x4_t)v29.columns[2];
  simd_float4 v23 = v29.columns[3];
  v29.columns[1] = *(simd_float4 *)(a1 + 16);
  v29.columns[2] = *(simd_float4 *)(a1 + 32);
  v29.columns[0] = v24;
  v29.columns[0].i32[3] = 0;
  v29.columns[1].i32[3] = 0;
  v29.columns[2].i32[3] = 0;
  simd_float3x3 v28 = __invert_f3(*(simd_float3x3 *)v29.columns[0].f32);
  float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
  uint32x4_t v11 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v10, vabdq_f32(v25, (float32x4_t)v28.columns[0])), (int8x16_t)vcgeq_f32(v10, vabdq_f32(v26, (float32x4_t)v28.columns[1]))), (int8x16_t)vcgeq_f32(v10, vabdq_f32(v27, (float32x4_t)v28.columns[2])));
  v11.i32[3] = v11.i32[2];
  if ((vminvq_u32(v11) & 0x80000000) == 0) {
    return 0;
  }
  float32x4_t v13 = vnegq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v28.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 48))), (float32x4_t)v28.columns[1], *(float32x2_t *)(a1 + 48), 1), (float32x4_t)v28.columns[2], *(float32x4_t *)(a1 + 48), 2));
  float v14 = vabds_f32(v23.f32[0], v13.f32[0]);
  if (v14 > 0.001)
  {
    float v15 = fabsf(v23.f32[0]);
    float v16 = fabsf(v13.f32[0]);
    if (v16 > v15) {
      float v15 = v16;
    }
    if (v14 > (float)(v15 * 0.000001)) {
      return 0;
    }
  }
  float v17 = vabds_f32(v23.f32[1], v13.f32[1]);
  if (v17 > 0.001)
  {
    float v18 = fabsf(v23.f32[1]);
    float v19 = fabsf(v13.f32[1]);
    if (v19 > v18) {
      float v18 = v19;
    }
    if (v17 > (float)(v18 * 0.000001)) {
      return 0;
    }
  }
  float v20 = vabds_f32(v23.f32[2], v13.f32[2]);
  if (v20 <= 0.001) {
    return 1;
  }
  float v21 = fabsf(v23.f32[2]);
  float v22 = fabsf(v13.f32[2]);
  if (v22 > v21) {
    float v21 = v22;
  }
  return v20 <= (float)(v21 * 0.000001);
}

void sub_20B0CAED0(uint64_t a1, _OWORD *a2, double a3)
{
  long long v5 = a2[1];
  *(_OWORD *)float v19 = *a2;
  *(_OWORD *)&v19[16] = v5;
  long long v6 = a2[3];
  *(_OWORD *)float v20 = a2[2];
  *(_OWORD *)&v20[16] = v6;
  if (!sub_20B0CAC94((uint64_t)a2))
  {
    *(_DWORD *)float v19 = 1065353216;
    *(void *)&v19[12] = 0;
    *(void *)&v19[4] = 0;
    *(_DWORD *)&v19[20] = 1065353216;
    *(void *)&v19[24] = 0;
    *(void *)float v20 = 0;
    *(_DWORD *)&v20[8] = 1065353216;
    *(void *)&v20[20] = 0;
    *(void *)&v20[12] = 0;
    *(_DWORD *)&v20[28] = 1065353216;
  }
  unsigned __int32 v18 = 0;
  unint64_t v17 = 0;
  unsigned __int32 v16 = 0;
  unint64_t v15 = 0;
  unsigned __int32 v14 = 0;
  unint64_t v13 = 0;
  unsigned __int32 v12 = 0;
  unint64_t v11 = 0;
  sub_20B0CBCE0((uint64_t)v19, (float32x2_t *)&v17, (float *)&v15, (float *)&v13, &v11, 1, 0x101u);
  v7.n128_u64[0] = v11;
  v7.n128_u32[2] = v12;
  sub_20B0CB014(a1, v7, a3);
  v8.n128_u64[0] = v13;
  v8.n128_u32[2] = v14;
  sub_20B0CB1A4(a1, v8, a3);
  v9.n128_u64[0] = v15;
  v9.n128_u32[2] = v16;
  sub_20B0CB340(a1, v9, a3);
  v10.n128_u64[0] = v17;
  v10.n128_u32[2] = v18;
  sub_20B0CB4DC(a1, v10, a3);
  sub_20B0CA050(a1, a3);
}

void sub_20B0CB014(uint64_t a1, __n128 a2, double a3)
{
  long long v5 = *(char **)a1;
  if (a3 != 1.79769313e308 && **(double **)a1 == 1.79769313e308)
  {
    *(void *)(a1 + 8) = v5;
    __n128 v7 = (__n128 *)v5;
    goto LABEL_12;
  }
  __n128 v7 = *(__n128 **)(a1 + 8);
  if (v5 == (char *)v7)
  {
LABEL_12:
    uint64_t v10 = a1 + 16;
    unint64_t v11 = *(void *)(a1 + 16);
    if ((unint64_t)v7 >= v11)
    {
      uint64_t v13 = ((char *)v7 - v5) >> 5;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 59) {
        sub_20B05D0BC();
      }
      uint64_t v15 = v11 - (void)v5;
      if (v15 >> 4 > v14) {
        unint64_t v14 = v15 >> 4;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        __n128 v23 = a2;
        unint64_t v17 = (char *)sub_20B06C71C(v10, v16);
        a2 = v23;
      }
      else
      {
        unint64_t v17 = 0;
      }
      unsigned __int32 v18 = (__n128 *)&v17[32 * v13];
      float v19 = &v17[32 * v16];
      v18->n128_f64[0] = a3;
      v18[1] = a2;
      unsigned __int32 v12 = v18 + 2;
      float v21 = *(char **)a1;
      float v20 = *(__n128 **)(a1 + 8);
      if (v20 != *(__n128 **)a1)
      {
        do
        {
          __n128 v22 = v20[-1];
          v18[-2] = v20[-2];
          v18[-1] = v22;
          v18 -= 2;
          v20 -= 2;
        }
        while (v20 != (__n128 *)v21);
        float v20 = *(__n128 **)a1;
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v12;
      *(void *)(a1 + 16) = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      v7->n128_f64[0] = a3;
      v7[1] = a2;
      unsigned __int32 v12 = v7 + 2;
    }
    *(void *)(a1 + 8) = v12;
    goto LABEL_29;
  }
  uint64_t v8 = *(void *)a1;
  __n128 v9 = *(__n128 **)a1;
  while (1)
  {
    if (vabdd_f64(v9->n128_f64[0], a3) < 2.22044605e-16)
    {
      v9[1] = a2;
      goto LABEL_29;
    }
    if (v9->n128_f64[0] > a3) {
      break;
    }
    v9 += 2;
    v8 += 32;
    if (v9 == v7) {
      goto LABEL_12;
    }
  }
  *(double *)simd_float4 v24 = a3;
  v24[1] = a2;
  sub_20B0CB97C((char **)a1, v8, v24);
LABEL_29:
  sub_20B0CA050(a1, a3);
}

void sub_20B0CB1A4(uint64_t a1, __n128 a2, double a3)
{
  long long v6 = (void **)(a1 + 24);
  long long v5 = *(double **)(a1 + 24);
  if (a3 != 1.79769313e308 && *v5 == 1.79769313e308)
  {
    *(void *)(a1 + 32) = v5;
    uint64_t v8 = (__n128 *)v5;
    goto LABEL_12;
  }
  uint64_t v8 = *(__n128 **)(a1 + 32);
  if (v5 == (double *)v8)
  {
LABEL_12:
    uint64_t v11 = a1 + 40;
    unint64_t v12 = *(void *)(a1 + 40);
    if ((unint64_t)v8 >= v12)
    {
      uint64_t v14 = ((char *)v8 - (char *)v5) >> 5;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 59) {
        sub_20B05D0BC();
      }
      uint64_t v16 = v12 - (void)v5;
      if (v16 >> 4 > v15) {
        unint64_t v15 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        __n128 v24 = a2;
        unsigned __int32 v18 = (char *)sub_20B06C71C(v11, v17);
        a2 = v24;
      }
      else
      {
        unsigned __int32 v18 = 0;
      }
      float v19 = (__n128 *)&v18[32 * v14];
      float v20 = &v18[32 * v17];
      v19->n128_f64[0] = a3;
      v19[1] = a2;
      uint64_t v13 = v19 + 2;
      __n128 v22 = *(__n128 **)(a1 + 24);
      float v21 = *(__n128 **)(a1 + 32);
      if (v21 != v22)
      {
        do
        {
          __n128 v23 = v21[-1];
          v19[-2] = v21[-2];
          v19[-1] = v23;
          v19 -= 2;
          v21 -= 2;
        }
        while (v21 != v22);
        float v21 = (__n128 *)*v6;
      }
      *(void *)(a1 + 24) = v19;
      *(void *)(a1 + 32) = v13;
      *(void *)(a1 + 40) = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      v8->n128_f64[0] = a3;
      v8[1] = a2;
      uint64_t v13 = v8 + 2;
    }
    *(void *)(a1 + 32) = v13;
    goto LABEL_29;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = (__n128 *)v9;
  while (1)
  {
    if (vabdd_f64(v10->n128_f64[0], a3) < 2.22044605e-16)
    {
      v10[1] = a2;
      goto LABEL_29;
    }
    if (v10->n128_f64[0] > a3) {
      break;
    }
    v10 += 2;
    v9 += 32;
    if (v10 == v8) {
      goto LABEL_12;
    }
  }
  *(double *)float32x4_t v25 = a3;
  v25[1] = a2;
  sub_20B0CB97C((char **)(a1 + 24), v9, v25);
LABEL_29:
  sub_20B0CA050(a1, a3);
}

void sub_20B0CB340(uint64_t a1, __n128 a2, double a3)
{
  long long v6 = (void **)(a1 + 48);
  long long v5 = *(double **)(a1 + 48);
  if (a3 != 1.79769313e308 && *v5 == 1.79769313e308)
  {
    *(void *)(a1 + 56) = v5;
    uint64_t v8 = (__n128 *)v5;
    goto LABEL_12;
  }
  uint64_t v8 = *(__n128 **)(a1 + 56);
  if (v5 == (double *)v8)
  {
LABEL_12:
    uint64_t v11 = a1 + 64;
    unint64_t v12 = *(void *)(a1 + 64);
    if ((unint64_t)v8 >= v12)
    {
      uint64_t v14 = ((char *)v8 - (char *)v5) >> 5;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 59) {
        sub_20B05D0BC();
      }
      uint64_t v16 = v12 - (void)v5;
      if (v16 >> 4 > v15) {
        unint64_t v15 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        __n128 v24 = a2;
        unsigned __int32 v18 = (char *)sub_20B06C71C(v11, v17);
        a2 = v24;
      }
      else
      {
        unsigned __int32 v18 = 0;
      }
      float v19 = (__n128 *)&v18[32 * v14];
      float v20 = &v18[32 * v17];
      v19->n128_f64[0] = a3;
      v19[1] = a2;
      uint64_t v13 = v19 + 2;
      __n128 v22 = *(__n128 **)(a1 + 48);
      float v21 = *(__n128 **)(a1 + 56);
      if (v21 != v22)
      {
        do
        {
          __n128 v23 = v21[-1];
          v19[-2] = v21[-2];
          v19[-1] = v23;
          v19 -= 2;
          v21 -= 2;
        }
        while (v21 != v22);
        float v21 = (__n128 *)*v6;
      }
      *(void *)(a1 + 48) = v19;
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      v8->n128_f64[0] = a3;
      v8[1] = a2;
      uint64_t v13 = v8 + 2;
    }
    *(void *)(a1 + 56) = v13;
    goto LABEL_29;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = (__n128 *)v9;
  while (1)
  {
    if (vabdd_f64(v10->n128_f64[0], a3) < 2.22044605e-16)
    {
      v10[1] = a2;
      goto LABEL_29;
    }
    if (v10->n128_f64[0] > a3) {
      break;
    }
    v10 += 2;
    v9 += 32;
    if (v10 == v8) {
      goto LABEL_12;
    }
  }
  *(double *)float32x4_t v25 = a3;
  v25[1] = a2;
  sub_20B0CB97C((char **)(a1 + 48), v9, v25);
LABEL_29:
  sub_20B0CA050(a1, a3);
}

void sub_20B0CB4DC(uint64_t a1, __n128 a2, double a3)
{
  long long v6 = (void **)(a1 + 72);
  long long v5 = *(double **)(a1 + 72);
  if (a3 != 1.79769313e308 && *v5 == 1.79769313e308)
  {
    *(void *)(a1 + 80) = v5;
    uint64_t v8 = (__n128 *)v5;
    goto LABEL_12;
  }
  uint64_t v8 = *(__n128 **)(a1 + 80);
  if (v5 == (double *)v8)
  {
LABEL_12:
    uint64_t v11 = a1 + 88;
    unint64_t v12 = *(void *)(a1 + 88);
    if ((unint64_t)v8 >= v12)
    {
      uint64_t v14 = ((char *)v8 - (char *)v5) >> 5;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 59) {
        sub_20B05D0BC();
      }
      uint64_t v16 = v12 - (void)v5;
      if (v16 >> 4 > v15) {
        unint64_t v15 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        __n128 v24 = a2;
        unsigned __int32 v18 = (char *)sub_20B06C71C(v11, v17);
        a2 = v24;
      }
      else
      {
        unsigned __int32 v18 = 0;
      }
      float v19 = (__n128 *)&v18[32 * v14];
      float v20 = &v18[32 * v17];
      v19->n128_f64[0] = a3;
      v19[1] = a2;
      uint64_t v13 = v19 + 2;
      __n128 v22 = *(__n128 **)(a1 + 72);
      float v21 = *(__n128 **)(a1 + 80);
      if (v21 != v22)
      {
        do
        {
          __n128 v23 = v21[-1];
          v19[-2] = v21[-2];
          v19[-1] = v23;
          v19 -= 2;
          v21 -= 2;
        }
        while (v21 != v22);
        float v21 = (__n128 *)*v6;
      }
      *(void *)(a1 + 72) = v19;
      *(void *)(a1 + 80) = v13;
      *(void *)(a1 + 88) = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      v8->n128_f64[0] = a3;
      v8[1] = a2;
      uint64_t v13 = v8 + 2;
    }
    *(void *)(a1 + 80) = v13;
    goto LABEL_29;
  }
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = (__n128 *)v9;
  while (1)
  {
    if (vabdd_f64(v10->n128_f64[0], a3) < 2.22044605e-16)
    {
      v10[1] = a2;
      goto LABEL_29;
    }
    if (v10->n128_f64[0] > a3) {
      break;
    }
    v10 += 2;
    v9 += 32;
    if (v10 == v8) {
      goto LABEL_12;
    }
  }
  *(double *)float32x4_t v25 = a3;
  v25[1] = a2;
  sub_20B0CB97C((char **)(a1 + 72), v9, v25);
LABEL_29:
  sub_20B0CA050(a1, a3);
}

void sub_20B0CB678(long long **a1, uint64_t a2)
{
  float32x4_t v35 = 0;
  unint64_t v36 = 0;
  float32x4_t v34 = (uint64_t *)&v35;
  float32x4_t v4 = *a1;
  long long v5 = a1[1];
  while (v4 != v5)
  {
    long long v6 = v4[1];
    long long v32 = *v4;
    long long v33 = v6;
    sub_20B0CCE50(&v34, (double *)&v32, (uint64_t *)&v32);
    v4 += 2;
  }
  __n128 v7 = a1[3];
  uint64_t v8 = a1[4];
  while (v7 != v8)
  {
    long long v9 = v7[1];
    long long v32 = *v7;
    long long v33 = v9;
    sub_20B0CCE50(&v34, (double *)&v32, (uint64_t *)&v32);
    v7 += 2;
  }
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  while (v10 != v11)
  {
    long long v12 = v10[1];
    long long v32 = *v10;
    long long v33 = v12;
    sub_20B0CCE50(&v34, (double *)&v32, (uint64_t *)&v32);
    v10 += 2;
  }
  uint64_t v14 = a1[9];
  uint64_t v13 = a1[10];
  while (v14 != v13)
  {
    long long v15 = v14[1];
    long long v32 = *v14;
    long long v33 = v15;
    sub_20B0CCE50(&v34, (double *)&v32, (uint64_t *)&v32);
    v14 += 2;
  }
  *(void *)(a2 + 8) = *(void *)a2;
  sub_20B0CB8D4((void **)a2, v36);
  uint64_t v16 = v34;
  if (v34 != (uint64_t *)&v35)
  {
    unint64_t v17 = (void *)(a2 + 16);
    unsigned __int32 v18 = *(uint64_t **)(a2 + 8);
    do
    {
      uint64_t v19 = v16[4];
      if ((unint64_t)v18 >= *v17)
      {
        float v20 = *(uint64_t **)a2;
        uint64_t v21 = ((uint64_t)v18 - *(void *)a2) >> 3;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          sub_20B05D0BC();
        }
        uint64_t v23 = *v17 - (void)v20;
        if (v23 >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          float32x4_t v25 = (char *)sub_20B0602EC(a2 + 16, v24);
          float v20 = *(uint64_t **)a2;
          unsigned __int32 v18 = *(uint64_t **)(a2 + 8);
        }
        else
        {
          float32x4_t v25 = 0;
        }
        float32x4_t v26 = (uint64_t *)&v25[8 * v21];
        *float32x4_t v26 = v19;
        float32x4_t v27 = v26 + 1;
        while (v18 != v20)
        {
          uint64_t v28 = *--v18;
          *--float32x4_t v26 = v28;
        }
        *(void *)a2 = v26;
        *(void *)(a2 + 8) = v27;
        *(void *)(a2 + 16) = &v25[8 * v24];
        if (v20) {
          operator delete(v20);
        }
        unsigned __int32 v18 = v27;
      }
      else
      {
        *v18++ = v19;
      }
      *(void *)(a2 + 8) = v18;
      simd_float4x4 v29 = (uint64_t *)v16[1];
      if (v29)
      {
        do
        {
          unint64_t v30 = v29;
          simd_float4x4 v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          unint64_t v30 = (uint64_t *)v16[2];
          BOOL v31 = *v30 == (void)v16;
          uint64_t v16 = v30;
        }
        while (!v31);
      }
      uint64_t v16 = v30;
    }
    while (v30 != (uint64_t *)&v35);
  }
  sub_20B05D2CC((uint64_t)&v34, v35);
}

void sub_20B0CB8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void sub_20B0CB8D4(void **a1, unint64_t a2)
{
  float32x4_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_20B05D0BC();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    long long v6 = (char *)sub_20B0602EC(v3, a2);
    __n128 v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    long long v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    long long v12 = v7;
    if (v11 != *a1)
    {
      long long v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

char *sub_20B0CB97C(char **a1, uint64_t a2, _OWORD *a3)
{
  int64_t v5 = *a1;
  long long v6 = a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 5;
  long long v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v12 = (unint64_t)a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v11 = v12;
  if ((unint64_t)v6 >= v12)
  {
    unint64_t v18 = ((v6 - v5) >> 5) + 1;
    if (v18 >> 59) {
      sub_20B05D0BC();
    }
    uint64_t v19 = v11 - (void)v5;
    if (v19 >> 4 > v18) {
      unint64_t v18 = v19 >> 4;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    uint64_t v43 = v10;
    if (v20) {
      uint64_t v21 = (char *)sub_20B06C71C(v10, v20);
    }
    else {
      uint64_t v21 = 0;
    }
    int8x8_t v39 = v21;
    float32x4_t v40 = &v21[32 * v8];
    float32x4_t v41 = v40;
    int8x16_t v42 = &v21[32 * v20];
    sub_20B0CBBB0(&v39, (uint64_t)a3);
    float32x4_t v26 = v40;
    float32x4_t v27 = *a1;
    uint64_t v28 = v40;
    if (*a1 != v9)
    {
      simd_float4x4 v29 = v9;
      unint64_t v30 = v40;
      do
      {
        uint64_t v28 = v30 - 32;
        long long v31 = *((_OWORD *)v29 - 1);
        *((_OWORD *)v30 - 2) = *((_OWORD *)v29 - 2);
        *((_OWORD *)v30 - 1) = v31;
        v29 -= 32;
        v30 -= 32;
      }
      while (v29 != v27);
    }
    float32x4_t v40 = v28;
    long long v32 = a1[1];
    long long v33 = v41;
    if (v32 != v9)
    {
      do
      {
        long long v34 = *(_OWORD *)v9;
        long long v35 = *((_OWORD *)v9 + 1);
        v9 += 32;
        *(_OWORD *)long long v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        v33 += 32;
      }
      while (v9 != v32);
      uint64_t v28 = v40;
      long long v9 = a1[1];
    }
    unint64_t v36 = *a1;
    *a1 = v28;
    a1[1] = v33;
    float32x4_t v37 = a1[2];
    a1[2] = v42;
    float32x4_t v41 = v9;
    int8x16_t v42 = v37;
    int8x8_t v39 = v36;
    float32x4_t v40 = v36;
    if (v9 != v36) {
      float32x4_t v41 = &v9[(v36 - v9 + 31) & 0xFFFFFFFFFFFFFFE0];
    }
    if (v36) {
      operator delete(v36);
    }
    return v26;
  }
  else if (v9 == v6)
  {
    long long v25 = a3[1];
    *(_OWORD *)long long v9 = *a3;
    *((_OWORD *)v9 + 1) = v25;
    a1[1] = v9 + 32;
  }
  else
  {
    uint64_t v13 = v9 + 32;
    uint64_t v14 = v6 - 32;
    long long v15 = v6;
    while (v14 < v6)
    {
      long long v16 = *(_OWORD *)v14;
      long long v17 = *((_OWORD *)v14 + 1);
      v14 += 32;
      *(_OWORD *)long long v15 = v16;
      *((_OWORD *)v15 + 1) = v17;
      v15 += 32;
    }
    a1[1] = v15;
    if (v6 != v13)
    {
      uint64_t v22 = (v6 - v13) >> 5;
      uint64_t v23 = v6 - 16;
      uint64_t v24 = 32 * v22;
      do
      {
        *((void *)v23 - 2) = *(void *)&v9[v24 - 32];
        *(_OWORD *)uint64_t v23 = *(_OWORD *)&v9[v24 - 16];
        v23 -= 32;
        v24 -= 32;
      }
      while (v24);
    }
    *(void *)long long v9 = *(void *)a3;
    *(_OWORD *)&v5[32 * v8 + 16] = a3[1];
  }
  return v9;
}

void sub_20B0CBB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20B0CBBB0(void *a1, uint64_t a2)
{
  float32x4_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    long long v6 = (char *)*a1;
    int64_t v5 = (char *)a1[1];
    uint64_t v7 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == v6) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = (v4 - v6) >> 4;
      }
      uint64_t v14 = (char *)sub_20B06C71C(a1[4], v13);
      long long v16 = &v14[32 * (v13 >> 2)];
      long long v17 = (long long *)a1[1];
      float32x4_t v4 = v16;
      uint64_t v18 = a1[2] - (void)v17;
      if (v18)
      {
        float32x4_t v4 = &v16[v18 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v19 = 32 * (v18 >> 5);
        unint64_t v20 = &v14[32 * (v13 >> 2)];
        do
        {
          long long v21 = *v17;
          long long v22 = v17[1];
          v17 += 2;
          *(_OWORD *)unint64_t v20 = v21;
          *((_OWORD *)v20 + 1) = v22;
          v20 += 32;
          v19 -= 32;
        }
        while (v19);
      }
      uint64_t v23 = (char *)*a1;
      *a1 = v14;
      a1[1] = v16;
      a1[2] = v4;
      a1[3] = &v14[32 * v15];
      if (v23)
      {
        operator delete(v23);
        float32x4_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v8 = v7 >> 5;
      BOOL v9 = v7 >> 5 < -1;
      uint64_t v10 = (v7 >> 5) + 2;
      if (!v9) {
        uint64_t v10 = v8 + 1;
      }
      if (v5 == v4)
      {
        unint64_t v12 = &v5[-32 * (v10 >> 1)];
      }
      else
      {
        do
        {
          unint64_t v11 = &v5[-32 * (v10 >> 1)];
          *(void *)unint64_t v11 = *(void *)v5;
          *((_OWORD *)v11 + 1) = *((_OWORD *)v5 + 1);
          v5 += 32;
        }
        while (v5 != v4);
        float32x4_t v4 = (char *)a1[1];
        unint64_t v12 = &v5[-32 * (v10 >> 1)];
      }
      a1[1] = &v4[-32 * (v10 >> 1)];
      a1[2] = v12;
      float32x4_t v4 = v12;
    }
  }
  __n128 result = *(__n128 *)a2;
  long long v25 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)float32x4_t v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v25;
  a1[2] += 32;
  return result;
}

BOOL sub_20B0CBCE0(uint64_t a1, float32x2_t *a2, float *a3, float *a4, _DWORD *a5, int a6, unsigned int a7)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v11 = *(_OWORD *)(a1 + 16);
  v31[0] = *(_OWORD *)a1;
  v31[1] = v11;
  long long v12 = *(_OWORD *)(a1 + 48);
  v31[2] = *(_OWORD *)(a1 + 32);
  v31[3] = v12;
  BOOL v13 = sub_20B0CBE90((uint64_t)v31, a2, a3, a6);
  if (v13)
  {
    sub_20B0CC284((float *)v31, a4);
    *a5 = *(_DWORD *)(a1 + 48);
    a5[1] = *(_DWORD *)(a1 + 52);
    a5[2] = *(_DWORD *)(a1 + 56);
    if (a7 != 257)
    {
      int v30 = 5;
      uint64_t v28 = *(void *)a4;
      int v29 = *((_DWORD *)a4 + 2);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      int v14 = (a7 >> 9) & 8;
      if ((a7 & 0x2000) != 0) {
        LOBYTE(v14) = 16;
      }
      BYTE4(v27) = a7 & 1 | (4 * (BYTE1(a7) & 1)) | (a7 >> 3) & 2 | v14;
      int v33 = 0;
      memset(v32, 0, sizeof(v32));
      sub_20B0CC7D8((uint64_t)&v28, (uint64_t)v32);
      sub_20B0CC990((uint64_t)&v26, (uint64_t)v32);
      char v15 = BYTE4(v27);
      int v16 = (BYTE4(v27) >> 3) & 3;
      BOOL v17 = v16 != 0;
      int v18 = v16 - 1;
      if (v18 != 0 && v17) {
        char v19 = -2;
      }
      else {
        char v19 = 1;
      }
      int v20 = (BYTE4(v27) >> 3) & 3;
      DWORD2(v32[0]) = 0;
      *(void *)&v32[0] = 0;
      if (!v20) {
        LOBYTE(v18) = 2;
      }
      if ((v27 & 0x400000000) != 0) {
        int v21 = 1;
      }
      else {
        int v21 = 2;
      }
      *((_DWORD *)v32 + (v19 + v20)) = v21;
      if ((v15 & 4) != 0) {
        int v22 = 2;
      }
      else {
        int v22 = 1;
      }
      *((_DWORD *)v32 + v18) = v22;
      int v23 = *((_DWORD *)&v26 + SDWORD1(v32[0]));
      int v24 = *((_DWORD *)&v26 + SDWORD2(v32[0]));
      *a4 = *((float *)&v26 + SLODWORD(v32[0]));
      *((_DWORD *)a4 + 1) = v23;
      *((_DWORD *)a4 + 2) = v24;
    }
  }
  return v13;
}

BOOL sub_20B0CBE90(uint64_t a1, float32x2_t *a2, float *a3, int a4)
{
  uint64_t v8 = 0;
  uint64_t v68 = *MEMORY[0x263EF8340];
  float v9 = *(float *)a1;
  uint64_t v10 = *(void *)(a1 + 4);
  float v63 = *(float *)a1;
  float v11 = *(float *)(a1 + 24);
  long long v12 = &v63;
  *(void *)&long long v13 = v10;
  *((void *)&v13 + 1) = *(void *)(a1 + 16);
  long long v64 = v13;
  float v65 = v11;
  float v14 = *(float *)(a1 + 40);
  uint64_t v66 = *(void *)(a1 + 32);
  float v67 = v14;
  float v15 = 0.0;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
    {
      float v17 = v12[i];
      if (v17 <= 0.0) {
        float v17 = -v17;
      }
      if (v17 > v15) {
        float v15 = v17;
      }
    }
    ++v8;
    v12 += 3;
  }
  while (v8 != 3);
  float v62 = v15;
  if (v15 == 0.0)
  {
    float v22 = *((float *)&v10 + 1);
LABEL_15:
    float v23 = (float)((float)(v9 * v9) + (float)(*(float *)&v10 * *(float *)&v10)) + (float)(v22 * v22);
    if (v23 < 2.351e-38) {
      double v24 = sub_20B0CC6D4(&v63);
    }
    else {
      *(float *)&double v24 = sqrtf(v23);
    }
    a2->i32[0] = LODWORD(v24);
    BOOL result = sub_20B0CC5C8((float *)a2, (uint64_t)&v63, a4);
    if (result)
    {
      float v25 = 1.0 / a2->f32[0];
      float v26 = v63 * v25;
      float v27 = *(float *)&v64 * v25;
      float v63 = v26;
      *(float *)&long long v64 = v27;
      float v28 = *((float *)&v64 + 2);
      float v29 = *((float *)&v64 + 1) * v25;
      float v30 = *((float *)&v64 + 3);
      float v31 = v65;
      float v32 = (float)((float)(*((float *)&v64 + 2) * v26) + (float)(*((float *)&v64 + 3) * v27)) + (float)(v65 * v29);
      *a3 = v32;
      *((float *)&v64 + 1) = v29;
      *((float *)&v64 + 2) = v28 - (float)(v32 * v26);
      *((float *)&v64 + 3) = v30 - (float)(v32 * v27);
      float v65 = v31 - (float)(v32 * v29);
      float v33 = (float)((float)(*((float *)&v64 + 2) * *((float *)&v64 + 2))
                  + (float)(*((float *)&v64 + 3) * *((float *)&v64 + 3)))
          + (float)(v65 * v65);
      if (v33 < 2.351e-38) {
        double v34 = sub_20B0CC6D4((float *)&v64 + 2);
      }
      else {
        *(float *)&double v34 = sqrtf(v33);
      }
      a2->i32[1] = LODWORD(v34);
      BOOL result = sub_20B0CC5C8((float *)a2 + 1, (uint64_t)&v64 + 8, a4);
      if (result)
      {
        float v35 = 1.0 / a2->f32[1];
        float v36 = *((float *)&v64 + 1);
        *((float *)&v64 + 2) = *((float *)&v64 + 2) * v35;
        float v37 = *((float *)&v64 + 2);
        *((float *)&v64 + 3) = *((float *)&v64 + 3) * v35;
        float v38 = *((float *)&v64 + 3);
        float v39 = v65 * v35;
        float v40 = v63;
        float v41 = *(float *)&v64;
        uint64_t v42 = v66;
        float v43 = v67;
        float v44 = (float)((float)(*(float *)&v66 * v63) + (float)(*((float *)&v66 + 1) * *(float *)&v64))
            + (float)(v67 * *((float *)&v64 + 1));
        *a3 = *a3 * v35;
        a3[1] = v44;
        float v45 = *(float *)&v42 - (float)(v44 * v40);
        float v46 = *((float *)&v42 + 1) - (float)(v44 * v41);
        float v47 = v43 - (float)(v44 * v36);
        float v48 = (float)((float)(v45 * v37) + (float)(v46 * v38)) + (float)(v47 * v39);
        a3[2] = v48;
        float v65 = v39;
        *(float *)&uint64_t v66 = v45 - (float)(v48 * v37);
        *((float *)&v66 + 1) = v46 - (float)(v48 * v38);
        float v67 = v47 - (float)(v48 * v39);
        float v49 = (float)((float)(*(float *)&v66 * *(float *)&v66) + (float)(*((float *)&v66 + 1) * *((float *)&v66 + 1)))
            + (float)(v67 * v67);
        if (v49 < 2.351e-38) {
          double v50 = sub_20B0CC6D4((float *)&v66);
        }
        else {
          *(float *)&double v50 = sqrtf(v49);
        }
        a2[1].i32[0] = LODWORD(v50);
        long long v51 = (float *)&a2[1];
        BOOL result = sub_20B0CC5C8((float *)&a2[1], (uint64_t)&v66, a4);
        if (result)
        {
          float v52 = 1.0 / *v51;
          float v53 = *(float *)&v66 * v52;
          *((float *)&v66 + 1) = *((float *)&v66 + 1) * v52;
          float v54 = *((float *)&v66 + 1);
          float v67 = v67 * v52;
          float v55 = v67;
          float v56 = a3[2];
          a3[1] = a3[1] * v52;
          a3[2] = v56 / *v51;
          *(float *)&uint64_t v66 = v53;
          if ((float)((float)((float)((float)-(float)((float)(v65 * v54) - (float)(*((float *)&v64 + 3) * v55)) * v63)
                             + (float)((float)-(float)((float)(*((float *)&v64 + 2) * v55) - (float)(v65 * v53))
                                     * *(float *)&v64))
                     + (float)(*((float *)&v64 + 1)
                             * (float)-(float)((float)(*((float *)&v64 + 3) * v53) - (float)(*((float *)&v64 + 2) * v54)))) < 0.0)
          {
            uint64_t v57 = 0;
            float32x4_t v58 = (float *)&v64 + 1;
            do
            {
              a2->f32[v57] = -a2->f32[v57];
              *((float32x2_t *)v58 - 1) = vneg_f32(*(float32x2_t *)(v58 - 2));
              *float32x4_t v58 = -*v58;
              v58 += 3;
              ++v57;
            }
            while (v57 != 3);
          }
          uint64_t v59 = 0;
          __n128 v60 = (_DWORD *)(a1 + 8);
          do
          {
            *((void *)v60 - 1) = *(void *)((char *)&v63 + v59);
            *__n128 v60 = *(_DWORD *)((char *)&v64 + v59 + 4);
            v60 += 4;
            v59 += 12;
          }
          while (v59 != 36);
          float v61 = v62;
          *a2 = vmul_n_f32(*a2, v62);
          a2[1].f32[0] = a2[1].f32[0] * v61;
          return 1;
        }
      }
    }
  }
  else
  {
    uint64_t v18 = 0;
    while (1)
    {
      char v19 = (float32x2_t *)((char *)&v63 + v18);
      BOOL result = sub_20B0CC5C8(&v62, (uint64_t)&v63 + v18, a4);
      if (!result) {
        break;
      }
      *(float *)v21.i32 = v62;
      *char v19 = vdiv_f32(*v19, (float32x2_t)vdup_lane_s32(v21, 0));
      v19[1].f32[0] = v19[1].f32[0] / *(float *)v21.i32;
      v18 += 12;
      if (v18 == 36)
      {
        float v9 = v63;
        float v22 = *((float *)&v64 + 1);
        LODWORD(v10) = v64;
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_20B0CC284(float *a1, float *a2)
{
  float v4 = *a1;
  float v3 = a1[1];
  float v5 = a1[2];
  float v6 = a1[4];
  float v7 = a1[5];
  float v8 = a1[6];
  float v9 = (float)((float)(v4 * v4) + (float)(v3 * v3)) + (float)(v5 * v5);
  if (v9 >= 2.351e-38)
  {
    float v10 = sqrtf(v9);
    goto LABEL_3;
  }
  float v33 = -v4;
  if (v4 >= 0.0) {
    float v33 = *a1;
  }
  float v34 = -v3;
  if (v3 >= 0.0) {
    float v34 = a1[1];
  }
  if (v5 >= 0.0) {
    float v35 = a1[2];
  }
  else {
    float v35 = -v5;
  }
  if (v33 >= v34) {
    float v36 = v33;
  }
  else {
    float v36 = v34;
  }
  if (v36 < v35) {
    float v36 = v35;
  }
  if (v36 != 0.0)
  {
    float v10 = sqrtf((float)((float)((float)(v34 * (float)(1.0 / v36)) * (float)(v34 * (float)(1.0 / v36)))+ (float)((float)(v33 * (float)(1.0 / v36)) * (float)(v33 * (float)(1.0 / v36))))+ (float)((float)(v35 * (float)(1.0 / v36)) * (float)(v35 * (float)(1.0 / v36))))* v36;
LABEL_3:
    if (v10 != 0.0)
    {
      float v11 = 1.0 / v10;
      float v4 = v4 * v11;
      float v3 = v3 * v11;
      float v5 = v5 * v11;
    }
  }
  float v12 = a1[8];
  float v13 = a1[9];
  float v14 = a1[10];
  float v15 = (float)((float)(v6 * v6) + (float)(v7 * v7)) + (float)(v8 * v8);
  if (v15 >= 2.351e-38)
  {
    float v16 = sqrtf(v15);
    goto LABEL_7;
  }
  float v37 = -v6;
  if (v6 >= 0.0) {
    float v37 = a1[4];
  }
  float v38 = -v7;
  if (v7 >= 0.0) {
    float v38 = a1[5];
  }
  if (v8 >= 0.0) {
    float v39 = a1[6];
  }
  else {
    float v39 = -v8;
  }
  if (v37 >= v38) {
    float v40 = v37;
  }
  else {
    float v40 = v38;
  }
  if (v40 < v39) {
    float v40 = v39;
  }
  if (v40 != 0.0)
  {
    float v16 = sqrtf((float)((float)((float)(v38 * (float)(1.0 / v40)) * (float)(v38 * (float)(1.0 / v40)))+ (float)((float)(v37 * (float)(1.0 / v40)) * (float)(v37 * (float)(1.0 / v40))))+ (float)((float)(v39 * (float)(1.0 / v40)) * (float)(v39 * (float)(1.0 / v40))))* v40;
LABEL_7:
    if (v16 != 0.0)
    {
      float v17 = 1.0 / v16;
      float v6 = v6 * v17;
      float v7 = v7 * v17;
      float v8 = v8 * v17;
    }
  }
  float v18 = (float)((float)(v12 * v12) + (float)(v13 * v13)) + (float)(v14 * v14);
  if (v18 >= 2.351e-38)
  {
    float v19 = sqrtf(v18);
    goto LABEL_11;
  }
  float v41 = -v12;
  if (v12 >= 0.0) {
    float v41 = a1[8];
  }
  float v42 = -v13;
  if (v13 >= 0.0) {
    float v42 = a1[9];
  }
  if (v14 >= 0.0) {
    float v43 = a1[10];
  }
  else {
    float v43 = -v14;
  }
  if (v41 >= v42) {
    float v44 = v41;
  }
  else {
    float v44 = v42;
  }
  if (v44 < v43) {
    float v44 = v43;
  }
  if (v44 != 0.0)
  {
    float v19 = sqrtf((float)((float)((float)(v42 * (float)(1.0 / v44)) * (float)(v42 * (float)(1.0 / v44)))+ (float)((float)(v41 * (float)(1.0 / v44)) * (float)(v41 * (float)(1.0 / v44))))+ (float)((float)(v43 * (float)(1.0 / v44)) * (float)(v43 * (float)(1.0 / v44))))* v44;
LABEL_11:
    if (v19 != 0.0)
    {
      float v20 = 1.0 / v19;
      float v12 = v12 * v20;
      float v13 = v13 * v20;
      float v14 = v14 * v20;
    }
  }
  v59.i64[0] = __PAIR64__(LODWORD(v3), LODWORD(v4));
  v59.i64[1] = LODWORD(v5);
  float v60 = v6;
  float v61 = v7;
  float v62 = v8;
  int v63 = 0;
  float v64 = v12;
  float v65 = v13;
  float v66 = v14;
  uint64_t v68 = 0;
  uint64_t v67 = 0;
  int v69 = 1065353216;
  float v21 = atan2f(v8, v14);
  *a2 = v21;
  uint64_t v57 = 0;
  uint64_t v58 = 0x3F80000000000000;
  __float2 v22 = __sincosf_stret(v21);
  float v23 = (float)(v22.__sinval * -0.0) - (float)(v22.__cosval * 0.0);
  float v24 = (float)(v22.__sinval * -0.0) + v22.__cosval;
  float v25 = (float)(v22.__sinval * -0.0) + (float)(v22.__cosval * 0.0);
  float v26 = (float)(v22.__cosval * 0.0) + v22.__sinval;
  long long v48 = xmmword_20B1E6130;
  float v27 = (float)((float)(v24 * 0.0) + v23) - (float)(v22.__sinval * 0.0);
  float v28 = v23 * 0.0;
  float v49 = v27;
  float v50 = (float)(v28 + v24) - (float)(v22.__sinval * 0.0);
  float v51 = (float)(v28 - v22.__sinval) + (float)(v24 * 0.0);
  float v52 = (float)((float)(v24 * 0.0) + v28) - (float)(v22.__sinval * 0.0);
  float v29 = (float)(v26 * 0.0) + (float)(v25 + (float)(v22.__cosval * 0.0));
  float v30 = v25 * 0.0;
  float v53 = v29;
  float v54 = v30 + (float)(v26 + (float)(v22.__cosval * 0.0));
  float v55 = (float)(v30 + v22.__cosval) + (float)(v26 * 0.0);
  float v56 = (float)((float)(v26 * 0.0) + v30) + (float)(v22.__cosval * 0.0);
  sub_20B0CC74C((uint64_t)&v48, &v59, &v45);
  float v32 = v46;
  float v31 = v47;
  a2[1] = atan2f(-v45.f32[2], sqrtf((float)(v45.f32[0] * v45.f32[0]) + (float)(v45.f32[1] * v45.f32[1])));
  a2[2] = atan2f(-v32, v31);
}