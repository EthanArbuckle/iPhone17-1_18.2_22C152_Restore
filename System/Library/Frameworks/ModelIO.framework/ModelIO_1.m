BOOL sub_20B0CC5C8(float *a1, uint64_t a2, int a3)
{
  unint64_t v3;
  BOOL v4;
  float v5;
  float v6;
  std::logic_error *exception;

  v3 = 0;
  v4 = 0;
  v5 = *a1;
  if (*a1 <= 0.0) {
    v5 = -*a1;
  }
  while (1)
  {
    if (v5 < 1.0)
    {
      v6 = *(float *)(a2 + 4 * v3);
      if (v6 <= 0.0) {
        v6 = -v6;
      }
      if (v6 >= (float)(v5 * 3.4028e38)) {
        break;
      }
    }
    v4 = v3++ > 1;
    if (v3 == 3) {
      return 1;
    }
  }
  if (a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B0CC6A0(exception, "Cannot remove zero scaling from matrix.");
    __cxa_throw(exception, (struct type_info *)off_263FFCB98, MEMORY[0x263F8C058]);
  }
  return v4;
}

void sub_20B0CC68C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_20B0CC6A0(std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C380] + 16);
  return result;
}

double sub_20B0CC6D4(float *a1)
{
  float v1 = *a1;
  float v2 = a1[1];
  if (*a1 < 0.0) {
    float v1 = -*a1;
  }
  if (v2 < 0.0) {
    float v2 = -v2;
  }
  float v3 = a1[2];
  float v4 = -v3;
  if (v3 >= 0.0) {
    float v4 = a1[2];
  }
  if (v1 >= v2) {
    float v5 = v1;
  }
  else {
    float v5 = v2;
  }
  if (v5 < v4) {
    float v5 = v4;
  }
  if (v5 == 0.0) {
    return 0.0;
  }
  *(float *)&double result = sqrtf((float)((float)((float)(v2 * (float)(1.0 / v5)) * (float)(v2 * (float)(1.0 / v5)))+ (float)((float)(v1 * (float)(1.0 / v5)) * (float)(v1 * (float)(1.0 / v5))))+ (float)((float)(v4 * (float)(1.0 / v5)) * (float)(v4 * (float)(1.0 / v5))))* v5;
  return result;
}

float32x4_t sub_20B0CC74C@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 36);
  long long v6 = *(_OWORD *)(a1 + 40);
  long long v7 = *(_OWORD *)(a1 + 44);
  uint64_t v8 = *(void *)(a1 + 52);
  uint64_t v9 = *(void *)(a1 + 56);
  float32x4_t v10 = *a2;
  float32x4_t v11 = a2[1];
  float32x4_t v12 = a2[2];
  float32x4_t v13 = a2[3];
  float v14 = *(float *)(a1 + 60);
  float32x4_t v15 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)(a1 + 16))), v11, COERCE_FLOAT(*(_OWORD *)(a1 + 20))), v12, COERCE_FLOAT(*(_OWORD *)(a1 + 24))), v13, COERCE_FLOAT(*(_OWORD *)(a1 + 28)));
  *a3 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a2, COERCE_FLOAT(*(_OWORD *)a1)), v11, COERCE_FLOAT(*(_OWORD *)(a1 + 4))), v12, COERCE_FLOAT(*(_OWORD *)(a1 + 8))), v13, COERCE_FLOAT(*(_OWORD *)(a1 + 12)));
  a3[1] = v15;
  float32x4_t result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10, *(float *)&v3), v11, *(float *)&v5), v12, *(float *)&v6), v13, *(float *)&v7);
  a3[2] = result;
  a3[3] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v10, *(float *)&v4), v11, *(float *)&v8), v12, *(float *)&v9), v13, v14);
  return result;
}

void sub_20B0CC7D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  unsigned int v4 = (v3 >> 3) & 3;
  int v5 = v4 - 1;
  if (v4) {
    int v6 = v4 - 1;
  }
  else {
    int v6 = 2;
  }
  if (v4 < 2) {
    int v7 = 1;
  }
  else {
    int v7 = -2;
  }
  unsigned int v8 = v7 + v4;
  if (!v4) {
    int v5 = 2;
  }
  if ((v3 & 4) != 0) {
    int v9 = v8;
  }
  else {
    int v9 = v6;
  }
  if ((v3 & 4) != 0) {
    int v10 = v5;
  }
  else {
    int v10 = v8;
  }
  float v11 = *(float *)(a1 + 8 * ((v3 & 1) == 0));
  if ((v3 & 4) != 0)
  {
    float v12 = *(float *)(a1 + 4);
  }
  else
  {
    float v11 = -v11;
    float v12 = -*(float *)(a1 + 4);
  }
  if ((v3 & 4) != 0) {
    float v13 = *(float *)(a1 + 8 * (v3 & 1));
  }
  else {
    float v13 = -*(float *)(a1 + 8 * (v3 & 1));
  }
  __float2 v14 = __sincosf_stret(v11);
  __float2 v15 = __sincosf_stret(v12);
  __float2 v16 = __sincosf_stret(v13);
  float v17 = v14.__cosval * v16.__cosval;
  float v18 = v14.__cosval * v16.__sinval;
  float v19 = v14.__sinval * v16.__cosval;
  float v20 = v14.__sinval * v16.__sinval;
  *(_OWORD *)a2 = xmmword_20B1E6130;
  *(_OWORD *)(a2 + 16) = xmmword_20B1E6130;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v21 = a2 + 12 * v4;
  if ((v3 & 2) != 0)
  {
    *(float *)(v21 + 4 * v4) = v15.__cosval;
    uint64_t v25 = a2 + 12 * v9;
    *(float *)(v25 + 4 * v4) = v14.__sinval * v15.__sinval;
    uint64_t v23 = a2 + 12 * v10;
    *(float *)(v23 + 4 * v4) = v14.__cosval * v15.__sinval;
    *(float *)(v21 + 4 * v9) = v15.__sinval * v16.__sinval;
    *(float *)(v25 + 4 * v9) = v17 - (float)(v20 * v15.__cosval);
    *(float *)(v23 + 4 * v9) = -(float)(v19 + (float)(v18 * v15.__cosval));
    *(float *)(v21 + 4 * v10) = -(float)(v16.__cosval * v15.__sinval);
    *(float *)(v25 + 4 * v10) = v18 + (float)(v19 * v15.__cosval);
    float v24 = -(float)(v20 - (float)(v17 * v15.__cosval));
  }
  else
  {
    *(float *)(v21 + 4 * v4) = v15.__cosval * v16.__cosval;
    uint64_t v22 = a2 + 12 * v9;
    *(float *)(v22 + 4 * v4) = -(float)(v18 - (float)(v19 * v15.__sinval));
    uint64_t v23 = a2 + 12 * v10;
    *(float *)(v23 + 4 * v4) = v20 + (float)(v17 * v15.__sinval);
    *(float *)(v21 + 4 * v9) = v15.__cosval * v16.__sinval;
    *(float *)(v22 + 4 * v9) = v17 + (float)(v20 * v15.__sinval);
    *(float *)(v23 + 4 * v9) = -(float)(v19 - (float)(v18 * v15.__sinval));
    *(float *)(v21 + 4 * v10) = -v15.__sinval;
    *(float *)(v22 + 4 * v10) = v14.__sinval * v15.__cosval;
    float v24 = v14.__cosval * v15.__cosval;
  }
  *(float *)(v23 + 4 * v10) = v24;
}

void sub_20B0CC990(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v5 = (v4 >> 3) & 3;
  int v6 = v5 - 1;
  if (v5) {
    int v7 = v5 - 1;
  }
  else {
    int v7 = 2;
  }
  if (v5 < 2) {
    int v8 = 1;
  }
  else {
    int v8 = -2;
  }
  int v9 = v8 + v5;
  if (!v5) {
    int v6 = 2;
  }
  if ((v4 & 4) != 0) {
    int v10 = v9;
  }
  else {
    int v10 = v7;
  }
  if ((v4 & 4) != 0) {
    int v11 = v6;
  }
  else {
    int v11 = v9;
  }
  uint64_t v12 = v10;
  uint64_t v13 = a2 + 12 * v10;
  if ((v4 & 2) != 0)
  {
    float v36 = atan2f(*(float *)(v13 + 4 * v5), *(float *)(a2 + 12 * v11 + 4 * v5));
    *(float *)a1 = v36;
    if ((v4 & 4) != 0) {
      float v36 = -v36;
    }
    float v77 = 0.0;
    uint64_t v76 = 0;
    *((float *)&v76 + v5) = v36;
    *(void *)&long long v75 = 0;
    *((void *)&v75 + 1) = 0x3F80000000000000;
    float v37 = *((float *)&v76 + 1);
    float v38 = *(float *)&v76;
    __float2 v39 = __sincosf_stret(v77);
    __float2 v40 = __sincosf_stret(v37);
    __float2 v41 = __sincosf_stret(v38);
    float v42 = (float)((float)(v40.__sinval * v39.__sinval) * v41.__sinval) + (float)(v41.__cosval * v39.__cosval);
    float v43 = (float)((float)(v40.__sinval * v39.__cosval) * v41.__cosval) + (float)(v41.__sinval * v39.__sinval);
    float v44 = -(float)((float)(v41.__sinval * v39.__cosval) - (float)((float)(v40.__sinval * v39.__sinval) * v41.__cosval));
    float v45 = (float)(v40.__cosval * v39.__sinval) * 0.0;
    float v46 = (float)(v40.__cosval * v39.__cosval) * 0.0;
    v72.f32[0] = (float)(v45 + (float)(v40.__cosval * v39.__cosval)) - (float)(v40.__sinval * 0.0);
    v72.f32[1] = (float)(v46 + (float)(v40.__cosval * v39.__sinval)) - (float)(v40.__sinval * 0.0);
    v72.f32[2] = (float)(v46 - v40.__sinval) + v45;
    v72.f32[3] = (float)(v45 + v46) - (float)(v40.__sinval * 0.0);
    float v47 = (float)-(float)((float)(v41.__cosval * v39.__sinval)
                        - (float)((float)(v40.__sinval * v39.__cosval) * v41.__sinval))
        * 0.0;
    *(float *)&long long v73 = (float)(v42 * 0.0)
                   + (float)((float)((float)(v41.__sinval * v40.__cosval) * 0.0)
                           - (float)((float)(v41.__cosval * v39.__sinval)
                                   - (float)((float)(v40.__sinval * v39.__cosval) * v41.__sinval)));
    *((float *)&v73 + 1) = (float)(v47 + v42) + (float)((float)(v41.__sinval * v40.__cosval) * 0.0);
    *((float *)&v73 + 2) = (float)(v47 + (float)(v41.__sinval * v40.__cosval)) + (float)(v42 * 0.0);
    *((float *)&v73 + 3) = (float)(v42 * 0.0) + (float)(v47 + (float)((float)(v41.__sinval * v40.__cosval) * 0.0));
    float v48 = (float)((float)(v44 * 0.0) + v43) + (float)((float)(v41.__cosval * v40.__cosval) * 0.0);
    float v49 = v43 * 0.0;
    *(float *)&long long v74 = v48;
    *((float *)&v74 + 1) = v49
                         + (float)((float)((float)(v41.__cosval * v40.__cosval) * 0.0)
                                 - (float)((float)(v41.__sinval * v39.__cosval)
                                         - (float)((float)(v40.__sinval * v39.__sinval) * v41.__cosval)));
    *((float *)&v74 + 2) = v49 + (float)((float)(v41.__cosval * v40.__cosval) + (float)(v44 * 0.0));
    *((float *)&v74 + 3) = (float)((float)(v44 * 0.0) + (float)((float)(v41.__cosval * v40.__cosval) * 0.0)) + v49;
    unsigned int v50 = *(_DWORD *)(a2 + 8);
    int v51 = *(_DWORD *)(a2 + 20);
    int v52 = *(_DWORD *)(a2 + 32);
    v59.i64[0] = *(void *)a2;
    v59.i64[1] = v50;
    uint64_t v60 = *(void *)(a2 + 12);
    int v61 = v51;
    int v62 = 0;
    uint64_t v63 = *(void *)(a2 + 24);
    int v64 = v52;
    uint64_t v66 = 0;
    uint64_t v65 = 0;
    int v67 = 1065353216;
    sub_20B0CC74C((uint64_t)&v72, &v59, &v68);
    float32x4_t v72 = v68;
    long long v73 = v69;
    long long v74 = v70;
    long long v75 = v71;
    unint64_t v53 = (unint64_t)(&v72 + v12);
    float v54 = *(float *)(v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    float v55 = *(float *)((unint64_t)(&v72 + v11) | (4 * v5));
    float v32 = atan2f(sqrtf((float)(v54 * v54) + (float)(v55 * v55)), *(float *)((unint64_t)(&v72 + v5) & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3))));
    *(float *)(a1 + 4) = v32;
    float v34 = *(float *)(v53 + 4 * v11);
    float v35 = *(float *)(v53 + 4 * v12);
  }
  else
  {
    float v14 = atan2f(*(float *)(v13 + 4 * v11), *(float *)(a2 + 12 * v11 + 4 * v11));
    *(float *)a1 = v14;
    if ((v4 & 4) != 0) {
      float v14 = -v14;
    }
    float v77 = 0.0;
    uint64_t v76 = 0;
    *((float *)&v76 + v5) = v14;
    *(void *)&long long v75 = 0;
    *((void *)&v75 + 1) = 0x3F80000000000000;
    float v15 = *((float *)&v76 + 1);
    float v16 = *(float *)&v76;
    __float2 v17 = __sincosf_stret(v77);
    __float2 v18 = __sincosf_stret(v15);
    __float2 v19 = __sincosf_stret(v16);
    float v20 = (float)((float)(v18.__sinval * v17.__sinval) * v19.__sinval) + (float)(v19.__cosval * v17.__cosval);
    float v21 = (float)((float)(v18.__sinval * v17.__cosval) * v19.__cosval) + (float)(v19.__sinval * v17.__sinval);
    float v22 = -(float)((float)(v19.__sinval * v17.__cosval) - (float)((float)(v18.__sinval * v17.__sinval) * v19.__cosval));
    float v23 = (float)(v18.__cosval * v17.__sinval) * 0.0;
    float v24 = (float)(v18.__cosval * v17.__cosval) * 0.0;
    v72.f32[0] = (float)(v23 + (float)(v18.__cosval * v17.__cosval)) - (float)(v18.__sinval * 0.0);
    v72.f32[1] = (float)(v24 + (float)(v18.__cosval * v17.__sinval)) - (float)(v18.__sinval * 0.0);
    v72.f32[2] = (float)(v24 - v18.__sinval) + v23;
    v72.f32[3] = (float)(v23 + v24) - (float)(v18.__sinval * 0.0);
    float v25 = (float)-(float)((float)(v19.__cosval * v17.__sinval)
                        - (float)((float)(v18.__sinval * v17.__cosval) * v19.__sinval))
        * 0.0;
    *(float *)&long long v73 = (float)(v20 * 0.0)
                   + (float)((float)((float)(v19.__sinval * v18.__cosval) * 0.0)
                           - (float)((float)(v19.__cosval * v17.__sinval)
                                   - (float)((float)(v18.__sinval * v17.__cosval) * v19.__sinval)));
    *((float *)&v73 + 1) = (float)(v25 + v20) + (float)((float)(v19.__sinval * v18.__cosval) * 0.0);
    *((float *)&v73 + 2) = (float)(v25 + (float)(v19.__sinval * v18.__cosval)) + (float)(v20 * 0.0);
    *((float *)&v73 + 3) = (float)(v20 * 0.0) + (float)(v25 + (float)((float)(v19.__sinval * v18.__cosval) * 0.0));
    float v26 = (float)((float)(v22 * 0.0) + v21) + (float)((float)(v19.__cosval * v18.__cosval) * 0.0);
    float v27 = v21 * 0.0;
    *(float *)&long long v74 = v26;
    *((float *)&v74 + 1) = v27
                         + (float)((float)((float)(v19.__cosval * v18.__cosval) * 0.0)
                                 - (float)((float)(v19.__sinval * v17.__cosval)
                                         - (float)((float)(v18.__sinval * v17.__sinval) * v19.__cosval)));
    *((float *)&v74 + 2) = v27 + (float)((float)(v19.__cosval * v18.__cosval) + (float)(v22 * 0.0));
    *((float *)&v74 + 3) = (float)((float)(v22 * 0.0) + (float)((float)(v19.__cosval * v18.__cosval) * 0.0)) + v27;
    unsigned int v28 = *(_DWORD *)(a2 + 8);
    int v29 = *(_DWORD *)(a2 + 20);
    int v30 = *(_DWORD *)(a2 + 32);
    v59.i64[0] = *(void *)a2;
    v59.i64[1] = v28;
    uint64_t v60 = *(void *)(a2 + 12);
    int v61 = v29;
    int v62 = 0;
    uint64_t v63 = *(void *)(a2 + 24);
    int v64 = v30;
    uint64_t v66 = 0;
    uint64_t v65 = 0;
    int v67 = 1065353216;
    sub_20B0CC74C((uint64_t)&v72, &v59, &v68);
    float32x4_t v72 = v68;
    long long v73 = v69;
    long long v74 = v70;
    long long v75 = v71;
    unint64_t v31 = (unint64_t)(&v72 + v5);
    float v32 = atan2f(-*(float *)(v31 + 4 * v11), sqrtf((float)(*(float *)(v31 & 0xFFFFFFFFFFFFFFF3 | (4 * ((v4 >> 3) & 3)))* *(float *)(v31 & 0xFFFFFFFFFFFFFFF3 | (4 * ((v4 >> 3) & 3))))+ (float)(*(float *)(v31 + 4 * v12) * *(float *)(v31 + 4 * v12))));
    *(float *)(a1 + 4) = v32;
    unint64_t v33 = (unint64_t)(&v72 + v12);
    float v34 = -*(float *)(v33 | (4 * v5));
    float v35 = *(float *)(v33 + 4 * v12);
  }
  float v56 = atan2f(v34, v35);
  *(float *)(a1 + 8) = v56;
  char v57 = *(unsigned char *)(a1 + 12);
  if ((v57 & 4) == 0)
  {
    *(float *)a1 = -*(float *)a1;
    *(float *)(a1 + 4) = -v32;
    float v56 = -v56;
    *(float *)(a1 + 8) = v56;
  }
  if ((v57 & 1) == 0)
  {
    float v58 = *(float *)a1;
    *(float *)a1 = v56;
    *(float *)(a1 + 8) = v58;
  }
}

uint64_t *sub_20B0CCE50(uint64_t **a1, double *a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    double v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        double v9 = *((double *)v5 + 4);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v5;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_20B05FAEC(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

id sub_20B0CCF0C(void *a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v191 = *MEMORY[0x263EF8340];
  id v6 = a1;
  id v166 = a4;
  id v170 = v6;
  double v9 = objc_msgSend_submeshes(v6, v7, v8);
  int v11 = objc_msgSend_objectAtIndex_(v9, v10, a2);

  v171 = v11;
  unint64_t v14 = objc_msgSend_geometryType(v11, v12, v13);
  unint64_t v17 = v14;
  if (v14 > 5 || ((1 << v14) & 0x34) == 0)
  {
    float v23 = (void *)MEMORY[0x263EFF940];
    float v24 = (objc_class *)objc_opt_class();
    float v20 = NSStringFromClass(v24);
    float v21 = NSStringFromSelector(sel_initMeshBySubdividingMesh_submeshIndex_subdivisionLevels_allocator_);
    objc_msgSend_raise_format_(v23, v25, @"ModelIOException", @"[%@ %@]: Can only subdivide submesh in mesh using MDLGeometryTypeTriangles, MDLGeometryTypeQuads, or MDLGeometryTypeVariableTopology", v20, v21);
LABEL_7:

    goto LABEL_8;
  }
  if (v14 == 5)
  {
    v172 = objc_msgSend_topology(v11, v15, v16);
    if (v172) {
      goto LABEL_9;
    }
    __float2 v18 = (void *)MEMORY[0x263EFF940];
    __float2 v19 = (objc_class *)objc_opt_class();
    float v20 = NSStringFromClass(v19);
    float v21 = NSStringFromSelector(sel_initMeshBySubdividingMesh_submeshIndex_subdivisionLevels_allocator_);
    objc_msgSend_raise_format_(v18, v22, @"ModelIOException", @"[%@ %@]: If submesh object's geometryType is MDLGeometryTypeVariableTopology, it must have a topology", v20, v21);
    goto LABEL_7;
  }
LABEL_8:
  v172 = 0;
LABEL_9:
  float v26 = objc_msgSend_vertexDescriptor(v6, v15, v16);
  unsigned int v28 = objc_msgSend_attributeNamed_(v26, v27, @"position");

  v169 = v28;
  if (objc_msgSend_format(v28, v29, v30) != 786435) {
    goto LABEL_97;
  }
  context = (void *)MEMORY[0x210532AA0]();
  v188 = 0;
  v189 = 0;
  uint64_t v190 = 0;
  if (v17 != 5)
  {
    if (v17 == 4) {
      int v71 = 4;
    }
    else {
      int v71 = 3;
    }
    uint64_t v72 = ((int)objc_msgSend_indexCount(v171, v31, v32) / v71);
    sub_20B0A2BE0((uint64_t)&v188, (int)v72);
    if ((int)v72 >= 1)
    {
      long long v75 = (int *)v188;
      do
      {
        *v75++ = v71;
        --v72;
      }
      while (v72);
    }
    int v65 = 0;
    uint64_t v177 = 0;
    uint64_t v68 = 0;
    v164 = 0;
    v165 = 0;
    int v175 = 0;
    long long v176 = 0uLL;
    v167 = 0;
    v168 = 0;
    int v76 = 0;
    uint64_t v77 = 0;
    v162 = 0;
    goto LABEL_47;
  }
  unint64_t v33 = objc_msgSend_faceTopology(v172, v31, v32);
  float v36 = objc_msgSend_map(v33, v34, v35);

  __float2 v39 = (unsigned __int8 *)objc_msgSend_bytes(v36, v37, v38);
  int v42 = objc_msgSend_faceCount(v172, v40, v41);
  sub_20B0A2BE0((uint64_t)&v188, v42);
  if (v42 >= 1)
  {
    float v45 = v188;
    uint64_t v46 = v42;
    do
    {
      int v47 = *v39++;
      *v45++ = v47;
      --v46;
    }
    while (v46);
  }
  unsigned int v50 = objc_msgSend_vertexCreaseIndices(v172, v43, v44);
  if (!v50) {
    goto LABEL_29;
  }
  unint64_t v53 = objc_msgSend_vertexCreases(v172, v48, v49);
  if (!v53)
  {

    goto LABEL_29;
  }
  BOOL v54 = objc_msgSend_vertexCreaseCount(v172, v51, v52) == 0;

  if (v54)
  {
LABEL_29:
    int v65 = 0;
    uint64_t v177 = 0;
    uint64_t v68 = 0;
    v164 = 0;
    v165 = 0;
    goto LABEL_30;
  }
  float v55 = objc_msgSend_vertexCreases(v172, v48, v49);
  v164 = objc_msgSend_map(v55, v56, v57);

  uint64_t v60 = objc_msgSend_vertexCreaseIndices(v172, v58, v59);
  v165 = objc_msgSend_map(v60, v61, v62);

  if (objc_msgSend_bytes(v164, v63, v64) && objc_msgSend_bytes(v165, v48, v49))
  {
    int v65 = objc_msgSend_vertexCreaseCount(v172, v48, v49);
    uint64_t v68 = objc_msgSend_bytes(v164, v66, v67);
    uint64_t v177 = objc_msgSend_bytes(v165, v69, v70);
  }
  else
  {
    int v65 = 0;
    uint64_t v177 = 0;
    uint64_t v68 = 0;
  }
LABEL_30:
  v80 = objc_msgSend_edgeCreaseIndices(v172, v48, v49);
  if (v80)
  {
    v83 = objc_msgSend_edgeCreases(v172, v78, v79);
    if (v83)
    {
      BOOL v84 = objc_msgSend_edgeCreaseCount(v172, v81, v82) == 0;

      if (!v84)
      {
        v85 = objc_msgSend_edgeCreaseIndices(v172, v78, v79);
        v167 = objc_msgSend_map(v85, v86, v87);

        v90 = objc_msgSend_edgeCreases(v172, v88, v89);
        v168 = objc_msgSend_map(v90, v91, v92);

        if (objc_msgSend_bytes(v167, v93, v94) && objc_msgSend_bytes(v168, v95, v96))
        {
          objc_msgSend_edgeCreaseCount(v172, v95, v96);
          *((void *)&v176 + 1) = objc_msgSend_bytes(v168, v97, v98);
          *(void *)&long long v176 = objc_msgSend_bytes(v167, v99, v100);
        }
        else
        {
          long long v176 = 0uLL;
        }
        int v175 = objc_msgSend_edgeCreaseCount(v172, v95, v96);
        goto LABEL_41;
      }
    }
    else
    {
    }
  }
  int v175 = 0;
  long long v176 = 0uLL;
  v167 = 0;
  v168 = 0;
LABEL_41:
  v103 = objc_msgSend_holes(v172, v78, v79);
  if (!v103 || (BOOL v104 = objc_msgSend_holeCount(v172, v101, v102) == 0, v103, v104))
  {
    int v76 = 0;
    uint64_t v77 = 0;
    v162 = 0;
  }
  else
  {
    v107 = objc_msgSend_holes(v172, v105, v106);
    v162 = objc_msgSend_map(v107, v108, v109);

    if (objc_msgSend_bytes(v162, v110, v111))
    {
      int v76 = objc_msgSend_holeCount(v172, v112, v113);
      uint64_t v77 = objc_msgSend_bytes(v162, v114, v115);
    }
    else
    {
      int v76 = 0;
      uint64_t v77 = 0;
    }
  }

LABEL_47:
  v116 = objc_msgSend_indexBuffer(v171, v73, v74);
  v163 = objc_msgSend_map(v116, v117, v118);

  __p = 0;
  v186 = 0;
  v187 = 0;
  if (objc_msgSend_indexType(v171, v119, v120) == 32)
  {
    uint64_t v123 = objc_msgSend_bytes(v163, v121, v122);
    goto LABEL_91;
  }
  unint64_t v124 = objc_msgSend_indexCount(v171, v121, v122);
  sub_20B07D7B8(&__p, v124);
  uint64_t v127 = objc_msgSend_indexType(v171, v125, v126);
  if (v127 == 8)
  {
    uint64_t v173 = v68;
    int v174 = v65;
    uint64_t v144 = objc_msgSend_bytes(v163, v128, v129);
    if (v124)
    {
      uint64_t v145 = v144;
      uint64_t v146 = 0;
      v147 = v186;
      do
      {
        int v148 = *(unsigned __int8 *)(v145 + v146);
        if (v147 >= v187)
        {
          v150 = (char *)__p;
          uint64_t v151 = (v147 - (unsigned char *)__p) >> 2;
          unint64_t v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62) {
            sub_20B05D0BC();
          }
          uint64_t v153 = v187 - (unsigned char *)__p;
          if ((v187 - (unsigned char *)__p) >> 1 > v152) {
            unint64_t v152 = v153 >> 1;
          }
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v154 = v152;
          }
          if (v154)
          {
            v155 = (char *)sub_20B05D1AC((uint64_t)&v187, v154);
            v150 = (char *)__p;
            v147 = v186;
          }
          else
          {
            v155 = 0;
          }
          v156 = &v155[4 * v151];
          *(_DWORD *)v156 = v148;
          v149 = v156 + 4;
          while (v147 != v150)
          {
            int v157 = *((_DWORD *)v147 - 1);
            v147 -= 4;
            *((_DWORD *)v156 - 1) = v157;
            v156 -= 4;
          }
          __p = v156;
          v186 = v149;
          v187 = &v155[4 * v154];
          if (v150) {
            operator delete(v150);
          }
        }
        else
        {
          *(_DWORD *)v147 = v148;
          v149 = v147 + 4;
        }
        v186 = v149;
        ++v146;
        v147 = v149;
      }
      while (v146 != v124);
    }
    goto LABEL_90;
  }
  if (v127 == 16)
  {
    uint64_t v173 = v68;
    int v174 = v65;
    uint64_t v130 = objc_msgSend_bytes(v163, v128, v129);
    if (v124)
    {
      uint64_t v131 = v130;
      uint64_t v132 = 0;
      v133 = v186;
      do
      {
        int v134 = *(unsigned __int16 *)(v131 + 2 * v132);
        if (v133 >= v187)
        {
          v136 = (char *)__p;
          uint64_t v137 = (v133 - (unsigned char *)__p) >> 2;
          unint64_t v138 = v137 + 1;
          if ((unint64_t)(v137 + 1) >> 62) {
            sub_20B05D0BC();
          }
          uint64_t v139 = v187 - (unsigned char *)__p;
          if ((v187 - (unsigned char *)__p) >> 1 > v138) {
            unint64_t v138 = v139 >> 1;
          }
          if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v140 = v138;
          }
          if (v140)
          {
            v141 = (char *)sub_20B05D1AC((uint64_t)&v187, v140);
            v136 = (char *)__p;
            v133 = v186;
          }
          else
          {
            v141 = 0;
          }
          v142 = &v141[4 * v137];
          *(_DWORD *)v142 = v134;
          v135 = v142 + 4;
          while (v133 != v136)
          {
            int v143 = *((_DWORD *)v133 - 1);
            v133 -= 4;
            *((_DWORD *)v142 - 1) = v143;
            v142 -= 4;
          }
          __p = v142;
          v186 = v135;
          v187 = &v141[4 * v140];
          if (v136) {
            operator delete(v136);
          }
        }
        else
        {
          *(_DWORD *)v133 = v134;
          v135 = v133 + 4;
        }
        v186 = v135;
        ++v132;
        v133 = v135;
      }
      while (v132 != v124);
    }
LABEL_90:
    uint64_t v123 = (uint64_t)__p;
    id v6 = v170;
    uint64_t v68 = v173;
    int v65 = v174;
LABEL_91:
    uint64_t v184 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    OpenSubdiv::__aapl__::Far::TopologyDescriptor::TopologyDescriptor((OpenSubdiv::__aapl__::Far::TopologyDescriptor *)&v178);
    uint64_t v184 = 0;
    long long v182 = 0u;
    long long v183 = 0u;
    long long v180 = 0u;
    long long v181 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    LODWORD(v178) = objc_msgSend_vertexCount(v6, v158, v159);
    DWORD1(v178) = (unint64_t)(v189 - (unsigned char *)v188) >> 2;
    *((void *)&v178 + 1) = v188;
    *(void *)&long long v179 = v123;
    DWORD2(v179) = v175;
    long long v180 = v176;
    LODWORD(v181) = v65;
    *((void *)&v181 + 1) = v177;
    *(void *)&long long v182 = v68;
    DWORD2(v182) = v76;
    *(void *)&long long v183 = v77;
    sub_20B0CFABC();
  }
  if (__p)
  {
    v186 = (char *)__p;
    operator delete(__p);
  }

  if (v188)
  {
    v189 = v188;
    operator delete(v188);
  }
LABEL_97:

  return 0;
}

void sub_20B0CF594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B0CFABC()
{
}

void sub_20B0CFB5C(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x10A0C40CA00941DLL);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0CFB80(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *a1)
{
  if (!OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::resizeComponentTopology()
    || !OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(a1, v2)
    || !OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTopology()
    || !OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment()
    || !OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTags()
    || !OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(a1, v3)
    || !OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignFaceVaryingTopology())
  {
    return 0;
  }

  return MEMORY[0x270FA2FC0](a1);
}

int *sub_20B0CFC50(int *result, int *a2, uint64_t a3, int a4, int a5, double a6, double a7)
{
  v44[1] = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = a2[2];
    if (*(float *)(*(void *)(*(void *)a2 + 216) + 4 * v10) <= 0.0) {
      goto LABEL_13;
    }
LABEL_5:
    if (a5)
    {
      if (a5 != 4)
      {
        uint64_t v11 = *(void *)a2;
        LODWORD(v12) = a2[2];
        unsigned int v13 = *((unsigned __int8 *)result + 3);
        goto LABEL_8;
      }
    }
    else if (a4 != 4)
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = a2[2];
      float v26 = *(float *)(*(void *)(*(void *)a2 + 216) + 4 * v12);
      if (v26 < 1.0)
      {
        unsigned int v13 = HIBYTE(*result);
        if ((*result & 0xFF0000) == 0 || (float)(v26 + -1.0) <= 0.0)
        {
LABEL_8:
          uint64_t v14 = *(unsigned int *)(*(void *)(v11 + 144) + 8 * v12);
          *(void *)(a3 + 24) = 2;
          *(_DWORD *)(a3 + 32) = v14;
          *(unsigned char *)(a3 + 36) = 1;
          if (v13 == 1)
          {
            if (v14 == 2)
            {
              v44[0] = 0;
              float32x4_t result = sub_20B0CFFC8(a2, v44);
              if (LODWORD(v44[0]) == 3 || HIDWORD(v44[0]) == 3)
              {
                float v39 = 0.47;
                if (HIDWORD(v44[0]) == 3) {
                  float v40 = 0.47;
                }
                else {
                  float v40 = 0.25;
                }
                if (LODWORD(v44[0]) != 3) {
                  float v39 = 0.25;
                }
                float v32 = (float)(v40 + v39) * 0.5;
                float v15 = *(float32x2_t **)a3;
                v15->f32[0] = 0.5 - v32;
                v15->f32[1] = 0.5 - v32;
                unint64_t v31 = *(float **)(a3 + 16);
                *unint64_t v31 = v32;
                goto LABEL_50;
              }
              float v15 = *(float32x2_t **)a3;
              __asm { FMOV            V0.2S, #0.25 }
              **(void **)a3 = _D0;
LABEL_32:
              unint64_t v31 = *(float **)(a3 + 16);
              *unint64_t v31 = 0.25;
              float v32 = 0.25;
LABEL_50:
              v31[1] = v32;
              uint64_t v11 = *(void *)a2;
              LODWORD(v14) = *(_DWORD *)(a3 + 32);
LABEL_51:
              LODWORD(a7) = *(_DWORD *)(*(void *)(v11 + 216) + 4 * a2[2]);
              float v41 = 1.0 - *(float *)&a7;
              *(float *)&a7 = *(float *)&a7 * 0.5;
              *float v15 = vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0), *v15, v41);
              if ((int)v14 >= 1)
              {
                int v42 = *(float **)(a3 + 16);
                uint64_t v43 = v14;
                do
                {
                  *int v42 = *v42 * v41;
                  ++v42;
                  --v43;
                }
                while (v43);
              }
              return result;
            }
            float v15 = *(float32x2_t **)a3;
            __asm { FMOV            V0.2S, #0.25 }
            **(void **)a3 = _D0;
          }
          else
          {
            float v15 = *(float32x2_t **)a3;
            __asm { FMOV            V0.2S, #0.25 }
            **(void **)a3 = _D0;
            if (v14 == 2) {
              goto LABEL_32;
            }
          }
          if ((int)v14 >= 1)
          {
            float v37 = *(float **)(a3 + 16);
            uint64_t v38 = v14;
            do
            {
              *v37++ = 0.5 / (float)(int)v14;
              --v38;
            }
            while (v38);
          }
          goto LABEL_51;
        }
      }
    }
    *(_DWORD *)(a3 + 24) = 2;
    *(void *)(a3 + 28) = 0;
    *(unsigned char *)(a3 + 36) = 0;
    float v24 = *(float **)a3;
    **(_DWORD **)a3 = 1056964608;
    float v25 = 0.5;
    goto LABEL_25;
  }
  if (a4 != 1) {
    goto LABEL_5;
  }
  uint64_t v9 = *(void *)a2;
  LODWORD(v10) = a2[2];
LABEL_13:
  uint64_t v21 = *(unsigned int *)(*(void *)(v9 + 144) + 8 * v10);
  *(void *)(a3 + 24) = 2;
  *(_DWORD *)(a3 + 32) = v21;
  *(unsigned char *)(a3 + 36) = 1;
  if (*((unsigned char *)result + 3) == 1)
  {
    if (v21 == 2)
    {
      v44[0] = 0;
      float32x4_t result = sub_20B0CFFC8(a2, v44);
      if (LODWORD(v44[0]) == 3 || HIDWORD(v44[0]) == 3)
      {
        float v33 = 0.47;
        if (HIDWORD(v44[0]) == 3) {
          float v34 = 0.47;
        }
        else {
          float v34 = 0.25;
        }
        if (LODWORD(v44[0]) != 3) {
          float v33 = 0.25;
        }
        float v25 = (float)(v34 + v33) * 0.5;
        uint64_t v35 = *(float **)a3;
        *uint64_t v35 = 0.5 - v25;
        v35[1] = 0.5 - v25;
        float v24 = *(float **)(a3 + 16);
        *float v24 = v25;
        goto LABEL_25;
      }
      __asm { FMOV            V0.2S, #0.25 }
      **(void **)a3 = _D0;
      goto LABEL_19;
    }
    __asm { FMOV            V0.2S, #0.25 }
    **(void **)a3 = _D0;
  }
  else
  {
    __asm { FMOV            V0.2S, #0.25 }
    **(void **)a3 = _D0;
    if (v21 == 2)
    {
LABEL_19:
      float v24 = *(float **)(a3 + 16);
      *float v24 = 0.25;
      float v25 = 0.25;
LABEL_25:
      v24[1] = v25;
      return result;
    }
  }
  if ((int)v21 >= 1)
  {
    float v28 = 0.5 / (float)(int)v21;
    int v29 = *(float **)(a3 + 16);
    do
    {
      *v29++ = v28;
      --v21;
    }
    while (v21);
  }
  return result;
}

int *sub_20B0CFFC8(int *result, _DWORD *a2)
{
  uint64_t v2 = *(void *)result;
  uint64_t v3 = result[2];
  uint64_t v4 = *(void *)(*(void *)result + 144);
  uint64_t v5 = *(unsigned int *)(v4 + 8 * v3);
  if ((int)v5 >= 1)
  {
    id v6 = (int *)(*(void *)(v2 + 168) + 4 * *(int *)(v4 + 8 * v3 + 4));
    uint64_t v7 = *(void *)(v2 + 24);
    do
    {
      uint64_t v8 = *v6++;
      *a2++ = *(_DWORD *)(v7 + 8 * v8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_20B0D0014(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  unsigned int v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(_DWORD *)(a3 + 28) = v8;
    *(_DWORD *)(a3 + 32) = v8;
    *(unsigned char *)(a3 + 36) = 1;
    **(float **)a3 = (float)(v8 - 2) / (float)(int)v8;
    if ((int)v8 >= 1)
    {
      float v9 = 1.0 / (float)(v8 * v8);
      uint64_t v10 = *(float **)(a3 + 8);
      uint64_t v11 = *(float **)(a3 + 16);
      do
      {
        *v10++ = v9;
        *v11++ = v9;
        --v8;
      }
      while (v8);
    }
    return;
  }
  int v12 = a4;
  if (a5) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = a4 == 0;
  }
  if (v14) {
    int v15 = a5;
  }
  else {
    int v15 = a4;
  }
  uint64_t v16 = *(int *)(a2 + 24);
  uint64_t v17 = *(unsigned int *)(a2 + 24);
  uint64_t v18 = 4 * v16;
  MEMORY[0x270FA5388]();
  __float2 v19 = &v79[-((4 * v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v19, 4 * v16);
  if ((v12 | 4) != 4 && v15 == v12)
  {
    __float2 v19 = 0;
    float v22 = 0.0;
LABEL_25:
    if (v12 == 4)
    {
      int v80 = v15;
      uint64_t v81 = v17;
      float v32 = *MEMORY[0x263F90510];
      uint64_t v33 = 0xFFFFFFFF00000000;
      float v34 = (float *)v19;
      do
      {
        float v35 = *v34++;
        v33 += 0x100000000;
      }
      while (v32 >= v35);
      uint64_t v36 = v16 << 32;
      float v37 = (float *)&v19[4 * v16 - 4];
      do
      {
        float v38 = *v37--;
        v36 -= 0x100000000;
      }
      while (v32 >= v38);
      uint64_t v39 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = v39;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1061158912;
      uint64_t v40 = *(void *)(a3 + 8);
      if ((int)v39 >= 1) {
        bzero(*(void **)(a3 + 8), 4 * v39);
      }
      *(_DWORD *)(v40 + (v33 >> 30)) = 1040187392;
      *(_DWORD *)(v40 + (v36 >> 30)) = 1040187392;
      uint64_t v17 = v81;
      int v15 = v80;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v15 != v12)
    {
      int v82 = *a1;
      MEMORY[0x270FA5388]();
      bzero(&v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)], 4 * v16);
      float v41 = sub_20B0D060C((int *)a2, (OpenSubdiv::__aapl__::Sdc::Crease *)&v82, (float *)&v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)]);
      uint64_t v42 = *(int *)(a2 + 20);
      uint64_t v43 = *(void *)(*(void *)(a2 + 8) + 408);
      float v44 = *(float *)(v43 + 4 * v42);
      if (v15
        || (int v15 = OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::__aapl__::Sdc::Crease *)&v82, *(float *)(v43 + 4 * v42), v16, v41), v15 != v12))
      {
        MEMORY[0x270FA5388]();
        uint64_t v46 = (float *)&v79[-v45];
        bzero(&v79[-v45], v47);
        float v48 = v46 + 1;
        if ((v15 - 1) > 1)
        {
          if (v15 == 4)
          {
            uint64_t v81 = v17;
            float v55 = *MEMORY[0x263F90510];
            uint64_t v56 = 0xFFFFFFFF00000000;
            uint64_t v57 = v41;
            do
            {
              float v58 = *v57++;
              v56 += 0x100000000;
            }
            while (v55 >= v58);
            uint64_t v49 = v16 << 32;
            uint64_t v59 = &v41[v16 - 1];
            do
            {
              float v60 = *v59--;
              v49 -= 0x100000000;
            }
            while (v55 >= v60);
            uint64_t v61 = *(unsigned int *)(a2 + 24);
            *uint64_t v46 = 0.75;
            if ((int)v61 >= 1) {
              bzero(v46 + 1, 4 * v61);
            }
            int v54 = 0;
            *(_DWORD *)((char *)v48 + (v56 >> 30)) = 1040187392;
            *(_DWORD *)((char *)v48 + (v49 >> 30)) = 1040187392;
            LODWORD(v49) = v61;
            char v53 = 0;
            uint64_t v17 = v81;
          }
          else
          {
            LODWORD(v49) = 0;
            int v54 = 0;
            char v53 = 0;
            *uint64_t v46 = 1.0;
          }
        }
        else
        {
          uint64_t v49 = *(unsigned int *)(a2 + 28);
          *uint64_t v46 = (float)(v49 - 2) / (float)(int)v49;
          if ((int)v49 >= 1)
          {
            float v50 = 1.0 / (float)(v49 * v49);
            int v51 = v46 + 1;
            uint64_t v52 = v49;
            do
            {
              *int v51 = v50;
              v51[v16] = v50;
              ++v51;
              --v52;
            }
            while (v52);
          }
          char v53 = 1;
          int v54 = v49;
        }
        OpenSubdiv::__aapl__::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::__aapl__::Sdc::Crease *)&v82, v22, v44, v17, (const float *)v19, v41);
        float v63 = 1.0 - v62;
        **(float **)a3 = (float)(**(float **)a3 * v62) + (float)(*v46 * (float)(1.0 - v62));
        if (v49)
        {
          if (*(_DWORD *)(a3 + 28))
          {
            if ((int)v49 >= 1)
            {
              uint64_t v64 = *(float **)(a3 + 8);
              uint64_t v65 = v49;
              uint64_t v66 = v46 + 1;
              do
              {
                float v67 = *v66++;
                *uint64_t v64 = (float)(*v64 * v62) + (float)(v67 * v63);
                ++v64;
                --v65;
              }
              while (v65);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 28) = v49;
            if ((int)v49 >= 1)
            {
              uint64_t v68 = *(float **)(a3 + 8);
              uint64_t v69 = v49;
              uint64_t v70 = v46 + 1;
              do
              {
                float v71 = *v70++;
                *v68++ = v71 * v63;
                --v69;
              }
              while (v69);
            }
          }
        }
        if (v54)
        {
          uint64_t v72 = (float *)&v48[v16];
          if (*(_DWORD *)(a3 + 32))
          {
            if (v54 >= 1)
            {
              long long v73 = *(float **)(a3 + 16);
              uint64_t v74 = v54;
              do
              {
                float v75 = *v72++;
                *long long v73 = (float)(*v73 * v62) + (float)(v75 * v63);
                ++v73;
                --v74;
              }
              while (v74);
            }
          }
          else
          {
            *(_DWORD *)(a3 + 32) = v54;
            *(unsigned char *)(a3 + 36) = v53;
            if (v54 >= 1)
            {
              int v76 = *(float **)(a3 + 16);
              uint64_t v77 = v54;
              do
              {
                float v78 = *v72++;
                *v76++ = v78 * v63;
                --v77;
              }
              while (v77);
            }
          }
        }
      }
    }
    return;
  }
  float v20 = *(void **)a2;
  uint64_t v21 = *(int *)(a2 + 16);
  float v22 = *(float *)(*(void *)(*(void *)a2 + 408) + 4 * v21);
  if ((int)v17 >= 1)
  {
    float v23 = (int *)(v20[45] + 4 * *(int *)(v20[42] + 8 * v21 + 4));
    uint64_t v24 = v20[27];
    float v25 = &v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v26 = v17;
    do
    {
      uint64_t v27 = *v23++;
      *v25++ = *(_DWORD *)(v24 + 4 * v27);
      --v26;
    }
    while (v26);
  }
  if (!v12)
  {
    int v82 = *a1;
    int v12 = OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::__aapl__::Sdc::Crease *)&v82, v22, v16, (const float *)&v79[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    unsigned int v7 = v12 - 1;
  }
  if (v7 > 1) {
    goto LABEL_25;
  }
  uint64_t v28 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(_DWORD *)(a3 + 28) = v28;
  *(_DWORD *)(a3 + 32) = v28;
  *(unsigned char *)(a3 + 36) = 1;
  **(float **)a3 = (float)(v28 - 2) / (float)(int)v28;
  if ((int)v28 >= 1)
  {
    float v29 = 1.0 / (float)(v28 * v28);
    uint64_t v30 = *(float **)(a3 + 8);
    unint64_t v31 = *(float **)(a3 + 16);
    do
    {
      *v30++ = v29;
      *v31++ = v29;
      --v28;
    }
    while (v28);
  }
}

float *sub_20B0D060C(int *a1, OpenSubdiv::__aapl__::Sdc::Crease *this, float *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v6 = v14;
  memset(v14, 0, sizeof(v14));
  uint64_t v7 = a1[6];
  __p = 0;
  if (v7 >= 0x11)
  {
    id v6 = operator new(4 * v7);
    __p = v6;
    uint64_t v7 = a1[6];
  }
  if ((int)v7 >= 1)
  {
    uint64_t v8 = (int *)(*(void *)(*(void *)a1 + 360)
               + 4 * *(int *)(*(void *)(*(void *)a1 + 336) + 8 * a1[4] + 4));
    uint64_t v9 = *(void *)(*(void *)a1 + 216);
    uint64_t v10 = v7;
    uint64_t v11 = v6;
    do
    {
      uint64_t v12 = *v8++;
      *v11++ = *(_DWORD *)(v9 + 4 * v12);
      --v10;
    }
    while (v10);
  }
  OpenSubdiv::__aapl__::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(this, v7, (const float *)v6, a3);
  operator delete(__p);
  return a3;
}

void sub_20B0D071C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
}

_DWORD *sub_20B0D0738(_DWORD *result, int *a2, uint64_t a3, int a4, int a5, double a6, double a7)
{
  if (!a4)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = a2[2];
    if (*(float *)(*(void *)(*(void *)a2 + 216) + 4 * v8) <= 0.0) {
      goto LABEL_10;
    }
LABEL_5:
    if (a5)
    {
      if (a5 != 4)
      {
        uint64_t v9 = *(void *)a2;
        LODWORD(v10) = a2[2];
LABEL_8:
        uint64_t v11 = (int)v10;
        uint64_t v12 = *(unsigned int *)(*(void *)(v9 + 144) + 8 * (int)v10);
        *(void *)(a3 + 24) = 2;
        *(_DWORD *)(a3 + 32) = v12;
        *(unsigned char *)(a3 + 36) = 0;
        unsigned int v13 = *(float32x2_t **)a3;
        __asm { FMOV            V0.2S, #0.375 }
        **(void **)a3 = _D0;
        if (v12 == 2)
        {
          **(void **)(a3 + 16) = 0x3E0000003E000000;
        }
        else if ((int)v12 >= 1)
        {
          uint64_t v26 = *(float **)(a3 + 16);
          uint64_t v27 = v12;
          do
          {
            *v26++ = 0.25 / (float)(int)v12;
            --v27;
          }
          while (v27);
        }
        LODWORD(a7) = *(_DWORD *)(*(void *)(v9 + 216) + 4 * v11);
        float v28 = 1.0 - *(float *)&a7;
        *(float *)&a7 = *(float *)&a7 * 0.5;
        *unsigned int v13 = vmla_n_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0), *v13, v28);
        if ((int)v12 >= 1)
        {
          float v29 = *(float **)(a3 + 16);
          do
          {
            *float v29 = *v29 * v28;
            ++v29;
            --v12;
          }
          while (v12);
        }
        return result;
      }
    }
    else if (a4 != 4)
    {
      uint64_t v9 = *(void *)a2;
      uint64_t v10 = a2[2];
      float v25 = *(float *)(*(void *)(*(void *)a2 + 216) + 4 * v10);
      if (v25 < 1.0 && ((*result & 0xFF0000) == 0 || (float)(v25 + -1.0) <= 0.0)) {
        goto LABEL_8;
      }
    }
    *(_DWORD *)(a3 + 24) = 2;
    *(void *)(a3 + 28) = 0;
    *(unsigned char *)(a3 + 36) = 0;
    uint64_t v21 = *(float32x2_t **)a3;
    **(_DWORD **)a3 = 1056964608;
    float v22 = 0.5;
    goto LABEL_21;
  }
  if (a4 != 1) {
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)a2;
  LODWORD(v8) = a2[2];
LABEL_10:
  uint64_t v19 = *(unsigned int *)(*(void *)(v7 + 144) + 8 * v8);
  *(void *)(a3 + 24) = 2;
  *(_DWORD *)(a3 + 32) = v19;
  *(unsigned char *)(a3 + 36) = 0;
  __asm { FMOV            V0.2S, #0.375 }
  **(void **)a3 = _D0;
  if (v19 == 2)
  {
    uint64_t v21 = *(float32x2_t **)(a3 + 16);
    v21->i32[0] = 1040187392;
    float v22 = 0.125;
LABEL_21:
    v21->f32[1] = v22;
    return result;
  }
  if ((int)v19 >= 1)
  {
    float v23 = 0.25 / (float)(int)v19;
    uint64_t v24 = *(float **)(a3 + 16);
    do
    {
      *v24++ = v23;
      --v19;
    }
    while (v19);
  }
  return result;
}

void sub_20B0D0910(int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  unsigned int v7 = a4 - 1;
  if ((a4 - 1) <= 1)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 28);
    *(_DWORD *)(a3 + 24) = 1;
    *(void *)(a3 + 28) = v8;
    *(unsigned char *)(a3 + 36) = 0;
    if (v8 == 6)
    {
      **(_DWORD **)a3 = 1059061760;
      float v9 = 0.0625;
    }
    else
    {
      double v28 = 1.0 / (double)(int)v8;
      long double v29 = cos(v28 * 6.28318531);
      float v9 = -(((v29 * 0.25 + 0.375) * (v29 * 0.25 + 0.375) + -0.625) * v28);
      float v30 = 1.0 - v9 * (double)(int)v8;
      **(float **)a3 = v30;
      if ((int)v8 < 1) {
        return;
      }
    }
    unint64_t v31 = *(float **)(a3 + 8);
    do
    {
      *v31++ = v9;
      --v8;
    }
    while (v8);
    return;
  }
  int v10 = a4;
  if (a5) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a4 == 0;
  }
  if (v12) {
    int v13 = a5;
  }
  else {
    int v13 = a4;
  }
  uint64_t v14 = *(int *)(a2 + 24);
  uint64_t v15 = *(unsigned int *)(a2 + 24);
  uint64_t v16 = 4 * v14;
  MEMORY[0x270FA5388]();
  uint64_t v17 = &v76[-((4 * v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v17, 4 * v14);
  if ((v10 | 4) != 4 && v13 == v10)
  {
    uint64_t v17 = 0;
    float v20 = 0.0;
    goto LABEL_25;
  }
  uint64_t v18 = *(void **)a2;
  uint64_t v19 = *(int *)(a2 + 16);
  float v20 = *(float *)(*(void *)(*(void *)a2 + 408) + 4 * v19);
  if ((int)v15 >= 1)
  {
    uint64_t v21 = (int *)(v18[45] + 4 * *(int *)(v18[42] + 8 * v19 + 4));
    uint64_t v22 = v18[27];
    float v23 = &v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v24 = v15;
    do
    {
      uint64_t v25 = *v21++;
      *v23++ = *(_DWORD *)(v22 + 4 * v25);
      --v24;
    }
    while (v24);
  }
  if (!v10)
  {
    int v79 = *a1;
    int v10 = OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::__aapl__::Sdc::Crease *)&v79, v20, v14, (const float *)&v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    unsigned int v7 = v10 - 1;
  }
  if (v7 > 1)
  {
LABEL_25:
    if (v10 == 4)
    {
      int v77 = v13;
      uint64_t v78 = v15;
      float v32 = *MEMORY[0x263F90510];
      uint64_t v33 = 0xFFFFFFFF00000000;
      float v34 = (float *)v17;
      do
      {
        float v35 = *v34++;
        v33 += 0x100000000;
      }
      while (v32 >= v35);
      uint64_t v36 = v14 << 32;
      float v37 = (float *)&v17[4 * v14 - 4];
      do
      {
        float v38 = *v37--;
        v36 -= 0x100000000;
      }
      while (v32 >= v38);
      uint64_t v39 = *(unsigned int *)(a2 + 24);
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = v39;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1061158912;
      uint64_t v40 = *(void *)(a3 + 8);
      if ((int)v39 >= 1) {
        bzero(*(void **)(a3 + 8), 4 * v39);
      }
      *(_DWORD *)(v40 + (v33 >> 30)) = 1040187392;
      *(_DWORD *)(v40 + (v36 >> 30)) = 1040187392;
      uint64_t v15 = v78;
      int v13 = v77;
    }
    else
    {
      *(_DWORD *)(a3 + 24) = 1;
      *(void *)(a3 + 28) = 0;
      *(unsigned char *)(a3 + 36) = 0;
      **(_DWORD **)a3 = 1065353216;
    }
    if (v13 == v10) {
      return;
    }
    int v79 = *a1;
    MEMORY[0x270FA5388]();
    bzero(&v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)], 4 * v14);
    float v41 = sub_20B0D060C((int *)a2, (OpenSubdiv::__aapl__::Sdc::Crease *)&v79, (float *)&v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)]);
    uint64_t v42 = *(int *)(a2 + 20);
    uint64_t v43 = *(void *)(*(void *)(a2 + 8) + 408);
    float v44 = *(float *)(v43 + 4 * v42);
    if (!v13)
    {
      int v13 = OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule((OpenSubdiv::__aapl__::Sdc::Crease *)&v79, *(float *)(v43 + 4 * v42), v14, v41);
      if (v13 == v10) {
        return;
      }
    }
    MEMORY[0x270FA5388]();
    uint64_t v46 = (float *)&v76[-v45];
    bzero(&v76[-v45], v47);
    float v48 = v46 + 1;
    if ((v13 - 1) > 1)
    {
      if (v13 == 4)
      {
        uint64_t v55 = v15;
        float v56 = *MEMORY[0x263F90510];
        uint64_t v57 = 0xFFFFFFFF00000000;
        float v58 = v41;
        do
        {
          float v59 = *v58++;
          v57 += 0x100000000;
        }
        while (v56 >= v59);
        uint64_t v60 = v14 << 32;
        uint64_t v61 = &v41[v14 - 1];
        do
        {
          float v62 = *v61--;
          v60 -= 0x100000000;
        }
        while (v56 >= v62);
        uint64_t v49 = *(unsigned int *)(a2 + 24);
        *uint64_t v46 = 0.75;
        if ((int)v49 >= 1) {
          bzero(v46 + 1, 4 * v49);
        }
        *(float *)((char *)v48 + (v57 >> 30)) = 0.125;
        *(float *)((char *)v48 + (v60 >> 30)) = 0.125;
        uint64_t v15 = v55;
      }
      else
      {
        LODWORD(v49) = 0;
        *uint64_t v46 = 1.0;
      }
      goto LABEL_57;
    }
    uint64_t v49 = *(unsigned int *)(a2 + 28);
    if (v49 == 6)
    {
      *uint64_t v46 = 0.625;
      float v50 = 0.0625;
    }
    else
    {
      double v63 = 1.0 / (double)(int)v49;
      long double v64 = cos(v63 * 6.28318531);
      float v50 = -(((v64 * 0.25 + 0.375) * (v64 * 0.25 + 0.375) + -0.625) * v63);
      float v65 = 1.0 - v50 * (double)(int)v49;
      *uint64_t v46 = v65;
      if ((int)v49 < 1) {
        goto LABEL_57;
      }
    }
    uint64_t v66 = v46 + 1;
    uint64_t v67 = v49;
    do
    {
      *v66++ = v50;
      --v67;
    }
    while (v67);
LABEL_57:
    OpenSubdiv::__aapl__::Sdc::Crease::ComputeFractionalWeightAtVertex((OpenSubdiv::__aapl__::Sdc::Crease *)&v79, v20, v44, v15, (const float *)v17, v41);
    float v69 = 1.0 - v68;
    **(float **)a3 = (float)(**(float **)a3 * v68) + (float)(*v46 * (float)(1.0 - v68));
    if (v49)
    {
      if (*(_DWORD *)(a3 + 28))
      {
        if ((int)v49 >= 1)
        {
          uint64_t v70 = *(float **)(a3 + 8);
          uint64_t v71 = v49;
          do
          {
            float v72 = *v48++;
            *uint64_t v70 = (float)(*v70 * v68) + (float)(v72 * v69);
            ++v70;
            --v71;
          }
          while (v71);
        }
      }
      else
      {
        *(_DWORD *)(a3 + 28) = v49;
        if ((int)v49 >= 1)
        {
          long long v73 = *(float **)(a3 + 8);
          uint64_t v74 = v49;
          do
          {
            float v75 = *v48++;
            *v73++ = v75 * v69;
            --v74;
          }
          while (v74);
        }
      }
    }
    return;
  }
  uint64_t v26 = *(unsigned int *)(a2 + 28);
  *(_DWORD *)(a3 + 24) = 1;
  *(void *)(a3 + 28) = v26;
  *(unsigned char *)(a3 + 36) = 0;
  if (v26 == 6)
  {
    **(_DWORD **)a3 = 1059061760;
    float v27 = 0.0625;
  }
  else
  {
    double v51 = 1.0 / (double)(int)v26;
    long double v52 = cos(v51 * 6.28318531);
    float v27 = -(((v52 * 0.25 + 0.375) * (v52 * 0.25 + 0.375) + -0.625) * v51);
    float v53 = 1.0 - v27 * (double)(int)v26;
    **(float **)a3 = v53;
    if ((int)v26 < 1) {
      return;
    }
  }
  int v54 = *(float **)(a3 + 8);
  do
  {
    *v54++ = v27;
    --v26;
  }
  while (v26);
}

uint64_t sub_20B0D0F3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16)) {
    return 1;
  }
  if ((v1 & 4) == 0) {
    return 0;
  }
  return MEMORY[0x270FA4F90]();
}

MDLTransformStack *sub_20B0D0F70(double a1, double a2, uint64_t a3, int a4)
{
  v106[1] = 0;
  v106[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v105 = 0;
  v106[0] = MEMORY[0x263F90730] + 16;
  v103 = 0;
  BOOL v104 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples();
  BOOL v102 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(&v99, (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)v106, &v102);
  v93 = objc_alloc_init(MDLTransformStack);
  uint64_t v7 = v99;
  uint64_t v8 = v100;
  if (v99 != v100)
  {
    while (2)
    {
      uint64_t v98 = 0;
      memset(v97, 0, sizeof(v97));
      sub_20B0D2428((uint64_t)v97, v7);
      int v9 = *(_DWORD *)(v7 + 128);
      BYTE4(v98) = *(unsigned char *)(v7 + 132);
      LODWORD(v98) = v9;
      int v10 = v9;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v96 = 0;
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdProperty *)sub_20B0D1BC4((uint64_t)v97);
      BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(&v94, v11);
      if ((v94 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (v94 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
      }
      if (*(char *)(EmptyString + 23) < 0)
      {
        sub_20B07F994(__p, *(void **)EmptyString, *(void *)(EmptyString + 8));
      }
      else
      {
        long long v16 = *(_OWORD *)EmptyString;
        uint64_t v96 = *(void *)(EmptyString + 16);
        *(_OWORD *)__p = v16;
      }
      if ((v94 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      int v17 = BYTE4(v98);
      uint64_t v18 = NSString;
      int v19 = SHIBYTE(v96);
      float v20 = __p[0];
      uint64_t v22 = objc_msgSend_defaultCStringEncoding(NSString, v13, v14, v93);
      if (v19 >= 0) {
        objc_msgSend_stringWithCString_encoding_(v18, v21, (uint64_t)__p, v22);
      }
      else {
      uint64_t v24 = objc_msgSend_stringWithCString_encoding_(v18, v21, (uint64_t)v20, v22);
      }
      switch(v10)
      {
        case 0:
          NSLog(&cfstr_InvaliudTransf.isa);
          goto LABEL_67;
        case 1:
          uint64_t v25 = objc_msgSend_addTranslateOp_inverse_(v93, v23, (uint64_t)v24, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          long double v29 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v32 = objc_msgSend_timeSampleCount(v29, v30, v31);

          if (v32) {
            goto LABEL_66;
          }
          goto LABEL_64;
        case 2:
          uint64_t v25 = objc_msgSend_addScaleOp_inverse_(v93, v23, (uint64_t)v24, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          float v35 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v38 = objc_msgSend_timeSampleCount(v35, v36, v37);

          if (!v38) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 3:
          uint64_t v25 = objc_msgSend_addRotateXOp_inverse_(v93, v23, (uint64_t)v24, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          uint64_t v39 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v42 = objc_msgSend_timeSampleCount(v39, v40, v41);

          if (!v42) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 4:
          uint64_t v25 = objc_msgSend_addRotateYOp_inverse_(v93, v23, (uint64_t)v24, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          uint64_t v43 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v46 = objc_msgSend_timeSampleCount(v43, v44, v45);

          if (!v46) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 5:
          uint64_t v25 = objc_msgSend_addRotateZOp_inverse_(v93, v23, (uint64_t)v24, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          size_t v47 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v50 = objc_msgSend_timeSampleCount(v47, v48, v49);

          if (!v50) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 6:
          uint64_t v25 = objc_msgSend_addRotateOp_order_inverse_(v93, v23, (uint64_t)v24, 1, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          double v51 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v54 = objc_msgSend_timeSampleCount(v51, v52, v53);

          if (!v54) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 7:
          uint64_t v25 = objc_msgSend_addRotateOp_order_inverse_(v93, v23, (uint64_t)v24, 2, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          uint64_t v55 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v58 = objc_msgSend_timeSampleCount(v55, v56, v57);

          if (!v58) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 8:
          uint64_t v25 = objc_msgSend_addRotateOp_order_inverse_(v93, v23, (uint64_t)v24, 3, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          float v59 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v62 = objc_msgSend_timeSampleCount(v59, v60, v61);

          if (!v62) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 9:
          uint64_t v25 = objc_msgSend_addRotateOp_order_inverse_(v93, v23, (uint64_t)v24, 4, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          double v63 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v66 = objc_msgSend_timeSampleCount(v63, v64, v65);

          if (!v66) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 10:
          uint64_t v25 = objc_msgSend_addRotateOp_order_inverse_(v93, v23, (uint64_t)v24, 5, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          uint64_t v67 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v70 = objc_msgSend_timeSampleCount(v67, v68, v69);

          if (!v70) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 11:
          uint64_t v25 = objc_msgSend_addRotateOp_order_inverse_(v93, v23, (uint64_t)v24, 6, v17 != 0);
          double v28 = v25;
          if (!a4) {
            goto LABEL_54;
          }
          uint64_t v71 = objc_msgSend_animatedValue(v25, v26, v27);
          uint64_t v74 = objc_msgSend_timeSampleCount(v71, v72, v73);

          if (!v74) {
            goto LABEL_64;
          }
          goto LABEL_66;
        case 12:
          double v28 = objc_msgSend_addOrientOp_inverse_(v93, v23, (uint64_t)v24, v17 != 0);
          int v77 = objc_msgSend_animatedValue(v28, v75, v76);
          uint64_t v80 = objc_msgSend_timeSampleCount(v77, v78, v79);

          if (!v80) {
            goto LABEL_64;
          }
          if (a4) {
            goto LABEL_66;
          }
          uint64_t v81 = objc_msgSend_animatedValue(v28, v33, v34);
          uint64_t v82 = sub_20B0D1BC4((uint64_t)v97);
          objc_msgSend_resetWithUsdAttribute_timeScale_time_(v81, v83, v82, a1, a2);
          goto LABEL_65;
        case 13:
          uint64_t v25 = objc_msgSend_addMatrixOp_inverse_(v93, v23, (uint64_t)v24, v17 != 0);
          double v28 = v25;
          if (a4)
          {
            BOOL v84 = objc_msgSend_animatedValue(v25, v26, v27);
            uint64_t v87 = objc_msgSend_timeSampleCount(v84, v85, v86);

            if (v87) {
              goto LABEL_66;
            }
LABEL_64:
            uint64_t v81 = objc_msgSend_animatedValue(v28, v33, v34);
            uint64_t v90 = sub_20B0D1BC4((uint64_t)v97);
            objc_msgSend_resetWithUsdAttribute_timeScale_(v81, v91, v90, a1);
          }
          else
          {
LABEL_54:
            uint64_t v81 = objc_msgSend_animatedValue(v25, v26, v27);
            uint64_t v88 = sub_20B0D1BC4((uint64_t)v97);
            objc_msgSend_resetWithUsdAttribute_timeScale_time_(v81, v89, v88, a1, a2);
          }
LABEL_65:

LABEL_66:
LABEL_67:

          if (SHIBYTE(v96) < 0) {
            operator delete(__p[0]);
          }
          sub_20B0D261C((uint64_t)v97);
          v7 += 136;
          if (v7 == v8) {
            break;
          }
          continue;
        default:
          goto LABEL_67;
      }
      break;
    }
  }
  *(void *)&v97[0] = &v99;
  sub_20B0D2C48((void ***)v97);
  if (v103)
  {
    BOOL v104 = v103;
    operator delete(v103);
  }
  MEMORY[0x210530C80](v106);

  return v93;
}

void sub_20B0D19D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_20B0D261C((uint64_t)&a18);

  a18 = &a36;
  sub_20B0D2C48((void ***)&a18);
  uint64_t v41 = *(void **)(v39 - 160);
  if (v41)
  {
    *(void *)(v39 - 152) = v41;
    operator delete(v41);
  }
  MEMORY[0x210530C80](v39 - 136);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D1BC4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 120);
  if (v1 == -1) {
    sub_20B0D2678();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))*(&off_26BF519A0 + v1))(&v4, a1);
}

void sub_20B0D1C10(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *a1)
{
  v12[13] = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
  {
    v6[1] = 0;
    v6[2] = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v6[0] = MEMORY[0x263F90720] + 16;
    long long v4 = 0u;
    long long v5 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr((uint64_t *)&v4, (pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v6);
    if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4))
    {
      memset(v12, 0, 104);
      long long v11 = 0u;
      MEMORY[0x210530CF0](&v11, &v4);
      pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    }
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::CreateExtentAttr((pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *)v6, (const pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    LODWORD(v4) = v11;
    uint64_t v1 = *((void *)&v11 + 1);
    *((void *)&v11 + 1) = 0;
    uint64_t v2 = *((void *)&v4 + 1);
    *((void *)&v4 + 1) = v1;
    if (v2) {
      sub_20B06A5E0(v2);
    }
    sub_20B0D28C0((uint64_t)&v5, (int *)v12);
    sub_20B0D2918((uint64_t)&v5 + 4);
    if ((BYTE8(v5) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v5 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *((void *)&v5 + 1) = v12[1];
    v12[1] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)v12);
    if (*((void *)&v11 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v11 + 1));
    }
    sub_20B06A698((uint64_t)v9);
    v3[1] = 0;
    v3[2] = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v3[0] = MEMORY[0x263F90758] + 16;
    MEMORY[0x210530D40](v3);
    if ((BYTE8(v5) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v5 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v5);
    if (*((void *)&v4 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v4 + 1));
    }
    MEMORY[0x210530C70](v6);
  }
  sub_20B06A6E8((uint64_t)v7);
}

void sub_20B0D228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20B06A6E8(v37 - 176);
  MEMORY[0x210530A50](&a27);
  MEMORY[0x210530A80](&a34);
  sub_20B06A6E8((uint64_t)&a37);
  MEMORY[0x210530D40](&a10);
  sub_20B06A22C((uint64_t)&a13);
  MEMORY[0x210530C70](&a18);
  sub_20B06A6E8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D2428(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  sub_20B0D2470(a1, a2);
  return a1;
}

void sub_20B0D245C(_Unwind_Exception *a1)
{
  sub_20B0D261C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D2470(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 120);
  if (v4 != -1) {
    float32x4_t result = ((uint64_t (*)(char *, uint64_t))off_26BF51980[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 120) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 120);
  if (v5 != -1)
  {
    float32x4_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26BF51990 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 120) = v5;
  }
  return result;
}

uint64_t sub_20B0D2500(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return sub_20B06A5E0(result);
  }
  return result;
}

void *sub_20B0D2570(uint64_t a1, void *a2)
{
  return sub_20B0D2768(a2);
}

uint64_t sub_20B0D2578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20B0D2590(a2, a3);
}

void sub_20B0D2584()
{
}

uint64_t sub_20B0D2590(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_20B0B0824((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20B0B0870((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

uint64_t sub_20B0D261C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 120);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26BF51980[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

void sub_20B0D2678()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_20B0D26C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_20B0D26D0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA48E8](a2);
}

uint64_t sub_20B0D26D8(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  if (*(_DWORD *)this > 4u || ((1 << *(_DWORD *)this) & 0x1A) == 0) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 1);
  if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
    return 0;
  }
  if (*(_DWORD *)this == 1) {
    return 1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(this);
  if (*(_DWORD *)this != 3 || result != 1) {
    return *(_DWORD *)this == 4 && result == 8;
  }
  return result;
}

void *sub_20B0D2768(void *a1)
{
  uint64_t v4 = a1[14];
  uint64_t v2 = a1 + 14;
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_20B0D2868((uint64_t)v2, v3);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)(a1 + 12));
  uint64_t v5 = (atomic_uint *)a1[7];
  if (v5 && atomic_fetch_add_explicit(v5 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v5 + 8))(v5);
  }
  char v6 = (atomic_uint *)a1[5];
  if (v6 && atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[3];
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)(a1 + 2));
  uint64_t v8 = a1[1];
  if (v8) {
    sub_20B06A5E0(v8);
  }
  return a1;
}

void sub_20B0D2868(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
    if (v2) {
      sub_20B081CD8(v2);
    }
    JUMPOUT(0x210532650);
  }
}

uint64_t sub_20B0D28C0(uint64_t a1, int *a2)
{
  int v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
  sub_20B06A424((uint64_t)&v4);
  return a1;
}

uint64_t sub_20B0D2918(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

uint64_t sub_20B0D2974(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  return a1;
}

uint64_t sub_20B0D29D0(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  *(_DWORD *)a1 = 1;
  uint64_t v5 = *a2;
  *(void *)(a1 + 8) = *a2;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  char v6 = (void *)(a1 + 16);
  sub_20B0B0824((_DWORD *)(a1 + 16), a3);
  sub_20B0B0870((_DWORD *)(a1 + 20), a3 + 1);
  *(void *)(a1 + 24) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7 && (*(unsigned char *)(v7 + 57) & 8) == 0 && *(void *)(v7 + 16) == *v6) {
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  return a1;
}

void sub_20B0D2AA8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B0B04EC(v2);
  uint64_t v5 = *(void *)(v1 + 8);
  if (v5) {
    sub_20B06A5E0(v5);
  }
  _Unwind_Resume(a1);
}

void sub_20B0D2AE0(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        uint64_t v7 = (uint64_t *)a1;
      }
      else {
        uint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    int v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    BOOL v12 = sub_20B0B14A4(a1, v11);
    int v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20B06A6E8(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_20B0D2C48(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_20B0D261C(v4 - 136);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B0D2CCC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v1 = 0uLL;
  operator new();
}

void sub_20B0D2D64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_20B081CD8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0D2D80(uint64_t a1)
{
}

void sub_20B0D2DB8(uint64_t a1)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v2) {
      sub_20B081CD8(v2);
    }
    uint64_t v6 = v4[7];
    uint64_t v5 = v4[8];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
    if (v7) {
      sub_20B081CD8(v7);
    }
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v4 + 3;
    int v9 = (void *)v4[3];
    uint64_t v10 = v3;
    if (v9)
    {
      unint64_t v11 = v3;
      do
      {
        BOOL v12 = v9;
        if (v11)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v12 = (void *)*v8;
        }
        uint64_t v10 = (std::__shared_weak_count *)v4[4];
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v11)
        {
          sub_20B081CD8(v11);
          sub_20B081CD8(v11);
        }
        uint64_t v8 = v12 + 3;
        int v9 = (void *)v12[3];
        unint64_t v11 = v10;
        uint64_t v4 = v12;
      }
      while (v9);
    }
    uint64_t v13 = *(void *)(a1 + 8);
    if (v10) {
      sub_20B081CD8(v10);
    }
    uint64_t v2 = v3;
    if (!v13)
    {
      long long v14 = 0uLL;
      operator new();
    }
  }
}

void sub_20B0D2F30(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20B081CD8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0D2F4C()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_20B0D34BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12)
  {
    sub_20B081CD8(a12);
    if (!v15)
    {
LABEL_3:
      if (!v14) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v15)
  {
    goto LABEL_3;
  }
  sub_20B081CD8(v15);
  if (!v14)
  {
LABEL_5:
    if (a14) {
      sub_20B081CD8(a14);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_4:
  sub_20B081CD8(v14);
  goto LABEL_5;
}

void sub_20B0D3520(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_20B0D377C(a1, a2, &v24);
  uint64_t v3 = v24;
  if (v24)
  {
    uint64_t v4 = v25;
    uint64_t v5 = v25;
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v3[2];
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        uint64_t v8 = v7 ? v3[1] : 0;
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v7 = 0;
      }
      if (v8 == *(void *)(a1 + 8) && !v3[3])
      {
        uint64_t v21 = *(void *)(v8 + 56);
        if (v21) {
          break;
        }
      }
      int v9 = (std::__shared_weak_count *)v3[2];
      if (v9)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        if (v10) {
          uint64_t v11 = v3[1];
        }
        else {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
      }
      uint64_t v13 = v3[3];
      uint64_t v12 = v3[4];
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      long long v14 = *(std::__shared_weak_count **)(v11 + 32);
      *(void *)(v11 + 24) = v13;
      *(void *)(v11 + 32) = v12;
      if (v14) {
        sub_20B081CD8(v14);
      }
      uint64_t v15 = v3[3];
      if (v15)
      {
        uint64_t v17 = v3[1];
        uint64_t v16 = v3[2];
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = *(std::__shared_weak_count **)(v15 + 16);
        *(void *)(v15 + 8) = v17;
        *(void *)(v15 + 16) = v16;
        if (v18) {
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      int v19 = (void *)v3[7];
      if (!v19)
      {
        int v20 = 3;
        if (!v10) {
          goto LABEL_37;
        }
LABEL_36:
        sub_20B081CD8(v10);
        goto LABEL_37;
      }
      uint64_t v4 = (std::__shared_weak_count *)v3[8];
      if (v4)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = v4;
      if (v5) {
        sub_20B081CD8(v5);
      }
      if (v4)
      {
        sub_20B081CD8(v4);
        int v20 = 0;
LABEL_31:
        uint64_t v5 = v4;
        goto LABEL_35;
      }
      uint64_t v5 = 0;
      int v20 = 0;
LABEL_35:
      uint64_t v3 = v19;
      if (v10) {
        goto LABEL_36;
      }
LABEL_37:
      if (v7) {
        sub_20B081CD8(v7);
      }
      if (v20 == 3) {
        goto LABEL_56;
      }
    }
    uint64_t v10 = *(std::__shared_weak_count **)(v8 + 64);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v21;
    *(void *)(a1 + 16) = v10;
    if (v22)
    {
      sub_20B081CD8(v22);
      uint64_t v21 = *(void *)(a1 + 8);
    }
    float v23 = *(std::__shared_weak_count **)(v21 + 48);
    *(void *)(v21 + 40) = 0;
    *(void *)(v21 + 48) = 0;
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    int v19 = (void *)v3[7];
    uint64_t v4 = (std::__shared_weak_count *)v3[8];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = v4;
    if (v5) {
      sub_20B081CD8(v5);
    }
    --*(_DWORD *)a1;
    if (v4) {
      sub_20B081CD8(v4);
    }
    int v20 = 2;
    goto LABEL_31;
  }
  uint64_t v4 = v25;
LABEL_56:
  if (v4)
  {
    sub_20B081CD8(v4);
  }
}

void sub_20B0D377C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  while (1)
  {
    while (1)
    {
      uint64_t v7 = v6;
      if (*(_DWORD *)(v5 + 72) == -1 || *(float *)(*(void *)v5 + 4) < *(float *)(a2 + 4)) {
        break;
      }
      if (*(void *)v5 == a2)
      {
        *a3 = v5;
        a3[1] = v6;
        return;
      }
      int v9 = *(std::__shared_weak_count **)(v5 + 16);
      if (v9)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          uint64_t v11 = *(void *)(v5 + 8);
          if (!v7) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v11 = 0;
          if (!v7) {
            goto LABEL_20;
          }
        }
LABEL_19:
        sub_20B081CD8(v7);
        goto LABEL_20;
      }
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      if (v7) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v5 = *(void *)(v11 + 56);
      if (!v5) {
        goto LABEL_29;
      }
      uint64_t v6 = *(std::__shared_weak_count **)(v11 + 64);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = v10;
      uint64_t v8 = v5;
      if (v10)
      {
LABEL_24:
        sub_20B081CD8(v7);
        uint64_t v5 = v8;
      }
    }
    uint64_t v8 = *(void *)(v5 + 24);
    if (!v8) {
      break;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 32);
    if (v6) {
      goto LABEL_7;
    }
LABEL_8:
    uint64_t v5 = v8;
    if (v7) {
      goto LABEL_24;
    }
  }
  uint64_t v8 = *(void *)(v5 + 56);
  if (v8)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 64);
    if (!v6) {
      goto LABEL_8;
    }
LABEL_7:
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_8;
  }
  uint64_t v10 = v6;
LABEL_29:
  *a3 = 0;
  a3[1] = 0;
  if (v10)
  {
    sub_20B081CD8(v10);
  }
}

void *sub_20B0D38E8(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_20B0D377C(a1, a2, &v10);
  uint64_t v2 = v10;
  if (!v10)
  {
    uint64_t v7 = v11;
    if (!v11) {
      return v2;
    }
    goto LABEL_21;
  }
  uint64_t v3 = (void *)v10[7];
  if (v3)
  {
    uint64_t v4 = v11;
    do
    {
      uint64_t v5 = (std::__shared_weak_count *)v2[8];
      uint64_t v2 = v3;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        sub_20B081CD8(v4);
      }
      uint64_t v3 = (void *)v2[7];
      uint64_t v4 = v5;
    }
    while (v3);
    uint64_t v11 = v5;
  }
  uint64_t v6 = (std::__shared_weak_count *)v2[2];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = v2[1];
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  if (v11) {
    sub_20B081CD8(v11);
  }
  if (*(_DWORD *)(v8 + 72) == -1)
  {
    uint64_t v2 = 0;
    if (!v7) {
      return v2;
    }
    goto LABEL_21;
  }
  uint64_t v2 = *(void **)v8;
  if (v7) {
LABEL_21:
  }
    sub_20B081CD8(v7);
  return v2;
}

void *sub_20B0D39D4(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  int v9 = 0;
  sub_20B0D377C(a1, a2, &v8);
  uint64_t v2 = v8;
  if (v8)
  {
    uint64_t v3 = (void *)v8[7];
    if (v3)
    {
      uint64_t v4 = v9;
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)v2[8];
        uint64_t v2 = v3;
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v4) {
          sub_20B081CD8(v4);
        }
        uint64_t v3 = (void *)v2[7];
        uint64_t v4 = v5;
      }
      while (v3);
      int v9 = v5;
    }
    uint64_t v6 = (void *)v2[3];
    if (v6) {
      uint64_t v2 = (void *)*v6;
    }
    else {
      uint64_t v2 = 0;
    }
  }
  if (v9) {
    sub_20B081CD8(v9);
  }
  return v2;
}

void sub_20B0D3A74(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20B0D3AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B0D3C1C((void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B0D3B04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x210532650);
}

void *sub_20B0D3B3C(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (result)
  {
    sub_20B0D3BC8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B0D3B84(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4F4F0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_20B0D3BC8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_20B081CD8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_20B081CD8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void *sub_20B0D3C1C(void **a1, void *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_20B0D3BC8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B0D3D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_20B0D3E20@<D0>(uint64_t a1@<X8>, double a2@<D0>, float64x2_t a3@<Q1>, float64_t a4@<D2>, float64x2_t a5@<Q3>)
{
  a3.f64[1] = a4;
  float64x2_t v6 = vmulq_f64(a3, a3);
  v6.f64[0] = 1.0 / sqrt(vaddvq_f64(v6) + vmulq_f64(a5, a5).f64[0]);
  float64x2_t v23 = vmulq_n_f64(a3, v6.f64[0]);
  double v24 = vmulq_f64(v6, a5).f64[0];
  __double2 v7 = __sincos_stret(a2);
  _V19.D[1] = v23.f64[1];
  double v9 = (1.0 - v7.__cosval) * v23.f64[0];
  *(double *)&long long v10 = vmlad_n_f64(v7.__cosval, v9, v23.f64[0]);
  double v11 = vmuld_lane_f64(v9, v23, 1);
  double v12 = v9 * v24;
  double v13 = vmuld_lane_f64(v7.__sinval, v23, 1);
  *((double *)&v10 + 1) = v11 + v7.__sinval * v24;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = COERCE_UNSIGNED_INT64(v12 - v13);
  *(double *)&long long v10 = v11 - v7.__sinval * v24;
  _D2 = vmuld_lane_f64(1.0 - v7.__cosval, v23, 1);
  __asm { FMLA            D4, D2, V19.D[1] }
  double v20 = _D2 * v24;
  *((void *)&v10 + 1) = _D4;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = COERCE_UNSIGNED_INT64(v20 + v7.__sinval * v23.f64[0]);
  *(double *)&long long v21 = v12 + v13;
  *((double *)&v21 + 1) = v20 - v7.__sinval * v23.f64[0];
  *(_OWORD *)(a1 + 64) = v21;
  *(_OWORD *)(a1 + 80) = COERCE_UNSIGNED_INT64(v7.__cosval + vmuld_n_f64(v24, v24) * (1.0 - v7.__cosval));
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = xmmword_20B1E7940;
  return result;
}

void sub_20B0D40F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D43D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D46BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D490C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D5BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D5E1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D6184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D6774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D696C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D6AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D6CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D6DF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D6F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7148(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D750C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D75D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D769C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D783C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D79CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D7EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D8068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D8324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D89D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_20B0D9648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_20B0D992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B0D9A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D9DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0D9F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0DA1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B0DA91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_20B0DAA6C(simd_float4x4 *a1, float a2)
{
  a1[3].columns[2].f32[3] = a2;
  a1[3].columns[2].f32[0] = 0.5 / tanf(a2 * 0.017453);
  float v4 = a1[3].columns[2].f32[2];
  float v5 = tanf(a2 * 0.0087266);
  a1[3].columns[0].f32[2] = v4 / (float)(v5 + v5);

  sub_20B148194(a1);
}

uint64_t sub_20B0DAAEC(uint64_t a1)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v2 = a1 + 48;
  *(void *)(a1 + 64) = 0;
  uint64_t v3 = a1 + 24;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  sub_20B0DAB70(a1);
  sub_20B0DAC50(v3);
  sub_20B0DAD30(v2);
  return a1;
}

void sub_20B0DAB48(_Unwind_Exception *a1)
{
  float v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  sub_20B1C0384(v2, v1);
  _Unwind_Resume(a1);
}

void sub_20B0DAB70(uint64_t a1)
{
  sub_20B0DAE14((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x1000000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0x1000000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DAC50(uint64_t a1)
{
  sub_20B0E93F0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x2000000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0x2000000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DAD30(uint64_t a1)
{
  sub_20B0F79D8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x4000000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0x4000000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DAE14(char **a1)
{
  sub_20B0DAEFC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396745;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396745;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DAEFC(uint64_t a1)
{
  sub_20B0DAFE4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396744;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396744;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DAFE4(char **a1)
{
  sub_20B0DB0CC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396737;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396737;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DB0CC(uint64_t a1)
{
  sub_20B0DB1B4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396736;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396736;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DB1B4(char **a1)
{
  sub_20B0DB29C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396681;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396681;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DB29C(uint64_t a1)
{
  sub_20B0DB384((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396680;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396680;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DB384(char **a1)
{
  sub_20B0DB46C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396673;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396673;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DB46C(uint64_t a1)
{
  sub_20B0DB554((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396672;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396672;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DB554(char **a1)
{
  sub_20B0DB63C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396233;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396233;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DB63C(uint64_t a1)
{
  sub_20B0DB724((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396232;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396232;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DB724(char **a1)
{
  sub_20B0DB80C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396225;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396225;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DB80C(uint64_t a1)
{
  sub_20B0DB8F4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396224;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396224;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DB8F4(char **a1)
{
  sub_20B0DB9DC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396169;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396169;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DB9DC(uint64_t a1)
{
  sub_20B0DBAC4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396168;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396168;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DBAC4(char **a1)
{
  sub_20B0DBBAC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396161;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396161;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DBBAC(uint64_t a1)
{
  sub_20B0DBC94((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2396160;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2396160;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DBC94(char **a1)
{
  sub_20B0DBD7C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392649;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392649;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DBD7C(uint64_t a1)
{
  sub_20B0DBE64((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392648;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392648;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DBE64(char **a1)
{
  sub_20B0DBF4C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392641;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392641;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DBF4C(uint64_t a1)
{
  sub_20B0DC034((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392640;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392640;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DC034(char **a1)
{
  sub_20B0DC11C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392585;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392585;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DC11C(uint64_t a1)
{
  sub_20B0DC204((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392584;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392584;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DC204(char **a1)
{
  sub_20B0DC2EC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392577;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392577;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DC2EC(uint64_t a1)
{
  sub_20B0DC3D4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392576;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392576;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DC3D4(char **a1)
{
  sub_20B0DC4BC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392137;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392137;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DC4BC(uint64_t a1)
{
  sub_20B0DC5A4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392136;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392136;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DC5A4(char **a1)
{
  sub_20B0DC68C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392129;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392129;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DC68C(uint64_t a1)
{
  sub_20B0DC774((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392128;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392128;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DC774(char **a1)
{
  sub_20B0DC85C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392073;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392073;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DC85C(uint64_t a1)
{
  sub_20B0DC944((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392072;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392072;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DC944(char **a1)
{
  sub_20B0DCA2C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392065;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392065;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DCA2C(uint64_t a1)
{
  sub_20B0DCB14((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2392064;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2392064;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DCB14(char **a1)
{
  sub_20B0DCBFC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363977;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363977;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DCBFC(uint64_t a1)
{
  sub_20B0DCCE4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363976;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363976;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DCCE4(char **a1)
{
  sub_20B0DCDCC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363969;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363969;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DCDCC(uint64_t a1)
{
  sub_20B0DCEB4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363968;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363968;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DCEB4(char **a1)
{
  sub_20B0DCF9C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363913;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363913;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DCF9C(uint64_t a1)
{
  sub_20B0DD084((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363912;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363912;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DD084(char **a1)
{
  sub_20B0DD16C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363905;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363905;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DD16C(uint64_t a1)
{
  sub_20B0DD254((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363904;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363904;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DD254(char **a1)
{
  sub_20B0DD33C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363465;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363465;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DD33C(uint64_t a1)
{
  sub_20B0DD424((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363464;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363464;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DD424(char **a1)
{
  sub_20B0DD50C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363457;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363457;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DD50C(uint64_t a1)
{
  sub_20B0DD5F4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363456;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363456;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DD5F4(char **a1)
{
  sub_20B0DD6DC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363401;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363401;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DD6DC(uint64_t a1)
{
  sub_20B0DD7C4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363400;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363400;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DD7C4(char **a1)
{
  sub_20B0DD8AC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363393;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363393;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DD8AC(uint64_t a1)
{
  sub_20B0DD994((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2363392;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2363392;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DD994(char **a1)
{
  sub_20B0DDA7C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359881;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359881;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DDA7C(uint64_t a1)
{
  sub_20B0DDB64((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359880;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359880;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DDB64(char **a1)
{
  sub_20B0DDC4C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359873;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359873;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DDC4C(uint64_t a1)
{
  sub_20B0DDD34((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359872;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359872;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DDD34(char **a1)
{
  sub_20B0DDE1C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359817;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359817;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DDE1C(uint64_t a1)
{
  sub_20B0DDF04((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359816;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359816;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DDF04(char **a1)
{
  sub_20B0DDFEC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359809;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359809;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DDFEC(uint64_t a1)
{
  sub_20B0DE0D4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359808;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359808;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DE0D4(char **a1)
{
  sub_20B0DE1BC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359369;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359369;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DE1BC(uint64_t a1)
{
  sub_20B0DE2A4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359368;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359368;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DE2A4(char **a1)
{
  sub_20B0DE38C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359361;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359361;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DE38C(uint64_t a1)
{
  sub_20B0DE474((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359360;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359360;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DE474(char **a1)
{
  sub_20B0DE55C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359305;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359305;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DE55C(uint64_t a1)
{
  sub_20B0DE644((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359304;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359304;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DE644(char **a1)
{
  sub_20B0DE72C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359297;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359297;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DE72C(uint64_t a1)
{
  sub_20B0DE80C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2359296;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2359296;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DE80C(char **a1)
{
  sub_20B0DE8F4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134601;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134601;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DE8F4(uint64_t a1)
{
  sub_20B0DE9DC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134600;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134600;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DE9DC(char **a1)
{
  sub_20B0DEAC4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134593;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134593;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DEAC4(uint64_t a1)
{
  sub_20B0DEBAC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134592;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134592;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DEBAC(char **a1)
{
  sub_20B0DEC94((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134537;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134537;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DEC94(uint64_t a1)
{
  sub_20B0DED7C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134536;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134536;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DED7C(char **a1)
{
  sub_20B0DEE64((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134529;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134529;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DEE64(uint64_t a1)
{
  sub_20B0DEF4C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134528;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134528;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DEF4C(char **a1)
{
  sub_20B0DF034((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134089;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134089;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DF034(uint64_t a1)
{
  sub_20B0DF11C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134088;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134088;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DF11C(char **a1)
{
  sub_20B0DF204((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134081;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134081;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DF204(uint64_t a1)
{
  sub_20B0DF2EC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134080;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134080;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DF2EC(char **a1)
{
  sub_20B0DF3D4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134025;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134025;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DF3D4(uint64_t a1)
{
  sub_20B0DF4BC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134024;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134024;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DF4BC(char **a1)
{
  sub_20B0DF5A4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134017;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134017;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DF5A4(uint64_t a1)
{
  sub_20B0DF68C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2134016;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2134016;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DF68C(char **a1)
{
  sub_20B0DF774((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2130505;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2130505;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DF774(uint64_t a1)
{
  sub_20B0DF85C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2130504;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2130504;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DF85C(char **a1)
{
  sub_20B0DF944((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2130497;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2130497;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DF944(uint64_t a1)
{
  sub_20B0DFA2C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2130496;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2130496;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DFA2C(char **a1)
{
  sub_20B0DFB14((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2130441;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2130441;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DFB14(uint64_t a1)
{
  sub_20B0DFBFC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2130440;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2130440;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DFBFC(char **a1)
{
  sub_20B0DFCE4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2130433;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2130433;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DFCE4(uint64_t a1)
{
  sub_20B0DFDCC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2130432;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2130432;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DFDCC(char **a1)
{
  sub_20B0DFEB4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2129993;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2129993;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0DFEB4(uint64_t a1)
{
  sub_20B0DFF9C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2129992;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2129992;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0DFF9C(char **a1)
{
  sub_20B0E0084((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2129985;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2129985;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E0084(uint64_t a1)
{
  sub_20B0E016C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2129984;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2129984;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E016C(char **a1)
{
  sub_20B0E0254((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2129929;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2129929;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E0254(uint64_t a1)
{
  sub_20B0E033C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2129928;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2129928;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E033C(char **a1)
{
  sub_20B0E0424((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2129921;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2129921;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E0424(uint64_t a1)
{
  sub_20B0E050C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2129920;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2129920;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E050C(char **a1)
{
  sub_20B0E05F4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101833;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101833;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E05F4(uint64_t a1)
{
  sub_20B0E06DC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101832;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101832;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E06DC(char **a1)
{
  sub_20B0E07C4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101825;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101825;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E07C4(uint64_t a1)
{
  sub_20B0E08AC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101824;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101824;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E08AC(char **a1)
{
  sub_20B0E0994((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101769;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101769;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E0994(uint64_t a1)
{
  sub_20B0E0A7C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101768;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101768;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E0A7C(char **a1)
{
  sub_20B0E0B64((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101761;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101761;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E0B64(uint64_t a1)
{
  sub_20B0E0C4C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101760;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101760;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E0C4C(char **a1)
{
  sub_20B0E0D34((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101321;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101321;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E0D34(uint64_t a1)
{
  sub_20B0E0E1C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101320;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101320;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E0E1C(char **a1)
{
  sub_20B0E0F04((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101313;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101313;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E0F04(uint64_t a1)
{
  sub_20B0E0FEC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101312;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101312;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E0FEC(char **a1)
{
  sub_20B0E10D4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101257;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101257;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E10D4(uint64_t a1)
{
  sub_20B0E11BC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101256;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101256;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E11BC(char **a1)
{
  sub_20B0E12A4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101249;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101249;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E12A4(uint64_t a1)
{
  sub_20B0E138C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2101248;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2101248;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E138C(char **a1)
{
  sub_20B0E1474((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097737;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097737;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E1474(uint64_t a1)
{
  sub_20B0E155C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097736;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097736;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E155C(char **a1)
{
  sub_20B0E1644((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097729;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097729;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E1644(uint64_t a1)
{
  sub_20B0E172C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097728;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097728;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E172C(char **a1)
{
  sub_20B0E1814((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097673;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097673;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E1814(uint64_t a1)
{
  sub_20B0E18FC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097672;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097672;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E18FC(char **a1)
{
  sub_20B0E19E4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097665;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097665;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E19E4(uint64_t a1)
{
  sub_20B0E1ACC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097664;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097664;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E1ACC(char **a1)
{
  sub_20B0E1BB4((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097225;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097225;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E1BB4(uint64_t a1)
{
  sub_20B0E1C9C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097224;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097224;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E1C9C(char **a1)
{
  sub_20B0E1D84((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097217;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097217;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E1D84(uint64_t a1)
{
  sub_20B0E1E6C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097216;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097216;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E1E6C(char **a1)
{
  sub_20B0E1F54((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097161;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097161;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E1F54(uint64_t a1)
{
  sub_20B0E203C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097160;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097160;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E203C(char **a1)
{
  sub_20B0E2124((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2097153;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 2097153;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E2124(uint64_t a1)
{
  sub_20B0E2204((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x200000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0x200000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E2204(char **a1)
{
  sub_20B0E22EC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299593;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299593;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E22EC(uint64_t a1)
{
  sub_20B0E23D4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299592;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299592;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E23D4(char **a1)
{
  sub_20B0E24BC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299585;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299585;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E24BC(uint64_t a1)
{
  sub_20B0E25A4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299584;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299584;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E25A4(char **a1)
{
  sub_20B0E268C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299529;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299529;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E268C(uint64_t a1)
{
  sub_20B0E2774((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299528;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299528;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E2774(char **a1)
{
  sub_20B0E285C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299521;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299521;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E285C(uint64_t a1)
{
  sub_20B0E2944((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299520;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299520;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E2944(char **a1)
{
  sub_20B0E2A2C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299081;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299081;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E2A2C(uint64_t a1)
{
  sub_20B0E2B14((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299080;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299080;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E2B14(char **a1)
{
  sub_20B0E2BFC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299073;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299073;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E2BFC(uint64_t a1)
{
  sub_20B0E2CE4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299072;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299072;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E2CE4(char **a1)
{
  sub_20B0E2DCC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299017;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299017;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E2DCC(uint64_t a1)
{
  sub_20B0E2EB4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299016;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299016;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E2EB4(char **a1)
{
  sub_20B0E2F9C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299009;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299009;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E2F9C(uint64_t a1)
{
  sub_20B0E3084((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 299008;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 299008;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E3084(char **a1)
{
  sub_20B0E316C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 295497;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 295497;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E316C(uint64_t a1)
{
  sub_20B0E3254((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 295496;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 295496;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E3254(char **a1)
{
  sub_20B0E333C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 295489;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 295489;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E333C(uint64_t a1)
{
  sub_20B0E3424((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 295488;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 295488;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E3424(char **a1)
{
  sub_20B0E350C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 295433;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 295433;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E350C(uint64_t a1)
{
  sub_20B0E35F4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 295432;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 295432;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E35F4(char **a1)
{
  sub_20B0E36DC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 295425;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 295425;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E36DC(uint64_t a1)
{
  sub_20B0E37C4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 295424;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 295424;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E37C4(char **a1)
{
  sub_20B0E38AC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 294985;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 294985;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E38AC(uint64_t a1)
{
  sub_20B0E3994((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 294984;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 294984;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E3994(char **a1)
{
  sub_20B0E3A7C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 294977;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 294977;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E3A7C(uint64_t a1)
{
  sub_20B0E3B64((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 294976;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 294976;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E3B64(char **a1)
{
  sub_20B0E3C4C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 294921;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 294921;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E3C4C(uint64_t a1)
{
  sub_20B0E3D34((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 294920;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 294920;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E3D34(char **a1)
{
  sub_20B0E3E1C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 294913;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 294913;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E3E1C(uint64_t a1)
{
  sub_20B0E3F04((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 294912;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 294912;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E3F04(char **a1)
{
  sub_20B0E3FEC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266825;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266825;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E3FEC(uint64_t a1)
{
  sub_20B0E40D4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266824;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266824;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E40D4(char **a1)
{
  sub_20B0E41BC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266817;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266817;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E41BC(uint64_t a1)
{
  sub_20B0E42A4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266816;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266816;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E42A4(char **a1)
{
  sub_20B0E438C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266761;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266761;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E438C(uint64_t a1)
{
  sub_20B0E4474((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266760;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266760;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E4474(char **a1)
{
  sub_20B0E455C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266753;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266753;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E455C(uint64_t a1)
{
  sub_20B0E4644((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266752;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266752;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E4644(char **a1)
{
  sub_20B0E472C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266313;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266313;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E472C(uint64_t a1)
{
  sub_20B0E4814((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266312;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266312;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E4814(char **a1)
{
  sub_20B0E48FC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266305;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266305;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E48FC(uint64_t a1)
{
  sub_20B0E49E4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266304;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266304;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E49E4(char **a1)
{
  sub_20B0E4ACC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266249;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266249;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E4ACC(uint64_t a1)
{
  sub_20B0E4BB4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266248;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266248;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E4BB4(char **a1)
{
  sub_20B0E4C9C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266241;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266241;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E4C9C(uint64_t a1)
{
  sub_20B0E4D84((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 266240;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 266240;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E4D84(char **a1)
{
  sub_20B0E4E6C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262729;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262729;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E4E6C(uint64_t a1)
{
  sub_20B0E4F54((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262728;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262728;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E4F54(char **a1)
{
  sub_20B0E503C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262721;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262721;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E503C(uint64_t a1)
{
  sub_20B0E5124((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262720;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262720;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E5124(char **a1)
{
  sub_20B0E520C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262665;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262665;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E520C(uint64_t a1)
{
  sub_20B0E52F4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262664;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262664;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E52F4(char **a1)
{
  sub_20B0E53DC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262657;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262657;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E53DC(uint64_t a1)
{
  sub_20B0E54C4((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262656;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262656;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E54C4(char **a1)
{
  sub_20B0E55AC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262217;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262217;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E55AC(uint64_t a1)
{
  sub_20B0E5694((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262216;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262216;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E5694(char **a1)
{
  sub_20B0E577C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262209;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262209;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E577C(uint64_t a1)
{
  sub_20B0E5864((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262208;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262208;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E5864(char **a1)
{
  sub_20B0E594C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262153;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262153;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E594C(uint64_t a1)
{
  sub_20B0E5A34((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262152;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262152;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E5A34(char **a1)
{
  sub_20B0E5B1C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 262145;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 262145;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E5B1C(uint64_t a1)
{
  sub_20B0E5BFC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x40000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0x40000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E5BFC(char **a1)
{
  sub_20B0E5CDC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 37449;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 37449;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E5CDC(uint64_t a1)
{
  sub_20B0E5DBC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 37448;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 37448;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E5DBC(char **a1)
{
  sub_20B0E5E9C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 37441;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 37441;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E5E9C(uint64_t a1)
{
  sub_20B0E5F7C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 37440;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 37440;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E5F7C(char **a1)
{
  sub_20B0E605C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 37385;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 37385;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E605C(uint64_t a1)
{
  sub_20B0E613C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 37384;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 37384;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E613C(char **a1)
{
  sub_20B0E621C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 37377;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 37377;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E621C(uint64_t a1)
{
  sub_20B0E62FC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 37376;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 37376;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E62FC(char **a1)
{
  sub_20B0E63DC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36937;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 36937;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E63DC(uint64_t a1)
{
  sub_20B0E64BC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36936;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 36936;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E64BC(char **a1)
{
  sub_20B0E659C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36929;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 36929;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E659C(uint64_t a1)
{
  sub_20B0E667C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36928;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 36928;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E667C(char **a1)
{
  sub_20B0E675C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36873;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 36873;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E675C(uint64_t a1)
{
  sub_20B0E683C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36872;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 36872;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E683C(char **a1)
{
  sub_20B0E691C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36865;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 36865;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E691C(uint64_t a1)
{
  sub_20B0E69FC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36864;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 36864;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E69FC(char **a1)
{
  sub_20B0E6ADC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 33353;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 33353;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E6ADC(uint64_t a1)
{
  sub_20B0E6BBC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 33352;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 33352;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E6BBC(char **a1)
{
  sub_20B0E6C9C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 33345;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 33345;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E6C9C(uint64_t a1)
{
  sub_20B0E6D7C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 33344;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 33344;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E6D7C(char **a1)
{
  sub_20B0E6E5C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 33289;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 33289;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E6E5C(uint64_t a1)
{
  sub_20B0E6F3C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 33288;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 33288;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E6F3C(char **a1)
{
  sub_20B0E701C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 33281;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 33281;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E701C(uint64_t a1)
{
  sub_20B0E70FC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 33280;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 33280;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E70FC(char **a1)
{
  sub_20B0E71DC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 32841;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 32841;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E71DC(uint64_t a1)
{
  sub_20B0E72BC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 32840;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 32840;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E72BC(char **a1)
{
  sub_20B0E739C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 32833;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 32833;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E739C(uint64_t a1)
{
  sub_20B0E747C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 32832;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 32832;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E747C(char **a1)
{
  sub_20B0E755C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 32777;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 32777;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E755C(uint64_t a1)
{
  sub_20B0E763C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 32776;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 32776;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E763C(char **a1)
{
  sub_20B0E771C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 32769;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 32769;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E771C(uint64_t a1)
{
  sub_20B0E77FC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x8000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 0x8000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E77FC(char **a1)
{
  sub_20B0E78DC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4681;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4681;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E78DC(uint64_t a1)
{
  sub_20B0E79BC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4680;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4680;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E79BC(char **a1)
{
  sub_20B0E7A9C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4673;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4673;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E7A9C(uint64_t a1)
{
  sub_20B0E7B7C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4672;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4672;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E7B7C(char **a1)
{
  sub_20B0E7C5C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4617;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4617;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E7C5C(uint64_t a1)
{
  sub_20B0E7D3C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4616;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4616;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E7D3C(char **a1)
{
  sub_20B0E7E1C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4609;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4609;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E7E1C(uint64_t a1)
{
  sub_20B0E7EFC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4608;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4608;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E7EFC(char **a1)
{
  sub_20B0E7FDC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4169;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4169;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E7FDC(uint64_t a1)
{
  sub_20B0E80BC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4168;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4168;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E80BC(char **a1)
{
  sub_20B0E819C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4161;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4161;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E819C(uint64_t a1)
{
  sub_20B0E827C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4160;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4160;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E827C(char **a1)
{
  sub_20B0E835C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4105;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4105;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E835C(uint64_t a1)
{
  sub_20B0E843C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4104;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4104;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E843C(char **a1)
{
  sub_20B0E851C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4097;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4097;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E851C(uint64_t a1)
{
  sub_20B0E85FC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4096;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 4096;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E85FC(char **a1)
{
  sub_20B0E86DC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 585;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 585;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E86DC(uint64_t a1)
{
  sub_20B0E87BC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 584;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 584;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E87BC(char **a1)
{
  sub_20B0E889C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 577;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 577;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E889C(uint64_t a1)
{
  sub_20B0E897C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 576;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 576;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E897C(char **a1)
{
  sub_20B0E8A5C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 521;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 521;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E8A5C(uint64_t a1)
{
  sub_20B0E8B3C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 520;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 520;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E8B3C(char **a1)
{
  sub_20B0E8C1C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 513;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 513;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E8C1C(uint64_t a1)
{
  sub_20B0E8CFC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 512;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 512;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E8CFC(char **a1)
{
  sub_20B0E8DDC((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 73;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E8DDC(uint64_t a1)
{
  sub_20B0E8EBC((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 72;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 72;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E8EBC(char **a1)
{
  sub_20B0E8F9C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 65;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 65;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E8F9C(uint64_t a1)
{
  sub_20B0E907C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 64;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 64;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E907C(char **a1)
{
  sub_20B0E915C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 9;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E915C(uint64_t a1)
{
  sub_20B0E923C((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      uint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 8;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E923C(char **a1)
{
  sub_20B0E931C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  uint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      long long v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      uint64_t v3 = a1[1];
    }
    else
    {
      long long v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v3 = 1;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E931C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  unint64_t v3 = *(void *)(a1 + 16);
  float v4 = *(void **)(a1 + 8);
  if ((unint64_t)v4 >= v3)
  {
    uint64_t v6 = *(void **)a1;
    uint64_t v7 = ((uint64_t)v4 - *(void *)a1) >> 3;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v9 = v3 - (void)v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      double v11 = (char *)sub_20B0602EC(v2, v10);
      uint64_t v6 = *(void **)a1;
      float v4 = *(void **)(a1 + 8);
    }
    else
    {
      double v11 = 0;
    }
    double v12 = &v11[8 * v7];
    uint64_t v13 = &v11[8 * v10];
    *(void *)double v12 = 0;
    float v5 = v12 + 8;
    while (v4 != v6)
    {
      uint64_t v14 = *--v4;
      *((void *)v12 - 1) = v14;
      v12 -= 8;
    }
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *float v4 = 0;
    float v5 = v4 + 1;
  }
  *(void *)(a1 + 8) = v5;
}

void sub_20B0E93F0(char **a1)
{
  sub_20B0E94D8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4793490;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4793490;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E94D8(uint64_t a1)
{
  sub_20B0E95C0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4793488;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4793488;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E95C0(char **a1)
{
  sub_20B0E96A8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4793474;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4793474;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E96A8(uint64_t a1)
{
  sub_20B0E9790((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4793472;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4793472;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E9790(char **a1)
{
  sub_20B0E9878((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4793362;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4793362;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E9878(uint64_t a1)
{
  sub_20B0E9960((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4793360;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4793360;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E9960(char **a1)
{
  sub_20B0E9A48((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4793346;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4793346;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E9A48(uint64_t a1)
{
  sub_20B0E9B30((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4793344;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4793344;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E9B30(char **a1)
{
  sub_20B0E9C18((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4792466;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4792466;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E9C18(uint64_t a1)
{
  sub_20B0E9D00((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4792464;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4792464;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E9D00(char **a1)
{
  sub_20B0E9DE8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4792450;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4792450;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E9DE8(uint64_t a1)
{
  sub_20B0E9ED0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4792448;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4792448;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0E9ED0(char **a1)
{
  sub_20B0E9FB8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4792338;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4792338;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0E9FB8(uint64_t a1)
{
  sub_20B0EA0A0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4792336;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4792336;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EA0A0(char **a1)
{
  sub_20B0EA188((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4792322;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4792322;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EA188(uint64_t a1)
{
  sub_20B0EA270((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4792320;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4792320;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EA270(char **a1)
{
  sub_20B0EA358((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4785298;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4785298;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EA358(uint64_t a1)
{
  sub_20B0EA440((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4785296;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4785296;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EA440(char **a1)
{
  sub_20B0EA528((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4785282;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4785282;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EA528(uint64_t a1)
{
  sub_20B0EA610((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4785280;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4785280;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EA610(char **a1)
{
  sub_20B0EA6F8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4785170;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4785170;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EA6F8(uint64_t a1)
{
  sub_20B0EA7E0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4785168;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4785168;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EA7E0(char **a1)
{
  sub_20B0EA8C8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4785154;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4785154;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EA8C8(uint64_t a1)
{
  sub_20B0EA9B0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4785152;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4785152;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EA9B0(char **a1)
{
  sub_20B0EAA98((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4784274;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4784274;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EAA98(uint64_t a1)
{
  sub_20B0EAB80((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4784272;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4784272;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EAB80(char **a1)
{
  sub_20B0EAC68((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4784258;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4784258;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EAC68(uint64_t a1)
{
  sub_20B0EAD50((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4784256;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4784256;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EAD50(char **a1)
{
  sub_20B0EAE38((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4784146;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4784146;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EAE38(uint64_t a1)
{
  sub_20B0EAF20((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4784144;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4784144;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EAF20(char **a1)
{
  sub_20B0EB008((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4784130;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4784130;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EB008(uint64_t a1)
{
  sub_20B0EB0E8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4784128;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4784128;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EB0E8(char **a1)
{
  sub_20B0EB1D0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4727954;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4727954;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EB1D0(uint64_t a1)
{
  sub_20B0EB2B8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4727952;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4727952;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EB2B8(char **a1)
{
  sub_20B0EB3A0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4727938;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4727938;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EB3A0(uint64_t a1)
{
  sub_20B0EB488((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4727936;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4727936;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EB488(char **a1)
{
  sub_20B0EB570((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4727826;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4727826;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EB570(uint64_t a1)
{
  sub_20B0EB658((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4727824;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4727824;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EB658(char **a1)
{
  sub_20B0EB740((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4727810;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4727810;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EB740(uint64_t a1)
{
  sub_20B0EB828((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4727808;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4727808;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EB828(char **a1)
{
  sub_20B0EB910((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4726930;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4726930;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EB910(uint64_t a1)
{
  sub_20B0EB9F8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4726928;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4726928;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EB9F8(char **a1)
{
  sub_20B0EBAE0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4726914;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4726914;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EBAE0(uint64_t a1)
{
  sub_20B0EBBC8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4726912;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4726912;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EBBC8(char **a1)
{
  sub_20B0EBCB0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4726802;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4726802;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EBCB0(uint64_t a1)
{
  sub_20B0EBD98((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4726800;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4726800;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EBD98(char **a1)
{
  sub_20B0EBE80((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4726786;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4726786;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EBE80(uint64_t a1)
{
  sub_20B0EBF68((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4726784;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4726784;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EBF68(char **a1)
{
  sub_20B0EC050((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4719762;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4719762;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EC050(uint64_t a1)
{
  sub_20B0EC138((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4719760;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4719760;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EC138(char **a1)
{
  sub_20B0EC220((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4719746;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4719746;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EC220(uint64_t a1)
{
  sub_20B0EC308((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4719744;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4719744;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EC308(char **a1)
{
  sub_20B0EC3F0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4719634;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4719634;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EC3F0(uint64_t a1)
{
  sub_20B0EC4D8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4719632;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4719632;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EC4D8(char **a1)
{
  sub_20B0EC5C0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4719618;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4719618;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EC5C0(uint64_t a1)
{
  sub_20B0EC6A8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4719616;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4719616;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EC6A8(char **a1)
{
  sub_20B0EC790((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4718738;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4718738;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EC790(uint64_t a1)
{
  sub_20B0EC878((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4718736;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4718736;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EC878(char **a1)
{
  sub_20B0EC960((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4718722;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4718722;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EC960(uint64_t a1)
{
  sub_20B0ECA48((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4718720;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4718720;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ECA48(char **a1)
{
  sub_20B0ECB30((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4718610;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4718610;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ECB30(uint64_t a1)
{
  sub_20B0ECC18((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4718608;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4718608;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ECC18(char **a1)
{
  sub_20B0ECD00((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4718594;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4718594;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ECD00(uint64_t a1)
{
  sub_20B0ECDE0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4718592;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4718592;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ECDE0(char **a1)
{
  sub_20B0ECEC8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4269202;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4269202;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ECEC8(uint64_t a1)
{
  sub_20B0ECFB0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4269200;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4269200;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ECFB0(char **a1)
{
  sub_20B0ED098((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4269186;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4269186;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ED098(uint64_t a1)
{
  sub_20B0ED180((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4269184;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4269184;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ED180(char **a1)
{
  sub_20B0ED268((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4269074;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4269074;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ED268(uint64_t a1)
{
  sub_20B0ED350((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4269072;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4269072;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ED350(char **a1)
{
  sub_20B0ED438((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4269058;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4269058;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ED438(uint64_t a1)
{
  sub_20B0ED520((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4269056;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4269056;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ED520(char **a1)
{
  sub_20B0ED608((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4268178;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4268178;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ED608(uint64_t a1)
{
  sub_20B0ED6F0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4268176;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4268176;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ED6F0(char **a1)
{
  sub_20B0ED7D8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4268162;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4268162;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ED7D8(uint64_t a1)
{
  sub_20B0ED8C0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4268160;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4268160;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0ED8C0(char **a1)
{
  sub_20B0ED9A8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4268050;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4268050;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0ED9A8(uint64_t a1)
{
  sub_20B0EDA90((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4268048;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4268048;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EDA90(char **a1)
{
  sub_20B0EDB78((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4268034;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4268034;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EDB78(uint64_t a1)
{
  sub_20B0EDC60((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4268032;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4268032;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EDC60(char **a1)
{
  sub_20B0EDD48((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4261010;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4261010;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EDD48(uint64_t a1)
{
  sub_20B0EDE30((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4261008;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4261008;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EDE30(char **a1)
{
  sub_20B0EDF18((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4260994;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4260994;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EDF18(uint64_t a1)
{
  sub_20B0EE000((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4260992;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4260992;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EE000(char **a1)
{
  sub_20B0EE0E8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4260882;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4260882;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EE0E8(uint64_t a1)
{
  sub_20B0EE1D0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4260880;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4260880;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EE1D0(char **a1)
{
  sub_20B0EE2B8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4260866;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4260866;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EE2B8(uint64_t a1)
{
  sub_20B0EE3A0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4260864;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4260864;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EE3A0(char **a1)
{
  sub_20B0EE488((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4259986;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4259986;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EE488(uint64_t a1)
{
  sub_20B0EE570((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4259984;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4259984;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EE570(char **a1)
{
  sub_20B0EE658((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4259970;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4259970;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EE658(uint64_t a1)
{
  sub_20B0EE740((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4259968;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4259968;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EE740(char **a1)
{
  sub_20B0EE828((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4259858;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4259858;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EE828(uint64_t a1)
{
  sub_20B0EE910((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4259856;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4259856;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EE910(char **a1)
{
  sub_20B0EE9F8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4259842;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4259842;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EE9F8(uint64_t a1)
{
  sub_20B0EEAD8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4259840;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4259840;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EEAD8(char **a1)
{
  sub_20B0EEBC0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4203666;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4203666;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EEBC0(uint64_t a1)
{
  sub_20B0EECA8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4203664;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4203664;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EECA8(char **a1)
{
  sub_20B0EED90((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4203650;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4203650;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EED90(uint64_t a1)
{
  sub_20B0EEE78((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4203648;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4203648;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EEE78(char **a1)
{
  sub_20B0EEF60((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4203538;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4203538;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EEF60(uint64_t a1)
{
  sub_20B0EF048((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4203536;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4203536;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EF048(char **a1)
{
  sub_20B0EF130((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4203522;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4203522;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EF130(uint64_t a1)
{
  sub_20B0EF218((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4203520;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4203520;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EF218(char **a1)
{
  sub_20B0EF300((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4202642;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4202642;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EF300(uint64_t a1)
{
  sub_20B0EF3E8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4202640;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4202640;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EF3E8(char **a1)
{
  sub_20B0EF4D0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4202626;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4202626;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EF4D0(uint64_t a1)
{
  sub_20B0EF5B8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4202624;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4202624;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EF5B8(char **a1)
{
  sub_20B0EF6A0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4202514;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4202514;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EF6A0(uint64_t a1)
{
  sub_20B0EF788((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4202512;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4202512;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EF788(char **a1)
{
  sub_20B0EF870((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4202498;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4202498;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EF870(uint64_t a1)
{
  sub_20B0EF958((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4202496;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4202496;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EF958(char **a1)
{
  sub_20B0EFA40((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4195474;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4195474;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EFA40(uint64_t a1)
{
  sub_20B0EFB28((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4195472;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4195472;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EFB28(char **a1)
{
  sub_20B0EFC10((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4195458;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4195458;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EFC10(uint64_t a1)
{
  sub_20B0EFCF8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4195456;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4195456;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EFCF8(char **a1)
{
  sub_20B0EFDE0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4195346;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4195346;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EFDE0(uint64_t a1)
{
  sub_20B0EFEC8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4195344;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4195344;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0EFEC8(char **a1)
{
  sub_20B0EFFB0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4195330;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4195330;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0EFFB0(uint64_t a1)
{
  sub_20B0F0098((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4195328;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4195328;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F0098(char **a1)
{
  sub_20B0F0180((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4194450;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4194450;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F0180(uint64_t a1)
{
  sub_20B0F0268((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4194448;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4194448;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F0268(char **a1)
{
  sub_20B0F0350((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4194434;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4194434;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F0350(uint64_t a1)
{
  sub_20B0F0438((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4194432;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4194432;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F0438(char **a1)
{
  sub_20B0F0520((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4194322;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4194322;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F0520(uint64_t a1)
{
  sub_20B0F0608((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4194320;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4194320;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F0608(char **a1)
{
  sub_20B0F06F0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4194306;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4194306;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F06F0(uint64_t a1)
{
  sub_20B0F07D0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x400000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x400000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F07D0(char **a1)
{
  sub_20B0F08B8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 599186;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 599186;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F08B8(uint64_t a1)
{
  sub_20B0F09A0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 599184;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 599184;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F09A0(char **a1)
{
  sub_20B0F0A88((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 599170;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 599170;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F0A88(uint64_t a1)
{
  sub_20B0F0B70((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 599168;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 599168;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F0B70(char **a1)
{
  sub_20B0F0C58((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 599058;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 599058;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F0C58(uint64_t a1)
{
  sub_20B0F0D40((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 599056;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 599056;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F0D40(char **a1)
{
  sub_20B0F0E28((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 599042;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 599042;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F0E28(uint64_t a1)
{
  sub_20B0F0F10((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 599040;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 599040;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F0F10(char **a1)
{
  sub_20B0F0FF8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 598162;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 598162;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F0FF8(uint64_t a1)
{
  sub_20B0F10E0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 598160;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 598160;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F10E0(char **a1)
{
  sub_20B0F11C8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 598146;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 598146;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F11C8(uint64_t a1)
{
  sub_20B0F12B0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 598144;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 598144;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F12B0(char **a1)
{
  sub_20B0F1398((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 598034;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 598034;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F1398(uint64_t a1)
{
  sub_20B0F1480((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 598032;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 598032;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F1480(char **a1)
{
  sub_20B0F1568((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 598018;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 598018;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F1568(uint64_t a1)
{
  sub_20B0F1650((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 598016;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 598016;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F1650(char **a1)
{
  sub_20B0F1738((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 590994;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 590994;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F1738(uint64_t a1)
{
  sub_20B0F1820((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 590992;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 590992;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F1820(char **a1)
{
  sub_20B0F1908((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 590978;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 590978;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F1908(uint64_t a1)
{
  sub_20B0F19F0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 590976;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 590976;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F19F0(char **a1)
{
  sub_20B0F1AD8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 590866;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 590866;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F1AD8(uint64_t a1)
{
  sub_20B0F1BC0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 590864;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 590864;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F1BC0(char **a1)
{
  sub_20B0F1CA8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 590850;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 590850;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F1CA8(uint64_t a1)
{
  sub_20B0F1D90((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 590848;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 590848;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F1D90(char **a1)
{
  sub_20B0F1E78((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 589970;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 589970;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F1E78(uint64_t a1)
{
  sub_20B0F1F60((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 589968;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 589968;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F1F60(char **a1)
{
  sub_20B0F2048((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 589954;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 589954;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F2048(uint64_t a1)
{
  sub_20B0F2130((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 589952;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 589952;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F2130(char **a1)
{
  sub_20B0F2218((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 589842;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 589842;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F2218(uint64_t a1)
{
  sub_20B0F2300((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 589840;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 589840;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F2300(char **a1)
{
  sub_20B0F23E8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 589826;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 589826;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F23E8(uint64_t a1)
{
  sub_20B0F24C8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 589824;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 589824;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F24C8(char **a1)
{
  sub_20B0F25B0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 533650;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 533650;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F25B0(uint64_t a1)
{
  sub_20B0F2698((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 533648;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 533648;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F2698(char **a1)
{
  sub_20B0F2780((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 533634;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 533634;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F2780(uint64_t a1)
{
  sub_20B0F2868((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 533632;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 533632;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F2868(char **a1)
{
  sub_20B0F2950((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 533522;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 533522;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F2950(uint64_t a1)
{
  sub_20B0F2A38((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 533520;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 533520;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F2A38(char **a1)
{
  sub_20B0F2B20((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 533506;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 533506;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F2B20(uint64_t a1)
{
  sub_20B0F2C08((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 533504;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 533504;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F2C08(char **a1)
{
  sub_20B0F2CF0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 532626;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 532626;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F2CF0(uint64_t a1)
{
  sub_20B0F2DD8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 532624;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 532624;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F2DD8(char **a1)
{
  sub_20B0F2EC0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 532610;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 532610;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F2EC0(uint64_t a1)
{
  sub_20B0F2FA8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 532608;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 532608;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F2FA8(char **a1)
{
  sub_20B0F3090((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 532498;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 532498;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F3090(uint64_t a1)
{
  sub_20B0F3178((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 532496;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 532496;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F3178(char **a1)
{
  sub_20B0F3260((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 532482;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 532482;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F3260(uint64_t a1)
{
  sub_20B0F3348((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 532480;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 532480;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F3348(char **a1)
{
  sub_20B0F3430((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 525458;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 525458;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F3430(uint64_t a1)
{
  sub_20B0F3518((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 525456;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 525456;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F3518(char **a1)
{
  sub_20B0F3600((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 525442;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 525442;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F3600(uint64_t a1)
{
  sub_20B0F36E8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 525440;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 525440;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F36E8(char **a1)
{
  sub_20B0F37D0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 525330;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 525330;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F37D0(uint64_t a1)
{
  sub_20B0F38B8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 525328;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 525328;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F38B8(char **a1)
{
  sub_20B0F39A0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 525314;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 525314;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F39A0(uint64_t a1)
{
  sub_20B0F3A88((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 525312;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 525312;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F3A88(char **a1)
{
  sub_20B0F3B70((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 524434;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 524434;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F3B70(uint64_t a1)
{
  sub_20B0F3C58((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 524432;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 524432;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F3C58(char **a1)
{
  sub_20B0F3D40((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 524418;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 524418;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F3D40(uint64_t a1)
{
  sub_20B0F3E28((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 524416;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 524416;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F3E28(char **a1)
{
  sub_20B0F3F10((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 524306;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 524306;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F3F10(uint64_t a1)
{
  sub_20B0F3FF8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 524304;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 524304;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F3FF8(char **a1)
{
  sub_20B0F40E0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 524290;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 524290;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F40E0(uint64_t a1)
{
  sub_20B0F41C0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x80000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x80000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F41C0(char **a1)
{
  sub_20B0F42A8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 74898;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 74898;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F42A8(uint64_t a1)
{
  sub_20B0F4390((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 74896;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 74896;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F4390(char **a1)
{
  sub_20B0F4478((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 74882;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 74882;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F4478(uint64_t a1)
{
  sub_20B0F4560((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 74880;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 74880;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F4560(char **a1)
{
  sub_20B0F4648((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 74770;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 74770;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F4648(uint64_t a1)
{
  sub_20B0F4730((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 74768;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 74768;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F4730(char **a1)
{
  sub_20B0F4818((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 74754;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 74754;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F4818(uint64_t a1)
{
  sub_20B0F4900((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 74752;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 74752;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F4900(char **a1)
{
  sub_20B0F49E8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73874;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 73874;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F49E8(uint64_t a1)
{
  sub_20B0F4AD0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73872;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 73872;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F4AD0(char **a1)
{
  sub_20B0F4BB8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73858;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 73858;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F4BB8(uint64_t a1)
{
  sub_20B0F4CA0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73856;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 73856;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F4CA0(char **a1)
{
  sub_20B0F4D88((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73746;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 73746;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F4D88(uint64_t a1)
{
  sub_20B0F4E70((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73744;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 73744;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F4E70(char **a1)
{
  sub_20B0F4F58((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73730;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 73730;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F4F58(uint64_t a1)
{
  sub_20B0F5040((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 73728;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 73728;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F5040(char **a1)
{
  sub_20B0F5128((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 66706;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 66706;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F5128(uint64_t a1)
{
  sub_20B0F5210((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 66704;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 66704;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F5210(char **a1)
{
  sub_20B0F52F8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 66690;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 66690;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F52F8(uint64_t a1)
{
  sub_20B0F53E0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 66688;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 66688;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F53E0(char **a1)
{
  sub_20B0F54C8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 66578;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 66578;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F54C8(uint64_t a1)
{
  sub_20B0F55B0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 66576;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 66576;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F55B0(char **a1)
{
  sub_20B0F5698((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 66562;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 66562;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F5698(uint64_t a1)
{
  sub_20B0F5780((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 66560;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 66560;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F5780(char **a1)
{
  sub_20B0F5868((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 65682;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 65682;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F5868(uint64_t a1)
{
  sub_20B0F5950((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 65680;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 65680;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F5950(char **a1)
{
  sub_20B0F5A38((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 65666;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 65666;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F5A38(uint64_t a1)
{
  sub_20B0F5B20((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 65664;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 65664;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F5B20(char **a1)
{
  sub_20B0F5C08((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 65554;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 65554;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F5C08(uint64_t a1)
{
  sub_20B0F5CF0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 65552;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 65552;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F5CF0(char **a1)
{
  sub_20B0F5DD8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 65538;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 65538;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F5DD8(uint64_t a1)
{
  sub_20B0F5EB8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x10000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x10000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F5EB8(char **a1)
{
  sub_20B0F5F98((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9362;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9362;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F5F98(uint64_t a1)
{
  sub_20B0F6078((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9360;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9360;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F6078(char **a1)
{
  sub_20B0F6158((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9346;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9346;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F6158(uint64_t a1)
{
  sub_20B0F6238((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9344;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9344;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F6238(char **a1)
{
  sub_20B0F6318((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9234;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9234;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F6318(uint64_t a1)
{
  sub_20B0F63F8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9232;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9232;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F63F8(char **a1)
{
  sub_20B0F64D8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9218;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9218;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F64D8(uint64_t a1)
{
  sub_20B0F65B8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9216;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9216;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F65B8(char **a1)
{
  sub_20B0F6698((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8338;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8338;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F6698(uint64_t a1)
{
  sub_20B0F6778((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8336;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8336;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F6778(char **a1)
{
  sub_20B0F6858((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8322;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8322;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F6858(uint64_t a1)
{
  sub_20B0F6938((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8320;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8320;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F6938(char **a1)
{
  sub_20B0F6A18((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8210;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8210;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F6A18(uint64_t a1)
{
  sub_20B0F6AF8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8208;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8208;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F6AF8(char **a1)
{
  sub_20B0F6BD8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8194;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8194;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F6BD8(uint64_t a1)
{
  sub_20B0F6CB8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x2000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x2000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F6CB8(char **a1)
{
  sub_20B0F6D98((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1170;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1170;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F6D98(uint64_t a1)
{
  sub_20B0F6E78((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1168;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1168;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F6E78(char **a1)
{
  sub_20B0F6F58((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1154;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1154;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F6F58(uint64_t a1)
{
  sub_20B0F7038((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1152;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1152;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F7038(char **a1)
{
  sub_20B0F7118((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1042;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1042;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F7118(uint64_t a1)
{
  sub_20B0F71F8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1040;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1040;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F71F8(char **a1)
{
  sub_20B0F72D8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1026;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1026;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F72D8(uint64_t a1)
{
  sub_20B0F73B8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1024;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1024;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F73B8(char **a1)
{
  sub_20B0F7498((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 146;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 146;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F7498(uint64_t a1)
{
  sub_20B0F7578((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 144;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 144;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F7578(char **a1)
{
  sub_20B0F7658((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 130;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 130;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F7658(uint64_t a1)
{
  sub_20B0F7738((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 128;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 128;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F7738(char **a1)
{
  sub_20B0F7818((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F7818(uint64_t a1)
{
  sub_20B0F78F8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 16;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 16;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F78F8(char **a1)
{
  sub_20B0E931C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F79D8(char **a1)
{
  sub_20B0F7AC0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9586980;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9586980;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F7AC0(uint64_t a1)
{
  sub_20B0F7BA8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9586976;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9586976;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F7BA8(char **a1)
{
  sub_20B0F7C90((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9586948;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9586948;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F7C90(uint64_t a1)
{
  sub_20B0F7D78((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9586944;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9586944;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F7D78(char **a1)
{
  sub_20B0F7E60((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9586724;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9586724;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F7E60(uint64_t a1)
{
  sub_20B0F7F48((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9586720;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9586720;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F7F48(char **a1)
{
  sub_20B0F8030((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9586692;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9586692;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F8030(uint64_t a1)
{
  sub_20B0F8118((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9586688;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9586688;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F8118(char **a1)
{
  sub_20B0F8200((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9584932;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9584932;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F8200(uint64_t a1)
{
  sub_20B0F82E8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9584928;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9584928;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F82E8(char **a1)
{
  sub_20B0F83D0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9584900;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9584900;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F83D0(uint64_t a1)
{
  sub_20B0F84B8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9584896;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9584896;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F84B8(char **a1)
{
  sub_20B0F85A0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9584676;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9584676;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F85A0(uint64_t a1)
{
  sub_20B0F8688((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9584672;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9584672;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F8688(char **a1)
{
  sub_20B0F8770((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9584644;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9584644;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F8770(uint64_t a1)
{
  sub_20B0F8858((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9584640;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9584640;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F8858(char **a1)
{
  sub_20B0F8940((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9570596;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9570596;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F8940(uint64_t a1)
{
  sub_20B0F8A28((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9570592;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9570592;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F8A28(char **a1)
{
  sub_20B0F8B10((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9570564;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9570564;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F8B10(uint64_t a1)
{
  sub_20B0F8BF8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9570560;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9570560;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F8BF8(char **a1)
{
  sub_20B0F8CE0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9570340;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9570340;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F8CE0(uint64_t a1)
{
  sub_20B0F8DC8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9570336;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9570336;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F8DC8(char **a1)
{
  sub_20B0F8EB0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9570308;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9570308;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F8EB0(uint64_t a1)
{
  sub_20B0F8F98((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9570304;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9570304;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F8F98(char **a1)
{
  sub_20B0F9080((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9568548;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9568548;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F9080(uint64_t a1)
{
  sub_20B0F9168((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9568544;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9568544;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F9168(char **a1)
{
  sub_20B0F9250((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9568516;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9568516;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F9250(uint64_t a1)
{
  sub_20B0F9338((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9568512;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9568512;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F9338(char **a1)
{
  sub_20B0F9420((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9568292;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9568292;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F9420(uint64_t a1)
{
  sub_20B0F9508((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9568288;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9568288;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F9508(char **a1)
{
  sub_20B0F95F0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9568260;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9568260;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F95F0(uint64_t a1)
{
  sub_20B0F96D0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9568256;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9568256;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F96D0(char **a1)
{
  sub_20B0F97B8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9455908;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9455908;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F97B8(uint64_t a1)
{
  sub_20B0F98A0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9455904;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9455904;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F98A0(char **a1)
{
  sub_20B0F9988((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9455876;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9455876;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F9988(uint64_t a1)
{
  sub_20B0F9A70((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9455872;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9455872;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F9A70(char **a1)
{
  sub_20B0F9B58((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9455652;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9455652;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F9B58(uint64_t a1)
{
  sub_20B0F9C40((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9455648;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9455648;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F9C40(char **a1)
{
  sub_20B0F9D28((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9455620;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9455620;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F9D28(uint64_t a1)
{
  sub_20B0F9E10((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9455616;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9455616;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F9E10(char **a1)
{
  sub_20B0F9EF8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9453860;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9453860;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0F9EF8(uint64_t a1)
{
  sub_20B0F9FE0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9453856;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9453856;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0F9FE0(char **a1)
{
  sub_20B0FA0C8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9453828;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9453828;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FA0C8(uint64_t a1)
{
  sub_20B0FA1B0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9453824;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9453824;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FA1B0(char **a1)
{
  sub_20B0FA298((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9453604;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9453604;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FA298(uint64_t a1)
{
  sub_20B0FA380((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9453600;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9453600;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FA380(char **a1)
{
  sub_20B0FA468((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9453572;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9453572;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FA468(uint64_t a1)
{
  sub_20B0FA550((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9453568;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9453568;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FA550(char **a1)
{
  sub_20B0FA638((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9439524;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9439524;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FA638(uint64_t a1)
{
  sub_20B0FA720((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9439520;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9439520;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FA720(char **a1)
{
  sub_20B0FA808((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9439492;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9439492;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FA808(uint64_t a1)
{
  sub_20B0FA8F0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9439488;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9439488;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FA8F0(char **a1)
{
  sub_20B0FA9D8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9439268;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9439268;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FA9D8(uint64_t a1)
{
  sub_20B0FAAC0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9439264;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9439264;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FAAC0(char **a1)
{
  sub_20B0FABA8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9439236;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9439236;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FABA8(uint64_t a1)
{
  sub_20B0FAC90((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9439232;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9439232;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FAC90(char **a1)
{
  sub_20B0FAD78((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9437476;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9437476;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FAD78(uint64_t a1)
{
  sub_20B0FAE60((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9437472;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9437472;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FAE60(char **a1)
{
  sub_20B0FAF48((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9437444;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9437444;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FAF48(uint64_t a1)
{
  sub_20B0FB030((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9437440;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9437440;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FB030(char **a1)
{
  sub_20B0FB118((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9437220;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9437220;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FB118(uint64_t a1)
{
  sub_20B0FB200((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9437216;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9437216;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FB200(char **a1)
{
  sub_20B0FB2E8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9437188;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9437188;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FB2E8(uint64_t a1)
{
  sub_20B0FB3C8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 9437184;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 9437184;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FB3C8(char **a1)
{
  sub_20B0FB4B0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8538404;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8538404;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FB4B0(uint64_t a1)
{
  sub_20B0FB598((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8538400;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8538400;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FB598(char **a1)
{
  sub_20B0FB680((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8538372;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8538372;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FB680(uint64_t a1)
{
  sub_20B0FB768((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8538368;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8538368;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FB768(char **a1)
{
  sub_20B0FB850((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8538148;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8538148;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FB850(uint64_t a1)
{
  sub_20B0FB938((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8538144;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8538144;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FB938(char **a1)
{
  sub_20B0FBA20((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8538116;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8538116;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FBA20(uint64_t a1)
{
  sub_20B0FBB08((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8538112;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8538112;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FBB08(char **a1)
{
  sub_20B0FBBF0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8536356;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8536356;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FBBF0(uint64_t a1)
{
  sub_20B0FBCD8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8536352;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8536352;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FBCD8(char **a1)
{
  sub_20B0FBDC0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8536324;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8536324;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FBDC0(uint64_t a1)
{
  sub_20B0FBEA8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8536320;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8536320;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FBEA8(char **a1)
{
  sub_20B0FBF90((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8536100;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8536100;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FBF90(uint64_t a1)
{
  sub_20B0FC078((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8536096;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8536096;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FC078(char **a1)
{
  sub_20B0FC160((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8536068;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8536068;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FC160(uint64_t a1)
{
  sub_20B0FC248((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8536064;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8536064;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FC248(char **a1)
{
  sub_20B0FC330((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8522020;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8522020;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FC330(uint64_t a1)
{
  sub_20B0FC418((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8522016;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8522016;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FC418(char **a1)
{
  sub_20B0FC500((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8521988;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8521988;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FC500(uint64_t a1)
{
  sub_20B0FC5E8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8521984;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8521984;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FC5E8(char **a1)
{
  sub_20B0FC6D0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8521764;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8521764;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FC6D0(uint64_t a1)
{
  sub_20B0FC7B8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8521760;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8521760;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FC7B8(char **a1)
{
  sub_20B0FC8A0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8521732;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8521732;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FC8A0(uint64_t a1)
{
  sub_20B0FC988((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8521728;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8521728;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FC988(char **a1)
{
  sub_20B0FCA70((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8519972;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8519972;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FCA70(uint64_t a1)
{
  sub_20B0FCB58((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8519968;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8519968;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FCB58(char **a1)
{
  sub_20B0FCC40((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8519940;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8519940;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FCC40(uint64_t a1)
{
  sub_20B0FCD28((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8519936;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8519936;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FCD28(char **a1)
{
  sub_20B0FCE10((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8519716;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8519716;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FCE10(uint64_t a1)
{
  sub_20B0FCEF8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8519712;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8519712;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FCEF8(char **a1)
{
  sub_20B0FCFE0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8519684;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8519684;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FCFE0(uint64_t a1)
{
  sub_20B0FD0C0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8519680;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8519680;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FD0C0(char **a1)
{
  sub_20B0FD1A8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8407332;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8407332;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FD1A8(uint64_t a1)
{
  sub_20B0FD290((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8407328;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8407328;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FD290(char **a1)
{
  sub_20B0FD378((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8407300;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8407300;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FD378(uint64_t a1)
{
  sub_20B0FD460((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8407296;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8407296;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FD460(char **a1)
{
  sub_20B0FD548((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8407076;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8407076;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FD548(uint64_t a1)
{
  sub_20B0FD630((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8407072;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8407072;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FD630(char **a1)
{
  sub_20B0FD718((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8407044;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8407044;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FD718(uint64_t a1)
{
  sub_20B0FD800((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8407040;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8407040;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FD800(char **a1)
{
  sub_20B0FD8E8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8405284;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8405284;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FD8E8(uint64_t a1)
{
  sub_20B0FD9D0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8405280;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8405280;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FD9D0(char **a1)
{
  sub_20B0FDAB8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8405252;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8405252;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FDAB8(uint64_t a1)
{
  sub_20B0FDBA0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8405248;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8405248;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FDBA0(char **a1)
{
  sub_20B0FDC88((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8405028;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8405028;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FDC88(uint64_t a1)
{
  sub_20B0FDD70((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8405024;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8405024;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FDD70(char **a1)
{
  sub_20B0FDE58((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8404996;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8404996;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FDE58(uint64_t a1)
{
  sub_20B0FDF40((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8404992;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8404992;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FDF40(char **a1)
{
  sub_20B0FE028((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8390948;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8390948;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FE028(uint64_t a1)
{
  sub_20B0FE110((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8390944;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8390944;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FE110(char **a1)
{
  sub_20B0FE1F8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8390916;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8390916;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FE1F8(uint64_t a1)
{
  sub_20B0FE2E0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8390912;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8390912;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FE2E0(char **a1)
{
  sub_20B0FE3C8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8390692;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8390692;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FE3C8(uint64_t a1)
{
  sub_20B0FE4B0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8390688;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8390688;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FE4B0(char **a1)
{
  sub_20B0FE598((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8390660;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8390660;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FE598(uint64_t a1)
{
  sub_20B0FE680((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8390656;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8390656;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FE680(char **a1)
{
  sub_20B0FE768((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8388900;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8388900;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FE768(uint64_t a1)
{
  sub_20B0FE850((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8388896;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8388896;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FE850(char **a1)
{
  sub_20B0FE938((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8388868;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8388868;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FE938(uint64_t a1)
{
  sub_20B0FEA20((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8388864;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8388864;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FEA20(char **a1)
{
  sub_20B0FEB08((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8388644;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8388644;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FEB08(uint64_t a1)
{
  sub_20B0FEBF0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8388640;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8388640;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FEBF0(char **a1)
{
  sub_20B0FECD8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 8388612;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 8388612;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FECD8(uint64_t a1)
{
  sub_20B0FEDB8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x800000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x800000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FEDB8(char **a1)
{
  sub_20B0FEEA0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1198372;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1198372;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FEEA0(uint64_t a1)
{
  sub_20B0FEF88((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1198368;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1198368;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FEF88(char **a1)
{
  sub_20B0FF070((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1198340;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1198340;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FF070(uint64_t a1)
{
  sub_20B0FF158((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1198336;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1198336;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FF158(char **a1)
{
  sub_20B0FF240((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1198116;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1198116;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FF240(uint64_t a1)
{
  sub_20B0FF328((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1198112;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1198112;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FF328(char **a1)
{
  sub_20B0FF410((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1198084;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1198084;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FF410(uint64_t a1)
{
  sub_20B0FF4F8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1198080;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1198080;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FF4F8(char **a1)
{
  sub_20B0FF5E0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1196324;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1196324;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FF5E0(uint64_t a1)
{
  sub_20B0FF6C8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1196320;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1196320;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FF6C8(char **a1)
{
  sub_20B0FF7B0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1196292;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1196292;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FF7B0(uint64_t a1)
{
  sub_20B0FF898((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1196288;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1196288;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FF898(char **a1)
{
  sub_20B0FF980((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1196068;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1196068;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FF980(uint64_t a1)
{
  sub_20B0FFA68((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1196064;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1196064;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FFA68(char **a1)
{
  sub_20B0FFB50((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1196036;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1196036;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FFB50(uint64_t a1)
{
  sub_20B0FFC38((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1196032;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1196032;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FFC38(char **a1)
{
  sub_20B0FFD20((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1181988;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1181988;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FFD20(uint64_t a1)
{
  sub_20B0FFE08((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1181984;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1181984;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FFE08(char **a1)
{
  sub_20B0FFEF0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1181956;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1181956;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B0FFEF0(uint64_t a1)
{
  sub_20B0FFFD8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1181952;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1181952;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B0FFFD8(char **a1)
{
  sub_20B1000C0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1181732;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1181732;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1000C0(uint64_t a1)
{
  sub_20B1001A8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1181728;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1181728;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1001A8(char **a1)
{
  sub_20B100290((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1181700;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1181700;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B100290(uint64_t a1)
{
  sub_20B100378((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1181696;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1181696;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B100378(char **a1)
{
  sub_20B100460((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1179940;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1179940;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B100460(uint64_t a1)
{
  sub_20B100548((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1179936;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1179936;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B100548(char **a1)
{
  sub_20B100630((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1179908;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1179908;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B100630(uint64_t a1)
{
  sub_20B100718((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1179904;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1179904;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B100718(char **a1)
{
  sub_20B100800((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1179684;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1179684;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B100800(uint64_t a1)
{
  sub_20B1008E8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1179680;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1179680;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1008E8(char **a1)
{
  sub_20B1009D0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1179652;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1179652;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1009D0(uint64_t a1)
{
  sub_20B100AB0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1179648;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1179648;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B100AB0(char **a1)
{
  sub_20B100B98((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1067300;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1067300;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B100B98(uint64_t a1)
{
  sub_20B100C80((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1067296;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1067296;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B100C80(char **a1)
{
  sub_20B100D68((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1067268;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1067268;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B100D68(uint64_t a1)
{
  sub_20B100E50((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1067264;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1067264;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B100E50(char **a1)
{
  sub_20B100F38((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1067044;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1067044;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B100F38(uint64_t a1)
{
  sub_20B101020((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1067040;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1067040;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B101020(char **a1)
{
  sub_20B101108((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1067012;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1067012;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B101108(uint64_t a1)
{
  sub_20B1011F0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1067008;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1067008;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1011F0(char **a1)
{
  sub_20B1012D8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1065252;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1065252;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1012D8(uint64_t a1)
{
  sub_20B1013C0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1065248;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1065248;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1013C0(char **a1)
{
  sub_20B1014A8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1065220;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1065220;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1014A8(uint64_t a1)
{
  sub_20B101590((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1065216;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1065216;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B101590(char **a1)
{
  sub_20B101678((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1064996;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1064996;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B101678(uint64_t a1)
{
  sub_20B101760((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1064992;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1064992;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B101760(char **a1)
{
  sub_20B101848((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1064964;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1064964;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B101848(uint64_t a1)
{
  sub_20B101930((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1064960;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1064960;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B101930(char **a1)
{
  sub_20B101A18((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1050916;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1050916;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B101A18(uint64_t a1)
{
  sub_20B101B00((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1050912;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1050912;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B101B00(char **a1)
{
  sub_20B101BE8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1050884;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1050884;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B101BE8(uint64_t a1)
{
  sub_20B101CD0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1050880;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1050880;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B101CD0(char **a1)
{
  sub_20B101DB8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1050660;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1050660;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B101DB8(uint64_t a1)
{
  sub_20B101EA0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1050656;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1050656;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B101EA0(char **a1)
{
  sub_20B101F88((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1050628;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1050628;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B101F88(uint64_t a1)
{
  sub_20B102070((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1050624;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1050624;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B102070(char **a1)
{
  sub_20B102158((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1048868;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1048868;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B102158(uint64_t a1)
{
  sub_20B102240((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1048864;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1048864;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B102240(char **a1)
{
  sub_20B102328((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1048836;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1048836;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B102328(uint64_t a1)
{
  sub_20B102410((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1048832;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1048832;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B102410(char **a1)
{
  sub_20B1024F8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1048612;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1048612;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1024F8(uint64_t a1)
{
  sub_20B1025E0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1048608;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1048608;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1025E0(char **a1)
{
  sub_20B1026C8((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 1048580;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 1048580;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1026C8(uint64_t a1)
{
  sub_20B1027A8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x100000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x100000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1027A8(char **a1)
{
  sub_20B102890((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 149796;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 149796;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B102890(uint64_t a1)
{
  sub_20B102978((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 149792;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 149792;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B102978(char **a1)
{
  sub_20B102A60((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 149764;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 149764;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B102A60(uint64_t a1)
{
  sub_20B102B48((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 149760;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 149760;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B102B48(char **a1)
{
  sub_20B102C30((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 149540;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 149540;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B102C30(uint64_t a1)
{
  sub_20B102D18((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 149536;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 149536;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B102D18(char **a1)
{
  sub_20B102E00((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 149508;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 149508;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B102E00(uint64_t a1)
{
  sub_20B102EE8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 149504;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 149504;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B102EE8(char **a1)
{
  sub_20B102FD0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 147748;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 147748;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B102FD0(uint64_t a1)
{
  sub_20B1030B8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 147744;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 147744;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1030B8(char **a1)
{
  sub_20B1031A0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 147716;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 147716;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1031A0(uint64_t a1)
{
  sub_20B103288((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 147712;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 147712;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B103288(char **a1)
{
  sub_20B103370((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 147492;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 147492;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B103370(uint64_t a1)
{
  sub_20B103458((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 147488;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 147488;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B103458(char **a1)
{
  sub_20B103540((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 147460;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 147460;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B103540(uint64_t a1)
{
  sub_20B103628((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 147456;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 147456;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B103628(char **a1)
{
  sub_20B103710((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 133412;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 133412;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B103710(uint64_t a1)
{
  sub_20B1037F8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 133408;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 133408;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1037F8(char **a1)
{
  sub_20B1038E0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 133380;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 133380;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1038E0(uint64_t a1)
{
  sub_20B1039C8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 133376;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 133376;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1039C8(char **a1)
{
  sub_20B103AB0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 133156;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 133156;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B103AB0(uint64_t a1)
{
  sub_20B103B98((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 133152;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 133152;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B103B98(char **a1)
{
  sub_20B103C80((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 133124;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 133124;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B103C80(uint64_t a1)
{
  sub_20B103D68((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 133120;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 133120;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B103D68(char **a1)
{
  sub_20B103E50((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 131364;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 131364;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B103E50(uint64_t a1)
{
  sub_20B103F38((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 131360;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 131360;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B103F38(char **a1)
{
  sub_20B104020((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 131332;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 131332;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B104020(uint64_t a1)
{
  sub_20B104108((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 131328;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 131328;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B104108(char **a1)
{
  sub_20B1041F0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 131108;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 131108;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1041F0(uint64_t a1)
{
  sub_20B1042D8((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 131104;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 131104;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1042D8(char **a1)
{
  sub_20B1043C0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 131076;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 131076;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1043C0(uint64_t a1)
{
  sub_20B1044A0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x20000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x20000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1044A0(char **a1)
{
  sub_20B104580((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18724;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18724;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B104580(uint64_t a1)
{
  sub_20B104660((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18720;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18720;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B104660(char **a1)
{
  sub_20B104740((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18692;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18692;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B104740(uint64_t a1)
{
  sub_20B104820((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18688;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18688;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B104820(char **a1)
{
  sub_20B104900((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18468;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18468;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B104900(uint64_t a1)
{
  sub_20B1049E0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18464;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18464;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1049E0(char **a1)
{
  sub_20B104AC0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18436;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18436;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B104AC0(uint64_t a1)
{
  sub_20B104BA0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 18432;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 18432;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B104BA0(char **a1)
{
  sub_20B104C80((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 16676;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 16676;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B104C80(uint64_t a1)
{
  sub_20B104D60((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 16672;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 16672;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B104D60(char **a1)
{
  sub_20B104E40((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 16644;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 16644;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B104E40(uint64_t a1)
{
  sub_20B104F20((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 16640;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 16640;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B104F20(char **a1)
{
  sub_20B105000((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 16420;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 16420;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B105000(uint64_t a1)
{
  sub_20B1050E0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 16416;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 16416;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1050E0(char **a1)
{
  sub_20B1051C0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 16388;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 16388;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1051C0(uint64_t a1)
{
  sub_20B1052A0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 0x4000;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 0x4000;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1052A0(char **a1)
{
  sub_20B105380((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2340;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2340;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B105380(uint64_t a1)
{
  sub_20B105460((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2336;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2336;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B105460(char **a1)
{
  sub_20B105540((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2308;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2308;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B105540(uint64_t a1)
{
  sub_20B105620((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2304;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2304;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B105620(char **a1)
{
  sub_20B105700((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2084;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2084;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B105700(uint64_t a1)
{
  sub_20B1057E0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2080;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2080;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1057E0(char **a1)
{
  sub_20B1058C0((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2052;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2052;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B1058C0(uint64_t a1)
{
  sub_20B1059A0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 2048;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 2048;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B1059A0(char **a1)
{
  sub_20B105A80((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 292;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 292;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B105A80(uint64_t a1)
{
  sub_20B105B60((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 288;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 288;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B105B60(char **a1)
{
  sub_20B105C40((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 260;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 260;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B105C40(uint64_t a1)
{
  sub_20B105D20((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 256;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 256;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B105D20(char **a1)
{
  sub_20B105E00((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 36;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 36;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B105E00(uint64_t a1)
{
  sub_20B105EE0((char **)a1);
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(char **)(a1 + 8);
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *(char **)a1;
    uint64_t v6 = (uint64_t)&v3[-*(void *)a1] >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC(a1 + 16, v9);
      float v5 = *(char **)a1;
      unint64_t v3 = *(char **)(a1 + 8);
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 32;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 32;
    float v4 = v3 + 8;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_20B105EE0(char **a1)
{
  sub_20B0E931C((uint64_t)a1);
  unint64_t v2 = (unint64_t)a1[2];
  unint64_t v3 = a1[1];
  if ((unint64_t)v3 >= v2)
  {
    float v5 = *a1;
    uint64_t v6 = (v3 - *a1) >> 3;
    unint64_t v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v8 = v2 - (void)v5;
    if (v8 >> 2 > v7) {
      unint64_t v7 = v8 >> 2;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      unint64_t v10 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v9);
      float v5 = *a1;
      unint64_t v3 = a1[1];
    }
    else
    {
      unint64_t v10 = 0;
    }
    double v11 = &v10[8 * v6];
    double v12 = &v10[8 * v9];
    *(void *)double v11 = 4;
    float v4 = v11 + 8;
    while (v3 != v5)
    {
      uint64_t v13 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)unint64_t v3 = 4;
    float v4 = v3 + 8;
  }
  a1[1] = v4;
}

void sub_20B106064(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v3, 0x1030C403C5DC1E9);

  _Unwind_Resume(a1);
}

void sub_20B106144(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v3, 0x1030C403C5DC1E9);

  _Unwind_Resume(a1);
}

void sub_20B106354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_20B05F1D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B106388(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[25];
    if (v3)
    {
      a2[26] = v3;
      operator delete(v3);
    }
    float v4 = (void *)a2[11];
    if (v4)
    {
      a2[12] = v4;
      operator delete(v4);
    }
    float v5 = (void *)a2[8];
    if (v5)
    {
      a2[9] = v5;
      operator delete(v5);
    }
    uint64_t v6 = (void *)a2[5];
    if (v6)
    {
      a2[6] = v6;
      operator delete(v6);
    }
    unint64_t v7 = (void *)a2[1];
    if (v7)
    {
      a2[2] = v7;
      operator delete(v7);
    }
    JUMPOUT(0x210532650);
  }
}

void sub_20B106424(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = a2;
  *(void *)a1 = &unk_26BF4F628;
  operator new();
}

void sub_20B1064CC(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_26BF4F688;
  sub_20B0780A4(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_20B106504(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4F628;
  uint64_t v2 = *(void **)(a1 + 176);
  if (v2)
  {
    *(void *)(a1 + 184) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }
  float v4 = *(void **)(a1 + 128);
  if (v4)
  {
    *(void *)(a1 + 136) = v4;
    operator delete(v4);
  }
  float v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(void *)(a1 + 112) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(void *)(a1 + 88) = v6;
    operator delete(v6);
  }
  unint64_t v9 = (void **)(a1 + 56);
  sub_20B10CA34(&v9);
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7) {
    sub_20B081CD8(v7);
  }
  *(void *)a1 = &unk_26BF4F688;
  sub_20B0780A4(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_20B1065E4(uint64_t a1)
{
  sub_20B106504(a1);

  JUMPOUT(0x210532650);
}

void sub_20B10661C(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  memset(&__str, 0, sizeof(__str));
  if (!sub_20B107254(a3, (uint64_t)&__str))
  {
    sub_20B07F8E0(a4, "Parse PLY: Bad header");
    goto LABEL_181;
  }
  memset(v93, 0, sizeof(v93));
  *(_OWORD *)v91 = 0u;
  long long v92 = 0u;
  memset(v90, 0, sizeof(v90));
  long long v89 = 0u;
  sub_20B107464((uint64_t)&v89);
  uint64_t v8 = (std::string *)v91;
  std::string::operator=((std::string *)v91, &__str);
  unint64_t v9 = v90;
  sub_20B07FB7C((uint64_t)v90);
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  sub_20B06D9BC((uint64_t *)&v89, (uint64_t)&v86);
  if (SHIBYTE(v88) < 0)
  {
    if (v87 != 6) {
      goto LABEL_12;
    }
    unint64_t v10 = (unsigned __int16 *)v86;
  }
  else
  {
    if (SHIBYTE(v88) != 6) {
      goto LABEL_12;
    }
    unint64_t v10 = (unsigned __int16 *)&v86;
  }
  int v11 = *(_DWORD *)v10;
  int v12 = v10[2];
  if (v11 == 1836216166 && v12 == 29793)
  {
    sub_20B06D9BC((uint64_t *)&v89, a2);
    goto LABEL_13;
  }
LABEL_12:
  MEMORY[0x210532310](a2, "ascii");
LABEL_13:
  uint64_t v14 = a1 + 7;
  uint64_t v73 = (uint64_t)(a1 + 9);
  while (sub_20B107254(a3, (uint64_t)&__str))
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::ios_base::clear((std::ios_base *)((char *)&v90[-1] + *(void *)(v89 - 24)), 0);
      std::string::operator=(v8, &__str);
      sub_20B07FB7C((uint64_t)v9);
      uint64_t v83 = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      sub_20B06D9BC((uint64_t *)&v89, (uint64_t)&v83);
      if (SHIBYTE(v85) < 0)
      {
        uint64_t v17 = v84;
        if (v84 != 7)
        {
          if (v84 != 8 || *(void *)v83 != 0x79747265706F7270) {
            goto LABEL_32;
          }
LABEL_42:
          if (a1[8] == a1[7])
          {
            char v22 = 0;
            if (v85 < 0) {
              goto LABEL_66;
            }
            goto LABEL_173;
          }
          v75[0] = 0;
          v75[1] = 0;
          uint64_t v76 = 0;
          sub_20B06D9BC((uint64_t *)&v89, (uint64_t)v75);
          if ((SHIBYTE(v76) & 0x80000000) == 0)
          {
            if (SHIBYTE(v76) == 4)
            {
              float64x2_t v23 = v75;
              goto LABEL_70;
            }
            goto LABEL_71;
          }
          if (v75[1] != (void *)4) {
            goto LABEL_71;
          }
          float64x2_t v23 = (void **)v75[0];
LABEL_70:
          if (*(_DWORD *)v23 == 1953720684)
          {
            sub_20B06D9BC((uint64_t *)&v89, (uint64_t)v75);
            int v39 = sub_20B1075FC(v75);
            sub_20B06D9BC((uint64_t *)&v89, (uint64_t)v75);
          }
          else
          {
LABEL_71:
            int v39 = 8;
          }
          long long v95 = 0uLL;
          uint64_t v96 = 0;
          sub_20B06D9BC((uint64_t *)&v89, (uint64_t)&v95);
          if (SHIBYTE(v96) < 0)
          {
            uint64_t v43 = *((void *)&v95 + 1);
            if (*((void *)&v95 + 1) == 1)
            {
              unsigned int v42 = *(unsigned __int8 *)v95 - 120;
              if (v42 >= 3) {
                LOBYTE(v42) = 10;
              }
LABEL_111:
              int v40 = v42;
            }
            else
            {
              if (*((void *)&v95 + 1) != 2) {
                goto LABEL_78;
              }
              if (*(_WORD *)v95 == 30830)
              {
LABEL_136:
                int v40 = 3;
                goto LABEL_149;
              }
              if (*(_WORD *)v95 == 31086)
              {
LABEL_140:
                int v40 = 4;
                goto LABEL_149;
              }
              int v40 = *(_WORD *)v95 == 31342 ? 5 : 10;
              if (*(_WORD *)v95 != 31342)
              {
LABEL_78:
                if (*((void *)&v95 + 1) == 3)
                {
                  if (*(_WORD *)v95 == 25970 && *(unsigned char *)(v95 + 2) == 100)
                  {
                    int v40 = 6;
                    goto LABEL_149;
                  }
                  uint64_t v43 = *((void *)&v95 + 1);
                }
                if (v43 == 5)
                {
                  if (*(_DWORD *)v95 == 1701147239 && *(unsigned char *)(v95 + 4) == 110)
                  {
LABEL_137:
                    int v40 = 7;
                    goto LABEL_149;
                  }
                  uint64_t v43 = *((void *)&v95 + 1);
                }
                if (v43 == 4)
                {
                  if (*(_DWORD *)v95 == 1702194274)
                  {
                    int v40 = 8;
                    goto LABEL_149;
                  }
                  uint64_t v43 = *((void *)&v95 + 1);
                }
                if (v43 == 14)
                {
                  if (*(void *)v95 == 0x695F786574726576 && *(void *)(v95 + 6) == 0x73656369646E695FLL)
                  {
LABEL_138:
                    int v40 = 9;
                    goto LABEL_149;
                  }
                  uint64_t v43 = *((void *)&v95 + 1);
                }
                if (v43 == 12)
                {
                  uint64_t v41 = (long long *)v95;
                  goto LABEL_122;
                }
                int v40 = 10;
              }
            }
          }
          else
          {
            int v40 = 10;
            uint64_t v41 = &v95;
            switch(HIBYTE(v96))
            {
              case 1:
                unsigned int v42 = v95 - 120;
                if (v42 < 3) {
                  goto LABEL_111;
                }
                goto LABEL_149;
              case 2:
                switch((unsigned __int16)v95)
                {
                  case 0x786Eu:
                    goto LABEL_136;
                  case 0x796Eu:
                    goto LABEL_140;
                  case 0x7A6Eu:
                    int v40 = 5;
                    break;
                }
                goto LABEL_149;
              case 3:
                if ((unsigned __int16)v95 ^ 0x6572 | BYTE2(v95) ^ 0x64) {
                  int v40 = 10;
                }
                else {
                  int v40 = 6;
                }
                goto LABEL_149;
              case 4:
                goto LABEL_133;
              case 5:
                if (v95 == 1701147239 && BYTE4(v95) == 110) {
                  goto LABEL_137;
                }
                if (HIBYTE(v96) == 4)
                {
LABEL_133:
                  if (v95 == 1702194274) {
                    int v40 = 8;
                  }
                  else {
                    int v40 = 10;
                  }
                }
                goto LABEL_149;
              case 0xC:
                break;
              case 0xE:
                if ((void)v95 == 0x695F786574726576 && *(void *)((char *)&v95 + 6) == 0x73656369646E695FLL) {
                  goto LABEL_138;
                }
                if (HIBYTE(v96) != 12) {
                  goto LABEL_149;
                }
                uint64_t v41 = &v95;
                break;
              default:
                goto LABEL_149;
            }
LABEL_122:
            unint64_t v48 = 0x7665727465785F69;
            unint64_t v49 = bswap64(*(void *)v41);
            if (v49 == 0x7665727465785F69)
            {
              unint64_t v49 = bswap32(*((_DWORD *)v41 + 2));
              if (v49 == 1852073336)
              {
                int v50 = 0;
                goto LABEL_146;
              }
              unint64_t v48 = 1852073336;
            }
            if (v49 < v48) {
              int v50 = -1;
            }
            else {
              int v50 = 1;
            }
LABEL_146:
            if (v50) {
              int v40 = 10;
            }
            else {
              int v40 = 9;
            }
          }
LABEL_149:
          uint64_t v74 = v9;
          long double v52 = v8;
          int v53 = v39;
          uint64_t v54 = a1[8] - 56;
          int v55 = sub_20B1075FC(v75);
          int v56 = v55;
          unint64_t v57 = *(void *)(v54 + 16);
          uint64_t v58 = *(int **)(v54 + 8);
          if ((unint64_t)v58 >= v57)
          {
            uint64_t v60 = a1;
            uint64_t v61 = v14;
            uint64_t v62 = a4;
            double v63 = *(int **)v54;
            unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v58 - *(void *)v54) >> 2);
            unint64_t v65 = v64 + 1;
            if (v64 + 1 > 0x1555555555555555) {
              sub_20B05D0BC();
            }
            unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (void)v63) >> 2);
            if (2 * v66 > v65) {
              unint64_t v65 = 2 * v66;
            }
            if (v66 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v67 = 0x1555555555555555;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67)
            {
              float v68 = (char *)sub_20B07D4F8(v54 + 16, v67);
              double v63 = *(int **)v54;
              uint64_t v58 = *(int **)(v54 + 8);
            }
            else
            {
              float v68 = 0;
            }
            uint64_t v69 = (int *)&v68[12 * v64];
            *uint64_t v69 = v40;
            v69[1] = v56;
            v69[2] = v53;
            uint64_t v70 = v69;
            a4 = v62;
            if (v58 == v63)
            {
              uint64_t v14 = v61;
              uint64_t v8 = v52;
            }
            else
            {
              uint64_t v8 = v52;
              do
              {
                uint64_t v71 = *(void *)(v58 - 3);
                v58 -= 3;
                int v72 = v58[2];
                *(void *)(v70 - 3) = v71;
                v70 -= 3;
                v70[2] = v72;
              }
              while (v58 != v63);
              double v63 = *(int **)v54;
              uint64_t v14 = v61;
            }
            unint64_t v9 = v74;
            float v59 = v69 + 3;
            *(void *)uint64_t v54 = v70;
            *(void *)(v54 + 8) = v69 + 3;
            *(void *)(v54 + 16) = &v68[12 * v67];
            a1 = v60;
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *uint64_t v58 = v40;
            v58[1] = v55;
            float v59 = v58 + 3;
            v58[2] = v53;
            uint64_t v8 = v52;
            unint64_t v9 = v74;
          }
          *(void *)(v54 + 8) = v59;
          if (SHIBYTE(v96) < 0) {
            operator delete((void *)v95);
          }
          if (SHIBYTE(v76) < 0)
          {
            uint64_t v38 = v75[0];
            goto LABEL_171;
          }
          goto LABEL_172;
        }
        if (*(_DWORD *)v83 != 1835363429 || *(_DWORD *)((char *)v83 + 3) != 1953391981)
        {
          uint64_t v17 = v84;
LABEL_32:
          if (v17 != 10) {
            goto LABEL_172;
          }
          uint64_t v16 = (unsigned __int16 *)v83;
          goto LABEL_34;
        }
LABEL_51:
        long long v81 = 0uLL;
        uint64_t v82 = 0;
        sub_20B06D9BC((uint64_t *)&v89, (uint64_t)&v81);
        uint64_t v80 = 0;
        MEMORY[0x210532430](&v89, &v80);
        sub_20B10C638(v75, &v81, v80);
        unint64_t v25 = a1[8];
        unint64_t v26 = a1[9];
        if (v25 >= v26)
        {
          uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25 - *v14) >> 3);
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) > 0x492492492492492) {
            sub_20B05D0BC();
          }
          unint64_t v30 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26 - *v14) >> 3);
          if (2 * v30 > v29) {
            unint64_t v29 = 2 * v30;
          }
          if (v30 >= 0x249249249249249) {
            unint64_t v31 = 0x492492492492492;
          }
          else {
            unint64_t v31 = v29;
          }
          uint64_t v98 = v73;
          uint64_t v32 = (char *)sub_20B10CB9C(v73, v31);
          uint64_t v33 = &v32[56 * v28];
          *(void *)&long long v95 = v32;
          *((void *)&v95 + 1) = v33;
          v97 = &v32[56 * v34];
          *(void *)uint64_t v33 = 0;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = 0;
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v75;
          *((void *)v33 + 2) = v76;
          v75[0] = 0;
          v75[1] = 0;
          uint64_t v76 = 0;
          long long v35 = __p;
          *((void *)v33 + 5) = v78;
          *(_OWORD *)(v33 + 24) = v35;
          uint64_t v78 = 0;
          long long __p = 0uLL;
          *((void *)v33 + 6) = v79;
          uint64_t v96 = v33 + 56;
          sub_20B10CB24(v14, &v95);
          uint64_t v36 = a1[8];
          sub_20B10CD38((void **)&v95);
          int v37 = SHIBYTE(v78);
          a1[8] = v36;
          if (v37 < 0) {
            operator delete((void *)__p);
          }
        }
        else
        {
          *(void *)unint64_t v25 = 0;
          *(void *)(v25 + 8) = 0;
          *(void *)(v25 + 16) = 0;
          *(_OWORD *)unint64_t v25 = *(_OWORD *)v75;
          *(void *)(v25 + 16) = v76;
          v75[0] = 0;
          v75[1] = 0;
          uint64_t v76 = 0;
          uint64_t v27 = v78;
          *(_OWORD *)(v25 + 24) = __p;
          *(void *)(v25 + 40) = v27;
          uint64_t v78 = 0;
          long long __p = 0uLL;
          *(void *)(v25 + 48) = v79;
          a1[8] = v25 + 56;
        }
        if (v75[0])
        {
          v75[1] = v75[0];
          operator delete(v75[0]);
        }
        if (SHIBYTE(v82) < 0)
        {
          uint64_t v38 = (void *)v81;
LABEL_171:
          operator delete(v38);
        }
LABEL_172:
        char v22 = 0;
        if ((v85 & 0x8000000000000000) == 0) {
          goto LABEL_173;
        }
LABEL_66:
        operator delete(v83);
        if (v22) {
          break;
        }
      }
      else
      {
        if (HIBYTE(v85) == 7)
        {
          if (v83 != 1835363429 || *(_DWORD *)((char *)&v83 + 3) != 1953391981) {
            goto LABEL_172;
          }
          goto LABEL_51;
        }
        if (HIBYTE(v85) == 8)
        {
          if (v83 != (void *)0x79747265706F7270) {
            goto LABEL_172;
          }
          goto LABEL_42;
        }
        if (HIBYTE(v85) != 10) {
          goto LABEL_172;
        }
        uint64_t v16 = (unsigned __int16 *)&v83;
LABEL_34:
        uint64_t v19 = *(void *)v16;
        int v20 = v16[4];
        if (v19 != 0x646165685F646E65 || v20 != 29285) {
          goto LABEL_172;
        }
        char v22 = 1;
        if (v85 < 0) {
          goto LABEL_66;
        }
LABEL_173:
        if (v22) {
          break;
        }
      }
    }
  }
  sub_20B07F8E0(a4, "");
  if (SHIBYTE(v88) < 0) {
    operator delete(v86);
  }
  *(void *)&long long v89 = *MEMORY[0x263F8C2C0];
  *(void *)((char *)&v90[-1] + *(void *)(v89 - 24)) = *(void *)(MEMORY[0x263F8C2C0] + 24);
  *(void *)&v90[0] = MEMORY[0x263F8C318] + 16;
  if (SBYTE7(v92) < 0) {
    operator delete(v91[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x2105325E0]((char *)v93 + 8);
LABEL_181:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_20B10713C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (*(char *)(v43 - 105) < 0) {
    operator delete(*(void **)(v43 - 128));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  sub_20B06DD8C((uint64_t)&a43);
  if (*(char *)(v43 - 129) < 0) {
    operator delete(*(void **)(v43 - 152));
  }
  _Unwind_Resume(a1);
}

BOOL sub_20B107254(void *a1, uint64_t a2)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  float v4 = std::locale::use_facet(&v29, MEMORY[0x263F8C108]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v29);
  uint64_t v6 = sub_20B10C718(a1, a2, v5);
  int v7 = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5;
  if (!v7)
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    int v9 = (char)v8;
    uint64_t v10 = a2 + v8;
    if (v9 >= 0) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = *(void *)a2 + *(void *)(a2 + 8);
    }
    if (v9 >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    uint64_t v13 = MEMORY[0x263EF8318];
    while (v11 != v12)
    {
      unsigned int v15 = *(char *)--v11;
      unsigned int v14 = v15;
      if ((v15 & 0x80000000) != 0)
      {
        if (!__maskrune(v14, 0x4000uLL))
        {
LABEL_14:
          uint64_t v12 = v11 + 1;
          break;
        }
      }
      else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) == 0)
      {
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
    int v17 = (char)v16;
    uint64_t v18 = a2 + v16;
    if (v17 >= 0)
    {
      uint64_t v19 = a2;
    }
    else
    {
      uint64_t v18 = *(void *)a2 + *(void *)(a2 + 8);
      uint64_t v19 = *(void *)a2;
    }
    std::string::erase((std::string *)a2, v12 - v19, v18 - v12);
    int v20 = *(char *)(a2 + 23);
    uint64_t v21 = *(void *)a2;
    if (v20 >= 0) {
      uint64_t v22 = a2;
    }
    else {
      uint64_t v22 = *(void *)a2;
    }
    if (v20 >= 0) {
      uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v23 = *(void *)(a2 + 8);
    }
    if (v23)
    {
      double v24 = (char *)(v22 + v23);
      unint64_t v25 = (char *)v22;
      do
      {
        unsigned int v26 = *v25;
        if ((v26 & 0x80000000) != 0)
        {
          if (!__maskrune(v26, 0x4000uLL)) {
            goto LABEL_32;
          }
        }
        else if ((*(_DWORD *)(v13 + 4 * v26 + 60) & 0x4000) == 0)
        {
          goto LABEL_32;
        }
        ++v25;
        --v23;
      }
      while (v23);
      unint64_t v25 = v24;
LABEL_32:
      LOBYTE(v20) = *(unsigned char *)(a2 + 23);
      uint64_t v21 = *(void *)a2;
    }
    else
    {
      unint64_t v25 = (char *)v22;
    }
    if ((v20 & 0x80u) == 0) {
      uint64_t v27 = a2;
    }
    else {
      uint64_t v27 = v21;
    }
    std::string::erase((std::string *)a2, v22 - v27, (std::string::size_type)&v25[-v22]);
  }
  return v7 == 0;
}

void sub_20B107450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_20B107464(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C338] + 64;
  *(void *)(a1 + 120) = MEMORY[0x263F8C338] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  unsigned __int8 v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 16));
  uint64_t v6 = MEMORY[0x263F8C338] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 120) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  return a1;
}

void sub_20B1075D4(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2105325E0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1075FC(void *a1)
{
  int v2 = *((unsigned __int8 *)a1 + 23);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    switch(*((unsigned char *)a1 + 23))
    {
      case 3:
        goto LABEL_3;
      case 4:
        int v7 = a1;
        if (*(_DWORD *)a1 == 1918986339) {
          return 0;
        }
        goto LABEL_61;
      case 5:
        if (*(_DWORD *)a1 == 1634231157 && *((unsigned char *)a1 + 4) == 114) {
          return 1;
        }
        if (v2 == 3) {
          goto LABEL_3;
        }
        int v7 = a1;
        if (v2 == 4) {
          goto LABEL_61;
        }
        if (v2 != 5) {
          goto LABEL_62;
        }
        if (*(_DWORD *)a1 != 1919903859 || *((unsigned char *)a1 + 4) != 116) {
          goto LABEL_62;
        }
        return 2;
      case 6:
        if (*(_DWORD *)a1 == 1869116277 && *((_WORD *)a1 + 2) == 29810) {
          return 3;
        }
        int v7 = a1;
        if (v2 == 4) {
          goto LABEL_61;
        }
        if (v2 != 3) {
          goto LABEL_62;
        }
        goto LABEL_3;
      default:
        goto LABEL_62;
    }
  }
  uint64_t v4 = a1[1];
  if (v4 == 4 && *(_DWORD *)*a1 == 1918986339) {
    return 0;
  }
  if (v4 == 5)
  {
    if (*(_DWORD *)*a1 == 1634231157 && *(unsigned char *)(*a1 + 4) == 114) {
      return 1;
    }
    uint64_t v4 = a1[1];
    if (v4 == 5)
    {
      if (*(_DWORD *)*a1 == 1919903859 && *(unsigned char *)(*a1 + 4) == 116) {
        return 2;
      }
      if ((v2 & 0x80) == 0)
      {
        if (v2 != 3)
        {
          int v7 = a1;
          if (v2 != 4) {
            goto LABEL_62;
          }
          goto LABEL_61;
        }
LABEL_3:
        if (*(_WORD *)a1 != 28265 || *((unsigned char *)a1 + 2) != 116)
        {
          if ((v2 & 0x80) == 0) {
            goto LABEL_62;
          }
          goto LABEL_36;
        }
        return 4;
      }
    }
  }
  if (v4 == 6)
  {
    if (*(_DWORD *)*a1 == 1869116277 && *(_WORD *)(*a1 + 4) == 29810) {
      return 3;
    }
    uint64_t v4 = a1[1];
  }
  if (v4 != 3) {
    goto LABEL_37;
  }
  if (*(_WORD *)*a1 == 28265 && *(unsigned char *)(*a1 + 2) == 116) {
    return 4;
  }
LABEL_36:
  uint64_t v4 = a1[1];
LABEL_37:
  if (v4 != 4) {
    goto LABEL_62;
  }
  int v7 = (_DWORD *)*a1;
LABEL_61:
  if (*v7 == 1953393013) {
    return 5;
  }
LABEL_62:
  if (sub_20B06DC90(a1, "float")) {
    return 6;
  }
  if (sub_20B06DC90(a1, "double")) {
    return 7;
  }
  if (sub_20B06DC90(a1, "int8")) {
    return 0;
  }
  if (sub_20B06DC90(a1, "uint8")) {
    return 1;
  }
  if (sub_20B06DC90(a1, "int16")) {
    return 2;
  }
  if (sub_20B06DC90(a1, "uint16")) {
    return 3;
  }
  if (sub_20B06DC90(a1, "int32")) {
    return 4;
  }
  if (sub_20B06DC90(a1, "uint32")) {
    return 5;
  }
  if (sub_20B06DC90(a1, "float32")) {
    return 6;
  }
  if (sub_20B06DC90(a1, "float64")) {
    return 7;
  }
  else {
    return 8;
  }
}

uint64_t sub_20B107968(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20B1079AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a2 + 8);
  if (v7 == 8)
  {
    sub_20B107A3C(a4, a3, *(_DWORD *)(a2 + 4));
    return 1;
  }
  sub_20B107A3C(a4, a3, v7);
  int v9 = (int)v8;
  if ((int)v8 <= 0x400)
  {
    for (; v9; --v9)
      sub_20B107A3C(a4, a3, *(_DWORD *)(a2 + 4));
    return 1;
  }
  return 0;
}

uint64_t sub_20B107A3C(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_20B05FF90();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void sub_20B107A90(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  v114[0] = 0;
  v114[1] = 0;
  uint64_t v115 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v6 = std::locale::use_facet(&v122, MEMORY[0x263F8C108]);
  unsigned __int8 v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v122);
  float v8 = sub_20B10C718(a2, (uint64_t)v114, v7);
  if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
  {
    sub_20B07F8E0(a3, "Parse PLY: Empty file");
    goto LABEL_59;
  }
  if (v115 >= 0) {
    int v9 = v114;
  }
  else {
    int v9 = (void **)v114[0];
  }
  if (strncmp("ply", (const char *)v9, 3uLL))
  {
    sub_20B07F8E0(a3, "Parse PLY: Bad format");
    goto LABEL_59;
  }
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v110 = 0;
  sub_20B10661C(a1, (uint64_t)&v111, a2, __p);
  uint64_t v10 = (void *)HIBYTE(v110);
  if (v110 < 0) {
    uint64_t v10 = __p[1];
  }
  if (v10)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    a3[2] = v110;
    goto LABEL_57;
  }
  memset(v121, 0, 32);
  memset(v120, 0, sizeof(v120));
  memset(v119, 0, sizeof(v119));
  if ((v113 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v113) != 5)
    {
      if (HIBYTE(v113) != 17)
      {
        if (HIBYTE(v113) != 20) {
          goto LABEL_54;
        }
        BOOL v11 = v111 == (void *)0x6C5F7972616E6962 && v112 == 0x6E655F656C747469;
        if (!v11 || v113 != 1851877732) {
          goto LABEL_54;
        }
        goto LABEL_62;
      }
      uint64_t v13 = (uint64_t *)&v111;
LABEL_41:
      uint64_t v18 = *v13;
      uint64_t v19 = v13[1];
      int v20 = *((unsigned __int8 *)v13 + 16);
      if (v18 != 0x625F7972616E6962 || v19 != 0x6169646E655F6769 || v20 != 110) {
        goto LABEL_54;
      }
      sub_20B108850(v121, (uint64_t)sub_20B108D1C);
      sub_20B1089AC(v120, (uint64_t)sub_20B108E4C);
      sub_20B1089AC(v119, (uint64_t)sub_20B108F9C);
      goto LABEL_65;
    }
    if (v111 != 1768125281 || BYTE4(v111) != 105) {
      goto LABEL_54;
    }
LABEL_63:
    v122.__locale_ = (std::locale::__imp *)&unk_26BF4ED88;
    uint64_t v123 = sub_20B10878C;
    unint64_t v124 = &v122;
    sub_20B10CF3C(&v122, v121);
    uint64_t v27 = sub_20B10CDB4(&v122);
    v122.__locale_ = (std::locale::__imp *)&unk_26BF4ED30;
    uint64_t v123 = sub_20B1088E0;
    unint64_t v124 = &v122;
    sub_20B10CF3C(v27, v120);
    unint64_t v25 = sub_20B10CDB4(&v122);
    v122.__locale_ = (std::locale::__imp *)&unk_26BF4ED30;
    unsigned int v26 = sub_20B108A3C;
    goto LABEL_64;
  }
  uint64_t v14 = v112;
  if (v112 == 5 && *(_DWORD *)v111 == 1768125281 && *((unsigned char *)v111 + 4) == 105) {
    goto LABEL_63;
  }
  if (v112 != 20)
  {
LABEL_39:
    if (v14 != 17)
    {
LABEL_54:
      sub_20B07F8E0(a3, "Parse PLY: Bad format");
      goto LABEL_55;
    }
    uint64_t v13 = (uint64_t *)v111;
    goto LABEL_41;
  }
  if (*(void *)v111 != 0x6C5F7972616E6962
    || *((void *)v111 + 1) != 0x6E655F656C747469
    || *((_DWORD *)v111 + 4) != 1851877732)
  {
    uint64_t v14 = v112;
    goto LABEL_39;
  }
LABEL_62:
  v122.__locale_ = (std::locale::__imp *)&unk_26BF4ED88;
  uint64_t v123 = sub_20B108A7C;
  unint64_t v124 = &v122;
  sub_20B10CF3C(&v122, v121);
  double v24 = sub_20B10CDB4(&v122);
  v122.__locale_ = (std::locale::__imp *)&unk_26BF4ED30;
  uint64_t v123 = sub_20B108B9C;
  unint64_t v124 = &v122;
  sub_20B10CF3C(v24, v120);
  unint64_t v25 = sub_20B10CDB4(&v122);
  v122.__locale_ = (std::locale::__imp *)&unk_26BF4ED30;
  unsigned int v26 = sub_20B108CDC;
LABEL_64:
  uint64_t v123 = v26;
  unint64_t v124 = &v122;
  sub_20B10CF3C(v25, v119);
  sub_20B10CDB4(&v122);
LABEL_65:
  uint64_t v29 = a1[7];
  uint64_t v28 = a1[8];
  if (v29 == v28)
  {
LABEL_182:
    sub_20B07F8E0(a3, "");
    goto LABEL_55;
  }
  uint64_t v105 = (void **)(a1 + 19);
  v103 = a1 + 10;
  BOOL v104 = (void **)(a1 + 22);
  BOOL v102 = a1 + 13;
  uint64_t v101 = a1 + 16;
  while (1)
  {
    unint64_t v30 = *(void *)(v29 + 48);
    if (v30 >> 28)
    {
      sub_20B07F8E0(a3, "Parse PLY: Element has invalid count");
      goto LABEL_55;
    }
    unint64_t v31 = (_DWORD *)(v29 + 24);
    if (*(char *)(v29 + 47) < 0)
    {
      uint64_t v34 = *(void *)(v29 + 32);
      if (v34 == 4)
      {
        unint64_t v31 = *(_DWORD **)v31;
LABEL_85:
        if (*v31 == 1701011814)
        {
          sub_20B07D7B8(v105, 3 * v30);
          sub_20B07D7B8(v104, *(void *)(v29 + 48));
          unint64_t v41 = *(void *)(v29 + 48);
          if (v41)
          {
            unint64_t v98 = 0;
            uint64_t v99 = v28;
            do
            {
              uint64_t v43 = *(int **)v29;
              unsigned int v42 = *(int **)(v29 + 8);
              if (*(int **)v29 != v42)
              {
                while (1)
                {
                  if (*v43 == 9)
                  {
                    sub_20B107A3C((uint64_t)v121, (uint64_t)a2, v43[2]);
                    int v45 = (int)v44;
                    if ((int)v44 > 0x400)
                    {
                      sub_20B07F8E0(a3, "Parse PLY: Property list has invalid number of elements");
                      goto LABEL_55;
                    }
                    if (v45)
                    {
                      for (int i = 0; i != v45; ++i)
                      {
                        sub_20B107A3C((uint64_t)v121, (uint64_t)a2, v43[1]);
                        int v48 = (int)v47;
                        int v50 = (int *)a1[20];
                        unint64_t v49 = a1[21];
                        if ((unint64_t)v50 >= v49)
                        {
                          long double v52 = (int *)*v105;
                          uint64_t v53 = ((char *)v50 - (unsigned char *)*v105) >> 2;
                          unint64_t v54 = v53 + 1;
                          if ((unint64_t)(v53 + 1) >> 62) {
                            sub_20B05D0BC();
                          }
                          uint64_t v55 = v49 - (void)v52;
                          if (v55 >> 1 > v54) {
                            unint64_t v54 = v55 >> 1;
                          }
                          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
                            unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            unint64_t v56 = v54;
                          }
                          if (v56)
                          {
                            unint64_t v57 = (char *)sub_20B05D1AC((uint64_t)(a1 + 21), v56);
                            long double v52 = (int *)a1[19];
                            int v50 = (int *)a1[20];
                          }
                          else
                          {
                            unint64_t v57 = 0;
                          }
                          uint64_t v58 = (int *)&v57[4 * v53];
                          *uint64_t v58 = v48;
                          double v51 = v58 + 1;
                          while (v50 != v52)
                          {
                            int v59 = *--v50;
                            *--uint64_t v58 = v59;
                          }
                          a1[19] = v58;
                          a1[20] = v51;
                          a1[21] = &v57[4 * v56];
                          if (v52) {
                            operator delete(v52);
                          }
                        }
                        else
                        {
                          *int v50 = v48;
                          double v51 = v50 + 1;
                        }
                        a1[20] = v51;
                      }
                    }
                    uint64_t v61 = (int *)a1[23];
                    unint64_t v60 = a1[24];
                    if ((unint64_t)v61 >= v60)
                    {
                      unint64_t v65 = (int *)*v104;
                      uint64_t v66 = ((char *)v61 - (unsigned char *)*v104) >> 2;
                      unint64_t v67 = v66 + 1;
                      if ((unint64_t)(v66 + 1) >> 62) {
                        sub_20B05D0BC();
                      }
                      uint64_t v68 = v60 - (void)v65;
                      if (v68 >> 1 > v67) {
                        unint64_t v67 = v68 >> 1;
                      }
                      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v69 = v67;
                      }
                      if (v69)
                      {
                        uint64_t v70 = (char *)sub_20B05D1AC((uint64_t)(a1 + 24), v69);
                        unint64_t v65 = (int *)a1[22];
                        uint64_t v61 = (int *)a1[23];
                      }
                      else
                      {
                        uint64_t v70 = 0;
                      }
                      uint64_t v71 = (int *)&v70[4 * v66];
                      *uint64_t v71 = v45;
                      uint64_t v62 = v71 + 1;
                      while (v61 != v65)
                      {
                        int v72 = *--v61;
                        *--uint64_t v71 = v72;
                      }
                      a1[22] = v71;
                      a1[23] = v62;
                      a1[24] = &v70[4 * v69];
                      if (v65) {
                        operator delete(v65);
                      }
                    }
                    else
                    {
                      *uint64_t v61 = v45;
                      uint64_t v62 = v61 + 1;
                    }
                    a1[23] = v62;
                  }
                  else
                  {
                    uint64_t v63 = sub_20B10D2FC((uint64_t)v117, (uint64_t)v121);
                    char v64 = sub_20B1079AC(v63, (uint64_t)v43, (uint64_t)a2, (uint64_t)v117);
                    sub_20B10CDB4(v117);
                    if ((v64 & 1) == 0) {
                      goto LABEL_121;
                    }
                  }
                  v43 += 3;
                  if (v43 == v42)
                  {
                    unint64_t v41 = *(void *)(v29 + 48);
                    break;
                  }
                }
              }
              uint64_t v28 = v99;
              ++v98;
            }
            while (v98 < v41);
          }
          goto LABEL_181;
        }
        goto LABEL_86;
      }
      if (v34 == 6 && **(_DWORD **)v31 == 1953654134 && *(_WORD *)(*(void *)v31 + 4) == 30821)
      {
LABEL_141:
        uint64_t v100 = v28;
        uint64_t v73 = *(int **)v29;
        uint64_t v74 = *(int **)(v29 + 8);
        if (*(int **)v29 == v74)
        {
          char v76 = 0;
          char v75 = 0;
        }
        else
        {
          char v75 = 0;
          char v76 = 0;
          do
          {
            int v77 = *v73;
            v73 += 3;
            v75 |= v77 == 3;
            v76 |= v77 == 6;
          }
          while (v73 != v74);
        }
        sub_20B108FDC(v103, v30);
        if (v75) {
          sub_20B108FDC(v102, *(void *)(v29 + 48));
        }
        if (v76) {
          sub_20B108FDC(v101, *(void *)(v29 + 48));
        }
        LODWORD(v123) = 0;
        v122.__locale_ = 0;
        *(_DWORD *)v108 = 0;
        *(void *)&v108[4] = 1065353216;
        int v107 = 0;
        uint64_t v106 = 0;
        if (*(void *)(v29 + 48))
        {
          unint64_t v78 = 0;
          do
          {
            uint64_t v80 = *(int **)v29;
            uint64_t v79 = *(int **)(v29 + 8);
            while (v80 != v79)
            {
              switch(*v80)
              {
                case 0:
                  sub_20B107A3C((uint64_t)v120, (uint64_t)a2, v80[1]);
                  LODWORD(v122.__locale_) = v81;
                  goto LABEL_165;
                case 1:
                  sub_20B107A3C((uint64_t)v120, (uint64_t)a2, v80[1]);
                  HIDWORD(v122.__locale_) = v86;
                  goto LABEL_165;
                case 2:
                  sub_20B107A3C((uint64_t)v120, (uint64_t)a2, v80[1]);
                  LODWORD(v123) = v83;
                  goto LABEL_165;
                case 3:
                  sub_20B107A3C((uint64_t)v120, (uint64_t)a2, v80[1]);
                  *(_DWORD *)v108 = v84;
                  goto LABEL_165;
                case 4:
                  sub_20B107A3C((uint64_t)v120, (uint64_t)a2, v80[1]);
                  *(_DWORD *)&v108[4] = v82;
                  goto LABEL_165;
                case 5:
                  sub_20B107A3C((uint64_t)v120, (uint64_t)a2, v80[1]);
                  *(_DWORD *)&v108[8] = v87;
                  goto LABEL_165;
                case 6:
                  sub_20B107A3C((uint64_t)v119, (uint64_t)a2, v80[1]);
                  LODWORD(v106) = v88;
                  goto LABEL_165;
                case 7:
                  sub_20B107A3C((uint64_t)v119, (uint64_t)a2, v80[1]);
                  HIDWORD(v106) = v85;
                  goto LABEL_165;
                case 8:
                  sub_20B107A3C((uint64_t)v119, (uint64_t)a2, v80[1]);
                  int v107 = v89;
                  goto LABEL_165;
                default:
                  uint64_t v90 = sub_20B10D2FC((uint64_t)v118, (uint64_t)v121);
                  char v91 = sub_20B1079AC(v90, (uint64_t)v80, (uint64_t)a2, (uint64_t)v118);
                  sub_20B10CDB4(v118);
                  if ((v91 & 1) == 0) {
                    goto LABEL_121;
                  }
LABEL_165:
                  v80 += 3;
                  break;
              }
            }
            unint64_t v92 = a1[11];
            if (v92 >= a1[12])
            {
              uint64_t v93 = sub_20B10D394(v103, (uint64_t)&v122);
            }
            else
            {
              *(std::locale *)unint64_t v92 = v122;
              *(_DWORD *)(v92 + 8) = v123;
              uint64_t v93 = v92 + 12;
            }
            a1[11] = v93;
            if (v75)
            {
              unint64_t v94 = a1[14];
              if (v94 >= a1[15])
              {
                uint64_t v95 = sub_20B10D394(v102, (uint64_t)v108);
              }
              else
              {
                *(void *)unint64_t v94 = *(void *)v108;
                *(_DWORD *)(v94 + 8) = *(_DWORD *)&v108[8];
                uint64_t v95 = v94 + 12;
              }
              a1[14] = v95;
            }
            if (v76)
            {
              unint64_t v96 = a1[17];
              if (v96 >= a1[18])
              {
                uint64_t v97 = sub_20B10D394(v101, (uint64_t)&v106);
              }
              else
              {
                *(void *)unint64_t v96 = v106;
                *(_DWORD *)(v96 + 8) = v107;
                uint64_t v97 = v96 + 12;
              }
              a1[17] = v97;
            }
            ++v78;
          }
          while (v78 < *(void *)(v29 + 48));
        }
        uint64_t v28 = v100;
        goto LABEL_181;
      }
    }
    else
    {
      int v32 = *(unsigned __int8 *)(v29 + 47);
      if (v32 == 4) {
        goto LABEL_85;
      }
      if (v32 == 6 && *v31 == 1953654134 && *(_WORD *)(v29 + 28) == 30821) {
        goto LABEL_141;
      }
    }
LABEL_86:
    if (v30) {
      break;
    }
LABEL_181:
    v29 += 56;
    if (v29 == v28) {
      goto LABEL_182;
    }
  }
  uint64_t v36 = 0;
  while (1)
  {
    uint64_t v38 = *(void *)v29;
    uint64_t v37 = *(void *)(v29 + 8);
    if (*(void *)v29 != v37) {
      break;
    }
LABEL_92:
    if (++v36 >= v30) {
      goto LABEL_181;
    }
  }
  while (1)
  {
    uint64_t v39 = sub_20B10D2FC((uint64_t)v116, (uint64_t)v121);
    char v40 = sub_20B1079AC(v39, v38, (uint64_t)a2, (uint64_t)v116);
    sub_20B10CDB4(v116);
    if ((v40 & 1) == 0) {
      break;
    }
    v38 += 12;
    if (v38 == v37)
    {
      unint64_t v30 = *(void *)(v29 + 48);
      goto LABEL_92;
    }
  }
LABEL_121:
  sub_20B07F8E0(a3, "Parse PLY: Unknown property");
LABEL_55:
  sub_20B10CDB4(v119);
  sub_20B10CDB4(v120);
  sub_20B10CDB4(v121);
  if (SHIBYTE(v110) < 0) {
    operator delete(__p[0]);
  }
LABEL_57:
  if (SHIBYTE(v113) < 0) {
    operator delete(v111);
  }
LABEL_59:
  if (SHIBYTE(v115) < 0) {
    operator delete(v114[0]);
  }
}

void sub_20B108688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_20B10CDB4((void *)(v48 - 256));
  sub_20B10CDB4((void *)(v48 - 224));
  sub_20B10CDB4((void *)(v48 - 192));
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B10878C(uint64_t a1, int a2)
{
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  switch(a2)
  {
    case 0:
    case 2:
    case 4:
      LODWORD(v5) = 0;
      MEMORY[0x210532410](a1, &v5);
      goto LABEL_4;
    case 1:
    case 3:
    case 5:
      LODWORD(v5) = 0;
      MEMORY[0x210532420](a1, &v5);
LABEL_4:
      uint64_t result = LODWORD(v5);
      break;
    case 6:
      LODWORD(v5) = 0;
      MEMORY[0x210532400](a1, &v5);
      uint64_t result = (int)*(float *)&v5;
      break;
    case 7:
      double v5 = 0.0;
      MEMORY[0x2105323F0](a1, &v5);
      uint64_t result = (int)v5;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void *sub_20B108850(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26BF4ED88;
  v4[1] = a2;
  v4[3] = v4;
  sub_20B10CF3C(v4, a1);
  sub_20B10CDB4(v4);
  return a1;
}

float sub_20B1088E0(uint64_t a1, int a2)
{
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  switch(a2)
  {
    case 0:
    case 2:
    case 4:
      LODWORD(v5) = 0;
      MEMORY[0x210532410](a1, &v5);
      float result = (float)SLODWORD(v5);
      break;
    case 1:
    case 3:
    case 5:
      LODWORD(v5) = 0;
      MEMORY[0x210532420](a1, &v5);
      float result = (float)LODWORD(v5);
      break;
    case 6:
      LODWORD(v5) = 0;
      MEMORY[0x210532400](a1, &v5);
      float result = *(float *)&v5;
      break;
    case 7:
      double v5 = 0.0;
      MEMORY[0x2105323F0](a1, &v5);
      float result = v5;
      break;
    default:
      float result = 0.0;
      break;
  }
  return result;
}

void *sub_20B1089AC(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26BF4ED30;
  v4[1] = a2;
  v4[3] = v4;
  sub_20B10CF3C(v4, a1);
  sub_20B10CDB4(v4);
  return a1;
}

float sub_20B108A3C(uint64_t a1, unsigned int a2)
{
  if (a2 <= 5) {
    return (float)(int)sub_20B10878C(a1, a2) * 0.0039216;
  }
  return sub_20B1088E0(a1, a2);
}

uint64_t sub_20B108A7C(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      std::istream::read();
      uint64_t result = 0;
      break;
    case 6:
      std::istream::read();
      uint64_t result = (int)0.0;
      break;
    case 7:
      std::istream::read();
      uint64_t result = (int)0.0;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

float sub_20B108B9C(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 2:
    case 4:
      std::istream::read();
      return (float)0;
    case 1:
      std::istream::read();
      LOBYTE(v3) = 0;
      goto LABEL_8;
    case 3:
      std::istream::read();
      LOWORD(v3) = 0;
      goto LABEL_8;
    case 5:
      std::istream::read();
      unsigned int v3 = 0;
LABEL_8:
      float result = (float)v3;
      break;
    case 6:
      std::istream::read();
      float result = 0.0;
      break;
    case 7:
      std::istream::read();
      float result = 0.0;
      break;
    default:
      float result = 0.0;
      break;
  }
  return result;
}

float sub_20B108CDC(uint64_t a1, unsigned int a2)
{
  if (a2 <= 5) {
    return (float)(int)sub_20B108A7C(a1, a2) * 0.0039216;
  }
  return sub_20B108B9C(a1, a2);
}

uint64_t sub_20B108D1C(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
      std::istream::read();
      uint64_t result = 0;
      break;
    case 3:
      std::istream::read();
      uint64_t result = __rev16(0);
      break;
    case 4:
    case 5:
      std::istream::read();
      uint64_t result = bswap32(0);
      break;
    case 6:
      std::istream::read();
      uint64_t result = (int)COERCE_FLOAT(bswap32(0));
      break;
    case 7:
      uint64_t result = (int)sub_20B10C6B4();
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

float sub_20B108E4C(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      std::istream::read();
      int v2 = 0;
      goto LABEL_8;
    case 1:
      std::istream::read();
      LOBYTE(v4) = 0;
      return (float)v4;
    case 2:
      std::istream::read();
      int v2 = (int)bswap32(0) >> 16;
      goto LABEL_8;
    case 3:
      std::istream::read();
      unsigned int v5 = bswap32(0) >> 16;
      goto LABEL_10;
    case 4:
      std::istream::read();
      int v2 = bswap32(0);
LABEL_8:
      float result = (float)v2;
      break;
    case 5:
      std::istream::read();
      unsigned int v5 = bswap32(0);
LABEL_10:
      float result = (float)v5;
      break;
    case 6:
      std::istream::read();
      float result = COERCE_FLOAT(bswap32(0));
      break;
    case 7:
      float result = sub_20B10C6B4();
      break;
    default:
      float result = 0.0;
      break;
  }
  return result;
}

float sub_20B108F9C(uint64_t a1, unsigned int a2)
{
  if (a2 <= 5) {
    return (float)(int)sub_20B108D1C(a1, a2) * 0.0039216;
  }
  return sub_20B108E4C(a1, a2);
}

void sub_20B108FDC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556) {
      sub_20B05D0BC();
    }
    uint64_t v5 = a1[1] - *a1;
    uint64_t v11 = v3;
    long long __p = sub_20B07D4F8(v3, a2);
    float v8 = (char *)__p + v5;
    int v9 = (char *)__p + v5;
    uint64_t v10 = (char *)__p + 12 * v6;
    sub_20B10D29C(a1, &__p);
    if (v9 != v8) {
      int v9 = &v8[(v9 - v8 - 12) % 0xCuLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_20B1090B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B109100(uint64_t *a1, void *a2, void *a3)
{
  v210[1] = *MEMORY[0x263EF8340];
  id v202 = a2;
  id v200 = a3;
  v205 = objc_alloc_init(MDLVertexDescriptor);
  uint64_t v7 = objc_msgSend_attributes(v205, v5, v6);
  int v9 = objc_msgSend_objectAtIndexedSubscript_(v7, v8, 0);
  objc_msgSend_setName_(v9, v10, @"position");

  uint64_t v13 = objc_msgSend_attributes(v205, v11, v12);
  unsigned int v15 = objc_msgSend_objectAtIndexedSubscript_(v13, v14, 0);
  objc_msgSend_setFormat_(v15, v16, 786435);

  uint64_t v19 = objc_msgSend_attributes(v205, v17, v18);
  uint64_t v21 = objc_msgSend_objectAtIndexedSubscript_(v19, v20, 0);
  objc_msgSend_setBufferIndex_(v21, v22, 0);

  if (a1[14] != a1[13])
  {
    unint64_t v25 = objc_msgSend_attributes(v205, v23, v24);
    uint64_t v27 = objc_msgSend_objectAtIndexedSubscript_(v25, v26, 1);
    objc_msgSend_setName_(v27, v28, @"normal");

    unint64_t v31 = objc_msgSend_attributes(v205, v29, v30);
    uint64_t v33 = objc_msgSend_objectAtIndexedSubscript_(v31, v32, 1);
    objc_msgSend_setFormat_(v33, v34, 786435);

    uint64_t v37 = objc_msgSend_attributes(v205, v35, v36);
    uint64_t v39 = objc_msgSend_objectAtIndexedSubscript_(v37, v38, 1);
    objc_msgSend_setBufferIndex_(v39, v40, 0);
  }
  unint64_t v41 = v205;
  if (a1[17] != a1[16])
  {
    unsigned int v42 = objc_msgSend_attributes(v205, v23, v24);
    float v44 = objc_msgSend_objectAtIndexedSubscript_(v42, v43, 2);
    objc_msgSend_setName_(v44, v45, @"color");

    uint64_t v48 = objc_msgSend_attributes(v205, v46, v47);
    int v50 = objc_msgSend_objectAtIndexedSubscript_(v48, v49, 2);
    objc_msgSend_setFormat_(v50, v51, 786435);

    unint64_t v54 = objc_msgSend_attributes(v205, v52, v53);
    unint64_t v56 = objc_msgSend_objectAtIndexedSubscript_(v54, v55, 2);
    objc_msgSend_setBufferIndex_(v56, v57, 0);

    unint64_t v41 = v205;
  }
  objc_msgSend_setPackedOffsets(v41, v23, v24);
  objc_msgSend_setPackedStrides(v205, v58, v59);
  uint64_t v61 = a1[10];
  uint64_t v60 = a1[11];
  char v64 = objc_msgSend_layouts(v205, v62, v63);
  uint64_t v66 = objc_msgSend_objectAtIndexedSubscript_(v64, v65, 0);
  uint64_t v201 = objc_msgSend_stride(v66, v67, v68);

  long long __p = 0;
  v208 = 0;
  v209 = 0;
  sub_20B07D7B8(&__p, (a1[20] - a1[19]) >> 2);
  uint64_t v70 = a1[19];
  uint64_t v69 = a1[20];
  sub_20B07D7B8(&__p, (a1[11] - a1[10]) >> 2);
  if (v69 == v70)
  {
    if (a1[11] == a1[10])
    {
      uint64_t v199 = 0;
    }
    else
    {
      LODWORD(v109) = 0;
      uint64_t v110 = v208;
      do
      {
        if (v110 >= v209)
        {
          uint64_t v112 = (char *)__p;
          uint64_t v113 = (v110 - (unsigned char *)__p) >> 2;
          unint64_t v114 = v113 + 1;
          if ((unint64_t)(v113 + 1) >> 62) {
            sub_20B05D0BC();
          }
          uint64_t v115 = v209 - (unsigned char *)__p;
          if ((v209 - (unsigned char *)__p) >> 1 > v114) {
            unint64_t v114 = v115 >> 1;
          }
          if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v116 = v114;
          }
          if (v116)
          {
            v117 = (char *)sub_20B05D1AC((uint64_t)&v209, v116);
            uint64_t v112 = (char *)__p;
            uint64_t v110 = v208;
          }
          else
          {
            v117 = 0;
          }
          uint64_t v118 = &v117[4 * v113];
          *(_DWORD *)uint64_t v118 = v109;
          uint64_t v111 = v118 + 4;
          while (v110 != v112)
          {
            int v119 = *((_DWORD *)v110 - 1);
            v110 -= 4;
            *((_DWORD *)v118 - 1) = v119;
            v118 -= 4;
          }
          long long __p = v118;
          v208 = v111;
          v209 = &v117[4 * v116];
          if (v112) {
            operator delete(v112);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v110 = v109;
          uint64_t v111 = v110 + 4;
        }
        v208 = v111;
        unint64_t v109 = (v109 + 1);
        uint64_t v110 = v111;
      }
      while (v109 < (a1[11] - a1[10]) >> 2);
      uint64_t v199 = 0;
    }
  }
  else
  {
    uint64_t v71 = (int *)a1[22];
    v203 = (int *)a1[23];
    if (v71 == v203)
    {
      uint64_t v199 = 2;
    }
    else
    {
      uint64_t v195 = v61;
      uint64_t v196 = v60;
      unint64_t v72 = 0;
      uint64_t v199 = 2;
      do
      {
        uint64_t v73 = *v71;
        if ((int)v73 >= 3)
        {
          unsigned int v75 = 0;
          unint64_t v74 = v72;
          do
          {
            uint64_t v76 = a1[19];
            if (v74 >= (a1[20] - v76) >> 2) {
              break;
            }
            int v77 = v208;
            if (v208 >= v209)
            {
              uint64_t v79 = (char *)__p;
              uint64_t v80 = (v208 - (unsigned char *)__p) >> 2;
              unint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62) {
                goto LABEL_96;
              }
              uint64_t v82 = v209 - (unsigned char *)__p;
              if ((v209 - (unsigned char *)__p) >> 1 > v81) {
                unint64_t v81 = v82 >> 1;
              }
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v81;
              }
              if (v83)
              {
                int v84 = (char *)sub_20B05D1AC((uint64_t)&v209, v83);
                uint64_t v79 = (char *)__p;
                int v77 = v208;
              }
              else
              {
                int v84 = 0;
              }
              int v85 = &v84[4 * v80];
              *(_DWORD *)int v85 = *(_DWORD *)(v76 + 4 * v74);
              unint64_t v78 = v85 + 4;
              while (v77 != v79)
              {
                int v86 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              long long __p = v85;
              v208 = v78;
              v209 = &v84[4 * v83];
              if (v79) {
                operator delete(v79);
              }
            }
            else
            {
              *(_DWORD *)v208 = *(_DWORD *)(v76 + 4 * v74);
              unint64_t v78 = v77 + 4;
            }
            v208 = v78;
            if (v75 >= 3)
            {
              uint64_t v87 = a1[19];
              int v88 = v209;
              if (v78 >= v209)
              {
                uint64_t v90 = (char *)__p;
                uint64_t v91 = (v78 - (unsigned char *)__p) >> 2;
                unint64_t v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 62) {
                  goto LABEL_96;
                }
                uint64_t v93 = v209 - (unsigned char *)__p;
                if ((v209 - (unsigned char *)__p) >> 1 > v92) {
                  unint64_t v92 = v93 >> 1;
                }
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v94 = v92;
                }
                if (v94)
                {
                  uint64_t v95 = (char *)sub_20B05D1AC((uint64_t)&v209, v94);
                  uint64_t v90 = (char *)__p;
                  unint64_t v78 = v208;
                }
                else
                {
                  uint64_t v95 = 0;
                }
                unint64_t v96 = &v95[4 * v91];
                *(_DWORD *)unint64_t v96 = *(_DWORD *)(v87 + 4 * v72);
                int v89 = v96 + 4;
                while (v78 != v90)
                {
                  int v97 = *((_DWORD *)v78 - 1);
                  v78 -= 4;
                  *((_DWORD *)v96 - 1) = v97;
                  v96 -= 4;
                }
                int v88 = &v95[4 * v94];
                long long __p = v96;
                v208 = v89;
                v209 = v88;
                if (v90)
                {
                  operator delete(v90);
                  int v88 = v209;
                }
              }
              else
              {
                *(_DWORD *)unint64_t v78 = *(_DWORD *)(v87 + 4 * v72);
                int v89 = v78 + 4;
              }
              v208 = v89;
              unint64_t v98 = v74 - 1;
              uint64_t v99 = a1[19];
              if (v89 >= v88)
              {
                uint64_t v101 = (char *)__p;
                uint64_t v102 = (v89 - (unsigned char *)__p) >> 2;
                unint64_t v103 = v102 + 1;
                if ((unint64_t)(v102 + 1) >> 62) {
LABEL_96:
                }
                  sub_20B05D0BC();
                uint64_t v104 = v88 - (unsigned char *)__p;
                if (v104 >> 1 > v103) {
                  unint64_t v103 = v104 >> 1;
                }
                if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v105 = v103;
                }
                if (v105)
                {
                  uint64_t v106 = (char *)sub_20B05D1AC((uint64_t)&v209, v105);
                  uint64_t v101 = (char *)__p;
                  int v89 = v208;
                }
                else
                {
                  uint64_t v106 = 0;
                }
                int v107 = &v106[4 * v102];
                *(_DWORD *)int v107 = *(_DWORD *)(v99 + 4 * v98);
                uint64_t v100 = v107 + 4;
                while (v89 != v101)
                {
                  int v108 = *((_DWORD *)v89 - 1);
                  v89 -= 4;
                  *((_DWORD *)v107 - 1) = v108;
                  v107 -= 4;
                }
                long long __p = v107;
                v208 = v100;
                v209 = &v106[4 * v105];
                if (v101) {
                  operator delete(v101);
                }
              }
              else
              {
                *(_DWORD *)int v89 = *(_DWORD *)(v99 + 4 * v98);
                uint64_t v100 = v89 + 4;
              }
              v208 = v100;
            }
            ++v75;
            ++v74;
          }
          while (v75 != v73);
        }
        else
        {
          unint64_t v74 = v72 + v73;
        }
        ++v71;
        unint64_t v72 = v74;
      }
      while (v71 != v203);
      uint64_t v60 = v196;
      uint64_t v61 = v195;
    }
  }
  uint64_t v120 = __p;
  v197 = v208;
  id v121 = objc_alloc(MEMORY[0x263EFF990]);
  std::locale v122 = (float *)(0xAAAAAAAAAAAAAAABLL * ((v60 - v61) >> 2));
  unint64_t v123 = v201 * (void)v122;
  id v198 = (id)objc_msgSend_initWithLength_(v121, v124, v201 * (void)v122);
  uint64_t v125 = objc_alloc_init(MDLVertexAttribute);
  objc_msgSend_setFormat_(v125, v126, 786435);
  objc_msgSend_setBufferIndex_(v125, v127, 0);
  objc_msgSend_setOffset_(v125, v128, 0);
  objc_msgSend_setName_(v125, v129, @"position");
  v206 = objc_alloc_init(MDLVertexAttribute);
  objc_msgSend_setFormat_(v206, v130, 786436);
  objc_msgSend_setBufferIndex_(v206, v131, 0);
  objc_msgSend_setOffset_(v206, v132, 0);
  objc_msgSend_setName_(v206, v133, @"color");
  id v134 = v198;
  uint64_t v137 = objc_msgSend_mutableBytes(v134, v135, v136);
  unint64_t v140 = objc_msgSend_attributes(v205, v138, v139);
  v142 = objc_msgSend_objectAtIndexedSubscript_(v140, v141, 0);
  sub_20B1ABDA8(v137, (float *)v201, v142, a1[10], (float *)0xC, v125, v122, v201 * (void)v122, (float *)(a1[11] - a1[10]));

  if (a1[14] != a1[13])
  {
    objc_msgSend_setName_(v125, v143, @"normal");
    id v145 = v134;
    uint64_t v148 = objc_msgSend_mutableBytes(v145, v146, v147);
    uint64_t v151 = objc_msgSend_attributes(v205, v149, v150);
    uint64_t v153 = objc_msgSend_objectAtIndexedSubscript_(v151, v152, 1);
    sub_20B1ABDA8(v148, (float *)v201, v153, a1[13], (float *)0xC, v125, v122, v123, (float *)(a1[14] - a1[13]));
  }
  if (a1[17] != a1[16])
  {
    id v154 = v134;
    uint64_t v157 = objc_msgSend_mutableBytes(v154, v155, v156);
    v160 = objc_msgSend_attributes(v205, v158, v159);
    v162 = objc_msgSend_objectAtIndexedSubscript_(v160, v161, 2);
    sub_20B1ABDA8(v157, (float *)v201, v162, a1[16], (float *)0xC, v206, v122, v123, (float *)(a1[17] - a1[16]));
  }
  v163 = objc_msgSend_bufferAllocator(v202, v143, v144);
  v204 = objc_msgSend_newBufferFromZone_data_type_(v163, v164, 0, v134, 1);

  id v165 = objc_alloc(MEMORY[0x263EFF8F8]);
  v167 = objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(v165, v166, (uint64_t)__p, v197 - v120, 0);
  id v170 = objc_msgSend_bufferAllocator(v202, v168, v169);
  v172 = objc_msgSend_newBufferFromZone_data_type_(v170, v171, 0, v167, 2);

  uint64_t v173 = [MDLSubmesh alloc];
  int v175 = __p;
  int v174 = v208;
  long long v176 = [MDLMaterial alloc];
  uint64_t v177 = objc_opt_new();
  long long v179 = objc_msgSend_initWithName_scatteringFunction_(v176, v178, @"PLY Material", v177);
  long long v181 = objc_msgSend_initWithIndexBuffer_indexCount_indexType_geometryType_material_(v173, v180, (uint64_t)v172, (v174 - v175) >> 2, 32, v199, v179);

  long long v182 = [MDLMesh alloc];
  v210[0] = v181;
  uint64_t v184 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x263EFF8C0], v183, (uint64_t)v210, 1);
  v186 = objc_msgSend_initWithVertexBuffer_vertexCount_descriptor_submeshes_(v182, v185, (uint64_t)v204, v122, v205, v184);

  v189 = objc_msgSend_vertexDescriptor(v202, v187, v188);
  LOBYTE(v184) = v189 == 0;

  if ((v184 & 1) == 0)
  {
    v192 = objc_msgSend_vertexDescriptor(v202, v190, v191);
    objc_msgSend_setVertexDescriptor_(v186, v193, (uint64_t)v192);
  }
  objc_msgSend_setName_(v186, v190, (uint64_t)v200);
  objc_msgSend_addObject_(v202, v194, (uint64_t)v186);

  if (__p)
  {
    v208 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20B109BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *__p,uint64_t a21)
{
  uint64_t v28 = a18;
  if (__p)
  {
    operator delete(__p);
    uint64_t v28 = a18;
  }

  _Unwind_Resume(a1);
}

void sub_20B109D84(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  v31[19] = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  if (sub_20B1A908C(v7, v9, v10))
  {
    uint64_t v13 = objc_msgSend_path(v7, v11, v12);
    uint64_t v14 = v13;
    if (v13)
    {
      v27[0] = 0;
      v27[1] = 0;
      uint64_t v28 = 0;
      id v15 = v13;
      int v17 = (char *)objc_msgSend_cStringUsingEncoding_(v15, v16, 4);
      sub_20B07F8E0(v27, v17);
      bzero(v29, 0x240uLL);
      sub_20B10A0A8(v29);
      if (v30[15])
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v26 = 0;
        sub_20B107A90(a1, v29, __p);
        int v20 = (void *)HIBYTE(v26);
        if (v26 < 0) {
          int v20 = __p[1];
        }
        if (v20)
        {
          *(_OWORD *)a4 = *(_OWORD *)__p;
          a4[2] = v26;
        }
        else
        {
          uint64_t v21 = objc_msgSend_URLByDeletingPathExtension(v7, v18, v19);
          uint64_t v24 = objc_msgSend_lastPathComponent(v21, v22, v23);
          sub_20B109100(a1, v8, v24);

          sub_20B07F8E0(a4, "");
          if (SHIBYTE(v26) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else
      {
        sub_20B07F8E0(a4, "Could not open PLY file");
      }
      v29[0] = *MEMORY[0x263F8C2A8];
      *(uint64_t *)((char *)v29 + *(void *)(v29[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
      MEMORY[0x2105323B0](v30);
      std::istream::~istream();
      MEMORY[0x2105325E0](v31);
      if (SHIBYTE(v28) < 0) {
        operator delete(v27[0]);
      }
    }
    else
    {
      sub_20B07F8E0(a4, "Could not open PLY file: Incorrect URL");
    }
  }
  else
  {
    sub_20B07F8E0(a4, "Could not find PLY file");
  }
}

void sub_20B10A01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_20B10A26C(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

uint64_t *sub_20B10A0A8(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x2105323A0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_20B10A234(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x2105325E0](v1);
  _Unwind_Resume(a1);
}

void *sub_20B10A26C(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x2105323B0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x2105325E0](a1 + 53);
  return a1;
}

void sub_20B10A338(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v236 = *MEMORY[0x263EF8340];
  id v198 = a2;
  id v7 = a3;
  id v8 = v7;
  if (v7)
  {
    id v200 = a4;
    uint64_t v230 = 0;
    uint64_t v229 = 0;
    uint64_t v231 = 0;
    long long v225 = 0u;
    long long v226 = 0u;
    long long v227 = 0u;
    long long v228 = 0u;
    id v211 = v7;
    id v9 = v7;
    uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v225, v235, 16);
    if (v11)
    {
      uint64_t v12 = *(void *)v226;
      uint64_t v13 = (__n128 *)MEMORY[0x263EF89A8];
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v226 != v12) {
            objc_enumerationMutation(v9);
          }
          id v15 = *(void **)(*((void *)&v225 + 1) + 8 * i);
          sub_20B1A9310(a1, &v229, v15, *v13, v13[1], v13[2], v13[3]);
          sub_20B1A97B8(a1, &v229, v15, *v13, v13[1], v13[2], v13[3]);
        }
        uint64_t v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v16, (uint64_t)&v225, v235, 16);
      }
      while (v11);
    }

    memset(&__str, 0, sizeof(__str));
    sub_20B1A9238(v198, v17, v18, &__str);
    std::string::size_type v19 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
    if (v19 != -1)
    {
      std::string::basic_string(&v232, &__str, 0, v19, (std::allocator<char> *)&v217);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v232;
    }
    uint64_t v20 = v229;
    uint64_t v208 = v230;
    id v8 = v211;
    if (v229 == v230)
    {
LABEL_96:
      sub_20B07F8E0(v200, "");
    }
    else
    {
      int v21 = 0;
      std::string::size_type v206 = *(void *)(MEMORY[0x263F8C2B0] + 16);
      std::string::size_type v207 = *(void *)(MEMORY[0x263F8C2B0] + 8);
      std::string::size_type v204 = *(void *)(MEMORY[0x263F8C2B0] + 24);
      std::string::size_type v205 = *MEMORY[0x263F8C2B0];
      uint64_t v202 = *(void *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v203 = *MEMORY[0x263F8C2B8];
      uint64_t v201 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      while (1)
      {
        uint64_t v223 = 0;
        long long v221 = 0u;
        memset(v222, 0, sizeof(v222));
        *(_OWORD *)v219 = 0u;
        long long v220 = 0u;
        memset(v218, 0, sizeof(v218));
        long long v217 = 0u;
        sub_20B10C0CC((uint64_t)&v217);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        sub_20B07FC90(v218, (uint64_t)p_str, size);
        ++v21;
        if (0xCCCCCCCCCCCCCCCDLL * ((v230 - v229) >> 4) >= 2)
        {
          sub_20B07FC90(v218, (uint64_t)"_", 1);
          std::ostream::operator<<();
        }
        sub_20B07FC90(v218, (uint64_t)".ply", 4);
        bzero(&v232.__r_.__value_.__r.__words[1], 0x230uLL);
        uint64_t v24 = MEMORY[0x263F8C310] + 64;
        v234[0] = MEMORY[0x263F8C310] + 64;
        v232.__r_.__value_.__r.__words[0] = v207;
        *(std::string::size_type *)((char *)v232.__r_.__value_.__r.__words + *(void *)(v207 - 24)) = v206;
        unint64_t v25 = (std::ios_base *)((char *)&v232 + *(void *)(v232.__r_.__value_.__r.__words[0] - 24));
        std::ios_base::init(v25, &v232.__r_.__value_.__r.__words[1]);
        uint64_t v26 = MEMORY[0x263F8C310] + 24;
        v25[1].__vftable = 0;
        v25[1].__fmtflags_ = -1;
        v232.__r_.__value_.__r.__words[0] = v26;
        v234[0] = v24;
        MEMORY[0x2105323A0](&v232.__r_.__value_.__r.__words[1]);
        std::stringbuf::str();
        std::ofstream::open();
        if (v216 < 0) {
          operator delete(__p[0]);
        }
        int v212 = *(_DWORD *)&v233[*(void *)(v232.__r_.__value_.__r.__words[0] - 24)] & 5;
        if (v212)
        {
          sub_20B07F8E0(v200, "Failed to open file path.");
        }
        else
        {
          uint64_t v27 = sub_20B07FC90(&v232, (uint64_t)"ply ", 4);
          std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
          uint64_t v28 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v29 = sub_20B07FC90(v27, (uint64_t)"format ascii 1.0", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(void *)(*v29 - 24)));
          uint64_t v30 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v33 = objc_msgSend_name(*(void **)(v20 + 64), v31, v32);
          int v210 = v21;
          BOOL v34 = v33 == 0;

          if (v34)
          {
            sub_20B07FC90(&v232, (uint64_t)"comment object: submesh", 23);
            uint64_t v46 = (void *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
            uint64_t v47 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
          }
          else
          {
            long long v35 = sub_20B07FC90(&v232, (uint64_t)"comment object: ", 16);
            objc_msgSend_name(*(void **)(v20 + 64), v36, v37);
            id v38 = objc_claimAutoreleasedReturnValue();
            unint64_t v41 = (const char *)objc_msgSend_UTF8String(v38, v39, v40);
            size_t v42 = strlen(v41);
            sub_20B07FC90(v35, (uint64_t)v41, v42);
            uint64_t v43 = (void *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(*v43 - 24)));
            float v44 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
          }
          uint64_t v199 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(*(void **)(v20 + 64), v45, @"normal", 786435);
          v213 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(*(void **)(v20 + 64), v48, @"occlusionValue", 786435);
          if (!v213)
          {
            v213 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(*(void **)(v20 + 64), v49, @"color", 786435);
          }
          sub_20B07FC90(&v232, (uint64_t)"element vertex ", 15);
          objc_msgSend_vertexCount(*(void **)(v20 + 64), v50, v51);
          long double v52 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
          uint64_t v53 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          unint64_t v54 = sub_20B07FC90(&v232, (uint64_t)"property float x", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(void *)(*v54 - 24)));
          uint64_t v55 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          unint64_t v56 = sub_20B07FC90(v54, (uint64_t)"property float y", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(void *)(*v56 - 24)));
          unint64_t v57 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v58 = sub_20B07FC90(v56, (uint64_t)"property float z", 16);
          std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(void *)(*v58 - 24)));
          uint64_t v59 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          if (v213)
          {
            uint64_t v62 = sub_20B07FC90(&v232, (uint64_t)"property uchar red", 18);
            std::ios_base::getloc((const std::ios_base *)((char *)v62 + *(void *)(*v62 - 24)));
            uint64_t v63 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            char v64 = sub_20B07FC90(v62, (uint64_t)"property uchar green", 20);
            std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
            unint64_t v65 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
            uint64_t v66 = sub_20B07FC90(v64, (uint64_t)"property uchar blue", 19);
            std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(void *)(*v66 - 24)));
            unint64_t v67 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
            ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
            std::locale::~locale((std::locale *)__p);
            std::ostream::put();
            std::ostream::flush();
          }
          if (objc_msgSend_geometryType(*(void **)(v20 + 72), v60, v61) == 2
            || objc_msgSend_geometryType(*(void **)(v20 + 72), v68, v69) == 4
            || objc_msgSend_geometryType(*(void **)(v20 + 72), v70, v71) == 1
            || !objc_msgSend_geometryType(*(void **)(v20 + 72), v72, v73))
          {
            sub_20B07FC90(&v232, (uint64_t)"element face ", 13);
            objc_msgSend_indexCount(*(void **)(v20 + 72), v91, v92);
            std::ostream::operator<<();
          }
          else if (objc_msgSend_geometryType(*(void **)(v20 + 72), v74, v75) == 5)
          {
            uint64_t v80 = objc_msgSend_topology(*(void **)(v20 + 72), v76, v77);
            if (v80)
            {
              unint64_t v81 = objc_msgSend_topology(*(void **)(v20 + 72), v78, v79);
              int v84 = objc_msgSend_faceTopology(v81, v82, v83);
              BOOL v85 = v84 == 0;

              if (!v85)
              {
                sub_20B07FC90(&v232, (uint64_t)"element face ", 13);
                int v88 = objc_msgSend_topology(*(void **)(v20 + 72), v86, v87);
                objc_msgSend_faceCount(v88, v89, v90);
                std::ostream::operator<<();
              }
            }
          }
          std::ios_base::getloc((const std::ios_base *)((char *)&v232
                                                      + *(void *)(v232.__r_.__value_.__r.__words[0] - 24)));
          uint64_t v93 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          unint64_t v94 = sub_20B07FC90(&v232, (uint64_t)"property list uchar int vertex_index", 36);
          std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(void *)(*v94 - 24)));
          uint64_t v95 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          unint64_t v96 = sub_20B07FC90(v94, (uint64_t)"end_header", 10);
          std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
          int v97 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
          ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
          std::locale::~locale((std::locale *)__p);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v99 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(*(void **)(v20 + 64), v98, @"position", 786435);
          objc_msgSend_dataStart(v99, v100, v101);
          uint64_t v106 = objc_msgSend_stride(v99, v102, v103);
          if (v213)
          {
            uint64_t v108 = objc_msgSend_stride(v213, v104, v105);
            uint64_t v111 = (_DWORD *)objc_msgSend_dataStart(v213, v109, v110);
            if ((unint64_t)objc_msgSend_bufferSize(v213, v112, v113) >= 0xC)
            {
              uint64_t v114 = -1;
              do
              {
                if (++v114 >= (unint64_t)objc_msgSend_vertexCount(*(void **)(v20 + 64), v104, v105)) {
                  break;
                }
                LODWORD(v107) = *v111;
                if (*(float *)v111 > 1.0) {
                  break;
                }
                LODWORD(v107) = v111[1];
                if (*(float *)&v107 > 1.0) {
                  break;
                }
                LODWORD(v107) = v111[2];
              }
              while (*(float *)&v107 <= 1.0);
            }
          }
          else
          {
            uint64_t v111 = 0;
            uint64_t v108 = 0;
          }
          uint64_t v115 = 0;
          unint64_t v116 = 0;
          v117 = v111 + 2;
          while (v116 < objc_msgSend_vertexCount(*(void **)(v20 + 64), v104, v105, v107))
          {
            if (v115 + 12 <= (unint64_t)objc_msgSend_bufferSize(v99, v118, v119))
            {
              uint64_t v120 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v120, (uint64_t)" ", 1);
              id v121 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v121, (uint64_t)" ", 1);
              std::ostream::operator<<();
              if (v213)
              {
                sub_20B07FC90(&v232, (uint64_t)" ", 1);
                std::locale v122 = (void *)std::ostream::operator<<();
                sub_20B07FC90(v122, (uint64_t)" ", 1);
                unint64_t v123 = (void *)std::ostream::operator<<();
                sub_20B07FC90(v123, (uint64_t)" ", 1);
                std::ostream::operator<<();
              }
              std::ios_base::getloc((const std::ios_base *)((char *)&v232
                                                          + *(void *)(v232.__r_.__value_.__r.__words[0] - 24)));
              unint64_t v124 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v124->__vftable[2].~facet_0)(v124, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
            }
            ++v116;
            v117 = (_DWORD *)((char *)v117 + v108);
            v115 += v106;
          }
          uint64_t v125 = objc_msgSend_indexType(*(void **)(v20 + 72), v118, v119);
          v128 = objc_msgSend_indexBuffer(*(void **)(v20 + 72), v126, v127);
          v209 = objc_msgSend_map(v128, v129, v130);

          uint64_t v133 = objc_msgSend_bytes(v209, v131, v132);
          if (objc_msgSend_geometryType(*(void **)(v20 + 72), v134, v135) == 2)
          {
            unint64_t v138 = 0;
            uint64_t v139 = v133 + 4;
            uint64_t v140 = v133 + 8;
            while (objc_msgSend_indexCount(*(void **)(v20 + 72), v136, v137) > v138)
            {
              sub_20B07FC90(&v232, (uint64_t)"3 ", 2);
              v141 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v141, (uint64_t)" ", 1);
              v142 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v142, (uint64_t)" ", 1);
              int v143 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v143 + *(void *)(*v143 - 24)));
              uint64_t v144 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v144->__vftable[2].~facet_0)(v144, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              v138 += 3;
              v139 += 6;
              v140 += 12;
            }
          }
          else if (objc_msgSend_geometryType(*(void **)(v20 + 72), v136, v137) == 4)
          {
            uint64_t v147 = 0;
            uint64_t v148 = 0;
            for (unint64_t j = 0; objc_msgSend_indexCount(*(void **)(v20 + 72), v145, v146) > j; j += 4)
            {
              sub_20B07FC90(&v232, (uint64_t)"4 ", 2);
              uint64_t v150 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v150, (uint64_t)" ", 1);
              uint64_t v151 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v151, (uint64_t)" ", 1);
              unint64_t v152 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v152, (uint64_t)" ", 1);
              uint64_t v153 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v153 + *(void *)(*v153 - 24)));
              id v154 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v154->__vftable[2].~facet_0)(v154, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              v148 += 8;
              v147 += 16;
            }
          }
          else if (objc_msgSend_geometryType(*(void **)(v20 + 72), v145, v146) == 1)
          {
            unint64_t v157 = 0;
            uint64_t v158 = v133 + 2;
            uint64_t v159 = v133 + 4;
            while (objc_msgSend_indexCount(*(void **)(v20 + 72), v155, v156) > v157)
            {
              sub_20B07FC90(&v232, (uint64_t)"2 ", 2);
              v160 = (void *)std::ostream::operator<<();
              sub_20B07FC90(v160, (uint64_t)" ", 1);
              v161 = (void *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v161 + *(void *)(*v161 - 24)));
              v162 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
              ((void (*)(const std::locale::facet *, uint64_t))v162->__vftable[2].~facet_0)(v162, 10);
              std::locale::~locale((std::locale *)__p);
              std::ostream::put();
              std::ostream::flush();
              v157 += 2;
              v158 += 4;
              v159 += 8;
            }
          }
          else if (objc_msgSend_geometryType(*(void **)(v20 + 72), v155, v156))
          {
            if (objc_msgSend_geometryType(*(void **)(v20 + 72), v163, v164) == 5)
            {
              uint64_t v169 = objc_msgSend_topology(*(void **)(v20 + 72), v165, v166);
              if (v169)
              {
                id v170 = objc_msgSend_topology(*(void **)(v20 + 72), v167, v168);
                uint64_t v173 = objc_msgSend_faceTopology(v170, v171, v172);
                BOOL v174 = v173 == 0;

                if (!v174)
                {
                  uint64_t v177 = objc_msgSend_topology(*(void **)(v20 + 72), v175, v176);
                  long long v180 = objc_msgSend_faceTopology(v177, v178, v179);
                  long long v183 = objc_msgSend_map(v180, v181, v182);

                  uint64_t v214 = objc_msgSend_bytes(v183, v184, v185);
                  unint64_t v188 = 0;
                  int v189 = 0;
                  while (1)
                  {
                    uint64_t v190 = objc_msgSend_topology(*(void **)(v20 + 72), v186, v187);
                    BOOL v193 = objc_msgSend_faceCount(v190, v191, v192) > v188;

                    if (!v193) {
                      break;
                    }
                    int v194 = *(unsigned __int8 *)(v214 + v188);
                    uint64_t v195 = (void *)std::ostream::operator<<();
                    sub_20B07FC90(v195, (uint64_t)" ", 1);
                    for (; v194; --v194)
                    {
                      if (v125 == 32 || v125 == 16 || v125 == 8) {
                        ++v189;
                      }
                      std::ostream::operator<<();
                    }
                    std::ios_base::getloc((const std::ios_base *)((char *)&v232
                                                                + *(void *)(v232.__r_.__value_.__r.__words[0] - 24)));
                    uint64_t v196 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x263F8C108]);
                    ((void (*)(const std::locale::facet *, uint64_t))v196->__vftable[2].~facet_0)(v196, 10);
                    std::locale::~locale((std::locale *)__p);
                    std::ostream::put();
                    std::ostream::flush();
                    ++v188;
                  }
                }
              }
            }
          }
          else
          {
            for (unint64_t k = 0; objc_msgSend_indexCount(*(void **)(v20 + 72), v163, v164) > k; ++k)
            {
              sub_20B07FC90(&v232, (uint64_t)"1 ", 2);
              std::ostream::operator<<();
            }
          }
          if (!std::filebuf::close()) {
            std::ios_base::clear((std::ios_base *)((char *)&v232 + *(void *)(v232.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)&v233[*(void *)(v232.__r_.__value_.__r.__words[0] - 24)] | 4);
          }

          int v21 = v210;
        }
        v232.__r_.__value_.__r.__words[0] = v205;
        *(std::string::size_type *)((char *)v232.__r_.__value_.__r.__words + *(void *)(v205 - 24)) = v204;
        MEMORY[0x2105323B0](&v232.__r_.__value_.__r.__words[1]);
        std::ostream::~ostream();
        MEMORY[0x2105325E0](v234);
        *(void *)&long long v217 = v203;
        *(void *)((char *)&v218[-1] + *(void *)(v203 - 24)) = v202;
        *(void *)&v218[0] = v201;
        *((void *)&v218[0] + 1) = MEMORY[0x263F8C318] + 16;
        if (SHIBYTE(v220) < 0) {
          operator delete(v219[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2105325E0](v222);
        id v8 = v211;
        if (v212) {
          break;
        }
        v20 += 80;
        if (v20 == v208) {
          goto LABEL_96;
        }
      }
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    v232.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
    sub_20B080C18((void ***)&v232);
  }
  else
  {
    sub_20B07F8E0(a4, "");
  }
}

void sub_20B10BD70(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,std::locale a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_20B06FA74(&STACK[0x2B0]);
  sub_20B0A8E60((uint64_t)&a43);
  if (a2 == 1)
  {
    uint64_t v47 = __cxa_begin_catch(a1);
    uint64_t v48 = (char *)(*(uint64_t (**)(void *))(*(void *)v47 + 16))(v47);
    sub_20B07F8E0(a16, v48);
    __cxa_end_catch();
    JUMPOUT(0x20B10BCF0);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  STACK[0x2B0] = (unint64_t)&STACK[0x298];
  sub_20B080C18((void ***)&STACK[0x2B0]);

  _Unwind_Resume(a1);
}

uint64_t sub_20B10C0CC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C328] + 104;
  *(void *)(a1 + 128) = MEMORY[0x263F8C328] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  *(void *)(a1 + 16) = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  id v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x263F8C328] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_20B10C37C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x2105325E0](v1);
  _Unwind_Resume(a1);
}

void sub_20B10C3A4(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  v20[19] = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v8 = objc_msgSend_path(v5, v6, v7);
  uint64_t v9 = v8;
  if (v8)
  {
    v16[0] = 0;
    v16[1] = 0;
    uint64_t v17 = 0;
    id v10 = v8;
    uint64_t v12 = (char *)objc_msgSend_cStringUsingEncoding_(v10, v11, 4);
    sub_20B07F8E0(v16, v12);
    bzero(v18, 0x240uLL);
    sub_20B10A0A8(v18);
    if (v19[15])
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v15 = 0;
      sub_20B107A90(a1, v18, __p);
      uint64_t v13 = (void *)HIBYTE(v15);
      if (v15 < 0) {
        uint64_t v13 = __p[1];
      }
      if (v13)
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        a3[2] = v15;
      }
      else
      {
        sub_20B07F8E0(a3, "");
        if (SHIBYTE(v15) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      sub_20B07F8E0(a3, "Could not open PLY file");
    }
    v18[0] = *MEMORY[0x263F8C2A8];
    *(uint64_t *)((char *)v18 + *(void *)(v18[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
    MEMORY[0x2105323B0](v19);
    std::istream::~istream();
    MEMORY[0x2105325E0](v20);
    if (SHIBYTE(v17) < 0) {
      operator delete(v16[0]);
    }
  }
  else
  {
    sub_20B07F8E0(a3, "Could not open PLY file: Incorrect URL");
  }
}

void sub_20B10C5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_20B10A26C(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void *sub_20B10C638(void *a1, long long *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  id v5 = a1 + 3;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B07F994(v5, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5[2] = *((void *)a2 + 2);
    *(_OWORD *)id v5 = v6;
  }
  a1[6] = a3;
  return a1;
}

void sub_20B10C698(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B10C6B4()
{
  return COERCE_DOUBLE(bswap64(0));
}

void *sub_20B10C718(void *a1, uint64_t a2, unsigned __int8 a3)
{
  char v11 = 0;
  MEMORY[0x2105323D0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    id v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_20B10C87C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20B10C83CLL);
  }
  __cxa_rethrow();
}

void sub_20B10C8F8(_Unwind_Exception *a1)
{
}

void sub_20B10C90C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20B10C974(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x210532650](v1, 0xC400A2AC0F1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B10C99C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B10C9D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B10C9F0(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4F4A8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_20B10CA34(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    id v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20B10CACC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B10CACC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t sub_20B10CB24(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B10CBE8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20B10CB9C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_20B05D178();
  }
  return operator new(56 * a2);
}

uint64_t sub_20B10CBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      long long v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(v7 - 40) = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      long long v9 = *(_OWORD *)(a3 + 24);
      *(void *)(v7 - 16) = *(void *)(a3 + 40);
      *(_OWORD *)(v7 - 32) = v9;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(v7 - 8) = *(void *)(a3 + 48);
      uint64_t v7 = *((void *)&v15 + 1) - 56;
      *((void *)&v15 + 1) -= 56;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_20B10CCAC((uint64_t)v12);
  return v10;
}

uint64_t sub_20B10CCAC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B10CCE4((uint64_t *)a1);
  }
  return a1;
}

void sub_20B10CCE4(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_20B10CACC(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **sub_20B10CD38(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_20B10CD6C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    sub_20B10CACC(v4, i - 56);
  }
}

void *sub_20B10CDB4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_20B10CE3C()
{
}

void *sub_20B10CE50(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26BF4ED88;
  result[1] = v3;
  return result;
}

uint64_t sub_20B10CE98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26BF4ED88;
  a2[1] = v2;
  return result;
}

float sub_20B10CEC4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return (float)(*(int (**)(uint64_t, void))(a1 + 8))(a2, *a3);
}

uint64_t sub_20B10CEF0(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4ED00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_20B10CF30()
{
  return &unk_26BF4ED00;
}

void *sub_20B10CF3C(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20B10D1A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_20B05D0D4(a1);
}

void sub_20B10D1B4()
{
}

void *sub_20B10D1C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26BF4ED30;
  result[1] = v3;
  return result;
}

uint64_t sub_20B10D210(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26BF4ED30;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B10D23C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *a3);
}

uint64_t sub_20B10D250(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4ECE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_20B10D290()
{
  return &unk_26BF4ECE0;
}

uint64_t *sub_20B10D29C(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 12);
    v2 -= 12;
    *(void *)(v4 - 12) = v5;
    v4 -= 12;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B10D2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_20B10D394(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x1555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  std::string::size_type v19 = a1 + 2;
  uint64_t v10 = (char *)sub_20B07D4F8(v7, v9);
  char v11 = &v10[12 * v4];
  long long __p = v10;
  uint64_t v16 = v11;
  uint64_t v18 = &v10[12 * v12];
  *(void *)char v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v17 = v11 + 12;
  sub_20B10D29C(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    uint64_t v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_20B10D4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20B10D500(_DWORD *result)
{
  void *result = 1049652922;
  return result;
}

float sub_20B10D510(uint64_t a1, int8x16_t a2)
{
  *(_DWORD *)a1 = 1049652922;
  *(float32x2_t *)(a1 + 4) = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)a2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), 4uLL)), (float64x2_t)xmmword_20B1E7D20));
  float result = *(float *)a2.i32 * -0.488602511;
  *(float *)(a1 + 12) = result;
  return result;
}

float sub_20B10D558(uint64_t a1, int8x16_t a2)
{
  float64x2_t v2 = vcvtq_f64_f32((float32x2_t)vext_s8(*(int8x8_t *)a2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), 4uLL));
  *(float32x2_t *)(a1 + 4) = vcvt_f32_f64(vmulq_f64(v2, (float64x2_t)xmmword_20B1E7D20));
  float v3 = *(float *)a2.i32 * -0.488602511;
  *(float *)(a1 + 12) = v3;
  float64x2_t v4 = vmulq_f64(v2, (float64x2_t)xmmword_20B1E7D30);
  float64x2_t v5 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v2.f64[0], 0);
  v5.f64[0] = *(float *)a2.i32;
  float64x2_t v6 = vmulq_f64(v2, v2);
  v7.f64[1] = v4.f64[1];
  v7.f64[0] = vmuld_lane_f64(0.946174695, v6, 1);
  v6.f64[0] = -0.315391565;
  *(void *)&v7.f64[0] = *(_OWORD *)&vaddq_f64(v7, v6);
  v6.f64[1] = *(float *)a2.i32;
  *(_DWORD *)a1 = 1049652922;
  v7.f64[1] = vmulq_f64(v4, v6).f64[1];
  *(float32x2_t *)(a1 + 16) = vcvt_f32_f64(vmulq_f64(v4, v5));
  *(float32x2_t *)(a1 + 24) = vcvt_f32_f64(v7);
  float32x4_t v8 = vmulq_f32((float32x4_t)a2, (float32x4_t)a2);
  float result = vsubq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)).f32[0] * 0.546274215;
  *(float *)(a1 + 32) = result;
  return result;
}

float sub_20B10D618(uint64_t a1, float32x4_t _Q0)
{
  _S1 = _Q0.u32[1];
  float v3 = vmuls_lane_f32(_Q0.f32[2], _Q0, 2);
  *(_DWORD *)a1 = 1049652923;
  float v4 = vmuls_lane_f32(-1.0925, _Q0, 2);
  *(float *)(a1 + 20) = vmuls_lane_f32(v4, *(float32x2_t *)_Q0.f32, 1);
  *(float *)(a1 + 24) = (float)(v3 * 0.94617) + -0.31539;
  _D2 = vmul_n_f32((float32x2_t)0x3FEED53640124131, v3);
  v6.i32[0] = vsub_f32((float32x2_t)0x3FEED5363EEA01E8, _D2).u32[0];
  v6.i32[1] = vadd_f32(_D2, (float32x2_t)vdup_n_s32(0xBF8F4CBA)).i32[1];
  *(float32x2_t *)(a1 + 44) = vmul_f32(v6, (float32x2_t)vext_s8(*(int8x8_t *)_Q0.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 8uLL), 4uLL));
  __asm { FMLS            S2, S1, V0.S[1] }
  *(float *)(a1 + 28) = v4 * _Q0.f32[0];
  *(float *)(a1 + 32) = _D2.f32[0] * 0.54627;
  float32x4_t v11 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 0xCuLL), (int8x16_t)_Q0, 8uLL);
  v11.i32[3] = vmuls_lane_f32(_Q0.f32[0] + _Q0.f32[0], *(float32x2_t *)_Q0.f32, 1);
  *(float32x4_t *)(a1 + 4) = vmulq_f32(v11, (float32x4_t)xmmword_20B1E7D40);
  v11.f32[0] = vmuls_lane_f32(1.4453, _Q0, 2);
  *(float *)(a1 + 52) = vmuls_n_f32(v6.f32[0], _Q0.f32[0]);
  *(float *)(a1 + 56) = _D2.f32[0] * v11.f32[0];
  *(float *)(a1 + 60) = vmlas_n_f32(-(float)(v11.f32[3] * _Q0.f32[1]), _D2.f32[0], _Q0.f32[0]) * -0.59004;
  float result = vmlas_n_f32(vmuls_lane_f32(_D2.f32[0], *(float32x2_t *)_Q0.f32, 1), v11.f32[3], _Q0.f32[0]) * -0.59004;
  *(float *)(a1 + 36) = result;
  *(float *)(a1 + 40) = v11.f32[3] * v11.f32[0];
  return result;
}

uint64_t sub_20B10D71C(uint64_t result, long long *a2, long long *a3)
{
  long long v3 = xmmword_20B1E74C0;
  long long v4 = xmmword_20B1E6130;
  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      long long v4 = xmmword_20B1E74B0;
      goto LABEL_7;
    case 2:
      long long v3 = xmmword_20B1E74A0;
      long long v4 = xmmword_20B1E74C0;
      goto LABEL_7;
    case 3:
      long long v3 = xmmword_20B1E7480;
      long long v4 = xmmword_20B1E7490;
      goto LABEL_7;
    case 4:
      long long v4 = xmmword_20B1E74A0;
      goto LABEL_7;
    case 5:
      long long v4 = xmmword_20B1E7480;
LABEL_7:
      *a2 = v4;
      *a3 = v3;
      break;
    default:
      return result;
  }
  return result;
}

double sub_20B10D7C0(int a1, int a2, int a3, int8x16_t a4, int8x16_t _Q1)
{
  switch(a3)
  {
    case 0:
      __asm
      {
        FMOV            V3.2S, #1.0
        FMOV            V1.2S, #-1.0
      }
      *(float32x2_t *)_Q1.i8 = vmla_n_f32(_D1, vmla_f32(_D3, (float32x2_t)0x4000000040000000, vcvt_f32_s32((int32x2_t)__PAIR64__(a1, a2))), *(float *)a4.i32);
      a4.i32[0] = 1.0;
      break;
    case 1:
      __asm { FMOV            V3.2S, #1.0 }
      *(float32x2_t *)a4.i8 = vmul_n_f32(vmla_f32(_D3, (float32x2_t)0x4000000040000000, vcvt_f32_s32((int32x2_t)__PAIR64__(a1, a2))), *(float *)a4.i32);
      __asm { FMOV            V1.2S, #-1.0 }
      _Q1.i32[0] = vadd_f32(*(float32x2_t *)a4.i8, _D1).u32[0];
      _Q1.i32[1] = vsub_f32(_D3, *(float32x2_t *)&a4).i32[1];
      a4.i32[0] = -1.0;
      break;
    case 2:
      float v13 = (float)((float)((float)((float)a2 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      *(float *)a4.i32 = (float)((float)((float)((float)a1 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      __asm { FMOV            V1.2S, #1.0 }
      goto LABEL_7;
    case 3:
      float v13 = -(float)((float)((float)((float)((float)a2 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0);
      *(float *)a4.i32 = (float)((float)((float)((float)a1 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      __asm { FMOV            V1.2S, #-1.0 }
LABEL_7:
      *(float *)&_Q1.i32[1] = v13;
      break;
    case 4:
      float v14 = (float)((float)((float)((float)a2 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      *(float *)a4.i32 = (float)((float)((float)((float)a1 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      __asm { FMOV            V1.2S, #-1.0 }
      goto LABEL_10;
    case 5:
      float v14 = (float)((float)((float)((float)a2 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0;
      *(float *)a4.i32 = -(float)((float)((float)((float)((float)a1 * 2.0) + 1.0) * *(float *)a4.i32) + -1.0);
      __asm { FMOV            V1.2S, #1.0 }
LABEL_10:
      *(float *)_Q1.i32 = v14;
      break;
    default:
      _Q1.i64[0] = 0;
      a4.i64[0] = 0;
      break;
  }
  float32x4_t v15 = (float32x4_t)vextq_s8(vextq_s8(a4, a4, 4uLL), _Q1, 0xCuLL);
  int32x4_t v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2)).u32[0];
  float32x2_t v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  float32x2_t v18 = vmul_f32(vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)), v17);
  *(void *)&double result = vmulq_n_f32(v15, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]).u64[0];
  return result;
}

float sub_20B10D968(int a1, int a2, int a3)
{
  float v3 = 1.0 / (float)a3;
  float v4 = 0.0;
  if (a3 >= 2) {
    float v4 = (float)(2.0 - (float)(v3 * 2.0)) / (float)((float)a3 + -1.0);
  }
  float v5 = (float)((float)((float)((float)(v3 + -1.0) + (float)(v4 * (float)a1))
                     * (float)((float)(v3 + -1.0) + (float)(v4 * (float)a1)))
             + 1.0)
     + (float)((float)((float)(v3 + -1.0) + (float)(v4 * (float)a2))
             * (float)((float)(v3 + -1.0) + (float)(v4 * (float)a2)));
  return 4.0 / (float)(sqrtf(v5) * v5);
}

uint64_t sub_20B10D9C8(uint64_t a1, void *a2, CGColor *a3)
{
  id v5 = a2;
  *(void *)a1 = &unk_26BF4FB38;
  *(void *)(a1 + 8) = 0;
  id v6 = v5;
  *(void *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)(a1 + 8) = CGColorCreateCopy(a3);

  return a1;
}

void sub_20B10DA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B10DA58(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4FB38;
  float64x2_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  float v3 = *(CGColor **)(a1 + 8);
  if (v3) {
    CGColorRelease(v3);
  }

  return a1;
}

void sub_20B10DAC0(uint64_t a1)
{
  sub_20B10DA58(a1);

  JUMPOUT(0x210532650);
}

CGColorRef sub_20B10DAF8(uint64_t a1, CGColorRef color)
{
  float v4 = *(CGColor **)(a1 + 8);
  if (v4) {
    CGColorRelease(v4);
  }
  CGColorRef result = CGColorCreateCopy(color);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_20B10DB34(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
}

float32x2_t sub_20B10DB3C(uint64_t a1)
{
  return vcvt_f32_f64(*(float64x2_t *)CGColorGetComponents(*(CGColorRef *)(a1 + 8)));
}

uint64_t sub_20B10DB6C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_20B10DB74(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_20B10DB7C(uint64_t a1, void *a2, CGColor *a3)
{
  uint64_t v3 = sub_20B10D9C8(a1, a2, a3);
  *(void *)uint64_t v3 = &unk_26BF4FA50;
  *(_OWORD *)(v3 + 28) = xmmword_20B1E7D50;
  double result = 0.0000305175854;
  *(void *)(v3 + 44) = 0x3F00000040000000;
  return result;
}

uint64_t sub_20B10DBC8(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(float *)(a1 + 48) == 0.0)
  {
    float64x2_t v7 = *(void **)(a1 + 16);
    return objc_msgSend_translation(v7, a2, a3);
  }
  else
  {
    arc4random();
    arc4random();
    arc4random();
    return objc_msgSend_translation(*(void **)(a1 + 16), v4, v5);
  }
}

double sub_20B10DCB8(uint64_t a1, const char *a2, uint64_t a3, float a4)
{
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), a2, a3, 0.0);
  float32x4_t v7 = vmlaq_f32(vmulq_f32(v5, (float32x4_t)0), (float32x4_t)0, v6);
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v15 = vmlaq_f32(vmlaq_f32(v7, _Q1, v13), (float32x4_t)0, v14);
  int32x4_t v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2)).u32[0];
  *(float32x2_t *)v13.f32 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  *(float32x2_t *)v13.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32)), *(float32x2_t *)v13.f32);
  float32x4_t v28 = vmulq_f32(vmulq_n_f32((float32x4_t)vdupq_n_s32(0x42C80000u), vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32))).f32[0]), v15);
  uint32_t v17 = arc4random();
  *(float32x2_t *)v18.f32 = vmla_f32((float32x2_t)0xBF000000BF000000, (float32x2_t)0x3000000030000000, vcvt_f32_u32((uint32x2_t)__PAIR64__(arc4random(), v17)));
  float32x4_t v29 = v18;
  uint32_t v19 = arc4random();
  float32x4_t v20 = v29;
  v20.f32[2] = (float)((float)v19 * 4.6566e-10) + -0.5;
  float32x4_t v30 = v20;
  int32x4_t v21 = (int32x4_t)vmulq_f32(v20, v20);
  v21.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2)).u32[0];
  *(float32x2_t *)v20.f32 = vrsqrte_f32((float32x2_t)v21.u32[0]);
  *(float32x2_t *)v20.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)), *(float32x2_t *)v20.f32);
  *(float32x2_t *)v21.i8 = vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)));
  float32x4_t v27 = (float32x4_t)v21;
  v22.f32[0] = sinf(a4);
  float32x4_t v23 = vmlaq_n_f32(v28, v30, vmulq_f32(v27, v22).f32[0]);
  int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
  float32x4_t v25 = v23;
  v24.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2)).u32[0];
  *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  *(float32x2_t *)v23.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)), *(float32x2_t *)v23.f32);
  *(void *)&double result = vmulq_n_f32(v25, vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).f32[0]).u64[0];
  return result;
}

float sub_20B10DE28(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4 != 3 && v4 != 0) {
    return 1.0;
  }
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  float32x4_t v33 = v7;
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), v8, v9, 0.0);
  float32x4_t v12 = vmlaq_f32(vmulq_f32(v10, (float32x4_t)0), (float32x4_t)0, v11);
  __asm { FMOV            V0.4S, #-1.0 }
  float32x4_t v19 = vmlaq_f32(vmlaq_f32(v12, _Q0, v17), (float32x4_t)0, v18);
  int32x4_t v20 = (int32x4_t)vmulq_f32(v19, v19);
  v20.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2)).u32[0];
  *(float32x2_t *)v11.f32 = vrsqrte_f32((float32x2_t)v20.u32[0]);
  *(float32x2_t *)v11.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32)), *(float32x2_t *)v11.f32);
  LODWORD(v21) = vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32))).u32[0];
  float v22 = *(float *)(a1 + 40);
  float32x4_t v23 = vsubq_f32(a4, v33);
  float32x4_t v36 = v23;
  if (v22 == 0.0)
  {
    float v26 = 1.0;
  }
  else
  {
    int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
    float v32 = v21;
    float32x4_t v34 = v19;
    float v25 = powf(fminf(fmaxf((float)(v22- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x4_t)vdupq_laneq_s32(v24, 2)).f32[0]))/ (float)(v22 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
    float v21 = v32;
    float32x4_t v19 = v34;
    float v26 = v25;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    int32x4_t v27 = (int32x4_t)vmulq_f32(v36, v36);
    v27.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2)).u32[0];
    float32x2_t v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
    float32x2_t v29 = vmul_f32(vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)), v28);
    int32x4_t v30 = (int32x4_t)vmulq_n_f32(vmulq_f32(vmulq_n_f32(v36, v21), v19), vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
    float32x2_t v37 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 28)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL)));
    return fminf(fmaxf((float)(v37.f32[1]- acosf(vaddq_f32(vaddq_f32((float32x4_t)v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)), (float32x4_t)vdupq_laneq_s32(v30, 2)).f32[0]))/ (float)(v37.f32[1] - v37.f32[0]), 0.0), 1.0)* v26;
  }
  return v26;
}

CGColorRef sub_20B10DFF8(CGColorRef *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  float v2 = (*((float (**)(CGColorRef *))*a1 + 6))(a1);
  Components = CGColorGetComponents(a1[1]);
  float64x2_t v8 = vmulq_n_f64(*(float64x2_t *)Components, v2);
  uint64_t v4 = *((void *)Components + 3);
  double v9 = Components[2] * v2;
  uint64_t v10 = v4;
  ColorSpace = CGColorGetColorSpace(a1[1]);
  CGColorRef v6 = CGColorCreate(ColorSpace, v8.f64);
  CFRelease(ColorSpace);
  return v6;
}

CGColorRef sub_20B10E0C4(CGColorRef *a1, CGColorSpace *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  float v4 = (*((float (**)(CGColorRef *))*a1 + 6))(a1);
  CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace(a2, kCGRenderingIntentAbsoluteColorimetric, a1[1], 0);
  Components = CGColorGetComponents(CopyByMatchingToColorSpace);
  float64x2_t v10 = vmulq_n_f64(*(float64x2_t *)Components, v4);
  uint64_t v7 = *((void *)Components + 3);
  double v11 = Components[2] * v4;
  uint64_t v12 = v7;
  CGColorRef v8 = CGColorCreate(a2, v10.f64);
  CFRelease(CopyByMatchingToColorSpace);
  return v8;
}

double sub_20B10E1A0(uint64_t a1, float32x4_t a2, float32x4_t a3)
{
  LODWORD(v37) = COERCE_UNSIGNED_INT64((*(double (**)(uint64_t))(*(void *)a1 + 48))(a1));
  objc_msgSend_translation(*(void **)(a1 + 16), v4, v5);
  float32x4_t v34 = v6;
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), v7, v8, 0.0);
  int v13 = *(_DWORD *)(a1 + 24);
  if (v13 != 2)
  {
    if (v13 == 1)
    {
      float32x4_t v14 = vmlaq_f32(vmulq_f32(v9, (float32x4_t)0), (float32x4_t)0, v10);
      __asm { FMOV            V1.4S, #-1.0 }
      float32x4_t v20 = vmlaq_f32(vmlaq_f32(v14, _Q1, v11), (float32x4_t)0, v12);
      int32x4_t v21 = (int32x4_t)vmulq_f32(v20, v20);
      v21.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2)).u32[0];
      float32x2_t v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
      float32x2_t v23 = vmul_f32(vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)), v22);
      float32x4_t v24 = vnegq_f32(vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]));
    }
    else
    {
      float32x4_t v25 = vsubq_f32(v34, a2);
      int32x4_t v26 = (int32x4_t)vmulq_f32(v25, v25);
      v26.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2)).u32[0];
      float32x2_t v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
      float32x2_t v28 = vmul_f32(vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)), v27);
      float32x4_t v24 = vmulq_n_f32(v25, vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28))).f32[0]);
    }
    int32x4_t v29 = (int32x4_t)vmulq_f32(v24, a3);
    float v37 = fmaxf(vaddq_f32(vaddq_f32((float32x4_t)v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1)), (float32x4_t)vdupq_laneq_s32(v29, 2)).f32[0], 0.0)* v37;
  }
  Components = (float64x2_t *)CGColorGetComponents(*(CGColorRef *)(a1 + 8));
  float32x4_t v31 = *(float32x4_t *)Components;
  *(float32x2_t *)v31.f32 = vcvt_f32_f64(*Components);
  float32_t v32 = Components[1].f64[0];
  v31.f32[2] = v32;
  *(void *)&double result = vmulq_n_f32(v31, v37).u64[0];
  return result;
}

double sub_20B10E30C(uint64_t a1, void *a2, CGColor *a3)
{
  uint64_t v3 = sub_20B10D9C8(a1, a2, a3);
  *(_OWORD *)(v3 + 28) = xmmword_20B1E7D50;
  *(void *)(v3 + 44) = 0x3F00000040000000;
  *(void *)uint64_t v3 = &unk_26BF4F980;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v3 + 56) = result;
  *(_DWORD *)(v3 + 64) = 1065353216;
  return result;
}

float sub_20B10E368(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  float v8 = *(float *)(a1 + 40);
  if (v8 == 0.0)
  {
    float v11 = 1.0;
  }
  else
  {
    float32x4_t v9 = vsubq_f32(a4, v7);
    int32x4_t v10 = (int32x4_t)vmulq_f32(v9, v9);
    float v11 = powf(fminf(fmaxf((float)(v8- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1)), (float32x4_t)vdupq_laneq_s32(v10, 2)).f32[0]))/ (float)(v8 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
  }
  char v64 = 0;
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  float v12 = 0.0;
  double v13 = 0.0;
  do
  {
    float v14 = *(float *)(a1 + 48);
    float v15 = *(float *)(a1 + 64);
    v60.i64[0] = *(void *)(a1 + 56);
    objc_msgSend_matrix(*(void **)(a1 + 16), (const char *)v5, v6);
    float32x4_t v54 = v16;
    float32x4_t v55 = v17;
    float32x4_t v56 = v18;
    float32x4_t v53 = v19;
    __float2 v22 = __sincosf_stret(v12);
    *(float *)&uint64_t v21 = v22.__cosval;
    *(float *)v20.i32 = v22.__sinval;
    int8x16_t v52 = v20;
    v58.i64[0] = v21;
    *(float *)v23.i32 = powf(fabsf(v22.__sinval), 2.0 / v60.f32[1]) * v14;
    v24.i64[0] = 0x8000000080000000;
    v24.i64[1] = 0x8000000080000000;
    v52.i32[0] = vbslq_s8(v24, v23, v52).u32[0];
    *(float *)v25.i32 = (float)(v15 * v14) * powf(fabsf(*(float *)v58.i32), 2.0 / v60.f32[0]);
    v26.i64[0] = 0x8000000080000000;
    v26.i64[1] = 0x8000000080000000;
    float32x4_t v27 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vsubq_f32(v53, a4), v54, *(float *)vbslq_s8(v26, v25, v58).i32), v55, *(float *)v52.i32), (float32x4_t)0, v56);
    int32x4_t v28 = (int32x4_t)vmulq_f32(v27, v27);
    v28.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2)).u32[0];
    *(float32x2_t *)v26.i8 = vrsqrte_f32((float32x2_t)v28.u32[0]);
    *(float32x2_t *)v26.i8 = vmul_f32(vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8)), *(float32x2_t *)v26.i8);
    float32x4_t v29 = vmulq_n_f32(v27, vmul_f32(*(float32x2_t *)v26.i8, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(*(float32x2_t *)v26.i8, *(float32x2_t *)v26.i8))).f32[0]);
    if (v65 >= v66)
    {
      float32x4_t v61 = v29;
      uint64_t v31 = v65 - v64;
      if ((unint64_t)(v31 + 1) >> 60) {
        sub_20B05D0BC();
      }
      unint64_t v32 = ((char *)v66 - (char *)v64) >> 3;
      if (v32 <= v31 + 1) {
        unint64_t v32 = v31 + 1;
      }
      if ((unint64_t)((char *)v66 - (char *)v64) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v5 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v5 = v32;
      }
      if (v5) {
        float32x4_t v33 = (char *)sub_20B077E90((uint64_t)&v66, v5);
      }
      else {
        float32x4_t v33 = 0;
      }
      float32x4_t v34 = (float32x4_t *)&v33[16 * v31];
      *float32x4_t v34 = v61;
      int32x4_t v30 = v34 + 1;
      long long v35 = v65;
      if (v65 != v64)
      {
        do
        {
          float32x4_t v36 = v35[-1];
          --v35;
          v34[-1] = v36;
          --v34;
        }
        while (v35 != v64);
        long long v35 = v64;
      }
      char v64 = v34;
      uint64_t v66 = (float32x4_t *)&v33[16 * v5];
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *unint64_t v65 = v29;
      int32x4_t v30 = v65 + 1;
    }
    unint64_t v65 = v30;
    float v12 = v13 + 0.104719755;
    double v13 = v12;
  }
  while (v12 < 6.28318531);
  uint64_t v37 = (char *)v30 - (char *)v64;
  if (v30 != v64)
  {
    unint64_t v38 = 0;
    unint64_t v39 = v37 >> 4;
    if ((unint64_t)(v37 >> 4) <= 1) {
      uint64_t v40 = 1;
    }
    else {
      uint64_t v40 = v37 >> 4;
    }
    float32x4_t v41 = 0uLL;
    do
    {
      float32x4_t v62 = v41;
      float32x4_t v42 = v64[v38++];
      int32x4_t v57 = (int32x4_t)v42;
      int32x4_t v59 = (int32x4_t)v64[v38 % v39];
      int32x4_t v43 = (int32x4_t)vmulq_f32((float32x4_t)v59, v42);
      v44.f32[0] = acosf(vaddq_f32(vaddq_f32((float32x4_t)v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 1)), (float32x4_t)vdupq_laneq_s32(v43, 2)).f32[0]);
      int32x4_t v45 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v59, v59), (int8x16_t)v59, 0xCuLL), (float32x4_t)v57)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v57, v57), (int8x16_t)v57, 0xCuLL), (float32x4_t)v59);
      int32x4_t v46 = (int32x4_t)vmulq_f32((float32x4_t)v45, (float32x4_t)v45);
      v46.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), *(float32x2_t *)v46.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)).u32[0];
      float32x2_t v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
      float32x2_t v48 = vmul_f32(vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)), v47);
      *(float32x2_t *)v46.i8 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48)));
      float32x4_t v41 = vmlaq_n_f32(v62, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL), vmulq_f32((float32x4_t)v46, v44).f32[0]);
    }
    while (v40 != v38);
    goto LABEL_30;
  }
  float32x4_t v41 = 0uLL;
  if (v64)
  {
LABEL_30:
    float32x4_t v63 = v41;
    operator delete(v64);
    float32x4_t v41 = v63;
  }
  int32x4_t v49 = (int32x4_t)vmulq_f32(v41, v41);
  return sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.i8, 1)), (float32x4_t)vdupq_laneq_s32(v49, 2)).f32[0])* v11;
}

void sub_20B10E714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B10E738(uint64_t a1, uint64_t a2, void *a3, CGColor *a4)
{
  uint64_t v6 = sub_20B10D9C8(a1, a3, a4);
  *(_OWORD *)(v6 + 28) = xmmword_20B1E7D50;
  *(void *)(v6 + 44) = 0x3F00000040000000;
  *(void *)uint64_t v6 = &unk_26BF4F938;
  sub_20B10F0C4(v6 + 56, a2);
  *(_DWORD *)(a1 + 152) = 1056964608;
  return a1;
}

void sub_20B10E7B0(_Unwind_Exception *a1)
{
  sub_20B10DA58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B10E7C8(uint64_t a1, const char *a2, uint64_t a3)
{
  if (*(float *)(a1 + 152) == 0.0)
  {
    float32x4_t v7 = *(void **)(a1 + 16);
    return objc_msgSend_translation(v7, a2, a3);
  }
  else
  {
    arc4random();
    arc4random();
    arc4random();
    return objc_msgSend_translation(*(void **)(a1 + 16), v4, v5);
  }
}

unint64_t sub_20B10E8B8(uint64_t a1, float a2)
{
  float v2 = *(float **)a1;
  float v3 = **(float **)a1;
  if (v3 <= a2)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    float v7 = *(float *)(v6 - 4);
    unint64_t v8 = (unint64_t)(v6 - (void)v2) >> 2;
    unsigned int v4 = v8 - 1;
    if (v7 >= a2)
    {
      if ((int)v8 < 3)
      {
        int v9 = 0;
      }
      else
      {
        int v9 = 0;
        do
        {
          int v10 = v4 + v9;
          if ((int)(v4 + v9) < 0 != __OFADD__(v4, v9)) {
            ++v10;
          }
          int v11 = v10 >> 1;
          if (v2[v11] >= a2) {
            unsigned int v4 = v11;
          }
          else {
            int v9 = v11;
          }
        }
        while ((int)(v4 - v9) > 1);
        float v3 = v2[v9];
      }
      unint64_t v5 = (unint64_t)COERCE_UNSIGNED_INT((float)(v2[v4] - a2) / (float)(v2[v4] - v3)) << 32;
      unsigned int v4 = v9;
    }
    else
    {
      unint64_t v5 = 0x3F80000000000000;
    }
  }
  else
  {
    unsigned int v4 = 0;
    unint64_t v5 = 0x3F80000000000000;
  }
  return v5 | v4;
}

float sub_20B10E98C(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  float32x4_t v62 = v5;
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), v6, v7, 0.0);
  float32x4_t v10 = vmlaq_f32(vmulq_f32(v8, (float32x4_t)0), (float32x4_t)0, v9);
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v17 = vmlaq_f32(vmlaq_f32(v10, _Q1, v15), (float32x4_t)0, v16);
  int32x4_t v18 = (int32x4_t)vmulq_f32(v17, v17);
  v18.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v18.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v18, 2)).u32[0];
  *(float32x2_t *)v15.f32 = vrsqrte_f32((float32x2_t)v18.u32[0]);
  *(float32x2_t *)v15.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32)), *(float32x2_t *)v15.f32);
  float32x4_t v61 = vmulq_n_f32(v17, vmul_f32(*(float32x2_t *)v15.f32, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32))).f32[0]);
  objc_msgSend_rotationMatrixAtTime_(*(void **)(a1 + 16), v19, v20, 0.0);
  float32x4_t v25 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v22, (float32x4_t)0, v21), (float32x4_t)0, v23), (float32x4_t)0, v24);
  int32x4_t v26 = (int32x4_t)vmulq_f32(v25, v25);
  v26.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2)).u32[0];
  *(float32x2_t *)v23.f32 = vrsqrte_f32((float32x2_t)v26.u32[0]);
  *(float32x2_t *)v23.f32 = vmul_f32(vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32)), *(float32x2_t *)v23.f32);
  v23.i32[0] = vmul_f32(*(float32x2_t *)v23.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v23.f32))).u32[0];
  float32x4_t v27 = vsubq_f32(a4, v62);
  int32x4_t v28 = (int32x4_t)vmulq_f32(v27, v27);
  v28.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2)).u32[0];
  float32x2_t v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
  float32x2_t v30 = vmul_f32(vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29)), v29);
  float32x4_t v31 = vmulq_n_f32(v27, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30))).f32[0]);
  int32x4_t v32 = (int32x4_t)vmulq_f32(v31, v61);
  v32.i64[0] = vaddq_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1)), (float32x4_t)vdupq_laneq_s32(v32, 2)).u64[0];
  float32x4_t v33 = vmlsq_lane_f32(v31, v61, *(float32x2_t *)v32.i8, 0);
  int32x4_t v34 = (int32x4_t)vmulq_f32(v33, v33);
  v34.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2)).u32[0];
  float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
  float32x2_t v36 = vmul_f32(vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)), v35);
  int32x4_t v37 = (int32x4_t)vmulq_f32(vmulq_n_f32(vmulq_n_f32(v25, v23.f32[0]), vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]), v33);
  float v38 = fminf(fmaxf(vaddq_f32(vaddq_f32((float32x4_t)v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.i8, 1)), (float32x4_t)vdupq_laneq_s32(v37, 2)).f32[0], -1.0), 1.0);
  float v39 = acosf(*(float *)v32.i32) * 57.2957795;
  float v40 = acosf(v38);
  float32x4_t v41 = *(float **)(a1 + 64);
  float v42 = 0.0;
  _ZF = v39 < 0.0 && *v41 == 0.0;
  float v44 = -v39;
  if (!_ZF) {
    float v44 = v39;
  }
  unint64_t v46 = sub_20B10E8B8(a1 + 64, v44);
  if (v46 != -1)
  {
    uint64_t v47 = v45;
    int32x4_t v49 = *(float **)(a1 + 88);
    uint64_t v48 = *(void *)(a1 + 96);
    if (v48 - (void)v49 == 4)
    {
      return (float)(*(float *)(*(void *)(a1 + 112) + 4 * (int)v46) * *((float *)&v46 + 1))
           + (float)(*(float *)(*(void *)(a1 + 112) + 4 * (int)v45) * *((float *)&v45 + 1));
    }
    else
    {
      float v50 = v40 * 57.2957795;
      uint64_t v51 = (*(void *)(a1 + 72) - (void)v41) >> 2;
      if (v50 < 0.0 && *v49 == 0.0) {
        float v50 = -v50;
      }
      float v53 = *(float *)(v48 - 4);
      if (v50 > 180.0 && v53 <= 180.0) {
        float v50 = 360.0 - v50;
      }
      if (v50 > 90.0 && v53 <= 90.0) {
        float v50 = 180.0 - v50;
      }
      unint64_t v56 = sub_20B10E8B8(a1 + 88, v50);
      uint64_t v57 = *(void *)(a1 + 112);
      return (float)((float)((float)(*(float *)(v57 + 4 * ((int)v56 * (int)v51 + (int)v46)) * *((float *)&v46 + 1))
                           + (float)(*(float *)(v57 + 4 * ((int)v56 * (int)v51 + (int)v47)) * *((float *)&v47 + 1)))
                   * *((float *)&v56 + 1))
           + (float)((float)((float)(*(float *)(v57 + 4 * (v58 * (int)v51 + (int)v46)) * *((float *)&v46 + 1))
                           + (float)(*(float *)(v57 + 4 * (v58 * (int)v51 + (int)v47)) * *((float *)&v47 + 1)))
                   * v59);
    }
  }
  return v42;
}

CGColorRef sub_20B10ECB0(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  float v8 = *(float *)(a1 + 40);
  if (v8 == 0.0)
  {
    float v11 = 1.0;
  }
  else
  {
    float32x4_t v9 = vsubq_f32(a4, v7);
    int32x4_t v10 = (int32x4_t)vmulq_f32(v9, v9);
    float v11 = powf(fminf(fmaxf((float)(v8- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1)), (float32x4_t)vdupq_laneq_s32(v10, 2)).f32[0]))/ (float)(v8 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
  }
  float v12 = (float)(sub_20B10E98C(a1, v5, v6, a4) * v11) * *(float *)(a1 + 140);
  double v13 = CGColorGetComponents(*(CGColorRef *)(a1 + 8));
  *(float64x2_t *)components = vmulq_n_f64(*(float64x2_t *)v13, v12);
  uint64_t v14 = *((void *)v13 + 3);
  double v20 = v13[2] * v12;
  uint64_t v21 = v14;
  ColorSpace = CGColorGetColorSpace(*(CGColorRef *)(a1 + 8));
  CGColorRef v16 = CGColorCreate(ColorSpace, components);
  CFRelease(ColorSpace);
  return v16;
}

CGColorRef sub_20B10EDD8(uint64_t a1, char *a2, uint64_t a3, float32x4_t a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  float v9 = *(float *)(a1 + 40);
  if (v9 == 0.0)
  {
    float v12 = 1.0;
  }
  else
  {
    float32x4_t v10 = vsubq_f32(a4, v8);
    int32x4_t v11 = (int32x4_t)vmulq_f32(v10, v10);
    float v12 = powf(fminf(fmaxf((float)(v9- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 1)), (float32x4_t)vdupq_laneq_s32(v11, 2)).f32[0]))/ (float)(v9 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
  }
  float v13 = (float)(sub_20B10E98C(a1, v6, v7, a4) * v12) * *(float *)(a1 + 140);
  uint64_t v14 = CGColorGetComponents(*(CGColorRef *)(a1 + 8));
  *(float64x2_t *)components = vmulq_n_f64(*(float64x2_t *)v14, v13);
  uint64_t v15 = *((void *)v14 + 3);
  double v19 = v14[2] * v13;
  uint64_t v20 = v15;
  return CGColorCreate((CGColorSpaceRef)a2, components);
}

double sub_20B10EEEC(uint64_t a1, const char *a2, uint64_t a3, float32x4_t a4, float32x4_t a5)
{
  objc_msgSend_translation(*(void **)(a1 + 16), a2, a3);
  float32x4_t v9 = v8;
  float v10 = *(float *)(a1 + 40);
  if (v10 == 0.0)
  {
    float v14 = 1.0;
  }
  else
  {
    float32x4_t v11 = vsubq_f32(a4, v9);
    int32x4_t v12 = (int32x4_t)vmulq_f32(v11, v11);
    float32x4_t v22 = v9;
    float v13 = powf(fminf(fmaxf((float)(v10- sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1)), (float32x4_t)vdupq_laneq_s32(v12, 2)).f32[0]))/ (float)(v10 - *(float *)(a1 + 36)), 0.0), 1.0), *(float *)(a1 + 44));
    float32x4_t v9 = v22;
    float v14 = v13;
  }
  float32x4_t v15 = vsubq_f32(v9, a4);
  int32x4_t v16 = (int32x4_t)vmulq_f32(v15, v15);
  v16.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2)).u32[0];
  float32x2_t v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
  float32x2_t v18 = vmul_f32(vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)), v17);
  int32x4_t v19 = (int32x4_t)vmulq_f32(vmulq_n_f32(v15, vmul_f32(v18, vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v18, v18))).f32[0]), a5);
  *(float *)v20.i32 = (float)((float)(sub_20B10E98C(a1, v6, v7, a4) * v14) * *(float *)(a1 + 140))
                    * fmaxf(vaddq_f32(vaddq_f32((float32x4_t)v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1)), (float32x4_t)vdupq_laneq_s32(v19, 2)).f32[0], 0.0);
  *(void *)&double result = vdupq_lane_s32(v20, 0).u64[0];
  return result;
}

void sub_20B10F014(uint64_t a1)
{
  sub_20B10DA58(a1);

  JUMPOUT(0x210532650);
}

void sub_20B10F050(uint64_t a1)
{
  sub_20B10DA58(a1);

  JUMPOUT(0x210532650);
}

void sub_20B10F08C(void *a1)
{
  sub_20B10F1A0(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B10F0C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_20B0AF3DC((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_20B0AF3DC((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_20B0AF3DC((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  uint64_t v4 = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  return a1;
}

void sub_20B10F16C(_Unwind_Exception *exception_object)
{
  float32x4_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B10F1A0(void *a1)
{
  *a1 = &unk_26BF4F938;
  float v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  float v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }

  return sub_20B10DA58((uint64_t)a1);
}

id sub_20B10F220(uint64_t a1, int a2, double a3, double a4)
{
  v66[2] = *MEMORY[0x263EF8340];
  v65[1] = 0;
  v65[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v65[0] = MEMORY[0x263F90748] + 16;
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v64 = 0;
  sub_20B0B03D4(a1, &v60);
  uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v60);
  if (*(char *)(String + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)String, *(void *)(String + 8));
  }
  else
  {
    long long v8 = *(_OWORD *)String;
    uint64_t v64 = *(void *)(String + 16);
    *(_OWORD *)__dst = v8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v60);
  float32x4_t v55 = objc_opt_new();
  v66[0] = 0;
  v66[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetJointsAttr((uint64_t *)&v60, (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v65);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if ((BYTE8(v61) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v61 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v61);
  if (*((void *)&v60 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v60 + 1));
  }
  if (!sub_20B10F938((uint64_t)v66)) {
    goto LABEL_47;
  }
  float32x4_t v62 = 0;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v9 = sub_20B10F970(v66);
  long long v10 = *(_OWORD *)(v9 + 16);
  long long v60 = *(_OWORD *)v9;
  long long v61 = v10;
  float32x4_t v11 = *(uint64_t **)(v9 + 32);
  float32x4_t v62 = v11;
  if (v11)
  {
    int32x4_t v12 = v11 - 2;
    if (*((void *)&v61 + 1)) {
      int32x4_t v12 = (atomic_ullong *)*((void *)&v61 + 1);
    }
    atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
  }
  sub_20B1105AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
  float v13 = v62;
  sub_20B1105AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
  float32x4_t v15 = &v62[v60];
  if (v13 == v15)
  {
LABEL_46:
    sub_20B1104F8(&v60);
LABEL_47:
    float32x2_t v29 = [MDLPackedJointAnimation alloc];
    if (v64 >= 0) {
      objc_msgSend_stringWithUTF8String_(NSString, v28, (uint64_t)__dst);
    }
    else {
    float32x2_t v30 = objc_msgSend_stringWithUTF8String_(NSString, v28, (uint64_t)__dst[0]);
    }
    int32x4_t v32 = objc_msgSend_initWithName_jointPaths_(v29, v31, (uint64_t)v30, v55);

    long long v60 = 0u;
    long long v61 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr((uint64_t *)&v60, (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v65);
    *(_OWORD *)long long __p = 0u;
    long long v59 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v65);
    long long v56 = 0u;
    long long v57 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr((uint64_t *)&v56, (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)v65);
    float32x2_t v36 = objc_msgSend_translations(v32, v33, v34);
    if (a2)
    {
      objc_msgSend_resetWithUsdAttribute_timeScale_(v36, v35, (uint64_t)&v60, a3);

      float v39 = objc_msgSend_rotations(v32, v37, v38);
      objc_msgSend_resetWithUsdAttribute_timeScale_(v39, v40, (uint64_t)__p, a3);

      int32x4_t v43 = objc_msgSend_scales(v32, v41, v42);
      objc_msgSend_resetWithUsdAttribute_timeScale_(v43, v44, (uint64_t)&v56, a3);
    }
    else
    {
      objc_msgSend_resetWithUsdAttribute_timeScale_time_(v36, v35, (uint64_t)&v60, a3, a4);

      uint64_t v47 = objc_msgSend_rotations(v32, v45, v46);
      objc_msgSend_resetWithUsdAttribute_timeScale_time_(v47, v48, (uint64_t)__p, a3, a4);

      int32x4_t v43 = objc_msgSend_scales(v32, v49, v50);
      objc_msgSend_resetWithUsdAttribute_timeScale_time_(v43, v51, (uint64_t)&v56, a3, a4);
    }

    id v52 = v32;
    if ((BYTE8(v57) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v57 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v57);
    if (*((void *)&v56 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v56 + 1));
    }
    if ((BYTE8(v59) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v59 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v59);
    if (__p[1]) {
      sub_20B06A5E0((uint64_t)__p[1]);
    }
    if ((BYTE8(v61) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v61 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v61);
    if (*((void *)&v60 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v60 + 1));
    }

    goto LABEL_66;
  }
  while (1)
  {
    uint64_t v16 = *v13;
    if ((*v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v59 = 0;
    unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) != 0 ? v17 + 16 : pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
    if (*(char *)(v18 + 23) < 0)
    {
      sub_20B07F994(__p, *(void **)v18, *(void *)(v18 + 8));
    }
    else
    {
      long long v19 = *(_OWORD *)v18;
      *(void *)&long long v59 = *(void *)(v18 + 16);
      *(_OWORD *)long long __p = v19;
    }
    int32x2_t v20 = (SBYTE7(v59) & 0x80u) == 0 ? (void *)BYTE7(v59) : __p[1];
    if (v20)
    {
      id v21 = [NSString alloc];
      if ((SBYTE7(v59) & 0x80u) == 0) {
        uint64_t v23 = objc_msgSend_initWithUTF8String_(v21, v22, (uint64_t)__p);
      }
      else {
        uint64_t v23 = objc_msgSend_initWithUTF8String_(v21, v22, (uint64_t)__p[0]);
      }
      float32x4_t v25 = (void *)v23;
      if (v23) {
        objc_msgSend_addObject_(v55, v24, v23);
      }
    }
    else
    {
      if (v17)
      {
        int32x4_t v26 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0) {
          int32x4_t v26 = *(const char **)v26;
        }
      }
      else
      {
        int32x4_t v26 = "";
      }
      float32x4_t v27 = __dst;
      if (v64 < 0) {
        float32x4_t v27 = (void **)__dst[0];
      }
      NSLog(&cfstr_IllegalJointPa.isa, v26, v27);
    }
    if (SBYTE7(v59) < 0) {
      operator delete(__p[0]);
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)v17, 0xFFFFFFFE, memory_order_release);
    }
    if (!v20) {
      break;
    }
    if (++v13 == v15) {
      goto LABEL_46;
    }
  }
  sub_20B1104F8(&v60);
  id v52 = 0;
LABEL_66:
  sub_20B06A698((uint64_t)v66);

  if (SHIBYTE(v64) < 0) {
    operator delete(__dst[0]);
  }
  MEMORY[0x210530CD0](v65);

  return v52;
}

void sub_20B10F7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B10F938(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 60) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B10F970(void *a1)
{
  if (sub_20B10F938((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B11043C, &unk_26BF4F078);
  }
}

id sub_20B10FA04(_DWORD *a1, double a2)
{
  void v44[2] = *MEMORY[0x263EF8340];
  v43[1] = 0;
  v43[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v43[0] = MEMORY[0x263F90708] + 16;
  unint64_t v4 = *(void *)sub_20B06A3E4(a1) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    float32x4_t v5 = (const char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0) {
      float32x4_t v5 = *(const char **)v5;
    }
  }
  else
  {
    float32x4_t v5 = "";
  }
  uint64_t v6 = objc_opt_new();
  v44[0] = 0;
  v44[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v43);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if ((BYTE8(v41) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v41);
  if (*((void *)&v40 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v40 + 1));
  }
  if (sub_20B10F938((uint64_t)v44))
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    uint64_t v9 = sub_20B10F970(v44);
    long long v10 = *(_OWORD *)(v9 + 16);
    long long v40 = *(_OWORD *)v9;
    long long v41 = v10;
    float32x4_t v11 = *(uint64_t **)(v9 + 32);
    uint64_t v42 = v11;
    if (v11)
    {
      int32x4_t v12 = v11 - 2;
      if (*((void *)&v41 + 1)) {
        int32x4_t v12 = (atomic_ullong *)*((void *)&v41 + 1);
      }
      atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
    }
    sub_20B1105AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
    float v13 = v42;
    sub_20B1105AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
    for (uint64_t i = &v42[v40]; v13 != i; ++v13)
    {
      uint64_t v15 = *v13;
      if ((*v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (!v15)
      {
        NSLog(&cfstr_IllegalJointPa_0.isa, "", v5);
LABEL_44:
        sub_20B1104F8(&v40);
LABEL_45:
        id v36 = 0;
        goto LABEL_46;
      }
      id v16 = [NSString alloc];
      unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFF8;
      if ((v15 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        long long v19 = (uint64_t *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
        {
          uint64_t v20 = objc_msgSend_initWithUTF8String_(v16, v17, *v19);
          goto LABEL_24;
        }
      }
      else
      {
        long long v19 = (uint64_t *)"";
      }
      uint64_t v20 = objc_msgSend_initWithUTF8String_(v16, v17, (uint64_t)v19);
LABEL_24:
      float32x4_t v22 = (void *)v20;
      if (v20) {
        objc_msgSend_addObject_(v6, v21, v20);
      }
      else {
        NSLog(&cfstr_IllegalJointPa_1.isa, v5);
      }

      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)v18, 0xFFFFFFFE, memory_order_release);
      }
      if (!v22) {
        goto LABEL_44;
      }
    }
    sub_20B1104F8(&v40);
  }
  if (!objc_msgSend_count(v6, v7, v8))
  {
    NSLog(&cfstr_NoJointPathsEx.isa, v5);
    goto LABEL_45;
  }
  uint64_t v23 = [MDLSkeleton alloc];
  float32x4_t v25 = objc_msgSend_stringWithUTF8String_(NSString, v24, (uint64_t)v5);
  float32x4_t v27 = objc_msgSend_initWithName_jointPaths_(v23, v26, (uint64_t)v25, v6);

  long long v40 = 0u;
  long long v41 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr((uint64_t *)&v40, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v43);
  float32x2_t v30 = objc_msgSend_jointBindTransforms(v27, v28, v29);
  objc_msgSend_resetWithUsdAttribute_time_(v30, v31, (uint64_t)&v40, a2);

  long long v38 = 0u;
  long long v39 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr((uint64_t *)&v38, (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)v43);
  uint64_t v34 = objc_msgSend_jointRestTransforms(v27, v32, v33);
  objc_msgSend_resetWithUsdAttribute_time_(v34, v35, (uint64_t)&v38, a2);

  id v36 = v27;
  if ((BYTE8(v39) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v39);
  if (*((void *)&v38 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v38 + 1));
  }
  if ((BYTE8(v41) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v41);
  if (*((void *)&v40 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v40 + 1));
  }

LABEL_46:
  sub_20B06A698((uint64_t)v44);

  MEMORY[0x210530C10](v43);

  return v36;
}

void sub_20B10FE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B1104F8((uint64_t *)va);
  sub_20B06A698((uint64_t)va2);

  MEMORY[0x210530C10]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B10FF0C(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,long long a37,long long a38,long long a39,long long a40,long long a41,long long a42,long long a43,long long a44,long long a45,long long a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  a50 = *MEMORY[0x263EF8340];
  id v82 = a3;
  *(void *)&long long v83 = a4;
  *((void *)&v83 + 1) = a5;
  a48 = 0;
  a49 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr((uint64_t *)&a37, a2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if ((BYTE8(a38) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&a38 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&a38);
  if (*((void *)&a37 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&a37 + 1));
  }
  if (sub_20B10F938((uint64_t)&a48))
  {
    *(void *)&a39 = 0;
    a37 = 0u;
    a38 = 0u;
    uint64_t v54 = sub_20B10F970(&a48);
    long long v55 = *(_OWORD *)(v54 + 16);
    a37 = *(_OWORD *)v54;
    a38 = v55;
    uint64_t v56 = *(void *)(v54 + 32);
    *(void *)&a39 = v56;
    if (v56)
    {
      long long v57 = (atomic_ullong *)(v56 - 16);
      if (*((void *)&a38 + 1)) {
        long long v57 = (atomic_ullong *)*((void *)&a38 + 1);
      }
      atomic_fetch_add_explicit(v57, 1uLL, memory_order_relaxed);
    }
    int v58 = objc_opt_new();
    sub_20B1105AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&a37);
    long long v59 = (uint64_t *)a39;
    sub_20B1105AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&a37);
    long long v60 = (uint64_t *)(a39 + 8 * a37);
    if (v59 != v60)
    {
      while (1)
      {
        uint64_t v61 = *v59;
        if ((*v59 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v61 &= 0xFFFFFFFFFFFFFFF8;
        }
        if (!v61)
        {
          sub_20B0B03D4(a1, &a45);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&a45);
          NSLog(&cfstr_IllegalJointPa_0.isa);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_20B06A424((uint64_t)&a45);
          objc_msgSend_removeAllObjects(v58, v69, v70);
          goto LABEL_26;
        }
        id v62 = [NSString alloc];
        unint64_t v64 = v61 & 0xFFFFFFFFFFFFFFF8;
        if ((v61 & 0xFFFFFFFFFFFFFFF8) == 0) {
          break;
        }
        unint64_t v65 = (uint64_t *)(v64 + 16);
        if ((*(char *)(v64 + 39) & 0x80000000) == 0) {
          goto LABEL_19;
        }
        uint64_t v66 = objc_msgSend_initWithUTF8String_(v62, v63, *v65);
LABEL_20:
        uint64_t v68 = (void *)v66;
        objc_msgSend_addObject_(v58, v67, v66);

        if ((v61 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)v64, 0xFFFFFFFE, memory_order_release);
        }
        if (++v59 == v60) {
          goto LABEL_26;
        }
      }
      unint64_t v65 = (uint64_t *)"";
LABEL_19:
      uint64_t v66 = objc_msgSend_initWithUTF8String_(v62, v63, (uint64_t)v65);
      goto LABEL_20;
    }
LABEL_26:
    sub_20B1104F8(&a37);
  }
  else
  {
    int v58 = 0;
  }
  a45 = 0u;
  a46 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetGeomBindTransformAttr((uint64_t *)&a45, a2);
  int v73 = sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&a45);
  if (v83 != 0 || (objc_msgSend_count(v58, v71, v72) ? (int v74 = 1) : (int v74 = v73), v74 == 1))
  {
    uint64_t v75 = objc_opt_new();
    objc_msgSend_setSkeleton_(v75, v76, v83);
    objc_msgSend_setJointAnimation_(v75, v77, *((uint64_t *)&v83 + 1));
    a43 = 0u;
    a44 = 0u;
    a41 = 0u;
    a42 = 0u;
    a39 = 0u;
    a40 = 0u;
    a37 = 0u;
    a38 = 0u;
    if (v73) {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
    }
    long long v79 = *(_OWORD *)(MEMORY[0x263EF8990] + 16);
    var20[0] = *MEMORY[0x263EF8990];
    var20[1] = v79;
    var20[2] = *(_OWORD *)(MEMORY[0x263EF8990] + 32);
    objc_msgSend_setGeometryBindTransform_(v75, v78, (uint64_t)var20);
    if (v58 && objc_msgSend_count(v58, v80, v81)) {
      objc_msgSend_setJointPaths_(v75, v80, (uint64_t)v58);
    }
    objc_msgSend_setComponent_forProtocol_(v82, v80, (uint64_t)v75, &unk_26BF5E758);
  }
  if ((BYTE8(a46) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&a46 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&a46);
  if (*((void *)&a45 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&a45 + 1));
  }
  sub_20B06A698((uint64_t)&a48);
}

void sub_20B110334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B1104F8(&a51);

  sub_20B06A698((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void sub_20B11043C()
{
}

void *sub_20B11049C(void *result)
{
  if (result)
  {
    sub_20B1104F8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B1104F8(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    float v3 = a1 + 3;
    uint64_t v2 = (atomic_ullong *)a1[3];
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v6 = *(void (**)(void))(*v3 + 8);
        if (v6) {
          v6();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      unint64_t v4 = (void *)a1[4];
      if (*a1)
      {
        uint64_t v5 = 8 * *a1;
        do
        {
          if ((*v4 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
        unint64_t v4 = (void *)a1[4];
      }
      operator delete(v4 - 2);
    }
    *float v3 = 0;
    v3[1] = 0;
  }
}

void sub_20B1105AC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::TfToken]");
      unint64_t v4 = sub_20B110620((uint64_t)this, *((uint64_t **)this + 4), *(void *)this, *(void *)this);
      sub_20B1104F8(this);
      *((void *)this + 4) = v4;
    }
  }
}

uint64_t *sub_20B110620(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  double result = sub_20B110694(a1, a3);
  if (a4)
  {
    uint64_t v7 = 8 * a4;
    uint64_t v8 = result;
    do
    {
      uint64_t v9 = *a2;
      *uint64_t v8 = *a2;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++a2;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void *sub_20B110694(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B110720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B110738(void *a1)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  a1;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v20 = 0;
  uint64_t v21 = MEMORY[0x263F90750] + 16;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  uint64_t v3 = 0;
  memset(&v2[3], 0, 32);
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUVertexCountAttr((uint64_t *)v2, v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
}

void sub_20B111DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  MEMORY[0x210532650](v55, 0x60C4044C4A2DFLL);
  __cxa_guard_abort(&qword_2676910F8);
  long long __p = &a30;
  sub_20B112248((void ***)&__p);

  sub_20B06A6E8((uint64_t)&a33);
  sub_20B06A6E8((uint64_t)&a39);
  sub_20B06A6E8((uint64_t)&a45);
  sub_20B06A6E8((uint64_t)&a55);
  sub_20B06A6E8(v56 - 224);
  uint64_t v58 = *(void *)(v56 - 168);
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v59 = *(void *)(v56 - 160);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530D20](v56 - 152);

  _Unwind_Resume(a1);
}

void sub_20B112248(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20B1122E0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B1122E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return sub_20B06A5E0(result);
  }
  return result;
}

void sub_20B112350(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        sub_20B1123E8((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B1123E8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[4];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = a2[3];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)(a2 + 2));
  uint64_t result = a2[1];
  if (result)
  {
    return sub_20B06A5E0(result);
  }
  return result;
}

void sub_20B112470(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
      uint64_t v4 = (uint64_t *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B112508((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 8 * v5;
        uint64_t v9 = v6;
        do
        {
          uint64_t v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void *sub_20B112508(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B112594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_20B1125AC(float64x2_t *a1)
{
  *(void *)&double result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]).u64[0];
  return result;
}

uint64_t sub_20B1125E0(char *a1, void *a2, char *a3)
{
  for (uint64_t i = 0; i != 84; i += 3)
  {
    sub_20B07F8E0(__p, (&off_267690898)[i]);
    MEMORY[0x210532590](&v11);
    uint64_t v7 = sub_20B112728(a1, (uint64_t)__p, &v11);
    std::locale::~locale(&v11);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if ((v7 & 0x8000000000000000) == 0)
    {
      *a2 = (&off_267690898)[i + 1];
      uint64_t v9 = (char *)&(&off_267690898)[i + 2];
      goto LABEL_10;
    }
  }
  sub_20B07F8E0(__p, (char *)qword_267690B38);
  MEMORY[0x210532590](&v11);
  uint64_t v8 = sub_20B112728(a1, (uint64_t)__p, &v11);
  std::locale::~locale(&v11);
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (v8 < 0) {
      return 0;
    }
LABEL_8:
    uint64_t v9 = &byte_267690B48;
    *a2 = qword_267690B40;
LABEL_10:
    *a3 = *v9;
    return 1;
  }
  if ((v8 & 0x8000000000000000) == 0) {
    goto LABEL_8;
  }
  return 0;
}

void sub_20B112700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B112728(char *a1, uint64_t a2, const std::locale *a3)
{
  size_t v3 = a1;
  uint64_t v4 = a1[23];
  uint64_t v5 = *((void *)a1 + 1);
  if ((v4 & 0x80u) != 0)
  {
    a1 = *(char **)a1;
    uint64_t v4 = v5;
  }
  uint64_t v6 = (uint64_t)&a1[v4];
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (char *)a2;
  }
  else {
    uint64_t v8 = *(char **)a2;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  long long v14 = a3;
  char v13 = 0;
  uint64_t v9 = sub_20B121B50(a1, v6, v8, &v8[v7], &v14, (uint64_t)&v13, (uint64_t)&v13);
  if (v3[23] < 0)
  {
    std::locale v11 = v3;
    size_t v3 = *(char **)v3;
    uint64_t v10 = *((void *)v11 + 1);
  }
  else
  {
    uint64_t v10 = v3[23];
  }
  if (&v3[v10] == v9) {
    return -1;
  }
  else {
    return v9 - v3;
  }
}

void sub_20B1127D8(void *a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::UsdShadeInput *a4, uint64_t a5)
{
  v50[2] = *MEMORY[0x263EF8340];
  id v9 = a1;
  id v10 = a3;
  v50[0] = 0;
  v50[1] = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get() & 1) == 0) {
    goto LABEL_45;
  }
  int v11 = sub_20B112C2C((uint64_t)v50);
  if (v11) {
    uint64_t v12 = 7;
  }
  else {
    uint64_t v12 = 0;
  }
  if (sub_20B112C64((uint64_t)v50))
  {
    uint64_t v12 = 8;
    goto LABEL_12;
  }
  if (sub_20B112C9C((uint64_t)v50))
  {
    uint64_t v12 = 5;
    goto LABEL_12;
  }
  int v13 = sub_20B112CD4((uint64_t)v50);
  if (v13) {
    uint64_t v12 = 3;
  }
  if ((v13 | v11) == 1)
  {
LABEL_12:
    long long v14 = NSString;
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)__dst, a4);
    unint64_t v16 = (unint64_t)__dst[0] & 0xFFFFFFFFFFFFFFF8;
    if (((unint64_t)__dst[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v17 = (uint64_t *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
      {
        objc_msgSend_stringWithUTF8String_(v14, v15, *v17);
        uint64_t v19 = LABEL_17:;
        if (((uint64_t)__dst[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__dst[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v20 = objc_msgSend_propertyNamed_(v9, v18, (uint64_t)v19);
        uint64_t v23 = v20;
        if (!v20 || objc_msgSend_semantic(v20, v21, v22) != a2)
        {
          float32x4_t v25 = [MDLMaterialProperty alloc];
          uint64_t v27 = objc_msgSend_initWithName_semantic_(v25, v26, (uint64_t)v19, a2);

          uint64_t v23 = (void *)v27;
        }
        switch(v12)
        {
          case 1:
          case 3:
            memset(v49, 0, 32);
            *(_OWORD *)__dst = 0u;
            uint64_t v28 = sub_20B112D58(v50);
            uint64_t v29 = v28;
            if (*(char *)(v28 + 23) < 0)
            {
              sub_20B07F994(__dst, *(void **)v28, *(void *)(v28 + 8));
            }
            else
            {
              long long v30 = *(_OWORD *)v28;
              v49[0] = *(void **)(v28 + 16);
              *(_OWORD *)__dst = v30;
            }
            if (*(char *)(v29 + 47) < 0)
            {
              sub_20B07F994(&v49[1], *(void **)(v29 + 24), *(void *)(v29 + 32));
            }
            else
            {
              long long v40 = *(_OWORD *)(v29 + 24);
              v49[3] = *(void **)(v29 + 40);
              *(_OWORD *)&v49[1] = v40;
            }
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v47 = 0;
            if (SHIBYTE(v49[3]) < 0)
            {
              sub_20B07F994(__p, v49[1], (unint64_t)v49[2]);
            }
            else
            {
              *(_OWORD *)long long __p = *(_OWORD *)&v49[1];
              uint64_t v47 = v49[3];
            }
            sub_20B121E3C(a5, (unsigned __int8 *)__p, (uint64_t)__p);
            id v41 = [NSString alloc];
            if (SHIBYTE(v47) >= 0) {
              uint64_t v43 = objc_msgSend_initWithCString_encoding_(v41, v42, (uint64_t)__p, 4, __p[0], __p[1], v47);
            }
            else {
              uint64_t v43 = objc_msgSend_initWithCString_encoding_(v41, v42, (uint64_t)__p[0], 4, __p[0], __p[1], v47);
            }
            uint64_t v45 = (void *)v43;
            objc_msgSend_setStringValue_(v23, v44, v43);

            if (SHIBYTE(v47) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v49[3]) < 0) {
              operator delete(v49[1]);
            }
            if (SHIBYTE(v49[0]) < 0) {
              operator delete(__dst[0]);
            }
            break;
          case 5:
            LODWORD(v31) = *(_DWORD *)sub_20B112F58((uint64_t)v50);
            objc_msgSend_setFloatValue_(v23, v32, v33, v31);
            break;
          case 7:
            uint64_t v34 = (double *)sub_20B112EC4(v50);
            objc_msgSend_setFloat3Value_(v23, v35, v36, *v34);
            break;
          case 8:
            int32x4_t v37 = (double *)sub_20B112E30(v50);
            objc_msgSend_setFloat4Value_(v23, v38, v39, *v37);
            break;
          default:
            break;
        }
        objc_msgSend_setProperty_(v9, v24, (uint64_t)v23);

        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v17 = (uint64_t *)"";
    }
    objc_msgSend_stringWithUTF8String_(v14, v15, (uint64_t)v17);
    goto LABEL_17;
  }
LABEL_45:
  sub_20B06A698((uint64_t)v50);
}

void sub_20B112B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20B112DEC((uint64_t)&__p);

  sub_20B06A698((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20B112C2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 68) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B112C64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 67) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B112C9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 10) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B112CD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return MEMORY[0x270FA4F90](a1, &unk_26BF4EE30);
}

uint64_t sub_20B112D58(void *a1)
{
  if (sub_20B112CD4((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B121D04, &unk_26BF4EE30);
  }
}

uint64_t sub_20B112DEC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20B112E30(void *a1)
{
  if (sub_20B112C64((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F90620];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EF58);
  }
}

uint64_t sub_20B112EC4(void *a1)
{
  if (sub_20B112C2C((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F90600];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EF28);
  }
}

uint64_t sub_20B112F58(uint64_t a1)
{
  if (sub_20B112C9C(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8C248];
    return MEMORY[0x270FA4FC8](a1, sub_20B12272C, v4);
  }
}

void sub_20B112FEC(uint64_t a1, void *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2105310B0](__p, "constant");
  uint64_t v5 = (uint64_t *)(a1 + 80);
  unint64_t v6 = (unint64_t)__p[0];
  if ((*(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL v9 = 1;
  }
  else
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2105310B0](&v25, "vertex");
    uint64_t v7 = v25;
    if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (v25 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v9 = 1;
    }
    else
    {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2105310B0](&v24, "uniform");
      uint64_t v8 = v24;
      if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (v24 & 0xFFFFFFFFFFFFFFF8))
      {
        BOOL v9 = 1;
      }
      else
      {
        uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2105310B0](&v23, "faceVarying");
        BOOL v9 = (*v5 & 0xFFFFFFFFFFFFFFF8) == (v23 & 0xFFFFFFFFFFFFFFF8);
        if ((v23 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v8 = v24;
      }
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v7 = v25;
    }
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v6 = (unint64_t)__p[0];
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!v9)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v22 = 0;
    if ((*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else {
      unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
    }
    if (*(char *)(EmptyString + 23) < 0)
    {
      sub_20B07F994(__p, *(void **)EmptyString, *(void *)(EmptyString + 8));
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v22 = *(void *)(EmptyString + 16);
      *(_OWORD *)long long __p = v11;
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::VtValue *)a2[1];
    if ((pxrInternal__aapl__pxrReserved__::VtValue *)a2[2] == v12 || !*((void *)v12 + 1))
    {
LABEL_62:
      if (SHIBYTE(v22) < 0) {
        operator delete(__p[0]);
      }
      return;
    }
    int NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v12);
    int v14 = NumElements;
    uint64_t v15 = a2[14];
    uint64_t v16 = a2[19];
    uint64_t v17 = *(void *)(a1 + 16);
    if (v17)
    {
      if (v17 == 1)
      {
        MEMORY[0x2105310B0](&v25, "constant");
LABEL_40:
        if (&v25 == v5)
        {
          if ((v25 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          if ((*v5 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v5 = v25;
        }
        uint64_t v18 = __p;
        if (v22 < 0) {
          uint64_t v18 = (void **)__p[0];
        }
        NSLog(&cfstr_InferringAttri.isa, v18);
        goto LABEL_62;
      }
      if (v17 == NumElements)
      {
        MEMORY[0x2105310B0](&v25, "vertex");
        goto LABEL_40;
      }
      if (v17 == (int)v15)
      {
        MEMORY[0x2105310B0](&v25, "uniform");
        goto LABEL_40;
      }
      if (v17 == (int)v16)
      {
        MEMORY[0x2105310B0](&v25, "faceVarying");
        goto LABEL_40;
      }
LABEL_65:
      uint64_t v20 = __p;
      if (v22 < 0) {
        uint64_t v20 = (void **)__p[0];
      }
      NSLog(&cfstr_UnableToInferA.isa, v20);
      goto LABEL_62;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(_DWORD *)(a1 + 88))
    {
      MEMORY[0x2105310B0](&v25, "constant");
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)v14)
    {
      MEMORY[0x2105310B0](&v25, "vertex");
    }
    else if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) == *(int *)(a1 + 88) * (uint64_t)(int)v15)
    {
      MEMORY[0x2105310B0](&v25, "uniform");
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)a1) != *(int *)(a1 + 88) * (uint64_t)(int)v16) {
        goto LABEL_65;
      }
      MEMORY[0x2105310B0](&v25, "faceVarying");
    }
    if (&v25 == v5)
    {
      if ((v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *uint64_t v5 = v25;
    }
    uint64_t v19 = __p;
    if (v22 < 0) {
      uint64_t v19 = (void **)__p[0];
    }
    NSLog(&cfstr_InferringAttri_0.isa, v19);
    goto LABEL_62;
  }
}

void sub_20B1133E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B113484(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *a1, uint64_t a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  long long v22 = 0u;
  long long v23 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr((uint64_t *)&v22, a1);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if (!v32)
  {
LABEL_36:
    uint64_t v13 = 0;
    goto LABEL_37;
  }
  v24[0] = pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue((pxrInternal__aapl__pxrReserved__ *)&v31, v4);
  uint64_t v5 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
  if ((v7 & 1) == 0)
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else {
      unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
    }
    if (*(char *)(EmptyString + 23) < 0) {
      unint64_t EmptyString = *(void *)EmptyString;
    }
    uint64_t ValueTypeNameForValue = pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue((pxrInternal__aapl__pxrReserved__ *)&v31, v8);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(v24, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&ValueTypeNameForValue);
    unint64_t v14 = v24[0] & 0xFFFFFFFFFFFFFFF8;
    if ((v24[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        uint64_t v15 = *(const char **)v15;
      }
    }
    else
    {
      uint64_t v15 = "";
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v5);
    if (!v16) {
      uint64_t v16 = sub_20B0A6508(MEMORY[0x263F90560]);
    }
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v20, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v16 + 616));
    unint64_t v17 = v20 & 0xFFFFFFFFFFFFFFF8;
    if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v18 = (const char *)(v17 + 16);
      if (*(char *)(v17 + 39) < 0) {
        uint64_t v18 = *(const char **)v18;
      }
    }
    else
    {
      uint64_t v18 = "";
    }
    NSLog(&cfstr_WarningSSkippi.isa, EmptyString, v15, v18);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v24[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_36;
  }
  sub_20B0A592C(v24, &v31);
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  MEMORY[0x2105310B0](&v27, "points");
  MEMORY[0x2105310B0](v28, "points");
  BOOL v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v5);
  if (!v9) {
    BOOL v9 = sub_20B0A6508(MEMORY[0x263F90560]);
  }
  v28[1] = *((void *)v9 + 77);
  MEMORY[0x2105310B0](&v29, "vertex");
  int v30 = 1;
  unint64_t v10 = a3[2];
  if (v10 >= a3[3])
  {
    uint64_t v11 = sub_20B0A6FC4(a3 + 1, (uint64_t)v24);
  }
  else
  {
    sub_20B0A70D4((uint64_t)(a3 + 3), (void *)a3[2], (uint64_t)v24);
    uint64_t v11 = v10 + 96;
    a3[2] = v10 + 96;
  }
  a3[2] = v11;
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v28[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8((uint64_t)v25);
  sub_20B06A698((uint64_t)v24);
  uint64_t v13 = 1;
LABEL_37:
  sub_20B06A698((uint64_t)&v31);
  if ((BYTE8(v23) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v23 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v23);
  if (*((void *)&v22 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v22 + 1));
  }
  return v13;
}

void sub_20B1137B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B0A3F88(va1);
  sub_20B06A698(v7 - 72);
  sub_20B06A22C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1138B4(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *a1, uint64_t a2, void *a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  long long v24 = 0u;
  long long v25 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr((uint64_t *)&v24, a1);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  if (v33)
  {
    *(void *)&long long v26 = pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue((pxrInternal__aapl__pxrReserved__ *)&v32, v5);
    unint64_t v6 = (unint64_t *)MEMORY[0x263F90560];
    if (!atomic_load(MEMORY[0x263F90560])) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
    if (v8)
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
      {
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        sub_20B0A592C(&v26, &v32);
        *(void *)&long long v29 = 0;
        long long v27 = 0u;
        long long v28 = 0u;
        MEMORY[0x2105310B0]((char *)&v29 + 8, "normals");
        MEMORY[0x2105310B0](&v30, "normals");
        unint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v6);
        if (!v10) {
          unint64_t v10 = sub_20B0A6508(MEMORY[0x263F90560]);
        }
        *((void *)&v30 + 1) = *((void *)v10 + 77);
        pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation((uint64_t *)&v31, a1);
        DWORD2(v31) = 1;
        sub_20B112FEC((uint64_t)&v26, a3);
        uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20B0C5B04((uint64_t)&v26, a3);
        if (v11)
        {
          unint64_t v12 = a3[2];
          if (v12 >= a3[3])
          {
            uint64_t v13 = sub_20B1227A0(a3 + 1, (uint64_t)&v26);
          }
          else
          {
            sub_20B0A73B8((uint64_t)(a3 + 3), (void *)a3[2], (uint64_t)&v26);
            uint64_t v13 = v12 + 96;
            a3[2] = v12 + 96;
          }
          a3[2] = v13;
        }
        else
        {
          if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t EmptyString = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
          }
          if (*(char *)(EmptyString + 23) < 0) {
            unint64_t EmptyString = *(void *)EmptyString;
          }
          NSLog(&cfstr_WarningSSkippi_1.isa, EmptyString);
        }
        if ((v31 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v30 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v29) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v29 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_20B06A6E8((uint64_t)&v27);
        sub_20B06A698((uint64_t)&v26);
      }
    }
    else
    {
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v14 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
      }
      if (*(char *)(v14 + 23) < 0) {
        unint64_t v14 = *(void *)v14;
      }
      uint64_t ValueTypeNameForValue = pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue((pxrInternal__aapl__pxrReserved__ *)&v32, v9);
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)&v26, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&ValueTypeNameForValue);
      unint64_t v15 = v26 & 0xFFFFFFFFFFFFFFF8;
      if ((v26 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v16 = (const char *)(v15 + 16);
        if (*(char *)(v15 + 39) < 0) {
          uint64_t v16 = *(const char **)v16;
        }
      }
      else
      {
        uint64_t v16 = "";
      }
      unint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v6);
      if (!v17) {
        unint64_t v17 = sub_20B0A6508(MEMORY[0x263F90560]);
      }
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v22, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v17 + 616));
      unint64_t v18 = v22 & 0xFFFFFFFFFFFFFFF8;
      if ((v22 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          uint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        uint64_t v19 = "";
      }
      NSLog(&cfstr_WarningSSkippi_0.isa, v14, v16, v19);
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  sub_20B06A698((uint64_t)&v32);
  if ((BYTE8(v25) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v25 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v25);
  uint64_t result = *((void *)&v24 + 1);
  if (*((void *)&v24 + 1)) {
    return sub_20B06A5E0(*((uint64_t *)&v24 + 1));
  }
  return result;
}

void sub_20B113C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v10 = v8;
  *(void *)(v7 + 16) = v10;
  sub_20B0A3F88(va1);
  sub_20B06A698(v9 - 72);
  sub_20B06A22C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B113D44(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  unint64_t v5 = *(void *)(v3 - 8);
  if (v5 >= v4)
  {
    uint64_t result = sub_20B1227A0(a1, a2);
  }
  else
  {
    sub_20B0A73B8(v3, *(void **)(v3 - 8), a2);
    uint64_t result = v5 + 96;
    a1[1] = v5 + 96;
  }
  a1[1] = result;
  return result;
}

void sub_20B113D9C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B113DA4(void *a1, uint64_t a2, uint64_t a3)
{
  v14[1] = a2;
  unint64_t v5 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    return 1;
  }
  if (!atomic_load(v5)) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
  if (result)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2105310B0](v14, "st");
    uint64_t v10 = v14[0];
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) == (v14[0] & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v11 = 1;
    }
    else
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2105310B0](&v13, "Texture_uv");
      BOOL v11 = (*a1 & 0xFFFFFFFFFFFFFFF8) == (v13 & 0xFFFFFFFFFFFFFFF8);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v10 = v14[0];
    }
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v11) {
      return 1;
    }
    if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (const void **)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    }
    return a3 + 8 != sub_20B080D50(a3, EmptyString);
  }
  return result;
}

uint64_t sub_20B113F0C(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *a1, uint64_t a2, void *a3, uint64_t **a4, int *a5)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v49 = 0u;
  long long v47 = 0u;
  memset(v48, 0, sizeof(v48));
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)((char *)&v50 + 8));
  *(void *)&long long v51 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetDeclarationInfo(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v49 + 8), (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)((char *)&v50 + 8), (pxrInternal__aapl__pxrReserved__::TfToken *)&v51, (int *)&v51 + 2);
  MEMORY[0x2105310B0](&ValueTypeNameForValue, "displayColor");
  unint64_t v9 = ValueTypeNameForValue;
  if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) == (ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL v12 = 1;
  }
  else
  {
    MEMORY[0x2105310B0](&v45, "primvars:displayColor");
    uint64_t v10 = v45;
    if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) == (v45 & 0xFFFFFFFFFFFFFFF8))
    {
      BOOL v12 = 1;
    }
    else
    {
      MEMORY[0x2105310B0](&v44, "displayOpacity");
      uint64_t v11 = v44;
      if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) == (v44 & 0xFFFFFFFFFFFFFFF8))
      {
        BOOL v12 = 1;
      }
      else
      {
        MEMORY[0x2105310B0](&v43, "primvars:displayOpacity");
        BOOL v12 = (*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) == (v43 & 0xFFFFFFFFFFFFFFF8);
        if ((v43 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v11 = v44;
      }
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v10 = v45;
    }
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v9 = ValueTypeNameForValue;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)&v49 + 1);
  unint64_t v42 = *((void *)&v49 + 1);
  if ((BYTE8(v49) & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v42 = v13 & 0xFFFFFFFFFFFFFFF8;
    v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v14 = sub_20B113DA4(&v42, *((uint64_t *)&v50 + 1), (uint64_t)a4);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2105310B0](&ValueTypeNameForValue, "normals");
  unint64_t v15 = ValueTypeNameForValue;
  if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) == (ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8))
  {
    int v17 = 1;
  }
  else
  {
    if (!atomic_load(MEMORY[0x263F90560])) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    int v17 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
    unint64_t v15 = ValueTypeNameForValue;
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2105310B0](&ValueTypeNameForValue, "skinJointIndices");
  unint64_t v18 = ValueTypeNameForValue;
  if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) == (ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL v19 = 1;
  }
  else
  {
    MEMORY[0x2105310B0](&v45, "skinJointWeights");
    BOOL v19 = (*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) == (v45 & 0xFFFFFFFFFFFFFFF8);
    if ((v45 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v18 = ValueTypeNameForValue;
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v12 || v19 || ((v14 | v17) & 1) == 0) {
    goto LABEL_71;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtValue>() & 1) == 0)
  {
    unint64_t v27 = *a3 & 0xFFFFFFFFFFFFFFF8;
    if (v27)
    {
      long long v28 = (const char *)(v27 + 16);
      if (*(char *)(v27 + 39) < 0) {
        long long v28 = *(const char **)v28;
      }
    }
    else
    {
      long long v28 = "";
    }
    unint64_t v29 = *((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8;
    if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      NSLog(&cfstr_WarningSSkippi_2.isa, v28, "");
      goto LABEL_71;
    }
    unint64_t v30 = v29 + 16;
    int v31 = *(char *)(v29 + 39);
    uint64_t v32 = @"Warning: %s : Skipping attribute %s, couldn't get the primvar contents";
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_70;
    }
LABEL_69:
    unint64_t v30 = *(void *)v30;
LABEL_70:
    NSLog(&v32->isa, v28, v30);
    goto LABEL_71;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(a1)) {
    pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices();
  }
  sub_20B112FEC((uint64_t)&v47, a3);
  unint64_t EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20B0C5B04((uint64_t)&v47, a3);
  if (!EmptyString
    || (unint64_t EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20B0C67E0((pxrInternal__aapl__pxrReserved__::VtValue *)&v47),
        !EmptyString))
  {
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      long long v28 = (const char *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else
    {
      unint64_t EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      long long v28 = (const char *)EmptyString;
    }
    if (v28[23] < 0) {
      long long v28 = *(const char **)v28;
    }
    if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t v30 = (*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else {
      unint64_t v30 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    }
    uint64_t v32 = @"Warning: %s : Skipping attribute %s\n";
    if ((*(char *)(v30 + 23) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (!v14)
  {
    MEMORY[0x2105310B0](&ValueTypeNameForValue, "normals");
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)&long long v50 = ValueTypeNameForValue;
    goto LABEL_94;
  }
  unint64_t ValueTypeNameForValue = pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue((pxrInternal__aapl__pxrReserved__ *)&v47, v21);
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    long long v24 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2105310B0](&ValueTypeNameForValue, "textureCoordinates");
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)&long long v50 = ValueTypeNameForValue;
    int v25 = *a5;
    if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
      long long v26 = (long long *)((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      long long v26 = (long long *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v24);
    }
    unint64_t ValueTypeNameForValue = (unint64_t)v26;
    *((_DWORD *)sub_20B080DE0(a4, (const void **)v26, (uint64_t)&unk_20B1E7420, (long long **)&ValueTypeNameForValue) + 14) = v25;
    ++*a5;
LABEL_94:
    unint64_t v40 = a3[2];
    if (v40 >= a3[3])
    {
      uint64_t v41 = sub_20B1227A0(a3 + 1, (uint64_t)&v47);
    }
    else
    {
      sub_20B0A73B8((uint64_t)(a3 + 3), (void *)a3[2], (uint64_t)&v47);
      uint64_t v41 = v40 + 96;
      a3[2] = v40 + 96;
    }
    a3[2] = v41;
    goto LABEL_71;
  }
  unint64_t v34 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (v34)
  {
    float32x2_t v35 = (const char *)(v34 + 16);
    if (*(char *)(v34 + 39) < 0) {
      float32x2_t v35 = *(const char **)v35;
    }
  }
  else
  {
    float32x2_t v35 = "";
  }
  unint64_t v36 = *((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8;
  if ((*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    int32x4_t v37 = (const char *)(v36 + 16);
    if (*(char *)(v36 + 39) < 0) {
      int32x4_t v37 = *(const char **)v37;
    }
  }
  else
  {
    int32x4_t v37 = "";
  }
  uint64_t v45 = pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue((pxrInternal__aapl__pxrReserved__ *)&v47, v23);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)&ValueTypeNameForValue, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v45);
  unint64_t v38 = ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8;
  if ((ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v39 = (const char *)(v38 + 16);
    if (*(char *)(v38 + 39) < 0) {
      uint64_t v39 = *(const char **)v39;
    }
  }
  else
  {
    uint64_t v39 = "";
  }
  NSLog(&cfstr_WarningSSkippi_3.isa, v35, v37, v39, v42);
  if ((ValueTypeNameForValue & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(ValueTypeNameForValue & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_71:
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((BYTE8(v49) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8((uint64_t)v48);
  return sub_20B06A698((uint64_t)&v47);
}

void sub_20B1145A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B0A3F88(va);
  _Unwind_Resume(a1);
}

void sub_20B1146B4()
{
  v19[1] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v16 = 0;
  uint64_t v13 = (void **)(MEMORY[0x263F907A0] + 16);
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(&v10, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v13);
  MEMORY[0x210530F70](&v13);
  uint64_t v1 = v10;
  uint64_t v0 = v11;
  if (v11 == v10)
  {
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v16 = 0;
    uint64_t v13 = (void **)(MEMORY[0x263F907A0] + 16);
    if (!atomic_load(MEMORY[0x263F90550])) {
      sub_20B122970();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
    MEMORY[0x210530F70](&v13);
    sub_20B0D29D0((uint64_t)&v13, (uint64_t *)&v6 + 1, &v7);
    char v5 = sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v15);
    if (v14) {
      sub_20B06A5E0(v14);
    }
    MEMORY[0x210530CB0](&v6);
    if ((v5 & 1) == 0)
    {
LABEL_21:
      uint64_t v9 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      sub_20B0AF608();
    }
  }
  else
  {
    while (1)
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      v19[0] = 0;
      sub_20B0D29D0((uint64_t)&v6, (uint64_t *)(v1 + 8), (_DWORD *)(v1 + 16));
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v16 = 0;
      uint64_t v13 = (void **)(MEMORY[0x263F907A0] + 16);
      if (!atomic_load(MEMORY[0x263F90550])) {
        sub_20B122970();
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      MEMORY[0x210530F70](&v13);
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v7);
      if (*((void *)&v6 + 1)) {
        sub_20B06A5E0(*((uint64_t *)&v6 + 1));
      }
      sub_20B0D29D0((uint64_t)&v13, &v18, v19);
      char v3 = sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v15);
      if (v14) {
        sub_20B06A5E0(v14);
      }
      MEMORY[0x210530CB0](&v17);
      if (v3) {
        break;
      }
      v1 += 24;
      if (v1 == v0) {
        goto LABEL_21;
      }
    }
  }
  uint64_t v13 = (void **)&v10;
  sub_20B1228B0(&v13);
}

void sub_20B114C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8(v33);
  sub_20B06A698((uint64_t)&a25);
  sub_20B06A6E8((uint64_t)&a15);
  sub_20B06A698(v34 - 120);
  if ((a21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a25 = (void **)&a22;
  sub_20B1228B0(&a25);
  _Unwind_Resume(a1);
}

void sub_20B114DB0(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(&v1, a1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
}

void sub_20B114E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B114EAC(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, pxrInternal__aapl__pxrReserved__::UsdGeomMesh *a2)
{
  MEMORY[0x2105310B0](&v9, "cornerIndices");
  int HasAttribute = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (HasAttribute)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerIndicesAttr(&v9, a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  MEMORY[0x2105310B0](&v9, "cornerSharpnesses");
  int v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerSharpnessesAttr(&v9, a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  }
  MEMORY[0x2105310B0](&v9, "creaseIndices");
  int v6 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseIndicesAttr(&v9, a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  MEMORY[0x2105310B0](&v9, "creaseLengths");
  int v7 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseLengthsAttr(&v9, a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>();
  }
  MEMORY[0x2105310B0](&v9, "creaseSharpnesses");
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseSharpnessesAttr(&v9, a2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  }
  return result;
}

void sub_20B1151B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B115214(uint64_t a1, uint64_t *a2, float64x2_t *a3, void *a4)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v6 = (v4 - *a2) >> 3;
  if (v6 == *a4)
  {
    uint64_t v9 = objc_opt_new();
    long long __p = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    sub_20B122DF8(&__p, v6, MEMORY[0x263EF89A8]);
    if (v4 != v5)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      unint64_t v13 = v6;
      do
      {
        *(double *)&long long v14 = sub_20B1125AC((float64x2_t *)(a4[4] + v12));
        uint64_t v15 = (char *)__p + v11;
        *uint64_t v15 = v14;
        v15[1] = v16;
        v15[2] = v17;
        v15[3] = v18;
        BOOL v19 = NSString;
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a2 + v10));
        uint64_t v22 = objc_msgSend_stringWithUTF8String_(v19, v21, Text);
        objc_msgSend_addObject_(v9, v23, (uint64_t)v22);

        v12 += 128;
        v11 += 64;
        v10 += 8;
        --v13;
      }
      while (v13);
    }
    long long v24 = [MDLSkinDeformer alloc];
    int v25 = __p;
    double v26 = sub_20B1125AC(a3);
    uint64_t v28 = objc_msgSend_initWithJointPaths_jointBindTransforms_count_meshBindTransform_(v24, v27, (uint64_t)v9, v25, v6, v26);
    unint64_t v29 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v28;

    if (__p)
    {
      uint64_t v33 = __p;
      operator delete(__p);
    }
  }
  else
  {
    NSLog(&cfstr_WarningJointPa.isa);
  }
}

void sub_20B115388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B1153C4()
{
}

void sub_20B115A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

uint64_t sub_20B115BC4(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(sub_20B121ACC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    int v7 = j__strrchr("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    sub_20B120D88((unint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

_DWORD *sub_20B115C64@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4 = (_DWORD *)(a1 + 16);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (v5)
  {
    sub_20B0B0824(a2, v4);
    BOOL v6 = a2 + 1;
    int v7 = (_DWORD *)(a1 + 20);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8)
    {
      sub_20B0B0824(a2, (_DWORD *)(v8 + 16));
      int v7 = (_DWORD *)(v8 + 20);
    }
    else
    {
      uint64_t v9 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v5);
      sub_20B0B0824(a2, v9);
      int v7 = v9 + 1;
    }
    BOOL v6 = a2 + 1;
  }

  return sub_20B0B0870(v6, v7);
}

void sub_20B115D08(uint64_t a1)
{
  v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_20B0A5A2C((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26BF51390;
  sub_20B0C8144();
}

void sub_20B115DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void **sub_20B115DD8(void **a1)
{
  sub_20B06A698((uint64_t)(a1 + 5));
  sub_20B06A698((uint64_t)(a1 + 3));
  uint64_t v3 = a1;
  sub_20B120DD8(&v3);
  return a1;
}

void sub_20B115E28(void *a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v3 = sub_20B0A3578(*(void **)(a2 + 8));
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v37 = *(_OWORD *)v3;
  long long v38 = v4;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v39 = v5;
  if (v5)
  {
    BOOL v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v38 + 1)) {
      BOOL v6 = (atomic_ullong *)*((void *)&v38 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
    long long v34 = v37;
    long long v35 = v38;
    uint64_t v36 = v39;
    if (v39)
    {
      int v7 = (atomic_ullong *)(v39 - 16);
      if (*((void *)&v35 + 1)) {
        int v7 = (atomic_ullong *)*((void *)&v35 + 1);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    long long v34 = v37;
    long long v35 = v38;
    uint64_t v36 = 0;
  }
  MEMORY[0x2105310B0](&v40, "points");
  unint64_t v8 = a1[7] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = (atomic_uint *)(v40 & 0xFFFFFFFFFFFFFFF8);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v8 == v9)
  {
    uint64_t v10 = sub_20B0A3578(a1);
    long long v11 = *(_OWORD *)(v10 + 16);
    long long v40 = *(_OWORD *)v10;
    long long v41 = v11;
    uint64_t v12 = *(void *)(v10 + 32);
    uint64_t v42 = v12;
    if (v12)
    {
      unint64_t v13 = (atomic_ullong *)(v12 - 16);
      if (*((void *)&v41 + 1)) {
        unint64_t v13 = (atomic_ullong *)*((void *)&v41 + 1);
      }
      atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
    }
    unint64_t v14 = a1[2];
    if ((unint64_t)v40 >= v14)
    {
      if (v14)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 2));
          unint64_t v17 = *(int *)(a1[6] + 4 * v16);
          if ((unint64_t)v34 > v17)
          {
            sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
            uint64_t v18 = v36;
            sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
            BOOL v19 = (float32x2_t *)(v18 + 12 * (int)v17);
            float v20 = v19[1].f32[0];
            float32x2_t v21 = *v19;
            float32x2_t v22 = *(float32x2_t *)(v42 + v15);
            float v23 = *(float *)(v42 + v15 + 8);
            sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
            long long v24 = (float32x2_t *)(v36 + 12 * (int)v17);
            *long long v24 = vadd_f32(v22, v21);
            v24[1].f32[0] = v23 + v20;
          }
          ++v16;
          v15 += 12;
        }
        while (v16 < a1[2]);
      }
      else if ((void)v40 && (void)v34)
      {
        uint64_t v25 = 0;
        unint64_t v26 = 1;
        do
        {
          sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
          uint64_t v27 = v36;
          sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
          float v28 = *(float *)(v27 + v25 + 8);
          float32x2_t v29 = *(float32x2_t *)(v27 + v25);
          float32x2_t v30 = *(float32x2_t *)(v42 + v25);
          float v31 = *(float *)(v42 + v25 + 8);
          sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v34);
          uint64_t v32 = (float32x2_t *)(v36 + v25);
          *uint64_t v32 = vadd_f32(v30, v29);
          v32[1].f32[0] = v31 + v28;
          if (v26 >= (unint64_t)v40) {
            break;
          }
          v25 += 12;
        }
        while (v26++ < (unint64_t)v34);
      }
    }
    sub_20B06A6E8((uint64_t)&v40);
  }
  *(void *)&long long v40 = 0;
  *((void *)&v40 + 1) = &off_26BF50E88;
  sub_20B0A6DA4();
}

void sub_20B1160FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

uint64_t sub_20B116170(unint64_t *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, unint64_t *a3)
{
  unint64_t v4 = *a1;
  if (!*a1) {
    return 0;
  }
  if (*(void *)this == v4)
  {
    unint64_t v7 = 0;
    char v8 = 0;
    do
    {
      sub_20B1105AC(this);
      uint64_t v9 = *((void *)this + 4);
      sub_20B1105AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1);
      v8 |= (*(void *)(v9 + 8 * v7) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a1[4] + 8 * v7) & 0xFFFFFFFFFFFFFFF8);
      ++v7;
    }
    while (*(void *)this > v7);
    if (v8)
    {
      unint64_t v4 = *a1;
      goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  int v15 = 0;
  unint64_t v16 = &v15;
  sub_20B0A624C(a3, v4, &v16);
  if (*a1)
  {
    unint64_t v10 = 0;
    do
    {
      sub_20B1105AC(this);
      long long v11 = (void *)*((void *)this + 4);
      sub_20B1105AC(this);
      uint64_t v12 = *((void *)this + 4) + 8 * *(void *)this;
      sub_20B1105AC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1);
      if (v11 != (void *)v12)
      {
        while ((*v11 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a1[4] + 8 * v10) & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v11 == (void *)v12)
          {
            long long v11 = (void *)v12;
            break;
          }
        }
      }
      sub_20B1105AC(this);
      if (v11 == (void *)(*((void *)this + 4) + 8 * *(void *)this))
      {
        LODWORD(v13) = -1;
      }
      else
      {
        sub_20B1105AC(this);
        unint64_t v13 = ((unint64_t)v11 - *((void *)this + 4)) >> 3;
      }
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      *(_DWORD *)(a3[4] + 4 * v10++) = v13;
    }
    while (v10 < *a1);
  }
  return 1;
}

void sub_20B1162FC(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3)
{
  id v7 = a1;
  if (*(void *)a3)
  {
    unint64_t v4 = 0;
    do
    {
      sub_20B06C1E8(a3);
      if (*(int *)(*((void *)a3 + 4) + 4 * v4) >= 1)
      {
        objc_msgSend_elementCount(v7, v5, v6);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
        operator new[]();
      }
      ++v4;
    }
    while (v4 < *(void *)a3);
  }
}

void sub_20B11651C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B116570(void *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  uint64_t v30 = 0;
  memset(v29, 0, sizeof(v29));
  long long v38 = 0u;
  long long v39 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v37 = 0;
  uint64_t v35 = MEMORY[0x263F90768] + 16;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr((uint64_t *)&v38, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v35);
  MEMORY[0x210530D80](&v35);
  if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38)) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
  }
  if ((BYTE8(v39) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v39);
  if (*((void *)&v38 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v38 + 1));
  }
  unint64_t v4 = *(_DWORD **)a3;
  uint64_t v5 = *(_DWORD **)(a3 + 8);
  if (*(void *)&v29[0] == ((uint64_t)v5 - *(void *)a3) >> 3)
  {
    if (v4 == v5)
    {
LABEL_60:
      *(void *)&long long v40 = 0;
      long long v38 = 0u;
      long long v39 = 0u;
      sub_20B115D08((uint64_t)&v43 + 8);
    }
    while (1)
    {
      uint64_t v28 = 0;
      sub_20B0B0824(&v28, v4);
      sub_20B0B0870((_DWORD *)&v28 + 1, v4 + 1);
      uint64_t v26 = 0;
      uint64_t v25 = 0;
      uint64_t v27 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v35, a2);
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B115BC4(&v35);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v38, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v25 = MEMORY[0x263F90770] + 16;
      if ((BYTE8(v39) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v39);
      if (*((void *)&v38 + 1)) {
        sub_20B06A5E0(*((uint64_t *)&v38 + 1));
      }
      uint64_t v7 = v36;
      if (v36 && atomic_fetch_add_explicit((atomic_uint *volatile)(v36 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      memset(v24, 0, sizeof(v24));
      sub_20B0D29D0((uint64_t)&v38, &v26, &v27);
      char v8 = (void *)sub_20B06A3E4(&v38);
      sub_20B06A390(v24, v8);
      if ((BYTE8(v39) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v39);
      if (*((void *)&v38 + 1)) {
        sub_20B06A5E0(*((uint64_t *)&v38 + 1));
      }
      if (v26 && (*(unsigned char *)(v26 + 57) & 8) == 0 && ((*(uint64_t (**)(uint64_t *))(v25 + 32))(&v25) & 1) != 0)
      {
        long long v22 = 0u;
        long long v23 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr((uint64_t *)&v22, (pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *)&v25);
        if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v22)) {
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
        }
        unint64_t v14 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v14)
        {
          int v15 = (const char *)(v14 + 16);
          if (*(char *)(v14 + 39) < 0) {
            int v15 = *(const char **)v15;
          }
        }
        else
        {
          int v15 = "";
        }
        sub_20B0D29D0((uint64_t)&v38, &v26, &v27);
        unint64_t v16 = *(void *)sub_20B06A3E4(&v38) & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          unint64_t v17 = (const char *)(v16 + 16);
          if (*(char *)(v16 + 39) < 0) {
            unint64_t v17 = *(const char **)v17;
          }
        }
        else
        {
          unint64_t v17 = "";
        }
        NSLog(&cfstr_WarningSSkippi_5.isa, v15, v17);
        if ((BYTE8(v39) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v39);
        if (*((void *)&v38 + 1)) {
          sub_20B06A5E0(*((uint64_t *)&v38 + 1));
        }
        if ((BYTE8(v23) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v23 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v23);
        uint64_t v13 = *((void *)&v22 + 1);
        if (!*((void *)&v22 + 1)) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v9 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v9)
        {
          unint64_t v10 = (const char *)(v9 + 16);
          if (*(char *)(v9 + 39) < 0) {
            unint64_t v10 = *(const char **)v10;
          }
        }
        else
        {
          unint64_t v10 = "";
        }
        sub_20B0D29D0((uint64_t)&v38, &v26, &v27);
        unint64_t v11 = *(void *)sub_20B06A3E4(&v38) & 0xFFFFFFFFFFFFFFF8;
        if (v11)
        {
          uint64_t v12 = (const char *)(v11 + 16);
          if (*(char *)(v11 + 39) < 0) {
            uint64_t v12 = *(const char **)v12;
          }
        }
        else
        {
          uint64_t v12 = "";
        }
        NSLog(&cfstr_WarningSSkippi_5.isa, v10, v12);
        if ((BYTE8(v39) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v39);
        uint64_t v13 = *((void *)&v38 + 1);
        if (!*((void *)&v38 + 1)) {
          goto LABEL_37;
        }
      }
      sub_20B06A5E0(v13);
LABEL_37:
      *(void *)&long long v38 = (char *)v24 + 8;
      sub_20B0C7368((void ***)&v38);
      if ((v24[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v24[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x210530D90](&v25);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v28);
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_60;
      }
    }
  }
  unint64_t v18 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v18)
  {
    BOOL v19 = (const char *)(v18 + 16);
    if (*(char *)(v18 + 39) < 0) {
      BOOL v19 = *(const char **)v19;
    }
  }
  else
  {
    BOOL v19 = "";
  }
  NSLog(&cfstr_WarningSMismat.isa, v19);
  sub_20B1104F8(v29);
  sub_20B06A6E8((uint64_t)v31);
  sub_20B06A6E8((uint64_t)v33);

  sub_20B06A698((uint64_t)&v43 + 8);
  sub_20B06A698((uint64_t)&v42 + 8);
  *(void *)&long long v38 = &v41;
  sub_20B120DD8((void ***)&v38);
}

void sub_20B1175C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_20B05D0D4(a1);
}

uint64_t sub_20B1179CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  return a1;
}

uint64_t sub_20B117A28(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI())
  {
    memset(v8, 0, sizeof(v8));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)&v8[0] = MEMORY[0x263F90768] + 16;
    long long v6 = 0u;
    long long v7 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel((uint64_t *)&v6, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v8);
    if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6))
    {
      long long v4 = 0uLL;
      *(void *)&long long v5 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets();
      *(void *)&long long v3 = &v4;
      sub_20B1219F4((void ***)&v3);
    }
    if ((BYTE8(v7) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v7 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v7);
    if (*((void *)&v6 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v6 + 1));
    }
    return MEMORY[0x210530D80](v8);
  }
  else
  {
    v12[1] = 0;
    v12[2] = 0;
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v12[0] = MEMORY[0x263F90798] + 16;
    long long v10 = 0u;
    long long v11 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphTargetBlendShapesRel((uint64_t *)&v10, v2);
    memset(v9, 0, sizeof(v9));
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets();
    *(void *)&v8[0] = v9;
    sub_20B1219F4((void ***)v8);
    if ((BYTE8(v11) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v11 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v11);
    if (*((void *)&v10 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v10 + 1));
    }
    return MEMORY[0x210530F40](v12);
  }
}

uint64_t sub_20B1180BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  return a1;
}

uint64_t sub_20B118118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v47[27] = *MEMORY[0x263EF8340];
  long long v40 = 0u;
  long long v41 = 0u;
  LODWORD(v40) = 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)&v41 + 1) = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  long long v34 = 0u;
  uint64_t v35 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v36 = 0;
  *(void *)&long long v34 = MEMORY[0x263F90768] + 16;
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr((uint64_t *)&v26, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v34);
  long long v25 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  MEMORY[0x210530B50](&v23, &v26);
  int ElementSize = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v23);
  v17[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation(v17, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v23);
  long long v21 = 0u;
  long long v22 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr((uint64_t *)&v21, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v34);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  MEMORY[0x210530B50](&v18, &v21);
  int v5 = pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v18);
  v44[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation(v44, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v18);
  if (ElementSize >= 1 && ElementSize == v5)
  {
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  }
  if ((v44[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((BYTE8(v19) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v19 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v19);
  if (*((void *)&v18 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v18 + 1));
  }
  if ((BYTE8(v22) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v22 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v22);
  if (*((void *)&v21 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v21 + 1));
  }
  if ((v17[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((BYTE8(v24) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v24 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v24);
  if (*((void *)&v23 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v23 + 1));
  }
  if ((BYTE8(v27) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v27 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v27);
  if (*((void *)&v26 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v26 + 1));
  }
  sub_20B06A6E8((uint64_t)&v28);
  sub_20B06A6E8((uint64_t)&v31);
  *(void *)&long long v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  *(void *)&long long v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v17[0] = MEMORY[0x263F90798] + 16;
  pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinTargetJointsRel((uint64_t *)&v45, (pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)v17);
  LODWORD(v40) = v45;
  long long v6 = v46;
  uint64_t v46 = 0;
  uint64_t v7 = *((void *)&v40 + 1);
  *((void *)&v40 + 1) = v6;
  if (v7) {
    sub_20B06A5E0(v7);
  }
  sub_20B0D28C0((uint64_t)&v41, (int *)v47);
  sub_20B0D2918((uint64_t)&v41 + 4);
  if ((BYTE8(v41) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *((void *)&v41 + 1) = v47[1];
  v47[1] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)v47);
  if (v46) {
    sub_20B06A5E0((uint64_t)v46);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets() && v37 != v38)
  {
    long long v31 = 0u;
    long long v32 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointIndicesAttr((uint64_t *)&v31, (pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)v17);
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    char v8 = sub_20B1194C4((uint64_t)&v42);
    unint64_t v9 = (long long *)sub_20B0C4DB0(v8);
    sub_20B119550((uint64_t)&v23, v9);
    long long v28 = 0u;
    long long v29 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointWeightsAttr((uint64_t *)&v28, (pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *)v17);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  }
  long long v31 = 0u;
  long long v32 = 0u;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *((void *)&v32 + 1) = 0;
  *(void *)&long long v31 = MEMORY[0x263F907A8] + 16;
  pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinTargetJointsRel((uint64_t *)&v45, (pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)&v31);
  LODWORD(v40) = v45;
  long long v10 = v46;
  uint64_t v46 = 0;
  uint64_t v11 = *((void *)&v40 + 1);
  *((void *)&v40 + 1) = v10;
  if (v11) {
    sub_20B06A5E0(v11);
  }
  sub_20B0D28C0((uint64_t)&v41, (int *)v47);
  sub_20B0D2918((uint64_t)&v41 + 4);
  if ((BYTE8(v41) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *((void *)&v41 + 1) = v47[1];
  v47[1] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)v47);
  if (v46) {
    sub_20B06A5E0((uint64_t)v46);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets() && v37 != v38)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointIndicesAttr((uint64_t *)&v28, (pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)&v31);
    v44[0] = 0;
    v44[1] = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
    uint64_t v12 = sub_20B1194C4((uint64_t)v44);
    uint64_t v13 = (long long *)sub_20B0C4DB0(v12);
    sub_20B119550((uint64_t)&v23, v13);
    long long v26 = 0u;
    long long v27 = 0u;
    pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointWeightsAttr((uint64_t *)&v26, (pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *)&v31);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
  }
  if ((void)v23)
  {
    if ((void)v18)
    {
      if ((void)v23 == (void)v18)
      {
        unint64_t v14 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a3 + 8);
        if (*(pxrInternal__aapl__pxrReserved__::VtValue **)(a3 + 16) != v14)
        {
          if (*((void *)v14 + 1))
          {
            unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v14);
            if ((unint64_t)v23 / NumElements * NumElements == (void)v23)
            {
              uint64_t v45 = 0;
              memset(v47, 0, 80);
              uint64_t v46 = &off_26BF51448;
              sub_20B0C8144();
            }
          }
        }
      }
    }
  }
  MEMORY[0x210530F90](&v31);
  MEMORY[0x210530F40](v17);
  sub_20B06A6E8((uint64_t)&v18);
  sub_20B06A6E8((uint64_t)&v23);
  MEMORY[0x210530D80](&v34);
  uint64_t v45 = (void **)&v37;
  sub_20B1219F4(&v45);
  if ((BYTE8(v41) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v41);
  uint64_t result = *((void *)&v40 + 1);
  if (*((void *)&v40 + 1)) {
    return sub_20B06A5E0(*((uint64_t *)&v40 + 1));
  }
  return result;
}

void sub_20B1190AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v68 = *(void *)(v66 - 144);
  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v69 = *(void *)(v66 - 152);
  if ((v69 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8(v65);
  sub_20B06A698(v66 - 208);
  sub_20B0A3F88(&a65);
  sub_20B06A698((uint64_t)&a59);
  if ((a63 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B0B052C(&a15);
  sub_20B06A22C((uint64_t)&a21);
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B0B052C(&a25);
  sub_20B06A22C((uint64_t)&a31);
  sub_20B06A6E8((uint64_t)&a35);
  sub_20B06A6E8((uint64_t)&a41);
  MEMORY[0x210530D80](&a47);
  a65 = (void **)&a52;
  sub_20B1219F4(&a65);
  sub_20B1180BC((uint64_t)&a55);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B1194C4(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B0C8FC0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4F120, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B119550(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B1195E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B119604(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 13) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B11963C(uint64_t a1)
{
  if (sub_20B119604(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B1239E0, &unk_26BF4EF78);
  }
}

void sub_20B1196D0(void *a1)
{
  id v6 = a1;
  long long v3 = objc_msgSend_textureSamplerValue(v6, v1, v2);

  if (!v3)
  {
    uint64_t v4 = objc_opt_new();
    objc_msgSend_setTextureSamplerValue_(v6, v5, (uint64_t)v4);
  }
}

void sub_20B119744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B119764(void *a1)
{
  id v12 = a1;
  sub_20B1196D0(v12);
  long long v3 = objc_msgSend_textureSamplerValue(v12, v1, v2);
  id v6 = objc_msgSend_hardwareFilter(v3, v4, v5);

  if (!v6)
  {
    uint64_t v7 = objc_opt_new();
    uint64_t v10 = objc_msgSend_textureSamplerValue(v12, v8, v9);
    objc_msgSend_setHardwareFilter_(v10, v11, (uint64_t)v7);
  }
}

void sub_20B119800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v12 = v11;

  _Unwind_Resume(a1);
}

void sub_20B119834(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, void *a2, uint64_t **a3)
{
  id v5 = a2;
  MEMORY[0x2105310B0](&v25, "varname");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v27, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v25);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v27)
    && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    MEMORY[0x2105310B0](&v23, "result");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((uint64_t *)&v25, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
    {
      *(void *)&long long v23 = MEMORY[0x210531AB0](&v25);
      if (!atomic_load(MEMORY[0x263F90560])) {
        sub_20B0A6508(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
        {
          long long v23 = 0u;
          long long v24 = 0u;
          LODWORD(v19) = 1;
          uint64_t v20 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          uint64_t v22 = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          *((void *)&v24 + 1) = 0;
          *(void *)&long long v23 = MEMORY[0x263F90790] + 16;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_20B06A424((uint64_t)&v21);
          uint64_t v18 = 0;
          int v17 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
          pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(&v19, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
          if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19)
            && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
          {
            int v7 = sub_20B119D34((uint64_t)&v19, a3);
          }
          else
          {
            MEMORY[0x2105310B0](&v12, "frame:stPrimvarName");
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(&v13, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12);
            if ((v12 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13)
              && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
            {
              int v7 = sub_20B119D34((uint64_t)&v13, a3);
            }
            else
            {
              int v7 = -1;
            }
            if ((v16 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)&v15);
            if (v14) {
              sub_20B06A5E0(v14);
            }
          }
          if ((v22 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_20B06A424((uint64_t)&v21);
          if (v20) {
            sub_20B06A5E0(v20);
          }
          if ((v18 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          MEMORY[0x210530EF0](&v23);
        }
        else
        {
          int v7 = sub_20B119D34((uint64_t)&v27, a3);
        }
        if (v7 != -1)
        {
          sub_20B1196D0(v5);
          uint64_t v10 = objc_msgSend_textureSamplerValue(v5, v8, v9);
          objc_msgSend_setMappingChannel_(v10, v11, v7);
        }
      }
    }
    if ((BYTE8(v26) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v26 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v26);
    if (*((void *)&v25 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v25 + 1));
    }
  }
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v29);
  if (v28) {
    sub_20B06A5E0(v28);
  }
}

void sub_20B119C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  uint64_t v21 = va_arg(va2, void);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B119E88((uint64_t)va);
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530EF0]((uint64_t *)va1);
  sub_20B119EE4((uint64_t)va2);
  sub_20B119E88(v10 - 96);

  _Unwind_Resume(a1);
}

uint64_t sub_20B119D34(uint64_t a1, uint64_t **a2)
{
  v9[2] = *MEMORY[0x263EF8340];
  v9[0] = 0;
  v9[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get();
  memset(&__p, 0, sizeof(__p));
  if (sub_20B119604((uint64_t)v9))
  {
    long long v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20B11963C((uint64_t)v9);
    if ((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (const std::string *)((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
    }
  }
  else
  {
    if (!sub_20B121690((uint64_t)v9)) {
      goto LABEL_8;
    }
    unint64_t EmptyString = (const std::string *)sub_20B1216C8(v9);
  }
  std::string::operator=(&__p, EmptyString);
LABEL_8:
  if (a2 + 1 == (uint64_t **)sub_20B080D50((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_))
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else
  {
    p_p = &__p;
    uint64_t v5 = *((unsigned int *)sub_20B080DE0(a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20B1E7420, (long long **)&p_p)+ 14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_20B06A698((uint64_t)v9);
  return v5;
}

void sub_20B119E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_20B06A698((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20B119E88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  return a1;
}

uint64_t sub_20B119EE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  return a1;
}

double sub_20B119F40(float *a1)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale();
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  double v2 = *a1;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0x3FF0000000000000;
  double v9 = v2;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate();
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate();
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
  memset(v5, 0, sizeof(v5));
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=();
  uint64_t v3 = 0;
  memset(v18, 0, sizeof(v18));
  do
  {
    v18[v3] = v5[v3];
    ++v3;
  }
  while (v3 != 4);
  return *(double *)v18;
}

void sub_20B11A05C(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, void *a2)
{
  id v3 = a2;
  long long v40 = 0u;
  long long v41 = 0u;
  MEMORY[0x2105310B0](&v38, "rotation");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v40, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v38);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v38 = 0u;
  long long v39 = 0u;
  MEMORY[0x2105310B0](&v36, "scale");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v38, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v36);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v36 = 0u;
  long long v37 = 0u;
  MEMORY[0x2105310B0](&v31, "translation");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v36, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int v35 = 0;
  if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v40)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  uint64_t v34 = 0x3F8000003F800000;
  if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>();
  }
  uint64_t v33 = 0;
  if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>();
  }
  double v4 = sub_20B119F40((float *)&v35);
  double v20 = v5;
  double v21 = v4;
  double v18 = v7;
  double v19 = v6;
  sub_20B1196D0(v3);
  uint64_t v8 = [MDLTransform alloc];
  long long v11 = objc_msgSend_initWithMatrix_(v8, v9, v10, v21, v20, v19, v18);
  long long v14 = objc_msgSend_textureSamplerValue(v3, v12, v13);
  objc_msgSend_setTransform_(v14, v15, (uint64_t)v11);

  long long v31 = 0u;
  long long v32 = 0u;
  MEMORY[0x2105310B0](&v29, "in");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput((uint64_t *)&v31, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
  {
    long long v29 = 0u;
    long long v30 = 0u;
    LODWORD(v25) = 1;
    uint64_t v26 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v28 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((void *)&v30 + 1) = 0;
    *(void *)&long long v29 = MEMORY[0x263F90790] + 16;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v27);
    uint64_t v24 = 0;
    int v23 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
    long long v16 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_20B0D29D0((uint64_t)&v25, (uint64_t *)&v29 + 1, &v30);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v16);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v27);
    if (v26) {
      sub_20B06A5E0(v26);
    }
    if (IsA)
    {
      v22[1] = 0;
      v22[2] = 0;
      sub_20B0D29D0((uint64_t)&v25, (uint64_t *)&v29 + 1, &v30);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v22[0] = MEMORY[0x263F906F0] + 16;
      if ((v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v27);
      if (v26) {
        sub_20B06A5E0(v26);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v25, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v22);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    MEMORY[0x210530EF0](&v29);
  }
  if ((BYTE8(v32) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v32 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v32);
  if (*((void *)&v31 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v31 + 1));
  }
  if ((BYTE8(v37) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v37);
  if (*((void *)&v36 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v36 + 1));
  }
  if ((BYTE8(v39) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v39 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v39);
  if (*((void *)&v38 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v38 + 1));
  }
  if ((BYTE8(v41) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v41 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v41);
  if (*((void *)&v40 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v40 + 1));
  }
}

void sub_20B11A618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530BC0](&a18);
  if ((a22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530EF0](&a27);
  sub_20B119E88((uint64_t)&a31);
  sub_20B119E88(v32 - 160);
  sub_20B119E88(v32 - 128);
  sub_20B119E88(v32 - 96);

  _Unwind_Resume(a1);
}

void sub_20B11A7C4(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  id v76 = a3;
  unint64_t Inputs = pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a1);
  double v9 = v82;
  uint64_t v10 = v83;
  if (v82 != v83)
  {
    while (1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v81 = 0;
      BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&__dst, v9);
      if ((__dst & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t Inputs = (__dst & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t Inputs = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
      }
      if (*(char *)(Inputs + 23) < 0)
      {
        unint64_t Inputs = (unint64_t)sub_20B07F994(__p, *(void **)Inputs, *(void *)(Inputs + 8));
      }
      else
      {
        long long v12 = *(_OWORD *)Inputs;
        uint64_t v81 = *(void *)(Inputs + 16);
        *(_OWORD *)std::string __p = v12;
      }
      if ((__dst & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(__dst & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v81 < 0) {
        break;
      }
      switch(HIBYTE(v81))
      {
        case 2u:
          if (LOWORD(__p[0]) != 30325 && LOWORD(__p[0]) != 29811) {
            goto LABEL_106;
          }
LABEL_49:
          unint64_t Inputs = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource();
          if (Inputs)
          {
            long long __dst = 0u;
            long long v89 = 0u;
            LODWORD(v84) = 1;
            uint64_t v85 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            uint64_t v87 = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            *((void *)&v89 + 1) = 0;
            *(void *)&long long __dst = MEMORY[0x263F90790] + 16;
            if ((v87 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)&v86);
            if (v85) {
              sub_20B06A5E0(v85);
            }
            uint64_t v79 = 0;
            int v78 = 0;
            pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
            uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_20B0D29D0((uint64_t)&v84, (uint64_t *)&__dst + 1, &v89);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v22);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if ((v87 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)&v86);
            if (v85) {
              sub_20B06A5E0(v85);
            }
            if (IsA)
            {
              v77[1] = 0;
              v77[2] = 0;
              sub_20B0D29D0((uint64_t)&v84, (uint64_t *)&__dst + 1, &v89);
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              v77[0] = MEMORY[0x263F906F0] + 16;
              if ((v87 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_20B06A424((uint64_t)&v86);
              if (v85) {
                sub_20B06A5E0(v85);
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v84, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v77);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
            }
            unint64_t Inputs = MEMORY[0x210530EF0](&__dst);
          }
          goto LABEL_106;
        case 4u:
          if (LODWORD(__p[0]) != 1701603686) {
            goto LABEL_106;
          }
LABEL_65:
          uint64_t v84 = 0;
          uint64_t v85 = 0;
          if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get())
          {
            sub_20B1196D0(v76);
            long long __dst = 0uLL;
            *(void *)&long long v89 = 0;
            uint64_t v24 = sub_20B112D58(&v84);
            if (*(char *)(v24 + 47) < 0)
            {
              sub_20B07F994(&__dst, *(void **)(v24 + 24), *(void *)(v24 + 32));
            }
            else
            {
              long long __dst = *(_OWORD *)(v24 + 24);
              *(void *)&long long v89 = *(void *)(v24 + 40);
            }
            if ((SBYTE7(v89) & 0x80u) == 0) {
              objc_msgSend_stringWithCString_encoding_(NSString, v25, (uint64_t)&__dst, 4);
            }
            else {
            uint64_t v34 = objc_msgSend_stringWithCString_encoding_(NSString, v25, __dst, 4);
            }
            objc_msgSend_setStringValue_(v76, v35, (uint64_t)v34);

            sub_20B121E3C(a6, (unsigned __int8 *)&__dst, (uint64_t)&__dst);
            if (SBYTE7(v89) < 0) {
              operator delete((void *)__dst);
            }
          }
          p_dst = &v84;
          goto LABEL_103;
        case 5u:
          if ((LODWORD(__p[0]) != 1885434487 || BYTE4(__p[0]) != 83)
            && (LODWORD(__p[0]) != 1885434487 || BYTE4(__p[0]) != 84))
          {
            long long v15 = __p;
            goto LABEL_39;
          }
LABEL_68:
          long long __dst = 0uLL;
          if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get())
          {
            uint64_t v26 = *(void *)sub_20B11963C((uint64_t)&__dst);
            if ((v26 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v26 &= 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v27 = MEMORY[0x2105310B0](&v84, "repeat");
            uint64_t v28 = (atomic_uint *)(v84 & 0xFFFFFFFFFFFFFFF8);
            if ((v84 & 7) != 0) {
              atomic_fetch_add_explicit(v28, 0xFFFFFFFE, memory_order_release);
            }
            long long v29 = (atomic_uint *)(v26 & 0xFFFFFFFFFFFFFFF8);
            if (v28 == (atomic_uint *)(v26 & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v33 = 1;
            }
            else
            {
              uint64_t v30 = MEMORY[0x2105310B0](v27, "clamp");
              long long v31 = (atomic_uint *)(v84 & 0xFFFFFFFFFFFFFFF8);
              if ((v84 & 7) != 0) {
                atomic_fetch_add_explicit(v31, 0xFFFFFFFE, memory_order_release);
              }
              if (v31 == v29)
              {
                uint64_t v33 = 0;
              }
              else
              {
                MEMORY[0x2105310B0](v30, "mirror");
                uint64_t v32 = (atomic_uint *)(v84 & 0xFFFFFFFFFFFFFFF8);
                if ((v84 & 7) != 0) {
                  atomic_fetch_add_explicit(v32, 0xFFFFFFFE, memory_order_release);
                }
                uint64_t v33 = 2 * (v32 == v29);
              }
            }
            sub_20B119764(v76);
            if ((SHIBYTE(v81) & 0x80000000) == 0)
            {
              if (SHIBYTE(v81) == 5)
              {
                long long v39 = __p;
                goto LABEL_95;
              }
              goto LABEL_99;
            }
            if (__p[1] != (void *)5) {
              goto LABEL_99;
            }
            long long v39 = (void **)__p[0];
LABEL_95:
            int v40 = *(_DWORD *)v39;
            int v41 = *((unsigned __int8 *)v39 + 4);
            if (v40 == 1885434487 && v41 == 83)
            {
              uint64_t v43 = objc_msgSend_textureSamplerValue(v76, v37, v38);
              uint64_t v46 = objc_msgSend_hardwareFilter(v43, v48, v49);
              objc_msgSend_setSWrapMode_(v46, v50, v33);
            }
            else
            {
LABEL_99:
              uint64_t v43 = objc_msgSend_textureSamplerValue(v76, v37, v38);
              uint64_t v46 = objc_msgSend_hardwareFilter(v43, v44, v45);
              objc_msgSend_setTWrapMode_(v46, v47, v33);
            }

            if ((v26 & 7) != 0) {
              atomic_fetch_add_explicit(v29, 0xFFFFFFFE, memory_order_release);
            }
          }
LABEL_102:
          p_dst = (uint64_t *)&__dst;
LABEL_103:
          unint64_t Inputs = sub_20B06A698((uint64_t)p_dst);
LABEL_106:
          if (SHIBYTE(v81) < 0) {
            operator delete(__p[0]);
          }
          break;
      }
      double v9 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v9 + 32);
      if (v9 == v10) {
        goto LABEL_109;
      }
    }
    long long v16 = __p[1];
    if (__p[1] == (void *)2)
    {
      if (*(_WORD *)__p[0] == 30325) {
        goto LABEL_49;
      }
      long long v16 = __p[1];
      if (*(_WORD *)__p[0] == 29811) {
        goto LABEL_49;
      }
    }
    else if (__p[1] == (void *)4 && *(_DWORD *)__p[0] == 1701603686)
    {
      goto LABEL_65;
    }
    if (v16 == (void *)5)
    {
      long long v15 = (void **)__p[0];
      if (*(_DWORD *)__p[0] == 1885434487 && *((unsigned char *)__p[0] + 4) == 83) {
        goto LABEL_68;
      }
      if (__p[1] == (void *)5)
      {
        if (*(_DWORD *)__p[0] == 1885434487 && *((unsigned char *)__p[0] + 4) == 84) {
          goto LABEL_68;
        }
LABEL_39:
        int v19 = *(_DWORD *)v15;
        int v20 = *((unsigned __int8 *)v15 + 4);
        if (v19 == 1818321779 && v20 == 101)
        {
          long long __dst = 0uLL;
          if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get()
            && sub_20B112C64((uint64_t)&__dst))
          {
            *a7 = *(_OWORD *)sub_20B112E30(&__dst);
          }
          goto LABEL_102;
        }
      }
    }
    goto LABEL_106;
  }
LABEL_109:
  long long __dst = 0uLL;
  *(void *)&long long v89 = 0;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)Inputs);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_20B07F994(&__dst, *(void **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v52 = *(_OWORD *)EmptyString;
    *(void *)&long long v89 = *(void *)(EmptyString + 16);
    long long __dst = v52;
  }
  if (SBYTE7(v89) < 0)
  {
    uint64_t v55 = *((void *)&__dst + 1);
    float v53 = (unsigned __int16 *)__dst;
    if (*((void *)&__dst + 1) == 1)
    {
      unsigned int v56 = *(unsigned __int8 *)__dst - 98;
      BOOL v57 = v56 > 0x10;
      int v58 = (1 << v56) & 0x10021;
      if (!v57 && v58 != 0) {
        goto LABEL_147;
      }
      uint64_t v55 = *((void *)&__dst + 1);
      float v53 = (unsigned __int16 *)__dst;
      if (*(unsigned char *)__dst == 97) {
        goto LABEL_147;
      }
      if ((BYTE7(v89) & 0x80) == 0) {
        goto LABEL_145;
      }
    }
    if (v55 != 3) {
      goto LABEL_142;
    }
    goto LABEL_136;
  }
  if (BYTE7(v89) != 1)
  {
    float v53 = (unsigned __int16 *)&__dst;
    if (BYTE7(v89) != 3)
    {
      if (BYTE7(v89) == 4)
      {
        if (__dst == 1633838962)
        {
          unsigned int v54 = 4;
          goto LABEL_148;
        }
        goto LABEL_145;
      }
LABEL_146:
      NSLog(&cfstr_WarningInvalid_0.isa, v53);
      unsigned int v54 = BYTE7(v89);
      goto LABEL_148;
    }
LABEL_136:
    int v60 = *v53;
    int v61 = *((unsigned __int8 *)v53 + 2);
    if (v60 != 26482 || v61 != 98)
    {
      if ((BYTE7(v89) & 0x80) == 0) {
        goto LABEL_145;
      }
      uint64_t v55 = *((void *)&__dst + 1);
      float v53 = (unsigned __int16 *)__dst;
LABEL_142:
      if (v55 != 4) {
        goto LABEL_146;
      }
      if (*(_DWORD *)v53 != 1633838962)
      {
        if ((BYTE7(v89) & 0x80) != 0) {
          goto LABEL_146;
        }
LABEL_145:
        float v53 = (unsigned __int16 *)&__dst;
        goto LABEL_146;
      }
    }
LABEL_147:
    unsigned int v54 = BYTE7(v89);
    goto LABEL_148;
  }
  if (__dst == 98) {
    goto LABEL_147;
  }
  unsigned int v54 = 1;
  if (__dst != 103 && __dst != 114)
  {
    float v53 = (unsigned __int16 *)&__dst;
    if (__dst == 97)
    {
      unsigned int v54 = 1;
      goto LABEL_148;
    }
    goto LABEL_146;
  }
LABEL_148:
  uint64_t v63 = *((void *)&__dst + 1);
  if ((v54 & 0x80u) == 0) {
    uint64_t v63 = v54;
  }
  if ((unint64_t)(v63 - 1) <= 3)
  {
    uint64_t v64 = 0;
    uint64_t v65 = (unsigned __int8 *)&__dst;
    if ((v54 & 0x80u) != 0) {
      uint64_t v65 = (unsigned __int8 *)__dst;
    }
    do
    {
      int v67 = *v65++;
      int v66 = v67;
      if (v67 > 102)
      {
        if (v66 == 114)
        {
          uint64_t v68 = 1;
        }
        else
        {
          if (v66 != 103) {
            goto LABEL_165;
          }
          uint64_t v68 = 2;
        }
      }
      else if (v66 == 97)
      {
        uint64_t v68 = 8;
      }
      else
      {
        if (v66 != 98) {
          goto LABEL_165;
        }
        uint64_t v68 = 4;
      }
      v64 |= v68;
      --v63;
    }
    while (v63);
    if (v64 != 15)
    {
      sub_20B1196D0(v76);
      uint64_t v71 = objc_msgSend_textureSamplerValue(v76, v69, v70);
      objc_msgSend_setTextureComponents_(v71, v72, v64);

      LOBYTE(v54) = BYTE7(v89);
    }
  }
LABEL_165:
  if ((v54 & 0x80) != 0) {
    operator delete((void *)__dst);
  }
  *(void *)&long long __dst = &v82;
  sub_20B123A6C((void ***)&__dst);
}

void sub_20B11B29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  sub_20B06A698(v33 - 128);
  if (a32 < 0) {
    operator delete(__p);
  }
  *(void *)(v33 - 128) = &a33;
  sub_20B123A6C((void ***)(v33 - 128));

  _Unwind_Resume(a1);
}

void sub_20B11B4CC(void *a1, uint64_t a2, __n128 a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  id v4 = a1;
  double v7 = v4;
  if (*(void *)(a2 + 72) && (unint64_t v8 = objc_msgSend_semantic(v4, v5, v6), v8 <= 0xD) && ((1 << v8) & 0x2209) != 0)
  {
    *(float64x2_t *)components = vcvtq_f64_f32((float32x2_t)a3.n128_u64[0]);
    double v14 = a3.n128_f32[2];
    uint64_t v15 = 0x3FF0000000000000;
    CGColorRef v9 = CGColorCreate(*(CGColorSpaceRef *)(a2 + 72), components);
    objc_msgSend_setColor_(v7, v10, (uint64_t)v9);
    objc_msgSend_setType_(v7, v11, 4);
    CFRelease(v9);
  }
  else
  {
    objc_msgSend_setFloat3Value_(v7, v5, v6, a3.n128_f64[0], *(_OWORD *)&a3);
  }
}

void sub_20B11B5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B11B5D8(void *a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v4 = a1;
  double v7 = v4;
  if (*(void *)(a2 + 72) && (unint64_t v8 = objc_msgSend_semantic(v4, v5, v6), v8 <= 0xD) && ((1 << v8) & 0x2209) != 0)
  {
    *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
    float64x2_t v14 = vcvt_hight_f64_f32(a3);
    CGColorRef v9 = CGColorCreate(*(CGColorSpaceRef *)(a2 + 72), components);
    objc_msgSend_setColor_(v7, v10, (uint64_t)v9);
    objc_msgSend_setType_(v7, v11, 4);
    CFRelease(v9);
  }
  else
  {
    objc_msgSend_setFloat4Value_(v7, v5, v6, *(double *)a3.i64, *(_OWORD *)&a3);
  }
}

void sub_20B11B6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B11B6D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v28[2] = *MEMORY[0x263EF8340];
  id v8 = a1;
  v28[0] = 0;
  v28[1] = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get())
  {
    if (sub_20B112C2C((uint64_t)v28))
    {
      uint64_t v9 = sub_20B112EC4(v28);
      v10.n128_u64[0] = *(void *)v9;
      v10.n128_u32[2] = *(_DWORD *)(v9 + 8);
      sub_20B11B4CC(v8, a6, v10);
    }
    else if (sub_20B112C64((uint64_t)v28))
    {
      long long v11 = (float32x4_t *)sub_20B112E30(v28);
      sub_20B11B5D8(v8, a6, *v11);
    }
    else if (sub_20B112C9C((uint64_t)v28))
    {
      LODWORD(v12) = *(_DWORD *)sub_20B112F58((uint64_t)v28);
      objc_msgSend_setFloatValue_(v8, v13, v14, v12);
    }
    else if (sub_20B112CD4((uint64_t)v28))
    {
      memset(v27, 0, 32);
      *(_OWORD *)long long __dst = 0u;
      uint64_t v15 = sub_20B112D58(v28);
      uint64_t v16 = v15;
      if (*(char *)(v15 + 23) < 0)
      {
        sub_20B07F994(__dst, *(void **)v15, *(void *)(v15 + 8));
      }
      else
      {
        long long v17 = *(_OWORD *)v15;
        v27[0] = *(void **)(v15 + 16);
        *(_OWORD *)long long __dst = v17;
      }
      if (*(char *)(v16 + 47) < 0)
      {
        sub_20B07F994(&v27[1], *(void **)(v16 + 24), *(void *)(v16 + 32));
      }
      else
      {
        long long v18 = *(_OWORD *)(v16 + 24);
        v27[3] = *(void **)(v16 + 40);
        *(_OWORD *)&v27[1] = v18;
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v25 = 0;
      if (SHIBYTE(v27[3]) < 0)
      {
        sub_20B07F994(__p, v27[1], (unint64_t)v27[2]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)&v27[1];
        uint64_t v25 = v27[3];
      }
      id v19 = [NSString alloc];
      if (SHIBYTE(v25) >= 0) {
        uint64_t v21 = objc_msgSend_initWithCString_encoding_(v19, v20, (uint64_t)__p, 4, __p[0], __p[1], v25);
      }
      else {
        uint64_t v21 = objc_msgSend_initWithCString_encoding_(v19, v20, (uint64_t)__p[0], 4, __p[0], __p[1], v25);
      }
      uint64_t v22 = (void *)v21;
      sub_20B121E3C(a5, (unsigned __int8 *)__p, (uint64_t)__p);
      objc_msgSend_setStringValue_(v8, v23, (uint64_t)v22);

      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v27[3]) < 0) {
        operator delete(v27[1]);
      }
      if (SHIBYTE(v27[0]) < 0) {
        operator delete(__dst[0]);
      }
    }
  }
  sub_20B06A698((uint64_t)v28);
}

void sub_20B11B918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20B112DEC((uint64_t)&__p);
  sub_20B06A698(v22 - 72);

  _Unwind_Resume(a1);
}

void sub_20B11B99C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v13 = a1;
  id v14 = a3;
  if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
  {
    long long v25 = 0u;
    long long v26 = 0uLL;
    LODWORD(v21) = 1;
    uint64_t v22 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v24 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)&long long v25 = MEMORY[0x263F90790] + 16;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v23);
    uint64_t v20 = 0;
    int v19 = 0;
    pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_20B0D29D0((uint64_t)&v21, (uint64_t *)&v25 + 1, &v26);
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v16);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v23);
    if (v22) {
      sub_20B06A5E0(v22);
    }
    if (IsA)
    {
      v18[1] = 0;
      uint64_t v18[2] = 0;
      sub_20B0D29D0((uint64_t)&v21, (uint64_t *)&v25 + 1, &v26);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v18[0] = MEMORY[0x263F906F0] + 16;
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v23);
      if (v22) {
        sub_20B06A5E0(v22);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v21, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v18);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    MEMORY[0x210530EF0](&v25);
  }
  sub_20B11B6D4(v13, a2, v15, a5, a6, a8);
}

void sub_20B11BDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530BC0]((uint64_t *)va);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530EF0](va1);

  _Unwind_Resume(a1);
}

id sub_20B11BEDC(_DWORD *a1, void *a2, pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a3, uint64_t a4)
{
  id v36 = a2;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(a3);
  uint64_t v6 = v44;
  if (v43 != v44)
  {
    BOOL v7 = 0;
    uint64_t v8 = v43 + 16;
    do
    {
      long long v41 = 0u;
      long long v42 = 0u;
      uint64_t v9 = v8 - 16;
      LODWORD(v41) = *(_DWORD *)(v8 - 16);
      uint64_t v10 = *(void *)(v8 - 8);
      *((void *)&v41 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 48), 1uLL, memory_order_relaxed);
      }
      sub_20B0B0824(&v42, (_DWORD *)v8);
      sub_20B0B0870((_DWORD *)&v42 + 1, (_DWORD *)(v8 + 4));
      uint64_t v11 = *(void *)(v8 + 8);
      *((void *)&v42 + 1) = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)&v42 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v40 = 0x8000;
      unsigned __int8 v39 = 0;
      BaseName = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(&v38, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v41);
      if ((v38 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (char *)((v38 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
      }
      int v14 = sub_20B1125E0(EmptyString, &v40, (char *)&v39);
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v14) {
        BOOL v7 = (v39 | v7) != 0;
      }
      if ((BYTE8(v42) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v42 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v42);
      if (*((void *)&v41 + 1)) {
        sub_20B06A5E0(*((uint64_t *)&v41 + 1));
      }
      v8 += 32;
    }
    while (v9 + 32 != v6);
  }
  uint64_t v15 = NSString;
  unint64_t v17 = *(void *)sub_20B06A3E4(a1) & 0xFFFFFFFFFFFFFFF8;
  if (v17)
  {
    long long v18 = (uint64_t *)(v17 + 16);
    if (*(char *)(v17 + 39) < 0)
    {
      objc_msgSend_stringWithUTF8String_(v15, v16, *v18, a1);
      goto LABEL_25;
    }
  }
  else
  {
    long long v18 = (uint64_t *)"";
  }
  objc_msgSend_stringWithUTF8String_(v15, v16, (uint64_t)v18, a1);
  uint64_t v19 = LABEL_25:;
  uint64_t v20 = [MDLMaterial alloc];
  uint64_t v21 = objc_opt_new();
  uint64_t v23 = objc_msgSend_initWithName_scatteringFunction_(v20, v22, v19, v21, v19, a4, v36);

  uint64_t v24 = v44;
  if (v44 != v43)
  {
    uint64_t v25 = v43 + 16;
    do
    {
      long long v41 = 0u;
      long long v42 = 0u;
      uint64_t v26 = v25 - 16;
      LODWORD(v41) = *(_DWORD *)(v25 - 16);
      uint64_t v27 = *(void *)(v25 - 8);
      *((void *)&v41 + 1) = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 48), 1uLL, memory_order_relaxed);
      }
      sub_20B0B0824(&v42, (_DWORD *)v25);
      sub_20B0B0870((_DWORD *)&v42 + 1, (_DWORD *)(v25 + 4));
      uint64_t v28 = *(void *)(v25 + 8);
      *((void *)&v42 + 1) = v28;
      if ((v28 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)&v42 + 1) &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v40 = 0x8000;
      unsigned __int8 v39 = 0;
      long long v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(&v38, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v41);
      if ((v38 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v30 = (char *)((v38 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v30 = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
      }
      int v31 = sub_20B1125E0(v30, &v40, (char *)&v39);
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v31) {
        sub_20B1127D8(v23, v40, v37, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&v41, v35);
      }
      if ((BYTE8(v42) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v42 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v42);
      if (*((void *)&v41 + 1)) {
        sub_20B06A5E0(*((uint64_t *)&v41 + 1));
      }
      v25 += 32;
    }
    while (v26 + 32 != v24);
  }

  *(void *)&long long v41 = &v43;
  sub_20B123A6C((void ***)&v41);

  return v23;
}

void sub_20B11C2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a15 = (void **)&a20;
  sub_20B123A6C(&a15);

  _Unwind_Resume(a1);
}

id sub_20B11C36C(pxrInternal__aapl__pxrReserved__::UsdObject *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  id v107 = a2;
  if ((sub_20B0D26D8(a1) & 1) == 0)
  {
    uint64_t v11 = [MDLMaterial alloc];
    uint64_t v12 = objc_opt_new();
    id v14 = (id)objc_msgSend_initWithName_scatteringFunction_(v11, v13, @"material", v12);

    goto LABEL_74;
  }
  v118[1] = 0;
  v118[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v118[0] = MEMORY[0x263F90740] + 16;
  BOOL v7 = NSString;
  unint64_t v9 = *(void *)sub_20B06A3E4(a1) & 0xFFFFFFFFFFFFFFF8;
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v9 + 16);
    if (*(char *)(v9 + 39) < 0)
    {
      objc_msgSend_stringWithUTF8String_(v7, v8, *v10);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v10 = (uint64_t *)"";
  }
  objc_msgSend_stringWithUTF8String_(v7, v8, (uint64_t)v10);
  uint64_t v100 = LABEL_8:;
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v118);
  for (uint64_t i = v116; ; i += 32)
  {
    if (i == v117) {
      goto LABEL_72;
    }
    char HasConnectedSource = pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource();
    if (HasConnectedSource) {
      break;
    }
  }
  uint64_t v17 = v116;
  uint64_t v101 = v117;
  char v18 = HasConnectedSource ^ 1;
  if (v117 == v116) {
    char v18 = 1;
  }
  if (v18)
  {
LABEL_72:
    sub_20B11BEDC(a1, v107, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v118, a5);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_73;
  }
  uint64_t v19 = 0;
  __n128 v99 = (__n128)vdupq_n_s32(0x3E3851ECu);
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v108 = _Q0;
  do
  {
    if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
    {
      long long v114 = 0u;
      long long v115 = 0u;
      v119.i32[0] = 1;
      v119.i64[1] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v121 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *((void *)&v115 + 1) = 0;
      *(void *)&long long v114 = MEMORY[0x263F90790] + 16;
      if ((v121 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v121 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v120);
      if (v119.i64[1]) {
        sub_20B06A5E0(v119.i64[1]);
      }
      uint64_t v113 = 0;
      int v112 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      MEMORY[0x2105310B0](&v119, "surface");
      uint64_t v25 = v113;
      uint64_t v26 = (atomic_uint *)(v119.i64[0] & 0xFFFFFFFFFFFFFFF8);
      if ((v119.i8[0] & 7) != 0) {
        atomic_fetch_add_explicit(v26, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8) == v26)
      {
        uint64_t v111 = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader();
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((uint64_t *)&v119, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v110);
        int v28 = sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v119);
        if ((v121 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v121 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v120);
        if (v119.i64[1]) {
          sub_20B06A5E0(v119.i64[1]);
        }
        MEMORY[0x210530BC0](v110);
        if (v28)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader();
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((uint64_t *)&v119, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v110);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        MEMORY[0x2105310B0](&v119, "PxrPreviewSurface");
        uint64_t v29 = v119.i64[0];
        if ((v111 & 0xFFFFFFFFFFFFFFF8) == (v119.i64[0] & 0xFFFFFFFFFFFFFFF8))
        {
          BOOL v30 = 1;
        }
        else
        {
          MEMORY[0x2105310B0](v110, "UsdPreviewSurface");
          BOOL v30 = (v111 & 0xFFFFFFFFFFFFFFF8) == (v110[0] & 0xFFFFFFFFFFFFFFF8);
          if ((v110[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v110[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v29 = v119.i64[0];
        }
        if ((v29 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v30)
        {
          int v31 = objc_opt_new();
          uint64_t v34 = objc_msgSend_baseColor(v31, v32, v33);
          sub_20B11B4CC(v34, a6, v99);

          long long v37 = objc_msgSend_emission(v31, v35, v36);
          sub_20B11B4CC(v37, a6, (__n128)0);

          uint64_t v40 = objc_msgSend_metallic(v31, v38, v39);
          objc_msgSend_setFloatValue_(v40, v41, v42, 0.0);

          uint64_t v45 = objc_msgSend_roughness(v31, v43, v44);
          LODWORD(v46) = 0.5;
          objc_msgSend_setFloatValue_(v45, v47, v48, v46);

          long long v51 = objc_msgSend_clearcoat(v31, v49, v50);
          objc_msgSend_setFloatValue_(v51, v52, v53, 0.0);

          unsigned int v56 = objc_msgSend_clearcoatGloss(v31, v54, v55);
          LODWORD(v57) = 1065185444;
          objc_msgSend_setFloatValue_(v56, v58, v59, v57);

          id v62 = objc_msgSend_normal(v31, v60, v61);
          objc_msgSend_setFloat3Value_(v62, v63, v64, 0.0);

          uint64_t v65 = [MDLMaterial alloc];
          uint64_t v67 = objc_msgSend_initWithName_scatteringFunction_(v65, v66, (uint64_t)v100, v31);
        }
        else
        {
          uint64_t v68 = [MDLMaterial alloc];
          int v31 = objc_opt_new();
          uint64_t v67 = objc_msgSend_initWithName_scatteringFunction_(v68, v69, (uint64_t)v100, v31);
        }
        uint64_t v27 = (void *)v67;

        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v114);
        uint64_t v71 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v110[0];
        uint64_t v70 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v110[1];
        while (v71 != v70)
        {
          uint64_t v109 = 0;
          pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(&v109, v71);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26ACF4740, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_26ACF4740))
          {
            operator new();
          }
          uint64_t v72 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20B0C7660(qword_26ACF4750, &v109);
          if ((pxrInternal__aapl__pxrReserved__::TfToken *)(qword_26ACF4750 + 8) != v72)
          {
            uint64_t v74 = *((void *)v72 + 5);
            uint64_t v75 = NSString;
            if ((v109 & 0xFFFFFFFFFFFFFFF8) != 0) {
              uint64_t EmptyString = (v109 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v72);
            }
            if (*(char *)(EmptyString + 23) < 0) {
              uint64_t EmptyString = *(void *)EmptyString;
            }
            uint64_t v77 = objc_msgSend_stringWithUTF8String_(v75, v73, EmptyString);
            uint64_t v79 = objc_msgSend_propertyNamed_(v27, v78, (uint64_t)v77);
            id v82 = v79;
            if (!v79 || objc_msgSend_semantic(v79, v80, v81) != v74)
            {
              long long v83 = [MDLMaterialProperty alloc];
              uint64_t v85 = objc_msgSend_initWithName_semantic_(v83, v84, (uint64_t)v77, v74);

              id v82 = (void *)v85;
            }
            float32x4_t v119 = v108;
            sub_20B11B99C(v82, (uint64_t)v71, v107, a3, a4, a5, (uint64_t)&v119, a6);
            objc_msgSend_setProperty_(v27, v86, (uint64_t)v82);
            if (v74 == 20)
            {
              double v102 = *(double *)v119.i64;
              if ((vminvq_u32((uint32x4_t)vceqq_f32(v119, v108)) & 0x80000000) == 0)
              {
                int v88 = objc_msgSend_propertyNamed_(v27, v87, @"displacementscale");
                uint64_t v91 = v88;
                if (!v88 || objc_msgSend_semantic(v88, v89, v90) != 21)
                {
                  unint64_t v94 = [MDLMaterialProperty alloc];
                  uint64_t v96 = objc_msgSend_initWithName_semantic_(v94, v95, @"displacementscale", 21);

                  uint64_t v91 = (void *)v96;
                }
                objc_msgSend_setFloat4Value_(v91, v92, v93, v102);
                objc_msgSend_setProperty_(v27, v97, (uint64_t)v91);
              }
            }
          }
          if ((v109 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v71 = (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)((char *)v71 + 32);
        }
        v119.i64[0] = (uint64_t)v110;
        sub_20B123A6C((void ***)&v119);
        if ((v111 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        uint64_t v27 = v19;
      }
      if ((v113 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x210530EF0](&v114);
      uint64_t v19 = v27;
    }
    v17 += 32;
  }
  while (v17 != v101);
  id v14 = v19;

LABEL_73:
  v119.i64[0] = (uint64_t)&v116;
  sub_20B123B74((void ***)&v119);

  MEMORY[0x210530CB0](v118);
LABEL_74:

  return v14;
}

void sub_20B11CF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v76 = 224;
  while (1)
  {
    uint64_t v77 = *(unint64_t *)((char *)&STACK[0x210] + v76);
    if ((v77 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v76 -= 16;
    if (v76 == -16)
    {
      if ((a43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x210532650](v72, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_26ACF4740);
      if ((a58 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v74[16] = &a59;
      sub_20B123A6C((void ***)&STACK[0x210]);
      uint64_t v78 = v74[3];
      if ((v78 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v79 = v74[5];
      if ((v79 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x210530EF0](&a65);

      v74[16] = &a69;
      sub_20B123B74((void ***)&STACK[0x210]);

      MEMORY[0x210530CB0](&a72);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_20B11D4C4(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1)
{
  MEMORY[0x2105310B0](&v11, "varname");
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v13, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13)
    && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    MEMORY[0x2105310B0](&v8, "result");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput((uint64_t *)&v11, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
    {
      *(void *)&long long v8 = MEMORY[0x210531AB0](&v11);
      if (!atomic_load(MEMORY[0x263F90560])) {
        sub_20B0A6508(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        uint64_t v10 = 0;
        if (!pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource()) {
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        long long v8 = 0u;
        long long v9 = 0u;
        LODWORD(v4) = 1;
        uint64_t v5 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v7 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *((void *)&v9 + 1) = 0;
        *(void *)&long long v8 = MEMORY[0x263F90790] + 16;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v6);
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
        MEMORY[0x2105310B0](&v17, "frame:stPrimvarName");
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(&v4, (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17);
        if ((v17 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4)
          && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
        {
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        if ((v7 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v6);
        if (v5) {
          sub_20B06A5E0(v5);
        }
        MEMORY[0x210530EF0](&v8);
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
    if ((BYTE8(v12) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v12);
    if (*((void *)&v11 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v11 + 1));
    }
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v15);
  uint64_t result = v14;
  if (v14) {
    return sub_20B06A5E0(v14);
  }
  return result;
}

void sub_20B11D88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v10 = *(void *)(v7 + 40);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530EF0]((uint64_t *)va);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B119EE4((uint64_t)va1);
  sub_20B119E88(v8 - 96);
  _Unwind_Resume(a1);
}

void sub_20B11D990(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a1);
  uint64_t v1 = v14;
  for (uint64_t i = v15; v1 != i; v1 += 32)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
    {
      long long v12 = 0u;
      long long v13 = 0u;
      LODWORD(v8) = 1;
      uint64_t v9 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v11 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *((void *)&v13 + 1) = 0;
      *(void *)&long long v12 = MEMORY[0x263F90790] + 16;
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v10);
      if (v9) {
        sub_20B06A5E0(v9);
      }
      uint64_t v7 = 0;
      int v6 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      id v3 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)sub_20B0D29D0((uint64_t)&v8, (uint64_t *)&v12 + 1, &v13);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v3);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      int IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v10);
      if (v9) {
        sub_20B06A5E0(v9);
      }
      if (IsA)
      {
        v5[1] = 0;
        v5[2] = 0;
        sub_20B0D29D0((uint64_t)&v8, (uint64_t *)&v12 + 1, &v13);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v5[0] = MEMORY[0x263F906F0] + 16;
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v10);
        if (v9) {
          sub_20B06A5E0(v9);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(&v8, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v5);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      }
      MEMORY[0x210530EF0](&v12);
    }
  }
  *(void *)&long long v12 = &v14;
  sub_20B123A6C((void ***)&v12);
}

void sub_20B11DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530BC0](&a16);
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530EF0](&a25);
  a25 = (void **)(v25 - 112);
  sub_20B123A6C(&a25);
  _Unwind_Resume(a1);
}

void sub_20B11DE9C(pxrInternal__aapl__pxrReserved__::UsdShadeShader *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(a1);
  uint64_t v1 = v12;
  for (uint64_t i = v13; v1 != i; v1 += 32)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
    {
      long long v10 = 0u;
      long long v11 = 0u;
      int v6 = 1;
      uint64_t v7 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v9 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *((void *)&v11 + 1) = 0;
      *(void *)&long long v10 = MEMORY[0x263F90790] + 16;
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v8);
      if (v7) {
        sub_20B06A5E0(v7);
      }
      uint64_t v5 = 0;
      int v4 = 0;
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      sub_20B0D29D0((uint64_t)&v6, (uint64_t *)&v10 + 1, &v11);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      v3[0] = MEMORY[0x263F906F0] + 16;
      sub_20B11D990((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v3);
      MEMORY[0x210530BC0](v3);
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v8);
      if (v7) {
        sub_20B06A5E0(v7);
      }
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x210530EF0](&v10);
    }
  }
  *(void *)&long long v10 = &v12;
  sub_20B123A6C((void ***)&v10);
}

uint64_t sub_20B11E10C(pxrInternal__aapl__pxrReserved__::UsdObject *a1)
{
  uint64_t result = sub_20B0D26D8(a1);
  if (result)
  {
    v18[1] = 0;
    uint64_t v18[2] = 0;
    double v2 = (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v18[0] = MEMORY[0x263F90740] + 16;
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(v2);
    uint64_t v3 = v16;
    for (uint64_t i = v17; v3 != i; v3 += 32)
    {
      if (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource())
      {
        long long v14 = 0u;
        long long v15 = 0u;
        LODWORD(v10) = 1;
        uint64_t v11 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v13 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *((void *)&v15 + 1) = 0;
        *(void *)&long long v14 = MEMORY[0x263F90790] + 16;
        if ((v13 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v12);
        if (v11) {
          sub_20B06A5E0(v11);
        }
        uint64_t v9 = 0;
        int v8 = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
        MEMORY[0x2105310B0](&v10, "surface");
        uint64_t v5 = v9;
        int v6 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit(v6, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8) == v6)
        {
          sub_20B0D29D0((uint64_t)&v10, (uint64_t *)&v14 + 1, &v15);
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v7[0] = MEMORY[0x263F906F0] + 16;
          sub_20B11DE9C((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v7);
          MEMORY[0x210530BC0](v7);
          if ((v13 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_20B06A424((uint64_t)&v12);
          if (v11) {
            sub_20B06A5E0(v11);
          }
        }
        if ((v9 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x210530EF0](&v14);
      }
    }
    *(void *)&long long v14 = &v16;
    sub_20B123B74((void ***)&v14);
    return MEMORY[0x210530CB0](v18);
  }
  return result;
}

void sub_20B11E378(_Unwind_Exception *a1)
{
  MEMORY[0x210530CB0](v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20B11E40C()
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  *((void *)&v6 + 1) = 0;
  *(void *)&long long v5 = MEMORY[0x263F907A0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(&v15, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v5);
  MEMORY[0x210530F70](&v5);
  uint64_t v0 = v15;
  uint64_t v1 = v16;
  if (v16 == v15)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *((void *)&v6 + 1) = 0;
    *(void *)&long long v5 = MEMORY[0x263F907A0] + 16;
    if (!atomic_load(MEMORY[0x263F90550])) {
      sub_20B122970();
    }
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
    MEMORY[0x210530F70](&v5);
    sub_20B0D29D0((uint64_t)&v5, &v9, &v10);
    sub_20B11E10C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5);
    if ((BYTE8(v6) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v6 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v6);
    if (*((void *)&v5 + 1)) {
      sub_20B06A5E0(*((uint64_t *)&v5 + 1));
    }
    MEMORY[0x210530CB0](&v8);
  }
  else
  {
    do
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      sub_20B0D29D0((uint64_t)&v8, (uint64_t *)(v0 + 8), (_DWORD *)(v0 + 16));
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *((void *)&v6 + 1) = 0;
      *(void *)&long long v5 = MEMORY[0x263F907A0] + 16;
      if (!atomic_load(MEMORY[0x263F90550])) {
        sub_20B122970();
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
      MEMORY[0x210530F70](&v5);
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v10);
      if (v9) {
        sub_20B06A5E0(v9);
      }
      sub_20B0D29D0((uint64_t)&v5, &v13, &v14);
      sub_20B11E10C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5);
      if ((BYTE8(v6) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v6 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v6);
      if (*((void *)&v5 + 1)) {
        sub_20B06A5E0(*((uint64_t *)&v5 + 1));
      }
      MEMORY[0x210530CB0](&v12);
      v0 += 24;
    }
    while (v0 != v1);
    if (v16 != v15)
    {
      long long v5 = 0u;
      long long v6 = 0u;
      uint64_t v7 = 0;
      uint64_t v8 = 0xFFEFFFFFFFFFFFFFLL;
      pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices();
      if ((void)v5)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v11 = 0;
        uint64_t v8 = MEMORY[0x263F907A0] + 16;
        if (!atomic_load(MEMORY[0x263F90550])) {
          sub_20B122970();
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial();
        MEMORY[0x210530F70](&v8);
        sub_20B0D29D0((uint64_t)&v8, &v13, &v14);
        sub_20B11E10C((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8);
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v10);
        if (v9) {
          sub_20B06A5E0(v9);
        }
        MEMORY[0x210530CB0](&v12);
      }
      sub_20B06A6E8((uint64_t)&v5);
    }
  }
  *(void *)&long long v5 = &v15;
  sub_20B1228B0((void ***)&v5);
}

void sub_20B11E8F8(uint64_t a1, void *a2)
{
  a2;
  memset(v5, 0, 24);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  void v3[3] = 0;
  v3[0] = MEMORY[0x263F907A0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(v5, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)v3);
  MEMORY[0x210530F70](v3);
  char v4 = 0;
  double v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  void v5[3] = MEMORY[0x263F906B0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDoubleSidedAttr(v3, v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>();
}

void sub_20B11F488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  sub_20B123F30((void **)(v36 - 136));
  sub_20B0C69CC((uint64_t)&a35);

  MEMORY[0x210530CB0](&a28);
  sub_20B0D2974((uint64_t)&a31);
  sub_20B06A6E8((uint64_t)&a23);
  a35 = (void **)(v36 - 160);
  sub_20B1228B0(&a35);

  _Unwind_Resume(a1);
}

BOOL sub_20B11F6A0(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  uint64_t v16 = *(uint64_t **)(a1 + 40);
  if (v1 == v16) {
    return 0;
  }
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v2 = *v1;
    uint64_t v18 = v2;
    if ((v2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    sub_20B0C7158(&v19, v1[1], v1[2], 0xAAAAAAAAAAAAAAABLL * ((v1[2] - v1[1]) >> 5));
    uint64_t v3 = v19;
    uint64_t v4 = v20;
    if (v19 == v20)
    {
      BOOL v13 = 1;
    }
    else
    {
      do
      {
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        sub_20B0A592C(&v22, (void *)v3);
        long long v5 = *(_OWORD *)(v3 + 32);
        long long v23 = *(_OWORD *)(v3 + 16);
        long long v24 = v5;
        uint64_t v6 = *(void *)(v3 + 48);
        *(void *)&long long v25 = v6;
        if (v6)
        {
          uint64_t v7 = (atomic_ullong *)(v6 - 16);
          if (*((void *)&v24 + 1)) {
            uint64_t v7 = (atomic_ullong *)*((void *)&v24 + 1);
          }
          atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = *(void *)(v3 + 56);
        *((void *)&v25 + 1) = v8;
        if ((v8 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *((void *)&v25 + 1) &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v9 = *(void *)(v3 + 64);
        *(void *)&long long v26 = v9;
        if ((v9 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)&long long v26 = v26 & 0xFFFFFFFFFFFFFFF8;
        }
        *((void *)&v26 + 1) = *(void *)(v3 + 72);
        uint64_t v10 = *(void *)(v3 + 80);
        *(void *)&long long v27 = v10;
        if ((v10 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)&long long v27 = v27 & 0xFFFFFFFFFFFFFFF8;
        }
        DWORD2(v27) = *(_DWORD *)(v3 + 88);
        MEMORY[0x2105310B0](&v17, "normals");
        unint64_t v11 = *((void *)&v25 + 1) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v12 = (atomic_uint *)(v17 & 0xFFFFFFFFFFFFFFF8);
        BOOL v13 = (*((void *)&v25 + 1) & 0xFFFFFFFFFFFFFFF8) != (v17 & 0xFFFFFFFFFFFFFFF8);
        if ((v17 & 7) != 0) {
          atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
        }
        if ((v27 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v26 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v25) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v25 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_20B06A6E8((uint64_t)&v23);
        sub_20B06A698((uint64_t)&v22);
        if ((atomic_uint *)v11 == v12) {
          break;
        }
        v3 += 96;
      }
      while (v3 != v4);
    }
    *(void *)&long long v22 = &v19;
    sub_20B0C7368((void ***)&v22);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v1 += 4;
    int v14 = v1 == v16 || v13;
  }
  while (v14 != 1);
  return v13;
}

void sub_20B11F958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B11F9B4(void *a1@<X1>, _DWORD *a2@<X2>, uint64_t a3@<X8>)
{
  id v5 = a1;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v8[0] = MEMORY[0x263F90690] + 16;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  uint64_t v6 = (void *)sub_20B06A3E4(a2);
  sub_20B06A390((void *)a3, v6);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr(&v7, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v8);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

BOOL sub_20B11FD08(void *a1, unsigned char *a2, char a3)
{
  unint64_t v3 = a1[14];
  if (!v3) {
    return 0;
  }
  uint64_t v6 = (_DWORD *)a1[18];
  if (*v6 == 3)
  {
    uint64_t v7 = 1;
    do
    {
      unint64_t v8 = v7;
      if (v3 == v7) {
        break;
      }
      int v9 = v6[v7++];
    }
    while (v9 == 3);
    if (v3 <= v8) {
      return 0;
    }
  }
  BOOL result = *a2 == 0;
  if (*a2 && (a3 & 1) == 0)
  {
    if ((!a2[32] || !sub_20B0A40C4((uint64_t)a1)) && a2[27] | a2[26])
    {
      unint64_t v13 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        int v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0) {
          int v14 = *(const char **)v14;
        }
      }
      else
      {
        int v14 = "";
      }
      NSLog(&cfstr_WarningMeshSWi.isa, v14);
      return 1;
    }
    if (a2[33])
    {
      unint64_t v11 = *a1 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        uint64_t v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          uint64_t v12 = *(const char **)v12;
        }
      }
      else
      {
        uint64_t v12 = "";
      }
      NSLog(&cfstr_WarningMeshSWi_0.isa, v12);
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_20B11FE30(void *a1, uint64_t a2, void *a3, _DWORD *a4, uint64_t a5, void *a6)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  a1;
  id v9 = a3;
  a6;
  memset(v10, 0, sizeof(v10));
  sub_20B11F9B4(v9, a4, (uint64_t)v10);
}

void sub_20B120348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if ((a36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2105308E0](&a37);
  sub_20B121814((uint64_t)&a41);

  _Unwind_Resume(a1);
}

uint64_t sub_20B120430(uint64_t a1, uint64_t a2)
{
  sub_20B123FAC((uint64_t)&v8, a2 + 96, *(void *)(a1 + 8), a2);
  id v5 = v4;
  uint64_t v6 = *(void **)(a1 + 8);
  if (v6 != v4)
  {
    do
    {
      v6 -= 12;
      sub_20B0A7530(a1 + 16, v6);
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 8) = v5;
  return a2;
}

void sub_20B1204B4(void *a1@<X1>, _DWORD *a2@<X2>, uint64_t a3@<X8>)
{
  id v5 = a1;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v8[0] = MEMORY[0x263F90690] + 16;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  uint64_t v6 = (void *)sub_20B06A3E4(a2);
  sub_20B06A390((void *)a3, v6);
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr(&v7, (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)v8);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_20B120894(void *a1, uint64_t a2, void *a3, _DWORD *a4, uint64_t a5, void *a6)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v10 = a1;
  id v11 = a3;
  id v12 = a6;
  uint64_t v13 = *(void *)(a2 + 64);
  *(unsigned char *)(a2 + 26) = 1;
  memset(v14, 0, sizeof(v14));
  sub_20B1204B4(v11, a4, (uint64_t)v14);
}

void sub_20B120CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if ((a34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2105308E0](&a35);
  sub_20B121814((uint64_t)&a39);

  _Unwind_Resume(a1);
}

unint64_t sub_20B120D88(unint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a2)
  {
    if (a2 == result)
    {
      return a2 + 1;
    }
    else
    {
      unint64_t v3 = (unsigned __int8 *)(a2 - 1);
      if (a2 - 1 > result)
      {
        while (*v3 != a3)
        {
          if (--v3 == (unsigned __int8 *)result) {
            goto LABEL_10;
          }
        }
        BOOL result = (unint64_t)v3;
      }
LABEL_10:
      ++result;
    }
  }
  return result;
}

void sub_20B120DD8(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_20B120E2C((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_20B120E2C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 32)
  {
    uint64_t v7 = (void **)(i - 24);
    sub_20B0C7368(&v7);
    uint64_t v6 = *(void *)(i - 32);
    uint64_t v5 = v6;
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(a1 + 8) = a2;
}

void *sub_20B120EA0(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    if (a2[1])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      sub_20B0A5A2C((uint64_t)&v8, (uint64_t)a1);
      uint64_t v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
        (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
      }
      else {
        *a1 = *a2;
      }
      if (v9) {
        (*(void (**)(uint64_t *))(v9 + 32))(&v8);
      }
    }
    else
    {
      uint64_t v5 = a1[1];
      if (v5) {
        BOOL v6 = (a1[1] & 3) == 3;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        (*(void (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_20B120F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(char *))(a11 + 32))(&a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B120FCC(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_20B1210FC((uint64_t *)a1);
    if (a4 >> 59) {
      sub_20B05D0BC();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_20B121138((void *)a1, v12);
    uint64_t v13 = sub_20B12117C(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[4 * v14];
    sub_20B121370((uint64_t)&v17, a2, v15, v9);
    uint64_t v13 = sub_20B12117C(v8, v15, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_20B121370((uint64_t)&v18, a2, a3, v9);
  sub_20B120E2C(a1, v16);
}

void sub_20B1210EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B1210F4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B1210FC(uint64_t *a1)
{
  if (*a1)
  {
    sub_20B120E2C((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_20B121138(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_20B05D0BC();
  }
  BOOL result = (char *)sub_20B06C71C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t *sub_20B12117C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  unint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    BOOL v6 = a2;
    do
    {
      sub_20B121224(a1, v4, v6);
      v6 += 4;
      uint64_t v4 = v12 + 4;
      v12 += 4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  sub_20B1212B4((uint64_t)v9);
  return v4;
}

void sub_20B121210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_20B121224(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return sub_20B0C7158(a2 + 1, a3[1], a3[2], 0xAAAAAAAAAAAAAAABLL * ((a3[2] - a3[1]) >> 5));
}

uint64_t sub_20B1212B4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B121300(*(void *)a1, **(void **)(a1 + 16), **(void **)(a1 + 16), **(void **)(a1 + 8), **(void **)(a1 + 8));
  }
  return a1;
}

void sub_20B121300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 != a5)
  {
    v11[5] = v5;
    v11[6] = v6;
    uint64_t v8 = a3;
    do
    {
      v11[0] = (void **)(v8 - 24);
      sub_20B0C7368(v11);
      uint64_t v10 = *(void *)(v8 - 32);
      v8 -= 32;
      uint64_t v9 = v10;
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    while (v8 != a5);
  }
}

void *sub_20B121370(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      sub_20B06A390(a4, v5);
      if (v5 != a4) {
        sub_20B1213F8((uint64_t)(a4 + 1), v5[1], v5[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2] - v5[1]) >> 5));
      }
      v5 += 4;
      a4 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_20B1213F8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    sub_20B12157C((void *)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      sub_20B05D0BC();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_20B0C71E0((void *)a1, v11);
    uint64_t result = (uint64_t)sub_20B0C7234(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 8) - v9) >> 5) < a4)
  {
    uint64_t v13 = a2 + 32 * ((*(void *)(a1 + 8) - v9) >> 5);
    sub_20B1215EC((uint64_t)&v17, a2, v13, v9);
    uint64_t result = (uint64_t)sub_20B0C7234(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = result;
    return result;
  }
  uint64_t result = sub_20B1215EC((uint64_t)&v18, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void **)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 12;
      uint64_t result = sub_20B0A7530(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
  return result;
}

void sub_20B12156C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B121574(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20B12157C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 12;
        sub_20B0A7530((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20B1215EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_20B120EA0((void *)a4, (void *)v5);
    sub_20B0A4010(a4 + 16, (long long *)(v5 + 16));
    sub_20B06A390((void *)(a4 + 56), (void *)(v5 + 56));
    sub_20B06A390((void *)(a4 + 64), (void *)(v5 + 64));
    *(void *)(a4 + 72) = *(void *)(v5 + 72);
    sub_20B06A390((void *)(a4 + 80), (void *)(v5 + 80));
    *(_DWORD *)(a4 + 88) = *(_DWORD *)(v5 + 88);
    a4 += 96;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20B121690(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 12) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B1216C8(void *a1)
{
  if (sub_20B121690((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B12175C, &unk_26BF4F508);
  }
}

void sub_20B12175C()
{
}

uint64_t sub_20B1217B8(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0) {
      operator delete(*(void **)result);
    }
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B121814(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 440);
  sub_20B121928(&v4);
  sub_20B06A6E8(a1 + 400);
  sub_20B06A6E8(a1 + 360);
  sub_20B06A6E8(a1 + 320);
  sub_20B06A6E8(a1 + 280);
  sub_20B06A6E8(a1 + 240);
  uint64_t v2 = *(void *)(a1 + 232);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B06A6E8(a1 + 192);
  sub_20B06A6E8(a1 + 152);
  sub_20B06A6E8(a1 + 112);

  sub_20B06A698(a1 + 72);
  sub_20B06A698(a1 + 56);
  uint64_t v4 = (void **)(a1 + 32);
  sub_20B120DD8(&v4);
  uint64_t v4 = (void **)(a1 + 8);
  sub_20B0C7368(&v4);
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_20B121928(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20B1219C0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B1219C0(uint64_t a1, uint64_t a2)
{
  sub_20B06A6E8(a2 + 8);
}

void sub_20B1219F4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 8;
        sub_20B121A8C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B121A8C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return sub_20B06A424(a2);
}

uint64_t sub_20B121ACC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    sub_20B120D88((unint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return sub_20B121B50(v3);
  }
  return result;
}

char *sub_20B121B50(char *result, uint64_t a2, char *a3, char *a4, const std::locale **a5, uint64_t a6, uint64_t a7)
{
  if (a4 != a3)
  {
    if (a2 - (uint64_t)result >= a4 - a3) {
      return sub_20B121B94(result, a2, a3, a4, a5, a6, a7, a2 - (void)result, a4 - a3);
    }
    else {
      return (char *)a2;
    }
  }
  return result;
}

char *sub_20B121B94(char *a1, uint64_t a2, char *a3, char *a4, const std::locale **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = (uint64_t)&a1[a8 - a9 + 1];
  if ((char *)v10 != a1)
  {
    unint64_t v14 = a1;
    uint64_t v15 = a3 + 1;
    while (!sub_20B121C58(a5, *v14, *a3))
    {
LABEL_7:
      if (++v14 == (char *)v10) {
        return (char *)a2;
      }
    }
    uint64_t v16 = v14 + 1;
    char v17 = v15;
    while (v17 != a4)
    {
      unsigned int v19 = *v16++;
      uint64_t v18 = v19;
      unsigned int v20 = *v17++;
      if (!sub_20B121C58(a5, v18, v20)) {
        goto LABEL_7;
      }
    }
    return v14;
  }
  return (char *)a2;
}

BOOL sub_20B121C58(const std::locale **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::locale::id *)MEMORY[0x263F8C108];
  uint64_t v7 = std::locale::use_facet(*a1, MEMORY[0x263F8C108]);
  LODWORD(a2) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[1].~facet)(v7, a2);
  uint64_t v8 = std::locale::use_facet(*a1, v6);
  return a2 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v8->__vftable[1].~facet)(v8, a3);
}

void sub_20B121D08()
{
}

void sub_20B121D5C()
{
}

void sub_20B121DAC(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t sub_20B121DD0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 47) < 0) {
      operator delete(*(void **)(result + 24));
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    JUMPOUT(0x210532650);
  }
  return result;
}

unsigned __int8 *sub_20B121E3C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_20B1220C8(a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (sub_20B122108(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  sub_20B1221B0(a1, v8, a3, v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_20B05F7E0(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *long long v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v6;
  return i;
}

void sub_20B1220A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_20B1226CC((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B1220C8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_20B122260((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t sub_20B122108(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void *sub_20B1221B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  uint64_t v8 = a4 + 1;
  int v9 = operator new(0x28uLL);
  *a4 = v9;
  *uint64_t v8 = v7;
  *((unsigned char *)a4 + 16) = 0;
  *int v9 = 0;
  v9[1] = a2;
  uint64_t result = v9 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_20B07F994(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_20B122244(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_20B1226CC(v2, v3);
  _Unwind_Resume(a1);
}

unint64_t sub_20B122260(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      long long v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_20B12260C(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_20B122560(a2, a3);
  }
  else
  {
    return sub_20B122468(a2, a3);
  }
}

unint64_t sub_20B122468(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_20B122560(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_20B12260C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void sub_20B1226CC(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_20B12272C()
{
}

uint64_t sub_20B122784(uint64_t result)
{
  if (result) {
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B1227A0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_20B05D0BC();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v6 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)sub_20B0A72A8((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[96 * v3];
  unint64_t v13 = &v7[96 * v6];
  sub_20B0A73B8((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 96;
  sub_20B0A7230(a1, &v10);
  uint64_t v8 = a1[1];
  sub_20B0A75B8(&v10);
  return v8;
}

void sub_20B12289C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B0A75B8((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B1228B0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 24;
      uint64_t v7 = v4 - 24;
      uint64_t v8 = v4 - 24;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 24;
        (*v9)(v7);
        v6 -= 24;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B122970()
{
}

void sub_20B1229C8()
{
}

void sub_20B122A08(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x60C4005C00B59);
  _Unwind_Resume(a1);
}

uint64_t sub_20B122A2C(uint64_t a1)
{
  unint64_t v40 = (void **)(a1 + 304);
  sub_20B06C040(&v40);
  uint64_t v2 = *(void *)(a1 + 296);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 288);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 280);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 272);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 264);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 256);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 248);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 240);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 232);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 224);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 216);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 208);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 200);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 192);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 184);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 176);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 168);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 160);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 152);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 144);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 136);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 128);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 120);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 112);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 104);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 88);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 80);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 72);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 64);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 56);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 48);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 40);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 32);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 24);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 16);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 8);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void *sub_20B122DF8(void *a1, unint64_t a2, long long *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B122E84(a1, a2);
    uint64_t v6 = (_OWORD *)a1[1];
    uint64_t v7 = &v6[4 * a2];
    unint64_t v8 = a2 << 6;
    do
    {
      long long v9 = *a3;
      long long v10 = a3[1];
      long long v11 = a3[3];
      v6[2] = a3[2];
      void v6[3] = v11;
      *uint64_t v6 = v9;
      v6[1] = v10;
      v6 += 4;
      v8 -= 64;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B122E68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B122E84(void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_20B05D0BC();
  }
  unint64_t result = (char *)sub_20B122EC8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_20B122EC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_20B05D178();
  }
  return operator new(a2 << 6);
}

uint64_t sub_20B122F00(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_20B05D0BC();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    unint64_t v8 = (char *)sub_20B06C71C((uint64_t)(a1 + 2), v7);
  }
  else {
    unint64_t v8 = 0;
  }
  long long v11 = v8;
  uint64_t v12 = (uint64_t *)&v8[32 * v3];
  uint64_t v14 = &v8[32 * v7];
  sub_20B121224((uint64_t)(a1 + 2), v12, a2);
  uint64_t v13 = v12 + 4;
  sub_20B122FF0(a1, &v11);
  uint64_t v9 = a1[1];
  sub_20B12324C((uint64_t)&v11);
  return v9;
}

void sub_20B122FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B12324C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B122FF0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B123068((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B123068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  uint64_t v12 = 0;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v7 - 32) = v8;
      *(void *)a3 = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  LOBYTE(v12) = 1;
  sub_20B123118((uint64_t)v11);
  return v9;
}

uint64_t sub_20B123118(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B123150((uint64_t *)a1);
  }
  return a1;
}

void sub_20B123150(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_20B1231C8(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_20B1231C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {
    uint64_t v6 = (void **)(i + 8);
    sub_20B0C7368(&v6);
    if ((*(void *)i & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)i & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t i = *(void *)(a2 + 32) + 32;
  }
}

uint64_t sub_20B12324C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B123284(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v6 = (void **)(i - 24);
    sub_20B0C7368(&v6);
    uint64_t v5 = *(void *)(i - 32);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

uint64_t *sub_20B123300(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B123320(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B1234C4(a1);
}

uint64_t sub_20B123330()
{
  return 1;
}

unint64_t sub_20B123338(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v3[1] = 1;
  v3[0] = *(void *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_20B123394(uint64_t *a1, uint64_t *a2)
{
  return sub_20B0C8010(*a1, *a2);
}

uint64_t sub_20B1233A0(uint64_t *a1, uint64_t a2)
{
  return sub_20B0C8010(*a1, a2);
}

uint64_t sub_20B1233AC()
{
  return 0;
}

uint64_t sub_20B1233B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B12340C()
{
  return &unk_26BF4F108;
}

uint64_t sub_20B123418()
{
  return 1;
}

uint64_t sub_20B123420()
{
  return MEMORY[0x263F8C260];
}

uint64_t sub_20B12342C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B123434(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B123440(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIjEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B123474(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F108, a2);
}

void *sub_20B123498()
{
  return &unk_26BF4F108;
}

uint64_t sub_20B1234A4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B1234AC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF51390;
  sub_20B0C8144();
}

uint64_t *sub_20B1234C4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1030C404A96FE9ALL);
  }
  return a1;
}

uint64_t sub_20B12352C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B1235D8(void *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)*a1;
  *a1 += 4;
  return MEMORY[0x270F987B0](a2, v3);
}

void sub_20B1235F0(void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20B123688((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B123688(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return sub_20B06A5E0(result);
  }
  return result;
}

uint64_t sub_20B1236F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_20B05D0BC();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_20B06C71C((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  uint64_t v12 = (uint64_t *)&v8[32 * v3];
  uint64_t v14 = &v8[32 * v7];
  sub_20B1237E8((uint64_t)(a1 + 2), v12, a2);
  long long v13 = v12 + 4;
  sub_20B122FF0(a1, &v11);
  uint64_t v9 = a1[1];
  sub_20B12324C((uint64_t)&v11);
  return v9;
}

void sub_20B1237D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B12324C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_20B1237E8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  return sub_20B0C7158(a2 + 1, a3[1], a3[2], 0xAAAAAAAAAAAAAAABLL * ((a3[2] - a3[1]) >> 5));
}

void sub_20B123878(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v7 = (uint64_t *)a1;
      }
      else {
        unint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    uint64_t v12 = sub_20B0C7D40(a1, v11);
    long long v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      uint64_t v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20B06A6E8(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_20B1239E0()
{
}

void *sub_20B123A38(void *result)
{
  if (result)
  {
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B123A6C(void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20B123B04((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B123B04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return sub_20B06A5E0(result);
  }
  return result;
}

void sub_20B123B74(void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20B123C0C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B123C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return sub_20B06A5E0(result);
  }
  return result;
}

uint64_t sub_20B123C7C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_20B0C6AF8((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_20B123CE4(_Unwind_Exception *a1)
{
  sub_20B0C6F20(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20B123CFC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B123D74((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B123D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  uint64_t v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 56;
      sub_20B123E3C(a1, v7 - 56, v9);
      uint64_t v7 = *((void *)&v16 + 1) - 56;
      *((void *)&v16 + 1) -= 56;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_20B123EA4((uint64_t)v13);
  return v11;
}

void sub_20B123E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_20B123E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  long long v4 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  uint64_t v5 = *(void *)(a3 + 40);
  *(void *)(a2 + 40) = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a2 + 32)) {
      uint64_t v6 = *(atomic_ullong **)(a2 + 32);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  id result = *(id *)(a3 + 48);
  *(void *)(a2 + 48) = result;
  return result;
}

uint64_t sub_20B123EA4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B123EDC((uint64_t *)a1);
  }
  return a1;
}

void sub_20B123EDC(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_20B1219C0(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **sub_20B123F30(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_20B123F64(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    sub_20B1219C0(v4, i - 56);
  }
}

uint64_t sub_20B123FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    uint64_t v9 = a2 + v7;
    sub_20B0A6EB4((void *)(a4 + v7), (void *)(a2 + v7));
    if (a4 != a2)
    {
      sub_20B06A6E8(v8 + 16);
      long long v10 = *(_OWORD *)(v9 + 32);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)(v9 + 16) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(void *)(v8 + 48) = *(void *)(v9 + 48);
      *(void *)(v9 + 48) = 0;
      uint64_t v11 = *(void *)(v8 + 56);
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(v8 + 56) = *(void *)(v9 + 56);
      *(void *)(v9 + 56) = 0;
      uint64_t v12 = (void *)(a4 + v7);
      uint64_t v13 = *(void *)(a4 + v7 + 64);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v14 = a2 + v7;
      v12[8] = *(void *)(a2 + v7 + 64);
      *(void *)(a2 + v7 + 64) = 0;
      v12[9] = *(void *)(a2 + v7 + 72);
      uint64_t v15 = v12[10];
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v12[10] = *(void *)(v14 + 80);
      *(void *)(v14 + 80) = 0;
    }
    *(_DWORD *)(v8 + 88) = *(_DWORD *)(v9 + 88);
    v7 += 96;
  }
  while (v9 + 96 != v6);
  return v6;
}

void sub_20B1240D8(void *a1, unint64_t a2, uint64_t a3, __n128 a4)
{
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  uint64_t v5 = (float32x4_t ****)a1[10];
  uint64_t v6 = (float32x4_t ****)a1[9];
  if (v6 != v5)
  {
    uint64_t v7 = (char **)(a1 + 12);
    do
    {
      uint64_t v8 = *v6;
      sub_20B173FA0(*v6, a4);
      sub_20B173D5C((float32x2_t ***)v8);
      sub_20B174918((uint64_t)v8);
      a4.n128_u64[0] = (unint64_t)v8[4];
      BOOL v11 = fabsf(a4.n128_f32[0]) == INFINITY;
      a4.n128_u32[0] = a4.n128_u32[1];
      float v9 = fabsf(a4.n128_f32[1]);
      BOOL v11 = v11 || v9 == INFINITY;
      if (v11)
      {
        uint64_t v13 = (float32x4_t ****)a1[13];
        unint64_t v12 = a1[14];
        if ((unint64_t)v13 >= v12)
        {
          uint64_t v15 = ((char *)v13 - *v7) >> 3;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_20B05D0BC();
          }
          uint64_t v16 = v12 - (void)*v7;
          uint64_t v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
            uint64_t v17 = v15 + 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            a2 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            a2 = v17;
          }
          if (a2) {
            uint64_t v18 = (char *)sub_20B0602EC((uint64_t)(a1 + 14), a2);
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (float32x4_t ****)&v18[8 * v15];
          *uint64_t v19 = v8;
          uint64_t v14 = v19 + 1;
          uint64_t v21 = (char *)a1[12];
          uint64_t v20 = (char *)a1[13];
          if (v20 != v21)
          {
            do
            {
              uint64_t v22 = (float32x4_t ***)*((void *)v20 - 1);
              v20 -= 8;
              *--uint64_t v19 = v22;
            }
            while (v20 != v21);
            uint64_t v20 = *v7;
          }
          a1[12] = v19;
          a1[13] = v14;
          a1[14] = &v18[8 * a2];
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *uint64_t v13 = v8;
          uint64_t v14 = v13 + 1;
        }
        a1[13] = v14;
      }
      ++v6;
    }
    while (v6 != v5);
  }
  uint64_t v23 = (void *)a1[12];
  uint64_t v24 = (void *)a1[13];
  if (v23 != v24)
  {
    uint64_t v25 = (char *)a1[10];
    do
    {
      uint64_t v26 = v25;
      if ((char *)a1[9] != v25)
      {
        uint64_t v26 = (char *)a1[9];
        while (*(void *)v26 != *v23)
        {
          v26 += 8;
          if (v26 == v25)
          {
            uint64_t v26 = v25;
            break;
          }
        }
      }
      a2 = (unint64_t)(v26 + 8);
      int64_t v27 = v25 - (v26 + 8);
      if (v25 != v26 + 8) {
        memmove(v26, (const void *)a2, v25 - (v26 + 8));
      }
      uint64_t v25 = &v26[v27];
      a1[10] = &v26[v27];
      ++v23;
    }
    while (v23 != v24);
  }
  objc_msgSend_currentProgress(MEMORY[0x263F08AB8], (const char *)a2, a3);
  id v32 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v30 = objc_msgSend_completedUnitCount(v32, v28, v29);
  objc_msgSend_setCompletedUnitCount_(v32, v31, v30 + 6);
}

void sub_20B124420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_20B124454(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            uint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        sub_20B12B044((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          uint64_t v6 = (void *)v6[1];
        }
      }
      uint64_t v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return sub_20B07F6E8(v10);
}

void sub_20B124510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B07F6E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B124524(uint64_t result)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(int8x16_t *****)(result + 96);
  uint64_t v25 = *(int8x16_t *****)(result + 104);
  if (v1 != v25)
  {
    uint64_t v2 = (void *)(result + 120);
    do
    {
      uint64_t v26 = v1;
      uint64_t v4 = **v1;
      uint64_t v3 = (*v1)[1];
      while (v4 != v3)
      {
        uint64_t v5 = *v4;
        memset(v33, 0, 32);
        sub_20B0BFA48(v33);
        float32x4_t v31 = 0u;
        long long v32 = 0u;
        sub_20B0BFA44((int8x16_t *)&v31, v5[4], v5[5]);
        float32x4_t v29 = 0u;
        long long v30 = 0u;
        sub_20B0BFA44((int8x16_t *)&v29, v5[5], v5[6]);
        float32x4_t v27 = 0u;
        long long v28 = 0u;
        sub_20B0BFA44((int8x16_t *)&v27, v5[6], v5[4]);
        float v6 = sub_20B0BFAA4(&v31);
        if (v6 < sub_20B0BFAA4(&v29))
        {
          float32x4_t v8 = v31;
          long long v7 = v32;
          float32x4_t v31 = v29;
          long long v32 = v30;
          float32x4_t v29 = v8;
          long long v30 = v7;
        }
        float v9 = sub_20B0BFAA4(&v31);
        if (v9 < sub_20B0BFAA4(&v27))
        {
          float32x4_t v11 = v31;
          long long v10 = v32;
          float32x4_t v31 = v27;
          long long v32 = v28;
          float32x4_t v27 = v11;
          long long v28 = v10;
        }
        float v12 = sub_20B0BFAA4(&v29);
        if (v12 < sub_20B0BFAA4(&v27))
        {
          float32x4_t v14 = v29;
          long long v13 = v30;
          float32x4_t v29 = v27;
          long long v30 = v28;
          float32x4_t v27 = v14;
          long long v28 = v13;
        }
        uint64_t v15 = 0;
        v46[0] = v31;
        v46[1] = v32;
        v46[2] = v29;
        v46[3] = v30;
        v46[4] = v27;
        v46[5] = v28;
        while (1)
        {
          id result = sub_20B0C0204((uint64_t)v5, v2, (float32x4_t)v46[v15], (float32x4_t)v46[v15 + 1]);
          if (result) {
            break;
          }
          v15 += 2;
          if (v15 == 6) {
            goto LABEL_21;
          }
        }
        uint64_t v16 = 0;
        int8x16_t v17 = v5[5];
        int8x16_t v40 = v5[4];
        unint64_t v41 = v5 + 1;
        int8x16_t v42 = v17;
        uint64_t v43 = &v5[1].i8[8];
        int8x16_t v44 = v5[6];
        uint64_t v45 = v5 + 2;
        do
        {
          uint64_t v18 = 0;
          uint64_t v19 = (float32x4_t *)(&v40 + 2 * v16);
          uint64_t v20 = (void *)v19[1].i64[0];
          *uint64_t v20 = *(void *)(result + 16);
          long long v21 = *(_OWORD *)(result + 80);
          long long v34 = *(_OWORD *)(result + 64);
          float32x4_t v22 = *v19;
          uint64_t v35 = result + 16;
          long long v36 = v21;
          uint64_t v37 = result + 24;
          long long v38 = *(_OWORD *)(result + 96);
          uint64_t v39 = result + 32;
          do
          {
            float32x4_t v23 = vsubq_f32(*(float32x4_t *)((char *)&v34 + v18), v22);
            int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
            if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x4_t)vdupq_laneq_s32(v24, 2)).f32[0]) < 0.000001)*uint64_t v20 = **(void **)((char *)&v34 + v18 + 16); {
            v18 += 32;
            }
          }
          while (v18 != 96);
          ++v16;
        }
        while (v16 != 3);
LABEL_21:
        ++v4;
      }
      uint64_t v1 = v26 + 1;
    }
    while (v26 + 1 != v25);
  }
  return result;
}

uint64_t sub_20B1247D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2 == a2) {
    goto LABEL_11;
  }
  int v4 = 0;
  do
  {
    uint64_t v5 = v2[2];
    float32x4_t v25 = *(float32x4_t *)(v5 + 64);
    float32x4_t v23 = *(float32x4_t *)(v5 + 80);
    float32x4_t v24 = *(float32x4_t *)(v5 + 96);
    sub_20B0C0304((__n128 *)v5);
    float32x4_t v6 = vsubq_f32(v23, v25);
    int32x4_t v7 = (int32x4_t)vmulq_f32(v6, v6);
    v7.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2)).u32[0];
    float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    float32x2_t v9 = vmul_f32(vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)), v8);
    v7.i32[0] = vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).u32[0];
    float32x4_t v10 = vsubq_f32(v24, v25);
    int32x4_t v11 = (int32x4_t)vmulq_f32(v10, v10);
    v11.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2)).u32[0];
    float32x2_t v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
    float32x2_t v13 = vmul_f32(vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)), v12);
    int32x4_t v14 = (int32x4_t)vmulq_n_f32(vmulq_n_f32(vmulq_f32(v10, v6), *(float *)v7.i32), vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
    if (fabsf(vaddq_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1)), (float32x4_t)vdupq_laneq_s32(v14, 2)).f32[0]) == 1.0|| sub_20B0BFBEC((float32x4_t *)v5) < 0.000001)
    {
      uint64_t v15 = *v2;
      uint64_t v16 = (uint64_t *)v2[1];
      *(void *)(v15 + 8) = v16;
      *(void *)v2[1] = v15;
      --a2[2];
      operator delete(v2);
      ++v4;
    }
    else
    {
      uint64_t v16 = (uint64_t *)v2[1];
    }
    uint64_t v2 = v16;
  }
  while (v16 != a2);
  if (!v4)
  {
LABEL_11:
    int8x16_t v17 = (void *)MEMORY[0x263F8C100];
    uint64_t v18 = "No bad triangles found.";
    uint64_t v19 = 23;
  }
  else
  {
    sub_20B07FC90(MEMORY[0x263F8C100], (uint64_t)"Removed ", 8);
    int8x16_t v17 = (void *)std::ostream::operator<<();
    uint64_t v18 = " bad triangles";
    uint64_t v19 = 14;
  }
  uint64_t v20 = sub_20B07FC90(v17, (uint64_t)v18, v19);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  long long v21 = std::locale::use_facet(&v26, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v26);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20B124A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::locale a16)
{
}

uint64_t sub_20B124A24@<X0>(uint64_t *a1@<X1>, void **a2@<X8>)
{
  memset(v28, 0, sizeof(v28));
  uint64_t v29 = 1065353216;
  memset(v26, 0, sizeof(v26));
  uint64_t v27 = 1065353216;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v3 = (uint64_t *)a1[1];
  if (v3 != a1)
  {
    do
    {
      float32x4_t v25 = (float32x4_t *)v3[2];
      uint64_t v5 = sub_20B12B0BC(v28, v25);
      float32x4_t v6 = v25;
      if (v5)
      {
        long long v30 = v25;
        int32x4_t v7 = sub_20B12B1B8((uint64_t)v28, v25, (uint64_t)&unk_20B1E7420, (uint64_t *)&v30);
        v25[16].i64[1] = v7[18].i64[0];
        sub_20B0845A8((uint64_t)v26, &v25, &v25);
        float32x2_t v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = ((char *)v9 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            sub_20B05D0BC();
          }
          uint64_t v12 = v8 - (void)*a2;
          uint64_t v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
            uint64_t v13 = v11 + 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            uint64_t v15 = (char *)sub_20B0602EC((uint64_t)(a2 + 2), v14);
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v25;
          float32x4_t v10 = v16 + 8;
          uint64_t v18 = (char *)*a2;
          int8x16_t v17 = (char *)a2[1];
          if (v17 != *a2)
          {
            do
            {
              uint64_t v19 = *((void *)v17 - 1);
              v17 -= 8;
              *((void *)v16 - 1) = v19;
              v16 -= 8;
            }
            while (v17 != v18);
            int8x16_t v17 = (char *)*a2;
          }
          *a2 = v16;
          a2[1] = v10;
          a2[2] = &v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *float32x2_t v9 = v25;
          float32x4_t v10 = v9 + 1;
        }
        a2[1] = v10;
      }
      else
      {
        long long v30 = v25;
        sub_20B12B1B8((uint64_t)v28, v25, (uint64_t)&unk_20B1E7420, (uint64_t *)&v30)[18].i64[0] = (uint64_t)v6;
      }
      uint64_t v3 = (uint64_t *)v3[1];
    }
    while (v3 != a1);
    uint64_t v20 = (uint64_t *)a1[1];
    if (v20 != a1)
    {
      do
      {
        long long v21 = sub_20B086AFC(v26, v20 + 2);
        float32x4_t v22 = (uint64_t *)v20[1];
        if (v21)
        {
          uint64_t v23 = *v20;
          *(void *)(v23 + 8) = v22;
          *(void *)v20[1] = v23;
          --a1[2];
          operator delete(v20);
        }
        uint64_t v20 = v22;
      }
      while (v22 != a1);
    }
  }
  sub_20B05F1D0((uint64_t)v26);
  return sub_20B05F1D0((uint64_t)v28);
}

void sub_20B124C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v5 = *(void **)v3;
  if (*(void *)v3)
  {
    *(void *)(v3 + 8) = v5;
    operator delete(v5);
  }
  sub_20B05F1D0((uint64_t)va);
  sub_20B05F1D0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B124C78(void *a1)
{
  uint64_t v2 = a1[9];
  uint64_t v3 = (char *)a1[10];
  unint64_t v4 = 126 - 2 * __clz((uint64_t)&v3[-v2] >> 3);
  unsigned int v54 = (uint64_t (*)(uint64_t, uint64_t))sub_20B125024;
  if (v3 == (char *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_20B12B4C8(v2, v3, &v54, v5, 1);
  uint64_t v6 = *(float32x4_t ****)(a1[9] + (((uint64_t)(a1[10] - a1[9]) >> 1) & 0xFFFFFFFFFFFFFFF8));
  float v7 = sub_20B174878(v6);
  float v8 = sub_20B1748C0((uint64_t)v6);
  uint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  unsigned int v54 = 0;
  uint64_t v55 = 0;
  unsigned int v56 = 0;
  uint64_t v11 = v10 - v9;
  if (v11)
  {
    unint64_t v12 = 0;
    unint64_t v13 = v11 >> 3;
    float v14 = v8 * (float)(1.0 / v7);
    __asm { FMOV            V10.2S, #1.0 }
    do
    {
      uint64_t v20 = *(void *)(v9 + 8 * v12);
      float v21 = sub_20B174878((float32x4_t ***)v20);
      float v23 = v21 / sub_20B1748C0(v20);
      if (v12 > v13) {
        float v23 = v23 / sqrtf(v21 / sub_20B174878(*(float32x4_t ****)(a1[9] + 8 * v13)));
      }
      *(float *)v22.i32 = sqrtf(v23 * v14);
      sub_20B173D00(v20, (float32x2_t)vdup_lane_s32(v22, 0));
      *(void *)(v20 + 64) = _D10;
      uint64_t v24 = *(void *)(v20 + 32);
      if (fabsf(*(float *)&v24) == INFINITY || fabsf(*((float *)&v24 + 1)) == INFINITY)
      {
        float32x4_t v25 = v55;
        if ((char *)v55 >= v56)
        {
          uint64_t v27 = ((char *)v55 - (char *)v54) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            sub_20B05D0BC();
          }
          unint64_t v28 = (v56 - (char *)v54) >> 2;
          if (v28 <= v27 + 1) {
            unint64_t v28 = v27 + 1;
          }
          if ((unint64_t)(v56 - (char *)v54) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29) {
            long long v30 = (char *)sub_20B0602EC((uint64_t)&v56, v29);
          }
          else {
            long long v30 = 0;
          }
          float32x4_t v31 = (uint64_t (*)(uint64_t, uint64_t))&v30[8 * v27];
          *(void *)float32x4_t v31 = v20;
          std::locale v26 = (uint64_t (*)(uint64_t, uint64_t))((char *)v31 + 8);
          uint64_t v33 = v54;
          long long v32 = v55;
          if (v55 != v54)
          {
            do
            {
              uint64_t v34 = *((void *)v32 - 1);
              long long v32 = (uint64_t (*)(uint64_t, uint64_t))((char *)v32 - 8);
              *((void *)v31 - 1) = v34;
              float32x4_t v31 = (uint64_t (*)(uint64_t, uint64_t))((char *)v31 - 8);
            }
            while (v32 != v33);
            long long v32 = v54;
          }
          unsigned int v54 = v31;
          uint64_t v55 = v26;
          unsigned int v56 = &v30[8 * v29];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(void *)uint64_t v55 = v20;
          std::locale v26 = (uint64_t (*)(uint64_t, uint64_t))((char *)v25 + 8);
        }
        uint64_t v55 = v26;
      }
      ++v12;
      uint64_t v9 = a1[9];
    }
    while (v12 < (a1[10] - v9) >> 3);
    long long v36 = v54;
    uint64_t v35 = v55;
    if (v54 != v55)
    {
      uint64_t v37 = (char **)(a1 + 12);
      do
      {
        uint64_t v38 = *(void *)v36;
        int8x16_t v40 = (void *)a1[13];
        unint64_t v39 = a1[14];
        if ((unint64_t)v40 >= v39)
        {
          uint64_t v42 = ((char *)v40 - *v37) >> 3;
          if ((unint64_t)(v42 + 1) >> 61) {
            sub_20B05D0BC();
          }
          uint64_t v43 = v39 - (void)*v37;
          uint64_t v44 = v43 >> 2;
          if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
            uint64_t v44 = v42 + 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45) {
            double v46 = (char *)sub_20B0602EC((uint64_t)(a1 + 14), v45);
          }
          else {
            double v46 = 0;
          }
          uint64_t v47 = &v46[8 * v42];
          *(void *)uint64_t v47 = v38;
          unint64_t v41 = v47 + 8;
          uint64_t v49 = (char *)a1[12];
          uint64_t v48 = (char *)a1[13];
          if (v48 != v49)
          {
            do
            {
              uint64_t v50 = *((void *)v48 - 1);
              v48 -= 8;
              *((void *)v47 - 1) = v50;
              v47 -= 8;
            }
            while (v48 != v49);
            uint64_t v48 = *v37;
          }
          a1[12] = v47;
          a1[13] = v41;
          a1[14] = &v46[8 * v45];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *int8x16_t v40 = v38;
          unint64_t v41 = v40 + 1;
        }
        a1[13] = v41;
        long long v52 = (char *)a1[9];
        long long v51 = (char *)a1[10];
        if (v52 != v51)
        {
          while (*(void *)v52 != v38)
          {
            v52 += 8;
            if (v52 == v51)
            {
              long long v52 = (char *)a1[10];
              break;
            }
          }
        }
        int64_t v53 = v51 - (v52 + 8);
        if (v51 != v52 + 8) {
          memmove(v52, v52 + 8, v51 - (v52 + 8));
        }
        a1[10] = &v52[v53];
        long long v36 = (uint64_t (*)(uint64_t, uint64_t))((char *)v36 + 8);
      }
      while (v36 != v35);
      uint64_t v35 = v54;
    }
    if (v35)
    {
      uint64_t v55 = v35;
      operator delete(v35);
    }
  }
}

void sub_20B124FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20B125024(float32x4_t ***a1, float32x4_t ***a2)
{
  float v3 = sub_20B174878(a1);
  return v3 < sub_20B174878(a2);
}

float sub_20B125064(float32x4_t ***a1, float a2)
{
  float v3 = *a1;
  unint64_t v4 = a1[1];
  float v5 = 0.0;
  while (v3 != v4)
  {
    uint64_t v6 = *v3;
    sub_20B0BFBEC(*v3);
    float v5 = sub_20B0BFBEC(v6) + v5;
    ++v3;
  }
  return sqrtf(v5 / (float)((float)(dword_267691144 * dword_267691144) * a2));
}

void sub_20B1250EC(int a1@<W0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>, __n128 a5@<Q0>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_20B12BA54(a4, a1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267691108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267691108))
  {
    dword_267691100 = 1;
    __cxa_guard_release(&qword_267691108);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267691118, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267691118))
  {
    dword_267691110 = 1065353216;
    __cxa_guard_release(&qword_267691118);
  }
  int v9 = (int)sqrt((double)a1);
  if (v9)
  {
    uint64_t v10 = 0;
    __n128 v11 = a5;
    v11.n128_u32[3] = 0;
    float32x4_t v40 = (float32x4_t)v11;
    unsigned int v12 = dword_267691100;
    float v13 = *(float *)&dword_267691110 * 4.6566e-10;
    if ((v9 * v9) <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (v9 * v9);
    }
    float v15 = 1.0 / (float)v9;
    do
    {
      if (a3)
      {
        unsigned int v16 = 48271 * (v12 % 0xADC8);
        unsigned int v17 = 3399 * (v12 / 0xADC8);
        BOOL v18 = v16 >= v17;
        unsigned int v19 = v16 - v17;
        if (v18) {
          int v20 = 0;
        }
        else {
          int v20 = 0x7FFFFFFF;
        }
        unsigned int v21 = v20 + v19;
        float v22 = (float)(v21 - 1);
        unsigned int v23 = v21 / 0xADC8;
        unsigned int v24 = 48271 * (v21 % 0xADC8);
        v23 *= 3399;
        BOOL v18 = v24 >= v23;
        unsigned int v25 = v24 - v23;
        if (v18) {
          int v26 = 0;
        }
        else {
          int v26 = 0x7FFFFFFF;
        }
        unsigned int v12 = v26 + v25;
        dword_267691100 = v26 + v25;
        float v27 = (float)((int)v10 % v9) + (float)(v13 * v22);
        float v28 = (float)((int)v10 / v9) + (float)(v13 * (float)(v26 + v25 - 1));
      }
      else
      {
        float v27 = (double)((int)v10 % v9) + 0.5;
        float v28 = (double)((int)v10 / v9) + 0.5;
      }
      float v29 = (float)(v27 * v15) * 6.28318531;
      float v30 = acosf((float)((float)(v28 + v28) * v15) + -1.0);
      __float2 v31 = __sincosf_stret(v30);
      __float2 v32 = __sincosf_stret(v29);
      v33.f32[0] = v32.__cosval * v31.__sinval;
      v33.f32[1] = v32.__sinval * v31.__sinval;
      v33.i64[1] = LODWORD(v31.__cosval);
      int8x16_t v34 = (int8x16_t)vmulq_f32(v33, v33);
      *(float32x2_t *)v34.i8 = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL));
      v34.i32[0] = vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1)).u32[0];
      float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
      float32x2_t v36 = vmul_f32(vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)), v35);
      float32x4_t v37 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
      if (a2)
      {
        int8x16_t v38 = (int8x16_t)vmulq_f32(v37, v40);
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL))) < 0.0) {
          float32x4_t v37 = vnegq_f32(v37);
        }
      }
      *(float32x4_t *)(*a4 + 16 * v10++) = v37;
    }
    while (v14 != v10);
  }
}

float sub_20B1253BC(double a1, __n128 a2, float a3, uint64_t a4, uint64_t **a5, int a6, int a7)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  int v27 = 0;
  float v8 = 1.0;
  if (a3 <= 1.0) {
    float v8 = a3;
  }
  if (v8 >= 0.0) {
    float v9 = v8;
  }
  else {
    float v9 = 0.0;
  }
  double v10 = sqrt((double)a6);
  int v11 = (int)v10 * (int)v10;
  sub_20B1250EC(v11, 1, a7, &v25, a2);
  unsigned int v12 = v25;
  float v13 = v26;
  if (v25 != v26)
  {
    int v24 = v11;
    __asm { FMOV            V10.2S, #1.0 }
    do
    {
      int v20 = *a5;
      unsigned int v19 = a5[1];
      while (v20 != v19)
      {
        uint64_t v21 = *v20;
        float v22 = (std::__shared_weak_count *)v20[1];
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v34 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v28 = 0u;
        LODWORD(v28) = 2139095039;
        long long v35 = 0uLL;
        long long v29 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        *(void *)&long long v32 = 0;
        sub_20B06C6F8(v21);
        if ((void)v32 && *(float *)&v28 < (float)((float)(v9 * -50.0) + 50.5))
        {
          ++v27;
          if (v22) {
            sub_20B081CD8(v22);
          }
          break;
        }
        if (v22) {
          sub_20B081CD8(v22);
        }
        v20 += 2;
      }
      v12 += 16;
    }
    while (v12 != v13);
    unsigned int v12 = v25;
    int v11 = v24;
  }
  if (v12)
  {
    int v26 = v12;
    operator delete(v12);
  }
  return 1.0 - powf(1.0 - (float)((float)(v11 - v27) / (float)v11), (float)(v9 * 2.0) + 1.0);
}

void sub_20B125624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
}

double sub_20B125654(uint64_t **a1, uint64_t **a2, uint64_t a3, __n128 a4, __n128 a5)
{
  float v5 = *a1;
  long long v28 = a1[1];
  if (*a1 != v28)
  {
    __asm { FMOV            V10.2S, #1.0 }
    float32x4_t v32 = 0u;
    while (2)
    {
      long long v31 = v5;
      uint64_t v35 = *v5;
      switch(*(_DWORD *)(*v5 + 24))
      {
        case 0:
        case 3:
          int v11 = 0;
          for (int i = 0; i != 60; ++i)
          {
            (*(void (**)(uint64_t))(*(void *)v35 + 32))(v35);
            float v13 = *a2;
            uint64_t v14 = a2[1];
            if (*a2 != v14)
            {
              do
              {
                uint64_t v15 = *v13;
                unsigned int v16 = (std::__shared_weak_count *)v13[1];
                if (v16) {
                  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                sub_20B06C6F8(v15);
                if (v16) {
                  sub_20B081CD8(v16);
                }
                v13 += 2;
              }
              while (v13 != v14);
            }
            ++v11;
          }
          float v17 = (float)v11;
          goto LABEL_23;
        case 1:
          int v19 = 0;
          for (int j = 0; j != 60; ++j)
          {
            sub_20B10DCB8(v35, (const char *)a2, a3, 0.05);
            uint64_t v21 = *a2;
            float v22 = a2[1];
            if (*a2 != v22)
            {
              do
              {
                uint64_t v23 = *v21;
                int v24 = (std::__shared_weak_count *)v21[1];
                if (v24) {
                  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                sub_20B06C6F8(v23);
                if (v24) {
                  sub_20B081CD8(v24);
                }
                v21 += 2;
              }
              while (v21 != v22);
            }
            ++v19;
          }
          float v17 = (float)v19;
LABEL_23:
          float v18 = v17 * 0.016667;
          goto LABEL_24;
        case 2:
          float v30 = sub_20B1253BC(a4.n128_f64[0], a5, 0.15, (uint64_t)a1, a2, 121, 1);
          goto LABEL_26;
        default:
          float v18 = 0.0;
LABEL_24:
          float v30 = v18;
LABEL_26:
          *(double *)v25.i64 = (*(double (**)(uint64_t, __n128, __n128))(*(void *)v35 + 40))(v35, a4, a5);
          float32x4_t v32 = vmlaq_n_f32(v32, v25, v30);
          float v5 = v31 + 1;
          if (v31 + 1 == v28) {
            goto LABEL_29;
          }
          continue;
      }
    }
  }
  float32x4_t v32 = 0u;
LABEL_29:
  float32x4_t v26 = v32;
  v26.i32[3] = 0;
  *(void *)&double result = vminnmq_f32(v26, (float32x4_t)xmmword_20B1E6E60).u64[0];
  return result;
}

void sub_20B125B04(_Unwind_Exception *exception_object)
{
}

void sub_20B125B38(void *a1@<X0>, void *a2@<X8>, float32x4_t a3@<Q0>, float32x4_t a4@<Q1>, float32x4_t a5@<Q2>, float32x4_t a6@<Q3>)
{
  uint64_t v115 = *MEMORY[0x263EF8340];
  id v85 = a1;
  float v9 = objc_msgSend_transform(v85, v7, v8);
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  uint64_t v84 = v9;
  if (v9)
  {
    objc_msgSend_matrix(v9, v10, v11);
    uint64_t v12 = 0;
    *(_OWORD *)std::string __p = v13;
    long long v106 = v14;
    long long v107 = v15;
    long long v108 = v16;
    float32x4_t v111 = 0u;
    float32x4_t v112 = 0u;
    float32x4_t v113 = 0u;
    float32x4_t v114 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v111 + v12 * 8) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)&__p[v12])), a4, (float32x2_t)__p[v12], 1), a5, *(float32x4_t *)&__p[v12], 2), a6, *(float32x4_t *)&__p[v12], 3);
      v12 += 2;
    }
    while (v12 != 8);
    a4 = v112;
    a3 = v111;
    a6 = v114;
    a5 = v113;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v83 = v85;
    if (objc_msgSend_makeVerticesUniqueAndReturnError_(v83, v19, 0))
    {
      uint64_t v21 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v83, v20, @"position", 786435);
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      objc_msgSend_submeshes(v83, v22, v23);
      obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v24, (uint64_t)&v101, v110, 16);
      if (!v88) {
        goto LABEL_27;
      }
      uint64_t v87 = *(void *)v102;
      uint64_t v91 = a2;
      while (1)
      {
        for (uint64_t i = 0; i != v88; ++i)
        {
          if (*(void *)v102 != v87) {
            objc_enumerationMutation(obj);
          }
          int v27 = *(void **)(*((void *)&v101 + 1) + 8 * i);
          long long v28 = objc_msgSend_indexBuffer(v27, v25, v26);
          long long v89 = objc_msgSend_map(v28, v29, v30);

          uint64_t v92 = objc_msgSend_bytes(v89, v31, v32);
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v106 = 0;
          if (objc_msgSend_geometryType(v27, v33, v34) != 2 || objc_msgSend_indexType(v27, v35, v36) != 32)
          {
            unint64_t v37 = objc_msgSend_indexCount(v27, v35, v36);
            sub_20B0A2BE0((uint64_t)__p, v37);
            if (objc_msgSend_geometryType(v27, v38, v39) != 5) {
              goto LABEL_18;
            }
            uint64_t v42 = objc_msgSend_topology(v27, v40, v41);
            if (v42)
            {
              uint64_t v43 = objc_msgSend_topology(v27, v40, v41);
              double v46 = objc_msgSend_faceTopology(v43, v44, v45);
              BOOL v47 = v46 == 0;

              if (!v47)
              {
                uint64_t v48 = objc_msgSend_topology(v27, v40, v41);
                long long v51 = objc_msgSend_faceTopology(v48, v49, v50);
                unsigned int v54 = objc_msgSend_map(v51, v52, v53);

                uint64_t v42 = objc_msgSend_bytes(v54, v55, v56);
                uint64_t v59 = objc_msgSend_topology(v27, v57, v58);
                uint64_t v62 = objc_msgSend_faceCount(v59, v60, v61);

LABEL_20:
                uint64_t v63 = objc_msgSend_indexCount(v27, v40, v41);
                uint64_t v66 = objc_msgSend_indexType(v27, v64, v65);
                uint64_t v69 = objc_msgSend_geometryType(v27, v67, v68);
                sub_20B1A4AFC(__p, v92, v63, v42, v62, v66, v69, 2);

                goto LABEL_21;
              }
LABEL_18:
              uint64_t v42 = 0;
            }
            unsigned int v54 = 0;
            uint64_t v62 = 0;
            goto LABEL_20;
          }
LABEL_21:
          if (objc_msgSend_indexCount(v27, v35, v36)) {
            operator new();
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }

          a2 = v91;
        }
        uint64_t v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v25, (uint64_t)&v101, v110, 16);
        if (!v88)
        {
LABEL_27:

          goto LABEL_28;
        }
      }
    }
  }
  else
  {
LABEL_28:
    uint64_t v70 = objc_msgSend_children(v85, v17, v18);
    uint64_t v71 = v70;
    if (v70)
    {
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      id v72 = v70;
      uint64_t v74 = objc_msgSend_countByEnumeratingWithState_objects_count_(v72, v73, (uint64_t)&v97, v109, 16);
      if (v74)
      {
        uint64_t v75 = *(void *)v98;
        do
        {
          for (uint64_t j = 0; j != v74; ++j)
          {
            if (*(void *)v98 != v75) {
              objc_enumerationMutation(v72);
            }
            uint64_t v77 = *(void *)(*((void *)&v97 + 1) + 8 * j);
            float32x4_t v111 = 0uLL;
            v112.i64[0] = 0;
            sub_20B125B38(&v111, v77, (__n128)a3, (__n128)a4, (__n128)a5, (__n128)a6);
            uint64_t v78 = v112.i64[0];
            if (v112.i64[0])
            {
              float32x4_t v79 = v111;
              uint64_t v80 = *(void *)v111.i64[1];
              *(void *)(v80 + 8) = *(void *)(v111.i64[0] + 8);
              **(void **)(v79.i64[0] + 8) = v80;
              uint64_t v81 = *a2;
              *(void *)(v81 + 8) = v79.i64[1];
              *(void *)v79.i64[1] = v81;
              *a2 = v79.i64[0];
              *(void *)(v79.i64[0] + 8) = a2;
              a2[2] += v78;
              v112.i64[0] = 0;
            }
            sub_20B07F6E8(&v111);
          }
          uint64_t v74 = objc_msgSend_countByEnumeratingWithState_objects_count_(v72, v82, (uint64_t)&v97, v109, 16);
        }
        while (v74);
      }
    }
  }
}

void sub_20B12617C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  sub_20B07F6E8(v45);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1262D4(float32x4_t ***a1)
{
  uint64_t v57 = 1065353216;
  long long v55 = 0u;
  long long v56 = 0u;
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    do
    {
      float v3 = *v1;
      long long v52 = *v1 + 4;
      unint64_t v4 = sub_20B12BB4C((uint64_t)&v55, v52, (uint64_t)&unk_20B1E7420, (_OWORD **)&v52);
      float v5 = operator new(0x18uLL);
      v5[2] = v3;
      uint64_t v6 = v4[2].i64[0];
      v4 += 2;
      *float v5 = v6;
      v5[1] = v4;
      *(void *)(v6 + 8) = v5;
      v4->i64[0] = (uint64_t)v5;
      ++v4[1].i64[0];
      long long v52 = v3 + 5;
      float v7 = sub_20B12BB4C((uint64_t)&v55, v3 + 5, (uint64_t)&unk_20B1E7420, (_OWORD **)&v52);
      uint64_t v8 = operator new(0x18uLL);
      _OWORD v8[2] = v3;
      uint64_t v9 = v7[2].i64[0];
      v7 += 2;
      *uint64_t v8 = v9;
      v8[1] = v7;
      *(void *)(v9 + 8) = v8;
      v7->i64[0] = (uint64_t)v8;
      ++v7[1].i64[0];
      long long v52 = v3 + 6;
      double v10 = sub_20B12BB4C((uint64_t)&v55, v3 + 6, (uint64_t)&unk_20B1E7420, (_OWORD **)&v52);
      uint64_t v11 = operator new(0x18uLL);
      v11[2] = v3;
      uint64_t v12 = v10[2].i64[0];
      v10 += 2;
      *uint64_t v11 = v12;
      v11[1] = v10;
      *(void *)(v12 + 8) = v11;
      v10->i64[0] = (uint64_t)v11;
      ++v10[1].i64[0];
      ++v1;
    }
    while (v1 != v2);
    long long v13 = (float32x4_t *)v56;
    if ((void)v56)
    {
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v43 = _Q0;
      do
      {
        float32x4_t v46 = v13[1];
        long long v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        sub_20B12BE48(&v52, (uint64_t)&v13[2]);
        while (v54)
        {
          uint64_t v19 = v53;
          uint64_t v20 = *(void *)(v53 + 16);
          float32x4_t v21 = vsubq_f32(*(float32x4_t *)(v20 + 64), v46);
          int32x4_t v22 = (int32x4_t)vmulq_f32(v21, v21);
          if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1)), (float32x4_t)vdupq_laneq_s32(v22, 2)).f32[0]) >= 0.000001)
          {
            float32x4_t v24 = vsubq_f32(*(float32x4_t *)(v20 + 80), v46);
            int32x4_t v25 = (int32x4_t)vmulq_f32(v24, v24);
            if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)), (float32x4_t)vdupq_laneq_s32(v25, 2)).f32[0]) >= 0.000001)uint64_t v23 = (float32x4_t *)(v20 + 240); {
            else
            }
              uint64_t v23 = (float32x4_t *)(v20 + 224);
          }
          else
          {
            uint64_t v23 = (float32x4_t *)(v20 + 208);
          }
          float32x4_t v47 = *v23;
          uint64_t v49 = &v49;
          uint64_t v50 = &v49;
          unint64_t v51 = 0;
          uint64_t v26 = operator new(0x18uLL);
          v26[1] = &v49;
          _OWORD v26[2] = v20;
          *uint64_t v26 = &v49;
          uint64_t v49 = v26;
          uint64_t v50 = v26;
          unint64_t v51 = 1;
          if ((float32x4_t **)v19 == &v52) {
            goto LABEL_24;
          }
          do
          {
            uint64_t v28 = *(void *)(v19 + 16);
            if (v28 != v20)
            {
              float32x4_t v29 = vsubq_f32(*(float32x4_t *)(v28 + 64), v46);
              int32x4_t v30 = (int32x4_t)vmulq_f32(v29, v29);
              if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)), (float32x4_t)vdupq_laneq_s32(v30, 2)).f32[0]) >= 0.000001)
              {
                float32x4_t v32 = vsubq_f32(*(float32x4_t *)(v28 + 80), v46);
                int32x4_t v33 = (int32x4_t)vmulq_f32(v32, v32);
                long long v31 = (float32x4_t *)(sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 1)), (float32x4_t)vdupq_laneq_s32(v33, 2)).f32[0]) >= 0.000001? v28 + 240: v28 + 224);
              }
              else
              {
                long long v31 = (float32x4_t *)(v28 + 208);
              }
              float32x4_t v44 = *v31;
              __n128 v45 = sub_20B0C0304((__n128 *)v20);
              int32x4_t v27 = (int32x4_t)vmulq_f32((float32x4_t)sub_20B0C0304((__n128 *)v28), (float32x4_t)v45);
              v27.i64[0] = vaddq_f32(vaddq_f32((float32x4_t)v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 1)), (float32x4_t)vdupq_laneq_s32(v27, 2)).u64[0];
              if (*(float *)v27.i32 > 0.75)
              {
                uint64_t v34 = operator new(0x18uLL);
                v34[1] = &v49;
                v34[2] = v28;
                uint64_t v35 = v49;
                *uint64_t v34 = v49;
                v35[1] = v34;
                uint64_t v49 = v34;
                ++v51;
                int32x4_t v27 = (int32x4_t)vaddq_f32(v44, v47);
                float32x4_t v47 = (float32x4_t)v27;
              }
            }
            uint64_t v19 = *(void *)(v19 + 8);
          }
          while ((float32x4_t **)v19 != &v52);
          uint64_t v26 = v50;
          if (v50 != &v49)
          {
            *(float *)v27.i32 = (float)v51;
            float32x4_t v47 = vmulq_f32(v47, vdivq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 0)));
            do
            {
LABEL_24:
              uint64_t v36 = (float32x4_t *)v26[2];
              uint64_t v48 = v36;
              float32x4_t v37 = vsubq_f32(v36[4], v46);
              int32x4_t v38 = (int32x4_t)vmulq_f32(v37, v37);
              if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 1)), (float32x4_t)vdupq_laneq_s32(v38, 2)).f32[0]) >= 0.000001)
              {
                float32x4_t v40 = vsubq_f32(v36[5], v46);
                int32x4_t v41 = (int32x4_t)vmulq_f32(v40, v40);
                if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.i8, 1)), (float32x4_t)vdupq_laneq_s32(v41, 2)).f32[0]) >= 0.000001)uint64_t v39 = v36 + 15; {
                else
                }
                  uint64_t v39 = v36 + 14;
              }
              else
              {
                uint64_t v39 = v36 + 13;
              }
              *uint64_t v39 = v47;
              sub_20B124454((uint64_t)&v52, &v48);
              uint64_t v26 = (void *)v26[1];
            }
            while (v26 != &v49);
          }
          sub_20B07F6E8(&v49);
        }
        sub_20B07F6E8(&v52);
        long long v13 = (float32x4_t *)v13->i64[0];
      }
      while (v13);
    }
  }
  return sub_20B12BACC((uint64_t)&v55);
}

void sub_20B1266EC(_Unwind_Exception *a1)
{
  sub_20B12BACC(v1 - 128);
  _Unwind_Resume(a1);
}

void *sub_20B126724@<X0>(void *a1@<X0>, int *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>, __n128 a5@<Q0>)
{
  if (*(void *)(a3 + 16))
  {
    for (uint64_t i = *(void *)(a3 + 8); i != a3; uint64_t i = *(void *)(i + 8))
    {
      double v10 = *(int8x16_t **)(i + 16);
      *(_OWORD *)&v83[0].__locale_ = 0u;
      long long v84 = 0u;
      sub_20B0BFA44((int8x16_t *)v83, v10[4], v10[5]);
      memset(v82, 0, sizeof(v82));
      sub_20B0BFA44(v82, v10[4], v10[6]);
      memset(v81, 0, sizeof(v81));
      sub_20B0BFA44(v81, v10[5], v10[6]);
      v85[0] = (float32x4_t *)v83;
      uint64_t v11 = sub_20B12BEE4((uint64_t)(a1 + 15), (float32x4_t *)v83, (uint64_t)&unk_20B1E7420, v85);
      uint64_t v12 = (int8x16_t **)v11[3].i64[1];
      unint64_t v13 = v11[4].u64[0];
      if ((unint64_t)v12 >= v13)
      {
        uint64_t v15 = v11[3].i64[0];
        uint64_t v16 = ((uint64_t)v12 - v15) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          goto LABEL_60;
        }
        uint64_t v17 = v13 - v15;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          uint64_t v20 = (char *)sub_20B0602EC((uint64_t)&v11[4], v19);
        }
        else {
          uint64_t v20 = 0;
        }
        float32x4_t v21 = (int8x16_t **)&v20[8 * v16];
        *float32x4_t v21 = v10;
        long long v14 = v21 + 1;
        uint64_t v23 = (char *)v11[3].i64[0];
        int32x4_t v22 = (char *)v11[3].i64[1];
        if (v22 != v23)
        {
          do
          {
            float32x4_t v24 = (int8x16_t *)*((void *)v22 - 1);
            v22 -= 8;
            *--float32x4_t v21 = v24;
          }
          while (v22 != v23);
          int32x4_t v22 = (char *)v11[3].i64[0];
        }
        v11[3].i64[0] = (uint64_t)v21;
        v11[3].i64[1] = (uint64_t)v14;
        v11[4].i64[0] = (uint64_t)&v20[8 * v19];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *uint64_t v12 = v10;
        long long v14 = v12 + 1;
      }
      v11[3].i64[1] = (uint64_t)v14;
      v85[0] = (float32x4_t *)v82;
      int32x4_t v25 = sub_20B12BEE4((uint64_t)(a1 + 15), (float32x4_t *)v82, (uint64_t)&unk_20B1E7420, v85);
      uint64_t v26 = (int8x16_t **)v25[3].i64[1];
      unint64_t v27 = v25[4].u64[0];
      if ((unint64_t)v26 >= v27)
      {
        uint64_t v29 = v25[3].i64[0];
        uint64_t v30 = ((uint64_t)v26 - v29) >> 3;
        if ((unint64_t)(v30 + 1) >> 61) {
          goto LABEL_60;
        }
        uint64_t v31 = v27 - v29;
        uint64_t v32 = v31 >> 2;
        if (v31 >> 2 <= (unint64_t)(v30 + 1)) {
          uint64_t v32 = v30 + 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        if (v33) {
          uint64_t v34 = (char *)sub_20B0602EC((uint64_t)&v25[4], v33);
        }
        else {
          uint64_t v34 = 0;
        }
        uint64_t v35 = (int8x16_t **)&v34[8 * v30];
        *uint64_t v35 = v10;
        uint64_t v28 = v35 + 1;
        float32x4_t v37 = (char *)v25[3].i64[0];
        uint64_t v36 = (char *)v25[3].i64[1];
        if (v36 != v37)
        {
          do
          {
            int32x4_t v38 = (int8x16_t *)*((void *)v36 - 1);
            v36 -= 8;
            *--uint64_t v35 = v38;
          }
          while (v36 != v37);
          uint64_t v36 = (char *)v25[3].i64[0];
        }
        v25[3].i64[0] = (uint64_t)v35;
        v25[3].i64[1] = (uint64_t)v28;
        v25[4].i64[0] = (uint64_t)&v34[8 * v33];
        if (v36) {
          operator delete(v36);
        }
      }
      else
      {
        *uint64_t v26 = v10;
        uint64_t v28 = v26 + 1;
      }
      v25[3].i64[1] = (uint64_t)v28;
      v85[0] = (float32x4_t *)v81;
      uint64_t v39 = sub_20B12BEE4((uint64_t)(a1 + 15), (float32x4_t *)v81, (uint64_t)&unk_20B1E7420, v85);
      float32x4_t v40 = (int8x16_t **)v39[3].i64[1];
      unint64_t v41 = v39[4].u64[0];
      if ((unint64_t)v40 >= v41)
      {
        uint64_t v43 = v39[3].i64[0];
        uint64_t v44 = ((uint64_t)v40 - v43) >> 3;
        if ((unint64_t)(v44 + 1) >> 61) {
LABEL_60:
        }
          sub_20B05D0BC();
        uint64_t v45 = v41 - v43;
        uint64_t v46 = v45 >> 2;
        if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
          uint64_t v46 = v44 + 1;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v47 = v46;
        }
        if (v47) {
          uint64_t v48 = (char *)sub_20B0602EC((uint64_t)&v39[4], v47);
        }
        else {
          uint64_t v48 = 0;
        }
        uint64_t v49 = (int8x16_t **)&v48[8 * v44];
        *uint64_t v49 = v10;
        uint64_t v42 = v49 + 1;
        unint64_t v51 = (char *)v39[3].i64[0];
        uint64_t v50 = (char *)v39[3].i64[1];
        if (v50 != v51)
        {
          do
          {
            long long v52 = (int8x16_t *)*((void *)v50 - 1);
            v50 -= 8;
            *--uint64_t v49 = v52;
          }
          while (v50 != v51);
          uint64_t v50 = (char *)v39[3].i64[0];
        }
        v39[3].i64[0] = (uint64_t)v49;
        v39[3].i64[1] = (uint64_t)v42;
        v39[4].i64[0] = (uint64_t)&v48[8 * v47];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        *float32x4_t v40 = v10;
        uint64_t v42 = v40 + 1;
      }
      v39[3].i64[1] = (uint64_t)v42;
    }
    sub_20B1240D8(a1, a3, a3, a5);
    if (a1[10] == a1[9])
    {
      double result = sub_20B07F8E0(v83, "Unable to pack a map for AO baking");
      *a4 = 0;
      *(_OWORD *)(a4 + 1) = *(_OWORD *)&v83[0].__locale_;
      a4[3] = v84;
    }
    else
    {
      sub_20B124C78(a1);
      sub_20B124524((uint64_t)a1);
      if (*a2 <= 4096)
      {
        __asm { FMOV            V0.2S, #1.0 }
        sub_20B0BF33C(*a2);
        operator new();
      }
      long long v55 = objc_msgSend_currentProgress(MEMORY[0x263F08AB8], v53, v54);
      uint64_t v58 = objc_msgSend_completedUnitCount(v55, v56, v57);
      objc_msgSend_setCompletedUnitCount_(v55, v59, v58 + 4);

      sub_20B07FC90(MEMORY[0x263F8C100], (uint64_t)"Fraction completed : ", 21);
      uint64_t v62 = objc_msgSend_currentProgress(MEMORY[0x263F08AB8], v60, v61);
      objc_msgSend_fractionCompleted(v62, v63, v64);
      uint64_t v65 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(void *)(*v65 - 24)));
      uint64_t v66 = std::locale::use_facet(v83, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
      std::locale::~locale(v83);
      std::ostream::put();
      std::ostream::flush();

      int v67 = *a2;
      uint64_t v68 = a4 + 1;
      if (v67 <= 4096)
      {
        sub_20B174D54(0);
        *(float32x2_t *)&double v75 = sub_20B174D04(0);
        sub_20B174BDC(0, v75, v76, v77, v78, v79);
        *a4 = 0;
        return sub_20B07F8E0(v68, "");
      }
      else
      {
        double result = sub_20B07F8E0(v83, "Too many triangles to pack in a maximum size texture");
        *a4 = 0;
        *(_OWORD *)uint64_t v68 = *(_OWORD *)&v83[0].__locale_;
        a4[3] = v84;
      }
    }
  }
  else
  {
    double result = sub_20B07F8E0(v83, "No triangles to map");
    *a4 = 0;
    *(_OWORD *)(a4 + 1) = *(_OWORD *)&v83[0].__locale_;
    a4[3] = v84;
  }
  return result;
}

void sub_20B12704C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
}

BOOL sub_20B1270A4(uint64_t a1, uint64_t a2)
{
  float v3 = sub_20B173BD4(a1);
  return v3 > sub_20B173BD4(a2);
}

uint64_t sub_20B1270E8(float a1)
{
  return (int)(a1 * 255.0);
}

void sub_20B127100(void *a1, void *a2, void *a3, void *a4, const void **a5, uint64_t a6)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  uint64_t v95 = v11;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_60;
  }
  id v17 = v11;
  id v99 = v17;
  if (v12)
  {
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    uint64_t v20 = objc_msgSend_submeshes(v17, v18, v19);
    uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v21, (uint64_t)&v111, v116, 16);
    if (v24)
    {
      uint64_t v25 = *(void *)v112;
      do
      {
        for (uint64_t i = 0; i != v24; ++i)
        {
          if (*(void *)v112 != v25) {
            objc_enumerationMutation(v20);
          }
          unint64_t v27 = objc_msgSend_material(*(void **)(*((void *)&v111 + 1) + 8 * i), v22, v23);
          objc_msgSend_setProperty_(v27, v28, (uint64_t)v12);
        }
        uint64_t v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v20, v22, (uint64_t)&v111, v116, 16);
      }
      while (v24);
    }

    id v17 = v99;
  }
  uint64_t v29 = objc_msgSend_vertexAttributeDataForAttributeNamed_(v17, v18, (uint64_t)v14);
  uint64_t v32 = v29;
  if (v29)
  {
    if (objc_msgSend_format(v29, v30, v31) == 786435)
    {
      uint64_t v33 = 0;
      char v97 = a6;
      goto LABEL_23;
    }
    uint64_t v33 = objc_msgSend_format(v32, v30, v31);
    uint64_t v35 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v99, v34, (uint64_t)v14, v33);

    uint64_t v32 = (void *)v35;
  }
  else
  {
    uint64_t v33 = 0;
  }
  if (v32) {
    char v36 = a6;
  }
  else {
    char v36 = 0;
  }
  char v97 = v36;
  if (!v32 && a6)
  {
    objc_msgSend_addAttributeWithName_format_(v99, v30, (uint64_t)v14, 786435);
    uint64_t v32 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v99, v37, (uint64_t)v14, 786435);
    char v97 = 1;
  }
  if (v32)
  {
LABEL_23:
    int v39 = objc_msgSend_format(v32, v30, v31) & 0x1F;
    if (!v39) {
      goto LABEL_36;
    }
    uint64_t v40 = objc_msgSend_format(v32, v30, v38) & 0xFFFF0000;
    if ((int)v40 >= 720896)
    {
      if (v40 == 720896)
      {
        memset(__p, 0, sizeof(__p));
        sub_20B0C0658(__p, *a5, (uint64_t)a5[1], ((unsigned char *)a5[1] - (unsigned char *)*a5) >> 3);
        sub_20B127BE8(v32, (int ***)__p, v99, v39, sub_20B1AB8C4);
        unint64_t v41 = (int **)__p[0];
        if (!__p[0]) {
          goto LABEL_36;
        }
        uint64_t v42 = (int ***)__p;
        goto LABEL_35;
      }
      if (v40 == 786432)
      {
        memset(v110, 0, sizeof(v110));
        sub_20B0C0658(v110, *a5, (uint64_t)a5[1], ((unsigned char *)a5[1] - (unsigned char *)*a5) >> 3);
        sub_20B1278D0(v32, v110, v99, v39, (float (*)(float))nullsub_10);
        unint64_t v41 = v110[0];
        if (v110[0])
        {
          uint64_t v42 = v110;
          goto LABEL_35;
        }
      }
    }
    else if (v40 == 0x10000 || v40 == 196608)
    {
      memset(v108, 0, sizeof(v108));
      sub_20B0C0658(v108, *a5, (uint64_t)a5[1], ((unsigned char *)a5[1] - (unsigned char *)*a5) >> 3);
      sub_20B127F00(v32, v108, v99, v39, sub_20B1270E8);
      unint64_t v41 = v108[0];
      if (v108[0])
      {
        uint64_t v42 = v108;
LABEL_35:
        v42[1] = v41;
        operator delete(v41);
      }
    }
LABEL_36:
    if (v33) {
      objc_msgSend_updateAttributeNamed_withData_(v99, v30, (uint64_t)v14, v32);
    }
  }
  uint64_t v43 = objc_msgSend_vertexAttributeDataForAttributeNamed_(v99, v30, (uint64_t)v13);
  uint64_t v46 = v43;
  if (!v43)
  {
    uint64_t v47 = 0;
    goto LABEL_43;
  }
  if (objc_msgSend_format(v43, v44, v45) != 786434)
  {
    uint64_t v47 = objc_msgSend_format(v46, v44, v45);
    uint64_t v49 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v99, v48, (uint64_t)v13, 786434);

    uint64_t v46 = (void *)v49;
LABEL_43:
    if (v46) {
      char v50 = 1;
    }
    else {
      char v50 = v97;
    }
    if ((v50 & 1) == 0)
    {
      objc_msgSend_addAttributeWithName_format_(v99, v44, (uint64_t)v13, 786434);
      uint64_t v46 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v99, v51, (uint64_t)v13, 786434);
    }
    goto LABEL_48;
  }
  uint64_t v47 = 0;
LABEL_48:
  unint64_t v94 = v46;
  unsigned int v52 = objc_msgSend_bufferSize(v46, v44, v45);
  int v93 = objc_msgSend_stride(v46, v53, v54);
  if (v46)
  {
    uint64_t v90 = v47;
    uint64_t v91 = v32;
    uint64_t v57 = (int **)*a5;
    uint64_t v96 = (int **)a5[1];
    if (*a5 != v96)
    {
      int32x4_t v92 = vdupq_n_s32(v52);
      do
      {
        long long v98 = v57;
        uint64_t v58 = *v57;
        int v59 = (*v57)[1];
        unint64_t v60 = **v57;
        int v61 = (*v57)[2];
        if (objc_msgSend_vertexCount(v99, v55, v56, v90, v91) > v60)
        {
          unint64_t v62 = v58[1];
          if (objc_msgSend_vertexCount(v99, v55, v56) > v62)
          {
            unint64_t v63 = v58[2];
            if (objc_msgSend_vertexCount(v99, v55, v56) > v63)
            {
              v64.i32[0] = v60 * v93;
              v64.i32[1] = v59 * v93;
              v64.i32[2] = v61 * v93;
              uint32x4_t v65 = (uint32x4_t)vcgeq_s32(v64, v92);
              v65.i32[3] = v65.i32[2];
              if ((vmaxvq_u32(v65) & 0x80000000) == 0)
              {
                uint64_t v66 = objc_msgSend_dataStart(v94, v55, v56);
                uint64_t v69 = (_DWORD *)(v66 + objc_msgSend_stride(v94, v67, v68) * *v58);
                *uint64_t v69 = *((void *)v58 + 2);
                v69[1] = v58[5];
                uint64_t v72 = objc_msgSend_dataStart(v94, v70, v71);
                double v75 = (_DWORD *)(v72 + objc_msgSend_stride(v94, v73, v74) * v58[1]);
                *double v75 = *((void *)v58 + 3);
                v75[1] = v58[7];
                uint64_t v78 = objc_msgSend_dataStart(v94, v76, v77);
                uint64_t v81 = (_DWORD *)(v78 + objc_msgSend_stride(v94, v79, v80) * v58[2]);
                _DWORD *v81 = *((void *)v58 + 4);
                v81[1] = v58[9];
              }
            }
          }
        }
        uint64_t v57 = v98 + 1;
      }
      while (v98 + 1 != v96);
    }
    uint64_t v32 = v91;
    uint64_t v46 = v94;
    if (v90) {
      objc_msgSend_updateAttributeNamed_withData_(v99, v55, (uint64_t)v13, v94);
    }
  }

LABEL_60:
  id v82 = objc_msgSend_children(v95, v15, v16, v90, v91);
  if (v82)
  {
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    id v100 = v82;
    id v83 = v82;
    uint64_t v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v84, (uint64_t)&v104, v115, 16);
    if (v85)
    {
      uint64_t v86 = *(void *)v105;
      do
      {
        for (uint64_t j = 0; j != v85; ++j)
        {
          if (*(void *)v105 != v86) {
            objc_enumerationMutation(v83);
          }
          uint64_t v88 = *(void *)(*((void *)&v104 + 1) + 8 * j);
          long long v102 = 0;
          uint64_t v103 = 0;
          long long v101 = 0;
          sub_20B0C0658(&v101, *a5, (uint64_t)a5[1], ((unsigned char *)a5[1] - (unsigned char *)*a5) >> 3);
          sub_20B127100(v88, v12, v13, v14, &v101, a6);
          if (v101)
          {
            long long v102 = v101;
            operator delete(v101);
          }
        }
        uint64_t v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v89, (uint64_t)&v104, v115, 16);
      }
      while (v85);
    }

    id v82 = v100;
  }
}

void sub_20B1277B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B1278D0(void *a1, int ***a2, void *a3, int a4, float (*a5)(float))
{
  id v64 = a1;
  id v8 = a3;
  unsigned int v11 = objc_msgSend_bufferSize(v64, v9, v10);
  int v14 = objc_msgSend_stride(v64, v12, v13);
  id v17 = *a2;
  uint64_t v18 = a2[1];
  if (*a2 != v18)
  {
    int v19 = v14;
    int32x4_t v59 = vdupq_n_s32(v11);
    do
    {
      uint64_t v20 = (__n128 *)*v17;
      int v21 = (*v17)[1];
      unint64_t v22 = **v17;
      int v23 = (*v17)[2];
      if (objc_msgSend_vertexCount(v8, v15, v16, *(_OWORD *)&v59) > v22)
      {
        unint64_t v24 = v20->n128_i32[1];
        if (objc_msgSend_vertexCount(v8, v15, v16) > v24)
        {
          unint64_t v25 = v20->n128_i32[2];
          if (objc_msgSend_vertexCount(v8, v15, v16) > v25)
          {
            v26.i32[0] = v22 * v19;
            v26.i32[1] = v21 * v19;
            v26.i32[2] = v23 * v19;
            uint32x4_t v27 = (uint32x4_t)vcgeq_s32(v26, v59);
            v27.i32[3] = v27.i32[2];
            if ((vmaxvq_u32(v27) & 0x80000000) == 0)
            {
              uint64_t v28 = objc_msgSend_dataStart(v64, v15, v16);
              uint64_t v31 = objc_msgSend_stride(v64, v29, v30);
              uint64_t v32 = v20->n128_i32[0];
              __n128 v60 = v20[13];
              uint64_t v35 = objc_msgSend_format(v64, v33, v34);
              if (a4 >= 1)
              {
                uint64_t v38 = (float *)(v28 + v31 * v32);
                *uint64_t v38 = ((float (*)(uint64_t, __n128))a5)(v35, v60);
                if (a4 != 1)
                {
                  v38[1] = a5(v60.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v38[2] = a5(v60.n128_f32[2]);
                    if (a4 != 3) {
                      v38[3] = a5(1.0);
                    }
                  }
                }
              }
              uint64_t v39 = objc_msgSend_dataStart(v64, v36, v37);
              uint64_t v42 = objc_msgSend_stride(v64, v40, v41);
              uint64_t v43 = v20->n128_i32[1];
              __n128 v61 = v20[14];
              uint64_t v46 = objc_msgSend_format(v64, v44, v45);
              if (a4 >= 1)
              {
                uint64_t v49 = (float *)(v39 + v42 * v43);
                *uint64_t v49 = ((float (*)(uint64_t, __n128))a5)(v46, v61);
                if (a4 != 1)
                {
                  v49[1] = a5(v61.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v49[2] = a5(v61.n128_f32[2]);
                    if (a4 != 3) {
                      v49[3] = a5(1.0);
                    }
                  }
                }
              }
              uint64_t v50 = objc_msgSend_dataStart(v64, v47, v48);
              uint64_t v53 = objc_msgSend_stride(v64, v51, v52);
              uint64_t v54 = v20->n128_i32[2];
              __n128 v62 = v20[15];
              uint64_t v57 = objc_msgSend_format(v64, v55, v56);
              if (a4 >= 1)
              {
                uint64_t v58 = (float *)(v50 + v53 * v54);
                *uint64_t v58 = ((float (*)(uint64_t, __n128))a5)(v57, v62);
                if (a4 != 1)
                {
                  v58[1] = a5(v62.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v58[2] = a5(v62.n128_f32[2]);
                    if (a4 != 3) {
                      v58[3] = a5(1.0);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
}

void sub_20B127BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_20B127BE8(void *a1, int ***a2, void *a3, int a4, uint64_t (*a5)(float))
{
  id v64 = a1;
  id v8 = a3;
  unsigned int v11 = objc_msgSend_bufferSize(v64, v9, v10);
  int v14 = objc_msgSend_stride(v64, v12, v13);
  id v17 = *a2;
  uint64_t v18 = a2[1];
  if (*a2 != v18)
  {
    int v19 = v14;
    int32x4_t v59 = vdupq_n_s32(v11);
    do
    {
      uint64_t v20 = (__n128 *)*v17;
      int v21 = (*v17)[1];
      unint64_t v22 = **v17;
      int v23 = (*v17)[2];
      if (objc_msgSend_vertexCount(v8, v15, v16, *(_OWORD *)&v59) > v22)
      {
        unint64_t v24 = v20->n128_i32[1];
        if (objc_msgSend_vertexCount(v8, v15, v16) > v24)
        {
          unint64_t v25 = v20->n128_i32[2];
          if (objc_msgSend_vertexCount(v8, v15, v16) > v25)
          {
            v26.i32[0] = v22 * v19;
            v26.i32[1] = v21 * v19;
            v26.i32[2] = v23 * v19;
            uint32x4_t v27 = (uint32x4_t)vcgeq_s32(v26, v59);
            v27.i32[3] = v27.i32[2];
            if ((vmaxvq_u32(v27) & 0x80000000) == 0)
            {
              uint64_t v28 = objc_msgSend_dataStart(v64, v15, v16);
              uint64_t v31 = objc_msgSend_stride(v64, v29, v30);
              uint64_t v32 = v20->n128_i32[0];
              __n128 v60 = v20[13];
              uint64_t v35 = objc_msgSend_format(v64, v33, v34);
              if (a4 >= 1)
              {
                uint64_t v38 = (_WORD *)(v28 + v31 * v32);
                *uint64_t v38 = ((uint64_t (*)(uint64_t, __n128))a5)(v35, v60);
                if (a4 != 1)
                {
                  v38[1] = a5(v60.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v38[2] = a5(v60.n128_f32[2]);
                    if (a4 != 3) {
                      v38[3] = a5(1.0);
                    }
                  }
                }
              }
              uint64_t v39 = objc_msgSend_dataStart(v64, v36, v37);
              uint64_t v42 = objc_msgSend_stride(v64, v40, v41);
              uint64_t v43 = v20->n128_i32[1];
              __n128 v61 = v20[14];
              uint64_t v46 = objc_msgSend_format(v64, v44, v45);
              if (a4 >= 1)
              {
                uint64_t v49 = (_WORD *)(v39 + v42 * v43);
                *uint64_t v49 = ((uint64_t (*)(uint64_t, __n128))a5)(v46, v61);
                if (a4 != 1)
                {
                  v49[1] = a5(v61.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v49[2] = a5(v61.n128_f32[2]);
                    if (a4 != 3) {
                      v49[3] = a5(1.0);
                    }
                  }
                }
              }
              uint64_t v50 = objc_msgSend_dataStart(v64, v47, v48);
              uint64_t v53 = objc_msgSend_stride(v64, v51, v52);
              uint64_t v54 = v20->n128_i32[2];
              __n128 v62 = v20[15];
              uint64_t v57 = objc_msgSend_format(v64, v55, v56);
              if (a4 >= 1)
              {
                uint64_t v58 = (_WORD *)(v50 + v53 * v54);
                *uint64_t v58 = ((uint64_t (*)(uint64_t, __n128))a5)(v57, v62);
                if (a4 != 1)
                {
                  v58[1] = a5(v62.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v58[2] = a5(v62.n128_f32[2]);
                    if (a4 != 3) {
                      v58[3] = a5(1.0);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
}

void sub_20B127EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_20B127F00(void *a1, int ***a2, void *a3, int a4, uint64_t (*a5)(float))
{
  id v64 = a1;
  id v8 = a3;
  unsigned int v11 = objc_msgSend_bufferSize(v64, v9, v10);
  int v14 = objc_msgSend_stride(v64, v12, v13);
  id v17 = *a2;
  uint64_t v18 = a2[1];
  if (*a2 != v18)
  {
    int v19 = v14;
    int32x4_t v59 = vdupq_n_s32(v11);
    do
    {
      uint64_t v20 = (__n128 *)*v17;
      int v21 = (*v17)[1];
      unint64_t v22 = **v17;
      int v23 = (*v17)[2];
      if (objc_msgSend_vertexCount(v8, v15, v16, *(_OWORD *)&v59) > v22)
      {
        unint64_t v24 = v20->n128_i32[1];
        if (objc_msgSend_vertexCount(v8, v15, v16) > v24)
        {
          unint64_t v25 = v20->n128_i32[2];
          if (objc_msgSend_vertexCount(v8, v15, v16) > v25)
          {
            v26.i32[0] = v22 * v19;
            v26.i32[1] = v21 * v19;
            v26.i32[2] = v23 * v19;
            uint32x4_t v27 = (uint32x4_t)vcgeq_s32(v26, v59);
            v27.i32[3] = v27.i32[2];
            if ((vmaxvq_u32(v27) & 0x80000000) == 0)
            {
              uint64_t v28 = objc_msgSend_dataStart(v64, v15, v16);
              uint64_t v31 = objc_msgSend_stride(v64, v29, v30);
              uint64_t v32 = v20->n128_i32[0];
              __n128 v60 = v20[13];
              uint64_t v35 = objc_msgSend_format(v64, v33, v34);
              if (a4 >= 1)
              {
                uint64_t v38 = (unsigned char *)(v28 + v31 * v32);
                *uint64_t v38 = ((uint64_t (*)(uint64_t, __n128))a5)(v35, v60);
                if (a4 != 1)
                {
                  v38[1] = a5(v60.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v38[2] = a5(v60.n128_f32[2]);
                    if (a4 != 3) {
                      v38[3] = a5(1.0);
                    }
                  }
                }
              }
              uint64_t v39 = objc_msgSend_dataStart(v64, v36, v37);
              uint64_t v42 = objc_msgSend_stride(v64, v40, v41);
              uint64_t v43 = v20->n128_i32[1];
              __n128 v61 = v20[14];
              uint64_t v46 = objc_msgSend_format(v64, v44, v45);
              if (a4 >= 1)
              {
                uint64_t v49 = (unsigned char *)(v39 + v42 * v43);
                *uint64_t v49 = ((uint64_t (*)(uint64_t, __n128))a5)(v46, v61);
                if (a4 != 1)
                {
                  v49[1] = a5(v61.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v49[2] = a5(v61.n128_f32[2]);
                    if (a4 != 3) {
                      v49[3] = a5(1.0);
                    }
                  }
                }
              }
              uint64_t v50 = objc_msgSend_dataStart(v64, v47, v48);
              uint64_t v53 = objc_msgSend_stride(v64, v51, v52);
              uint64_t v54 = v20->n128_i32[2];
              __n128 v62 = v20[15];
              uint64_t v57 = objc_msgSend_format(v64, v55, v56);
              if (a4 >= 1)
              {
                uint64_t v58 = (unsigned char *)(v50 + v53 * v54);
                *uint64_t v58 = ((uint64_t (*)(uint64_t, __n128))a5)(v57, v62);
                if (a4 != 1)
                {
                  v58[1] = a5(v62.n128_f32[1]);
                  if (a4 >= 3)
                  {
                    v58[2] = a5(v62.n128_f32[2]);
                    if (a4 != 3) {
                      v58[3] = a5(1.0);
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v17;
    }
    while (v17 != v18);
  }
}

void sub_20B1281F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_20B128218(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::string __p = 0;
  sub_20B0C0658(&__p, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  sub_20B127100(v11, v12, v13, v14, (const void **)&__p, a6);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_20B1282D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_20B12830C(void *a1, void *a2, signed int a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a4;
  if (*a1 == a1[1])
  {
    id v17 = objc_alloc(MEMORY[0x263EFF990]);
    unsigned int v18 = a3 * a3;
    id v14 = objc_msgSend_initWithLength_(v17, v19, (a3 * a3));
    if (a3)
    {
      uint64_t v20 = 0;
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v18;
      }
      do
      {
        id v22 = v14;
        uint64_t v25 = objc_msgSend_bytes(v22, v23, v24);
        id v26 = v9;
        *(unsigned char *)(v25 + v20) = *(unsigned char *)(objc_msgSend_bytes(v26, v27, v28) + (4 * v20));
        ++v20;
      }
      while (v20 != v21);
    }
    uint64_t v29 = [MDLTexture alloc];
    id v30 = [NSString alloc];
    uint64_t v32 = objc_msgSend_initWithFormat_(v30, v31, @"$ao-%lu", a5);
    LOBYTE(v42) = 0;
    isCube = objc_msgSend_initWithData_topLeftOrigin_name_dimensions_rowStride_channelCount_channelEncoding_isCube_(v29, v33, (uint64_t)v14, 1, v32, a3, 1, 1, COERCE_DOUBLE(vdup_n_s32(a3)), v42);
  }
  else
  {
    id v11 = [MDLTexture alloc];
    id v12 = [NSString alloc];
    id v14 = objc_msgSend_initWithFormat_(v12, v13, @"$ao-%lu", a5);
    LOBYTE(v41) = 0;
    isCube = objc_msgSend_initWithData_topLeftOrigin_name_dimensions_rowStride_channelCount_channelEncoding_isCube_(v11, v15, (uint64_t)v9, 1, v14, 4 * a3, 4, 1, COERCE_DOUBLE(vdup_n_s32(a3)), v41);
  }

  uint64_t v34 = objc_opt_new();
  objc_msgSend_setTexture_(v34, v35, (uint64_t)isCube);
  char v36 = [MDLMaterialProperty alloc];
  uint64_t v38 = objc_msgSend_initWithName_semantic_(v36, v37, (uint64_t)v10, 22);
  objc_msgSend_setTextureSamplerValue_(v38, v39, (uint64_t)v34);

  return v38;
}

void sub_20B128504(_Unwind_Exception *a1)
{
  float v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20B128568(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  float v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t v4 = *v2;
      float v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_20B06C6F8(v4);
      if (v5) {
        sub_20B081CD8(v5);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_20B1286A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20B081CD8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1286C0(uint64_t a1, uint64_t **a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  long long v25 = 0uLL;
  if (a4)
  {
    sub_20B1250EC(64, 1, 1, &v26, *(__n128 *)(a3 + 64));
    id v8 = 0;
    id v9 = (_OWORD *)v26;
    std::string __p = (_OWORD *)v26;
    *((void *)&v25 + 1) = v27;
    id v10 = (_OWORD *)*((void *)&v26 + 1);
  }
  else
  {
    id v9 = sub_20B077E90((uint64_t)&v25 + 8, 1uLL);
    id v12 = &v9[v11];
    *id v9 = *(_OWORD *)(a3 + 16);
    id v10 = v9 + 1;
    id v8 = (char *)v25;
    if ((void)v25)
    {
      do
      {
        long long v13 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *--id v9 = v13;
      }
      while (v8);
      id v8 = 0;
    }
    std::string __p = v9;
    *((void *)&v25 + 1) = v12;
    if (v8) {
      operator delete(v8);
    }
  }
  if (v9 != v10)
  {
    __asm { FMOV            V8.2S, #1.0 }
    do
    {
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v38 = 0u;
      LODWORD(v38) = 2139095039;
      *(void *)&long long v45 = 0;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      *(void *)&long long v42 = 0;
      sub_20B128568((uint64_t)v8, a2);
      if ((void)v42)
      {
        long long v19 = *(_OWORD *)(a3 + 16);
        long long v26 = v43;
        long long v27 = v19;
        int v29 = v38;
        long long v30 = v39;
        long long v31 = v40;
        int v20 = *(_DWORD *)(a3 + 176) + 1;
        uint64_t v28 = *(void *)(a3 + 32);
        long long v32 = v41;
        uint64_t v33 = v42;
        long long v34 = v43;
        long long v35 = v44;
        uint64_t v36 = v45;
        int v37 = v20;
        unint64_t v21 = a5[1];
        if (v21 >= a5[2])
        {
          id v8 = (char *)sub_20B12C1B8(a5, &v26);
        }
        else
        {
          long long v22 = v26;
          long long v23 = v27;
          *(void *)(v21 + 32) = v28;
          *(_OWORD *)unint64_t v21 = v22;
          *(_OWORD *)(v21 + 16) = v23;
          *(_DWORD *)(v21 + 48) = v29;
          *(_OWORD *)(v21 + 64) = v30;
          *(_OWORD *)(v21 + 80) = v31;
          *(_OWORD *)(v21 + 96) = v32;
          *(void *)(v21 + 112) = v33;
          *(_OWORD *)(v21 + 128) = v34;
          *(_OWORD *)(v21 + 144) = v35;
          *(void *)(v21 + 160) = v36;
          *(_DWORD *)(v21 + 176) = v37;
          id v8 = (char *)(v21 + 192);
        }
        a5[1] = (uint64_t)v8;
      }
      ++v9;
    }
    while (v9 != v10);
    id v10 = __p;
  }
  if (v10) {
    operator delete(v10);
  }
}

void sub_20B1289A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1289D0(uint64_t *a1, uint64_t **a2)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v36 = 0;
  int v37 = 0;
  uint64_t v38 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    do
    {
      uint64_t v6 = *(void **)v4;
      if (*(_DWORD *)(*(void *)v4 + 24) == 3)
      {
        uint64_t v33 = 0;
        long long v34 = 0;
        uint64_t v35 = 0;
        sub_20B1250EC(128, 0, 1, &v33, (__n128)0);
        float v7 = v33;
        id v8 = v34;
        if (v33 != v34)
        {
          do
          {
            long long v32 = *v7;
            *(double *)&long long v9 = (*(double (**)(void *))(*v6 + 32))(v6);
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v62 = 0u;
            long long v63 = 0u;
            uint64_t v10 = v6[1];
            long long v62 = v9;
            long long v63 = v32;
            *(void *)&long long v64 = v10;
            LODWORD(v65) = 2139095039;
            long long v70 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            *(void *)&long long v69 = 0;
            unint64_t v11 = a1[21];
            if (v11 >= a1[22])
            {
              uint64_t v14 = sub_20B12C488(a1 + 20, &v62);
            }
            else
            {
              long long v12 = v62;
              long long v13 = v63;
              *(void *)(v11 + 32) = v64;
              *(_OWORD *)unint64_t v11 = v12;
              *(_OWORD *)(v11 + 16) = v13;
              *(_DWORD *)(v11 + 48) = v65;
              *(_OWORD *)(v11 + 64) = v66;
              *(_OWORD *)(v11 + 80) = v67;
              *(_OWORD *)(v11 + 96) = v68;
              *(void *)(v11 + 112) = v69;
              *(_OWORD *)(v11 + 128) = v70;
              *(_OWORD *)(v11 + 144) = v71;
              *(void *)(v11 + 160) = v72;
              *(_DWORD *)(v11 + 176) = v73;
              uint64_t v14 = v11 + 192;
            }
            a1[21] = v14;
            v51[0] = v62;
            v51[1] = v63;
            uint64_t v52 = v64;
            int v53 = v65;
            long long v54 = v66;
            long long v55 = v67;
            long long v56 = v68;
            uint64_t v57 = v69;
            long long v58 = v70;
            long long v59 = v71;
            uint64_t v60 = v72;
            int v61 = v73;
            sub_20B1286C0(v14, a2, (uint64_t)v51, 0, (uint64_t *)&v36);
            ++v7;
          }
          while (v7 != v8);
          float v7 = v33;
        }
        if (v7)
        {
          long long v34 = v7;
          operator delete(v7);
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
    uint64_t v15 = (uint64_t)v36;
    uint64_t v16 = v37;
  }
  id v17 = a1 + 20;
  unsigned int v18 = sub_20B12C644((uint64_t)(a1 + 20), (long long *)a1[21], v15, v16, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - v15) >> 6));
  long long v19 = v36;
  int v20 = v37;
  if (v36 != v37)
  {
    do
    {
      int v21 = *((_DWORD *)v19 + 12);
      long long v22 = v19[4];
      long long v23 = v19[5];
      long long v24 = v19[6];
      uint64_t v25 = *((void *)v19 + 14);
      long long v26 = v19[8];
      uint64_t v27 = *((void *)v19 + 18);
      uint64_t v28 = *((void *)v19 + 19);
      uint64_t v29 = *((void *)v19 + 20);
      int v30 = *((_DWORD *)v19 + 44);
      long long v31 = v19[1];
      v39[0] = *v19;
      v39[1] = v31;
      uint64_t v40 = *((void *)v19 + 4);
      int v41 = v21;
      long long v42 = v22;
      long long v43 = v23;
      long long v44 = v24;
      uint64_t v45 = v25;
      long long v46 = v26;
      uint64_t v47 = v27;
      uint64_t v48 = v28;
      uint64_t v49 = v29;
      int v50 = v30;
      sub_20B1286C0((uint64_t)v18, a2, (uint64_t)v39, 1, v17);
      v19 += 12;
    }
    while (v19 != v20);
    long long v19 = v36;
  }
  if (v19)
  {
    int v37 = v19;
    operator delete(v19);
  }
}

void sub_20B128CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B128D3C(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, int a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v57 = a3;
  id v54 = a4;
  id v55 = a5;
  int v72 = a6;
  uint64_t v15 = objc_msgSend_progressWithTotalUnitCount_(MEMORY[0x263F08AB8], v14, 70);
  objc_msgSend_setCancellable_(v15, v16, 1);
  objc_msgSend_setPausable_(v15, v17, 0);
  memset(v71, 0, sizeof(v71));
  long long v58 = v15;
  unint64_t v20 = objc_msgSend_count(v13, v18, v19);
  sub_20B1299E4((uint64_t *)v71, v20);
  long long v67 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  id v21 = v13;
  uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v22, (uint64_t)&v67, v73, 16);
  if (v23)
  {
    uint64_t v24 = *(void *)v68;
    do
    {
      for (uint64_t i = 0; i != v23; ++i)
      {
        if (*(void *)v68 != v24) {
          objc_enumerationMutation(v21);
        }
        v63[0] = 0;
        v63[0] = *(void *)(*((void *)&v67 + 1) + 8 * i);
        long long v60 = 0uLL;
        LODWORD(v59) = 6;
        sub_20B12CEAC(v63, (unsigned int *)&v59, &v60);
        sub_20B189694(v60);
        sub_20B129A78((uint64_t *)v71, &v60);
        if (*((void *)&v60 + 1)) {
          sub_20B081CD8(*((std::__shared_weak_count **)&v60 + 1));
        }
      }
      uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v21, v26, (uint64_t)&v67, v73, 16);
    }
    while (v23);
  }

  objc_msgSend_becomeCurrentWithPendingUnitCount_(v15, v27, 70);
  if (*a1 != a1[1]) {
    sub_20B1289D0(a1, v71);
  }
  id v56 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v65 = 0;
  uint64_t v64 = 0;
  uint64_t v66 = 0;
  sub_20B125B38(v57, &v64, *MEMORY[0x263EF89A8], *(float32x4_t *)(MEMORY[0x263EF89A8] + 16), *(float32x4_t *)(MEMORY[0x263EF89A8] + 32), *(float32x4_t *)(MEMORY[0x263EF89A8] + 48));
  if (v66)
  {
    sub_20B1247D8(v28, &v64);
    sub_20B124A24(&v64, (void **)&v60);
    uint64_t v29 = (void *)a1[6];
    if (v29)
    {
      a1[7] = (uint64_t)v29;
      operator delete(v29);
      a1[6] = 0;
      a1[7] = 0;
      a1[8] = 0;
    }
    *((_OWORD *)a1 + 3) = v60;
    a1[8] = v61;
    int v30 = v65;
    if (v65 != &v64)
    {
      long long v31 = (char **)(a1 + 3);
      long long v32 = a1 + 5;
      uint64_t v33 = (uint64_t *)a1[4];
      do
      {
        uint64_t v34 = v30[2];
        if ((unint64_t)v33 >= *v32)
        {
          uint64_t v35 = ((char *)v33 - *v31) >> 3;
          if ((unint64_t)(v35 + 1) >> 61) {
            sub_20B05D0BC();
          }
          uint64_t v36 = *v32 - (void)*v31;
          uint64_t v37 = v36 >> 2;
          if (v36 >> 2 <= (unint64_t)(v35 + 1)) {
            uint64_t v37 = v35 + 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38) {
            long long v39 = (char *)sub_20B0602EC((uint64_t)(a1 + 5), v38);
          }
          else {
            long long v39 = 0;
          }
          uint64_t v40 = (uint64_t *)&v39[8 * v35];
          *uint64_t v40 = v34;
          uint64_t v33 = v40 + 1;
          long long v42 = (char *)a1[3];
          int v41 = (char *)a1[4];
          if (v41 != v42)
          {
            do
            {
              uint64_t v43 = *((void *)v41 - 1);
              v41 -= 8;
              *--uint64_t v40 = v43;
            }
            while (v41 != v42);
            int v41 = *v31;
          }
          a1[3] = (uint64_t)v40;
          a1[4] = (uint64_t)v33;
          a1[5] = (uint64_t)&v39[8 * v38];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *v33++ = v34;
        }
        a1[4] = (uint64_t)v33;
        int v30 = (uint64_t *)v30[1];
      }
      while (v30 != &v64);
    }
    memset(v63, 0, 32);
    sub_20B126724(a1, &v72, (unint64_t)&v64, v63, (__n128)0);
    if (v63[0])
    {
      id v44 = objc_alloc(MEMORY[0x263EFF990]);
      id v53 = objc_msgSend_initWithLength_(v44, v45, (4 * v72 * v72));
      objc_msgSend_mutableBytes(v53, v46, v47);
      srand(0x1337u);
      dispatch_group_create();
      dispatch_get_global_queue(0, 0);
      objc_claimAutoreleasedReturnValue();
      objc_alloc_init(MEMORY[0x263F08958]);
      *(void *)&long long v60 = 0;
      *((void *)&v60 + 1) = &v60;
      uint64_t v61 = 0x3020000000;
      int v62 = 0;
      operator new();
    }
    if (v63[3] >= 0) {
      uint64_t v48 = &v63[1];
    }
    else {
      uint64_t v48 = (void *)v63[1];
    }
    if (v63[3] >= 0) {
      uint64_t v49 = HIBYTE(v63[3]);
    }
    else {
      uint64_t v49 = v63[2];
    }
    int v50 = sub_20B07FC90(MEMORY[0x263F8C0F8], (uint64_t)v48, v49);
    std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(void *)(*v50 - 24)));
    unint64_t v51 = std::locale::use_facet((const std::locale *)&v60, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
    std::locale::~locale((std::locale *)&v60);
    std::ostream::put();
    std::ostream::flush();
    *(unsigned char *)a7 = 0;
    uint64_t v52 = (unsigned char *)(a7 + 8);
    if (SHIBYTE(v63[3]) < 0)
    {
      sub_20B07F994(v52, (void *)v63[1], v63[2]);
    }
    else
    {
      *(_OWORD *)uint64_t v52 = *(_OWORD *)&v63[1];
      *(void *)(a7 + 24) = v63[3];
    }
    if (SHIBYTE(v63[3]) < 0) {
      operator delete((void *)v63[1]);
    }
  }
  else
  {
    *(unsigned char *)a7 = 0;
    sub_20B07F8E0((void *)(a7 + 8), "Couldn't parse triangles from supplied meshes");
  }
  sub_20B07F6E8(&v64);

  *(void *)&long long v60 = v71;
  sub_20B12CBFC((void ***)&v60);
}

void sub_20B1297E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(__p);
  }
  sub_20B07F6E8(&STACK[0x218]);

  a71 = (uint64_t)&STACK[0x270];
  sub_20B12CBFC((void ***)&a71);

  _Unwind_Resume(a1);
}

void **sub_20B1299E4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  double result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_20B05D0BC();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20B077E90((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _OWORD v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    sub_20B12CC9C(a1, v7);
    return sub_20B12CE24(v7);
  }
  return result;
}

void sub_20B129A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B12CE24((void **)va);
  _Unwind_Resume(a1);
}

void *sub_20B129A78(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  float v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_20B05D0BC();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)sub_20B077E90((uint64_t)v4, v13);
    uint64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    void v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_20B12CC9C(a1, v19);
    long long v9 = (void *)a1[1];
    sub_20B12CE24(v19);
  }
  else
  {
    *float v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_20B129B84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B12CE24((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B129B98(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 80);
  unsigned int v48 = 0;
  atomic_store(0, &v48);
  float v5 = *(float *)&dword_267691148;
  objc_msgSend_lock(*(void **)(a1 + 32), a2, a3);
  long long v9 = *(void **)(a1 + 88);
  uint64_t v10 = v9[5];
  if (v10)
  {
    *(float *)v8.i32 = v5 * 0.5;
    float32x2_t v11 = (float32x2_t)vdup_lane_s32(v8, 0);
    float32x2_t v12 = (float32x2_t)vdup_n_s32(0x437F0000u);
    do
    {
      int v13 = *(_DWORD *)(*(void *)(v9[1] + ((v9[4] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v9[4] & 0x3FFLL));
      if (v13 + 1 < *(_DWORD *)(a1 + 136)) {
        int v14 = v13 + 1;
      }
      else {
        int v14 = *(_DWORD *)(a1 + 136);
      }
      ++v9[4];
      v9[5] = v10 - 1;
      sub_20B12D3B0((uint64_t)v9, 1);
      objc_msgSend_unlock(*(void **)(a1 + 32), v15, v16);
      if (v13 < v14)
      {
        int v20 = *(_DWORD *)(a1 + 136);
        do
        {
          if (v20 >= 1)
          {
            for (int i = 0; i < v20; ++i)
            {
              v22.f32[0] = (float)i;
              *(float *)v19.i32 = (float)v20;
              v22.f32[1] = (float)v13;
              float32x2_t v23 = vdiv_f32(v22, (float32x2_t)vdup_lane_s32(v19, 0));
              uint64_t v24 = sub_20B174D64(*(void **)(a1 + 96), *(double *)&v23);
              if (v24 && (uint64_t v25 = (float32x2_t ***)v24, sub_20B174314(v24, v23)))
              {
                long long v46 = 0uLL;
                uint64_t v47 = 0;
                sub_20B1744F8(v25, &v46, COERCE_DOUBLE(vadd_f32(v23, v11)));
                uint64_t v26 = v47;
                if (!v47)
                {
                  sub_20B1744F8(v25, &v44, *(double *)&v23);
                  uint64_t v26 = v45;
                  uint64_t v47 = v45;
                  long long v46 = v44;
                }
                __n128 v43 = (__n128)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v26 + 64), *(float *)&v46), *(float32x4_t *)(v26 + 80), *((float *)&v46 + 1)), *(float32x4_t *)(v26 + 96), *((float *)&v46 + 2));
                __n128 v29 = sub_20B0C0304((__n128 *)v26);
                if (*(void *)v4 == *(void *)(v4 + 8))
                {
                  unsigned int v31 = (int)(float)(sub_20B1253BC(v43.n128_f64[0], v29, *(float *)(a1 + 144), v27, (uint64_t **)(a1 + 104), *(_DWORD *)(a1 + 140), 1)* 255.0);
                  int32x2_t v19 = vdup_n_s32(v31);
                }
                else
                {
                  *(double *)v30.i64 = sub_20B125654((uint64_t **)v4, (uint64_t **)(a1 + 104), v28, v43, v29);
                  int32x2_t v19 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)v30.f32, v12));
                  unsigned int v31 = (int)vmuls_lane_f32(255.0, v30, 2);
                }
                char v32 = -1;
              }
              else
              {
                LOBYTE(v31) = 0;
                char v32 = 0;
                atomic_fetch_add((atomic_uint *volatile)&v48, 1u);
                int32x2_t v19 = 0;
              }
              uint64_t v33 = (unsigned char *)(*(void *)(a1 + 128) + 4 * (i + v13 * *(_DWORD *)(a1 + 136)));
              *uint64_t v33 = v19.i8[0];
              v33[1] = v19.i8[4];
              _OWORD v33[2] = v31;
              v33[3] = v32;
              int v20 = *(_DWORD *)(a1 + 136);
            }
          }
          ++v13;
        }
        while (v13 != v14);
      }
      atomic_fetch_add((atomic_uint *volatile)&v48, *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
      objc_msgSend_lock(*(void **)(a1 + 32), v17, v18, v43.n128_u64[0]);
      if ((float)((float)(int)++*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
                 / (float)*(int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) > (float)((float)*(int *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)
                                                                                            * 0.022222))
      {
        uint64_t v36 = *(void **)(a1 + 40);
        uint64_t v37 = objc_msgSend_completedUnitCount(v36, v34, v35);
        objc_msgSend_setCompletedUnitCount_(v36, v38, v37 + 1);
        ++*(_DWORD *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      }
      objc_msgSend_unlock(*(void **)(a1 + 32), v34, v35);
      unsigned int v48 = 0;
      atomic_store(0, &v48);
      *(float *)v39.i32 = *(float *)&dword_267691148 * 0.5;
      float32x2_t v11 = (float32x2_t)vdup_lane_s32(v39, 0);
      objc_msgSend_lock(*(void **)(a1 + 32), v40, v41);
      long long v9 = *(void **)(a1 + 88);
      uint64_t v10 = v9[5];
    }
    while (v10);
  }
  return objc_msgSend_unlock(*(void **)(a1 + 32), v6, v7);
}

void *sub_20B129EE8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v2 = (void *)(a1 + 104);
  v2[2] = 0;
  return sub_20B12D410(v2, *(void **)(a2 + 104), *(void **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
}

void sub_20B129F04(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 104);
  sub_20B12CBFC(&v1);
}

void sub_20B129F30(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  sub_20B125B38(v7, &v37, *MEMORY[0x263EF89A8], *(float32x4_t *)(MEMORY[0x263EF89A8] + 16), *(float32x4_t *)(MEMORY[0x263EF89A8] + 32), *(float32x4_t *)(MEMORY[0x263EF89A8] + 48));
  if (v39)
  {
    float32x4_t v30 = v8;
    unsigned int v31 = v7;
    sub_20B1247D8(v9, &v37);
    uint64_t v10 = v38;
    if (v38 != &v37)
    {
      float32x2_t v11 = (char **)(a1 + 3);
      float32x2_t v12 = a1 + 5;
      int v13 = (uint64_t *)a1[4];
      do
      {
        uint64_t v14 = v10[2];
        if ((unint64_t)v13 >= *v12)
        {
          uint64_t v15 = ((char *)v13 - *v11) >> 3;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_20B05D0BC();
          }
          uint64_t v16 = *v12 - (void)*v11;
          uint64_t v17 = v16 >> 2;
          if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
            uint64_t v17 = v15 + 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          if (v18) {
            int32x2_t v19 = (char *)sub_20B0602EC((uint64_t)(a1 + 5), v18);
          }
          else {
            int32x2_t v19 = 0;
          }
          int v20 = (uint64_t *)&v19[8 * v15];
          *int v20 = v14;
          int v13 = v20 + 1;
          float32x2_t v22 = (char *)a1[3];
          id v21 = (char *)a1[4];
          if (v21 != v22)
          {
            do
            {
              uint64_t v23 = *((void *)v21 - 1);
              v21 -= 8;
              *--int v20 = v23;
            }
            while (v21 != v22);
            id v21 = *v11;
          }
          a1[3] = v20;
          a1[4] = v13;
          a1[5] = &v19[8 * v18];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *v13++ = v14;
        }
        a1[4] = v13;
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10 != &v37);
    }
    int v36 = 4096;
    memset(v35, 0, 32);
    sub_20B126724(a1, &v36, (unint64_t)&v37, v35, (__n128)0);
    uint64_t v24 = v35[0];
    id v8 = v30;
    id v7 = v31;
    if (v35[0])
    {
      std::string __p = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      sub_20B0C0658(&__p, (const void *)a1[3], a1[4], (uint64_t)(a1[4] - a1[3]) >> 3);
      sub_20B128218(v31, 0, v30, 0, (uint64_t)&__p, 0);
      if (__p)
      {
        uint64_t v33 = __p;
        operator delete(__p);
      }
      MEMORY[0x210532650](v24, 0x1020C4084B17629);
      *(unsigned char *)a4 = 1;
      sub_20B07F8E0((void *)(a4 + 8), "");
    }
    else
    {
      if (SHIBYTE(v35[3]) >= 0) {
        uint64_t v25 = &v35[1];
      }
      else {
        uint64_t v25 = (void **)v35[1];
      }
      if (SHIBYTE(v35[3]) >= 0) {
        uint64_t v26 = HIBYTE(v35[3]);
      }
      else {
        uint64_t v26 = (uint64_t)v35[2];
      }
      uint64_t v27 = sub_20B07FC90(MEMORY[0x263F8C0F8], (uint64_t)v25, v26);
      std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
      uint64_t v28 = std::locale::use_facet(&v40, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v40);
      std::ostream::put();
      std::ostream::flush();
      *(unsigned char *)a4 = 0;
      uint64_t v29 = a4 + 8;
      if (SHIBYTE(v35[3]) < 0)
      {
        sub_20B07F994((unsigned char *)v29, v35[1], (unint64_t)v35[2]);
      }
      else
      {
        *(_OWORD *)uint64_t v29 = *(_OWORD *)&v35[1];
        *(void **)(v29 + 16) = v35[3];
      }
    }
    if (SHIBYTE(v35[3]) < 0) {
      operator delete(v35[1]);
    }
  }
  else
  {
    *(unsigned char *)a4 = 0;
    sub_20B07F8E0((void *)(a4 + 8), "Couldn't parse triangles from supplied meshes");
  }
  sub_20B07F6E8(&v37);
}

void sub_20B12A264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_20B07F6E8(&a24);

  _Unwind_Resume(a1);
}

void sub_20B12A2F0(void *a1@<X1>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_20B125B38(v8, &v25, *MEMORY[0x263EF89A8], *(float32x4_t *)(MEMORY[0x263EF89A8] + 16), *(float32x4_t *)(MEMORY[0x263EF89A8] + 32), *(float32x4_t *)(MEMORY[0x263EF89A8] + 48));
  if (v27)
  {
    memset(v24, 0, sizeof(v24));
    unint64_t v12 = objc_msgSend_count(v7, v10, v11);
    sub_20B1299E4(v24, v12);
    memset(v23, 0, sizeof(v23));
    id v13 = v7;
    if (objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)v23, v29, 16))
    {
      int v20 = 0;
      uint64_t v21 = 0;
      operator new();
    }

    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v20 = 0;
    if (v26 == &v25)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v15 = 0;
      uint64_t v16 = v26;
      do
      {
        ++v15;
        uint64_t v16 = (uint64_t *)v16[1];
      }
      while (v16 != &v25);
    }
    sub_20B12D9AC((char *)&v20, (uint64_t)v26, (uint64_t)&v25, v15);
    sub_20B07FC90(MEMORY[0x263F8C100], (uint64_t)"Computing vertex bake information for ", 38);
    uint64_t v17 = (void *)std::ostream::operator<<();
    unint64_t v18 = sub_20B07FC90(v17, (uint64_t)" triangles", 10);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    int32x2_t v19 = std::locale::use_facet(&v28, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
    std::locale::~locale(&v28);
    std::ostream::put();
    std::ostream::flush();
    dispatch_group_create();
    dispatch_get_global_queue(0, 0);
    objc_claimAutoreleasedReturnValue();
    operator new();
  }
  *(unsigned char *)a4 = 0;
  sub_20B07F8E0((void *)(a4 + 8), "Couldn't parse triangles from supplied meshes");
  sub_20B07F6E8(&v25);
}

void sub_20B12A8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  sub_20B07F6E8(&a52);

  _Unwind_Resume(a1);
}

uint64_t sub_20B12AA1C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 48);
  objc_msgSend_lock(*(void **)(a1 + 32), a2, a3);
  id v7 = *(void **)(a1 + 56);
  for (uint64_t i = v7[5]; i; uint64_t i = v7[5])
  {
    uint64_t v9 = *(unsigned int *)(*(void *)(v7[1] + ((v7[4] >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v7[4] & 0x3FFLL));
    ++v7[4];
    v7[5] = i - 1;
    sub_20B12D3B0((uint64_t)v7, 1);
    objc_msgSend_unlock(*(void **)(a1 + 32), v10, v11);
    if ((v9 & 0x80000000) == 0)
    {
      int v14 = v9 + 250;
      if ((int)v9 + 250 >= (int)((*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3)) {
        int v14 = (*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3;
      }
      if ((int)v9 < v14)
      {
        uint64_t v15 = 8 * v9;
        int v16 = v9 - v14;
        do
        {
          uint64_t v17 = *(void *)(*(void *)(a1 + 64) + v15);
          if (*(void *)v4 == *(void *)(v4 + 8))
          {
            int v27 = *(_DWORD *)(a1 + 112);
            long long v55 = *(_OWORD *)(v17 + 64);
            __n128 v28 = sub_20B0C0304((__n128 *)v17);
            *(float *)v30.i32 = sub_20B1253BC(*(double *)&v55, v28, *(float *)(a1 + 116), v29, (uint64_t **)(a1 + 88), v27, 0);
            *(int32x4_t *)(v17 + 208) = vdupq_lane_s32(v30, 0);
            int v31 = *(_DWORD *)(a1 + 112);
            long long v56 = *(_OWORD *)(v17 + 80);
            __n128 v32 = sub_20B0C0304((__n128 *)v17);
            *(float *)v34.i32 = sub_20B1253BC(*(double *)&v56, v32, *(float *)(a1 + 116), v33, (uint64_t **)(a1 + 88), v31, 0);
            *(int32x4_t *)(v17 + 224) = vdupq_lane_s32(v34, 0);
            int v35 = *(_DWORD *)(a1 + 112);
            long long v57 = *(_OWORD *)(v17 + 96);
            __n128 v36 = sub_20B0C0304((__n128 *)v17);
            *(float *)v38.i32 = sub_20B1253BC(*(double *)&v57, v36, *(float *)(a1 + 116), v37, (uint64_t **)(a1 + 88), v35, 0);
            int32x4_t v26 = vdupq_lane_s32(v38, 0);
          }
          else
          {
            __n128 v52 = *(__n128 *)(v17 + 64);
            __n128 v18 = sub_20B0C0304((__n128 *)v17);
            *(double *)&long long v20 = sub_20B125654((uint64_t **)v4, (uint64_t **)(a1 + 88), v19, v52, v18);
            *(_OWORD *)(v17 + 208) = v20;
            __n128 v53 = *(__n128 *)(v17 + 80);
            __n128 v21 = sub_20B0C0304((__n128 *)v17);
            *(double *)&long long v23 = sub_20B125654((uint64_t **)v4, (uint64_t **)(a1 + 88), v22, v53, v21);
            *(_OWORD *)(v17 + 224) = v23;
            __n128 v54 = *(__n128 *)(v17 + 96);
            __n128 v24 = sub_20B0C0304((__n128 *)v17);
            *(double *)v26.i64 = sub_20B125654((uint64_t **)v4, (uint64_t **)(a1 + 88), v25, v54, v24);
          }
          *(int32x4_t *)(v17 + 240) = v26;
          v15 += 8;
        }
        while (!__CFADD__(v16++, 1));
      }
      objc_msgSend_lock(*(void **)(a1 + 32), v12, v13);
      objc_msgSend_fractionCompleted(*(void **)(a1 + 40), v40, v41);
      NSLog(&cfstr_FractionComple_0.isa, v42);
      __n128 v43 = *(void **)(a1 + 40);
      uint64_t v46 = objc_msgSend_completedUnitCount(v43, v44, v45);
      objc_msgSend_setCompletedUnitCount_(v43, v47, v46 + 1);
      objc_msgSend_unlock(*(void **)(a1 + 32), v48, v49);
    }
    objc_msgSend_lock(*(void **)(a1 + 32), v12, v13);
    id v7 = *(void **)(a1 + 56);
  }
  int v50 = *(void **)(a1 + 32);

  return objc_msgSend_unlock(v50, v5, v6);
}

void *sub_20B12AC88(void *a1, uint64_t a2)
{
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  sub_20B0C0658(a1 + 8, *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3);
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  return sub_20B12D410(a1 + 11, *(void **)(a2 + 88), *(void **)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4);
}

void sub_20B12ACF4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B12AD10(uint64_t a1)
{
  float v3 = (void **)(a1 + 88);
  sub_20B12CBFC(&v3);
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void sub_20B12AD58(char **a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v3 = a2;
  a1[1] = *a1;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v4 = v3;
  uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v24, v28, 16);
  if (v8)
  {
    uint64_t v9 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(v4);
        }
        uint64_t v11 = objc_msgSend_rtLight(*(void **)(*((void *)&v24 + 1) + 8 * i), (const char *)v6, v7, (void)v24);
        uint64_t v12 = v11;
        int v14 = (uint64_t *)a1[1];
        unint64_t v13 = (unint64_t)a1[2];
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = ((char *)v14 - *a1) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            sub_20B05D0BC();
          }
          uint64_t v17 = v13 - (void)*a1;
          uint64_t v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
            uint64_t v18 = v16 + 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v6 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v6 = v18;
          }
          if (v6) {
            uint64_t v19 = (char *)sub_20B0602EC((uint64_t)(a1 + 2), v6);
          }
          else {
            uint64_t v19 = 0;
          }
          long long v20 = (uint64_t *)&v19[8 * v16];
          *long long v20 = v12;
          uint64_t v15 = (char *)(v20 + 1);
          uint64_t v22 = *a1;
          __n128 v21 = a1[1];
          if (v21 != *a1)
          {
            do
            {
              uint64_t v23 = *((void *)v21 - 1);
              v21 -= 8;
              *--long long v20 = v23;
            }
            while (v21 != v22);
            __n128 v21 = *a1;
          }
          *a1 = (char *)v20;
          a1[1] = v15;
          a1[2] = &v19[8 * v6];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          *int v14 = v11;
          uint64_t v15 = (char *)(v14 + 1);
        }
        a1[1] = v15;
      }
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, (const char *)v6, (uint64_t)&v24, v28, 16);
    }
    while (v8);
  }
}

void sub_20B12AF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B12AF4C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  id v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_20B12AFF4((uint64_t)a1);
}

uint64_t sub_20B12AFF4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B12B044(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    unint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      uint64_t v6 = 1;
      if (v5 != a4)
      {
        uint64_t v7 = a4;
        do
        {
          uint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(void *)(a3 + 16) -= v6;
      *(void *)(result + 16) += v6;
    }
    uint64_t v8 = *a4;
    *(void *)(v8 + 8) = v5[1];
    *(void *)v5[1] = v8;
    uint64_t v9 = *a2;
    *(void *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

float32x4_t *sub_20B12B0BC(void *a1, float32x4_t *a2)
{
  unint64_t v4 = sub_20B0C03BC(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(float32x4_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = (float32x4_t *)i->i64[0])
  {
    unint64_t v12 = i->u64[1];
    if (v12 == v6)
    {
      if (sub_20B0C044C(i + 1, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

float32x4_t *sub_20B12B1B8(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v7 = sub_20B0C03BC(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    unint64_t v13 = *(float32x4_t ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (float32x4_t *)i->i64[0])
      {
        unint64_t v15 = i->u64[1];
        if (v15 == v8)
        {
          if (sub_20B0C044C(i + 1, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  sub_20B12B440(a1, v8, a4, v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_20B05F7E0(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (float32x4_t *)v25[0];
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20B12B424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B12B440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = operator new(0x130uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_20B0BFE58((uint64_t)(v8 + 2), *a3);
  v8[36] = 0;
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_20B12B4B0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B12B4C8(uint64_t result, char *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint8x8_t v10 = (char *)result;
LABEL_2:
  unint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint8x8_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = (a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = (*a3)(*((void *)a2 - 1), *(void *)v11);
          if (result)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)unint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          uint64_t result = sub_20B085E94(v11, (void *)v11 + 1, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 4uLL:
          uint64_t result = sub_20B086378(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        case 5uLL:
          uint64_t result = sub_20B08642C(v11, (void *)v11 + 1, (void *)v11 + 2, (void *)v11 + 3, (void *)a2 - 1, (unsigned int (**)(void))a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_20B086508(v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    float v17 = &v11[8 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_20B085E94(v11, &v11[8 * (v15 >> 1)], (void *)a2 - 1, (unsigned int (**)(void))a3);
      sub_20B085E94((void *)v11 + 1, (void *)v17 - 1, (void *)a2 - 2, (unsigned int (**)(void))a3);
      sub_20B085E94((void *)v11 + 2, &v11[8 * v16 + 8], (void *)a2 - 3, (unsigned int (**)(void))a3);
      sub_20B085E94((void *)v17 - 1, v17, &v11[8 * v16 + 8], (unsigned int (**)(void))a3);
      uint64_t v18 = *(void *)v11;
      *(void *)unint64_t v11 = *(void *)v17;
      *(void *)float v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_20B085E94(&v11[8 * (v15 >> 1)], v11, (void *)a2 - 1, (unsigned int (**)(void))a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (((*a3)(*((void *)v11 - 1), *(void *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_20B085F84((uint64_t *)v11, (uint64_t *)a2, a3);
      unint64_t v11 = (char *)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v19 = sub_20B086094((uint64_t *)v11, (uint64_t *)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = sub_20B12B88C(v11, v19, (unsigned int (**)(void))a3);
    unint64_t v11 = (char *)(v19 + 1);
    uint64_t result = sub_20B12B88C(v19 + 1, a2, (unsigned int (**)(void))a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      uint64_t result = sub_20B12B4C8(v10, v19, a3, -v13, a5 & 1);
      unint64_t v11 = (char *)(v19 + 1);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_20B085D30((uint64_t)v11, (uint64_t *)a2, a3);
  }
  else
  {
    return sub_20B085DF8((uint64_t)v11, a2, a3);
  }
}

BOOL sub_20B12B88C(void *a1, void *a2, unsigned int (**a3)(void))
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(void, void))*a3)(*(a2 - 1), *a1))
      {
        uint64_t v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20B085E94(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20B086378(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20B08642C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unint64_t v9 = a1 + 2;
      sub_20B085E94(a1, a1 + 1, a1 + 2, a3);
      uint8x8_t v10 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(void, void))*a3)(*v10, *v9))
    {
      uint64_t v13 = *v10;
      uint64_t v14 = v11;
      while (1)
      {
        unint64_t v15 = (char *)a1 + v14;
        *(void *)((char *)a1 + v14 + 24) = *(void *)((char *)a1 + v14 + 16);
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, void))*a3)(v13, *((void *)v15 + 1)) & 1) == 0)
        {
          unint64_t v16 = (void *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      unint64_t v16 = a1;
LABEL_12:
      *unint64_t v16 = v13;
      if (++v12 == 8) {
        return v10 + 1 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 8;
    if (++v10 == a2) {
      return 1;
    }
  }
}

void *sub_20B12BA54(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B07F294(a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_20B12BAB0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B12BACC(uint64_t a1)
{
  sub_20B12BB08(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_20B12BB08(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_20B07F6E8(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

float32x4_t *sub_20B12BB4C(uint64_t a1, float32x4_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B0BF5EC(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    uint64_t v14 = *(float32x4_t ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = (float32x4_t *)i->i64[0])
      {
        unint64_t v16 = i->u64[1];
        if (v16 == v9)
        {
          if (sub_20B0BF5FC(a1 + 32, i + 1, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  uint64_t v28 = 0;
  float v17 = operator new(0x40uLL);
  v27[0] = v17;
  v27[1] = a1 + 16;
  *float v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = **a4;
  v17[4] = v17 + 4;
  v17[5] = v17 + 4;
  v17[6] = 0;
  LOBYTE(v28) = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_20B05F7E0(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  long long v24 = *(void **)(*(void *)a1 + 8 * v13);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *long long v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10) {
          v25 %= v10;
        }
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (float32x4_t *)v27[0];
  v27[0] = 0;
  ++*v7;
  sub_20B12BDF0((uint64_t)v27, 0);
  return i;
}

void sub_20B12BDD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B12BDF0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20B12BDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_20B07F6E8(v2 + 4);
    }
    operator delete(v2);
  }
}

void *sub_20B12BE48(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      _OWORD v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_20B12BED0(_Unwind_Exception *a1)
{
  sub_20B07F6E8(v1);
  _Unwind_Resume(a1);
}

float32x4_t *sub_20B12BEE4(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  unint64_t v7 = sub_20B0BFA54(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      uint64_t v14 = (float32x4_t *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14->u64[1];
          if (v15 == v8)
          {
            if (sub_20B0BFAC8(v14 + 1, a2)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v15 >= v9) {
                v15 %= v9;
              }
            }
            else
            {
              v15 &= v9 - 1;
            }
            if (v15 != v12) {
              break;
            }
          }
          uint64_t v14 = (float32x4_t *)v14->i64[0];
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  unint64_t v16 = (float32x4_t **)(a1 + 16);
  uint64_t v14 = (float32x4_t *)operator new(0x50uLL);
  v14->i64[0] = 0;
  v14->i64[1] = v8;
  float32x4_t v17 = (*a4)[1];
  v14[1] = **a4;
  void v14[2] = v17;
  v14[3].i64[1] = 0;
  v14[4].i64[0] = 0;
  v14[3].i64[0] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_20B05F7E0(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(float32x4_t ***)(*(void *)a1 + 8 * v12);
  if (v25)
  {
    v14->i64[0] = (uint64_t)*v25;
LABEL_38:
    *unint64_t v25 = v14;
    goto LABEL_39;
  }
  v14->i64[0] = (uint64_t)*v16;
  *unint64_t v16 = v14;
  *(void *)(v24 + 8 * v12) = v16;
  if (v14->i64[0])
  {
    unint64_t v26 = *(void *)(v14->i64[0] + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    unint64_t v25 = (float32x4_t **)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_20B12C13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_20B12C158(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20B12C158(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (void *)__p[6];
    if (v3)
    {
      __p[7] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_20B12C1B8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v21 = a1 + 2;
  uint8x8_t v10 = (char *)sub_20B12C440(v7, v9);
  uint64_t v11 = &v10[192 * v4];
  std::string __p = v10;
  float v18 = v11;
  BOOL v20 = &v10[192 * v12];
  long long v13 = *a2;
  long long v14 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((_DWORD *)v11 + 12) = *((_DWORD *)a2 + 12);
  *((_OWORD *)v11 + 4) = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  *((_OWORD *)v11 + 6) = a2[6];
  *((void *)v11 + 14) = *((void *)a2 + 14);
  *((_OWORD *)v11 + 8) = a2[8];
  *((void *)v11 + 18) = *((void *)a2 + 18);
  *((void *)v11 + 19) = *((void *)a2 + 19);
  *((void *)v11 + 20) = *((void *)a2 + 20);
  *((_DWORD *)v11 + 44) = *((_DWORD *)a2 + 44);
  float v19 = v11 + 192;
  sub_20B12C374(a1, &__p);
  uint64_t v15 = a1[1];
  if (v19 != v18) {
    float v19 = &v18[(v19 - v18 - 192) % 0xC0uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_20B12C328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B12C374(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      long long v7 = *(_OWORD *)(v2 + v5 - 192);
      long long v8 = *(_OWORD *)(v2 + v5 - 176);
      *(void *)(v6 - 160) = *(void *)(v2 + v5 - 160);
      *(_OWORD *)(v6 - 192) = v7;
      *(_OWORD *)(v6 - 176) = v8;
      *(_DWORD *)(v6 - 144) = *(_DWORD *)(v2 + v5 - 144);
      *(_OWORD *)(v6 - 128) = *(_OWORD *)(v2 + v5 - 128);
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      *(void *)(v6 - 80) = *(void *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v2 + v5 - 64);
      *(void *)(v6 - 48) = *(void *)(v2 + v5 - 48);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(_DWORD *)(v6 - 16) = *(_DWORD *)(v2 + v5 - 16);
      v5 -= 192;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  void *result = v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

void *sub_20B12C440(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    sub_20B05D178();
  }
  return operator new(192 * a2);
}

uint64_t sub_20B12C488(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v21 = a1 + 2;
  uint64_t v10 = (char *)sub_20B12C440(v7, v9);
  uint64_t v11 = &v10[192 * v4];
  std::string __p = v10;
  float v18 = v11;
  BOOL v20 = &v10[192 * v12];
  long long v13 = *a2;
  long long v14 = a2[1];
  *((void *)v11 + 4) = *((void *)a2 + 4);
  *(_OWORD *)uint64_t v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((_DWORD *)v11 + 12) = *((_DWORD *)a2 + 12);
  *((_OWORD *)v11 + 4) = a2[4];
  *((_OWORD *)v11 + 5) = a2[5];
  *((_OWORD *)v11 + 6) = a2[6];
  *((void *)v11 + 14) = *((void *)a2 + 14);
  *((_OWORD *)v11 + 8) = a2[8];
  *((void *)v11 + 18) = *((void *)a2 + 18);
  *((void *)v11 + 19) = *((void *)a2 + 19);
  *((void *)v11 + 20) = *((void *)a2 + 20);
  *((_DWORD *)v11 + 44) = *((_DWORD *)a2 + 44);
  float v19 = v11 + 192;
  sub_20B12C374(a1, &__p);
  uint64_t v15 = a1[1];
  if (v19 != v18) {
    float v19 = &v18[(v19 - v18 - 192) % 0xC0uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v15;
}

void sub_20B12C5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_20B12C644(uint64_t a1, long long *a2, uint64_t a3, long long *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 6)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 6)) >= a5)
      {
        unint64_t v21 = (long long *)(a3 + 192 * a5);
      }
      else
      {
        unint64_t v21 = (long long *)(a3 + ((uint64_t)(v12 - (void)a2) >> 6 << 6));
        *(void *)(a1 + 8) = sub_20B12CB80(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_20B12C928(a1, (uint64_t)v5, v12, (uint64_t)&v5[12 * a5]);
      if (v21 != (long long *)v7)
      {
        unint64_t v22 = v5;
        do
        {
          long long v23 = *(_OWORD *)v7;
          long long v24 = *(_OWORD *)(v7 + 16);
          long long v25 = *(_OWORD *)(v7 + 48);
          v22[2] = *(_OWORD *)(v7 + 32);
          void v22[3] = v25;
          *unint64_t v22 = v23;
          v22[1] = v24;
          long long v26 = *(_OWORD *)(v7 + 64);
          long long v27 = *(_OWORD *)(v7 + 80);
          long long v28 = *(_OWORD *)(v7 + 112);
          v22[6] = *(_OWORD *)(v7 + 96);
          v22[7] = v28;
          v22[4] = v26;
          v22[5] = v27;
          long long v29 = *(_OWORD *)(v7 + 128);
          long long v30 = *(_OWORD *)(v7 + 144);
          long long v31 = *(_OWORD *)(v7 + 160);
          *((_DWORD *)v22 + 44) = *(_DWORD *)(v7 + 176);
          v22[9] = v30;
          v22[10] = v31;
          v22[8] = v29;
          v7 += 192;
          v22 += 12;
        }
        while ((long long *)v7 != v21);
      }
    }
    else
    {
      long long v13 = *(long long **)a1;
      uint64_t v39 = 0;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - (void)v13) >> 6);
      if (v14 > 0x155555555555555) {
        sub_20B05D0BC();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v13) >> 6);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (uint64_t)v13) >> 6);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - (void)v13) >> 6);
      }
      if (v16 >= 0xAAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x155555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v41 = v9;
      if (v18) {
        float v19 = (char *)sub_20B12C440(v9, v18);
      }
      else {
        float v19 = 0;
      }
      __n128 v32 = &v19[192 * v15];
      std::string __p = v19;
      int32x2_t v38 = v32;
      std::locale v40 = &v19[192 * v18];
      uint64_t v33 = &v32[192 * a5];
      do
      {
        long long v34 = *(_OWORD *)v7;
        long long v35 = *(_OWORD *)(v7 + 16);
        *((void *)v32 + 4) = *(void *)(v7 + 32);
        *(_OWORD *)__n128 v32 = v34;
        *((_OWORD *)v32 + 1) = v35;
        *((_DWORD *)v32 + 12) = *(_DWORD *)(v7 + 48);
        *((_OWORD *)v32 + 4) = *(_OWORD *)(v7 + 64);
        *((_OWORD *)v32 + 5) = *(_OWORD *)(v7 + 80);
        *((_OWORD *)v32 + 6) = *(_OWORD *)(v7 + 96);
        *((void *)v32 + 14) = *(void *)(v7 + 112);
        *((_OWORD *)v32 + 8) = *(_OWORD *)(v7 + 128);
        *((void *)v32 + 18) = *(void *)(v7 + 144);
        *((void *)v32 + 19) = *(void *)(v7 + 152);
        *((void *)v32 + 20) = *(void *)(v7 + 160);
        *((_DWORD *)v32 + 44) = *(_DWORD *)(v7 + 176);
        v32 += 192;
        v7 += 192;
      }
      while (v32 != v33);
      uint64_t v39 = v33;
      unint64_t v5 = sub_20B12CA24((long long **)a1, &__p, v5);
      if (v39 != v38) {
        uint64_t v39 = &v38[(v39 - v38 - 192) % 0xC0uLL];
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_20B12C8D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

__n128 sub_20B12C928(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = v4 - a4;
  unint64_t v6 = a2 + v4 - a4;
  uint64_t v7 = v4;
  while (v6 < a3)
  {
    __n128 result = *(__n128 *)v6;
    long long v8 = *(_OWORD *)(v6 + 16);
    *(void *)(v7 + 32) = *(void *)(v6 + 32);
    *(__n128 *)uint64_t v7 = result;
    *(_OWORD *)(v7 + 16) = v8;
    *(_DWORD *)(v7 + 48) = *(_DWORD *)(v6 + 48);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(v7 + 96) = *(_OWORD *)(v6 + 96);
    *(void *)(v7 + 112) = *(void *)(v6 + 112);
    *(_OWORD *)(v7 + 128) = *(_OWORD *)(v6 + 128);
    *(void *)(v7 + 144) = *(void *)(v6 + 144);
    result.n128_u64[0] = *(void *)(v6 + 152);
    *(void *)(v7 + 152) = result.n128_u64[0];
    *(void *)(v7 + 160) = *(void *)(v6 + 160);
    *(_DWORD *)(v7 + 176) = *(_DWORD *)(v6 + 176);
    v7 += 192;
    v6 += 192;
  }
  *(void *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    uint64_t v10 = v4 - 192;
    uint64_t v11 = v5 >> 6 << 6;
    uint64_t v12 = a2 - 192;
    do
    {
      long long v13 = *(_OWORD *)(v12 + v11);
      long long v14 = *(_OWORD *)(v12 + v11 + 16);
      long long v15 = *(_OWORD *)(v12 + v11 + 48);
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(v12 + v11 + 32);
      *(_OWORD *)(v10 + 48) = v15;
      *(_OWORD *)uint64_t v10 = v13;
      *(_OWORD *)(v10 + 16) = v14;
      long long v16 = *(_OWORD *)(v12 + v11 + 64);
      long long v17 = *(_OWORD *)(v12 + v11 + 80);
      long long v18 = *(_OWORD *)(v12 + v11 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v12 + v11 + 96);
      *(_OWORD *)(v10 + 112) = v18;
      *(_OWORD *)(v10 + 64) = v16;
      *(_OWORD *)(v10 + 80) = v17;
      __n128 result = *(__n128 *)(v12 + v11 + 128);
      long long v19 = *(_OWORD *)(v12 + v11 + 144);
      long long v20 = *(_OWORD *)(v12 + v11 + 160);
      *(_DWORD *)(v10 + 176) = *(_DWORD *)(v12 + v11 + 176);
      *(_OWORD *)(v10 + 144) = v19;
      *(_OWORD *)(v10 + 160) = v20;
      *(__n128 *)(v10 + 128) = result;
      v10 -= 192;
      v11 -= 192;
    }
    while (v11);
  }
  return result;
}

long long *sub_20B12CA24(long long **a1, void *a2, long long *a3)
{
  __n128 result = (long long *)a2[1];
  uint64_t v5 = *a1;
  unint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      long long v8 = &result[v7];
      long long v9 = a3[v7 - 12];
      long long v10 = a3[v7 - 11];
      *((void *)v8 - 20) = *(void *)&a3[v7 - 10];
      *(v8 - 12) = v9;
      *(v8 - 11) = v10;
      *((_DWORD *)v8 - 36) = a3[v7 - 9];
      *(v8 - 8) = a3[v7 - 8];
      *(v8 - 7) = a3[v7 - 7];
      *(v8 - 6) = a3[v7 - 6];
      *((void *)v8 - 10) = *(void *)&a3[v7 - 5];
      *(v8 - 4) = a3[v7 - 4];
      *((void *)v8 - 6) = *(void *)&a3[v7 - 3];
      *((void *)v8 - 5) = *((void *)&a3[v7 - 2] - 1);
      *((void *)v8 - 4) = *(void *)&a3[v7 - 2];
      *((_DWORD *)v8 - 4) = a3[v7 - 1];
      v7 -= 12;
    }
    while (&a3[v7] != v5);
    unint64_t v6 = &result[v7];
  }
  a2[1] = v6;
  uint64_t v11 = a1[1];
  uint64_t v12 = a2[2];
  if (v11 != a3)
  {
    do
    {
      long long v13 = *a3;
      long long v14 = a3[1];
      *(void *)(v12 + 32) = *((void *)a3 + 4);
      *(_OWORD *)uint64_t v12 = v13;
      *(_OWORD *)(v12 + 16) = v14;
      *(_DWORD *)(v12 + 48) = *((_DWORD *)a3 + 12);
      *(_OWORD *)(v12 + 64) = a3[4];
      *(_OWORD *)(v12 + 80) = a3[5];
      *(_OWORD *)(v12 + 96) = a3[6];
      *(void *)(v12 + 112) = *((void *)a3 + 14);
      *(_OWORD *)(v12 + 128) = a3[8];
      *(void *)(v12 + 144) = *((void *)a3 + 18);
      *(void *)(v12 + 152) = *((void *)a3 + 19);
      *(void *)(v12 + 160) = *((void *)a3 + 20);
      *(_DWORD *)(v12 + 176) = *((_DWORD *)a3 + 44);
      v12 += 192;
      a3 += 12;
    }
    while (a3 != v11);
    unint64_t v6 = (long long *)a2[1];
  }
  a2[2] = v12;
  long long v15 = *a1;
  *a1 = v6;
  a2[1] = v15;
  long long v16 = a1[1];
  a1[1] = (long long *)a2[2];
  a2[2] = v16;
  long long v17 = a1[2];
  a1[2] = (long long *)a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B12CB80(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t result = a4;
  while (a2 != a3)
  {
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(result + 32) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t result = v5;
    *(_OWORD *)(result + 16) = v6;
    *(_DWORD *)(result + 48) = *((_DWORD *)a2 + 12);
    *(_OWORD *)(result + 64) = a2[4];
    *(_OWORD *)(result + 80) = a2[5];
    *(_OWORD *)(result + 96) = a2[6];
    *(void *)(result + 112) = *((void *)a2 + 14);
    *(_OWORD *)(result + 128) = a2[8];
    *(void *)(result + 144) = *((void *)a2 + 18);
    *(void *)(result + 152) = *((void *)a2 + 19);
    *(void *)(result + 160) = *((void *)a2 + 20);
    *(_DWORD *)(result + 176) = *((_DWORD *)a2 + 44);
    result += 192;
    a2 += 12;
  }
  return result;
}

void sub_20B12CBFC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_20B12CC50((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_20B12CC50(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_20B081CD8(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_20B12CC9C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B12CD14((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B12CD14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_20B12CDA8((uint64_t)v12);
  return v10;
}

uint64_t sub_20B12CDA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B12CDE0(a1);
  }
  return a1;
}

void sub_20B12CDE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_20B081CD8(v3);
    }
    v1 += 16;
  }
}

void **sub_20B12CE24(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_20B12CE58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_20B081CD8(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void *sub_20B12CEAC@<X0>(void *a1@<X1>, unsigned int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x80uLL);
  uint64_t result = sub_20B12CF10(v6, a1, a2);
  *a3 = v6 + 4;
  a3[1] = v6;
  return result;
}

void sub_20B12CEFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20B12CF10(void *a1, void *a2, unsigned int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26BF4FCF8;
  sub_20B189604(a1 + 4, *a2, *a3);
  return a1;
}

void sub_20B12CF60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20B12CF74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26BF4FCF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B12CF94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26BF4FCF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B12CFE8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_20B12D010(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_20B12D098(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_20B12D098(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_20B0602EC(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int32x2_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_20B085500(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_20B085618((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_20B0602EC((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __n128 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_20B0602EC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __n128 v53 = operator new(0x1000uLL);
  sub_20B085738(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20B085850((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_20B12D364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B12D3B0(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

void *sub_20B12D410(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_20B07F294(result, a4);
    uint64_t result = sub_20B12D498((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20B12D478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_20B12CBFC(&a9);
  _Unwind_Resume(a1);
}

void *sub_20B12D498(uint64_t a1, void *a2, void *a3, void *a4)
{
  int v4 = a4;
  uint64_t v10 = a4;
  uint64_t v8 = 0;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _OWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *int v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  LOBYTE(v8) = 1;
  sub_20B12D528((uint64_t)v7);
  return v4;
}

uint64_t sub_20B12D528(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B12D560(a1);
  }
  return a1;
}

void sub_20B12D560(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    BOOL v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_20B081CD8(v3);
    }
    v1 -= 16;
  }
}

char *sub_20B12D5A4(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    uint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_20B0602EC(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    long long v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    long long v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    long long v35 = v30;
    uint64_t v5 = sub_20B12D7B4((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[8 * a5];
    unint64_t v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_20B12D77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B12D7B4(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_20B12D87C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20B12D8E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20B1C0434(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B12D900(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B12D938(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_20B12D968(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4F4D8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

char *sub_20B12D9AC(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_20B0602A8(result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      *v7++ = *(void *)(a2 + 16);
      a2 = *(void *)(a2 + 8);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20B12DA08(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B12DB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }

  sub_20B112DEC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20B12DF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B12E100(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20B12E1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B12E544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20B12E6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B12EC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(a1);
}

void sub_20B12F16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B12F370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B12F38C(uint64_t a1, unint64_t a2)
{
  NSLog(&cfstr_Indices_1.isa);
  if (a2)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      printf("%d ", *(unsigned __int8 *)(a1 + v4));
      if (!v5) {
        putchar(10);
      }
      unint64_t v4 = v5++;
    }
    while (v4 < a2);
  }

  return putchar(10);
}

uint64_t sub_20B12F420(uint64_t a1, unint64_t a2)
{
  NSLog(&cfstr_Indices_1.isa);
  if (a2)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      printf("%d ", *(unsigned __int16 *)(a1 + 2 * v4));
      if (!v5) {
        putchar(10);
      }
      unint64_t v4 = v5++;
    }
    while (v4 < a2);
  }

  return putchar(10);
}

uint64_t sub_20B12F4B4(uint64_t a1, unint64_t a2)
{
  NSLog(&cfstr_Indices_1.isa);
  if (a2)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 1;
    do
    {
      printf("%d ", *(_DWORD *)(a1 + 4 * v4));
      if (!v5) {
        putchar(10);
      }
      unint64_t v4 = v5++;
    }
    while (v4 < a2);
  }

  return putchar(10);
}

void sub_20B12F740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B12F998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B12FAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B12FC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B12FC7C(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      sub_20B05D0BC();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      int64_t v12 = operator new(v11);
    }
    else {
      int64_t v12 = 0;
    }
    unint64_t v14 = &v8[(void)v12];
    uint64_t v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    unint64_t v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--unint64_t v14 = v18;
      }
      while (v7 != v17);
      uint64_t v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

BOOL sub_20B12FDA8(char *a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  id v3 = a2;
  memset(v46, 0, sizeof(v46));
  Alembic::AbcCoreOgawa::v12::WriteArchive::WriteArchive((Alembic::AbcCoreOgawa::v12::WriteArchive *)&v45);
  sub_20B07F8E0(__p, a1);
  LODWORD(v39[0]) = 0;
  DWORD2(v39[0]) = 0;
  LODWORD(v30) = 0;
  LODWORD(v31) = 0;
  sub_20B1442CC((uint64_t)v46, (uint64_t)__p, v39, &v30);
  if (SBYTE7(v42) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)std::string __p = 0u;
  Alembic::Abc::v12::OArchive::getTop((uint64_t *)__p, (Alembic::Abc::v12::OArchive *)v46);
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  int v34 = (int)__p[1];
  if (SBYTE7(v43) < 0)
  {
    sub_20B07F994(&v35, (void *)v42, *((unint64_t *)&v42 + 1));
  }
  else
  {
    long long v35 = v42;
    uint64_t v36 = v43;
  }
  uint64_t v33 = MEMORY[0x263F907B8] + 16;
  uint64_t v37 = *((void *)&v43 + 1);
  uint64_t v38 = v44;
  if (v44) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
  }
  sub_20B07F8E0(&v30, "materials");
  LODWORD(v28) = 0;
  int v29 = 0;
  v27[0] = 0;
  void v27[2] = 0;
  v26[0] = 0;
  _OWORD v26[2] = 0;
  MEMORY[0x210531390](v39, &v33, &v30, &v28, v27, v26);
  if (SHIBYTE(v32) < 0) {
    operator delete(v30);
  }
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v33);
  long long v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v4 = v3;
  uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v5, (uint64_t)&v22, v47, 16);
  if (v6)
  {
    uint64_t v7 = *(void *)v23;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(v4);
        }
        sub_20B1302C4(*(void **)(*((void *)&v22 + 1) + 8 * i), (uint64_t)__p);
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v9, (uint64_t)&v22, v47, 16);
    }
    while (v6);
  }

  BOOL v10 = v30 == v31;
  if (v30 != v31)
  {
    int v11 = *((char *)v30 + 23);
    int64_t v12 = v11 >= 0 ? v30 : *(void **)v30;
    uint64_t v13 = v11 >= 0 ? *((unsigned __int8 *)v30 + 23) : *((void *)v30 + 1);
    sub_20B07FC90(MEMORY[0x263F8C0F8], (uint64_t)v12, v13);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v31 - (unsigned char *)v30) >> 3);
    if (v14 >= 2)
    {
      uint64_t v15 = 0;
      unint64_t v16 = v14 - 1;
      unint64_t v17 = (void *)MEMORY[0x263F8C0F8];
      do
      {
        sub_20B07FC90(v17, (uint64_t)"\n", 1);
        int v18 = *((char *)v30 + v15 + 47);
        if (v18 >= 0) {
          uint64_t v19 = (char *)v30 + v15 + 24;
        }
        else {
          uint64_t v19 = *(char **)((char *)v30 + v15 + 24);
        }
        if (v18 >= 0) {
          uint64_t v20 = *((unsigned __int8 *)v30 + v15 + 47);
        }
        else {
          uint64_t v20 = *(void *)((char *)v30 + v15 + 32);
        }
        sub_20B07FC90(v17, (uint64_t)v19, v20);
        v15 += 24;
        --v16;
      }
      while (v16);
    }
  }
  uint64_t v28 = &v30;
  sub_20B0AF458(&v28);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v39);
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)__p);
  MEMORY[0x2105313D0](v46);

  return v10;
}

void sub_20B1300E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **__p,uint64_t a45,int a46,__int16 a47,char a48,unsigned __int8 a49)
{
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&__p);
  MEMORY[0x2105313D0](v51 - 256);
  if (a2 == 1)
  {
    long long v54 = __cxa_begin_catch(a1);
    long long v55 = sub_20B07FC90(MEMORY[0x263F8C0F8], (uint64_t)"Failed to save ", 15);
    sub_20B07F8E0(&__p, v50);
    if ((a49 & 0x80u) == 0) {
      p_p = (void **)&__p;
    }
    else {
      p_p = __p;
    }
    if ((a49 & 0x80u) == 0) {
      uint64_t v57 = a49;
    }
    else {
      uint64_t v57 = a45;
    }
    long long v58 = sub_20B07FC90(v55, (uint64_t)p_p, v57);
    uint64_t v59 = sub_20B07FC90(v58, (uint64_t)" because ", 9);
    long long v60 = (const char *)(*(uint64_t (**)(void *))(*(void *)v54 + 16))(v54);
    size_t v61 = strlen(v60);
    int v62 = sub_20B07FC90(v59, (uint64_t)v60, v61);
    sub_20B1309FC(v62);
    if ((char)a49 < 0) {
      operator delete(__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x20B1300A4);
  }

  _Unwind_Resume(a1);
}

void sub_20B1302C4(void *a1, uint64_t a2)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  id v3 = a1;
  if (v3)
  {
    uint64_t v87 = 0;
    memset(v86, 0, sizeof(v86));
    long long v85 = 0u;
    long long v84 = 0u;
    *(_OWORD *)id v83 = 0u;
    memset(v82, 0, sizeof(v82));
    long long v81 = 0u;
    sub_20B10C0CC((uint64_t)&v81);
    uint64_t v6 = objc_msgSend_name(v3, v4, v5);
    BOOL v7 = v6 == 0;

    if (v7)
    {
      sub_20B07FC90(v82, (uint64_t)"mdlabc_", 7);
      ++dword_267691120;
      std::ostream::operator<<();
    }
    else
    {
      objc_msgSend_name(v3, v8, v9);
      id v10 = objc_claimAutoreleasedReturnValue();
      uint64_t v13 = (const char *)objc_msgSend_UTF8String(v10, v11, v12);
      size_t v14 = strlen(v13);
      uint64_t v15 = sub_20B07FC90(v82, (uint64_t)v13, v14);
      sub_20B07FC90(v15, (uint64_t)"_", 1);
      ++dword_267691120;
      std::ostream::operator<<();
    }
    memset(v80, 0, sizeof(v80));
    int v75 = *(_DWORD *)(a2 + 8);
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20B07F994(&v76, *(void **)(a2 + 16), *(void *)(a2 + 24));
    }
    else
    {
      long long v76 = *(_OWORD *)(a2 + 16);
      uint64_t v77 = *(void *)(a2 + 32);
    }
    uint64_t v17 = *(void *)(a2 + 40);
    uint64_t v16 = *(void *)(a2 + 48);
    uint64_t v74 = MEMORY[0x263F907B8] + 16;
    uint64_t v78 = v17;
    uint64_t v79 = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    std::stringbuf::str();
    LODWORD(v72[0]) = 0;
    DWORD2(v72[0]) = 0;
    LODWORD(v57) = 0;
    int v58 = 0;
    v73[0] = 0;
    v73[2] = 0;
    sub_20B137F20((uint64_t)v80, (uint64_t)&v74, (long long *)__p, v72, &v57, v73);
    if (SHIBYTE(v65.f64[0]) < 0) {
      operator delete(__p[0]);
    }
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v74);
    memset(v72, 0, sizeof(v72));
    Alembic::AbcGeom::v12::XformSample::XformSample((Alembic::AbcGeom::v12::XformSample *)v72);
    uint64_t v20 = objc_msgSend_transform(v3, v18, v19);
    objc_msgSend_localTransformAtTime_(v20, v21, v22, 0.0);
    float32x4_t v49 = v23;
    float32x4_t v50 = v24;
    float32x4_t v51 = v25;
    float32x4_t v52 = v26;

    *(float64x2_t *)std::string __p = vcvtq_f64_f32(*(float32x2_t *)v49.f32);
    float64x2_t v65 = vcvt_hight_f64_f32(v49);
    float64x2_t v66 = vcvtq_f64_f32(*(float32x2_t *)v50.f32);
    float64x2_t v67 = vcvt_hight_f64_f32(v50);
    float64x2_t v68 = vcvtq_f64_f32(*(float32x2_t *)v51.f32);
    float64x2_t v69 = vcvt_hight_f64_f32(v51);
    float64x2_t v70 = vcvtq_f64_f32(*(float32x2_t *)v52.f32);
    float64x2_t v71 = vcvt_hight_f64_f32(v52);
    Alembic::AbcGeom::v12::XformSample::setMatrix();
    Alembic::AbcGeom::v12::OXformSchema::set((Alembic::AbcGeom::v12::OXformSchema *)((char *)&v80[3] + 8), (Alembic::AbcGeom::v12::XformSample *)v72);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v29 = v3;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      uint64_t v32 = objc_msgSend_submeshes(v29, v30, v31);
      uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v60, v89, 16);
      if (v36)
      {
        uint64_t v37 = *(void *)v61;
        do
        {
          for (uint64_t i = 0; i != v36; ++i)
          {
            if (*(void *)v61 != v37) {
              objc_enumerationMutation(v32);
            }
            uint64_t v39 = *(void **)(*((void *)&v60 + 1) + 8 * i);
            if (objc_msgSend_geometryType(v39, v34, v35, *(_OWORD *)&v49, *(_OWORD *)&v50, *(_OWORD *)&v51) == 5)
            {
              std::stringbuf::str();
              if (v59 >= 0) {
                uint64_t v40 = (char *)&v57;
              }
              else {
                uint64_t v40 = (char *)v57;
              }
              sub_20B130AB4(v29, v39, v40, (uint64_t)v80);
            }
            else
            {
              std::stringbuf::str();
              if (v59 >= 0) {
                uint64_t v41 = (char *)&v57;
              }
              else {
                uint64_t v41 = (char *)v57;
              }
              sub_20B13492C(v29, v39, v41, (uint64_t)v80);
            }
            if (v59 < 0) {
              operator delete(v57);
            }
          }
          uint64_t v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v34, (uint64_t)&v60, v89, 16);
        }
        while (v36);
      }
    }
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v42 = objc_msgSend_children(v3, v27, v28, *(_OWORD *)&v49, *(_OWORD *)&v50, *(_OWORD *)&v51);
    uint64_t v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v43, (uint64_t)&v53, v88, 16);
    if (v44)
    {
      uint64_t v45 = *(void *)v54;
      do
      {
        for (uint64_t j = 0; j != v44; ++j)
        {
          if (*(void *)v54 != v45) {
            objc_enumerationMutation(v42);
          }
          sub_20B1302C4(*(void *)(*((void *)&v53 + 1) + 8 * j), v80);
        }
        uint64_t v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(v42, v47, (uint64_t)&v53, v88, 16);
      }
      while (v44);
    }

    __p[0] = (char *)v72 + 8;
    sub_20B144234((void ***)__p);
    *(void *)&v80[0] = &unk_26BF4F738;
    sub_20B139C18((uint64_t)&v80[3] + 8);
    Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)v80);
    *(void *)&long long v81 = *MEMORY[0x263F8C2B8];
    uint64_t v48 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)&v82[-1] + *(void *)(v81 - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    *(void *)&v82[0] = v48;
    *((void *)&v82[0] + 1) = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v84) < 0) {
      operator delete(v83[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2105325E0](v86);
  }
}

void sub_20B130904(_Unwind_Exception *a1)
{
  sub_20B0A8E60((uint64_t)&STACK[0x3E0]);

  _Unwind_Resume(a1);
}

void *sub_20B1309FC(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_20B130AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_20B130AB4(void *a1, void *a2, char *a3, uint64_t a4)
{
  id v6 = a1;
  id v643 = a2;
  v765 = 0;
  v766 = 0;
  unint64_t v767 = 0;
  uint64_t v647 = objc_msgSend_vertexCount(v6, v7, v8);
  id v10 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v6, v9, @"position", 786435);
  uint64_t v13 = objc_msgSend_dataStart(v10, v11, v12);
  uint64_t v16 = objc_msgSend_stride(v10, v14, v15);
  if (v647)
  {
    uint64_t v19 = v16;
    uint64_t v20 = 0;
    uint64_t v21 = v647;
    do
    {
      if (v20 + 12 <= (unint64_t)objc_msgSend_bufferSize(v10, v17, v18))
      {
        unsigned int v22 = *(_DWORD *)(v13 + v20);
        unsigned int v23 = *(_DWORD *)(v13 + v20 + 4);
        int v24 = *(_DWORD *)(v13 + v20 + 8);
        *(void *)&long long v747 = __PAIR64__(v23, v22);
        DWORD2(v747) = v24;
        float32x4_t v25 = v766;
        if ((unint64_t)v766 >= v767)
        {
          uint64_t v26 = sub_20B13AD38((uint64_t *)&v765, (uint64_t)&v747);
        }
        else
        {
          _DWORD *v766 = v22;
          v25[1] = v23;
          uint64_t v26 = (uint64_t)(v25 + 3);
          _OWORD v25[2] = v24;
        }
        v766 = (_DWORD *)v26;
      }
      v20 += v19;
      --v21;
    }
    while (v21);
  }
  v639 = objc_msgSend_indexBufferAsIndexType_(v643, v17, 32);
  v638 = objc_msgSend_map(v639, v27, v28);
  uint64_t v31 = objc_msgSend_bytes(v638, v29, v30);
  uint64_t v645 = a4;
  unint64_t v34 = objc_msgSend_indexCount(v643, v32, v33);
  v762 = 0;
  v763 = 0;
  v764 = 0;
  v759 = 0;
  v760 = 0;
  uint64_t v761 = 0;
  v756 = 0;
  v757 = 0;
  v758 = 0;
  id v644 = v6;
  v642 = v10;
  switch(objc_msgSend_geometryType(v643, v35, v36))
  {
    case 0:
      sub_20B07D7B8((void **)&v762, v34);
      sub_20B07D7B8((void **)&v756, v34);
      if (v34)
      {
        uint64_t v39 = 0;
        uint64_t v40 = v757;
        do
        {
          if (v40 >= v758)
          {
            long long v42 = v756;
            uint64_t v43 = (v40 - v756) >> 2;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v45 = v758 - v756;
            if ((v758 - v756) >> 1 > v44) {
              unint64_t v44 = v45 >> 1;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              uint64_t v47 = (char *)sub_20B05D1AC((uint64_t)&v758, v46);
              long long v42 = v756;
              uint64_t v40 = v757;
            }
            else
            {
              uint64_t v47 = 0;
            }
            uint64_t v48 = &v47[4 * v43];
            *(_DWORD *)uint64_t v48 = 1;
            uint64_t v41 = v48 + 4;
            while (v40 != v42)
            {
              int v49 = *((_DWORD *)v40 - 1);
              v40 -= 4;
              *((_DWORD *)v48 - 1) = v49;
              v48 -= 4;
            }
            v756 = v48;
            v757 = v41;
            v758 = &v47[4 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v40 = 1;
            uint64_t v41 = v40 + 4;
          }
          v757 = v41;
          ++v39;
          uint64_t v40 = v41;
        }
        while (v39 != v34);
        uint64_t v50 = 0;
        float32x4_t v51 = v763;
        do
        {
          int v52 = *(_DWORD *)(v31 + 4 * v50);
          if (v51 >= v764)
          {
            long long v54 = v762;
            uint64_t v55 = (v51 - v762) >> 2;
            unint64_t v56 = v55 + 1;
            if ((unint64_t)(v55 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v57 = v764 - v762;
            if ((v764 - v762) >> 1 > v56) {
              unint64_t v56 = v57 >> 1;
            }
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v56;
            }
            if (v58)
            {
              char v59 = (char *)sub_20B05D1AC((uint64_t)&v764, v58);
              long long v54 = v762;
              float32x4_t v51 = v763;
            }
            else
            {
              char v59 = 0;
            }
            long long v60 = &v59[4 * v55];
            *(_DWORD *)long long v60 = v52;
            long long v53 = v60 + 4;
            while (v51 != v54)
            {
              int v61 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v60 - 1) = v61;
              v60 -= 4;
            }
            v762 = v60;
            v763 = v53;
            v764 = &v59[4 * v58];
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            *(_DWORD *)float32x4_t v51 = v52;
            long long v53 = v51 + 4;
          }
          v763 = v53;
          ++v50;
          float32x4_t v51 = v53;
        }
        while (v50 != v34);
      }
      goto LABEL_298;
    case 1:
      sub_20B07D7B8((void **)&v762, v34);
      unint64_t v117 = v34 >> 1;
      sub_20B07D7B8((void **)&v756, v34 >> 1);
      if (v34 >= 2)
      {
        uint64_t v118 = 0;
        if (v117 <= 1) {
          unint64_t v117 = 1;
        }
        float32x4_t v119 = v757;
        do
        {
          if (v119 >= v758)
          {
            uint64_t v121 = v756;
            uint64_t v122 = (v119 - v756) >> 2;
            unint64_t v123 = v122 + 1;
            if ((unint64_t)(v122 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v124 = v758 - v756;
            if ((v758 - v756) >> 1 > v123) {
              unint64_t v123 = v124 >> 1;
            }
            if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v125 = v123;
            }
            if (v125)
            {
              uint64_t v126 = (char *)sub_20B05D1AC((uint64_t)&v758, v125);
              uint64_t v121 = v756;
              float32x4_t v119 = v757;
            }
            else
            {
              uint64_t v126 = 0;
            }
            uint64_t v127 = &v126[4 * v122];
            *(_DWORD *)uint64_t v127 = 2;
            uint64_t v120 = v127 + 4;
            while (v119 != v121)
            {
              int v128 = *((_DWORD *)v119 - 1);
              v119 -= 4;
              *((_DWORD *)v127 - 1) = v128;
              v127 -= 4;
            }
            v756 = v127;
            v757 = v120;
            v758 = &v126[4 * v125];
            if (v121) {
              operator delete(v121);
            }
          }
          else
          {
            *(_DWORD *)float32x4_t v119 = 2;
            uint64_t v120 = v119 + 4;
          }
          v757 = v120;
          ++v118;
          float32x4_t v119 = v120;
        }
        while (v118 != v117);
      }
      if (v34)
      {
        uint64_t v129 = 0;
        uint64_t v130 = v763;
        do
        {
          int v131 = *(_DWORD *)(v31 + 4 * v129);
          if (v130 >= v764)
          {
            uint64_t v133 = v762;
            uint64_t v134 = (v130 - v762) >> 2;
            unint64_t v135 = v134 + 1;
            if ((unint64_t)(v134 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v136 = v764 - v762;
            if ((v764 - v762) >> 1 > v135) {
              unint64_t v135 = v136 >> 1;
            }
            if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v137 = v135;
            }
            if (v137)
            {
              unint64_t v138 = (char *)sub_20B05D1AC((uint64_t)&v764, v137);
              uint64_t v133 = v762;
              uint64_t v130 = v763;
            }
            else
            {
              unint64_t v138 = 0;
            }
            uint64_t v139 = &v138[4 * v134];
            *(_DWORD *)uint64_t v139 = v131;
            uint64_t v132 = v139 + 4;
            while (v130 != v133)
            {
              int v140 = *((_DWORD *)v130 - 1);
              v130 -= 4;
              *((_DWORD *)v139 - 1) = v140;
              v139 -= 4;
            }
            v762 = v139;
            v763 = v132;
            v764 = &v138[4 * v137];
            if (v133) {
              operator delete(v133);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v130 = v131;
            uint64_t v132 = v130 + 4;
          }
          v763 = v132;
          ++v129;
          uint64_t v130 = v132;
        }
        while (v129 != v34);
      }
      goto LABEL_298;
    case 2:
      sub_20B07D7B8((void **)&v762, v34);
      unint64_t v141 = v34 / 3;
      sub_20B07D7B8((void **)&v756, v34 / 3);
      if (v34 >= 3)
      {
        uint64_t v142 = 0;
        if (v141 <= 1) {
          unint64_t v141 = 1;
        }
        int v143 = v757;
        do
        {
          if (v143 >= v758)
          {
            id v145 = v756;
            uint64_t v146 = (v143 - v756) >> 2;
            unint64_t v147 = v146 + 1;
            if ((unint64_t)(v146 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v148 = v758 - v756;
            if ((v758 - v756) >> 1 > v147) {
              unint64_t v147 = v148 >> 1;
            }
            if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v149 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v149 = v147;
            }
            if (v149)
            {
              uint64_t v150 = (char *)sub_20B05D1AC((uint64_t)&v758, v149);
              id v145 = v756;
              int v143 = v757;
            }
            else
            {
              uint64_t v150 = 0;
            }
            uint64_t v151 = &v150[4 * v146];
            *(_DWORD *)uint64_t v151 = 3;
            uint64_t v144 = v151 + 4;
            while (v143 != v145)
            {
              int v152 = *((_DWORD *)v143 - 1);
              v143 -= 4;
              *((_DWORD *)v151 - 1) = v152;
              v151 -= 4;
            }
            v756 = v151;
            v757 = v144;
            v758 = &v150[4 * v149];
            if (v145) {
              operator delete(v145);
            }
          }
          else
          {
            *(_DWORD *)int v143 = 3;
            uint64_t v144 = v143 + 4;
          }
          v757 = v144;
          ++v142;
          int v143 = v144;
        }
        while (v142 != v141);
      }
      if (v34)
      {
        unint64_t v153 = 0;
        id v154 = v763;
        do
        {
          int v155 = *(_DWORD *)(v31 + 4 * v153);
          uint64_t v156 = v764;
          if (v154 >= v764)
          {
            uint64_t v158 = v762;
            uint64_t v159 = (v154 - v762) >> 2;
            unint64_t v160 = v159 + 1;
            if ((unint64_t)(v159 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v161 = v764 - v762;
            if ((v764 - v762) >> 1 > v160) {
              unint64_t v160 = v161 >> 1;
            }
            if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v162 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v162 = v160;
            }
            if (v162)
            {
              v163 = (char *)sub_20B05D1AC((uint64_t)&v764, v162);
              uint64_t v158 = v762;
              id v154 = v763;
            }
            else
            {
              v163 = 0;
            }
            uint64_t v164 = &v163[4 * v159];
            *(_DWORD *)uint64_t v164 = v155;
            unint64_t v157 = v164 + 4;
            while (v154 != v158)
            {
              int v165 = *((_DWORD *)v154 - 1);
              v154 -= 4;
              *((_DWORD *)v164 - 1) = v165;
              v164 -= 4;
            }
            uint64_t v156 = &v163[4 * v162];
            v762 = v164;
            v763 = v157;
            v764 = v156;
            if (v158)
            {
              operator delete(v158);
              uint64_t v156 = v764;
            }
          }
          else
          {
            *(_DWORD *)id v154 = v155;
            unint64_t v157 = v154 + 4;
          }
          v763 = v157;
          int v166 = *(_DWORD *)(v31 + 4 * v153 + 8);
          if (v157 >= v156)
          {
            uint64_t v168 = v762;
            uint64_t v169 = (v157 - v762) >> 2;
            unint64_t v170 = v169 + 1;
            if ((unint64_t)(v169 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v171 = v156 - v762;
            if (v171 >> 1 > v170) {
              unint64_t v170 = v171 >> 1;
            }
            if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v172 = v170;
            }
            if (v172)
            {
              uint64_t v173 = (char *)sub_20B05D1AC((uint64_t)&v764, v172);
              uint64_t v168 = v762;
              unint64_t v157 = v763;
            }
            else
            {
              uint64_t v173 = 0;
            }
            BOOL v174 = &v173[4 * v169];
            *(_DWORD *)BOOL v174 = v166;
            v167 = v174 + 4;
            while (v157 != v168)
            {
              int v175 = *((_DWORD *)v157 - 1);
              v157 -= 4;
              *((_DWORD *)v174 - 1) = v175;
              v174 -= 4;
            }
            uint64_t v156 = &v173[4 * v172];
            v762 = v174;
            v763 = v167;
            v764 = v156;
            if (v168)
            {
              operator delete(v168);
              uint64_t v156 = v764;
            }
          }
          else
          {
            *(_DWORD *)unint64_t v157 = v166;
            v167 = v157 + 4;
          }
          v763 = v167;
          int v176 = *(_DWORD *)(v31 + 4 * v153 + 4);
          if (v167 >= v156)
          {
            uint64_t v177 = v762;
            uint64_t v178 = (v167 - v762) >> 2;
            unint64_t v179 = v178 + 1;
            if ((unint64_t)(v178 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v180 = v156 - v762;
            if (v180 >> 1 > v179) {
              unint64_t v179 = v180 >> 1;
            }
            if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v181 = v179;
            }
            if (v181)
            {
              uint64_t v182 = (char *)sub_20B05D1AC((uint64_t)&v764, v181);
              uint64_t v177 = v762;
              v167 = v763;
            }
            else
            {
              uint64_t v182 = 0;
            }
            long long v183 = &v182[4 * v178];
            *(_DWORD *)long long v183 = v176;
            id v154 = v183 + 4;
            while (v167 != v177)
            {
              int v184 = *((_DWORD *)v167 - 1);
              v167 -= 4;
              *((_DWORD *)v183 - 1) = v184;
              v183 -= 4;
            }
            v762 = v183;
            v763 = v154;
            v764 = &v182[4 * v181];
            if (v177) {
              operator delete(v177);
            }
          }
          else
          {
            *(_DWORD *)v167 = v176;
            id v154 = v167 + 4;
          }
          v763 = v154;
          v153 += 3;
        }
        while (v34 > v153);
      }
      goto LABEL_298;
    case 3:
      goto LABEL_782;
    case 4:
      sub_20B07D7B8((void **)&v762, v34);
      unint64_t v62 = v34 >> 2;
      sub_20B07D7B8((void **)&v756, v34 >> 2);
      if (v34 >= 4)
      {
        uint64_t v63 = 0;
        if (v62 <= 1) {
          unint64_t v62 = 1;
        }
        uint64_t v64 = v757;
        do
        {
          if (v64 >= v758)
          {
            float64x2_t v66 = v756;
            uint64_t v67 = (v64 - v756) >> 2;
            unint64_t v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v69 = v758 - v756;
            if ((v758 - v756) >> 1 > v68) {
              unint64_t v68 = v69 >> 1;
            }
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v70 = v68;
            }
            if (v70)
            {
              float64x2_t v71 = (char *)sub_20B05D1AC((uint64_t)&v758, v70);
              float64x2_t v66 = v756;
              uint64_t v64 = v757;
            }
            else
            {
              float64x2_t v71 = 0;
            }
            int v72 = &v71[4 * v67];
            *(_DWORD *)int v72 = 4;
            float64x2_t v65 = v72 + 4;
            while (v64 != v66)
            {
              int v73 = *((_DWORD *)v64 - 1);
              v64 -= 4;
              *((_DWORD *)v72 - 1) = v73;
              v72 -= 4;
            }
            v756 = v72;
            v757 = v65;
            v758 = &v71[4 * v70];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v64 = 4;
            float64x2_t v65 = v64 + 4;
          }
          v757 = v65;
          ++v63;
          uint64_t v64 = v65;
        }
        while (v63 != v62);
      }
      if (v34)
      {
        unint64_t v74 = 0;
        uint64_t j = v763;
        do
        {
          int v76 = *(_DWORD *)(v31 + 4 * v74);
          uint64_t v77 = v764;
          if (j >= v764)
          {
            uint64_t v79 = v762;
            uint64_t v80 = (j - v762) >> 2;
            unint64_t v81 = v80 + 1;
            if ((unint64_t)(v80 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v82 = v764 - v762;
            if ((v764 - v762) >> 1 > v81) {
              unint64_t v81 = v82 >> 1;
            }
            if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v83 = v81;
            }
            if (v83)
            {
              long long v84 = (char *)sub_20B05D1AC((uint64_t)&v764, v83);
              uint64_t v79 = v762;
              uint64_t j = v763;
            }
            else
            {
              long long v84 = 0;
            }
            long long v85 = &v84[4 * v80];
            *(_DWORD *)long long v85 = v76;
            uint64_t v78 = v85 + 4;
            while (j != v79)
            {
              int v86 = *((_DWORD *)j - 1);
              j -= 4;
              *((_DWORD *)v85 - 1) = v86;
              v85 -= 4;
            }
            uint64_t v77 = &v84[4 * v83];
            v762 = v85;
            v763 = v78;
            v764 = v77;
            if (v79)
            {
              operator delete(v79);
              uint64_t v77 = v764;
            }
          }
          else
          {
            *(_DWORD *)uint64_t j = v76;
            uint64_t v78 = j + 4;
          }
          v763 = v78;
          uint64_t v87 = 4 * v74;
          int v88 = *(_DWORD *)(v31 + ((4 * v74) | 0xC));
          if (v78 >= v77)
          {
            uint64_t v90 = v762;
            uint64_t v91 = (v78 - v762) >> 2;
            unint64_t v92 = v91 + 1;
            if ((unint64_t)(v91 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v93 = v77 - v762;
            if (v93 >> 1 > v92) {
              unint64_t v92 = v93 >> 1;
            }
            if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v94 = v92;
            }
            if (v94)
            {
              uint64_t v95 = (char *)sub_20B05D1AC((uint64_t)&v764, v94);
              uint64_t v90 = v762;
              uint64_t v78 = v763;
            }
            else
            {
              uint64_t v95 = 0;
            }
            uint64_t v96 = &v95[4 * v91];
            *(_DWORD *)uint64_t v96 = v88;
            long long v89 = v96 + 4;
            while (v78 != v90)
            {
              int v97 = *((_DWORD *)v78 - 1);
              v78 -= 4;
              *((_DWORD *)v96 - 1) = v97;
              v96 -= 4;
            }
            uint64_t v77 = &v95[4 * v94];
            v762 = v96;
            v763 = v89;
            v764 = v77;
            if (v90)
            {
              operator delete(v90);
              uint64_t v77 = v764;
            }
          }
          else
          {
            *(_DWORD *)uint64_t v78 = v88;
            long long v89 = v78 + 4;
          }
          v763 = v89;
          int v98 = *(_DWORD *)(v31 + (v87 | 8));
          if (v89 >= v77)
          {
            id v100 = v762;
            uint64_t v101 = (v89 - v762) >> 2;
            unint64_t v102 = v101 + 1;
            if ((unint64_t)(v101 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v103 = v77 - v762;
            if (v103 >> 1 > v102) {
              unint64_t v102 = v103 >> 1;
            }
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v104 = v102;
            }
            if (v104)
            {
              long long v105 = (char *)sub_20B05D1AC((uint64_t)&v764, v104);
              id v100 = v762;
              long long v89 = v763;
            }
            else
            {
              long long v105 = 0;
            }
            long long v106 = &v105[4 * v101];
            *(_DWORD *)long long v106 = v98;
            for (uint64_t i = v106 + 4; v89 != v100; v106 -= 4)
            {
              int v107 = *((_DWORD *)v89 - 1);
              v89 -= 4;
              *((_DWORD *)v106 - 1) = v107;
            }
            uint64_t v77 = &v105[4 * v104];
            v762 = v106;
            v763 = i;
            v764 = v77;
            if (v100)
            {
              operator delete(v100);
              uint64_t v77 = v764;
            }
          }
          else
          {
            *(_DWORD *)long long v89 = v98;
            uint64_t i = v89 + 4;
          }
          v763 = i;
          int v108 = *(_DWORD *)(v31 + (v87 | 4));
          if (i >= v77)
          {
            uint64_t v109 = v762;
            uint64_t v110 = (i - v762) >> 2;
            unint64_t v111 = v110 + 1;
            if ((unint64_t)(v110 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v112 = v77 - v762;
            if (v112 >> 1 > v111) {
              unint64_t v111 = v112 >> 1;
            }
            if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v113 = v111;
            }
            if (v113)
            {
              long long v114 = (char *)sub_20B05D1AC((uint64_t)&v764, v113);
              uint64_t v109 = v762;
              uint64_t i = v763;
            }
            else
            {
              long long v114 = 0;
            }
            uint64_t v115 = &v114[4 * v110];
            *(_DWORD *)uint64_t v115 = v108;
            for (uint64_t j = v115 + 4; i != v109; v115 -= 4)
            {
              int v116 = *((_DWORD *)i - 1);
              i -= 4;
              *((_DWORD *)v115 - 1) = v116;
            }
            v762 = v115;
            v763 = j;
            v764 = &v114[4 * v113];
            if (v109) {
              operator delete(v109);
            }
          }
          else
          {
            *(_DWORD *)uint64_t i = v108;
            uint64_t j = i + 4;
          }
          v763 = j;
          v74 += 4;
        }
        while (v34 > v74);
      }
      goto LABEL_298;
    case 5:
      v637 = objc_msgSend_topology(v643, v37, v38);
      if (!v637) {
        goto LABEL_298;
      }
      uint64_t v187 = objc_msgSend_topology(v643, v185, v186);
      uint64_t v192 = objc_msgSend_faceTopology(v187, v188, v189);
      if (v192)
      {
        BOOL v193 = objc_msgSend_topology(v643, v190, v191);
        uint64_t v196 = objc_msgSend_faceCount(v193, v194, v195);

        if (!v196) {
          goto LABEL_298;
        }
        uint64_t v199 = objc_msgSend_topology(v643, v197, v198);
        unint64_t v202 = objc_msgSend_faceCount(v199, v200, v201);
        sub_20B07D7B8((void **)&v756, v202);

        std::string::size_type v205 = objc_msgSend_topology(v643, v203, v204);
        uint64_t v208 = objc_msgSend_faceTopology(v205, v206, v207);
        id v211 = objc_msgSend_map(v208, v209, v210);

        v637 = v211;
        uint64_t v216 = objc_msgSend_bytes(v211, v212, v213);
        for (unint64_t k = 0; ; ++k)
        {
          v218 = objc_msgSend_topology(v643, (const char *)v214, v215);
          unint64_t v221 = objc_msgSend_faceCount(v218, v219, v220);

          if (v221 <= k) {
            break;
          }
          int v222 = *(unsigned __int8 *)(v216 + k);
          uint64_t v223 = v757;
          if (v757 >= v758)
          {
            long long v225 = v756;
            uint64_t v226 = (v757 - v756) >> 2;
            unint64_t v227 = v226 + 1;
            if ((unint64_t)(v226 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v228 = v758 - v756;
            if ((v758 - v756) >> 1 > v227) {
              unint64_t v227 = v228 >> 1;
            }
            if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v214 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v214 = v227;
            }
            if (v214)
            {
              uint64_t v229 = (char *)sub_20B05D1AC((uint64_t)&v758, v214);
              long long v225 = v756;
              uint64_t v223 = v757;
            }
            else
            {
              uint64_t v229 = 0;
            }
            uint64_t v230 = &v229[4 * v226];
            *(_DWORD *)uint64_t v230 = v222;
            v224 = v230 + 4;
            while (v223 != v225)
            {
              int v231 = *((_DWORD *)v223 - 1);
              v223 -= 4;
              *((_DWORD *)v230 - 1) = v231;
              v230 -= 4;
            }
            v756 = v230;
            v757 = v224;
            v758 = &v229[4 * v214];
            if (v225) {
              operator delete(v225);
            }
          }
          else
          {
            *(_DWORD *)v757 = v222;
            v224 = v223 + 4;
          }
          v757 = v224;
        }
        std::string v232 = v756;
        v233 = v757;
        if (v757 != v756)
        {
          unint64_t v234 = 0;
          int v235 = 0;
          do
          {
            uint64_t v236 = *(unsigned int *)&v232[4 * v234];
            if ((int)v236 >= 1)
            {
              v237 = v763;
              do
              {
                int v238 = *(_DWORD *)(v31 + 4 * (v236 - 1 + v235));
                if (v237 >= v764)
                {
                  v240 = v762;
                  uint64_t v241 = (v237 - v762) >> 2;
                  unint64_t v242 = v241 + 1;
                  if ((unint64_t)(v241 + 1) >> 62) {
                    sub_20B05D0BC();
                  }
                  uint64_t v243 = v764 - v762;
                  if ((v764 - v762) >> 1 > v242) {
                    unint64_t v242 = v243 >> 1;
                  }
                  if ((unint64_t)v243 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v244 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v244 = v242;
                  }
                  if (v244)
                  {
                    v245 = (char *)sub_20B05D1AC((uint64_t)&v764, v244);
                    v240 = v762;
                    v237 = v763;
                  }
                  else
                  {
                    v245 = 0;
                  }
                  v246 = &v245[4 * v241];
                  *(_DWORD *)v246 = v238;
                  v239 = v246 + 4;
                  while (v237 != v240)
                  {
                    int v247 = *((_DWORD *)v237 - 1);
                    v237 -= 4;
                    *((_DWORD *)v246 - 1) = v247;
                    v246 -= 4;
                  }
                  v762 = v246;
                  v763 = v239;
                  v764 = &v245[4 * v244];
                  if (v240) {
                    operator delete(v240);
                  }
                }
                else
                {
                  *(_DWORD *)v237 = v238;
                  v239 = v237 + 4;
                }
                v763 = v239;
                v237 = v239;
              }
              while (v236-- > 1);
              std::string v232 = v756;
              v233 = v757;
              LODWORD(v236) = *(_DWORD *)&v756[4 * v234];
            }
            v235 += v236;
            ++v234;
          }
          while (v234 < (v233 - v232) >> 2);
        }
      }
      else
      {
      }
LABEL_298:
      sub_20B0A2BE0((uint64_t)&v759, (v763 - v762) >> 2);
      v249 = v762;
      if (v763 != v762)
      {
        unint64_t v250 = (v763 - v762) >> 2;
        v251 = v759;
        if (v250 <= 1) {
          unint64_t v250 = 1;
        }
        do
        {
          int v252 = *(_DWORD *)v249;
          v249 += 4;
          *v251++ = v252;
          --v250;
        }
        while (v250);
      }
      long long v754 = 0uLL;
      int64_t v755 = 0;
      sub_20B07F8E0(&v747, a3);
      v253 = std::string::append((std::string *)&v747, "_geo");
      long long v254 = *(_OWORD *)&v253->__r_.__value_.__l.__data_;
      int64_t v755 = v253->__r_.__value_.__r.__words[2];
      long long v754 = v254;
      v253->__r_.__value_.__l.__size_ = 0;
      v253->__r_.__value_.__r.__words[2] = 0;
      v253->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v748[0]) < 0) {
        operator delete((void *)v747);
      }
      int v255 = 0;
      uint64_t v256 = *MEMORY[0x263F8C2B8];
      uint64_t v258 = *(void *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v257 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      while (Alembic::Abc::v12::OObject::getChildHeader())
      {
        uint64_t v753 = 0;
        memset(v752, 0, sizeof(v752));
        long long v751 = 0u;
        long long v750 = 0u;
        *(_OWORD *)std::string __p = 0u;
        memset(v748, 0, sizeof(v748));
        long long v747 = 0u;
        sub_20B10C0CC((uint64_t)&v747);
        if (v755 >= 0) {
          v259 = &v754;
        }
        else {
          v259 = (long long *)v754;
        }
        if (v755 >= 0) {
          uint64_t v260 = HIBYTE(v755);
        }
        else {
          uint64_t v260 = *((void *)&v754 + 1);
        }
        sub_20B07FC90(v748, (uint64_t)v259, v260);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (SHIBYTE(v755) < 0) {
          operator delete((void *)v754);
        }
        long long v754 = v739;
        int64_t v755 = v740;
        *(void *)&long long v747 = v256;
        *(void *)((char *)&v748[-1] + *(void *)(v256 - 24)) = v258;
        *(void *)&v748[0] = v257;
        *((void *)&v748[0] + 1) = MEMORY[0x263F8C318] + 16;
        if (SHIBYTE(v750) < 0) {
          operator delete(__p[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2105325E0](v752);
        ++v255;
      }
      bzero(&v747, 0x4C8uLL);
      int v742 = *(_DWORD *)(v645 + 8);
      if (*(char *)(v645 + 39) < 0)
      {
        v261 = v644;
        sub_20B07F994(&v743, *(void **)(v645 + 16), *(void *)(v645 + 24));
      }
      else
      {
        long long v743 = *(_OWORD *)(v645 + 16);
        uint64_t v744 = *(void *)(v645 + 32);
        v261 = v644;
      }
      uint64_t v263 = *(void *)(v645 + 40);
      uint64_t v262 = *(void *)(v645 + 48);
      uint64_t v741 = MEMORY[0x263F907B8] + 16;
      uint64_t v745 = v263;
      uint64_t v746 = v262;
      if (v262) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v262 + 8), 1uLL, memory_order_relaxed);
      }
      LODWORD(v739) = 0;
      DWORD2(v739) = 0;
      LODWORD(__dst) = 0;
      int v697 = 0;
      LODWORD(v683) = 0;
      int v684 = 0;
      sub_20B13AEA4((uint64_t)&v747, (uint64_t)&v741, &v754, &v739, &__dst, &v683);
      Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v741);
      bzero(&v739, 0x240uLL);
      sub_20B13CEA8(&__dst, (uint64_t *)&v765);
      sub_20B13D058(&v683, (uint64_t *)&v762);
      sub_20B13D058(&v704, (uint64_t *)&v756);
      v734 = 0;
      unint64_t v735 = 0x100000006;
      uint64_t v738 = 0;
      v736 = 0;
      v737 = 0;
      v729 = 0;
      unint64_t v730 = 0x100000006;
      uint64_t v733 = 0;
      v731 = 0;
      v732 = 0;
      v724 = 0;
      unint64_t v725 = 0x10000000ALL;
      uint64_t v728 = 0;
      v726 = 0;
      v727 = 0;
      v719 = 0;
      unint64_t v720 = 0x100000006;
      uint64_t v723 = 0;
      v721 = 0;
      v722 = 0;
      v714 = 0;
      unint64_t v715 = 0x10000000ALL;
      uint64_t v718 = 0;
      v716 = 0;
      v717 = 0;
      uint64_t v709 = 0;
      uint64_t v710 = 0x100000006;
      uint64_t v713 = 0;
      v711 = 0;
      v712 = 0;
      sub_20B13D0FC((uint64_t)&v739, (uint64_t *)&__dst, &v683, &v704, (uint64_t *)&v734, (uint64_t *)&v729, (uint64_t *)&v724, (uint64_t *)&v719, (uint64_t *)&v714, &v709);
      if (v711)
      {
        v712 = v711;
        operator delete(v711);
      }
      if (v716)
      {
        v717 = v716;
        operator delete(v716);
      }
      if (v721)
      {
        v722 = v721;
        operator delete(v721);
      }
      if (v726)
      {
        v727 = v726;
        operator delete(v726);
      }
      if (v731)
      {
        v732 = v731;
        operator delete(v731);
      }
      if (v736)
      {
        v737 = v736;
        operator delete(v736);
      }
      if (*((void *)&__src + 1))
      {
        uint64_t v706 = *((void *)&__src + 1);
        operator delete(*((void **)&__src + 1));
      }
      if (v685)
      {
        v686 = v685;
        operator delete(v685);
      }
      if (v698)
      {
        v699[0] = v698;
        operator delete(v698);
      }
      id v646 = v261;
      id v264 = v643;
      unint64_t v735 = 0;
      v734 = 0;
      v736 = 0;
      unint64_t v730 = 0;
      v729 = 0;
      v731 = 0;
      unint64_t v725 = 0;
      v724 = 0;
      v726 = 0;
      unint64_t v720 = 0;
      v719 = 0;
      v721 = 0;
      unint64_t v715 = 0;
      v714 = 0;
      v716 = 0;
      v267 = objc_msgSend_topology(v264, v265, v266);

      if (!v267) {
        goto LABEL_456;
      }
      v270 = objc_msgSend_topology(v264, v268, v269);
      v275 = objc_msgSend_edgeCreaseIndices(v270, v271, v272);
      if (!v275) {
        goto LABEL_408;
      }
      v276 = objc_msgSend_topology(v264, v273, v274);
      uint64_t v279 = objc_msgSend_edgeCreaseCount(v276, v277, v278);

      if (v279)
      {
        v282 = objc_msgSend_topology(v264, v280, v281);
        v285 = objc_msgSend_edgeCreaseIndices(v282, v283, v284);
        v270 = objc_msgSend_map(v285, v286, v287);

        uint64_t v292 = objc_msgSend_bytes(v270, v288, v289);
        for (unint64_t m = 0; ; ++m)
        {
          v294 = objc_msgSend_topology(v264, (const char *)v290, v291);
          uint64_t v297 = objc_msgSend_edgeCreaseCount(v294, v295, v296);

          if (m >= 2 * v297) {
            break;
          }
          int v298 = *(_DWORD *)(v292 + 4 * m);
          v299 = (char *)v735;
          if (v735 >= (unint64_t)v736)
          {
            v301 = (char *)v734;
            uint64_t v302 = (uint64_t)(v735 - (void)v734) >> 2;
            unint64_t v303 = v302 + 1;
            if ((unint64_t)(v302 + 1) >> 62) {
              sub_20B05D0BC();
            }
            int64_t v304 = (unsigned char *)v736 - (unsigned char *)v734;
            if (((unsigned char *)v736 - (unsigned char *)v734) >> 1 > v303) {
              unint64_t v303 = v304 >> 1;
            }
            if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v290 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v290 = v303;
            }
            if (v290)
            {
              v305 = (char *)sub_20B05D1AC((uint64_t)&v736, v290);
              v299 = (char *)v735;
              v301 = (char *)v734;
            }
            else
            {
              v305 = 0;
            }
            v306 = &v305[4 * v302];
            *(_DWORD *)v306 = v298;
            v300 = v306 + 4;
            while (v299 != v301)
            {
              int v307 = *((_DWORD *)v299 - 1);
              v299 -= 4;
              *((_DWORD *)v306 - 1) = v307;
              v306 -= 4;
            }
            v734 = v306;
            unint64_t v735 = (unint64_t)v300;
            v736 = &v305[4 * v290];
            if (v301) {
              operator delete(v301);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v735 = v298;
            v300 = v299 + 4;
          }
          unint64_t v735 = (unint64_t)v300;
        }
        unint64_t v308 = 0;
        unint64_t v735 = (unint64_t)v734;
        while (1)
        {
          v309 = objc_msgSend_topology(v264, (const char *)v290, v291);
          unint64_t v312 = objc_msgSend_edgeCreaseCount(v309, v310, v311);

          if (v312 <= v308) {
            break;
          }
          v313 = (char *)v730;
          if (v730 >= (unint64_t)v731)
          {
            v315 = (char *)v729;
            uint64_t v316 = (uint64_t)(v730 - (void)v729) >> 2;
            unint64_t v317 = v316 + 1;
            if ((unint64_t)(v316 + 1) >> 62) {
              sub_20B05D0BC();
            }
            int64_t v318 = (unsigned char *)v731 - (unsigned char *)v729;
            if (((unsigned char *)v731 - (unsigned char *)v729) >> 1 > v317) {
              unint64_t v317 = v318 >> 1;
            }
            if ((unint64_t)v318 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v290 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v290 = v317;
            }
            if (v290)
            {
              v319 = (char *)sub_20B05D1AC((uint64_t)&v731, v290);
              v313 = (char *)v730;
              v315 = (char *)v729;
            }
            else
            {
              v319 = 0;
            }
            v320 = &v319[4 * v316];
            *(_DWORD *)v320 = 2;
            v314 = v320 + 4;
            while (v313 != v315)
            {
              int v321 = *((_DWORD *)v313 - 1);
              v313 -= 4;
              *((_DWORD *)v320 - 1) = v321;
              v320 -= 4;
            }
            v729 = v320;
            unint64_t v730 = (unint64_t)v314;
            v731 = &v319[4 * v290];
            if (v315) {
              operator delete(v315);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v730 = 2;
            v314 = v313 + 4;
          }
          unint64_t v730 = (unint64_t)v314;
          ++v308;
        }
        v322 = objc_msgSend_topology(v264, (const char *)v290, v291);
        v325 = objc_msgSend_edgeCreases(v322, v323, v324);

        if (v325)
        {
          v328 = objc_msgSend_topology(v264, v326, v327);
          v331 = objc_msgSend_edgeCreases(v328, v329, v330);
          v334 = objc_msgSend_map(v331, v332, v333);

          v335 = v334;
          uint64_t v340 = objc_msgSend_bytes(v334, v336, v337);
          for (unint64_t n = 0; ; ++n)
          {
            v342 = objc_msgSend_topology(v264, (const char *)v338, v339);
            unint64_t v345 = objc_msgSend_edgeCreaseCount(v342, v343, v344);

            if (v345 <= n) {
              break;
            }
            v346 = (char *)v725;
            if (v725 >= (unint64_t)v726)
            {
              v348 = (char *)v724;
              uint64_t v349 = (uint64_t)(v725 - (void)v724) >> 2;
              unint64_t v350 = v349 + 1;
              if ((unint64_t)(v349 + 1) >> 62) {
                sub_20B05D0BC();
              }
              int64_t v351 = (unsigned char *)v726 - (unsigned char *)v724;
              if (((unsigned char *)v726 - (unsigned char *)v724) >> 1 > v350) {
                unint64_t v350 = v351 >> 1;
              }
              if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v338 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v338 = v350;
              }
              if (v338)
              {
                v352 = (char *)sub_20B05D1AC((uint64_t)&v726, v338);
                v346 = (char *)v725;
                v348 = (char *)v724;
              }
              else
              {
                v352 = 0;
              }
              v353 = &v352[4 * v349];
              *(_DWORD *)v353 = *(_DWORD *)(v340 + 4 * n);
              v347 = v353 + 4;
              while (v346 != v348)
              {
                int v354 = *((_DWORD *)v346 - 1);
                v346 -= 4;
                *((_DWORD *)v353 - 1) = v354;
                v353 -= 4;
              }
              v724 = v353;
              unint64_t v725 = (unint64_t)v347;
              v726 = &v352[4 * v338];
              if (v348) {
                operator delete(v348);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v725 = *(_DWORD *)(v340 + 4 * n);
              v347 = v346 + 4;
            }
            unint64_t v725 = (unint64_t)v347;
          }
        }
        sub_20B13D058(&__dst, (uint64_t *)&v734);
        sub_20B13D058(&v683, (uint64_t *)&v729);
        sub_20B13F738(&v704, (uint64_t *)&v724);
        sub_20B13D48C((char *)&v739, (uint64_t)&__dst, (uint64_t)&v683, (char *)&v704);
        if (*((void *)&__src + 1))
        {
          uint64_t v706 = *((void *)&__src + 1);
          operator delete(*((void **)&__src + 1));
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v698)
        {
          v699[0] = v698;
          operator delete(v698);
        }
LABEL_408:
      }
      v355 = objc_msgSend_topology(v264, v280, v281);
      v360 = objc_msgSend_vertexCreaseIndices(v355, v356, v357);
      if (!v360) {
        goto LABEL_455;
      }
      v361 = objc_msgSend_topology(v264, v358, v359);
      uint64_t v364 = objc_msgSend_vertexCreaseCount(v361, v362, v363);

      if (v364)
      {
        v367 = objc_msgSend_topology(v264, v365, v366);
        v370 = objc_msgSend_vertexCreaseIndices(v367, v368, v369);
        v355 = objc_msgSend_map(v370, v371, v372);

        uint64_t v377 = objc_msgSend_bytes(v355, v373, v374);
        for (iuint64_t i = 0; ; ++ii)
        {
          v379 = objc_msgSend_topology(v264, (const char *)v375, v376);
          unint64_t v382 = objc_msgSend_vertexCreaseCount(v379, v380, v381);

          if (v382 <= ii) {
            break;
          }
          int v383 = *(_DWORD *)(v377 + 4 * ii);
          v384 = (char *)v720;
          if (v720 >= (unint64_t)v721)
          {
            v386 = (char *)v719;
            uint64_t v387 = (uint64_t)(v720 - (void)v719) >> 2;
            unint64_t v388 = v387 + 1;
            if ((unint64_t)(v387 + 1) >> 62) {
              sub_20B05D0BC();
            }
            int64_t v389 = (unsigned char *)v721 - (unsigned char *)v719;
            if (((unsigned char *)v721 - (unsigned char *)v719) >> 1 > v388) {
              unint64_t v388 = v389 >> 1;
            }
            if ((unint64_t)v389 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v375 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v375 = v388;
            }
            if (v375)
            {
              v390 = (char *)sub_20B05D1AC((uint64_t)&v721, v375);
              v384 = (char *)v720;
              v386 = (char *)v719;
            }
            else
            {
              v390 = 0;
            }
            v391 = &v390[4 * v387];
            *(_DWORD *)v391 = v383;
            v385 = v391 + 4;
            while (v384 != v386)
            {
              int v392 = *((_DWORD *)v384 - 1);
              v384 -= 4;
              *((_DWORD *)v391 - 1) = v392;
              v391 -= 4;
            }
            v719 = v391;
            unint64_t v720 = (unint64_t)v385;
            v721 = &v390[4 * v375];
            if (v386) {
              operator delete(v386);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v720 = v383;
            v385 = v384 + 4;
          }
          unint64_t v720 = (unint64_t)v385;
        }
        v393 = objc_msgSend_topology(v264, (const char *)v375, v376);
        v396 = objc_msgSend_vertexCreases(v393, v394, v395);

        if (v396)
        {
          v399 = objc_msgSend_topology(v264, v397, v398);
          v402 = objc_msgSend_vertexCreases(v399, v400, v401);
          objc_msgSend_map(v402, v403, v404);
          v405 = (char *)objc_claimAutoreleasedReturnValue();

          __sa = v405;
          uint64_t v410 = objc_msgSend_bytes(v405, v406, v407);
          for (juint64_t j = 0; ; ++jj)
          {
            v412 = objc_msgSend_topology(v264, (const char *)v408, v409);
            unint64_t v415 = objc_msgSend_vertexCreaseCount(v412, v413, v414);

            if (v415 <= jj) {
              break;
            }
            v416 = (char *)v715;
            if (v715 >= (unint64_t)v716)
            {
              v418 = (char *)v714;
              uint64_t v419 = (uint64_t)(v715 - (void)v714) >> 2;
              unint64_t v420 = v419 + 1;
              if ((unint64_t)(v419 + 1) >> 62) {
                sub_20B05D0BC();
              }
              int64_t v421 = (unsigned char *)v716 - (unsigned char *)v714;
              if (((unsigned char *)v716 - (unsigned char *)v714) >> 1 > v420) {
                unint64_t v420 = v421 >> 1;
              }
              if ((unint64_t)v421 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v408 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v408 = v420;
              }
              if (v408)
              {
                v422 = (char *)sub_20B05D1AC((uint64_t)&v716, v408);
                v416 = (char *)v715;
                v418 = (char *)v714;
              }
              else
              {
                v422 = 0;
              }
              v423 = &v422[4 * v419];
              *(_DWORD *)v423 = *(_DWORD *)(v410 + 4 * jj);
              v417 = v423 + 4;
              while (v416 != v418)
              {
                int v424 = *((_DWORD *)v416 - 1);
                v416 -= 4;
                *((_DWORD *)v423 - 1) = v424;
                v423 -= 4;
              }
              v714 = v423;
              unint64_t v715 = (unint64_t)v417;
              v716 = &v422[4 * v408];
              if (v418) {
                operator delete(v418);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v715 = *(_DWORD *)(v410 + 4 * jj);
              v417 = v416 + 4;
            }
            unint64_t v715 = (unint64_t)v417;
          }
        }
        sub_20B13D058(&__dst, (uint64_t *)&v719);
        sub_20B13F738(&v683, (uint64_t *)&v714);
        sub_20B13D56C((char *)&v739, (uint64_t *)&__dst, (char *)&v683);
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v698)
        {
          v699[0] = v698;
          operator delete(v698);
        }
LABEL_455:
      }
LABEL_456:
      Alembic::AbcGeom::v12::OSubDSchema::set();
      if (v714)
      {
        unint64_t v715 = (unint64_t)v714;
        operator delete(v714);
      }
      if (v719)
      {
        unint64_t v720 = (unint64_t)v719;
        operator delete(v719);
      }
      if (v724)
      {
        unint64_t v725 = (unint64_t)v724;
        operator delete(v724);
      }
      if (v729)
      {
        unint64_t v730 = (unint64_t)v729;
        operator delete(v729);
      }
      if (v734)
      {
        unint64_t v735 = (unint64_t)v734;
        operator delete(v734);
      }

      v426 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v425, @"textureCoordinate", 786434);
      if (objc_msgSend_format(v426, v427, v428))
      {
        unint64_t v735 = 0;
        v734 = 0;
        v736 = 0;
        uint64_t v431 = objc_msgSend_dataStart(v426, v429, v430);
        uint64_t v434 = objc_msgSend_stride(v426, v432, v433);
        if (v647)
        {
          uint64_t v437 = v434;
          for (kunint64_t k = 0; kk != v647; ++kk)
          {
            if (kk * v437 + 4 <= (unint64_t)objc_msgSend_bufferSize(v426, v435, v436))
            {
              uint64_t v439 = *(void *)(v431 + kk * v437);
              unint64_t v440 = v735;
              if (v735 >= (unint64_t)v736)
              {
                uint64_t v442 = (uint64_t)(v735 - (void)v734) >> 3;
                if ((unint64_t)(v442 + 1) >> 61) {
                  sub_20B05D0BC();
                }
                unint64_t v443 = ((unsigned char *)v736 - (unsigned char *)v734) >> 2;
                if (v443 <= v442 + 1) {
                  unint64_t v443 = v442 + 1;
                }
                if ((unint64_t)((unsigned char *)v736 - (unsigned char *)v734) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v444 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v444 = v443;
                }
                v445 = (char *)sub_20B0602EC((uint64_t)&v736, v444);
                v446 = &v445[8 * v442];
                *(void *)v446 = v439;
                v441 = v446 + 8;
                v447 = (char *)v735;
                v448 = (char *)v734;
                while (v447 != v448)
                {
                  uint64_t v449 = *((void *)v447 - 1);
                  v447 -= 8;
                  *((void *)v446 - 1) = v449;
                  v446 -= 8;
                }
                v734 = v446;
                unint64_t v735 = (unint64_t)v441;
                v736 = &v445[8 * (void)v435];
                if (v448) {
                  operator delete(v448);
                }
              }
              else
              {
                *(void *)unint64_t v735 = v439;
                v441 = (void *)(v440 + 8);
              }
              unint64_t v735 = (unint64_t)v441;
            }
          }
        }
        sub_20B13D60C(&v683, (uint64_t *)&v734);
        sub_20B13D6B0(&v704, (uint64_t *)&v759);
        sub_20B13D754((uint64_t)&__dst, &v683, &v704, 4);
        sub_20B139E04((char *)&v739, (char *)&__dst);
        if (v700)
        {
          v701 = v700;
          operator delete(v700);
        }
        if (v698)
        {
          v699[0] = v698;
          operator delete(v698);
        }
        if (*((void *)&__src + 1))
        {
          uint64_t v706 = *((void *)&__src + 1);
          operator delete(*((void **)&__src + 1));
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v734)
        {
          unint64_t v735 = (unint64_t)v734;
          operator delete(v734);
        }
      }
      sub_20B139EE4((uint64_t)&v748[2] + 8, (uint64_t)&v704);
      v451 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v450, @"anisotropy", 786433);
      if (objc_msgSend_format(v451, v452, v453))
      {
        unint64_t v725 = 0;
        v724 = 0;
        v726 = 0;
        uint64_t v456 = objc_msgSend_dataStart(v451, v454, v455);
        uint64_t v459 = objc_msgSend_stride(v451, v457, v458);
        if (v647)
        {
          uint64_t v462 = v459;
          for (munint64_t m = 0; mm != v647; ++mm)
          {
            if (mm * v462 + 4 <= (unint64_t)objc_msgSend_bufferSize(v451, (const char *)v460, v461))
            {
              int v464 = *(_DWORD *)(v456 + mm * v462);
              v465 = (char *)v725;
              if (v725 >= (unint64_t)v726)
              {
                v467 = (char *)v724;
                uint64_t v468 = (uint64_t)(v725 - (void)v724) >> 2;
                unint64_t v469 = v468 + 1;
                if ((unint64_t)(v468 + 1) >> 62) {
                  sub_20B05D0BC();
                }
                int64_t v470 = (unsigned char *)v726 - (unsigned char *)v724;
                if (((unsigned char *)v726 - (unsigned char *)v724) >> 1 > v469) {
                  unint64_t v469 = v470 >> 1;
                }
                if ((unint64_t)v470 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v460 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v460 = v469;
                }
                if (v460)
                {
                  v471 = (char *)sub_20B05D1AC((uint64_t)&v726, v460);
                  v465 = (char *)v725;
                  v467 = (char *)v724;
                }
                else
                {
                  v471 = 0;
                }
                v472 = &v471[4 * v468];
                *(_DWORD *)v472 = v464;
                v466 = v472 + 4;
                while (v465 != v467)
                {
                  int v473 = *((_DWORD *)v465 - 1);
                  v465 -= 4;
                  *((_DWORD *)v472 - 1) = v473;
                  v472 -= 4;
                }
                v724 = v472;
                unint64_t v725 = (unint64_t)v466;
                v726 = &v471[4 * v460];
                if (v467) {
                  operator delete(v467);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v725 = v464;
                v466 = v465 + 4;
              }
              unint64_t v725 = (unint64_t)v466;
            }
          }
        }
        int v691 = v704;
        if (SHIBYTE(v706) < 0)
        {
          sub_20B07F994(&v692, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v692 = __src;
          uint64_t v693 = v706;
        }
        uint64_t v694 = v707;
        uint64_t v695 = v708;
        if (v708) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v708 + 8), 1uLL, memory_order_relaxed);
        }
        v474 = (char *)objc_msgSend_UTF8String(@"anisotropy", (const char *)v460, v461);
        sub_20B07F8E0(&v719, v474);
        LODWORD(v714) = 0;
        LODWORD(v715) = 0;
        LODWORD(v709) = 0;
        LODWORD(v710) = 0;
        int v689 = 0;
        int v690 = 0;
        sub_20B13D808(&__dst, (uint64_t)&v691, (uint64_t)&v719, 1, 4, 1, &v714, &v709, &v689);
        sub_20B13F738(&v734, (uint64_t *)&v724);
        sub_20B13D6B0(&v729, (uint64_t *)&v759);
        sub_20B13F7DC((uint64_t)&v683, (uint64_t *)&v734, (uint64_t *)&v729, 4);
        sub_20B13A110((uint64_t)&__dst, (uint64_t)&v683);
        if (v687)
        {
          v688 = v687;
          operator delete(v687);
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        if (v736)
        {
          v737 = v736;
          operator delete(v736);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v703);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v702);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v699);
        if (SHIBYTE(v698) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v721) < 0) {
          operator delete(v719);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v691);
        if (v724)
        {
          unint64_t v725 = (unint64_t)v724;
          operator delete(v724);
        }
      }
      v475 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v454, @"binormal", 786435);

      if (objc_msgSend_format(v475, v476, v477))
      {
        unint64_t v725 = 0;
        v724 = 0;
        v726 = 0;
        uint64_t v480 = objc_msgSend_dataStart(v475, v478, v479);
        uint64_t v483 = objc_msgSend_stride(v475, v481, v482);
        if (v647)
        {
          uint64_t v486 = v483;
          uint64_t v487 = 0;
          uint64_t v488 = v647;
          do
          {
            if (v487 + 12 <= (unint64_t)objc_msgSend_bufferSize(v475, v484, v485))
            {
              unsigned int v489 = *(_DWORD *)(v480 + v487);
              unsigned int v490 = *(_DWORD *)(v480 + v487 + 4);
              int v491 = *(_DWORD *)(v480 + v487 + 8);
              long long __dst = (void *)__PAIR64__(v490, v489);
              int v697 = v491;
              unint64_t v492 = v725;
              if (v725 >= (unint64_t)v726)
              {
                uint64_t v493 = sub_20B13AD38((uint64_t *)&v724, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)unint64_t v725 = v489;
                *(_DWORD *)(v492 + 4) = v490;
                uint64_t v493 = v492 + 12;
                *(_DWORD *)(v492 + 8) = v491;
              }
              unint64_t v725 = v493;
            }
            v487 += v486;
            --v488;
          }
          while (v488);
        }
        int v678 = v704;
        if (SHIBYTE(v706) < 0)
        {
          sub_20B07F994(&v679, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v679 = __src;
          uint64_t v680 = v706;
        }
        uint64_t v681 = v707;
        uint64_t v682 = v708;
        if (v708) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v708 + 8), 1uLL, memory_order_relaxed);
        }
        v494 = (char *)objc_msgSend_UTF8String(@"binormal", v484, v485);
        sub_20B07F8E0(&v719, v494);
        LODWORD(v714) = 0;
        LODWORD(v715) = 0;
        LODWORD(v709) = 0;
        LODWORD(v710) = 0;
        int v689 = 0;
        int v690 = 0;
        sub_20B13F890(&__dst, (uint64_t)&v678, (uint64_t)&v719, 1, 4, 1, &v714, &v709, &v689);
        sub_20B140E2C(&v734, (uint64_t *)&v724);
        sub_20B13D6B0(&v729, (uint64_t *)&v759);
        sub_20B140EDC((uint64_t)&v683, (uint64_t *)&v734, (uint64_t *)&v729, 4);
        sub_20B13A534((uint64_t)&__dst, (uint64_t)&v683);
        if (v687)
        {
          v688 = v687;
          operator delete(v687);
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        if (v736)
        {
          v737 = v736;
          operator delete(v736);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v703);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v702);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v699);
        if (SHIBYTE(v698) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v721) < 0) {
          operator delete(v719);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v678);
        if (v724)
        {
          unint64_t v725 = (unint64_t)v724;
          operator delete(v724);
        }
      }
      v495 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v478, @"bitangent", 786435);

      if (objc_msgSend_format(v495, v496, v497))
      {
        unint64_t v725 = 0;
        v724 = 0;
        v726 = 0;
        uint64_t v500 = objc_msgSend_dataStart(v495, v498, v499);
        uint64_t v503 = objc_msgSend_stride(v495, v501, v502);
        if (v647)
        {
          uint64_t v506 = v503;
          uint64_t v507 = 0;
          uint64_t v508 = v647;
          do
          {
            if (v507 + 12 <= (unint64_t)objc_msgSend_bufferSize(v495, v504, v505))
            {
              unsigned int v509 = *(_DWORD *)(v500 + v507);
              unsigned int v510 = *(_DWORD *)(v500 + v507 + 4);
              int v511 = *(_DWORD *)(v500 + v507 + 8);
              long long __dst = (void *)__PAIR64__(v510, v509);
              int v697 = v511;
              unint64_t v512 = v725;
              if (v725 >= (unint64_t)v726)
              {
                uint64_t v513 = sub_20B13AD38((uint64_t *)&v724, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)unint64_t v725 = v509;
                *(_DWORD *)(v512 + 4) = v510;
                uint64_t v513 = v512 + 12;
                *(_DWORD *)(v512 + 8) = v511;
              }
              unint64_t v725 = v513;
            }
            v507 += v506;
            --v508;
          }
          while (v508);
        }
        int v673 = v704;
        if (SHIBYTE(v706) < 0)
        {
          sub_20B07F994(&v674, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v674 = __src;
          uint64_t v675 = v706;
        }
        uint64_t v676 = v707;
        uint64_t v677 = v708;
        if (v708) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v708 + 8), 1uLL, memory_order_relaxed);
        }
        v514 = (char *)objc_msgSend_UTF8String(@"bitangent", v504, v505);
        sub_20B07F8E0(&v719, v514);
        LODWORD(v714) = 0;
        LODWORD(v715) = 0;
        LODWORD(v709) = 0;
        LODWORD(v710) = 0;
        int v689 = 0;
        int v690 = 0;
        sub_20B13F890(&__dst, (uint64_t)&v673, (uint64_t)&v719, 1, 4, 1, &v714, &v709, &v689);
        sub_20B140E2C(&v734, (uint64_t *)&v724);
        sub_20B13D6B0(&v729, (uint64_t *)&v759);
        sub_20B140EDC((uint64_t)&v683, (uint64_t *)&v734, (uint64_t *)&v729, 4);
        sub_20B13A534((uint64_t)&__dst, (uint64_t)&v683);
        if (v687)
        {
          v688 = v687;
          operator delete(v687);
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        if (v736)
        {
          v737 = v736;
          operator delete(v736);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v703);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v702);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v699);
        if (SHIBYTE(v698) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v721) < 0) {
          operator delete(v719);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v673);
        if (v724)
        {
          unint64_t v725 = (unint64_t)v724;
          operator delete(v724);
        }
      }
      v515 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v498, @"tangent", 786435);

      if (objc_msgSend_format(v515, v516, v517))
      {
        unint64_t v725 = 0;
        v724 = 0;
        v726 = 0;
        uint64_t v520 = objc_msgSend_dataStart(v515, v518, v519);
        uint64_t v523 = objc_msgSend_stride(v515, v521, v522);
        if (v647)
        {
          uint64_t v526 = v523;
          uint64_t v527 = 0;
          uint64_t v528 = v647;
          do
          {
            if (v527 + 12 <= (unint64_t)objc_msgSend_bufferSize(v515, v524, v525))
            {
              unsigned int v529 = *(_DWORD *)(v520 + v527);
              unsigned int v530 = *(_DWORD *)(v520 + v527 + 4);
              int v531 = *(_DWORD *)(v520 + v527 + 8);
              long long __dst = (void *)__PAIR64__(v530, v529);
              int v697 = v531;
              unint64_t v532 = v725;
              if (v725 >= (unint64_t)v726)
              {
                uint64_t v533 = sub_20B13AD38((uint64_t *)&v724, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)unint64_t v725 = v529;
                *(_DWORD *)(v532 + 4) = v530;
                uint64_t v533 = v532 + 12;
                *(_DWORD *)(v532 + 8) = v531;
              }
              unint64_t v725 = v533;
            }
            v527 += v526;
            --v528;
          }
          while (v528);
        }
        int v668 = v704;
        if (SHIBYTE(v706) < 0)
        {
          sub_20B07F994(&v669, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v669 = __src;
          uint64_t v670 = v706;
        }
        uint64_t v671 = v707;
        uint64_t v672 = v708;
        if (v708) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v708 + 8), 1uLL, memory_order_relaxed);
        }
        v534 = (char *)objc_msgSend_UTF8String(@"tangent", v524, v525);
        sub_20B07F8E0(&v719, v534);
        LODWORD(v714) = 0;
        LODWORD(v715) = 0;
        LODWORD(v709) = 0;
        LODWORD(v710) = 0;
        int v689 = 0;
        int v690 = 0;
        sub_20B13F890(&__dst, (uint64_t)&v668, (uint64_t)&v719, 1, 4, 1, &v714, &v709, &v689);
        sub_20B140E2C(&v734, (uint64_t *)&v724);
        sub_20B13D6B0(&v729, (uint64_t *)&v759);
        sub_20B140EDC((uint64_t)&v683, (uint64_t *)&v734, (uint64_t *)&v729, 4);
        sub_20B13A534((uint64_t)&__dst, (uint64_t)&v683);
        if (v687)
        {
          v688 = v687;
          operator delete(v687);
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        if (v736)
        {
          v737 = v736;
          operator delete(v736);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v703);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v702);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v699);
        if (SHIBYTE(v698) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v721) < 0) {
          operator delete(v719);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v668);
        if (v724)
        {
          unint64_t v725 = (unint64_t)v724;
          operator delete(v724);
        }
      }
      v535 = objc_msgSend_vertexAttributeDataForAttributeNamed_(v646, v518, @"occlusionValue");

      if (!v535)
      {
        v562 = 0;
        goto LABEL_705;
      }
      if (!objc_msgSend_format(v535, v536, v537))
      {
        v562 = v535;
        goto LABEL_705;
      }
      if ((objc_msgSend_format(v535, v536, v538) & 0xF) == 1)
      {
        v540 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v539, @"occlusionValue", 786433);

        if (!objc_msgSend_format(v540, v541, v542)) {
          goto LABEL_704;
        }
        unint64_t v725 = 0;
        v724 = 0;
        v726 = 0;
        uint64_t v544 = objc_msgSend_dataStart(v540, v536, v543);
        uint64_t v547 = objc_msgSend_stride(v540, v545, v546);
        if (v647)
        {
          uint64_t v550 = v547;
          for (nunint64_t n = 0; nn != v647; ++nn)
          {
            if (nn * v550 + 4 <= (unint64_t)objc_msgSend_bufferSize(v540, (const char *)v548, v549))
            {
              int v552 = *(_DWORD *)(v544 + nn * v550);
              v553 = (char *)v725;
              if (v725 >= (unint64_t)v726)
              {
                v555 = (char *)v724;
                uint64_t v556 = (uint64_t)(v725 - (void)v724) >> 2;
                unint64_t v557 = v556 + 1;
                if ((unint64_t)(v556 + 1) >> 62) {
                  sub_20B05D0BC();
                }
                int64_t v558 = (unsigned char *)v726 - (unsigned char *)v724;
                if (((unsigned char *)v726 - (unsigned char *)v724) >> 1 > v557) {
                  unint64_t v557 = v558 >> 1;
                }
                if ((unint64_t)v558 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v548 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v548 = v557;
                }
                if (v548)
                {
                  v559 = (char *)sub_20B05D1AC((uint64_t)&v726, v548);
                  v553 = (char *)v725;
                  v555 = (char *)v724;
                }
                else
                {
                  v559 = 0;
                }
                v560 = &v559[4 * v556];
                *(_DWORD *)v560 = v552;
                v554 = v560 + 4;
                while (v553 != v555)
                {
                  int v561 = *((_DWORD *)v553 - 1);
                  v553 -= 4;
                  *((_DWORD *)v560 - 1) = v561;
                  v560 -= 4;
                }
                v724 = v560;
                unint64_t v725 = (unint64_t)v554;
                v726 = &v559[4 * v548];
                if (v555) {
                  operator delete(v555);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v725 = v552;
                v554 = v553 + 4;
              }
              unint64_t v725 = (unint64_t)v554;
            }
          }
        }
        int v663 = v704;
        if (SHIBYTE(v706) < 0)
        {
          sub_20B07F994(&v664, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v664 = __src;
          uint64_t v665 = v706;
        }
        uint64_t v666 = v707;
        uint64_t v667 = v708;
        if (v708) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v708 + 8), 1uLL, memory_order_relaxed);
        }
        v585 = (char *)objc_msgSend_UTF8String(@"occlusionValue", (const char *)v548, v549);
        sub_20B07F8E0(&v719, v585);
        LODWORD(v714) = 0;
        LODWORD(v715) = 0;
        LODWORD(v709) = 0;
        LODWORD(v710) = 0;
        int v689 = 0;
        int v690 = 0;
        sub_20B13D808(&__dst, (uint64_t)&v663, (uint64_t)&v719, 1, 4, 1, &v714, &v709, &v689);
        sub_20B13F738(&v734, (uint64_t *)&v724);
        sub_20B13D6B0(&v729, (uint64_t *)&v759);
        sub_20B13F7DC((uint64_t)&v683, (uint64_t *)&v734, (uint64_t *)&v729, 4);
        sub_20B13A110((uint64_t)&__dst, (uint64_t)&v683);
        if (v687)
        {
          v688 = v687;
          operator delete(v687);
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        if (v736)
        {
          v737 = v736;
          operator delete(v736);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v703);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v702);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v699);
        if (SHIBYTE(v698) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v721) < 0) {
          operator delete(v719);
        }
        v586 = (Alembic::Abc::v12::OCompoundProperty *)&v663;
      }
      else
      {
        v540 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v539, @"occlusionValue", 786434);

        if (!objc_msgSend_format(v540, v563, v564)) {
          goto LABEL_704;
        }
        unint64_t v725 = 0;
        v724 = 0;
        v726 = 0;
        uint64_t v566 = objc_msgSend_dataStart(v540, v536, v565);
        uint64_t v569 = objc_msgSend_stride(v540, v567, v568);
        if (v647)
        {
          uint64_t v572 = v569;
          for (uint64_t i1 = 0; i1 != v647; ++i1)
          {
            if (i1 * v572 + 8 <= (unint64_t)objc_msgSend_bufferSize(v540, v570, v571))
            {
              uint64_t v574 = *(void *)(v566 + i1 * v572);
              unint64_t v575 = v725;
              if (v725 >= (unint64_t)v726)
              {
                uint64_t v577 = (uint64_t)(v725 - (void)v724) >> 3;
                if ((unint64_t)(v577 + 1) >> 61) {
                  sub_20B05D0BC();
                }
                unint64_t v578 = ((unsigned char *)v726 - (unsigned char *)v724) >> 2;
                if (v578 <= v577 + 1) {
                  unint64_t v578 = v577 + 1;
                }
                if ((unint64_t)((unsigned char *)v726 - (unsigned char *)v724) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v579 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v579 = v578;
                }
                v580 = (char *)sub_20B0602EC((uint64_t)&v726, v579);
                v581 = &v580[8 * v577];
                *(void *)v581 = v574;
                v576 = v581 + 8;
                v582 = (char *)v725;
                v583 = (char *)v724;
                while (v582 != v583)
                {
                  uint64_t v584 = *((void *)v582 - 1);
                  v582 -= 8;
                  *((void *)v581 - 1) = v584;
                  v581 -= 8;
                }
                v724 = v581;
                unint64_t v725 = (unint64_t)v576;
                v726 = &v580[8 * (void)v570];
                if (v583) {
                  operator delete(v583);
                }
              }
              else
              {
                *(void *)unint64_t v725 = v574;
                v576 = (void *)(v575 + 8);
              }
              unint64_t v725 = (unint64_t)v576;
            }
          }
        }
        int v658 = v704;
        if (SHIBYTE(v706) < 0)
        {
          sub_20B07F994(&v659, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v659 = __src;
          uint64_t v660 = v706;
        }
        uint64_t v661 = v707;
        uint64_t v662 = v708;
        if (v708) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v708 + 8), 1uLL, memory_order_relaxed);
        }
        v587 = (char *)objc_msgSend_UTF8String(@"occlusionValue", v570, v571);
        sub_20B07F8E0(&v719, v587);
        LODWORD(v714) = 0;
        LODWORD(v715) = 0;
        LODWORD(v709) = 0;
        LODWORD(v710) = 0;
        int v689 = 0;
        int v690 = 0;
        sub_20B140F90(&__dst, (uint64_t)&v658, (uint64_t)&v719, 1, 4, 1, &v714, &v709, &v689);
        sub_20B13D60C(&v734, (uint64_t *)&v724);
        sub_20B13D6B0(&v729, (uint64_t *)&v759);
        sub_20B13D754((uint64_t)&v683, (uint64_t *)&v734, (uint64_t *)&v729, 4);
        sub_20B13A90C((uint64_t)&__dst, (uint64_t)&v683);
        if (v687)
        {
          v688 = v687;
          operator delete(v687);
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        if (v736)
        {
          v737 = v736;
          operator delete(v736);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v703);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v702);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v699);
        if (SHIBYTE(v698) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v721) < 0) {
          operator delete(v719);
        }
        v586 = (Alembic::Abc::v12::OCompoundProperty *)&v658;
      }
      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v586);
      if (v724)
      {
        unint64_t v725 = (unint64_t)v724;
        operator delete(v724);
      }
LABEL_704:
      v562 = v540;
LABEL_705:
      v588 = objc_msgSend_vertexAttributeDataForAttributeNamed_(v646, v536, @"color");

      if (!v588)
      {
        v594 = 0;
        goto LABEL_779;
      }
      if (!objc_msgSend_format(v588, v589, v590))
      {
        v594 = v588;
        goto LABEL_779;
      }
      if ((objc_msgSend_format(v588, v591, v592) & 0xF) == 1)
      {
        v594 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v593, @"color", 786433);

        if (!objc_msgSend_format(v594, v595, v596)) {
          goto LABEL_779;
        }
        unint64_t v725 = 0;
        v724 = 0;
        v726 = 0;
        uint64_t v599 = objc_msgSend_dataStart(v594, v597, v598);
        uint64_t v602 = objc_msgSend_stride(v594, v600, v601);
        if (v647)
        {
          uint64_t v605 = v602;
          for (uint64_t i2 = 0; i2 != v647; ++i2)
          {
            if (i2 * v605 + 4 <= (unint64_t)objc_msgSend_bufferSize(v594, (const char *)v603, v604))
            {
              int v607 = *(_DWORD *)(v599 + i2 * v605);
              v608 = (char *)v725;
              if (v725 >= (unint64_t)v726)
              {
                v610 = (char *)v724;
                uint64_t v611 = (uint64_t)(v725 - (void)v724) >> 2;
                unint64_t v612 = v611 + 1;
                if ((unint64_t)(v611 + 1) >> 62) {
                  sub_20B05D0BC();
                }
                int64_t v613 = (unsigned char *)v726 - (unsigned char *)v724;
                if (((unsigned char *)v726 - (unsigned char *)v724) >> 1 > v612) {
                  unint64_t v612 = v613 >> 1;
                }
                if ((unint64_t)v613 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v603 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v603 = v612;
                }
                if (v603)
                {
                  v614 = (char *)sub_20B05D1AC((uint64_t)&v726, v603);
                  v608 = (char *)v725;
                  v610 = (char *)v724;
                }
                else
                {
                  v614 = 0;
                }
                v615 = &v614[4 * v611];
                *(_DWORD *)v615 = v607;
                v609 = v615 + 4;
                while (v608 != v610)
                {
                  int v616 = *((_DWORD *)v608 - 1);
                  v608 -= 4;
                  *((_DWORD *)v615 - 1) = v616;
                  v615 -= 4;
                }
                v724 = v615;
                unint64_t v725 = (unint64_t)v609;
                v726 = &v614[4 * v603];
                if (v610) {
                  operator delete(v610);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v725 = v607;
                v609 = v608 + 4;
              }
              unint64_t v725 = (unint64_t)v609;
            }
          }
        }
        int v653 = v704;
        if (SHIBYTE(v706) < 0)
        {
          sub_20B07F994(&v654, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v654 = __src;
          uint64_t v655 = v706;
        }
        uint64_t v656 = v707;
        uint64_t v657 = v708;
        if (v708) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v708 + 8), 1uLL, memory_order_relaxed);
        }
        v636 = (char *)objc_msgSend_UTF8String(@"color", (const char *)v603, v604);
        sub_20B07F8E0(&v719, v636);
        LODWORD(v714) = 0;
        LODWORD(v715) = 0;
        LODWORD(v709) = 0;
        LODWORD(v710) = 0;
        int v689 = 0;
        int v690 = 0;
        sub_20B13D808(&__dst, (uint64_t)&v653, (uint64_t)&v719, 1, 4, 1, &v714, &v709, &v689);
        sub_20B13F738(&v734, (uint64_t *)&v724);
        sub_20B13D6B0(&v729, (uint64_t *)&v759);
        sub_20B13F7DC((uint64_t)&v683, (uint64_t *)&v734, (uint64_t *)&v729, 4);
        sub_20B13A110((uint64_t)&__dst, (uint64_t)&v683);
        if (v687)
        {
          v688 = v687;
          operator delete(v687);
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        if (v736)
        {
          v737 = v736;
          operator delete(v736);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v703);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v702);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v699);
        if (SHIBYTE(v698) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v721) < 0) {
          operator delete(v719);
        }
        v635 = (Alembic::Abc::v12::OCompoundProperty *)&v653;
      }
      else
      {
        v594 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v646, v593, @"color", 786435);

        if (!objc_msgSend_format(v594, v617, v618)) {
          goto LABEL_779;
        }
        unint64_t v725 = 0;
        v724 = 0;
        v726 = 0;
        uint64_t v621 = objc_msgSend_dataStart(v594, v619, v620);
        uint64_t v624 = objc_msgSend_stride(v594, v622, v623);
        if (v647)
        {
          uint64_t v627 = v624;
          uint64_t v628 = 0;
          do
          {
            if (v628 + 12 <= (unint64_t)objc_msgSend_bufferSize(v594, v625, v626))
            {
              unsigned int v629 = *(_DWORD *)(v621 + v628);
              unsigned int v630 = *(_DWORD *)(v621 + v628 + 4);
              int v631 = *(_DWORD *)(v621 + v628 + 8);
              long long __dst = (void *)__PAIR64__(v630, v629);
              int v697 = v631;
              unint64_t v632 = v725;
              if (v725 >= (unint64_t)v726)
              {
                uint64_t v633 = sub_20B13AD38((uint64_t *)&v724, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)unint64_t v725 = v629;
                *(_DWORD *)(v632 + 4) = v630;
                uint64_t v633 = v632 + 12;
                *(_DWORD *)(v632 + 8) = v631;
              }
              unint64_t v725 = v633;
            }
            v628 += v627;
            --v647;
          }
          while (v647);
        }
        int v648 = v704;
        if (SHIBYTE(v706) < 0)
        {
          sub_20B07F994(&v649, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v649 = __src;
          uint64_t v650 = v706;
        }
        uint64_t v651 = v707;
        uint64_t v652 = v708;
        if (v708) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v708 + 8), 1uLL, memory_order_relaxed);
        }
        v634 = (char *)objc_msgSend_UTF8String(@"color", v625, v626);
        sub_20B07F8E0(&v719, v634);
        LODWORD(v714) = 0;
        LODWORD(v715) = 0;
        LODWORD(v709) = 0;
        LODWORD(v710) = 0;
        int v689 = 0;
        int v690 = 0;
        sub_20B13F890(&__dst, (uint64_t)&v648, (uint64_t)&v719, 1, 4, 1, &v714, &v709, &v689);
        sub_20B140E2C(&v734, (uint64_t *)&v724);
        sub_20B13D6B0(&v729, (uint64_t *)&v759);
        sub_20B140EDC((uint64_t)&v683, (uint64_t *)&v734, (uint64_t *)&v729, 4);
        sub_20B13A534((uint64_t)&__dst, (uint64_t)&v683);
        if (v687)
        {
          v688 = v687;
          operator delete(v687);
        }
        if (v685)
        {
          v686 = v685;
          operator delete(v685);
        }
        if (v731)
        {
          v732 = v731;
          operator delete(v731);
        }
        if (v736)
        {
          v737 = v736;
          operator delete(v736);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v703);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v702);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)v699);
        if (SHIBYTE(v698) < 0) {
          operator delete(__dst);
        }
        if (SHIBYTE(v721) < 0) {
          operator delete(v719);
        }
        v635 = (Alembic::Abc::v12::OCompoundProperty *)&v648;
      }
      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v635);
      if (v724)
      {
        unint64_t v725 = (unint64_t)v724;
        operator delete(v724);
      }
LABEL_779:

      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v704);
      sub_20B14252C((uint64_t)&v739);
      *(void *)&long long v747 = &unk_26BF4F718;
      sub_20B13CD6C((uint64_t)&v748[2] + 8);
      Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v747);
      if (SHIBYTE(v755) < 0) {
        operator delete((void *)v754);
      }
      id v6 = v644;
      id v10 = v642;
LABEL_782:
      if (v756)
      {
        v757 = v756;
        operator delete(v756);
      }
      if (v759)
      {
        v760 = v759;
        operator delete(v759);
      }
      if (v762)
      {
        v763 = v762;
        operator delete(v762);
      }

      if (v765)
      {
        v766 = v765;
        operator delete(v765);
      }

      return;
    default:
      goto LABEL_298;
  }
}

void sub_20B133F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  uint64_t v20 = *(void **)(v18 - 200);
  if (v20)
  {
    *(void *)(v18 - 192) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(v18 - 176);
  if (v21)
  {
    *(void *)(v18 - 168) = v21;
    operator delete(v21);
  }
  unsigned int v22 = *(void **)(v18 - 152);
  if (v22)
  {
    *(void *)(v18 - 144) = v22;
    operator delete(v22);
  }

  unsigned int v23 = *(void **)(v18 - 128);
  if (v23)
  {
    *(void *)(v18 - 120) = v23;
    operator delete(v23);
  }

  _Unwind_Resume(a1);
}

void sub_20B13492C(void *a1, void *a2, char *a3, uint64_t a4)
{
  id v501 = a1;
  id v502 = a2;
  v637 = 0;
  v638 = 0;
  unint64_t v639 = 0;
  uint64_t v506 = objc_msgSend_vertexCount(v501, v6, v7);
  uint64_t v503 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v501, v8, @"position", 786435);
  uint64_t v11 = objc_msgSend_dataStart(v503, v9, v10);
  uint64_t v14 = objc_msgSend_stride(v503, v12, v13);
  if (v506)
  {
    uint64_t v17 = v14;
    uint64_t v18 = 0;
    uint64_t v19 = v506;
    do
    {
      if (v18 + 12 <= (unint64_t)objc_msgSend_bufferSize(v503, v15, v16))
      {
        unsigned int v20 = *(_DWORD *)(v11 + v18);
        unsigned int v21 = *(_DWORD *)(v11 + v18 + 4);
        int v22 = *(_DWORD *)(v11 + v18 + 8);
        *(void *)&long long v619 = __PAIR64__(v21, v20);
        DWORD2(v619) = v22;
        unsigned int v23 = v638;
        if ((unint64_t)v638 >= v639)
        {
          uint64_t v24 = sub_20B13AD38((uint64_t *)&v637, (uint64_t)&v619);
        }
        else
        {
          _DWORD *v638 = v20;
          v23[1] = v21;
          uint64_t v24 = (uint64_t)(v23 + 3);
          v23[2] = v22;
        }
        v638 = (_DWORD *)v24;
      }
      v18 += v17;
      --v19;
    }
    while (v19);
  }
  uint64_t v499 = objc_msgSend_indexBufferAsIndexType_(v502, v15, 32);
  v498 = objc_msgSend_map(v499, v25, v26);
  uint64_t v29 = objc_msgSend_bytes(v498, v27, v28);
  uint64_t v504 = a4;
  unint64_t v32 = objc_msgSend_indexCount(v502, v30, v31);
  v634 = 0;
  v635 = 0;
  v636 = 0;
  int v631 = 0;
  unint64_t v632 = 0;
  uint64_t v633 = 0;
  uint64_t v628 = 0;
  unsigned int v629 = 0;
  unsigned int v630 = 0;
  switch(objc_msgSend_geometryType(v502, v33, v34))
  {
    case 0:
      sub_20B07D7B8((void **)&v634, v32);
      sub_20B07D7B8((void **)&v628, v32);
      if (v32)
      {
        uint64_t v37 = 0;
        uint64_t v38 = v629;
        do
        {
          if (v38 >= v630)
          {
            uint64_t v40 = v628;
            uint64_t v41 = (v38 - v628) >> 2;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v43 = v630 - v628;
            if ((v630 - v628) >> 1 > v42) {
              unint64_t v42 = v43 >> 1;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v44 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44)
            {
              uint64_t v45 = (char *)sub_20B05D1AC((uint64_t)&v630, v44);
              uint64_t v40 = v628;
              uint64_t v38 = v629;
            }
            else
            {
              uint64_t v45 = 0;
            }
            unint64_t v46 = &v45[4 * v41];
            *(_DWORD *)unint64_t v46 = 1;
            uint64_t v39 = v46 + 4;
            while (v38 != v40)
            {
              int v47 = *((_DWORD *)v38 - 1);
              v38 -= 4;
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            uint64_t v628 = v46;
            unsigned int v629 = v39;
            unsigned int v630 = &v45[4 * v44];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v38 = 1;
            uint64_t v39 = v38 + 4;
          }
          unsigned int v629 = v39;
          ++v37;
          uint64_t v38 = v39;
        }
        while (v37 != v32);
        uint64_t v48 = 0;
        int v49 = v635;
        do
        {
          int v50 = *(_DWORD *)(v29 + 4 * v48);
          if (v49 >= v636)
          {
            int v52 = v634;
            uint64_t v53 = (v49 - v634) >> 2;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v55 = v636 - v634;
            if ((v636 - v634) >> 1 > v54) {
              unint64_t v54 = v55 >> 1;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              uint64_t v57 = (char *)sub_20B05D1AC((uint64_t)&v636, v56);
              int v52 = v634;
              int v49 = v635;
            }
            else
            {
              uint64_t v57 = 0;
            }
            unint64_t v58 = &v57[4 * v53];
            *(_DWORD *)unint64_t v58 = v50;
            float32x4_t v51 = v58 + 4;
            while (v49 != v52)
            {
              int v59 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }
            v634 = v58;
            v635 = v51;
            v636 = &v57[4 * v56];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *(_DWORD *)int v49 = v50;
            float32x4_t v51 = v49 + 4;
          }
          v635 = v51;
          ++v48;
          int v49 = v51;
        }
        while (v48 != v32);
      }
      goto LABEL_300;
    case 1:
      sub_20B07D7B8((void **)&v634, v32);
      unint64_t v115 = v32 >> 1;
      sub_20B07D7B8((void **)&v628, v32 >> 1);
      if (v32 >= 2)
      {
        uint64_t v116 = 0;
        if (v115 <= 1) {
          unint64_t v115 = 1;
        }
        unint64_t v117 = v629;
        do
        {
          if (v117 >= v630)
          {
            float32x4_t v119 = v628;
            uint64_t v120 = (v117 - v628) >> 2;
            unint64_t v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v122 = v630 - v628;
            if ((v630 - v628) >> 1 > v121) {
              unint64_t v121 = v122 >> 1;
            }
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v123 = v121;
            }
            if (v123)
            {
              uint64_t v124 = (char *)sub_20B05D1AC((uint64_t)&v630, v123);
              float32x4_t v119 = v628;
              unint64_t v117 = v629;
            }
            else
            {
              uint64_t v124 = 0;
            }
            unint64_t v125 = &v124[4 * v120];
            *(_DWORD *)unint64_t v125 = 2;
            uint64_t v118 = v125 + 4;
            while (v117 != v119)
            {
              int v126 = *((_DWORD *)v117 - 1);
              v117 -= 4;
              *((_DWORD *)v125 - 1) = v126;
              v125 -= 4;
            }
            uint64_t v628 = v125;
            unsigned int v629 = v118;
            unsigned int v630 = &v124[4 * v123];
            if (v119) {
              operator delete(v119);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v117 = 2;
            uint64_t v118 = v117 + 4;
          }
          unsigned int v629 = v118;
          ++v116;
          unint64_t v117 = v118;
        }
        while (v116 != v115);
      }
      if (v32)
      {
        uint64_t v127 = 0;
        int v128 = v635;
        do
        {
          int v129 = *(_DWORD *)(v29 + 4 * v127);
          if (v128 >= v636)
          {
            int v131 = v634;
            uint64_t v132 = (v128 - v634) >> 2;
            unint64_t v133 = v132 + 1;
            if ((unint64_t)(v132 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v134 = v636 - v634;
            if ((v636 - v634) >> 1 > v133) {
              unint64_t v133 = v134 >> 1;
            }
            if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v135 = v133;
            }
            if (v135)
            {
              uint64_t v136 = (char *)sub_20B05D1AC((uint64_t)&v636, v135);
              int v131 = v634;
              int v128 = v635;
            }
            else
            {
              uint64_t v136 = 0;
            }
            unint64_t v137 = &v136[4 * v132];
            *(_DWORD *)unint64_t v137 = v129;
            uint64_t v130 = v137 + 4;
            while (v128 != v131)
            {
              int v138 = *((_DWORD *)v128 - 1);
              v128 -= 4;
              *((_DWORD *)v137 - 1) = v138;
              v137 -= 4;
            }
            v634 = v137;
            v635 = v130;
            v636 = &v136[4 * v135];
            if (v131) {
              operator delete(v131);
            }
          }
          else
          {
            *(_DWORD *)int v128 = v129;
            uint64_t v130 = v128 + 4;
          }
          v635 = v130;
          ++v127;
          int v128 = v130;
        }
        while (v127 != v32);
      }
      goto LABEL_300;
    case 2:
      sub_20B07D7B8((void **)&v634, v32);
      unint64_t v139 = v32 / 3;
      sub_20B07D7B8((void **)&v628, v32 / 3);
      if (v32 >= 3)
      {
        uint64_t v140 = 0;
        if (v139 <= 1) {
          unint64_t v139 = 1;
        }
        unint64_t v141 = v629;
        do
        {
          if (v141 >= v630)
          {
            int v143 = v628;
            uint64_t v144 = (v141 - v628) >> 2;
            unint64_t v145 = v144 + 1;
            if ((unint64_t)(v144 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v146 = v630 - v628;
            if ((v630 - v628) >> 1 > v145) {
              unint64_t v145 = v146 >> 1;
            }
            if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v147 = v145;
            }
            if (v147)
            {
              uint64_t v148 = (char *)sub_20B05D1AC((uint64_t)&v630, v147);
              int v143 = v628;
              unint64_t v141 = v629;
            }
            else
            {
              uint64_t v148 = 0;
            }
            unint64_t v149 = &v148[4 * v144];
            *(_DWORD *)unint64_t v149 = 3;
            uint64_t v142 = v149 + 4;
            while (v141 != v143)
            {
              int v150 = *((_DWORD *)v141 - 1);
              v141 -= 4;
              *((_DWORD *)v149 - 1) = v150;
              v149 -= 4;
            }
            uint64_t v628 = v149;
            unsigned int v629 = v142;
            unsigned int v630 = &v148[4 * v147];
            if (v143) {
              operator delete(v143);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v141 = 3;
            uint64_t v142 = v141 + 4;
          }
          unsigned int v629 = v142;
          ++v140;
          unint64_t v141 = v142;
        }
        while (v140 != v139);
      }
      if (v32)
      {
        unint64_t v151 = 0;
        int v152 = v635;
        do
        {
          int v153 = *(_DWORD *)(v29 + 4 * v151);
          id v154 = v636;
          if (v152 >= v636)
          {
            uint64_t v156 = v634;
            uint64_t v157 = (v152 - v634) >> 2;
            unint64_t v158 = v157 + 1;
            if ((unint64_t)(v157 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v159 = v636 - v634;
            if ((v636 - v634) >> 1 > v158) {
              unint64_t v158 = v159 >> 1;
            }
            if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v160 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v160 = v158;
            }
            if (v160)
            {
              uint64_t v161 = (char *)sub_20B05D1AC((uint64_t)&v636, v160);
              uint64_t v156 = v634;
              int v152 = v635;
            }
            else
            {
              uint64_t v161 = 0;
            }
            unint64_t v162 = &v161[4 * v157];
            *(_DWORD *)unint64_t v162 = v153;
            int v155 = v162 + 4;
            while (v152 != v156)
            {
              int v163 = *((_DWORD *)v152 - 1);
              v152 -= 4;
              *((_DWORD *)v162 - 1) = v163;
              v162 -= 4;
            }
            id v154 = &v161[4 * v160];
            v634 = v162;
            v635 = v155;
            v636 = v154;
            if (v156)
            {
              operator delete(v156);
              id v154 = v636;
            }
          }
          else
          {
            *(_DWORD *)int v152 = v153;
            int v155 = v152 + 4;
          }
          v635 = v155;
          int v164 = *(_DWORD *)(v29 + 4 * v151 + 8);
          if (v155 >= v154)
          {
            int v166 = v634;
            uint64_t v167 = (v155 - v634) >> 2;
            unint64_t v168 = v167 + 1;
            if ((unint64_t)(v167 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v169 = v154 - v634;
            if (v169 >> 1 > v168) {
              unint64_t v168 = v169 >> 1;
            }
            if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v170 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v170 = v168;
            }
            if (v170)
            {
              uint64_t v171 = (char *)sub_20B05D1AC((uint64_t)&v636, v170);
              int v166 = v634;
              int v155 = v635;
            }
            else
            {
              uint64_t v171 = 0;
            }
            unint64_t v172 = &v171[4 * v167];
            *(_DWORD *)unint64_t v172 = v164;
            int v165 = v172 + 4;
            while (v155 != v166)
            {
              int v173 = *((_DWORD *)v155 - 1);
              v155 -= 4;
              *((_DWORD *)v172 - 1) = v173;
              v172 -= 4;
            }
            id v154 = &v171[4 * v170];
            v634 = v172;
            v635 = v165;
            v636 = v154;
            if (v166)
            {
              operator delete(v166);
              id v154 = v636;
            }
          }
          else
          {
            *(_DWORD *)int v155 = v164;
            int v165 = v155 + 4;
          }
          v635 = v165;
          int v174 = *(_DWORD *)(v29 + 4 * v151 + 4);
          if (v165 >= v154)
          {
            int v175 = v634;
            uint64_t v176 = (v165 - v634) >> 2;
            unint64_t v177 = v176 + 1;
            if ((unint64_t)(v176 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v178 = v154 - v634;
            if (v178 >> 1 > v177) {
              unint64_t v177 = v178 >> 1;
            }
            if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v179 = v177;
            }
            if (v179)
            {
              uint64_t v180 = (char *)sub_20B05D1AC((uint64_t)&v636, v179);
              int v175 = v634;
              int v165 = v635;
            }
            else
            {
              uint64_t v180 = 0;
            }
            unint64_t v181 = &v180[4 * v176];
            *(_DWORD *)unint64_t v181 = v174;
            int v152 = v181 + 4;
            while (v165 != v175)
            {
              int v182 = *((_DWORD *)v165 - 1);
              v165 -= 4;
              *((_DWORD *)v181 - 1) = v182;
              v181 -= 4;
            }
            v634 = v181;
            v635 = v152;
            v636 = &v180[4 * v179];
            if (v175) {
              operator delete(v175);
            }
          }
          else
          {
            *(_DWORD *)int v165 = v174;
            int v152 = v165 + 4;
          }
          v635 = v152;
          v151 += 3;
        }
        while (v32 > v151);
      }
      goto LABEL_300;
    case 3:
      goto LABEL_676;
    case 4:
      sub_20B07D7B8((void **)&v634, v32);
      unint64_t v60 = v32 >> 2;
      sub_20B07D7B8((void **)&v628, v32 >> 2);
      if (v32 >= 4)
      {
        uint64_t v61 = 0;
        if (v60 <= 1) {
          unint64_t v60 = 1;
        }
        unint64_t v62 = v629;
        do
        {
          if (v62 >= v630)
          {
            uint64_t v64 = v628;
            uint64_t v65 = (v62 - v628) >> 2;
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v67 = v630 - v628;
            if ((v630 - v628) >> 1 > v66) {
              unint64_t v66 = v67 >> 1;
            }
            if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v68 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v68 = v66;
            }
            if (v68)
            {
              uint64_t v69 = (char *)sub_20B05D1AC((uint64_t)&v630, v68);
              uint64_t v64 = v628;
              unint64_t v62 = v629;
            }
            else
            {
              uint64_t v69 = 0;
            }
            unint64_t v70 = &v69[4 * v65];
            *(_DWORD *)unint64_t v70 = 4;
            uint64_t v63 = v70 + 4;
            while (v62 != v64)
            {
              int v71 = *((_DWORD *)v62 - 1);
              v62 -= 4;
              *((_DWORD *)v70 - 1) = v71;
              v70 -= 4;
            }
            uint64_t v628 = v70;
            unsigned int v629 = v63;
            unsigned int v630 = &v69[4 * v68];
            if (v64) {
              operator delete(v64);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v62 = 4;
            uint64_t v63 = v62 + 4;
          }
          unsigned int v629 = v63;
          ++v61;
          unint64_t v62 = v63;
        }
        while (v61 != v60);
      }
      if (v32)
      {
        unint64_t v72 = 0;
        int v73 = v635;
        do
        {
          int v74 = *(_DWORD *)(v29 + 4 * v72);
          int v75 = v636;
          if (v73 >= v636)
          {
            uint64_t v77 = v634;
            uint64_t v78 = (v73 - v634) >> 2;
            unint64_t v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v80 = v636 - v634;
            if ((v636 - v634) >> 1 > v79) {
              unint64_t v79 = v80 >> 1;
            }
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v81 = v79;
            }
            if (v81)
            {
              uint64_t v82 = (char *)sub_20B05D1AC((uint64_t)&v636, v81);
              uint64_t v77 = v634;
              int v73 = v635;
            }
            else
            {
              uint64_t v82 = 0;
            }
            unint64_t v83 = &v82[4 * v78];
            *(_DWORD *)unint64_t v83 = v74;
            int v76 = v83 + 4;
            while (v73 != v77)
            {
              int v84 = *((_DWORD *)v73 - 1);
              v73 -= 4;
              *((_DWORD *)v83 - 1) = v84;
              v83 -= 4;
            }
            int v75 = &v82[4 * v81];
            v634 = v83;
            v635 = v76;
            v636 = v75;
            if (v77)
            {
              operator delete(v77);
              int v75 = v636;
            }
          }
          else
          {
            *(_DWORD *)int v73 = v74;
            int v76 = v73 + 4;
          }
          v635 = v76;
          uint64_t v85 = 4 * v72;
          int v86 = *(_DWORD *)(v29 + ((4 * v72) | 0xC));
          if (v76 >= v75)
          {
            int v88 = v634;
            uint64_t v89 = (v76 - v634) >> 2;
            unint64_t v90 = v89 + 1;
            if ((unint64_t)(v89 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v91 = v75 - v634;
            if (v91 >> 1 > v90) {
              unint64_t v90 = v91 >> 1;
            }
            if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v92 = v90;
            }
            if (v92)
            {
              uint64_t v93 = (char *)sub_20B05D1AC((uint64_t)&v636, v92);
              int v88 = v634;
              int v76 = v635;
            }
            else
            {
              uint64_t v93 = 0;
            }
            unint64_t v94 = &v93[4 * v89];
            *(_DWORD *)unint64_t v94 = v86;
            uint64_t v87 = v94 + 4;
            while (v76 != v88)
            {
              int v95 = *((_DWORD *)v76 - 1);
              v76 -= 4;
              *((_DWORD *)v94 - 1) = v95;
              v94 -= 4;
            }
            int v75 = &v93[4 * v92];
            v634 = v94;
            v635 = v87;
            v636 = v75;
            if (v88)
            {
              operator delete(v88);
              int v75 = v636;
            }
          }
          else
          {
            *(_DWORD *)int v76 = v86;
            uint64_t v87 = v76 + 4;
          }
          v635 = v87;
          int v96 = *(_DWORD *)(v29 + (v85 | 8));
          if (v87 >= v75)
          {
            int v98 = v634;
            uint64_t v99 = (v87 - v634) >> 2;
            unint64_t v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v101 = v75 - v634;
            if (v101 >> 1 > v100) {
              unint64_t v100 = v101 >> 1;
            }
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v102 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v102 = v100;
            }
            if (v102)
            {
              uint64_t v103 = (char *)sub_20B05D1AC((uint64_t)&v636, v102);
              int v98 = v634;
              uint64_t v87 = v635;
            }
            else
            {
              uint64_t v103 = 0;
            }
            unint64_t v104 = &v103[4 * v99];
            *(_DWORD *)unint64_t v104 = v96;
            int v97 = v104 + 4;
            while (v87 != v98)
            {
              int v105 = *((_DWORD *)v87 - 1);
              v87 -= 4;
              *((_DWORD *)v104 - 1) = v105;
              v104 -= 4;
            }
            int v75 = &v103[4 * v102];
            v634 = v104;
            v635 = v97;
            v636 = v75;
            if (v98)
            {
              operator delete(v98);
              int v75 = v636;
            }
          }
          else
          {
            *(_DWORD *)uint64_t v87 = v96;
            int v97 = v87 + 4;
          }
          v635 = v97;
          int v106 = *(_DWORD *)(v29 + (v85 | 4));
          if (v97 >= v75)
          {
            int v107 = v634;
            uint64_t v108 = (v97 - v634) >> 2;
            unint64_t v109 = v108 + 1;
            if ((unint64_t)(v108 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v110 = v75 - v634;
            if (v110 >> 1 > v109) {
              unint64_t v109 = v110 >> 1;
            }
            if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v111 = v109;
            }
            if (v111)
            {
              uint64_t v112 = (char *)sub_20B05D1AC((uint64_t)&v636, v111);
              int v107 = v634;
              int v97 = v635;
            }
            else
            {
              uint64_t v112 = 0;
            }
            unint64_t v113 = &v112[4 * v108];
            *(_DWORD *)unint64_t v113 = v106;
            int v73 = v113 + 4;
            while (v97 != v107)
            {
              int v114 = *((_DWORD *)v97 - 1);
              v97 -= 4;
              *((_DWORD *)v113 - 1) = v114;
              v113 -= 4;
            }
            v634 = v113;
            v635 = v73;
            v636 = &v112[4 * v111];
            if (v107) {
              operator delete(v107);
            }
          }
          else
          {
            *(_DWORD *)int v97 = v106;
            int v73 = v97 + 4;
          }
          v635 = v73;
          v72 += 4;
        }
        while (v32 > v72);
      }
      goto LABEL_300;
    case 5:
      uint64_t v185 = objc_msgSend_topology(v502, v35, v36);
      if (!v185) {
        goto LABEL_300;
      }
      uint64_t v186 = objc_msgSend_topology(v502, v183, v184);
      uint64_t v191 = objc_msgSend_faceTopology(v186, v187, v188);
      if (v191)
      {
        uint64_t v192 = objc_msgSend_topology(v502, v189, v190);
        uint64_t v195 = objc_msgSend_faceCount(v192, v193, v194);

        if (!v195) {
          goto LABEL_300;
        }
        uint64_t v198 = objc_msgSend_topology(v502, v196, v197);
        unint64_t v201 = objc_msgSend_faceCount(v198, v199, v200);
        sub_20B07D7B8((void **)&v628, v201);

        uint64_t v204 = objc_msgSend_topology(v502, v202, v203);
        uint64_t v207 = objc_msgSend_faceTopology(v204, v205, v206);
        uint64_t v210 = objc_msgSend_map(v207, v208, v209);

        uint64_t v497 = v210;
        uint64_t v215 = objc_msgSend_bytes(v210, v211, v212);
        for (unint64_t i = 0; ; ++i)
        {
          long long v217 = objc_msgSend_topology(v502, (const char *)v213, v214);
          unint64_t v220 = objc_msgSend_faceCount(v217, v218, v219);

          if (v220 <= i) {
            break;
          }
          int v221 = *(unsigned __int8 *)(v215 + i);
          int v222 = v629;
          if (v629 >= v630)
          {
            v224 = v628;
            uint64_t v225 = (v629 - v628) >> 2;
            unint64_t v226 = v225 + 1;
            if ((unint64_t)(v225 + 1) >> 62) {
              sub_20B05D0BC();
            }
            uint64_t v227 = v630 - v628;
            if ((v630 - v628) >> 1 > v226) {
              unint64_t v226 = v227 >> 1;
            }
            if ((unint64_t)v227 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v213 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v213 = v226;
            }
            if (v213)
            {
              uint64_t v228 = (char *)sub_20B05D1AC((uint64_t)&v630, v213);
              v224 = v628;
              int v222 = v629;
            }
            else
            {
              uint64_t v228 = 0;
            }
            uint64_t v229 = &v228[4 * v225];
            *(_DWORD *)uint64_t v229 = v221;
            uint64_t v223 = v229 + 4;
            while (v222 != v224)
            {
              int v230 = *((_DWORD *)v222 - 1);
              v222 -= 4;
              *((_DWORD *)v229 - 1) = v230;
              v229 -= 4;
            }
            uint64_t v628 = v229;
            unsigned int v629 = v223;
            unsigned int v630 = &v228[4 * v213];
            if (v224) {
              operator delete(v224);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v629 = v221;
            uint64_t v223 = v222 + 4;
          }
          unsigned int v629 = v223;
        }
        int v231 = v628;
        std::string v232 = v629;
        if (v629 != v628)
        {
          unint64_t v233 = 0;
          int v234 = 0;
          do
          {
            uint64_t v235 = *(unsigned int *)&v231[4 * v233];
            if ((int)v235 >= 1)
            {
              uint64_t v236 = v635;
              do
              {
                int v237 = *(_DWORD *)(v29 + 4 * (v235 - 1 + v234));
                if (v236 >= v636)
                {
                  v239 = v634;
                  uint64_t v240 = (v236 - v634) >> 2;
                  unint64_t v241 = v240 + 1;
                  if ((unint64_t)(v240 + 1) >> 62) {
                    sub_20B05D0BC();
                  }
                  uint64_t v242 = v636 - v634;
                  if ((v636 - v634) >> 1 > v241) {
                    unint64_t v241 = v242 >> 1;
                  }
                  if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v243 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v243 = v241;
                  }
                  if (v243)
                  {
                    unint64_t v244 = (char *)sub_20B05D1AC((uint64_t)&v636, v243);
                    v239 = v634;
                    uint64_t v236 = v635;
                  }
                  else
                  {
                    unint64_t v244 = 0;
                  }
                  v245 = &v244[4 * v240];
                  *(_DWORD *)v245 = v237;
                  int v238 = v245 + 4;
                  while (v236 != v239)
                  {
                    int v246 = *((_DWORD *)v236 - 1);
                    v236 -= 4;
                    *((_DWORD *)v245 - 1) = v246;
                    v245 -= 4;
                  }
                  v634 = v245;
                  v635 = v238;
                  v636 = &v244[4 * v243];
                  if (v239) {
                    operator delete(v239);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v236 = v237;
                  int v238 = v236 + 4;
                }
                v635 = v238;
                uint64_t v236 = v238;
              }
              while (v235-- > 1);
              int v231 = v628;
              std::string v232 = v629;
              LODWORD(v235) = *(_DWORD *)&v628[4 * v233];
            }
            v234 += v235;
            ++v233;
          }
          while (v233 < (v232 - v231) >> 2);
        }
        uint64_t v185 = v497;
      }
      else
      {
      }
LABEL_300:
      sub_20B0A2BE0((uint64_t)&v631, (v635 - v634) >> 2);
      v248 = v634;
      if (v635 != v634)
      {
        unint64_t v249 = (v635 - v634) >> 2;
        unint64_t v250 = v631;
        if (v249 <= 1) {
          unint64_t v249 = 1;
        }
        do
        {
          int v251 = *(_DWORD *)v248;
          v248 += 4;
          *v250++ = v251;
          --v249;
        }
        while (v249);
      }
      long long v626 = 0uLL;
      int64_t v627 = 0;
      sub_20B07F8E0(&v619, a3);
      int v252 = std::string::append((std::string *)&v619, "_geo");
      long long v253 = *(_OWORD *)&v252->__r_.__value_.__l.__data_;
      int64_t v627 = v252->__r_.__value_.__r.__words[2];
      long long v626 = v253;
      v252->__r_.__value_.__l.__size_ = 0;
      v252->__r_.__value_.__r.__words[2] = 0;
      v252->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v620[0]) < 0) {
        operator delete((void *)v619);
      }
      int v254 = 0;
      uint64_t v255 = *MEMORY[0x263F8C2B8];
      uint64_t v257 = *(void *)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v256 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      while (Alembic::Abc::v12::OObject::getChildHeader())
      {
        uint64_t v625 = 0;
        long long v623 = 0u;
        memset(v624, 0, sizeof(v624));
        long long v621 = 0u;
        long long v622 = 0u;
        memset(v620, 0, sizeof(v620));
        long long v619 = 0u;
        sub_20B10C0CC((uint64_t)&v619);
        if (v627 >= 0) {
          uint64_t v258 = &v626;
        }
        else {
          uint64_t v258 = (long long *)v626;
        }
        if (v627 >= 0) {
          uint64_t v259 = HIBYTE(v627);
        }
        else {
          uint64_t v259 = *((void *)&v626 + 1);
        }
        sub_20B07FC90(v620, (uint64_t)v258, v259);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (SHIBYTE(v627) < 0) {
          operator delete((void *)v626);
        }
        long long v626 = v589;
        int64_t v627 = v590;
        *(void *)&long long v619 = v255;
        *(void *)((char *)&v620[-2] + *(void *)(v255 - 24)) = v257;
        v620[0] = v256;
        v620[1] = MEMORY[0x263F8C318] + 16;
        if (SHIBYTE(v622) < 0) {
          operator delete(*((void **)&v621 + 1));
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2105325E0](v624);
        ++v254;
      }
      bzero(&v619, 0x398uLL);
      int v614 = *(_DWORD *)(v504 + 8);
      if (*(char *)(v504 + 39) < 0)
      {
        sub_20B07F994(&v615, *(void **)(v504 + 16), *(void *)(v504 + 24));
      }
      else
      {
        long long v615 = *(_OWORD *)(v504 + 16);
        uint64_t v616 = *(void *)(v504 + 32);
      }
      uint64_t v261 = *(void *)(v504 + 40);
      uint64_t v260 = *(void *)(v504 + 48);
      uint64_t v613 = MEMORY[0x263F907B8] + 16;
      uint64_t v617 = v261;
      uint64_t v618 = v260;
      if (v260) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v260 + 8), 1uLL, memory_order_relaxed);
      }
      LODWORD(v589) = 0;
      DWORD2(v589) = 0;
      LODWORD(__dst) = 0;
      LODWORD(v556) = 0;
      LODWORD(v573) = 0;
      LODWORD(v574) = 0;
      sub_20B142934((uint64_t)&v619, (uint64_t)&v613, &v626, &v589, &__dst, &v573);
      Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v613);
      long long v611 = 0u;
      long long v612 = 0u;
      long long v609 = 0u;
      long long v610 = 0u;
      long long v607 = 0u;
      long long v608 = 0u;
      long long v605 = 0u;
      long long v606 = 0u;
      long long v603 = 0u;
      long long v604 = 0u;
      long long v601 = 0u;
      long long v602 = 0u;
      long long v599 = 0u;
      long long v600 = 0u;
      long long v597 = 0u;
      long long v598 = 0u;
      long long v595 = 0u;
      long long v596 = 0u;
      long long v593 = 0u;
      long long v594 = 0u;
      long long v591 = 0u;
      long long v592 = 0u;
      long long v589 = 0u;
      long long v590 = 0u;
      sub_20B13CEA8(&v568, (uint64_t *)&v637);
      sub_20B13D058(&v585, (uint64_t *)&v634);
      sub_20B13D058(v582, (uint64_t *)&v628);
      long long __dst = 0;
      uint64_t v556 = 0x20000000ALL;
      long long v557 = 0u;
      long long v558 = 0u;
      uint64_t v559 = 0x100000005;
      v560 = 0;
      uint64_t v562 = 0;
      int v561 = 0;
      int v563 = 127;
      uint64_t v573 = 0;
      uint64_t v574 = 0x30000000ALL;
      long long v575 = 0u;
      long long v576 = 0u;
      uint64_t v577 = 0x100000005;
      unint64_t v578 = 0;
      uint64_t v580 = 0;
      unint64_t v579 = 0;
      int v581 = 127;
      sub_20B143B90((uint64_t)&v589, &v568, (uint64_t *)&v585, v582, (uint64_t)&__dst, &v573);
      if (v578)
      {
        unint64_t v579 = v578;
        operator delete(v578);
      }
      if ((void)v575)
      {
        *((void *)&v575 + 1) = v575;
        operator delete((void *)v575);
      }
      if (v560)
      {
        int v561 = v560;
        operator delete(v560);
      }
      if ((void)v557)
      {
        *((void *)&v557 + 1) = v557;
        operator delete((void *)v557);
      }
      if (v583)
      {
        uint64_t v584 = v583;
        operator delete(v583);
      }
      if (v587)
      {
        v588 = v587;
        operator delete(v587);
      }
      if (*((void *)&__src + 1))
      {
        uint64_t v570 = *((void *)&__src + 1);
        operator delete(*((void **)&__src + 1));
      }
      id v262 = v501;
      id v263 = v502;
      v586 = 0;
      v585 = 0;
      v587 = 0;
      v265 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v264, @"normal", 786435);
      if (objc_msgSend_format(v265, v266, v267))
      {
        uint64_t v270 = objc_msgSend_dataStart(v265, v268, v269);
        uint64_t v275 = objc_msgSend_stride(v265, v271, v272);
        uint64_t v276 = 0;
        for (unint64_t j = 0; j < objc_msgSend_vertexCount(v262, v273, v274); ++j)
        {
          if (v276 + 12 <= (unint64_t)objc_msgSend_bufferSize(v265, v278, v279))
          {
            unsigned int v280 = *(_DWORD *)(v270 + v276);
            unsigned int v281 = *(_DWORD *)(v270 + v276 + 4);
            int v282 = *(_DWORD *)(v270 + v276 + 8);
            long long __dst = (void *)__PAIR64__(v281, v280);
            LODWORD(v556) = v282;
            v283 = v586;
            if (v586 >= v587)
            {
              uint64_t v284 = sub_20B143EC0((uint64_t *)&v585, (uint64_t)&__dst);
            }
            else
            {
              *(_DWORD *)v586 = v280;
              *((_DWORD *)v283 + 1) = v281;
              uint64_t v284 = (uint64_t)(v283 + 12);
              *((_DWORD *)v283 + 2) = v282;
            }
            v586 = (char *)v284;
          }
          v276 += v275;
        }
        sub_20B14402C(&v573, (uint64_t *)&v585);
        sub_20B13D6B0(&v568, (uint64_t *)&v631);
        sub_20B1440DC((uint64_t)&__dst, &v573, &v568, 4);
        sub_20B143E24((char *)&v589, (char *)&__dst);
        if (v560)
        {
          int v561 = v560;
          operator delete(v560);
        }
        if ((void)v557)
        {
          *((void *)&v557 + 1) = v557;
          operator delete((void *)v557);
        }
        if (*((void *)&__src + 1))
        {
          uint64_t v570 = *((void *)&__src + 1);
          operator delete(*((void **)&__src + 1));
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
      }
      Alembic::AbcGeom::v12::OPolyMeshSchema::set();

      if (v585)
      {
        v586 = (char *)v585;
        operator delete(v585);
      }

      v286 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v285, @"textureCoordinate", 786434);
      uint64_t v505 = v286;
      if (objc_msgSend_format(v286, v287, v288))
      {
        v586 = 0;
        v585 = 0;
        v587 = 0;
        uint64_t v291 = objc_msgSend_dataStart(v286, v289, v290);
        uint64_t v294 = objc_msgSend_stride(v286, v292, v293);
        if (v506)
        {
          uint64_t v297 = v294;
          for (uint64_t k = 0; k != v506; ++k)
          {
            if (k * v297 + 4 <= (unint64_t)objc_msgSend_bufferSize(v286, v295, v296))
            {
              uint64_t v299 = *(void *)(v291 + k * v297);
              v300 = v586;
              if (v586 >= v587)
              {
                uint64_t v302 = (v586 - (unsigned char *)v585) >> 3;
                if ((unint64_t)(v302 + 1) >> 61) {
                  sub_20B05D0BC();
                }
                unint64_t v303 = ((unsigned char *)v587 - (unsigned char *)v585) >> 2;
                if (v303 <= v302 + 1) {
                  unint64_t v303 = v302 + 1;
                }
                if ((unint64_t)((unsigned char *)v587 - (unsigned char *)v585) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v304 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v304 = v303;
                }
                v305 = (char *)sub_20B0602EC((uint64_t)&v587, v304);
                v306 = &v305[8 * v302];
                *(void *)v306 = v299;
                v301 = v306 + 8;
                int v307 = v586;
                unint64_t v308 = (char *)v585;
                if (v586 == v585)
                {
                  v286 = v505;
                }
                else
                {
                  v286 = v505;
                  do
                  {
                    uint64_t v309 = *((void *)v307 - 1);
                    v307 -= 8;
                    *((void *)v306 - 1) = v309;
                    v306 -= 8;
                  }
                  while (v307 != v308);
                }
                v585 = v306;
                v586 = v301;
                v587 = &v305[8 * (void)v295];
                if (v308) {
                  operator delete(v308);
                }
              }
              else
              {
                *(void *)v586 = v299;
                v301 = v300 + 8;
              }
              v586 = v301;
            }
          }
        }
        sub_20B13D60C(&v573, (uint64_t *)&v585);
        sub_20B13D6B0(&v568, (uint64_t *)&v631);
        sub_20B13D754((uint64_t)&__dst, &v573, &v568, 4);
        sub_20B142620((char *)&v589, (uint64_t)&__dst);
        if (v560)
        {
          int v561 = v560;
          operator delete(v560);
        }
        if ((void)v557)
        {
          *((void *)&v557 + 1) = v557;
          operator delete((void *)v557);
        }
        if (*((void *)&__src + 1))
        {
          uint64_t v570 = *((void *)&__src + 1);
          operator delete(*((void **)&__src + 1));
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v585)
        {
          v586 = (char *)v585;
          operator delete(v585);
        }
      }
      sub_20B1426B4((uint64_t)&v620[5], (uint64_t)&v568);
      uint64_t v311 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v310, @"anisotropy", 786433);
      if (objc_msgSend_format(v311, v312, v313))
      {
        uint64_t v566 = 0;
        uint64_t v565 = 0;
        v567 = 0;
        uint64_t v316 = objc_msgSend_dataStart(v311, v314, v315);
        uint64_t v319 = objc_msgSend_stride(v311, v317, v318);
        if (v506)
        {
          uint64_t v322 = v319;
          for (uint64_t m = 0; m != v506; ++m)
          {
            if (m * v322 + 4 <= (unint64_t)objc_msgSend_bufferSize(v311, (const char *)v320, v321))
            {
              int v324 = *(_DWORD *)(v316 + m * v322);
              v325 = v566;
              if (v566 >= v567)
              {
                uint64_t v327 = (char *)v565;
                uint64_t v328 = (v566 - (unsigned char *)v565) >> 2;
                unint64_t v329 = v328 + 1;
                if ((unint64_t)(v328 + 1) >> 62) {
                  sub_20B05D0BC();
                }
                uint64_t v330 = v567 - (unsigned char *)v565;
                if ((v567 - (unsigned char *)v565) >> 1 > v329) {
                  unint64_t v329 = v330 >> 1;
                }
                if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v320 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v320 = v329;
                }
                if (v320)
                {
                  v331 = (char *)sub_20B05D1AC((uint64_t)&v567, v320);
                  v325 = v566;
                  uint64_t v327 = (char *)v565;
                }
                else
                {
                  v331 = 0;
                }
                v332 = &v331[4 * v328];
                *(_DWORD *)v332 = v324;
                v326 = v332 + 4;
                while (v325 != v327)
                {
                  int v333 = *((_DWORD *)v325 - 1);
                  v325 -= 4;
                  *((_DWORD *)v332 - 1) = v333;
                  v332 -= 4;
                }
                uint64_t v565 = v332;
                uint64_t v566 = v326;
                v567 = &v331[4 * v320];
                if (v327) {
                  operator delete(v327);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v566 = v324;
                v326 = v325 + 4;
              }
              uint64_t v566 = v326;
              v286 = v505;
            }
          }
        }
        int v550 = v568;
        if (SHIBYTE(v570) < 0)
        {
          sub_20B07F994(&v551, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v551 = __src;
          uint64_t v552 = v570;
        }
        uint64_t v553 = v571;
        uint64_t v554 = v572;
        if (v572) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
        }
        v334 = (char *)objc_msgSend_UTF8String(@"anisotropy", (const char *)v320, v321);
        sub_20B07F8E0(v548, v334);
        int v546 = 0;
        int v547 = 0;
        int v544 = 0;
        int v545 = 0;
        int v542 = 0;
        int v543 = 0;
        sub_20B13D808(&__dst, (uint64_t)&v550, (uint64_t)v548, 1, 4, 1, &v546, &v544, &v542);
        sub_20B13F738(&v585, (uint64_t *)&v565);
        sub_20B13D6B0(v582, (uint64_t *)&v631);
        sub_20B13F7DC((uint64_t)&v573, (uint64_t *)&v585, v582, 4);
        sub_20B13A110((uint64_t)&__dst, (uint64_t)&v573);
        if (v578)
        {
          unint64_t v579 = v578;
          operator delete(v578);
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v583)
        {
          uint64_t v584 = v583;
          operator delete(v583);
        }
        if (v587)
        {
          v588 = v587;
          operator delete(v587);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v564);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v562);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v557 + 8));
        if (SBYTE7(v557) < 0) {
          operator delete(__dst);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v550);
        if (v565)
        {
          uint64_t v566 = (char *)v565;
          operator delete(v565);
        }
      }
      v335 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v314, @"binormal", 786435);

      if (objc_msgSend_format(v335, v336, v337))
      {
        uint64_t v566 = 0;
        uint64_t v565 = 0;
        v567 = 0;
        uint64_t v340 = objc_msgSend_dataStart(v335, v338, v339);
        uint64_t v343 = objc_msgSend_stride(v335, v341, v342);
        if (v506)
        {
          uint64_t v346 = v343;
          uint64_t v347 = 0;
          uint64_t v348 = v506;
          do
          {
            if (v347 + 12 <= (unint64_t)objc_msgSend_bufferSize(v335, v344, v345))
            {
              unsigned int v349 = *(_DWORD *)(v340 + v347);
              unsigned int v350 = *(_DWORD *)(v340 + v347 + 4);
              int v351 = *(_DWORD *)(v340 + v347 + 8);
              long long __dst = (void *)__PAIR64__(v350, v349);
              LODWORD(v556) = v351;
              v352 = v566;
              if (v566 >= v567)
              {
                uint64_t v353 = sub_20B13AD38((uint64_t *)&v565, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)uint64_t v566 = v349;
                *((_DWORD *)v352 + 1) = v350;
                uint64_t v353 = (uint64_t)(v352 + 12);
                *((_DWORD *)v352 + 2) = v351;
              }
              uint64_t v566 = (char *)v353;
            }
            v347 += v346;
            --v348;
          }
          while (v348);
        }
        int v537 = v568;
        if (SHIBYTE(v570) < 0)
        {
          sub_20B07F994(&v538, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v538 = __src;
          uint64_t v539 = v570;
        }
        uint64_t v540 = v571;
        uint64_t v541 = v572;
        if (v572) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
        }
        int v354 = (char *)objc_msgSend_UTF8String(@"binormal", v344, v345);
        sub_20B07F8E0(v548, v354);
        int v546 = 0;
        int v547 = 0;
        int v544 = 0;
        int v545 = 0;
        int v542 = 0;
        int v543 = 0;
        sub_20B13F890(&__dst, (uint64_t)&v537, (uint64_t)v548, 1, 4, 1, &v546, &v544, &v542);
        sub_20B140E2C(&v585, (uint64_t *)&v565);
        sub_20B13D6B0(v582, (uint64_t *)&v631);
        sub_20B140EDC((uint64_t)&v573, (uint64_t *)&v585, v582, 4);
        sub_20B13A534((uint64_t)&__dst, (uint64_t)&v573);
        if (v578)
        {
          unint64_t v579 = v578;
          operator delete(v578);
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v583)
        {
          uint64_t v584 = v583;
          operator delete(v583);
        }
        if (v587)
        {
          v588 = v587;
          operator delete(v587);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v564);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v562);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v557 + 8));
        if (SBYTE7(v557) < 0) {
          operator delete(__dst);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v537);
        if (v565)
        {
          uint64_t v566 = (char *)v565;
          operator delete(v565);
        }
      }
      v355 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v338, @"bitangent", 786435);

      if (objc_msgSend_format(v355, v356, v357))
      {
        uint64_t v566 = 0;
        uint64_t v565 = 0;
        v567 = 0;
        uint64_t v360 = objc_msgSend_dataStart(v355, v358, v359);
        uint64_t v363 = objc_msgSend_stride(v355, v361, v362);
        if (v506)
        {
          uint64_t v366 = v363;
          uint64_t v367 = 0;
          uint64_t v368 = v506;
          do
          {
            if (v367 + 12 <= (unint64_t)objc_msgSend_bufferSize(v355, v364, v365))
            {
              unsigned int v369 = *(_DWORD *)(v360 + v367);
              unsigned int v370 = *(_DWORD *)(v360 + v367 + 4);
              int v371 = *(_DWORD *)(v360 + v367 + 8);
              long long __dst = (void *)__PAIR64__(v370, v369);
              LODWORD(v556) = v371;
              uint64_t v372 = v566;
              if (v566 >= v567)
              {
                uint64_t v373 = sub_20B13AD38((uint64_t *)&v565, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)uint64_t v566 = v369;
                *((_DWORD *)v372 + 1) = v370;
                uint64_t v373 = (uint64_t)(v372 + 12);
                *((_DWORD *)v372 + 2) = v371;
              }
              uint64_t v566 = (char *)v373;
            }
            v367 += v366;
            --v368;
          }
          while (v368);
        }
        int v532 = v568;
        if (SHIBYTE(v570) < 0)
        {
          sub_20B07F994(&v533, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v533 = __src;
          uint64_t v534 = v570;
        }
        uint64_t v535 = v571;
        uint64_t v536 = v572;
        if (v572) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v374 = (char *)objc_msgSend_UTF8String(@"bitangent", v364, v365);
        sub_20B07F8E0(v548, v374);
        int v546 = 0;
        int v547 = 0;
        int v544 = 0;
        int v545 = 0;
        int v542 = 0;
        int v543 = 0;
        sub_20B13F890(&__dst, (uint64_t)&v532, (uint64_t)v548, 1, 4, 1, &v546, &v544, &v542);
        sub_20B140E2C(&v585, (uint64_t *)&v565);
        sub_20B13D6B0(v582, (uint64_t *)&v631);
        sub_20B140EDC((uint64_t)&v573, (uint64_t *)&v585, v582, 4);
        sub_20B13A534((uint64_t)&__dst, (uint64_t)&v573);
        if (v578)
        {
          unint64_t v579 = v578;
          operator delete(v578);
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v583)
        {
          uint64_t v584 = v583;
          operator delete(v583);
        }
        if (v587)
        {
          v588 = v587;
          operator delete(v587);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v564);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v562);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v557 + 8));
        if (SBYTE7(v557) < 0) {
          operator delete(__dst);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v532);
        if (v565)
        {
          uint64_t v566 = (char *)v565;
          operator delete(v565);
        }
      }
      unint64_t v375 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v358, @"tangent", 786435);

      if (objc_msgSend_format(v375, v376, v377))
      {
        uint64_t v566 = 0;
        uint64_t v565 = 0;
        v567 = 0;
        uint64_t v380 = objc_msgSend_dataStart(v375, v378, v379);
        uint64_t v383 = objc_msgSend_stride(v375, v381, v382);
        if (v506)
        {
          uint64_t v386 = v383;
          uint64_t v387 = 0;
          uint64_t v388 = v506;
          do
          {
            if (v387 + 12 <= (unint64_t)objc_msgSend_bufferSize(v375, v384, v385))
            {
              unsigned int v389 = *(_DWORD *)(v380 + v387);
              unsigned int v390 = *(_DWORD *)(v380 + v387 + 4);
              int v391 = *(_DWORD *)(v380 + v387 + 8);
              long long __dst = (void *)__PAIR64__(v390, v389);
              LODWORD(v556) = v391;
              int v392 = v566;
              if (v566 >= v567)
              {
                uint64_t v393 = sub_20B13AD38((uint64_t *)&v565, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)uint64_t v566 = v389;
                *((_DWORD *)v392 + 1) = v390;
                uint64_t v393 = (uint64_t)(v392 + 12);
                *((_DWORD *)v392 + 2) = v391;
              }
              uint64_t v566 = (char *)v393;
            }
            v387 += v386;
            --v388;
          }
          while (v388);
        }
        int v527 = v568;
        if (SHIBYTE(v570) < 0)
        {
          sub_20B07F994(&v528, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v528 = __src;
          uint64_t v529 = v570;
        }
        uint64_t v530 = v571;
        uint64_t v531 = v572;
        if (v572) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
        }
        v394 = (char *)objc_msgSend_UTF8String(@"tangent", v384, v385);
        sub_20B07F8E0(v548, v394);
        int v546 = 0;
        int v547 = 0;
        int v544 = 0;
        int v545 = 0;
        int v542 = 0;
        int v543 = 0;
        sub_20B13F890(&__dst, (uint64_t)&v527, (uint64_t)v548, 1, 4, 1, &v546, &v544, &v542);
        sub_20B140E2C(&v585, (uint64_t *)&v565);
        sub_20B13D6B0(v582, (uint64_t *)&v631);
        sub_20B140EDC((uint64_t)&v573, (uint64_t *)&v585, v582, 4);
        sub_20B13A534((uint64_t)&__dst, (uint64_t)&v573);
        if (v578)
        {
          unint64_t v579 = v578;
          operator delete(v578);
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v583)
        {
          uint64_t v584 = v583;
          operator delete(v583);
        }
        if (v587)
        {
          v588 = v587;
          operator delete(v587);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v564);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v562);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v557 + 8));
        if (SBYTE7(v557) < 0) {
          operator delete(__dst);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v527);
        if (v565)
        {
          uint64_t v566 = (char *)v565;
          operator delete(v565);
        }
      }
      uint64_t v395 = objc_msgSend_vertexAttributeDataForAttributeNamed_(v262, v378, @"occlusionValue");

      if (!v395)
      {
        v422 = 0;
        goto LABEL_600;
      }
      if (!objc_msgSend_format(v395, v396, v397))
      {
        v422 = v395;
        goto LABEL_600;
      }
      if ((objc_msgSend_format(v395, v396, v398) & 0xF) == 1)
      {
        v400 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v399, @"occlusionValue", 786433);

        if (!objc_msgSend_format(v400, v401, v402)) {
          goto LABEL_599;
        }
        uint64_t v566 = 0;
        uint64_t v565 = 0;
        v567 = 0;
        uint64_t v404 = objc_msgSend_dataStart(v400, v396, v403);
        uint64_t v407 = objc_msgSend_stride(v400, v405, v406);
        if (v506)
        {
          uint64_t v410 = v407;
          for (uint64_t n = 0; n != v506; ++n)
          {
            if (n * v410 + 4 <= (unint64_t)objc_msgSend_bufferSize(v400, (const char *)v408, v409))
            {
              int v412 = *(_DWORD *)(v404 + n * v410);
              v413 = v566;
              if (v566 >= v567)
              {
                unint64_t v415 = (char *)v565;
                uint64_t v416 = (v566 - (unsigned char *)v565) >> 2;
                unint64_t v417 = v416 + 1;
                if ((unint64_t)(v416 + 1) >> 62) {
                  sub_20B05D0BC();
                }
                uint64_t v418 = v567 - (unsigned char *)v565;
                if ((v567 - (unsigned char *)v565) >> 1 > v417) {
                  unint64_t v417 = v418 >> 1;
                }
                if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v408 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v408 = v417;
                }
                if (v408)
                {
                  uint64_t v419 = (char *)sub_20B05D1AC((uint64_t)&v567, v408);
                  v413 = v566;
                  unint64_t v415 = (char *)v565;
                }
                else
                {
                  uint64_t v419 = 0;
                }
                unint64_t v420 = &v419[4 * v416];
                *(_DWORD *)unint64_t v420 = v412;
                uint64_t v414 = v420 + 4;
                while (v413 != v415)
                {
                  int v421 = *((_DWORD *)v413 - 1);
                  v413 -= 4;
                  *((_DWORD *)v420 - 1) = v421;
                  v420 -= 4;
                }
                uint64_t v565 = v420;
                uint64_t v566 = v414;
                v567 = &v419[4 * v408];
                if (v415) {
                  operator delete(v415);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v566 = v412;
                uint64_t v414 = v413 + 4;
              }
              uint64_t v566 = v414;
              v286 = v505;
            }
          }
        }
        int v522 = v568;
        if (SHIBYTE(v570) < 0)
        {
          sub_20B07F994(&v523, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v523 = __src;
          uint64_t v524 = v570;
        }
        uint64_t v525 = v571;
        uint64_t v526 = v572;
        if (v572) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
        }
        v445 = (char *)objc_msgSend_UTF8String(@"occlusionValue", (const char *)v408, v409);
        sub_20B07F8E0(v548, v445);
        int v546 = 0;
        int v547 = 0;
        int v544 = 0;
        int v545 = 0;
        int v542 = 0;
        int v543 = 0;
        sub_20B13D808(&__dst, (uint64_t)&v522, (uint64_t)v548, 1, 4, 1, &v546, &v544, &v542);
        sub_20B13F738(&v585, (uint64_t *)&v565);
        sub_20B13D6B0(v582, (uint64_t *)&v631);
        sub_20B13F7DC((uint64_t)&v573, (uint64_t *)&v585, v582, 4);
        sub_20B13A110((uint64_t)&__dst, (uint64_t)&v573);
        if (v578)
        {
          unint64_t v579 = v578;
          operator delete(v578);
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v583)
        {
          uint64_t v584 = v583;
          operator delete(v583);
        }
        if (v587)
        {
          v588 = v587;
          operator delete(v587);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v564);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v562);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v557 + 8));
        if (SBYTE7(v557) < 0) {
          operator delete(__dst);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        v446 = (Alembic::Abc::v12::OCompoundProperty *)&v522;
      }
      else
      {
        v400 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v399, @"occlusionValue", 786434);

        if (!objc_msgSend_format(v400, v423, v424)) {
          goto LABEL_599;
        }
        uint64_t v566 = 0;
        uint64_t v565 = 0;
        v567 = 0;
        uint64_t v426 = objc_msgSend_dataStart(v400, v396, v425);
        uint64_t v429 = objc_msgSend_stride(v400, v427, v428);
        if (v506)
        {
          uint64_t v432 = v429;
          for (iunint64_t i = 0; ii != v506; ++ii)
          {
            if (ii * v432 + 8 <= (unint64_t)objc_msgSend_bufferSize(v400, v430, v431))
            {
              uint64_t v434 = *(void *)(v426 + ii * v432);
              v435 = v566;
              if (v566 >= v567)
              {
                uint64_t v437 = (v566 - (unsigned char *)v565) >> 3;
                if ((unint64_t)(v437 + 1) >> 61) {
                  sub_20B05D0BC();
                }
                unint64_t v438 = (v567 - (unsigned char *)v565) >> 2;
                if (v438 <= v437 + 1) {
                  unint64_t v438 = v437 + 1;
                }
                if ((unint64_t)(v567 - (unsigned char *)v565) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v439 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v439 = v438;
                }
                unint64_t v440 = (char *)sub_20B0602EC((uint64_t)&v567, v439);
                v441 = &v440[8 * v437];
                *(void *)v441 = v434;
                uint64_t v436 = v441 + 8;
                uint64_t v442 = v566;
                unint64_t v443 = (char *)v565;
                if (v566 == v565)
                {
                  v286 = v505;
                }
                else
                {
                  v286 = v505;
                  do
                  {
                    uint64_t v444 = *((void *)v442 - 1);
                    v442 -= 8;
                    *((void *)v441 - 1) = v444;
                    v441 -= 8;
                  }
                  while (v442 != v443);
                }
                uint64_t v565 = v441;
                uint64_t v566 = v436;
                v567 = &v440[8 * (void)v430];
                if (v443) {
                  operator delete(v443);
                }
              }
              else
              {
                *(void *)uint64_t v566 = v434;
                uint64_t v436 = v435 + 8;
              }
              uint64_t v566 = v436;
            }
          }
        }
        int v517 = v568;
        if (SHIBYTE(v570) < 0)
        {
          sub_20B07F994(&v518, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v518 = __src;
          uint64_t v519 = v570;
        }
        uint64_t v520 = v571;
        uint64_t v521 = v572;
        if (v572) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
        }
        v447 = (char *)objc_msgSend_UTF8String(@"occlusionValue", v430, v431);
        sub_20B07F8E0(v548, v447);
        int v546 = 0;
        int v547 = 0;
        int v544 = 0;
        int v545 = 0;
        int v542 = 0;
        int v543 = 0;
        sub_20B140F90(&__dst, (uint64_t)&v517, (uint64_t)v548, 1, 4, 1, &v546, &v544, &v542);
        sub_20B13D60C(&v585, (uint64_t *)&v565);
        sub_20B13D6B0(v582, (uint64_t *)&v631);
        sub_20B13D754((uint64_t)&v573, (uint64_t *)&v585, v582, 4);
        sub_20B13A90C((uint64_t)&__dst, (uint64_t)&v573);
        if (v578)
        {
          unint64_t v579 = v578;
          operator delete(v578);
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v583)
        {
          uint64_t v584 = v583;
          operator delete(v583);
        }
        if (v587)
        {
          v588 = v587;
          operator delete(v587);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v564);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v562);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v557 + 8));
        if (SBYTE7(v557) < 0) {
          operator delete(__dst);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        v446 = (Alembic::Abc::v12::OCompoundProperty *)&v517;
      }
      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v446);
      if (v565)
      {
        uint64_t v566 = (char *)v565;
        operator delete(v565);
      }
LABEL_599:
      v422 = v400;
LABEL_600:
      v448 = objc_msgSend_vertexAttributeDataForAttributeNamed_(v262, v396, @"color");

      if (!v448)
      {
        v454 = 0;
        goto LABEL_674;
      }
      if (!objc_msgSend_format(v448, v449, v450))
      {
        v454 = v448;
        goto LABEL_674;
      }
      if ((objc_msgSend_format(v448, v451, v452) & 0xF) == 1)
      {
        v454 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v453, @"color", 786433);

        if (!objc_msgSend_format(v454, v455, v456)) {
          goto LABEL_674;
        }
        uint64_t v566 = 0;
        uint64_t v565 = 0;
        v567 = 0;
        uint64_t v459 = objc_msgSend_dataStart(v454, v457, v458);
        uint64_t v462 = objc_msgSend_stride(v454, v460, v461);
        if (v506)
        {
          uint64_t v465 = v462;
          for (junint64_t j = 0; jj != v506; ++jj)
          {
            if (jj * v465 + 4 <= (unint64_t)objc_msgSend_bufferSize(v454, (const char *)v463, v464))
            {
              int v467 = *(_DWORD *)(v459 + jj * v465);
              uint64_t v468 = v566;
              if (v566 >= v567)
              {
                int64_t v470 = (char *)v565;
                uint64_t v471 = (v566 - (unsigned char *)v565) >> 2;
                unint64_t v472 = v471 + 1;
                if ((unint64_t)(v471 + 1) >> 62) {
                  sub_20B05D0BC();
                }
                uint64_t v473 = v567 - (unsigned char *)v565;
                if ((v567 - (unsigned char *)v565) >> 1 > v472) {
                  unint64_t v472 = v473 >> 1;
                }
                if ((unint64_t)v473 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v463 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v463 = v472;
                }
                if (v463)
                {
                  v474 = (char *)sub_20B05D1AC((uint64_t)&v567, v463);
                  uint64_t v468 = v566;
                  int64_t v470 = (char *)v565;
                }
                else
                {
                  v474 = 0;
                }
                v475 = &v474[4 * v471];
                *(_DWORD *)v475 = v467;
                unint64_t v469 = v475 + 4;
                while (v468 != v470)
                {
                  int v476 = *((_DWORD *)v468 - 1);
                  v468 -= 4;
                  *((_DWORD *)v475 - 1) = v476;
                  v475 -= 4;
                }
                uint64_t v565 = v475;
                uint64_t v566 = v469;
                v567 = &v474[4 * v463];
                if (v470) {
                  operator delete(v470);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v566 = v467;
                unint64_t v469 = v468 + 4;
              }
              uint64_t v566 = v469;
              v286 = v505;
            }
          }
        }
        int v512 = v568;
        if (SHIBYTE(v570) < 0)
        {
          sub_20B07F994(&v513, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v513 = __src;
          uint64_t v514 = v570;
        }
        uint64_t v515 = v571;
        uint64_t v516 = v572;
        if (v572) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
        }
        v496 = (char *)objc_msgSend_UTF8String(@"color", (const char *)v463, v464);
        sub_20B07F8E0(v548, v496);
        int v546 = 0;
        int v547 = 0;
        int v544 = 0;
        int v545 = 0;
        int v542 = 0;
        int v543 = 0;
        sub_20B13D808(&__dst, (uint64_t)&v512, (uint64_t)v548, 1, 4, 1, &v546, &v544, &v542);
        sub_20B13F738(&v585, (uint64_t *)&v565);
        sub_20B13D6B0(v582, (uint64_t *)&v631);
        sub_20B13F7DC((uint64_t)&v573, (uint64_t *)&v585, v582, 4);
        sub_20B13A110((uint64_t)&__dst, (uint64_t)&v573);
        if (v578)
        {
          unint64_t v579 = v578;
          operator delete(v578);
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v583)
        {
          uint64_t v584 = v583;
          operator delete(v583);
        }
        if (v587)
        {
          v588 = v587;
          operator delete(v587);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v564);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v562);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v557 + 8));
        if (SBYTE7(v557) < 0) {
          operator delete(__dst);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        v495 = (Alembic::Abc::v12::OCompoundProperty *)&v512;
      }
      else
      {
        v454 = objc_msgSend_vertexAttributeDataForAttributeNamed_asFormat_(v262, v453, @"color", 786435);

        if (!objc_msgSend_format(v454, v477, v478)) {
          goto LABEL_674;
        }
        uint64_t v566 = 0;
        uint64_t v565 = 0;
        v567 = 0;
        uint64_t v481 = objc_msgSend_dataStart(v454, v479, v480);
        uint64_t v484 = objc_msgSend_stride(v454, v482, v483);
        if (v506)
        {
          uint64_t v487 = v484;
          uint64_t v488 = 0;
          do
          {
            if (v488 + 12 <= (unint64_t)objc_msgSend_bufferSize(v454, v485, v486))
            {
              unsigned int v489 = *(_DWORD *)(v481 + v488);
              unsigned int v490 = *(_DWORD *)(v481 + v488 + 4);
              int v491 = *(_DWORD *)(v481 + v488 + 8);
              long long __dst = (void *)__PAIR64__(v490, v489);
              LODWORD(v556) = v491;
              unint64_t v492 = v566;
              if (v566 >= v567)
              {
                uint64_t v493 = sub_20B13AD38((uint64_t *)&v565, (uint64_t)&__dst);
              }
              else
              {
                *(_DWORD *)uint64_t v566 = v489;
                *((_DWORD *)v492 + 1) = v490;
                uint64_t v493 = (uint64_t)(v492 + 12);
                *((_DWORD *)v492 + 2) = v491;
              }
              uint64_t v566 = (char *)v493;
            }
            v488 += v487;
            --v506;
          }
          while (v506);
        }
        int v507 = v568;
        if (SHIBYTE(v570) < 0)
        {
          sub_20B07F994(&v508, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v508 = __src;
          uint64_t v509 = v570;
        }
        uint64_t v510 = v571;
        uint64_t v511 = v572;
        if (v572) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v572 + 8), 1uLL, memory_order_relaxed);
        }
        v494 = (char *)objc_msgSend_UTF8String(@"color", v485, v486);
        sub_20B07F8E0(v548, v494);
        int v546 = 0;
        int v547 = 0;
        int v544 = 0;
        int v545 = 0;
        int v542 = 0;
        int v543 = 0;
        sub_20B13F890(&__dst, (uint64_t)&v507, (uint64_t)v548, 1, 4, 1, &v546, &v544, &v542);
        sub_20B140E2C(&v585, (uint64_t *)&v565);
        sub_20B13D6B0(v582, (uint64_t *)&v631);
        sub_20B140EDC((uint64_t)&v573, (uint64_t *)&v585, v582, 4);
        sub_20B13A534((uint64_t)&__dst, (uint64_t)&v573);
        if (v578)
        {
          unint64_t v579 = v578;
          operator delete(v578);
        }
        if ((void)v575)
        {
          *((void *)&v575 + 1) = v575;
          operator delete((void *)v575);
        }
        if (v583)
        {
          uint64_t v584 = v583;
          operator delete(v583);
        }
        if (v587)
        {
          v588 = v587;
          operator delete(v587);
        }
        Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)v564);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v562);
        Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)((char *)&v557 + 8));
        if (SBYTE7(v557) < 0) {
          operator delete(__dst);
        }
        if (v549 < 0) {
          operator delete(v548[0]);
        }
        v495 = (Alembic::Abc::v12::OCompoundProperty *)&v507;
      }
      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v495);
      if (v565)
      {
        uint64_t v566 = (char *)v565;
        operator delete(v565);
      }
LABEL_674:

      Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v568);
      sub_20B144190(&v589);
      *(void *)&long long v619 = &unk_26BF4F778;
      sub_20B143A80((uint64_t)&v620[5]);
      Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)&v619);
      if (SHIBYTE(v627) < 0) {
        operator delete((void *)v626);
      }
LABEL_676:
      if (v628)
      {
        unsigned int v629 = v628;
        operator delete(v628);
      }
      if (v631)
      {
        unint64_t v632 = v631;
        operator delete(v631);
      }
      if (v634)
      {
        v635 = v634;
        operator delete(v634);
      }

      if (v637)
      {
        v638 = v637;
        operator delete(v637);
      }

      return;
    default:
      goto LABEL_300;
  }
}