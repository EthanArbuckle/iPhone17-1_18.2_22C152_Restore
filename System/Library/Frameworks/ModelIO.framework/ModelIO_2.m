void sub_20B137680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  uint64_t v17;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v19 = *(void **)(v17 - 208);
  if (v19)
  {
    *(void *)(v17 - 200) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v17 - 184);
  if (v20)
  {
    *(void *)(v17 - 176) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v17 - 160);
  if (v21)
  {
    *(void *)(v17 - 152) = v21;
    operator delete(v21);
  }

  v22 = *(void **)(v17 - 136);
  if (v22)
  {
    *(void *)(v17 - 128) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

void sub_20B137ECC(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26BF4F738;
  sub_20B139C18((uint64_t)a1 + 56);

  Alembic::Abc::v12::OObject::~OObject(a1);
}

uint64_t sub_20B137F20(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  v12 = (_DWORD *)(a1 + 8);
  sub_20B07F8E0((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26BF4F738;
  sub_20B138CE0(a1 + 56);
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  *(void *)&v37[0] = 0;
  __p[0] = &__p[1];
  LODWORD(v51) = v13;
  sub_20B13950C((uint64_t)&v51 + 8, (const void ***)__p);
  long long v53 = 0uLL;
  LODWORD(v54) = 0;
  *(void *)((char *)&v54 + 4) = 1;
  sub_20B0780A4((uint64_t)__p, (void *)__p[1]);
  sub_20B138740(a4, (uint64_t)&v51);
  sub_20B138740(a5, (uint64_t)&v51);
  sub_20B138740(a6, (uint64_t)&v51);
  _DWORD *v12 = v51;
  v49 = v12;
  v50 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    uint64_t v38 = 0;
    memset(v37, 0, sizeof(v37));
    *(_OWORD *)__p = 0u;
    sub_20B10C0CC((uint64_t)__p);
    sub_20B07FC90(v37, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    long long __str = 0u;
    long long __str_16 = 0u;
    std::stringbuf::str();
    sub_20B1393B4(&__str, &v47);
    if (SHIBYTE(v48) < 0) {
      operator delete((void *)v47);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    v27 = sub_20B139478(exception, (uint64_t)&__str);
    __cxa_throw(v27, (struct type_info *)&unk_26BF4F288, (void (*)(void *))sub_20B1387F8);
  }
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  sub_20B13950C((uint64_t)&v47, (const void ***)&v51 + 1);
  if (DWORD2(v54) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_20B07F8E0(__p, "schema");
    sub_20B07F8E0(&__str, "AbcGeom_Xform_v3");
    v40 = __p;
    v17 = sub_20B139840((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v40);
    std::string::operator=((std::string *)(v17 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v37[0]) < 0) {
      operator delete(__p[0]);
    }
    sub_20B07F8E0(__p, "schemaObjTitle");
    sub_20B1387FC((std::string *)&__str);
    v40 = __p;
    v18 = sub_20B139840((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v40);
    std::string::operator=((std::string *)(v18 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v37[0]) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long __str = 0u;
  long long __str_16 = 0u;
  sub_20B139998(&__str, a3, (const void ***)&v47);
  (*(void (**)(void **__return_ptr, uint64_t, long long *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v19 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v20 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v19;
  if (v20)
  {
    sub_20B081CD8(v20);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
  }
  long long v21 = v53;
  if (*((void *)&v53 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v53 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((void)v21)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v22 = (*(uint64_t (**)(void *, void))(*(void *)__p[0] + 48))(__p[0], v21);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v22 = v54;
  }
  v41[1] = 0;
  v41[0] = 0;
  v40 = (void **)v41;
  if (DWORD2(v54) == 1)
  {
    sub_20B07F8E0(__p, "replace");
    sub_20B07F8E0(&v39, "1");
    v32 = __p;
    v23 = sub_20B139840((uint64_t **)&v40, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v32);
    std::string::operator=((std::string *)(v23 + 7), &v39);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v37[0]) < 0) {
      operator delete(__p[0]);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v34);
  sub_20B07F8E0(&v39, ".xform");
  int v24 = *v12;
  LODWORD(v32) = 1;
  int v33 = v24;
  v31[0] = 2;
  v31[2] = v22;
  int v29 = 3;
  v30 = (uint64_t **)&v40;
  v28[0] = 6;
  v28[2] = v16;
  MEMORY[0x210531440](__p, &v34, &v39, &v32, v31, &v29, v28);
  sub_20B1388DC(a1 + 56, (uint64_t)__p);
  sub_20B139C18((uint64_t)__p);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (v35) {
    sub_20B081CD8(v35);
  }
  sub_20B0780A4((uint64_t)&v40, v41[0]);
  if (*((void *)&v21 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v21 + 1));
  }
  sub_20B0780A4((uint64_t)&v45, *((void **)&v45 + 1));
  if (SHIBYTE(v44) < 0) {
    operator delete(*((void **)&__str_16 + 1));
  }
  if (SBYTE7(__str_16) < 0) {
    operator delete((void *)__str);
  }
  sub_20B0780A4((uint64_t)&v47, *((void **)&v47 + 1));
  if (v14) {
    sub_20B081CD8(v14);
  }
  if (*((void *)&v53 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v53 + 1));
  }
  sub_20B0780A4((uint64_t)&v51 + 8, (void *)v52);
  return a1;
}

void sub_20B1384F4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(__p, a12);
  sub_20B1394D4((std::exception *)&STACK[0x250]);
  sub_20B0A8E60((uint64_t)__p);
  if (v14) {
    sub_20B081CD8(v14);
  }
  __cxa_begin_catch(a1);
  sub_20B139CD4(v13);
  sub_20B139D6C(v12);
  if (a2 == 2) {
    sub_20B138BCC(v15 - 176);
  }
  else {
    sub_20B138B5C(v15 - 176);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B138408);
}

void sub_20B13868C()
{
}

void sub_20B138698()
{
}

void sub_20B1386AC()
{
}

void sub_20B1386C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  JUMPOUT(0x20B138610);
}

void sub_20B138700(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20)
{
}

void sub_20B138714()
{
}

void sub_20B13871C(_Unwind_Exception *a1)
{
  sub_20B138C3C(v3 - 160);
  sub_20B139C18(v2);
  Alembic::Abc::v12::OObject::~OObject(v1);
  _Unwind_Resume(a1);
}

void sub_20B138740(_DWORD *a1, uint64_t a2)
{
  switch(*a1)
  {
    case 1:
      *(_DWORD *)a2 = a1[2];
      break;
    case 2:
      *(_DWORD *)(a2 + 48) = a1[2];
      break;
    case 3:
      uint64_t v2 = *((void *)a1 + 1);
      if (a2 + 8 != v2) {
        sub_20B138F04((uint64_t **)(a2 + 8), *(long long **)v2, (long long *)(v2 + 8));
      }
      break;
    case 4:
      uint64_t v3 = (uint64_t *)*((void *)a1 + 1);
      uint64_t v5 = *v3;
      uint64_t v4 = v3[1];
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      v6 = *(std::__shared_weak_count **)(a2 + 40);
      *(void *)(a2 + 32) = v5;
      *(void *)(a2 + 40) = v4;
      if (v6) {
        sub_20B081CD8(v6);
      }
      break;
    case 5:
      *(_DWORD *)(a2 + 52) = a1[2];
      break;
    case 6:
      *(_DWORD *)(a2 + 56) = a1[2];
      break;
    default:
      return;
  }
}

void sub_20B1387FC(std::string *a1@<X8>)
{
  sub_20B07F8E0(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_Xform_v3");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".xform");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_20B1388A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1388DC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_20B081CD8(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 56) = v7;
  if (a1 != a2) {
    sub_20B139A48((char *)(a1 + 88), *(char **)(a2 + 88), *(void *)(a2 + 96), (uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3);
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  uint64_t v9 = *(void *)(a2 + 144);
  uint64_t v8 = *(void *)(a2 + 152);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  v10 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v9;
  *(void *)(a1 + 152) = v8;
  if (v10) {
    sub_20B081CD8(v10);
  }
  long long v11 = *(_OWORD *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 168);
  *(_OWORD *)(a1 + 160) = v11;
  if (v12) {
    sub_20B081CD8(v12);
  }
  long long v13 = *(_OWORD *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = v13;
  if (v14) {
    sub_20B081CD8(v14);
  }
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a2 + 200));
  uint64_t v16 = *(void *)(a2 + 224);
  uint64_t v15 = *(void *)(a2 + 232);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  v17 = *(std::__shared_weak_count **)(a1 + 232);
  *(void *)(a1 + 224) = v16;
  *(void *)(a1 + 232) = v15;
  if (v17) {
    sub_20B081CD8(v17);
  }
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)(a2 + 248));
  uint64_t v19 = *(void *)(a2 + 272);
  uint64_t v18 = *(void *)(a2 + 280);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  v20 = *(std::__shared_weak_count **)(a1 + 280);
  *(void *)(a1 + 272) = v19;
  *(void *)(a1 + 280) = v18;
  if (v20) {
    sub_20B081CD8(v20);
  }
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  sub_20B139B54((void **)(a1 + 296));
  uint64_t v21 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v21;
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v23 = *(void *)(a2 + 376);
  uint64_t v22 = *(void *)(a2 + 384);
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
  }
  int v24 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v23;
  *(void *)(a1 + 384) = v22;
  if (v24) {
    sub_20B081CD8(v24);
  }
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v26 = *(void *)(a2 + 424);
  uint64_t v25 = *(void *)(a2 + 432);
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  v27 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v26;
  *(void *)(a1 + 432) = v25;
  if (v27) {
    sub_20B081CD8(v27);
  }
  long long v28 = *(_OWORD *)(a2 + 440);
  *(void *)(a2 + 440) = 0;
  *(void *)(a2 + 448) = 0;
  int v29 = *(std::__shared_weak_count **)(a1 + 448);
  *(_OWORD *)(a1 + 440) = v28;
  if (v29) {
    sub_20B081CD8(v29);
  }
  return a1;
}

uint64_t sub_20B138B0C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B138B5C(uint64_t a1)
{
  sub_20B07F8E0(&__p, *(char **)(a1 + 8));
  Alembic::Abc::v12::ErrorHandler::operator()();
  if (v2 < 0) {
    operator delete(__p);
  }
}

void sub_20B138BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B138BCC(uint64_t a1)
{
  sub_20B07F8E0(&__p, *(char **)(a1 + 8));
  Alembic::Abc::v12::ErrorHandler::operator()();
  if (v2 < 0) {
    operator delete(__p);
  }
}

void sub_20B138C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B138C3C(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_20B081CD8(v2);
  }
  sub_20B0780A4(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_20B138C78(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26BF4F738;
  sub_20B139C18((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B138CE0(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20B07F8E0((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26BF4F7F0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = 127;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2;
  sub_20B07F8E0((void *)(a1 + 120), "");
  *(_DWORD *)(a1 + 192) = 2;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  sub_20B07F8E0((void *)(a1 + 200), "");
  *(_DWORD *)(a1 + 240) = 2;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  sub_20B07F8E0((void *)(a1 + 248), "");
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample((Alembic::AbcGeom::v12::XformSample *)(a1 + 288));
  *(unsigned char *)(a1 + 336) = 1;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20B07F8E0((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20B07F8E0((void *)(a1 + 400), "");
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(unsigned char *)(a1 + 336) = 1;
  return a1;
}

void sub_20B138E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v16);
  a10 = v10 + 37;
  sub_20B144234((void ***)&a10);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v14);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v13);
  uint64_t v18 = (std::__shared_weak_count *)v10[23];
  if (v18) {
    sub_20B081CD8(v18);
  }
  uint64_t v19 = (std::__shared_weak_count *)v10[21];
  if (v19) {
    sub_20B081CD8(v19);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v12);
  v20 = *v15;
  if (*v15)
  {
    v10[12] = v20;
    operator delete(v20);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v11);
  _Unwind_Resume(a1);
}

void sub_20B138EC4()
{
}

void sub_20B138ECC(uint64_t a1)
{
  sub_20B139C18(a1);

  JUMPOUT(0x210532650);
}

uint64_t **sub_20B138F04(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    std::string v6 = *result;
    long long v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_20B139114((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          uint64_t v18 = 0;
          v10 = (uint64_t **)sub_20B139098((uint64_t)v5, &v18, v17 + 4);
          sub_20B05FAEC(v5, v18, v10, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_20B139114((uint64_t)v16);
          }
          long long v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              long long v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)sub_20B139168((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20B1391C0(v5, a2 + 2);
      long long v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          long long v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_20B139084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_20B139098(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (!sub_20B07CE98(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v5;
        result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

void *sub_20B139114(uint64_t a1)
{
  result = *(void **)(a1 + 16);
  if (result)
  {
    long long v3 = (void *)*result;
    if (*result == a1)
    {
      void *result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; long long v3 = (void *)result[1])
      {
        do
        {
          result = v3;
          long long v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_20B139168(uint64_t a1)
{
  sub_20B0780A4(*(void *)a1, *(void **)(a1 + 16));
  char v2 = *(void **)(a1 + 8);
  if (v2)
  {
    long long v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        char v2 = v3;
        long long v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_20B0780A4(*(void *)a1, v2);
  }
  return a1;
}

char *sub_20B1391C0(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  sub_20B139250((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  long long v3 = (uint64_t **)sub_20B139098((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_20B05FAEC(a1, v6, v3, (uint64_t *)v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  sub_20B13935C((uint64_t)v7, 0);
  return v4;
}

void sub_20B139238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B13935C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_20B139250@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = (char *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  result = sub_20B1392C4(v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B1392AC(_Unwind_Exception *a1)
{
  sub_20B13935C(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20B1392C4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_20B07F994(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_20B139340(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B13935C(uint64_t a1, uint64_t a2)
{
  char v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_20B078100((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *sub_20B1393B4(void *a1, long long *a2)
{
  long long v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B07F994(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)long long v3 = v4;
  }
  *a1 = &unk_26BF4F798;
  return a1;
}

void sub_20B139424(std::exception *a1)
{
  sub_20B1394D4(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B13945C(uint64_t a1)
{
  uint64_t result = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)result;
  }
  return result;
}

void *sub_20B139478(void *a1, uint64_t a2)
{
  long long v3 = a1 + 1;
  long long v6 = *(char **)(a2 + 8);
  long long v4 = (char *)(a2 + 8);
  uint64_t v5 = v6;
  if (v4[23] < 0) {
    long long v4 = v5;
  }
  sub_20B07F8E0(v3, v4);
  *a1 = &unk_26BF4F798;
  return a1;
}

std::exception *sub_20B1394D4(std::exception *a1)
{
  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(a1[1].__vftable);
  }
  return a1;
}

uint64_t sub_20B13950C(uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_20B139564((char *)a1, *a2, a2 + 1);
  return a1;
}

void sub_20B13954C(_Unwind_Exception *a1)
{
  sub_20B0780A4(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_20B139564(char *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = (uint64_t *)(result + 8);
    do
    {
      uint64_t result = sub_20B1395F0(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *sub_20B1395F0(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v11 = 0;
  BOOL v12 = 0;
  long long v6 = sub_20B139694(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_20B139250((uint64_t)a1, a4, v10);
    sub_20B05FAEC(a1, (uint64_t)v12, v8, (uint64_t *)v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_20B13935C((uint64_t)v10, 0);
  }
  return v7;
}

const void **sub_20B139694(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  BOOL v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !sub_20B07CE98((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!sub_20B07CE98((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        uint64_t v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        uint64_t v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_20B07CE98((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    BOOL v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  uint64_t v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      BOOL v12 = v11;
      uint64_t v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      BOOL v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_20B07CE98((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)sub_20B07CD4C((uint64_t)a1, a3, a5);
}

uint64_t *sub_20B139840(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  long long v6 = (uint64_t **)sub_20B07CD4C((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_20B1398F8((uint64_t)a1, a4, v10);
    sub_20B05FAEC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_20B13935C((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_20B1398F8@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_20B07F994(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B139980(_Unwind_Exception *a1)
{
  sub_20B13935C(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_20B139998(void *__dst, long long *a2, const void ***a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_20B07F8E0(__dst + 3, "");
  sub_20B13950C((uint64_t)(__dst + 6), a3);
  return __dst;
}

void sub_20B139A14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B139A48(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_20B0602A8(v7, v11);
    uint64_t v13 = (char *)v7[1];
    BOOL v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  BOOL v12 = (void **)(result + 8);
  v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  Alembic::Abc::v12::OScalarProperty *v12 = &v9[v17];
  return result;
}

void sub_20B139B54(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_20B139BC4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_20B139BC4(uint64_t a1, uint64_t a2)
{
  sub_20B05D2CC(a2 + 32, *(void **)(a2 + 40));
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(void *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t sub_20B139C18(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4F7F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 448);
  if (v2) {
    sub_20B081CD8(v2);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 392));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 344));
  uint64_t v7 = (void **)(a1 + 296);
  sub_20B144234(&v7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 240));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 192));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 184);
  if (v3) {
    sub_20B081CD8(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 168);
  if (v4) {
    sub_20B081CD8(v4);
  }
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 112));
  long long v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(void *)(a1 + 96) = v5;
    operator delete(v5);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

void sub_20B139CD4(uint64_t a1)
{
  sub_20B139DB8(a1 + 112);
  sub_20B139DB8(a1 + 192);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  if (v2) {
    sub_20B081CD8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (v3) {
    sub_20B081CD8(v3);
  }
  Alembic::AbcGeom::v12::XformSample::reset((Alembic::AbcGeom::v12::XformSample *)(a1 + 288));
  long long v4 = *(std::__shared_weak_count **)(a1 + 448);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  if (v4) {
    sub_20B081CD8(v4);
  }
  sub_20B139DB8(a1 + 344);
  sub_20B139DB8(a1 + 392);
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 336) = 1;

  sub_20B139DB8(a1 + 8);
}

void sub_20B139D6C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  if (v2) {
    sub_20B081CD8(v2);
  }

  JUMPOUT(0x210532310);
}

void sub_20B139DB8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (v2) {
    sub_20B081CD8(v2);
  }

  JUMPOUT(0x210532310);
}

char *sub_20B139E04(char *result, char *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  *(void *)(result + 493) = *(void *)(a2 + 5);
  *((void *)result + 61) = v4;
  if (result + 488 == a2)
  {
    uint64_t v6 = *((void *)a2 + 5);
    *(void *)(result + 533) = *(void *)(a2 + 45);
    *((void *)result + 66) = v6;
  }
  else
  {
    sub_20B139A48(result + 504, *((char **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3);
    uint64_t v5 = *((void *)a2 + 5);
    *(void *)(v3 + 533) = *(void *)(a2 + 45);
    *((void *)v3 + 66) = v5;
    uint64_t result = sub_20B139A48(v3 + 544, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 142) = *((_DWORD *)a2 + 20);
  return result;
}

void *sub_20B139EA0(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

unsigned char *sub_20B139EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  uint64_t v22 = "OGeomBaseSchema::getArbGeomParams()";
  int v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 168)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 183))
  {
LABEL_5:
    if (*(void *)(a1 + 184)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_20B07F8E0(__p, ".arbGeomParams");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  MEMORY[0x210531350](&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 152) = v17;
  std::string::operator=((std::string *)(a1 + 160), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v6;
  if (v8) {
    sub_20B081CD8(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_20B081CD8(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_20B07F994(result, *(void **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 160);
    *(void *)(a2 + 24) = *(void *)(a1 + 176);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a2 + 32) = *(void *)(a1 + 184);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_20B13A044(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_20B138BCC(v23 - 48);
  }
  else {
    sub_20B138B5C(v23 - 48);
  }
  __cxa_end_catch();
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  *(_DWORD *)uint64_t v22 = 2;
  sub_20B07F8E0((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x20B13A030);
}

void sub_20B13A0F0(_Unwind_Exception *a1)
{
}

void sub_20B13A110(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1 + 24;
  v30 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set();
    if (*(unsigned char *)(a1 + 120)) {
      Alembic::Abc::v12::OArrayProperty::set();
    }
    return;
  }
  int v24 = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20B07F994(&v25, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    long long v25 = *(_OWORD *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 48);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v28 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 5);
  *(void *)uint64_t v20 = *(void *)a2;
  *(void *)&v20[5] = v5;
  va_list __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_20B13CFDC(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (SHIBYTE(v26) < 0)
  {
    if (*((void *)&v25 + 1)) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(v26))
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_16;
  }
  if (v27) {
    uint64_t v6 = nullsub_11;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_16:
  if (v6)
  {
    if (*(_DWORD *)&v20[8] == 127 || !*(void *)v20 && v22 == __p) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = nullsub_12;
    }
    if (v7) {
      Alembic::Abc::v12::OArrayProperty::set();
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v24);
    }
  }
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v24);
  if (*(unsigned char *)(a1 + 120))
  {
    int v15 = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20B07F994(&v16, *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v16 = *(_OWORD *)(a1 + 80);
      uint64_t v17 = *(void *)(a1 + 96);
    }
    uint64_t v8 = *(void *)(a1 + 112);
    uint64_t v18 = *(void *)(a1 + 104);
    uint64_t v19 = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)unint64_t v11 = *(void *)(a2 + 40);
    *(void *)&v11[5] = *(void *)(a2 + 45);
    BOOL v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    sub_20B13CFDC(&v12, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    if (SHIBYTE(v17) < 0)
    {
      if (*((void *)&v16 + 1)) {
        goto LABEL_35;
      }
    }
    else if (HIBYTE(v17))
    {
LABEL_35:
      long long v9 = 0;
LABEL_40:
      if (v9)
      {
        if (*(_DWORD *)&v11[8] == 127 || !*(void *)v11 && v13 == v12) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = nullsub_13;
        }
        if (v10) {
          Alembic::Abc::v12::OArrayProperty::set();
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v15);
        }
      }
      if (v12)
      {
        uint64_t v13 = v12;
        operator delete(v12);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v15);
      return;
    }
    if (v18) {
      long long v9 = nullsub_11;
    }
    else {
      long long v9 = 0;
    }
    goto LABEL_40;
  }
}

void sub_20B13A41C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a14);
  __cxa_begin_catch(a1);
  sub_20B13C438(v23);
  if (a2 == 2) {
    sub_20B138BCC(v24 - 48);
  }
  else {
    sub_20B138B5C(v24 - 48);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B13A408);
}

void sub_20B13A4C8(_Unwind_Exception *a1)
{
}

uint64_t sub_20B13A4E8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B13A534(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1 + 24;
  v30 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set();
    if (*(unsigned char *)(a1 + 120)) {
      Alembic::Abc::v12::OArrayProperty::set();
    }
    return;
  }
  int v24 = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20B07F994(&v25, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    long long v25 = *(_OWORD *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 48);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v28 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 5);
  *(void *)uint64_t v20 = *(void *)a2;
  *(void *)&v20[5] = v5;
  va_list __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_20B13CFDC(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (SHIBYTE(v26) < 0)
  {
    if (*((void *)&v25 + 1)) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(v26))
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_16;
  }
  if (v27) {
    uint64_t v6 = nullsub_11;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_16:
  if (v6)
  {
    if (*(_DWORD *)&v20[8] == 127 || !*(void *)v20 && v22 == __p) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = nullsub_14;
    }
    if (v7) {
      Alembic::Abc::v12::OArrayProperty::set();
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v24);
    }
  }
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v24);
  if (*(unsigned char *)(a1 + 120))
  {
    int v15 = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20B07F994(&v16, *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v16 = *(_OWORD *)(a1 + 80);
      uint64_t v17 = *(void *)(a1 + 96);
    }
    uint64_t v8 = *(void *)(a1 + 112);
    uint64_t v18 = *(void *)(a1 + 104);
    uint64_t v19 = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)unint64_t v11 = *(void *)(a2 + 40);
    *(void *)&v11[5] = *(void *)(a2 + 45);
    BOOL v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    sub_20B13CFDC(&v12, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    if (SHIBYTE(v17) < 0)
    {
      if (*((void *)&v16 + 1)) {
        goto LABEL_35;
      }
    }
    else if (HIBYTE(v17))
    {
LABEL_35:
      long long v9 = 0;
LABEL_40:
      if (v9)
      {
        if (*(_DWORD *)&v11[8] == 127 || !*(void *)v11 && v13 == v12) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = nullsub_13;
        }
        if (v10) {
          Alembic::Abc::v12::OArrayProperty::set();
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v15);
        }
      }
      if (v12)
      {
        uint64_t v13 = v12;
        operator delete(v12);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v15);
      return;
    }
    if (v18) {
      long long v9 = nullsub_11;
    }
    else {
      long long v9 = 0;
    }
    goto LABEL_40;
  }
}

void sub_20B13A840(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a14);
  __cxa_begin_catch(a1);
  sub_20B13C438(v23);
  if (a2 == 2) {
    sub_20B138BCC(v24 - 48);
  }
  else {
    sub_20B138B5C(v24 - 48);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B13A82CLL);
}

void sub_20B13A8EC(_Unwind_Exception *a1)
{
}

void sub_20B13A90C(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1 + 24;
  v30 = "OTypedGeomParam::set()";
  if (!Alembic::Abc::v12::OArrayProperty::getNumSamples((Alembic::Abc::v12::OArrayProperty *)(a1 + 24)))
  {
    Alembic::Abc::v12::OArrayProperty::set();
    if (*(unsigned char *)(a1 + 120)) {
      Alembic::Abc::v12::OArrayProperty::set();
    }
    return;
  }
  int v24 = *(_DWORD *)(a1 + 24);
  if (*(char *)(a1 + 55) < 0)
  {
    sub_20B07F994(&v25, *(void **)(a1 + 32), *(void *)(a1 + 40));
  }
  else
  {
    long long v25 = *(_OWORD *)(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 48);
  }
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v28 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 5);
  *(void *)uint64_t v20 = *(void *)a2;
  *(void *)&v20[5] = v5;
  va_list __p = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  sub_20B13CFDC(&__p, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  if (SHIBYTE(v26) < 0)
  {
    if (*((void *)&v25 + 1)) {
      goto LABEL_11;
    }
  }
  else if (HIBYTE(v26))
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_16;
  }
  if (v27) {
    uint64_t v6 = nullsub_11;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_16:
  if (v6)
  {
    if (*(_DWORD *)&v20[8] == 127 || !*(void *)v20 && v22 == __p) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = nullsub_15;
    }
    if (v7) {
      Alembic::Abc::v12::OArrayProperty::set();
    }
    else {
      Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v24);
    }
  }
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v24);
  if (*(unsigned char *)(a1 + 120))
  {
    int v15 = *(_DWORD *)(a1 + 72);
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20B07F994(&v16, *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      long long v16 = *(_OWORD *)(a1 + 80);
      uint64_t v17 = *(void *)(a1 + 96);
    }
    uint64_t v8 = *(void *)(a1 + 112);
    uint64_t v18 = *(void *)(a1 + 104);
    uint64_t v19 = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)unint64_t v11 = *(void *)(a2 + 40);
    *(void *)&v11[5] = *(void *)(a2 + 45);
    BOOL v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    sub_20B13CFDC(&v12, *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    if (SHIBYTE(v17) < 0)
    {
      if (*((void *)&v16 + 1)) {
        goto LABEL_35;
      }
    }
    else if (HIBYTE(v17))
    {
LABEL_35:
      long long v9 = 0;
LABEL_40:
      if (v9)
      {
        if (*(_DWORD *)&v11[8] == 127 || !*(void *)v11 && v13 == v12) {
          uint64_t v10 = 0;
        }
        else {
          uint64_t v10 = nullsub_13;
        }
        if (v10) {
          Alembic::Abc::v12::OArrayProperty::set();
        }
        else {
          Alembic::Abc::v12::OArrayProperty::setFromPrevious((Alembic::Abc::v12::OArrayProperty *)&v15);
        }
      }
      if (v12)
      {
        uint64_t v13 = v12;
        operator delete(v12);
      }
      Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v15);
      return;
    }
    if (v18) {
      long long v9 = nullsub_11;
    }
    else {
      long long v9 = 0;
    }
    goto LABEL_40;
  }
}

void sub_20B13AC18(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&a14);
  __cxa_begin_catch(a1);
  sub_20B13C438(v23);
  if (a2 == 2) {
    sub_20B138BCC(v24 - 48);
  }
  else {
    sub_20B138B5C(v24 - 48);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B13AC04);
}

void sub_20B13ACC4(_Unwind_Exception *a1)
{
}

void sub_20B13ACE4(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26BF4F718;
  sub_20B13CD6C((uint64_t)a1 + 56);

  Alembic::Abc::v12::OObject::~OObject(a1);
}

uint64_t sub_20B13AD38(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x1555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  uint64_t v10 = (char *)sub_20B07D4F8(v7, v9);
  unint64_t v11 = &v10[12 * v4];
  va_list __p = v10;
  long long v16 = v11;
  uint64_t v18 = &v10[12 * v12];
  *(void *)unint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v17 = v11 + 12;
  sub_20B10D29C(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    uint64_t v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_20B13AE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B13AEA4(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  uint64_t v12 = (_DWORD *)(a1 + 8);
  sub_20B07F8E0((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26BF4F718;
  sub_20B13BBD4(a1 + 56);
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  *(void *)&v38[0] = 0;
  __p[0] = &__p[1];
  LODWORD(v51) = v13;
  sub_20B13950C((uint64_t)&v51 + 8, (const void ***)__p);
  long long v53 = 0uLL;
  LODWORD(v54) = 0;
  *(void *)((char *)&v54 + 4) = 1;
  sub_20B0780A4((uint64_t)__p, (void *)__p[1]);
  sub_20B138740(a4, (uint64_t)&v51);
  sub_20B138740(a5, (uint64_t)&v51);
  sub_20B138740(a6, (uint64_t)&v51);
  _DWORD *v12 = v51;
  v49 = v12;
  v50 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    uint64_t v39 = 0;
    *(_OWORD *)va_list __p = 0u;
    memset(v38, 0, sizeof(v38));
    sub_20B10C0CC((uint64_t)__p);
    sub_20B07FC90(v38, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    long long __str_16 = 0u;
    long long __str = 0u;
    std::stringbuf::str();
    sub_20B1393B4(&__str, &v47);
    if (SHIBYTE(v48) < 0) {
      operator delete((void *)v47);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v27 = sub_20B139478(exception, (uint64_t)&__str);
    __cxa_throw(v27, (struct type_info *)&unk_26BF4F288, (void (*)(void *))sub_20B1387F8);
  }
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  sub_20B13950C((uint64_t)&v47, (const void ***)&v51 + 1);
  if (DWORD2(v54) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_20B07F8E0(__p, "schema");
    sub_20B07F8E0(&__str, "AbcGeom_SubD_v1");
    v40 = __p;
    uint64_t v17 = sub_20B139840((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v40);
    std::string::operator=((std::string *)(v17 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v38[0]) < 0) {
      operator delete(__p[0]);
    }
    sub_20B07F8E0(__p, "schemaObjTitle");
    sub_20B13B69C((std::string *)&__str);
    v40 = __p;
    uint64_t v18 = sub_20B139840((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v40);
    std::string::operator=((std::string *)(v18 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v38[0]) < 0) {
      operator delete(__p[0]);
    }
    sub_20B07F8E0(__p, "schemaBaseType");
    sub_20B07F8E0(&__str, "AbcGeom_GeomBase_v1");
    v40 = __p;
    uint64_t v19 = sub_20B139840((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v40);
    std::string::operator=((std::string *)(v19 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v38[0]) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  uint64_t v46 = 0;
  long long v45 = 0u;
  long long v44 = 0u;
  long long __str_16 = 0u;
  long long __str = 0u;
  sub_20B139998(&__str, a3, (const void ***)&v47);
  (*(void (**)(void **__return_ptr, uint64_t, long long *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v20;
  if (v21)
  {
    sub_20B081CD8(v21);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
  }
  long long v22 = v53;
  if (*((void *)&v53 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v53 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((void)v22)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v23 = (*(uint64_t (**)(void *, void))(*(void *)__p[0] + 48))(__p[0], v22);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v23 = v54;
  }
  v41[1] = 0;
  v41[0] = 0;
  v40 = (void **)v41;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v35);
  sub_20B07F8E0(v33, ".geom");
  int v24 = *v12;
  v32[0] = 1;
  v32[2] = v24;
  v31[0] = 2;
  v31[2] = v23;
  int v29 = 3;
  v30 = (long long **)&v40;
  v28[0] = 6;
  v28[2] = v16;
  MEMORY[0x2105313F0](__p, &v35, v33, v32, v31, &v29, v28);
  sub_20B13B77C(a1 + 56, (uint64_t)__p);
  sub_20B13CD6C((uint64_t)__p);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v36) {
    sub_20B081CD8(v36);
  }
  sub_20B0780A4((uint64_t)&v40, v41[0]);
  if (*((void *)&v22 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v22 + 1));
  }
  sub_20B0780A4((uint64_t)&v45, *((void **)&v45 + 1));
  if (SHIBYTE(v44) < 0) {
    operator delete(*((void **)&__str_16 + 1));
  }
  if (SBYTE7(__str_16) < 0) {
    operator delete((void *)__str);
  }
  sub_20B0780A4((uint64_t)&v47, *((void **)&v47 + 1));
  if (v14) {
    sub_20B081CD8(v14);
  }
  if (*((void *)&v53 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v53 + 1));
  }
  sub_20B0780A4((uint64_t)&v51 + 8, (void *)v52);
  return a1;
}

void sub_20B13B480(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(__p, a16);
  sub_20B1394D4((std::exception *)&STACK[0x520]);
  sub_20B0A8E60((uint64_t)__p);
  if (v17) {
    sub_20B081CD8(v17);
  }
  __cxa_begin_catch(a1);
  sub_20B13C090(a3);
  sub_20B139D6C(v16);
  if (a2 == 2) {
    sub_20B138BCC(v18 - 176);
  }
  else {
    sub_20B138B5C(v18 - 176);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B13B390);
}

void sub_20B13B630()
{
}

void sub_20B13B63C()
{
}

void sub_20B13B65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
}

void sub_20B13B670()
{
}

void sub_20B13B678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B138C3C(v10 - 160);
  sub_20B13CD6C(a9);
  Alembic::Abc::v12::OObject::~OObject(v9);
  _Unwind_Resume(a1);
}

void sub_20B13B69C(std::string *a1@<X8>)
{
  sub_20B07F8E0(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_SubD_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  unint64_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_20B13B748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B13B77C(uint64_t a1, uint64_t a2)
{
  sub_20B13CAC0(a1, a2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v5 = *(void *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 288);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v5;
  *(void *)(a1 + 288) = v4;
  if (v6) {
    sub_20B081CD8(v6);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v8 = *(void *)(a2 + 328);
  uint64_t v7 = *(void *)(a2 + 336);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v8;
  *(void *)(a1 + 336) = v7;
  if (v9) {
    sub_20B081CD8(v9);
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v11 = *(void *)(a2 + 376);
  uint64_t v10 = *(void *)(a2 + 384);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v11;
  *(void *)(a1 + 384) = v10;
  if (v12) {
    sub_20B081CD8(v12);
  }
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v14 = *(void *)(a2 + 424);
  uint64_t v13 = *(void *)(a2 + 432);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v14;
  *(void *)(a1 + 432) = v13;
  if (v15) {
    sub_20B081CD8(v15);
  }
  *(_DWORD *)(a1 + 440) = *(_DWORD *)(a2 + 440);
  std::string::operator=((std::string *)(a1 + 448), (const std::string *)(a2 + 448));
  uint64_t v17 = *(void *)(a2 + 472);
  uint64_t v16 = *(void *)(a2 + 480);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 480);
  *(void *)(a1 + 472) = v17;
  *(void *)(a1 + 480) = v16;
  if (v18) {
    sub_20B081CD8(v18);
  }
  *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
  std::string::operator=((std::string *)(a1 + 496), (const std::string *)(a2 + 496));
  uint64_t v19 = *(void *)(a2 + 520);
  uint64_t v20 = *(void *)(a2 + 528);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 520) = v19;
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 528);
  *(void *)(a1 + 528) = v20;
  if (v21) {
    sub_20B081CD8(v21);
  }
  *(_DWORD *)(a1 + 536) = *(_DWORD *)(a2 + 536);
  std::string::operator=((std::string *)(a1 + 544), (const std::string *)(a2 + 544));
  uint64_t v22 = *(void *)(a2 + 568);
  uint64_t v23 = *(void *)(a2 + 576);
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 568) = v22;
  int v24 = *(std::__shared_weak_count **)(a1 + 576);
  *(void *)(a1 + 576) = v23;
  if (v24) {
    sub_20B081CD8(v24);
  }
  *(_DWORD *)(a1 + 584) = *(_DWORD *)(a2 + 584);
  std::string::operator=((std::string *)(a1 + 592), (const std::string *)(a2 + 592));
  uint64_t v25 = *(void *)(a2 + 616);
  uint64_t v26 = *(void *)(a2 + 624);
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 616) = v25;
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 624);
  *(void *)(a1 + 624) = v26;
  if (v27) {
    sub_20B081CD8(v27);
  }
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a2 + 632);
  std::string::operator=((std::string *)(a1 + 640), (const std::string *)(a2 + 640));
  uint64_t v28 = *(void *)(a2 + 664);
  uint64_t v29 = *(void *)(a2 + 672);
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 664) = v28;
  v30 = *(std::__shared_weak_count **)(a1 + 672);
  *(void *)(a1 + 672) = v29;
  if (v30) {
    sub_20B081CD8(v30);
  }
  *(_DWORD *)(a1 + 680) = *(_DWORD *)(a2 + 680);
  std::string::operator=((std::string *)(a1 + 688), (const std::string *)(a2 + 688));
  uint64_t v31 = *(void *)(a2 + 712);
  uint64_t v32 = *(void *)(a2 + 720);
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 712) = v31;
  int v33 = *(std::__shared_weak_count **)(a1 + 720);
  *(void *)(a1 + 720) = v32;
  if (v33) {
    sub_20B081CD8(v33);
  }
  *(_DWORD *)(a1 + 728) = *(_DWORD *)(a2 + 728);
  std::string::operator=((std::string *)(a1 + 736), (const std::string *)(a2 + 736));
  uint64_t v34 = *(void *)(a2 + 760);
  uint64_t v35 = *(void *)(a2 + 768);
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 760) = v34;
  v36 = *(std::__shared_weak_count **)(a1 + 768);
  *(void *)(a1 + 768) = v35;
  if (v36) {
    sub_20B081CD8(v36);
  }
  *(_DWORD *)(a1 + 776) = *(_DWORD *)(a2 + 776);
  std::string::operator=((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  uint64_t v37 = *(void *)(a2 + 808);
  uint64_t v38 = *(void *)(a2 + 816);
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 808) = v37;
  uint64_t v39 = *(std::__shared_weak_count **)(a1 + 816);
  *(void *)(a1 + 816) = v38;
  if (v39) {
    sub_20B081CD8(v39);
  }
  *(_DWORD *)(a1 + 824) = *(_DWORD *)(a2 + 824);
  std::string::operator=((std::string *)(a1 + 832), (const std::string *)(a2 + 832));
  uint64_t v40 = *(void *)(a2 + 856);
  uint64_t v41 = *(void *)(a2 + 864);
  if (v41) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 856) = v40;
  v42 = *(std::__shared_weak_count **)(a1 + 864);
  *(void *)(a1 + 864) = v41;
  if (v42) {
    sub_20B081CD8(v42);
  }
  *(_DWORD *)(a1 + 872) = *(_DWORD *)(a2 + 872);
  std::string::operator=((std::string *)(a1 + 880), (const std::string *)(a2 + 880));
  uint64_t v43 = *(void *)(a2 + 904);
  uint64_t v44 = *(void *)(a2 + 912);
  if (v44) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 904) = v43;
  long long v45 = *(std::__shared_weak_count **)(a1 + 912);
  *(void *)(a1 + 912) = v44;
  if (v45) {
    sub_20B081CD8(v45);
  }
  sub_20B13CC00(a1 + 920, (long long *)(a2 + 920));
  uint64_t v46 = (void **)(a1 + 1096);
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*v46);
  }
  long long v47 = *(_OWORD *)(a2 + 1096);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(_OWORD *)uint64_t v46 = v47;
  *(unsigned char *)(a2 + 1119) = 0;
  *(unsigned char *)(a2 + 1096) = 0;
  sub_20B13CD00(a1 + 1120, (void *)(a2 + 1120));
  long long v48 = *(_OWORD *)(a2 + 1144);
  *(_DWORD *)(a1 + 1160) = *(_DWORD *)(a2 + 1160);
  *(_OWORD *)(a1 + 1144) = v48;
  return a1;
}

void sub_20B13BB6C(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26BF4F718;
  sub_20B13CD6C((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B13BBD4(uint64_t a1)
{
  uint64_t v2 = sub_20B13BEC8(a1);
  *(void *)uint64_t v2 = &unk_26BF4F7C0;
  *(_DWORD *)(v2 + 248) = 2;
  sub_20B07F8E0((void *)(v2 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20B07F8E0((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20B07F8E0((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20B07F8E0((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 440) = 2;
  sub_20B07F8E0((void *)(a1 + 448), "");
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 2;
  sub_20B07F8E0((void *)(a1 + 496), "");
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 2;
  sub_20B07F8E0((void *)(a1 + 544), "");
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 584) = 2;
  sub_20B07F8E0((void *)(a1 + 592), "");
  *(void *)(a1 + 624) = 0;
  *(void *)(a1 + 616) = 0;
  *(_DWORD *)(a1 + 632) = 2;
  sub_20B07F8E0((void *)(a1 + 640), "");
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 680) = 2;
  sub_20B07F8E0((void *)(a1 + 688), "");
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 2;
  sub_20B07F8E0((void *)(a1 + 736), "");
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 776) = 2;
  sub_20B07F8E0((void *)(a1 + 784), "");
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 824) = 2;
  sub_20B07F8E0((void *)(a1 + 832), "");
  *(void *)(a1 + 864) = 0;
  *(void *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 872) = 2;
  sub_20B07F8E0((void *)(a1 + 880), "");
  *(void *)(a1 + 912) = 0;
  *(void *)(a1 + 904) = 0;
  sub_20B13C368(a1 + 920);
  *(void *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(void *)(a1 + 1120) = a1 + 1128;
  *(unsigned char *)(a1 + 1144) = 0;
  *(void *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1160) = 0;
  return a1;
}

void sub_20B13BDD0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 103));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 97));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 91));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 85));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 79));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 73));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 67));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 61));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 55));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(v1 + 49));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 43));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_20B13BFEC(v1);
  _Unwind_Resume(a1);
}

void sub_20B13BE78()
{
}

void sub_20B13BE80()
{
}

void sub_20B13BE88()
{
}

void sub_20B13BE90()
{
}

void sub_20B13BE98()
{
}

void sub_20B13BEA0()
{
}

void sub_20B13BEA8()
{
}

void sub_20B13BEB0()
{
}

void sub_20B13BEB8()
{
}

void sub_20B13BEC0()
{
}

uint64_t sub_20B13BEC8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20B07F8E0((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26BF4F840;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20B07F8E0((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_20B07F8E0((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_20B07F8E0((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20B07F8E0((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_20B13BFA8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_20B13BFEC(void *a1)
{
  *a1 = &unk_26BF4F840;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20B13C058(uint64_t a1)
{
  sub_20B13CD6C(a1);

  JUMPOUT(0x210532650);
}

void sub_20B13C090(uint64_t a1)
{
  sub_20B139DB8(a1 + 248);
  sub_20B139DB8(a1 + 296);
  sub_20B139DB8(a1 + 344);
  sub_20B139DB8(a1 + 392);
  sub_20B139DB8(a1 + 440);
  sub_20B139DB8(a1 + 488);
  sub_20B139DB8(a1 + 536);
  sub_20B139DB8(a1 + 584);
  sub_20B139DB8(a1 + 632);
  sub_20B139DB8(a1 + 680);
  sub_20B139DB8(a1 + 728);
  sub_20B139DB8(a1 + 776);
  sub_20B139DB8(a1 + 824);
  sub_20B139DB8(a1 + 872);
  sub_20B13C438(a1 + 920);
  sub_20B13C488(a1 + 1120, *(void **)(a1 + 1128));
  *(void *)(a1 + 1120) = a1 + 1128;
  *(void *)(a1 + 1136) = 0;
  *(void *)(a1 + 1128) = 0;

  sub_20B13C2E8(a1);
}

uint64_t sub_20B13C158(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return *(unsigned char *)(a1 + 1144) != 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return *(unsigned char *)(a1 + 1144) != 0;
  }
  if (*(void *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(void *)(a1 + 264)) {
        return *(unsigned char *)(a1 + 1144) != 0;
      }
    }
    else if (*(unsigned char *)(a1 + 279))
    {
      return *(unsigned char *)(a1 + 1144) != 0;
    }
    if (*(void *)(a1 + 280))
    {
      if (*(char *)(a1 + 327) < 0)
      {
        if (*(void *)(a1 + 312)) {
          return *(unsigned char *)(a1 + 1144) != 0;
        }
      }
      else if (*(unsigned char *)(a1 + 327))
      {
        return *(unsigned char *)(a1 + 1144) != 0;
      }
      if (*(void *)(a1 + 328))
      {
        if (*(char *)(a1 + 375) < 0)
        {
          if (*(void *)(a1 + 360)) {
            return *(unsigned char *)(a1 + 1144) != 0;
          }
        }
        else if (*(unsigned char *)(a1 + 375))
        {
          return *(unsigned char *)(a1 + 1144) != 0;
        }
        if (*(void *)(a1 + 376)) {
          return 1;
        }
      }
    }
  }
  return *(unsigned char *)(a1 + 1144) != 0;
}

void *sub_20B13C1F0(void *a1)
{
  *a1 = &unk_26BF4F840;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20B13C25C(void *a1)
{
  *a1 = &unk_26BF4F840;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  JUMPOUT(0x210532650);
}

void sub_20B13C2E8(uint64_t a1)
{
  sub_20B139DB8(a1 + 56);
  sub_20B139DB8(a1 + 104);
  sub_20B139DB8(a1 + 152);
  sub_20B139DB8(a1 + 200);

  sub_20B139DB8(a1 + 8);
}

BOOL sub_20B13C33C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_20B13C368(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_20B07F8E0((void *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_20B07F8E0((void *)(a1 + 80), "");
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x20000007FLL;
  sub_20B07F8E0((void *)(a1 + 136), "");
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_20B13C3FC(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void sub_20B13C438(uint64_t a1)
{
  *(_DWORD *)(a1 + 124) = 127;
  *(unsigned char *)(a1 + 120) = 0;
}

void sub_20B13C488(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20B13C488(a1, *a2);
    sub_20B13C488(a1, a2[1]);
    sub_20B13C4E4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_20B13C4E4(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::OObject *)(a1 + 24);
  *(void *)(a1 + 24) = &unk_26BF4F758;
  *(void *)(a1 + 80) = &unk_26BF4F810;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 376));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 328));
  *(void *)(a1 + 80) = &unk_26BF4F870;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 280));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 232));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 184));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 136));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 88));
  Alembic::Abc::v12::OObject::~OObject(v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B13C5BC(void *a1)
{
  *a1 = &unk_26BF4F758;
  a1[7] = &unk_26BF4F810;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 44));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 38));
  a1[7] = &unk_26BF4F870;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 26));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 14));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));

  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)a1);
}

void *sub_20B13C680(void *a1)
{
  *a1 = &unk_26BF4F810;
  uint64_t v2 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 31));
  *a1 = &unk_26BF4F870;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1));
  return a1;
}

void sub_20B13C724(void *a1)
{
  *a1 = &unk_26BF4F758;
  a1[7] = &unk_26BF4F810;
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 44));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 38));
  a1[7] = &unk_26BF4F870;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 26));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 14));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  Alembic::Abc::v12::OObject::~OObject((Alembic::Abc::v12::OObject *)a1);

  JUMPOUT(0x210532650);
}

void sub_20B13C7FC(void *a1)
{
  *a1 = &unk_26BF4F810;
  uint64_t v2 = (Alembic::Abc::v12::OScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 31));
  *a1 = &unk_26BF4F870;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1));

  JUMPOUT(0x210532650);
}

void sub_20B13C8C0(uint64_t a1)
{
  sub_20B139DB8(a1 + 248);

  sub_20B13CA40(a1);
}

BOOL sub_20B13C8FC(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 39)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  if (*(char *)(a1 + 279) < 0)
  {
    if (*(void *)(a1 + 264)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 279))
  {
    return 0;
  }
  return *(void *)(a1 + 280) != 0;
}

void *sub_20B13C948(void *a1)
{
  *a1 = &unk_26BF4F870;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20B13C9B4(void *a1)
{
  *a1 = &unk_26BF4F870;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  JUMPOUT(0x210532650);
}

void sub_20B13CA40(uint64_t a1)
{
  sub_20B139DB8(a1 + 56);
  sub_20B139DB8(a1 + 104);
  sub_20B139DB8(a1 + 152);
  sub_20B139DB8(a1 + 200);

  sub_20B139DB8(a1 + 8);
}

BOOL sub_20B13CA94(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_20B13CAC0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_20B081CD8(v6);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v7;
  if (v9) {
    sub_20B081CD8(v9);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
  uint64_t v11 = *(void *)(a2 + 136);
  uint64_t v10 = *(void *)(a2 + 144);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v11;
  *(void *)(a1 + 144) = v10;
  if (v12) {
    sub_20B081CD8(v12);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  uint64_t v14 = *(void *)(a2 + 184);
  uint64_t v13 = *(void *)(a2 + 192);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v14;
  *(void *)(a1 + 192) = v13;
  if (v15) {
    sub_20B081CD8(v15);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  uint64_t v17 = *(void *)(a2 + 232);
  uint64_t v16 = *(void *)(a2 + 240);
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v17;
  *(void *)(a1 + 240) = v16;
  if (v18) {
    sub_20B081CD8(v18);
  }
  return a1;
}

uint64_t sub_20B13CC00(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 2));
  uint64_t v6 = *((void *)a2 + 7);
  uint64_t v5 = *((void *)a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v5;
  if (v7) {
    sub_20B081CD8(v7);
  }
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 5));
  uint64_t v9 = *((void *)a2 + 13);
  uint64_t v8 = *((void *)a2 + 14);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = v8;
  if (v10) {
    sub_20B081CD8(v10);
  }
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a2 + 32);
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)((char *)a2 + 136));
  uint64_t v12 = *((void *)a2 + 20);
  uint64_t v11 = *((void *)a2 + 21);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = v12;
  *(void *)(a1 + 168) = v11;
  if (v13) {
    sub_20B081CD8(v13);
  }
  return a1;
}

void sub_20B13CD00(uint64_t a1, void *a2)
{
  long long v4 = (void *)(a1 + 8);
  sub_20B13C488(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *long long v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t sub_20B13CD6C(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4F7C0;
  sub_20B13C488(a1 + 1120, *(void **)(a1 + 1128));
  if (*(char *)(a1 + 1119) < 0) {
    operator delete(*(void **)(a1 + 1096));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 1048));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 992));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 944));
  if (*(char *)(a1 + 943) < 0) {
    operator delete(*(void **)(a1 + 920));
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 872));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 824));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 776));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 728));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 680));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 632));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 584));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 536));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 488));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 440));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  *(void *)a1 = &unk_26BF4F840;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

void *sub_20B13CEA8(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  sub_20B13CF58(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20B13CFDC(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20B13CF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B13CF58(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B0602A8(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B13CFC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B13CFDC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_20B0602A8(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20B13D03C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B13D058(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 2;
  sub_20B13CF58(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000006;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20B13CFDC(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20B13D0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B13D0FC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v17 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v17;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_20B13CFDC((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v18 = *a3;
  uint64_t v19 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v19;
  *(void *)(a1 + 40) = v18;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_20B13CFDC((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  uint64_t v20 = *a4;
  uint64_t v21 = *(uint64_t *)((char *)a4 + 5);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 85) = v21;
  *(void *)(a1 + 80) = v20;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_20B13CFDC((void *)(a1 + 96), (const void *)a4[2], a4[3], (a4[3] - a4[2]) >> 3);
  *(void *)(a1 + 120) = 0xC0000000C0000000;
  *(_DWORD *)(a1 + 128) = -1073741824;
  uint64_t v22 = *a5;
  uint64_t v23 = *(uint64_t *)((char *)a5 + 5);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 141) = v23;
  *(void *)(a1 + 136) = v22;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  sub_20B13CFDC((void *)(a1 + 152), (const void *)a5[2], a5[3], (a5[3] - a5[2]) >> 3);
  uint64_t v24 = *a6;
  uint64_t v25 = *(uint64_t *)((char *)a6 + 5);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 181) = v25;
  *(void *)(a1 + 176) = v24;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_20B13CFDC((void *)(a1 + 192), (const void *)a6[2], a6[3], (a6[3] - a6[2]) >> 3);
  uint64_t v26 = *a7;
  uint64_t v27 = *(uint64_t *)((char *)a7 + 5);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 221) = v27;
  *(void *)(a1 + 216) = v26;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  sub_20B13CFDC((void *)(a1 + 232), (const void *)a7[2], a7[3], (a7[3] - a7[2]) >> 3);
  uint64_t v28 = *a8;
  *(void *)(a1 + 261) = *(uint64_t *)((char *)a8 + 5);
  *(void *)(a1 + 256) = v28;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  sub_20B13CFDC((void *)(a1 + 272), (const void *)a8[2], a8[3], (a8[3] - a8[2]) >> 3);
  uint64_t v29 = *a9;
  *(void *)(a1 + 301) = *(uint64_t *)((char *)a9 + 5);
  *(void *)(a1 + 296) = v29;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  sub_20B13CFDC((void *)(a1 + 312), (const void *)a9[2], a9[3], (a9[3] - a9[2]) >> 3);
  uint64_t v30 = *a10;
  *(void *)(a1 + 341) = *(uint64_t *)((char *)a10 + 5);
  *(void *)(a1 + 336) = v30;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  sub_20B13CFDC((void *)(a1 + 352), (const void *)a10[2], a10[3], (a10[3] - a10[2]) >> 3);
  sub_20B07F8E0((void *)(a1 + 376), "catmull-clark");
  *(int64x2_t *)(a1 + 400) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 416) = xmmword_20B1E8120;
  *(int64x2_t *)(a1 + 432) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0x30000000ALL;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(void *)(a1 + 496) = 0x20000000ALL;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 536) = 0x100000005;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 568) = 127;
  return a1;
}

void sub_20B13D3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  uint64_t v20 = *v17;
  if (*v17)
  {
    v10[45] = v20;
    operator delete(v20);
  }
  uint64_t v21 = *v19;
  if (*v19)
  {
    v10[40] = v21;
    operator delete(v21);
  }
  uint64_t v22 = *v18;
  if (*v18)
  {
    v10[35] = v22;
    operator delete(v22);
  }
  uint64_t v23 = *v16;
  if (*v16)
  {
    v10[30] = v23;
    operator delete(v23);
  }
  uint64_t v24 = *v15;
  if (*v15)
  {
    v10[25] = v24;
    operator delete(v24);
  }
  uint64_t v25 = *v14;
  if (*v14)
  {
    v10[20] = v25;
    operator delete(v25);
  }
  uint64_t v26 = *v13;
  if (*v13)
  {
    v10[13] = v26;
    operator delete(v26);
  }
  uint64_t v27 = *v12;
  if (*v12)
  {
    v10[8] = v27;
    operator delete(v27);
  }
  uint64_t v28 = *v11;
  if (*v11)
  {
    v10[3] = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

char *sub_20B13D48C(char *result, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(a2 + 5);
  *((void *)result + 17) = *(void *)a2;
  *(void *)(result + 141) = v7;
  if (result + 136 != (char *)a2) {
    uint64_t result = sub_20B139A48(result + 152, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  }
  uint64_t v8 = *(void *)(a3 + 5);
  *((void *)v6 + 22) = *(void *)a3;
  *(void *)(v6 + 181) = v8;
  if (v6 + 176 != (char *)a3) {
    uint64_t result = sub_20B139A48(v6 + 192, *(char **)(a3 + 16), *(void *)(a3 + 24), (uint64_t)(*(void *)(a3 + 24) - *(void *)(a3 + 16)) >> 3);
  }
  uint64_t v9 = *(void *)(a4 + 5);
  *((void *)v6 + 27) = *(void *)a4;
  *(void *)(v6 + 221) = v9;
  if (v6 + 216 != a4)
  {
    uint64_t v10 = (char *)*((void *)a4 + 2);
    uint64_t v11 = *((void *)a4 + 3);
    return sub_20B139A48(v6 + 232, v10, v11, (v11 - (uint64_t)v10) >> 3);
  }
  return result;
}

char *sub_20B13D56C(char *result, uint64_t *a2, char *a3)
{
  long long v4 = result;
  uint64_t v5 = *a2;
  *(void *)(result + 261) = *(uint64_t *)((char *)a2 + 5);
  *((void *)result + 32) = v5;
  if (result + 256 != (char *)a2) {
    uint64_t result = sub_20B139A48(result + 272, (char *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  }
  uint64_t v6 = *(void *)a3;
  *(void *)(v4 + 301) = *(void *)(a3 + 5);
  *((void *)v4 + 37) = v6;
  if (v4 + 296 != a3)
  {
    uint64_t v7 = (char *)*((void *)a3 + 2);
    uint64_t v8 = *((void *)a3 + 3);
    return sub_20B139A48(v4 + 312, v7, v8, (v8 - (uint64_t)v7) >> 3);
  }
  return result;
}

void *sub_20B13D60C(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 3;
  sub_20B13CF58(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x20000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20B13CFDC(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20B13D694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B13D6B0(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 2;
  sub_20B13CF58(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x100000005;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20B13CFDC(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20B13D738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B13D754(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_20B13CFDC((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v8 = *a3;
  uint64_t v9 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v9;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_20B13CFDC((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_20B13D7EC(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B13D808(void *__dst, uint64_t a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    __dst[2] = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  sub_20B07F8E0(__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  __dst[7] = 0;
  __dst[8] = 0;
  sub_20B07F8E0(__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  __dst[13] = 0;
  __dst[14] = 0;
  *((unsigned char *)__dst + 120) = a4;
  *((_DWORD *)__dst + 31) = a5;
  sub_20B07F8E0(__dst + 17, "");
  __dst[20] = 0;
  __dst[21] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_20B13D9EC((char *)__p, &v20, a3, a4, a5, a6, a7, a8, a9);
  sub_20B13CC00((uint64_t)__dst, (long long *)__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v25);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v24);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v21) {
    sub_20B081CD8(v21);
  }
  return __dst;
}

void sub_20B13D984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  sub_20B13A4E8((uint64_t)va);
  if (a6) {
    sub_20B081CD8(a6);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v8);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v7);
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  _Unwind_Resume(a1);
}

char *sub_20B13D9EC(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    *((void *)__dst + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v50 = __dst + 24;
  v49 = (std::string *)sub_20B07F8E0((void *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_20B07F8E0((void *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  uint64_t v17 = (long long *)(__dst + 136);
  sub_20B07F8E0((void *)__dst + 17, "");
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  uint64_t v18 = (std::__shared_weak_count *)a2[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v87 = 0;
  __p[1] = 0;
  __p[0] = &__p[1];
  LODWORD(v99) = 2;
  sub_20B13950C((uint64_t)&v99 + 8, (const void ***)__p);
  long long v101 = 0uLL;
  LODWORD(v102) = 0;
  *(void *)((char *)&v102 + 4) = 1;
  sub_20B0780A4((uint64_t)__p, (void *)__p[1]);
  if (v18) {
    sub_20B081CD8(v18);
  }
  sub_20B138740(a7, (uint64_t)&v99);
  sub_20B138740(a8, (uint64_t)&v99);
  sub_20B138740(a9, (uint64_t)&v99);
  v96 = 0;
  v97 = 0;
  uint64_t v98 = 0;
  uint64_t v19 = (uint64_t **)sub_20B13950C((uint64_t)&v96, (const void ***)&v99 + 1);
  sub_20B13E6EC(v19, a5);
  sub_20B07F8E0(__p, "isGeomParam");
  sub_20B07F8E0(__str, "true");
  v71 = __p;
  uint64_t v20 = sub_20B139840(&v96, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v71);
  std::string::operator=((std::string *)(v20 + 7), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SBYTE7(v87) < 0) {
    operator delete(__p[0]);
  }
  memset(&v95, 0, sizeof(v95));
  sub_20B07F8E0(&v95, "float32_t");
  sub_20B07F8E0(__p, "podName");
  *(void *)long long __str = __p;
  uint64_t v21 = sub_20B139840(&v96, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)__str);
  std::string::operator=((std::string *)(v21 + 7), &v95);
  if (SBYTE7(v87) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v94 = 0;
  long long v92 = 0u;
  memset(v93, 0, sizeof(v93));
  *(_OWORD *)v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  *(_OWORD *)va_list __p = 0u;
  long long v87 = 0u;
  sub_20B13E968((uint64_t)__p);
  std::ostream::operator<<();
  memset(&v85, 0, sizeof(v85));
  std::stringbuf::str();
  sub_20B07F8E0(__str, "podExtent");
  v71 = __str;
  uint64_t v22 = sub_20B139840(&v96, (const void **)__str, (uint64_t)&unk_20B1E7420, (long long **)&v71);
  std::string::operator=((std::string *)(v22 + 7), &v85);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v84 = 0;
  long long v82 = 0u;
  memset(v83, 0, sizeof(v83));
  *(_OWORD *)v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  memset(__str, 0, sizeof(__str));
  sub_20B13E968((uint64_t)__str);
  std::ostream::operator<<();
  memset(&v76, 0, sizeof(v76));
  std::stringbuf::str();
  sub_20B07F8E0(&v71, "arrayExtent");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  char v23 = sub_20B139840(&v96, (const void **)&v71, (uint64_t)&unk_20B1E7420, (long long **)&v75);
  std::string::operator=((std::string *)(v23 + 7), &v76);
  if (v72.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v71);
  }
  sub_20B07F8E0(&v71, "interpretation");
  sub_20B07F8E0(&v75, "");
  v67 = &v71;
  uint64_t v24 = sub_20B139840(&v96, (const void **)&v71, (uint64_t)&unk_20B1E7420, (long long **)&v67);
  std::string::operator=((std::string *)(v24 + 7), &v75);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (v72.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v71);
  }
  int v25 = v99;
  long long v26 = v101;
  if (*((void *)&v101 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v101 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((void)v26)
  {
    uint64_t v27 = *a2;
    uint64_t v28 = (std::__shared_weak_count *)a2[1];
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v27 + 24))(&v75);
    (*(void (**)(void **__return_ptr))(*(void *)v75.__r_.__value_.__l.__data_ + 24))(&v71);
    int v29 = (*(uint64_t (**)(void *, void))(*(void *)v71 + 48))(v71, v26);
    if (v72.__r_.__value_.__r.__words[0]) {
      sub_20B081CD8((std::__shared_weak_count *)v72.__r_.__value_.__l.__data_);
    }
    if (v75.__r_.__value_.__l.__size_) {
      sub_20B081CD8((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
    }
    if (v28) {
      sub_20B081CD8(v28);
    }
  }
  else
  {
    int v29 = v102;
  }
  if (__dst[120])
  {
    uint64_t v30 = (std::__shared_weak_count *)a2[1];
    uint64_t v69 = *a2;
    v70 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v75.__r_.__value_.__l.__data_) = 3;
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v96;
    LODWORD(v67) = 1;
    LODWORD(v68) = v25;
    MEMORY[0x210531350](&v71, &v69, a3, &v75, &v67);
    *((_DWORD *)__dst + 32) = v71;
    std::string::operator=((std::string *)(__dst + 136), &v72);
    uint64_t v32 = v73;
    uint64_t v31 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    int v33 = (std::__shared_weak_count *)*((void *)__dst + 21);
    *((void *)__dst + 20) = v32;
    *((void *)__dst + 21) = v31;
    if (v33) {
      sub_20B081CD8(v33);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v71);
    if (v70) {
      sub_20B081CD8(v70);
    }
    int v62 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20B07F994(&v63, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v63 = *v17;
      uint64_t v64 = *((void *)__dst + 19);
    }
    uint64_t v38 = *((void *)__dst + 21);
    uint64_t v65 = *((void *)__dst + 20);
    uint64_t v66 = v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    sub_20B07F8E0(&v75, ".vals");
    LODWORD(v67) = 3;
    v68 = &v96;
    int v60 = 1;
    int v61 = v25;
    int v58 = 2;
    int v59 = v29;
    sub_20B13EC04((uint64_t)&v71, &v62, (uint64_t)&v75, &v67, &v60, &v58);
    _DWORD *v50 = v71;
    std::string::operator=(v49, &v72);
    uint64_t v40 = v73;
    uint64_t v39 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v40;
    *((void *)__dst + 8) = v39;
    if (v41) {
      sub_20B081CD8(v41);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v62);
    int v53 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20B07F994(&v54, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v54 = *v17;
      uint64_t v55 = *((void *)__dst + 19);
    }
    uint64_t v42 = *((void *)__dst + 21);
    uint64_t v56 = *((void *)__dst + 20);
    uint64_t v57 = v42;
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    sub_20B07F8E0(&v75, ".indices");
    LODWORD(v67) = 2;
    LODWORD(v68) = v29;
    int v60 = 0;
    int v61 = 0;
    int v58 = 0;
    int v59 = 0;
    sub_20B13F12C((uint64_t)&v71, &v53, (uint64_t)&v75, &v67, &v60, &v58);
    *((_DWORD *)__dst + 18) = v71;
    std::string::operator=((std::string *)(__dst + 80), &v72);
    uint64_t v44 = v73;
    uint64_t v43 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    long long v45 = (std::__shared_weak_count *)*((void *)__dst + 14);
    *((void *)__dst + 13) = v44;
    *((void *)__dst + 14) = v43;
    if (v45) {
      sub_20B081CD8(v45);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v53);
  }
  else
  {
    uint64_t v34 = (std::__shared_weak_count *)a2[1];
    uint64_t v51 = *a2;
    long long v52 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v75.__r_.__value_.__l.__data_) = 3;
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v96;
    LODWORD(v67) = 1;
    LODWORD(v68) = v25;
    int v60 = 2;
    int v61 = v29;
    int v58 = 0;
    int v59 = 0;
    sub_20B13F654((uint64_t)&v71, &v51, a3, &v75, &v67, &v60, &v58);
    _DWORD *v50 = v71;
    std::string::operator=(v49, &v72);
    uint64_t v36 = v73;
    uint64_t v35 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v36;
    *((void *)__dst + 8) = v35;
    if (v37) {
      sub_20B081CD8(v37);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (v52) {
      sub_20B081CD8(v52);
    }
  }
  if (*((void *)&v26 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v26 + 1));
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  *(void *)long long __str = *MEMORY[0x263F8C2C8];
  uint64_t v46 = *(void **)__str;
  long long v47 = *(void **)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&__str[*(void *)(*(void *)__str - 24)] = v47;
  *(void *)&__str[8] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v81) < 0) {
    operator delete(v80[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2105325E0](v83);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  __p[0] = v46;
  *(void **)((char *)__p + *((void *)v46 - 3)) = v47;
  __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
  if (SHIBYTE(v91) < 0) {
    operator delete(v90[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2105325E0](v93);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  sub_20B0780A4((uint64_t)&v96, v97);
  if (*((void *)&v101 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v101 + 1));
  }
  sub_20B0780A4((uint64_t)&v99 + 8, (void *)v100);
  return __dst;
}

void sub_20B13E44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Alembic::Abc::v12::OArrayProperty *a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (v54) {
    sub_20B081CD8(v54);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_20B13EB00((uint64_t)&a52);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  sub_20B13EB00((uint64_t)&STACK[0x260]);
  if (*(char *)(v55 - 185) < 0) {
    operator delete(*(void **)(v55 - 208));
  }
  sub_20B0780A4(v55 - 184, *(void **)(v55 - 176));
  sub_20B138C3C(v55 - 160);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a10);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  if (*(char *)(v52 + 23) < 0) {
    operator delete(*(void **)v52);
  }
  _Unwind_Resume(a1);
}

void sub_20B13E690(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20B13E624);
}

void sub_20B13E6A8()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x20B13E63CLL);
}

void sub_20B13E6C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    JUMPOUT(0x20B13E648);
  }
  JUMPOUT(0x20B13E64CLL);
}

void sub_20B13E6EC(uint64_t **a1, int a2)
{
  switch(a2)
  {
    case 0:
      sub_20B07F8E0(v9, "geoScope");
      sub_20B07F8E0(&__p, "con");
      uint64_t v11 = v9;
      uint64_t v3 = sub_20B139840(a1, (const void **)v9, (uint64_t)&unk_20B1E7420, (long long **)&v11);
      std::string::operator=((std::string *)(v3 + 7), &__p);
      goto LABEL_7;
    case 1:
      sub_20B07F8E0(v9, "geoScope");
      sub_20B07F8E0(&__p, "uni");
      uint64_t v11 = v9;
      uint64_t v7 = sub_20B139840(a1, (const void **)v9, (uint64_t)&unk_20B1E7420, (long long **)&v11);
      std::string::operator=((std::string *)(v7 + 7), &__p);
      goto LABEL_7;
    case 2:
      sub_20B07F8E0(v9, "geoScope");
      sub_20B07F8E0(&__p, "var");
      uint64_t v11 = v9;
      long long v4 = sub_20B139840(a1, (const void **)v9, (uint64_t)&unk_20B1E7420, (long long **)&v11);
      std::string::operator=((std::string *)(v4 + 7), &__p);
      goto LABEL_7;
    case 3:
      sub_20B07F8E0(v9, "geoScope");
      sub_20B07F8E0(&__p, "vtx");
      uint64_t v11 = v9;
      uint64_t v5 = sub_20B139840(a1, (const void **)v9, (uint64_t)&unk_20B1E7420, (long long **)&v11);
      std::string::operator=((std::string *)(v5 + 7), &__p);
      goto LABEL_7;
    case 4:
      sub_20B07F8E0(v9, "geoScope");
      sub_20B07F8E0(&__p, "fvr");
      uint64_t v11 = v9;
      uint64_t v6 = sub_20B139840(a1, (const void **)v9, (uint64_t)&unk_20B1E7420, (long long **)&v11);
      std::string::operator=((std::string *)(v6 + 7), &__p);
LABEL_7:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      break;
    default:
      return;
  }
}

void sub_20B13E900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B13E968(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_20B13EAD8(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x2105325E0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B13EB00(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2105325E0](a1 + 112);
  return a1;
}

uint64_t sub_20B13EC04(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_20B07F8E0((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_20B13ECE0(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_20B081CD8(v17);
  }
  return a1;
}

void sub_20B13ECC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_20B081CD8(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

void sub_20B13ECE0(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(void *)&long long v22 = (char *)&v22 + 8;
  *((void *)&v22 + 1) = 0;
  LODWORD(v27) = 2;
  *(void *)&v23[0] = 0;
  sub_20B13950C((uint64_t)&v27 + 8, (const void ***)&v22);
  long long v29 = 0uLL;
  LODWORD(v30) = 0;
  *(void *)((char *)&v30 + 4) = 1;
  sub_20B0780A4((uint64_t)&v22, *((void **)&v22 + 1));
  sub_20B138740(a4, (uint64_t)&v27);
  sub_20B138740(a5, (uint64_t)&v27);
  sub_20B138740(a6, (uint64_t)&v27);
  sub_20B138740(a7, (uint64_t)&v27);
  *(_DWORD *)a1 = v27;
  uint64_t v25 = a1;
  long long v26 = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    long long v22 = 0u;
    sub_20B10C0CC((uint64_t)&v22);
    sub_20B07FC90(v23, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    memset(v21, 0, sizeof(v21));
    std::stringbuf::str();
    sub_20B1393B4(v21, (long long *)__p);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v18 = sub_20B139478(exception, (uint64_t)v21);
    __cxa_throw(v18, (struct type_info *)&unk_26BF4F288, (void (*)(void *))sub_20B1387F8);
  }
  long long v22 = 0uLL;
  *(void *)&v23[0] = 0;
  sub_20B13950C((uint64_t)&v22, (const void ***)&v27 + 1);
  long long v13 = v29;
  if (*((void *)&v29 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *a2;
  if ((void)v13)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v14 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v21);
    (*(void (**)(void, void))(**(void **)&v21[0] + 48))(*(void *)&v21[0], v13);
    if (*((void *)&v21[0] + 1)) {
      sub_20B081CD8(*((std::__shared_weak_count **)&v21[0] + 1));
    }
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v14 = *a2;
  }
  __p[0] = (void *)0x10000000ALL;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v14 + 104))(v21);
  long long v15 = v21[0];
  v21[0] = 0uLL;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v15;
  if (v16)
  {
    sub_20B081CD8(v16);
    if (*((void *)&v21[0] + 1)) {
      sub_20B081CD8(*((std::__shared_weak_count **)&v21[0] + 1));
    }
  }
  if (*((void *)&v13 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v13 + 1));
  }
  sub_20B0780A4((uint64_t)&v22, *((void **)&v22 + 1));
  if (*((void *)&v29 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v29 + 1));
  }
  sub_20B0780A4((uint64_t)&v27 + 8, (void *)v28);
}

void sub_20B13F004(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v10.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B1394D4((std::exception *)va);
  sub_20B0A8E60((uint64_t)va1);
  __cxa_begin_catch(a1);
  sub_20B139DB8(v6);
  if (a2 == 2) {
    sub_20B138BCC(v7 - 160);
  }
  else {
    sub_20B138B5C(v7 - 160);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B13EF1CLL);
}

void sub_20B13F0E0(_Unwind_Exception *a1)
{
  sub_20B138C3C(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20B13F12C(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_20B07F8E0((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_20B13F208(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_20B081CD8(v17);
  }
  return a1;
}

void sub_20B13F1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_20B081CD8(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

void sub_20B13F208(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(void *)&long long v22 = (char *)&v22 + 8;
  *((void *)&v22 + 1) = 0;
  LODWORD(v27) = 2;
  *(void *)&v23[0] = 0;
  sub_20B13950C((uint64_t)&v27 + 8, (const void ***)&v22);
  long long v29 = 0uLL;
  LODWORD(v30) = 0;
  *(void *)((char *)&v30 + 4) = 1;
  sub_20B0780A4((uint64_t)&v22, *((void **)&v22 + 1));
  sub_20B138740(a4, (uint64_t)&v27);
  sub_20B138740(a5, (uint64_t)&v27);
  sub_20B138740(a6, (uint64_t)&v27);
  sub_20B138740(a7, (uint64_t)&v27);
  *(_DWORD *)a1 = v27;
  uint64_t v25 = a1;
  long long v26 = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    long long v22 = 0u;
    sub_20B10C0CC((uint64_t)&v22);
    sub_20B07FC90(v23, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    memset(v21, 0, sizeof(v21));
    std::stringbuf::str();
    sub_20B1393B4(v21, (long long *)__p);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v18 = sub_20B139478(exception, (uint64_t)v21);
    __cxa_throw(v18, (struct type_info *)&unk_26BF4F288, (void (*)(void *))sub_20B1387F8);
  }
  long long v22 = 0uLL;
  *(void *)&v23[0] = 0;
  sub_20B13950C((uint64_t)&v22, (const void ***)&v27 + 1);
  long long v13 = v29;
  if (*((void *)&v29 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *a2;
  if ((void)v13)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v14 + 24))(__p);
    (*(void (**)(_OWORD *__return_ptr))(*(void *)__p[0] + 24))(v21);
    (*(void (**)(void, void))(**(void **)&v21[0] + 48))(*(void *)&v21[0], v13);
    if (*((void *)&v21[0] + 1)) {
      sub_20B081CD8(*((std::__shared_weak_count **)&v21[0] + 1));
    }
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
    uint64_t v14 = *a2;
  }
  __p[0] = (void *)0x100000005;
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v14 + 104))(v21);
  long long v15 = v21[0];
  v21[0] = 0uLL;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v15;
  if (v16)
  {
    sub_20B081CD8(v16);
    if (*((void *)&v21[0] + 1)) {
      sub_20B081CD8(*((std::__shared_weak_count **)&v21[0] + 1));
    }
  }
  if (*((void *)&v13 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v13 + 1));
  }
  sub_20B0780A4((uint64_t)&v22, *((void **)&v22 + 1));
  if (*((void *)&v29 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v29 + 1));
  }
  sub_20B0780A4((uint64_t)&v27 + 8, (void *)v28);
}

void sub_20B13F52C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  v10.__vftable = va_arg(va1, std::exception_vtbl *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B1394D4((std::exception *)va);
  sub_20B0A8E60((uint64_t)va1);
  __cxa_begin_catch(a1);
  sub_20B139DB8(v6);
  if (a2 == 2) {
    sub_20B138BCC(v7 - 160);
  }
  else {
    sub_20B138B5C(v7 - 160);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B13F444);
}

void sub_20B13F608(_Unwind_Exception *a1)
{
  sub_20B138C3C(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20B13F654(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_20B07F8E0((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_20B13ECE0(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_20B081CD8(v17);
  }
  return a1;
}

void sub_20B13F70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_20B081CD8(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void *sub_20B13F738(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  uint64_t v5 = (a2[1] - *a2) >> 2;
  sub_20B13CF58(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x10000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20B13CFDC(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20B13F7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B13F7DC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_20B13CFDC((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v8 = *a3;
  uint64_t v9 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v9;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_20B13CFDC((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_20B13F874(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B13F890(void *__dst, uint64_t a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    __dst[2] = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  sub_20B07F8E0(__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  __dst[7] = 0;
  __dst[8] = 0;
  sub_20B07F8E0(__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  __dst[13] = 0;
  __dst[14] = 0;
  *((unsigned char *)__dst + 120) = a4;
  *((_DWORD *)__dst + 31) = a5;
  sub_20B07F8E0(__dst + 17, "");
  __dst[20] = 0;
  __dst[21] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_20B13FA74((char *)__p, &v20, a3, a4, a5, a6, a7, a8, a9);
  sub_20B13CC00((uint64_t)__dst, (long long *)__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v25);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v24);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v21) {
    sub_20B081CD8(v21);
  }
  return __dst;
}

void sub_20B13FA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  sub_20B13A4E8((uint64_t)va);
  if (a6) {
    sub_20B081CD8(a6);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v8);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v7);
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  _Unwind_Resume(a1);
}

char *sub_20B13FA74(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    *((void *)__dst + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v50 = __dst + 24;
  v49 = (std::string *)sub_20B07F8E0((void *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_20B07F8E0((void *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  uint64_t v17 = (long long *)(__dst + 136);
  sub_20B07F8E0((void *)__dst + 17, "");
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  uint64_t v18 = (std::__shared_weak_count *)a2[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v87 = 0;
  __p[1] = 0;
  __p[0] = &__p[1];
  LODWORD(v99) = 2;
  sub_20B13950C((uint64_t)&v99 + 8, (const void ***)__p);
  long long v101 = 0uLL;
  LODWORD(v102) = 0;
  *(void *)((char *)&v102 + 4) = 1;
  sub_20B0780A4((uint64_t)__p, (void *)__p[1]);
  if (v18) {
    sub_20B081CD8(v18);
  }
  sub_20B138740(a7, (uint64_t)&v99);
  sub_20B138740(a8, (uint64_t)&v99);
  sub_20B138740(a9, (uint64_t)&v99);
  v96 = 0;
  v97 = 0;
  uint64_t v98 = 0;
  uint64_t v19 = (uint64_t **)sub_20B13950C((uint64_t)&v96, (const void ***)&v99 + 1);
  sub_20B13E6EC(v19, a5);
  sub_20B07F8E0(__p, "isGeomParam");
  sub_20B07F8E0(__str, "true");
  v71 = __p;
  uint64_t v20 = sub_20B139840(&v96, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v71);
  std::string::operator=((std::string *)(v20 + 7), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SBYTE7(v87) < 0) {
    operator delete(__p[0]);
  }
  memset(&v95, 0, sizeof(v95));
  sub_20B07F8E0(&v95, "float32_t");
  sub_20B07F8E0(__p, "podName");
  *(void *)long long __str = __p;
  uint64_t v21 = sub_20B139840(&v96, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)__str);
  std::string::operator=((std::string *)(v21 + 7), &v95);
  if (SBYTE7(v87) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v94 = 0;
  long long v92 = 0u;
  memset(v93, 0, sizeof(v93));
  *(_OWORD *)v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v87 = 0u;
  sub_20B13E968((uint64_t)__p);
  std::ostream::operator<<();
  memset(&v85, 0, sizeof(v85));
  std::stringbuf::str();
  sub_20B07F8E0(__str, "podExtent");
  v71 = __str;
  long long v22 = sub_20B139840(&v96, (const void **)__str, (uint64_t)&unk_20B1E7420, (long long **)&v71);
  std::string::operator=((std::string *)(v22 + 7), &v85);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v84 = 0;
  long long v82 = 0u;
  memset(v83, 0, sizeof(v83));
  *(_OWORD *)v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  memset(__str, 0, sizeof(__str));
  sub_20B13E968((uint64_t)__str);
  std::ostream::operator<<();
  memset(&v76, 0, sizeof(v76));
  std::stringbuf::str();
  sub_20B07F8E0(&v71, "arrayExtent");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  char v23 = sub_20B139840(&v96, (const void **)&v71, (uint64_t)&unk_20B1E7420, (long long **)&v75);
  std::string::operator=((std::string *)(v23 + 7), &v76);
  if (v72.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v71);
  }
  sub_20B07F8E0(&v71, "interpretation");
  sub_20B07F8E0(&v75, "vector");
  v67 = &v71;
  uint64_t v24 = sub_20B139840(&v96, (const void **)&v71, (uint64_t)&unk_20B1E7420, (long long **)&v67);
  std::string::operator=((std::string *)(v24 + 7), &v75);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (v72.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v71);
  }
  int v25 = v99;
  long long v26 = v101;
  if (*((void *)&v101 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v101 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((void)v26)
  {
    uint64_t v27 = *a2;
    long long v28 = (std::__shared_weak_count *)a2[1];
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v27 + 24))(&v75);
    (*(void (**)(void **__return_ptr))(*(void *)v75.__r_.__value_.__l.__data_ + 24))(&v71);
    int v29 = (*(uint64_t (**)(void *, void))(*(void *)v71 + 48))(v71, v26);
    if (v72.__r_.__value_.__r.__words[0]) {
      sub_20B081CD8((std::__shared_weak_count *)v72.__r_.__value_.__l.__data_);
    }
    if (v75.__r_.__value_.__l.__size_) {
      sub_20B081CD8((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
    }
    if (v28) {
      sub_20B081CD8(v28);
    }
  }
  else
  {
    int v29 = v102;
  }
  if (__dst[120])
  {
    long long v30 = (std::__shared_weak_count *)a2[1];
    uint64_t v69 = *a2;
    v70 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v75.__r_.__value_.__l.__data_) = 3;
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v96;
    LODWORD(v67) = 1;
    LODWORD(v68) = v25;
    MEMORY[0x210531350](&v71, &v69, a3, &v75, &v67);
    *((_DWORD *)__dst + 32) = v71;
    std::string::operator=((std::string *)(__dst + 136), &v72);
    uint64_t v32 = v73;
    uint64_t v31 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    int v33 = (std::__shared_weak_count *)*((void *)__dst + 21);
    *((void *)__dst + 20) = v32;
    *((void *)__dst + 21) = v31;
    if (v33) {
      sub_20B081CD8(v33);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v71);
    if (v70) {
      sub_20B081CD8(v70);
    }
    int v62 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20B07F994(&v63, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v63 = *v17;
      uint64_t v64 = *((void *)__dst + 19);
    }
    uint64_t v38 = *((void *)__dst + 21);
    uint64_t v65 = *((void *)__dst + 20);
    uint64_t v66 = v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    sub_20B07F8E0(&v75, ".vals");
    LODWORD(v67) = 3;
    v68 = &v96;
    int v60 = 1;
    int v61 = v25;
    int v58 = 2;
    int v59 = v29;
    sub_20B140774((uint64_t)&v71, &v62, (uint64_t)&v75, &v67, &v60, &v58);
    _DWORD *v50 = v71;
    std::string::operator=(v49, &v72);
    uint64_t v40 = v73;
    uint64_t v39 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v40;
    *((void *)__dst + 8) = v39;
    if (v41) {
      sub_20B081CD8(v41);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v62);
    int v53 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20B07F994(&v54, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v54 = *v17;
      uint64_t v55 = *((void *)__dst + 19);
    }
    uint64_t v42 = *((void *)__dst + 21);
    uint64_t v56 = *((void *)__dst + 20);
    uint64_t v57 = v42;
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    sub_20B07F8E0(&v75, ".indices");
    LODWORD(v67) = 2;
    LODWORD(v68) = v29;
    int v60 = 0;
    int v61 = 0;
    int v58 = 0;
    int v59 = 0;
    sub_20B13F12C((uint64_t)&v71, &v53, (uint64_t)&v75, &v67, &v60, &v58);
    *((_DWORD *)__dst + 18) = v71;
    std::string::operator=((std::string *)(__dst + 80), &v72);
    uint64_t v44 = v73;
    uint64_t v43 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    long long v45 = (std::__shared_weak_count *)*((void *)__dst + 14);
    *((void *)__dst + 13) = v44;
    *((void *)__dst + 14) = v43;
    if (v45) {
      sub_20B081CD8(v45);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v53);
  }
  else
  {
    uint64_t v34 = (std::__shared_weak_count *)a2[1];
    uint64_t v51 = *a2;
    uint64_t v52 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v75.__r_.__value_.__l.__data_) = 3;
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v96;
    LODWORD(v67) = 1;
    LODWORD(v68) = v25;
    int v60 = 2;
    int v61 = v29;
    int v58 = 0;
    int v59 = 0;
    sub_20B140D50((uint64_t)&v71, &v51, a3, &v75, &v67, &v60, &v58);
    _DWORD *v50 = v71;
    std::string::operator=(v49, &v72);
    uint64_t v36 = v73;
    uint64_t v35 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v36;
    *((void *)__dst + 8) = v35;
    if (v37) {
      sub_20B081CD8(v37);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (v52) {
      sub_20B081CD8(v52);
    }
  }
  if (*((void *)&v26 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v26 + 1));
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  *(void *)long long __str = *MEMORY[0x263F8C2C8];
  uint64_t v46 = *(void **)__str;
  long long v47 = *(void **)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&__str[*(void *)(*(void *)__str - 24)] = v47;
  *(void *)&__str[8] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v81) < 0) {
    operator delete(v80[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2105325E0](v83);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  __p[0] = v46;
  *(void **)((char *)__p + *((void *)v46 - 3)) = v47;
  __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
  if (SHIBYTE(v91) < 0) {
    operator delete(v90[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2105325E0](v93);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  sub_20B0780A4((uint64_t)&v96, v97);
  if (*((void *)&v101 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v101 + 1));
  }
  sub_20B0780A4((uint64_t)&v99 + 8, (void *)v100);
  return __dst;
}

void sub_20B1404D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Alembic::Abc::v12::OArrayProperty *a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (v54) {
    sub_20B081CD8(v54);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_20B13EB00((uint64_t)&a52);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  sub_20B13EB00((uint64_t)&STACK[0x260]);
  if (*(char *)(v55 - 185) < 0) {
    operator delete(*(void **)(v55 - 208));
  }
  sub_20B0780A4(v55 - 184, *(void **)(v55 - 176));
  sub_20B138C3C(v55 - 160);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a10);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  if (*(char *)(v52 + 23) < 0) {
    operator delete(*(void **)v52);
  }
  _Unwind_Resume(a1);
}

void sub_20B140718(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20B1406ACLL);
}

void sub_20B140730()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x20B1406C4);
}

void sub_20B140748(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    JUMPOUT(0x20B1406D0);
  }
  JUMPOUT(0x20B1406D4);
}

uint64_t sub_20B140774(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_20B07F8E0((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_20B140850(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_20B081CD8(v17);
  }
  return a1;
}

void sub_20B140830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_20B081CD8(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

void sub_20B140850(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  *(void *)&long long v23 = (char *)&v23 + 8;
  *((void *)&v23 + 1) = 0;
  LODWORD(v28) = 2;
  *(void *)&v24[0] = 0;
  sub_20B13950C((uint64_t)&v28 + 8, (const void ***)&v23);
  long long v30 = 0uLL;
  LODWORD(v31) = 0;
  *(void *)((char *)&v31 + 4) = 1;
  sub_20B0780A4((uint64_t)&v23, *((void **)&v23 + 1));
  sub_20B138740(a4, (uint64_t)&v28);
  sub_20B138740(a5, (uint64_t)&v28);
  sub_20B138740(a6, (uint64_t)&v28);
  sub_20B138740(a7, (uint64_t)&v28);
  *(_DWORD *)a1 = v28;
  uint64_t v26 = a1;
  uint64_t v27 = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    long long v23 = 0u;
    sub_20B10C0CC((uint64_t)&v23);
    sub_20B07FC90(v24, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    *(_OWORD *)std::string __p = 0u;
    long long v22 = 0u;
    std::stringbuf::str();
    sub_20B1393B4(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v19 = sub_20B139478(exception, (uint64_t)__p);
    __cxa_throw(v19, (struct type_info *)&unk_26BF4F288, (void (*)(void *))sub_20B1387F8);
  }
  long long v23 = 0uLL;
  *(void *)&v24[0] = 0;
  sub_20B13950C((uint64_t)&v23, (const void ***)&v28 + 1);
  sub_20B07F8E0(__p, "interpretation");
  sub_20B07F8E0(&__str, "vector");
  uint64_t v32 = __p;
  int v13 = sub_20B139840((uint64_t **)&v23, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v32);
  std::string::operator=((std::string *)(v13 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
  long long v14 = v30;
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if ((void)v14)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v15 + 24))(&__str);
    (*(void (**)(void **__return_ptr))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__p);
    (*(void (**)(void *, void))(*(void *)__p[0] + 48))(__p[0], v14);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
    if (__str.__r_.__value_.__l.__size_) {
      sub_20B081CD8((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    uint64_t v15 = *a2;
  }
  __str.__r_.__value_.__r.__words[0] = 0x30000000ALL;
  (*(void (**)(void **__return_ptr))(*(void *)v15 + 104))(__p);
  long long v16 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_20B081CD8(v17);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
  }
  if (*((void *)&v14 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v14 + 1));
  }
  sub_20B0780A4((uint64_t)&v23, *((void **)&v23 + 1));
  if (*((void *)&v30 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v30 + 1));
  }
  sub_20B0780A4((uint64_t)&v28 + 8, (void *)v29);
}

void sub_20B140BE4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_20B1394D4((std::exception *)&__p);
  sub_20B0A8E60((uint64_t)&a23);
  __cxa_begin_catch(a1);
  sub_20B139DB8(v24);
  if (a2 == 2) {
    sub_20B138BCC(v25 - 176);
  }
  else {
    sub_20B138B5C(v25 - 176);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B140AFCLL);
}

void sub_20B140D18()
{
  sub_20B138C3C(v0 - 160);
  JUMPOUT(0x20B140D48);
}

uint64_t sub_20B140D50(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_20B07F8E0((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_20B140850(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_20B081CD8(v17);
  }
  return a1;
}

void sub_20B140E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_20B081CD8(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

void *sub_20B140E2C(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  sub_20B13CF58(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20B13CFDC(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20B140EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B140EDC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_20B13CFDC((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v8 = *a3;
  uint64_t v9 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v9;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_20B13CFDC((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_20B140F74(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B140F90(void *__dst, uint64_t a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    __dst[2] = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  sub_20B07F8E0(__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  __dst[7] = 0;
  __dst[8] = 0;
  sub_20B07F8E0(__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  __dst[13] = 0;
  __dst[14] = 0;
  *((unsigned char *)__dst + 120) = a4;
  *((_DWORD *)__dst + 31) = a5;
  sub_20B07F8E0(__dst + 17, "");
  __dst[20] = 0;
  __dst[21] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 32);
  uint64_t v21 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_20B141174((char *)__p, &v20, a3, a4, a5, a6, a7, a8, a9);
  sub_20B13CC00((uint64_t)__dst, (long long *)__p);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v26);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v25);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v24);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v21) {
    sub_20B081CD8(v21);
  }
  return __dst;
}

void sub_20B14110C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  sub_20B13A4E8((uint64_t)va);
  if (a6) {
    sub_20B081CD8(a6);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v9);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v8);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v7);
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  _Unwind_Resume(a1);
}

char *sub_20B141174(char *__dst, uint64_t *a2, uint64_t a3, char a4, int a5, int a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    long long v16 = *(_OWORD *)a3;
    *((void *)__dst + 2) = *(void *)(a3 + 16);
    *(_OWORD *)__dst = v16;
  }
  *((_DWORD *)__dst + 6) = 2;
  v50 = __dst + 24;
  v49 = (std::string *)sub_20B07F8E0((void *)__dst + 4, "");
  *((_DWORD *)__dst + 18) = 2;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_20B07F8E0((void *)__dst + 10, "");
  *((_DWORD *)__dst + 32) = 2;
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  __dst[120] = a4;
  *((_DWORD *)__dst + 31) = a5;
  uint64_t v17 = (long long *)(__dst + 136);
  sub_20B07F8E0((void *)__dst + 17, "");
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  uint64_t v18 = (std::__shared_weak_count *)a2[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v87 = 0;
  __p[1] = 0;
  __p[0] = &__p[1];
  LODWORD(v99) = 2;
  sub_20B13950C((uint64_t)&v99 + 8, (const void ***)__p);
  long long v101 = 0uLL;
  LODWORD(v102) = 0;
  *(void *)((char *)&v102 + 4) = 1;
  sub_20B0780A4((uint64_t)__p, (void *)__p[1]);
  if (v18) {
    sub_20B081CD8(v18);
  }
  sub_20B138740(a7, (uint64_t)&v99);
  sub_20B138740(a8, (uint64_t)&v99);
  sub_20B138740(a9, (uint64_t)&v99);
  v96 = 0;
  v97 = 0;
  uint64_t v98 = 0;
  uint64_t v19 = (uint64_t **)sub_20B13950C((uint64_t)&v96, (const void ***)&v99 + 1);
  sub_20B13E6EC(v19, a5);
  sub_20B07F8E0(__p, "isGeomParam");
  sub_20B07F8E0(__str, "true");
  v71 = __p;
  uint64_t v20 = sub_20B139840(&v96, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v71);
  std::string::operator=((std::string *)(v20 + 7), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SBYTE7(v87) < 0) {
    operator delete(__p[0]);
  }
  memset(&v95, 0, sizeof(v95));
  sub_20B07F8E0(&v95, "float32_t");
  sub_20B07F8E0(__p, "podName");
  *(void *)std::string __str = __p;
  uint64_t v21 = sub_20B139840(&v96, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)__str);
  std::string::operator=((std::string *)(v21 + 7), &v95);
  if (SBYTE7(v87) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v94 = 0;
  long long v92 = 0u;
  memset(v93, 0, sizeof(v93));
  *(_OWORD *)v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v87 = 0u;
  sub_20B13E968((uint64_t)__p);
  std::ostream::operator<<();
  memset(&v85, 0, sizeof(v85));
  std::stringbuf::str();
  sub_20B07F8E0(__str, "podExtent");
  v71 = __str;
  long long v22 = sub_20B139840(&v96, (const void **)__str, (uint64_t)&unk_20B1E7420, (long long **)&v71);
  std::string::operator=((std::string *)(v22 + 7), &v85);
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v84 = 0;
  long long v82 = 0u;
  memset(v83, 0, sizeof(v83));
  *(_OWORD *)v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  memset(__str, 0, sizeof(__str));
  sub_20B13E968((uint64_t)__str);
  std::ostream::operator<<();
  memset(&v76, 0, sizeof(v76));
  std::stringbuf::str();
  sub_20B07F8E0(&v71, "arrayExtent");
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  char v23 = sub_20B139840(&v96, (const void **)&v71, (uint64_t)&unk_20B1E7420, (long long **)&v75);
  std::string::operator=((std::string *)(v23 + 7), &v76);
  if (v72.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v71);
  }
  sub_20B07F8E0(&v71, "interpretation");
  sub_20B07F8E0(&v75, "vector");
  v67 = &v71;
  uint64_t v24 = sub_20B139840(&v96, (const void **)&v71, (uint64_t)&unk_20B1E7420, (long long **)&v67);
  std::string::operator=((std::string *)(v24 + 7), &v75);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v75.__r_.__value_.__l.__data_);
  }
  if (v72.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(v71);
  }
  int v25 = v99;
  long long v26 = v101;
  if (*((void *)&v101 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v101 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((void)v26)
  {
    uint64_t v27 = *a2;
    long long v28 = (std::__shared_weak_count *)a2[1];
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v27 + 24))(&v75);
    (*(void (**)(void **__return_ptr))(*(void *)v75.__r_.__value_.__l.__data_ + 24))(&v71);
    int v29 = (*(uint64_t (**)(void *, void))(*(void *)v71 + 48))(v71, v26);
    if (v72.__r_.__value_.__r.__words[0]) {
      sub_20B081CD8((std::__shared_weak_count *)v72.__r_.__value_.__l.__data_);
    }
    if (v75.__r_.__value_.__l.__size_) {
      sub_20B081CD8((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
    }
    if (v28) {
      sub_20B081CD8(v28);
    }
  }
  else
  {
    int v29 = v102;
  }
  if (__dst[120])
  {
    long long v30 = (std::__shared_weak_count *)a2[1];
    uint64_t v69 = *a2;
    v70 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v75.__r_.__value_.__l.__data_) = 3;
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v96;
    LODWORD(v67) = 1;
    LODWORD(v68) = v25;
    MEMORY[0x210531350](&v71, &v69, a3, &v75, &v67);
    *((_DWORD *)__dst + 32) = v71;
    std::string::operator=((std::string *)(__dst + 136), &v72);
    uint64_t v32 = v73;
    uint64_t v31 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    int v33 = (std::__shared_weak_count *)*((void *)__dst + 21);
    *((void *)__dst + 20) = v32;
    *((void *)__dst + 21) = v31;
    if (v33) {
      sub_20B081CD8(v33);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v71);
    if (v70) {
      sub_20B081CD8(v70);
    }
    int v62 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20B07F994(&v63, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v63 = *v17;
      uint64_t v64 = *((void *)__dst + 19);
    }
    uint64_t v38 = *((void *)__dst + 21);
    uint64_t v65 = *((void *)__dst + 20);
    uint64_t v66 = v38;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    sub_20B07F8E0(&v75, ".vals");
    LODWORD(v67) = 3;
    v68 = &v96;
    int v60 = 1;
    int v61 = v25;
    int v58 = 2;
    int v59 = v29;
    sub_20B141E74((uint64_t)&v71, &v62, (uint64_t)&v75, &v67, &v60, &v58);
    _DWORD *v50 = v71;
    std::string::operator=(v49, &v72);
    uint64_t v40 = v73;
    uint64_t v39 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v40;
    *((void *)__dst + 8) = v39;
    if (v41) {
      sub_20B081CD8(v41);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v62);
    int v53 = *((_DWORD *)__dst + 32);
    if (__dst[159] < 0)
    {
      sub_20B07F994(&v54, *((void **)__dst + 17), *((void *)__dst + 18));
    }
    else
    {
      long long v54 = *v17;
      uint64_t v55 = *((void *)__dst + 19);
    }
    uint64_t v42 = *((void *)__dst + 21);
    uint64_t v56 = *((void *)__dst + 20);
    uint64_t v57 = v42;
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    sub_20B07F8E0(&v75, ".indices");
    LODWORD(v67) = 2;
    LODWORD(v68) = v29;
    int v60 = 0;
    int v61 = 0;
    int v58 = 0;
    int v59 = 0;
    sub_20B13F12C((uint64_t)&v71, &v53, (uint64_t)&v75, &v67, &v60, &v58);
    *((_DWORD *)__dst + 18) = v71;
    std::string::operator=((std::string *)(__dst + 80), &v72);
    uint64_t v44 = v73;
    uint64_t v43 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    long long v45 = (std::__shared_weak_count *)*((void *)__dst + 14);
    *((void *)__dst + 13) = v44;
    *((void *)__dst + 14) = v43;
    if (v45) {
      sub_20B081CD8(v45);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v53);
  }
  else
  {
    uint64_t v34 = (std::__shared_weak_count *)a2[1];
    uint64_t v51 = *a2;
    uint64_t v52 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v75.__r_.__value_.__l.__data_) = 3;
    v75.__r_.__value_.__l.__size_ = (std::string::size_type)&v96;
    LODWORD(v67) = 1;
    LODWORD(v68) = v25;
    int v60 = 2;
    int v61 = v29;
    int v58 = 0;
    int v59 = 0;
    sub_20B142450((uint64_t)&v71, &v51, a3, &v75, &v67, &v60, &v58);
    _DWORD *v50 = v71;
    std::string::operator=(v49, &v72);
    uint64_t v36 = v73;
    uint64_t v35 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = (std::__shared_weak_count *)*((void *)__dst + 8);
    *((void *)__dst + 7) = v36;
    *((void *)__dst + 8) = v35;
    if (v37) {
      sub_20B081CD8(v37);
    }
    Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)&v71);
    if (v52) {
      sub_20B081CD8(v52);
    }
  }
  if (*((void *)&v26 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v26 + 1));
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  *(void *)std::string __str = *MEMORY[0x263F8C2C8];
  uint64_t v46 = *(void **)__str;
  long long v47 = *(void **)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&__str[*(void *)(*(void *)__str - 24)] = v47;
  *(void *)&__str[8] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v81) < 0) {
    operator delete(v80[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2105325E0](v83);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  __p[0] = v46;
  *(void **)((char *)__p + *((void *)v46 - 3)) = v47;
  __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
  if (SHIBYTE(v91) < 0) {
    operator delete(v90[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x2105325E0](v93);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  sub_20B0780A4((uint64_t)&v96, v97);
  if (*((void *)&v101 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v101 + 1));
  }
  sub_20B0780A4((uint64_t)&v99 + 8, (void *)v100);
  return __dst;
}

void sub_20B141BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, Alembic::Abc::v12::OArrayProperty *a10, uint64_t a11, uint64_t a12, Alembic::Abc::v12::OArrayProperty *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (v54) {
    sub_20B081CD8(v54);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_20B13EB00((uint64_t)&a52);
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  sub_20B13EB00((uint64_t)&STACK[0x260]);
  if (*(char *)(v55 - 185) < 0) {
    operator delete(*(void **)(v55 - 208));
  }
  sub_20B0780A4(v55 - 184, *(void **)(v55 - 176));
  sub_20B138C3C(v55 - 160);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v53);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a10);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(a13);
  if (*(char *)(v52 + 23) < 0) {
    operator delete(*(void **)v52);
  }
  _Unwind_Resume(a1);
}

void sub_20B141E18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20B141DACLL);
}

void sub_20B141E30()
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  JUMPOUT(0x20B141DC4);
}

void sub_20B141E48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    JUMPOUT(0x20B141DD0);
  }
  JUMPOUT(0x20B141DD4);
}

uint64_t sub_20B141E74(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = 2;
  sub_20B07F8E0((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v12 = (std::__shared_weak_count *)*((void *)a2 + 5);
  uint64_t v16 = *((void *)a2 + 4);
  uint64_t v17 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *a2;
  v15[0] = 1;
  v15[2] = v13;
  sub_20B141F50(a1, &v16, a3, v15, a4, a5, a6);
  if (v17) {
    sub_20B081CD8(v17);
  }
  return a1;
}

void sub_20B141F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_20B081CD8(a12);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v12);
  _Unwind_Resume(a1);
}

void sub_20B141F50(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  *(void *)&long long v23 = (char *)&v23 + 8;
  *((void *)&v23 + 1) = 0;
  LODWORD(v28) = 2;
  *(void *)&v24[0] = 0;
  sub_20B13950C((uint64_t)&v28 + 8, (const void ***)&v23);
  long long v30 = 0uLL;
  LODWORD(v31) = 0;
  *(void *)((char *)&v31 + 4) = 1;
  sub_20B0780A4((uint64_t)&v23, *((void **)&v23 + 1));
  sub_20B138740(a4, (uint64_t)&v28);
  sub_20B138740(a5, (uint64_t)&v28);
  sub_20B138740(a6, (uint64_t)&v28);
  sub_20B138740(a7, (uint64_t)&v28);
  *(_DWORD *)a1 = v28;
  uint64_t v26 = a1;
  uint64_t v27 = "OTypedArrayProperty::init()";
  if (!*a2)
  {
    uint64_t v25 = 0;
    memset(v24, 0, sizeof(v24));
    long long v23 = 0u;
    sub_20B10C0CC((uint64_t)&v23);
    sub_20B07FC90(v24, (uint64_t)"NULL CompoundPropertyWriterPtr", 30);
    *(_OWORD *)std::string __p = 0u;
    long long v22 = 0u;
    std::stringbuf::str();
    sub_20B1393B4(__p, (long long *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v19 = sub_20B139478(exception, (uint64_t)__p);
    __cxa_throw(v19, (struct type_info *)&unk_26BF4F288, (void (*)(void *))sub_20B1387F8);
  }
  long long v23 = 0uLL;
  *(void *)&v24[0] = 0;
  sub_20B13950C((uint64_t)&v23, (const void ***)&v28 + 1);
  sub_20B07F8E0(__p, "interpretation");
  sub_20B07F8E0(&__str, "vector");
  uint64_t v32 = __p;
  int v13 = sub_20B139840((uint64_t **)&v23, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v32);
  std::string::operator=((std::string *)(v13 + 7), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
  long long v14 = v30;
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a2;
  if ((void)v14)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v15 + 24))(&__str);
    (*(void (**)(void **__return_ptr))(*(void *)__str.__r_.__value_.__l.__data_ + 24))(__p);
    (*(void (**)(void *, void))(*(void *)__p[0] + 48))(__p[0], v14);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
    if (__str.__r_.__value_.__l.__size_) {
      sub_20B081CD8((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
    uint64_t v15 = *a2;
  }
  __str.__r_.__value_.__r.__words[0] = 0x20000000ALL;
  (*(void (**)(void **__return_ptr))(*(void *)v15 + 104))(__p);
  long long v16 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v16;
  if (v17)
  {
    sub_20B081CD8(v17);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
  }
  if (*((void *)&v14 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v14 + 1));
  }
  sub_20B0780A4((uint64_t)&v23, *((void **)&v23 + 1));
  if (*((void *)&v30 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v30 + 1));
  }
  sub_20B0780A4((uint64_t)&v28 + 8, (void *)v29);
}

void sub_20B1422E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_20B1394D4((std::exception *)&__p);
  sub_20B0A8E60((uint64_t)&a23);
  __cxa_begin_catch(a1);
  sub_20B139DB8(v24);
  if (a2 == 2) {
    sub_20B138BCC(v25 - 176);
  }
  else {
    sub_20B138B5C(v25 - 176);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B1421FCLL);
}

void sub_20B142418()
{
  sub_20B138C3C(v0 - 160);
  JUMPOUT(0x20B142448);
}

uint64_t sub_20B142450(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  *(_DWORD *)a1 = 2;
  sub_20B07F8E0((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_20B141F50(a1, &v16, a3, a4, a5, a6, a7);
  if (v17) {
    sub_20B081CD8(v17);
  }
  return a1;
}

void sub_20B142508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_20B081CD8(a10);
  }
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B14252C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 544);
  if (v2)
  {
    *(void *)(a1 + 552) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 504);
  if (v3)
  {
    *(void *)(a1 + 512) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 464);
  if (v4)
  {
    *(void *)(a1 + 472) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  unint64_t v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 360) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 312);
  if (v6)
  {
    *(void *)(a1 + 320) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(void *)(a1 + 280) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 232);
  if (v8)
  {
    *(void *)(a1 + 240) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 192);
  if (v9)
  {
    *(void *)(a1 + 200) = v9;
    operator delete(v9);
  }
  std::exception v10 = *(void **)(a1 + 152);
  if (v10)
  {
    *(void *)(a1 + 160) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 96);
  if (v11)
  {
    *(void *)(a1 + 104) = v11;
    operator delete(v11);
  }
  uint64_t v12 = *(void **)(a1 + 56);
  if (v12)
  {
    *(void *)(a1 + 64) = v12;
    operator delete(v12);
  }
  int v13 = *(void **)(a1 + 16);
  if (v13)
  {
    *(void *)(a1 + 24) = v13;
    operator delete(v13);
  }
  return a1;
}

char *sub_20B142620(char *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(a2 + 5);
  *((void *)result + 26) = *(void *)a2;
  *(void *)(result + 213) = v4;
  if (result + 208 == (char *)a2)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(result + 253) = *(void *)(a2 + 45);
    *((void *)result + 31) = v6;
  }
  else
  {
    sub_20B139A48(result + 224, *(char **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(v3 + 253) = *(void *)(a2 + 45);
    *((void *)v3 + 31) = v5;
    uint64_t result = sub_20B139A48(v3 + 264, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  }
  *((_DWORD *)v3 + 72) = *(_DWORD *)(a2 + 80);
  return result;
}

unsigned char *sub_20B1426B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a1 + 8;
  long long v22 = "OGeomBaseSchema::getArbGeomParams()";
  int v4 = *(char *)(a1 + 183);
  if (v4 < 0)
  {
    if (!*(void *)(a1 + 168)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 183))
  {
LABEL_5:
    if (*(void *)(a1 + 184)) {
      goto LABEL_17;
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_20B07F8E0(__p, ".arbGeomParams");
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  v11[2] = 0;
  MEMORY[0x210531350](&v17, &v15, __p, v12, v11);
  *(_DWORD *)(a1 + 152) = v17;
  std::string::operator=((std::string *)(a1 + 160), &v18);
  uint64_t v7 = v19;
  uint64_t v6 = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 192) = v6;
  if (v8) {
    sub_20B081CD8(v8);
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)&v17);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16) {
    sub_20B081CD8(v16);
  }
  LOBYTE(v4) = *(unsigned char *)(a1 + 183);
LABEL_17:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 152);
  uint64_t result = (unsigned char *)(a2 + 8);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = sub_20B07F994(result, *(void **)(a1 + 160), *(void *)(a1 + 168));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 160);
    *(void *)(a2 + 24) = *(void *)(a1 + 176);
  }
  uint64_t v10 = *(void *)(a1 + 192);
  *(void *)(a2 + 32) = *(void *)(a1 + 184);
  *(void *)(a2 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_20B142814(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_20B138BCC(v23 - 48);
  }
  else {
    sub_20B138B5C(v23 - 48);
  }
  __cxa_end_catch();
  *(_OWORD *)(v22 + 16) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  *(_DWORD *)uint64_t v22 = 2;
  sub_20B07F8E0((void *)(v22 + 8), "");
  *(void *)(v22 + 32) = 0;
  *(void *)(v22 + 40) = 0;
  JUMPOUT(0x20B142800);
}

void sub_20B1428C0(_Unwind_Exception *a1)
{
}

void sub_20B1428E0(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26BF4F778;
  sub_20B143A80((uint64_t)a1 + 56);

  Alembic::Abc::v12::OObject::~OObject(a1);
}

uint64_t sub_20B142934(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  *(_DWORD *)(a1 + 8) = 2;
  uint64_t v12 = (_DWORD *)(a1 + 8);
  sub_20B07F8E0((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26BF4F778;
  sub_20B1433E4(a1 + 56);
  long long v54 = 0u;
  long long v53 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int v13 = *(_DWORD *)(a2 + 8);
  __p[1] = 0;
  *(void *)&v38[0] = 0;
  __p[0] = &__p[1];
  LODWORD(v51) = v13;
  sub_20B13950C((uint64_t)&v51 + 8, (const void ***)__p);
  long long v53 = 0uLL;
  LODWORD(v54) = 0;
  *(void *)((char *)&v54 + 4) = 1;
  sub_20B0780A4((uint64_t)__p, (void *)__p[1]);
  sub_20B138740(a4, (uint64_t)&v51);
  sub_20B138740(a5, (uint64_t)&v51);
  sub_20B138740(a6, (uint64_t)&v51);
  _DWORD *v12 = v51;
  v49 = v12;
  v50 = "OSchemaObject::OSchemaObject( OObject)";
  uint64_t v15 = *(void *)(a2 + 40);
  char v14 = *(std::__shared_weak_count **)(a2 + 48);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    uint64_t v39 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v38, 0, sizeof(v38));
    sub_20B10C0CC((uint64_t)__p);
    sub_20B07FC90(v38, (uint64_t)"NULL Parent ObjectWriter in OSchemaObject ctor", 46);
    long long __str = 0u;
    long long __str_16 = 0u;
    std::stringbuf::str();
    sub_20B1393B4(&__str, &v47);
    if (SHIBYTE(v48) < 0) {
      operator delete((void *)v47);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v27 = sub_20B139478(exception, (uint64_t)&__str);
    __cxa_throw(v27, (struct type_info *)&unk_26BF4F288, (void (*)(void *))sub_20B1387F8);
  }
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  sub_20B13950C((uint64_t)&v47, (const void ***)&v51 + 1);
  if (DWORD2(v54) == 1)
  {
    int v16 = 1;
  }
  else
  {
    sub_20B07F8E0(__p, "schema");
    sub_20B07F8E0(&__str, "AbcGeom_PolyMesh_v1");
    uint64_t v40 = __p;
    int v17 = sub_20B139840((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v40);
    std::string::operator=((std::string *)(v17 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v38[0]) < 0) {
      operator delete(__p[0]);
    }
    sub_20B07F8E0(__p, "schemaObjTitle");
    sub_20B14311C((std::string *)&__str);
    uint64_t v40 = __p;
    std::string v18 = sub_20B139840((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v40);
    std::string::operator=((std::string *)(v18 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v38[0]) < 0) {
      operator delete(__p[0]);
    }
    sub_20B07F8E0(__p, "schemaBaseType");
    sub_20B07F8E0(&__str, "AbcGeom_GeomBase_v1");
    uint64_t v40 = __p;
    uint64_t v19 = sub_20B139840((uint64_t **)&v47, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)&v40);
    std::string::operator=((std::string *)(v19 + 7), (const std::string *)&__str);
    if (SBYTE7(__str_16) < 0) {
      operator delete((void *)__str);
    }
    if (SBYTE7(v38[0]) < 0) {
      operator delete(__p[0]);
    }
    int v16 = 0;
  }
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long __str = 0u;
  long long __str_16 = 0u;
  sub_20B139998(&__str, a3, (const void ***)&v47);
  (*(void (**)(void **__return_ptr, uint64_t, long long *))(*(void *)v15 + 80))(__p, v15, &__str);
  long long v20 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v20;
  if (v21)
  {
    sub_20B081CD8(v21);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
  }
  long long v22 = v53;
  if (*((void *)&v53 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v53 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((void)v22)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
    int v23 = (*(uint64_t (**)(void *, void))(*(void *)__p[0] + 48))(__p[0], v22);
    if (__p[1]) {
      sub_20B081CD8((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    int v23 = v54;
  }
  v41[1] = 0;
  v41[0] = 0;
  uint64_t v40 = (void **)v41;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 40))(&v35);
  sub_20B07F8E0(v33, ".geom");
  int v24 = *v12;
  v32[0] = 1;
  v32[2] = v24;
  v31[0] = 2;
  v31[2] = v23;
  int v29 = 3;
  long long v30 = (long long **)&v40;
  v28[0] = 6;
  v28[2] = v16;
  MEMORY[0x210531460](__p, &v35, v33, v32, v31, &v29, v28);
  sub_20B1431FC(a1 + 56, (uint64_t)__p);
  sub_20B143A80((uint64_t)__p);
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v36) {
    sub_20B081CD8(v36);
  }
  sub_20B0780A4((uint64_t)&v40, v41[0]);
  if (*((void *)&v22 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v22 + 1));
  }
  sub_20B0780A4((uint64_t)&v45, *((void **)&v45 + 1));
  if (SHIBYTE(v44) < 0) {
    operator delete(*((void **)&__str_16 + 1));
  }
  if (SBYTE7(__str_16) < 0) {
    operator delete((void *)__str);
  }
  sub_20B0780A4((uint64_t)&v47, *((void **)&v47 + 1));
  if (v14) {
    sub_20B081CD8(v14);
  }
  if (*((void *)&v53 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v53 + 1));
  }
  sub_20B0780A4((uint64_t)&v51 + 8, (void *)v52);
  return a1;
}

void sub_20B142F00(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(__p, a16);
  sub_20B1394D4((std::exception *)&STACK[0x3F0]);
  sub_20B0A8E60((uint64_t)__p);
  if (v17) {
    sub_20B081CD8(v17);
  }
  __cxa_begin_catch(a1);
  sub_20B143724(a3);
  sub_20B139D6C(v16);
  if (a2 == 2) {
    sub_20B138BCC(v18 - 176);
  }
  else {
    sub_20B138B5C(v18 - 176);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B142E14);
}

void sub_20B1430B0()
{
}

void sub_20B1430BC()
{
}

void sub_20B1430DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
}

void sub_20B1430F0()
{
}

void sub_20B1430F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B138C3C(v10 - 160);
  sub_20B143A80(a9);
  Alembic::Abc::v12::OObject::~OObject(v9);
  _Unwind_Resume(a1);
}

void sub_20B14311C(std::string *a1@<X8>)
{
  sub_20B07F8E0(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_PolyMesh_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  int v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_20B1431C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1431FC(uint64_t a1, uint64_t a2)
{
  sub_20B13CAC0(a1, a2);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  std::string::operator=((std::string *)(a1 + 256), (const std::string *)(a2 + 256));
  uint64_t v5 = *(void *)(a2 + 280);
  uint64_t v4 = *(void *)(a2 + 288);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 288);
  *(void *)(a1 + 280) = v5;
  *(void *)(a1 + 288) = v4;
  if (v6) {
    sub_20B081CD8(v6);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a2 + 304));
  uint64_t v8 = *(void *)(a2 + 328);
  uint64_t v7 = *(void *)(a2 + 336);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 336);
  *(void *)(a1 + 328) = v8;
  *(void *)(a1 + 336) = v7;
  if (v9) {
    sub_20B081CD8(v9);
  }
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a2 + 352));
  uint64_t v11 = *(void *)(a2 + 376);
  uint64_t v10 = *(void *)(a2 + 384);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v11;
  *(void *)(a1 + 384) = v10;
  if (v12) {
    sub_20B081CD8(v12);
  }
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(a2 + 392);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a2 + 400));
  uint64_t v14 = *(void *)(a2 + 424);
  uint64_t v13 = *(void *)(a2 + 432);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 432);
  *(void *)(a1 + 424) = v14;
  *(void *)(a1 + 432) = v13;
  if (v15) {
    sub_20B081CD8(v15);
  }
  sub_20B13CD00(a1 + 440, (void *)(a2 + 440));
  sub_20B13CC00(a1 + 464, (long long *)(a2 + 464));
  sub_20B13CC00(a1 + 640, (long long *)(a2 + 640));
  uint64_t v16 = (void **)(a1 + 816);
  if (*(char *)(a1 + 839) < 0) {
    operator delete(*v16);
  }
  long long v17 = *(_OWORD *)(a2 + 816);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(_OWORD *)uint64_t v16 = v17;
  *(unsigned char *)(a2 + 839) = 0;
  *(unsigned char *)(a2 + 816) = 0;
  long long v18 = *(_OWORD *)(a2 + 840);
  *(_DWORD *)(a1 + 856) = *(_DWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 840) = v18;
  return a1;
}

void sub_20B14337C(Alembic::Abc::v12::OObject *a1)
{
  *(void *)a1 = &unk_26BF4F778;
  sub_20B143A80((uint64_t)a1 + 56);
  Alembic::Abc::v12::OObject::~OObject(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B1433E4(uint64_t a1)
{
  uint64_t v2 = sub_20B14355C(a1);
  *(void *)uint64_t v2 = &unk_26BF4F8D0;
  *(_DWORD *)(v2 + 248) = 2;
  sub_20B07F8E0((void *)(v2 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_20B07F8E0((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_20B07F8E0((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_20B07F8E0((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = a1 + 448;
  sub_20B13C368(a1 + 464);
  sub_20B1439B0(a1 + 640);
  *(void *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 840) = 0;
  return a1;
}

void sub_20B1434D8(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  sub_20B13A4E8(v5);
  sub_20B13C488((uint64_t)(v1 + 55), *v4);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 49));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 43));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  sub_20B143680(v1);
  _Unwind_Resume(a1);
}

void sub_20B143554()
{
}

uint64_t sub_20B14355C(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_20B07F8E0((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26BF4F8A0;
  *(_DWORD *)(a1 + 56) = 2;
  sub_20B07F8E0((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_20B07F8E0((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_20B07F8E0((void *)(a1 + 160), "");
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  sub_20B07F8E0((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  return a1;
}

void sub_20B14363C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v4);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v3);
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty(v2);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_20B143680(void *a1)
{
  *a1 = &unk_26BF4F8A0;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20B1436EC(uint64_t a1)
{
  sub_20B143A80(a1);

  JUMPOUT(0x210532650);
}

void sub_20B143724(uint64_t a1)
{
  sub_20B139DB8(a1 + 248);
  sub_20B139DB8(a1 + 296);
  sub_20B139DB8(a1 + 344);
  sub_20B139DB8(a1 + 392);
  sub_20B13C438(a1 + 464);
  sub_20B13C438(a1 + 640);
  sub_20B13C488(a1 + 440, *(void **)(a1 + 448));
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = a1 + 448;

  sub_20B143930(a1);
}

uint64_t sub_20B1437A0(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return *(unsigned char *)(a1 + 840) != 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return *(unsigned char *)(a1 + 840) != 0;
  }
  if (*(void *)(a1 + 40))
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(void *)(a1 + 264)) {
        return *(unsigned char *)(a1 + 840) != 0;
      }
    }
    else if (*(unsigned char *)(a1 + 279))
    {
      return *(unsigned char *)(a1 + 840) != 0;
    }
    if (*(void *)(a1 + 280))
    {
      if (*(char *)(a1 + 375) < 0)
      {
        if (*(void *)(a1 + 360)) {
          return *(unsigned char *)(a1 + 840) != 0;
        }
      }
      else if (*(unsigned char *)(a1 + 375))
      {
        return *(unsigned char *)(a1 + 840) != 0;
      }
      if (*(void *)(a1 + 376))
      {
        if (*(char *)(a1 + 423) < 0)
        {
          if (*(void *)(a1 + 408)) {
            return *(unsigned char *)(a1 + 840) != 0;
          }
        }
        else if (*(unsigned char *)(a1 + 423))
        {
          return *(unsigned char *)(a1 + 840) != 0;
        }
        if (*(void *)(a1 + 424)) {
          return 1;
        }
      }
    }
  }
  return *(unsigned char *)(a1 + 840) != 0;
}

void *sub_20B143838(void *a1)
{
  *a1 = &unk_26BF4F8A0;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);
  return a1;
}

void sub_20B1438A4(void *a1)
{
  *a1 = &unk_26BF4F8A0;
  uint64_t v2 = (Alembic::Abc::v12::OCompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(v2);

  JUMPOUT(0x210532650);
}

void sub_20B143930(uint64_t a1)
{
  sub_20B139DB8(a1 + 56);
  sub_20B139DB8(a1 + 104);
  sub_20B139DB8(a1 + 152);
  sub_20B139DB8(a1 + 200);

  sub_20B139DB8(a1 + 8);
}

BOOL sub_20B143984(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_20B1439B0(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 2;
  sub_20B07F8E0((void *)(a1 + 32), "");
  *(_DWORD *)(a1 + 72) = 2;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_20B07F8E0((void *)(a1 + 80), "");
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 124) = 0x20000007FLL;
  sub_20B07F8E0((void *)(a1 + 136), "");
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  return a1;
}

void sub_20B143A44(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v3);
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B143A80(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4F8D0;
  if (*(char *)(a1 + 839) < 0) {
    operator delete(*(void **)(a1 + 816));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 768));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 712));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 664));
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*(void **)(a1 + 640));
  }
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 592));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 536));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 488));
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*(void **)(a1 + 464));
  }
  sub_20B13C488(a1 + 440, *(void **)(a1 + 448));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 392));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 344));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 296));
  Alembic::Abc::v12::OArrayProperty::~OArrayProperty((Alembic::Abc::v12::OArrayProperty *)(a1 + 248));
  *(void *)a1 = &unk_26BF4F8A0;
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 200));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 152));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 104));
  Alembic::Abc::v12::OScalarProperty::~OScalarProperty((Alembic::Abc::v12::OScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty((Alembic::Abc::v12::OCompoundProperty *)(a1 + 8));
  return a1;
}

uint64_t sub_20B143B90(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v11;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_20B13CFDC((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v12 = *a3;
  uint64_t v13 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v13;
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_20B13CFDC((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  uint64_t v14 = *a4;
  uint64_t v15 = *(uint64_t *)((char *)a4 + 5);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 85) = v15;
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_20B13CFDC((void *)(a1 + 96), (const void *)a4[2], a4[3], (a4[3] - a4[2]) >> 3);
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 136) = xmmword_20B1E8120;
  *(int64x2_t *)(a1 + 152) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0x30000000ALL;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  uint64_t v16 = *(void *)(a5 + 5);
  *(void *)(a1 + 208) = *(void *)a5;
  *(void *)(a1 + 213) = v16;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_20B13CFDC((void *)(a1 + 224), *(const void **)(a5 + 16), *(void *)(a5 + 24), (uint64_t)(*(void *)(a5 + 24) - *(void *)(a5 + 16)) >> 3);
  uint64_t v17 = *(void *)(a5 + 40);
  *(void *)(a1 + 253) = *(void *)(a5 + 45);
  *(void *)(a1 + 248) = v17;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  sub_20B13CFDC((void *)(a1 + 264), *(const void **)(a5 + 56), *(void *)(a5 + 64), (uint64_t)(*(void *)(a5 + 64) - *(void *)(a5 + 56)) >> 3);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a5 + 80);
  uint64_t v18 = *a6;
  *(void *)(a1 + 301) = *(uint64_t *)((char *)a6 + 5);
  *(void *)(a1 + 296) = v18;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = 0;
  sub_20B13CFDC((void *)(a1 + 312), (const void *)a6[2], a6[3], (a6[3] - a6[2]) >> 3);
  uint64_t v19 = a6[5];
  *(void *)(a1 + 341) = *(uint64_t *)((char *)a6 + 45);
  *(void *)(a1 + 336) = v19;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  sub_20B13CFDC((void *)(a1 + 352), (const void *)a6[7], a6[8], (a6[8] - a6[7]) >> 3);
  *(_DWORD *)(a1 + 376) = *((_DWORD *)a6 + 20);
  return a1;
}

void sub_20B143D88(_Unwind_Exception *a1)
{
  uint64_t v9 = *v5;
  if (*v5)
  {
    v1[40] = v9;
    operator delete(v9);
  }
  sub_20B139EA0(v6);
  uint64_t v10 = *v7;
  if (*v7)
  {
    v1[24] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v4;
  if (*v4)
  {
    v1[13] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v3;
  if (*v3)
  {
    v1[8] = v12;
    operator delete(v12);
  }
  uint64_t v13 = *v2;
  if (*v2)
  {
    v1[3] = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

char *sub_20B143E24(char *result, char *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)a2;
  *(void *)(result + 301) = *(void *)(a2 + 5);
  *((void *)result + 37) = v4;
  if (result + 296 == a2)
  {
    uint64_t v6 = *((void *)a2 + 5);
    *(void *)(result + 341) = *(void *)(a2 + 45);
    *((void *)result + 42) = v6;
  }
  else
  {
    sub_20B139A48(result + 312, *((char **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3);
    uint64_t v5 = *((void *)a2 + 5);
    *(void *)(v3 + 341) = *(void *)(a2 + 45);
    *((void *)v3 + 42) = v5;
    uint64_t result = sub_20B139A48(v3 + 352, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  *((_DWORD *)v3 + 94) = *((_DWORD *)a2 + 20);
  return result;
}

uint64_t sub_20B143EC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1555555555555555) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 2);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x1555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  uint64_t v10 = (char *)sub_20B07D4F8(v7, v9);
  uint64_t v11 = &v10[12 * v4];
  va_list __p = v10;
  uint64_t v16 = v11;
  uint64_t v18 = &v10[12 * v12];
  *(void *)uint64_t v11 = *(void *)a2;
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v17 = v11 + 12;
  sub_20B10D29C(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    uint64_t v17 = &v16[(v17 - v16 - 12) % 0xCuLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_20B143FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B14402C(void *a1, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2);
  sub_20B13CF58(&__p, 1uLL, &v5);
  *a1 = v3;
  a1[1] = 0x30000000ALL;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  sub_20B13CFDC(a1 + 2, __p, (uint64_t)v7, (v7 - (unsigned char *)__p) >> 3);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_20B1440C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1440DC(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v7 = *a2;
  *(void *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(void *)a1 = v7;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_20B13CFDC((void *)(a1 + 16), (const void *)a2[2], a2[3], (a2[3] - a2[2]) >> 3);
  uint64_t v8 = *a3;
  uint64_t v9 = *(uint64_t *)((char *)a3 + 5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 45) = v9;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_20B13CFDC((void *)(a1 + 56), (const void *)a3[2], a3[3], (a3[3] - a3[2]) >> 3);
  *(_DWORD *)(a1 + 80) = a4;
  return a1;
}

void sub_20B144174(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_20B144190(void *a1)
{
  uint64_t v2 = (void *)a1[44];
  if (v2)
  {
    a1[45] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[39];
  if (v3)
  {
    a1[40] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[33];
  if (v4)
  {
    a1[34] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[28];
  if (v5)
  {
    a1[29] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[23];
  if (v6)
  {
    a1[24] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[12];
  if (v7)
  {
    a1[13] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[7];
  if (v8)
  {
    a1[8] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[2];
  if (v9)
  {
    a1[3] = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_20B144234(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20B139BC4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20B1442CC(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  *(_DWORD *)a1 = 2;
  sub_20B07F8E0((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = (const void **)v11;
  LODWORD(v12) = 2;
  sub_20B13950C((uint64_t)&v12 + 8, &v10);
  long long v14 = 0uLL;
  LODWORD(v15) = 0;
  *(void *)((char *)&v15 + 4) = 1;
  sub_20B0780A4((uint64_t)&v10, v11[0]);
  sub_20B138740(a3, (uint64_t)&v12);
  sub_20B138740(a4, (uint64_t)&v12);
  *(_DWORD *)a1 = v12;
  uint64_t v10 = (const void **)a1;
  v11[0] = "OArchive::OArchive( iFileName)";
  Alembic::AbcCoreOgawa::v12::WriteArchive::operator()();
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v9;
  if (v7) {
    sub_20B081CD8(v7);
  }
  if (*((void *)&v14 + 1)) {
    sub_20B081CD8(*((std::__shared_weak_count **)&v14 + 1));
  }
  sub_20B0780A4((uint64_t)&v12 + 8, (void *)v13);
  return a1;
}

void sub_20B14440C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  __cxa_begin_catch(a1);
  sub_20B139DB8(v5);
  if (a2 == 2) {
    sub_20B138BCC((uint64_t)va);
  }
  else {
    sub_20B138B5C((uint64_t)va);
  }
  __cxa_end_catch();
  JUMPOUT(0x20B1443D4);
}

void sub_20B144458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_20B138C3C((uint64_t)va);
  uint64_t v10 = *(std::__shared_weak_count **)(v7 + 40);
  if (v10) {
    sub_20B081CD8(v10);
  }
  if (*(char *)(v7 + 31) < 0) {
    operator delete(*v8);
  }
  _Unwind_Resume(a1);
}

void sub_20B1444C0()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  v1[1] = 0;
  v1[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v0 = 0x4000000000000000;
  v1[0] = MEMORY[0x263F90688] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr(v2, (pxrInternal__aapl__pxrReserved__::UsdGeomCube *)v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
}

void sub_20B144844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void sub_20B144924()
{
  v3[12] = *MEMORY[0x263EF8340];
  v2[1] = 0;
  v2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v2[0] = MEMORY[0x263F90680] + 16;
  unint64_t v0 = atomic_load(MEMORY[0x263F90538]);
  if (v0)
  {
    uint64_t v1 = *(void *)(v0 + 1352);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetRadiusAttr(v3, (pxrInternal__aapl__pxrReserved__::UsdGeomCone *)v2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  }
  sub_20B06AC70();
}

void sub_20B144F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_20B1450C8()
{
  v3[12] = *MEMORY[0x263EF8340];
  v2[1] = 0;
  v2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v2[0] = MEMORY[0x263F90700] + 16;
  unint64_t v0 = atomic_load(MEMORY[0x263F90538]);
  if (v0)
  {
    uint64_t v1 = *(void *)(v0 + 1352);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetRadiusAttr(v3, (pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  }
  sub_20B06AC70();
}

void sub_20B145898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

void sub_20B1459D8()
{
  v3[12] = *MEMORY[0x263EF8340];
  v2[1] = 0;
  v2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v2[0] = MEMORY[0x263F906E8] + 16;
  unint64_t v0 = atomic_load(MEMORY[0x263F90538]);
  if (v0)
  {
    uint64_t v1 = *(void *)(v0 + 1352);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr(v3, (pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v2);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
  }
  sub_20B06AC70();
}

void sub_20B146240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

void sub_20B146380()
{
  __dst[138] = *MEMORY[0x263EF8340];
  v1[1] = 0;
  v1[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v0 = 0x3FF0000000000000;
  v1[0] = MEMORY[0x263F906D8] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr(__dst, (pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)v1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
}

void sub_20B1466D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
}

void *sub_20B1467BC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B146858(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20B14683C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B146858(void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    sub_20B05D0BC();
  }
  uint64_t result = (char *)sub_20B07D4F8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void sub_20B146A00(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  MEMORY[0x210532650](v2, 0x10A1C40CD2B3A6BLL);
  _Unwind_Resume(a1);
}

void sub_20B146BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B147334(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B147B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B147F84(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)a1 = &unk_26BF4FB78;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = v3;
  uint64_t v4 = MEMORY[0x263EF89A8];
  _Q0 = *MEMORY[0x263EF89A8];
  long long v6 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  *(_OWORD *)(a1 + 64) = *MEMORY[0x263EF89A8];
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(v4 + 32);
  long long v8 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = _Q0;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = 1112010548;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a1 + 208) = _Q0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_20B1E92C0;
  *(void *)(a1 + 240) = 1069547520;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 272) = 0x447A00003DCCCCCDLL;
  *(void *)(a1 + 280) = _Q0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 288) = _Q0;
  sub_20B1480A4(a1, 16);
}

void sub_20B14808C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1480A4(uint64_t a1, int a2)
{
  if (a2 <= 1) {
    int v2 = 1;
  }
  else {
    int v2 = a2;
  }
  *(_DWORD *)(a1 + 32) = v2;
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    MEMORY[0x210532630](v3, 0x1000C8052888210);
  }
  operator new[]();
}

void sub_20B148194(simd_float4x4 *a1)
{
  v2.columns[0].f32[0] = sub_20B148FBC((uint64_t)a1);
  a1[1] = v2;
  a1[2] = __invert_f4(v2);
}

uint64_t sub_20B1481D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26BF4FB78;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(id *)(a2 + 56);
  long long v4 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v5;
  long long v7 = *(_OWORD *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 176);
  long long v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 176) = v8;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  long long v10 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v10;
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  sub_20B0DAA6C((simd_float4x4 *)a1, *((float *)&v10 + 3));
  v12.columns[0].f32[0] = sub_20B148FBC(a1);
  *(simd_float4x4 *)(a1 + 64) = v12;
  *(simd_float4x4 *)(a1 + 128) = __invert_f4(v12);
  return a1;
}

uint64_t sub_20B1482DC(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4FB78;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    MEMORY[0x210532630](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    MEMORY[0x210532630](v3, 0x80C80B8603338);
  }
  uint64_t v4 = *(void *)(a1 + 192);
  if (v4) {
    MEMORY[0x210532630](v4, 0x1000C800285BD98);
  }

  return a1;
}

void sub_20B14837C(uint64_t a1)
{
  sub_20B1482DC(a1);

  JUMPOUT(0x210532650);
}

void sub_20B1483B4(uint64_t a1, __n128 a2)
{
  sub_20B148408((__n128 **)(*(void *)(a1 + 56) + 16), a2);
  v3.columns[0].f32[0] = sub_20B148FBC(a1);
  *(simd_float4x4 *)(a1 + 64) = v3;
  *(simd_float4x4 *)(a1 + 128) = __invert_f4(v3);
}

void sub_20B148408(__n128 **a1, __n128 a2)
{
  simd_float4x4 v3 = *a1;
  a1[1] = *a1;
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  if ((unint64_t)v3 >= v6)
  {
    uint64_t v8 = v5 - (void)v3;
    uint64_t v9 = v8 >> 4;
    if ((unint64_t)(v8 >> 4) <= 1) {
      uint64_t v9 = 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v11 = (__n128 *)sub_20B06C71C(v4, v10);
    long long v13 = &v11[2 * v12];
    v11->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v11[1] = a2;
    long long v7 = v11 + 2;
    long long v15 = *a1;
    long long v14 = a1[1];
    if (v14 != *a1)
    {
      do
      {
        __n128 v16 = v14[-1];
        v11[-2] = v14[-2];
        v11[-1] = v16;
        v11 -= 2;
        v14 -= 2;
      }
      while (v14 != v15);
      long long v14 = *a1;
    }
    *a1 = v11;
    a1[1] = v7;
    a1[2] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    v3->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v3[1] = a2;
    long long v7 = v3 + 2;
  }
  a1[1] = v7;

  sub_20B0CA84C((uint64_t)a1);
}

void sub_20B1484EC(__n128 *a1, float32x4_t a2, float a3, float a4, float a5)
{
  a1[15].n128_f32[1] = a5;
  a1[15].n128_f32[2] = a4;
  a1[16] = (__n128)a2;
  __float2 v7 = __sincosf_stret(a4);
  __float2 v8 = __sincosf_stret(a5);
  v9.f32[0] = v8.__cosval * v7.__cosval;
  float32x4_t v10 = v9;
  v10.i32[1] = LODWORD(v7.__sinval);
  v10.f32[2] = v8.__sinval * v7.__cosval;
  __n128 v14 = (__n128)vmlaq_n_f32(a2, v10, a3);
  float v11 = -1.0;
  if (v7.__cosval > 0.0) {
    float v11 = 1.0;
  }
  *(_DWORD *)uint64_t v18 = 1065353216;
  *(_OWORD *)&v18[4] = 0uLL;
  *(_DWORD *)&v18[20] = 1065353216;
  *(void *)&v18[24] = 0;
  *(void *)uint64_t v19 = 0;
  *(void *)&v19[20] = 0;
  *(void *)&v19[12] = 0;
  *(_DWORD *)&v19[8] = 1065353216;
  *(_DWORD *)&v19[28] = 1065353216;
  v17[0] = v8.__cosval * v7.__cosval;
  v17[1] = v7.__sinval;
  v17[2] = v8.__sinval * v7.__cosval;
  v16[0] = 0.0;
  v16[1] = v11;
  v16[2] = 0.0;
  sub_20B148614((uint64_t)v18, v17, v16);
  v15[0] = *(_OWORD *)v18;
  v15[1] = *(_OWORD *)&v18[16];
  v15[2] = *(_OWORD *)v19;
  v15[3] = *(_OWORD *)&v19[16];
  sub_20B0CAB60(a1[3].n128_u64[1] + 16, v15);
  sub_20B148408((__n128 **)(a1[3].n128_u64[1] + 16), v14);
}

uint64_t sub_20B148614(uint64_t result, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = a2[1];
  float v5 = a2[2];
  float v6 = (float)((float)(v3 * v3) + (float)(v4 * v4)) + (float)(v5 * v5);
  if (v6 >= 2.351e-38)
  {
    float v7 = sqrtf(v6);
    goto LABEL_3;
  }
  float v54 = -v3;
  if (v3 >= 0.0) {
    float v54 = *a2;
  }
  float v55 = -v4;
  if (v4 >= 0.0) {
    float v55 = a2[1];
  }
  if (v5 >= 0.0) {
    float v56 = a2[2];
  }
  else {
    float v56 = -v5;
  }
  if (v54 >= v55) {
    float v57 = v54;
  }
  else {
    float v57 = v55;
  }
  if (v57 < v56) {
    float v57 = v56;
  }
  if (v57 != 0.0)
  {
    float v7 = sqrtf((float)((float)((float)(v55 * (float)(1.0 / v57)) * (float)(v55 * (float)(1.0 / v57)))+ (float)((float)(v54 * (float)(1.0 / v57)) * (float)(v54 * (float)(1.0 / v57))))+ (float)((float)(v56 * (float)(1.0 / v57)) * (float)(v56 * (float)(1.0 / v57))))* v57;
LABEL_3:
    if (v7 != 0.0) {
      goto LABEL_5;
    }
  }
  *(void *)a2 = 0;
  a2[2] = 1.0;
  float v5 = 1.0;
  float v3 = 0.0;
  float v4 = 0.0;
LABEL_5:
  float v8 = *a3;
  float v9 = a3[1];
  float v10 = a3[2];
  float v11 = (float)((float)(v8 * v8) + (float)(v9 * v9)) + (float)(v10 * v10);
  if (v11 >= 2.351e-38)
  {
    float v12 = sqrtf(v11);
    goto LABEL_7;
  }
  float v58 = -v8;
  if (v8 >= 0.0) {
    float v58 = *a3;
  }
  float v59 = -v9;
  if (v9 >= 0.0) {
    float v59 = a3[1];
  }
  if (v10 >= 0.0) {
    float v60 = a3[2];
  }
  else {
    float v60 = -v10;
  }
  if (v58 >= v59) {
    float v61 = v58;
  }
  else {
    float v61 = v59;
  }
  if (v61 < v60) {
    float v61 = v60;
  }
  if (v61 != 0.0)
  {
    float v12 = sqrtf((float)((float)((float)(v59 * (float)(1.0 / v61)) * (float)(v59 * (float)(1.0 / v61)))+ (float)((float)(v58 * (float)(1.0 / v61)) * (float)(v58 * (float)(1.0 / v61))))+ (float)((float)(v60 * (float)(1.0 / v61)) * (float)(v60 * (float)(1.0 / v61))))* v61;
LABEL_7:
    if (v12 != 0.0) {
      goto LABEL_9;
    }
  }
  *(void *)a3 = 0x3F80000000000000;
  a3[2] = 0.0;
  float v4 = a2[1];
  float v5 = a2[2];
  float v3 = *a2;
  float v9 = 1.0;
  float v8 = 0.0;
  float v10 = 0.0;
LABEL_9:
  float v13 = -(float)((float)(v4 * v10) - (float)(v5 * v9));
  float v14 = -(float)((float)(v8 * v5) - (float)(v3 * v10));
  float v15 = -(float)((float)(v3 * v9) - (float)(v8 * v4));
  float v16 = (float)((float)(v13 * v13) + (float)(v14 * v14)) + (float)(v15 * v15);
  if (v16 < 2.351e-38)
  {
    if (v13 < 0.0) {
      float v13 = -v13;
    }
    if (v14 < 0.0) {
      float v14 = -v14;
    }
    float v62 = -v15;
    if (v15 >= 0.0) {
      float v62 = -(float)((float)(v3 * v9) - (float)(v8 * v4));
    }
    if (v13 >= v14) {
      float v63 = v13;
    }
    else {
      float v63 = v14;
    }
    if (v63 < v62) {
      float v63 = v62;
    }
    if (v63 == 0.0) {
      goto LABEL_12;
    }
    float v17 = sqrtf((float)((float)((float)(v14 * (float)(1.0 / v63)) * (float)(v14 * (float)(1.0 / v63)))+ (float)((float)(v13 * (float)(1.0 / v63)) * (float)(v13 * (float)(1.0 / v63))))+ (float)((float)(v62 * (float)(1.0 / v63)) * (float)(v62 * (float)(1.0 / v63))))* v63;
  }
  else
  {
    float v17 = sqrtf(v16);
  }
  if (v17 != 0.0) {
    goto LABEL_16;
  }
LABEL_12:
  float v8 = (float)(v4 - v5) * 0.0;
  float v18 = v3 * 0.0;
  float v9 = v5 - v18;
  float v10 = v18 - v4;
  *a3 = v8;
  a3[1] = v5 - v18;
  a3[2] = v18 - v4;
  float v19 = (float)((float)(v8 * v8) + (float)(v9 * v9)) + (float)(v10 * v10);
  if (v19 >= 2.351e-38)
  {
    float v20 = sqrtf(v19);
    goto LABEL_14;
  }
  float v76 = -v8;
  if (v8 >= 0.0) {
    float v76 = (float)(v4 - v5) * 0.0;
  }
  float v77 = -v9;
  if (v9 >= 0.0) {
    float v77 = v9;
  }
  if (v10 >= 0.0) {
    float v78 = v10;
  }
  else {
    float v78 = -v10;
  }
  if (v76 >= v77) {
    float v79 = v76;
  }
  else {
    float v79 = v77;
  }
  if (v79 < v78) {
    float v79 = v78;
  }
  if (v79 != 0.0)
  {
    float v20 = sqrtf((float)((float)((float)(v77 * (float)(1.0 / v79)) * (float)(v77 * (float)(1.0 / v79)))+ (float)((float)(v76 * (float)(1.0 / v79)) * (float)(v76 * (float)(1.0 / v79))))+ (float)((float)(v78 * (float)(1.0 / v79)) * (float)(v78 * (float)(1.0 / v79))))* v79;
LABEL_14:
    if (v20 != 0.0) {
      goto LABEL_16;
    }
  }
  float v21 = a2[1];
  float v22 = a2[2] * 0.0;
  float v8 = v21 - v22;
  float v9 = v22 - *a2;
  float v10 = (float)(*a2 - v21) * 0.0;
  *a3 = v21 - v22;
  a3[1] = v9;
  a3[2] = v10;
LABEL_16:
  float v24 = a2[1];
  float v23 = a2[2];
  float v25 = *a2;
  float v26 = -(float)((float)(v24 * v10) - (float)(v23 * v9));
  float v27 = -(float)((float)(v8 * v23) - (float)(*a2 * v10));
  float v28 = -(float)((float)(*a2 * v9) - (float)(v8 * v24));
  float v29 = -(float)((float)(v28 * *a2) - (float)(v26 * v23));
  float v30 = -(float)((float)(v27 * v23) - (float)(v28 * v24));
  float v31 = -(float)((float)(v26 * v24) - (float)(v27 * *a2));
  float v32 = (float)((float)(v26 * v26) + (float)(v27 * v27)) + (float)(v28 * v28);
  if (v32 < 2.351e-38)
  {
    float v64 = -v26;
    if (v26 >= 0.0) {
      float v64 = v26;
    }
    float v65 = -v27;
    if (v27 >= 0.0) {
      float v65 = v27;
    }
    if (v28 >= 0.0) {
      float v66 = v28;
    }
    else {
      float v66 = -v28;
    }
    if (v64 >= v65) {
      float v67 = v64;
    }
    else {
      float v67 = v65;
    }
    if (v67 < v66) {
      float v67 = v66;
    }
    if (v67 == 0.0)
    {
      float v39 = 0.0;
      float v40 = 0.0;
      float v41 = 0.0;
      goto LABEL_27;
    }
    float v33 = sqrtf((float)((float)((float)(v65 * (float)(1.0 / v67)) * (float)(v65 * (float)(1.0 / v67)))+ (float)((float)(v64 * (float)(1.0 / v67)) * (float)(v64 * (float)(1.0 / v67))))+ (float)((float)(v66 * (float)(1.0 / v67)) * (float)(v66 * (float)(1.0 / v67))))* v67;
  }
  else
  {
    float v33 = sqrtf(v32);
  }
  BOOL v34 = v33 == 0.0;
  float v35 = 1.0 / v33;
  float v36 = v26 * v35;
  float v37 = v27 * v35;
  float v38 = v28 * v35;
  if (v34) {
    float v39 = 0.0;
  }
  else {
    float v39 = v36;
  }
  if (v34) {
    float v40 = 0.0;
  }
  else {
    float v40 = v37;
  }
  if (v34) {
    float v41 = 0.0;
  }
  else {
    float v41 = v38;
  }
LABEL_27:
  float v42 = (float)((float)(v30 * v30) + (float)(v29 * v29)) + (float)(v31 * v31);
  if (v42 < 2.351e-38)
  {
    float v68 = -v30;
    if (v30 >= 0.0) {
      float v68 = v30;
    }
    float v69 = -v29;
    if (v29 >= 0.0) {
      float v69 = v29;
    }
    if (v31 >= 0.0) {
      float v70 = v31;
    }
    else {
      float v70 = -v31;
    }
    if (v68 >= v69) {
      float v71 = v68;
    }
    else {
      float v71 = v69;
    }
    if (v71 < v70) {
      float v71 = v70;
    }
    if (v71 == 0.0) {
      goto LABEL_119;
    }
    float v43 = sqrtf((float)((float)((float)(v69 * (float)(1.0 / v71)) * (float)(v69 * (float)(1.0 / v71)))+ (float)((float)(v68 * (float)(1.0 / v71)) * (float)(v68 * (float)(1.0 / v71))))+ (float)((float)(v70 * (float)(1.0 / v71)) * (float)(v70 * (float)(1.0 / v71))))* v71;
  }
  else
  {
    float v43 = sqrtf(v42);
  }
  if (v43 != 0.0)
  {
    float v44 = 1.0 / v43;
    float v45 = v30 * v44;
    float v46 = v29 * v44;
    float v47 = v31 * v44;
    goto LABEL_31;
  }
LABEL_119:
  float v45 = 0.0;
  float v46 = 0.0;
  float v47 = 0.0;
LABEL_31:
  float v48 = (float)((float)(v23 * v23) + (float)(v24 * v24)) + (float)(v25 * v25);
  if (v48 < 2.351e-38)
  {
    float v72 = -v25;
    if (v25 >= 0.0) {
      float v72 = *a2;
    }
    float v73 = -v24;
    if (v24 >= 0.0) {
      float v73 = a2[1];
    }
    if (v23 >= 0.0) {
      float v74 = a2[2];
    }
    else {
      float v74 = -v23;
    }
    if (v72 >= v73) {
      float v75 = v72;
    }
    else {
      float v75 = v73;
    }
    if (v75 < v74) {
      float v75 = v74;
    }
    if (v75 == 0.0) {
      goto LABEL_120;
    }
    float v49 = sqrtf((float)((float)((float)(v73 * (float)(1.0 / v75)) * (float)(v73 * (float)(1.0 / v75)))+ (float)((float)(v72 * (float)(1.0 / v75)) * (float)(v72 * (float)(1.0 / v75))))+ (float)((float)(v74 * (float)(1.0 / v75)) * (float)(v74 * (float)(1.0 / v75))))* v75;
  }
  else
  {
    float v49 = sqrtf(v48);
  }
  if (v49 == 0.0)
  {
LABEL_120:
    float v51 = 0.0;
    float v52 = 0.0;
    float v53 = 0.0;
    goto LABEL_35;
  }
  float v50 = 1.0 / v49;
  float v51 = v25 * v50;
  float v52 = v24 * v50;
  float v53 = v23 * v50;
LABEL_35:
  *(float *)uint64_t result = v39;
  *(float *)(result + 4) = v40;
  *(float *)(result + 8) = v41;
  *(_DWORD *)(result + 12) = 0;
  *(float *)(result + 16) = v45;
  *(float *)(result + 20) = v46;
  *(float *)(result + 24) = v47;
  *(_DWORD *)(result + 28) = 0;
  *(float *)(result + 32) = v51;
  *(float *)(result + 36) = v52;
  *(float *)(result + 40) = v53;
  *(void *)(result + 52) = 0;
  *(void *)(result + 44) = 0;
  *(_DWORD *)(result + 60) = 1065353216;
  return result;
}

void sub_20B148B78(float32x4_t *a1, float32x4_t a2)
{
  a1[16] = a2;
  *(double *)v3.i64 = sub_20B0CA5F4((float32x4_t **)(a1[3].i64[1] + 16), 0.0);
  __n128 v12 = (__n128)v3;
  float32x4_t v4 = vsubq_f32(v3, a1[16]);
  int32x4_t v5 = (int32x4_t)vmulq_f32(v4, v4);
  v5.i64[0] = vaddq_f32(vaddq_f32((float32x4_t)v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 1)), (float32x4_t)vdupq_laneq_s32(v5, 2)).u64[0];
  *(float *)v5.i32 = sqrtf(*(float *)v5.i32);
  *(_DWORD *)float v18 = 1065353216;
  *(_OWORD *)&v18[4] = 0uLL;
  __asm { FMOV            V2.4S, #1.0 }
  float32x4_t v11 = vmulq_f32(v4, vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.i8, 0)));
  *(_DWORD *)&v18[20] = 1065353216;
  *(void *)&v18[24] = 0;
  *(void *)float v19 = 0;
  *(void *)&v19[20] = 0;
  *(void *)&v19[12] = 0;
  *(_DWORD *)&v19[8] = 1065353216;
  *(_DWORD *)&v19[28] = 1065353216;
  uint64_t v16 = v11.i64[0];
  __int32 v17 = v11.i32[2];
  uint64_t v14 = 0x3F80000000000000;
  int v15 = 0;
  sub_20B148614((uint64_t)v18, (float *)&v16, (float *)&v14);
  v13[0] = *(_OWORD *)v18;
  v13[1] = *(_OWORD *)&v18[16];
  v13[2] = *(_OWORD *)v19;
  v13[3] = *(_OWORD *)&v19[16];
  sub_20B0CAB60(a1[3].i64[1] + 16, v13);
  sub_20B148408((__n128 **)(a1[3].i64[1] + 16), v12);
}

void sub_20B148C90(float32x4_t *a1, float32x4_t a2, __n128 a3)
{
  a1[16] = a2;
  *(double *)v4.i64 = sub_20B0CA5F4((float32x4_t **)(a1[3].i64[1] + 16), 0.0);
  __n128 v14 = (__n128)v4;
  float32x4_t v5 = vsubq_f32(v4, a1[16]);
  int32x4_t v6 = (int32x4_t)vmulq_f32(v5, v5);
  v6.i64[0] = vaddq_f32(vaddq_f32((float32x4_t)v6, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.i8, 1)), (float32x4_t)vdupq_laneq_s32(v6, 2)).u64[0];
  *(float *)v6.i32 = sqrtf(*(float *)v6.i32);
  *(_DWORD *)float v20 = 1065353216;
  *(_OWORD *)&v20[4] = 0uLL;
  *(_DWORD *)&v20[20] = 1065353216;
  __asm { FMOV            V2.4S, #1.0 }
  *(void *)&v20[24] = 0;
  *(void *)float v21 = 0;
  *(void *)&v21[20] = 0;
  *(void *)&v21[12] = 0;
  float32x4_t v12 = vmulq_f32(v5, vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.i8, 0)));
  *(_DWORD *)&v21[8] = 1065353216;
  *(_DWORD *)&v21[28] = 1065353216;
  __int32 v19 = v12.i32[2];
  uint64_t v18 = v12.i64[0];
  unint64_t v16 = a3.n128_u64[0];
  unsigned __int32 v17 = a3.n128_u32[2];
  sub_20B148614((uint64_t)v20, (float *)&v18, (float *)&v16);
  v15[0] = *(_OWORD *)v20;
  v15[1] = *(_OWORD *)&v20[16];
  v15[2] = *(_OWORD *)v21;
  v15[3] = *(_OWORD *)&v21[16];
  sub_20B0CAB60(a1[3].i64[1] + 16, v15);
  sub_20B148408((__n128 **)(a1[3].i64[1] + 16), v14);
}

__n128 sub_20B148DB0(uint64_t a1, float a2)
{
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  float32x4_t v26 = 0u;
  float32x4_t v27 = 0u;
  float32x4_t v24 = 0u;
  float32x4_t v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)va_list __p = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  *(_OWORD *)float32x4_t v11 = 0u;
  uint64_t v2 = *(void *)(a1 + 56) + 16;
  *(_OWORD *)float v8 = 0u;
  *(_OWORD *)float v9 = 0u;
  sub_20B149138((uint64_t)v8, v2);
  float32x4_t v3 = 0uLL;
  float32x4_t v4 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(v24, a2), (float32x4_t)0, v25), (float32x4_t)0, v26), (float32x4_t)0, v27);
  if (v8[1] != v8[0]) {
    float32x4_t v3 = *((float32x4_t *)v8[0] + 1);
  }
  sub_20B148408((__n128 **)v8, (__n128)vaddq_f32(v3, v4));
  long long v7 = v16;
  if (__p[1])
  {
    *(void **)&long long v13 = __p[1];
    operator delete(__p[1]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  if (v9[1])
  {
    *(void **)&long long v10 = v9[1];
    operator delete(v9[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  return (__n128)v7;
}

void sub_20B148EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_20B148EDC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B148EDC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  float32x4_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  float32x4_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  float32x4_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

double sub_20B148F40(uint64_t a1, float a2)
{
  if (fabsf(a2) >= 0.00000011921) {
    *(void *)&long long v2 = sub_20B148DB0(a1, a2).n128_u64[0];
  }
  else {
    long long v2 = *(_OWORD *)(*(void *)(a1 + 56) + 144);
  }
  return *(double *)&v2;
}

float sub_20B148F88(uint64_t a1, float a2)
{
  if (fabsf(a2) >= 0.00000011921) {
    return sub_20B148FBC(a1);
  }
  long long v2 = *(_OWORD *)(a1 + 64);
  return *(float *)&v2;
}

float sub_20B148FBC(uint64_t a1)
{
  float v1 = *(float *)(a1 + 236) * 0.00872664626;
  return (float)((float)(1.0 / tanf(v1)) * COERCE_FLOAT(*(void *)(a1 + 208))) / *(float *)(a1 + 240);
}

double sub_20B149090(float32x4_t *a1, double a2, double a3)
{
  float32x4_t v3 = vmlaq_n_f32(vmlaq_n_f32(a1[11], a1[8], (float)((float)(*(float *)&a2 + *(float *)&a2) / *(float *)&a3) + -1.0), a1[9], 1.0 - (float)((float)(*((float *)&a2 + 1) + *((float *)&a2 + 1)) / *((float *)&a3 + 1)));
  __asm { FMOV            V0.4S, #-1.0 }
  float32x4_t v9 = vmlaq_f32(v3, _Q0, a1[10]);
  float32x4_t v10 = vdivq_f32(v9, (float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 3));
  float32x4_t v11 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a1[3].i64[1] + 144), v10.f32[0]), *(float32x4_t *)(a1[3].i64[1] + 160), *(float32x2_t *)v10.f32, 1), *(float32x4_t *)(a1[3].i64[1] + 176), v10, 2), (float32x4_t)0, *(float32x4_t *)(a1[3].i64[1] + 192));
  int32x4_t v12 = (int32x4_t)vmulq_f32(v11, v11);
  v12.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2)).u32[0];
  float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  *(void *)&double result = vmulq_n_f32(v11, vmul_f32(vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)), v13).f32[0]).u64[0];
  return result;
}

uint64_t sub_20B149138(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 113) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  sub_20B1491D4(a1, a2);
  return a1;
}

void sub_20B1491A8(_Unwind_Exception *a1)
{
  float32x4_t v5 = *(void **)(v1 + 72);
  if (v5)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  sub_20B1C0458(v2, v3, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1491D4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  if (a1 != a2)
  {
    sub_20B14926C((void *)a1, *(long long **)a2, *(long long **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
    sub_20B14926C((void *)(a1 + 24), *(long long **)(a2 + 24), *(long long **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
    sub_20B14926C((void *)(a1 + 48), *(long long **)(a2 + 48), *(long long **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5);
    sub_20B14926C((void *)(a1 + 72), *(long long **)(a2 + 72), *(long long **)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5);
  }
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  sub_20B0CA84C(a1);
  return a1;
}

_OWORD *sub_20B14926C(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  int32x4_t v6 = a2;
  uint64_t v8 = a1[2];
  double result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 5)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59) {
      sub_20B05D0BC();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_20B121138(a1, v11);
    float32x2_t v13 = (_OWORD *)a1[1];
    int32x4_t v12 = (_OWORD **)(a1 + 1);
    double result = v13;
    long long v14 = (char *)v13;
    if (v6 != a3)
    {
      long long v14 = (char *)result;
      do
      {
        long long v15 = *v6;
        long long v16 = v6[1];
        v6 += 2;
        *(_OWORD *)long long v14 = v15;
        *((_OWORD *)v14 + 1) = v16;
        v14 += 32;
      }
      while (v6 != a3);
    }
LABEL_25:
    int64_t v25 = v14 - (char *)result;
    goto LABEL_26;
  }
  long long v18 = (_OWORD *)a1[1];
  int32x4_t v12 = (_OWORD **)(a1 + 1);
  long long v17 = v18;
  unint64_t v19 = ((char *)v18 - (char *)result) >> 5;
  if (v19 >= a4)
  {
    long long v14 = (char *)result;
    if (a2 != a3)
    {
      float32x4_t v26 = result;
      do
      {
        *(void *)float32x4_t v26 = *(void *)v6;
        v26[1] = v6[1];
        v14 += 32;
        v6 += 2;
        v26 += 2;
      }
      while (v6 != a3);
    }
    goto LABEL_25;
  }
  long long v20 = &a2[2 * v19];
  if (v17 != result)
  {
    do
    {
      *(void *)double result = *(void *)v6;
      result[1] = v6[1];
      v6 += 2;
      result += 2;
    }
    while (v6 != v20);
    double result = *v12;
  }
  long long v21 = (char *)result;
  if (v20 != a3)
  {
    long long v21 = (char *)result;
    long long v22 = result;
    do
    {
      long long v23 = *v20;
      long long v24 = v20[1];
      v20 += 2;
      *long long v22 = v23;
      v22[1] = v24;
      v22 += 2;
      v21 += 32;
    }
    while (v20 != a3);
  }
  int64_t v25 = v21 - (char *)result;
LABEL_26:
  void *v12 = (_OWORD *)((char *)result + v25);
  return result;
}

void sub_20B1493DC(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = a2;
  *(void *)a1 = &unk_26BF4F658;
  operator new();
}

void sub_20B14945C(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_26BF4F688;
  sub_20B0780A4(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t sub_20B149494(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4F658;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_20B081CD8(v2);
  }
  *(void *)a1 = &unk_26BF4F688;
  sub_20B0780A4(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_20B14950C(uint64_t a1)
{
  sub_20B149494(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B149544(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4, uint64_t **a5, unsigned int a6)
{
  uint64_t v10 = (uint64_t *)sub_20B14B9F4((uint64_t)v59, a1);
  sub_20B149E00(v10, (uint64_t)v54);
  uint64_t v49 = v60;
  float v50 = v59;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  int v52 = 0;
  __int16 v53 = 0;
  unsigned int v32 = a6;
  float v33 = a4 + 1;
  unint64_t v11 = (unint64_t *)MEMORY[0x263F90538];
  float v35 = a4;
  while ((char *)v54[1] != v50
       || v54[0] != v49
       || v55 != v51
       || v56 != v52
       || v57 != v53
       || v58 != HIBYTE(v53))
  {
    *(_OWORD *)float v47 = 0u;
    long long v48 = 0u;
    sub_20B149E9C((uint64_t)v54, (uint64_t)v47);
    if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)v47))
    {
      uint64_t v46 = 0;
      if (LODWORD(v47[0]) != *(_DWORD *)a1
        || v47[1] != *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8)
        || (void)v48 != *(void *)(a1 + 16)
        || (*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v13 = atomic_load(v11);
        if (v13)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v44, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v47, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 1256));
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        sub_20B06AC70();
      }
      uint64_t v43 = 0;
      if (v47[1] != *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8)
        || (void)v48 != *(void *)(a1 + 16)
        || (*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v14 = atomic_load(v11);
        if (v14)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v44, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v47, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 912));
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        sub_20B06AC70();
      }
      long long v15 = v47[1];
      if (!v47[1] || (uint64_t v16 = *((void *)v47[1] + 7), (v16 & 0x800) != 0))
      {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v47[1], v12);
        uint64_t v16 = *((void *)v15 + 7);
      }
      if ((v16 & 0x100) != 0)
      {
        long long v44 = 0u;
        long long v45 = 0u;
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype((uint64_t *)&v44, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v47);
        sub_20B0B03D4((uint64_t)&v44, v62);
        String = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v62);
        uint64_t v18 = sub_20B080D50((uint64_t)v35, String);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)v62);
        if (v33 == (uint64_t **)v18)
        {
          int v38 = v44;
          uint64_t v39 = *((void *)&v44 + 1);
          if (*((void *)&v44 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 48), 1uLL, memory_order_relaxed);
          }
          sub_20B0B0824(&v40, &v45);
          sub_20B0B0870(&v41, (_DWORD *)&v45 + 1);
          uint64_t v42 = *((void *)&v45 + 1);
          if ((BYTE8(v45) & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v45 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v42 &= 0xFFFFFFFFFFFFFFF8;
          }
          sub_20B149544(&v38, a2, a3, v35, a5, v32);
          if ((v42 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_20B06A424((uint64_t)&v40);
          if (v39) {
            sub_20B06A5E0(v39);
          }
          sub_20B0B03D4((uint64_t)&v44, &v37);
          v62[0] = (long long *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
          unint64_t v19 = sub_20B14E8D4(v35, (const void **)v62[0], (uint64_t)&unk_20B1E7420, v62);
          long long v20 = v19;
          *((_DWORD *)v19 + 14) = v44;
          uint64_t v21 = *((void *)&v44 + 1);
          if (*((void *)&v44 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 48), 1uLL, memory_order_relaxed);
          }
          uint64_t v22 = v19[8];
          v20[8] = v21;
          if (v22) {
            sub_20B06A5E0(v22);
          }
          sub_20B14BC9C((uint64_t)(v20 + 9), &v45);
          sub_20B14BCF4((uint64_t)v20 + 76, (_DWORD *)&v45 + 1);
          sub_20B06A390(v20 + 10, (void *)&v45 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_20B06A424((uint64_t)&v37);
        }
        sub_20B0B03D4((uint64_t)v47, &v37);
        v62[0] = (long long *)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37);
        long long v23 = sub_20B14E8D4(a5, (const void **)v62[0], (uint64_t)&unk_20B1E7420, v62);
        long long v24 = v23;
        *((_DWORD *)v23 + 14) = v47[0];
        int64_t v25 = v47[1];
        if (v47[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v47[1] + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = v23[8];
        v24[8] = (uint64_t)v25;
        if (v26) {
          sub_20B06A5E0(v26);
        }
        sub_20B14BC9C((uint64_t)(v24 + 9), &v48);
        sub_20B14BCF4((uint64_t)v24 + 76, (_DWORD *)&v48 + 1);
        sub_20B06A390(v24 + 10, (void *)&v48 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v37);
        if ((BYTE8(v45) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v45 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v45);
        if (*((void *)&v44 + 1)) {
          sub_20B06A5E0(*((uint64_t *)&v44 + 1));
        }
      }
      sub_20B0B03D4((uint64_t)v47, v62);
      *(void *)&long long v44 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v62);
      float32x4_t v27 = sub_20B14E8D4(a3, (const void **)v44, (uint64_t)&unk_20B1E7420, (long long **)&v44);
      long long v28 = v27;
      *((_DWORD *)v27 + 14) = v47[0];
      long long v29 = v47[1];
      if (v47[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v47[1] + 6, 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = v27[8];
      v28[8] = (uint64_t)v29;
      if (v30) {
        sub_20B06A5E0(v30);
      }
      sub_20B14BC9C((uint64_t)(v28 + 9), &v48);
      sub_20B14BCF4((uint64_t)v28 + 76, (_DWORD *)&v48 + 1);
      sub_20B06A390(v28 + 10, (void *)&v48 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)v62);
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((BYTE8(v48) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v48 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v48);
    if (v47[1]) {
      sub_20B06A5E0((uint64_t)v47[1]);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)v54);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v51);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v55);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_20B06A424((uint64_t)&v61);
}

void sub_20B149CD8(_Unwind_Exception *a1)
{
  sub_20B149F48(v1 - 160);
  _Unwind_Resume(a1);
}

uint64_t sub_20B149E00@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  sub_20B0B0824(&v7, (_DWORD *)a1 + 4);
  sub_20B0B0870(&v8, (_DWORD *)a1 + 5);
  int v5 = *((_DWORD *)a1 + 12);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = a1;
  sub_20B0B0824((_DWORD *)(a2 + 16), &v7);
  sub_20B0B0870((_DWORD *)(a2 + 20), &v8);
  *(_DWORD *)(a2 + 24) = v5;
  *(_WORD *)(a2 + 28) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_20B06A424((uint64_t)&v7);
}

uint64_t sub_20B149E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  sub_20B0D29D0(a2, &v6, (_DWORD *)(a1 + 16));
  uint64_t result = v6;
  if (v6) {
    return sub_20B06A5E0(v6);
  }
  return result;
}

void sub_20B149EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_20B06A5E0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B149F10(uint64_t a1)
{
  return a1;
}

uint64_t sub_20B149F48(uint64_t a1)
{
  return a1;
}

void sub_20B149F80(void *a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a4;
  if (!v11)
  {
    sub_20B07F8E0(a5, "Cannot import into nil asset");
    goto LABEL_47;
  }
  sub_20B1A804C();
  id v12 = v10;
  uint64_t v15 = objc_msgSend_bytes(v12, v13, v14);
  uint64_t v18 = objc_msgSend_length(v12, v16, v17);
  objc_msgSend_stringWithFormat_(NSString, v19, @"%@?address=%lx&size=%ld", v9, v15, v18);
  v85[0] = 0;
  v85[1] = 0;
  uint64_t v86 = 0;
  id v71 = objc_claimAutoreleasedReturnValue();
  uint64_t v22 = (char *)objc_msgSend_UTF8String(v71, v20, v21);
  sub_20B07F8E0(v85, v22);
  long long v23 = [MDLArchiveAssetResolver alloc];
  int64_t v25 = objc_msgSend_fileURLWithPath_(NSURL, v24, (uint64_t)v9);
  float32x4_t v27 = objc_msgSend_initWithURL_(v23, v26, (uint64_t)v25);

  objc_msgSend_setData_(v27, v28, (uint64_t)v12);
  objc_msgSend_setResolver_(v11, v29, (uint64_t)v27);
  sub_20B07F8E0(__p, "ArMemoryResolver");
  uint64_t v30 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver();
  if (SBYTE7(v80) < 0) {
    operator delete(__p[0]);
  }
  memset(v84, 0, sizeof(v84));
  pxrInternal__aapl__pxrReserved__::ArGetResolver(v30);
  pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset();
  v83 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  if (v83)
  {
    uint64_t v82 = 0;
    float v70 = v27;
    sub_20B14EB68((uint64_t *)__p, (uint64_t *)&v83);
    pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis();
    float v33 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v33 + 8))(v33);
    }
    BOOL v34 = (pxrInternal__aapl__pxrReserved__::TfToken *)objc_msgSend_setUpAxis_(v11, v31, v32, 0.0078125);
    if ((v82 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t EmptyString = (v82 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else {
      unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v34);
    }
    int v38 = *(char *)(EmptyString + 23);
    if (v38 < 0)
    {
      if (*(void *)(EmptyString + 8) != 1) {
        goto LABEL_20;
      }
      unint64_t EmptyString = *(void *)EmptyString;
    }
    else if (v38 != 1)
    {
LABEL_20:
      sub_20B14EB68((uint64_t *)__p, (uint64_t *)&v83);
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
      *(float *)&double v39 = v39;
      objc_msgSend_setMetersPerUnit_(v11, v40, v41, v39);
      uint64_t v42 = __p[1];
      if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(void *))(*(void *)v42 + 8))(v42);
      }
      uint64_t v43 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4((uint64_t *)&v83);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v43);
      double v45 = v44;
      objc_msgSend_set_timeCodesPerSecond_(v11, v46, v47);
      double v48 = 1.0 / v45;
      objc_msgSend_setFrameInterval_(v11, v49, v50, v48);
      uint64_t v51 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4((uint64_t *)&v83);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v51);
      objc_msgSend_setStartTime_(v11, v53, v54, v52 * v48);
      uint64_t v55 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4((uint64_t *)&v83);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v55);
      objc_msgSend_setEndTime_(v11, v57, v58, v56 * v48);
      *(_OWORD *)va_list __p = 0u;
      long long v80 = 0u;
      uint64_t v81 = 1065353216;
      float v78 = v83;
      sub_20B14ED98((uint64_t *)&v78);
      sub_20B14A778(v11, (uint64_t *)&v78, a3, (uint64_t)__p);
      float v59 = sub_20B14EA78(&v78);
      pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v59);
      for (i = (uint64_t *)v80; i; i = (uint64_t *)*i)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        uint64_t v77 = 0;
        uint64_t v61 = i + 2;
        if (*((char *)i + 39) < 0)
        {
          sub_20B07F994(__dst, (void *)i[2], i[3]);
        }
        else
        {
          *(_OWORD *)__dst = *v61;
          uint64_t v77 = i[4];
        }
        uint64_t v74 = 0;
        float v75 = 0;
        if (SHIBYTE(v77) < 0)
        {
          sub_20B07F994(v72, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)float v72 = *(_OWORD *)__dst;
          uint64_t v73 = v77;
        }
        pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
        if (SHIBYTE(v73) < 0) {
          operator delete(v72[0]);
        }
        if (v74)
        {
          uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 16))(v74);
          (*(void (**)(uint64_t))(*(void *)v74 + 40))(v74);
          float v64 = v63;
          float v67 = objc_msgSend_resolver(v11, v63, v65);
          if (*((char *)i + 39) < 0) {
            uint64_t v61 = *(_OWORD **)v61;
          }
          float v68 = objc_msgSend_stringWithUTF8String_(NSString, v66, (uint64_t)v61);
          objc_msgSend_addResolvedAssetNamed_offset_fileSize_(v67, v69, (uint64_t)v68, v64, v62);
        }
        if (v75) {
          sub_20B081CD8(v75);
        }
        if (SHIBYTE(v77) < 0) {
          operator delete(__dst[0]);
        }
      }
      sub_20B07F8E0(a5, "");
      sub_20B14ED10((uint64_t)__p);
      if ((v82 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      float32x4_t v27 = v70;
      goto LABEL_44;
    }
    if (*(unsigned char *)EmptyString == 90) {
      objc_msgSend_setUpAxis_(v11, v35, v36, 0.0);
    }
    goto LABEL_20;
  }
  sub_20B07F8E0(a5, "Could not import USD file");
LABEL_44:
  sub_20B14EA78(&v83);
  __p[0] = v84;
  sub_20B12CBFC((void ***)__p);

  if (SHIBYTE(v86) < 0) {
    operator delete(v85[0]);
  }

LABEL_47:
}

void sub_20B14A4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_20B14EA78((atomic_uint **)(v42 - 160));
  va_list __p = (void *)(v42 - 152);
  sub_20B12CBFC((void ***)&__p);

  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }

  _Unwind_Resume(a1);
}

uint64_t sub_20B14A6F4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    sub_20B120D88((unint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return sub_20B14A778(v3);
  }
  return result;
}

void sub_20B14A778(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  v58[0] = 0;
  v58[1] = 0;
  v56[1] = 0;
  unsigned __int8 v57 = (uint64_t *)v58;
  uint64_t v55 = (uint64_t *)v56;
  v56[0] = 0;
  v54[0] = 0;
  v54[1] = 0;
  __int16 v53 = (uint64_t *)v54;
  int v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v49, v8);
  *(void *)long long __str = *(void *)(a3 + 64);
  sub_20B149544((uint64_t)&v49, (uint64_t)__str, &v53, &v55, &v57, 1u);
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v51);
  if (v50) {
    sub_20B06A5E0(v50);
  }
  v48[0] = 0;
  v48[1] = 0;
  uint64_t v47 = (uint64_t *)v48;
  sub_20B14E318((uint64_t *)v46, (const void ***)&v53);
  sub_20B14BD40(v7, a3, v46, &v47, a4);
  sub_20B14E5EC((uint64_t)v46, (void *)v46[1]);
  id v9 = v47;
  if (v47 != (uint64_t *)v48)
  {
    do
    {
      *(_OWORD *)va_list __p = 0u;
      long long v45 = 0u;
      *(_OWORD *)uint64_t v43 = 0u;
      memset(__str, 0, sizeof(__str));
      sub_20B14E648(__str, (long long *)v9 + 2);
      if ((__str[23] & 0x80000000) != 0)
      {
        if (*(void *)&__str[8] != 1) {
          goto LABEL_12;
        }
        id v10 = *(unsigned char **)__str;
      }
      else
      {
        if (__str[23] != 1) {
          goto LABEL_12;
        }
        id v10 = __str;
      }
      if (*v10 == 47) {
        goto LABEL_45;
      }
LABEL_12:
      id v11 = *(id *)&__str[24];
      int v13 = objc_msgSend_conformsToProtocol_(v11, v12, (uint64_t)&unk_26BF65C20);

      if (v13)
      {
        objc_msgSend_animations(v7, v14, v15);
        id v16 = (id)objc_claimAutoreleasedReturnValue();
        id v17 = *(id *)&__str[24];
        objc_msgSend_addObject_(v16, v18, (uint64_t)v17);
        goto LABEL_41;
      }
      if (SHIBYTE(__p[0]) < 0)
      {
        if (!v43[1]) {
          goto LABEL_22;
        }
        if (v43[1] == (void *)1)
        {
          unint64_t v19 = (void **)v43[0];
LABEL_21:
          if (*(unsigned char *)v19 == 47)
          {
LABEL_22:
            std::string::basic_string(&v41, (const std::string *)__str, 0, 9uLL, (std::allocator<char> *)v59);
            if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v41.__r_.__value_.__l.__size_ != 9)
              {
                operator delete(v41.__r_.__value_.__l.__data_);
                goto LABEL_43;
              }
              BOOL v26 = *(void *)v41.__r_.__value_.__l.__data_ != 0x657473614D5F5F2FLL
                 || *(unsigned char *)(v41.__r_.__value_.__r.__words[0] + 8) != 114;
              operator delete(v41.__r_.__value_.__l.__data_);
              if (!v26) {
                goto LABEL_40;
              }
LABEL_43:
              id v16 = *(id *)&__str[24];
              objc_msgSend_addObject_(v7, v28, (uint64_t)v16);
            }
            else
            {
              if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) != 9) {
                goto LABEL_43;
              }
              BOOL v22 = v41.__r_.__value_.__r.__words[0] == 0x657473614D5F5F2FLL && v41.__r_.__value_.__s.__data_[8] == 114;
              if (!v22) {
                goto LABEL_43;
              }
LABEL_40:
              objc_msgSend_masters(v7, v20, v21);
              id v16 = (id)objc_claimAutoreleasedReturnValue();
              id v17 = *(id *)&__str[24];
              objc_msgSend_addObject_(v16, v27, (uint64_t)v17);
LABEL_41:
            }
            goto LABEL_45;
          }
        }
      }
      else
      {
        if (!HIBYTE(__p[0])) {
          goto LABEL_22;
        }
        unint64_t v19 = v43;
        if (HIBYTE(__p[0]) == 1) {
          goto LABEL_21;
        }
      }
      uint64_t v23 = sub_20B080D50((uint64_t)&v47, (const void **)v43);
      if (v48 != (void **)v23)
      {
        id v16 = *(id *)(v23 + 56);
        id v17 = *(id *)&__str[24];
        objc_msgSend_addChild_(v16, v24, (uint64_t)v17);
        goto LABEL_41;
      }
LABEL_45:
      if (SHIBYTE(v45) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v43[0]);
      }
      long long v29 = *(void **)&__str[24];
      *(void *)&__str[24] = 0;

      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      uint64_t v30 = (uint64_t *)v9[1];
      if (v30)
      {
        do
        {
          long long v31 = v30;
          uint64_t v30 = (uint64_t *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          long long v31 = (uint64_t *)v9[2];
          BOOL v22 = *v31 == (void)v9;
          id v9 = v31;
        }
        while (!v22);
      }
      id v9 = v31;
    }
    while (v31 != (uint64_t *)v48);
  }
  uint64_t v32 = v57;
  if (v57 != (uint64_t *)v58)
  {
    do
    {
      memset(__str, 0, sizeof(__str));
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype((uint64_t *)__str, (pxrInternal__aapl__pxrReserved__::UsdPrim *)(v32 + 7));
      uint64_t v33 = sub_20B080D50((uint64_t)&v47, (const void **)v32 + 4);
      if (v48 != (void **)v33)
      {
        sub_20B0B03D4((uint64_t)__str, &v41);
        String = (const void **)pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41);
        uint64_t v35 = sub_20B080D50((uint64_t)&v47, String);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v41);
        if (v48 != (void **)v35)
        {
          id v36 = *(id *)(v35 + 56);
          id v37 = *(id *)(v33 + 56);
          objc_msgSend_setInstance_(v37, v38, (uint64_t)v36);
        }
      }
      if ((__str[24] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__str[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&__str[16]);
      if (*(void *)&__str[8]) {
        sub_20B06A5E0(*(uint64_t *)&__str[8]);
      }
      double v39 = (uint64_t *)v32[1];
      if (v39)
      {
        do
        {
          int v40 = v39;
          double v39 = (uint64_t *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          int v40 = (uint64_t *)v32[2];
          BOOL v22 = *v40 == (void)v32;
          uint64_t v32 = v40;
        }
        while (!v22);
      }
      uint64_t v32 = v40;
    }
    while (v40 != (uint64_t *)v58);
  }
  sub_20B14E750((uint64_t)&v47, v48[0]);
  sub_20B14E5EC((uint64_t)&v53, v54[0]);
  sub_20B14E5EC((uint64_t)&v55, v56[0]);
  sub_20B14E5EC((uint64_t)&v57, v58[0]);
}

void sub_20B14AC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *a28)
{
  sub_20B14D83C((uint64_t)&a13);
  sub_20B14E750((uint64_t)&a27, a28);
  sub_20B14E5EC(v31 - 168, *(void **)(v31 - 160));
  sub_20B14E5EC(v31 - 144, *(void **)(v31 - 136));
  sub_20B14E5EC(v31 - 120, *(void **)(v31 - 112));

  _Unwind_Resume(a1);
}

id sub_20B14AD60(uint64_t *a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = a2;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot((uint64_t *)&v19, v4);
  id v16 = 0;
  id v17 = 0;
  uint64_t v18 = 0;
  unint64_t v5 = atomic_load(MEMORY[0x263F90538]);
  if (!v5) {
    sub_20B06AC70();
  }
  id v17 = sub_20B14EDE4(&v16, (uint64_t *)(v5 + 232));
  uint64_t v6 = [MDLAnimatedVector3Array alloc];
  int v8 = objc_msgSend_initWithElementCount_(v6, v7, 2);
  id v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v9);
  double v11 = v10;
  id v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v12);
  float v13 = v11;
  if (v14 >= v13) {
    operator new();
  }
  *(void *)&long long v21 = &v16;
  sub_20B06C040((void ***)&v21);
  if ((BYTE8(v20) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v20 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v20);
  if (*((void *)&v19 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v19 + 1));
  }

  return v8;
}

void sub_20B14AFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a12;
  sub_20B06C040(&a19);
  sub_20B0D2974((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_20B14B064(void *a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  id v7 = a1;
  id v10 = a3;
  if (!v10)
  {
    sub_20B07F8E0(a4, "Cannot import into nil asset");
    goto LABEL_57;
  }
  __ptr[0] = 0;
  sub_20B1A9238(v7, v8, v9, __p);
  if ((SBYTE7(v77) & 0x80u) == 0) {
    double v11 = __p;
  }
  else {
    double v11 = (void **)__p[0];
  }
  id v12 = fopen((const char *)v11, "r");
  float v13 = v12;
  if (SBYTE7(v77) < 0)
  {
    operator delete(__p[0]);
    if (v13) {
      goto LABEL_7;
    }
LABEL_22:
    sub_20B07F8E0(a4, "Could not open file");
    goto LABEL_57;
  }
  if (!v12) {
    goto LABEL_22;
  }
LABEL_7:
  fread(__ptr, 4uLL, 1uLL, v13);
  fclose(v13);
  double v14 = [MDLArchiveAssetResolver alloc];
  id v16 = objc_msgSend_initWithURL_(v14, v15, (uint64_t)v7);
  objc_msgSend_setResolver_(v10, v17, (uint64_t)v16);
  sub_20B1A804C();
  v83[0] = 0;
  v83[1] = 0;
  uint64_t v84 = 0;
  sub_20B1A9238(v7, v18, v19, v83);
  uint64_t IsSupportedFile = pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile();
  if (IsSupportedFile)
  {
    memset(v82, 0, sizeof(v82));
    pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsSupportedFile);
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset();
    uint64_t v81 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::Open();
    uint64_t v80 = 0;
    sub_20B14EB68((uint64_t *)__p, (uint64_t *)&v81);
    pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis();
    long long v21 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v21 + 8))(v21);
    }
    if (*(unsigned char *)(a2 + 24))
    {
      float v79 = v81;
      sub_20B14ED98((uint64_t *)&v79);
      uint64_t v22 = sub_20B14AD60((uint64_t *)&v79, v10);
      objc_msgSend_setExtents_(v10, v23, (uint64_t)v22);

      sub_20B14EA78(&v79);
    }
    sub_20B14EB68((uint64_t *)__p, (uint64_t *)&v81);
    pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
    *(float *)&double v24 = v24;
    objc_msgSend_setMetersPerUnit_(v10, v25, v26, v24);
    uint64_t v31 = __p[1];
    if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(void *))(*(void *)v31 + 8))(v31);
    }
    if (v80)
    {
      unint64_t v32 = v80 & 0xFFFFFFFFFFFFFFF8;
      if ((v80 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v33 = (const char *)(v32 + 16);
        if (*(char *)(v32 + 39) < 0) {
          uint64_t v33 = *(const char **)v33;
        }
      }
      else
      {
        uint64_t v33 = "";
      }
      v29.i8[0] = *v33;
      v30.i32[0] = 90;
      objc_msgSend_setUpAxis_(v10, v27, v28, *(double *)vbslq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v29, v30), 0), (int8x16_t)xmmword_20B1E74A0, (int8x16_t)xmmword_20B1E74C0).i64);
    }
    else
    {
      objc_msgSend_setUpAxis_(v10, v27, v28, 0.0078125);
    }
    if (v81)
    {
      BOOL v34 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4((uint64_t *)&v81);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(v34);
      double v36 = v35;
      objc_msgSend_set_timeCodesPerSecond_(v10, v37, v38);
      double v39 = 1.0 / v36;
      objc_msgSend_setFrameInterval_(v10, v40, v41, v39);
      uint64_t v42 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4((uint64_t *)&v81);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v42);
      objc_msgSend_setStartTime_(v10, v44, v45, v43 * v39);
      uint64_t v46 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4((uint64_t *)&v81);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v46);
      objc_msgSend_setEndTime_(v10, v48, v49, v47 * v39);
      uint64_t v54 = objc_msgSend_bufferAllocator(v10, v50, v51);
      if (v54)
      {
        uint64_t v55 = objc_msgSend_bufferAllocator(v10, v52, v53);
      }
      else
      {
        uint64_t v55 = objc_opt_new();
      }
      double v56 = (void *)v55;

      *(_OWORD *)va_list __p = 0u;
      long long v77 = 0u;
      uint64_t v78 = 1065353216;
      float v75 = v81;
      float v68 = v56;
      sub_20B14ED98((uint64_t *)&v75);
      sub_20B14A778(v10, (uint64_t *)&v75, a2, (uint64_t)__p);
      unsigned __int8 v57 = sub_20B14EA78(&v75);
      pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v57);
      for (i = (uint64_t *)v77; i; i = (uint64_t *)*i)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        uint64_t v74 = 0;
        float v59 = i + 2;
        if (*((char *)i + 39) < 0)
        {
          sub_20B07F994(__dst, (void *)i[2], i[3]);
        }
        else
        {
          *(_OWORD *)__dst = *v59;
          uint64_t v74 = i[4];
        }
        uint64_t v71 = 0;
        float v72 = 0;
        if (SHIBYTE(v74) < 0)
        {
          sub_20B07F994(v69, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)float v69 = *(_OWORD *)__dst;
          uint64_t v70 = v74;
        }
        pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
        if (SHIBYTE(v70) < 0) {
          operator delete(v69[0]);
        }
        if (v71)
        {
          uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 16))(v71);
          (*(void (**)(uint64_t))(*(void *)v71 + 40))(v71);
          uint64_t v62 = v61;
          uint64_t v65 = objc_msgSend_resolver(v10, v61, v63, v68);
          if (*((char *)i + 39) < 0) {
            float v59 = *(_OWORD **)v59;
          }
          float v66 = objc_msgSend_stringWithUTF8String_(NSString, v64, (uint64_t)v59);
          objc_msgSend_addResolvedAssetNamed_offset_fileSize_(v65, v67, (uint64_t)v66, v62, v60);
        }
        if (v72) {
          sub_20B081CD8(v72);
        }
        if (SHIBYTE(v74) < 0) {
          operator delete(__dst[0]);
        }
      }
      sub_20B07F8E0(a4, "");
      sub_20B14ED10((uint64_t)__p);
    }
    else
    {
      sub_20B07F8E0(a4, "Could not import USD file");
    }
    if ((v80 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_20B14EA78(&v81);
    __p[0] = v82;
    sub_20B12CBFC((void ***)__p);
  }
  else
  {
    sub_20B07F8E0(a4, "Unsupported USD file type");
  }
  if (SHIBYTE(v84) < 0) {
    operator delete(v83[0]);
  }

LABEL_57:
}

void sub_20B14B620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,__int16 *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,atomic_uint *a37,__int16 a38,char a39,char a40)
{
  if ((a36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B14EA78(&a37);
  va_list __p = &a38;
  sub_20B12CBFC((void ***)&__p);
  if (*(char *)(v43 - 113) < 0) {
    operator delete(*(void **)(v43 - 136));
  }

  _Unwind_Resume(a1);
}

BOOL sub_20B14B858(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = 0x2000;
  if (!a3) {
    uint64_t v3 = 0;
  }
  unint64_t v4 = *(void *)(*(void *)a2 + 56) & 0xFFFFFFFFFFFFDFFFLL | v3;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v9 = *a1 & v4;
  uint64_t v8 = v6 & v5;
  return *((unsigned __int8 *)a1 + 16) != sub_20B14B8DC(&v9, 0, (uint64_t)&v9, 0xFu, &v8);
}

uint64_t sub_20B14B8DC(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_20B14B9A8(uint64_t *a1, uint64_t a2)
{
  int v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();

  return sub_20B14B858(a1, a2, v4);
}

uint64_t sub_20B14B9F4(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  int v4 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v5) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)(v5 + 40) & 7;
  unint64_t v7 = *(void *)(v5 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v7) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    goto LABEL_21;
  }
  if (!v6 || v7 == 0)
  {
LABEL_20:
    unint64_t v7 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    uint64_t v10 = *(void *)(v7 + 40);
    unint64_t v7 = v10 & 0xFFFFFFFFFFFFFFF8;
    if ((v10 & 7) == 0 && v7 != 0) {
      break;
    }
    if (v7) {
      BOOL v12 = (v10 & 7) == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_21:
  UsdPrimDefaultPredicate = (void *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v4);
  sub_20B14BAD4(a1, v5, v7, (_DWORD *)(a2 + 16), UsdPrimDefaultPredicate);
  return a1;
}

void sub_20B14BAC0(_Unwind_Exception *a1)
{
  sub_20B0B04EC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B14BAD4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  sub_20B14BC9C(a1 + 16, a4);
  sub_20B14BCF4(a1 + 20, a4 + 1);
  uint64_t v8 = *a5;
  uint64_t v9 = a5[1];
  if (*(void *)a1)
  {
    uint64_t v10 = a5[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v8 & 0x2000) != 0 || (v9 & 0x2000) == 0))
    {
      v8 |= 0x2000uLL;
      v9 &= ~0x2000uLL;
    }
  }
  else
  {
    LOBYTE(v10) = *((unsigned char *)a5 + 16);
  }
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_20B149E00((uint64_t *)a1, (uint64_t)&v12);
  if ((void)v12 != *(void *)(a1 + 8) && !sub_20B14B9A8((uint64_t *)(a1 + 24), (uint64_t)&v12))
  {
    BYTE12(v13) = 1;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v12);
    sub_20B14BC00(a1, (uint64_t)&v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_20B06A424((uint64_t)&v13);
}

void sub_20B14BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B14BC00(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 29)) {
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  }
  *(void *)a1 = *(void *)a2;
  sub_20B14BC9C(a1 + 16, (_DWORD *)(a2 + 16));
  uint64_t result = sub_20B14BCF4(a1 + 20, (_DWORD *)(a2 + 20));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t sub_20B14BC9C(uint64_t a1, _DWORD *a2)
{
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==() & 1) == 0)
  {
    sub_20B0B0824(&v5, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    sub_20B06A424((uint64_t)&v5);
  }
  return a1;
}

uint64_t sub_20B14BCF4(uint64_t a1, _DWORD *a2)
{
  sub_20B0B0870(&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

void sub_20B14BD40(void *a1, uint64_t a2, long long **a3, uint64_t **a4, uint64_t a5)
{
  uint64_t v125 = a5;
  v129 = a4;
  id v128 = a1;
  unint64_t v7 = *a3;
  uint64_t v134 = (uint64_t)(a3 + 1);
  if (*a3 != (long long *)(a3 + 1))
  {
    v131 = (char *)&v149 + 4;
    v135 = &obj[16];
    v136 = &obj[20];
    uint64_t v124 = (uint64_t)(v129 + 1);
    v123 = (char *)&v146 + 4;
    v121 = &obj[4];
    v122 = &v146;
    v119 = v148;
    v120 = &v147[1];
    v118 = (char *)&v164 + 4;
    v126 = &v153;
    v127 = (_DWORD *)&v153 + 1;
    v132 = (_DWORD *)&v162 + 2;
    v133 = (_DWORD *)&v162 + 3;
    v130 = (char *)&v159 + 4;
    long long v8 = 0uLL;
    do
    {
      uint64_t v163 = 0;
      long long v161 = v8;
      long long v162 = v8;
      long long v160 = v8;
      sub_20B14DEA8(&v160, v7 + 2);
      uint64_t v159 = 0;
      sub_20B0B03D4((uint64_t)&v161 + 8, &v159);
      long long __dst = 0uLL;
      uint64_t v158 = 0;
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v159);
      if (*(char *)(String + 23) < 0)
      {
        sub_20B07F994(&__dst, *(void **)String, *(void *)(String + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)String;
        uint64_t v158 = *(void *)(String + 16);
        long long __dst = v10;
      }
      long long v155 = 0uLL;
      uint64_t v156 = 0;
      sub_20B14D8A4((uint64_t)&v161 + 8, (uint64_t)obj);
      sub_20B0B03D4((uint64_t)obj, &v149);
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v149);
      if (*(char *)(v11 + 23) < 0)
      {
        sub_20B07F994(&v155, *(void **)v11, *(void *)(v11 + 8));
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        uint64_t v156 = *(void *)(v11 + 16);
        long long v155 = v12;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v149);
      if ((obj[24] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&obj[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)v135);
      if (*(void *)&obj[8]) {
        sub_20B06A5E0(*(uint64_t *)&obj[8]);
      }
      *(void *)&long long v149 = 0;
      IsPrimPath = (pxrInternal__aapl__pxrReserved__::UsdGeomScope *)pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v159);
      if (IsPrimPath)
      {
        unint64_t v14 = atomic_load(MEMORY[0x263F90538]);
        if (v14)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)obj, (pxrInternal__aapl__pxrReserved__::UsdPrim *)((char *)&v161 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v14 + 1256));
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
        }
        sub_20B06AC70();
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetStaticTfType(IsPrimPath);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
      IsA = (pxrInternal__aapl__pxrReserved__::UsdGeomXform *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
      if (IsA)
      {
        id v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20B06A3E4((_DWORD *)&v161 + 2);
        if ((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (*(void *)v16 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
        }
        int v29 = *(char *)(EmptyString + 23);
        if (v29 < 0)
        {
          if (*(void *)(EmptyString + 8) != 9) {
            goto LABEL_32;
          }
          unint64_t EmptyString = *(void *)EmptyString;
        }
        else if (v29 != 9)
        {
          goto LABEL_32;
        }
        BOOL v30 = *(void *)EmptyString == 0x6C6169726574614DLL && *(unsigned char *)(EmptyString + 8) == 115;
        if (!v30)
        {
LABEL_32:
          long long v20 = objc_alloc_init(MDLObject);
          objc_msgSend_setHidden_(v20, v31, 0);
          float32x4_t v27 = sub_20B14D97C((_DWORD *)&v161 + 2);
          objc_msgSend_setName_(v20, v32, (uint64_t)v27);
LABEL_33:

LABEL_34:
          if (v20)
          {
            uint64_t v33 = v20;
            *(void *)obj = v33;
            if (SHIBYTE(v156) < 0)
            {
              sub_20B07F994(&obj[8], (void *)v155, *((unint64_t *)&v155 + 1));
            }
            else
            {
              *(_OWORD *)&obj[8] = v155;
              *(void *)&obj[24] = v156;
            }
            if (SHIBYTE(v158) < 0)
            {
              sub_20B07F994(&v139, (void *)__dst, *((unint64_t *)&__dst + 1));
            }
            else
            {
              long long v139 = __dst;
              *(void *)&long long v140 = v158;
            }
            *(void *)&long long v149 = &__dst;
            BOOL v34 = sub_20B14E0E0(v129, (const void **)&__dst, (uint64_t)&unk_20B1E7420, (long long **)&v149);
            objc_storeStrong((id *)v34 + 7, *(id *)obj);
            double v35 = (void **)(v34 + 8);
            if (*((char *)v34 + 87) < 0) {
              operator delete(*v35);
            }
            v34[10] = *(void *)&obj[24];
            *(_OWORD *)double v35 = *(_OWORD *)&obj[8];
            obj[31] = 0;
            obj[8] = 0;
            double v36 = (void **)(v34 + 11);
            if (*((char *)v34 + 111) < 0)
            {
              operator delete(*v36);
              int v37 = obj[31];
              *(_OWORD *)double v36 = v139;
              v34[13] = v140;
              BYTE7(v140) = 0;
              LOBYTE(v139) = 0;
              if (v37 < 0) {
                operator delete(*(void **)&obj[8]);
              }
            }
            else
            {
              *(_OWORD *)double v36 = v139;
              v34[13] = v140;
              BYTE7(v140) = 0;
              LOBYTE(v139) = 0;
            }
            uint64_t v38 = *(void **)obj;
            *(void *)obj = 0;
          }
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetStaticTfType(IsA);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        uint64_t v18 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((v18 & 1) != 0
          || (pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdSkelRoot *)v18),
              pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo(),
              uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA(),
              v19))
        {
          long long v20 = objc_alloc_init(MDLObject);
          objc_msgSend_setHidden_(v20, v21, 0);
          uint64_t v22 = sub_20B14D97C((_DWORD *)&v161 + 2);
          objc_msgSend_setName_(v20, v23, (uint64_t)v22);

          objc_msgSend_frameInterval(v128, v24, v25);
          float32x4_t v27 = sub_20B0D0F70(v26, *(double *)(a2 + 64), (uint64_t)&v161 + 8, *(unsigned __int8 *)(a2 + 35));
          objc_msgSend_setTransform_(v20, v28, (uint64_t)v27);
          goto LABEL_33;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(v19);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        uint64_t v41 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
        if ((v41 & 1) == 0)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v41);
          pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
          uint64_t v42 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
          if ((v42 & 1) == 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdGeomCamera::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v42);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            uint64_t v43 = (pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if (v43)
            {
              int v151 = DWORD2(v161);
              uint64_t v152 = v162;
              if ((void)v162) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v162 + 48), 1uLL, memory_order_relaxed);
              }
              sub_20B0B0824(v126, v132);
              sub_20B0B0870(v127, v133);
              uint64_t v154 = v163;
              if ((v163 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v163 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v154 &= 0xFFFFFFFFFFFFFFF8;
              }
              objc_msgSend_frameInterval(v128, v44, v45);
              sub_20B1BF770(&v151);
            }
            pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(v43);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            uint64_t v46 = (pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if (v46)
            {
              uint64_t v49 = objc_msgSend_bufferAllocator(v128, v47, v48);
              uint64_t v52 = objc_msgSend_resolver(v128, v50, v51);
              objc_msgSend_frameInterval(v128, v53, v54);
              unsigned __int8 v57 = objc_msgSend_vertexDescriptor(v128, v55, v56);
              sub_20B11FE30(v49, a2, v52, (_DWORD *)&v161 + 2, v125, v57);
            }
            pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(v46);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            uint64_t v58 = (pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if (v58)
            {
              memset(obj, 0, 24);
              sub_20B0B03D4((uint64_t)&v161 + 8, &v149);
              uint64_t v59 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v149);
              if (*(char *)(v59 + 23) < 0)
              {
                sub_20B07F994(obj, *(void **)v59, *(void *)(v59 + 8));
              }
              else
              {
                long long v60 = *(_OWORD *)v59;
                *(void *)&obj[16] = *(void *)(v59 + 16);
                *(_OWORD *)obj = v60;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_20B06A424((uint64_t)&v149);
              if (v124 == sub_20B080D50((uint64_t)v129, (const void **)obj))
              {
                objc_msgSend_frameInterval(v128, v74, v75);
                sub_20B10F220((uint64_t)&v161 + 8, *(unsigned __int8 *)(a2 + 35), v76, *(double *)(a2 + 64));
                long long v20 = (MDLObject *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                long long v20 = 0;
              }
              if ((obj[23] & 0x80000000) == 0) {
                goto LABEL_34;
              }
              long long v77 = *(void **)obj;
LABEL_131:
              operator delete(v77);
              goto LABEL_34;
            }
            pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v58);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            uint64_t v61 = (pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *)pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
            if (v61)
            {
              v147[0] = 0;
              v147[1] = 0;
              v148[0] = 0;
              sub_20B0B03D4((uint64_t)&v161 + 8, obj);
              uint64_t v62 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)obj);
              if (*(char *)(v62 + 23) < 0)
              {
                sub_20B07F994(v147, *(void **)v62, *(void *)(v62 + 8));
              }
              else
              {
                long long v63 = *(_OWORD *)v62;
                v148[0] = *(void *)(v62 + 16);
                *(_OWORD *)v147 = v63;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_20B06A424((uint64_t)obj);
              uint64_t v78 = sub_20B080D50((uint64_t)v129, (const void **)v147);
              if (v124 == v78)
              {
                sub_20B10FA04((_DWORD *)&v161 + 2, *(double *)(a2 + 64));
                long long v20 = (MDLObject *)objc_claimAutoreleasedReturnValue();
                if (v20)
                {
                  objc_msgSend_frameInterval(v128, v79, v80);
                  uint64_t v82 = sub_20B0D0F70(v81, *(double *)(a2 + 64), (uint64_t)&v161 + 8, *(unsigned __int8 *)(a2 + 35));
                  objc_msgSend_setTransform_(v20, v83, (uint64_t)v82);

                  uint64_t v84 = v20;
                }
              }
              else
              {
                long long v20 = (MDLObject *)*(id *)(v78 + 56);
              }
              long long v149 = 0u;
              long long v150 = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *((void *)&v150 + 1) = 0;
              *(void *)&long long v149 = MEMORY[0x263F90768] + 16;
              long long v145 = 0u;
              long long v146 = 0u;
              pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource((uint64_t *)&v145, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v149);
              if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v145))
              {
                __p[0] = 0;
                __p[1] = 0;
                *(void *)&long long v144 = 0;
                sub_20B0B03D4((uint64_t)&v145, obj);
                uint64_t v85 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)obj);
                if (*(char *)(v85 + 23) < 0)
                {
                  sub_20B07F994(__p, *(void **)v85, *(void *)(v85 + 8));
                }
                else
                {
                  long long v86 = *(_OWORD *)v85;
                  *(void *)&long long v144 = *(void *)(v85 + 16);
                  *(_OWORD *)va_list __p = v86;
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                sub_20B06A424((uint64_t)obj);
                uint64_t v87 = sub_20B080D50((uint64_t)v129, (const void **)__p);
                if (v124 == v87)
                {
                  objc_msgSend_frameInterval(v128, v88, v89);
                  std::string v95 = sub_20B10F220((uint64_t)&v145, *(unsigned __int8 *)(a2 + 35), v94, *(double *)(a2 + 64));
                  id v93 = v95;
                  if (v95)
                  {
                    id v96 = v95;
                    *(void *)obj = v96;
                    sub_20B07F8E0(&obj[8], "");
                    if (SBYTE7(v144) < 0)
                    {
                      sub_20B07F994(&v139, __p[0], (unint64_t)__p[1]);
                    }
                    else
                    {
                      long long v139 = *(_OWORD *)__p;
                      *(void *)&long long v140 = v144;
                    }
                    v141[0] = __p;
                    v108 = sub_20B14E0E0(v129, (const void **)__p, (uint64_t)&unk_20B1E7420, (long long **)v141);
                    sub_20B14DB10((uint64_t)(v108 + 7), (uint64_t)obj);
                    sub_20B14DBA4((uint64_t)obj);
                    id v109 = v96;
                  }
                }
                else
                {
                  id v93 = *(id *)(v87 + 56);
                }
                sub_20B10FF0C((uint64_t)&v161 + 8, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)&v149, v20, 0, v93, v90, v91, v92, v115, v116, v117, (uint64_t)v118, (uint64_t)v119, (uint64_t)v120, (uint64_t)v121, (uint64_t)v122, (uint64_t)v123, v124, v125,
                  (uint64_t)v126,
                  (uint64_t)v127,
                  (uint64_t)v128,
                  (uint64_t)v129,
                  (uint64_t)v130,
                  (uint64_t)v131,
                  (uint64_t)v132,
                  (uint64_t)v133,
                  v134,
                  (uint64_t)v135,
                  (uint64_t)v136,
                  v137[0],
                  v137[1],
                  v137[2],
                  v137[3],
                  *(uint64_t *)obj,
                  *(uint64_t *)&obj[8],
                  *(long long *)&obj[16],
                  v139,
                  v140,
                  *(long long *)v141,
                  v142,
                  *(long long *)__p,
                  v144,
                  v145,
                  v146,
                  *(long long *)v147,
                  v148[0],
                  v148[1],
                  v149,
                  *((uint64_t *)&v149 + 1));
                if (SBYTE7(v144) < 0) {
                  operator delete(__p[0]);
                }
              }
              if ((BYTE8(v146) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v146 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_20B06A424((uint64_t)v122);
              if (*((void *)&v145 + 1)) {
                sub_20B06A5E0(*((uint64_t *)&v145 + 1));
              }
              MEMORY[0x210530D80](&v149);
              if ((SHIBYTE(v148[0]) & 0x80000000) == 0) {
                goto LABEL_34;
              }
              long long v77 = v147[0];
              goto LABEL_131;
            }
            pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetStaticTfType(v61);
            pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
            if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()) {
              goto LABEL_48;
            }
            uint64_t v65 = v162;
            if (!(void)v162 || (*(unsigned char *)(v162 + 57) & 8) != 0) {
              pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v162, v64);
            }
            float v66 = *(uint64_t **)(v65 + 24);
            MEMORY[0x2105310B0](obj, "BlendShape");
            uint64_t v67 = *v66;
            float v68 = (atomic_uint *)(*(void *)obj & 0xFFFFFFFFFFFFFFF8);
            if ((obj[0] & 7) != 0) {
              atomic_fetch_add_explicit(v68, 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v67 & 0xFFFFFFFFFFFFFFF8) == v68) {
              goto LABEL_48;
            }
            if (sub_20B14DBFC((pxrInternal__aapl__pxrReserved__::UsdGeomCurves *)((char *)&v161 + 8)))
            {
              uint64_t v71 = objc_msgSend_bufferAllocator(v128, v69, v70);
              sub_20B0D2590((uint64_t)v137, (uint64_t)&v161 + 8);
              objc_msgSend_frameInterval(v128, v72, v73);
              sub_20B069248(v71);
            }
            if ((sub_20B14DC3C((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)((char *)&v161 + 8)) & 1) != 0
              || (sub_20B14DC7C((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)((char *)&v161 + 8)) & 1) != 0
              || (sub_20B14DCBC((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)((char *)&v161 + 8)) & 1) != 0
              || (sub_20B14DCFC((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)((char *)&v161 + 8)) & 1) != 0
              || sub_20B14DD3C((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)((char *)&v161 + 8)))
            {
              long long v99 = objc_msgSend_bufferAllocator(v128, v97, v98);
              long long v102 = objc_msgSend_resolver(v128, v100, v101);
              objc_msgSend_frameInterval(v128, v103, v104);
              v107 = objc_msgSend_vertexDescriptor(v128, v105, v106);
              sub_20B120894(v99, a2, v102, (_DWORD *)&v161 + 2, v125, v107);
            }
            if (sub_20B14DD7C((pxrInternal__aapl__pxrReserved__::UsdGeomPoints *)((char *)&v161 + 8))) {
              goto LABEL_48;
            }
            if (sub_20B14DDBC((pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *)((char *)&v161 + 8)))
            {
              if (*(unsigned char *)(a2 + 25))
              {
                v112 = objc_msgSend_bufferAllocator(v128, v110, v111);
                objc_msgSend_frameInterval(v128, v113, v114);
                sub_20B110738(v112);
              }
              goto LABEL_48;
            }
            if ((sub_20B14DDFC((pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)((char *)&v161 + 8)) & 1) == 0) {
              goto LABEL_32;
            }
          }
        }
      }
LABEL_48:
      if (SHIBYTE(v156) < 0) {
        operator delete((void *)v155);
      }
      if (SHIBYTE(v158) < 0) {
        operator delete((void *)__dst);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v159);
      if ((v163 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v163 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)v132);
      if ((void)v162) {
        sub_20B06A5E0(v162);
      }
      if (SBYTE7(v161) < 0) {
        operator delete((void *)v160);
      }
      double v39 = (long long *)*((void *)v7 + 1);
      if (v39)
      {
        do
        {
          int v40 = v39;
          double v39 = *(long long **)v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          int v40 = (long long *)*((void *)v7 + 2);
          BOOL v30 = *(void *)v40 == (void)v7;
          unint64_t v7 = v40;
        }
        while (!v30);
      }
      unint64_t v7 = v40;
      long long v8 = 0uLL;
    }
    while (v40 != (long long *)v134);
  }
}

void sub_20B14D2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (*(char *)(v24 - 217) < 0) {
    operator delete(*(void **)(v24 - 240));
  }
  if (*(char *)(v24 - 185) < 0) {
    operator delete(*(void **)(v24 - 208));
  }
  sub_20B0B04EC(v24 - 184);
  sub_20B14DE3C(v24 - 176);

  _Unwind_Resume(a1);
}

uint64_t sub_20B14D83C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_20B14D8A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  uint64_t v7 = 0;
  long long v8 = (atomic_ullong *)v4;
  sub_20B0B0824(&v7, (_DWORD *)(a1 + 16));
  sub_20B0B0870((_DWORD *)&v7 + 1, (_DWORD *)(a1 + 20));
  sub_20B14DF5C((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v8, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 6, 1uLL, memory_order_relaxed);
  }
  sub_20B0D29D0(a2, (uint64_t *)&v6, &v7);
  if (v6) {
    sub_20B06A5E0((uint64_t)v6);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_20B06A424((uint64_t)&v7);
}

void sub_20B14D954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_20B06A5E0(a3);
  }
  sub_20B0B04EC((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_20B14D97C(_DWORD *a1)
{
  memset(&__str, 0, sizeof(__str));
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20B06A3E4(a1);
  if ((*(void *)v1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*(void *)v1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v1);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    sub_20B07F994(&__str, *(void **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v3 = *(_OWORD *)EmptyString;
    __str.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v3;
  }
  std::string::basic_string(&v8, &__str, 0, 8uLL, (std::allocator<char> *)&v10);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v8.__r_.__value_.__l.__size_ != 8)
    {
      operator delete(v8.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
    uint64_t v5 = *(void *)v8.__r_.__value_.__l.__data_;
    operator delete(v8.__r_.__value_.__l.__data_);
    if (v5 != 0x72657473614D5F5FLL) {
      goto LABEL_17;
    }
  }
  else if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) != 8 || v8.__r_.__value_.__r.__words[0] != 0x72657473614D5F5FLL)
  {
    goto LABEL_17;
  }
  std::operator+<char>();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v8;
LABEL_17:
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    objc_msgSend_stringWithCString_encoding_(NSString, v4, (uint64_t)&__str, 4);
  }
  else {
  uint64_t v6 = objc_msgSend_stringWithCString_encoding_(NSString, v4, (uint64_t)__str.__r_.__value_.__l.__data_, 4);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

  return v6;
}

void sub_20B14DAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B14DB10(uint64_t a1, uint64_t a2)
{
  int v4 = (long long *)(a2 + 8);
  objc_storeStrong((id *)a1, *(id *)a2);
  uint64_t v5 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v5);
  }
  long long v6 = *v4;
  *(void *)(a1 + 24) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  return a1;
}

uint64_t sub_20B14DBA4(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  id v2 = *(id *)a1;
  *(void *)a1 = 0;

  return a1;
}

uint64_t sub_20B14DBFC(pxrInternal__aapl__pxrReserved__::UsdGeomCurves *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCurves::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DC3C(pxrInternal__aapl__pxrReserved__::UsdGeomCube *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DC7C(pxrInternal__aapl__pxrReserved__::UsdGeomCone *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DCBC(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DCFC(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DD3C(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DD7C(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DDBC(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DDFC(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t sub_20B14DE3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_20B14DEA8(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a2 + 6);
  uint64_t v5 = *((void *)a2 + 4);
  __dst[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  sub_20B0B0824((_DWORD *)__dst + 10, (_DWORD *)a2 + 10);
  sub_20B0B0870((_DWORD *)__dst + 11, (_DWORD *)a2 + 11);
  uint64_t v6 = *((void *)a2 + 6);
  __dst[6] = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    __dst[6] &= 0xFFFFFFFFFFFFFFF8;
  }
  return __dst;
}

pxrInternal__aapl__pxrReserved__::Usd_PrimData *sub_20B14DF5C(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(*a1);
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v8, a2);
    sub_20B0D28C0((uint64_t)a2, (int *)v8);
    sub_20B0D2918((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20B06A424((uint64_t)v8);
    uint64_t v5 = *a1;
    if (*a1)
    {
      if ((*((unsigned char *)v5 + 57) & 0x10) != 0)
      {
        uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v5 + 16));
        if (result)
        {
          uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, a2);
          *a1 = result;
          if (!result)
          {
            v8[0] = (uint64_t)"usd/primData.h";
            v8[1] = (uint64_t)"Usd_MoveToParent";
            v8[2] = 527;
            v8[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::Usd_MoveToParent(PrimDataPtr &, SdfPath &) [PrimData"
                             "Ptr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
            char v9 = 0;
            uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v7, Text);
            uint64_t result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
            if (!result) {
              return result;
            }
            uint64_t result = *a1;
          }
          if (*((void *)result + 2) == *(void *)a2)
          {
            v8[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            sub_20B0D28C0((uint64_t)a2, (int *)v8);
            sub_20B0D2918((uint64_t)a2 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            return (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_20B06A424((uint64_t)v8);
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_20B14E0E0(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_20B07CD4C((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_20B14E198((uint64_t)a1, a4, v10);
    sub_20B05FAEC(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_20B14E244((uint64_t)v10, 0);
  }
  return v7;
}

double sub_20B14E198@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x70uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_20B07F994(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = v9;
  }
  *((void *)v6 + 13) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B14E22C(_Unwind_Exception *a1)
{
  sub_20B14E244(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B14E244(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_20B14E29C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_20B14E29C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *sub_20B14E318(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20B14E370(a1, *a2, a2 + 1);
  return a1;
}

void sub_20B14E358(_Unwind_Exception *a1)
{
  sub_20B14E5EC(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20B14E370(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = sub_20B14E3FC(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20B14E3FC(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v11 = 0;
  long long v12 = 0;
  uint64_t v6 = sub_20B139694(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_20B14E4A0((uint64_t)a1, a4, v10);
    sub_20B05FAEC(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_20B14E514((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_20B14E4A0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x58uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  double result = sub_20B14DEA8(v6 + 4, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B14E4FC(_Unwind_Exception *a1)
{
  sub_20B14E514(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B14E514(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_20B14E56C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_20B14E56C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v4 = *(void **)a1;
    operator delete(v4);
  }
}

void sub_20B14E5EC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20B14E5EC(a1, *a2);
    sub_20B14E5EC(a1, a2[1]);
    sub_20B14E56C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

char *sub_20B14E648(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((void *)__dst + 3) = *((id *)a2 + 3);
  if (*((char *)a2 + 55) < 0)
  {
    sub_20B07F994(__dst + 32, *((void **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = a2[2];
    *((void *)__dst + 6) = *((void *)a2 + 6);
    *((_OWORD *)__dst + 2) = v5;
  }
  uint64_t v6 = __dst + 56;
  if (*((char *)a2 + 79) < 0)
  {
    sub_20B07F994(v6, *((void **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 56);
    *((void *)__dst + 9) = *((void *)a2 + 9);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_20B14E708(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  long long v4 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;

  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void sub_20B14E750(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20B14E750(a1, *a2);
    sub_20B14E750(a1, a2[1]);
    sub_20B14E29C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20B14E7AC(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20B14E814(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x210532650](v1, 0xC400A2AC0F1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B14E83C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B14E874(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x210532650);
  }
  return result;
}

uint64_t sub_20B14E890(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4F4C0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t *sub_20B14E8D4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_20B07CD4C((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_20B14E98C((uint64_t)a1, a4, v10);
    sub_20B05FAEC(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_20B14E514((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_20B14E98C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x58uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_20B14EA00(v6 + 4, *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B14E9E8(_Unwind_Exception *a1)
{
  sub_20B14E514(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_20B14EA00(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B07F994(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *((_DWORD *)__dst + 6) = 1;
  __dst[4] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  __dst[6] = 0;
  return __dst;
}

atomic_uint **sub_20B14EA78(atomic_uint **a1)
{
  return a1;
}

void sub_20B14EAA8(uint64_t a1, atomic_uint *a2)
{
  if (a2)
  {
    atomic_uint v3 = a2[2];
    if (v3 < 0)
    {
      if (v3 == -2
        || (atomic_uint v5 = a2[2],
            atomic_compare_exchange_strong_explicit(a2 + 2, (unsigned int *)&v5, v3 + 1, memory_order_release, memory_order_relaxed), v5 != v3))
      {
        if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0) {
          return;
        }
      }
      else if (v3 != -1)
      {
        return;
      }
    }
    else if (atomic_fetch_add_explicit(a2 + 2, 0xFFFFFFFF, memory_order_release) != 1)
    {
      return;
    }
    long long v4 = *(void (**)(atomic_uint *))(*(void *)a2 + 8);
    v4(a2);
  }
}

uint64_t *sub_20B14EB68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20B14EC50((unint64_t *)(v3 + 16), &v7);
    long long v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    unint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      unint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_20B14EC38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_20B1C04C4(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_20B14EC50@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = atomic_load(a1);
  if (!result) {
    operator new();
  }
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_20B14ED10(uint64_t a1)
{
  sub_20B14ED4C(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_20B14ED4C(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20B14ED98(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    int v2 = *(_DWORD *)(result + 8);
    if (v2 < 0)
    {
      if (v2 == -1) {
        return MEMORY[0x270FA39F8]();
      }
      int v3 = *(_DWORD *)(result + 8);
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 8), (unsigned int *)&v3, v2 - 1, memory_order_relaxed, memory_order_relaxed);
      if (v3 != v2) {
        return MEMORY[0x270FA39F8]();
      }
    }
    else
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
    }
  }
  return result;
}

char *sub_20B14EDE4(char **a1, uint64_t *a2)
{
  int v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v24 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_20B0602EC(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v21 = 0;
  v22.i64[0] = 0;
  uint64_t v11 = &v10[8 * v4];
  long long v12 = &v10[8 * v9];
  uint64_t v23 = v12;
  uint64_t v13 = *a2;
  *(void *)uint64_t v11 = *a2;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v14 = v11 + 8;
  v22.i64[1] = (uint64_t)(v11 + 8);
  id v16 = *a1;
  uint64_t v15 = a1[1];
  if (v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64((unint64_t)v15);
  }
  else
  {
    do
    {
      uint64_t v17 = *((void *)v15 - 1);
      v15 -= 8;
      *((void *)v11 - 1) = v17;
      v11 -= 8;
      *(void *)uint64_t v15 = 0;
    }
    while (v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
    unint64_t v14 = (char *)v22.i64[1];
    long long v12 = v23;
  }
  *a1 = v11;
  a1[1] = v14;
  int64x2_t v22 = v18;
  uint64_t v19 = a1[2];
  a1[2] = v12;
  uint64_t v23 = v19;
  uint64_t v21 = v18.i64[0];
  sub_20B14EF0C((uint64_t)&v21);
  return v14;
}

uint64_t sub_20B14EF0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    v3 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      uint64_t v3 = *(void *)(a1 + 16);
    }
  }
  uint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

void *sub_20B14EF70(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_20B0602A8(result, a4);
    return (void *)sub_20B14EFE8(v6, a2, a3);
  }
  return result;
}

void sub_20B14EFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_20B14EFE8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  for (i = *(uint64_t **)(result + 8); a2 != a3; ++i)
  {
    uint64_t v4 = *a2;
    uint64_t *i = *a2;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *i &= 0xFFFFFFFFFFFFFFF8;
    }
    ++a2;
  }
  *(void *)(result + 8) = i;
  return result;
}

void *sub_20B14F038(void *result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 112))
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    uint64_t v6 = a3 + 48;
    do
    {
      if (*(void *)(v6 + v5)) {
        uint64_t result = (void *)sub_20B14F038(v4, a2);
      }
      v5 += 8;
    }
    while (v5 != 64);
  }
  else
  {
    unint64_t v7 = *(unsigned int *)(a3 + 196);
    v8[0] = *(void *)(a3 + 8);
    v8[1] = v7;
    return sub_20B1599B0(a2, v8, (uint64_t)v8);
  }
  return result;
}

void sub_20B14F668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B14FA08(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v3, 0x1030C40CB177E38);

  _Unwind_Resume(a1);
}

void sub_20B14FE68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B150670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B150680(int32x4_t *a1, int32x4_t a2)
{
  int16x4_t v2 = vmovn_s32(vcgtq_s32(*a1, a2));
  if (v2.i8[0] & 1) != 0 || (int32x4_t v3 = a1[1], v4 = vmovn_s32(vcgtq_s32(a2, v3)), (v4.i8[0]))
  {
LABEL_3:
    __int8 v5 = 0;
    return v5 & 1;
  }
  __int8 v5 = 0;
  if ((v2.i8[2] & 1) == 0 && (v4.i8[2] & 1) == 0)
  {
    __int8 v5 = 0;
    if ((v2.i8[4] & 1) == 0 && (v4.i8[4] & 1) == 0)
    {
      if ((v2.i8[6] & 1) == 0)
      {
        __int8 v5 = vmovn_s32(vcgeq_s32(v3, a2)).i8[6];
        return v5 & 1;
      }
      goto LABEL_3;
    }
  }
  return v5 & 1;
}

void sub_20B150940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B150CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B150E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B05F1D0((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_20B150F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B05F1D0((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_20B1510B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B05F1D0((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_20B151298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B1513A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1514A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15158C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B15173C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1520D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v19 = *(void **)(v17 - 184);
  if (v19)
  {
    *(void *)(v17 - 176) = v19;
    operator delete(v19);
  }
  long long v20 = *(void **)(v17 - 160);
  if (v20)
  {
    *(void *)(v17 - 152) = v20;
    operator delete(v20);
  }
  uint64_t v21 = *(void **)(v17 - 136);
  if (v21)
  {
    *(void *)(v17 - 128) = v21;
    operator delete(v21);
  }
  int64x2_t v22 = *(void **)(v17 - 112);
  if (v22)
  {
    *(void *)(v17 - 104) = v22;
    operator delete(v22);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_20B152200(int a1, int a2, char a3, int a4, char **a5, uint64_t a6, char **a7, uint64_t a8, __n128 a9, __n128 a10)
{
  if (!a6) {
    return 0;
  }
  uint64_t v12 = a6;
  uint64_t v13 = a5;
  char v14 = a3;
  int v15 = a2;
  __n128 v1360 = a10;
  if ((a3 & 0x20) != 0)
  {
    uint64_t v19 = (char **)(a6 + 16);
    int64x2_t v18 = *(char **)(a6 + 16);
    long long v20 = *(unsigned __int32 **)(a6 + 8);
    if (v20 >= (unsigned __int32 *)v18)
    {
      uint64_t v23 = *(unsigned __int32 **)a6;
      uint64_t v24 = ((uint64_t)v20 - *(void *)a6) >> 2;
      unint64_t v25 = v24 + 1;
      __n128 v21 = a9;
      if ((unint64_t)(v24 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v26 = v18 - (char *)v23;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        uint64_t v28 = (char *)sub_20B05D1AC(a6 + 16, v27);
        __n128 v21 = a9;
        int v29 = v28;
        uint64_t v23 = *(unsigned __int32 **)v12;
        long long v20 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        int v29 = 0;
      }
      BOOL v30 = &v29[4 * v24];
      int64x2_t v18 = &v29[4 * v27];
      *(_DWORD *)BOOL v30 = v21.n128_u32[0];
      int64x2_t v22 = (unsigned __int32 *)(v30 + 4);
      while (v20 != v23)
      {
        int v31 = *--v20;
        *((_DWORD *)v30 - 1) = v31;
        v30 -= 4;
      }
      *(void *)uint64_t v12 = v30;
      *(void *)(v12 + 8) = v22;
      *(void *)(v12 + 16) = v18;
      if (v23)
      {
        operator delete(v23);
        __n128 v21 = a9;
        int64x2_t v18 = *v19;
      }
    }
    else
    {
      __n128 v21 = a9;
      unsigned __int32 *v20 = a9.n128_u32[0];
      int64x2_t v22 = v20 + 1;
    }
    *(void *)(v12 + 8) = v22;
    unsigned __int32 v32 = v21.n128_u32[1];
    if (v22 >= (unsigned __int32 *)v18)
    {
      BOOL v34 = *(unsigned __int32 **)v12;
      uint64_t v35 = ((uint64_t)v22 - *(void *)v12) >> 2;
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v37 = v18 - (char *)v34;
      if (v37 >> 1 > v36) {
        unint64_t v36 = v37 >> 1;
      }
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        double v39 = (char *)sub_20B05D1AC(v12 + 16, v38);
        BOOL v34 = *(unsigned __int32 **)v12;
        int64x2_t v22 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        double v39 = 0;
      }
      int v40 = (unsigned __int32 *)&v39[4 * v35];
      int64x2_t v18 = &v39[4 * v38];
      *int v40 = v32;
      uint64_t v33 = v40 + 1;
      while (v22 != v34)
      {
        unsigned __int32 v41 = *--v22;
        *--int v40 = v41;
      }
      *(void *)uint64_t v12 = v40;
      *(void *)(v12 + 8) = v33;
      *(void *)(v12 + 16) = v18;
      if (v34)
      {
        operator delete(v34);
        int64x2_t v18 = *v19;
      }
      __n128 v21 = a9;
    }
    else
    {
      *int64x2_t v22 = v21.n128_u32[1];
      uint64_t v33 = v22 + 1;
    }
    *(void *)(v12 + 8) = v33;
    unsigned __int32 v42 = v21.n128_u32[2];
    if (v33 >= (unsigned __int32 *)v18)
    {
      double v44 = *(unsigned __int32 **)v12;
      uint64_t v45 = ((uint64_t)v33 - *(void *)v12) >> 2;
      unint64_t v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v47 = v18 - (char *)v44;
      if (v47 >> 1 > v46) {
        unint64_t v46 = v47 >> 1;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      if (v48)
      {
        uint64_t v49 = (char *)sub_20B05D1AC(v12 + 16, v48);
        double v44 = *(unsigned __int32 **)v12;
        uint64_t v33 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        uint64_t v49 = 0;
      }
      uint64_t v50 = (unsigned __int32 *)&v49[4 * v45];
      int64x2_t v18 = &v49[4 * v48];
      unsigned __int32 *v50 = v42;
      uint64_t v43 = v50 + 1;
      while (v33 != v44)
      {
        unsigned __int32 v51 = *--v33;
        *--uint64_t v50 = v51;
      }
      *(void *)uint64_t v12 = v50;
      *(void *)(v12 + 8) = v43;
      *(void *)(v12 + 16) = v18;
      if (v44)
      {
        operator delete(v44);
        int64x2_t v18 = *v19;
      }
      v21.n128_u32[0] = a9.n128_u32[0];
    }
    else
    {
      *uint64_t v33 = v21.n128_u32[2];
      uint64_t v43 = v33 + 1;
    }
    *(void *)(v12 + 8) = v43;
    if (v43 >= (unsigned __int32 *)v18)
    {
      uint64_t v53 = *(unsigned __int32 **)v12;
      uint64_t v54 = ((uint64_t)v43 - *(void *)v12) >> 2;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v56 = v18 - (char *)v53;
      if (v56 >> 1 > v55) {
        unint64_t v55 = v56 >> 1;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57)
      {
        uint64_t v58 = (char *)sub_20B05D1AC(v12 + 16, v57);
        uint64_t v53 = *(unsigned __int32 **)v12;
        uint64_t v43 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        uint64_t v58 = 0;
      }
      uint64_t v59 = &v58[4 * v54];
      int64x2_t v18 = &v58[4 * v57];
      *(_DWORD *)uint64_t v59 = v1360.n128_u32[0];
      uint64_t v52 = (unsigned __int32 *)(v59 + 4);
      while (v43 != v53)
      {
        int v60 = *--v43;
        *((_DWORD *)v59 - 1) = v60;
        v59 -= 4;
      }
      *(void *)uint64_t v12 = v59;
      *(void *)(v12 + 8) = v52;
      *(void *)(v12 + 16) = v18;
      if (v53)
      {
        operator delete(v53);
        int64x2_t v18 = *v19;
      }
      v21.n128_u32[0] = a9.n128_u32[0];
    }
    else
    {
      *uint64_t v43 = v1360.n128_u32[0];
      uint64_t v52 = v43 + 1;
    }
    *(void *)(v12 + 8) = v52;
    if (v52 >= (unsigned __int32 *)v18)
    {
      uint64_t v62 = *(unsigned __int32 **)v12;
      uint64_t v63 = ((uint64_t)v52 - *(void *)v12) >> 2;
      unint64_t v64 = v63 + 1;
      if ((unint64_t)(v63 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v65 = v18 - (char *)v62;
      if (v65 >> 1 > v64) {
        unint64_t v64 = v65 >> 1;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v64;
      }
      if (v66)
      {
        uint64_t v67 = (char *)sub_20B05D1AC(v12 + 16, v66);
        uint64_t v62 = *(unsigned __int32 **)v12;
        uint64_t v52 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        uint64_t v67 = 0;
      }
      float v68 = (unsigned __int32 *)&v67[4 * v63];
      int64x2_t v18 = &v67[4 * v66];
      *float v68 = v32;
      uint64_t v61 = v68 + 1;
      while (v52 != v62)
      {
        unsigned __int32 v69 = *--v52;
        *--float v68 = v69;
      }
      *(void *)uint64_t v12 = v68;
      *(void *)(v12 + 8) = v61;
      *(void *)(v12 + 16) = v18;
      if (v62)
      {
        operator delete(v62);
        int64x2_t v18 = *v19;
      }
      v21.n128_u32[0] = a9.n128_u32[0];
    }
    else
    {
      *uint64_t v52 = v32;
      uint64_t v61 = v52 + 1;
    }
    *(void *)(v12 + 8) = v61;
    if (v61 >= (unsigned __int32 *)v18)
    {
      uint64_t v71 = *(unsigned __int32 **)v12;
      uint64_t v72 = ((uint64_t)v61 - *(void *)v12) >> 2;
      unint64_t v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v74 = v18 - (char *)v71;
      if (v74 >> 1 > v73) {
        unint64_t v73 = v74 >> 1;
      }
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v75 = v73;
      }
      if (v75)
      {
        double v76 = (char *)sub_20B05D1AC(v12 + 16, v75);
        uint64_t v71 = *(unsigned __int32 **)v12;
        uint64_t v61 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        double v76 = 0;
      }
      long long v77 = (unsigned __int32 *)&v76[4 * v72];
      int64x2_t v18 = &v76[4 * v75];
      *long long v77 = v42;
      uint64_t v70 = v77 + 1;
      while (v61 != v71)
      {
        unsigned __int32 v78 = *--v61;
        *--long long v77 = v78;
      }
      *(void *)uint64_t v12 = v77;
      *(void *)(v12 + 8) = v70;
      *(void *)(v12 + 16) = v18;
      if (v71)
      {
        operator delete(v71);
        int64x2_t v18 = *v19;
      }
      v21.n128_u32[0] = a9.n128_u32[0];
    }
    else
    {
      *uint64_t v61 = v42;
      uint64_t v70 = v61 + 1;
    }
    *(void *)(v12 + 8) = v70;
    if (v70 >= (unsigned __int32 *)v18)
    {
      uint64_t v80 = *(unsigned __int32 **)v12;
      uint64_t v81 = ((uint64_t)v70 - *(void *)v12) >> 2;
      unint64_t v82 = v81 + 1;
      if ((unint64_t)(v81 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v83 = v18 - (char *)v80;
      if (v83 >> 1 > v82) {
        unint64_t v82 = v83 >> 1;
      }
      if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v84 = v82;
      }
      if (v84)
      {
        uint64_t v85 = (char *)sub_20B05D1AC(v12 + 16, v84);
        v21.n128_u32[0] = a9.n128_u32[0];
        long long v86 = v85;
        uint64_t v80 = *(unsigned __int32 **)v12;
        uint64_t v70 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        long long v86 = 0;
      }
      uint64_t v87 = &v86[4 * v81];
      int64x2_t v18 = &v86[4 * v84];
      *(_DWORD *)uint64_t v87 = v21.n128_u32[0];
      float v79 = (unsigned __int32 *)(v87 + 4);
      while (v70 != v80)
      {
        int v88 = *--v70;
        *((_DWORD *)v87 - 1) = v88;
        v87 -= 4;
      }
      *(void *)uint64_t v12 = v87;
      *(void *)(v12 + 8) = v79;
      *(void *)(v12 + 16) = v18;
      if (v80)
      {
        operator delete(v80);
        int64x2_t v18 = *v19;
      }
    }
    else
    {
      unsigned __int32 *v70 = v21.n128_u32[0];
      float v79 = v70 + 1;
    }
    *(void *)(v12 + 8) = v79;
    if (v79 >= (unsigned __int32 *)v18)
    {
      uint64_t v90 = *(unsigned __int32 **)v12;
      uint64_t v91 = ((uint64_t)v79 - *(void *)v12) >> 2;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v93 = v18 - (char *)v90;
      if (v93 >> 1 > v92) {
        unint64_t v92 = v93 >> 1;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        std::string v95 = (char *)sub_20B05D1AC(v12 + 16, v94);
        uint64_t v90 = *(unsigned __int32 **)v12;
        float v79 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        std::string v95 = 0;
      }
      id v96 = &v95[4 * v91];
      int64x2_t v18 = &v95[4 * v94];
      *(_DWORD *)id v96 = v1360.n128_u32[1];
      uint64_t v89 = (unsigned __int32 *)(v96 + 4);
      while (v79 != v90)
      {
        int v97 = *--v79;
        *((_DWORD *)v96 - 1) = v97;
        v96 -= 4;
      }
      *(void *)uint64_t v12 = v96;
      *(void *)(v12 + 8) = v89;
      *(void *)(v12 + 16) = v18;
      if (v90)
      {
        operator delete(v90);
        int64x2_t v18 = *v19;
      }
    }
    else
    {
      *float v79 = v1360.n128_u32[1];
      uint64_t v89 = v79 + 1;
    }
    *(void *)(v12 + 8) = v89;
    if (v89 >= (unsigned __int32 *)v18)
    {
      long long v99 = *(unsigned __int32 **)v12;
      uint64_t v100 = ((uint64_t)v89 - *(void *)v12) >> 2;
      unint64_t v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v102 = v18 - (char *)v99;
      if (v102 >> 1 > v101) {
        unint64_t v101 = v102 >> 1;
      }
      if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v103 = v101;
      }
      if (v103)
      {
        uint64_t v104 = (char *)sub_20B05D1AC(v12 + 16, v103);
        long long v99 = *(unsigned __int32 **)v12;
        uint64_t v89 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        uint64_t v104 = 0;
      }
      v105 = (unsigned __int32 *)&v104[4 * v100];
      int64x2_t v18 = &v104[4 * v103];
      unsigned __int32 *v105 = v42;
      uint64_t v98 = v105 + 1;
      while (v89 != v99)
      {
        unsigned __int32 v106 = *--v89;
        *--v105 = v106;
      }
      *(void *)uint64_t v12 = v105;
      *(void *)(v12 + 8) = v98;
      *(void *)(v12 + 16) = v18;
      if (v99)
      {
        operator delete(v99);
        int64x2_t v18 = *v19;
      }
    }
    else
    {
      *uint64_t v89 = v42;
      uint64_t v98 = v89 + 1;
    }
    *(void *)(v12 + 8) = v98;
    if (v98 >= (unsigned __int32 *)v18)
    {
      v108 = *(unsigned __int32 **)v12;
      uint64_t v109 = ((uint64_t)v98 - *(void *)v12) >> 2;
      unint64_t v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v111 = v18 - (char *)v108;
      if (v111 >> 1 > v110) {
        unint64_t v110 = v111 >> 1;
      }
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v112 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v112 = v110;
      }
      if (v112)
      {
        v113 = (char *)sub_20B05D1AC(v12 + 16, v112);
        v108 = *(unsigned __int32 **)v12;
        uint64_t v98 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v113 = 0;
      }
      uint64_t v114 = &v113[4 * v109];
      int64x2_t v18 = &v113[4 * v112];
      *(_DWORD *)uint64_t v114 = v1360.n128_u32[0];
      v107 = (unsigned __int32 *)(v114 + 4);
      while (v98 != v108)
      {
        int v115 = *--v98;
        *((_DWORD *)v114 - 1) = v115;
        v114 -= 4;
      }
      *(void *)uint64_t v12 = v114;
      *(void *)(v12 + 8) = v107;
      *(void *)(v12 + 16) = v18;
      if (v108)
      {
        operator delete(v108);
        int64x2_t v18 = *v19;
      }
    }
    else
    {
      *uint64_t v98 = v1360.n128_u32[0];
      v107 = v98 + 1;
    }
    *(void *)(v12 + 8) = v107;
    if (v107 >= (unsigned __int32 *)v18)
    {
      uint64_t v117 = *(unsigned __int32 **)v12;
      uint64_t v118 = ((uint64_t)v107 - *(void *)v12) >> 2;
      unint64_t v119 = v118 + 1;
      if ((unint64_t)(v118 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v120 = v18 - (char *)v117;
      if (v120 >> 1 > v119) {
        unint64_t v119 = v120 >> 1;
      }
      if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v121 = v119;
      }
      if (v121)
      {
        v122 = (char *)sub_20B05D1AC(v12 + 16, v121);
        uint64_t v117 = *(unsigned __int32 **)v12;
        v107 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v122 = 0;
      }
      v123 = &v122[4 * v118];
      int64x2_t v18 = &v122[4 * v121];
      *(_DWORD *)v123 = v1360.n128_u32[1];
      uint64_t v116 = (unsigned __int32 *)(v123 + 4);
      while (v107 != v117)
      {
        int v124 = *--v107;
        *((_DWORD *)v123 - 1) = v124;
        v123 -= 4;
      }
      *(void *)uint64_t v12 = v123;
      *(void *)(v12 + 8) = v116;
      *(void *)(v12 + 16) = v18;
      if (v117)
      {
        operator delete(v117);
        int64x2_t v18 = *v19;
      }
    }
    else
    {
      unsigned __int32 *v107 = v1360.n128_u32[1];
      uint64_t v116 = v107 + 1;
    }
    *(void *)(v12 + 8) = v116;
    if (v116 >= (unsigned __int32 *)v18)
    {
      v126 = *(unsigned __int32 **)v12;
      uint64_t v127 = ((uint64_t)v116 - *(void *)v12) >> 2;
      unint64_t v128 = v127 + 1;
      if ((unint64_t)(v127 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v129 = v18 - (char *)v126;
      if (v129 >> 1 > v128) {
        unint64_t v128 = v129 >> 1;
      }
      if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v130 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v130 = v128;
      }
      if (v130)
      {
        v131 = (char *)sub_20B05D1AC(v12 + 16, v130);
        v126 = *(unsigned __int32 **)v12;
        uint64_t v116 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v131 = 0;
      }
      v132 = (unsigned __int32 *)&v131[4 * v127];
      v133 = &v131[4 * v130];
      unsigned __int32 *v132 = v42;
      uint64_t v125 = v132 + 1;
      while (v116 != v126)
      {
        unsigned __int32 v134 = *--v116;
        *--v132 = v134;
      }
      *(void *)uint64_t v12 = v132;
      *(void *)(v12 + 8) = v125;
      *(void *)(v12 + 16) = v133;
      if (v126) {
        operator delete(v126);
      }
    }
    else
    {
      *uint64_t v116 = v42;
      uint64_t v125 = v116 + 1;
    }
    a10 = v1360;
    *(void *)(v12 + 8) = v125;
    if (a8 && a1)
    {
      int v135 = 0;
      v136 = (void *)(a8 + 16);
      v137 = *(_DWORD **)(a8 + 8);
      do
      {
        if ((unint64_t)v137 >= *v136)
        {
          long long v139 = *(_DWORD **)a8;
          uint64_t v140 = ((uint64_t)v137 - *(void *)a8) >> 2;
          unint64_t v141 = v140 + 1;
          if ((unint64_t)(v140 + 1) >> 62) {
LABEL_2263:
          }
            sub_20B05D0BC();
          uint64_t v142 = *v136 - (void)v139;
          if (v142 >> 1 > v141) {
            unint64_t v141 = v142 >> 1;
          }
          if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v143 = v141;
          }
          if (v143)
          {
            long long v144 = (char *)sub_20B05D1AC(a8 + 16, v143);
            long long v139 = *(_DWORD **)a8;
            v137 = *(_DWORD **)(a8 + 8);
          }
          else
          {
            long long v144 = 0;
          }
          long long v145 = &v144[4 * v140];
          *(_DWORD *)long long v145 = v15;
          v138 = v145 + 4;
          while (v137 != v139)
          {
            int v146 = *--v137;
            *((_DWORD *)v145 - 1) = v146;
            v145 -= 4;
          }
          *(void *)a8 = v145;
          *(void *)(a8 + 8) = v138;
          *(void *)(a8 + 16) = &v144[4 * v143];
          if (v139) {
            operator delete(v139);
          }
          a10 = v1360;
        }
        else
        {
          _DWORD *v137 = v15;
          v138 = v137 + 1;
        }
        *(void *)(a8 + 8) = v138;
        ++v135;
        v137 = v138;
      }
      while (v135 != 4);
    }
    if (a7)
    {
      int v147 = 0;
      v148 = a7 + 2;
      long long v149 = a7[1];
      do
      {
        long long v150 = *v148;
        if (v149 >= *v148)
        {
          uint64_t v152 = *a7;
          uint64_t v153 = (v149 - *a7) >> 2;
          unint64_t v154 = v153 + 1;
          if ((unint64_t)(v153 + 1) >> 62) {
            goto LABEL_2262;
          }
          uint64_t v155 = v150 - v152;
          if (v155 >> 1 > v154) {
            unint64_t v154 = v155 >> 1;
          }
          if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v156 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v156 = v154;
          }
          if (v156)
          {
            v157 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v156);
            uint64_t v152 = *a7;
            long long v149 = a7[1];
          }
          else
          {
            v157 = 0;
          }
          uint64_t v158 = &v157[4 * v153];
          *(_DWORD *)uint64_t v158 = -1082130432;
          int v151 = v158 + 4;
          while (v149 != v152)
          {
            int v159 = *((_DWORD *)v149 - 1);
            v149 -= 4;
            *((_DWORD *)v158 - 1) = v159;
            v158 -= 4;
          }
          long long v150 = &v157[4 * v156];
          *a7 = v158;
          a7[1] = v151;
          a7[2] = v150;
          if (v152)
          {
            operator delete(v152);
            long long v150 = *v148;
          }
          a10 = v1360;
        }
        else
        {
          *(_DWORD *)long long v149 = -1082130432;
          int v151 = v149 + 4;
        }
        a7[1] = v151;
        if (v151 >= v150)
        {
          long long v161 = *a7;
          uint64_t v162 = (v151 - *a7) >> 2;
          unint64_t v163 = v162 + 1;
          if ((unint64_t)(v162 + 1) >> 62) {
            goto LABEL_2262;
          }
          uint64_t v164 = v150 - v161;
          if (v164 >> 1 > v163) {
            unint64_t v163 = v164 >> 1;
          }
          if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v165 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v165 = v163;
          }
          if (v165)
          {
            v166 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v165);
            long long v161 = *a7;
            int v151 = a7[1];
          }
          else
          {
            v166 = 0;
          }
          v167 = &v166[4 * v162];
          *(_DWORD *)v167 = 0;
          long long v160 = v167 + 4;
          while (v151 != v161)
          {
            int v168 = *((_DWORD *)v151 - 1);
            v151 -= 4;
            *((_DWORD *)v167 - 1) = v168;
            v167 -= 4;
          }
          long long v150 = &v166[4 * v165];
          *a7 = v167;
          a7[1] = v160;
          a7[2] = v150;
          if (v161)
          {
            operator delete(v161);
            long long v150 = *v148;
          }
          a10 = v1360;
        }
        else
        {
          *(_DWORD *)int v151 = 0;
          long long v160 = v151 + 4;
        }
        a7[1] = v160;
        if (v160 >= v150)
        {
          v169 = *a7;
          uint64_t v170 = (v160 - *a7) >> 2;
          unint64_t v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 62) {
LABEL_2262:
          }
            sub_20B05D0BC();
          uint64_t v172 = v150 - v169;
          if (v172 >> 1 > v171) {
            unint64_t v171 = v172 >> 1;
          }
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v173 = v171;
          }
          if (v173)
          {
            v174 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v173);
            v169 = *a7;
            long long v160 = a7[1];
          }
          else
          {
            v174 = 0;
          }
          v175 = &v174[4 * v170];
          *(_DWORD *)v175 = 0;
          long long v149 = v175 + 4;
          while (v160 != v169)
          {
            int v176 = *((_DWORD *)v160 - 1);
            v160 -= 4;
            *((_DWORD *)v175 - 1) = v176;
            v175 -= 4;
          }
          *a7 = v175;
          a7[1] = v149;
          a7[2] = &v174[4 * v173];
          if (v169) {
            operator delete(v169);
          }
          a10 = v1360;
        }
        else
        {
          *(_DWORD *)long long v160 = 0;
          long long v149 = v160 + 4;
        }
        a7[1] = v149;
        ++v147;
      }
      while (v147 != 4);
    }
    uint64_t v13 = a5;
    v178 = a5 + 2;
    v177 = a5[2];
    v179 = a5[1];
    if (v179 >= v177)
    {
      v182 = *a5;
      uint64_t v183 = (v179 - *a5) >> 2;
      unint64_t v184 = v183 + 1;
      if ((unint64_t)(v183 + 1) >> 62) {
        goto LABEL_2265;
      }
      uint64_t v185 = v177 - v182;
      if (v185 >> 1 > v184) {
        unint64_t v184 = v185 >> 1;
      }
      if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v186 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v186 = v184;
      }
      uint64_t v12 = a6;
      if (v186)
      {
        v187 = (char *)sub_20B05D1AC((uint64_t)(a5 + 2), v186);
        v182 = *a5;
        v179 = a5[1];
      }
      else
      {
        v187 = 0;
      }
      v188 = &v187[4 * v183];
      v177 = &v187[4 * v186];
      *(_DWORD *)v188 = a4;
      v181 = v188 + 4;
      while (v179 != v182)
      {
        int v189 = *((_DWORD *)v179 - 1);
        v179 -= 4;
        *((_DWORD *)v188 - 1) = v189;
        v188 -= 4;
      }
      *a5 = v188;
      a5[1] = v181;
      a5[2] = v177;
      if (v182)
      {
        operator delete(v182);
        v177 = *v178;
      }
      int v180 = a4;
      a10 = v1360;
    }
    else
    {
      int v180 = a4;
      *(_DWORD *)v179 = a4;
      v181 = v179 + 4;
      uint64_t v12 = a6;
    }
    a5[1] = v181;
    int v190 = v180 + 2;
    if (v181 >= v177)
    {
      v192 = *a5;
      uint64_t v193 = (v181 - *a5) >> 2;
      unint64_t v194 = v193 + 1;
      if ((unint64_t)(v193 + 1) >> 62) {
        goto LABEL_2265;
      }
      uint64_t v195 = v177 - v192;
      if (v195 >> 1 > v194) {
        unint64_t v194 = v195 >> 1;
      }
      if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v196 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v196 = v194;
      }
      if (v196)
      {
        v197 = (char *)sub_20B05D1AC((uint64_t)v178, v196);
        v192 = *a5;
        v181 = a5[1];
      }
      else
      {
        v197 = 0;
      }
      v198 = &v197[4 * v193];
      v177 = &v197[4 * v196];
      *(_DWORD *)v198 = v190;
      v191 = v198 + 4;
      while (v181 != v192)
      {
        int v199 = *((_DWORD *)v181 - 1);
        v181 -= 4;
        *((_DWORD *)v198 - 1) = v199;
        v198 -= 4;
      }
      *a5 = v198;
      a5[1] = v191;
      a5[2] = v177;
      if (v192)
      {
        operator delete(v192);
        v177 = *v178;
      }
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v181 = v190;
      v191 = v181 + 4;
    }
    a5[1] = v191;
    int v200 = a4 + 1;
    if (v191 >= v177)
    {
      v202 = *a5;
      uint64_t v203 = (v191 - *a5) >> 2;
      unint64_t v204 = v203 + 1;
      if ((unint64_t)(v203 + 1) >> 62) {
        goto LABEL_2265;
      }
      uint64_t v205 = v177 - v202;
      if (v205 >> 1 > v204) {
        unint64_t v204 = v205 >> 1;
      }
      if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v206 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v206 = v204;
      }
      if (v206)
      {
        v207 = (char *)sub_20B05D1AC((uint64_t)v178, v206);
        v202 = *a5;
        v191 = a5[1];
      }
      else
      {
        v207 = 0;
      }
      v208 = &v207[4 * v203];
      v177 = &v207[4 * v206];
      *(_DWORD *)v208 = v200;
      v201 = v208 + 4;
      while (v191 != v202)
      {
        int v209 = *((_DWORD *)v191 - 1);
        v191 -= 4;
        *((_DWORD *)v208 - 1) = v209;
        v208 -= 4;
      }
      *a5 = v208;
      a5[1] = v201;
      a5[2] = v177;
      if (v202)
      {
        operator delete(v202);
        v177 = *v178;
      }
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v191 = v200;
      v201 = v191 + 4;
    }
    a5[1] = v201;
    if (v201 >= v177)
    {
      v211 = *a5;
      uint64_t v212 = (v201 - *a5) >> 2;
      unint64_t v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62) {
        goto LABEL_2265;
      }
      uint64_t v214 = v177 - v211;
      if (v214 >> 1 > v213) {
        unint64_t v213 = v214 >> 1;
      }
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v215 = v213;
      }
      if (v215)
      {
        v216 = (char *)sub_20B05D1AC((uint64_t)v178, v215);
        v211 = *a5;
        v201 = a5[1];
      }
      else
      {
        v216 = 0;
      }
      v217 = &v216[4 * v212];
      v177 = &v216[4 * v215];
      *(_DWORD *)v217 = v200;
      v210 = v217 + 4;
      if (v201 == v211)
      {
        char v14 = a3;
      }
      else
      {
        char v14 = a3;
        do
        {
          int v218 = *((_DWORD *)v201 - 1);
          v201 -= 4;
          *((_DWORD *)v217 - 1) = v218;
          v217 -= 4;
        }
        while (v201 != v211);
      }
      *a5 = v217;
      a5[1] = v210;
      a5[2] = v177;
      if (v211)
      {
        operator delete(v211);
        v177 = *v178;
      }
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v201 = v200;
      v210 = v201 + 4;
      char v14 = a3;
    }
    a5[1] = v210;
    if (v210 >= v177)
    {
      v220 = *a5;
      uint64_t v221 = (v210 - *a5) >> 2;
      unint64_t v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62) {
        goto LABEL_2265;
      }
      uint64_t v223 = v177 - v220;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        v225 = (char *)sub_20B05D1AC((uint64_t)v178, v224);
        v220 = *a5;
        v210 = a5[1];
      }
      else
      {
        v225 = 0;
      }
      v226 = &v225[4 * v221];
      v177 = &v225[4 * v224];
      *(_DWORD *)v226 = v190;
      v219 = v226 + 4;
      while (v210 != v220)
      {
        int v227 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *a5 = v226;
      a5[1] = v219;
      a5[2] = v177;
      if (v220)
      {
        operator delete(v220);
        v177 = *v178;
      }
      int v15 = a2;
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v210 = v190;
      v219 = v210 + 4;
      int v15 = a2;
    }
    a5[1] = v219;
    int v228 = a4 + 3;
    if (v219 >= v177)
    {
      v230 = *a5;
      uint64_t v231 = (v219 - *a5) >> 2;
      unint64_t v232 = v231 + 1;
      if ((unint64_t)(v231 + 1) >> 62) {
        goto LABEL_2265;
      }
      uint64_t v233 = v177 - v230;
      if (v233 >> 1 > v232) {
        unint64_t v232 = v233 >> 1;
      }
      if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v234 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v234 = v232;
      }
      if (v234)
      {
        v235 = (char *)sub_20B05D1AC((uint64_t)v178, v234);
        v230 = *a5;
        v219 = a5[1];
      }
      else
      {
        v235 = 0;
      }
      v236 = &v235[4 * v231];
      v237 = &v235[4 * v234];
      *(_DWORD *)v236 = v228;
      v229 = v236 + 4;
      while (v219 != v230)
      {
        int v238 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v236 - 1) = v238;
        v236 -= 4;
      }
      *a5 = v236;
      a5[1] = v229;
      a5[2] = v237;
      if (v230) {
        operator delete(v230);
      }
      a10 = v1360;
    }
    else
    {
      *(_DWORD *)v219 = v228;
      v229 = v219 + 4;
    }
    a5[1] = v229;
    int v16 = 4;
    if ((v14 & 2) == 0)
    {
LABEL_4:
      if ((v14 & 0x10) == 0) {
        goto LABEL_5;
      }
      goto LABEL_765;
    }
  }
  else
  {
    int v16 = 0;
    if ((a3 & 2) == 0) {
      goto LABEL_4;
    }
  }
  v240 = (char **)(v12 + 16);
  v239 = *(char **)(v12 + 16);
  v241 = *(unsigned __int32 **)(v12 + 8);
  if (v241 >= (unsigned __int32 *)v239)
  {
    v244 = *(unsigned __int32 **)v12;
    uint64_t v245 = ((uint64_t)v241 - *(void *)v12) >> 2;
    unint64_t v246 = v245 + 1;
    __n128 v242 = a9;
    if ((unint64_t)(v245 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v247 = v239 - (char *)v244;
    if (v247 >> 1 > v246) {
      unint64_t v246 = v247 >> 1;
    }
    if ((unint64_t)v247 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v248 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v248 = v246;
    }
    if (v248)
    {
      v249 = (char *)sub_20B05D1AC(v12 + 16, v248);
      __n128 v242 = a9;
      v250 = v249;
      v244 = *(unsigned __int32 **)v12;
      v241 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v250 = 0;
    }
    v251 = &v250[4 * v245];
    v239 = &v250[4 * v248];
    *(_DWORD *)v251 = v242.n128_u32[0];
    v243 = (unsigned __int32 *)(v251 + 4);
    while (v241 != v244)
    {
      int v252 = *--v241;
      *((_DWORD *)v251 - 1) = v252;
      v251 -= 4;
    }
    *(void *)uint64_t v12 = v251;
    *(void *)(v12 + 8) = v243;
    *(void *)(v12 + 16) = v239;
    if (v244)
    {
      operator delete(v244);
      __n128 v242 = a9;
      v239 = *v240;
    }
  }
  else
  {
    __n128 v242 = a9;
    unsigned __int32 *v241 = a9.n128_u32[0];
    v243 = v241 + 1;
  }
  *(void *)(v12 + 8) = v243;
  unsigned __int32 v253 = v242.n128_u32[1];
  int v1353 = v16;
  if (v243 >= (unsigned __int32 *)v239)
  {
    v255 = *(unsigned __int32 **)v12;
    uint64_t v256 = ((uint64_t)v243 - *(void *)v12) >> 2;
    unint64_t v257 = v256 + 1;
    if ((unint64_t)(v256 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v258 = v239 - (char *)v255;
    if (v258 >> 1 > v257) {
      unint64_t v257 = v258 >> 1;
    }
    if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v259 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v259 = v257;
    }
    if (v259)
    {
      v260 = (char *)sub_20B05D1AC(v12 + 16, v259);
      v255 = *(unsigned __int32 **)v12;
      v243 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v260 = 0;
    }
    v261 = (unsigned __int32 *)&v260[4 * v256];
    v239 = &v260[4 * v259];
    unsigned __int32 *v261 = v253;
    v254 = v261 + 1;
    while (v243 != v255)
    {
      unsigned __int32 v262 = *--v243;
      *--v261 = v262;
    }
    *(void *)uint64_t v12 = v261;
    *(void *)(v12 + 8) = v254;
    *(void *)(v12 + 16) = v239;
    if (v255)
    {
      operator delete(v255);
      v239 = *v240;
    }
    __n128 v242 = a9;
  }
  else
  {
    unsigned __int32 *v243 = v242.n128_u32[1];
    v254 = v243 + 1;
  }
  *(void *)(v12 + 8) = v254;
  unsigned __int32 v263 = v242.n128_u32[2];
  if (v254 >= (unsigned __int32 *)v239)
  {
    v265 = *(unsigned __int32 **)v12;
    uint64_t v266 = ((uint64_t)v254 - *(void *)v12) >> 2;
    unint64_t v267 = v266 + 1;
    if ((unint64_t)(v266 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v268 = v239 - (char *)v265;
    if (v268 >> 1 > v267) {
      unint64_t v267 = v268 >> 1;
    }
    if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v269 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v269 = v267;
    }
    if (v269)
    {
      v270 = (char *)sub_20B05D1AC(v12 + 16, v269);
      v265 = *(unsigned __int32 **)v12;
      v254 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v270 = 0;
    }
    v271 = (unsigned __int32 *)&v270[4 * v266];
    v239 = &v270[4 * v269];
    unsigned __int32 *v271 = v263;
    v264 = v271 + 1;
    while (v254 != v265)
    {
      unsigned __int32 v272 = *--v254;
      *--v271 = v272;
    }
    *(void *)uint64_t v12 = v271;
    *(void *)(v12 + 8) = v264;
    *(void *)(v12 + 16) = v239;
    if (v265)
    {
      operator delete(v265);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v254 = v242.n128_u32[2];
    v264 = v254 + 1;
  }
  *(void *)(v12 + 8) = v264;
  if (v264 >= (unsigned __int32 *)v239)
  {
    v274 = *(unsigned __int32 **)v12;
    uint64_t v275 = ((uint64_t)v264 - *(void *)v12) >> 2;
    unint64_t v276 = v275 + 1;
    if ((unint64_t)(v275 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v277 = v239 - (char *)v274;
    if (v277 >> 1 > v276) {
      unint64_t v276 = v277 >> 1;
    }
    if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v278 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v278 = v276;
    }
    if (v278)
    {
      v279 = (char *)sub_20B05D1AC(v12 + 16, v278);
      v242.n128_u32[0] = a9.n128_u32[0];
      v280 = v279;
      v274 = *(unsigned __int32 **)v12;
      v264 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v280 = 0;
    }
    v281 = &v280[4 * v275];
    v239 = &v280[4 * v278];
    *(_DWORD *)v281 = v242.n128_u32[0];
    v273 = (unsigned __int32 *)(v281 + 4);
    while (v264 != v274)
    {
      int v282 = *--v264;
      *((_DWORD *)v281 - 1) = v282;
      v281 -= 4;
    }
    *(void *)uint64_t v12 = v281;
    *(void *)(v12 + 8) = v273;
    *(void *)(v12 + 16) = v239;
    if (v274)
    {
      operator delete(v274);
      v242.n128_u32[0] = a9.n128_u32[0];
      v239 = *v240;
    }
  }
  else
  {
    unsigned __int32 *v264 = v242.n128_u32[0];
    v273 = v264 + 1;
  }
  *(void *)(v12 + 8) = v273;
  if (v273 >= (unsigned __int32 *)v239)
  {
    v284 = *(unsigned __int32 **)v12;
    uint64_t v285 = ((uint64_t)v273 - *(void *)v12) >> 2;
    unint64_t v286 = v285 + 1;
    if ((unint64_t)(v285 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v287 = v239 - (char *)v284;
    if (v287 >> 1 > v286) {
      unint64_t v286 = v287 >> 1;
    }
    if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v288 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v288 = v286;
    }
    if (v288)
    {
      v289 = (char *)sub_20B05D1AC(v12 + 16, v288);
      v284 = *(unsigned __int32 **)v12;
      v273 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v289 = 0;
    }
    v290 = &v289[4 * v285];
    v239 = &v289[4 * v288];
    *(_DWORD *)v290 = v1360.n128_u32[1];
    v283 = (unsigned __int32 *)(v290 + 4);
    while (v273 != v284)
    {
      int v291 = *--v273;
      *((_DWORD *)v290 - 1) = v291;
      v290 -= 4;
    }
    *(void *)uint64_t v12 = v290;
    *(void *)(v12 + 8) = v283;
    *(void *)(v12 + 16) = v239;
    if (v284)
    {
      operator delete(v284);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v273 = v1360.n128_u32[1];
    v283 = v273 + 1;
  }
  *(void *)(v12 + 8) = v283;
  if (v283 >= (unsigned __int32 *)v239)
  {
    v293 = *(unsigned __int32 **)v12;
    uint64_t v294 = ((uint64_t)v283 - *(void *)v12) >> 2;
    unint64_t v295 = v294 + 1;
    if ((unint64_t)(v294 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v296 = v239 - (char *)v293;
    if (v296 >> 1 > v295) {
      unint64_t v295 = v296 >> 1;
    }
    if ((unint64_t)v296 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v297 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v297 = v295;
    }
    if (v297)
    {
      v298 = (char *)sub_20B05D1AC(v12 + 16, v297);
      v293 = *(unsigned __int32 **)v12;
      v283 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v298 = 0;
    }
    v299 = (unsigned __int32 *)&v298[4 * v294];
    v239 = &v298[4 * v297];
    unsigned __int32 *v299 = v263;
    v292 = v299 + 1;
    while (v283 != v293)
    {
      unsigned __int32 v300 = *--v283;
      *--v299 = v300;
    }
    *(void *)uint64_t v12 = v299;
    *(void *)(v12 + 8) = v292;
    *(void *)(v12 + 16) = v239;
    if (v293)
    {
      operator delete(v293);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v283 = v263;
    v292 = v283 + 1;
  }
  *(void *)(v12 + 8) = v292;
  if (v292 >= (unsigned __int32 *)v239)
  {
    v302 = *(unsigned __int32 **)v12;
    uint64_t v303 = ((uint64_t)v292 - *(void *)v12) >> 2;
    unint64_t v304 = v303 + 1;
    if ((unint64_t)(v303 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v305 = v239 - (char *)v302;
    if (v305 >> 1 > v304) {
      unint64_t v304 = v305 >> 1;
    }
    if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v306 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v306 = v304;
    }
    if (v306)
    {
      v307 = (char *)sub_20B05D1AC(v12 + 16, v306);
      v242.n128_u32[0] = a9.n128_u32[0];
      v308 = v307;
      v302 = *(unsigned __int32 **)v12;
      v292 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v308 = 0;
    }
    v309 = &v308[4 * v303];
    v239 = &v308[4 * v306];
    *(_DWORD *)v309 = v242.n128_u32[0];
    v301 = (unsigned __int32 *)(v309 + 4);
    while (v292 != v302)
    {
      int v310 = *--v292;
      *((_DWORD *)v309 - 1) = v310;
      v309 -= 4;
    }
    *(void *)uint64_t v12 = v309;
    *(void *)(v12 + 8) = v301;
    *(void *)(v12 + 16) = v239;
    if (v302)
    {
      operator delete(v302);
      v242.n128_u32[0] = a9.n128_u32[0];
      v239 = *v240;
    }
  }
  else
  {
    unsigned __int32 *v292 = v242.n128_u32[0];
    v301 = v292 + 1;
  }
  *(void *)(v12 + 8) = v301;
  if (v301 >= (unsigned __int32 *)v239)
  {
    v312 = *(unsigned __int32 **)v12;
    uint64_t v313 = ((uint64_t)v301 - *(void *)v12) >> 2;
    unint64_t v314 = v313 + 1;
    if ((unint64_t)(v313 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v315 = v239 - (char *)v312;
    if (v315 >> 1 > v314) {
      unint64_t v314 = v315 >> 1;
    }
    if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v316 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v316 = v314;
    }
    if (v316)
    {
      v317 = (char *)sub_20B05D1AC(v12 + 16, v316);
      v312 = *(unsigned __int32 **)v12;
      v301 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v317 = 0;
    }
    v318 = (unsigned __int32 *)&v317[4 * v313];
    v239 = &v317[4 * v316];
    unsigned __int32 *v318 = v253;
    v311 = v318 + 1;
    while (v301 != v312)
    {
      unsigned __int32 v319 = *--v301;
      *--v318 = v319;
    }
    *(void *)uint64_t v12 = v318;
    *(void *)(v12 + 8) = v311;
    *(void *)(v12 + 16) = v239;
    if (v312)
    {
      operator delete(v312);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v301 = v253;
    v311 = v301 + 1;
  }
  *(void *)(v12 + 8) = v311;
  if (v311 >= (unsigned __int32 *)v239)
  {
    v321 = *(unsigned __int32 **)v12;
    uint64_t v322 = ((uint64_t)v311 - *(void *)v12) >> 2;
    unint64_t v323 = v322 + 1;
    if ((unint64_t)(v322 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v324 = v239 - (char *)v321;
    if (v324 >> 1 > v323) {
      unint64_t v323 = v324 >> 1;
    }
    if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v325 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v325 = v323;
    }
    if (v325)
    {
      v326 = (char *)sub_20B05D1AC(v12 + 16, v325);
      v321 = *(unsigned __int32 **)v12;
      v311 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v326 = 0;
    }
    v327 = &v326[4 * v322];
    v239 = &v326[4 * v325];
    *(_DWORD *)v327 = v1360.n128_u32[2];
    v320 = (unsigned __int32 *)(v327 + 4);
    while (v311 != v321)
    {
      int v328 = *--v311;
      *((_DWORD *)v327 - 1) = v328;
      v327 -= 4;
    }
    *(void *)uint64_t v12 = v327;
    *(void *)(v12 + 8) = v320;
    *(void *)(v12 + 16) = v239;
    if (v321)
    {
      operator delete(v321);
      v239 = *v240;
    }
    v242.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v311 = v1360.n128_u32[2];
    v320 = v311 + 1;
  }
  *(void *)(v12 + 8) = v320;
  if (v320 >= (unsigned __int32 *)v239)
  {
    v330 = *(unsigned __int32 **)v12;
    uint64_t v331 = ((uint64_t)v320 - *(void *)v12) >> 2;
    unint64_t v332 = v331 + 1;
    if ((unint64_t)(v331 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v333 = v239 - (char *)v330;
    if (v333 >> 1 > v332) {
      unint64_t v332 = v333 >> 1;
    }
    if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v334 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v334 = v332;
    }
    if (v334)
    {
      v335 = (char *)sub_20B05D1AC(v12 + 16, v334);
      v242.n128_u32[0] = a9.n128_u32[0];
      v336 = v335;
      v330 = *(unsigned __int32 **)v12;
      v320 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v336 = 0;
    }
    v337 = &v336[4 * v331];
    v239 = &v336[4 * v334];
    *(_DWORD *)v337 = v242.n128_u32[0];
    v329 = (unsigned __int32 *)(v337 + 4);
    while (v320 != v330)
    {
      int v338 = *--v320;
      *((_DWORD *)v337 - 1) = v338;
      v337 -= 4;
    }
    *(void *)uint64_t v12 = v337;
    *(void *)(v12 + 8) = v329;
    *(void *)(v12 + 16) = v239;
    if (v330)
    {
      operator delete(v330);
      v239 = *v240;
    }
  }
  else
  {
    unsigned __int32 *v320 = v242.n128_u32[0];
    v329 = v320 + 1;
  }
  *(void *)(v12 + 8) = v329;
  if (v329 >= (unsigned __int32 *)v239)
  {
    v340 = *(unsigned __int32 **)v12;
    uint64_t v341 = ((uint64_t)v329 - *(void *)v12) >> 2;
    unint64_t v342 = v341 + 1;
    if ((unint64_t)(v341 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v343 = v239 - (char *)v340;
    if (v343 >> 1 > v342) {
      unint64_t v342 = v343 >> 1;
    }
    if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v344 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v344 = v342;
    }
    if (v344)
    {
      v345 = (char *)sub_20B05D1AC(v12 + 16, v344);
      v340 = *(unsigned __int32 **)v12;
      v329 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v345 = 0;
    }
    v346 = &v345[4 * v341];
    v239 = &v345[4 * v344];
    *(_DWORD *)v346 = v1360.n128_u32[1];
    v339 = (unsigned __int32 *)(v346 + 4);
    while (v329 != v340)
    {
      int v347 = *--v329;
      *((_DWORD *)v346 - 1) = v347;
      v346 -= 4;
    }
    *(void *)uint64_t v12 = v346;
    *(void *)(v12 + 8) = v339;
    *(void *)(v12 + 16) = v239;
    if (v340)
    {
      operator delete(v340);
      v239 = *v240;
    }
  }
  else
  {
    unsigned __int32 *v329 = v1360.n128_u32[1];
    v339 = v329 + 1;
  }
  *(void *)(v12 + 8) = v339;
  if (v339 >= (unsigned __int32 *)v239)
  {
    v349 = *(unsigned __int32 **)v12;
    uint64_t v350 = ((uint64_t)v339 - *(void *)v12) >> 2;
    unint64_t v351 = v350 + 1;
    if ((unint64_t)(v350 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v352 = v239 - (char *)v349;
    if (v352 >> 1 > v351) {
      unint64_t v351 = v352 >> 1;
    }
    if ((unint64_t)v352 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v353 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v353 = v351;
    }
    if (v353)
    {
      v354 = (char *)sub_20B05D1AC(v12 + 16, v353);
      v349 = *(unsigned __int32 **)v12;
      v339 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v354 = 0;
    }
    v355 = &v354[4 * v350];
    v356 = &v354[4 * v353];
    *(_DWORD *)v355 = v1360.n128_u32[2];
    v348 = v355 + 4;
    while (v339 != v349)
    {
      int v357 = *--v339;
      *((_DWORD *)v355 - 1) = v357;
      v355 -= 4;
    }
    *(void *)uint64_t v12 = v355;
    *(void *)(v12 + 8) = v348;
    *(void *)(v12 + 16) = v356;
    if (v349) {
      operator delete(v349);
    }
  }
  else
  {
    unsigned __int32 *v339 = v1360.n128_u32[2];
    v348 = v339 + 1;
  }
  a10 = v1360;
  *(void *)(v12 + 8) = v348;
  if (a8 && a1)
  {
    int v358 = 0;
    v359 = (void *)(a8 + 16);
    v360 = *(_DWORD **)(a8 + 8);
    do
    {
      if ((unint64_t)v360 >= *v359)
      {
        v362 = *(_DWORD **)a8;
        uint64_t v363 = ((uint64_t)v360 - *(void *)a8) >> 2;
        unint64_t v364 = v363 + 1;
        if ((unint64_t)(v363 + 1) >> 62) {
          goto LABEL_2263;
        }
        uint64_t v365 = *v359 - (void)v362;
        if (v365 >> 1 > v364) {
          unint64_t v364 = v365 >> 1;
        }
        if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v366 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v366 = v364;
        }
        if (v366)
        {
          v367 = (char *)sub_20B05D1AC(a8 + 16, v366);
          v362 = *(_DWORD **)a8;
          v360 = *(_DWORD **)(a8 + 8);
        }
        else
        {
          v367 = 0;
        }
        v368 = &v367[4 * v363];
        *(_DWORD *)v368 = v15;
        v361 = v368 + 4;
        while (v360 != v362)
        {
          int v369 = *--v360;
          *((_DWORD *)v368 - 1) = v369;
          v368 -= 4;
        }
        *(void *)a8 = v368;
        *(void *)(a8 + 8) = v361;
        *(void *)(a8 + 16) = &v367[4 * v366];
        if (v362) {
          operator delete(v362);
        }
        a10 = v1360;
      }
      else
      {
        _DWORD *v360 = v15;
        v361 = v360 + 1;
      }
      *(void *)(a8 + 8) = v361;
      ++v358;
      v360 = v361;
    }
    while (v358 != 4);
  }
  if (a7)
  {
    int v370 = 0;
    v371 = a7 + 2;
    v372 = a7[1];
    do
    {
      v373 = *v371;
      if (v372 >= *v371)
      {
        v375 = *a7;
        uint64_t v376 = (v372 - *a7) >> 2;
        unint64_t v377 = v376 + 1;
        if ((unint64_t)(v376 + 1) >> 62) {
          goto LABEL_2262;
        }
        uint64_t v378 = v373 - v375;
        if (v378 >> 1 > v377) {
          unint64_t v377 = v378 >> 1;
        }
        if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v379 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v379 = v377;
        }
        if (v379)
        {
          v380 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v379);
          v375 = *a7;
          v372 = a7[1];
        }
        else
        {
          v380 = 0;
        }
        v381 = &v380[4 * v376];
        *(_DWORD *)v381 = 0;
        v374 = v381 + 4;
        while (v372 != v375)
        {
          int v382 = *((_DWORD *)v372 - 1);
          v372 -= 4;
          *((_DWORD *)v381 - 1) = v382;
          v381 -= 4;
        }
        v373 = &v380[4 * v379];
        *a7 = v381;
        a7[1] = v374;
        a7[2] = v373;
        if (v375)
        {
          operator delete(v375);
          v373 = *v371;
        }
        a10 = v1360;
      }
      else
      {
        *(_DWORD *)v372 = 0;
        v374 = v372 + 4;
      }
      a7[1] = v374;
      if (v374 >= v373)
      {
        v384 = *a7;
        uint64_t v385 = (v374 - *a7) >> 2;
        unint64_t v386 = v385 + 1;
        if ((unint64_t)(v385 + 1) >> 62) {
          goto LABEL_2262;
        }
        uint64_t v387 = v373 - v384;
        if (v387 >> 1 > v386) {
          unint64_t v386 = v387 >> 1;
        }
        if ((unint64_t)v387 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v388 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v388 = v386;
        }
        if (v388)
        {
          v389 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v388);
          v384 = *a7;
          v374 = a7[1];
        }
        else
        {
          v389 = 0;
        }
        v390 = &v389[4 * v385];
        *(_DWORD *)v390 = 0;
        v383 = v390 + 4;
        while (v374 != v384)
        {
          int v391 = *((_DWORD *)v374 - 1);
          v374 -= 4;
          *((_DWORD *)v390 - 1) = v391;
          v390 -= 4;
        }
        v373 = &v389[4 * v388];
        *a7 = v390;
        a7[1] = v383;
        a7[2] = v373;
        if (v384)
        {
          operator delete(v384);
          v373 = *v371;
        }
        a10 = v1360;
      }
      else
      {
        *(_DWORD *)v374 = 0;
        v383 = v374 + 4;
      }
      a7[1] = v383;
      if (v383 >= v373)
      {
        v392 = *a7;
        uint64_t v393 = (v383 - *a7) >> 2;
        unint64_t v394 = v393 + 1;
        if ((unint64_t)(v393 + 1) >> 62) {
          goto LABEL_2262;
        }
        uint64_t v395 = v373 - v392;
        if (v395 >> 1 > v394) {
          unint64_t v394 = v395 >> 1;
        }
        if ((unint64_t)v395 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v396 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v396 = v394;
        }
        if (v396)
        {
          v397 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v396);
          v392 = *a7;
          v383 = a7[1];
        }
        else
        {
          v397 = 0;
        }
        v398 = &v397[4 * v393];
        *(_DWORD *)v398 = -1082130432;
        v372 = v398 + 4;
        while (v383 != v392)
        {
          int v399 = *((_DWORD *)v383 - 1);
          v383 -= 4;
          *((_DWORD *)v398 - 1) = v399;
          v398 -= 4;
        }
        *a7 = v398;
        a7[1] = v372;
        a7[2] = &v397[4 * v396];
        if (v392) {
          operator delete(v392);
        }
        a10 = v1360;
      }
      else
      {
        *(_DWORD *)v383 = -1082130432;
        v372 = v383 + 4;
      }
      a7[1] = v372;
      ++v370;
    }
    while (v370 != 4);
  }
  int v400 = v1353 + a4;
  v402 = a5 + 2;
  v401 = a5[2];
  v403 = a5[1];
  if (v403 >= v401)
  {
    v405 = *a5;
    uint64_t v406 = (v403 - *a5) >> 2;
    unint64_t v407 = v406 + 1;
    if ((unint64_t)(v406 + 1) >> 62) {
      goto LABEL_2266;
    }
    uint64_t v408 = v401 - v405;
    if (v408 >> 1 > v407) {
      unint64_t v407 = v408 >> 1;
    }
    if ((unint64_t)v408 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v409 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v409 = v407;
    }
    if (v409)
    {
      v410 = (char *)sub_20B05D1AC((uint64_t)(a5 + 2), v409);
      v405 = *a5;
      v403 = a5[1];
    }
    else
    {
      v410 = 0;
    }
    v411 = &v410[4 * v406];
    v401 = &v410[4 * v409];
    *(_DWORD *)v411 = v400;
    v404 = v411 + 4;
    while (v403 != v405)
    {
      int v412 = *((_DWORD *)v403 - 1);
      v403 -= 4;
      *((_DWORD *)v411 - 1) = v412;
      v411 -= 4;
    }
    *a5 = v411;
    a5[1] = v404;
    a5[2] = v401;
    if (v405)
    {
      operator delete(v405);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v403 = v400;
    v404 = v403 + 4;
  }
  a5[1] = v404;
  int v413 = v400 + 2;
  if (v404 >= v401)
  {
    v415 = *a5;
    uint64_t v416 = (v404 - *a5) >> 2;
    unint64_t v417 = v416 + 1;
    if ((unint64_t)(v416 + 1) >> 62) {
      goto LABEL_2266;
    }
    uint64_t v418 = v401 - v415;
    if (v418 >> 1 > v417) {
      unint64_t v417 = v418 >> 1;
    }
    if ((unint64_t)v418 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v419 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v419 = v417;
    }
    if (v419)
    {
      v420 = (char *)sub_20B05D1AC((uint64_t)v402, v419);
      v415 = *a5;
      v404 = a5[1];
    }
    else
    {
      v420 = 0;
    }
    v421 = &v420[4 * v416];
    v401 = &v420[4 * v419];
    *(_DWORD *)v421 = v413;
    v414 = v421 + 4;
    while (v404 != v415)
    {
      int v422 = *((_DWORD *)v404 - 1);
      v404 -= 4;
      *((_DWORD *)v421 - 1) = v422;
      v421 -= 4;
    }
    *a5 = v421;
    a5[1] = v414;
    a5[2] = v401;
    if (v415)
    {
      operator delete(v415);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v404 = v413;
    v414 = v404 + 4;
  }
  v423 = a5;
  a5[1] = v414;
  int v424 = v400 + 1;
  if (v414 >= v401)
  {
    v426 = *a5;
    uint64_t v427 = (v414 - *a5) >> 2;
    unint64_t v428 = v427 + 1;
    if ((unint64_t)(v427 + 1) >> 62) {
      goto LABEL_2267;
    }
    uint64_t v429 = v401 - v426;
    if (v429 >> 1 > v428) {
      unint64_t v428 = v429 >> 1;
    }
    if ((unint64_t)v429 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v430 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v430 = v428;
    }
    if (v430)
    {
      v431 = (char *)sub_20B05D1AC((uint64_t)v402, v430);
      v426 = *a5;
      v414 = a5[1];
    }
    else
    {
      v431 = 0;
    }
    v432 = &v431[4 * v427];
    v401 = &v431[4 * v430];
    *(_DWORD *)v432 = v424;
    v425 = v432 + 4;
    while (v414 != v426)
    {
      int v433 = *((_DWORD *)v414 - 1);
      v414 -= 4;
      *((_DWORD *)v432 - 1) = v433;
      v432 -= 4;
    }
    v423 = a5;
    *a5 = v432;
    a5[1] = v425;
    a5[2] = v401;
    if (v426)
    {
      operator delete(v426);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v414 = v424;
    v425 = v414 + 4;
  }
  v423[1] = v425;
  if (v425 >= v401)
  {
    v435 = *v423;
    uint64_t v436 = (v425 - *v423) >> 2;
    unint64_t v437 = v436 + 1;
    if ((unint64_t)(v436 + 1) >> 62) {
      goto LABEL_2266;
    }
    uint64_t v438 = v401 - v435;
    if (v438 >> 1 > v437) {
      unint64_t v437 = v438 >> 1;
    }
    if ((unint64_t)v438 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v439 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v439 = v437;
    }
    if (v439)
    {
      v440 = (char *)sub_20B05D1AC((uint64_t)v402, v439);
      v435 = *v423;
      v425 = v423[1];
    }
    else
    {
      v440 = 0;
    }
    uint64_t v12 = a6;
    v441 = &v440[4 * v436];
    v401 = &v440[4 * v439];
    *(_DWORD *)v441 = v424;
    v434 = v441 + 4;
    if (v425 == v435)
    {
      int v15 = a2;
    }
    else
    {
      int v15 = a2;
      do
      {
        int v442 = *((_DWORD *)v425 - 1);
        v425 -= 4;
        *((_DWORD *)v441 - 1) = v442;
        v441 -= 4;
      }
      while (v425 != v435);
    }
    *a5 = v441;
    a5[1] = v434;
    a5[2] = v401;
    if (v435)
    {
      operator delete(v435);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v425 = v424;
    v434 = v425 + 4;
    uint64_t v12 = a6;
    int v15 = a2;
  }
  a5[1] = v434;
  if (v434 >= v401)
  {
    v444 = *a5;
    uint64_t v445 = (v434 - *a5) >> 2;
    unint64_t v446 = v445 + 1;
    if ((unint64_t)(v445 + 1) >> 62) {
      goto LABEL_2267;
    }
    uint64_t v447 = v401 - v444;
    if (v447 >> 1 > v446) {
      unint64_t v446 = v447 >> 1;
    }
    if ((unint64_t)v447 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v448 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v448 = v446;
    }
    if (v448)
    {
      v449 = (char *)sub_20B05D1AC((uint64_t)v402, v448);
      v444 = *a5;
      v434 = a5[1];
    }
    else
    {
      v449 = 0;
    }
    v450 = &v449[4 * v445];
    v401 = &v449[4 * v448];
    *(_DWORD *)v450 = v413;
    v443 = v450 + 4;
    while (v434 != v444)
    {
      int v451 = *((_DWORD *)v434 - 1);
      v434 -= 4;
      *((_DWORD *)v450 - 1) = v451;
      v450 -= 4;
    }
    uint64_t v13 = a5;
    *a5 = v450;
    a5[1] = v443;
    a5[2] = v401;
    if (v444)
    {
      operator delete(v444);
      v401 = *v402;
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v434 = v413;
    v443 = v434 + 4;
    uint64_t v13 = a5;
  }
  v13[1] = v443;
  int v452 = v400 + 3;
  if (v443 >= v401)
  {
    v454 = *v13;
    uint64_t v455 = (v443 - *v13) >> 2;
    unint64_t v456 = v455 + 1;
    char v14 = a3;
    if ((unint64_t)(v455 + 1) >> 62) {
      goto LABEL_2265;
    }
    uint64_t v457 = v401 - v454;
    if (v457 >> 1 > v456) {
      unint64_t v456 = v457 >> 1;
    }
    if ((unint64_t)v457 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v458 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v458 = v456;
    }
    if (v458)
    {
      v459 = (char *)sub_20B05D1AC((uint64_t)v402, v458);
      v454 = *v13;
      v443 = v13[1];
    }
    else
    {
      v459 = 0;
    }
    v460 = &v459[4 * v455];
    v461 = &v459[4 * v458];
    *(_DWORD *)v460 = v452;
    v453 = v460 + 4;
    while (v443 != v454)
    {
      int v462 = *((_DWORD *)v443 - 1);
      v443 -= 4;
      *((_DWORD *)v460 - 1) = v462;
      v460 -= 4;
    }
    *uint64_t v13 = v460;
    v13[1] = v453;
    v13[2] = v461;
    if (v454) {
      operator delete(v454);
    }
    a10 = v1360;
  }
  else
  {
    *(_DWORD *)v443 = v452;
    v453 = v443 + 4;
    char v14 = a3;
  }
  v13[1] = v453;
  int v16 = v1353 + 4;
  if ((v14 & 0x10) != 0)
  {
LABEL_765:
    v464 = (char **)(v12 + 16);
    v463 = *(char **)(v12 + 16);
    v465 = *(unsigned __int32 **)(v12 + 8);
    if (v465 >= (unsigned __int32 *)v463)
    {
      v468 = *(unsigned __int32 **)v12;
      uint64_t v469 = ((uint64_t)v465 - *(void *)v12) >> 2;
      unint64_t v470 = v469 + 1;
      if ((unint64_t)(v469 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v471 = v463 - (char *)v468;
      if (v471 >> 1 > v470) {
        unint64_t v470 = v471 >> 1;
      }
      if ((unint64_t)v471 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v472 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v472 = v470;
      }
      if (v472)
      {
        v473 = (char *)sub_20B05D1AC(v12 + 16, v472);
        v468 = *(unsigned __int32 **)v12;
        v465 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v473 = 0;
      }
      v474 = &v473[4 * v469];
      v463 = &v473[4 * v472];
      *(_DWORD *)v474 = a9.n128_u32[0];
      v467 = (unsigned __int32 *)(v474 + 4);
      while (v465 != v468)
      {
        int v475 = *--v465;
        *((_DWORD *)v474 - 1) = v475;
        v474 -= 4;
      }
      *(void *)uint64_t v12 = v474;
      *(void *)(v12 + 8) = v467;
      *(void *)(v12 + 16) = v463;
      if (v468)
      {
        operator delete(v468);
        v463 = *v464;
      }
      unsigned __int32 v466 = a9.n128_u32[1];
      a10.n128_u32[2] = v1360.n128_u32[2];
    }
    else
    {
      unsigned __int32 v466 = a9.n128_u32[1];
      unsigned __int32 *v465 = a9.n128_u32[0];
      v467 = v465 + 1;
    }
    *(void *)(v12 + 8) = v467;
    unsigned __int32 v476 = v466;
    int v1354 = v16;
    if (v467 >= (unsigned __int32 *)v463)
    {
      v478 = *(unsigned __int32 **)v12;
      uint64_t v479 = ((uint64_t)v467 - *(void *)v12) >> 2;
      unint64_t v480 = v479 + 1;
      if ((unint64_t)(v479 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v481 = v463 - (char *)v478;
      if (v481 >> 1 > v480) {
        unint64_t v480 = v481 >> 1;
      }
      if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v482 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v482 = v480;
      }
      if (v482)
      {
        v483 = (char *)sub_20B05D1AC(v12 + 16, v482);
        v478 = *(unsigned __int32 **)v12;
        v467 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v483 = 0;
      }
      v484 = (unsigned __int32 *)&v483[4 * v479];
      v463 = &v483[4 * v482];
      unsigned __int32 *v484 = v476;
      v477 = v484 + 1;
      while (v467 != v478)
      {
        unsigned __int32 v485 = *--v467;
        *--v484 = v485;
      }
      *(void *)uint64_t v12 = v484;
      *(void *)(v12 + 8) = v477;
      *(void *)(v12 + 16) = v463;
      if (v478)
      {
        operator delete(v478);
        v463 = *v464;
      }
      a10.n128_u32[2] = v1360.n128_u32[2];
    }
    else
    {
      unsigned __int32 *v467 = v466;
      v477 = v467 + 1;
    }
    *(void *)(v12 + 8) = v477;
    unsigned __int32 v486 = a10.n128_u32[2];
    if (v477 >= (unsigned __int32 *)v463)
    {
      v488 = *(unsigned __int32 **)v12;
      uint64_t v489 = ((uint64_t)v477 - *(void *)v12) >> 2;
      unint64_t v490 = v489 + 1;
      if ((unint64_t)(v489 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v491 = v463 - (char *)v488;
      if (v491 >> 1 > v490) {
        unint64_t v490 = v491 >> 1;
      }
      if ((unint64_t)v491 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v492 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v492 = v490;
      }
      if (v492)
      {
        v493 = (char *)sub_20B05D1AC(v12 + 16, v492);
        v488 = *(unsigned __int32 **)v12;
        v477 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v493 = 0;
      }
      v494 = (unsigned __int32 *)&v493[4 * v489];
      v463 = &v493[4 * v492];
      unsigned __int32 *v494 = v486;
      v487 = v494 + 1;
      while (v477 != v488)
      {
        unsigned __int32 v495 = *--v477;
        *--v494 = v495;
      }
      *(void *)uint64_t v12 = v494;
      *(void *)(v12 + 8) = v487;
      *(void *)(v12 + 16) = v463;
      if (v488)
      {
        operator delete(v488);
        v463 = *v464;
      }
    }
    else
    {
      unsigned __int32 *v477 = a10.n128_u32[2];
      v487 = v477 + 1;
    }
    unsigned __int32 v496 = a9.n128_u32[0];
    *(void *)(v12 + 8) = v487;
    if (v487 >= (unsigned __int32 *)v463)
    {
      v498 = *(unsigned __int32 **)v12;
      uint64_t v499 = ((uint64_t)v487 - *(void *)v12) >> 2;
      unint64_t v500 = v499 + 1;
      if ((unint64_t)(v499 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v501 = v463 - (char *)v498;
      if (v501 >> 1 > v500) {
        unint64_t v500 = v501 >> 1;
      }
      if ((unint64_t)v501 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v502 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v502 = v500;
      }
      if (v502)
      {
        v503 = (char *)sub_20B05D1AC(v12 + 16, v502);
        v498 = *(unsigned __int32 **)v12;
        v487 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v503 = 0;
      }
      v504 = &v503[4 * v499];
      v463 = &v503[4 * v502];
      *(_DWORD *)v504 = v1360.n128_u32[0];
      v497 = (unsigned __int32 *)(v504 + 4);
      while (v487 != v498)
      {
        int v505 = *--v487;
        *((_DWORD *)v504 - 1) = v505;
        v504 -= 4;
      }
      *(void *)uint64_t v12 = v504;
      *(void *)(v12 + 8) = v497;
      *(void *)(v12 + 16) = v463;
      if (v498)
      {
        operator delete(v498);
        v463 = *v464;
      }
      unsigned __int32 v496 = a9.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v487 = v1360.n128_u32[0];
      v497 = v487 + 1;
    }
    *(void *)(v12 + 8) = v497;
    if (v497 >= (unsigned __int32 *)v463)
    {
      v507 = *(unsigned __int32 **)v12;
      uint64_t v508 = ((uint64_t)v497 - *(void *)v12) >> 2;
      unint64_t v509 = v508 + 1;
      if ((unint64_t)(v508 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v510 = v463 - (char *)v507;
      if (v510 >> 1 > v509) {
        unint64_t v509 = v510 >> 1;
      }
      if ((unint64_t)v510 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v511 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v511 = v509;
      }
      if (v511)
      {
        v512 = (char *)sub_20B05D1AC(v12 + 16, v511);
        v507 = *(unsigned __int32 **)v12;
        v497 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v512 = 0;
      }
      v513 = (unsigned __int32 *)&v512[4 * v508];
      v463 = &v512[4 * v511];
      unsigned __int32 *v513 = v476;
      v506 = v513 + 1;
      while (v497 != v507)
      {
        unsigned __int32 v514 = *--v497;
        *--v513 = v514;
      }
      *(void *)uint64_t v12 = v513;
      *(void *)(v12 + 8) = v506;
      *(void *)(v12 + 16) = v463;
      if (v507)
      {
        operator delete(v507);
        v463 = *v464;
      }
      unsigned __int32 v496 = a9.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v497 = v476;
      v506 = v497 + 1;
    }
    *(void *)(v12 + 8) = v506;
    if (v506 >= (unsigned __int32 *)v463)
    {
      v516 = *(unsigned __int32 **)v12;
      uint64_t v517 = ((uint64_t)v506 - *(void *)v12) >> 2;
      unint64_t v518 = v517 + 1;
      if ((unint64_t)(v517 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v519 = v463 - (char *)v516;
      if (v519 >> 1 > v518) {
        unint64_t v518 = v519 >> 1;
      }
      if ((unint64_t)v519 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v520 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v520 = v518;
      }
      if (v520)
      {
        v521 = (char *)sub_20B05D1AC(v12 + 16, v520);
        v516 = *(unsigned __int32 **)v12;
        v506 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v521 = 0;
      }
      v522 = (unsigned __int32 *)&v521[4 * v517];
      v463 = &v521[4 * v520];
      unsigned __int32 *v522 = v486;
      v515 = v522 + 1;
      while (v506 != v516)
      {
        unsigned __int32 v523 = *--v506;
        *--v522 = v523;
      }
      *(void *)uint64_t v12 = v522;
      *(void *)(v12 + 8) = v515;
      *(void *)(v12 + 16) = v463;
      if (v516)
      {
        operator delete(v516);
        v463 = *v464;
      }
      unsigned __int32 v496 = a9.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v506 = v486;
      v515 = v506 + 1;
    }
    *(void *)(v12 + 8) = v515;
    if (v515 >= (unsigned __int32 *)v463)
    {
      v525 = *(unsigned __int32 **)v12;
      uint64_t v526 = ((uint64_t)v515 - *(void *)v12) >> 2;
      unint64_t v527 = v526 + 1;
      if ((unint64_t)(v526 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v528 = v463 - (char *)v525;
      if (v528 >> 1 > v527) {
        unint64_t v527 = v528 >> 1;
      }
      if ((unint64_t)v528 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v529 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v529 = v527;
      }
      if (v529)
      {
        v530 = (char *)sub_20B05D1AC(v12 + 16, v529);
        unsigned __int32 v496 = a9.n128_u32[0];
        v531 = v530;
        v525 = *(unsigned __int32 **)v12;
        v515 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v531 = 0;
      }
      v532 = (unsigned __int32 *)&v531[4 * v526];
      v463 = &v531[4 * v529];
      unsigned __int32 *v532 = v496;
      v524 = v532 + 1;
      while (v515 != v525)
      {
        unsigned __int32 v533 = *--v515;
        *--v532 = v533;
      }
      *(void *)uint64_t v12 = v532;
      *(void *)(v12 + 8) = v524;
      *(void *)(v12 + 16) = v463;
      if (v525)
      {
        operator delete(v525);
        v463 = *v464;
      }
    }
    else
    {
      unsigned __int32 *v515 = v496;
      v524 = v515 + 1;
    }
    *(void *)(v12 + 8) = v524;
    if (v524 >= (unsigned __int32 *)v463)
    {
      v535 = *(unsigned __int32 **)v12;
      uint64_t v536 = ((uint64_t)v524 - *(void *)v12) >> 2;
      unint64_t v537 = v536 + 1;
      if ((unint64_t)(v536 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v538 = v463 - (char *)v535;
      if (v538 >> 1 > v537) {
        unint64_t v537 = v538 >> 1;
      }
      if ((unint64_t)v538 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v539 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v539 = v537;
      }
      if (v539)
      {
        v540 = (char *)sub_20B05D1AC(v12 + 16, v539);
        v535 = *(unsigned __int32 **)v12;
        v524 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v540 = 0;
      }
      v541 = &v540[4 * v536];
      v463 = &v540[4 * v539];
      *(_DWORD *)v541 = v1360.n128_u32[1];
      v534 = (unsigned __int32 *)(v541 + 4);
      while (v524 != v535)
      {
        int v542 = *--v524;
        *((_DWORD *)v541 - 1) = v542;
        v541 -= 4;
      }
      *(void *)uint64_t v12 = v541;
      *(void *)(v12 + 8) = v534;
      *(void *)(v12 + 16) = v463;
      if (v535)
      {
        operator delete(v535);
        v463 = *v464;
      }
    }
    else
    {
      unsigned __int32 *v524 = v1360.n128_u32[1];
      v534 = v524 + 1;
    }
    *(void *)(v12 + 8) = v534;
    if (v534 >= (unsigned __int32 *)v463)
    {
      v544 = *(unsigned __int32 **)v12;
      uint64_t v545 = ((uint64_t)v534 - *(void *)v12) >> 2;
      unint64_t v546 = v545 + 1;
      if ((unint64_t)(v545 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v547 = v463 - (char *)v544;
      if (v547 >> 1 > v546) {
        unint64_t v546 = v547 >> 1;
      }
      if ((unint64_t)v547 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v548 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v548 = v546;
      }
      if (v548)
      {
        v549 = (char *)sub_20B05D1AC(v12 + 16, v548);
        v544 = *(unsigned __int32 **)v12;
        v534 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v549 = 0;
      }
      v550 = (unsigned __int32 *)&v549[4 * v545];
      v463 = &v549[4 * v548];
      unsigned __int32 *v550 = v486;
      v543 = v550 + 1;
      while (v534 != v544)
      {
        unsigned __int32 v551 = *--v534;
        *--v550 = v551;
      }
      *(void *)uint64_t v12 = v550;
      *(void *)(v12 + 8) = v543;
      *(void *)(v12 + 16) = v463;
      if (v544)
      {
        operator delete(v544);
        v463 = *v464;
      }
    }
    else
    {
      unsigned __int32 *v534 = v486;
      v543 = v534 + 1;
    }
    *(void *)(v12 + 8) = v543;
    if (v543 >= (unsigned __int32 *)v463)
    {
      v553 = *(unsigned __int32 **)v12;
      uint64_t v554 = ((uint64_t)v543 - *(void *)v12) >> 2;
      unint64_t v555 = v554 + 1;
      if ((unint64_t)(v554 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v556 = v463 - (char *)v553;
      if (v556 >> 1 > v555) {
        unint64_t v555 = v556 >> 1;
      }
      if ((unint64_t)v556 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v557 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v557 = v555;
      }
      if (v557)
      {
        v558 = (char *)sub_20B05D1AC(v12 + 16, v557);
        v553 = *(unsigned __int32 **)v12;
        v543 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v558 = 0;
      }
      v559 = &v558[4 * v554];
      v463 = &v558[4 * v557];
      *(_DWORD *)v559 = v1360.n128_u32[0];
      v552 = (unsigned __int32 *)(v559 + 4);
      while (v543 != v553)
      {
        int v560 = *--v543;
        *((_DWORD *)v559 - 1) = v560;
        v559 -= 4;
      }
      *(void *)uint64_t v12 = v559;
      *(void *)(v12 + 8) = v552;
      *(void *)(v12 + 16) = v463;
      if (v553)
      {
        operator delete(v553);
        v463 = *v464;
      }
    }
    else
    {
      unsigned __int32 *v543 = v1360.n128_u32[0];
      v552 = v543 + 1;
    }
    *(void *)(v12 + 8) = v552;
    if (v552 >= (unsigned __int32 *)v463)
    {
      v562 = *(unsigned __int32 **)v12;
      uint64_t v563 = ((uint64_t)v552 - *(void *)v12) >> 2;
      unint64_t v564 = v563 + 1;
      if ((unint64_t)(v563 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v565 = v463 - (char *)v562;
      if (v565 >> 1 > v564) {
        unint64_t v564 = v565 >> 1;
      }
      if ((unint64_t)v565 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v566 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v566 = v564;
      }
      if (v566)
      {
        v567 = (char *)sub_20B05D1AC(v12 + 16, v566);
        v562 = *(unsigned __int32 **)v12;
        v552 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v567 = 0;
      }
      v568 = &v567[4 * v563];
      v463 = &v567[4 * v566];
      *(_DWORD *)v568 = v1360.n128_u32[1];
      v561 = (unsigned __int32 *)(v568 + 4);
      while (v552 != v562)
      {
        int v569 = *--v552;
        *((_DWORD *)v568 - 1) = v569;
        v568 -= 4;
      }
      *(void *)uint64_t v12 = v568;
      *(void *)(v12 + 8) = v561;
      *(void *)(v12 + 16) = v463;
      if (v562)
      {
        operator delete(v562);
        v463 = *v464;
      }
    }
    else
    {
      unsigned __int32 *v552 = v1360.n128_u32[1];
      v561 = v552 + 1;
    }
    *(void *)(v12 + 8) = v561;
    if (v561 >= (unsigned __int32 *)v463)
    {
      v571 = *(unsigned __int32 **)v12;
      uint64_t v572 = ((uint64_t)v561 - *(void *)v12) >> 2;
      unint64_t v573 = v572 + 1;
      if ((unint64_t)(v572 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v574 = v463 - (char *)v571;
      if (v574 >> 1 > v573) {
        unint64_t v573 = v574 >> 1;
      }
      if ((unint64_t)v574 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v575 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v575 = v573;
      }
      if (v575)
      {
        v576 = (char *)sub_20B05D1AC(v12 + 16, v575);
        v571 = *(unsigned __int32 **)v12;
        v561 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v576 = 0;
      }
      v577 = (unsigned __int32 *)&v576[4 * v572];
      v578 = &v576[4 * v575];
      unsigned __int32 *v577 = v486;
      v570 = v577 + 1;
      while (v561 != v571)
      {
        unsigned __int32 v579 = *--v561;
        *--v577 = v579;
      }
      *(void *)uint64_t v12 = v577;
      *(void *)(v12 + 8) = v570;
      *(void *)(v12 + 16) = v578;
      if (v571) {
        operator delete(v571);
      }
    }
    else
    {
      unsigned __int32 *v561 = v486;
      v570 = v561 + 1;
    }
    a10.n128_u64[0] = v1360.n128_u64[0];
    *(void *)(v12 + 8) = v570;
    if (a8 && a1)
    {
      int v580 = 0;
      v581 = (void *)(a8 + 16);
      v582 = *(_DWORD **)(a8 + 8);
      do
      {
        if ((unint64_t)v582 >= *v581)
        {
          v584 = *(_DWORD **)a8;
          uint64_t v585 = ((uint64_t)v582 - *(void *)a8) >> 2;
          unint64_t v586 = v585 + 1;
          if ((unint64_t)(v585 + 1) >> 62) {
            goto LABEL_2263;
          }
          uint64_t v587 = *v581 - (void)v584;
          if (v587 >> 1 > v586) {
            unint64_t v586 = v587 >> 1;
          }
          if ((unint64_t)v587 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v588 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v588 = v586;
          }
          if (v588)
          {
            v589 = (char *)sub_20B05D1AC(a8 + 16, v588);
            v584 = *(_DWORD **)a8;
            v582 = *(_DWORD **)(a8 + 8);
          }
          else
          {
            v589 = 0;
          }
          v590 = &v589[4 * v585];
          *(_DWORD *)v590 = v15;
          v583 = v590 + 4;
          while (v582 != v584)
          {
            int v591 = *--v582;
            *((_DWORD *)v590 - 1) = v591;
            v590 -= 4;
          }
          *(void *)a8 = v590;
          *(void *)(a8 + 8) = v583;
          *(void *)(a8 + 16) = &v589[4 * v588];
          if (v584) {
            operator delete(v584);
          }
          a10.n128_u64[0] = v1360.n128_u64[0];
        }
        else
        {
          _DWORD *v582 = v15;
          v583 = v582 + 1;
        }
        *(void *)(a8 + 8) = v583;
        ++v580;
        v582 = v583;
      }
      while (v580 != 4);
    }
    if (a7)
    {
      int v592 = 0;
      v593 = a7 + 2;
      v594 = a7[1];
      do
      {
        v595 = *v593;
        if (v594 >= *v593)
        {
          v597 = *a7;
          uint64_t v598 = (v594 - *a7) >> 2;
          unint64_t v599 = v598 + 1;
          if ((unint64_t)(v598 + 1) >> 62) {
            goto LABEL_2262;
          }
          uint64_t v600 = v595 - v597;
          if (v600 >> 1 > v599) {
            unint64_t v599 = v600 >> 1;
          }
          if ((unint64_t)v600 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v601 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v601 = v599;
          }
          if (v601)
          {
            v602 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v601);
            v597 = *a7;
            v594 = a7[1];
          }
          else
          {
            v602 = 0;
          }
          v603 = &v602[4 * v598];
          *(_DWORD *)v603 = 1065353216;
          v596 = v603 + 4;
          while (v594 != v597)
          {
            int v604 = *((_DWORD *)v594 - 1);
            v594 -= 4;
            *((_DWORD *)v603 - 1) = v604;
            v603 -= 4;
          }
          v595 = &v602[4 * v601];
          *a7 = v603;
          a7[1] = v596;
          a7[2] = v595;
          if (v597)
          {
            operator delete(v597);
            v595 = *v593;
          }
          a10.n128_u64[0] = v1360.n128_u64[0];
        }
        else
        {
          *(_DWORD *)v594 = 1065353216;
          v596 = v594 + 4;
        }
        a7[1] = v596;
        if (v596 >= v595)
        {
          v606 = *a7;
          uint64_t v607 = (v596 - *a7) >> 2;
          unint64_t v608 = v607 + 1;
          if ((unint64_t)(v607 + 1) >> 62) {
            goto LABEL_2262;
          }
          uint64_t v609 = v595 - v606;
          if (v609 >> 1 > v608) {
            unint64_t v608 = v609 >> 1;
          }
          if ((unint64_t)v609 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v610 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v610 = v608;
          }
          if (v610)
          {
            v611 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v610);
            v606 = *a7;
            v596 = a7[1];
          }
          else
          {
            v611 = 0;
          }
          v612 = &v611[4 * v607];
          *(_DWORD *)v612 = 0;
          v605 = v612 + 4;
          while (v596 != v606)
          {
            int v613 = *((_DWORD *)v596 - 1);
            v596 -= 4;
            *((_DWORD *)v612 - 1) = v613;
            v612 -= 4;
          }
          v595 = &v611[4 * v610];
          *a7 = v612;
          a7[1] = v605;
          a7[2] = v595;
          if (v606)
          {
            operator delete(v606);
            v595 = *v593;
          }
          a10.n128_u64[0] = v1360.n128_u64[0];
        }
        else
        {
          *(_DWORD *)v596 = 0;
          v605 = v596 + 4;
        }
        a7[1] = v605;
        if (v605 >= v595)
        {
          v614 = *a7;
          uint64_t v615 = (v605 - *a7) >> 2;
          unint64_t v616 = v615 + 1;
          if ((unint64_t)(v615 + 1) >> 62) {
            goto LABEL_2262;
          }
          uint64_t v617 = v595 - v614;
          if (v617 >> 1 > v616) {
            unint64_t v616 = v617 >> 1;
          }
          if ((unint64_t)v617 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v618 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v618 = v616;
          }
          if (v618)
          {
            v619 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v618);
            v614 = *a7;
            v605 = a7[1];
          }
          else
          {
            v619 = 0;
          }
          v620 = &v619[4 * v615];
          *(_DWORD *)v620 = 0;
          v594 = v620 + 4;
          while (v605 != v614)
          {
            int v621 = *((_DWORD *)v605 - 1);
            v605 -= 4;
            *((_DWORD *)v620 - 1) = v621;
            v620 -= 4;
          }
          *a7 = v620;
          a7[1] = v594;
          a7[2] = &v619[4 * v618];
          if (v614) {
            operator delete(v614);
          }
          a10.n128_u64[0] = v1360.n128_u64[0];
        }
        else
        {
          *(_DWORD *)v605 = 0;
          v594 = v605 + 4;
        }
        a7[1] = v594;
        ++v592;
      }
      while (v592 != 4);
    }
    int v622 = v1354 + a4;
    v624 = a5 + 2;
    v623 = a5[2];
    v625 = a5[1];
    if (v625 >= v623)
    {
      v627 = *a5;
      uint64_t v628 = (v625 - *a5) >> 2;
      unint64_t v629 = v628 + 1;
      if ((unint64_t)(v628 + 1) >> 62) {
        goto LABEL_2266;
      }
      uint64_t v630 = v623 - v627;
      if (v630 >> 1 > v629) {
        unint64_t v629 = v630 >> 1;
      }
      if ((unint64_t)v630 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v631 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v631 = v629;
      }
      if (v631)
      {
        v632 = (char *)sub_20B05D1AC((uint64_t)(a5 + 2), v631);
        v627 = *a5;
        v625 = a5[1];
      }
      else
      {
        v632 = 0;
      }
      v633 = &v632[4 * v628];
      v623 = &v632[4 * v631];
      *(_DWORD *)v633 = v622;
      v626 = v633 + 4;
      while (v625 != v627)
      {
        int v634 = *((_DWORD *)v625 - 1);
        v625 -= 4;
        *((_DWORD *)v633 - 1) = v634;
        v633 -= 4;
      }
      *a5 = v633;
      a5[1] = v626;
      a5[2] = v623;
      if (v627)
      {
        operator delete(v627);
        v623 = *v624;
      }
      a10.n128_u64[0] = v1360.n128_u64[0];
    }
    else
    {
      *(_DWORD *)v625 = v622;
      v626 = v625 + 4;
    }
    a5[1] = v626;
    int v635 = v622 + 1;
    if (v626 >= v623)
    {
      v637 = *a5;
      uint64_t v638 = (v626 - *a5) >> 2;
      unint64_t v639 = v638 + 1;
      if ((unint64_t)(v638 + 1) >> 62) {
        goto LABEL_2266;
      }
      uint64_t v640 = v623 - v637;
      if (v640 >> 1 > v639) {
        unint64_t v639 = v640 >> 1;
      }
      if ((unint64_t)v640 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v641 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v641 = v639;
      }
      if (v641)
      {
        v642 = (char *)sub_20B05D1AC((uint64_t)v624, v641);
        v637 = *a5;
        v626 = a5[1];
      }
      else
      {
        v642 = 0;
      }
      v643 = &v642[4 * v638];
      v623 = &v642[4 * v641];
      *(_DWORD *)v643 = v635;
      v636 = v643 + 4;
      while (v626 != v637)
      {
        int v644 = *((_DWORD *)v626 - 1);
        v626 -= 4;
        *((_DWORD *)v643 - 1) = v644;
        v643 -= 4;
      }
      *a5 = v643;
      a5[1] = v636;
      a5[2] = v623;
      if (v637)
      {
        operator delete(v637);
        v623 = *v624;
      }
      a10.n128_u64[0] = v1360.n128_u64[0];
    }
    else
    {
      *(_DWORD *)v626 = v635;
      v636 = v626 + 4;
    }
    a5[1] = v636;
    int v645 = v622 + 2;
    if (v636 < v623)
    {
      *(_DWORD *)v636 = v645;
      v646 = v636 + 4;
      uint64_t v12 = a6;
      goto LABEL_1088;
    }
    v647 = *a5;
    uint64_t v648 = (v636 - *a5) >> 2;
    unint64_t v649 = v648 + 1;
    if (!((unint64_t)(v648 + 1) >> 62))
    {
      uint64_t v650 = v623 - v647;
      if (v650 >> 1 > v649) {
        unint64_t v649 = v650 >> 1;
      }
      if ((unint64_t)v650 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v651 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v651 = v649;
      }
      if (v651)
      {
        v652 = (char *)sub_20B05D1AC((uint64_t)v624, v651);
        v647 = *a5;
        v636 = a5[1];
      }
      else
      {
        v652 = 0;
      }
      uint64_t v12 = a6;
      v653 = &v652[4 * v648];
      v623 = &v652[4 * v651];
      *(_DWORD *)v653 = v645;
      v646 = v653 + 4;
      while (v636 != v647)
      {
        int v654 = *((_DWORD *)v636 - 1);
        v636 -= 4;
        *((_DWORD *)v653 - 1) = v654;
        v653 -= 4;
      }
      *a5 = v653;
      a5[1] = v646;
      a5[2] = v623;
      if (v647)
      {
        operator delete(v647);
        v623 = *v624;
      }
      a10.n128_u64[0] = v1360.n128_u64[0];
LABEL_1088:
      char v14 = a3;
      a5[1] = v646;
      int v1347 = v622 + 2;
      if (v646 >= v623)
      {
        v656 = *a5;
        uint64_t v657 = (v646 - *a5) >> 2;
        unint64_t v658 = v657 + 1;
        if ((unint64_t)(v657 + 1) >> 62) {
          goto LABEL_2267;
        }
        uint64_t v659 = v623 - v656;
        if (v659 >> 1 > v658) {
          unint64_t v658 = v659 >> 1;
        }
        if ((unint64_t)v659 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v660 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v660 = v658;
        }
        if (v660)
        {
          v661 = (char *)sub_20B05D1AC((uint64_t)v624, v660);
          v656 = *a5;
          v646 = a5[1];
        }
        else
        {
          v661 = 0;
        }
        v662 = &v661[4 * v657];
        v623 = &v661[4 * v660];
        *(_DWORD *)v662 = v635;
        v655 = v662 + 4;
        if (v646 == v656)
        {
          int v15 = a2;
        }
        else
        {
          int v15 = a2;
          do
          {
            int v663 = *((_DWORD *)v646 - 1);
            v646 -= 4;
            *((_DWORD *)v662 - 1) = v663;
            v662 -= 4;
          }
          while (v646 != v656);
        }
        uint64_t v13 = a5;
        *a5 = v662;
        a5[1] = v655;
        a5[2] = v623;
        if (v656)
        {
          operator delete(v656);
          v623 = *v624;
        }
        a10.n128_u64[0] = v1360.n128_u64[0];
      }
      else
      {
        *(_DWORD *)v646 = v635;
        v655 = v646 + 4;
        uint64_t v13 = a5;
        int v15 = a2;
      }
      v13[1] = v655;
      int v664 = v622 + 3;
      if (v655 >= v623)
      {
        v666 = *v13;
        uint64_t v667 = (v655 - *v13) >> 2;
        unint64_t v668 = v667 + 1;
        if ((unint64_t)(v667 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v669 = v623 - v666;
        if (v669 >> 1 > v668) {
          unint64_t v668 = v669 >> 1;
        }
        if ((unint64_t)v669 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v670 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v670 = v668;
        }
        if (v670)
        {
          v671 = (char *)sub_20B05D1AC((uint64_t)v624, v670);
          v666 = *v13;
          v655 = v13[1];
        }
        else
        {
          v671 = 0;
        }
        v672 = &v671[4 * v667];
        v623 = &v671[4 * v670];
        *(_DWORD *)v672 = v664;
        v665 = v672 + 4;
        while (v655 != v666)
        {
          int v673 = *((_DWORD *)v655 - 1);
          v655 -= 4;
          *((_DWORD *)v672 - 1) = v673;
          v672 -= 4;
        }
        *uint64_t v13 = v672;
        v13[1] = v665;
        v13[2] = v623;
        if (v666)
        {
          operator delete(v666);
          v623 = *v624;
        }
        a10.n128_u64[0] = v1360.n128_u64[0];
      }
      else
      {
        *(_DWORD *)v655 = v664;
        v665 = v655 + 4;
      }
      v13[1] = v665;
      if (v665 >= v623)
      {
        v675 = *v13;
        uint64_t v676 = (v665 - *v13) >> 2;
        unint64_t v677 = v676 + 1;
        if ((unint64_t)(v676 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v678 = v623 - v675;
        if (v678 >> 1 > v677) {
          unint64_t v677 = v678 >> 1;
        }
        if ((unint64_t)v678 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v679 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v679 = v677;
        }
        if (v679)
        {
          v680 = (char *)sub_20B05D1AC((uint64_t)v624, v679);
          v675 = *v13;
          v665 = v13[1];
        }
        else
        {
          v680 = 0;
        }
        v681 = &v680[4 * v676];
        v682 = &v680[4 * v679];
        *(_DWORD *)v681 = v1347;
        v674 = v681 + 4;
        while (v665 != v675)
        {
          int v683 = *((_DWORD *)v665 - 1);
          v665 -= 4;
          *((_DWORD *)v681 - 1) = v683;
          v681 -= 4;
        }
        *uint64_t v13 = v681;
        v13[1] = v674;
        v13[2] = v682;
        if (v675) {
          operator delete(v675);
        }
        a10.n128_u64[0] = v1360.n128_u64[0];
      }
      else
      {
        *(_DWORD *)v665 = v1347;
        v674 = v665 + 4;
      }
      v13[1] = v674;
      int v16 = v1354 + 4;
      if ((a3 & 1) == 0) {
        goto LABEL_6;
      }
LABEL_1142:
      v685 = (char **)(v12 + 16);
      v684 = *(char **)(v12 + 16);
      v686 = *(unsigned __int32 **)(v12 + 8);
      if (v686 >= (unsigned __int32 *)v684)
      {
        v688 = *(unsigned __int32 **)v12;
        uint64_t v689 = ((uint64_t)v686 - *(void *)v12) >> 2;
        unint64_t v690 = v689 + 1;
        if ((unint64_t)(v689 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v691 = v684 - (char *)v688;
        if (v691 >> 1 > v690) {
          unint64_t v690 = v691 >> 1;
        }
        if ((unint64_t)v691 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v692 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v692 = v690;
        }
        if (v692)
        {
          v693 = (char *)sub_20B05D1AC(v12 + 16, v692);
          a10.n128_u32[0] = v1360.n128_u32[0];
          v694 = v693;
          v688 = *(unsigned __int32 **)v12;
          v686 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v694 = 0;
        }
        v695 = &v694[4 * v689];
        v684 = &v694[4 * v692];
        *(_DWORD *)v695 = a10.n128_u32[0];
        v687 = (unsigned __int32 *)(v695 + 4);
        while (v686 != v688)
        {
          int v696 = *--v686;
          *((_DWORD *)v695 - 1) = v696;
          v695 -= 4;
        }
        *(void *)uint64_t v12 = v695;
        *(void *)(v12 + 8) = v687;
        *(void *)(v12 + 16) = v684;
        if (v688)
        {
          operator delete(v688);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v686 = a10.n128_u32[0];
        v687 = v686 + 1;
      }
      *(void *)(v12 + 8) = v687;
      unsigned __int32 v697 = a9.n128_u32[2];
      int v1355 = v16;
      if (v687 >= (unsigned __int32 *)v684)
      {
        v699 = *(unsigned __int32 **)v12;
        uint64_t v700 = ((uint64_t)v687 - *(void *)v12) >> 2;
        unint64_t v701 = v700 + 1;
        if ((unint64_t)(v700 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v702 = v684 - (char *)v699;
        if (v702 >> 1 > v701) {
          unint64_t v701 = v702 >> 1;
        }
        if ((unint64_t)v702 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v703 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v703 = v701;
        }
        if (v703)
        {
          v704 = (char *)sub_20B05D1AC(v12 + 16, v703);
          v699 = *(unsigned __int32 **)v12;
          v687 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v704 = 0;
        }
        v705 = &v704[4 * v700];
        v684 = &v704[4 * v703];
        *(_DWORD *)v705 = a9.n128_u32[1];
        v698 = (unsigned __int32 *)(v705 + 4);
        while (v687 != v699)
        {
          int v706 = *--v687;
          *((_DWORD *)v705 - 1) = v706;
          v705 -= 4;
        }
        *(void *)uint64_t v12 = v705;
        *(void *)(v12 + 8) = v698;
        *(void *)(v12 + 16) = v684;
        if (v699)
        {
          operator delete(v699);
          v684 = *v685;
        }
        unsigned __int32 v697 = a9.n128_u32[2];
      }
      else
      {
        unsigned __int32 *v687 = a9.n128_u32[1];
        v698 = v687 + 1;
      }
      *(void *)(v12 + 8) = v698;
      unsigned __int32 v707 = v697;
      if (v698 >= (unsigned __int32 *)v684)
      {
        v709 = *(unsigned __int32 **)v12;
        uint64_t v710 = ((uint64_t)v698 - *(void *)v12) >> 2;
        unint64_t v711 = v710 + 1;
        if ((unint64_t)(v710 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v712 = v684 - (char *)v709;
        if (v712 >> 1 > v711) {
          unint64_t v711 = v712 >> 1;
        }
        if ((unint64_t)v712 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v713 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v713 = v711;
        }
        if (v713)
        {
          v714 = (char *)sub_20B05D1AC(v12 + 16, v713);
          v709 = *(unsigned __int32 **)v12;
          v698 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v714 = 0;
        }
        v715 = (unsigned __int32 *)&v714[4 * v710];
        v684 = &v714[4 * v713];
        unsigned __int32 *v715 = v707;
        v708 = v715 + 1;
        while (v698 != v709)
        {
          unsigned __int32 v716 = *--v698;
          *--v715 = v716;
        }
        *(void *)uint64_t v12 = v715;
        *(void *)(v12 + 8) = v708;
        *(void *)(v12 + 16) = v684;
        if (v709)
        {
          operator delete(v709);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v698 = v697;
        v708 = v698 + 1;
      }
      *(void *)(v12 + 8) = v708;
      if (v708 >= (unsigned __int32 *)v684)
      {
        v719 = *(unsigned __int32 **)v12;
        uint64_t v720 = ((uint64_t)v708 - *(void *)v12) >> 2;
        unint64_t v721 = v720 + 1;
        if ((unint64_t)(v720 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v722 = v684 - (char *)v719;
        if (v722 >> 1 > v721) {
          unint64_t v721 = v722 >> 1;
        }
        if ((unint64_t)v722 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v723 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v723 = v721;
        }
        if (v723)
        {
          v724 = (char *)sub_20B05D1AC(v12 + 16, v723);
          v719 = *(unsigned __int32 **)v12;
          v708 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v724 = 0;
        }
        v725 = &v724[4 * v720];
        v684 = &v724[4 * v723];
        *(_DWORD *)v725 = v1360.n128_u32[0];
        v718 = (unsigned __int32 *)(v725 + 4);
        while (v708 != v719)
        {
          int v726 = *--v708;
          *((_DWORD *)v725 - 1) = v726;
          v725 -= 4;
        }
        *(void *)uint64_t v12 = v725;
        *(void *)(v12 + 8) = v718;
        *(void *)(v12 + 16) = v684;
        if (v719)
        {
          operator delete(v719);
          v684 = *v685;
        }
        unsigned __int32 v717 = v1360.n128_u32[1];
      }
      else
      {
        unsigned __int32 v717 = v1360.n128_u32[1];
        unsigned __int32 *v708 = v1360.n128_u32[0];
        v718 = v708 + 1;
      }
      *(void *)(v12 + 8) = v718;
      unsigned __int32 v727 = v717;
      if (v718 >= (unsigned __int32 *)v684)
      {
        v729 = *(unsigned __int32 **)v12;
        uint64_t v730 = ((uint64_t)v718 - *(void *)v12) >> 2;
        unint64_t v731 = v730 + 1;
        if ((unint64_t)(v730 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v732 = v684 - (char *)v729;
        if (v732 >> 1 > v731) {
          unint64_t v731 = v732 >> 1;
        }
        if ((unint64_t)v732 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v733 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v733 = v731;
        }
        if (v733)
        {
          v734 = (char *)sub_20B05D1AC(v12 + 16, v733);
          v729 = *(unsigned __int32 **)v12;
          v718 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v734 = 0;
        }
        v735 = &v734[4 * v730];
        v684 = &v734[4 * v733];
        *(_DWORD *)v735 = v727;
        v728 = (unsigned __int32 *)(v735 + 4);
        while (v718 != v729)
        {
          int v736 = *--v718;
          *((_DWORD *)v735 - 1) = v736;
          v735 -= 4;
        }
        *(void *)uint64_t v12 = v735;
        *(void *)(v12 + 8) = v728;
        *(void *)(v12 + 16) = v684;
        if (v729)
        {
          operator delete(v729);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v718 = v717;
        v728 = v718 + 1;
      }
      *(void *)(v12 + 8) = v728;
      if (v728 >= (unsigned __int32 *)v684)
      {
        v738 = *(unsigned __int32 **)v12;
        uint64_t v739 = ((uint64_t)v728 - *(void *)v12) >> 2;
        unint64_t v740 = v739 + 1;
        if ((unint64_t)(v739 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v741 = v684 - (char *)v738;
        if (v741 >> 1 > v740) {
          unint64_t v740 = v741 >> 1;
        }
        if ((unint64_t)v741 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v742 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v742 = v740;
        }
        if (v742)
        {
          v743 = (char *)sub_20B05D1AC(v12 + 16, v742);
          v738 = *(unsigned __int32 **)v12;
          v728 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v743 = 0;
        }
        v744 = (unsigned __int32 *)&v743[4 * v739];
        v684 = &v743[4 * v742];
        unsigned __int32 *v744 = v707;
        v737 = v744 + 1;
        while (v728 != v738)
        {
          unsigned __int32 v745 = *--v728;
          *--v744 = v745;
        }
        *(void *)uint64_t v12 = v744;
        *(void *)(v12 + 8) = v737;
        *(void *)(v12 + 16) = v684;
        if (v738)
        {
          operator delete(v738);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v728 = v707;
        v737 = v728 + 1;
      }
      *(void *)(v12 + 8) = v737;
      if (v737 >= (unsigned __int32 *)v684)
      {
        v747 = *(unsigned __int32 **)v12;
        uint64_t v748 = ((uint64_t)v737 - *(void *)v12) >> 2;
        unint64_t v749 = v748 + 1;
        if ((unint64_t)(v748 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v750 = v684 - (char *)v747;
        if (v750 >> 1 > v749) {
          unint64_t v749 = v750 >> 1;
        }
        if ((unint64_t)v750 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v751 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v751 = v749;
        }
        if (v751)
        {
          v752 = (char *)sub_20B05D1AC(v12 + 16, v751);
          v747 = *(unsigned __int32 **)v12;
          v737 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v752 = 0;
        }
        v753 = &v752[4 * v748];
        v684 = &v752[4 * v751];
        *(_DWORD *)v753 = v1360.n128_u32[0];
        v746 = (unsigned __int32 *)(v753 + 4);
        while (v737 != v747)
        {
          int v754 = *--v737;
          *((_DWORD *)v753 - 1) = v754;
          v753 -= 4;
        }
        *(void *)uint64_t v12 = v753;
        *(void *)(v12 + 8) = v746;
        *(void *)(v12 + 16) = v684;
        if (v747)
        {
          operator delete(v747);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v737 = v1360.n128_u32[0];
        v746 = v737 + 1;
      }
      *(void *)(v12 + 8) = v746;
      if (v746 >= (unsigned __int32 *)v684)
      {
        v756 = *(unsigned __int32 **)v12;
        uint64_t v757 = ((uint64_t)v746 - *(void *)v12) >> 2;
        unint64_t v758 = v757 + 1;
        if ((unint64_t)(v757 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v759 = v684 - (char *)v756;
        if (v759 >> 1 > v758) {
          unint64_t v758 = v759 >> 1;
        }
        if ((unint64_t)v759 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v760 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v760 = v758;
        }
        if (v760)
        {
          v761 = (char *)sub_20B05D1AC(v12 + 16, v760);
          v756 = *(unsigned __int32 **)v12;
          v746 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v761 = 0;
        }
        v762 = &v761[4 * v757];
        v684 = &v761[4 * v760];
        *(_DWORD *)v762 = a9.n128_u32[1];
        v755 = (unsigned __int32 *)(v762 + 4);
        while (v746 != v756)
        {
          int v763 = *--v746;
          *((_DWORD *)v762 - 1) = v763;
          v762 -= 4;
        }
        *(void *)uint64_t v12 = v762;
        *(void *)(v12 + 8) = v755;
        *(void *)(v12 + 16) = v684;
        if (v756)
        {
          operator delete(v756);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v746 = a9.n128_u32[1];
        v755 = v746 + 1;
      }
      *(void *)(v12 + 8) = v755;
      if (v755 >= (unsigned __int32 *)v684)
      {
        v765 = *(unsigned __int32 **)v12;
        uint64_t v766 = ((uint64_t)v755 - *(void *)v12) >> 2;
        unint64_t v767 = v766 + 1;
        if ((unint64_t)(v766 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v768 = v684 - (char *)v765;
        if (v768 >> 1 > v767) {
          unint64_t v767 = v768 >> 1;
        }
        if ((unint64_t)v768 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v769 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v769 = v767;
        }
        if (v769)
        {
          v770 = (char *)sub_20B05D1AC(v12 + 16, v769);
          v765 = *(unsigned __int32 **)v12;
          v755 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v770 = 0;
        }
        v771 = &v770[4 * v766];
        v684 = &v770[4 * v769];
        *(_DWORD *)v771 = v1360.n128_u32[2];
        v764 = (unsigned __int32 *)(v771 + 4);
        while (v755 != v765)
        {
          int v772 = *--v755;
          *((_DWORD *)v771 - 1) = v772;
          v771 -= 4;
        }
        *(void *)uint64_t v12 = v771;
        *(void *)(v12 + 8) = v764;
        *(void *)(v12 + 16) = v684;
        if (v765)
        {
          operator delete(v765);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v755 = v1360.n128_u32[2];
        v764 = v755 + 1;
      }
      *(void *)(v12 + 8) = v764;
      if (v764 >= (unsigned __int32 *)v684)
      {
        v774 = *(unsigned __int32 **)v12;
        uint64_t v775 = ((uint64_t)v764 - *(void *)v12) >> 2;
        unint64_t v776 = v775 + 1;
        if ((unint64_t)(v775 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v777 = v684 - (char *)v774;
        if (v777 >> 1 > v776) {
          unint64_t v776 = v777 >> 1;
        }
        if ((unint64_t)v777 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v778 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v778 = v776;
        }
        if (v778)
        {
          v779 = (char *)sub_20B05D1AC(v12 + 16, v778);
          v774 = *(unsigned __int32 **)v12;
          v764 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v779 = 0;
        }
        v780 = &v779[4 * v775];
        v684 = &v779[4 * v778];
        *(_DWORD *)v780 = v1360.n128_u32[0];
        v773 = (unsigned __int32 *)(v780 + 4);
        while (v764 != v774)
        {
          int v781 = *--v764;
          *((_DWORD *)v780 - 1) = v781;
          v780 -= 4;
        }
        *(void *)uint64_t v12 = v780;
        *(void *)(v12 + 8) = v773;
        *(void *)(v12 + 16) = v684;
        if (v774)
        {
          operator delete(v774);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v764 = v1360.n128_u32[0];
        v773 = v764 + 1;
      }
      *(void *)(v12 + 8) = v773;
      if (v773 >= (unsigned __int32 *)v684)
      {
        v783 = *(unsigned __int32 **)v12;
        uint64_t v784 = ((uint64_t)v773 - *(void *)v12) >> 2;
        unint64_t v785 = v784 + 1;
        if ((unint64_t)(v784 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v786 = v684 - (char *)v783;
        if (v786 >> 1 > v785) {
          unint64_t v785 = v786 >> 1;
        }
        if ((unint64_t)v786 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v787 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v787 = v785;
        }
        if (v787)
        {
          v788 = (char *)sub_20B05D1AC(v12 + 16, v787);
          v783 = *(unsigned __int32 **)v12;
          v773 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v788 = 0;
        }
        v789 = &v788[4 * v784];
        v684 = &v788[4 * v787];
        *(_DWORD *)v789 = v727;
        v782 = (unsigned __int32 *)(v789 + 4);
        while (v773 != v783)
        {
          int v790 = *--v773;
          *((_DWORD *)v789 - 1) = v790;
          v789 -= 4;
        }
        *(void *)uint64_t v12 = v789;
        *(void *)(v12 + 8) = v782;
        *(void *)(v12 + 16) = v684;
        if (v783)
        {
          operator delete(v783);
          v684 = *v685;
        }
      }
      else
      {
        unsigned __int32 *v773 = v727;
        v782 = v773 + 1;
      }
      *(void *)(v12 + 8) = v782;
      if (v782 >= (unsigned __int32 *)v684)
      {
        v792 = *(unsigned __int32 **)v12;
        uint64_t v793 = ((uint64_t)v782 - *(void *)v12) >> 2;
        unint64_t v794 = v793 + 1;
        if ((unint64_t)(v793 + 1) >> 62) {
          goto LABEL_2264;
        }
        uint64_t v795 = v684 - (char *)v792;
        if (v795 >> 1 > v794) {
          unint64_t v794 = v795 >> 1;
        }
        if ((unint64_t)v795 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v796 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v796 = v794;
        }
        if (v796)
        {
          v797 = (char *)sub_20B05D1AC(v12 + 16, v796);
          v792 = *(unsigned __int32 **)v12;
          v782 = *(unsigned __int32 **)(v12 + 8);
        }
        else
        {
          v797 = 0;
        }
        v798 = &v797[4 * v793];
        v799 = &v797[4 * v796];
        *(_DWORD *)v798 = v1360.n128_u32[2];
        v791 = v798 + 4;
        while (v782 != v792)
        {
          int v800 = *--v782;
          *((_DWORD *)v798 - 1) = v800;
          v798 -= 4;
        }
        *(void *)uint64_t v12 = v798;
        *(void *)(v12 + 8) = v791;
        *(void *)(v12 + 16) = v799;
        if (v792) {
          operator delete(v792);
        }
      }
      else
      {
        unsigned __int32 *v782 = v1360.n128_u32[2];
        v791 = v782 + 1;
      }
      *(void *)(v12 + 8) = v791;
      a10.n128_u32[1] = v1360.n128_u32[1];
      if (a8 && a1)
      {
        int v801 = 0;
        v802 = (void *)(a8 + 16);
        v803 = *(_DWORD **)(a8 + 8);
        do
        {
          if ((unint64_t)v803 >= *v802)
          {
            v805 = *(_DWORD **)a8;
            uint64_t v806 = ((uint64_t)v803 - *(void *)a8) >> 2;
            unint64_t v807 = v806 + 1;
            if ((unint64_t)(v806 + 1) >> 62) {
              goto LABEL_2263;
            }
            uint64_t v808 = *v802 - (void)v805;
            if (v808 >> 1 > v807) {
              unint64_t v807 = v808 >> 1;
            }
            if ((unint64_t)v808 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v809 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v809 = v807;
            }
            if (v809)
            {
              v810 = (char *)sub_20B05D1AC(a8 + 16, v809);
              v805 = *(_DWORD **)a8;
              v803 = *(_DWORD **)(a8 + 8);
            }
            else
            {
              v810 = 0;
            }
            v811 = &v810[4 * v806];
            *(_DWORD *)v811 = v15;
            v804 = v811 + 4;
            while (v803 != v805)
            {
              int v812 = *--v803;
              *((_DWORD *)v811 - 1) = v812;
              v811 -= 4;
            }
            *(void *)a8 = v811;
            *(void *)(a8 + 8) = v804;
            *(void *)(a8 + 16) = &v810[4 * v809];
            if (v805) {
              operator delete(v805);
            }
            a10.n128_u32[1] = v1360.n128_u32[1];
          }
          else
          {
            _DWORD *v803 = v15;
            v804 = v803 + 1;
          }
          *(void *)(a8 + 8) = v804;
          ++v801;
          v803 = v804;
        }
        while (v801 != 4);
      }
      if (a7)
      {
        int v813 = 0;
        v814 = a7 + 2;
        v815 = a7[1];
        do
        {
          v816 = *v814;
          if (v815 >= *v814)
          {
            v818 = *a7;
            uint64_t v819 = (v815 - *a7) >> 2;
            unint64_t v820 = v819 + 1;
            if ((unint64_t)(v819 + 1) >> 62) {
              goto LABEL_2262;
            }
            uint64_t v821 = v816 - v818;
            if (v821 >> 1 > v820) {
              unint64_t v820 = v821 >> 1;
            }
            if ((unint64_t)v821 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v822 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v822 = v820;
            }
            if (v822)
            {
              v823 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v822);
              v818 = *a7;
              v815 = a7[1];
            }
            else
            {
              v823 = 0;
            }
            v824 = &v823[4 * v819];
            *(_DWORD *)v824 = 0;
            v817 = v824 + 4;
            while (v815 != v818)
            {
              int v825 = *((_DWORD *)v815 - 1);
              v815 -= 4;
              *((_DWORD *)v824 - 1) = v825;
              v824 -= 4;
            }
            v816 = &v823[4 * v822];
            *a7 = v824;
            a7[1] = v817;
            a7[2] = v816;
            if (v818)
            {
              operator delete(v818);
              v816 = *v814;
            }
            a10.n128_u32[1] = v1360.n128_u32[1];
          }
          else
          {
            *(_DWORD *)v815 = 0;
            v817 = v815 + 4;
          }
          a7[1] = v817;
          if (v817 >= v816)
          {
            v827 = *a7;
            uint64_t v828 = (v817 - *a7) >> 2;
            unint64_t v829 = v828 + 1;
            if ((unint64_t)(v828 + 1) >> 62) {
              goto LABEL_2262;
            }
            uint64_t v830 = v816 - v827;
            if (v830 >> 1 > v829) {
              unint64_t v829 = v830 >> 1;
            }
            if ((unint64_t)v830 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v831 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v831 = v829;
            }
            if (v831)
            {
              v832 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v831);
              v827 = *a7;
              v817 = a7[1];
            }
            else
            {
              v832 = 0;
            }
            v833 = &v832[4 * v828];
            *(_DWORD *)v833 = 0;
            v826 = v833 + 4;
            while (v817 != v827)
            {
              int v834 = *((_DWORD *)v817 - 1);
              v817 -= 4;
              *((_DWORD *)v833 - 1) = v834;
              v833 -= 4;
            }
            v816 = &v832[4 * v831];
            *a7 = v833;
            a7[1] = v826;
            a7[2] = v816;
            if (v827)
            {
              operator delete(v827);
              v816 = *v814;
            }
            a10.n128_u32[1] = v1360.n128_u32[1];
          }
          else
          {
            *(_DWORD *)v817 = 0;
            v826 = v817 + 4;
          }
          a7[1] = v826;
          if (v826 >= v816)
          {
            v835 = *a7;
            uint64_t v836 = (v826 - *a7) >> 2;
            unint64_t v837 = v836 + 1;
            if ((unint64_t)(v836 + 1) >> 62) {
              goto LABEL_2262;
            }
            uint64_t v838 = v816 - v835;
            if (v838 >> 1 > v837) {
              unint64_t v837 = v838 >> 1;
            }
            if ((unint64_t)v838 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v839 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v839 = v837;
            }
            if (v839)
            {
              v840 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v839);
              v835 = *a7;
              v826 = a7[1];
            }
            else
            {
              v840 = 0;
            }
            v841 = &v840[4 * v836];
            *(_DWORD *)v841 = 1065353216;
            v815 = v841 + 4;
            while (v826 != v835)
            {
              int v842 = *((_DWORD *)v826 - 1);
              v826 -= 4;
              *((_DWORD *)v841 - 1) = v842;
              v841 -= 4;
            }
            *a7 = v841;
            a7[1] = v815;
            a7[2] = &v840[4 * v839];
            if (v835) {
              operator delete(v835);
            }
            a10.n128_u32[1] = v1360.n128_u32[1];
          }
          else
          {
            *(_DWORD *)v826 = 1065353216;
            v815 = v826 + 4;
          }
          a7[1] = v815;
          ++v813;
        }
        while (v813 != 4);
      }
      int v843 = v1355 + a4;
      v845 = a5 + 2;
      v844 = a5[2];
      v846 = a5[1];
      if (v846 >= v844)
      {
        v848 = *a5;
        uint64_t v849 = (v846 - *a5) >> 2;
        unint64_t v850 = v849 + 1;
        if ((unint64_t)(v849 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v851 = v844 - v848;
        if (v851 >> 1 > v850) {
          unint64_t v850 = v851 >> 1;
        }
        if ((unint64_t)v851 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v852 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v852 = v850;
        }
        if (v852)
        {
          v853 = (char *)sub_20B05D1AC((uint64_t)(a5 + 2), v852);
          v848 = *a5;
          v846 = a5[1];
        }
        else
        {
          v853 = 0;
        }
        v854 = &v853[4 * v849];
        v844 = &v853[4 * v852];
        *(_DWORD *)v854 = v843;
        v847 = v854 + 4;
        while (v846 != v848)
        {
          int v855 = *((_DWORD *)v846 - 1);
          v846 -= 4;
          *((_DWORD *)v854 - 1) = v855;
          v854 -= 4;
        }
        *a5 = v854;
        a5[1] = v847;
        a5[2] = v844;
        if (v848)
        {
          operator delete(v848);
          v844 = *v845;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v846 = v843;
        v847 = v846 + 4;
      }
      a5[1] = v847;
      int v856 = v843 + 3;
      if (v847 >= v844)
      {
        v858 = *a5;
        uint64_t v859 = (v847 - *a5) >> 2;
        unint64_t v860 = v859 + 1;
        if ((unint64_t)(v859 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v861 = v844 - v858;
        if (v861 >> 1 > v860) {
          unint64_t v860 = v861 >> 1;
        }
        if ((unint64_t)v861 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v862 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v862 = v860;
        }
        if (v862)
        {
          v863 = (char *)sub_20B05D1AC((uint64_t)v845, v862);
          v858 = *a5;
          v847 = a5[1];
        }
        else
        {
          v863 = 0;
        }
        v864 = &v863[4 * v859];
        v844 = &v863[4 * v862];
        *(_DWORD *)v864 = v856;
        v857 = v864 + 4;
        while (v847 != v858)
        {
          int v865 = *((_DWORD *)v847 - 1);
          v847 -= 4;
          *((_DWORD *)v864 - 1) = v865;
          v864 -= 4;
        }
        *a5 = v864;
        a5[1] = v857;
        a5[2] = v844;
        if (v858)
        {
          operator delete(v858);
          v844 = *v845;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v847 = v856;
        v857 = v847 + 4;
      }
      a5[1] = v857;
      int v866 = v843 + 2;
      if (v857 >= v844)
      {
        v868 = *a5;
        uint64_t v869 = (v857 - *a5) >> 2;
        unint64_t v870 = v869 + 1;
        if ((unint64_t)(v869 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v871 = v844 - v868;
        if (v871 >> 1 > v870) {
          unint64_t v870 = v871 >> 1;
        }
        if ((unint64_t)v871 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v872 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v872 = v870;
        }
        if (v872)
        {
          v873 = (char *)sub_20B05D1AC((uint64_t)v845, v872);
          v868 = *a5;
          v857 = a5[1];
        }
        else
        {
          v873 = 0;
        }
        v874 = &v873[4 * v869];
        v844 = &v873[4 * v872];
        *(_DWORD *)v874 = v866;
        v867 = v874 + 4;
        if (v857 == v868)
        {
          uint64_t v12 = a6;
        }
        else
        {
          uint64_t v12 = a6;
          do
          {
            int v875 = *((_DWORD *)v857 - 1);
            v857 -= 4;
            *((_DWORD *)v874 - 1) = v875;
            v874 -= 4;
          }
          while (v857 != v868);
        }
        *a5 = v874;
        a5[1] = v867;
        a5[2] = v844;
        if (v868)
        {
          operator delete(v868);
          v844 = *v845;
        }
        int v15 = a2;
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v857 = v866;
        v867 = v857 + 4;
        uint64_t v12 = a6;
        int v15 = a2;
      }
      a5[1] = v867;
      if (v867 >= v844)
      {
        v877 = *a5;
        uint64_t v878 = (v867 - *a5) >> 2;
        unint64_t v879 = v878 + 1;
        if ((unint64_t)(v878 + 1) >> 62) {
          goto LABEL_2267;
        }
        uint64_t v880 = v844 - v877;
        if (v880 >> 1 > v879) {
          unint64_t v879 = v880 >> 1;
        }
        if ((unint64_t)v880 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v881 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v881 = v879;
        }
        if (v881)
        {
          v882 = (char *)sub_20B05D1AC((uint64_t)v845, v881);
          v877 = *a5;
          v867 = a5[1];
        }
        else
        {
          v882 = 0;
        }
        v883 = &v882[4 * v878];
        v844 = &v882[4 * v881];
        *(_DWORD *)v883 = v843;
        v876 = v883 + 4;
        while (v867 != v877)
        {
          int v884 = *((_DWORD *)v867 - 1);
          v867 -= 4;
          *((_DWORD *)v883 - 1) = v884;
          v883 -= 4;
        }
        uint64_t v13 = a5;
        *a5 = v883;
        a5[1] = v876;
        a5[2] = v844;
        if (v877)
        {
          operator delete(v877);
          v844 = *v845;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v867 = v843;
        v876 = v867 + 4;
        uint64_t v13 = a5;
      }
      v13[1] = v876;
      int v885 = v843 + 1;
      if (v876 >= v844)
      {
        v887 = *v13;
        uint64_t v888 = (v876 - *v13) >> 2;
        unint64_t v889 = v888 + 1;
        if ((unint64_t)(v888 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v890 = v844 - v887;
        if (v890 >> 1 > v889) {
          unint64_t v889 = v890 >> 1;
        }
        if ((unint64_t)v890 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v891 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v891 = v889;
        }
        if (v891)
        {
          v892 = (char *)sub_20B05D1AC((uint64_t)v845, v891);
          v887 = *v13;
          v876 = v13[1];
        }
        else
        {
          v892 = 0;
        }
        v893 = &v892[4 * v888];
        v844 = &v892[4 * v891];
        *(_DWORD *)v893 = v885;
        v886 = v893 + 4;
        while (v876 != v887)
        {
          int v894 = *((_DWORD *)v876 - 1);
          v876 -= 4;
          *((_DWORD *)v893 - 1) = v894;
          v893 -= 4;
        }
        *uint64_t v13 = v893;
        v13[1] = v886;
        v13[2] = v844;
        if (v887)
        {
          operator delete(v887);
          v844 = *v845;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v876 = v885;
        v886 = v876 + 4;
      }
      v13[1] = v886;
      if (v886 >= v844)
      {
        v896 = *v13;
        uint64_t v897 = (v886 - *v13) >> 2;
        unint64_t v898 = v897 + 1;
        if ((unint64_t)(v897 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v899 = v844 - v896;
        if (v899 >> 1 > v898) {
          unint64_t v898 = v899 >> 1;
        }
        if ((unint64_t)v899 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v900 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v900 = v898;
        }
        if (v900)
        {
          v901 = (char *)sub_20B05D1AC((uint64_t)v845, v900);
          v896 = *v13;
          v886 = v13[1];
        }
        else
        {
          v901 = 0;
        }
        v902 = &v901[4 * v897];
        v903 = &v901[4 * v900];
        *(_DWORD *)v902 = v856;
        v895 = v902 + 4;
        if (v886 == v896)
        {
          char v14 = a3;
        }
        else
        {
          char v14 = a3;
          do
          {
            int v904 = *((_DWORD *)v886 - 1);
            v886 -= 4;
            *((_DWORD *)v902 - 1) = v904;
            v902 -= 4;
          }
          while (v886 != v896);
        }
        *uint64_t v13 = v902;
        v13[1] = v895;
        v13[2] = v903;
        if (v896) {
          operator delete(v896);
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v886 = v856;
        v895 = v886 + 4;
        char v14 = a3;
      }
      v13[1] = v895;
      int v16 = v1355 + 4;
      if ((v14 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_1518;
    }
LABEL_2266:
    sub_20B05D0BC();
  }
LABEL_5:
  if (v14) {
    goto LABEL_1142;
  }
LABEL_6:
  if ((v14 & 8) == 0)
  {
LABEL_7:
    if ((v14 & 4) == 0) {
      return (v16 + a4);
    }
    goto LABEL_1896;
  }
LABEL_1518:
  v906 = (char **)(v12 + 16);
  v905 = *(char **)(v12 + 16);
  v907 = *(unsigned __int32 **)(v12 + 8);
  if (v907 >= (unsigned __int32 *)v905)
  {
    v910 = *(unsigned __int32 **)v12;
    uint64_t v911 = ((uint64_t)v907 - *(void *)v12) >> 2;
    unint64_t v912 = v911 + 1;
    __n128 v908 = a9;
    if ((unint64_t)(v911 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v913 = v905 - (char *)v910;
    if (v913 >> 1 > v912) {
      unint64_t v912 = v913 >> 1;
    }
    if ((unint64_t)v913 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v914 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v914 = v912;
    }
    if (v914)
    {
      v915 = (char *)sub_20B05D1AC(v12 + 16, v914);
      __n128 v908 = a9;
      v916 = v915;
      v910 = *(unsigned __int32 **)v12;
      v907 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v916 = 0;
    }
    v917 = &v916[4 * v911];
    v905 = &v916[4 * v914];
    *(_DWORD *)v917 = v908.n128_u32[0];
    v909 = (unsigned __int32 *)(v917 + 4);
    while (v907 != v910)
    {
      int v918 = *--v907;
      *((_DWORD *)v917 - 1) = v918;
      v917 -= 4;
    }
    *(void *)uint64_t v12 = v917;
    *(void *)(v12 + 8) = v909;
    *(void *)(v12 + 16) = v905;
    if (v910)
    {
      operator delete(v910);
      __n128 v908 = a9;
      v905 = *v906;
    }
  }
  else
  {
    __n128 v908 = a9;
    unsigned __int32 *v907 = a9.n128_u32[0];
    v909 = v907 + 1;
  }
  *(void *)(v12 + 8) = v909;
  unsigned __int32 v919 = v908.n128_u32[1];
  int v1356 = v16;
  if (v909 >= (unsigned __int32 *)v905)
  {
    v921 = *(unsigned __int32 **)v12;
    uint64_t v922 = ((uint64_t)v909 - *(void *)v12) >> 2;
    unint64_t v923 = v922 + 1;
    if ((unint64_t)(v922 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v924 = v905 - (char *)v921;
    if (v924 >> 1 > v923) {
      unint64_t v923 = v924 >> 1;
    }
    if ((unint64_t)v924 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v925 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v925 = v923;
    }
    if (v925)
    {
      v926 = (char *)sub_20B05D1AC(v12 + 16, v925);
      v921 = *(unsigned __int32 **)v12;
      v909 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v926 = 0;
    }
    v927 = (unsigned __int32 *)&v926[4 * v922];
    v905 = &v926[4 * v925];
    unsigned __int32 *v927 = v919;
    v920 = v927 + 1;
    while (v909 != v921)
    {
      unsigned __int32 v928 = *--v909;
      *--v927 = v928;
    }
    *(void *)uint64_t v12 = v927;
    *(void *)(v12 + 8) = v920;
    *(void *)(v12 + 16) = v905;
    if (v921)
    {
      operator delete(v921);
      v905 = *v906;
    }
    __n128 v908 = a9;
  }
  else
  {
    unsigned __int32 *v909 = v908.n128_u32[1];
    v920 = v909 + 1;
  }
  *(void *)(v12 + 8) = v920;
  unsigned __int32 v929 = v908.n128_u32[2];
  if (v920 >= (unsigned __int32 *)v905)
  {
    v931 = *(unsigned __int32 **)v12;
    uint64_t v932 = ((uint64_t)v920 - *(void *)v12) >> 2;
    unint64_t v933 = v932 + 1;
    if ((unint64_t)(v932 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v934 = v905 - (char *)v931;
    if (v934 >> 1 > v933) {
      unint64_t v933 = v934 >> 1;
    }
    if ((unint64_t)v934 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v935 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v935 = v933;
    }
    if (v935)
    {
      v936 = (char *)sub_20B05D1AC(v12 + 16, v935);
      v931 = *(unsigned __int32 **)v12;
      v920 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v936 = 0;
    }
    v937 = (unsigned __int32 *)&v936[4 * v932];
    v905 = &v936[4 * v935];
    unsigned __int32 *v937 = v929;
    v930 = v937 + 1;
    while (v920 != v931)
    {
      unsigned __int32 v938 = *--v920;
      *--v937 = v938;
    }
    *(void *)uint64_t v12 = v937;
    *(void *)(v12 + 8) = v930;
    *(void *)(v12 + 16) = v905;
    if (v931)
    {
      operator delete(v931);
      v905 = *v906;
    }
    v908.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v920 = v908.n128_u32[2];
    v930 = v920 + 1;
  }
  *(void *)(v12 + 8) = v930;
  if (v930 >= (unsigned __int32 *)v905)
  {
    v940 = *(unsigned __int32 **)v12;
    uint64_t v941 = ((uint64_t)v930 - *(void *)v12) >> 2;
    unint64_t v942 = v941 + 1;
    if ((unint64_t)(v941 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v943 = v905 - (char *)v940;
    if (v943 >> 1 > v942) {
      unint64_t v942 = v943 >> 1;
    }
    if ((unint64_t)v943 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v944 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v944 = v942;
    }
    if (v944)
    {
      v945 = (char *)sub_20B05D1AC(v12 + 16, v944);
      v940 = *(unsigned __int32 **)v12;
      v930 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v945 = 0;
    }
    v946 = &v945[4 * v941];
    v905 = &v945[4 * v944];
    *(_DWORD *)v946 = v1360.n128_u32[0];
    v939 = (unsigned __int32 *)(v946 + 4);
    while (v930 != v940)
    {
      int v947 = *--v930;
      *((_DWORD *)v946 - 1) = v947;
      v946 -= 4;
    }
    *(void *)uint64_t v12 = v946;
    *(void *)(v12 + 8) = v939;
    *(void *)(v12 + 16) = v905;
    if (v940)
    {
      operator delete(v940);
      v905 = *v906;
    }
    v908.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v930 = v1360.n128_u32[0];
    v939 = v930 + 1;
  }
  *(void *)(v12 + 8) = v939;
  if (v939 >= (unsigned __int32 *)v905)
  {
    v949 = *(unsigned __int32 **)v12;
    uint64_t v950 = ((uint64_t)v939 - *(void *)v12) >> 2;
    unint64_t v951 = v950 + 1;
    if ((unint64_t)(v950 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v952 = v905 - (char *)v949;
    if (v952 >> 1 > v951) {
      unint64_t v951 = v952 >> 1;
    }
    if ((unint64_t)v952 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v953 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v953 = v951;
    }
    if (v953)
    {
      v954 = (char *)sub_20B05D1AC(v12 + 16, v953);
      v949 = *(unsigned __int32 **)v12;
      v939 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v954 = 0;
    }
    v955 = (unsigned __int32 *)&v954[4 * v950];
    v905 = &v954[4 * v953];
    unsigned __int32 *v955 = v919;
    v948 = v955 + 1;
    while (v939 != v949)
    {
      unsigned __int32 v956 = *--v939;
      *--v955 = v956;
    }
    *(void *)uint64_t v12 = v955;
    *(void *)(v12 + 8) = v948;
    *(void *)(v12 + 16) = v905;
    if (v949)
    {
      operator delete(v949);
      v905 = *v906;
    }
    v908.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v939 = v919;
    v948 = v939 + 1;
  }
  *(void *)(v12 + 8) = v948;
  if (v948 >= (unsigned __int32 *)v905)
  {
    v958 = *(unsigned __int32 **)v12;
    uint64_t v959 = ((uint64_t)v948 - *(void *)v12) >> 2;
    unint64_t v960 = v959 + 1;
    if ((unint64_t)(v959 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v961 = v905 - (char *)v958;
    if (v961 >> 1 > v960) {
      unint64_t v960 = v961 >> 1;
    }
    if ((unint64_t)v961 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v962 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v962 = v960;
    }
    if (v962)
    {
      v963 = (char *)sub_20B05D1AC(v12 + 16, v962);
      v958 = *(unsigned __int32 **)v12;
      v948 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v963 = 0;
    }
    v964 = (unsigned __int32 *)&v963[4 * v959];
    v905 = &v963[4 * v962];
    unsigned __int32 *v964 = v929;
    v957 = v964 + 1;
    while (v948 != v958)
    {
      unsigned __int32 v965 = *--v948;
      *--v964 = v965;
    }
    *(void *)uint64_t v12 = v964;
    *(void *)(v12 + 8) = v957;
    *(void *)(v12 + 16) = v905;
    if (v958)
    {
      operator delete(v958);
      v905 = *v906;
    }
    v908.n128_u32[0] = a9.n128_u32[0];
  }
  else
  {
    unsigned __int32 *v948 = v929;
    v957 = v948 + 1;
  }
  *(void *)(v12 + 8) = v957;
  if (v957 >= (unsigned __int32 *)v905)
  {
    v967 = *(unsigned __int32 **)v12;
    uint64_t v968 = ((uint64_t)v957 - *(void *)v12) >> 2;
    unint64_t v969 = v968 + 1;
    if ((unint64_t)(v968 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v970 = v905 - (char *)v967;
    if (v970 >> 1 > v969) {
      unint64_t v969 = v970 >> 1;
    }
    if ((unint64_t)v970 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v971 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v971 = v969;
    }
    if (v971)
    {
      v972 = (char *)sub_20B05D1AC(v12 + 16, v971);
      v908.n128_u32[0] = a9.n128_u32[0];
      v973 = v972;
      v967 = *(unsigned __int32 **)v12;
      v957 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v973 = 0;
    }
    v974 = &v973[4 * v968];
    v905 = &v973[4 * v971];
    *(_DWORD *)v974 = v908.n128_u32[0];
    v966 = (unsigned __int32 *)(v974 + 4);
    while (v957 != v967)
    {
      int v975 = *--v957;
      *((_DWORD *)v974 - 1) = v975;
      v974 -= 4;
    }
    *(void *)uint64_t v12 = v974;
    *(void *)(v12 + 8) = v966;
    *(void *)(v12 + 16) = v905;
    if (v967)
    {
      operator delete(v967);
      v905 = *v906;
    }
  }
  else
  {
    unsigned __int32 *v957 = v908.n128_u32[0];
    v966 = v957 + 1;
  }
  *(void *)(v12 + 8) = v966;
  if (v966 >= (unsigned __int32 *)v905)
  {
    v977 = *(unsigned __int32 **)v12;
    uint64_t v978 = ((uint64_t)v966 - *(void *)v12) >> 2;
    unint64_t v979 = v978 + 1;
    if ((unint64_t)(v978 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v980 = v905 - (char *)v977;
    if (v980 >> 1 > v979) {
      unint64_t v979 = v980 >> 1;
    }
    if ((unint64_t)v980 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v981 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v981 = v979;
    }
    if (v981)
    {
      v982 = (char *)sub_20B05D1AC(v12 + 16, v981);
      v977 = *(unsigned __int32 **)v12;
      v966 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v982 = 0;
    }
    v983 = (unsigned __int32 *)&v982[4 * v978];
    v905 = &v982[4 * v981];
    unsigned __int32 *v983 = v919;
    v976 = v983 + 1;
    while (v966 != v977)
    {
      unsigned __int32 v984 = *--v966;
      *--v983 = v984;
    }
    *(void *)uint64_t v12 = v983;
    *(void *)(v12 + 8) = v976;
    *(void *)(v12 + 16) = v905;
    if (v977)
    {
      operator delete(v977);
      v905 = *v906;
    }
  }
  else
  {
    unsigned __int32 *v966 = v919;
    v976 = v966 + 1;
  }
  *(void *)(v12 + 8) = v976;
  if (v976 >= (unsigned __int32 *)v905)
  {
    v986 = *(unsigned __int32 **)v12;
    uint64_t v987 = ((uint64_t)v976 - *(void *)v12) >> 2;
    unint64_t v988 = v987 + 1;
    if ((unint64_t)(v987 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v989 = v905 - (char *)v986;
    if (v989 >> 1 > v988) {
      unint64_t v988 = v989 >> 1;
    }
    if ((unint64_t)v989 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v990 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v990 = v988;
    }
    if (v990)
    {
      v991 = (char *)sub_20B05D1AC(v12 + 16, v990);
      v986 = *(unsigned __int32 **)v12;
      v976 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v991 = 0;
    }
    v992 = &v991[4 * v987];
    v905 = &v991[4 * v990];
    *(_DWORD *)v992 = v1360.n128_u32[2];
    v985 = (unsigned __int32 *)(v992 + 4);
    while (v976 != v986)
    {
      int v993 = *--v976;
      *((_DWORD *)v992 - 1) = v993;
      v992 -= 4;
    }
    *(void *)uint64_t v12 = v992;
    *(void *)(v12 + 8) = v985;
    *(void *)(v12 + 16) = v905;
    if (v986)
    {
      operator delete(v986);
      v905 = *v906;
    }
  }
  else
  {
    unsigned __int32 *v976 = v1360.n128_u32[2];
    v985 = v976 + 1;
  }
  *(void *)(v12 + 8) = v985;
  if (v985 >= (unsigned __int32 *)v905)
  {
    v995 = *(unsigned __int32 **)v12;
    uint64_t v996 = ((uint64_t)v985 - *(void *)v12) >> 2;
    unint64_t v997 = v996 + 1;
    if ((unint64_t)(v996 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v998 = v905 - (char *)v995;
    if (v998 >> 1 > v997) {
      unint64_t v997 = v998 >> 1;
    }
    if ((unint64_t)v998 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v999 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v999 = v997;
    }
    if (v999)
    {
      v1000 = (char *)sub_20B05D1AC(v12 + 16, v999);
      v995 = *(unsigned __int32 **)v12;
      v985 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v1000 = 0;
    }
    v1001 = &v1000[4 * v996];
    v905 = &v1000[4 * v999];
    *(_DWORD *)v1001 = v1360.n128_u32[0];
    v994 = (unsigned __int32 *)(v1001 + 4);
    while (v985 != v995)
    {
      int v1002 = *--v985;
      *((_DWORD *)v1001 - 1) = v1002;
      v1001 -= 4;
    }
    *(void *)uint64_t v12 = v1001;
    *(void *)(v12 + 8) = v994;
    *(void *)(v12 + 16) = v905;
    if (v995)
    {
      operator delete(v995);
      v905 = *v906;
    }
  }
  else
  {
    unsigned __int32 *v985 = v1360.n128_u32[0];
    v994 = v985 + 1;
  }
  *(void *)(v12 + 8) = v994;
  if (v994 >= (unsigned __int32 *)v905)
  {
    v1004 = *(unsigned __int32 **)v12;
    uint64_t v1005 = ((uint64_t)v994 - *(void *)v12) >> 2;
    unint64_t v1006 = v1005 + 1;
    if ((unint64_t)(v1005 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v1007 = v905 - (char *)v1004;
    if (v1007 >> 1 > v1006) {
      unint64_t v1006 = v1007 >> 1;
    }
    if ((unint64_t)v1007 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1008 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1008 = v1006;
    }
    if (v1008)
    {
      v1009 = (char *)sub_20B05D1AC(v12 + 16, v1008);
      v1004 = *(unsigned __int32 **)v12;
      v994 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v1009 = 0;
    }
    v1010 = (unsigned __int32 *)&v1009[4 * v1005];
    v905 = &v1009[4 * v1008];
    unsigned __int32 *v1010 = v919;
    v1003 = v1010 + 1;
    while (v994 != v1004)
    {
      unsigned __int32 v1011 = *--v994;
      *--v1010 = v1011;
    }
    *(void *)uint64_t v12 = v1010;
    *(void *)(v12 + 8) = v1003;
    *(void *)(v12 + 16) = v905;
    if (v1004)
    {
      operator delete(v1004);
      v905 = *v906;
    }
  }
  else
  {
    unsigned __int32 *v994 = v919;
    v1003 = v994 + 1;
  }
  *(void *)(v12 + 8) = v1003;
  a10.n128_u32[1] = v1360.n128_u32[1];
  if (v1003 >= (unsigned __int32 *)v905)
  {
    v1013 = *(unsigned __int32 **)v12;
    uint64_t v1014 = ((uint64_t)v1003 - *(void *)v12) >> 2;
    unint64_t v1015 = v1014 + 1;
    if ((unint64_t)(v1014 + 1) >> 62) {
      goto LABEL_2264;
    }
    uint64_t v1016 = v905 - (char *)v1013;
    if (v1016 >> 1 > v1015) {
      unint64_t v1015 = v1016 >> 1;
    }
    if ((unint64_t)v1016 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1017 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1017 = v1015;
    }
    if (v1017)
    {
      v1018 = (char *)sub_20B05D1AC(v12 + 16, v1017);
      v1013 = *(unsigned __int32 **)v12;
      v1003 = *(unsigned __int32 **)(v12 + 8);
    }
    else
    {
      v1018 = 0;
    }
    v1019 = &v1018[4 * v1014];
    v1020 = &v1018[4 * v1017];
    *(_DWORD *)v1019 = v1360.n128_u32[2];
    v1012 = v1019 + 4;
    while (v1003 != v1013)
    {
      int v1021 = *--v1003;
      *((_DWORD *)v1019 - 1) = v1021;
      v1019 -= 4;
    }
    *(void *)uint64_t v12 = v1019;
    *(void *)(v12 + 8) = v1012;
    *(void *)(v12 + 16) = v1020;
    if (v1013) {
      operator delete(v1013);
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    unsigned __int32 *v1003 = v1360.n128_u32[2];
    v1012 = v1003 + 1;
  }
  *(void *)(v12 + 8) = v1012;
  if (a8 && a1)
  {
    int v1022 = 0;
    v1023 = (void *)(a8 + 16);
    v1024 = *(_DWORD **)(a8 + 8);
    do
    {
      if ((unint64_t)v1024 >= *v1023)
      {
        v1026 = *(_DWORD **)a8;
        uint64_t v1027 = ((uint64_t)v1024 - *(void *)a8) >> 2;
        unint64_t v1028 = v1027 + 1;
        if ((unint64_t)(v1027 + 1) >> 62) {
          goto LABEL_2263;
        }
        uint64_t v1029 = *v1023 - (void)v1026;
        if (v1029 >> 1 > v1028) {
          unint64_t v1028 = v1029 >> 1;
        }
        if ((unint64_t)v1029 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1030 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1030 = v1028;
        }
        if (v1030)
        {
          v1031 = (char *)sub_20B05D1AC(a8 + 16, v1030);
          v1026 = *(_DWORD **)a8;
          v1024 = *(_DWORD **)(a8 + 8);
        }
        else
        {
          v1031 = 0;
        }
        v1032 = &v1031[4 * v1027];
        *(_DWORD *)v1032 = v15;
        v1025 = v1032 + 4;
        while (v1024 != v1026)
        {
          int v1033 = *--v1024;
          *((_DWORD *)v1032 - 1) = v1033;
          v1032 -= 4;
        }
        *(void *)a8 = v1032;
        *(void *)(a8 + 8) = v1025;
        *(void *)(a8 + 16) = &v1031[4 * v1030];
        if (v1026) {
          operator delete(v1026);
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        _DWORD *v1024 = v15;
        v1025 = v1024 + 1;
      }
      *(void *)(a8 + 8) = v1025;
      ++v1022;
      v1024 = v1025;
    }
    while (v1022 != 4);
  }
  if (a7)
  {
    int v1034 = 0;
    v1035 = a7 + 2;
    v1036 = a7[1];
    do
    {
      v1037 = *v1035;
      if (v1036 >= *v1035)
      {
        v1039 = *a7;
        uint64_t v1040 = (v1036 - *a7) >> 2;
        unint64_t v1041 = v1040 + 1;
        if ((unint64_t)(v1040 + 1) >> 62) {
          goto LABEL_2262;
        }
        uint64_t v1042 = v1037 - v1039;
        if (v1042 >> 1 > v1041) {
          unint64_t v1041 = v1042 >> 1;
        }
        if ((unint64_t)v1042 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1043 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1043 = v1041;
        }
        if (v1043)
        {
          v1044 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v1043);
          v1039 = *a7;
          v1036 = a7[1];
        }
        else
        {
          v1044 = 0;
        }
        v1045 = &v1044[4 * v1040];
        *(_DWORD *)v1045 = 0;
        v1038 = v1045 + 4;
        while (v1036 != v1039)
        {
          int v1046 = *((_DWORD *)v1036 - 1);
          v1036 -= 4;
          *((_DWORD *)v1045 - 1) = v1046;
          v1045 -= 4;
        }
        v1037 = &v1044[4 * v1043];
        *a7 = v1045;
        a7[1] = v1038;
        a7[2] = v1037;
        if (v1039)
        {
          operator delete(v1039);
          v1037 = *v1035;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v1036 = 0;
        v1038 = v1036 + 4;
      }
      a7[1] = v1038;
      if (v1038 >= v1037)
      {
        v1048 = *a7;
        uint64_t v1049 = (v1038 - *a7) >> 2;
        unint64_t v1050 = v1049 + 1;
        if ((unint64_t)(v1049 + 1) >> 62) {
          goto LABEL_2262;
        }
        uint64_t v1051 = v1037 - v1048;
        if (v1051 >> 1 > v1050) {
          unint64_t v1050 = v1051 >> 1;
        }
        if ((unint64_t)v1051 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1052 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1052 = v1050;
        }
        if (v1052)
        {
          v1053 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v1052);
          v1048 = *a7;
          v1038 = a7[1];
        }
        else
        {
          v1053 = 0;
        }
        v1054 = &v1053[4 * v1049];
        *(_DWORD *)v1054 = -1082130432;
        v1047 = v1054 + 4;
        while (v1038 != v1048)
        {
          int v1055 = *((_DWORD *)v1038 - 1);
          v1038 -= 4;
          *((_DWORD *)v1054 - 1) = v1055;
          v1054 -= 4;
        }
        v1037 = &v1053[4 * v1052];
        *a7 = v1054;
        a7[1] = v1047;
        a7[2] = v1037;
        if (v1048)
        {
          operator delete(v1048);
          v1037 = *v1035;
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v1038 = -1082130432;
        v1047 = v1038 + 4;
      }
      a7[1] = v1047;
      if (v1047 >= v1037)
      {
        v1056 = *a7;
        uint64_t v1057 = (v1047 - *a7) >> 2;
        unint64_t v1058 = v1057 + 1;
        if ((unint64_t)(v1057 + 1) >> 62) {
          goto LABEL_2262;
        }
        uint64_t v1059 = v1037 - v1056;
        if (v1059 >> 1 > v1058) {
          unint64_t v1058 = v1059 >> 1;
        }
        if ((unint64_t)v1059 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1060 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1060 = v1058;
        }
        if (v1060)
        {
          v1061 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v1060);
          v1056 = *a7;
          v1047 = a7[1];
        }
        else
        {
          v1061 = 0;
        }
        v1062 = &v1061[4 * v1057];
        *(_DWORD *)v1062 = 0;
        v1036 = v1062 + 4;
        while (v1047 != v1056)
        {
          int v1063 = *((_DWORD *)v1047 - 1);
          v1047 -= 4;
          *((_DWORD *)v1062 - 1) = v1063;
          v1062 -= 4;
        }
        *a7 = v1062;
        a7[1] = v1036;
        a7[2] = &v1061[4 * v1060];
        if (v1056) {
          operator delete(v1056);
        }
        a10.n128_u32[1] = v1360.n128_u32[1];
      }
      else
      {
        *(_DWORD *)v1047 = 0;
        v1036 = v1047 + 4;
      }
      a7[1] = v1036;
      ++v1034;
    }
    while (v1034 != 4);
  }
  int v1064 = v1356 + a4;
  v1066 = a5 + 2;
  v1065 = a5[2];
  v1067 = a5[1];
  if (v1067 >= v1065)
  {
    v1069 = *a5;
    uint64_t v1070 = (v1067 - *a5) >> 2;
    unint64_t v1071 = v1070 + 1;
    if ((unint64_t)(v1070 + 1) >> 62) {
      goto LABEL_2265;
    }
    uint64_t v1072 = v1065 - v1069;
    if (v1072 >> 1 > v1071) {
      unint64_t v1071 = v1072 >> 1;
    }
    if ((unint64_t)v1072 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1073 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1073 = v1071;
    }
    if (v1073)
    {
      v1074 = (char *)sub_20B05D1AC((uint64_t)(a5 + 2), v1073);
      v1069 = *a5;
      v1067 = a5[1];
    }
    else
    {
      v1074 = 0;
    }
    v1075 = &v1074[4 * v1070];
    v1065 = &v1074[4 * v1073];
    *(_DWORD *)v1075 = v1064;
    v1068 = v1075 + 4;
    while (v1067 != v1069)
    {
      int v1076 = *((_DWORD *)v1067 - 1);
      v1067 -= 4;
      *((_DWORD *)v1075 - 1) = v1076;
      v1075 -= 4;
    }
    *a5 = v1075;
    a5[1] = v1068;
    a5[2] = v1065;
    if (v1069)
    {
      operator delete(v1069);
      v1065 = *v1066;
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1067 = v1064;
    v1068 = v1067 + 4;
  }
  a5[1] = v1068;
  int v1077 = v1064 + 1;
  if (v1068 >= v1065)
  {
    v1079 = *a5;
    uint64_t v1080 = (v1068 - *a5) >> 2;
    unint64_t v1081 = v1080 + 1;
    if ((unint64_t)(v1080 + 1) >> 62) {
      goto LABEL_2265;
    }
    uint64_t v1082 = v1065 - v1079;
    if (v1082 >> 1 > v1081) {
      unint64_t v1081 = v1082 >> 1;
    }
    if ((unint64_t)v1082 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1083 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1083 = v1081;
    }
    if (v1083)
    {
      v1084 = (char *)sub_20B05D1AC((uint64_t)v1066, v1083);
      v1079 = *a5;
      v1068 = a5[1];
    }
    else
    {
      v1084 = 0;
    }
    v1085 = &v1084[4 * v1080];
    v1065 = &v1084[4 * v1083];
    *(_DWORD *)v1085 = v1077;
    v1078 = v1085 + 4;
    if (v1068 == v1079)
    {
      uint64_t v12 = a6;
    }
    else
    {
      uint64_t v12 = a6;
      do
      {
        int v1086 = *((_DWORD *)v1068 - 1);
        v1068 -= 4;
        *((_DWORD *)v1085 - 1) = v1086;
        v1085 -= 4;
      }
      while (v1068 != v1079);
    }
    *a5 = v1085;
    a5[1] = v1078;
    a5[2] = v1065;
    if (v1079)
    {
      operator delete(v1079);
      v1065 = *v1066;
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1068 = v1077;
    v1078 = v1068 + 4;
    uint64_t v12 = a6;
  }
  a5[1] = v1078;
  int v1087 = v1064 + 3;
  if (v1078 >= v1065)
  {
    v1089 = *a5;
    uint64_t v1090 = (v1078 - *a5) >> 2;
    unint64_t v1091 = v1090 + 1;
    if ((unint64_t)(v1090 + 1) >> 62) {
      goto LABEL_2265;
    }
    uint64_t v1092 = v1065 - v1089;
    if (v1092 >> 1 > v1091) {
      unint64_t v1091 = v1092 >> 1;
    }
    if ((unint64_t)v1092 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1093 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1093 = v1091;
    }
    if (v1093)
    {
      v1094 = (char *)sub_20B05D1AC((uint64_t)v1066, v1093);
      v1089 = *a5;
      v1078 = a5[1];
    }
    else
    {
      v1094 = 0;
    }
    v1095 = &v1094[4 * v1090];
    v1065 = &v1094[4 * v1093];
    *(_DWORD *)v1095 = v1087;
    v1088 = v1095 + 4;
    while (v1078 != v1089)
    {
      int v1096 = *((_DWORD *)v1078 - 1);
      v1078 -= 4;
      *((_DWORD *)v1095 - 1) = v1096;
      v1095 -= 4;
    }
    *a5 = v1095;
    a5[1] = v1088;
    a5[2] = v1065;
    if (v1089)
    {
      operator delete(v1089);
      v1065 = *v1066;
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1078 = v1087;
    v1088 = v1078 + 4;
  }
  a5[1] = v1088;
  if (v1088 >= v1065)
  {
    v1098 = *a5;
    uint64_t v1099 = (v1088 - *a5) >> 2;
    unint64_t v1100 = v1099 + 1;
    if ((unint64_t)(v1099 + 1) >> 62) {
      goto LABEL_2265;
    }
    uint64_t v1101 = v1065 - v1098;
    if (v1101 >> 1 > v1100) {
      unint64_t v1100 = v1101 >> 1;
    }
    if ((unint64_t)v1101 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1102 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1102 = v1100;
    }
    if (v1102)
    {
      v1103 = (char *)sub_20B05D1AC((uint64_t)v1066, v1102);
      v1098 = *a5;
      v1088 = a5[1];
    }
    else
    {
      v1103 = 0;
    }
    v1104 = &v1103[4 * v1099];
    v1065 = &v1103[4 * v1102];
    *(_DWORD *)v1104 = v1064;
    v1097 = v1104 + 4;
    while (v1088 != v1098)
    {
      int v1105 = *((_DWORD *)v1088 - 1);
      v1088 -= 4;
      *((_DWORD *)v1104 - 1) = v1105;
      v1104 -= 4;
    }
    *a5 = v1104;
    a5[1] = v1097;
    a5[2] = v1065;
    if (v1098)
    {
      operator delete(v1098);
      v1065 = *v1066;
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1088 = v1064;
    v1097 = v1088 + 4;
  }
  a5[1] = v1097;
  if (v1097 < v1065)
  {
    *(_DWORD *)v1097 = v1087;
    v1106 = v1097 + 4;
    uint64_t v13 = a5;
    goto LABEL_1878;
  }
  v1107 = *a5;
  uint64_t v1108 = (v1097 - *a5) >> 2;
  unint64_t v1109 = v1108 + 1;
  if ((unint64_t)(v1108 + 1) >> 62) {
LABEL_2267:
  }
    sub_20B05D0BC();
  uint64_t v1110 = v1065 - v1107;
  if (v1110 >> 1 > v1109) {
    unint64_t v1109 = v1110 >> 1;
  }
  if ((unint64_t)v1110 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v1111 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1111 = v1109;
  }
  if (v1111)
  {
    v1112 = (char *)sub_20B05D1AC((uint64_t)v1066, v1111);
    v1107 = *a5;
    v1097 = a5[1];
  }
  else
  {
    v1112 = 0;
  }
  v1113 = &v1112[4 * v1108];
  v1065 = &v1112[4 * v1111];
  *(_DWORD *)v1113 = v1087;
  v1106 = v1113 + 4;
  while (v1097 != v1107)
  {
    int v1114 = *((_DWORD *)v1097 - 1);
    v1097 -= 4;
    *((_DWORD *)v1113 - 1) = v1114;
    v1113 -= 4;
  }
  uint64_t v13 = a5;
  *a5 = v1113;
  a5[1] = v1106;
  a5[2] = v1065;
  if (v1107)
  {
    operator delete(v1107);
    v1065 = *v1066;
  }
  a10.n128_u32[1] = v1360.n128_u32[1];
LABEL_1878:
  v13[1] = v1106;
  int v1115 = v1064 + 2;
  if (v1106 >= v1065)
  {
    v1118 = *v13;
    uint64_t v1119 = (v1106 - *v13) >> 2;
    unint64_t v1120 = v1119 + 1;
    char v1117 = a3;
    if ((unint64_t)(v1119 + 1) >> 62) {
      goto LABEL_2265;
    }
    uint64_t v1121 = v1065 - v1118;
    if (v1121 >> 1 > v1120) {
      unint64_t v1120 = v1121 >> 1;
    }
    if ((unint64_t)v1121 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v1122 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v1122 = v1120;
    }
    if (v1122)
    {
      v1123 = (char *)sub_20B05D1AC((uint64_t)v1066, v1122);
      v1118 = *v13;
      v1106 = v13[1];
    }
    else
    {
      v1123 = 0;
    }
    v1124 = &v1123[4 * v1119];
    v1125 = &v1123[4 * v1122];
    *(_DWORD *)v1124 = v1115;
    v1116 = v1124 + 4;
    while (v1106 != v1118)
    {
      int v1126 = *((_DWORD *)v1106 - 1);
      v1106 -= 4;
      *((_DWORD *)v1124 - 1) = v1126;
      v1124 -= 4;
    }
    *uint64_t v13 = v1124;
    v13[1] = v1116;
    v13[2] = v1125;
    if (v1118) {
      operator delete(v1118);
    }
    a10.n128_u32[1] = v1360.n128_u32[1];
  }
  else
  {
    *(_DWORD *)v1106 = v1115;
    v1116 = v1106 + 4;
    char v1117 = a3;
  }
  v13[1] = v1116;
  int v16 = v1356 + 4;
  if ((v1117 & 4) != 0)
  {
LABEL_1896:
    v1128 = (char **)(v12 + 16);
    v1127 = *(char **)(v12 + 16);
    v1129 = *(unsigned __int32 **)(v12 + 8);
    if (v1129 >= (unsigned __int32 *)v1127)
    {
      v1131 = *(unsigned __int32 **)v12;
      uint64_t v1132 = ((uint64_t)v1129 - *(void *)v12) >> 2;
      unint64_t v1133 = v1132 + 1;
      if ((unint64_t)(v1132 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1134 = v1127 - (char *)v1131;
      if (v1134 >> 1 > v1133) {
        unint64_t v1133 = v1134 >> 1;
      }
      if ((unint64_t)v1134 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1135 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1135 = v1133;
      }
      if (v1135)
      {
        v1136 = (char *)sub_20B05D1AC(v12 + 16, v1135);
        v1131 = *(unsigned __int32 **)v12;
        v1129 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1136 = 0;
      }
      v1137 = &v1136[4 * v1132];
      v1127 = &v1136[4 * v1135];
      *(_DWORD *)v1137 = a9.n128_u32[0];
      v1130 = (unsigned __int32 *)(v1137 + 4);
      while (v1129 != v1131)
      {
        int v1138 = *--v1129;
        *((_DWORD *)v1137 - 1) = v1138;
        v1137 -= 4;
      }
      *(void *)uint64_t v12 = v1137;
      *(void *)(v12 + 8) = v1130;
      *(void *)(v12 + 16) = v1127;
      if (v1131)
      {
        operator delete(v1131);
        v1127 = *v1128;
      }
      a10.n128_u32[1] = v1360.n128_u32[1];
    }
    else
    {
      unsigned __int32 *v1129 = a9.n128_u32[0];
      v1130 = v1129 + 1;
    }
    *(void *)(v12 + 8) = v1130;
    unsigned __int32 v1139 = a10.n128_u32[1];
    int v1357 = v16;
    if (v1130 >= (unsigned __int32 *)v1127)
    {
      v1141 = *(unsigned __int32 **)v12;
      uint64_t v1142 = ((uint64_t)v1130 - *(void *)v12) >> 2;
      unint64_t v1143 = v1142 + 1;
      if ((unint64_t)(v1142 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1144 = v1127 - (char *)v1141;
      if (v1144 >> 1 > v1143) {
        unint64_t v1143 = v1144 >> 1;
      }
      if ((unint64_t)v1144 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1145 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1145 = v1143;
      }
      if (v1145)
      {
        v1146 = (char *)sub_20B05D1AC(v12 + 16, v1145);
        v1141 = *(unsigned __int32 **)v12;
        v1130 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1146 = 0;
      }
      v1147 = (unsigned __int32 *)&v1146[4 * v1142];
      v1127 = &v1146[4 * v1145];
      unsigned __int32 *v1147 = v1139;
      v1140 = v1147 + 1;
      while (v1130 != v1141)
      {
        unsigned __int32 v1148 = *--v1130;
        *--v1147 = v1148;
      }
      *(void *)uint64_t v12 = v1147;
      *(void *)(v12 + 8) = v1140;
      *(void *)(v12 + 16) = v1127;
      if (v1141)
      {
        operator delete(v1141);
        v1127 = *v1128;
      }
    }
    else
    {
      unsigned __int32 *v1130 = a10.n128_u32[1];
      v1140 = v1130 + 1;
    }
    unsigned __int32 v1149 = a9.n128_u32[0];
    *(void *)(v12 + 8) = v1140;
    if (v1140 >= (unsigned __int32 *)v1127)
    {
      v1151 = *(unsigned __int32 **)v12;
      uint64_t v1152 = ((uint64_t)v1140 - *(void *)v12) >> 2;
      unint64_t v1153 = v1152 + 1;
      if ((unint64_t)(v1152 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1154 = v1127 - (char *)v1151;
      if (v1154 >> 1 > v1153) {
        unint64_t v1153 = v1154 >> 1;
      }
      if ((unint64_t)v1154 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1155 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1155 = v1153;
      }
      if (v1155)
      {
        v1156 = (char *)sub_20B05D1AC(v12 + 16, v1155);
        v1151 = *(unsigned __int32 **)v12;
        v1140 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1156 = 0;
      }
      v1157 = &v1156[4 * v1152];
      v1127 = &v1156[4 * v1155];
      *(_DWORD *)v1157 = a9.n128_u32[2];
      v1150 = (unsigned __int32 *)(v1157 + 4);
      while (v1140 != v1151)
      {
        int v1158 = *--v1140;
        *((_DWORD *)v1157 - 1) = v1158;
        v1157 -= 4;
      }
      *(void *)uint64_t v12 = v1157;
      *(void *)(v12 + 8) = v1150;
      *(void *)(v12 + 16) = v1127;
      if (v1151)
      {
        operator delete(v1151);
        v1127 = *v1128;
      }
      unsigned __int32 v1149 = a9.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v1140 = a9.n128_u32[2];
      v1150 = v1140 + 1;
    }
    *(void *)(v12 + 8) = v1150;
    if (v1150 >= (unsigned __int32 *)v1127)
    {
      v1160 = *(unsigned __int32 **)v12;
      uint64_t v1161 = ((uint64_t)v1150 - *(void *)v12) >> 2;
      unint64_t v1162 = v1161 + 1;
      if ((unint64_t)(v1161 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1163 = v1127 - (char *)v1160;
      if (v1163 >> 1 > v1162) {
        unint64_t v1162 = v1163 >> 1;
      }
      if ((unint64_t)v1163 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1164 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1164 = v1162;
      }
      if (v1164)
      {
        v1165 = (char *)sub_20B05D1AC(v12 + 16, v1164);
        v1160 = *(unsigned __int32 **)v12;
        v1150 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1165 = 0;
      }
      v1166 = &v1165[4 * v1161];
      v1127 = &v1165[4 * v1164];
      *(_DWORD *)v1166 = v1360.n128_u32[0];
      v1159 = (unsigned __int32 *)(v1166 + 4);
      while (v1150 != v1160)
      {
        int v1167 = *--v1150;
        *((_DWORD *)v1166 - 1) = v1167;
        v1166 -= 4;
      }
      *(void *)uint64_t v12 = v1166;
      *(void *)(v12 + 8) = v1159;
      *(void *)(v12 + 16) = v1127;
      if (v1160)
      {
        operator delete(v1160);
        v1127 = *v1128;
      }
      unsigned __int32 v1149 = a9.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v1150 = v1360.n128_u32[0];
      v1159 = v1150 + 1;
    }
    *(void *)(v12 + 8) = v1159;
    if (v1159 >= (unsigned __int32 *)v1127)
    {
      v1169 = *(unsigned __int32 **)v12;
      uint64_t v1170 = ((uint64_t)v1159 - *(void *)v12) >> 2;
      unint64_t v1171 = v1170 + 1;
      if ((unint64_t)(v1170 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1172 = v1127 - (char *)v1169;
      if (v1172 >> 1 > v1171) {
        unint64_t v1171 = v1172 >> 1;
      }
      if ((unint64_t)v1172 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1173 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1173 = v1171;
      }
      if (v1173)
      {
        v1174 = (char *)sub_20B05D1AC(v12 + 16, v1173);
        v1169 = *(unsigned __int32 **)v12;
        v1159 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1174 = 0;
      }
      v1175 = (unsigned __int32 *)&v1174[4 * v1170];
      v1127 = &v1174[4 * v1173];
      unsigned __int32 *v1175 = v1139;
      v1168 = v1175 + 1;
      while (v1159 != v1169)
      {
        unsigned __int32 v1176 = *--v1159;
        *--v1175 = v1176;
      }
      *(void *)uint64_t v12 = v1175;
      *(void *)(v12 + 8) = v1168;
      *(void *)(v12 + 16) = v1127;
      if (v1169)
      {
        operator delete(v1169);
        v1127 = *v1128;
      }
      unsigned __int32 v1149 = a9.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v1159 = v1139;
      v1168 = v1159 + 1;
    }
    *(void *)(v12 + 8) = v1168;
    if (v1168 >= (unsigned __int32 *)v1127)
    {
      v1178 = *(unsigned __int32 **)v12;
      uint64_t v1179 = ((uint64_t)v1168 - *(void *)v12) >> 2;
      unint64_t v1180 = v1179 + 1;
      if ((unint64_t)(v1179 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1181 = v1127 - (char *)v1178;
      if (v1181 >> 1 > v1180) {
        unint64_t v1180 = v1181 >> 1;
      }
      if ((unint64_t)v1181 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1182 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1182 = v1180;
      }
      if (v1182)
      {
        v1183 = (char *)sub_20B05D1AC(v12 + 16, v1182);
        v1178 = *(unsigned __int32 **)v12;
        v1168 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1183 = 0;
      }
      v1184 = &v1183[4 * v1179];
      v1127 = &v1183[4 * v1182];
      *(_DWORD *)v1184 = a9.n128_u32[2];
      v1177 = (unsigned __int32 *)(v1184 + 4);
      while (v1168 != v1178)
      {
        int v1185 = *--v1168;
        *((_DWORD *)v1184 - 1) = v1185;
        v1184 -= 4;
      }
      *(void *)uint64_t v12 = v1184;
      *(void *)(v12 + 8) = v1177;
      *(void *)(v12 + 16) = v1127;
      if (v1178)
      {
        operator delete(v1178);
        v1127 = *v1128;
      }
      unsigned __int32 v1149 = a9.n128_u32[0];
    }
    else
    {
      unsigned __int32 *v1168 = a9.n128_u32[2];
      v1177 = v1168 + 1;
    }
    *(void *)(v12 + 8) = v1177;
    if (v1177 >= (unsigned __int32 *)v1127)
    {
      v1187 = *(unsigned __int32 **)v12;
      uint64_t v1188 = ((uint64_t)v1177 - *(void *)v12) >> 2;
      unint64_t v1189 = v1188 + 1;
      if ((unint64_t)(v1188 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1190 = v1127 - (char *)v1187;
      if (v1190 >> 1 > v1189) {
        unint64_t v1189 = v1190 >> 1;
      }
      if ((unint64_t)v1190 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1191 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1191 = v1189;
      }
      if (v1191)
      {
        v1192 = (char *)sub_20B05D1AC(v12 + 16, v1191);
        unsigned __int32 v1149 = a9.n128_u32[0];
        v1193 = v1192;
        v1187 = *(unsigned __int32 **)v12;
        v1177 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1193 = 0;
      }
      v1194 = (unsigned __int32 *)&v1193[4 * v1188];
      v1127 = &v1193[4 * v1191];
      unsigned __int32 *v1194 = v1149;
      v1186 = v1194 + 1;
      while (v1177 != v1187)
      {
        unsigned __int32 v1195 = *--v1177;
        *--v1194 = v1195;
      }
      *(void *)uint64_t v12 = v1194;
      *(void *)(v12 + 8) = v1186;
      *(void *)(v12 + 16) = v1127;
      if (v1187)
      {
        operator delete(v1187);
        v1127 = *v1128;
      }
    }
    else
    {
      unsigned __int32 *v1177 = v1149;
      v1186 = v1177 + 1;
    }
    *(void *)(v12 + 8) = v1186;
    if (v1186 >= (unsigned __int32 *)v1127)
    {
      v1197 = *(unsigned __int32 **)v12;
      uint64_t v1198 = ((uint64_t)v1186 - *(void *)v12) >> 2;
      unint64_t v1199 = v1198 + 1;
      if ((unint64_t)(v1198 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1200 = v1127 - (char *)v1197;
      if (v1200 >> 1 > v1199) {
        unint64_t v1199 = v1200 >> 1;
      }
      if ((unint64_t)v1200 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1201 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1201 = v1199;
      }
      if (v1201)
      {
        v1202 = (char *)sub_20B05D1AC(v12 + 16, v1201);
        v1197 = *(unsigned __int32 **)v12;
        v1186 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1202 = 0;
      }
      v1203 = (unsigned __int32 *)&v1202[4 * v1198];
      v1127 = &v1202[4 * v1201];
      unsigned __int32 *v1203 = v1139;
      v1196 = v1203 + 1;
      while (v1186 != v1197)
      {
        unsigned __int32 v1204 = *--v1186;
        *--v1203 = v1204;
      }
      *(void *)uint64_t v12 = v1203;
      *(void *)(v12 + 8) = v1196;
      *(void *)(v12 + 16) = v1127;
      if (v1197)
      {
        operator delete(v1197);
        v1127 = *v1128;
      }
    }
    else
    {
      unsigned __int32 *v1186 = v1139;
      v1196 = v1186 + 1;
    }
    *(void *)(v12 + 8) = v1196;
    if (v1196 >= (unsigned __int32 *)v1127)
    {
      v1206 = *(unsigned __int32 **)v12;
      uint64_t v1207 = ((uint64_t)v1196 - *(void *)v12) >> 2;
      unint64_t v1208 = v1207 + 1;
      if ((unint64_t)(v1207 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1209 = v1127 - (char *)v1206;
      if (v1209 >> 1 > v1208) {
        unint64_t v1208 = v1209 >> 1;
      }
      if ((unint64_t)v1209 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1210 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1210 = v1208;
      }
      if (v1210)
      {
        v1211 = (char *)sub_20B05D1AC(v12 + 16, v1210);
        v1206 = *(unsigned __int32 **)v12;
        v1196 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1211 = 0;
      }
      v1212 = &v1211[4 * v1207];
      v1127 = &v1211[4 * v1210];
      *(_DWORD *)v1212 = v1360.n128_u32[2];
      v1205 = (unsigned __int32 *)(v1212 + 4);
      while (v1196 != v1206)
      {
        int v1213 = *--v1196;
        *((_DWORD *)v1212 - 1) = v1213;
        v1212 -= 4;
      }
      *(void *)uint64_t v12 = v1212;
      *(void *)(v12 + 8) = v1205;
      *(void *)(v12 + 16) = v1127;
      if (v1206)
      {
        operator delete(v1206);
        v1127 = *v1128;
      }
    }
    else
    {
      unsigned __int32 *v1196 = v1360.n128_u32[2];
      v1205 = v1196 + 1;
    }
    *(void *)(v12 + 8) = v1205;
    if (v1205 >= (unsigned __int32 *)v1127)
    {
      v1215 = *(unsigned __int32 **)v12;
      uint64_t v1216 = ((uint64_t)v1205 - *(void *)v12) >> 2;
      unint64_t v1217 = v1216 + 1;
      if ((unint64_t)(v1216 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1218 = v1127 - (char *)v1215;
      if (v1218 >> 1 > v1217) {
        unint64_t v1217 = v1218 >> 1;
      }
      if ((unint64_t)v1218 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1219 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1219 = v1217;
      }
      if (v1219)
      {
        v1220 = (char *)sub_20B05D1AC(v12 + 16, v1219);
        v1215 = *(unsigned __int32 **)v12;
        v1205 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1220 = 0;
      }
      v1221 = &v1220[4 * v1216];
      v1127 = &v1220[4 * v1219];
      *(_DWORD *)v1221 = v1360.n128_u32[0];
      v1214 = (unsigned __int32 *)(v1221 + 4);
      while (v1205 != v1215)
      {
        int v1222 = *--v1205;
        *((_DWORD *)v1221 - 1) = v1222;
        v1221 -= 4;
      }
      *(void *)uint64_t v12 = v1221;
      *(void *)(v12 + 8) = v1214;
      *(void *)(v12 + 16) = v1127;
      if (v1215)
      {
        operator delete(v1215);
        v1127 = *v1128;
      }
    }
    else
    {
      unsigned __int32 *v1205 = v1360.n128_u32[0];
      v1214 = v1205 + 1;
    }
    *(void *)(v12 + 8) = v1214;
    if (v1214 >= (unsigned __int32 *)v1127)
    {
      v1224 = *(unsigned __int32 **)v12;
      uint64_t v1225 = ((uint64_t)v1214 - *(void *)v12) >> 2;
      unint64_t v1226 = v1225 + 1;
      if ((unint64_t)(v1225 + 1) >> 62) {
        goto LABEL_2264;
      }
      uint64_t v1227 = v1127 - (char *)v1224;
      if (v1227 >> 1 > v1226) {
        unint64_t v1226 = v1227 >> 1;
      }
      if ((unint64_t)v1227 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1228 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1228 = v1226;
      }
      if (v1228)
      {
        v1229 = (char *)sub_20B05D1AC(v12 + 16, v1228);
        v1224 = *(unsigned __int32 **)v12;
        v1214 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1229 = 0;
      }
      v1230 = (unsigned __int32 *)&v1229[4 * v1225];
      v1127 = &v1229[4 * v1228];
      unsigned __int32 *v1230 = v1139;
      v1223 = v1230 + 1;
      while (v1214 != v1224)
      {
        unsigned __int32 v1231 = *--v1214;
        *--v1230 = v1231;
      }
      *(void *)uint64_t v12 = v1230;
      *(void *)(v12 + 8) = v1223;
      *(void *)(v12 + 16) = v1127;
      if (v1224)
      {
        operator delete(v1224);
        v1127 = *v1128;
      }
    }
    else
    {
      unsigned __int32 *v1214 = v1139;
      v1223 = v1214 + 1;
    }
    *(void *)(v12 + 8) = v1223;
    if (v1223 < (unsigned __int32 *)v1127)
    {
      unsigned __int32 *v1223 = v1360.n128_u32[2];
      v1232 = v1223 + 1;
      int v1233 = a2;
      goto LABEL_2093;
    }
    v1234 = *(unsigned __int32 **)v12;
    uint64_t v1235 = ((uint64_t)v1223 - *(void *)v12) >> 2;
    unint64_t v1236 = v1235 + 1;
    if (!((unint64_t)(v1235 + 1) >> 62))
    {
      uint64_t v1237 = v1127 - (char *)v1234;
      if (v1237 >> 1 > v1236) {
        unint64_t v1236 = v1237 >> 1;
      }
      if ((unint64_t)v1237 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v1238 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v1238 = v1236;
      }
      if (v1238)
      {
        v1239 = (char *)sub_20B05D1AC(v12 + 16, v1238);
        v1234 = *(unsigned __int32 **)v12;
        v1223 = *(unsigned __int32 **)(v12 + 8);
      }
      else
      {
        v1239 = 0;
      }
      int v1233 = a2;
      v1240 = &v1239[4 * v1235];
      v1241 = &v1239[4 * v1238];
      *(_DWORD *)v1240 = v1360.n128_u32[2];
      v1232 = v1240 + 4;
      while (v1223 != v1234)
      {
        int v1242 = *--v1223;
        *((_DWORD *)v1240 - 1) = v1242;
        v1240 -= 4;
      }
      *(void *)uint64_t v12 = v1240;
      *(void *)(v12 + 8) = v1232;
      *(void *)(v12 + 16) = v1241;
      if (v1234) {
        operator delete(v1234);
      }
LABEL_2093:
      *(void *)(v12 + 8) = v1232;
      if (a8 && a1)
      {
        int v1243 = 0;
        v1244 = (void *)(a8 + 16);
        v1245 = *(_DWORD **)(a8 + 8);
        do
        {
          if ((unint64_t)v1245 >= *v1244)
          {
            v1247 = *(_DWORD **)a8;
            uint64_t v1248 = ((uint64_t)v1245 - *(void *)a8) >> 2;
            unint64_t v1249 = v1248 + 1;
            if ((unint64_t)(v1248 + 1) >> 62) {
              goto LABEL_2263;
            }
            uint64_t v1250 = *v1244 - (void)v1247;
            if (v1250 >> 1 > v1249) {
              unint64_t v1249 = v1250 >> 1;
            }
            if ((unint64_t)v1250 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v1251 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v1251 = v1249;
            }
            if (v1251)
            {
              v1252 = (char *)sub_20B05D1AC(a8 + 16, v1251);
              v1247 = *(_DWORD **)a8;
              v1245 = *(_DWORD **)(a8 + 8);
            }
            else
            {
              v1252 = 0;
            }
            v1253 = &v1252[4 * v1248];
            *(_DWORD *)v1253 = v1233;
            v1246 = v1253 + 4;
            while (v1245 != v1247)
            {
              int v1254 = *--v1245;
              *((_DWORD *)v1253 - 1) = v1254;
              v1253 -= 4;
            }
            *(void *)a8 = v1253;
            *(void *)(a8 + 8) = v1246;
            *(void *)(a8 + 16) = &v1252[4 * v1251];
            if (v1247) {
              operator delete(v1247);
            }
          }
          else
          {
            _DWORD *v1245 = v1233;
            v1246 = v1245 + 1;
          }
          *(void *)(a8 + 8) = v1246;
          ++v1243;
          v1245 = v1246;
        }
        while (v1243 != 4);
      }
      if (a7)
      {
        int v1255 = 0;
        v1256 = a7 + 2;
        v1257 = a7[1];
        do
        {
          v1258 = *v1256;
          if (v1257 >= *v1256)
          {
            v1260 = *a7;
            uint64_t v1261 = (v1257 - *a7) >> 2;
            unint64_t v1262 = v1261 + 1;
            if ((unint64_t)(v1261 + 1) >> 62) {
              goto LABEL_2262;
            }
            uint64_t v1263 = v1258 - v1260;
            if (v1263 >> 1 > v1262) {
              unint64_t v1262 = v1263 >> 1;
            }
            if ((unint64_t)v1263 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v1264 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v1264 = v1262;
            }
            if (v1264)
            {
              v1265 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v1264);
              v1260 = *a7;
              v1257 = a7[1];
            }
            else
            {
              v1265 = 0;
            }
            v1266 = &v1265[4 * v1261];
            *(_DWORD *)v1266 = 0;
            v1259 = v1266 + 4;
            while (v1257 != v1260)
            {
              int v1267 = *((_DWORD *)v1257 - 1);
              v1257 -= 4;
              *((_DWORD *)v1266 - 1) = v1267;
              v1266 -= 4;
            }
            v1258 = &v1265[4 * v1264];
            *a7 = v1266;
            a7[1] = v1259;
            a7[2] = v1258;
            if (v1260)
            {
              operator delete(v1260);
              v1258 = *v1256;
            }
          }
          else
          {
            *(_DWORD *)v1257 = 0;
            v1259 = v1257 + 4;
          }
          a7[1] = v1259;
          if (v1259 >= v1258)
          {
            v1269 = *a7;
            uint64_t v1270 = (v1259 - *a7) >> 2;
            unint64_t v1271 = v1270 + 1;
            if ((unint64_t)(v1270 + 1) >> 62) {
              goto LABEL_2262;
            }
            uint64_t v1272 = v1258 - v1269;
            if (v1272 >> 1 > v1271) {
              unint64_t v1271 = v1272 >> 1;
            }
            if ((unint64_t)v1272 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v1273 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v1273 = v1271;
            }
            if (v1273)
            {
              v1274 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v1273);
              v1269 = *a7;
              v1259 = a7[1];
            }
            else
            {
              v1274 = 0;
            }
            v1275 = &v1274[4 * v1270];
            *(_DWORD *)v1275 = 1065353216;
            v1268 = v1275 + 4;
            while (v1259 != v1269)
            {
              int v1276 = *((_DWORD *)v1259 - 1);
              v1259 -= 4;
              *((_DWORD *)v1275 - 1) = v1276;
              v1275 -= 4;
            }
            v1258 = &v1274[4 * v1273];
            *a7 = v1275;
            a7[1] = v1268;
            a7[2] = v1258;
            if (v1269)
            {
              operator delete(v1269);
              v1258 = *v1256;
            }
          }
          else
          {
            *(_DWORD *)v1259 = 1065353216;
            v1268 = v1259 + 4;
          }
          a7[1] = v1268;
          if (v1268 >= v1258)
          {
            v1277 = *a7;
            uint64_t v1278 = (v1268 - *a7) >> 2;
            unint64_t v1279 = v1278 + 1;
            if ((unint64_t)(v1278 + 1) >> 62) {
              goto LABEL_2262;
            }
            uint64_t v1280 = v1258 - v1277;
            if (v1280 >> 1 > v1279) {
              unint64_t v1279 = v1280 >> 1;
            }
            if ((unint64_t)v1280 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v1281 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v1281 = v1279;
            }
            if (v1281)
            {
              v1282 = (char *)sub_20B05D1AC((uint64_t)(a7 + 2), v1281);
              v1277 = *a7;
              v1268 = a7[1];
            }
            else
            {
              v1282 = 0;
            }
            v1283 = &v1282[4 * v1278];
            *(_DWORD *)v1283 = 0;
            v1257 = v1283 + 4;
            while (v1268 != v1277)
            {
              int v1284 = *((_DWORD *)v1268 - 1);
              v1268 -= 4;
              *((_DWORD *)v1283 - 1) = v1284;
              v1283 -= 4;
            }
            *a7 = v1283;
            a7[1] = v1257;
            a7[2] = &v1282[4 * v1281];
            if (v1277) {
              operator delete(v1277);
            }
          }
          else
          {
            *(_DWORD *)v1268 = 0;
            v1257 = v1268 + 4;
          }
          a7[1] = v1257;
          ++v1255;
        }
        while (v1255 != 4);
      }
      int v1285 = v1357 + a4;
      v1287 = v13 + 2;
      v1286 = v13[2];
      v1288 = v13[1];
      if (v1288 >= v1286)
      {
        v1290 = *v13;
        uint64_t v1291 = (v1288 - *v13) >> 2;
        unint64_t v1292 = v1291 + 1;
        if ((unint64_t)(v1291 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v1293 = v1286 - v1290;
        if (v1293 >> 1 > v1292) {
          unint64_t v1292 = v1293 >> 1;
        }
        if ((unint64_t)v1293 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1294 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1294 = v1292;
        }
        if (v1294)
        {
          v1295 = (char *)sub_20B05D1AC((uint64_t)(v13 + 2), v1294);
          v1290 = *v13;
          v1288 = v13[1];
        }
        else
        {
          v1295 = 0;
        }
        v1296 = &v1295[4 * v1291];
        v1286 = &v1295[4 * v1294];
        *(_DWORD *)v1296 = v1285;
        v1289 = v1296 + 4;
        while (v1288 != v1290)
        {
          int v1297 = *((_DWORD *)v1288 - 1);
          v1288 -= 4;
          *((_DWORD *)v1296 - 1) = v1297;
          v1296 -= 4;
        }
        *uint64_t v13 = v1296;
        v13[1] = v1289;
        v13[2] = v1286;
        if (v1290)
        {
          operator delete(v1290);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1288 = v1285;
        v1289 = v1288 + 4;
      }
      v13[1] = v1289;
      int v1298 = v1285 + 2;
      if (v1289 >= v1286)
      {
        v1300 = *v13;
        uint64_t v1301 = (v1289 - *v13) >> 2;
        unint64_t v1302 = v1301 + 1;
        if ((unint64_t)(v1301 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v1303 = v1286 - v1300;
        if (v1303 >> 1 > v1302) {
          unint64_t v1302 = v1303 >> 1;
        }
        if ((unint64_t)v1303 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1304 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1304 = v1302;
        }
        if (v1304)
        {
          v1305 = (char *)sub_20B05D1AC((uint64_t)(v13 + 2), v1304);
          v1300 = *v13;
          v1289 = v13[1];
        }
        else
        {
          v1305 = 0;
        }
        v1306 = &v1305[4 * v1301];
        v1286 = &v1305[4 * v1304];
        *(_DWORD *)v1306 = v1298;
        v1299 = v1306 + 4;
        while (v1289 != v1300)
        {
          int v1307 = *((_DWORD *)v1289 - 1);
          v1289 -= 4;
          *((_DWORD *)v1306 - 1) = v1307;
          v1306 -= 4;
        }
        *uint64_t v13 = v1306;
        v13[1] = v1299;
        v13[2] = v1286;
        if (v1300)
        {
          operator delete(v1300);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1289 = v1298;
        v1299 = v1289 + 4;
      }
      v13[1] = v1299;
      int v1308 = v1285 + 1;
      if (v1299 >= v1286)
      {
        v1310 = *v13;
        uint64_t v1311 = (v1299 - *v13) >> 2;
        unint64_t v1312 = v1311 + 1;
        if ((unint64_t)(v1311 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v1313 = v1286 - v1310;
        if (v1313 >> 1 > v1312) {
          unint64_t v1312 = v1313 >> 1;
        }
        if ((unint64_t)v1313 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1314 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1314 = v1312;
        }
        if (v1314)
        {
          v1315 = (char *)sub_20B05D1AC((uint64_t)(v13 + 2), v1314);
          v1310 = *v13;
          v1299 = v13[1];
        }
        else
        {
          v1315 = 0;
        }
        v1316 = &v1315[4 * v1311];
        v1286 = &v1315[4 * v1314];
        *(_DWORD *)v1316 = v1308;
        v1309 = v1316 + 4;
        while (v1299 != v1310)
        {
          int v1317 = *((_DWORD *)v1299 - 1);
          v1299 -= 4;
          *((_DWORD *)v1316 - 1) = v1317;
          v1316 -= 4;
        }
        *uint64_t v13 = v1316;
        v13[1] = v1309;
        v13[2] = v1286;
        if (v1310)
        {
          operator delete(v1310);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1299 = v1308;
        v1309 = v1299 + 4;
      }
      v13[1] = v1309;
      if (v1309 >= v1286)
      {
        v1319 = *v13;
        uint64_t v1320 = (v1309 - *v13) >> 2;
        unint64_t v1321 = v1320 + 1;
        if ((unint64_t)(v1320 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v1322 = v1286 - v1319;
        if (v1322 >> 1 > v1321) {
          unint64_t v1321 = v1322 >> 1;
        }
        if ((unint64_t)v1322 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1323 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1323 = v1321;
        }
        if (v1323)
        {
          v1324 = (char *)sub_20B05D1AC((uint64_t)(v13 + 2), v1323);
          v1319 = *v13;
          v1309 = v13[1];
        }
        else
        {
          v1324 = 0;
        }
        v1325 = &v1324[4 * v1320];
        v1286 = &v1324[4 * v1323];
        *(_DWORD *)v1325 = v1308;
        v1318 = v1325 + 4;
        while (v1309 != v1319)
        {
          int v1326 = *((_DWORD *)v1309 - 1);
          v1309 -= 4;
          *((_DWORD *)v1325 - 1) = v1326;
          v1325 -= 4;
        }
        *uint64_t v13 = v1325;
        v13[1] = v1318;
        v13[2] = v1286;
        if (v1319)
        {
          operator delete(v1319);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1309 = v1308;
        v1318 = v1309 + 4;
      }
      v13[1] = v1318;
      if (v1318 >= v1286)
      {
        v1328 = *v13;
        uint64_t v1329 = (v1318 - *v13) >> 2;
        unint64_t v1330 = v1329 + 1;
        if ((unint64_t)(v1329 + 1) >> 62) {
          goto LABEL_2265;
        }
        uint64_t v1331 = v1286 - v1328;
        if (v1331 >> 1 > v1330) {
          unint64_t v1330 = v1331 >> 1;
        }
        if ((unint64_t)v1331 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1332 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1332 = v1330;
        }
        if (v1332)
        {
          v1333 = (char *)sub_20B05D1AC((uint64_t)(v13 + 2), v1332);
          v1328 = *v13;
          v1318 = v13[1];
        }
        else
        {
          v1333 = 0;
        }
        v1334 = &v1333[4 * v1329];
        v1286 = &v1333[4 * v1332];
        *(_DWORD *)v1334 = v1298;
        v1327 = v1334 + 4;
        while (v1318 != v1328)
        {
          int v1335 = *((_DWORD *)v1318 - 1);
          v1318 -= 4;
          *((_DWORD *)v1334 - 1) = v1335;
          v1334 -= 4;
        }
        *uint64_t v13 = v1334;
        v13[1] = v1327;
        v13[2] = v1286;
        if (v1328)
        {
          operator delete(v1328);
          v1286 = *v1287;
        }
      }
      else
      {
        *(_DWORD *)v1318 = v1298;
        v1327 = v1318 + 4;
      }
      v13[1] = v1327;
      int v1336 = v1285 + 3;
      if (v1327 < v1286)
      {
        *(_DWORD *)v1327 = v1336;
        v1337 = v1327 + 4;
LABEL_2260:
        v13[1] = v1337;
        int v16 = v1357 + 4;
        return (v16 + a4);
      }
      v1338 = *v13;
      uint64_t v1339 = (v1327 - *v13) >> 2;
      unint64_t v1340 = v1339 + 1;
      if (!((unint64_t)(v1339 + 1) >> 62))
      {
        uint64_t v1341 = v1286 - v1338;
        if (v1341 >> 1 > v1340) {
          unint64_t v1340 = v1341 >> 1;
        }
        if ((unint64_t)v1341 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v1342 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v1342 = v1340;
        }
        if (v1342)
        {
          v1343 = (char *)sub_20B05D1AC((uint64_t)(v13 + 2), v1342);
          v1338 = *v13;
          v1327 = v13[1];
        }
        else
        {
          v1343 = 0;
        }
        v1344 = &v1343[4 * v1339];
        v1345 = &v1343[4 * v1342];
        *(_DWORD *)v1344 = v1336;
        v1337 = v1344 + 4;
        while (v1327 != v1338)
        {
          int v1346 = *((_DWORD *)v1327 - 1);
          v1327 -= 4;
          *((_DWORD *)v1344 - 1) = v1346;
          v1344 -= 4;
        }
        *uint64_t v13 = v1344;
        v13[1] = v1337;
        v13[2] = v1345;
        if (v1338) {
          operator delete(v1338);
        }
        goto LABEL_2260;
      }
LABEL_2265:
      sub_20B05D0BC();
    }
LABEL_2264:
    sub_20B05D0BC();
  }
  return (v16 + a4);
}

void sub_20B158AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (__p) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  if (a41) {
    operator delete(a41);
  }

  _Unwind_Resume(a1);
}

void sub_20B158F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B159204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1594D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B159734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B1598A4(uint64_t a1, uint64_t *a2)
{
  sub_20B060E0C((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  __int8 v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void sub_20B159948(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_20B05E36C(a2 + 10, 0);
    int32x4_t v3 = (void *)a2[6];
    if (v3)
    {
      a2[7] = v3;
      operator delete(v3);
    }
    JUMPOUT(0x210532650);
  }
}

void *sub_20B1599B0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *a2;
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v5)
          {
            if (v10[2] == v5) {
              return v10;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6) {
                v11 %= v6;
              }
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v5;
  v10[2] = *(void *)a3;
  *((_DWORD *)v10 + 6) = *(_DWORD *)(a3 + 8);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_20B05F7E0(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_20B159BC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20B159BD8(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *a2;
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v5)
        {
          if (i[2] == v5) {
            return i;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6) {
              v11 %= v6;
            }
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v5;
  *((_OWORD *)i + 1) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_20B05F7E0(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *uint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20B159DE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B159DF8(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  unint64_t v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = a2[2];
      unint64_t v8[2] = v9;
      *((_DWORD *)v8 + 6) = *((_DWORD *)a2 + 6);
      uint64_t v10 = (uint64_t *)*v8;
      v8[1] = v9;
      unint64_t v11 = sub_20B0608F0((uint64_t)a1, v9, v8 + 2);
      sub_20B060A48(a1, v8, v11);
      a2 = (uint64_t *)*a2;
      unint64_t v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      float v12 = (uint64_t *)*v8;
      operator delete(v8);
      unint64_t v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_20B159F0C(a1, (_OWORD *)a2 + 1);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_20B159ED8(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    int16x4_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20B159EF8(_Unwind_Exception *a1)
{
}

void *sub_20B159F0C(void *a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *((_OWORD *)v4 + 1) = *a2;
  unint64_t v5 = v4[2];
  *uint64_t v4 = 0;
  v4[1] = v5;
  uint64_t v6 = sub_20B0608F0((uint64_t)a1, v5, v4 + 2);
  sub_20B060A48(a1, v4, v6);
  return v4;
}

void sub_20B159F74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B15A098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15A24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15A364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15A478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *sub_20B15A488(uint64_t a1)
{
  if (a1 <= 458752)
  {
    if (a1 > 0x40000)
    {
      switch(a1)
      {
        case 393217:
          uint64_t result = "Short1";
          break;
        case 393218:
          uint64_t result = "Short2";
          break;
        case 393219:
          uint64_t result = "Short3";
          break;
        case 393220:
          uint64_t result = "Short4";
          break;
        default:
LABEL_48:
          uint64_t result = 0;
          break;
      }
    }
    else if (a1 <= 0x20000)
    {
      uint64_t v2 = a1 - 65537;
      uint64_t result = "UChar1";
      switch(v2)
      {
        case 0:
          return result;
        case 1:
          uint64_t result = "UChar2";
          break;
        case 2:
          uint64_t result = "UChar3";
          break;
        case 3:
          uint64_t result = "UChar4";
          break;
        default:
          if ("UChar1") {
            goto LABEL_48;
          }
          uint64_t result = "Invalid";
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 196609:
          uint64_t result = "UChar1Norm";
          break;
        case 196610:
          uint64_t result = "UChar2Norm";
          break;
        case 196611:
          uint64_t result = "UChar3Norm";
          break;
        case 196612:
          uint64_t result = "UChar4Norm";
          break;
        default:
          goto LABEL_48;
      }
    }
  }
  else if (a1 > 655360)
  {
    if (a1 <= 720896)
    {
      switch(a1)
      {
        case 655361:
          uint64_t result = "Int1";
          break;
        case 655362:
          uint64_t result = "Int2";
          break;
        case 655363:
          uint64_t result = "Int3";
          break;
        case 655364:
          uint64_t result = "Int4";
          break;
        default:
          if (a1 != 659460) {
            goto LABEL_48;
          }
          uint64_t result = "Int1010102Norm";
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 786433:
          uint64_t result = "Float1";
          break;
        case 786434:
          uint64_t result = "Float2";
          break;
        case 786435:
          uint64_t result = "Float3";
          break;
        case 786436:
          uint64_t result = "Float4";
          break;
        default:
          goto LABEL_48;
      }
    }
  }
  else if (a1 > 589824)
  {
    switch(a1)
    {
      case 589825:
        uint64_t result = "UInt1";
        break;
      case 589826:
        uint64_t result = "UInt2";
        break;
      case 589827:
        uint64_t result = "UInt3";
        break;
      case 589828:
        uint64_t result = "UInt4";
        break;
      default:
        if (a1 != 593924) {
          goto LABEL_48;
        }
        uint64_t result = "UInt1010102Norm";
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 458753:
        uint64_t result = "UShort1Norm";
        break;
      case 458754:
        uint64_t result = "UShort2Norm";
        break;
      case 458755:
        uint64_t result = "UShort3Norm";
        break;
      case 458756:
        uint64_t result = "UShort4Norm";
        break;
      default:
        JUMPOUT(0);
    }
  }
  return result;
}

void sub_20B15ABB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15AE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15B070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15B2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B15B470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B15B57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15B8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20B15BBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20B15BEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_20B15BFD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20B15C3C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B15C644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B15C8B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15CA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15CAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B15CB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B15CCA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 26) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B15CCDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 29) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B15CDC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B15CDF0(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_20B06A85C((void *)a1);
  uint64_t v6 = v5;
  sub_20B15D9C0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B15CE50(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B15CE68(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_20B06A85C((void *)a1);
  uint64_t v6 = v5;
  sub_20B15E540((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B15CED0(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

void sub_20B15CF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15D024(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B15D220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B15D3B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B15D544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

std::type_info *sub_20B15D58C(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B15CCA4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EFA0, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B15D618(void *a1)
{
  if (sub_20B15CCA4((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B15F328, &unk_26BF4EFA0);
  }
}

void sub_20B15D840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

std::type_info *sub_20B15D888(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B15CCDC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EF88, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B15D914(void *a1)
{
  if (sub_20B15CCDC((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B15F3E4, &unk_26BF4EF88);
  }
}

void sub_20B15D9C0(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint8x8_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_20B15DBC8((uint64_t)a1, a2);
              uint8x8_t v7 = v10;
              if (v3)
              {
                unint64_t v11 = 0;
                do
                {
                  float v12 = &v10[v11 / 8];
                  long long v13 = *(_OWORD *)(v9 + v11);
                  long long v14 = *(_OWORD *)(v9 + v11 + 16);
                  long long v15 = *(_OWORD *)(v9 + v11 + 48);
                  *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                  *((_OWORD *)v12 + 3) = v15;
                  *(_OWORD *)float v12 = v13;
                  *((_OWORD *)v12 + 1) = v14;
                  v11 += 64;
                }
                while (v3 << 6 != v11);
              }
            }
            unint64_t v16 = *a3;
            unint64_t v17 = v3 << 6;
            do
            {
              uint64_t v18 = (_OWORD *)((char *)v7 + v17);
              long long v19 = *v16;
              long long v20 = v16[1];
              long long v21 = v16[3];
              v18[2] = v16[2];
              v18[3] = v21;
              _OWORD *v18 = v19;
              v18[1] = v20;
              v17 += 64;
            }
            while (a2 << 6 != v17);
          }
          int64x2_t v22 = v7;
          goto LABEL_31;
        }
        uint8x8_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v31 = a2;
      }
      else {
        unint64_t v31 = *a1;
      }
      unsigned __int32 v32 = sub_20B15DBC8((uint64_t)a1, a2);
      int64x2_t v22 = v32;
      if (v31)
      {
        unint64_t v33 = v31 << 6;
        BOOL v34 = v32;
        do
        {
          long long v35 = *(_OWORD *)v7;
          long long v36 = *((_OWORD *)v7 + 1);
          long long v37 = *((_OWORD *)v7 + 3);
          *((_OWORD *)v34 + 2) = *((_OWORD *)v7 + 2);
          *((_OWORD *)v34 + 3) = v37;
          *(_OWORD *)BOOL v34 = v35;
          *((_OWORD *)v34 + 1) = v36;
          v34 += 8;
          v7 += 8;
          v33 -= 64;
        }
        while (v33);
      }
      if (v3 < a2)
      {
        unint64_t v38 = *a3;
        unint64_t v39 = v3 << 6;
        do
        {
          int v40 = (_OWORD *)((char *)v32 + v39);
          long long v41 = *v38;
          long long v42 = v38[1];
          long long v43 = v38[3];
          v40[2] = v38[2];
          v40[3] = v43;
          *int v40 = v41;
          v40[1] = v42;
          v39 += 64;
        }
        while (a2 << 6 != v39);
      }
      goto LABEL_31;
    }
    unint64_t v23 = a2 << 6;
    if ((a2 << 6) / a2 == 64)
    {
      uint64_t v24 = sub_20B15DBC8((uint64_t)a1, a2);
      int64x2_t v22 = v24;
      unint64_t v25 = 0;
      uint64_t v26 = *a3;
      do
      {
        unint64_t v27 = &v24[v25 / 8];
        long long v28 = *v26;
        long long v29 = v26[1];
        long long v30 = v26[3];
        *((_OWORD *)v27 + 2) = v26[2];
        *((_OWORD *)v27 + 3) = v30;
        *(_OWORD *)unint64_t v27 = v28;
        *((_OWORD *)v27 + 1) = v29;
        v25 += 64;
      }
      while (v23 != v25);
LABEL_31:
      if (v22 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v22;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B15DBC8(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 >> 58) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (a2 << 6) | 0x10;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B15DC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B15DC68(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B15DC88(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B15DDF8(a1);
}

uint64_t sub_20B15DC98()
{
  return 1;
}

unint64_t sub_20B15DCA0(uint64_t **a1)
{
  return sub_20B15DE60((uint64_t)&v2, *a1);
}

uint64_t sub_20B15DCC8(uint64_t **a1, uint64_t *a2)
{
  return sub_20B15E3CC(*a1, *a2);
}

uint64_t sub_20B15DCD4(uint64_t **a1, uint64_t a2)
{
  return sub_20B15E3CC(*a1, a2);
}

uint64_t sub_20B15DCE0()
{
  return 0;
}

uint64_t sub_20B15DCEC(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B15DD40()
{
  return &unk_26BF4EFA0;
}

uint64_t sub_20B15DD4C()
{
  return 1;
}

void *sub_20B15DD54()
{
  return &unk_26BF4EE20;
}

uint64_t sub_20B15DD60(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B15DD68(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B15DD74(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B15DDA8(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EFA0, a2);
}

void *sub_20B15DDCC()
{
  return &unk_26BF4EFA0;
}

uint64_t sub_20B15DDD8(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B15DDE0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50A38;
  sub_20B0A6DA4();
}

uint64_t *sub_20B15DDF8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B15DE60(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    size_t v3 = (unsigned int *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 16;
      sub_20B15DED8((uint64_t)v7, v3);
      size_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B15DED8(uint64_t a1, unsigned int *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_20B15DFA0((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_20B15DFA0(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14, unsigned int *a15, unsigned int *a16, unsigned int *a17)
{
  uint64_t v17 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v17 += (unint64_t)(*(void *)a1 + v17 + (*(void *)a1 + v17) * (*(void *)a1 + v17)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v17;
  return sub_20B15E010(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_20B15E010(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14, unsigned int *a15, unsigned int *a16)
{
  uint64_t v16 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v16 += (unint64_t)(*(void *)a1 + v16 + (*(void *)a1 + v16) * (*(void *)a1 + v16)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v16;
  return sub_20B15E07C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_20B15E07C(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14, unsigned int *a15)
{
  uint64_t v15 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v15 += (unint64_t)(*(void *)a1 + v15 + (*(void *)a1 + v15) * (*(void *)a1 + v15)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v15;
  return sub_20B15E0E4(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_20B15E0E4(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13, unsigned int *a14)
{
  uint64_t v14 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v14 += (unint64_t)(*(void *)a1 + v14 + (*(void *)a1 + v14) * (*(void *)a1 + v14)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v14;
  return sub_20B15E148(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_20B15E148(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12, unsigned int *a13)
{
  uint64_t v13 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v13 += (unint64_t)(*(void *)a1 + v13 + (*(void *)a1 + v13) * (*(void *)a1 + v13)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v13;
  return sub_20B15E1A8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_20B15E1A8(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11, unsigned int *a12)
{
  uint64_t v12 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v12 += (unint64_t)(*(void *)a1 + v12 + (*(void *)a1 + v12) * (*(void *)a1 + v12)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v12;
  return sub_20B15E204(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_20B15E204(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10, unsigned int *a11)
{
  uint64_t v11 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v11 += (unint64_t)(*(void *)a1 + v11 + (*(void *)a1 + v11) * (*(void *)a1 + v11)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v11;
  return sub_20B15E25C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_20B15E25C(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9, unsigned int *a10)
{
  uint64_t v10 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v10 += (unint64_t)(*(void *)a1 + v10 + (*(void *)a1 + v10) * (*(void *)a1 + v10)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v10;
  return sub_20B15E2B0(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_20B15E2B0(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, unsigned int *a9)
{
  uint64_t v9 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v9 += (unint64_t)(*(void *)a1 + v9 + (*(void *)a1 + v9) * (*(void *)a1 + v9)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v9;
  return sub_20B15E300(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_20B15E300(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_20B15E348(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20B15E348(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  uint64_t v7 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v7 += (unint64_t)(*(void *)a1 + v7 + (*(void *)a1 + v7) * (*(void *)a1 + v7)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v7;
  return sub_20B15E38C(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_20B15E38C(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v6 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v6 += (unint64_t)(*(void *)a1 + v6 + (*(void *)a1 + v6) * (*(void *)a1 + v6)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return sub_20B0A7C48(a1, a3, a4, a5, a6);
}

uint64_t sub_20B15E3CC(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = (v5 << 6) - 64;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
    if (!result) {
      break;
    }
    v6 += 64;
    v7 += 64;
    uint64_t v9 = v8;
    v8 -= 64;
  }
  while (v9);
  return result;
}

uint64_t sub_20B15E47C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B15E528(void *a1, uint64_t a2)
{
  *a1 += 64;
  return MEMORY[0x270FA3EC8](a2);
}

void sub_20B15E540(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_20B15E79C((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                unint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &v10[v11 / 8];
                  long long v13 = *(_OWORD *)(v9 + v11);
                  long long v14 = *(_OWORD *)(v9 + v11 + 16);
                  long long v15 = *(_OWORD *)(v9 + v11 + 48);
                  *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                  *((_OWORD *)v12 + 3) = v15;
                  *(_OWORD *)uint64_t v12 = v13;
                  *((_OWORD *)v12 + 1) = v14;
                  long long v16 = *(_OWORD *)(v9 + v11 + 64);
                  long long v17 = *(_OWORD *)(v9 + v11 + 80);
                  long long v18 = *(_OWORD *)(v9 + v11 + 112);
                  *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + v11 + 96);
                  *((_OWORD *)v12 + 7) = v18;
                  *((_OWORD *)v12 + 4) = v16;
                  *((_OWORD *)v12 + 5) = v17;
                  v11 += 128;
                }
                while (v3 << 7 != v11);
              }
            }
            long long v19 = *a3;
            unint64_t v20 = v3 << 7;
            do
            {
              long long v21 = (_OWORD *)((char *)v7 + v20);
              long long v22 = *v19;
              long long v23 = v19[1];
              long long v24 = v19[3];
              _OWORD v21[2] = v19[2];
              v21[3] = v24;
              *long long v21 = v22;
              v21[1] = v23;
              long long v25 = v19[4];
              long long v26 = v19[5];
              long long v27 = v19[7];
              v21[6] = v19[6];
              v21[7] = v27;
              v21[4] = v25;
              v21[5] = v26;
              v20 += 128;
            }
            while (a2 << 7 != v20);
          }
          long long v28 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v40 = a2;
      }
      else {
        unint64_t v40 = *a1;
      }
      long long v41 = sub_20B15E79C((uint64_t)a1, a2);
      long long v28 = v41;
      if (v40)
      {
        unint64_t v42 = v40 << 7;
        long long v43 = v41;
        do
        {
          long long v44 = *(_OWORD *)v7;
          long long v45 = *((_OWORD *)v7 + 1);
          long long v46 = *((_OWORD *)v7 + 3);
          *((_OWORD *)v43 + 2) = *((_OWORD *)v7 + 2);
          *((_OWORD *)v43 + 3) = v46;
          *(_OWORD *)long long v43 = v44;
          *((_OWORD *)v43 + 1) = v45;
          long long v47 = *((_OWORD *)v7 + 4);
          long long v48 = *((_OWORD *)v7 + 5);
          long long v49 = *((_OWORD *)v7 + 7);
          *((_OWORD *)v43 + 6) = *((_OWORD *)v7 + 6);
          *((_OWORD *)v43 + 7) = v49;
          *((_OWORD *)v43 + 4) = v47;
          *((_OWORD *)v43 + 5) = v48;
          v7 += 16;
          v43 += 16;
          v42 -= 128;
        }
        while (v42);
      }
      if (v3 < a2)
      {
        uint64_t v50 = *a3;
        unint64_t v51 = v3 << 7;
        do
        {
          uint64_t v52 = (_OWORD *)((char *)v41 + v51);
          long long v53 = *v50;
          long long v54 = v50[1];
          long long v55 = v50[3];
          v52[2] = v50[2];
          v52[3] = v55;
          *uint64_t v52 = v53;
          v52[1] = v54;
          long long v56 = v50[4];
          long long v57 = v50[5];
          long long v58 = v50[7];
          v52[6] = v50[6];
          v52[7] = v58;
          v52[4] = v56;
          v52[5] = v57;
          v51 += 128;
        }
        while (a2 << 7 != v51);
      }
      goto LABEL_31;
    }
    unint64_t v29 = a2 << 7;
    if ((a2 << 7) / a2 == 128)
    {
      long long v30 = sub_20B15E79C((uint64_t)a1, a2);
      long long v28 = v30;
      unint64_t v31 = 0;
      unsigned __int32 v32 = *a3;
      do
      {
        unint64_t v33 = &v30[v31 / 8];
        long long v34 = *v32;
        long long v35 = v32[1];
        long long v36 = v32[3];
        *((_OWORD *)v33 + 2) = v32[2];
        *((_OWORD *)v33 + 3) = v36;
        *(_OWORD *)unint64_t v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        long long v37 = v32[4];
        long long v38 = v32[5];
        long long v39 = v32[7];
        *((_OWORD *)v33 + 6) = v32[6];
        *((_OWORD *)v33 + 7) = v39;
        *((_OWORD *)v33 + 4) = v37;
        *((_OWORD *)v33 + 5) = v38;
        v31 += 128;
      }
      while (v29 != v31);
LABEL_31:
      if (v28 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v28;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B15E79C(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 >> 57) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (a2 << 7) | 0x10;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B15E824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B15E83C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B15E85C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B15E9CC(a1);
}

uint64_t sub_20B15E86C()
{
  return 1;
}

unint64_t sub_20B15E874(uint64_t **a1)
{
  return sub_20B15EA34((uint64_t)&v2, *a1);
}

uint64_t sub_20B15E89C(uint64_t **a1, uint64_t *a2)
{
  return sub_20B15F058(*a1, *a2);
}

uint64_t sub_20B15E8A8(uint64_t **a1, uint64_t a2)
{
  return sub_20B15F058(*a1, a2);
}

uint64_t sub_20B15E8B4()
{
  return 0;
}

uint64_t sub_20B15E8C0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B15E914()
{
  return &unk_26BF4EF88;
}

uint64_t sub_20B15E920()
{
  return 1;
}

void *sub_20B15E928()
{
  return &unk_26BF4EE10;
}

uint64_t sub_20B15E934(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B15E93C(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B15E948(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B15E97C(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF88, a2);
}

void *sub_20B15E9A0()
{
  return &unk_26BF4EF88;
}

uint64_t sub_20B15E9AC(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B15E9B4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50980;
  sub_20B0A6DA4();
}

uint64_t *sub_20B15E9CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B15EA34(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    size_t v3 = (uint64_t *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 16;
      sub_20B15EAAC((uint64_t)v7, v3);
      size_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B15EAAC(uint64_t a1, uint64_t *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_20B15EB74((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_20B15EB74(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, void *a17)
{
  uint64_t v17 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v17 += (unint64_t)(*(void *)a1 + v17 + (*(void *)a1 + v17) * (*(void *)a1 + v17)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v17;
  return sub_20B15EBE4(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_20B15EBE4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, void *a16)
{
  uint64_t v16 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v16 += (unint64_t)(*(void *)a1 + v16 + (*(void *)a1 + v16) * (*(void *)a1 + v16)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v16;
  return sub_20B15EC50(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_20B15EC50(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, void *a15)
{
  uint64_t v15 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v15 += (unint64_t)(*(void *)a1 + v15 + (*(void *)a1 + v15) * (*(void *)a1 + v15)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v15;
  return sub_20B15ECB8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_20B15ECB8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, void *a14)
{
  uint64_t v14 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v14 += (unint64_t)(*(void *)a1 + v14 + (*(void *)a1 + v14) * (*(void *)a1 + v14)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v14;
  return sub_20B15ED1C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_20B15ED1C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, void *a13)
{
  uint64_t v13 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v13 += (unint64_t)(*(void *)a1 + v13 + (*(void *)a1 + v13) * (*(void *)a1 + v13)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v13;
  return sub_20B15ED7C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_20B15ED7C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, void *a12)
{
  uint64_t v12 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v12 += (unint64_t)(*(void *)a1 + v12 + (*(void *)a1 + v12) * (*(void *)a1 + v12)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v12;
  return sub_20B15EDD8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_20B15EDD8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, void *a11)
{
  uint64_t v11 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v11 += (unint64_t)(*(void *)a1 + v11 + (*(void *)a1 + v11) * (*(void *)a1 + v11)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v11;
  return sub_20B15EE30(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_20B15EE30(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, void *a10)
{
  uint64_t v10 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v10 += (unint64_t)(*(void *)a1 + v10 + (*(void *)a1 + v10) * (*(void *)a1 + v10)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v10;
  return sub_20B15EE84(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_20B15EE84(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, void *a9)
{
  uint64_t v9 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v9 += (unint64_t)(*(void *)a1 + v9 + (*(void *)a1 + v9) * (*(void *)a1 + v9)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v9;
  return sub_20B15EED4(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_20B15EED4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, void *a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_20B15EF1C(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_20B15EF1C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, void *a7)
{
  uint64_t v7 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v7 += (unint64_t)(*(void *)a1 + v7 + (*(void *)a1 + v7) * (*(void *)a1 + v7)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v7;
  return sub_20B15EF60(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_20B15EF60(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  uint64_t v6 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v6 += (unint64_t)(*(void *)a1 + v6 + (*(void *)a1 + v6) * (*(void *)a1 + v6)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return sub_20B15EFA0(a1, a3, a4, a5, a6);
}

uint64_t sub_20B15EFA0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_20B15EFDC(a1, a3, a4, a5);
}

uint64_t sub_20B15EFDC(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_20B15F014(a1, a3, a4);
}

uint64_t sub_20B15F014(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  *(void *)uint64_t result = *a3 + ((unint64_t)(v3 + *a3 + (v3 + *a3) * (v3 + *a3)) >> 1);
  return result;
}

uint64_t sub_20B15F058(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = (v5 << 7) - 128;
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
    if (!result) {
      break;
    }
    v6 += 128;
    v7 += 128;
    uint64_t v9 = v8;
    v8 -= 128;
  }
  while (v9);
  return result;
}

uint64_t sub_20B15F108(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B15F1B4(void *a1, uint64_t a2)
{
  *a1 += 128;
  return MEMORY[0x270FA3EC0](a2);
}

void sub_20B15F1CC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4f]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B15DBC8((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = v5 << 6;
        uint64_t v9 = v6;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          long long v12 = v4[3];
          v9[2] = v4[2];
          v9[3] = v12;
          *uint64_t v9 = v10;
          v9[1] = v11;
          v9 += 4;
          v4 += 4;
          v8 -= 64;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_20B15F270(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]");
      uint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B15E79C((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = v5 << 7;
        uint64_t v9 = v6;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          long long v12 = v4[3];
          v9[2] = v4[2];
          v9[3] = v12;
          *uint64_t v9 = v10;
          v9[1] = v11;
          long long v13 = v4[4];
          long long v14 = v4[5];
          long long v15 = v4[7];
          v9[6] = v4[6];
          v9[7] = v15;
          v9[4] = v13;
          v9[5] = v14;
          v4 += 8;
          v9 += 8;
          v8 -= 128;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_20B15F328()
{
}

uint64_t sub_20B15F388(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B15F3E4()
{
}

uint64_t sub_20B15F444(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B15F508(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15F570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t **sub_20B15F584(uint64_t **a1, uint64_t **a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *a2;
    uint64_t v3 = (uint64_t)a2[1];
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)*a2) >> 3);
    uint64_t v6 = (uint64_t)a1[2];
    uint64_t v7 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)*a1) >> 3) < v5)
    {
      if (v7)
      {
        uint64_t v8 = a1[1];
        uint64_t v9 = *a1;
        if (v8 != v7)
        {
          do
          {
            long long v10 = v8 - 3;
            sub_20B06A698((uint64_t)(v8 - 2));
            uint64_t v8 = v10;
          }
          while (v10 != v7);
          uint64_t v9 = *a1;
        }
        a1[1] = v7;
        operator delete(v9);
        uint64_t v6 = 0;
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
      }
      if (v5 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_30;
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v5) {
        uint64_t v12 = v5;
      }
      unint64_t v13 = v11 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
      if (v13 > 0xAAAAAAAAAAAAAAALL) {
LABEL_30:
      }
        sub_20B05D0BC();
      long long v14 = (char *)sub_20B16D7A0(v13);
      *a1 = (uint64_t *)v14;
      a1[1] = (uint64_t *)v14;
      a1[2] = (uint64_t *)&v14[24 * v15];
      uint64_t v16 = a1;
      uint64_t v17 = (uint64_t)v4;
LABEL_20:
      sub_20B16D944(v16, v17, v3);
      return a1;
    }
    long long v18 = a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (v18 - v7) < v5)
    {
      long long v19 = &v4[v18 - v7];
      if (v18 != v7)
      {
        do
        {
          unint64_t v20 = v4 + 1;
          uint64_t v21 = *v4;
          v4 += 3;
          long long v22 = v7 + 1;
          *uint64_t v7 = v21;
          v7 += 3;
          sub_20B120EA0(v22, v20);
        }
        while (v4 != v19);
      }
      uint64_t v16 = a1;
      uint64_t v17 = (uint64_t)v19;
      goto LABEL_20;
    }
    if (v4 == (uint64_t *)v3)
    {
      long long v23 = *a1;
    }
    else
    {
      long long v23 = *a1;
      do
      {
        long long v24 = v4 + 1;
        uint64_t v25 = *v4;
        v4 += 3;
        long long v26 = v7 + 1;
        *uint64_t v7 = v25;
        v7 += 3;
        sub_20B120EA0(v26, v24);
        v23 += 3;
      }
      while (v4 != (uint64_t *)v3);
      long long v18 = a1[1];
    }
    if (v18 != v23)
    {
      do
      {
        long long v27 = v18 - 3;
        sub_20B06A698((uint64_t)(v18 - 2));
        long long v18 = v27;
      }
      while (v27 != v23);
    }
    a1[1] = v23;
  }
  return a1;
}

void sub_20B15F7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15F95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B15FBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B15FC18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 58) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B15FC50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 56) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B15FDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B15FE3C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v5 = 0;
  sub_20B06A85C((void *)a1);
  uint64_t v6 = &v5;
  sub_20B16D9E0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B15FE98(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

void sub_20B1600A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20B160100(uint64_t *result, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_20B05D0BC();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    _OWORD v5[4] = result + 2;
    v5[0] = sub_20B16D7A0(a2);
    v5[1] = v5[0] + v3;
    void v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    sub_20B16D6B8(v2, v5);
    return (uint64_t *)sub_20B16D74C((uint64_t)v5);
  }
  return result;
}

uint64_t sub_20B1601A4(uint64_t *a1, void *a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  uint64_t v6 = (void *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_20B05D0BC();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    _OWORD v15[4] = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_20B16D7A0(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v14 = (void *)(v12 + 24 * v9);
    v15[0] = v12;
    v15[1] = v14;
    v15[3] = v12 + 24 * v13;
    void *v14 = *a2;
    sub_20B0A7150(v14 + 1, a2 + 1);
    v15[2] = v14 + 3;
    sub_20B16D6B8(a1, v15);
    uint64_t v7 = (void *)a1[1];
    uint64_t result = sub_20B16D74C((uint64_t)v15);
  }
  else
  {
    void *v6 = *a2;
    uint64_t v7 = v6 + 3;
    uint64_t result = (uint64_t)sub_20B0A7150(v6 + 1, a2 + 1);
  }
  a1[1] = (uint64_t)v7;
  return result;
}

void sub_20B160390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va1);
  sub_20B06A698(v3 - 72);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_20B1605C8(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (double *)a1[1];
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
  if (v5 == (double *)*a1 || (double v7 = *(double *)a2, *(double *)a2 > *(v5 - 3)))
  {
    unint64_t v8 = a1[2];
    if ((unint64_t)v5 < v8)
    {
      *uint64_t v5 = *(double *)a2;
      uint64_t result = sub_20B0A592C((void *)v5 + 1, a2 + 1);
      uint64_t v10 = v5 + 3;
      a1[1] = (uint64_t)(v5 + 3);
LABEL_29:
      a1[1] = (uint64_t)v10;
      return result;
    }
    unint64_t v11 = v6 + 1;
    if (v6 + 1 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v4) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      uint64_t v83 = a1 + 2;
      if (v13) {
        unint64_t v13 = (unint64_t)sub_20B16D7A0(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v33 = (double *)(v13 + 24 * v6);
      unint64_t v79 = v13;
      uint64_t v80 = v33;
      uint64_t v81 = v33;
      unint64_t v82 = v13 + 24 * v14;
      *unint64_t v33 = *(double *)a2;
      sub_20B0A592C((void *)v33 + 1, a2 + 1);
      v81 += 3;
      sub_20B16D6B8(a1, &v79);
      uint64_t v10 = (void *)a1[1];
      uint64_t result = (void *)sub_20B16D74C((uint64_t)&v79);
      goto LABEL_29;
    }
LABEL_77:
    sub_20B05D0BC();
  }
  uint64_t v15 = (double *)*a1;
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 3);
  do
  {
    unint64_t v17 = v16 >> 1;
    long long v18 = &v15[3 * (v16 >> 1)];
    double v20 = *v18;
    long long v19 = v18 + 3;
    v16 += ~(v16 >> 1);
    if (v20 < v7) {
      uint64_t v15 = v19;
    }
    else {
      unint64_t v16 = v17;
    }
  }
  while (v16);
  if (v5 != v15 && *v15 == v7)
  {
    *uint64_t v15 = v7;
    uint64_t v21 = a2 + 1;
    long long v22 = v15 + 1;
LABEL_58:
    return sub_20B120EA0(v22, v21);
  }
  uint64_t v23 = ((uint64_t)v15 - v4) >> 3;
  int64_t v24 = 0xAAAAAAAAAAAAAAABLL * v23;
  unint64_t v25 = a1[2];
  if ((unint64_t)v5 < v25)
  {
    if (v15 == v5)
    {
      *uint64_t v5 = v7;
      uint64_t result = sub_20B0A592C((void *)(v4 + 8 * v23 + 8), a2 + 1);
      a1[1] = (uint64_t)(v5 + 3);
      return result;
    }
    long long v26 = v15 + 3;
    long long v27 = v5 - 3;
    if ((unint64_t)v5 < 0x18)
    {
      unint64_t v29 = (void *)a1[1];
    }
    else
    {
      long long v28 = v5 - 3;
      unint64_t v29 = (void *)a1[1];
      do
      {
        long long v30 = v28 + 1;
        uint64_t v31 = *(void *)v28;
        v28 += 3;
        unsigned __int32 v32 = v29 + 1;
        *unint64_t v29 = v31;
        v29 += 3;
        sub_20B0A7150(v32, v30);
      }
      while (v28 < v5);
    }
    a1[1] = (uint64_t)v29;
    if (v5 != v26)
    {
      uint64_t v41 = v5 - v26;
      do
      {
        unint64_t v42 = v27 + 1;
        double *v27 = v15[v41 - 3];
        v27 -= 3;
        sub_20B0A6EB4(v42, &v15[v41 - 2]);
        v41 -= 3;
      }
      while (v41 * 8);
      unint64_t v29 = (void *)a1[1];
    }
    BOOL v44 = v15 <= (double *)a2 && v29 > a2;
    long long v45 = &a2[3 * v44];
    uint64_t v46 = *v45;
    uint64_t v21 = v45 + 1;
    *(void *)uint64_t v15 = v46;
    long long v22 = (void *)(v4 + 24 * v24 + 8);
    goto LABEL_58;
  }
  unint64_t v34 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_77;
  }
  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v4) >> 3);
  if (2 * v35 > v34) {
    unint64_t v34 = 2 * v35;
  }
  if (v35 >= 0x555555555555555) {
    unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v36 = v34;
  }
  unsigned __int32 v78 = a1 + 2;
  if (v36)
  {
    long long v38 = (char *)sub_20B16D7A0(v36);
  }
  else
  {
    long long v38 = 0;
    uint64_t v37 = 0;
  }
  long long v39 = &v38[24 * v24];
  uint64_t v74 = v38;
  unint64_t v75 = (double *)v39;
  double v76 = (double *)v39;
  long long v77 = &v38[24 * v37];
  if (v24 == v37)
  {
    if ((uint64_t)v15 - v4 < 1)
    {
      if (v15 == (double *)v4) {
        unint64_t v47 = 1;
      }
      else {
        unint64_t v47 = 2 * v24;
      }
      uint64_t v83 = a1 + 2;
      long long v48 = (char *)sub_20B16D7A0(v47);
      uint64_t v50 = v48;
      unint64_t v51 = &v48[24 * (v47 >> 2)];
      uint64_t v52 = &v48[24 * v49];
      long long v53 = v75;
      long long v54 = v76;
      long long v55 = v75;
      long long v56 = (double *)v51;
      if (v76 != v75)
      {
        unint64_t v73 = &v48[24 * v49];
        long long v56 = (double *)&v51[24 * (((char *)v76 - (char *)v75) / 24)];
        uint64_t v57 = 24 * (((char *)v76 - (char *)v75) / 24);
        long long v58 = &v48[24 * (v47 >> 2) + 8];
        uint64_t v59 = v75 + 1;
        do
        {
          *((void *)v58 - 1) = *(v59 - 1);
          long long v58 = (char *)(sub_20B0A7150(v58, v59) + 3);
          v59 += 3;
          v57 -= 24;
        }
        while (v57);
        long long v55 = v54;
        uint64_t v52 = v73;
      }
      int v60 = v74;
      uint64_t v61 = v77;
      uint64_t v74 = v50;
      unint64_t v75 = (double *)v51;
      unint64_t v79 = (unint64_t)v60;
      uint64_t v80 = v53;
      double v76 = v56;
      long long v77 = v52;
      uint64_t v81 = v55;
      unint64_t v82 = (unint64_t)v61;
      sub_20B16D74C((uint64_t)&v79);
      long long v39 = (char *)v56;
    }
    else
    {
      uint64_t v40 = v24 + 2;
      if (v24 >= -1) {
        uint64_t v40 = v24 + 1;
      }
      v39 -= 24 * (v40 >> 1);
      unint64_t v75 = (double *)v39;
      double v76 = (double *)v39;
    }
  }
  *(void *)long long v39 = *a2;
  sub_20B0A592C((void *)v39 + 1, a2 + 1);
  uint64_t v62 = (uint64_t)v75;
  uint64_t v63 = v76 + 3;
  v76 += 3;
  uint64_t v64 = *a1;
  if ((double *)*a1 != v15)
  {
    uint64_t v65 = v15;
    do
    {
      uint64_t v66 = *((void *)v65 - 3);
      v65 -= 3;
      *(void *)(v62 - 24) = v66;
      v62 -= 24;
      sub_20B0A7150((void *)(v62 + 8), (void *)v65 + 1);
    }
    while (v65 != (double *)v64);
    uint64_t v63 = v76;
  }
  unint64_t v75 = (double *)v62;
  uint64_t v67 = (double *)a1[1];
  if (v67 != v15)
  {
    do
    {
      float v68 = v15 + 1;
      double v69 = *v15;
      v15 += 3;
      uint64_t v70 = v63 + 1;
      *uint64_t v63 = v69;
      v63 += 3;
      sub_20B0A7150(v70, v68);
    }
    while (v15 != v67);
    uint64_t v62 = (uint64_t)v75;
    uint64_t v15 = (double *)a1[1];
  }
  uint64_t v71 = *a1;
  *a1 = v62;
  a1[1] = (uint64_t)v63;
  uint64_t v72 = a1[2];
  a1[2] = (uint64_t)v77;
  double v76 = v15;
  long long v77 = (char *)v72;
  uint64_t v74 = (char *)v71;
  unint64_t v75 = (double *)v71;
  return (void *)sub_20B16D74C((uint64_t)&v74);
}

void sub_20B160AB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  *(void *)(v16 + 8) = v17;
  _Unwind_Resume(exception_object);
}

void sub_20B160C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va1);
  sub_20B06A698(v3 - 72);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B160F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void *sub_20B161000(double **a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  if (v7 == *a1)
  {
LABEL_11:
    uint64_t v21 = 0;
    *(double *)a2 = a4;
    sub_20B0A6EB4((void *)(a2 + 8), &v20);
    sub_20B06A698((uint64_t)&v20);
    uint64_t v21 = 0;
    *(double *)a3 = a4;
    sub_20B0A6EB4((void *)(a3 + 8), &v20);
    return (void *)sub_20B06A698((uint64_t)&v20);
  }
  double v10 = *(v7 - 3);
  if (v10 <= a4)
  {
    *(double *)a2 = v10;
    sub_20B120EA0((void *)(a2 + 8), (void *)v7 - 2);
    uint64_t v17 = a1[1];
    *(double *)a3 = *(v17 - 3);
    long long v18 = (void *)(a3 + 8);
    long long v19 = v17 - 2;
  }
  else
  {
    if (*v8 < a4)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v7 - *a1);
      uint64_t v21 = 0;
      do
      {
        unint64_t v12 = v11 >> 1;
        unint64_t v13 = &v8[3 * (v11 >> 1)];
        double v15 = *v13;
        uint64_t v14 = v13 + 3;
        v11 += ~(v11 >> 1);
        if (v15 > a4) {
          unint64_t v11 = v12;
        }
        else {
          uint64_t v8 = v14;
        }
      }
      while (v11);
      sub_20B06A698((uint64_t)&v20);
      if (v8 != a1[1])
      {
        *(double *)a3 = *v8;
        sub_20B120EA0((void *)(a3 + 8), (void *)v8 + 1);
        *(double *)a2 = *(v8 - 3);
        return sub_20B120EA0((void *)(a2 + 8), (void *)v8 - 2);
      }
      goto LABEL_11;
    }
    *(double *)a2 = *v8;
    sub_20B120EA0((void *)(a2 + 8), (void *)v8 + 1);
    long long v19 = *a1 + 1;
    *(double *)a3 = **a1;
    long long v18 = (void *)(a3 + 8);
  }

  return sub_20B120EA0(v18, v19);
}

std::type_info *sub_20B161204(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B0C7AC0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4F0C0, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

void sub_20B161530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

std::type_info *sub_20B161598(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B15FC50(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4F0A8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B161624(void *a1)
{
  if (sub_20B15FC50((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B16E33C, &unk_26BF4F0A8);
  }
}

uint64_t sub_20B1616B8(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B161750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B16176C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 9) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B16193C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B161B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B161D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B161F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B16212C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B162148(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 18) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B162180(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 24) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B1622F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B16236C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v6 = 0;
  int v5 = 0;
  sub_20B06A85C((void *)a1);
  uint64_t v7 = &v5;
  sub_20B16E3F8((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_20B1623CC(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1623E4(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_20B06A85C((void *)a1);
  __int16 v6 = (long long *)v5;
  sub_20B16EC10((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B162444(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

void sub_20B162654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B162780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B162958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va1);
  sub_20B06A698(v3 - 88);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B162B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va1);
  sub_20B06A698(v7 - 72);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B162F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

std::type_info *sub_20B162F70(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B0A6414(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4F030, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

void sub_20B163308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

std::type_info *sub_20B163374(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B162180(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4F018, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B163400(void *a1)
{
  if (sub_20B162180((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B16F40C, &unk_26BF4F018);
  }
}

uint64_t sub_20B163494(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B16352C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B163548(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 71) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B16373C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B163938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B163B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B163DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B163F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B163F98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 41) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B163FD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 40) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B164008(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 42) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B164178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1641F4(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20B06A85C((void *)a1);
  long long v6 = &v5;
  sub_20B16F4C8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B16424C(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B164264(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20B06A85C((void *)a1);
  long long v6 = &v5;
  sub_20B16FBF0((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_20B1642BC(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1642D4(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_20B06A85C((void *)a1);
  long long v6 = &v5;
  sub_20B170324((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_20B16432C(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

void sub_20B16453C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B164668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16482C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va1);
  sub_20B06A698(v5 - 72);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B164A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va1);
  sub_20B06A698(v7 - 72);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B164D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

std::type_info *sub_20B164E04(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B163F98(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EFD0, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B164E90(void *a1)
{
  if (sub_20B163F98((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B170B9C, &unk_26BF4EFD0);
  }
}

uint64_t sub_20B164F24(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B164FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B164FD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 88) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B16533C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

std::type_info *sub_20B1653A8(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B164008(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EFB8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B165434(void *a1)
{
  if (sub_20B164008((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B170C58, &unk_26BF4EFB8);
  }
}

uint64_t sub_20B1654C8(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_20B06A6E8(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_20B06A6E8((uint64_t)&v8);
  }
  return a1;
}

void sub_20B165560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B16557C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 89) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B1655B4(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  float64x2_t v4 = *a2;
  float64x2_t v5 = a2[1];
  if (vaddvq_f64(vmlaq_f64(vmulq_f64(v5, a1[1]), *a1, *a2)) >= 0.0)
  {
    float64x2_t v9 = a1[1];
    v14[0] = *a1;
    v14[1] = v9;
    float64x2_t v10 = a2[1];
    v13[0] = *a2;
    v13[1] = v10;
    uint64_t v7 = (float64x2_t *)v14;
    long long v8 = (float64x2_t *)v13;
  }
  else
  {
    float64x2_t v6 = a1[1];
    v12[0] = *a1;
    v12[1] = v6;
    v11[0] = vnegq_f64(v4);
    v11[1] = vnegq_f64(v5);
    uint64_t v7 = (float64x2_t *)v12;
    long long v8 = (float64x2_t *)v11;
  }
  sub_20B16D7E8(v7, v8, a3, a4);
}

void sub_20B1657C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B1659B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B165BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B165DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_20B05D0D4(exception_object);
}

void sub_20B165F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B165F5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 11) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B166080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_20B166294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B1663C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1664F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_20B166650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_20B166820(_Unwind_Exception *a1)
{
  sub_20B06A698(v2 + 8);
  sub_20B06A698(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B16683C(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B112C9C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C248], v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

void sub_20B166A4C(_Unwind_Exception *a1)
{
  sub_20B06A698(v2 + 8);
  sub_20B06A698(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B166A68(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B16176C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, MEMORY[0x263F8C240], v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B166AF4(uint64_t a1)
{
  if (sub_20B16176C(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      float64x2_t v5 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8C240];
    return MEMORY[0x270FA4FC8](a1, sub_20B1710E4, v4);
  }
}

void sub_20B166C7C(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B166D80(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B166E90(_Unwind_Exception *exception_object)
{
}

void sub_20B166FA8(_Unwind_Exception *exception_object)
{
}

void sub_20B1670B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B1670D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 69) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B167108(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 66) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B167140(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 72) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B167290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1674A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B1675D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16770C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_20B167898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B167A70(_Unwind_Exception *a1)
{
  sub_20B06A698(v2 + 8);
  sub_20B06A698(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B167A8C(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B1670D0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EEF8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B167B18(uint64_t a1)
{
  if (sub_20B1670D0(a1))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 4) != 0)
    {
      float64x2_t v5 = *(uint64_t (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F905E0];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EEF8);
  }
}

void sub_20B167D3C(_Unwind_Exception *a1)
{
  sub_20B06A698(v2 + 8);
  sub_20B06A698(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B167D58(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B167140(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EEE8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B167DE4(void *a1)
{
  if (sub_20B167140((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      float64x2_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F905D8];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EEE8);
  }
}

void sub_20B167F68(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B1680A4(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B1681BC(_Unwind_Exception *exception_object)
{
}

void sub_20B1682D4(_Unwind_Exception *exception_object)
{
}

void sub_20B1683E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B1683FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 65) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B168578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B168794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B1688C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B168A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B168BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B168DBC(_Unwind_Exception *a1)
{
  sub_20B06A698(v2 + 8);
  sub_20B06A698(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B168DD8(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B112C2C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EF28, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

void sub_20B169058(_Unwind_Exception *a1)
{
  sub_20B06A698(v2 + 8);
  sub_20B06A698(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B169074(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B163548(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EF18, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B169100(void *a1)
{
  if (sub_20B163548((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      float64x2_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F905F8];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EF18);
  }
}

void sub_20B1692C8(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B169418(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B169538(_Unwind_Exception *exception_object)
{
}

void sub_20B16965C(_Unwind_Exception *exception_object)
{
}

void sub_20B169768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B169784(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 64) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B1697BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 70) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B16992C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B169B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B169C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B169DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B169F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698(v5 - 56);
  _Unwind_Resume(a1);
}

void sub_20B16A158(_Unwind_Exception *a1)
{
  sub_20B06A698(v2 + 8);
  sub_20B06A698(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B16A174(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B112C64(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EF58, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

void sub_20B16A3CC(_Unwind_Exception *a1)
{
  sub_20B06A698(v2 + 8);
  sub_20B06A698(v1 + 8);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B16A3E8(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B1697BC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EF48, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B16A474(void *a1)
{
  if (sub_20B1697BC((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F90618];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EF48);
  }
}

void sub_20B16A630(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16A77C(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16A894(_Unwind_Exception *exception_object)
{
}

void sub_20B16A9B8(_Unwind_Exception *exception_object)
{
}

void sub_20B16AAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B16AAE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 87) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B16AC3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16AE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B16AF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16B0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B16B280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698(v5 - 56);
  _Unwind_Resume(a1);
}

void sub_20B16B5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B16B5FC(void *a1)
{
  if (sub_20B164FD8((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F905C8];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EEC8);
  }
}

std::type_info *sub_20B16B690(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B164FD8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EEC8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

void sub_20B16B908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698(v15 - 72);
  _Unwind_Resume(a1);
}

uint64_t sub_20B16B934(void *a1)
{
  if (sub_20B16557C((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F905C0];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EEB8);
  }
}

std::type_info *sub_20B16B9C8(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B16557C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EEB8, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

void sub_20B16BB78(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16BCC0(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16BDDC(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16BF0C(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16C020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_20B16C03C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 73) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

uint64_t sub_20B16C074(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 76) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B16C210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16C430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20B06A698(v16);
  sub_20B06A698((uint64_t)&a16);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B16C55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B06A698(v4);
  sub_20B06A698((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B16C6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698(v9 - 56);
  _Unwind_Resume(a1);
}

void sub_20B16C8B8(_Unwind_Exception *a1)
{
  sub_20B06A698(v1 - 96);
  sub_20B06A698(v1 - 56);
  _Unwind_Resume(a1);
}

void sub_20B16CAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_20B06A698((uint64_t)va);
  sub_20B06A698(v11 - 56);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B16CB1C(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B16C03C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EE20, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B16CBA8(void *a1)
{
  if (sub_20B16C03C((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F905B8];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EE20);
  }
}

void sub_20B16CF34(_Unwind_Exception *a1)
{
  sub_20B06A698(v1 - 96);
  sub_20B06A698(v1 - 72);
  _Unwind_Resume(a1);
}

std::type_info *sub_20B16CF60(uint64_t a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((sub_20B16C074(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v4, (pxrInternal__aapl__pxrReserved__::VtValue *)&unk_26BF4EE10, v1, v2);
    uint64_t v1 = (std::type_info *)sub_20B0A6EB4(v1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_20B16CFEC(void *a1)
{
  if (sub_20B16C074((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F905B0];
    return MEMORY[0x270FA4FC8](a1, v4, &unk_26BF4EE10);
  }
}

void sub_20B16D1CC(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16D364(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16D488(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

void sub_20B16D5F8(_Unwind_Exception *a1)
{
  sub_20B06A698(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_20B16D61C(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  void v7[2] = *MEMORY[0x263EF8340];
  uint64_t Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
  if (strcmp((const char *)(*(void *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*((void *)a2 + 1) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(v7, a2, (const std::type_info *)a1, v5);
    sub_20B0A6EB4(a1, v7);
    sub_20B06A698((uint64_t)v7);
  }
  return a1;
}

uint64_t *sub_20B16D6B8(uint64_t *result, void *a2)
{
  long long v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    uint64_t v7 = *(void *)(v4 - 24);
    v4 -= 24;
    *(void *)(v6 - 24) = v7;
    v6 -= 24;
    uint64_t result = sub_20B0A7150((void *)(v6 + 8), (void *)(v4 + 8));
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  *long long v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B16D74C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_20B06A698(i - 16);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_20B16D7A0(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_20B05D178();
  }
  return operator new(24 * a1);
}

void sub_20B16D7E8(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  double v6 = 1.0;
  double v7 = 1.0 - a4;
  float64x2_t v8 = a1[1];
  float64x2_t v9 = a2[1];
  float64x2_t v10 = vsubq_f64(*a1, *a2);
  float64x2_t v11 = vsubq_f64(v8, v9);
  v10.f64[0] = sqrt(vaddvq_f64(vmlaq_f64(vmulq_f64(v11, v11), v10, v10)));
  float64x2_t v34 = *a1;
  float64x2_t v36 = *a2;
  float64x2_t v12 = vaddq_f64(*a2, *a1);
  float64x2_t v37 = v9;
  float64x2_t v32 = v8;
  float64x2_t v13 = vaddq_f64(v9, v8);
  long double v14 = atan2(v10.f64[0], sqrt(vaddvq_f64(vmlaq_f64(vmulq_f64(v13, v13), v12, v12))));
  double v15 = v14 + v14;
  BOOL v16 = v14 + v14 == 0.0;
  double v17 = 1.0;
  if (!v16) {
    double v17 = sin(v15) / v15;
  }
  double v18 = 1.0 / v17;
  if (v15 * v7 != 0.0) {
    double v6 = sin(v15 * v7) / (v15 * v7);
  }
  double v19 = v18 * v7 * v6;
  float64x2_t v20 = vmulq_n_f64(v32, v19);
  float64x2_t v21 = vmulq_n_f64(v34, v19);
  double v22 = v15 * a4;
  double v23 = 1.0;
  if (v22 != 0.0)
  {
    float64x2_t v33 = v20;
    float64x2_t v35 = v21;
    long double v24 = sin(v22);
    float64x2_t v20 = v33;
    float64x2_t v21 = v35;
    double v23 = v24 / v22;
  }
  double v25 = v18 * a4 * v23;
  float64x2_t v26 = vmlaq_n_f64(v21, v36, v25);
  float64x2_t v27 = vmlaq_n_f64(v20, v37, v25);
  double v28 = vaddvq_f64(vmlaq_f64(vmulq_f64(v27, v27), v26, v26));
  if (v28 == 0.0)
  {
    float64x2_t v29 = (float64x2_t)xmmword_20B1E7940;
    float64x2_t v30 = 0uLL;
  }
  else
  {
    double v31 = 1.0 / sqrt(v28);
    float64x2_t v29 = vmulq_n_f64(v27, v31);
    float64x2_t v30 = vmulq_n_f64(v26, v31);
  }
  *a3 = v30;
  a3[1] = v29;
}

void *sub_20B16D944(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(v4 + v7) = *(void *)(a2 + v7);
      uint64_t result = sub_20B0A592C((void *)(v4 + v7 + 8), (void *)(a2 + v7 + 8));
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  v3[1] = v4;
  return result;
}

void sub_20B16D9B8(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 24)
    sub_20B06A698(v2 - 16 + v3);
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_20B16D9E0(unint64_t *a1, unint64_t a2, _WORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float64x2_t v10 = sub_20B16DBA8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_WORD *)((char *)v10 + v11) = *(_WORD *)(v9 + v11);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            float64x2_t v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_WORD *)((char *)v7 + v13) = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          long double v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      float64x2_t v20 = sub_20B16DBA8((uint64_t)a1, a2);
      long double v14 = v20;
      if (v19)
      {
        uint64_t v21 = 2 * v19;
        double v22 = v20;
        do
        {
          __int16 v23 = *(_WORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 2);
          *(_WORD *)double v22 = v23;
          double v22 = (unint64_t *)((char *)v22 + 2);
          v21 -= 2;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long double v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_WORD *)((char *)v20 + v25) = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 2 * a2;
    if (2 * a2 / a2 == 2)
    {
      BOOL v16 = sub_20B16DBA8((uint64_t)a1, a2);
      long double v14 = v16;
      uint64_t v17 = 0;
      double v18 = *a3;
      do
      {
        *(_WORD *)((char *)v16 + v17) = *v18;
        v17 += 2;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B16DBA8(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 2 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B16DC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B16DC4C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B16DC6C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B16DDFC(a1);
}

uint64_t sub_20B16DC7C()
{
  return 1;
}

unint64_t sub_20B16DC84(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    uint64_t v2 = (unsigned __int16 *)(*a1)[4];
    unint64_t v3 = **a1;
    do
    {
      unsigned int v4 = *v2++;
      unint64_t v1 = v4 + ((v1 + v4 + (v1 + v4) * (v1 + v4)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_20B16DCCC(void **a1, uint64_t *a2)
{
  return sub_20B16DE64(*a1, *a2);
}

BOOL sub_20B16DCD8(void **a1, uint64_t a2)
{
  return sub_20B16DE64(*a1, a2);
}

uint64_t sub_20B16DCE4()
{
  return 0;
}

uint64_t sub_20B16DCF0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B16DD44()
{
  return &unk_26BF4F090;
}

uint64_t sub_20B16DD50()
{
  return 1;
}

void *sub_20B16DD58()
{
  return &unk_26BF4F138;
}

uint64_t sub_20B16DD64(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B16DD6C(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B16DD78(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_8pxr_half4halfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B16DDAC(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F090, a2);
}

void *sub_20B16DDD0()
{
  return &unk_26BF4F090;
}

uint64_t sub_20B16DDDC(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B16DDE4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF510B0;
  sub_20B0A6DA4();
}

uint64_t *sub_20B16DDFC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

BOOL sub_20B16DE64(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  int v5 = (unsigned __int16 *)a1[4];
  double v6 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v7 = 2 * *a1 - 2;
  do
  {
    unsigned int v8 = *v5++;
    float v9 = *(float *)(MEMORY[0x263F90640] + 4 * v8);
    unsigned int v10 = *v6++;
    float v11 = *(float *)(MEMORY[0x263F90640] + 4 * v10);
    BOOL result = v9 == v11;
    BOOL v12 = v9 != v11 || v7 == 0;
    v7 -= 2;
  }
  while (!v12);
  return result;
}

uint64_t sub_20B16DF14(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B16DFC0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int16 *)*a1;
  *a1 += 2;
  return MEMORY[0x270FA3E88](a2, v3);
}

uint64_t *sub_20B16DFD8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B16DFF8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B16E188(a1);
}

uint64_t sub_20B16E008()
{
  return 1;
}

unint64_t sub_20B16E010(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(*a1)[4];
    unint64_t v3 = **a1;
    do
    {
      uint64_t v4 = *v2++;
      unint64_t v1 = v4 + ((v4 + v1 + (v4 + v1) * (v4 + v1)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_20B16E058(void **a1, uint64_t *a2)
{
  return sub_20B16E1F0(*a1, *a2);
}

BOOL sub_20B16E064(void **a1, uint64_t a2)
{
  return sub_20B16E1F0(*a1, a2);
}

uint64_t sub_20B16E070()
{
  return 0;
}

uint64_t sub_20B16E07C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B16E0D0()
{
  return &unk_26BF4F0A8;
}

uint64_t sub_20B16E0DC()
{
  return 1;
}

uint64_t sub_20B16E0E4()
{
  return MEMORY[0x263F8C240];
}

uint64_t sub_20B16E0F0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B16E0F8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B16E104(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIdEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B16E138(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F0A8, a2);
}

void *sub_20B16E15C()
{
  return &unk_26BF4F0A8;
}

uint64_t sub_20B16E168(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B16E170(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF51168;
  sub_20B0C9A64();
}

uint64_t *sub_20B16E188(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x10A0C407A159F4ELL);
  }
  return a1;
}

BOOL sub_20B16E1F0(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  int v5 = (double *)a1[4];
  double v6 = *(double **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    double v8 = *v5++;
    double v9 = v8;
    double v10 = *v6++;
    BOOL result = v9 == v10;
    BOOL v11 = v9 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_20B16E290(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_20B16E33C()
{
}

uint64_t sub_20B16E39C(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B16E3F8(unint64_t *a1, unint64_t a2, int **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              double v10 = sub_20B16E624((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  BOOL v12 = (char *)v10 + v11;
                  int v13 = *(_DWORD *)(v9 + v11);
                  *((_WORD *)v12 + 2) = *(_WORD *)(v9 + v11 + 4);
                  *(_DWORD *)BOOL v12 = v13;
                  v11 += 6;
                }
                while (6 * v3 != v11);
              }
            }
            long double v14 = *a3;
            uint64_t v15 = 6 * v3;
            do
            {
              BOOL v16 = (char *)v7 + v15;
              int v17 = *v14;
              *((_WORD *)v16 + 2) = *((_WORD *)v14 + 2);
              *(_DWORD *)BOOL v16 = v17;
              v15 += 6;
            }
            while (6 * a2 != v15);
          }
          double v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_20B16E624((uint64_t)a1, a2);
      double v18 = v25;
      if (v24)
      {
        uint64_t v26 = 6 * v24;
        float64x2_t v27 = v25;
        do
        {
          int v28 = *(_DWORD *)v7;
          *((_WORD *)v27 + 2) = *((_WORD *)v7 + 2);
          *(_DWORD *)float64x2_t v27 = v28;
          float64x2_t v27 = (void *)((char *)v27 + 6);
          uint64_t v7 = (void *)((char *)v7 + 6);
          v26 -= 6;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        float64x2_t v29 = *a3;
        uint64_t v30 = 6 * v3;
        do
        {
          double v31 = (char *)v25 + v30;
          int v32 = *v29;
          *((_WORD *)v31 + 2) = *((_WORD *)v29 + 2);
          *(_DWORD *)double v31 = v32;
          v30 += 6;
        }
        while (6 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0x2AAAAAAAAAAAAAABLL)
    {
      unint64_t v19 = sub_20B16E624((uint64_t)a1, a2);
      double v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        double v22 = (char *)v19 + v20;
        int v23 = *v21;
        *((_WORD *)v22 + 2) = *((_WORD *)v21 + 2);
        *(_DWORD *)double v22 = v23;
        v20 += 6;
      }
      while (6 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B16E624(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x2AAAAAAAAAAAAAA7) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 6 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B16E6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B16E6D0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B16E6F0(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B16E860(a1);
}

uint64_t sub_20B16E700()
{
  return 1;
}

unint64_t sub_20B16E708(uint64_t **a1)
{
  return sub_20B16E8C8((uint64_t)&v2, *a1);
}

BOOL sub_20B16E730(uint64_t **a1, uint64_t *a2)
{
  return sub_20B16EA3C(*a1, *a2);
}

BOOL sub_20B16E73C(uint64_t **a1, uint64_t a2)
{
  return sub_20B16EA3C(*a1, a2);
}

uint64_t sub_20B16E748()
{
  return 0;
}

uint64_t sub_20B16E754(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B16E7A8()
{
  return &unk_26BF4F048;
}

uint64_t sub_20B16E7B4()
{
  return 1;
}

void *sub_20B16E7BC()
{
  return &unk_26BF4EF38;
}

uint64_t sub_20B16E7C8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B16E7D0(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B16E7DC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3hEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B16E810(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F048, a2);
}

void *sub_20B16E834()
{
  return &unk_26BF4F048;
}

uint64_t sub_20B16E840(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B16E848(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50F40;
  sub_20B0A6DA4();
}

uint64_t *sub_20B16E860(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B16E8C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    size_t v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 3;
      sub_20B16E940((uint64_t)v7, v3);
      size_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B16E940(uint64_t a1, unsigned __int16 *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_20B16E9C0((uint64_t)v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_20B16E9C0(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_20B16E9F8(a1, a3, a4);
}

uint64_t sub_20B16E9F8(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  *(void *)uint64_t result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

BOOL sub_20B16EA3C(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  double v6 = (unsigned __int16 *)a1[4];
  uint64_t v7 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v8 = 6 * v5 - 6;
  do
  {
    BOOL result = sub_20B16EAF0(v6, v7);
    if (!result) {
      break;
    }
    v6 += 3;
    v7 += 3;
    uint64_t v9 = v8;
    v8 -= 6;
  }
  while (v9);
  return result;
}

BOOL sub_20B16EAF0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2)
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[1]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[1])
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[2]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[2]);
}

uint64_t sub_20B16EB4C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B16EBF8(void *a1, uint64_t a2)
{
  *a1 += 6;
  return MEMORY[0x270FA3F50](a2);
}

void sub_20B16EC10(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              double v10 = sub_20B16EE3C((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  BOOL v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8);
                  _OWORD v12[2] = *(void *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)BOOL v12 = v13;
                  v11 += 3;
                }
                while (3 * v3 != v11);
              }
            }
            long double v14 = *a3;
            uint64_t v15 = 3 * v3;
            do
            {
              BOOL v16 = &v7[v15];
              long long v17 = *v14;
              v16[2] = *((void *)v14 + 2);
              *(_OWORD *)BOOL v16 = v17;
              v15 += 3;
            }
            while (3 * a2 != v15);
          }
          double v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_20B16EE3C((uint64_t)a1, a2);
      double v18 = v25;
      if (v24)
      {
        uint64_t v26 = 24 * v24;
        float64x2_t v27 = v25;
        do
        {
          long long v28 = *(_OWORD *)v7;
          v27[2] = v7[2];
          *(_OWORD *)float64x2_t v27 = v28;
          v27 += 3;
          v7 += 3;
          v26 -= 24;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        float64x2_t v29 = *a3;
        uint64_t v30 = 3 * v3;
        do
        {
          double v31 = &v25[v30];
          long long v32 = *v29;
          v31[2] = *((void *)v29 + 2);
          *(_OWORD *)double v31 = v32;
          v30 += 3;
        }
        while (3 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0xAAAAAAAAAAAAAABLL)
    {
      unint64_t v19 = sub_20B16EE3C((uint64_t)a1, a2);
      double v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        double v22 = &v19[v20];
        long long v23 = *v21;
        v22[2] = *((void *)v21 + 2);
        *(_OWORD *)double v22 = v23;
        v20 += 3;
      }
      while (3 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B16EE3C(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 24 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  *uint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B16EED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B16EEE8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B16EF08(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B16F078(a1);
}

uint64_t sub_20B16EF18()
{
  return 1;
}

unint64_t sub_20B16EF20(uint64_t **a1)
{
  return sub_20B16F0E0((uint64_t)&v2, *a1);
}

BOOL sub_20B16EF48(void **a1, uint64_t *a2)
{
  return sub_20B16F1D8(*a1, *a2);
}

BOOL sub_20B16EF54(void **a1, uint64_t a2)
{
  return sub_20B16F1D8(*a1, a2);
}

uint64_t sub_20B16EF60()
{
  return 0;
}

uint64_t sub_20B16EF6C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B16EFC0()
{
  return &unk_26BF4F018;
}

uint64_t sub_20B16EFCC()
{
  return 1;
}

void *sub_20B16EFD4()
{
  return &unk_26BF4EF18;
}

uint64_t sub_20B16EFE0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B16EFE8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B16EFF4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B16F028(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F018, a2);
}

void *sub_20B16F04C()
{
  return &unk_26BF4F018;
}

uint64_t sub_20B16F058(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B16F060(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50DD0;
  sub_20B0A6DA4();
}

uint64_t *sub_20B16F078(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B16F0E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    size_t v3 = (uint64_t *)a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 3;
      sub_20B16F158((uint64_t)v7, v3);
      size_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B16F158(uint64_t a1, uint64_t *a2)
{
  v5[0] = 0;
  v5[1] = 0;
  uint64_t result = sub_20B15EFDC((uint64_t)v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_20B16F1D8(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (double *)a1[4];
  double v6 = &v5[3 * *a1];
  for (uint64_t i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_20B16F2A0(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B16F34C(void *a1, uint64_t a2)
{
  *a1 += 24;
  return MEMORY[0x270FA3F40](a2);
}

void sub_20B16F364(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3d]");
      unint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      double v6 = sub_20B16EE3C((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 24 * v5;
        unint64_t v9 = v6;
        do
        {
          long long v10 = *v4;
          v9[2] = *((void *)v4 + 2);
          *(_OWORD *)unint64_t v9 = v10;
          v9 += 3;
          unint64_t v4 = (long long *)((char *)v4 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_20B16F40C()
{
}

uint64_t sub_20B16F46C(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B16F4C8(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              long long v10 = sub_20B16F690((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            BOOL v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          long double v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_20B16F690((uint64_t)a1, a2);
      long double v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        double v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        unint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      BOOL v16 = sub_20B16F690((uint64_t)a1, a2);
      long double v14 = v16;
      unint64_t v17 = 0;
      double v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B16F690(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B16F71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B16F734(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B16F754(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B16F8C4(a1);
}

uint64_t sub_20B16F764()
{
  return 1;
}

unint64_t sub_20B16F76C(uint64_t **a1)
{
  return sub_20B16F92C((uint64_t)&v2, *a1);
}

BOOL sub_20B16F794(uint64_t **a1, uint64_t *a2)
{
  return sub_20B16FA60(*a1, *a2);
}

BOOL sub_20B16F7A0(uint64_t **a1, uint64_t a2)
{
  return sub_20B16FA60(*a1, a2);
}

uint64_t sub_20B16F7AC()
{
  return 0;
}

uint64_t sub_20B16F7B8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B16F80C()
{
  return &unk_26BF4EFE8;
}

uint64_t sub_20B16F818()
{
  return 1;
}

void *sub_20B16F820()
{
  return &unk_26BF4EED8;
}

uint64_t sub_20B16F82C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B16F834(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B16F840(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B16F874(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EFE8, a2);
}

void *sub_20B16F898()
{
  return &unk_26BF4EFE8;
}

uint64_t sub_20B16F8A4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B16F8AC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50C60;
  sub_20B0A6DA4();
}

uint64_t *sub_20B16F8C4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B16F92C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    size_t v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      sub_20B16F9A4((uint64_t)v7, v3);
      size_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B16F9A4(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 v5 = a2[3];
  v6[0] = 0;
  v6[1] = 0;
  uint64_t result = sub_20B16FA2C((uint64_t)v6, &v5, a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_20B16FA2C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_20B16E940(a1, a3);
}

BOOL sub_20B16FA60(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  double v6 = (unsigned __int16 *)a1[4];
  uint64_t v7 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v8 = 8 * v5;
  uint64_t v9 = MEMORY[0x263F90640];
  while (*(float *)(v9 + 4 * v6[3]) == *(float *)(v9 + 4 * v7[3]))
  {
    BOOL result = sub_20B16EAF0(v6, v7);
    if (!result) {
      return result;
    }
    v6 += 4;
    v7 += 4;
    v8 -= 8;
    if (!v8) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_20B16FB2C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B16FBD8(void *a1, uint64_t a2)
{
  *a1 += 8;
  return MEMORY[0x270FA3F18](a2);
}

void sub_20B16FBF0(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              long long v10 = sub_20B16FDB8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            BOOL v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          long double v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_20B16FDB8((uint64_t)a1, a2);
      long double v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        double v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)double v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        unint64_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      BOOL v16 = sub_20B16FDB8((uint64_t)a1, a2);
      long double v14 = v16;
      unint64_t v17 = 0;
      double v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B16FDB8(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B16FE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B16FE58(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B16FE78(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B16FFE8(a1);
}

uint64_t sub_20B16FE88()
{
  return 1;
}

unint64_t sub_20B16FE90(uint64_t **a1)
{
  return sub_20B170050((uint64_t)&v2, *a1);
}

BOOL sub_20B16FEB8(void **a1, uint64_t *a2)
{
  return sub_20B170184(*a1, *a2);
}

BOOL sub_20B16FEC4(void **a1, uint64_t a2)
{
  return sub_20B170184(*a1, a2);
}

uint64_t sub_20B16FED0()
{
  return 0;
}

uint64_t sub_20B16FEDC(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B16FF30()
{
  return &unk_26BF4EFD0;
}

uint64_t sub_20B16FF3C()
{
  return 1;
}

void *sub_20B16FF44()
{
  return &unk_26BF4EEC8;
}

uint64_t sub_20B16FF50(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B16FF58(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B16FF64(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B16FF98(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EFD0, a2);
}

void *sub_20B16FFBC()
{
  return &unk_26BF4EFD0;
}

uint64_t sub_20B16FFC8(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B16FFD0(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50BA8;
  sub_20B0A6DA4();
}

uint64_t *sub_20B16FFE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B170050(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    size_t v3 = (unsigned int *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      sub_20B1700C8((uint64_t)v7, v3);
      size_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B1700C8(uint64_t a1, unsigned int *a2)
{
  unsigned int v5 = a2[3];
  v6[0] = 0;
  v6[1] = 0;
  uint64_t result = sub_20B170150((uint64_t)v6, &v5, a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_20B170150(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_20B0A6A3C(a1, a3);
}

BOOL sub_20B170184(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unsigned int v5 = (float *)(a1[4] + 8);
  uint64_t v6 = 16 * *a1;
  for (uint64_t i = (float *)(*(void *)(a2 + 32) + 8);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 16;
    if (!v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_20B170260(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B17030C(void *a1, uint64_t a2)
{
  *a1 += 16;
  return MEMORY[0x270FA3F10](a2);
}

void sub_20B170324(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              long long v10 = sub_20B170500((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  BOOL v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)BOOL v12 = *(_OWORD *)(v9 + v11 * 8);
                  *((_OWORD *)v12 + 1) = v13;
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            long double v14 = *a3;
            uint64_t v15 = 4 * v3;
            do
            {
              BOOL v16 = &v7[v15];
              long long v17 = v14[1];
              *(_OWORD *)BOOL v16 = *v14;
              *((_OWORD *)v16 + 1) = v17;
              v15 += 4;
            }
            while (4 * a2 != v15);
          }
          double v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v25 = a2;
      }
      else {
        unint64_t v25 = *a1;
      }
      uint64_t v26 = sub_20B170500((uint64_t)a1, a2);
      double v18 = v26;
      if (v25)
      {
        uint64_t v27 = 32 * v25;
        long long v28 = v26;
        do
        {
          long long v29 = *(_OWORD *)v7;
          long long v30 = *((_OWORD *)v7 + 1);
          v7 += 4;
          *(_OWORD *)long long v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v28 += 4;
          v27 -= 32;
        }
        while (v27);
      }
      if (v3 < a2)
      {
        double v31 = *a3;
        uint64_t v32 = 4 * v3;
        do
        {
          float64x2_t v33 = &v26[v32];
          long long v34 = v31[1];
          *(_OWORD *)float64x2_t v33 = *v31;
          *((_OWORD *)v33 + 1) = v34;
          v32 += 4;
        }
        while (4 * a2 != v32);
      }
      goto LABEL_31;
    }
    uint64_t v19 = 32 * a2;
    if (32 * a2 / a2 == 32)
    {
      uint64_t v20 = sub_20B170500((uint64_t)a1, a2);
      double v18 = v20;
      unint64_t v21 = 0;
      double v22 = *a3;
      do
      {
        long long v23 = &v20[v21 / 8];
        long long v24 = v22[1];
        *(_OWORD *)long long v23 = *v22;
        *((_OWORD *)v23 + 1) = v24;
        v21 += 32;
      }
      while (v19 != v21);
LABEL_31:
      if (v18 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void *sub_20B170500(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_20B06AB64((uint64_t)&v7);
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (1)
  {
    int v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_20B170588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_20B1705A0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B1705C0(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B170730(a1);
}

uint64_t sub_20B1705D0()
{
  return 1;
}

unint64_t sub_20B1705D8(uint64_t **a1)
{
  return sub_20B170798((uint64_t)&v2, *a1);
}

BOOL sub_20B170600(void **a1, uint64_t *a2)
{
  return sub_20B1708CC(*a1, *a2);
}

BOOL sub_20B17060C(void **a1, uint64_t a2)
{
  return sub_20B1708CC(*a1, a2);
}

uint64_t sub_20B170618()
{
  return 0;
}

uint64_t sub_20B170624(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B170678()
{
  return &unk_26BF4EFB8;
}

uint64_t sub_20B170684()
{
  return 1;
}

void *sub_20B17068C()
{
  return &unk_26BF4EEB8;
}

uint64_t sub_20B170698(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B1706A0(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B1706AC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatdEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B1706E0(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EFB8, a2);
}

void *sub_20B170704()
{
  return &unk_26BF4EFB8;
}

uint64_t sub_20B170710(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B170718(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50AF0;
  sub_20B0A6DA4();
}

uint64_t *sub_20B170730(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B170798(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    size_t v3 = (uint64_t *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      sub_20B170810((uint64_t)v7, v3);
      size_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_20B170810(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a2[3];
  v6[0] = 0;
  v6[1] = 0;
  uint64_t result = sub_20B170898((uint64_t)v6, &v5, a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6[0]);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_20B170898(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_20B16F158(a1, a3);
}

BOOL sub_20B1708CC(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (double *)(a1[4] + 16);
  uint64_t v6 = 32 * *a1;
  for (uint64_t i = (double *)(*(void *)(a2 + 32) + 16);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 32;
    if (!v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_20B1709A8(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B170A54(void *a1, uint64_t a2)
{
  *a1 += 32;
  return MEMORY[0x270FA3F08](a2);
}

void sub_20B170A6C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatf]");
      unint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B16FDB8((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 16 * v5;
        unint64_t v9 = v6;
        do
        {
          long long v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_20B170B04(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatd]");
      unint64_t v4 = (long long *)*((void *)this + 4);
      uint64_t v5 = *(void *)this;
      uint64_t v6 = sub_20B170500((uint64_t)this, *(void *)this);
      uint64_t v7 = v6;
      if (v5)
      {
        uint64_t v8 = 32 * v5;
        unint64_t v9 = v6;
        do
        {
          long long v10 = *v4;
          long long v11 = v4[1];
          v4 += 2;
          *unint64_t v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      sub_20B06A6E8((uint64_t)this);
      *((void *)this + 4) = v7;
    }
  }
}

void sub_20B170B9C()
{
}

uint64_t sub_20B170BFC(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B170C58()
{
}

uint64_t sub_20B170CB8(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

_WORD *sub_20B170D14(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

_WORD *sub_20B170D24(_WORD *result, _WORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20B170D30()
{
  return 1;
}

unint64_t sub_20B170D38(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20B170D58(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2);
}

BOOL sub_20B170D7C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2);
}

uint64_t sub_20B170DA4()
{
  return 0;
}

uint64_t sub_20B170DB0(unsigned __int16 *a1, uint64_t a2)
{
  return MEMORY[0x270FA3E88](a2, *a1);
}

void *sub_20B170DC0()
{
  return &unk_26BF4F138;
}

uint64_t sub_20B170DCC()
{
  return 0;
}

uint64_t sub_20B170DD4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B170DE0()
{
  return 0;
}

uint64_t sub_20B170DE8()
{
  return 0;
}

BOOL sub_20B170DF0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__8pxr_half4halfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B170E24(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F138, a2);
}

void *sub_20B170E48()
{
  return &unk_26BF4F138;
}

_WORD *sub_20B170E58@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26BF51500 + 3;
  *(_WORD *)a2 = *result;
  return result;
}

float sub_20B170E74(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_20B170E84(float *a1, _DWORD *a2)
{
  float result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_20B170E90()
{
  return 1;
}

unint64_t sub_20B170E98(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20B170EB8(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_20B170ECC(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20B170EE4()
{
  return 0;
}

uint64_t sub_20B170EF4()
{
  return MEMORY[0x263F8C248];
}

uint64_t sub_20B170F00()
{
  return 0;
}

uint64_t sub_20B170F08()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B170F14()
{
  return 0;
}

uint64_t sub_20B170F1C()
{
  return 0;
}

BOOL sub_20B170F24(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B170F5C(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C248], a2);
}

uint64_t sub_20B170F80()
{
  return MEMORY[0x263F8C248];
}

float sub_20B170F90@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26BF517E3;
  float result = *a1;
  *(float *)a2 = *a1;
  return result;
}

double sub_20B170FAC(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_20B170FBC(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

uint64_t sub_20B170FC8()
{
  return 1;
}

unint64_t sub_20B170FD0(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20B170FF0(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_20B171004(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20B17101C()
{
  return 0;
}

uint64_t sub_20B17102C()
{
  return MEMORY[0x263F8C240];
}

uint64_t sub_20B171038()
{
  return 0;
}

uint64_t sub_20B171040()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B17104C()
{
  return 0;
}

uint64_t sub_20B171054()
{
  return 0;
}

BOOL sub_20B17105C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B171094(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C240], a2);
}

uint64_t sub_20B1710B8()
{
  return MEMORY[0x263F8C240];
}

double sub_20B1710C8@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  a2[1] = &unk_26BF5172B;
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

void sub_20B1710E4()
{
}

uint64_t sub_20B17113C(uint64_t result)
{
  if (result) {
    JUMPOUT(0x210532650);
  }
  return result;
}

_DWORD *sub_20B171158(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20B171168(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20B171174()
{
  return 1;
}

unint64_t sub_20B17117C(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1]+ (unint64_t)*a1+ (a1[1] + *a1) * (unint64_t)(a1[1] + *a1)) >> 1))));
}

BOOL sub_20B1711B4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2)
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[1]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[1]);
}

BOOL sub_20B1711F8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2)
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[1]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[1]);
}

uint64_t sub_20B171240()
{
  return 0;
}

uint64_t sub_20B17124C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F30](a2, a1);
}

void *sub_20B17125C()
{
  return &unk_26BF4EF08;
}

uint64_t sub_20B171268()
{
  return 0;
}

uint64_t sub_20B171270()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B17127C()
{
  return 0;
}

uint64_t sub_20B171284()
{
  return 0;
}

BOOL sub_20B17128C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B1712C0(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF08, a2);
}

void *sub_20B1712E4()
{
  return &unk_26BF4EF08;
}

_DWORD *sub_20B1712F4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26BF503C0 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_20B171310(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_20B171320(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20B17132C()
{
  return 1;
}

unint64_t sub_20B171334(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1] + (unint64_t)*a1 + (a1[1] + (unint64_t)*a1) * (a1[1] + (unint64_t)*a1)) >> 1))));
}

BOOL sub_20B171368(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_20B171384(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_20B1713A4()
{
  return 0;
}

uint64_t sub_20B1713B0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F28](a2, a1);
}

void *sub_20B1713C0()
{
  return &unk_26BF4EEF8;
}

uint64_t sub_20B1713CC()
{
  return 0;
}

uint64_t sub_20B1713D4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B1713E0()
{
  return 0;
}

uint64_t sub_20B1713E8()
{
  return 0;
}

BOOL sub_20B1713F0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B171424(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EEF8, a2);
}

void *sub_20B171448()
{
  return &unk_26BF4EEF8;
}

void *sub_20B171458@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26BF50308 + 3;
  return result;
}

uint64_t *sub_20B171470(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B17148C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B1714C4(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B1714D4()
{
  return 1;
}

unint64_t sub_20B1714DC(uint64_t a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (*(void *)(*(void *)a1 + 8)+ ((*(void *)(*(void *)a1 + 8)+ **(void **)a1+ (*(void *)(*(void *)a1 + 8) + **(void **)a1)* (*(void *)(*(void *)a1 + 8) + **(void **)a1)) >> 1))));
}

BOOL sub_20B171514(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(void *)a1 + 8) == *(double *)(*(void *)a2 + 8) && **(double **)a1 == **(double **)a2;
}

BOOL sub_20B171538(uint64_t a1, double *a2)
{
  return *(double *)(*(void *)a1 + 8) == a2[1] && **(double **)a1 == *a2;
}

uint64_t sub_20B17155C()
{
  return 0;
}

uint64_t sub_20B171568(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3F20](a2, *a1);
}

void *sub_20B171578()
{
  return &unk_26BF4EEE8;
}

uint64_t sub_20B171584()
{
  return 0;
}

uint64_t sub_20B17158C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B171598()
{
  return 0;
}

uint64_t sub_20B1715A0()
{
  return 0;
}

BOOL sub_20B1715A8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B1715DC(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EEE8, a2);
}

void *sub_20B171600()
{
  return &unk_26BF4EEE8;
}

uint64_t sub_20B17160C(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B171614(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26BF50250 + 2;
  operator new();
}

uint64_t sub_20B17167C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 16));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

int *sub_20B17171C(int *result, uint64_t a2)
{
  int v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

int *sub_20B171734(int *result, uint64_t a2)
{
  int v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t sub_20B171748()
{
  return 1;
}

unint64_t sub_20B171750(unsigned __int16 *a1)
{
  v2[0] = 0;
  v2[1] = 0;
  sub_20B16E9C0((uint64_t)v2, a1, a1 + 1, a1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2[0]));
}

uint64_t sub_20B1717B4()
{
  return 0;
}

uint64_t sub_20B1717C0(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F50](a2);
}

void *sub_20B1717D0()
{
  return &unk_26BF4EF38;
}

uint64_t sub_20B1717DC()
{
  return 0;
}

uint64_t sub_20B1717E4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B1717F0()
{
  return 0;
}

uint64_t sub_20B1717F8()
{
  return 0;
}

BOOL sub_20B171800(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B171834(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF38, a2);
}

void *sub_20B171858()
{
  return &unk_26BF4EF38;
}

uint64_t sub_20B171868@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26BF505E8 + 3;
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(_WORD *)(a2 + 4) = *(_WORD *)(result + 4);
  return result;
}

uint64_t *sub_20B17188C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B1718A8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 12), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B1718E0(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B1718F0()
{
  return 1;
}

unint64_t sub_20B1718F8(unsigned int **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  unint64_t v3 = *a1 + 2;
  v5[0] = 0;
  v5[1] = 0;
  sub_20B0A6ABC((uint64_t)v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5[0]));
}

BOOL sub_20B171950(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20B171994(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20B1719D8()
{
  return 0;
}

uint64_t sub_20B1719E4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F48](a2);
}

void *sub_20B1719F4()
{
  return &unk_26BF4EF28;
}

uint64_t sub_20B171A00()
{
  return 0;
}

uint64_t sub_20B171A08()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B171A14()
{
  return 0;
}

uint64_t sub_20B171A1C()
{
  return 0;
}

BOOL sub_20B171A24(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B171A58(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF28, a2);
}

void *sub_20B171A7C()
{
  return &unk_26BF4EF28;
}

uint64_t sub_20B171A88(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B171A90(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26BF50530 + 2;
  operator new();
}

uint64_t sub_20B171B00(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 12));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *sub_20B171BA8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B171BC4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B171BFC(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B171C0C()
{
  return 1;
}

unint64_t sub_20B171C14(uint64_t **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  unint64_t v3 = *a1 + 2;
  v5[0] = 0;
  v5[1] = 0;
  sub_20B15EFDC((uint64_t)v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5[0]));
}

BOOL sub_20B171C6C(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20B171CB0(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20B171CF4()
{
  return 0;
}

uint64_t sub_20B171D00(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F40](a2);
}

void *sub_20B171D10()
{
  return &unk_26BF4EF18;
}

uint64_t sub_20B171D1C()
{
  return 0;
}

uint64_t sub_20B171D24()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B171D30()
{
  return 0;
}

uint64_t sub_20B171D38()
{
  return 0;
}

BOOL sub_20B171D40(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B171D74(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF18, a2);
}

void *sub_20B171D98()
{
  return &unk_26BF4EF18;
}

uint64_t sub_20B171DA4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B171DAC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26BF50478 + 2;
  operator new();
}

uint64_t sub_20B171E1C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 24));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void *sub_20B171EC4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_20B171ED4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20B171EE0()
{
  return 1;
}

unint64_t sub_20B171EE8(unsigned __int16 *a1)
{
  v2[0] = 0;
  v2[1] = 0;
  sub_20B17201C((uint64_t)v2, a1, a1 + 1, a1 + 2, a1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2[0]));
}

uint64_t sub_20B171F50()
{
  return 0;
}

uint64_t sub_20B171F5C(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F70](a2, a1);
}

void *sub_20B171F6C()
{
  return &unk_26BF4EF68;
}

uint64_t sub_20B171F78()
{
  return 0;
}

uint64_t sub_20B171F80()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B171F8C()
{
  return 0;
}

uint64_t sub_20B171F94()
{
  return 0;
}

BOOL sub_20B171F9C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4hE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B171FD0(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF68, a2);
}

void *sub_20B171FF4()
{
  return &unk_26BF4EF68;
}

void *sub_20B172004@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26BF50810 + 3;
  return result;
}

uint64_t sub_20B17201C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_20B16E9C0(a1, a3, a4, a5);
}

BOOL sub_20B172058(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * *a1) == *(float *)(MEMORY[0x263F90640] + 4 * *a2)
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[1]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[1])
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[2]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[2])
      && *(float *)(MEMORY[0x263F90640] + 4 * a1[3]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[3]);
}

uint64_t *sub_20B1720CC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B1720E8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B172120(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B172130()
{
  return 1;
}

unint64_t sub_20B172138(unsigned int **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  unint64_t v3 = *a1 + 2;
  unint64_t v4 = *a1 + 3;
  v6[0] = 0;
  v6[1] = 0;
  sub_20B0A7C48((uint64_t)v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6[0]));
}

BOOL sub_20B172194(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_20B1721E8(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_20B17223C()
{
  return 0;
}

uint64_t sub_20B172248(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F68](a2);
}

void *sub_20B172258()
{
  return &unk_26BF4EF58;
}

uint64_t sub_20B172264()
{
  return 0;
}

uint64_t sub_20B17226C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B172278()
{
  return 0;
}

uint64_t sub_20B172280()
{
  return 0;
}

BOOL sub_20B172288(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B1722BC(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF58, a2);
}

void *sub_20B1722E0()
{
  return &unk_26BF4EF58;
}

uint64_t sub_20B1722EC(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B1722F4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26BF50758 + 2;
  operator new();
}

uint64_t sub_20B17235C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 16));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *sub_20B1723FC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B172418(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 32), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B172450(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B172460()
{
  return 1;
}

unint64_t sub_20B172468(uint64_t **a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = *a1 + 1;
  unint64_t v3 = *a1 + 2;
  unint64_t v4 = *a1 + 3;
  v6[0] = 0;
  v6[1] = 0;
  sub_20B15EFA0((uint64_t)v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6[0]));
}

BOOL sub_20B1724C4(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_20B172518(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_20B17256C()
{
  return 0;
}

uint64_t sub_20B172578(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3F60](a2, *a1);
}

void *sub_20B172588()
{
  return &unk_26BF4EF48;
}

uint64_t sub_20B172594()
{
  return 0;
}

uint64_t sub_20B17259C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B1725A8()
{
  return 0;
}

uint64_t sub_20B1725B0()
{
  return 0;
}

BOOL sub_20B1725B8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B1725EC(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF48, a2);
}

void *sub_20B172610()
{
  return &unk_26BF4EF48;
}

uint64_t sub_20B17261C(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B172624(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26BF506A0 + 2;
  operator new();
}

uint64_t sub_20B17268C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 32));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void *sub_20B17272C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_20B17273C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20B172748()
{
  return 1;
}

unint64_t sub_20B172750(unsigned __int16 *a1)
{
  unsigned __int16 v2 = a1[3];
  v3[0] = 0;
  v3[1] = 0;
  sub_20B16FA2C((uint64_t)v3, &v2, a1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_20B1727AC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * a1[3]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[3])
      && sub_20B16EAF0(a1, a2);
}

BOOL sub_20B1727D8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *(float *)(MEMORY[0x263F90640] + 4 * a1[3]) == *(float *)(MEMORY[0x263F90640] + 4 * a2[3])
      && sub_20B16EAF0(a1, a2);
}

uint64_t sub_20B172808()
{
  return 0;
}

uint64_t sub_20B172814(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F18](a2);
}

void *sub_20B172824()
{
  return &unk_26BF4EED8;
}

uint64_t sub_20B172830()
{
  return 0;
}

uint64_t sub_20B172838()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B172844()
{
  return 0;
}

uint64_t sub_20B17284C()
{
  return 0;
}

BOOL sub_20B172854(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B172888(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EED8, a2);
}

void *sub_20B1728AC()
{
  return &unk_26BF4EED8;
}

void *sub_20B1728BC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26BF50198 + 1;
  return result;
}

uint64_t *sub_20B1728D4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B1728F0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B172928(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B172938()
{
  return 1;
}

unint64_t sub_20B172940(unsigned int **a1)
{
  unsigned int v1 = *a1;
  unsigned int v3 = (*a1)[3];
  v4[0] = 0;
  v4[1] = 0;
  sub_20B170150((uint64_t)v4, &v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4[0]));
}

BOOL sub_20B17299C(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20B1729F0(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20B172A44()
{
  return 0;
}

uint64_t sub_20B172A50(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F10](a2);
}

void *sub_20B172A60()
{
  return &unk_26BF4EEC8;
}

uint64_t sub_20B172A6C()
{
  return 0;
}

uint64_t sub_20B172A74()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B172A80()
{
  return 0;
}

uint64_t sub_20B172A88()
{
  return 0;
}

BOOL sub_20B172A90(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B172AC4(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EEC8, a2);
}

void *sub_20B172AE8()
{
  return &unk_26BF4EEC8;
}

uint64_t sub_20B172AF4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B172AFC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF500E0;
  operator new();
}

uint64_t *sub_20B172B60(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B172B7C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 32), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B172BB4(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B172BC4()
{
  return 1;
}

unint64_t sub_20B172BCC(uint64_t **a1)
{
  unsigned int v1 = *a1;
  uint64_t v3 = (*a1)[3];
  v4[0] = 0;
  v4[1] = 0;
  sub_20B170898((uint64_t)v4, &v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4[0]));
}

BOOL sub_20B172C28(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_20B172C7C(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_20B172CD0()
{
  return 0;
}

uint64_t sub_20B172CDC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F08](a2);
}

void *sub_20B172CEC()
{
  return &unk_26BF4EEB8;
}

uint64_t sub_20B172CF8()
{
  return 0;
}

uint64_t sub_20B172D00()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B172D0C()
{
  return 0;
}

uint64_t sub_20B172D14()
{
  return 0;
}

BOOL sub_20B172D1C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatdE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B172D50(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EEB8, a2);
}

void *sub_20B172D74()
{
  return &unk_26BF4EEB8;
}

uint64_t sub_20B172D80(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B172D88(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50028;
  operator new();
}

uint64_t *sub_20B172DEC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 64), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B172E08(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 64), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B172E40(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B172E50()
{
  return 1;
}

unint64_t sub_20B172E58(unsigned int **a1)
{
  return sub_20B172FC0((uint64_t)&v2, *a1);
}

uint64_t sub_20B172E80()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
}

uint64_t sub_20B172E8C()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
}

uint64_t sub_20B172E98()
{
  return 0;
}

uint64_t sub_20B172EA4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3EC8](a2);
}

void *sub_20B172EB4()
{
  return &unk_26BF4EE20;
}

uint64_t sub_20B172EC0()
{
  return 0;
}

uint64_t sub_20B172EC8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B172ED4()
{
  return 0;
}

uint64_t sub_20B172EDC()
{
  return 0;
}

BOOL sub_20B172EE4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B172F18(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EE20, a2);
}

void *sub_20B172F3C()
{
  return &unk_26BF4EE20;
}

uint64_t sub_20B172F48(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B172F50(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26BF4FEB8 + 2;
  operator new();
}

unint64_t sub_20B172FC0(uint64_t a1, unsigned int *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_20B15DFA0((uint64_t)v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

uint64_t sub_20B17305C(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 64));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t *sub_20B173104(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 128), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20B173120(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result && atomic_fetch_add_explicit((atomic_uint *volatile)(result + 128), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    JUMPOUT(0x210532650);
  }
  return result;
}

void *sub_20B173158(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B173168()
{
  return 1;
}

unint64_t sub_20B173170(uint64_t **a1)
{
  return sub_20B1732E8((uint64_t)&v2, *a1);
}

uint64_t sub_20B173198()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t sub_20B1731A4()
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t sub_20B1731B0()
{
  return 0;
}

uint64_t sub_20B1731BC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3EC0](a2);
}

void *sub_20B1731CC()
{
  return &unk_26BF4EE10;
}

uint64_t sub_20B1731D8()
{
  return 0;
}

uint64_t sub_20B1731E0()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B1731EC()
{
  return 0;
}

uint64_t sub_20B1731F4()
{
  return 0;
}

BOOL sub_20B1731FC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B173230(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EE10, a2);
}

void *sub_20B173254()
{
  return &unk_26BF4EE10;
}

uint64_t sub_20B173260(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B173268(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&off_26BF4FE00 + 2;
  operator new();
}

unint64_t sub_20B1732E8(uint64_t a1, uint64_t *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_20B15EB74((uint64_t)v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

uint64_t sub_20B173384(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 128));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B17343C(uint64_t a1, unint64_t a2, void *a3)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_20B173598(a1, a2, a3, 0);
  for (int i = 0; i != 3; ++i)
  {
    uint64_t v6 = *(__n128 ***)a1;
    uint64_t v7 = *(__n128 ***)(a1 + 8);
    if (*(__n128 ***)a1 == v7)
    {
      unint64_t v8 = 0;
    }
    else
    {
      unint64_t v8 = 0;
      float v16 = 0.0;
      do
      {
        unint64_t v9 = *v6;
        int32x4_t v10 = (int32x4_t)vmulq_f32(*(float32x4_t *)(a1 + 80), (float32x4_t)sub_20B0C0304(*v6));
        if (vaddq_f32(vaddq_f32((float32x4_t)v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.i8, 1)), (float32x4_t)vdupq_laneq_s32(v10, 2)).f32[0] > v16)
        {
          int32x4_t v11 = (int32x4_t)vmulq_f32((float32x4_t)sub_20B0C0304(v9), *(float32x4_t *)(a1 + 80));
          LODWORD(v16) = vaddq_f32(vaddq_f32((float32x4_t)v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.i8, 1)), (float32x4_t)vdupq_laneq_s32(v11, 2)).u32[0];
          unint64_t v8 = (unint64_t)v9;
        }
        ++v6;
      }
      while (v6 != v7);
      uint64_t v6 = *(__n128 ***)a1;
    }
    *(void *)(a1 + 8) = v6;
    sub_20B173598(a1, v8, a3, 0);
  }
  BOOL v12 = *(__n128 ***)a1;
  long long v13 = *(__n128 ***)(a1 + 8);
  while (v12 != v13)
  {
    uint64_t v14 = (uint64_t)*v12++;
    *(void *)(v14 + 256) = a1;
  }
  return a1;
}

void sub_20B173574(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B173598(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  long long v92 = 0u;
  memset(v91, 0, sizeof(v91));
  v93.n128_u64[0] = a2;
  v93.n128_u64[1] = a2;
  sub_20B174EB8(v91, &v93);
  float32x4_t v79 = *(float32x4_t *)(a2 + 80);
  float32x4_t v76 = *(float32x4_t *)(a2 + 64);
  __n128 v81 = sub_20B0C0304((__n128 *)a2);
  __n128 v78 = sub_20B0C0304((__n128 *)a2);
  uint64_t v8 = *((void *)&v92 + 1);
  if (*((void *)&v92 + 1))
  {
    float32x4_t v9 = vsubq_f32(v79, v76);
    int32x4_t v10 = (int32x4_t)vmulq_f32(v9, v9);
    v10.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2)).u32[0];
    float32x2_t v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
    float32x2_t v12 = vmul_f32(vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)), v11);
    int32x4_t v77 = (int32x4_t)vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
    int32x4_t v13 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL), (float32x4_t)v81)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), (int8x16_t)v81, 0xCuLL), (float32x4_t)v77);
    float32x4_t v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL);
    int32x4_t v15 = (int32x4_t)vmulq_f32((float32x4_t)v13, (float32x4_t)v13);
    v15.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), *(float32x2_t *)v15.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1)).u32[0];
    float32x2_t v16 = vrsqrte_f32((float32x2_t)v15.u32[0]);
    float32x2_t v17 = vmul_f32(vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v16, v16)), v16);
    float32x4_t v75 = vmulq_n_f32(v14, vmul_f32(v17, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(v17, v17))).f32[0]);
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
    do
    {
      uint64_t v19 = (uint64_t *)(*(void *)(*((void *)&v91[0] + 1) + (((unint64_t)v92 >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * v92);
      uint64_t v20 = *v19;
      unint64_t v21 = (__n128 *)v19[1];
      *(void *)&long long v92 = v92 + 1;
      *((void *)&v92 + 1) = v8 - 1;
      if ((unint64_t)v92 >= 0x200)
      {
        operator delete(**((void ***)&v91[0] + 1));
        *((void *)&v91[0] + 1) += 8;
        *(void *)&long long v92 = v92 - 256;
      }
      long long v23 = *(float32x4_t ***)a1;
      double v22 = *(float32x4_t ***)(a1 + 8);
      if (*(float32x4_t ***)a1 != v22)
      {
        while (*v23 != (float32x4_t *)v20)
        {
          if (++v23 == v22)
          {
            long long v23 = *(float32x4_t ***)(a1 + 8);
            break;
          }
        }
      }
      if (v23 == v22)
      {
        __n128 v82 = sub_20B0C0304((__n128 *)v20);
        __n128 v80 = sub_20B0C0304(v21);
        __n128 v24 = sub_20B0C0304((__n128 *)v20);
        if (*(void *)a1 == *(void *)(a1 + 8)
          || (int32x4_t v25 = (int32x4_t)vmulq_f32((float32x4_t)v80, (float32x4_t)v82),
              float32x4_t v26 = vmulq_f32(*(float32x4_t *)(a1 + 80), (float32x4_t)v24),
              (float)(vaddq_f32(vaddq_f32((float32x4_t)v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.i8, 1)), (float32x4_t)vdupq_laneq_s32(v25, 2)).f32[0]+ (float)((float)(v26.f32[1] + v26.f32[0]) + v26.f32[2])) > 1.8))
        {
          float32x4_t v27 = *(float32x4_t *)(a2 + 64);
          float32x4_t v28 = *(float32x4_t *)(v20 + 64);
          float32x4_t v29 = *(float32x4_t *)(v20 + 80);
          int32x4_t v30 = (int32x4_t)vmulq_f32(vsubq_f32(v28, v27), (float32x4_t)v78);
          float32x4_t v31 = vsubq_f32(v28, vmlaq_n_f32(v27, (float32x4_t)v78, vaddq_f32(vaddq_f32((float32x4_t)v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 1)), (float32x4_t)vdupq_laneq_s32(v30, 2)).f32[0]));
          int8x16_t v32 = (int8x16_t)vmulq_f32(v31, (float32x4_t)v77);
          int8x16_t v33 = (int8x16_t)vmulq_f32(v31, v75);
          *(float32x2_t *)(v20 + 16) = vmul_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v33.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v33.i8)), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))), v18);
          float32x4_t v34 = *(float32x4_t *)(a2 + 64);
          int32x4_t v35 = (int32x4_t)vmulq_f32(vsubq_f32(v29, v34), (float32x4_t)v78);
          float32x4_t v36 = vsubq_f32(v29, vmlaq_n_f32(v34, (float32x4_t)v78, vaddq_f32(vaddq_f32((float32x4_t)v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1)), (float32x4_t)vdupq_laneq_s32(v35, 2)).f32[0]));
          int8x16_t v37 = (int8x16_t)vmulq_f32(v36, (float32x4_t)v77);
          int8x16_t v38 = (int8x16_t)vmulq_f32(v36, v75);
          *(float32x2_t *)(v20 + 24) = vmul_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v38.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v38.i8)), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v37, v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL))), v18);
          float32x4_t v39 = *(float32x4_t *)(v20 + 96);
          float32x4_t v40 = *(float32x4_t *)(a2 + 64);
          int32x4_t v41 = (int32x4_t)vmulq_f32(vsubq_f32(v39, v40), (float32x4_t)v78);
          float32x4_t v42 = vsubq_f32(v39, vmlaq_n_f32(v40, (float32x4_t)v78, vaddq_f32(vaddq_f32((float32x4_t)v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.i8, 1)), (float32x4_t)vdupq_laneq_s32(v41, 2)).f32[0]));
          int8x16_t v43 = (int8x16_t)vmulq_f32(v42, (float32x4_t)v77);
          int8x16_t v44 = (int8x16_t)vmulq_f32(v42, v75);
          *(float32x2_t *)(v20 + 32) = vmul_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v43.i8, *(int32x2_t *)v44.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v43.i8, *(int32x2_t *)v44.i8)), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL))), v18);
          long long v45 = *(float32x4_t ***)a1;
          uint64_t v46 = *(float32x4_t ***)(a1 + 8);
          if (*(float32x4_t ***)a1 == v46) {
            goto LABEL_23;
          }
          char v47 = 0;
          do
          {
            long long v48 = *v45;
            sub_20B0BFE5C(*v45, (uint64_t)&v93, *(double *)(v20 + 16));
            if ((void)v94 && !sub_20B0C030C(v48, *(float32x4_t *)(v20 + 64))
              || (sub_20B0BFE5C(v48, (uint64_t)&v89, *(double *)(v20 + 24)), (void)v90)
              && !sub_20B0C030C(v48, *(float32x4_t *)(v20 + 80))
              || (sub_20B0BFE5C(v48, (uint64_t)&v87, *(double *)(v20 + 32)), (void)v88)
              && !sub_20B0C030C(v48, *(float32x4_t *)(v20 + 96)))
            {
              char v47 = 1;
            }
            ++v45;
          }
          while (v45 != v46);
          if ((v47 & 1) == 0)
          {
LABEL_23:
            uint64_t v50 = *(uint64_t **)(a1 + 8);
            unint64_t v49 = *(void *)(a1 + 16);
            if ((unint64_t)v50 >= v49)
            {
              uint64_t v52 = ((uint64_t)v50 - *(void *)a1) >> 3;
              if ((unint64_t)(v52 + 1) >> 61) {
                sub_20B05D0BC();
              }
              uint64_t v53 = v49 - *(void *)a1;
              uint64_t v54 = v53 >> 2;
              if (v53 >> 2 <= (unint64_t)(v52 + 1)) {
                uint64_t v54 = v52 + 1;
              }
              if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v55 = v54;
              }
              if (v55) {
                long long v56 = (char *)sub_20B0602EC(a1 + 16, v55);
              }
              else {
                long long v56 = 0;
              }
              uint64_t v57 = (uint64_t *)&v56[8 * v52];
              *uint64_t v57 = v20;
              unint64_t v51 = (char *)(v57 + 1);
              uint64_t v59 = *(float32x4_t ***)a1;
              long long v58 = *(float32x4_t ***)(a1 + 8);
              if (v58 != *(float32x4_t ***)a1)
              {
                do
                {
                  uint64_t v60 = (uint64_t)*--v58;
                  *--uint64_t v57 = v60;
                }
                while (v58 != v59);
                long long v58 = *(float32x4_t ***)a1;
              }
              *(void *)a1 = v57;
              *(void *)(a1 + 8) = v51;
              *(void *)(a1 + 16) = &v56[8 * v55];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              uint64_t *v50 = v20;
              unint64_t v51 = (char *)(v50 + 1);
            }
            *(void *)(a1 + 8) = v51;
            uint64_t v61 = *(float32x4_t ***)a1;
            float32x4_t v83 = *(float32x4_t *)(a1 + 80);
            __n128 v62 = sub_20B0C0304((__n128 *)v20);
            unint64_t v63 = (unint64_t)(v51 - (char *)v61) >> 3;
            *(float *)v64.i32 = (float)(int)v63;
            float v65 = (double)(int)v63 + -1.0;
            float32x4_t v66 = vmlaq_n_f32((float32x4_t)v62, v83, v65);
            __asm { FMOV            V1.4S, #1.0 }
            *(float32x4_t *)(a1 + 80) = vmulq_f32(v66, vdivq_f32(_Q1, (float32x4_t)vdupq_lane_s32(v64, 0)));
            __n128 v89 = 0u;
            long long v90 = 0u;
            sub_20B0BFA44((int8x16_t *)&v89, *(int8x16_t *)(v20 + 64), *(int8x16_t *)(v20 + 80));
            int8x16_t v87 = 0u;
            long long v88 = 0u;
            sub_20B0BFA44(&v87, *(int8x16_t *)(v20 + 80), *(int8x16_t *)(v20 + 96));
            int8x16_t v85 = 0u;
            long long v86 = 0u;
            sub_20B0BFA44(&v85, *(int8x16_t *)(v20 + 96), *(int8x16_t *)(v20 + 64));
            uint64_t v72 = 0;
            __n128 v93 = v89;
            long long v94 = v90;
            int8x16_t v95 = v87;
            long long v96 = v88;
            int8x16_t v97 = v85;
            long long v98 = v86;
            do
            {
              uint64_t v73 = sub_20B0C0204(v20, a3, *(float32x4_t *)((char *)&v93 + v72), *(float32x4_t *)((char *)&v93 + v72 + 16));
              if (v73 && ((a4 & 1) != 0 || !*(void *)(v73 + 256)))
              {
                v84.n128_u64[0] = v73;
                v84.n128_u64[1] = v20;
                sub_20B174EB8(v91, &v84);
              }
              v72 += 32;
            }
            while (v72 != 96);
          }
        }
      }
      uint64_t v8 = *((void *)&v92 + 1);
    }
    while (*((void *)&v92 + 1));
  }
  return sub_20B174E10(v91);
}

void sub_20B173B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
}

float sub_20B173BD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(float *)&v1 <= *((float *)&v1 + 1)) {
    LODWORD(v1) = HIDWORD(*(void *)(a1 + 32));
  }
  return *(float *)&v1;
}

void sub_20B173BE8(uint64_t a1)
{
  v18[3] = *MEMORY[0x263EF8340];
  float32x2_t v2 = *(float32x2_t *)(a1 + 64);
  __asm { FMOV            V9.2S, #1.0 }
  float32x2_t v8 = vdiv_f32(_D9, v2);
  *(float32x2_t *)(a1 + 64) = vmul_f32(v8, v2);
  float32x2_t v9 = vmul_f32(v8, *(float32x2_t *)(a1 + 32));
  *(float32x2_t *)(a1 + 32) = v9;
  int32x4_t v10 = *(float32x2_t ***)a1;
  float32x2_t v11 = *(float32x2_t ***)(a1 + 8);
  if (*(float32x2_t ***)a1 != v11)
  {
    do
    {
      float32x2_t v12 = *v10++;
      sub_20B0BFB34(v12, v8);
    }
    while (v10 != v11);
    float32x2_t v9 = *(float32x2_t *)(a1 + 32);
  }
  *(float32x2_t *)(a1 + 64) = _D9;
  if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v9, 1), v9).u8[0])
  {
    *(int32x2_t *)(a1 + 32) = vrev64_s32((int32x2_t)v9);
    int32x4_t v13 = *(float32x2_t ***)a1;
    float32x4_t v14 = *(float32x2_t ***)(a1 + 8);
    if (*(float32x2_t ***)a1 != v14)
    {
      do
      {
        uint64_t v15 = 0;
        float32x2_t v16 = *v13;
        uint64_t v17 = (uint64_t)&(*v13)[3];
        v18[0] = *v13 + 2;
        v18[1] = v17;
        v18[2] = v16 + 4;
        do
        {
          *(int32x2_t *)v18[v15] = vrev64_s32(*(int32x2_t *)v18[v15]);
          ++v15;
        }
        while (v15 != 3);
        ++v13;
      }
      while (v13 != v14);
    }
  }
}

void sub_20B173D00(uint64_t a1, float32x2_t a2)
{
  *(float32x2_t *)(a1 + 64) = vmul_f32(*(float32x2_t *)(a1 + 64), a2);
  *(float32x2_t *)(a1 + 32) = vmul_f32(*(float32x2_t *)(a1 + 32), a2);
  uint64_t v3 = *(float32x2_t ***)a1;
  unint64_t v4 = *(float32x2_t ***)(a1 + 8);
  while (v3 != v4)
  {
    uint64_t v5 = *v3++;
    sub_20B0BFB34(v5, a2);
  }
}

void sub_20B173D5C(float32x2_t ***a1)
{
  sub_20B173EEC(a1);
  *(float32x2_t *)&long long v2 = vmul_lane_f32(*(float32x2_t *)&v2, *(float32x2_t *)&v2, 1);
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  while (v3 != v4)
  {
    uint64_t v5 = (uint64_t)*v3++;
    *(_OWORD *)(v5 + 40) = *(_OWORD *)(v5 + 16);
    *(void *)(v5 + 56) = *(void *)(v5 + 32);
  }
  float v6 = 0.0;
  double v7 = 0.0;
  float v8 = 0.0;
  do
  {
    long long v26 = v2;
    __float2 v9 = __sincosf_stret(v8);
    int32x4_t v10 = *a1;
    float32x2_t v11 = a1[1];
    if (*a1 != v11)
    {
      v12.f32[0] = -v9.__sinval;
      v12.i32[1] = LODWORD(v9.__cosval);
      do
      {
        int32x4_t v13 = *v10++;
        float32x2_t v14 = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), COERCE_FLOAT(*(void *)&v13[3])), v12, v13[3], 1);
        _OWORD v13[2] = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), COERCE_FLOAT(*(void *)&v13[2])), v12, v13[2], 1);
        v13[3] = v14;
        _OWORD v13[4] = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v9.__sinval), LODWORD(v9.__cosval)), COERCE_FLOAT(*(void *)&v13[4])), v12, v13[4], 1);
      }
      while (v10 != v11);
    }
    sub_20B173EEC(a1);
    float v16 = vmul_lane_f32(v15, v15, 1).f32[0];
    long long v2 = v26;
    if (v16 < *(float *)&v26)
    {
      float v6 = v8;
      *(float *)&long long v2 = v16;
    }
    uint64_t v17 = *a1;
    float32x2_t v18 = a1[1];
    while (v17 != v18)
    {
      uint64_t v19 = (uint64_t)*v17++;
      *(_OWORD *)(v19 + 16) = *(_OWORD *)(v19 + 40);
      *(void *)(v19 + 32) = *(void *)(v19 + 56);
    }
    float v8 = v7 + 0.0436332313;
    double v7 = v8;
  }
  while (v8 < 3.14159265);
  __float2 v20 = __sincosf_stret(v6);
  unint64_t v21 = *a1;
  double v22 = a1[1];
  if (*a1 != v22)
  {
    v23.f32[0] = -v20.__sinval;
    v23.i32[1] = LODWORD(v20.__cosval);
    do
    {
      __n128 v24 = *v21++;
      float32x2_t v25 = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v20.__sinval), LODWORD(v20.__cosval)), COERCE_FLOAT(*(void *)&v24[3])), v23, v24[3], 1);
      v24[2] = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v20.__sinval), LODWORD(v20.__cosval)), COERCE_FLOAT(*(void *)&v24[2])), v23, v24[2], 1);
      v24[3] = v25;
      v24[4] = vmla_lane_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v20.__sinval), LODWORD(v20.__cosval)), COERCE_FLOAT(*(void *)&v24[4])), v23, v24[4], 1);
    }
    while (v21 != v22);
  }
}

float32x2_t ***sub_20B173EEC(float32x2_t ***result)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = *result;
  long long v2 = result[1];
  float32x2_t v3 = (**result)[2];
  if (*result != v2)
  {
    float32x2_t v4 = (**result)[2];
    do
    {
      uint64_t v5 = 0;
      float v6 = *v1;
      long long v8 = *(_OWORD *)(*v1)[2].f32;
      float32x2_t v9 = v6[4];
      do
      {
        float32x2_t v7 = *(float32x2_t *)((char *)&v8 + v5);
        float32x2_t v3 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v3), (int8x8_t)v3, (int8x8_t)v7);
        float32x2_t v4 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v7, v4), (int8x8_t)v7, (int8x8_t)v4);
        v5 += 8;
      }
      while (v5 != 24);
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20B173FA0(float32x4_t ***a1, __n128 a2)
{
  float32x4_t v3 = 0uLL;
  long long v43 = 0u;
  long long v44 = 0u;
  uint64_t v45 = 1065353216;
  uint64_t v5 = *a1;
  float32x2_t v4 = a1[1];
  if (*a1 == v4)
  {
    long long v8 = *a1;
  }
  else
  {
    do
    {
      float v6 = *v5;
      uint64_t v46 = *v5 + 4;
      sub_20B084904((uint64_t)&v43, v46, (uint64_t)&unk_20B1E7420, &v46)[2].i64[0] = 0;
      uint64_t v46 = v6 + 5;
      sub_20B084904((uint64_t)&v43, v6 + 5, (uint64_t)&unk_20B1E7420, &v46)[2].i64[0] = 0;
      uint64_t v46 = v6 + 6;
      sub_20B084904((uint64_t)&v43, v6 + 6, (uint64_t)&unk_20B1E7420, &v46)[2].i64[0] = 0;
      ++v5;
    }
    while (v5 != v4);
    float32x2_t v7 = (__n128 **)*a1;
    uint64_t v5 = a1[1];
    if (*a1 == v5)
    {
      long long v8 = a1[1];
      float32x4_t v3 = 0uLL;
    }
    else
    {
      float32x4_t v3 = 0uLL;
      do
      {
        float32x4_t v41 = v3;
        a2 = sub_20B0C0304(*v7);
        float32x4_t v3 = vaddq_f32((float32x4_t)a2, v41);
        ++v7;
      }
      while (v7 != (__n128 **)v5);
      uint64_t v5 = *a1;
      long long v8 = a1[1];
    }
  }
  float32x2_t v9 = *v5;
  if (v8 != v5)
  {
    a2.n128_f32[0] = (float)(unint64_t)(v8 - v5);
    __asm { FMOV            V1.4S, #1.0 }
    float v40 = 0.0;
    float32x4_t v42 = vmulq_f32(v3, vdivq_f32(_Q1, (float32x4_t)vdupq_lane_s32((int32x2_t)a2.n128_u64[0], 0)));
    do
    {
      float32x2_t v15 = *v5;
      int32x4_t v16 = (int32x4_t)vmulq_f32((float32x4_t)sub_20B0C0304((__n128 *)*v5), v42);
      if (vaddq_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x4_t)vdupq_laneq_s32(v16, 2)).f32[0] > v40)
      {
        int32x4_t v17 = (int32x4_t)vmulq_f32((float32x4_t)sub_20B0C0304((__n128 *)v15), v42);
        LODWORD(v40) = vaddq_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1)), (float32x4_t)vdupq_laneq_s32(v17, 2)).u32[0];
        float32x2_t v9 = v15;
      }
      ++v5;
    }
    while (v5 != v8);
  }
  __n128 v18 = sub_20B0C0304((__n128 *)v9);
  uint64_t v19 = (float32x4_t *)v44;
  if ((void)v44)
  {
    float32x4_t v20 = vsubq_f32(v9[5], v9[4]);
    int32x4_t v21 = (int32x4_t)vmulq_f32(v20, v20);
    v21.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v21, 2)).u32[0];
    float32x2_t v22 = vrsqrte_f32((float32x2_t)v21.u32[0]);
    float32x2_t v23 = vmul_f32(vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v22, v22)), v22);
    int32x4_t v24 = (int32x4_t)vmulq_n_f32(v20, vmul_f32(v23, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(v23, v23))).f32[0]);
    int32x4_t v25 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL), (float32x4_t)v18)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), (float32x4_t)v24);
    int32x4_t v26 = (int32x4_t)vmulq_f32((float32x4_t)v25, (float32x4_t)v25);
    v26.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), *(float32x2_t *)v26.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1)).u32[0];
    float32x4_t v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL);
    *(float32x2_t *)v25.i8 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    *(float32x2_t *)v25.i8 = vmul_f32(vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8)), *(float32x2_t *)v25.i8);
    float32x4_t v28 = vmulq_n_f32(v27, vmul_f32(*(float32x2_t *)v25.i8, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v25.i8, *(float32x2_t *)v25.i8))).f32[0]);
    float32x2_t v29 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
    do
    {
      float32x4_t v30 = v19[1];
      float32x4_t v31 = v9[4];
      int32x4_t v32 = (int32x4_t)vmulq_f32(vsubq_f32(v30, v31), (float32x4_t)v18);
      float32x4_t v33 = vsubq_f32(v30, vmlaq_n_f32(v31, (float32x4_t)v18, vaddq_f32(vaddq_f32((float32x4_t)v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1)), (float32x4_t)vdupq_laneq_s32(v32, 2)).f32[0]));
      int32x4_t v34 = (int32x4_t)vmulq_f32(v33, (float32x4_t)v24);
      int32x4_t v35 = (int32x4_t)vmulq_f32(v28, v33);
      *(float32x2_t *)v19[2].f32 = vmul_f32(vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v35.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v35.i8)), (float32x2_t)*(_OWORD *)&vzip2q_s32(v34, v35)), v29);
      uint64_t v19 = (float32x4_t *)v19->i64[0];
    }
    while (v19);
  }
  float32x4_t v36 = *a1;
  int8x16_t v37 = a1[1];
  if (*a1 != v37)
  {
    do
    {
      int8x16_t v38 = *v36;
      uint64_t v46 = *v36 + 4;
      v38[1].i64[0] = sub_20B084904((uint64_t)&v43, v46, (uint64_t)&unk_20B1E7420, &v46)[2].i64[0];
      uint64_t v46 = v38 + 5;
      v38[1].i64[1] = sub_20B084904((uint64_t)&v43, v38 + 5, (uint64_t)&unk_20B1E7420, &v46)[2].i64[0];
      uint64_t v46 = v38 + 6;
      v38[2].i64[0] = sub_20B084904((uint64_t)&v43, v38 + 6, (uint64_t)&unk_20B1E7420, &v46)[2].i64[0];
      ++v36;
    }
    while (v36 != v37);
  }
  sub_20B05F1D0((uint64_t)&v43);
  return 1;
}

void sub_20B1742F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_20B05F1D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B174314(float32x2_t *a1, float32x2_t a2)
{
  v30[8] = *MEMORY[0x263EF8340];
  float32x2_t v2 = a1[5];
  if (vmvn_s8((int8x8_t)vcge_f32(a2, v2)).u8[0]) {
    return 0;
  }
  int32x2_t v4 = vcgt_f32(vadd_f32(a1[6], v2), a2);
  if ((v4.i8[0] & 1) == 0) {
    return 0;
  }
  uint64_t result = 0;
  if (a2.f32[1] < v2.f32[1] || (v4.i8[4] & 1) == 0) {
    return result;
  }
  float v6 = (const float *)&dword_267691148;
  float32x2_t v7 = vld1_dup_f32(v6);
  float32x2_t v8 = vadd_f32(v7, a2);
  v30[0] = a2;
  v30[1] = __PAIR64__(v8.u32[1], a2.u32[0]);
  v30[2] = __PAIR64__(v8.u32[1], a2.u32[0]);
  v30[3] = v8;
  uint64_t v24 = (uint64_t)v8;
  v30[4] = v8;
  v30[5] = __PAIR64__(a2.u32[1], v8.u32[0]);
  v30[6] = __PAIR64__(a2.u32[1], v8.u32[0]);
  v30[7] = a2;
  float32x2_t v9 = (void **)*a1;
  uint64_t v10 = (void **)a1[1];
  if (*(void ***)a1 == v10) {
    return 0;
  }
  uint64_t v25 = (uint64_t)a2;
  while (1)
  {
    sub_20B0BFE5C(*v9, (uint64_t)&v26, *(double *)&a2);
    if ((void)v27) {
      return 1;
    }
    ++v9;
    a2 = (float32x2_t)v25;
    if (v9 == v10)
    {
      float32x2_t v11 = (float32x2_t **)*a1;
      float32x2_t v12 = (float32x2_t **)a1[1];
      if ((float32x2_t **)*a1 == v12) {
        return 0;
      }
      while (1)
      {
        int32x4_t v13 = *v11;
        double v14 = sub_20B0C02BC(*v11);
        v15.i64[0] = v25;
        *(double *)&v15.i64[1] = v14;
        v16.i64[1] = v24;
        if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v16, v15))), 0xFuLL))) & 1) == 0) {
          break;
        }
LABEL_11:
        if (++v11 == v12) {
          return 0;
        }
      }
      uint64_t v17 = 0;
      long long v18 = *(_OWORD *)v13[3].f32;
      float32x2_t v19 = v13[4];
      long long v26 = *(_OWORD *)v13[2].f32;
      long long v27 = v18;
      float32x2_t v28 = v19;
      uint64_t v29 = v26;
LABEL_14:
      uint64_t v20 = 0;
      int32x4_t v21 = (float32x2_t *)(&v26 + v17);
      float32x2_t v22 = *v21;
      float32x2_t v23 = v21[1];
      while (!sub_20B0BF380(v22, v23, (float32x2_t)v30[v20], (float32x2_t)v30[v20 + 1]))
      {
        v20 += 2;
        if (v20 == 8)
        {
          if (++v17 != 3) {
            goto LABEL_14;
          }
          goto LABEL_11;
        }
      }
      return 1;
    }
  }
}

void sub_20B1744F8(float32x2_t ***a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  v39[8] = *MEMORY[0x263EF8340];
  int32x2_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    float32x2_t v8 = *a1;
LABEL_6:
    float32x2_t v9 = (const float *)&dword_267691148;
    float32x2_t v10 = vld1_dup_f32(v9);
    float32x2_t v11 = vadd_f32(v10, *(float32x2_t *)&a3);
    *(double *)float32x4_t v39 = a3;
    v39[1] = __PAIR64__(v11.u32[1], LODWORD(a3));
    v39[2] = __PAIR64__(HIDWORD(a3), v11.u32[0]);
    *(double *)&v39[3] = a3;
    v39[4] = __PAIR64__(v11.u32[1], LODWORD(a3));
    v39[5] = v11;
    uint64_t v34 = (uint64_t)v11;
    v39[6] = v11;
    for (v39[7] = __PAIR64__(HIDWORD(a3), v11.u32[0]); v8 != v4; ++v8)
    {
      float32x2_t v12 = *v8;
      double v13 = sub_20B0C02BC(*v8);
      *(double *)v14.i64 = a3;
      *(double *)&v14.i64[1] = v13;
      v15.i64[1] = v34;
      if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v15, v14))), 0xFuLL))) & 1) == 0)
      {
        uint64_t v16 = 0;
        long long v17 = *(_OWORD *)v12[3].f32;
        float32x2_t v18 = v12[4];
        v36[0] = *(_OWORD *)v12[2].f32;
        v36[1] = v17;
        float32x2_t v37 = v18;
        uint64_t v38 = *(void *)&v36[0];
        while (2)
        {
          uint64_t v19 = 0;
          uint64_t v20 = (float32x2_t *)&v36[v16];
          float32x2_t v21 = *v20;
          float32x2_t v22 = v20[1];
          do
          {
            float32x2_t v23 = (float32x2_t)v39[v19];
            float32x2_t v24 = (float32x2_t)v39[v19 + 1];
            if (sub_20B0BF380(v21, v22, v23, v24))
            {
              double v25 = sub_20B0BF3E4(v21, v22, v23, v24);
              float32x2_t v26 = vsub_f32(sub_20B0C0398(v12), *(float32x2_t *)&v25);
              float32x2_t v27 = vmul_f32(v26, v26);
              v27.i32[0] = vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1)).u32[0];
              float32x2_t v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
              float32x2_t v29 = vmul_f32(vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)), v28);
              float32x2_t v30 = vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29));
              double v31 = *(float *)&dword_267691148 * 0.1;
              float32x2_t v32 = vsub_f32(*(float32x2_t *)&v25, sub_20B0C0398(v12));
              float32x2_t v33 = vmul_f32(v32, v32);
              v33.f32[0] = sqrtf(vaddv_f32(v33));
              if (v31 < v33.f32[0]) {
                v33.f32[0] = v31;
              }
              a2[1] = 0;
              a2[2] = 0;
              *a2 = 0;
              sub_20B0BFE5C(v12, (uint64_t)a2, COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)&v25, v26, vmul_f32(vmul_f32(v29, v33), v30).f32[0])));
              if (!a2[2])
              {
                a2[2] = v12;
                *a2 = vdup_n_s32(0x3EA8F5C3u);
                *((_DWORD *)a2 + 2) = 1051595899;
              }
              return;
            }
            v19 += 2;
          }
          while (v19 != 8);
          if (++v16 != 3) {
            continue;
          }
          break;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    *(_DWORD *)a2 = -1082130432;
    a2[2] = 0;
  }
  else
  {
    while (1)
    {
      float32x2_t v7 = *v4;
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_20B0BFE5C(v7, (uint64_t)a2, a3);
      if (a2[2]) {
        break;
      }
      if (++v4 == v5)
      {
        float32x2_t v8 = *a1;
        int32x2_t v4 = a1[1];
        goto LABEL_6;
      }
    }
  }
}

void sub_20B1747B4(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  float32x2_t v7 = *(float32x2_t *)(a1 + 24);
  float32x2_t v6 = *(float32x2_t *)(a1 + 32);
  LODWORD(a6) = dword_267691148;
  float32x2_t v8 = vmul_n_f32(vrndm_f32(vmul_n_f32(v7, (float)dword_267691144)), *(float *)&dword_267691148);
  float32x2_t v9 = vrndm_f32(vmul_n_f32(vadd_f32(v6, v7), (float)dword_267691144));
  float32x2_t v10 = vmla_n_f32(vneg_f32(v8), v9, *(float *)&dword_267691148);
  *(float32x2_t *)(a1 + 24) = v8;
  *(float32x2_t *)(a1 + 32) = v10;
  v9.f32[0] = *(float *)&a6 + *(float *)&a6;
  float32x2_t v11 = vsub_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 0));
  *(float32x2_t *)(a1 + 40) = vadd_f32(v8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0));
  *(float32x2_t *)(a1 + 48) = v11;
  *(_DWORD *)(a1 + 56) = LODWORD(a6);
  float32x2_t v12 = *(float32x2_t ***)a1;
  double v13 = *(float32x2_t ***)(a1 + 8);
  if (*(float32x2_t ***)a1 != v13)
  {
    float32x2_t v15 = vdiv_f32(v11, v6);
    do
    {
      uint64_t v16 = *v12++;
      sub_20B0BFB34(v16, v15);
      sub_20B0BFB54(v16, *(float32x2_t *)(a1 + 40));
    }
    while (v12 != v13);
  }
}

float sub_20B174878(float32x4_t ***a1)
{
  uint64_t v1 = *a1;
  float32x2_t v2 = a1[1];
  float v3 = 0.0;
  while (v1 != v2)
  {
    int32x2_t v4 = *v1++;
    float v3 = sub_20B0BFBEC(v4) + v3;
  }
  return v3;
}

float sub_20B1748C0(uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  float32x2_t v2 = *(void ***)(a1 + 8);
  float v3 = 0.0;
  while (v1 != v2)
  {
    int32x2_t v4 = *v1++;
    float v3 = sub_20B0BFB74(v4) + v3;
  }
  return v3;
}

int32x2_t sub_20B174908(double a1)
{
  *(float *)&a1 = *(float *)&a1 * 6.0;
  return vdup_lane_s32(*(int32x2_t *)&a1, 0);
}

void sub_20B174918(uint64_t a1)
{
  sub_20B173EEC((float32x2_t ***)a1);
  uint64_t v4 = v3;
  uint64_t v5 = *(float32x2_t ***)a1;
  float32x2_t v6 = *(float32x2_t ***)(a1 + 8);
  if (*(float32x2_t ***)a1 != v6)
  {
    float32x2_t v7 = vneg_f32(v2);
    do
    {
      float32x2_t v8 = *v5++;
      sub_20B0BFB54(v8, v7);
    }
    while (v5 != v6);
  }
  *(void *)(a1 + 32) = v4;
}

float32x2_t sub_20B174978(float32x2_t *a1, double a2)
{
  v10.n128_f64[0] = a2;
  if (*a1) {
    sub_20B174978(v10);
  }
  if (a1[1]) {
    sub_20B174978(v10);
  }
  float32x2_t v3 = a1[2];
  if (v3)
  {
    *(float32x2_t *)(*(void *)&v3 + 64) = vmul_n_f32(*(float32x2_t *)(*(void *)&v3 + 64), v10.n128_f32[0]);
    *(float32x2_t *)(*(void *)&v3 + 32) = vmul_n_f32(*(float32x2_t *)(*(void *)&v3 + 32), v10.n128_f32[0]);
    uint64_t v4 = **(float32x2_t ****)&v3;
    uint64_t v5 = *(float32x2_t ***)(*(void *)&v3 + 8);
    if (**(float32x2_t ****)&v3 != v5)
    {
      float32x2_t v6 = (float32x2_t)vdup_lane_s32((int32x2_t)v10.n128_u64[0], 0);
      do
      {
        float32x2_t v7 = *v4++;
        sub_20B0BFB34(v7, v6);
      }
      while (v4 != v5);
    }
  }
  float32x2_t result = vmul_n_f32(a1[3], v10.n128_f32[0]);
  float32x2_t v9 = vmul_n_f32(a1[4], v10.n128_f32[0]);
  a1[3] = result;
  a1[4] = v9;
  return result;
}

uint64_t sub_20B174A34(uint64_t *a1, uint64_t a2)
{
  float32x2_t v3 = a1;
  v14[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  if (!v4)
  {
LABEL_4:
    float32x2_t v5 = (float32x2_t)v3[4];
    float32x2_t v6 = *(float32x2_t *)(a2 + 32);
    if ((vcgt_f32(v6, v5).u32[0] & 1) != 0 || v5.f32[1] < v6.f32[1])
    {
      if (v5.f32[0] < v6.f32[1] || v5.f32[1] < v6.f32[0]) {
        return 0;
      }
      *(int32x2_t *)(a2 + 32) = vrev64_s32((int32x2_t)v6);
      float32x2_t v9 = *(uint64_t **)a2;
      __n128 v10 = *(uint64_t **)(a2 + 8);
      if (*(uint64_t **)a2 != v10)
      {
        do
        {
          uint64_t v11 = 0;
          uint64_t v12 = *v9;
          uint64_t v13 = *v9 + 24;
          v14[0] = *v9 + 16;
          v14[1] = v13;
          _OWORD v14[2] = v12 + 32;
          do
          {
            *(int32x2_t *)v14[v11] = vrev64_s32(*(int32x2_t *)v14[v11]);
            ++v11;
          }
          while (v11 != 3);
          ++v9;
        }
        while (v9 != v10);
      }
    }
    operator new();
  }
  while ((sub_20B174A34(v4, a2) & 1) == 0)
  {
    float32x2_t v3 = (uint64_t *)v3[1];
    uint64_t v4 = *v3;
    if (!*v3) {
      goto LABEL_4;
    }
  }
  return 1;
}

void sub_20B174BDC(float32x2_t *a1, double a2, double a3, double a4, double a5, double a6)
{
  float32x2_t v7 = a1[3];
  float32x2_t v8 = vadd_f32(a1[4], v7);
  LODWORD(a5) = dword_267691148;
  float32x2_t v9 = vmul_n_f32(vrndm_f32(vmul_n_f32(v7, (float)dword_267691144)), *(float *)&dword_267691148);
  float32x2_t v10 = vrndm_f32(vmul_n_f32(v8, (float)dword_267691144));
  double v11 = COERCE_DOUBLE(vmla_n_f32(vneg_f32(v9), v10, *(float *)&dword_267691148));
  a1[3] = v9;
  *(double *)&a1[4] = v11;
  if (*a1) {
    sub_20B174BDC();
  }
  if (a1[1]) {
    sub_20B174BDC();
  }
  uint64_t v12 = (uint64_t)a1[2];
  if (v12)
  {
    sub_20B1747B4(v12, *(double *)&v9, *(double *)&v10, v11, a5, a6);
  }
}

uint64_t sub_20B174C7C(uint64_t result, double a2)
{
  *(void *)float32x2_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(double *)(result + 32) = a2;
  return result;
}

uint64_t sub_20B174C8C(void *a1)
{
  if (*a1)
  {
    sub_20B174C8C();
    if (*a1) {
      MEMORY[0x210532650](*a1, 0x1020C4084B17629);
    }
  }
  uint64_t result = a1[1];
  if (result)
  {
    sub_20B174C8C();
    uint64_t result = a1[1];
    if (result) {
      uint64_t result = MEMORY[0x210532650](result, 0x1020C4084B17629);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

float32x2_t sub_20B174D04(float32x2_t *a1)
{
  if (*a1) {
    sub_20B174D04();
  }
  if (a1[1]) {
    sub_20B174D04();
  }
  float32x2_t v3 = (float32x2_t *)a1[2];
  if (v3)
  {
    float32x2_t result = vadd_f32(v3[3], a1[3]);
    v3[3] = result;
  }
  return result;
}

float32x2_t sub_20B174D54(float32x2_t *a1)
{
  double v1 = *(double *)&a1[4];
  *(float *)&double v1 = 1.0 / *(float *)&v1;
  return sub_20B174978(a1, v1);
}

float32x2_t *sub_20B174D64(void *a1, double a2)
{
  for (float32x2_t i = (float32x2_t)a1[3]; (vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)&a2, i)).u8[0] & 1) == 0; float32x2_t i = (float32x2_t)a1[3])
  {
    float32x2_t v5 = (float32x2_t)a1[4];
    if (*(float *)&a2 >= (float)(v5.f32[0] + i.f32[0])) {
      break;
    }
    float32x2_t v3 = 0;
    if (*((float *)&a2 + 1) < i.f32[1]) {
      return v3;
    }
    if ((vcgt_f32(vadd_f32(v5, i), *(float32x2_t *)&a2).i32[1] & 1) == 0) {
      return v3;
    }
    float32x2_t v3 = (float32x2_t *)a1[2];
    if (!v3) {
      return v3;
    }
    if (!*a1) {
      return 0;
    }
    float32x2_t v6 = (void *)a1[1];
    if (!v6) {
      return 0;
    }
    float32x2_t v7 = v3[4];
    a1 = (void *)*a1;
    if (*(float *)&a2 < (float)(v7.f32[0] + i.f32[0]))
    {
      a1 = v6;
      if (vcgt_f32(vadd_f32(v7, i), *(float32x2_t *)&a2).i32[1]) {
        return v3;
      }
    }
  }
  return 0;
}

uint64_t sub_20B174E10(void *a1)
{
  float32x2_t v2 = (void **)a1[1];
  float32x2_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      float32x2_t v3 = (void **)a1[2];
      float32x2_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 128;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    float32x2_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_20B12AFF4((uint64_t)a1);
}

__n128 sub_20B174EB8(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_20B174F44(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_20B174F44(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    float32x2_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    float32x2_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)float32x2_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_20B0602EC(v5, v33);
      int32x4_t v35 = &v34[8 * (v33 >> 2)];
      float32x2_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      float32x2_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        float32x2_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        float32x4_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)float32x4_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      float32x2_t v9 = (char *)a1[1];
    }
    float32x2_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_20B085500(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_20B085618((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    float32x2_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    float32x2_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_20B0602EC((uint64_t)(a1 + 3), v46);
      int32x4_t v35 = &v34[8 * (v46 >> 2)];
      float32x2_t v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      float32x2_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        float32x2_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      long long v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        float32x2_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_20B0602EC((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_20B085738(&v54, &v53);
  float32x2_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20B085850((uint64_t)&v54, v27);
  }
  float32x2_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_20B175210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_20B17525C(float a1, float a2)
{
  float v2 = (float)(a2 + a1) * 0.366025403;
  int v3 = (int)(float)(v2 + a1) - ((float)(v2 + a1) <= 0.0);
  int v4 = (int)(float)(v2 + a2) - ((float)(v2 + a2) <= 0.0);
  float v5 = (float)(v3 + v4) * 0.211324865;
  float v6 = (float)(v5 - (float)v3) + a1;
  float v7 = (float)(v5 - (float)v4) + a2;
  BOOL v8 = v6 > v7;
  BOOL v9 = v6 <= v7;
  float v10 = 0.0;
  float v11 = 1.0;
  if (v6 <= v7) {
    float v12 = 0.0;
  }
  else {
    float v12 = 1.0;
  }
  float v13 = (float)(v6 - v12) + 0.211324865;
  if (v6 > v7) {
    float v11 = 0.0;
  }
  float v14 = (float)(v7 - v11) + 0.211324865;
  double v15 = (float)(v6 + -1.0) + 0.42264973;
  double v16 = (float)(v7 + -1.0) + 0.42264973;
  float v17 = 0.5 - (float)((float)(v6 * v6) + (float)(v7 * v7));
  float v18 = 0.0;
  if (v17 >= 0.0)
  {
    float v19 = (float)(v17 * v17) * (float)(v17 * v17);
    if ((byte_20B1E9918[byte_20B1E9918[v4] + (unint64_t)v3] & 4) != 0) {
      float v20 = v7;
    }
    else {
      float v20 = v6;
    }
    if ((byte_20B1E9918[byte_20B1E9918[v4] + (unint64_t)v3] & 4) == 0) {
      float v6 = v7;
    }
    float v21 = -v20;
    if ((byte_20B1E9918[byte_20B1E9918[v4] + (unint64_t)v3] & 1) == 0) {
      float v21 = v20;
    }
    float v22 = -2.0;
    if ((byte_20B1E9918[byte_20B1E9918[v4] + (unint64_t)v3] & 2) == 0) {
      float v22 = 2.0;
    }
    float v18 = v19 * (float)(v21 + (float)(v6 * v22));
  }
  float v23 = v15;
  float v25 = 0.5 - (float)((float)(v13 * v13) + (float)(v14 * v14));
  if (v25 >= 0.0)
  {
    float v26 = (float)(v25 * v25) * (float)(v25 * v25);
    unsigned __int8 v27 = byte_20B1E9918[v3
                       + v8
                       + (unint64_t)byte_20B1E9918[v4 + (unint64_t)v9]];
    if ((v27 & 4) != 0) {
      float v28 = v14;
    }
    else {
      float v28 = v13;
    }
    if ((v27 & 4) == 0) {
      float v13 = v14;
    }
    float v29 = -v28;
    if ((v27 & 1) == 0) {
      float v29 = v28;
    }
    float v30 = -2.0;
    if ((v27 & 2) == 0) {
      float v30 = 2.0;
    }
    float v10 = v26 * (float)(v29 + (float)(v13 * v30));
  }
  float v24 = v16;
  float v31 = 0.5 - (float)((float)(v23 * v23) + (float)(v24 * v24));
  float v32 = 0.0;
  if (v31 >= 0.0)
  {
    float v33 = (float)(v31 * v31) * (float)(v31 * v31);
    unsigned __int8 v34 = byte_20B1E9918[v3
                       + 1
                       + (unint64_t)byte_20B1E9918[v4 + 1]];
    if ((v34 & 4) != 0) {
      float v35 = v16;
    }
    else {
      float v35 = v23;
    }
    if ((v34 & 4) == 0) {
      float v23 = v16;
    }
    if (v34) {
      float v35 = -v35;
    }
    float v36 = -2.0;
    if ((v34 & 2) == 0) {
      float v36 = 2.0;
    }
    float v32 = v33 * (float)(v35 + (float)(v23 * v36));
  }
  return (float)((float)(v10 + v18) + v32) * 40.0;
}

void sub_20B1755AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B175C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20B175DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B175E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B175FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1760F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1763FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20B176520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B176B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_20B176DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1789DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_20B179654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B179DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  _Block_object_dispose(&a23, 8);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B179E68(uint64_t a1)
{
}

void sub_20B17A184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B17A340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_20B17A5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B17A7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20B17A9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B17ABFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B17AE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B17B130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B17B170(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,const char *a25)
{
  v143[0] = xmmword_20B1E6130;
  if (a2)
  {
    uint64_t v28 = result;
    unint64_t v29 = 0;
    __n128 result = a22;
    long long v36 = xmmword_20B1E74C0;
    long long v37 = xmmword_20B1E74C0;
    do
    {
      uint64_t v38 = *(unsigned __int8 *)(v28 + v29);
      uint64_t v39 = *(unsigned __int8 *)(v28 + v29 + 1);
      uint64_t v40 = *(unsigned __int8 *)(v28 + v29 + 2);
      if (v38 * a4 + 12 <= a5 && v39 * a4 + 12 <= a5 && v40 * a4 + 12 <= a5)
      {
        BOOL v43 = v38 * a16 + 8 > a17 || v39 * a16 + 8 > a17;
        if (!v43 && v40 * a16 + 8 <= a17)
        {
          float32x2_t v45 = *(float32x2_t *)(a15 + v38 * a16);
          float32x2_t v46 = vsub_f32(*(float32x2_t *)(a15 + v39 * a16), v45);
          float32x2_t v47 = vsub_f32(*(float32x2_t *)(a15 + v40 * a16), v45);
          float32x2_t v48 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v47), v46);
          float v49 = vsub_f32(v48, (float32x2_t)vdup_lane_s32((int32x2_t)v48, 1)).f32[0];
          if (v49 == 0.0)
          {
            float32x4_t v56 = 0uLL;
            float32x4_t v57 = 0uLL;
          }
          else
          {
            uint64_t v50 = a3 + v38 * a4;
            a12.i64[0] = *(void *)v50;
            a12.i32[2] = *(_DWORD *)(v50 + 8);
            uint64_t v51 = a3 + v39 * a4;
            a13.i64[0] = *(void *)v51;
            a13.i32[2] = *(_DWORD *)(v51 + 8);
            uint64_t v52 = a3 + v40 * a4;
            a14.i64[0] = *(void *)v52;
            a14.i32[2] = *(_DWORD *)(v52 + 8);
            float32x4_t v53 = vsubq_f32(a14, a12);
            float32x4_t v54 = vsubq_f32(a13, a12);
            float v55 = 1.0 / v49;
            float32x4_t v57 = vmulq_n_f32(vmlaq_lane_f32(vnegq_f32(vmulq_lane_f32(v53, v46, 1)), v54, v47, 1), 1.0 / v49);
            float32x4_t v56 = vmulq_n_f32(vmlaq_n_f32(vnegq_f32(vmulq_n_f32(v54, v47.f32[0])), v53, v46.f32[0]), v55);
            v57.i32[3] = 0;
          }
          int32x4_t v58 = (int32x4_t)vmulq_f32(v57, v57);
          float v59 = vaddq_f32(vaddq_f32((float32x4_t)v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 1)), (float32x4_t)vdupq_laneq_s32(v58, 2)).f32[0];
          if (v59 <= COERCE_FLOAT(512))
          {
            a14 = (float32x4_t)v143[0];
          }
          else
          {
            float v60 = v59;
            float32x2_t v61 = vrsqrte_f32((float32x2_t)LODWORD(v59));
            float32x2_t v62 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v60), vmul_f32(v61, v61)), v61);
            a14 = vmulq_n_f32(v57, vmul_f32(v62, vrsqrts_f32((float32x2_t)LODWORD(v60), vmul_f32(v62, v62))).f32[0]);
          }
          int32x4_t v63 = (int32x4_t)vmulq_f32(v56, v56);
          a12 = vaddq_f32(vaddq_f32((float32x4_t)v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.i8, 1)), (float32x4_t)vdupq_laneq_s32(v63, 2));
          float32x4_t v64 = (float32x4_t)v37;
          a13 = (float32x4_t)v36;
          if (a12.f32[0] > COERCE_FLOAT(512))
          {
            unsigned __int32 v65 = a12.i32[0];
            float32x2_t v66 = vrsqrte_f32((float32x2_t)a12.u32[0]);
            float32x2_t v67 = vmul_f32(vrsqrts_f32((float32x2_t)v65, vmul_f32(v66, v66)), v66);
            float32x4_t v64 = vmulq_n_f32(v56, vmul_f32(v67, vrsqrts_f32((float32x2_t)v65, vmul_f32(v67, v67))).f32[0]);
            a13 = v64;
          }
          float32x4_t v68 = a14;
          v68.i32[3] = v57.i32[3];
          if (a21)
          {
            if (v38 * result + 12 <= a23)
            {
              uint64_t v69 = v39 * result;
              if (v39 * result + 12 <= a23)
              {
                uint64_t v70 = v40 * result;
                if (v40 * result + 12 <= a23)
                {
                  uint64_t v71 = a21 + v38 * result;
                  *(void *)uint64_t v71 = v64.i64[0];
                  *(_DWORD *)(v71 + 8) = v64.i32[2];
                  *(void *)(a21 + v69) = v64.i64[0];
                  *(_DWORD *)(a21 + v69 + 8) = v64.i32[2];
                  *(void *)(a21 + v70) = a13.i64[0];
                  *(_DWORD *)(a21 + v70 + 8) = a13.i32[2];
                  float32x4_t v72 = v68;
                  float32x4_t v73 = v68;
                  goto LABEL_48;
                }
              }
            }
          }
          else
          {
            if (!a6)
            {
              float32x4_t v115 = v68;
              long long v117 = v37;
              long long v119 = v36;
              uint64_t v121 = a19;
              unint64_t v123 = a20;
              uint64_t v125 = result;
              unint64_t v127 = a23;
              uint64_t v129 = a24;
              uint64_t v131 = a3;
              uint64_t v134 = a7;
              unint64_t v136 = a8;
              unint64_t v112 = (void *)MEMORY[0x263EFF940];
              uint64_t v140 = a25;
              int8x16_t v97 = (objc_class *)objc_opt_class();
              v138 = NSStringFromClass(v97);
              unint64_t v110 = NSStringFromSelector(v140);
              objc_msgSend_raise_format_(v112, v98, @"ModelIOException", @"[%@ %@]: Must provide either a valid normal pointer or bitangent pointer.", v138, v110);

              float32x4_t v68 = v115;
              long long v37 = v117;
              float32x4_t v72 = v115;
              float32x4_t v73 = v115;
              a7 = v134;
              a8 = v136;
              a3 = v131;
              a6 = 0;
              a25 = v140;
              a23 = v127;
              a24 = v129;
              a21 = 0;
              __n128 result = v125;
              a19 = v121;
              a20 = v123;
              long long v36 = v119;
              goto LABEL_48;
            }
            if (v38 * a7 + 12 <= a8 && v39 * a7 + 12 <= a8 && v40 * a7 + 12 <= a8)
            {
              uint64_t v74 = a6 + v38 * a7;
              v57.i64[0] = *(void *)v74;
              float32x4_t v75 = v57;
              v75.i32[2] = *(_DWORD *)(v74 + 8);
              float32x4_t v76 = v75;
              int32x4_t v113 = (int32x4_t)v75;
              v57.i32[2] = v75.i32[2];
              uint64_t v77 = a6 + v39 * a7;
              a12.i64[0] = *(void *)v77;
              float32x4_t v78 = a12;
              v78.i32[2] = *(_DWORD *)(v77 + 8);
              int32x4_t v108 = (int32x4_t)v78;
              a12.i32[2] = v78.i32[2];
              float32x4_t v105 = a12;
              uint64_t v79 = a6 + v40 * a7;
              a12.i64[0] = *(void *)v79;
              float32x4_t v80 = a12;
              v80.i32[2] = *(_DWORD *)(v79 + 8);
              int32x4_t v111 = (int32x4_t)v80;
              a12.i32[2] = v80.i32[2];
              float32x4_t v106 = a12;
              int32x4_t v81 = (int32x4_t)vmulq_f32(v57, a14);
              float32x4_t v142 = vmlsq_lane_f32(a14, v76, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.i8, 1)), (float32x4_t)vdupq_laneq_s32(v81, 2)), 0);
              long long v139 = a25;
              uint64_t v124 = result;
              uint64_t v133 = a7;
              unint64_t v135 = a8;
              uint64_t v130 = a3;
              uint64_t v132 = a6;
              unint64_t v126 = a23;
              uint64_t v128 = a24;
              uint64_t v120 = a19;
              unint64_t v122 = a20;
              long long v116 = v37;
              long long v118 = v36;
              float32x4_t v137 = a13;
              float32x4_t v107 = a14;
              float32x4_t v82 = sub_20B1831F0(&v142, (uint64_t)v143);
              int32x4_t v83 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL), (float32x4_t)v113)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v113, v113), (int8x16_t)v113, 0xCuLL), v82);
              float32x4_t v84 = v82;
              int32x4_t v85 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v83, v83), (int8x16_t)v83, 0xCuLL), v137);
              if (vaddq_f32(vaddq_f32((float32x4_t)v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.i8, 1)), (float32x4_t)vdupq_laneq_s32(v85, 2)).f32[0] >= 0.0)float v86 = 1.0; {
              else
              }
                float v86 = -1.0;
              v84.f32[3] = v86;
              float32x4_t v114 = v84;
              int32x4_t v87 = (int32x4_t)vmulq_f32(v105, v107);
              float32x4_t v142 = vmlsq_lane_f32(v107, (float32x4_t)v108, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.i8, 1)), (float32x4_t)vdupq_laneq_s32(v87, 2)), 0);
              float32x4_t v88 = sub_20B1831F0(&v142, (uint64_t)v143);
              int32x4_t v89 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL), (float32x4_t)v108)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL), v88);
              float32x4_t v90 = v88;
              int32x4_t v91 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v89, v89), (int8x16_t)v89, 0xCuLL), v137);
              if (vaddq_f32(vaddq_f32((float32x4_t)v91, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.i8, 1)), (float32x4_t)vdupq_laneq_s32(v91, 2)).f32[0] >= 0.0)float v92 = 1.0; {
              else
              }
                float v92 = -1.0;
              v90.f32[3] = v92;
              float32x4_t v109 = v90;
              int32x4_t v93 = (int32x4_t)vmulq_f32(v106, v107);
              float32x4_t v142 = vmlsq_lane_f32(v107, (float32x4_t)v111, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.i8, 1)), (float32x4_t)vdupq_laneq_s32(v93, 2)), 0);
              float32x4_t v73 = sub_20B1831F0(&v142, (uint64_t)v143);
              long long v37 = v116;
              long long v36 = v118;
              a19 = v120;
              a20 = v122;
              a21 = 0;
              __n128 result = v124;
              a23 = v126;
              a24 = v128;
              a25 = v139;
              a3 = v130;
              a6 = v132;
              a7 = v133;
              a8 = v135;
              int32x4_t v94 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL), (float32x4_t)v111)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v111, v111), (int8x16_t)v111, 0xCuLL), v73);
              int32x4_t v95 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v94, v94), (int8x16_t)v94, 0xCuLL), v137);
              a12 = (float32x4_t)vdupq_laneq_s32(v95, 2);
              float32x4_t v72 = v109;
              if (vaddq_f32(vaddq_f32((float32x4_t)v95, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.i8, 1)), a12).f32[0] >= 0.0) {
                float v96 = 1.0;
              }
              else {
                float v96 = -1.0;
              }
              v73.f32[3] = v96;
              float32x4_t v68 = v114;
LABEL_48:
              if (v38 * a19 + 12 <= a20)
              {
                uint64_t v99 = v39 * a19;
                if (v39 * a19 + 12 <= a20)
                {
                  uint64_t v100 = v40 * a19;
                  if (v40 * a19 + 12 <= a20)
                  {
                    uint64_t v101 = a18 + v38 * a19;
                    *(void *)uint64_t v101 = v68.i64[0];
                    *(_DWORD *)(v101 + 8) = v68.i32[2];
                    if (a24 == 786436)
                    {
                      *(_DWORD *)(v101 + 12) = v68.i32[3];
                      *(float32x4_t *)(a18 + v99) = v72;
                      *(void *)(a18 + v100) = v73.i64[0];
                      uint64_t v102 = (_DWORD *)(a18 + v100 + 12);
                      *(_DWORD *)(a18 + v100 + 8) = v73.i32[2];
                      uint64_t v103 = 3;
                    }
                    else
                    {
                      uint64_t v104 = a18 + v99;
                      *(void *)uint64_t v104 = v72.i64[0];
                      *(_DWORD *)(v104 + 8) = v72.i32[2];
                      *(void *)(a18 + v100) = v73.i64[0];
                      uint64_t v102 = (_DWORD *)(a18 + v100 + 8);
                      uint64_t v103 = 2;
                    }
                    float32x4_t v141 = v73;
                    *uint64_t v102 = *(_DWORD *)((unint64_t)&v141 | (4 * v103));
                  }
                }
              }
            }
          }
        }
      }
      v29 += 3;
    }
    while (v29 < a2);
  }
  return result;
}

void sub_20B17B814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  float v18 = *(void **)(v17 - 208);

  _Unwind_Resume(a1);
}

uint64_t sub_20B17B83C(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,const char *a25)
{
  v144[0] = xmmword_20B1E6130;
  if (a2)
  {
    uint64_t v28 = result;
    unint64_t v29 = 0;
    __n128 result = a22;
    long long v36 = xmmword_20B1E74C0;
    long long v37 = xmmword_20B1E74C0;
    do
    {
      uint64_t v38 = (unsigned __int16 *)(v28 + 2 * v29);
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      uint64_t v41 = v38[2];
      if (v39 * a4 + 12 <= a5 && v40 * a4 + 12 <= a5 && v41 * a4 + 12 <= a5)
      {
        BOOL v44 = v39 * a16 + 8 > a17 || v40 * a16 + 8 > a17;
        if (!v44 && v41 * a16 + 8 <= a17)
        {
          float32x2_t v46 = *(float32x2_t *)(a15 + v39 * a16);
          float32x2_t v47 = vsub_f32(*(float32x2_t *)(a15 + v40 * a16), v46);
          float32x2_t v48 = vsub_f32(*(float32x2_t *)(a15 + v41 * a16), v46);
          float32x2_t v49 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v48), v47);
          float v50 = vsub_f32(v49, (float32x2_t)vdup_lane_s32((int32x2_t)v49, 1)).f32[0];
          if (v50 == 0.0)
          {
            float32x4_t v57 = 0uLL;
            float32x4_t v58 = 0uLL;
          }
          else
          {
            uint64_t v51 = a3 + v39 * a4;
            a12.i64[0] = *(void *)v51;
            a12.i32[2] = *(_DWORD *)(v51 + 8);
            uint64_t v52 = a3 + v40 * a4;
            a13.i64[0] = *(void *)v52;
            a13.i32[2] = *(_DWORD *)(v52 + 8);
            uint64_t v53 = a3 + v41 * a4;
            a14.i64[0] = *(void *)v53;
            a14.i32[2] = *(_DWORD *)(v53 + 8);
            float32x4_t v54 = vsubq_f32(a14, a12);
            float32x4_t v55 = vsubq_f32(a13, a12);
            float v56 = 1.0 / v50;
            float32x4_t v58 = vmulq_n_f32(vmlaq_lane_f32(vnegq_f32(vmulq_lane_f32(v54, v47, 1)), v55, v48, 1), 1.0 / v50);
            float32x4_t v57 = vmulq_n_f32(vmlaq_n_f32(vnegq_f32(vmulq_n_f32(v55, v48.f32[0])), v54, v47.f32[0]), v56);
            v58.i32[3] = 0;
          }
          int32x4_t v59 = (int32x4_t)vmulq_f32(v58, v58);
          float v60 = vaddq_f32(vaddq_f32((float32x4_t)v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1)), (float32x4_t)vdupq_laneq_s32(v59, 2)).f32[0];
          if (v60 <= COERCE_FLOAT(512))
          {
            a14 = (float32x4_t)v144[0];
          }
          else
          {
            float v61 = v60;
            float32x2_t v62 = vrsqrte_f32((float32x2_t)LODWORD(v60));
            float32x2_t v63 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v62, v62)), v62);
            a14 = vmulq_n_f32(v58, vmul_f32(v63, vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v63, v63))).f32[0]);
          }
          int32x4_t v64 = (int32x4_t)vmulq_f32(v57, v57);
          a12 = vaddq_f32(vaddq_f32((float32x4_t)v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1)), (float32x4_t)vdupq_laneq_s32(v64, 2));
          float32x4_t v65 = (float32x4_t)v37;
          a13 = (float32x4_t)v36;
          if (a12.f32[0] > COERCE_FLOAT(512))
          {
            unsigned __int32 v66 = a12.i32[0];
            float32x2_t v67 = vrsqrte_f32((float32x2_t)a12.u32[0]);
            float32x2_t v68 = vmul_f32(vrsqrts_f32((float32x2_t)v66, vmul_f32(v67, v67)), v67);
            float32x4_t v65 = vmulq_n_f32(v57, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66, vmul_f32(v68, v68))).f32[0]);
            a13 = v65;
          }
          float32x4_t v69 = a14;
          v69.i32[3] = v58.i32[3];
          if (a21)
          {
            if (v39 * result + 12 <= a23)
            {
              uint64_t v70 = v40 * result;
              if (v40 * result + 12 <= a23)
              {
                uint64_t v71 = v41 * result;
                if (v41 * result + 12 <= a23)
                {
                  uint64_t v72 = a21 + v39 * result;
                  *(void *)uint64_t v72 = v65.i64[0];
                  *(_DWORD *)(v72 + 8) = v65.i32[2];
                  *(void *)(a21 + v70) = v65.i64[0];
                  *(_DWORD *)(a21 + v70 + 8) = v65.i32[2];
                  *(void *)(a21 + v71) = a13.i64[0];
                  *(_DWORD *)(a21 + v71 + 8) = a13.i32[2];
                  float32x4_t v73 = v69;
                  float32x4_t v74 = v69;
                  goto LABEL_48;
                }
              }
            }
          }
          else
          {
            if (!a6)
            {
              float32x4_t v116 = v69;
              long long v118 = v37;
              long long v120 = v36;
              uint64_t v122 = a19;
              unint64_t v124 = a20;
              uint64_t v126 = result;
              unint64_t v128 = a23;
              uint64_t v130 = a24;
              uint64_t v132 = a3;
              uint64_t v135 = a7;
              unint64_t v137 = a8;
              int32x4_t v113 = (void *)MEMORY[0x263EFF940];
              float32x4_t v141 = a25;
              long long v98 = (objc_class *)objc_opt_class();
              long long v139 = NSStringFromClass(v98);
              int32x4_t v111 = NSStringFromSelector(v141);
              objc_msgSend_raise_format_(v113, v99, @"ModelIOException", @"[%@ %@]: Must provide either a valid normal pointer or bitangent pointer.", v139, v111);

              float32x4_t v69 = v116;
              long long v37 = v118;
              float32x4_t v73 = v116;
              float32x4_t v74 = v116;
              a7 = v135;
              a8 = v137;
              a3 = v132;
              a6 = 0;
              a25 = v141;
              a23 = v128;
              a24 = v130;
              a21 = 0;
              __n128 result = v126;
              a19 = v122;
              a20 = v124;
              long long v36 = v120;
              goto LABEL_48;
            }
            if (v39 * a7 + 12 <= a8 && v40 * a7 + 12 <= a8 && v41 * a7 + 12 <= a8)
            {
              uint64_t v75 = a6 + v39 * a7;
              v58.i64[0] = *(void *)v75;
              float32x4_t v76 = v58;
              v76.i32[2] = *(_DWORD *)(v75 + 8);
              float32x4_t v77 = v76;
              int32x4_t v114 = (int32x4_t)v76;
              v58.i32[2] = v76.i32[2];
              uint64_t v78 = a6 + v40 * a7;
              a12.i64[0] = *(void *)v78;
              float32x4_t v79 = a12;
              v79.i32[2] = *(_DWORD *)(v78 + 8);
              int32x4_t v109 = (int32x4_t)v79;
              a12.i32[2] = v79.i32[2];
              float32x4_t v106 = a12;
              uint64_t v80 = a6 + v41 * a7;
              a12.i64[0] = *(void *)v80;
              float32x4_t v81 = a12;
              v81.i32[2] = *(_DWORD *)(v80 + 8);
              int32x4_t v112 = (int32x4_t)v81;
              a12.i32[2] = v81.i32[2];
              float32x4_t v107 = a12;
              int32x4_t v82 = (int32x4_t)vmulq_f32(v58, a14);
              float32x4_t v143 = vmlsq_lane_f32(a14, v77, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.i8, 1)), (float32x4_t)vdupq_laneq_s32(v82, 2)), 0);
              uint64_t v140 = a25;
              uint64_t v125 = result;
              uint64_t v134 = a7;
              unint64_t v136 = a8;
              uint64_t v131 = a3;
              uint64_t v133 = a6;
              unint64_t v127 = a23;
              uint64_t v129 = a24;
              uint64_t v121 = a19;
              unint64_t v123 = a20;
              long long v117 = v37;
              long long v119 = v36;
              float32x4_t v138 = a13;
              float32x4_t v108 = a14;
              float32x4_t v83 = sub_20B1831F0(&v143, (uint64_t)v144);
              int32x4_t v84 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), (float32x4_t)v114)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v114, v114), (int8x16_t)v114, 0xCuLL), v83);
              float32x4_t v85 = v83;
              int32x4_t v86 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v84, v84), (int8x16_t)v84, 0xCuLL), v138);
              if (vaddq_f32(vaddq_f32((float32x4_t)v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 1)), (float32x4_t)vdupq_laneq_s32(v86, 2)).f32[0] >= 0.0)float v87 = 1.0; {
              else
              }
                float v87 = -1.0;
              v85.f32[3] = v87;
              float32x4_t v115 = v85;
              int32x4_t v88 = (int32x4_t)vmulq_f32(v106, v108);
              float32x4_t v143 = vmlsq_lane_f32(v108, (float32x4_t)v109, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.i8, 1)), (float32x4_t)vdupq_laneq_s32(v88, 2)), 0);
              float32x4_t v89 = sub_20B1831F0(&v143, (uint64_t)v144);
              int32x4_t v90 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), (float32x4_t)v109)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v109, v109), (int8x16_t)v109, 0xCuLL), v89);
              float32x4_t v91 = v89;
              int32x4_t v92 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL), v138);
              if (vaddq_f32(vaddq_f32((float32x4_t)v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.i8, 1)), (float32x4_t)vdupq_laneq_s32(v92, 2)).f32[0] >= 0.0)float v93 = 1.0; {
              else
              }
                float v93 = -1.0;
              v91.f32[3] = v93;
              float32x4_t v110 = v91;
              int32x4_t v94 = (int32x4_t)vmulq_f32(v107, v108);
              float32x4_t v143 = vmlsq_lane_f32(v108, (float32x4_t)v112, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.i8, 1)), (float32x4_t)vdupq_laneq_s32(v94, 2)), 0);
              float32x4_t v74 = sub_20B1831F0(&v143, (uint64_t)v144);
              long long v37 = v117;
              long long v36 = v119;
              a19 = v121;
              a20 = v123;
              a21 = 0;
              __n128 result = v125;
              a23 = v127;
              a24 = v129;
              a25 = v140;
              a3 = v131;
              a6 = v133;
              a7 = v134;
              a8 = v136;
              int32x4_t v95 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL), (float32x4_t)v112)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), (int8x16_t)v112, 0xCuLL), v74);
              int32x4_t v96 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v95, v95), (int8x16_t)v95, 0xCuLL), v138);
              a12 = (float32x4_t)vdupq_laneq_s32(v96, 2);
              float32x4_t v73 = v110;
              if (vaddq_f32(vaddq_f32((float32x4_t)v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.i8, 1)), a12).f32[0] >= 0.0) {
                float v97 = 1.0;
              }
              else {
                float v97 = -1.0;
              }
              v74.f32[3] = v97;
              float32x4_t v69 = v115;
LABEL_48:
              if (v39 * a19 + 12 <= a20)
              {
                uint64_t v100 = v40 * a19;
                if (v40 * a19 + 12 <= a20)
                {
                  uint64_t v101 = v41 * a19;
                  if (v41 * a19 + 12 <= a20)
                  {
                    uint64_t v102 = a18 + v39 * a19;
                    *(void *)uint64_t v102 = v69.i64[0];
                    *(_DWORD *)(v102 + 8) = v69.i32[2];
                    if (a24 == 786436)
                    {
                      *(_DWORD *)(v102 + 12) = v69.i32[3];
                      *(float32x4_t *)(a18 + v100) = v73;
                      *(void *)(a18 + v101) = v74.i64[0];
                      uint64_t v103 = (_DWORD *)(a18 + v101 + 12);
                      *(_DWORD *)(a18 + v101 + 8) = v74.i32[2];
                      uint64_t v104 = 3;
                    }
                    else
                    {
                      uint64_t v105 = a18 + v100;
                      *(void *)uint64_t v105 = v73.i64[0];
                      *(_DWORD *)(v105 + 8) = v73.i32[2];
                      *(void *)(a18 + v101) = v74.i64[0];
                      uint64_t v103 = (_DWORD *)(a18 + v101 + 8);
                      uint64_t v104 = 2;
                    }
                    float32x4_t v142 = v74;
                    _DWORD *v103 = *(_DWORD *)((unint64_t)&v142 | (4 * v104));
                  }
                }
              }
            }
          }
        }
      }
      v29 += 3;
    }
    while (v29 < a2);
  }
  return result;
}

void sub_20B17BEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  float v18 = *(void **)(v17 - 208);

  _Unwind_Resume(a1);
}

uint64_t sub_20B17BF08(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, double a9, double a10, double a11, float32x4_t a12, float32x4_t a13, float32x4_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,const char *a25)
{
  v144[0] = xmmword_20B1E6130;
  if (a2)
  {
    uint64_t v28 = result;
    unint64_t v29 = 0;
    __n128 result = a22;
    long long v36 = xmmword_20B1E74C0;
    long long v37 = xmmword_20B1E74C0;
    do
    {
      uint64_t v38 = (unsigned int *)(v28 + 4 * v29);
      uint64_t v39 = *v38;
      uint64_t v40 = v38[1];
      uint64_t v41 = v38[2];
      if (v39 * a4 + 12 <= a5 && v40 * a4 + 12 <= a5 && v41 * a4 + 12 <= a5)
      {
        BOOL v44 = v39 * a16 + 8 > a17 || v40 * a16 + 8 > a17;
        if (!v44 && v41 * a16 + 8 <= a17)
        {
          float32x2_t v46 = *(float32x2_t *)(a15 + v39 * a16);
          float32x2_t v47 = vsub_f32(*(float32x2_t *)(a15 + v40 * a16), v46);
          float32x2_t v48 = vsub_f32(*(float32x2_t *)(a15 + v41 * a16), v46);
          float32x2_t v49 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v48), v47);
          float v50 = vsub_f32(v49, (float32x2_t)vdup_lane_s32((int32x2_t)v49, 1)).f32[0];
          if (v50 == 0.0)
          {
            float32x4_t v57 = 0uLL;
            float32x4_t v58 = 0uLL;
          }
          else
          {
            uint64_t v51 = a3 + v39 * a4;
            a12.i64[0] = *(void *)v51;
            a12.i32[2] = *(_DWORD *)(v51 + 8);
            uint64_t v52 = a3 + v40 * a4;
            a13.i64[0] = *(void *)v52;
            a13.i32[2] = *(_DWORD *)(v52 + 8);
            uint64_t v53 = a3 + v41 * a4;
            a14.i64[0] = *(void *)v53;
            a14.i32[2] = *(_DWORD *)(v53 + 8);
            float32x4_t v54 = vsubq_f32(a14, a12);
            float32x4_t v55 = vsubq_f32(a13, a12);
            float v56 = 1.0 / v50;
            float32x4_t v58 = vmulq_n_f32(vmlaq_lane_f32(vnegq_f32(vmulq_lane_f32(v54, v47, 1)), v55, v48, 1), 1.0 / v50);
            float32x4_t v57 = vmulq_n_f32(vmlaq_n_f32(vnegq_f32(vmulq_n_f32(v55, v48.f32[0])), v54, v47.f32[0]), v56);
            v58.i32[3] = 0;
          }
          int32x4_t v59 = (int32x4_t)vmulq_f32(v58, v58);
          float v60 = vaddq_f32(vaddq_f32((float32x4_t)v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.i8, 1)), (float32x4_t)vdupq_laneq_s32(v59, 2)).f32[0];
          if (v60 <= COERCE_FLOAT(512))
          {
            a14 = (float32x4_t)v144[0];
          }
          else
          {
            float v61 = v60;
            float32x2_t v62 = vrsqrte_f32((float32x2_t)LODWORD(v60));
            float32x2_t v63 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v62, v62)), v62);
            a14 = vmulq_n_f32(v58, vmul_f32(v63, vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v63, v63))).f32[0]);
          }
          int32x4_t v64 = (int32x4_t)vmulq_f32(v57, v57);
          a12 = vaddq_f32(vaddq_f32((float32x4_t)v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.i8, 1)), (float32x4_t)vdupq_laneq_s32(v64, 2));
          float32x4_t v65 = (float32x4_t)v37;
          a13 = (float32x4_t)v36;
          if (a12.f32[0] > COERCE_FLOAT(512))
          {
            unsigned __int32 v66 = a12.i32[0];
            float32x2_t v67 = vrsqrte_f32((float32x2_t)a12.u32[0]);
            float32x2_t v68 = vmul_f32(vrsqrts_f32((float32x2_t)v66, vmul_f32(v67, v67)), v67);
            float32x4_t v65 = vmulq_n_f32(v57, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66, vmul_f32(v68, v68))).f32[0]);
            a13 = v65;
          }
          float32x4_t v69 = a14;
          v69.i32[3] = v58.i32[3];
          if (a21)
          {
            if (v39 * result + 12 <= a23)
            {
              uint64_t v70 = v40 * result;
              if (v40 * result + 12 <= a23)
              {
                uint64_t v71 = v41 * result;
                if (v41 * result + 12 <= a23)
                {
                  uint64_t v72 = a21 + v39 * result;
                  *(void *)uint64_t v72 = v65.i64[0];
                  *(_DWORD *)(v72 + 8) = v65.i32[2];
                  *(void *)(a21 + v70) = v65.i64[0];
                  *(_DWORD *)(a21 + v70 + 8) = v65.i32[2];
                  *(void *)(a21 + v71) = a13.i64[0];
                  *(_DWORD *)(a21 + v71 + 8) = a13.i32[2];
                  float32x4_t v73 = v69;
                  float32x4_t v74 = v69;
                  goto LABEL_48;
                }
              }
            }
          }
          else
          {
            if (!a6)
            {
              float32x4_t v116 = v69;
              long long v118 = v37;
              long long v120 = v36;
              uint64_t v122 = a19;
              unint64_t v124 = a20;
              uint64_t v126 = result;
              unint64_t v128 = a23;
              uint64_t v130 = a24;
              uint64_t v132 = a3;
              uint64_t v135 = a7;
              unint64_t v137 = a8;
              int32x4_t v113 = (void *)MEMORY[0x263EFF940];
              float32x4_t v141 = a25;
              long long v98 = (objc_class *)objc_opt_class();
              long long v139 = NSStringFromClass(v98);
              int32x4_t v111 = NSStringFromSelector(v141);
              objc_msgSend_raise_format_(v113, v99, @"ModelIOException", @"[%@ %@]: Must provide either a valid normal pointer or bitangent pointer.", v139, v111);

              float32x4_t v69 = v116;
              long long v37 = v118;
              float32x4_t v73 = v116;
              float32x4_t v74 = v116;
              a7 = v135;
              a8 = v137;
              a3 = v132;
              a6 = 0;
              a25 = v141;
              a23 = v128;
              a24 = v130;
              a21 = 0;
              __n128 result = v126;
              a19 = v122;
              a20 = v124;
              long long v36 = v120;
              goto LABEL_48;
            }
            if (v39 * a7 + 12 <= a8 && v40 * a7 + 12 <= a8 && v41 * a7 + 12 <= a8)
            {
              uint64_t v75 = a6 + v39 * a7;
              v58.i64[0] = *(void *)v75;
              float32x4_t v76 = v58;
              v76.i32[2] = *(_DWORD *)(v75 + 8);
              float32x4_t v77 = v76;
              int32x4_t v114 = (int32x4_t)v76;
              v58.i32[2] = v76.i32[2];
              uint64_t v78 = a6 + v40 * a7;
              a12.i64[0] = *(void *)v78;
              float32x4_t v79 = a12;
              v79.i32[2] = *(_DWORD *)(v78 + 8);
              int32x4_t v109 = (int32x4_t)v79;
              a12.i32[2] = v79.i32[2];
              float32x4_t v106 = a12;
              uint64_t v80 = a6 + v41 * a7;
              a12.i64[0] = *(void *)v80;
              float32x4_t v81 = a12;
              v81.i32[2] = *(_DWORD *)(v80 + 8);
              int32x4_t v112 = (int32x4_t)v81;
              a12.i32[2] = v81.i32[2];
              float32x4_t v107 = a12;
              int32x4_t v82 = (int32x4_t)vmulq_f32(v58, a14);
              float32x4_t v143 = vmlsq_lane_f32(a14, v77, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v82, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.i8, 1)), (float32x4_t)vdupq_laneq_s32(v82, 2)), 0);
              uint64_t v140 = a25;
              uint64_t v125 = result;
              uint64_t v134 = a7;
              unint64_t v136 = a8;
              uint64_t v131 = a3;
              uint64_t v133 = a6;
              unint64_t v127 = a23;
              uint64_t v129 = a24;
              uint64_t v121 = a19;
              unint64_t v123 = a20;
              long long v117 = v37;
              long long v119 = v36;
              float32x4_t v138 = a13;
              float32x4_t v108 = a14;
              float32x4_t v83 = sub_20B1831F0(&v143, (uint64_t)v144);
              int32x4_t v84 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), (float32x4_t)v114)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v114, v114), (int8x16_t)v114, 0xCuLL), v83);
              float32x4_t v85 = v83;
              int32x4_t v86 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v84, v84), (int8x16_t)v84, 0xCuLL), v138);
              if (vaddq_f32(vaddq_f32((float32x4_t)v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 1)), (float32x4_t)vdupq_laneq_s32(v86, 2)).f32[0] >= 0.0)float v87 = 1.0; {
              else
              }
                float v87 = -1.0;
              v85.f32[3] = v87;
              float32x4_t v115 = v85;
              int32x4_t v88 = (int32x4_t)vmulq_f32(v106, v108);
              float32x4_t v143 = vmlsq_lane_f32(v108, (float32x4_t)v109, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.i8, 1)), (float32x4_t)vdupq_laneq_s32(v88, 2)), 0);
              float32x4_t v89 = sub_20B1831F0(&v143, (uint64_t)v144);
              int32x4_t v90 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), (float32x4_t)v109)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v109, v109), (int8x16_t)v109, 0xCuLL), v89);
              float32x4_t v91 = v89;
              int32x4_t v92 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL), v138);
              if (vaddq_f32(vaddq_f32((float32x4_t)v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.i8, 1)), (float32x4_t)vdupq_laneq_s32(v92, 2)).f32[0] >= 0.0)float v93 = 1.0; {
              else
              }
                float v93 = -1.0;
              v91.f32[3] = v93;
              float32x4_t v110 = v91;
              int32x4_t v94 = (int32x4_t)vmulq_f32(v107, v108);
              float32x4_t v143 = vmlsq_lane_f32(v108, (float32x4_t)v112, (float32x2_t)*(_OWORD *)&vaddq_f32(vaddq_f32((float32x4_t)v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.i8, 1)), (float32x4_t)vdupq_laneq_s32(v94, 2)), 0);
              float32x4_t v74 = sub_20B1831F0(&v143, (uint64_t)v144);
              long long v37 = v117;
              long long v36 = v119;
              a19 = v121;
              a20 = v123;
              a21 = 0;
              __n128 result = v125;
              a23 = v127;
              a24 = v129;
              a25 = v140;
              a3 = v131;
              a6 = v133;
              a7 = v134;
              a8 = v136;
              int32x4_t v95 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL), (float32x4_t)v112)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), (int8x16_t)v112, 0xCuLL), v74);
              int32x4_t v96 = (int32x4_t)vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v95, v95), (int8x16_t)v95, 0xCuLL), v138);
              a12 = (float32x4_t)vdupq_laneq_s32(v96, 2);
              float32x4_t v73 = v110;
              if (vaddq_f32(vaddq_f32((float32x4_t)v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.i8, 1)), a12).f32[0] >= 0.0) {
                float v97 = 1.0;
              }
              else {
                float v97 = -1.0;
              }
              v74.f32[3] = v97;
              float32x4_t v69 = v115;
LABEL_48:
              if (v39 * a19 + 12 <= a20)
              {
                uint64_t v100 = v40 * a19;
                if (v40 * a19 + 12 <= a20)
                {
                  uint64_t v101 = v41 * a19;
                  if (v41 * a19 + 12 <= a20)
                  {
                    uint64_t v102 = a18 + v39 * a19;
                    *(void *)uint64_t v102 = v69.i64[0];
                    *(_DWORD *)(v102 + 8) = v69.i32[2];
                    if (a24 == 786436)
                    {
                      *(_DWORD *)(v102 + 12) = v69.i32[3];
                      *(float32x4_t *)(a18 + v100) = v73;
                      *(void *)(a18 + v101) = v74.i64[0];
                      uint64_t v103 = (_DWORD *)(a18 + v101 + 12);
                      *(_DWORD *)(a18 + v101 + 8) = v74.i32[2];
                      uint64_t v104 = 3;
                    }
                    else
                    {
                      uint64_t v105 = a18 + v100;
                      *(void *)uint64_t v105 = v73.i64[0];
                      *(_DWORD *)(v105 + 8) = v73.i32[2];
                      *(void *)(a18 + v101) = v74.i64[0];
                      uint64_t v103 = (_DWORD *)(a18 + v101 + 8);
                      uint64_t v104 = 2;
                    }
                    float32x4_t v142 = v74;
                    _DWORD *v103 = *(_DWORD *)((unint64_t)&v142 | (4 * v104));
                  }
                }
              }
            }
          }
        }
      }
      v29 += 3;
    }
    while (v29 < a2);
  }
  return result;
}

void sub_20B17C5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  float v18 = *(void **)(v17 - 208);

  _Unwind_Resume(a1);
}

void sub_20B17CA24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B17CF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

void sub_20B17D41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B17D4FC(float32x4_t ***a1, float a2)
{
  uint64_t v181 = 1065353216;
  long long v179 = 0u;
  long long v180 = 0u;
  uint64_t v3 = *a1;
  int v4 = a1[1];
  if (*a1 == v4) {
    return sub_20B084B68((uint64_t)&v179);
  }
  do
  {
    float v5 = *v3;
    *(void *)&long long v167 = *v3 + 4;
    float v6 = sub_20B084BF0((uint64_t)&v179, (float32x4_t *)v167, (uint64_t)&unk_20B1E7420, (float32x4_t **)&v167);
    float v7 = (float32x4_t **)v6[2].i64[1];
    unint64_t v8 = v6[3].u64[0];
    if ((unint64_t)v7 >= v8)
    {
      uint64_t v10 = v6[2].i64[0];
      uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        goto LABEL_199;
      }
      uint64_t v12 = v8 - v10;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        double v15 = (char *)sub_20B0602EC((uint64_t)&v6[3], v14);
      }
      else {
        double v15 = 0;
      }
      double v16 = (float32x4_t **)&v15[8 * v11];
      *double v16 = v5;
      BOOL v9 = v16 + 1;
      float v18 = (char *)v6[2].i64[0];
      uint64_t v17 = (char *)v6[2].i64[1];
      if (v17 != v18)
      {
        do
        {
          float v19 = (float32x4_t *)*((void *)v17 - 1);
          v17 -= 8;
          *--double v16 = v19;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)v6[2].i64[0];
      }
      v6[2].i64[0] = (uint64_t)v16;
      v6[2].i64[1] = (uint64_t)v9;
      v6[3].i64[0] = (uint64_t)&v15[8 * v14];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *float v7 = v5;
      BOOL v9 = v7 + 1;
    }
    v6[2].i64[1] = (uint64_t)v9;
    *(void *)&long long v167 = v5 + 5;
    float v20 = sub_20B084BF0((uint64_t)&v179, v5 + 5, (uint64_t)&unk_20B1E7420, (float32x4_t **)&v167);
    float v21 = (float32x4_t **)v20[2].i64[1];
    unint64_t v22 = v20[3].u64[0];
    if ((unint64_t)v21 >= v22)
    {
      uint64_t v24 = v20[2].i64[0];
      uint64_t v25 = ((uint64_t)v21 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61) {
        goto LABEL_199;
      }
      uint64_t v26 = v22 - v24;
      uint64_t v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1)) {
        uint64_t v27 = v25 + 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      if (v28) {
        unint64_t v29 = (char *)sub_20B0602EC((uint64_t)&v20[3], v28);
      }
      else {
        unint64_t v29 = 0;
      }
      float v30 = (float32x4_t **)&v29[8 * v25];
      void *v30 = v5;
      float v23 = v30 + 1;
      float v32 = (char *)v20[2].i64[0];
      float v31 = (char *)v20[2].i64[1];
      if (v31 != v32)
      {
        do
        {
          float v33 = (float32x4_t *)*((void *)v31 - 1);
          v31 -= 8;
          *--float v30 = v33;
        }
        while (v31 != v32);
        float v31 = (char *)v20[2].i64[0];
      }
      v20[2].i64[0] = (uint64_t)v30;
      v20[2].i64[1] = (uint64_t)v23;
      v20[3].i64[0] = (uint64_t)&v29[8 * v28];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *float v21 = v5;
      float v23 = v21 + 1;
    }
    v20[2].i64[1] = (uint64_t)v23;
    *(void *)&long long v167 = v5 + 6;
    unsigned __int8 v34 = sub_20B084BF0((uint64_t)&v179, v5 + 6, (uint64_t)&unk_20B1E7420, (float32x4_t **)&v167);
    float v35 = (float32x4_t **)v34[2].i64[1];
    unint64_t v36 = v34[3].u64[0];
    if ((unint64_t)v35 >= v36)
    {
      uint64_t v38 = v34[2].i64[0];
      uint64_t v39 = ((uint64_t)v35 - v38) >> 3;
      if ((unint64_t)(v39 + 1) >> 61) {
LABEL_199:
      }
        sub_20B05D0BC();
      uint64_t v40 = v36 - v38;
      uint64_t v41 = v40 >> 2;
      if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
        uint64_t v41 = v39 + 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42) {
        BOOL v43 = (char *)sub_20B0602EC((uint64_t)&v34[3], v42);
      }
      else {
        BOOL v43 = 0;
      }
      BOOL v44 = (float32x4_t **)&v43[8 * v39];
      *BOOL v44 = v5;
      long long v37 = v44 + 1;
      float32x2_t v46 = (char *)v34[2].i64[0];
      float32x2_t v45 = (char *)v34[2].i64[1];
      if (v45 != v46)
      {
        do
        {
          float32x2_t v47 = (float32x4_t *)*((void *)v45 - 1);
          v45 -= 8;
          *--BOOL v44 = v47;
        }
        while (v45 != v46);
        float32x2_t v45 = (char *)v34[2].i64[0];
      }
      v34[2].i64[0] = (uint64_t)v44;
      v34[2].i64[1] = (uint64_t)v37;
      v34[3].i64[0] = (uint64_t)&v43[8 * v42];
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      char *v35 = v5;
      long long v37 = v35 + 1;
    }
    v34[2].i64[1] = (uint64_t)v37;
    ++v3;
  }
  while (v3 != v4);
  float32x2_t v48 = (float32x4_t *)v180;
  if (!(void)v180) {
    return sub_20B084B68((uint64_t)&v179);
  }
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v157 = _Q0;
  do
  {
    float32x4_t v159 = v48[1];
    uint64_t v54 = v48[2].i64[0];
    if ((unint64_t)((v48[2].i64[1] - v54) >> 3) >= 0x40) {
      uint64_t v55 = 64;
    }
    else {
      uint64_t v55 = (v48[2].i64[1] - v54) >> 3;
    }
    int v176 = 0;
    v177 = 0;
    v178 = 0;
    if (!v55)
    {
      unint64_t v173 = &v173;
      v174 = &v173;
      uint64_t v175 = 0;
      uint64_t v170 = 0;
      uint64_t v171 = 0;
      uint64_t v172 = 0;
LABEL_189:
      v177 = v176;
      goto LABEL_190;
    }
    for (uint64_t i = 0; i != v55; ++i)
    {
      __n128 v57 = sub_20B0C0304((__n128 *)*(void *)(v48[2].i64[0] + 8 * i));
      int32x4_t v58 = (int32x4_t)vmulq_f32((float32x4_t)v57, (float32x4_t)v57);
      int32x4_t v59 = v177;
      if (vaddq_f32(vaddq_f32((float32x4_t)v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 1)), (float32x4_t)vdupq_laneq_s32(v58, 2)).f32[0] >= 1.0e-12)
      {
        if (v177 < v178)
        {
          *(_DWORD *)v177 = 0;
          float v60 = v59 + 4;
          goto LABEL_63;
        }
        float32x2_t v62 = v176;
        uint64_t v68 = (v177 - v176) >> 2;
        unint64_t v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v70 = v178 - v176;
        if ((v178 - v176) >> 1 > v69) {
          unint64_t v69 = v70 >> 1;
        }
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v69;
        }
        if (v66)
        {
          float32x2_t v67 = (char *)sub_20B05D1AC((uint64_t)&v178, v66);
          float32x2_t v62 = v176;
          int32x4_t v59 = v177;
        }
        else
        {
          float32x2_t v67 = 0;
        }
        uint64_t v71 = &v67[4 * v68];
        *(_DWORD *)uint64_t v71 = 0;
        float v61 = v71 + 4;
        while (v59 != v62)
        {
          int v73 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v71 - 1) = v73;
          v71 -= 4;
        }
      }
      else
      {
        if (v177 < v178)
        {
          *(_DWORD *)v177 = -1;
          float v60 = v59 + 4;
LABEL_63:
          float v61 = v60;
          goto LABEL_90;
        }
        float32x2_t v62 = v176;
        uint64_t v63 = (v177 - v176) >> 2;
        unint64_t v64 = v63 + 1;
        if ((unint64_t)(v63 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v65 = v178 - v176;
        if ((v178 - v176) >> 1 > v64) {
          unint64_t v64 = v65 >> 1;
        }
        if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v66 = v64;
        }
        if (v66)
        {
          float32x2_t v67 = (char *)sub_20B05D1AC((uint64_t)&v178, v66);
          float32x2_t v62 = v176;
          int32x4_t v59 = v177;
        }
        else
        {
          float32x2_t v67 = 0;
        }
        uint64_t v71 = &v67[4 * v63];
        *(_DWORD *)uint64_t v71 = -1;
        float v61 = v71 + 4;
        while (v59 != v62)
        {
          int v72 = *((_DWORD *)v59 - 1);
          v59 -= 4;
          *((_DWORD *)v71 - 1) = v72;
          v71 -= 4;
        }
      }
      int v176 = v71;
      v177 = v61;
      v178 = &v67[4 * v66];
      if (v62) {
        operator delete(v62);
      }
LABEL_90:
      v177 = v61;
    }
    uint64_t v74 = 0;
    int v75 = 1;
    do
    {
      if (!*(_DWORD *)&v176[4 * v74])
      {
        *(void *)&long long v167 = &v167;
        *((void *)&v167 + 1) = &v167;
        *(void *)&long long v168 = 0;
        __n128 v158 = sub_20B0C0304((__n128 *)*(void *)(v48[2].i64[0] + 8 * v74));
        uint64_t v76 = v48[2].i64[0];
        float32x4_t v77 = operator new(0x18uLL);
        uint64_t v79 = 0;
        uint64_t v80 = *(void *)(v76 + 8 * v74);
        v77[1] = &v167;
        v77[2] = v80;
        uint64_t v81 = v167;
        *float32x4_t v77 = v167;
        *(void *)(v81 + 8) = v77;
        *(void *)&long long v167 = v77;
        *(void *)&long long v168 = v168 + 1;
        *(_DWORD *)&v176[4 * v74] = v75;
        do
        {
          if (!*(_DWORD *)&v176[4 * v79])
          {
            __n128 v160 = sub_20B0C0304((__n128 *)*(void *)(v48[2].i64[0] + 8 * v79));
            __n128 v78 = (__n128)vmulq_f32((float32x4_t)sub_20B0C0304((__n128 *)*(void *)(v48[2].i64[0] + 8 * v74)), (float32x4_t)v160);
            v78.n128_u64[0] = vaddq_f32(vaddq_f32((float32x4_t)v78, (float32x4_t)vdupq_lane_s32((int32x2_t)v78.n128_u64[0], 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2)).u64[0];
            if (v78.n128_f32[0] > a2)
            {
              uint64_t v82 = v48[2].i64[0];
              float32x4_t v83 = operator new(0x18uLL);
              uint64_t v84 = *(void *)(v82 + 8 * v79);
              v83[1] = &v167;
              v83[2] = v84;
              uint64_t v85 = v167;
              void *v83 = v167;
              *(void *)(v85 + 8) = v83;
              *(void *)&long long v167 = v83;
              *(void *)&long long v168 = v168 + 1;
              __n128 v78 = sub_20B0C0304((__n128 *)*(void *)(v48[2].i64[0] + 8 * v79));
              __n128 v158 = (__n128)vaddq_f32((float32x4_t)v78, (float32x4_t)v158);
              *(_DWORD *)&v176[4 * v79] = v75;
            }
          }
          ++v79;
        }
        while (v55 != v79);
        uint64_t v86 = *((void *)&v167 + 1);
        if (*((long long **)&v167 + 1) != &v167)
        {
          v78.n128_f32[0] = (float)(unint64_t)v168;
          float32x4_t v87 = vmulq_f32((float32x4_t)v158, vdivq_f32(v157, (float32x4_t)vdupq_lane_s32((int32x2_t)v78.n128_u64[0], 0)));
          do
          {
            int32x4_t v88 = *(float32x4_t **)(v86 + 16);
            float32x4_t v89 = vsubq_f32(v88[4], v159);
            int32x4_t v90 = (int32x4_t)vmulq_f32(v89, v89);
            if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v90, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.i8, 1)), (float32x4_t)vdupq_laneq_s32(v90, 2)).f32[0]) >= 0.000001)
            {
              float32x4_t v92 = vsubq_f32(v88[5], v159);
              int32x4_t v93 = (int32x4_t)vmulq_f32(v92, v92);
              if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.i8, 1)), (float32x4_t)vdupq_laneq_s32(v93, 2)).f32[0]) >= 0.000001)float32x4_t v91 = v88 + 9; {
              else
              }
                float32x4_t v91 = v88 + 8;
            }
            else
            {
              float32x4_t v91 = v88 + 7;
            }
            *float32x4_t v91 = v87;
            uint64_t v86 = *(void *)(v86 + 8);
          }
          while ((long long *)v86 != &v167);
        }
        ++v75;
        sub_20B07F6E8(&v167);
        sub_20B07F6E8(&v167);
      }
      ++v74;
    }
    while (v74 != v55);
    unint64_t v173 = &v173;
    v174 = &v173;
    uint64_t v175 = 0;
    uint64_t v170 = 0;
    uint64_t v171 = 0;
    uint64_t v172 = 0;
    for (uint64_t j = 0; j != v55; ++j)
    {
      if (*(_DWORD *)&v176[4 * j] == -1)
      {
        uint64_t v95 = v48[2].i64[0];
        int32x4_t v96 = operator new(0x18uLL);
        uint64_t v97 = *(void *)(v95 + 8 * j);
        v96[1] = &v173;
        v96[2] = v97;
        long long v98 = v173;
        void *v96 = v173;
        v98[1] = v96;
        unint64_t v173 = v96;
        ++v175;
      }
      LOBYTE(v167) = 0;
      sub_20B09572C((uint64_t)&v170, &v167);
    }
    if (v175 == v55) {
      goto LABEL_189;
    }
    long long v167 = 0u;
    long long v168 = 0u;
    uint64_t v169 = 1065353216;
    for (uint64_t k = 0; k != v55; ++k)
    {
      va_list __p = 0;
      unint64_t v165 = 0;
      v166 = 0;
      uint64_t v100 = *(void *)(v48[2].i64[0] + 8 * k);
      uint64_t v102 = (char *)sub_20B077E90((uint64_t)&v166, 1uLL);
      *(_OWORD *)uint64_t v102 = *(_OWORD *)(v100 + 64);
      uint64_t v103 = v102 + 16;
      uint64_t v105 = (char *)__p;
      uint64_t v104 = v165;
      float32x4_t v106 = v102;
      if (v165 != __p)
      {
        do
        {
          long long v107 = *((_OWORD *)v104 - 1);
          v104 -= 16;
          *((_OWORD *)v106 - 1) = v107;
          v106 -= 16;
        }
        while (v104 != v105);
        uint64_t v104 = (char *)__p;
      }
      float32x4_t v108 = &v102[16 * v101];
      va_list __p = v106;
      unint64_t v165 = v102 + 16;
      v166 = v108;
      if (v104)
      {
        operator delete(v104);
        float32x4_t v108 = v166;
      }
      unint64_t v165 = v102 + 16;
      uint64_t v109 = *(void *)(v48[2].i64[0] + 8 * k);
      if (v103 >= v108)
      {
        uint64_t v111 = (v103 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v111 + 1) >> 60) {
          goto LABEL_200;
        }
        uint64_t v112 = v108 - (unsigned char *)__p;
        uint64_t v113 = v112 >> 3;
        if (v112 >> 3 <= (unint64_t)(v111 + 1)) {
          uint64_t v113 = v111 + 1;
        }
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v114 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v114 = v113;
        }
        if (v114) {
          float32x4_t v115 = (char *)sub_20B077E90((uint64_t)&v166, v114);
        }
        else {
          float32x4_t v115 = 0;
        }
        float32x4_t v116 = &v115[16 * v111];
        *(_OWORD *)float32x4_t v116 = *(_OWORD *)(v109 + 80);
        float32x4_t v110 = v116 + 16;
        long long v118 = (char *)__p;
        long long v117 = v165;
        if (v165 != __p)
        {
          do
          {
            long long v119 = *((_OWORD *)v117 - 1);
            v117 -= 16;
            *((_OWORD *)v116 - 1) = v119;
            v116 -= 16;
          }
          while (v117 != v118);
          long long v117 = (char *)__p;
        }
        va_list __p = v116;
        unint64_t v165 = v110;
        v166 = &v115[16 * v114];
        if (v117) {
          operator delete(v117);
        }
      }
      else
      {
        *((_OWORD *)v102 + 1) = *(_OWORD *)(v109 + 80);
        float32x4_t v110 = v102 + 32;
      }
      unint64_t v165 = v110;
      uint64_t v120 = *(void *)(v48[2].i64[0] + 8 * k);
      if (v110 >= v166)
      {
        uint64_t v122 = (v110 - (unsigned char *)__p) >> 4;
        if ((unint64_t)(v122 + 1) >> 60) {
LABEL_200:
        }
          sub_20B05D0BC();
        unint64_t v123 = (v166 - (unsigned char *)__p) >> 3;
        if (v123 <= v122 + 1) {
          unint64_t v123 = v122 + 1;
        }
        if ((unint64_t)(v166 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v124 = v123;
        }
        if (v124) {
          uint64_t v125 = (char *)sub_20B077E90((uint64_t)&v166, v124);
        }
        else {
          uint64_t v125 = 0;
        }
        uint64_t v126 = &v125[16 * v122];
        *(_OWORD *)uint64_t v126 = *(_OWORD *)(v120 + 96);
        uint64_t v121 = v126 + 16;
        unint64_t v128 = (char *)__p;
        unint64_t v127 = v165;
        if (v165 != __p)
        {
          do
          {
            long long v129 = *((_OWORD *)v127 - 1);
            v127 -= 16;
            *((_OWORD *)v126 - 1) = v129;
            v126 -= 16;
          }
          while (v127 != v128);
          unint64_t v127 = (char *)__p;
        }
        va_list __p = v126;
        unint64_t v165 = v121;
        v166 = &v125[16 * v124];
        if (v127) {
          operator delete(v127);
        }
      }
      else
      {
        *(_OWORD *)float32x4_t v110 = *(_OWORD *)(v120 + 96);
        uint64_t v121 = v110 + 16;
      }
      uint64_t v130 = 0;
      unint64_t v165 = v121;
      do
      {
        if (sub_20B080F38(&v167, (float32x4_t *)__p + v130))
        {
          long long v161 = (char *)__p + 16 * v130;
          uint64_t v131 = sub_20B084BF0((uint64_t)&v167, (float32x4_t *)v161, (uint64_t)&unk_20B1E7420, (float32x4_t **)&v161);
          uint64_t v132 = v48[2].i64[0];
          uint64_t v133 = (void *)v131[2].i64[1];
          unint64_t v134 = v131[3].u64[0];
          if ((unint64_t)v133 >= v134)
          {
            uint64_t v145 = v131[2].i64[0];
            uint64_t v146 = ((uint64_t)v133 - v145) >> 3;
            if ((unint64_t)(v146 + 1) >> 61) {
              sub_20B05D0BC();
            }
            uint64_t v147 = v134 - v145;
            uint64_t v148 = v147 >> 2;
            if (v147 >> 2 <= (unint64_t)(v146 + 1)) {
              uint64_t v148 = v146 + 1;
            }
            if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v149 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v149 = v148;
            }
            if (v149) {
              long long v150 = (char *)sub_20B0602EC((uint64_t)&v131[3], v149);
            }
            else {
              long long v150 = 0;
            }
            int v151 = &v150[8 * v146];
            *(void *)int v151 = *(void *)(v132 + 8 * k);
            uint64_t v135 = v151 + 8;
            uint64_t v153 = (char *)v131[2].i64[0];
            uint64_t v152 = (char *)v131[2].i64[1];
            if (v152 != v153)
            {
              do
              {
                uint64_t v154 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v151 - 1) = v154;
                v151 -= 8;
              }
              while (v152 != v153);
              uint64_t v152 = (char *)v131[2].i64[0];
            }
            v131[2].i64[0] = (uint64_t)v151;
            v131[2].i64[1] = (uint64_t)v135;
            v131[3].i64[0] = (uint64_t)&v150[8 * v149];
            if (v152) {
              operator delete(v152);
            }
          }
          else
          {
            void *v133 = *(void *)(v132 + 8 * k);
            uint64_t v135 = v133 + 1;
          }
          v131[2].i64[1] = (uint64_t)v135;
        }
        else
        {
          long long v161 = 0;
          uint64_t v162 = 0;
          unint64_t v163 = 0;
          uint64_t v136 = v48[2].i64[0];
          unint64_t v137 = (char *)sub_20B0602EC((uint64_t)&v163, 1uLL);
          *(void *)unint64_t v137 = *(void *)(v136 + 8 * k);
          long long v139 = v137 + 8;
          float32x4_t v141 = (char *)v161;
          uint64_t v140 = v162;
          float32x4_t v142 = v137;
          if (v162 != v161)
          {
            do
            {
              uint64_t v143 = *((void *)v140 - 1);
              v140 -= 8;
              *((void *)v142 - 1) = v143;
              v142 -= 8;
            }
            while (v140 != v141);
            uint64_t v140 = (char *)v161;
          }
          long long v161 = v142;
          uint64_t v162 = v137 + 8;
          unint64_t v163 = &v137[8 * v138];
          if (v140) {
            operator delete(v140);
          }
          uint64_t v162 = v139;
          v182 = (float32x4_t *)((char *)__p + 16 * v130);
          long long v144 = sub_20B084BF0((uint64_t)&v167, v182, (uint64_t)&unk_20B1E7420, &v182) + 2;
          if (v144 != (float32x4_t *)&v161) {
            sub_20B139A48((char *)v144, (char *)v161, (uint64_t)v162, (v162 - (unsigned char *)v161) >> 3);
          }
          if (v161)
          {
            uint64_t v162 = (char *)v161;
            operator delete(v161);
          }
        }
        ++v130;
      }
      while (v130 != 3);
      if (__p)
      {
        unint64_t v165 = (char *)__p;
        operator delete(__p);
      }
    }
    while (v175)
    {
      uint64_t v155 = v174[2];
      va_list __p = 0;
      unint64_t v165 = 0;
      v166 = 0;
      sub_20B17E194(v155, (uint64_t)&v173, (uint64_t)&v167, (char **)&__p, v55, v159);
      if (__p)
      {
        unint64_t v165 = (char *)__p;
        operator delete(__p);
      }
    }
    v177 = v176;
    sub_20B084B68((uint64_t)&v167);
LABEL_190:
    if (v170) {
      operator delete(v170);
    }
    sub_20B07F6E8(&v173);
    if (v176)
    {
      v177 = v176;
      operator delete(v176);
    }
    float32x2_t v48 = (float32x4_t *)v48->i64[0];
  }
  while (v48);
  return sub_20B084B68((uint64_t)&v179);
}

void sub_20B17E0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (__p) {
    operator delete(__p);
  }
  sub_20B084B68((uint64_t)&a27);
  if (a32) {
    operator delete(a32);
  }
  sub_20B07F6E8(&a35);
  long long v37 = *(void **)(v35 - 200);
  if (v37)
  {
    *(void *)(v35 - 192) = v37;
    operator delete(v37);
  }
  sub_20B084B68(v35 - 176);
  _Unwind_Resume(a1);
}

void sub_20B17E194(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, uint64_t a5, float32x4_t a6)
{
  float32x4_t v10 = *(float32x4_t *)(a1 + 64);
  float32x4_t v11 = vsubq_f32(v10, a6);
  int32x4_t v12 = (int32x4_t)vmulq_f32(v11, v11);
  float32x4_t v116 = (_OWORD *)a1;
  float v13 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.i8, 1)), (float32x4_t)vdupq_laneq_s32(v12, 2)).f32[0]);
  if (v13 < 0.000001)
  {
    unint64_t v14 = (_OWORD *)(a1 + 112);
    float32x4_t v15 = *(float32x4_t *)(a1 + 80);
    float32x4_t v16 = *(float32x4_t *)(a1 + 96);
    float32x4_t v114 = v15;
    float32x4_t v115 = v16;
    float v18 = a4 + 1;
    uint64_t v17 = a4[1];
    uint64_t v19 = (v17 - *a4) >> 3;
    if (v19 != (int)a5)
    {
      BOOL v20 = 0;
      goto LABEL_10;
    }
LABEL_25:
    _OWORD *v14 = xmmword_20B1E74C0;
    sub_20B124454(a2, &v116);
    return;
  }
  float32x4_t v15 = *(float32x4_t *)(a1 + 80);
  float32x4_t v21 = vsubq_f32(v15, a6);
  int32x4_t v22 = (int32x4_t)vmulq_f32(v21, v21);
  float v23 = sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1)), (float32x4_t)vdupq_laneq_s32(v22, 2)).f32[0]);
  BOOL v20 = v23 < 0.000001;
  if (v23 < 0.000001) {
    float32x4_t v16 = *(float32x4_t *)(a1 + 96);
  }
  else {
    float32x4_t v16 = *(float32x4_t *)(a1 + 80);
  }
  float32x4_t v114 = v10;
  float32x4_t v115 = v16;
  float v18 = a4 + 1;
  uint64_t v17 = a4[1];
  uint64_t v19 = (v17 - *a4) >> 3;
  if (v19 == (int)a5)
  {
    if (v23 >= 0.000001) {
      unint64_t v14 = (_OWORD *)(a1 + 144);
    }
    else {
      unint64_t v14 = (_OWORD *)(a1 + 128);
    }
    goto LABEL_25;
  }
LABEL_10:
  int32x4_t v24 = (int32x4_t)vmulq_f32(*(float32x4_t *)(a1 + 192), *(float32x4_t *)(a1 + 192));
  if (vaddq_f32(vaddq_f32((float32x4_t)v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.i8, 1)), (float32x4_t)vdupq_laneq_s32(v24, 2)).f32[0] > 1.0e-12)return; {
  if (!v19)
  }
  {
    if (v13 >= 0.000001)
    {
      if (v20)
      {
        float32x4_t v44 = vsubq_f32(v15, v10);
        int32x4_t v45 = (int32x4_t)vmulq_f32(v44, v44);
        float32x4_t v46 = vsubq_f32(v15, *(float32x4_t *)(a1 + 96));
        int32x4_t v47 = (int32x4_t)vmulq_f32(v46, v46);
        if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.i8, 1)), (float32x4_t)vdupq_laneq_s32(v45, 2)).f32[0]) > sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.i8, 1)), (float32x4_t)vdupq_laneq_s32(v47, 2)).f32[0]))
        {
          float32x4_t v114 = *(float32x4_t *)(a1 + 96);
          float32x4_t v115 = v10;
        }
      }
      else
      {
        float32x4_t v53 = *(float32x4_t *)(a1 + 96);
        float32x4_t v54 = vsubq_f32(v53, v10);
        int32x4_t v55 = (int32x4_t)vmulq_f32(v54, v54);
        float32x4_t v56 = vsubq_f32(v53, v15);
        int32x4_t v57 = (int32x4_t)vmulq_f32(v56, v56);
        if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.i8, 1)), (float32x4_t)vdupq_laneq_s32(v55, 2)).f32[0]) > sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.i8, 1)), (float32x4_t)vdupq_laneq_s32(v57, 2)).f32[0]))
        {
          float32x4_t v114 = v15;
          float32x4_t v115 = v10;
        }
      }
    }
    else
    {
      float32x4_t v37 = vsubq_f32(v10, v15);
      int32x4_t v38 = (int32x4_t)vmulq_f32(v37, v37);
      float32x4_t v39 = vsubq_f32(v10, *(float32x4_t *)(a1 + 96));
      int32x4_t v40 = (int32x4_t)vmulq_f32(v39, v39);
      if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.i8, 1)), (float32x4_t)vdupq_laneq_s32(v38, 2)).f32[0]) > sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 1)), (float32x4_t)vdupq_laneq_s32(v40, 2)).f32[0]))
      {
        float32x4_t v114 = *(float32x4_t *)(a1 + 96);
        float32x4_t v115 = v15;
      }
    }
    long long v117 = &v115;
    int32x4_t v58 = sub_20B084BF0(a3, &v115, (uint64_t)&unk_20B1E7420, &v117);
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    va_list __p = 0;
    sub_20B0C0658(&__p, (const void *)v58[2].i64[0], v58[2].i64[1], (v58[2].i64[1] - v58[2].i64[0]) >> 3);
    if (v112 == __p) {
      goto LABEL_82;
    }
    uint64_t v59 = 0;
    unint64_t v60 = (v112 - (unsigned char *)__p) >> 3;
    float v61 = v116;
    if (v60 <= 1) {
      unint64_t v60 = 1;
    }
    while (*((_OWORD **)__p + v59) == v116)
    {
      if (v60 == ++v59) {
        goto LABEL_82;
      }
    }
    unint64_t v62 = (unint64_t)a4[2];
    uint64_t v63 = a4[1];
    if ((unint64_t)v63 >= v62)
    {
      uint64_t v65 = (v63 - *a4) >> 3;
      if ((unint64_t)(v65 + 1) >> 61) {
        sub_20B05D0BC();
      }
      uint64_t v66 = v62 - (void)*a4;
      uint64_t v67 = v66 >> 2;
      if (v66 >> 2 <= (unint64_t)(v65 + 1)) {
        uint64_t v67 = v65 + 1;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      if (v68)
      {
        unint64_t v69 = (char *)sub_20B0602EC((uint64_t)(a4 + 2), v68);
        float v61 = v116;
      }
      else
      {
        unint64_t v69 = 0;
      }
      uint64_t v80 = &v69[8 * v65];
      uint64_t v81 = &v69[8 * v68];
      *(void *)uint64_t v80 = v61;
      unint64_t v64 = v80 + 8;
      float32x4_t v83 = *a4;
      uint64_t v82 = a4[1];
      if (v82 != *a4)
      {
        do
        {
          uint64_t v84 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v80 - 1) = v84;
          v80 -= 8;
        }
        while (v82 != v83);
        uint64_t v82 = *a4;
      }
      *a4 = v80;
      a4[1] = v64;
      a4[2] = v81;
      if (v82) {
        operator delete(v82);
      }
    }
    else
    {
      *(void *)uint64_t v63 = v116;
      unint64_t v64 = v63 + 8;
    }
    a4[1] = v64;
    *(double *)v85.i64 = sub_20B17E194(*((void *)__p + v59), a2, a3, a4, a5, (__n128)a6);
    int32x4_t v86 = (int32x4_t)vmulq_f32(v85, v85);
    *v18 -= 8;
    if (vaddq_f32(vaddq_f32((float32x4_t)v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 1)), (float32x4_t)vdupq_laneq_s32(v86, 2)).f32[0] == 0.0)
    {
LABEL_82:
      long long v117 = &v114;
      float32x4_t v87 = sub_20B084BF0(a3, &v114, (uint64_t)&unk_20B1E7420, &v117);
      if (&__p != (void **)&v87[2]) {
        sub_20B139A48((char *)&__p, (char *)v87[2].i64[0], v87[2].i64[1], (v87[2].i64[1] - v87[2].i64[0]) >> 3);
      }
      if (v112 == __p) {
        goto LABEL_112;
      }
      uint64_t v88 = 0;
      unint64_t v89 = (v112 - (unsigned char *)__p) >> 3;
      int32x4_t v90 = v116;
      if (v89 <= 1) {
        unint64_t v89 = 1;
      }
      while (*((_OWORD **)__p + v88) == v116)
      {
        if (v89 == ++v88) {
          goto LABEL_112;
        }
      }
      unint64_t v91 = (unint64_t)a4[2];
      float32x4_t v92 = a4[1];
      if ((unint64_t)v92 >= v91)
      {
        uint64_t v94 = (v92 - *a4) >> 3;
        if ((unint64_t)(v94 + 1) >> 61) {
          sub_20B05D0BC();
        }
        uint64_t v95 = v91 - (void)*a4;
        uint64_t v96 = v95 >> 2;
        if (v95 >> 2 <= (unint64_t)(v94 + 1)) {
          uint64_t v96 = v94 + 1;
        }
        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v97 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v96;
        }
        if (v97)
        {
          long long v98 = (char *)sub_20B0602EC((uint64_t)(a4 + 2), v97);
          int32x4_t v90 = v116;
        }
        else
        {
          long long v98 = 0;
        }
        uint64_t v101 = &v98[8 * v94];
        uint64_t v102 = &v98[8 * v97];
        *(void *)uint64_t v101 = v90;
        int32x4_t v93 = v101 + 8;
        uint64_t v104 = *a4;
        uint64_t v103 = a4[1];
        if (v103 != *a4)
        {
          do
          {
            uint64_t v105 = *((void *)v103 - 1);
            v103 -= 8;
            *((void *)v101 - 1) = v105;
            v101 -= 8;
          }
          while (v103 != v104);
          uint64_t v103 = *a4;
        }
        *a4 = v101;
        a4[1] = v93;
        a4[2] = v102;
        if (v103) {
          operator delete(v103);
        }
      }
      else
      {
        *(void *)float32x4_t v92 = v116;
        int32x4_t v93 = v92 + 8;
      }
      a4[1] = v93;
      *(double *)v85.i64 = sub_20B17E194(*((void *)__p + v88), a2, a3, a4, a5, (__n128)a6);
      int32x4_t v106 = (int32x4_t)vmulq_f32(v85, v85);
      *v18 -= 8;
      if (vaddq_f32(vaddq_f32((float32x4_t)v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.i8, 1)), (float32x4_t)vdupq_laneq_s32(v106, 2)).f32[0] == 0.0)
      {
LABEL_112:
        long long v107 = v116 + 9;
        if (v20) {
          long long v107 = v116 + 8;
        }
        float32x4_t v108 = v116 + 7;
        if (v13 >= 0.000001) {
          float32x4_t v108 = v107;
        }
        _OWORD *v108 = xmmword_20B1E74C0;
        sub_20B124454(a2, &v116);
        goto LABEL_117;
      }
      uint64_t v109 = (float32x4_t *)(v116 + 9);
      if (v20) {
        uint64_t v109 = (float32x4_t *)(v116 + 8);
      }
      uint64_t v100 = (float32x4_t *)(v116 + 7);
      if (v13 >= 0.000001) {
        uint64_t v100 = v109;
      }
    }
    else
    {
      uint64_t v99 = (float32x4_t *)(v116 + 9);
      if (v20) {
        uint64_t v99 = (float32x4_t *)(v116 + 8);
      }
      uint64_t v100 = (float32x4_t *)(v116 + 7);
      if (v13 >= 0.000001) {
        uint64_t v100 = v99;
      }
    }
    *uint64_t v100 = v85;
    sub_20B124454(a2, &v116);
    goto LABEL_117;
  }
  uint64_t v25 = (float32x4_t *)*((void *)v17 - 1);
  va_list __p = 0;
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  float32x4_t v26 = vsubq_f32(v25[4], v16);
  int32x4_t v27 = (int32x4_t)vmulq_f32(v26, v26);
  if (sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 1)), (float32x4_t)vdupq_laneq_s32(v27, 2)).f32[0]) >= 0.000001&& (v28 = vsubq_f32(v25[5], v16), int32x4_t v29 = (int32x4_t)vmulq_f32(v28, v28), sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1)), (float32x4_t)vdupq_laneq_s32(v29, 2)).f32[0]) >= 0.000001)&& (v30 = vsubq_f32(v25[6], v16), v31 = (int32x4_t)vmulq_f32(v30, v30), sqrtf(vaddq_f32(vaddq_f32((float32x4_t)v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 1)), (float32x4_t)vdupq_laneq_s32(v31, 2)).f32[0]) >= 0.000001))
  {
    long long v117 = &v115;
    float v32 = sub_20B084BF0(a3, &v115, (uint64_t)&unk_20B1E7420, &v117);
  }
  else
  {
    long long v117 = &v114;
    float v32 = sub_20B084BF0(a3, &v114, (uint64_t)&unk_20B1E7420, &v117);
  }
  if (&__p != (void **)&v32[2]) {
    sub_20B139A48((char *)&__p, (char *)v32[2].i64[0], v32[2].i64[1], (v32[2].i64[1] - v32[2].i64[0]) >> 3);
  }
  float v33 = __p;
  if (v112 != __p)
  {
    uint64_t v34 = 0;
    unint64_t v35 = (v112 - (unsigned char *)__p) >> 3;
    unint64_t v36 = v116;
    if (v35 <= 1) {
      unint64_t v35 = 1;
    }
    while (*((_OWORD **)__p + v34) == v116)
    {
      if (v35 == ++v34) {
        goto LABEL_117;
      }
    }
    unint64_t v41 = (unint64_t)a4[2];
    unint64_t v42 = a4[1];
    if ((unint64_t)v42 >= v41)
    {
      uint64_t v48 = (v42 - *a4) >> 3;
      if ((unint64_t)(v48 + 1) >> 61) {
        sub_20B05D0BC();
      }
      uint64_t v49 = v41 - (void)*a4;
      uint64_t v50 = v49 >> 2;
      if (v49 >> 2 <= (unint64_t)(v48 + 1)) {
        uint64_t v50 = v48 + 1;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      if (v51)
      {
        uint64_t v52 = (char *)sub_20B0602EC((uint64_t)(a4 + 2), v51);
        unint64_t v36 = v116;
      }
      else
      {
        uint64_t v52 = 0;
      }
      uint64_t v70 = &v52[8 * v48];
      uint64_t v71 = &v52[8 * v51];
      *(void *)uint64_t v70 = v36;
      BOOL v43 = v70 + 8;
      int v73 = *a4;
      int v72 = a4[1];
      if (v72 != *a4)
      {
        do
        {
          uint64_t v74 = *((void *)v72 - 1);
          v72 -= 8;
          *((void *)v70 - 1) = v74;
          v70 -= 8;
        }
        while (v72 != v73);
        int v72 = *a4;
      }
      *a4 = v70;
      a4[1] = v43;
      a4[2] = v71;
      if (v72) {
        operator delete(v72);
      }
    }
    else
    {
      *(void *)unint64_t v42 = v116;
      BOOL v43 = v42 + 8;
    }
    a4[1] = v43;
    *(double *)v75.i64 = sub_20B17E194(*((void *)__p + v34), a2, a3, a4, a5, (__n128)a6);
    float32x4_t v76 = v75;
    *v18 -= 8;
    int32x4_t v77 = (int32x4_t)vmulq_f32(v75, v75);
    if (vaddq_f32(vaddq_f32((float32x4_t)v77, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.i8, 1)), (float32x4_t)vdupq_laneq_s32(v77, 2)).f32[0] != 0.0)
    {
      __n128 v78 = (float32x4_t *)(v116 + 9);
      if (v20) {
        __n128 v78 = (float32x4_t *)(v116 + 8);
      }
      uint64_t v79 = (float32x4_t *)(v116 + 7);
      if (v13 >= 0.000001) {
        uint64_t v79 = v78;
      }
      *uint64_t v79 = v76;
      sub_20B124454(a2, &v116);
    }
LABEL_117:
    float v33 = __p;
    if (!__p) {
      return;
    }
    goto LABEL_118;
  }
  if (!__p) {
    return;
  }
LABEL_118:
  uint64_t v112 = v33;
  operator delete(v33);
}

void sub_20B17EA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B17EC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20B17ECCC(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v15 = 0;
  float32x4_t v16 = 0;
  uint64_t v17 = 0;
  if (a3) {
    operator new();
  }
  sub_20B17D4FC(&v15, a1);
  BOOL v9 = v15;
  float32x4_t v10 = v16;
  if (v15 != v16)
  {
    do
    {
      float32x4_t v11 = (int *)*v9++;
      int32x4_t v12 = (_DWORD *)(a6 + *v11 * a7);
      _DWORD *v12 = v11[28];
      v12[1] = v11[29];
      _OWORD v12[2] = v11[30];
      float v13 = (_DWORD *)(a6 + v11[1] * a7);
      *float v13 = v11[32];
      v13[1] = v11[33];
      _OWORD v13[2] = v11[34];
      unint64_t v14 = (_DWORD *)(a6 + v11[2] * a7);
      _DWORD *v14 = v11[36];
      v14[1] = v11[37];
      _OWORD v14[2] = v11[38];
      MEMORY[0x210532650]();
    }
    while (v9 != v10);
    BOOL v9 = v15;
  }
  if (v9)
  {
    float32x4_t v16 = v9;
    operator delete(v9);
  }
}

void sub_20B17F068(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B17F0AC(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v15 = 0;
  float32x4_t v16 = 0;
  uint64_t v17 = 0;
  if (a3) {
    operator new();
  }
  sub_20B17D4FC(&v15, a1);
  BOOL v9 = v15;
  float32x4_t v10 = v16;
  if (v15 != v16)
  {
    do
    {
      float32x4_t v11 = (int *)*v9++;
      int32x4_t v12 = (_DWORD *)(a6 + *v11 * a7);
      _DWORD *v12 = v11[28];
      v12[1] = v11[29];
      _OWORD v12[2] = v11[30];
      float v13 = (_DWORD *)(a6 + v11[1] * a7);
      *float v13 = v11[32];
      v13[1] = v11[33];
      _OWORD v13[2] = v11[34];
      unint64_t v14 = (_DWORD *)(a6 + v11[2] * a7);
      _DWORD *v14 = v11[36];
      v14[1] = v11[37];
      _OWORD v14[2] = v11[38];
      MEMORY[0x210532650]();
    }
    while (v9 != v10);
    BOOL v9 = v15;
  }
  if (v9)
  {
    float32x4_t v16 = v9;
    operator delete(v9);
  }
}

void sub_20B17F448(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B17F48C(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v15 = 0;
  float32x4_t v16 = 0;
  uint64_t v17 = 0;
  if (a3) {
    operator new();
  }
  sub_20B17D4FC(&v15, a1);
  BOOL v9 = v15;
  float32x4_t v10 = v16;
  if (v15 != v16)
  {
    do
    {
      float32x4_t v11 = (int *)*v9++;
      int32x4_t v12 = (_DWORD *)(a6 + *v11 * a7);
      _DWORD *v12 = v11[28];
      v12[1] = v11[29];
      _OWORD v12[2] = v11[30];
      float v13 = (_DWORD *)(a6 + v11[1] * a7);
      *float v13 = v11[32];
      v13[1] = v11[33];
      _OWORD v13[2] = v11[34];
      unint64_t v14 = (_DWORD *)(a6 + v11[2] * a7);
      _DWORD *v14 = v11[36];
      v14[1] = v11[37];
      _OWORD v14[2] = v11[38];
      MEMORY[0x210532650]();
    }
    while (v9 != v10);
    BOOL v9 = v15;
  }
  if (v9)
  {
    float32x4_t v16 = v9;
    operator delete(v9);
  }
}

void sub_20B17F824(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 128);
  if (v3)
  {
    *(void *)(v1 - 120) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B17FDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  _Unwind_Resume(a1);
}

void sub_20B180748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }

  _Unwind_Resume(a1);
}

void sub_20B180874(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_20B18324C((char **)a1, a2 - v2);
  }
}

void sub_20B180A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_20B180E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15)
{
  _Unwind_Resume(a1);
}

void sub_20B180FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1819B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,char a56,void *a57)
{
  if (__p) {
    operator delete(__p);
  }
  sub_20B05D2CC((uint64_t)&a56, a57);
  _Unwind_Resume(a1);
}

uint64_t sub_20B181BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = 0;
    BOOL v9 = (void *)(a1 + 8);
    uint64_t v28 = a2 + 16;
    do
    {
      unsigned int v10 = *(unsigned __int8 *)(a3 + v8);
      uint64_t v11 = *v9;
      if (!*v9) {
        goto LABEL_14;
      }
      int32x4_t v12 = v9;
      do
      {
        unsigned int v13 = *(_DWORD *)(v11 + 28);
        BOOL v14 = v13 >= v10;
        if (v13 >= v10) {
          float32x4_t v15 = (uint64_t *)v11;
        }
        else {
          float32x4_t v15 = (uint64_t *)(v11 + 8);
        }
        if (v14) {
          int32x4_t v12 = (void *)v11;
        }
        uint64_t v11 = *v15;
      }
      while (*v15);
      if (v12 == v9 || *((_DWORD *)v12 + 7) > v10)
      {
LABEL_14:
        unsigned int v29 = *(void *)(a1 + 16);
        float32x4_t v30 = &v29;
        *((_DWORD *)sub_20B183368((uint64_t **)a1, &v29, (uint64_t)&unk_20B1E7420, &v30) + 8) = v10;
        unsigned int v10 = *(unsigned __int8 *)(a3 + v8);
      }
      uint64_t v17 = *(unsigned int **)(a2 + 8);
      unint64_t v16 = *(void *)(a2 + 16);
      if ((unint64_t)v17 >= v16)
      {
        uint64_t v19 = *(unsigned int **)a2;
        uint64_t v20 = ((uint64_t)v17 - *(void *)a2) >> 2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v22 = v16 - (void)v19;
        if (v22 >> 1 > v21) {
          unint64_t v21 = v22 >> 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          int32x4_t v24 = (char *)sub_20B05D1AC(v28, v23);
          uint64_t v19 = *(unsigned int **)a2;
          uint64_t v17 = *(unsigned int **)(a2 + 8);
        }
        else
        {
          int32x4_t v24 = 0;
        }
        uint64_t v25 = &v24[4 * v20];
        *(_DWORD *)uint64_t v25 = v10;
        float v18 = v25 + 4;
        while (v17 != v19)
        {
          int v26 = *--v17;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        *(void *)a2 = v25;
        *(void *)(a2 + 8) = v18;
        *(void *)(a2 + 16) = &v24[4 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unsigned int *v17 = v10;
        float v18 = v17 + 1;
      }
      *(void *)(a2 + 8) = v18;
      ++v8;
    }
    while (v8 != a4);
  }
  return 1;
}

uint64_t sub_20B181D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = 0;
    BOOL v9 = (void *)(a1 + 8);
    uint64_t v28 = a2 + 16;
    do
    {
      unsigned int v10 = *(unsigned __int16 *)(a3 + 2 * v8);
      uint64_t v11 = *v9;
      if (!*v9) {
        goto LABEL_14;
      }
      int32x4_t v12 = v9;
      do
      {
        unsigned int v13 = *(_DWORD *)(v11 + 28);
        BOOL v14 = v13 >= v10;
        if (v13 >= v10) {
          float32x4_t v15 = (uint64_t *)v11;
        }
        else {
          float32x4_t v15 = (uint64_t *)(v11 + 8);
        }
        if (v14) {
          int32x4_t v12 = (void *)v11;
        }
        uint64_t v11 = *v15;
      }
      while (*v15);
      if (v12 == v9 || *((_DWORD *)v12 + 7) > v10)
      {
LABEL_14:
        unsigned int v29 = *(void *)(a1 + 16);
        float32x4_t v30 = &v29;
        *((_DWORD *)sub_20B183368((uint64_t **)a1, &v29, (uint64_t)&unk_20B1E7420, &v30) + 8) = v10;
        unsigned int v10 = *(unsigned __int16 *)(a3 + 2 * v8);
      }
      uint64_t v17 = *(unsigned int **)(a2 + 8);
      unint64_t v16 = *(void *)(a2 + 16);
      if ((unint64_t)v17 >= v16)
      {
        uint64_t v19 = *(unsigned int **)a2;
        uint64_t v20 = ((uint64_t)v17 - *(void *)a2) >> 2;
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v22 = v16 - (void)v19;
        if (v22 >> 1 > v21) {
          unint64_t v21 = v22 >> 1;
        }
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        if (v23)
        {
          int32x4_t v24 = (char *)sub_20B05D1AC(v28, v23);
          uint64_t v19 = *(unsigned int **)a2;
          uint64_t v17 = *(unsigned int **)(a2 + 8);
        }
        else
        {
          int32x4_t v24 = 0;
        }
        uint64_t v25 = &v24[4 * v20];
        *(_DWORD *)uint64_t v25 = v10;
        float v18 = v25 + 4;
        while (v17 != v19)
        {
          int v26 = *--v17;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        *(void *)a2 = v25;
        *(void *)(a2 + 8) = v18;
        *(void *)(a2 + 16) = &v24[4 * v23];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unsigned int *v17 = v10;
        float v18 = v17 + 1;
      }
      *(void *)(a2 + 8) = v18;
      ++v8;
    }
    while (v8 != a4);
  }
  return 1;
}

uint64_t sub_20B181EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = 0;
    BOOL v9 = (void *)(a1 + 8);
    uint64_t v10 = a2 + 16;
    do
    {
      uint64_t v11 = *v9;
      unsigned int v12 = *(_DWORD *)(a3 + 4 * v8);
      if (!*v9) {
        goto LABEL_14;
      }
      unsigned int v13 = v9;
      do
      {
        unsigned int v14 = *(_DWORD *)(v11 + 28);
        BOOL v15 = v14 >= v12;
        if (v14 >= v12) {
          unint64_t v16 = (uint64_t *)v11;
        }
        else {
          unint64_t v16 = (uint64_t *)(v11 + 8);
        }
        if (v15) {
          unsigned int v13 = (void *)v11;
        }
        uint64_t v11 = *v16;
      }
      while (*v16);
      if (v13 == v9 || v12 < *((_DWORD *)v13 + 7))
      {
LABEL_14:
        unsigned int v29 = *(void *)(a1 + 16);
        float32x4_t v30 = &v29;
        *((_DWORD *)sub_20B183368((uint64_t **)a1, &v29, (uint64_t)&unk_20B1E7420, &v30) + 8) = v12;
      }
      float v18 = *(_DWORD **)(a2 + 8);
      unint64_t v17 = *(void *)(a2 + 16);
      if ((unint64_t)v18 >= v17)
      {
        uint64_t v20 = *(_DWORD **)a2;
        uint64_t v21 = ((uint64_t)v18 - *(void *)a2) >> 2;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62) {
          sub_20B05D0BC();
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 1 > v22) {
          unint64_t v22 = v23 >> 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          uint64_t v25 = (char *)sub_20B05D1AC(v10, v24);
          uint64_t v20 = *(_DWORD **)a2;
          float v18 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          uint64_t v25 = 0;
        }
        int v26 = &v25[4 * v21];
        *(_DWORD *)int v26 = *(_DWORD *)(a3 + 4 * v8);
        uint64_t v19 = v26 + 4;
        while (v18 != v20)
        {
          int v27 = *--v18;
          *((_DWORD *)v26 - 1) = v27;
          v26 -= 4;
        }
        *(void *)a2 = v26;
        *(void *)(a2 + 8) = v19;
        *(void *)(a2 + 16) = &v25[4 * v24];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        _DWORD *v18 = *(_DWORD *)(a3 + 4 * v8);
        uint64_t v19 = v18 + 1;
      }
      *(void *)(a2 + 8) = v19;
      ++v8;
    }
    while (v8 != a4);
  }
  return 1;
}

void sub_20B1821D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B18230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_20B1830DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1823F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_20B1830DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B182530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_20B1830DC((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_20B182658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_20B1830DC((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_20B182768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B182904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B182F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B1830DC(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  sub_20B183168(a1 + 120);
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  float v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  float v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  float v7 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_20B183168(uint64_t a1)
{
  sub_20B1831A4(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_20B1831A4(int a1, void *__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      int v4 = (void *)v2[6];
      if (v4)
      {
        v2[7] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

float32x4_t sub_20B1831F0(float32x4_t *a1, uint64_t a2)
{
  float32x4_t result = *a1;
  float32x4_t v3 = vmulq_f32(result, result);
  float v4 = vaddq_f32(vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2)).f32[0];
  if (v4 <= COERCE_FLOAT(512))
  {
    return *(float32x4_t *)a2;
  }
  else
  {
    float v5 = v4;
    float32x2_t v6 = vrsqrte_f32((float32x2_t)LODWORD(v4));
    float32x2_t v7 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v5), vmul_f32(v6, v6)), v6);
    result.i64[0] = vmulq_n_f32(result, vmul_f32(v7, vrsqrts_f32((float32x2_t)LODWORD(v5), vmul_f32(v7, v7))).f32[0]).u64[0];
  }
  return result;
}

void sub_20B18324C(char **a1, unint64_t a2)
{
  float32x2_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  float32x2_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      sub_20B05D0BC();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)sub_20B05D1AC(v4, v13);
      uint64_t v8 = *a1;
      float32x2_t v7 = a1[1];
    }
    else
    {
      unsigned int v14 = 0;
    }
    BOOL v15 = &v14[4 * v11];
    unint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    unint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t *sub_20B183368(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  float32x2_t v7 = a1 + 1;
  float32x2_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        float32x2_t v6 = *v9;
        float32x2_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      float32x2_t v6 = v9[1];
      if (!v6)
      {
        float32x2_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_20B05FAEC(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t sub_20B183428(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26BF4FAE8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_20B1E9BA0;
  *(_OWORD *)(a1 + 104) = xmmword_20B1E9BB0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 144) = _Q0;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v10[0] = xmmword_20B1E9BE0;
  v10[1] = unk_20B1E9BF0;
  unsigned int v8 = CGColorCreate(DeviceRGB, (const CGFloat *)v10);
  sub_20B183520(a1, v8);
  CGColorRelease(v8);
  CGColorSpaceRelease(DeviceRGB);
  return a1;
}

void sub_20B183520(uint64_t a1, CGColor *a2)
{
  float32x4_t v3 = *(CGColor **)(a1 + 16);
  if (v3 != a2)
  {
    CGColorRelease(v3);
    *(void *)(a1 + 16) = CGColorRetain(a2);
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v15 = (float32x4_t)_Q0;
    if (a2)
    {
      Components = (float64x2_t *)CGColorGetComponents(a2);
      _Q0 = *Components;
      *(float32x2_t *)&_Q0.f64[0] = vcvt_f32_f64(*Components);
      float v11 = Components[1].f64[0];
      *(float *)&_Q0.f64[1] = v11;
    }
    *(float64x2_t *)(a1 + 64) = _Q0;
    *(float *)v12.i32 = sub_20B068710(a2);
    *(_DWORD *)(a1 + 48) = v12.i32[0];
    float32x4_t v13 = v15;
    if (*(float *)v12.i32 > 0.0)
    {
      __asm { FMOV            V2.4S, #1.0 }
      float32x4_t v13 = vmulq_f32(*(float32x4_t *)(a1 + 64), vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(v12, 0)));
    }
    *(float32x4_t *)(a1 + 32) = v13;
  }
}

uint64_t sub_20B1835C4(uint64_t a1)
{
  *(void *)a1 = &unk_26BF4FAE8;
  CGColorRelease(*(CGColorRef *)(a1 + 16));
  CGColorRelease(*(CGColorRef *)(a1 + 80));
  return a1;
}

CGColor *sub_20B183620(uint64_t a1, CGColor *a2)
{
  float32x4_t result = *(CGColor **)(a1 + 80);
  if (result != a2)
  {
    CGColorRelease(result);
    float32x4_t result = CGColorRetain(a2);
    *(void *)(a1 + 80) = result;
  }
  return result;
}

void sub_20B183660(uint64_t a1, float32x4_t *a2, int32x2_t *a3, int32x2_t *a4, uint64_t a5)
{
  float32x4_t v7 = vaddq_f32(a2[2], a2[3]);
  int32x4_t v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2)).u32[0];
  float32x2_t v9 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  float32x2_t v10 = vmul_f32(vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v9, v9)), v9);
  float32x4_t v11 = vmulq_n_f32(v7, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10))).f32[0]);
  *(float32x4_t *)a5 = v11;
  float32x4_t v13 = a2[1];
  float32x4_t v12 = a2[2];
  int32x4_t v14 = (int32x4_t)vmulq_f32(v13, vnegq_f32(v12));
  *(float *)v14.i32 = vaddq_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.i8, 1)), (float32x4_t)vdupq_laneq_s32(v14, 2)).f32[0];
  float32x4_t v15 = vnegq_f32(vmlaq_n_f32(v12, v13, *(float *)v14.i32 + *(float *)v14.i32));
  *(float32x4_t *)(a5 + 16) = v15;
  int32x4_t v16 = (int32x4_t)vmulq_f32(a2[3], a2[1]);
  *(float *)v16.i32 = vaddq_f32(vaddq_f32((float32x4_t)v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x4_t)vdupq_laneq_s32(v16, 2)).f32[0];
  if (*(float *)v16.i32 < 0.001) {
    *(float *)v16.i32 = 0.001;
  }
  *(_DWORD *)(a5 + 32) = v16.i32[0];
  int32x4_t v17 = (int32x4_t)vmulq_f32(a2[2], a2[1]);
  float v18 = vaddq_f32(vaddq_f32((float32x4_t)v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1)), (float32x4_t)vdupq_laneq_s32(v17, 2)).f32[0];
  if (v18 < 0.001) {
    float v18 = 0.001;
  }
  *(float *)(a5 + 36) = v18;
  int32x4_t v19 = (int32x4_t)vmulq_f32(v11, a2[1]);
  float v20 = vaddq_f32(vaddq_f32((float32x4_t)v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1)), (float32x4_t)vdupq_laneq_s32(v19, 2)).f32[0];
  if (v20 < 0.001) {
    float v20 = 0.001;
  }
  *(float *)(a5 + 40) = v20;
  int32x4_t v21 = (int32x4_t)vmulq_f32(a2[3], v11);
  float v22 = vaddq_f32(vaddq_f32((float32x4_t)v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1)), (float32x4_t)vdupq_laneq_s32(v21, 2)).f32[0];
  if (v22 < 0.001) {
    float v22 = 0.001;
  }
  *(float *)(a5 + 44) = v22;
  *(float *)&v16.i32[1] = v18;
  __asm { FMOV            V3.2S, #1.0 }
  float32x2_t v28 = vsub_f32(_D3, *(float32x2_t *)v16.i8);
  *(int8x8_t *)v16.i8 = vbic_s8(vbsl_s8((int8x8_t)vcgt_f32(v28, _D3), (int8x8_t)_D3, (int8x8_t)v28), (int8x8_t)vcltz_f32(v28));
  float32x2_t v29 = vmul_f32(*(float32x2_t *)v16.i8, *(float32x2_t *)v16.i8);
  *(float32x2_t *)(a5 + 48) = vmul_f32(*(float32x2_t *)v16.i8, vmul_f32(v29, v29));
  v16.i32[0] = 1.0;
  float v30 = 1.0 - v22;
  if (v30 <= 1.0) {
    *(float *)v16.i32 = v30;
  }
  if (v30 < 0.0) {
    *(float *)v16.i32 = 0.0;
  }
  float v31 = *(float *)(a1 + 116);
  *(float *)(a5 + 56) = *(float *)v16.i32
                      * (float)((float)(*(float *)v16.i32 * *(float *)v16.i32)
                              * (float)(*(float *)v16.i32 * *(float *)v16.i32));
  *(float *)(a5 + 60) = v31;
  *(double *)&long long v32 = sub_20B1BB9E8(a4, v15, v31 * 0.0);
  long long v43 = v32;
  *(float *)&uint64_t v33 = powf(*(float *)&v32, 0.45455);
  v42.i64[0] = v33;
  float v40 = powf(*((float *)&v43 + 1), 0.45455);
  float v34 = powf(*((float *)&v43 + 2), 0.45455);
  float32x4_t v35 = v42;
  v35.f32[1] = v40;
  v35.f32[2] = v34;
  *(float32x4_t *)(a5 + 80) = vmulq_n_f32(v35, (float)(*(float *)(a5 + 60) * -0.33) + 0.99);
  *(double *)&long long v36 = sub_20B1BB520(a3, *(float32x4_t *)(a5 + 16));
  long long v44 = v36;
  *(float *)&uint64_t v37 = powf(*(float *)&v36, 0.45455);
  v42.i64[0] = v37;
  float v41 = powf(*((float *)&v44 + 1), 0.45455);
  float v38 = powf(*((float *)&v44 + 2), 0.45455);
  float32x4_t v39 = v42;
  v39.f32[1] = v41;
  v39.f32[2] = v38;
  *(float32x4_t *)(a5 + 64) = v39;
}

double sub_20B1838C4(float32x4_t *a1, uint64_t a2, float *a3)
{
  float v3 = a3[12];
  float v4 = a3[15] * (float)(a3[11] * a3[11]);
  float v5 = a3[13];
  float v6 = (float)((float)(v5 + v3) * (float)((float)(v4 * 2.0) + -0.5)) + 2.0;
  float v7 = (float)((float)((float)((float)(v4 + -1.0) * v3) + 1.0) * (float)((float)((float)(v4 + -1.0) * v5) + 1.0))
     * 1.25
     * (1.0 / (float)(a3[9] + a3[8]) + -0.5)
     + 0.625;
  float v8 = (float)(v6 + (float)((float)(v7 - v6) * 0.1)) * 0.318309877;
  *(void *)&double result = vmulq_n_f32(a1[3], (float)(1.0 - a1[5].f32[2]) * v8).u64[0];
  return result;
}

double sub_20B183974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v5 = (float)(*(float *)(a1 + 116) * -0.599) + 0.6;
  if (v5 >= 1.0)
  {
    float v9 = 0.31831;
  }
  else
  {
    float v6 = v5 * v5;
    double v7 = v6 + -1.0;
    float v8 = *(float *)(a3 + 40) * *(float *)(a3 + 40) * v7 + 1.0;
    float v9 = v7 / (float)((float)(logf(v6) * 3.1416) * v8);
  }
  __asm { FMOV            V4.2S, #0.9375 }
  float32x2_t v15 = vadd_f32(vsqrt_f32(vmla_f32((float32x2_t)vdup_n_s32(0x3D800000u), _D4, vmul_f32(*(float32x2_t *)(a3 + 32), *(float32x2_t *)(a3 + 32)))), *(float32x2_t *)(a3 + 32));
  _D4.f32[0] = fminf(*(float *)(a3 + 48), 1.0);
  *(void *)&double result = vmulq_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)_D4, 0), *(float32x4_t *)(a3 + 64)), (float)((float)((float)(*(float *)(a3 + 56) * 0.3) + 0.1) * (float)(v9 * *(float *)(a1 + 112)))/ vmul_lane_f32(v15, v15, 1).f32[0]).u64[0];
  return result;
}

double sub_20B183A84(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  float v5 = *(float *)(a1 + 100);
  float v6 = *(float *)(a1 + 80);
  if (v6 >= 1.0)
  {
    float v10 = 0.31831;
  }
  else
  {
    double v7 = (float)(v6 * v6) + -1.0;
    float v8 = a3[2].f32[2] * a3[2].f32[2] * v7 + 1.0;
    float v24 = *(float *)(a1 + 80);
    float v9 = logf(v6 * v6);
    float v6 = v24;
    float v10 = v7 / (float)((float)(v9 * 3.1416) * v8);
  }
  double v11 = v5 * 0.5 + 0.5;
  *(float *)&double v11 = v11;
  __asm { FMOV            V4.4S, #-1.0 }
  float32x4_t v17 = vaddq_f32(*(float32x4_t *)(a1 + 16), _Q4);
  __asm { FMOV            V4.4S, #1.0 }
  float32x4_t v19 = vmulq_n_f32(vmlaq_n_f32(_Q4, v17, COERCE_FLOAT(*(void *)(a1 + 84))), v6);
  *(float *)&double v11 = (float)(*(float *)&v11 * *(float *)&v11) * (float)(*(float *)&v11 * *(float *)&v11);
  v17.i64[0] = a3[2].i64[0];
  float32x2_t v20 = vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32);
  float32x2_t v21 = vadd_f32(vsqrt_f32(vmls_lane_f32(vadd_f32(v20, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v11, 0)), v20, *(float32x2_t *)&v11, 0)), *(float32x2_t *)v17.f32);
  float32x4_t v22 = vmulq_n_f32(*(float32x4_t *)(a1 + 48), COERCE_FLOAT(*(void *)(a1 + 88)));
  *(void *)&double result = vmulq_f32(vmlaq_n_f32(v22, vmulq_f32(vmlaq_n_f32(v19, vsubq_f32(_Q4, v19), COERCE_FLOAT(a3[3].i64[1])), vaddq_f32(v22, _Q4)), v10 / vmul_lane_f32(v21, v21, 1).f32[0]), a3[5]).u64[0];
  return result;
}

void *sub_20B183BBC(uint64_t a1)
{
  double result = (void *)sub_20B183428(a1);
  void *result = &unk_26BF4FA00;
  return result;
}

double sub_20B183BF0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)(a3 + 32);
  float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  float32x4_t v23 = *(float32x4_t *)(a3 + 80);
  float32x4_t v21 = vmulq_n_f32(v23, 1.0 - *(float *)&a4);
  uint64_t v6 = a1 + 16;
  float32x4_t v24 = *(float32x4_t *)(a1 + 144);
  float32x4_t v27 = vmulq_f32(vmlaq_f32(v22, v24, v21), (float32x4_t)vdupq_n_s32(0x3FF1463Au));
  *(double *)v7.i64 = sub_20B1838C4((float32x4_t *)(a1 + 16), a2, (float *)a3);
  float32x4_t v8 = vmulq_f32(v27, v7);
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  float32x4_t v25 = vmlaq_f32(v7, v7, v24);
  float32x4_t v26 = v8;
  float32x4_t v19 = *(float32x4_t *)(a1 + 64);
  *(double *)v10.i64 = sub_20B183974(v6, v9, a3);
  float32x4_t v20 = v10;
  *(double *)v12.i64 = sub_20B183A84(v6, v11, (float32x4_t *)a3);
  float32x4_t v13 = vaddq_f32(v21, v22);
  float32x4_t v14 = *(float32x4_t *)(a1 + 112);
  float32x4_t v15 = vsubq_f32(v19, v13);
  float32x4_t v16 = vmlaq_n_f32(v13, v15, v14.f32[0]);
  v14.i64[0] = *(void *)(a3 + 52);
  v15.i64[0] = *(void *)(a1 + 108);
  float32x4_t v17 = vmulq_f32(v15, v14);
  v15.f32[0] = 1.0 - *(float *)(a1 + 104);
  *(void *)&double result = vmlaq_f32(v26, v25, vmlaq_n_f32(vmlaq_f32(vaddq_f32(v12, v20), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu), vmulq_f32(v19, v23)), vmulq_f32(v16, v27), vmulq_f32(v17, v15).f32[0])).u64[0];
  return result;
}

double sub_20B183D34(float32x4_t *a1, uint64_t a2, float *a3)
{
  return sub_20B1838C4(a1 + 1, a2, a3);
}

double sub_20B183D3C(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  return sub_20B183A84(a1 + 16, a2, a3);
}

double sub_20B183D44()
{
  return 0.0;
}

double sub_20B183D4C()
{
  return 0.0;
}

void *sub_20B183D54(uint64_t a1)
{
  double result = (void *)sub_20B183428(a1);
  void *result = &unk_26BF4FA98;
  return result;
}

double sub_20B183D8C(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  LODWORD(a4) = *(_DWORD *)(a3 + 32);
  float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
  float32x4_t v23 = *(float32x4_t *)(a3 + 80);
  float32x4_t v21 = vmulq_n_f32(v23, 1.0 - *(float *)&a4);
  uint64_t v6 = a1 + 16;
  float32x4_t v24 = *(float32x4_t *)(a1 + 144);
  float32x4_t v27 = vmulq_f32(vmlaq_f32(v22, v24, v21), (float32x4_t)vdupq_n_s32(0x3FF1463Au));
  *(double *)v7.i64 = sub_20B1838C4((float32x4_t *)(a1 + 16), a2, (float *)a3);
  float32x4_t v8 = vmulq_f32(v27, v7);
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  float32x4_t v25 = vmlaq_f32(v7, v7, v24);
  float32x4_t v26 = v8;
  float32x4_t v19 = *(float32x4_t *)(a1 + 64);
  *(double *)v10.i64 = sub_20B183974(v6, v9, a3);
  float32x4_t v20 = v10;
  *(double *)v12.i64 = sub_20B183A84(v6, v11, (float32x4_t *)a3);
  float32x4_t v13 = vaddq_f32(v21, v22);
  float32x4_t v14 = *(float32x4_t *)(a1 + 112);
  float32x4_t v15 = vsubq_f32(v19, v13);
  float32x4_t v16 = vmlaq_n_f32(v13, v15, v14.f32[0]);
  v14.i64[0] = *(void *)(a3 + 52);
  v15.i64[0] = *(void *)(a1 + 108);
  float32x4_t v17 = vmulq_f32(v15, v14);
  v15.f32[0] = 1.0 - *(float *)(a1 + 104);
  *(void *)&double result = vmlaq_f32(v26, v25, vmlaq_n_f32(vmlaq_f32(vaddq_f32(v12, v20), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu), vmulq_f32(v19, v23)), vmulq_f32(v16, v27), vmulq_f32(v17, v15).f32[0])).u64[0];
  return result;
}

double sub_20B183ED0(float32x4_t *a1, uint64_t a2, float *a3)
{
  return sub_20B1838C4(a1 + 1, a2, a3);
}

double sub_20B183ED8(uint64_t a1, uint64_t a2, float32x4_t *a3)
{
  return sub_20B183A84(a1 + 16, a2, a3);
}

double sub_20B183EE0(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  LODWORD(a2) = *(_DWORD *)(a4 + 32);
  float32x4_t v4 = vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0), *(float32x4_t *)(a4 + 80), 1.0 - *(float *)&a2);
  float32x4_t v5 = *(float32x4_t *)(a1 + 112);
  float32x4_t v6 = vsubq_f32(*(float32x4_t *)(a1 + 64), v4);
  float32x4_t v7 = vmlaq_n_f32(v4, v6, v5.f32[0]);
  v6.i64[0] = *(void *)(a4 + 52);
  v5.i64[0] = *(void *)(a1 + 108);
  float32x4_t v8 = vmulq_f32(v5, v6);
  v5.f32[0] = 1.0 - *(float *)(a1 + 104);
  *(void *)&double result = vmulq_n_f32(v7, vmulq_f32(v8, v5).f32[0]).u64[0];
  return result;
}

double sub_20B183F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20B183974(a1 + 16, a2, a3);
}

void sub_20B183F3C(uint64_t a1)
{
  sub_20B1835C4(a1);

  JUMPOUT(0x210532650);
}

void sub_20B183F7C(uint64_t a1)
{
  sub_20B1835C4(a1);

  JUMPOUT(0x210532650);
}

__CFString *sub_20B183FB4(uint64_t a1, const char *a2, uint64_t a3)
{
  float v3 = objc_msgSend_mainBundle(MEMORY[0x263F086E0], a2, a3);
  float32x4_t v6 = v3;
  if (!v3
    || (objc_msgSend_bundleIdentifier(v3, v4, v5), (float32x4_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    float32x4_t v8 = objc_msgSend_processInfo(MEMORY[0x263F08AB0], v4, v5);
    uint64_t v11 = objc_msgSend_processName(v8, v9, v10);
    float32x4_t v12 = v11;
    if (v11) {
      float32x4_t v7 = v11;
    }
    else {
      float32x4_t v7 = &stru_26BF51EF0;
    }
  }

  return v7;
}

void sub_20B18405C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B18407C(void *a1, int a2, uint64_t a3, int a4)
{
  id v7 = a1;
  float32x4_t v8 = @"SceneKit";
  if (!a4) {
    float32x4_t v8 = @"ModelIO";
  }
  uint64_t v9 = v8;
  float32x4_t v12 = sub_20B183FB4((uint64_t)v9, v10, v11);
  float32x4_t v14 = objc_msgSend_numberWithBool_(NSNumber, v13, a3);
  float32x4_t v15 = @"Custom";
  if (!a2) {
    float32x4_t v15 = @"ModelIO";
  }
  float32x4_t v16 = v15;
  float32x4_t v19 = v9;
  id v20 = v12;
  id v21 = v7;
  float32x4_t v22 = v14;
  id v17 = v14;
  float v18 = v16;
  AnalyticsSendEventLazy();
}

void sub_20B1841F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_20B184250(uint64_t a1, const char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v6[0] = @"allocatorType";
  v6[1] = @"bridgeType";
  uint64_t v2 = *(void *)(a1 + 40);
  v7[0] = *(void *)(a1 + 32);
  v7[1] = v2;
  long long v3 = *(_OWORD *)(a1 + 48);
  void v6[2] = @"bundleIdentifier";
  v6[3] = @"fileExtension";
  long long v8 = v3;
  v6[4] = @"vertexDescriptor";
  uint64_t v9 = *(void *)(a1 + 64);
  float32x4_t v4 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, a2, (uint64_t)v7, v6, 5);

  return v4;
}

void sub_20B184310(void *a1)
{
  id v1 = a1;
  uint64_t v5 = sub_20B183FB4((uint64_t)v1, v2, v3);
  id v6 = v1;
  id v4 = v5;
  AnalyticsSendEventLazy();
}

void sub_20B1843D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_20B184400(uint64_t a1, const char *a2)
{
  void v6[2] = *MEMORY[0x263EF8340];
  v5[0] = @"bundleIdentifier";
  v5[1] = @"fileExtension";
  uint64_t v2 = *(void *)(a1 + 40);
  v6[0] = *(void *)(a1 + 32);
  v6[1] = v2;
  uint64_t v3 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, a2, (uint64_t)v6, v5, 2);

  return v3;
}

void sub_20B184490(uint64_t a1, const char *a2, uint64_t a3)
{
  int v3 = a1;
  id v4 = sub_20B183FB4(a1, a2, a3);
  uint64_t v5 = @"ModelIO";
  if (v3) {
    uint64_t v5 = @"Custom";
  }
  long long v8 = v5;
  uint64_t v9 = v4;
  id v6 = v4;
  id v7 = v8;
  AnalyticsSendEventLazy();
}

void sub_20B18456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_20B184590(uint64_t a1, const char *a2)
{
  void v6[2] = *MEMORY[0x263EF8340];
  v5[0] = @"allocatorType";
  v5[1] = @"bundleIdentifier";
  uint64_t v2 = *(void *)(a1 + 40);
  v6[0] = *(void *)(a1 + 32);
  v6[1] = v2;
  int v3 = objc_msgSend_dictionaryWithObjects_forKeys_count_(NSDictionary, a2, (uint64_t)v6, v5, 2);

  return v3;
}

void sub_20B1891DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41)
{
  if (__p) {
    operator delete(__p);
  }
  long long v44 = *(void **)(v42 - 224);
  if (v44)
  {
    *(void *)(v42 - 216) = v44;
    operator delete(v44);
  }
  int32x4_t v45 = *(void **)(v42 - 200);
  if (v45)
  {
    *(void *)(v42 - 192) = v45;
    operator delete(v45);
  }
  float32x4_t v46 = *(void **)(v42 - 176);
  if (v46)
  {
    *(void *)(v42 - 168) = v46;
    operator delete(v46);
  }

  _Unwind_Resume(a1);
}

void sub_20B1894BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B1894CC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  sub_20B06C324((void *)a1);
  *(void *)a1 = &unk_26BF4F9C8;
  *(_DWORD *)(a1 + 24) = a3;
  id v6 = v5;
  *(void *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v9 = objc_msgSend_transform(v6, v7, v8);

  if (v9)
  {
    uint64_t v12 = objc_msgSend_transform(v6, v10, v11);
    float32x4_t v13 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v12;
  }
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)a1 + 32))(v20, a1);
  float32x4_t v15 = (float32x4_t)v20[0];
  float32x4_t v14 = (float32x4_t)v20[1];
  *(_OWORD *)(a1 + 48) = v20[0];
  *(float32x4_t *)(a1 + 64) = v14;
  float32x4_t v16 = vsubq_f32(v15, v14);
  v15.i64[0] = 0x3F0000003F000000;
  v15.i64[1] = 0x3F0000003F000000;
  float32x4_t v17 = vmulq_f32(v16, v15);
  float v18 = v17.f32[1];
  if (v17.f32[1] < v17.f32[2]) {
    float v18 = v17.f32[2];
  }
  if (v17.f32[0] < v18) {
    v17.f32[0] = v18;
  }
  *(_DWORD *)(a1 + 16) = v17.i32[0];
  *(float *)(a1 + 20) = v17.f32[0] * v17.f32[0];

  return a1;
}

void sub_20B1895D8(_Unwind_Exception *a1)
{
  sub_20B06C6C4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B189608(uint64_t a1)
{
  return sub_20B06C6C4(a1);
}

void sub_20B189644(uint64_t a1)
{
  sub_20B06C6C4(a1);

  JUMPOUT(0x210532650);
}

uint64_t sub_20B189694(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 88);
  if (!v1)
  {
    if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 80), 1u)) {
      operator new();
    }
    return 0;
  }
  return v1;
}

void sub_20B1897F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_20B189830@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  double result = *(void **)(a1 + 32);
  if (result)
  {
    double result = objc_msgSend_boundingBoxAtTime_(result, a2, a3, 0.0);
    *a4 = v6;
    a4[1] = v7;
  }
  return result;
}

BOOL sub_20B189864(uint64_t a1, float32x4_t *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  unsigned __int8 v9 = 0;
  BOOL v4 = MDLAABB::intersect((MDLAABB *)(a1 + 48), a2, (float *)&v10 + 1, (float *)&v10, &v9);
  BOOL v6 = *(float *)&v10 >= 0.0 && v4;
  BOOL result = 0;
  if (v6)
  {
    memset(v11, 0, sizeof(v11));
    LODWORD(v11[0]) = 2139095039;
    long long v7 = *(uint64_t **)(a1 + 88);
    if (v7)
    {
      if (sub_20B04F29C(v7, a2, (uint64_t)v11, 0.0, v5)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_20B189938(uint64_t a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t result = sub_20B189694(a1);
  if (result)
  {
    long long v7 = (uint64_t *)result;
    uint64_t v11 = 0;
    unsigned __int8 v10 = 0;
    uint64_t result = MDLAABB::intersect((MDLAABB *)(a1 + 48), a2, (float *)&v11 + 1, (float *)&v11, &v10);
    if (result)
    {
      LODWORD(v8) = v11;
      if (*(float *)&v11 >= 0.0)
      {
        uint64_t result = sub_20B04F29C(v7, a2, a3, v8, v9);
        if (result) {
          *(void *)(a3 + 64) = a1;
        }
      }
    }
  }
  return result;
}

void sub_20B1899C8()
{
}

void *sub_20B1899DC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26BF4FC78;
  return result;
}

void sub_20B189A14(uint64_t a1, void *a2)
{
  *a2 = &unk_26BF4FC78;
}

void sub_20B189A3C()
{
}

uint64_t sub_20B189A70(uint64_t a1, uint64_t a2)
{
  if (sub_20B05EF6C(a2, (uint64_t)&unk_26BF4F608)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_20B189AB0()
{
  return &unk_26BF4F608;
}

void sub_20B189B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B189CD0(_Unwind_Exception *a1)
{
  float32x4_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20B189E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B18A008(_Unwind_Exception *a1)
{
  float32x4_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20B18A174(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B18A354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B18A3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11)
{
  a11.super_class = (Class)MDLMemoryMappedData;
  [(_Unwind_Exception *)&a11 dealloc];
  _Unwind_Resume(a1);
}

char *sub_20B18A470@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  int v4 = result[63];
  if (v4 < 0) {
    uint64_t v5 = *((void *)result + 6);
  }
  else {
    uint64_t v5 = result[63];
  }
  BOOL v6 = (void **)(result + 40);
  if (v5)
  {
    if ((v4 & 0x80) == 0)
    {
LABEL_6:
      *(_OWORD *)a2 = *(_OWORD *)v6;
      *(void *)(a2 + 16) = *((void *)v2 + 7);
      return result;
    }
  }
  else
  {
    if (result[39] >= 0) {
      size_t v7 = result[39];
    }
    else {
      size_t v7 = *((void *)result + 3);
    }
    uint64_t v13 = 0;
    long long v12 = 0uLL;
    double v8 = &v12;
    sub_20B07D458((uint64_t)&v12, v7 + 5);
    if (v13 < 0) {
      double v8 = (long long *)v12;
    }
    if (v7)
    {
      if (v2[39] >= 0) {
        float32x4_t v9 = v2 + 16;
      }
      else {
        float32x4_t v9 = (const void *)*((void *)v2 + 2);
      }
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, "/Geom");
    if (v2[63] < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = v12;
    *((void *)v2 + 7) = v13;
    sub_20B14EB68((uint64_t *)&v12, (uint64_t *)v2 + 14);
    MEMORY[0x210531090](v10, v2 + 40);
    pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define();
    MEMORY[0x2105309A0](v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)v10);
    uint64_t result = (char *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)uint64_t result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result); {
    }
      }
    if ((v2[63] & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  return (char *)sub_20B07F994((unsigned char *)a2, *((void **)v2 + 5), *((void *)v2 + 6));
}

void sub_20B18A61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_20B0B04EC((uint64_t)&a10);
  uint64_t v16 = a15;
  if (a15)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  _Unwind_Resume(a1);
}

char *sub_20B18A678@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result;
  int v4 = result[87];
  if (v4 < 0) {
    uint64_t v5 = *((void *)result + 9);
  }
  else {
    uint64_t v5 = result[87];
  }
  BOOL v6 = (void **)(result + 64);
  if (v5)
  {
    if ((v4 & 0x80) == 0)
    {
LABEL_6:
      *(_OWORD *)a2 = *(_OWORD *)v6;
      *(void *)(a2 + 16) = *((void *)v2 + 10);
      return result;
    }
  }
  else
  {
    if (result[39] >= 0) {
      size_t v7 = result[39];
    }
    else {
      size_t v7 = *((void *)result + 3);
    }
    uint64_t v13 = 0;
    long long v12 = 0uLL;
    double v8 = &v12;
    sub_20B07D458((uint64_t)&v12, v7 + 10);
    if (v13 < 0) {
      double v8 = (long long *)v12;
    }
    if (v7)
    {
      if (v2[39] >= 0) {
        float32x4_t v9 = v2 + 16;
      }
      else {
        float32x4_t v9 = (const void *)*((void *)v2 + 2);
      }
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, "/Materials");
    if (v2[87] < 0) {
      operator delete(*v6);
    }
    *(_OWORD *)BOOL v6 = v12;
    *((void *)v2 + 10) = v13;
    sub_20B14EB68((uint64_t *)&v12, (uint64_t *)v2 + 14);
    MEMORY[0x210531090](v10, v2 + 64);
    pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define();
    MEMORY[0x2105309A0](v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)v10);
    uint64_t result = (char *)*((void *)&v12 + 1);
    if (*((void *)&v12 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v12 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)uint64_t result = (char *)(*(uint64_t (**)(char *))(*(void *)result + 8))(result); {
    }
      }
    if ((v2[87] & 0x80) == 0) {
      goto LABEL_6;
    }
  }
  return (char *)sub_20B07F994((unsigned char *)a2, *((void **)v2 + 8), *((void *)v2 + 9));
}

void sub_20B18A82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_20B0B04EC((uint64_t)&a10);
  uint64_t v16 = a15;
  if (a15)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20B18A888(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  sub_20B115C64((uint64_t)a2, &v25);
  uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
  if (*(char *)(String + 23) < 0)
  {
    sub_20B07F994(__p, *(void **)String, *(void *)(String + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)String;
    uint64_t v24 = *(void *)(String + 16);
    *(_OWORD *)va_list __p = v7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v25);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  sub_20B14EB68(&v15, (uint64_t *)(a1 + 112));
  if (v24 >= 0) {
    size_t v8 = HIBYTE(v24);
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  *(void *)&long long v26 = 0;
  long long v25 = 0uLL;
  float32x4_t v9 = &v25;
  sub_20B07D458((uint64_t)&v25, v8 + 14);
  if (SBYTE7(v26) < 0) {
    float32x4_t v9 = (long long *)v25;
  }
  if (v8)
  {
    if (v24 >= 0) {
      unsigned __int8 v10 = __p;
    }
    else {
      unsigned __int8 v10 = (void **)__p[0];
    }
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/surfaceShader");
  MEMORY[0x210531090](&v22, &v25);
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v22);
  if (SBYTE7(v26) < 0) {
    operator delete((void *)v25);
  }
  uint64_t v11 = v16;
  if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  MEMORY[0x2105310B0](&v15, "UsdPreviewSurface");
  *(void *)&long long v25 = v15;
  *((void *)&v25 + 1) = (char *)&off_26BF508C8 + 1;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)&long long v25 = v25 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v20);
  if (v19) {
    sub_20B06A5E0(v19);
  }
  sub_20B06A698((uint64_t)&v25);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v25 = 0u;
  long long v26 = 0u;
  MEMORY[0x2105310B0](&v15, "surface");
  long long v12 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput();
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2105310B0](&v22, "surface");
  float32x4_t v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v12);
  if (!v14) {
    float32x4_t v14 = sub_20B0A6508(MEMORY[0x263F90560]);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(&v15, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v14 + 88));
  MEMORY[0x210531AC0](&v15, &v25);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v17);
  if (v16) {
    sub_20B06A5E0(v16);
  }
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((BYTE8(v26) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v26 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v26);
  if (*((void *)&v25 + 1)) {
    sub_20B06A5E0(*((uint64_t *)&v25 + 1));
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20B18AC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_20B119EE4(v25 - 80);
  MEMORY[0x210530BC0](v24);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B18ADA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  sub_20B115C64(a3, &v10);
  uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  if (*(char *)(String + 23) < 0)
  {
    sub_20B07F994(__p, *(void **)String, *(void *)(String + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)String;
    uint64_t v12 = *(void *)(String + 16);
    *(_OWORD *)va_list __p = v9;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v10);
  uint64_t v10 = 19;
  sub_20B18AF98(a1, 0, &v10, v7, a4, (const void **)__p);
  uint64_t v10 = 0;
  sub_20B18AF98(a1, 1, &v10, v7, a4, (const void **)__p);
  uint64_t v10 = 15;
  sub_20B18AF98(a1, 2, &v10, v7, a4, (const void **)__p);
  uint64_t v10 = 13;
  sub_20B18AF98(a1, 3, &v10, v7, a4, (const void **)__p);
  uint64_t v10 = 2;
  sub_20B18AF98(a1, 4, &v10, v7, a4, (const void **)__p);
  uint64_t v10 = 6;
  sub_20B18AF98(a1, 5, &v10, v7, a4, (const void **)__p);
  uint64_t v10 = 11;
  sub_20B18AF98(a1, 7, &v10, v7, a4, (const void **)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20B18AF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B18AF98(uint64_t a1, int a2, uint64_t *a3, void *a4, uint64_t a5, const void **a6)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  id v11 = a4;
  uint64_t v13 = objc_msgSend_propertyWithSemantic_(v11, v12, *a3);
  if (objc_msgSend_type(v13, v14, v15) != 2
    || (objc_msgSend_URLValue(v13, v16, v17), uint64_t v18 = objc_claimAutoreleasedReturnValue(), v18, !v18))
  {
    if (objc_msgSend_type(v13, v16, v17) == 1)
    {
      uint64_t v21 = objc_msgSend_stringValue(v13, v19, v20);

      if (v21)
      {
        uint64_t v22 = objc_msgSend_URLValue(v13, v19, v20);

        if (v22)
        {
          uint64_t v25 = objc_msgSend_URLValue(v13, v23, v24);
          float32x2_t v28 = objc_msgSend_path(v25, v26, v27);
        }
        else
        {
          float32x2_t v28 = objc_msgSend_stringValue(v13, v23, v24);
        }
        memset(&__str, 0, sizeof(__str));
        id v111 = v28;
        long long v43 = (char *)objc_msgSend_UTF8String(v111, v41, v42, a5);
        sub_20B07F8E0(&__str, v43);
        float32x4_t v46 = *(void **)(a1 + 8);
        if (!v46) {
          goto LABEL_61;
        }
        long long v136 = 0uLL;
        *(void *)&long long v137 = 0;
        int32x4_t v47 = objc_msgSend_URLByDeletingLastPathComponent(v46, v44, v45);
        objc_msgSend_path(v47, v48, v49);
        id v50 = objc_claimAutoreleasedReturnValue();
        float32x4_t v53 = (char *)objc_msgSend_UTF8String(v50, v51, v52);
        sub_20B07F8E0(&v136, v53);

        std::string::append((std::string *)&v136, "/");
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        if (SBYTE7(v137) < 0)
        {
          std::string::size_type v55 = *((void *)&v136 + 1);
          if (size <= *((void *)&v136 + 1)) {
            goto LABEL_60;
          }
        }
        else
        {
          std::string::size_type v55 = BYTE7(v137);
          if (size <= BYTE7(v137)) {
            goto LABEL_61;
          }
        }
        std::string::basic_string((std::string *)&v138, &__str, 0, v55, (std::allocator<char> *)&v123);
        uint64_t v45 = *((void *)&v138 + 1);
        if ((SBYTE7(v139) & 0x80u) == 0) {
          uint64_t v61 = BYTE7(v139);
        }
        else {
          uint64_t v61 = *((void *)&v138 + 1);
        }
        uint64_t v62 = BYTE7(v137);
        unsigned __int8 v63 = BYTE7(v137);
        if (SBYTE7(v137) < 0) {
          uint64_t v62 = *((void *)&v136 + 1);
        }
        if (v61 == v62)
        {
          if ((SBYTE7(v137) & 0x80u) == 0) {
            long long v44 = (const char *)&v136;
          }
          else {
            long long v44 = (const char *)v136;
          }
          if ((BYTE7(v139) & 0x80) != 0)
          {
            float32x4_t v108 = (void *)v138;
            int v109 = memcmp((const void *)v138, v44, *((size_t *)&v138 + 1));
            operator delete(v108);
            unsigned __int8 v63 = BYTE7(v137);
            if (!v109) {
              goto LABEL_48;
            }
            goto LABEL_59;
          }
          if (!BYTE7(v139))
          {
LABEL_48:
            if ((v63 & 0x80u) == 0) {
              std::string::size_type v73 = v63;
            }
            else {
              std::string::size_type v73 = *((void *)&v136 + 1);
            }
            std::string::basic_string((std::string *)&v138, &__str, v73, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v123);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v138;
            __str.__r_.__value_.__r.__words[2] = v139;
            if (SBYTE7(v137) < 0) {
              operator delete((void *)v136);
            }
LABEL_62:
            uint64_t v112 = 0;
            uint64_t v113 = 0;
            uint64_t v114 = 0;
            v13;
            uint64_t v133 = 0;
            std::string::size_type v134 = 0;
            uint64_t v135 = 0;
            sub_20B07F8E0(&v133, off_263FFDC70[a2]);
            memset(v132, 0, sizeof(v132));
            sub_20B07F8E0(v132, off_263FFDCB8[a2]);
            long long v130 = 0uLL;
            std::string::size_type v131 = 0;
            if (*((char *)a6 + 23) >= 0) {
              size_t v82 = *((unsigned __int8 *)a6 + 23);
            }
            else {
              size_t v82 = (size_t)a6[1];
            }
            *(void *)&long long v137 = 0;
            long long v136 = 0uLL;
            float32x4_t v83 = &v136;
            sub_20B07D458((uint64_t)&v136, v82 + 10);
            if (SBYTE7(v137) < 0) {
              float32x4_t v83 = (long long *)v136;
            }
            if (v82)
            {
              if (*((char *)a6 + 23) >= 0) {
                uint64_t v84 = a6;
              }
              else {
                uint64_t v84 = *a6;
              }
              memmove(v83, v84, v82);
            }
            strcpy((char *)v83 + v82, "/uvReader_");
            sub_20B07F8E0(&v138, "st");
            if ((SBYTE7(v139) & 0x80u) == 0) {
              float32x4_t v85 = (const std::string::value_type *)&v138;
            }
            else {
              float32x4_t v85 = (const std::string::value_type *)v138;
            }
            if ((SBYTE7(v139) & 0x80u) == 0) {
              std::string::size_type v86 = BYTE7(v139);
            }
            else {
              std::string::size_type v86 = *((void *)&v138 + 1);
            }
            float32x4_t v87 = std::string::append((std::string *)&v136, v85, v86);
            long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
            std::string::size_type v131 = v87->__r_.__value_.__r.__words[2];
            long long v130 = v88;
            v87->__r_.__value_.__l.__size_ = 0;
            v87->__r_.__value_.__r.__words[2] = 0;
            v87->__r_.__value_.__r.__words[0] = 0;
            if (SBYTE7(v139) < 0) {
              operator delete((void *)v138);
            }
            if (SBYTE7(v137) < 0) {
              operator delete((void *)v136);
            }
            long long v138 = 0u;
            long long v139 = 0u;
            unint64_t v89 = (uint64_t *)(a1 + 112);
            int32x4_t v90 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4(v89);
            MEMORY[0x210531090](&v136, &v130);
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v138, v90, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v136);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)&v136);
            uint64_t v127 = 0;
            uint64_t v128 = 0;
            uint64_t v129 = 0;
            LODWORD(v136) = 1;
            *((void *)&v136 + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            *((void *)&v137 + 1) = 0;
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            uint64_t v127 = MEMORY[0x263F906F0] + 16;
            if ((BYTE8(v137) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v137 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)&v137);
            if (*((void *)&v136 + 1)) {
              sub_20B06A5E0(*((uint64_t *)&v136 + 1));
            }
            if (v128
              && (*(unsigned char *)(v128 + 57) & 8) == 0
              && (*(unsigned int (**)(uint64_t *))(v127 + 32))(&v127))
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *(void *)&long long v136 = MEMORY[0x263F906F0] + 16;
              uint64_t v91 = *((void *)&v136 + 1);
              if (*((void *)&v136 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v136 + 1) + 48), 1uLL, memory_order_relaxed);
              }
              uint64_t v92 = v128;
              uint64_t v128 = v91;
              if (v92) {
                sub_20B06A5E0(v92);
              }
              sub_20B14BC9C((uint64_t)&v129, &v137);
              sub_20B14BCF4((uint64_t)&v129 + 4, (_DWORD *)&v137 + 1);
              MEMORY[0x210530BC0](&v136);
              uint64_t v112 = 0;
              uint64_t v113 = 0;
              uint64_t v114 = 0;
              sub_20B14EB68((uint64_t *)&v116, v89);
              if (*((char *)a6 + 23) >= 0) {
                size_t v97 = *((unsigned __int8 *)a6 + 23);
              }
              else {
                size_t v97 = (size_t)a6[1];
              }
              memset(&v118, 0, sizeof(v118));
              long long v98 = &v118;
              sub_20B07D458((uint64_t)&v118, v97 + 1);
              if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v98 = (std::string *)v118.__r_.__value_.__r.__words[0];
              }
              if (v97)
              {
                if (*((char *)a6 + 23) >= 0) {
                  uint64_t v99 = a6;
                }
                else {
                  uint64_t v99 = *a6;
                }
                memmove(v98, v99, v97);
              }
              *(_WORD *)((char *)&v98->__r_.__value_.__l.__data_ + v97) = 47;
              if (v135 >= 0) {
                uint64_t v100 = (const std::string::value_type *)&v133;
              }
              else {
                uint64_t v100 = v133;
              }
              if (v135 >= 0) {
                std::string::size_type v101 = HIBYTE(v135);
              }
              else {
                std::string::size_type v101 = v134;
              }
              uint64_t v102 = std::string::append(&v118, v100, v101);
              long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
              v119.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v103;
              v102->__r_.__value_.__l.__size_ = 0;
              v102->__r_.__value_.__r.__words[2] = 0;
              v102->__r_.__value_.__r.__words[0] = 0;
              uint64_t v104 = std::string::append(&v119, "_texture");
              long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
              *(void *)&long long v137 = *((void *)&v104->__r_.__value_.__l + 2);
              long long v136 = v105;
              v104->__r_.__value_.__l.__size_ = 0;
              v104->__r_.__value_.__r.__words[2] = 0;
              v104->__r_.__value_.__r.__words[0] = 0;
              MEMORY[0x210531090](&v121, &v136);
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_20B06A424((uint64_t)&v121);
              if (SBYTE7(v137) < 0) {
                operator delete((void *)v136);
              }
              if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v119.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v118.__r_.__value_.__l.__data_);
              }
              uint64_t v106 = v117;
              if (v117
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v117 + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
              }
              MEMORY[0x2105310B0](&v118, "UsdUVTexture");
              *(void *)&long long v136 = v118.__r_.__value_.__r.__words[0];
              *((void *)&v136 + 1) = (char *)&off_26BF508C8 + 1;
              if ((v118.__r_.__value_.__s.__data_[0] & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v118.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *(void *)&long long v136 = v136 & 0xFFFFFFFFFFFFFFF8;
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v112, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v136);
              if ((v120 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              sub_20B06A424((uint64_t)&v119.__r_.__value_.__r.__words[2]);
              if (v119.__r_.__value_.__l.__size_) {
                sub_20B06A5E0(v119.__r_.__value_.__l.__size_);
              }
              sub_20B06A698((uint64_t)&v136);
              if ((v118.__r_.__value_.__s.__data_[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v118.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              MEMORY[0x2105310B0](&v116, "file");
              if (!atomic_load(MEMORY[0x263F90560])) {
                sub_20B0A6508(MEMORY[0x263F90560]);
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
              MEMORY[0x210530940](&v136, &__str);
              pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
            }
            sub_20B14EB68(&v123, v89);
            MEMORY[0x210531090](&__p, &v130);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
            uint64_t v93 = *((void *)&v136 + 1);
            if (*((void *)&v136 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v136 + 1) + 48), 1uLL, memory_order_relaxed);
            }
            uint64_t v94 = v128;
            uint64_t v128 = v93;
            if (v94) {
              sub_20B06A5E0(v94);
            }
            sub_20B14BC9C((uint64_t)&v129, &v137);
            sub_20B14BCF4((uint64_t)&v129 + 4, (_DWORD *)&v137 + 1);
            MEMORY[0x210530BC0](&v136);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)&__p);
            uint64_t v95 = v124;
            if (v124
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v124 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
            }
            MEMORY[0x2105310B0](&__p, "UsdPrimvarReader_float2");
            *(void *)&long long v136 = __p;
            *((void *)&v136 + 1) = (char *)&off_26BF508C8 + 1;
            if ((__p & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *(void *)&long long v136 = v136 & 0xFFFFFFFFFFFFFFF8;
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v127, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v136);
            if ((v126 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v126 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)&v125);
            if (v124) {
              sub_20B06A5E0(v124);
            }
            sub_20B06A698((uint64_t)&v136);
            if ((__p & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            long long v136 = 0u;
            long long v137 = 0u;
            MEMORY[0x2105310B0](&__p, "varname");
            if (!atomic_load(MEMORY[0x263F90560])) {
              sub_20B0A6508(MEMORY[0x263F90560]);
            }
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
            if ((__p & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            sub_20B07F8E0(&__p, "st");
            MEMORY[0x2105310C0](&v119, &__p);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>();
          }
          uint64_t v64 = BYTE7(v139) - 1;
          uint64_t v65 = (unsigned __int8 *)&v138;
          do
          {
            int v67 = *v65++;
            int v66 = v67;
            int v69 = *(unsigned __int8 *)v44++;
            int v68 = v69;
            BOOL v71 = v64-- != 0;
            BOOL v72 = v66 == v68;
          }
          while (v66 == v68 && v71);
        }
        else
        {
          BOOL v72 = 0;
        }
        if ((BYTE7(v139) & 0x80) != 0)
        {
          operator delete((void *)v138);
          unsigned __int8 v63 = BYTE7(v137);
          if (v72) {
            goto LABEL_48;
          }
        }
        else if (v72)
        {
          goto LABEL_48;
        }
LABEL_59:
        if ((v63 & 0x80) == 0)
        {
LABEL_61:
          objc_msgSend_lastPathComponent(v111, v44, v45);
          id v78 = objc_claimAutoreleasedReturnValue();
          uint64_t v81 = objc_msgSend_UTF8String(v78, v79, v80);
          MEMORY[0x210532310](&__str, v81);

          goto LABEL_62;
        }
LABEL_60:
        operator delete((void *)v136);
        goto LABEL_61;
      }
    }
    if (objc_msgSend_type(v13, v19, v20) == 3)
    {
      uint64_t v33 = objc_msgSend_textureSamplerValue(v13, v29, v30);
      if (v33)
      {
        float v34 = objc_msgSend_textureSamplerValue(v13, v31, v32);
        objc_msgSend_texture(v34, v35, v36);
      }
    }
    else
    {
      if (objc_msgSend_type(v13, v29, v30) == 8)
      {
        objc_msgSend_float4Value(v13, v37, v38);
        *(void *)&long long v138 = 0;
        *((void *)&v138 + 1) = (char *)&off_26BF50530 + 2;
        operator new();
      }
      if (objc_msgSend_type(v13, v37, v38) == 7)
      {
        objc_msgSend_float3Value(v13, v39, v40);
        *(void *)&long long v138 = 0;
        *((void *)&v138 + 1) = (char *)&off_26BF50530 + 2;
        operator new();
      }
      if (objc_msgSend_type(v13, v39, v40) == 5)
      {
        objc_msgSend_floatValue(v13, v56, v57);
        int v59 = v58;
        MEMORY[0x2105310B0](&v123, off_263FFDC70[a2]);
        if (!atomic_load(MEMORY[0x263F90560])) {
          sub_20B0A6508(MEMORY[0x263F90560]);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        *((void *)&v138 + 1) = &unk_26BF517E3;
        LODWORD(v138) = v59;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
        sub_20B06A698((uint64_t)&v138);
        sub_20B119E88((uint64_t)&v136);
        if ((v123 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else if (objc_msgSend_type(v13, v56, v57) == 4)
      {
        float32x4_t v76 = (CGColor *)objc_msgSend_color(v13, v74, v75);
        CGColorGetComponents(v76);
        ColorSpace = CGColorGetColorSpace(v76);
        if (CGColorSpaceGetModel(ColorSpace) == kCGColorSpaceModelRGB) {
          CGColorGetNumberOfComponents(v76);
        }
        MEMORY[0x2105310B0](&v123, off_263FFDC70[a2]);
        if (!atomic_load(MEMORY[0x263F90560])) {
          sub_20B0A6508(MEMORY[0x263F90560]);
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput();
        *((void *)&v138 + 1) = (char *)&off_26BF50758 + 2;
        operator new();
      }
    }
  }
}

void sub_20B18C5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  MEMORY[0x210530BC0](&a14);
  MEMORY[0x210530BC0](&a45);
  sub_20B0D2974(v62 - 176);
  if (a53 < 0) {
    operator delete(__p);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (*(char *)(v62 - 225) < 0) {
    operator delete(*(void **)(v62 - 248));
  }

  if (a22 < 0) {
    operator delete(a17);
  }

  _Unwind_Resume(a1);
}

void sub_20B18CB80(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v7 = a2;
  size_t v8 = v7;
  long long v9 = *(void **)(a1 + 208);
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v3 = (void *)(a1 + 208);
  do
  {
    unint64_t v10 = v9[4];
    BOOL v11 = v10 >= (unint64_t)v7;
    if (v10 >= (unint64_t)v7) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v9 + 1;
    }
    if (v11) {
      uint64_t v3 = v9;
    }
    long long v9 = (void *)*v12;
  }
  while (*v12);
  if (v3 != (void *)(a1 + 208) && v3[4] <= (unint64_t)v7)
  {

    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    *(void *)a3 = MEMORY[0x263F90740] + 16;
  }
  else
  {
LABEL_12:

    long long v37 = 0uLL;
    uint64_t v38 = 0;
    if (v8)
    {
      uint64_t v3 = objc_msgSend_name(v8, v13, v14);
      sub_20B18D0E4(v3);
      id v4 = objc_claimAutoreleasedReturnValue();
      uint64_t v17 = (char *)objc_msgSend_UTF8String(v4, v15, v16);
    }
    else
    {
      uint64_t v17 = "Default";
    }
    sub_20B07F8E0(&v37, v17);
    if (v8)
    {
    }
    uint64_t v18 = HIBYTE(v38);
    if (v38 < 0) {
      uint64_t v18 = *((void *)&v37 + 1);
    }
    if (v18)
    {
      sub_20B18D248(&v37, (void *)(a1 + 160), (uint64_t)__p);
      if (SHIBYTE(v38) < 0) {
        operator delete((void *)v37);
      }
      long long v37 = *(_OWORD *)__p;
      uint64_t v38 = v35;
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v35 = 0;
      sub_20B18A678((char *)a1, (uint64_t)&v32);
      uint64_t v19 = std::string::append(&v32, "/");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (v38 >= 0) {
        uint64_t v21 = (const std::string::value_type *)&v37;
      }
      else {
        uint64_t v21 = (const std::string::value_type *)v37;
      }
      if (v38 >= 0) {
        std::string::size_type v22 = HIBYTE(v38);
      }
      else {
        std::string::size_type v22 = *((void *)&v37 + 1);
      }
      float32x4_t v23 = std::string::append(&v33, v21, v22);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v35 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)va_list __p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      sub_20B14EB68((uint64_t *)&v33, (uint64_t *)(a1 + 112));
      MEMORY[0x210531090](&v32, __p);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v32);
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
      if (v33.__r_.__value_.__l.__size_
        && atomic_fetch_add_explicit((atomic_uint *volatile)(v33.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
      }
      memset(&v33, 0, sizeof(v33));
      sub_20B18A888(a1, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)a3, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v33);
      if (v8) {
        sub_20B18ADA0(a1, v8, a3, (uint64_t)&v33);
      }
      id v31 = v8;
      v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
      long long v26 = sub_20B19450C(a1 + 200, (unint64_t *)&v31, (uint64_t)&unk_20B1E7420, (id **)&v32);
      uint64_t v27 = v26;
      uint64_t v28 = *(void *)(a3 + 8);
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 48), 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = v26[6];
      v27[6] = v28;
      if (v29) {
        sub_20B06A5E0(v29);
      }
      sub_20B14BC9C((uint64_t)(v27 + 7), (_DWORD *)(a3 + 16));
      sub_20B14BCF4((uint64_t)v27 + 60, (_DWORD *)(a3 + 20));
      id v30 = v31;
      id v31 = 0;

      MEMORY[0x210530BC0](&v33);
      if (SHIBYTE(v35) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      LODWORD(__p[0]) = 1;
      __p[1] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v36 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      *(void *)a3 = MEMORY[0x263F90740] + 16;
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v35);
      if (__p[1]) {
        sub_20B06A5E0((uint64_t)__p[1]);
      }
    }
    if (SHIBYTE(v38) < 0) {
      operator delete((void *)v37);
    }
  }
}

void sub_20B18CF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

id *sub_20B18D0AC(id *a1)
{
  id v2 = *a1;
  *a1 = 0;

  return a1;
}

__CFString *sub_20B18D0E4(void *a1)
{
  id v1 = a1;
  if (objc_msgSend_length(v1, v2, v3))
  {
    id v21 = 0;
    uint64_t v5 = objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x263F08AE8], v4, @"[^A-Za-z0-9]", 1, &v21);
    id v6 = v21;
    uint64_t v9 = objc_msgSend_length(v1, v7, v8);
    objc_msgSend_stringByReplacingMatchesInString_options_range_withTemplate_(v5, v10, (uint64_t)v1, 0, 0, v9, @"_");
    BOOL v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    uint64_t v14 = objc_msgSend_decimalDigitCharacterSet(MEMORY[0x263F08708], v12, v13);
    uint64_t v16 = objc_msgSend_characterAtIndex_(v11, v15, 0);
    if (objc_msgSend_characterIsMember_(v14, v17, v16))
    {
      uint64_t v19 = objc_msgSend_stringByAppendingString_(@"_", v18, (uint64_t)v11);

      BOOL v11 = (__CFString *)v19;
    }
  }
  else
  {
    BOOL v11 = &stru_26BF51EF0;
  }

  return v11;
}

void sub_20B18D20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_20B18D248@<D0>(long long *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a3;
  long long __dst = 0uLL;
  uint64_t v30 = 0;
  LODWORD(a3) = *((char *)a1 + 23);
  if ((a3 & 0x80000000) != 0)
  {
    sub_20B07F994(&__dst, *(void **)a1, *((void *)a1 + 1));
    LOBYTE(a3) = *((unsigned char *)a1 + 23);
  }
  else
  {
    long long __dst = *a1;
    uint64_t v30 = *((void *)a1 + 2);
  }
  a3 = a3;
  if ((a3 & 0x80u) != 0) {
    a3 = *((void *)a1 + 1);
  }
  if (a3)
  {
    uint64_t v5 = 0;
    unsigned int v6 = 1;
    uint64_t v7 = MEMORY[0x263EF8318];
    do
    {
      if (v30 >= 0) {
        p_dst = &__dst;
      }
      else {
        p_dst = (long long *)__dst;
      }
      unsigned int v9 = *((char *)p_dst + v5);
      if ((v9 & 0x80000000) != 0) {
        int v10 = __maskrune(*((char *)p_dst + v5), 0x100uLL);
      }
      else {
        int v10 = *(_DWORD *)(v7 + 4 * v9 + 60) & 0x100;
      }
      if (!v10
        && (v6 == 1 || (v9 & 0x80000000) != 0 || (*(_DWORD *)(v7 + 4 * v9 + 60) & 0x400) == 0)
        && v9 != 47
        && v9 != 95)
      {
        if (v30 >= 0) {
          uint64_t v13 = &__dst;
        }
        else {
          uint64_t v13 = (long long *)__dst;
        }
        *((unsigned char *)v13 + v5) = 95;
      }
      uint64_t v5 = v6;
      unint64_t v11 = *((unsigned __int8 *)a1 + 23);
      if ((v11 & 0x80u) != 0) {
        unint64_t v11 = *((void *)a1 + 1);
      }
    }
    while (v11 > v6++);
  }
  if (sub_20B1935C4(a2, (unsigned __int8 *)&__dst))
  {
    int v14 = 0;
    uint64_t v15 = *MEMORY[0x263F8C2B8];
    uint64_t v17 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v16 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    while (1)
    {
      uint64_t v28 = 0;
      long long v26 = 0u;
      memset(v27, 0, sizeof(v27));
      *(_OWORD *)va_list __p = 0u;
      long long v25 = 0u;
      memset(v23, 0, sizeof(v23));
      long long v22 = 0u;
      sub_20B10C0CC((uint64_t)&v22);
      uint64_t v18 = v30 >= 0 ? &__dst : (long long *)__dst;
      uint64_t v19 = v30 >= 0 ? HIBYTE(v30) : *((void *)&__dst + 1);
      sub_20B07FC90(v23, (uint64_t)v18, v19);
      std::ostream::operator<<();
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      std::stringbuf::str();
      if (!sub_20B1935C4(a2, (unsigned __int8 *)v4)) {
        break;
      }
      if (*(char *)(v4 + 23) < 0) {
        operator delete(*(void **)v4);
      }
      *(void *)&long long v22 = v15;
      *(void *)((char *)&v23[-1] + *(void *)(v15 - 24)) = v17;
      *(void *)&v23[0] = v16;
      *((void *)&v23[0] + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[1]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x2105325E0](v27);
      ++v14;
    }
    sub_20B121E3C((uint64_t)a2, (unsigned __int8 *)v4, v4);
    *(void *)&long long v22 = v15;
    *(void *)((char *)&v23[-1] + *(void *)(v15 - 24)) = v17;
    *(void *)&v23[0] = v16;
    *((void *)&v23[0] + 1) = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x2105325E0](v27);
    if (SHIBYTE(v30) < 0) {
      operator delete((void *)__dst);
    }
  }
  else
  {
    sub_20B121E3C((uint64_t)a2, (unsigned __int8 *)&__dst, (uint64_t)&__dst);
    double result = *(double *)&__dst;
    *(_OWORD *)uint64_t v4 = __dst;
    *(void *)(v4 + 16) = v30;
  }
  return result;
}

void sub_20B18D6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(char *)(v11 - 89) < 0) {
    operator delete(*(void **)(v11 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_20B18D718(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  id v96 = a2;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  LODWORD(__str) = 1;
  *((void *)&__str + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)&v118 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v110 = MEMORY[0x263F90690] + 16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v118);
  uint64_t v7 = objc_msgSend_submeshes(v96, v5, v6);
  unint64_t v92 = objc_msgSend_count(v7, v8, v9);

  if (v92 <= 1)
  {
    sub_20B14EB68((uint64_t *)&v113, (uint64_t *)(a1 + 112));
    pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define();
    uint64_t v14 = *((void *)&__str + 1);
    if (*((void *)&__str + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__str + 1) + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v111 = v14;
    sub_20B14BC9C((uint64_t)&v112, &v118);
    sub_20B14BCF4((uint64_t)&v112 + 4, (_DWORD *)&v118 + 1);
    MEMORY[0x2105308E0](&__str);
    uint64_t v15 = *((void *)&v113 + 1);
    if (*((void *)&v113 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v113 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    sub_20B0D29D0((uint64_t)&__str, &v111, &v112);
    *(_DWORD *)a3 = __str;
    uint64_t v16 = *((void *)&__str + 1);
    *((void *)&__str + 1) = 0;
    uint64_t v17 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = v16;
    if (v17) {
      sub_20B06A5E0(v17);
    }
    sub_20B0D28C0(a3 + 16, (int *)&v118);
    sub_20B0D2918(a3 + 20);
    if (&__str == (long long *)a3)
    {
      uint64_t v19 = *((void *)&v118 + 1);
    }
    else
    {
      uint64_t v18 = *(void *)(a3 + 24);
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v19 = 0;
      *(void *)(a3 + 24) = *((void *)&v118 + 1);
      *((void *)&v118 + 1) = 0;
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v118);
    if (*((void *)&__str + 1)) {
      sub_20B06A5E0(*((uint64_t *)&__str + 1));
    }
  }
  else
  {
    sub_20B14EB68((uint64_t *)&__dst, (uint64_t *)(a1 + 112));
    pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define();
    sub_20B0D29D0((uint64_t)&__str, (uint64_t *)&v113 + 1, &v114);
    *(_DWORD *)a3 = __str;
    uint64_t v10 = *((void *)&__str + 1);
    *((void *)&__str + 1) = 0;
    uint64_t v11 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = v10;
    if (v11) {
      sub_20B06A5E0(v11);
    }
    sub_20B0D28C0(a3 + 16, (int *)&v118);
    sub_20B0D2918(a3 + 20);
    if (&__str == (long long *)a3)
    {
      uint64_t v13 = *((void *)&v118 + 1);
    }
    else
    {
      uint64_t v12 = *(void *)(a3 + 24);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v13 = 0;
      *(void *)(a3 + 24) = *((void *)&v118 + 1);
      *((void *)&v118 + 1) = 0;
    }
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v118);
    if (*((void *)&__str + 1)) {
      sub_20B06A5E0(*((uint64_t *)&__str + 1));
    }
    MEMORY[0x2105309D0](&v113);
    uint64_t v22 = *((void *)&__dst + 1);
    if (*((void *)&__dst + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__dst + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  objc_msgSend_submeshes(v96, v20, v21);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v23, (uint64_t)&v106, v120, 16);
  if (v93)
  {
    uint64_t v91 = *(void *)v107;
    do
    {
      for (uint64_t i = 0; i != v93; ++i)
      {
        if (*(void *)v107 != v91) {
          objc_enumerationMutation(obj);
        }
        uint64_t v95 = *(void **)(*((void *)&v106 + 1) + 8 * i);
        if (v92 >= 2)
        {
          long long v113 = 0uLL;
          *(void *)&long long v114 = 0;
          sub_20B07F8E0(&v113, "");
          uint64_t v27 = objc_msgSend_name(v95, v25, v26);
          BOOL v28 = v27 == 0;

          if (!v28)
          {
            objc_msgSend_name(v95, v29, v30);
            id v31 = objc_claimAutoreleasedReturnValue();
            uint64_t v33 = objc_msgSend_cStringUsingEncoding_(v31, v32, 4);
            MEMORY[0x210532310](&v113, v33);
          }
          uint64_t v34 = BYTE7(v114);
          if (SBYTE7(v114) < 0) {
            uint64_t v34 = *((void *)&v113 + 1);
          }
          if (!v34) {
            MEMORY[0x210532310](&v113, "_");
          }
          long long __dst = 0uLL;
          *(void *)&long long __dst_16 = 0;
          if (*((char *)a5 + 23) < 0)
          {
            sub_20B07F994(&__dst, *(void **)a5, *((void *)a5 + 1));
          }
          else
          {
            long long __dst = *a5;
            *(void *)&long long __dst_16 = *((void *)a5 + 2);
          }
          std::string::size_type v35 = objc_msgSend_submeshes(v96, v29, v30);
          BOOL v38 = (unint64_t)objc_msgSend_count(v35, v36, v37) > 0x10;

          if (v38)
          {
            long long __str = 0u;
            long long v118 = 0u;
            snprintf((char *)&__str, 0x20uLL, "/_%d", 0);
            std::string::append((std::string *)&__dst, (const std::string::value_type *)&__str);
          }
          long long __str = 0uLL;
          *(void *)&long long v118 = 0;
          if ((SBYTE7(__dst_16) & 0x80u) == 0) {
            size_t v39 = BYTE7(__dst_16);
          }
          else {
            size_t v39 = *((void *)&__dst + 1);
          }
          memset(&v116, 0, sizeof(v116));
          sub_20B07D458((uint64_t)&v116, v39 + 1);
          if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v40 = &v116;
          }
          else {
            uint64_t v40 = (std::string *)v116.__r_.__value_.__r.__words[0];
          }
          if (v39)
          {
            if ((SBYTE7(__dst_16) & 0x80u) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (long long *)__dst;
            }
            memmove(v40, p_dst, v39);
          }
          *(_WORD *)((char *)&v40->__r_.__value_.__l.__data_ + v39) = 47;
          if ((SBYTE7(v114) & 0x80u) == 0) {
            uint64_t v42 = (const std::string::value_type *)&v113;
          }
          else {
            uint64_t v42 = (const std::string::value_type *)v113;
          }
          if ((SBYTE7(v114) & 0x80u) == 0) {
            std::string::size_type v43 = BYTE7(v114);
          }
          else {
            std::string::size_type v43 = *((void *)&v113 + 1);
          }
          long long v44 = std::string::append(&v116, v42, v43);
          long long __p = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          *(void *)&long long v98 = *((void *)&v44->__r_.__value_.__l + 2);
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          sub_20B18D248(&__p, (void *)(a1 + 120), (uint64_t)&__str);
          if (SBYTE7(v98) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v116.__r_.__value_.__l.__data_);
          }
          sub_20B14EB68((uint64_t *)&v116, (uint64_t *)(a1 + 112));
          MEMORY[0x210531090](&v115, &__str);
          pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define();
          uint64_t v45 = *((void *)&__p + 1);
          if (*((void *)&__p + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&__p + 1) + 48), 1uLL, memory_order_relaxed);
          }
          uint64_t v46 = v111;
          uint64_t v111 = v45;
          if (v46) {
            sub_20B06A5E0(v46);
          }
          sub_20B14BC9C((uint64_t)&v112, &v98);
          sub_20B14BCF4((uint64_t)&v112 + 4, (_DWORD *)&v98 + 1);
          MEMORY[0x2105308E0](&__p);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_20B06A424((uint64_t)&v115);
          std::string::size_type size = v116.__r_.__value_.__l.__size_;
          if (v116.__r_.__value_.__l.__size_
            && atomic_fetch_add_explicit((atomic_uint *volatile)(v116.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
          }
          if (SBYTE7(v118) < 0) {
            operator delete((void *)__str);
          }
          if (SBYTE7(__dst_16) < 0) {
            operator delete((void *)__dst);
          }
          if (SBYTE7(v114) < 0) {
            operator delete((void *)v113);
          }
        }
        if (v111 && (*(unsigned char *)(v111 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v110 + 32))(&v110))
        {
          MEMORY[0x2105310B0](&v113, "none");
          *((void *)&__str + 1) = (char *)&off_26BF508C8 + 1;
          *(void *)&long long __str = v113;
          if ((v113 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)&long long __str = __str & 0xFFFFFFFFFFFFFFF8;
          }
          pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateSubdivisionSchemeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)&v110, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
          if ((v105 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_20B06A424((uint64_t)&v104);
          if (v103) {
            sub_20B06A5E0(v103);
          }
          sub_20B06A698((uint64_t)&__str);
          if ((v113 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          long long __dst = 0u;
          long long __dst_16 = 0u;
          uint64_t v102 = 1065353216;
          long long __p = 0u;
          long long v98 = 0u;
          uint64_t v99 = 1065353216;
          id v50 = objc_msgSend_indexBuffer(v95, v48, v49);
          int32x4_t v90 = objc_msgSend_map(v50, v51, v52);

          std::string::size_type v55 = (unsigned __int16 *)objc_msgSend_bytes(v90, v53, v54);
          uint64_t v58 = objc_msgSend_indexType(v95, v56, v57);
          switch(v58)
          {
            case 8:
              for (uint64_t j = objc_msgSend_indexCount(v95, v59, v60); j; --j)
              {
                unsigned int v64 = *(unsigned __int8 *)v55;
                std::string::size_type v55 = (unsigned __int16 *)((char *)v55 + 1);
                *(void *)&long long __str = v64;
                sub_20B1947B8((uint64_t)&__p, (unint64_t *)&__str, &__str);
              }
              break;
            case 16:
              for (uint64_t k = objc_msgSend_indexCount(v95, v59, v60); k; --k)
              {
                unsigned int v66 = *v55++;
                *(void *)&long long __str = v66;
                sub_20B1947B8((uint64_t)&__p, (unint64_t *)&__str, &__str);
              }
              break;
            case 32:
              for (uint64_t m = objc_msgSend_indexCount(v95, v59, v60); m; --m)
              {
                uint64_t v62 = *(int *)v55;
                v55 += 2;
                *(void *)&long long __str = v62;
                sub_20B1947B8((uint64_t)&__p, (unint64_t *)&__str, &__str);
              }
              break;
          }
          int v69 = objc_msgSend_topology(v95, v59, v60);
          if (v69)
          {
            uint64_t v70 = objc_msgSend_topology(v95, v67, v68);
            uint64_t v75 = objc_msgSend_faceTopology(v70, v71, v72);
            if (v75)
            {
              float32x4_t v76 = objc_msgSend_topology(v95, v73, v74);
              BOOL v79 = objc_msgSend_faceCount(v76, v77, v78) != 0;

              uint64_t v80 = (void *)v98;
              if ((void)v98) {
                char v81 = v79;
              }
              else {
                char v81 = 1;
              }
              if (v81) {
                goto LABEL_118;
              }
              goto LABEL_115;
            }
          }
          uint64_t v80 = (void *)v98;
          if (!(void)v98) {
            goto LABEL_118;
          }
          do
          {
LABEL_115:
            *(void *)&long long v113 = v80[2];
            if (!sub_20B05FD64(&__dst, (unint64_t *)&v113))
            {
              uint64_t v82 = *((void *)&__dst_16 + 1);
              *(void *)&long long __str = &v113;
              sub_20B1949D8((uint64_t)&__dst, (unint64_t *)&v113, (uint64_t)&unk_20B1E7420, (void **)&__str)[3] = v82;
            }
            uint64_t v80 = (void *)*v80;
          }
          while (v80);
LABEL_118:
          float32x4_t v83 = objc_msgSend_vertexDescriptor(v96, v67, v68);
          float32x4_t v85 = objc_msgSend_attributeNamed_(v83, v84, @"position");

          uint64_t v119 = 0;
          long long __str = 0u;
          long long v118 = 0u;
          sub_20B19091C(v96, v85, (unint64_t *)&__str, (uint64_t)&__dst);
          long long v113 = 0u;
          long long v114 = 0u;
          v116.__r_.__value_.__l.__size_ = (std::string::size_type)&off_26BF50E88;
          sub_20B0A6DA4();
        }
      }
      uint64_t v93 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v24, (uint64_t)&v106, v120, 16);
    }
    while (v93);
  }

  MEMORY[0x2105308E0](&v110);
}

void sub_20B18FE4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_20B05D0D4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B19091C(void *a1, void *a2, unint64_t *a3, uint64_t a4)
{
  id v7 = a1;
  id v92 = a2;
  uint64_t v94 = v7;
  uint64_t v96 = objc_msgSend_bufferIndex(v92, v8, v9);
  uint64_t v12 = objc_msgSend_vertexBuffers(v7, v10, v11);
  uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v12, v13, v96);
  uint64_t v17 = objc_msgSend_map(v14, v15, v16);

  uint64_t v95 = v17;
  uint64_t v20 = objc_msgSend_bytes(v17, v18, v19);
  uint64_t v23 = objc_msgSend_offset(v92, v21, v22);
  uint64_t v26 = objc_msgSend_vertexDescriptor(v7, v24, v25);
  uint64_t v29 = objc_msgSend_layouts(v26, v27, v28);
  id v31 = objc_msgSend_objectAtIndexedSubscript_(v29, v30, v96);
  unint64_t v34 = objc_msgSend_stride(v31, v32, v33);

  if (v34 <= 2)
  {
    uint64_t v37 = objc_msgSend_name(v92, v35, v36);
    NSLog(&cfstr_AttributeStrid.isa, v37);

    if (*a3) {
      sub_20B06A85C(a3);
    }
    goto LABEL_36;
  }
  unint64_t v38 = *(void *)(a4 + 24);
  if (!v38)
  {
    size_t v39 = objc_msgSend_vertexBuffers(v7, v35, v36);
    float v41 = objc_msgSend_objectAtIndexedSubscript_(v39, v40, v96);
    unint64_t v38 = objc_msgSend_length(v41, v42, v43) / v34;
  }
  int v98 = 0;
  uint64_t v97 = 0;
  uint64_t v99 = &v97;
  sub_20B0A7728(a3, v38, &v99);
  uint64_t v93 = objc_msgSend_format(v92, v44, v45);
  uint64_t v48 = (float *)(v20 + v23);
  uint64_t v91 = objc_msgSend_format(v92, v46, v47);
  if (!*(void *)(a4 + 24))
  {
    if (!v38) {
      goto LABEL_36;
    }
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    while (v93 & 0x10000 | v91 & 0x20000)
    {
      if ((v93 & 0x10000) != 0)
      {
        unsigned int v85 = *(unsigned __int8 *)v48;
        unsigned int v86 = *((unsigned __int8 *)v48 + 1);
        unsigned int v87 = *((unsigned __int8 *)v48 + 2);
        sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
        float v83 = (double)v85 * 0.00392156863;
        float v76 = (double)v86 * 0.00392156863;
        double v84 = (double)v87 * 0.00392156863;
LABEL_28:
        float v78 = v84;
        unint64_t v88 = a3[4];
        unint64_t v79 = v88 + 12 * v75;
        *(float *)(v88 + v74) = v83;
        uint64_t v17 = v95;
LABEL_29:
        *(float *)(v79 + 4) = v76;
        *(float *)(v79 + 8) = v78;
        goto LABEL_30;
      }
      if ((v91 & 0x20000) != 0)
      {
        unsigned int v80 = *(unsigned __int8 *)v48;
        unsigned int v81 = *((unsigned __int8 *)v48 + 1);
        unsigned int v82 = *((unsigned __int8 *)v48 + 2);
        sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
        float v83 = (double)v80 * 0.00787401575;
        float v76 = (double)v81 * 0.00787401575;
        double v84 = (double)v82 * 0.00787401575;
        goto LABEL_28;
      }
LABEL_30:
      ++v75;
      uint64_t v48 = (float *)((char *)v48 + v34);
      v74 += 12;
      if (!--v38) {
        goto LABEL_36;
      }
    }
    int v77 = *(_DWORD *)v48;
    float v76 = v48[1];
    float v78 = v48[2];
    sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
    unint64_t v79 = a3[4] + v74;
    *(_DWORD *)unint64_t v79 = v77;
    goto LABEL_29;
  }
  unint64_t v51 = *(void **)(a4 + 16);
  if (!v51) {
    goto LABEL_36;
  }
  while (1)
  {
    unint64_t v52 = v51[3];
    if (v52 >= *a3)
    {
      unint64_t v89 = objc_msgSend_name(v92, v49, v50);
      NSLog(&cfstr_CorruptAttribu.isa, v89);

      if (!*a3) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    uint64_t v53 = v51[2];
    uint64_t v54 = objc_msgSend_vertexBuffers(v94, v49, v50);
    float32x4_t v56 = objc_msgSend_objectAtIndexedSubscript_(v54, v55, v96);
    uint64_t v59 = objc_msgSend_length(v56, v57, v58);
    uint64_t v60 = v53 * v34;

    if (v60 >= v59) {
      break;
    }
    uint64_t v61 = (float *)((char *)v48 + v60);
    if (!(v93 & 0x10000 | v91 & 0x20000))
    {
      int v63 = *(_DWORD *)v61;
      float v62 = v61[1];
      float v64 = v61[2];
      sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      uint64_t v65 = a3[4] + 12 * v52;
      *(_DWORD *)uint64_t v65 = v63;
      goto LABEL_17;
    }
    if ((v93 & 0x10000) != 0)
    {
      unsigned int v71 = *(unsigned __int8 *)v61;
      unsigned int v72 = *((unsigned __int8 *)v61 + 1);
      unsigned int v73 = *((unsigned __int8 *)v61 + 2);
      sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      float v69 = (double)v71 * 0.00392156863;
      float v62 = (double)v72 * 0.00392156863;
      double v70 = (double)v73 * 0.00392156863;
LABEL_16:
      float v64 = v70;
      uint64_t v65 = a3[4] + 12 * v52;
      *(float *)uint64_t v65 = v69;
LABEL_17:
      uint64_t v17 = v95;
      *(float *)(v65 + 4) = v62;
      *(float *)(v65 + 8) = v64;
      goto LABEL_18;
    }
    uint64_t v17 = v95;
    if ((v91 & 0x20000) != 0)
    {
      unsigned int v66 = *(unsigned __int8 *)v61;
      unsigned int v67 = *((unsigned __int8 *)v61 + 1);
      unsigned int v68 = *((unsigned __int8 *)v61 + 2);
      sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      float v69 = (double)v66 * 0.00787401575;
      float v62 = (double)v67 * 0.00787401575;
      double v70 = (double)v68 * 0.00787401575;
      goto LABEL_16;
    }
LABEL_18:
    unint64_t v51 = (void *)*v51;
    if (!v51) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v95;
  int32x4_t v90 = objc_msgSend_name(v92, v49, v50);
  NSLog(&cfstr_CorruptAttribu.isa, v90);

  if (!*a3) {
    goto LABEL_36;
  }
LABEL_35:
  sub_20B06A85C(a3);
LABEL_36:
}

void sub_20B190DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20B190E88(void *a1, void *a2, unint64_t *a3, uint64_t a4)
{
  id v7 = a1;
  id v65 = a2;
  unsigned int v66 = v7;
  uint64_t v10 = objc_msgSend_bufferIndex(v65, v8, v9);
  uint64_t v13 = objc_msgSend_vertexBuffers(v7, v11, v12);
  uint64_t v15 = objc_msgSend_objectAtIndexedSubscript_(v13, v14, v10);
  uint64_t v18 = objc_msgSend_map(v15, v16, v17);

  float v64 = v18;
  uint64_t v21 = objc_msgSend_bytes(v18, v19, v20);
  uint64_t v24 = objc_msgSend_offset(v65, v22, v23);
  uint64_t v27 = objc_msgSend_vertexDescriptor(v7, v25, v26);
  uint64_t v30 = objc_msgSend_layouts(v27, v28, v29);
  std::string v32 = objc_msgSend_objectAtIndexedSubscript_(v30, v31, v10);
  unint64_t v35 = objc_msgSend_stride(v32, v33, v34);

  unint64_t v38 = *(void *)(a4 + 24);
  if (!v38)
  {
    size_t v39 = objc_msgSend_vertexBuffers(v7, v36, v37);
    float v41 = objc_msgSend_objectAtIndexedSubscript_(v39, v40, v10);
    unint64_t v38 = objc_msgSend_length(v41, v42, v43) / v35;
  }
  uint64_t v67 = 0;
  unsigned int v68 = &v67;
  sub_20B1936C8(a3, v38, &v68);
  uint64_t v46 = (uint64_t *)(v21 + v24);
  if (*(void *)(a4 + 24))
  {
    uint64_t v47 = *(void **)(a4 + 16);
    if (v47)
    {
      while (1)
      {
        unint64_t v48 = v47[3];
        if (v48 >= *a3)
        {
          float v62 = objc_msgSend_name(v65, v44, v45);
          NSLog(&cfstr_CorruptAttribu.isa, v62);

          if (!*a3) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        uint64_t v49 = v47[2];
        uint64_t v50 = objc_msgSend_vertexBuffers(v66, v44, v45);
        unint64_t v52 = objc_msgSend_objectAtIndexedSubscript_(v50, v51, v10);
        uint64_t v55 = objc_msgSend_length(v52, v53, v54);
        uint64_t v56 = v49 * v35;

        if (v56 >= v55) {
          break;
        }
        uint64_t v59 = *(uint64_t *)((char *)v46 + v56);
        sub_20B112470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
        *(void *)(a3[4] + 8 * v48) = v59;
        uint64_t v47 = (void *)*v47;
        if (!v47) {
          goto LABEL_17;
        }
      }
      int v63 = objc_msgSend_name(v65, v57, v58);
      NSLog(&cfstr_CorruptAttribu.isa, v63);

      if (!*a3) {
        goto LABEL_17;
      }
LABEL_16:
      sub_20B06A85C(a3);
    }
  }
  else if (v38)
  {
    for (uint64_t i = 0; i != v38; ++i)
    {
      uint64_t v61 = *v46;
      sub_20B112470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3);
      *(void *)(a3[4] + 8 * i) = v61;
      uint64_t v46 = (uint64_t *)((char *)v46 + v35);
    }
  }
LABEL_17:
}

void sub_20B191110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20B1911C8(uint64_t a1, void *a2, int a3)
{
  uint64_t v168 = *MEMORY[0x263EF8340];
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  obuint64_t j = a2;
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v4, (uint64_t)&v161, v167, 16);
  if (v5)
  {
    uint64_t v111 = *(void *)v162;
    long long v109 = (uint64_t *)(a1 + 112);
    long long v114 = (void *)(a1 + 224);
    long long v106 = &v136;
    long long v107 = (uint64_t *)&__p[1];
    do
    {
      uint64_t v8 = 0;
      uint64_t v113 = v5;
      do
      {
        if (*(void *)v162 != v111) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v161 + 1) + 8 * v8);
        std::string::size_type v159 = 0;
        __n128 v158 = 0;
        uint64_t v160 = 0;
        objc_msgSend_path(v9, v6, v7, v106, v107);
        id v10 = objc_claimAutoreleasedReturnValue();
        uint64_t v12 = (char *)objc_msgSend_cStringUsingEncoding_(v10, v11, 4);
        sub_20B07F8E0(&v158, v12);

        sub_20B18A470((char *)a1, (uint64_t)&v143);
        if (v160 >= 0) {
          uint64_t v13 = (const std::string::value_type *)&v158;
        }
        else {
          uint64_t v13 = (const std::string::value_type *)v158;
        }
        if (v160 >= 0) {
          std::string::size_type v14 = HIBYTE(v160);
        }
        else {
          std::string::size_type v14 = v159;
        }
        uint64_t v15 = std::string::append((std::string *)&v143, v13, v14);
        std::string v157 = *v15;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v144[0]) < 0) {
          operator delete((void *)v143);
        }
        long long v155 = 0u;
        long long v156 = 0u;
        LODWORD(v155) = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *((void *)&v156 + 1) = 0;
        memset(&__str, 0, sizeof(__str));
        double v16 = sub_20B18D248((long long *)&v157, (void *)(a1 + 120), (uint64_t)&__str);
        uint64_t v153 = 0;
        MEMORY[0x210531090](&v153, &__str, v16);
        uint64_t v19 = objc_msgSend_instance(v9, v17, v18);
        BOOL v20 = v19 == 0;

        if (v20)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            sub_20B18D718(a1, v9, (uint64_t)&v155, (uint64_t)&v153, (long long *)&v157);
LABEL_57:
            BOOL v30 = 1;
            goto LABEL_58;
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4(v109);
            MEMORY[0x2105310B0](__p, "Camera");
            pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)&v143, v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v153, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
            LODWORD(v155) = v143;
            uint64_t v37 = *((void *)&v143 + 1);
            *((void *)&v143 + 1) = 0;
            uint64_t v38 = *((void *)&v155 + 1);
            *((void *)&v155 + 1) = v37;
            if (v38) {
              sub_20B06A5E0(v38);
            }
            sub_20B0D28C0((uint64_t)&v156, (int *)v144);
            sub_20B0D2918((uint64_t)&v156 + 4);
            if ((BYTE8(v156) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *((void *)&v156 + 1) = *((void *)&v144[0] + 1);
            *((void *)&v144[0] + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)v144);
            if (*((void *)&v143 + 1)) {
              sub_20B06A5E0(*((uint64_t *)&v143 + 1));
            }
            if (((uint64_t)__p[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            int v148 = v155;
            uint64_t v149 = *((void *)&v155 + 1);
            if (*((void *)&v155 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v155 + 1) + 48), 1uLL, memory_order_relaxed);
            }
            sub_20B0B0824(&v150, &v156);
            sub_20B0B0870(&v151, (_DWORD *)&v156 + 1);
            uint64_t v152 = *((void *)&v156 + 1);
            if ((BYTE8(v156) & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v152 &= 0xFFFFFFFFFFFFFFF8;
            }
            sub_20B1BFDD4(v9, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v148);
            if ((v152 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)&v150);
            if (v149) {
              sub_20B06A5E0(v149);
            }
            goto LABEL_57;
          }
          size_t v39 = objc_msgSend_transform(v9, v34, v35);
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();

          if (isKindOfClass)
          {
            sub_20B14EB68((uint64_t *)&v119, v109);
            pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define();
            sub_20B0D29D0((uint64_t)&v143, v107, v106);
            LODWORD(v155) = v143;
            uint64_t v41 = *((void *)&v143 + 1);
            *((void *)&v143 + 1) = 0;
            uint64_t v42 = *((void *)&v155 + 1);
            *((void *)&v155 + 1) = v41;
            if (v42) {
              sub_20B06A5E0(v42);
            }
            sub_20B0D28C0((uint64_t)&v156, (int *)v144);
            sub_20B0D2918((uint64_t)&v156 + 4);
            if ((BYTE8(v156) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *((void *)&v156 + 1) = *((void *)&v144[0] + 1);
            *((void *)&v144[0] + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)v144);
            if (*((void *)&v143 + 1)) {
              sub_20B06A5E0(*((uint64_t *)&v143 + 1));
            }
            MEMORY[0x2105309D0](__p);
            uint64_t v43 = *((void *)&v119 + 1);
            if (*((void *)&v119 + 1)
              && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v119 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
            }
            goto LABEL_57;
          }
          sub_20B14EB68((uint64_t *)&v143, v109);
          pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define();
          MEMORY[0x2105309A0](v147);
          uint64_t v100 = *((void *)&v143 + 1);
          if (*((void *)&v143 + 1)
            && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v143 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
          {
            (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
          }
          BOOL v30 = 0;
        }
        else
        {
          __p[0] = 0;
          __p[1] = 0;
          v136.f64[0] = 0.0;
          uint64_t v23 = objc_msgSend_instance(v9, v21, v22);
          objc_msgSend_path(v23, v24, v25);
          id v26 = objc_claimAutoreleasedReturnValue();
          uint64_t v28 = (char *)objc_msgSend_cStringUsingEncoding_(v26, v27, 4);
          sub_20B07F8E0(__p, v28);

          uint64_t v29 = sub_20B1935C4(v114, (unsigned __int8 *)__p);
          BOOL v30 = v29 != 0;
          if (v29)
          {
            id v31 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4(v109);
            *(void *)&long long v119 = 0;
            pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)&v143, v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v153, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v119);
            LODWORD(v155) = v143;
            uint64_t v32 = *((void *)&v143 + 1);
            *((void *)&v143 + 1) = 0;
            uint64_t v33 = *((void *)&v155 + 1);
            *((void *)&v155 + 1) = v32;
            if (v33) {
              sub_20B06A5E0(v33);
            }
            sub_20B0D28C0((uint64_t)&v156, (int *)v144);
            sub_20B0D2918((uint64_t)&v156 + 4);
            if ((BYTE8(v156) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *((void *)&v156 + 1) = *((void *)&v144[0] + 1);
            *((void *)&v144[0] + 1) = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_20B06A424((uint64_t)v144);
            if (*((void *)&v143 + 1)) {
              sub_20B06A5E0(*((uint64_t *)&v143 + 1));
            }
            if ((v119 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            sub_20B19215C((uint64_t)&v155);
          }
          if (SHIBYTE(v136.f64[0]) < 0) {
            operator delete(__p[0]);
          }
        }
LABEL_58:
        if (sub_20B0D26D8((pxrInternal__aapl__pxrReserved__::UsdObject *)&v155))
        {
          uint64_t v46 = objc_msgSend_transform(v9, v44, v45);
          if (!v46) {
            BOOL v30 = 0;
          }

          if (v30)
          {
            memset(v146, 0, sizeof(v146));
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
            v146[0] = MEMORY[0x263F906B8] + 16;
            uint64_t v145 = 0;
            long long v143 = 0u;
            memset(v144, 0, sizeof(v144));
            __p[0] = 0;
            pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTransformOp();
            if (((uint64_t)__p[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v110 = objc_msgSend_transform(v9, v47, v48);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              unint64_t v51 = objc_msgSend_keyTimes(v110, v49, v50);
              unint64_t v52 = v51;
              if (v110 && v51)
              {
                long long v133 = 0u;
                long long v134 = 0u;
                long long v131 = 0u;
                long long v132 = 0u;
                id v53 = v51;
                uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v53, v54, (uint64_t)&v131, v166, 16);
                if (v57)
                {
                  uint64_t v58 = *(void *)v132;
                  do
                  {
                    for (uint64_t i = 0; i != v57; ++i)
                    {
                      if (*(void *)v132 != v58) {
                        objc_enumerationMutation(v53);
                      }
                      objc_msgSend_doubleValue(*(void **)(*((void *)&v131 + 1) + 8 * i), v55, v56);
                      double v61 = v60;
                      float v64 = objc_msgSend_transform(v9, v62, v63);
                      objc_msgSend_localTransformAtTime_(v64, v65, v66, v61);
                      float32x4_t v115 = v67;
                      float32x4_t v116 = v68;
                      float32x4_t v117 = v69;
                      float32x4_t v118 = v70;

                      unint64_t v73 = objc_msgSend_count(v53, v71, v72);
                      *(float64x2_t *)long long __p = vcvtq_f64_f32(*(float32x2_t *)v115.f32);
                      float64x2_t v136 = vcvt_hight_f64_f32(v115);
                      float64x2_t v137 = vcvtq_f64_f32(*(float32x2_t *)v116.f32);
                      float64x2_t v138 = vcvt_hight_f64_f32(v116);
                      float64x2_t v139 = vcvtq_f64_f32(*(float32x2_t *)v117.f32);
                      float64x2_t v140 = vcvt_hight_f64_f32(v117);
                      float64x2_t v141 = vcvtq_f64_f32(*(float32x2_t *)v118.f32);
                      float64x2_t v142 = vcvt_hight_f64_f32(v118);
                      if (v73 >= 2) {
                        objc_msgSend__timeCodesPerSecond(*(void **)a1, v74, v75);
                      }
                      sub_20B192250((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v143);
                    }
                    uint64_t v57 = objc_msgSend_countByEnumeratingWithState_objects_count_(v53, v55, (uint64_t)&v131, v166, 16);
                  }
                  while (v57);
                }

                unint64_t v52 = v53;
              }
              else
              {
                float32x4_t v96 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
                float64x2_t v97 = vcvt_hight_f64_f32(*MEMORY[0x263EF89A8]);
                *(float64x2_t *)long long __p = vcvtq_f64_f32(*MEMORY[0x263EF89A8]);
                float64x2_t v136 = v97;
                float64x2_t v137 = vcvtq_f64_f32(*(float32x2_t *)v96.f32);
                float64x2_t v138 = vcvt_hight_f64_f32(v96);
                float32x4_t v98 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
                float32x4_t v99 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
                float64x2_t v139 = vcvtq_f64_f32(*(float32x2_t *)v98.f32);
                float64x2_t v140 = vcvt_hight_f64_f32(v98);
                float64x2_t v141 = vcvtq_f64_f32(*(float32x2_t *)v99.f32);
                float64x2_t v142 = vcvt_hight_f64_f32(v99);
                sub_20B192250((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v143);
              }
              goto LABEL_100;
            }
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              unint64_t v52 = objc_msgSend_transform(v9, v76, v77);
              unsigned int v80 = objc_msgSend_keyTimes(v52, v78, v79);
              float v83 = v80;
              if (v80 && objc_msgSend_count(v80, v81, v82))
              {
                long long v129 = 0u;
                long long v130 = 0u;
                long long v127 = 0u;
                long long v128 = 0u;
                id v84 = v83;
                uint64_t v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v84, v85, (uint64_t)&v127, v165, 16);
                if (v88)
                {
                  uint64_t v89 = *(void *)v128;
                  do
                  {
                    for (uint64_t j = 0; j != v88; ++j)
                    {
                      if (*(void *)v128 != v89) {
                        objc_enumerationMutation(v84);
                      }
                      objc_msgSend_doubleValue(*(void **)(*((void *)&v127 + 1) + 8 * j), v86, v87);
                      float64x2_t v141 = 0u;
                      float64x2_t v142 = 0u;
                      float64x2_t v139 = 0u;
                      float64x2_t v140 = 0u;
                      float64x2_t v137 = 0u;
                      float64x2_t v138 = 0u;
                      *(_OWORD *)long long __p = 0u;
                      float64x2_t v136 = 0u;
                      if (v52) {
                        objc_msgSend_double4x4AtTime_(v52, v91, v92, v93);
                      }
                      if ((unint64_t)objc_msgSend_count(v84, v91, v92) < 2)
                      {
                        long long v119 = *(_OWORD *)__p;
                        float64x2_t v120 = v136;
                        float64x2_t v121 = v137;
                        float64x2_t v122 = v138;
                        float64x2_t v123 = v139;
                        float64x2_t v124 = v140;
                        float64x2_t v125 = v141;
                        float64x2_t v126 = v142;
                      }
                      else
                      {
                        long long v119 = *(_OWORD *)__p;
                        float64x2_t v120 = v136;
                        float64x2_t v121 = v137;
                        float64x2_t v122 = v138;
                        float64x2_t v123 = v139;
                        float64x2_t v124 = v140;
                        float64x2_t v125 = v141;
                        float64x2_t v126 = v142;
                        objc_msgSend__timeCodesPerSecond(*(void **)a1, v94, v95);
                      }
                      sub_20B192250((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v143);
                    }
                    uint64_t v88 = objc_msgSend_countByEnumeratingWithState_objects_count_(v84, v86, (uint64_t)&v127, v165, 16);
                  }
                  while (v88);
                }
              }
              else
              {
                float32x4_t v101 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
                float64x2_t v102 = vcvt_hight_f64_f32(*MEMORY[0x263EF89A8]);
                *(float64x2_t *)long long __p = vcvtq_f64_f32(*MEMORY[0x263EF89A8]);
                float64x2_t v136 = v102;
                float64x2_t v137 = vcvtq_f64_f32(*(float32x2_t *)v101.f32);
                float64x2_t v138 = vcvt_hight_f64_f32(v101);
                float32x4_t v103 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
                float32x4_t v104 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
                float64x2_t v139 = vcvtq_f64_f32(*(float32x2_t *)v103.f32);
                float64x2_t v140 = vcvt_hight_f64_f32(v103);
                float64x2_t v141 = vcvtq_f64_f32(*(float32x2_t *)v104.f32);
                float64x2_t v142 = vcvt_hight_f64_f32(v104);
                sub_20B192250((pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *)&v143);
              }

LABEL_100:
            }

            sub_20B0D261C((uint64_t)&v143);
            MEMORY[0x2105309D0](v146);
          }
        }
        if (a3)
        {
          *(void *)&long long v143 = &v158;
          uint64_t v105 = sub_20B194E18((uint64_t)v114, (unsigned __int8 *)&v158, (uint64_t)&unk_20B1E7420, (long long **)&v143);
          std::string::operator=((std::string *)(v105 + 40), &__str);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v153);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if ((BYTE8(v156) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v156 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_20B06A424((uint64_t)&v156);
        if (*((void *)&v155 + 1)) {
          sub_20B06A5E0(*((uint64_t *)&v155 + 1));
        }
        if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v157.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v160) < 0) {
          operator delete(v158);
        }
        ++v8;
      }
      while (v8 != v113);
      uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v6, (uint64_t)&v161, v167, 16);
    }
    while (v5);
  }
}

void sub_20B191E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20B19215C(uint64_t a1)
{
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (v2) {
    sub_20B193890(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 200));
  }
  sub_20B1940A8();
}

uint64_t sub_20B1921F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    sub_20B06A5E0(v3);
  }
  return a1;
}

uint64_t sub_20B192250(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1)
{
  if (!*((unsigned char *)a1 + 132))
  {
    sub_20B0D1BC4((uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
  }
  v2[1] = (uint64_t)"usdGeom/xformOp.h";
  void v2[2] = (uint64_t)"Set";
  void v2[3] = 399;
  v2[4] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::Set(const T &, UsdTimeCode) const [T = pxrInte"
                   "rnal__aapl__pxrReserved__::GfMatrix4d]";
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(v2, a1);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  if ((v2[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 0;
}

void sub_20B192364(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v3 = a2;
  uint64_t v15 = 0;
  sub_20B07F8E0(&v18, ".usda");
  *(_OWORD *)&v17.__r_.__value_.__r.__words[1] = 0uLL;
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
  sub_20B0780A4((uint64_t)&v17, (void *)v17.__r_.__value_.__l.__size_);
  if (v20 < 0) {
    operator delete(v18);
  }
  sub_20B1951F4((uint64_t *)&v18, (uint64_t *)&v15);
  pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  uint64_t v4 = *(atomic_uint **)(a1 + 112);
  *(void *)(a1 + 112) = v17.__r_.__value_.__r.__words[0];
  v17.__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = (uint64_t *)(a1 + 112);
  sub_20B14EAA8(a1 + 112, v4);
  sub_20B14EA78((atomic_uint **)&v17);
  uint64_t v6 = v19;
  if (v19 && atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  if (*v12)
  {
    objc_msgSend_stringWithFormat_(NSString, v5, @"Model IO export preview %.02f", 0x3FF19999A0000000);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    sub_20B14A6F4(v12);
    MEMORY[0x2105310B0](&v17, "customLayerData");
    MEMORY[0x2105310B0](__p, "creator");
    id v10 = v9;
    double v16 = (char *)objc_msgSend_UTF8String(v10, v7, v8);
    uint64_t v19 = 0;
    sub_20B1952DC((uint64_t)&v18, &v16);
  }
  *a3 = 0;
  sub_20B14ED98(a3);
  sub_20B1951C4(&v15);
}

void sub_20B192CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,atomic_uint *a43,uint64_t a44)
{
  sub_20B1951C4(&a43);

  _Unwind_Resume(a1);
}

void sub_20B193040(uint64_t a1)
{
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (v2) {
    sub_20B194164(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 448));
  }
  sub_20B1940A8();
}

uint64_t sub_20B1930D8(uint64_t a1, const char *a2)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

void sub_20B1930E4(uint64_t a1)
{
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (v2) {
    sub_20B193B30(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 312));
  }
  sub_20B1940A8();
}

void sub_20B19317C(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  sub_20B1A804C();
  *(_OWORD *)&v28[8] = 0u;
  *(_OWORD *)&v24[8] = 0u;
  uint64_t v22 = 1065353216;
  id v10 = v7;
  id v11 = v9;
  v12[0] = v10;
  v12[1] = v11;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v21 = 0;
  long long v23 = 0u;
  *(_OWORD *)uint64_t v24 = 0u;
  *(_DWORD *)&_OWORD v24[16] = 1065353216;
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v25 = v26;
  *(_OWORD *)uint64_t v28 = 0u;
  long long v27 = 0u;
  *(_DWORD *)&v28[16] = 1065353216;
  *a4 = 0;
  sub_20B192364((uint64_t)v12, v8, a4);
  sub_20B193EE4((uint64_t)v12);
}

void sub_20B193294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B193EE4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_20B1932BC(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  id v5 = a1;
  id v8 = a2;
  if (v8)
  {
    id v9 = objc_msgSend_URLByDeletingPathExtension(v5, v6, v7);
    uint64_t v12 = objc_msgSend_lastPathComponent(v9, v10, v11);

    id v26 = 0;
    sub_20B19317C(v8, v12, v5, (uint64_t *)&v26);
    if (v26)
    {
      v24[0] = 0;
      v24[1] = 0;
      uint64_t v25 = 0;
      sub_20B1A9238(v5, v13, v14, v24);
      long long v15 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20B14A6F4((uint64_t *)&v26);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(&v22, v15);
      sub_20B193524(&v22);
      long long __p = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      v18[0] = 0;
      v18[1] = 0;
      long long v17 = v18;
      pxrInternal__aapl__pxrReserved__::SdfLayer::Export();
      sub_20B0780A4((uint64_t)&v17, v18[0]);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      uint64_t v16 = v23;
      if (v23 && atomic_fetch_add_explicit((atomic_uint *volatile)(v23 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      sub_20B07F8E0(a3, "");
      if (SHIBYTE(v25) < 0) {
        operator delete(v24[0]);
      }
    }
    else
    {
      sub_20B07F8E0(a3, "Cannot create USD data for export");
    }
    sub_20B14EA78(&v26);
  }
  else
  {
    sub_20B07F8E0(a3, "Cannot export nil asset");
  }
}

void sub_20B193458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_20B14EA78((atomic_uint **)(v28 - 56));

  _Unwind_Resume(a1);
}

uint64_t sub_20B193524(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(sub_20B121ACC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    sub_20B120D88((unint64_t)"/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

unsigned __int8 *sub_20B1935C4(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_20B1220C8((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  id v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (sub_20B122108(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_20B1936C8(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint8x8_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              id v10 = sub_20B112508((uint64_t)a1, a2);
              uint8x8_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint8x8_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_20B112508((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      uint64_t v16 = sub_20B112508((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      long long v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

void sub_20B193890(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_20B193930(uint64_t a1, uint64_t a2)
{
  char v3 = **(unsigned char **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = &unk_26BF51673;
  *(unsigned char *)a2 = v3;
  return 1;
}

uint64_t sub_20B193994(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int8 *)a2;
  uint64_t result = sub_20B0D0F3C(a2);
  if (result)
  {
    uint64_t v5 = *((void *)v2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *v2 == **(unsigned __int8 **)(a1 + 8);
  }
  return result;
}

unsigned char *sub_20B1939F8(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_20B193A08(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20B193A14()
{
  return 1;
}

unint64_t sub_20B193A1C(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20B193A3C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_20B193A50(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20B193A68()
{
  return 0;
}

uint64_t sub_20B193A78()
{
  return MEMORY[0x263F8C230];
}

uint64_t sub_20B193A84()
{
  return 0;
}

uint64_t sub_20B193A8C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B193A98()
{
  return 0;
}

uint64_t sub_20B193AA0()
{
  return 0;
}

BOOL sub_20B193AA8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B193AE0(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], a2);
}

uint64_t sub_20B193B04()
{
  return MEMORY[0x263F8C230];
}

unsigned char *sub_20B193B14@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26BF51673;
  *(unsigned char *)a2 = *result;
  return result;
}

void sub_20B193B30(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_20B193BD0(uint64_t a1, uint64_t a2)
{
  int v3 = **(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = (char *)&off_26BF4FF70 + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t sub_20B193C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t result = sub_20B193E60(a2);
  if (result)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

_DWORD *sub_20B193C98(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20B193CA8(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20B193CB4()
{
  return 1;
}

unint64_t sub_20B193CBC(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20B193CDC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20B193CF0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20B193D08()
{
  return 0;
}

void *sub_20B193D18()
{
  return &unk_26BF4EE40;
}

uint64_t sub_20B193D24()
{
  return 0;
}

uint64_t sub_20B193D2C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B193D38()
{
  return 0;
}

uint64_t sub_20B193D40()
{
  return 0;
}

BOOL sub_20B193D48(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B193D7C(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EE40, a2);
}

void *sub_20B193DA0()
{
  return &unk_26BF4EE40;
}

_DWORD *sub_20B193DB0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26BF4FF70 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_20B193DCC(uint64_t a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0) {
    int v3 = __p;
  }
  else {
    int v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_20B07FC90(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_20B193E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B193E60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return MEMORY[0x270FA4F90](a1, &unk_26BF4EE40);
}

uint64_t sub_20B193EE4(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  return a1;
}

uint64_t sub_20B193F84(uint64_t a1)
{
  sub_20B193FC0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_20B193FC0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      sub_20B078100((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_20B194004(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_20B194004(a1, *a2);
    sub_20B194004(a1, a2[1]);
    sub_20B194060(a2 + 4);
    operator delete(a2);
  }
}

void sub_20B194060(void **a1)
{
  MEMORY[0x210530CB0](a1 + 1);
  uint64_t v2 = *a1;
  *a1 = 0;

  int v3 = *a1;
}

void sub_20B1940A8()
{
}

void sub_20B194100()
{
}

void sub_20B194140(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x60C40DF8E1979);
  _Unwind_Resume(a1);
}

void sub_20B194164(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_20B194204(uint64_t a1, uint64_t *a2)
{
  return 1;
}

uint64_t sub_20B19422C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t result = sub_20B119604(a2);
  if (result)
  {
    uint64_t v5 = v2[1];
    if ((v5 & 4) != 0) {
      uint64_t v2 = (void *)(*(uint64_t (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return (*v2 & 0xFFFFFFFFFFFFFFF8) == (**(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

uint64_t *sub_20B194298(uint64_t *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_20B0A5A2C((uint64_t)&v6, (uint64_t)a1);
  a1[1] = (uint64_t)&off_26BF508C8 + 1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (v7) {
    (*(void (**)(uint64_t *))(v7 + 32))(&v6);
  }
  return a1;
}

void sub_20B194354(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_20B05D0D4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_20B194360(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void *sub_20B194390(void *result)
{
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_20B1943AC(void *result, void *a2)
{
  *a2 = *result;
  void *result = 0;
  return result;
}

uint64_t sub_20B1943BC()
{
  return 1;
}

unint64_t sub_20B1943C4(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL sub_20B1943E8(void *a1, void *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL sub_20B194404(void *a1, void *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_20B194424()
{
  return 0;
}

uint64_t sub_20B194430(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3F88](a2, a1);
}

void *sub_20B194440()
{
  return &unk_26BF4EF78;
}

uint64_t sub_20B19444C()
{
  return 0;
}

uint64_t sub_20B194454()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B194460()
{
  return 0;
}

uint64_t sub_20B194468()
{
  return 0;
}

BOOL sub_20B194470(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7TfTokenE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B1944A4(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4EF78, a2);
}

void *sub_20B1944C8()
{
  return &unk_26BF4EF78;
}

atomic_uint **sub_20B1944D8@<X0>(atomic_uint **result@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t v2 = *result;
  *a2 = *result;
  a2[1] = (atomic_uint *)((char *)&off_26BF508C8 + 1);
  if ((v2 & 7) != 0)
  {
    int v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return result;
}

uint64_t *sub_20B19450C(uint64_t a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_20B1945E0(a1, a4, v11);
    sub_20B05FAEC((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    sub_20B194760((uint64_t)v11, 0);
  }
  return v8;
}

void *sub_20B1945E0@<X0>(uint64_t a1@<X0>, id **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_20B194668(v6 + 4, &v8);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_20B194650(_Unwind_Exception *a1)
{
  sub_20B194760(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_20B194668(void *a1, id **a2)
{
  *a1 = **a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  a1[1] = MEMORY[0x263F90740] + 16;
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_20B06A424((uint64_t)&v4);
  return a1;
}

void sub_20B194744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0D2974((uint64_t)&a9);
  sub_20B18D0AC(v9);
  _Unwind_Resume(a1);
}

void sub_20B194760(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_20B194060(v2 + 4);
    }
    operator delete(v2);
  }
}

void *sub_20B1947B8(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *a2;
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v5)
        {
          if (i[2] == v5) {
            return i;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6) {
              v11 %= v6;
            }
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v5;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_20B05F7E0(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    void *i = *v19;
LABEL_38:
    *unint64_t v19 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20B1949C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20B1949D8(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *a2;
      if (v6 >= v7) {
        unint64_t v9 = v6 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
    id v10 = *(void ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7) {
              v12 %= v7;
            }
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = **a4;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_20B05F7E0(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v9 = v6 % v7;
      }
      else {
        unint64_t v9 = v6;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v9);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v9) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20B194BE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B194BFC(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        unint64_t v7 = (uint64_t *)a1;
      }
      else {
        unint64_t v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    unint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    unint64_t v12 = sub_20B06C280(a1, v11);
    float v13 = v12;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      BOOL v15 = v12;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_20B06A6E8(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void *sub_20B194D64(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

unsigned __int8 *sub_20B194E18(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_20B1220C8(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (sub_20B122108(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  sub_20B1950C0(a1, v9, a4, v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_20B05F7E0(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  sub_20B19516C((uint64_t)v26, 0);
  return i;
}

void sub_20B1950A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_20B19516C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_20B1950C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_20B07F994(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    uint64_t v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_20B195154(_Unwind_Exception *a1)
{
  sub_20B19516C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20B19516C(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_20B078100((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

atomic_uint **sub_20B1951C4(atomic_uint **a1)
{
  return a1;
}

uint64_t *sub_20B1951F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20B14EC50((unint64_t *)(v3 + 16), &v7);
    uint8x8_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    unint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      unint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(unint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_20B1952C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_20B1C0510(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1952DC(uint64_t a1, char **a2)
{
  sub_20B07F8E0(&__p, *a2);
  *(void *)(a1 + 8) = &off_26BF515B8;
  sub_20B1956D4();
}

void sub_20B195338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B195354(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B195374(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B1954F4(a1);
}

uint64_t sub_20B195384()
{
  return 1;
}

unint64_t sub_20B19538C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v4[0] = 0;
  v4[1] = 0;
  if (*(char *)(v1 + 23) >= 0) {
    uint64_t v2 = (const char *)v1;
  }
  else {
    uint64_t v2 = *(const char **)v1;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v4, v2);
  return bswap64(0x9E3779B97F4A7C55 * v4[0]);
}

BOOL sub_20B1953EC(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_20B195560(*a1, *a2);
}

BOOL sub_20B1953F8(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return sub_20B195560(*a1, a2);
}

uint64_t sub_20B195404()
{
  return 0;
}

void *sub_20B195410(uint64_t **a1, void *a2)
{
  int v3 = *((char *)*a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (uint64_t)*a1;
  }
  else {
    uint64_t v4 = **a1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)*a1 + 23);
  }
  else {
    uint64_t v5 = (*a1)[1];
  }
  return sub_20B07FC90(a2, v4, v5);
}

void *sub_20B195438()
{
  return &unk_26BF4F508;
}

uint64_t sub_20B195444()
{
  return 0;
}

uint64_t sub_20B19544C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_20B195458()
{
  return 0;
}

uint64_t sub_20B195460()
{
  return 0;
}

BOOL sub_20B195468(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020B1E7E6CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B1954A4(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F508, a2);
}

void *sub_20B1954C8()
{
  return &unk_26BF4F508;
}

uint64_t sub_20B1954D4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B1954DC(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF515B8;
  sub_20B1956D4();
}

uint64_t *sub_20B1954F4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x210532650](v2, 0x1012C405C87E9CELL);
  }
  return a1;
}

BOOL sub_20B195560(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_20B195604(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 24));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_20B1956B0(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void sub_20B1956D4()
{
}

void sub_20B195758(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

void sub_20B19577C()
{
}

void sub_20B1957D4()
{
}

void sub_20B195814(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v1, 0x60C4070C77B98);
  _Unwind_Resume(a1);
}

uint64_t sub_20B195838(uint64_t result)
{
  return result;
}

id sub_20B19584C(void *a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, int a7)
{
  uint64_t v225 = *MEMORY[0x263EF8340];
  id v189 = a1;
  id v195 = a3;
  id v11 = a4;
  id v183 = a5;
  id v181 = a6;
  unint64_t v194 = v11;
  id v188 = objc_alloc_init(MEMORY[0x263EFF980]);
  uint64_t v12 = MEMORY[0x210532AA0]();
  long long v216 = 0u;
  long long v217 = 0u;
  long long v218 = 0u;
  long long v219 = 0u;
  BOOL v15 = objc_msgSend_layouts(v11, v13, v14);
  uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v216, v224, 16);
  context = (void *)v12;
  if (!v19)
  {

LABEL_50:
    id v100 = v188;
    char v101 = 1;
    float64x2_t v102 = context;
    goto LABEL_81;
  }
  int v20 = 0;
  uint64_t v21 = *(void *)v217;
  do
  {
    for (uint64_t i = 0; i != v19; ++i)
    {
      if (*(void *)v217 != v21) {
        objc_enumerationMutation(v15);
      }
      if (objc_msgSend_stride(*(void **)(*((void *)&v216 + 1) + 8 * i), v17, v18)) {
        ++v20;
      }
    }
    uint64_t v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v17, (uint64_t)&v216, v224, 16);
  }
  while (v19);

  if (!v20) {
    goto LABEL_50;
  }
  unint64_t v25 = 0;
  unsigned int v26 = 0;
  while (1)
  {
    long long v27 = objc_msgSend_layouts(v194, v23, v24);
    BOOL v30 = objc_msgSend_count(v27, v28, v29) > v25;

    if (!v30) {
      break;
    }
    uint64_t v33 = objc_msgSend_layouts(v194, v31, v32);
    uint64_t v35 = objc_msgSend_objectAtIndexedSubscript_(v33, v34, v25);
    BOOL v38 = objc_msgSend_stride(v35, v36, v37) == 0;

    ++v25;
    if (!v38) {
      unsigned int v26 = v25;
    }
  }
  long long v214 = 0u;
  long long v215 = 0u;
  long long v212 = 0u;
  long long v213 = 0u;
  size_t v39 = objc_msgSend_attributes(v194, v31, v32);
  uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v39, v40, (uint64_t)&v212, v223, 16);
  if (v43)
  {
    uint64_t v44 = *(void *)v213;
    do
    {
      for (uint64_t j = 0; j != v43; ++j)
      {
        if (*(void *)v213 != v44) {
          objc_enumerationMutation(v39);
        }
        uint64_t v46 = *(void **)(*((void *)&v212 + 1) + 8 * j);
        if (objc_msgSend_format(v46, v41, v42))
        {
          int v47 = objc_msgSend_bufferIndex(v46, v41, v42);
          if (v26 <= v47 + 1) {
            unsigned int v26 = v47 + 1;
          }
        }
      }
      uint64_t v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v39, v41, (uint64_t)&v212, v223, 16);
    }
    while (v43);
  }

  long long __p = 0;
  v210 = 0;
  uint64_t v211 = 0;
  uint64_t v208 = 0;
  uint64_t v184 = v26;
  sub_20B196848(&__p, v26, &v208);
  long long v204 = 0u;
  long long v205 = 0u;
  long long v206 = 0u;
  long long v207 = 0u;
  objc_msgSend_attributes(v194, v48, v49);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v50, (uint64_t)&v204, v222, 16);
  if (v53)
  {
    uint64_t v54 = *(void *)v205;
    char v190 = 1;
    do
    {
      for (uint64_t k = 0; k != v53; ++k)
      {
        if (*(void *)v205 != v54) {
          objc_enumerationMutation(obj);
        }
        uint64_t v56 = *(void **)(*((void *)&v204 + 1) + 8 * k);
        uint64_t v57 = objc_msgSend_bufferIndex(v56, v51, v52);
        double v60 = objc_msgSend_name(v56, v58, v59);
        float v62 = objc_msgSend_attributeNamed_(v195, v61, (uint64_t)v60);

        id v65 = objc_msgSend_layouts(v195, v63, v64);
        uint64_t v68 = objc_msgSend_bufferIndex(v62, v66, v67);
        float32x4_t v70 = objc_msgSend_objectAtIndexedSubscript_(v65, v69, v68);
        unint64_t v73 = objc_msgSend_stride(v70, v71, v72);

        float v76 = objc_msgSend_layouts(v194, v74, v75);
        float v78 = objc_msgSend_objectAtIndexedSubscript_(v76, v77, v57);
        uint64_t v81 = objc_msgSend_stride(v78, v79, v80);

        if (v81)
        {
          if (!objc_msgSend_format(v56, v82, v83) || !v62)
          {
            uint64_t v92 = __p;
            if (*((void *)__p + v57)) {
              goto LABEL_43;
            }
            unint64_t v94 = a2;
LABEL_42:
            v92[v57] = v94;
            goto LABEL_43;
          }
          uint64_t v86 = objc_msgSend_bufferIndex(v62, v84, v85);
          uint64_t v88 = objc_msgSend_objectAtIndexedSubscript_(v189, v87, v86);
          unint64_t v91 = objc_msgSend_length(v88, v89, v90);

          uint64_t v92 = __p;
          unint64_t v93 = *((void *)__p + v57);
          unint64_t v94 = v91 / v73;
          if (!v93) {
            goto LABEL_42;
          }
          if (v93 != v94)
          {
            if (v93 < v94) {
              unint64_t v94 = *((void *)__p + v57);
            }
            *((void *)__p + v57) = v94;
            if (v190) {
              NSLog(&cfstr_WarningTryingT.isa, v57);
            }
            char v190 = 0;
          }
        }
LABEL_43:
      }
      uint64_t v53 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v51, (uint64_t)&v204, v222, 16);
    }
    while (v53);
  }

  if (v183)
  {
    float64x2_t v97 = v194;
    objc_msgSend_allocator(v183, v95, v96);
    id v182 = (id)objc_claimAutoreleasedReturnValue();
LABEL_47:
    if (!v182) {
      id v182 = (id)objc_opt_new();
    }
    goto LABEL_53;
  }
  float64x2_t v97 = v194;
  if (!v181)
  {
    long long v202 = 0u;
    long long v203 = 0u;
    long long v200 = 0u;
    long long v201 = 0u;
    id v169 = v189;
    uint64_t v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v169, v170, (uint64_t)&v200, v221, 16);
    if (v173)
    {
      uint64_t v174 = *(void *)v201;
      while (2)
      {
        for (uint64_t m = 0; m != v173; ++m)
        {
          if (*(void *)v201 != v174) {
            objc_enumerationMutation(v169);
          }
          int v176 = *(void **)(*((void *)&v200 + 1) + 8 * m);
          v177 = objc_msgSend_null(MEMORY[0x263EFF9D0], v171, v172);
          char isEqual = objc_msgSend_isEqual_(v176, v178, (uint64_t)v177);

          if ((isEqual & 1) == 0)
          {
            objc_msgSend_allocator(v176, v171, v172);
            id v182 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_96;
          }
        }
        uint64_t v173 = objc_msgSend_countByEnumeratingWithState_objects_count_(v169, v171, (uint64_t)&v200, v221, 16);
        if (v173) {
          continue;
        }
        break;
      }
    }
    id v182 = 0;
LABEL_96:

    float64x2_t v97 = v194;
    goto LABEL_47;
  }
  id v182 = v181;
LABEL_53:
  if (v184)
  {
    for (uint64_t n = 0; v184 != n; ++n)
    {
      float32x4_t v104 = objc_msgSend_layouts(v97, v98, v99);
      long long v106 = objc_msgSend_objectAtIndexedSubscript_(v104, v105, n);

      long long v109 = objc_msgSend_null(MEMORY[0x263EFF9D0], v107, v108);
      if (objc_msgSend_isEqual_(v106, v110, (uint64_t)v109))
      {
      }
      else
      {
        BOOL v115 = objc_msgSend_stride(v106, v111, v112) == 0;

        if (!v115)
        {
          unint64_t v116 = *((void *)__p + n);
          uint64_t v117 = objc_msgSend_stride(v106, v113, v114);
          unint64_t v119 = a2;
          if (v116) {
            unint64_t v119 = v116;
          }
          float64x2_t v120 = objc_msgSend_newBufferFromZone_length_type_(v182, v118, (uint64_t)v183, v119 * v117, 1);
          objc_msgSend_addObject_(v188, v121, (uint64_t)v120);
          goto LABEL_62;
        }
      }
      float64x2_t v120 = objc_msgSend_null(MEMORY[0x263EFF9D0], v113, v114);
      objc_msgSend_addObject_(v188, v122, (uint64_t)v120);
LABEL_62:

      float64x2_t v97 = v194;
    }
  }
  long long v198 = 0u;
  long long v199 = 0u;
  long long v196 = 0u;
  long long v197 = 0u;
  objc_msgSend_attributes(v97, v98, v99);
  id v187 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v124 = objc_msgSend_countByEnumeratingWithState_objects_count_(v187, v123, (uint64_t)&v196, v220, 16);
  if (v124)
  {
    uint64_t v191 = *(void *)v197;
    do
    {
      id obja = (id)v124;
      for (iuint64_t i = 0; ii != obja; iuint64_t i = (char *)ii + 1)
      {
        if (*(void *)v197 != v191) {
          objc_enumerationMutation(v187);
        }
        long long v128 = *(void **)(*((void *)&v196 + 1) + 8 * (void)ii);
        if (objc_msgSend_format(v128, v125, v126))
        {
          uint64_t v129 = objc_msgSend_bufferIndex(v128, v125, v126);
          long long v132 = objc_msgSend_layouts(v97, v130, v131);
          long long v134 = objc_msgSend_objectAtIndexedSubscript_(v132, v133, v129);
          float64x2_t v137 = (float *)objc_msgSend_stride(v134, v135, v136);

          float64x2_t v141 = objc_msgSend_objectAtIndexedSubscript_(v188, v138, v129);
          if (v141)
          {
            float64x2_t v142 = objc_msgSend_name(v128, v139, v140);
            long long v144 = objc_msgSend_attributeNamed_(v195, v143, (uint64_t)v142);

            uint64_t v147 = (float *)*((void *)__p + v129);
            if (v144)
            {
              uint64_t v148 = objc_msgSend_bufferIndex(v144, v145, v146);
              int v151 = objc_msgSend_layouts(v195, v149, v150);
              uint64_t v153 = objc_msgSend_objectAtIndexedSubscript_(v151, v152, v148);
              long long v156 = (float *)objc_msgSend_stride(v153, v154, v155);

              __n128 v158 = objc_msgSend_objectAtIndexedSubscript_(v189, v157, v148);
              unint64_t v161 = objc_msgSend_length(v141, v159, v160);
              long long v163 = objc_msgSend_objectAtIndexedSubscript_(v189, v162, v148);
              v166 = (float *)objc_msgSend_length(v163, v164, v165);
              sub_20B1ABF44(v141, v137, v128, v158, v156, v144, v147, v161, v166);
            }
            else if (a7)
            {
              sub_20B1AB93C(v141, v137, v128, v147);
            }
          }
          float64x2_t v97 = v194;
        }
      }
      uint64_t v124 = objc_msgSend_countByEnumeratingWithState_objects_count_(v187, v125, (uint64_t)&v196, v220, 16);
    }
    while (v124);
  }

  float64x2_t v102 = context;
  if (__p)
  {
    v210 = __p;
    operator delete(__p);
  }
  char v101 = 0;
LABEL_81:
  if ((v101 & 1) == 0) {
    id v167 = v188;
  }

  return v188;
}

void sub_20B196158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *__p,uint64_t a49)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_20B1963D4(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  id v6 = a1;
  id v69 = a2;
  id v71 = a4;
  id v7 = objc_alloc_init(MEMORY[0x263EFF980]);
  context = (void *)MEMORY[0x210532AA0]();
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = objc_msgSend_layouts(v6, v8, v9);
    unint64_t v15 = objc_msgSend_count(v12, v13, v14);

    if (v15 <= v10) {
      break;
    }
    uint64_t v18 = objc_msgSend_layouts(v6, v16, v17);
    int v20 = objc_msgSend_objectAtIndexedSubscript_(v18, v19, v10);
    uint64_t v23 = objc_msgSend_stride(v20, v21, v22);

    ++v10;
    if (v23) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = v11;
    }
  }
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v24 = objc_msgSend_attributes(v6, v16, v17);
  uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v25, (uint64_t)&v72, v76, 16);
  if (v28)
  {
    uint64_t v29 = *(void *)v73;
    do
    {
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v73 != v29) {
          objc_enumerationMutation(v24);
        }
        id v31 = *(void **)(*((void *)&v72 + 1) + 8 * i);
        if (objc_msgSend_format(v31, v26, v27))
        {
          int v32 = objc_msgSend_bufferIndex(v31, v26, v27);
          if (v11 <= v32 + 1) {
            uint64_t v11 = (v32 + 1);
          }
          else {
            uint64_t v11 = v11;
          }
        }
      }
      uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v26, (uint64_t)&v72, v76, 16);
    }
    while (v28);
  }

  uint64_t v37 = objc_msgSend_count(v71, v33, v34);
  if (v37 == v11)
  {
    if (v69) {
      id v70 = v69;
    }
    else {
      id v70 = (id)objc_opt_new();
    }
    if (v11)
    {
      uint64_t v42 = 0;
      while (1)
      {
        uint64_t v43 = objc_msgSend_layouts(v6, v38, v39);
        uint64_t v45 = objc_msgSend_objectAtIndexedSubscript_(v43, v44, v42);

        uint64_t v48 = objc_msgSend_null(MEMORY[0x263EFF9D0], v46, v47);
        if (objc_msgSend_isEqual_(v45, v49, (uint64_t)v48)) {
          break;
        }
        BOOL v54 = objc_msgSend_stride(v45, v50, v51) == 0;

        if (v54) {
          goto LABEL_28;
        }
        uint64_t v55 = objc_msgSend_objectAtIndexedSubscript_(v71, v52, v42);
        uint64_t v58 = objc_msgSend_integerValue(v55, v56, v57);
        uint64_t v61 = objc_msgSend_stride(v45, v59, v60);

        uint64_t v63 = objc_msgSend_newBufferFromZone_length_type_(v70, v62, 0, v61 * v58, 1);
        objc_msgSend_addObject_(v7, v64, (uint64_t)v63);
LABEL_29:

        if (v37 == ++v42) {
          goto LABEL_30;
        }
      }

LABEL_28:
      uint64_t v63 = objc_msgSend_null(MEMORY[0x263EFF9D0], v52, v53);
      objc_msgSend_addObject_(v7, v65, (uint64_t)v63);
      goto LABEL_29;
    }
LABEL_30:
  }
  else
  {
    uint64_t v40 = objc_msgSend_count(v71, v35, v36);
    NSLog(&cfstr_UnableToCreate.isa, v40, v11, context);
    id v41 = v7;
  }
  if (v37 == v11) {
    id v66 = v7;
  }

  return v7;
}

void sub_20B19672C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_20B196814(void *a1, unint64_t a2, void *a3, void *a4, void *a5, int a6)
{
  id v6 = sub_20B19584C(a1, a2, a3, a4, a5, 0, a6);

  return v6;
}

void *sub_20B196848(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20B0602A8(a1, a2);
    id v6 = (void *)a1[1];
    id v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20B1968B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1968CC(void *a1, unint64_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (void *)a1[2];
  if (v3 != v2)
  {
    id v6 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 14);
    do
    {
      MEMORY[0x2105310B0](&v43, "vertex");
      uint64_t v8 = (long long *)(v3 + 10);
      uint64_t v7 = v3[10];
      uint64_t v9 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8) != v9)
      {
        MEMORY[0x2105310B0](&v43, "uniform");
        uint64_t v10 = *(void *)v8;
        uint64_t v11 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
        if ((v43 & 7) != 0) {
          atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8) == v11)
        {
          uint64_t v45 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          sub_20B0A3504((uint64_t)&v43, *a2 / 3);
          if (*(void *)v6)
          {
            unint64_t v18 = 0;
            int v19 = 0;
            do
            {
              sub_20B06C1E8(v6);
              int v20 = *(_DWORD *)(a1[18] + 4 * v18);
              if (v20 >= 3)
              {
                uint64_t v21 = 4 * v19;
                int v22 = v20 - 2;
                do
                {
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
                  *(_DWORD *)(v45 + v21) = v18;
                  v21 += 4;
                  ++v19;
                  --v22;
                }
                while (v22);
              }
              ++v18;
            }
            while (*(void *)v6 > v18);
          }
          uint64_t v23 = v3 + 2;
          if (v3[2])
          {
            uint64_t v42 = 0;
            long long v40 = 0u;
            long long v41 = 0u;
            sub_20B0A3504((uint64_t)&v40, v43);
            if (*v23)
            {
              unint64_t v24 = 0;
              do
              {
                sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
                uint64_t v25 = *(int *)(v45 + 4 * v24);
                sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v3 + 2));
                LODWORD(v25) = *(_DWORD *)(v3[6] + 4 * v25);
                sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
                *(_DWORD *)(v42 + 4 * v24++) = v25;
              }
              while (*v23 > v24);
            }
            uint64_t v26 = v42;
            uint64_t v27 = v3[5];
            uint64_t v42 = v3[6];
            uint64_t v28 = v3[4];
            v3[4] = v41;
            long long v29 = *(_OWORD *)v23;
            *(_OWORD *)uint64_t v23 = v40;
            long long v40 = v29;
            v3[5] = *((void *)&v41 + 1);
            v3[6] = v26;
            *(void *)&long long v41 = v28;
            *((void *)&v41 + 1) = v27;
            sub_20B06A6E8((uint64_t)&v40);
          }
          else
          {
            sub_20B0A4010((uint64_t)(v3 + 2), &v43);
          }
          MEMORY[0x2105310B0](&v40, "uniform");
          if (&v40 == v8)
          {
            uint64_t v37 = v40;
          }
          else
          {
            if ((*(void *)v8 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v37 = 0;
            *(void *)uint64_t v8 = v40;
            *(void *)&long long v40 = 0;
          }
          if ((v37 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          sub_20B06A6E8((uint64_t)&v43);
        }
        else
        {
          MEMORY[0x2105310B0](&v43, "faceVarying");
          uint64_t v12 = *(void *)v8;
          BOOL v13 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
          if ((v43 & 7) != 0) {
            atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
          }
          if ((atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8) == v13)
          {
            BOOL v30 = (long long *)(v3 + 2);
            if (v3[2])
            {
              uint64_t v45 = 0;
              long long v43 = 0u;
              long long v44 = 0u;
              sub_20B0A3504((uint64_t)&v43, *a2);
              if (*a2)
              {
                unint64_t v31 = 0;
                do
                {
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
                  uint64_t v32 = *(int *)(a2[4] + 4 * v31);
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v3 + 2));
                  LODWORD(v32) = *(_DWORD *)(v3[6] + 4 * v32);
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
                  *(_DWORD *)(v45 + 4 * v31++) = v32;
                }
                while (*a2 > v31);
              }
              uint64_t v33 = v45;
              uint64_t v34 = v3[5];
              uint64_t v45 = v3[6];
              uint64_t v35 = v3[4];
              v3[4] = v44;
              long long v36 = *v30;
              long long *v30 = v43;
              long long v43 = v36;
              v3[5] = *((void *)&v44 + 1);
              v3[6] = v33;
              *(void *)&long long v44 = v35;
              *((void *)&v44 + 1) = v34;
              sub_20B06A6E8((uint64_t)&v43);
            }
            else
            {
              sub_20B0A4010((uint64_t)(v3 + 2), (long long *)a2);
            }
          }
          else
          {
            MEMORY[0x2105310B0](&v43, "constant");
            uint64_t v14 = *(void *)v8;
            unint64_t v15 = (atomic_uint *)(v43 & 0xFFFFFFFFFFFFFFF8);
            if ((v43 & 7) != 0) {
              atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8) != v15)
            {
              unint64_t v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
              if (v16)
              {
                uint64_t v17 = (const char *)(v16 + 16);
                if (*(char *)(v16 + 39) < 0) {
                  uint64_t v17 = *(const char **)v17;
                }
              }
              else
              {
                uint64_t v17 = "";
              }
              unint64_t v38 = v3[7] & 0xFFFFFFFFFFFFFFF8;
              if (v38)
              {
                uint64_t v39 = (const char *)(v38 + 16);
                if (*(char *)(v38 + 39) < 0) {
                  uint64_t v39 = *(const char **)v39;
                }
              }
              else
              {
                uint64_t v39 = "";
              }
              NSLog(&cfstr_WarningMeshSHa.isa, v17, v39);
            }
          }
        }
      }
      v3 += 12;
    }
    while (v3 != v2);
  }
}

void sub_20B196CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B196D44(uint64_t a1)
{
  uint64_t v2 = sub_20B162F70(*(void *)(a1 + 8));
  uint64_t v3 = sub_20B0A3578(v2);
  uint64_t v4 = (uint64_t *)(a1 + 112);
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  int v5 = *(int **)(a1 + 144);
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  while (v5 != (int *)(*(void *)(a1 + 144) + 4 * *(void *)(a1 + 112)))
  {
    if (*v5 <= 2)
    {
      unint64_t v11 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        uint64_t v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0) {
          uint64_t v12 = *(const char **)v12;
        }
      }
      else
      {
        uint64_t v12 = "";
      }
      NSLog(&cfstr_WarningMeshHas_0.isa, v12);
      return 0;
    }
    ++v5;
  }
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  id v6 = *(int **)(a1 + 144);
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
  uint64_t v7 = *(void *)(a1 + 144) + 4 * *(void *)(a1 + 112);
  if (v6 == (int *)v7)
  {
    unint64_t v9 = 0;
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *v6++;
      v9 += 3 * (v10 - 2);
      v8 += (int)v10 - 2;
    }
    while (v6 != (int *)v7);
  }
  uint64_t v63 = 0;
  memset(v62, 0, sizeof(v62));
  LODWORD(v57[0]) = 0;
  *(void *)&v61[0] = v57;
  sub_20B0A624C(v62, v9, (_DWORD **)v61);
  memset(v61, 0, 40);
  LODWORD(v56[0]) = 0;
  *(void *)&v57[0] = v56;
  sub_20B0A624C((unint64_t *)v61, v8, (_DWORD **)v57);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v13 = *v4;
  uint64_t v58 = 0;
  memset(v57, 0, sizeof(v57));
  sub_20B0A3504((uint64_t)v57, v13 + 1);
  uint64_t v14 = (long long *)(a1 + 152);
  if (v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    do
    {
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112));
      unint64_t v17 = *(int *)(*(void *)(a1 + 144) + 4 * v15);
      int v18 = v59;
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
      *(_DWORD *)(v58 + 4 * v15) = v18;
      sub_20B1971E8(v3, v17, a1 + 152, v16, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v62, &v60, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v61, &v59, v19, v20, v21, v22, v23, v24, v25);
      v16 += v17;
      ++v15;
    }
    while (v13 != v15);
  }
  int v26 = v59;
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
  *(_DWORD *)(v58 + 4 * v13) = v26;
  sub_20B1968CC((void *)a1, v62);
  uint64_t v27 = *(void *)(a1 + 128);
  long long v28 = *(_OWORD *)v4;
  *(_OWORD *)uint64_t v4 = v61[0];
  *(void *)(a1 + 128) = *(void *)&v61[1];
  v61[0] = v28;
  *(void *)&v61[1] = v27;
  long long v29 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)((char *)&v61[1] + 8);
  *(_OWORD *)((char *)&v61[1] + 8) = v29;
  memset(v56, 0, 40);
  sub_20B0A3504((uint64_t)v56, v62[0]);
  if (v62[0])
  {
    unint64_t v30 = 0;
    do
    {
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v62);
      uint64_t v31 = *(int *)(v63 + 4 * v30);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
      LODWORD(v31) = *(_DWORD *)(*(void *)(a1 + 184) + 4 * v31);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v56);
      uint64_t v32 = *(void *)&v56[2];
      *(_DWORD *)(*(void *)&v56[2] + 4 * v30++) = v31;
    }
    while (v62[0] > v30);
  }
  else
  {
    uint64_t v32 = *(void *)&v56[2];
  }
  uint64_t v33 = *(void *)(a1 + 168);
  uint64_t v34 = *((void *)&v56[1] + 1);
  *(void *)(a1 + 168) = *(void *)&v56[1];
  long long v35 = *v14;
  long long *v14 = v56[0];
  v56[0] = v35;
  *(void *)&v56[1] = v33;
  long long v36 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 176) = v34;
  *(void *)(a1 + 184) = v32;
  *(_OWORD *)((char *)&v56[1] + 8) = v36;
  uint64_t v37 = *(void **)(a1 + 440);
  for (uint64_t i = *(void **)(a1 + 448); v37 != i; v37 += 7)
  {
    *uint64_t v37 = 2;
    uint64_t v55 = 0;
    long long v53 = 0u;
    long long v54 = 0u;
    uint64_t v39 = (long long *)(v37 + 1);
    if (v37[1])
    {
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v37 + 1));
      long long v40 = (int *)v37[5];
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v37 + 1));
      uint64_t v41 = v37[5];
      uint64_t v42 = (int *)(v41 + 4 * v37[1]);
      if (v40 != v42)
      {
        do
        {
          uint64_t v43 = *v40;
          int v52 = 0;
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
          int v44 = *(_DWORD *)(v58 + 4 * v43);
          uint64_t v45 = (int)v43 + 1;
          while (1)
          {
            int v52 = v44;
            sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
            if (v44 >= *(_DWORD *)(v58 + 4 * v45)) {
              break;
            }
            sub_20B0C857C((uint64_t)&v53, &v52);
            int v44 = v52 + 1;
          }
          ++v40;
        }
        while (v40 != v42);
        uint64_t v41 = v37[5];
      }
      uint64_t v46 = v55;
      uint64_t v55 = v41;
      uint64_t v47 = v37[3];
      long long v48 = *v39;
      long long v49 = v53;
      v37[3] = v54;
      *uint64_t v39 = v49;
      long long v53 = v48;
      uint64_t v50 = v37[4];
      v37[4] = *((void *)&v54 + 1);
      v37[5] = v46;
      *(void *)&long long v54 = v47;
      *((void *)&v54 + 1) = v50;
    }
    sub_20B06A6E8((uint64_t)&v53);
  }
  sub_20B06A6E8((uint64_t)v56);
  sub_20B06A6E8((uint64_t)v57);
  sub_20B06A6E8((uint64_t)v61);
  sub_20B06A6E8((uint64_t)v62);
  return 1;
}

void sub_20B197164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_20B1971E8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, void *a6, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a7, void *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, double a12, double a13, double a14, float32x4_t a15)
{
  if (a2 >= 3)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        uint64_t v21 = (*a6)++;
        sub_20B06C1E8(this);
        *(_DWORD *)(*((void *)this + 4) + 4 * v21) = a4;
        uint64_t v22 = (*a6)++;
        sub_20B06C1E8(this);
        *(_DWORD *)(*((void *)this + 4) + 4 * v22) = a4 + 1;
        uint64_t v23 = (*a6)++;
        sub_20B06C1E8(this);
        *(_DWORD *)(*((void *)this + 4) + 4 * v23) = a4 + 2;
        uint64_t v24 = (*a8)++;
        sub_20B06C1E8(a7);
        *(_DWORD *)(*((void *)a7 + 4) + 4 * v24) = 3;
        return;
      }
      unint64_t v334 = 0;
      v335 = 0;
      v336 = 0;
      sub_20B07DBAC(&v334, a2);
      uint64_t v52 = 0;
      uint64_t v331 = &v331;
      unint64_t v332 = (void **)&v331;
      unint64_t v333 = 0;
      long long v53 = v335;
      do
      {
        uint64_t v54 = *(void *)(a1 + 32) + 12 * *(int *)(*(void *)(a3 + 32) + 4 * (v52 + a4));
        *(void *)&long long v51 = *(void *)v54;
        DWORD2(v51) = *(_DWORD *)(v54 + 8);
        if (v53 >= v336)
        {
          long long v322 = v51;
          uint64_t v55 = (v53 - (unsigned char *)v334) >> 4;
          if ((unint64_t)(v55 + 1) >> 60) {
            sub_20B05D0BC();
          }
          unint64_t v56 = (v336 - (unsigned char *)v334) >> 3;
          if (v56 <= v55 + 1) {
            unint64_t v56 = v55 + 1;
          }
          if ((unint64_t)(v336 - (unsigned char *)v334) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v56;
          }
          if (v57) {
            uint64_t v58 = (char *)sub_20B077E90((uint64_t)&v336, v57);
          }
          else {
            uint64_t v58 = 0;
          }
          uint64_t v59 = &v58[16 * v55];
          *(_OWORD *)uint64_t v59 = v322;
          long long v53 = v59 + 16;
          uint64_t v61 = (char *)v334;
          uint64_t v60 = v335;
          if (v335 != v334)
          {
            do
            {
              long long v62 = *((_OWORD *)v60 - 1);
              v60 -= 16;
              *((_OWORD *)v59 - 1) = v62;
              v59 -= 16;
            }
            while (v60 != v61);
            uint64_t v60 = (char *)v334;
          }
          unint64_t v334 = v59;
          v335 = v53;
          v336 = &v58[16 * v57];
          if (v60) {
            operator delete(v60);
          }
        }
        else
        {
          *(_OWORD *)long long v53 = v51;
          v53 += 16;
        }
        v335 = v53;
        uint64_t v63 = operator new(0x18uLL);
        v63[4] = v52;
        uint64_t v64 = v331;
        *(void *)uint64_t v63 = v331;
        *((void *)v63 + 1) = &v331;
        v64[1] = v63;
        uint64_t v331 = v63;
        ++v333;
        ++v52;
      }
      while (v52 != a2);
      unint64_t v65 = (v53 - (unsigned char *)v334) >> 4;
      if (v53 == v334)
      {
        *(float *)&long long v51 = 0.0 / (float)v65;
        float32x4_t v72 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v51, 0);
        float32x4_t v73 = 0uLL;
      }
      else
      {
        if (v65 <= 1) {
          uint64_t v66 = 1;
        }
        else {
          uint64_t v66 = (v53 - (unsigned char *)v334) >> 4;
        }
        float32x4_t v67 = 0uLL;
        uint64_t v68 = (float32x4_t *)v334;
        uint64_t v69 = v66;
        do
        {
          float32x4_t v70 = *v68++;
          float32x4_t v67 = vaddq_f32(v70, v67);
          --v69;
        }
        while (v69);
        uint64_t v71 = 0;
        float32x4_t v72 = vmulq_n_f32(v67, 1.0 / (float)v65);
        float32x4_t v73 = 0uLL;
        do
        {
          if (v65 - 1 == v71) {
            uint64_t v74 = 0;
          }
          else {
            uint64_t v74 = v71 + 1;
          }
          int32x4_t v75 = (int32x4_t)vsubq_f32(*((float32x4_t *)v334 + v71), v72);
          int32x4_t v76 = (int32x4_t)vsubq_f32(*((float32x4_t *)v334 + v74), v72);
          int32x4_t v77 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v76, v76), (int8x16_t)v76, 0xCuLL), (float32x4_t)v75)), (float32x4_t)v76, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v75, v75), (int8x16_t)v75, 0xCuLL));
          float32x4_t v73 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL), v73);
          ++v71;
        }
        while (v66 != v71);
      }
      int32x4_t v84 = (int32x4_t)vmulq_f32(v73, v73);
      float v85 = vaddq_f32(vaddq_f32((float32x4_t)v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.i8, 1)), (float32x4_t)vdupq_laneq_s32(v84, 2)).f32[0];
      if (v85 < 1.0e-12)
      {
        unint64_t v86 = a2 - 2;
        int v87 = a4 + 1;
        do
        {
          uint64_t v88 = (*a6)++;
          sub_20B06C1E8(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v88) = a4;
          uint64_t v89 = (*a6)++;
          sub_20B06C1E8(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v89) = v87;
          uint64_t v90 = (*a6)++;
          sub_20B06C1E8(this);
          *(_DWORD *)(*((void *)this + 4) + 4 * v90) = v87 + 1;
          uint64_t v91 = (*a8)++;
          sub_20B06C1E8(a7);
          *(_DWORD *)(*((void *)a7 + 4) + 4 * v91) = 3;
          ++v87;
          --v86;
        }
        while (v86);
LABEL_319:
        sub_20B07F6E8(&v331);
        if (v334)
        {
          v335 = (char *)v334;
          operator delete(v334);
        }
        return;
      }
      float32x4_t v315 = v72;
      unint64_t v317 = (v53 - (unsigned char *)v334) >> 4;
      float v92 = v85;
      float32x2_t v93 = vrsqrte_f32((float32x2_t)LODWORD(v85));
      float32x2_t v94 = vmul_f32(vrsqrts_f32((float32x2_t)LODWORD(v92), vmul_f32(v93, v93)), v93);
      int32x4_t v95 = (int32x4_t)vmulq_n_f32(v73, vmul_f32(v94, vrsqrts_f32((float32x2_t)LODWORD(v92), vmul_f32(v94, v94))).f32[0]);
      int32x4_t v96 = *(int32x4_t *)v334;
      float32x4_t v97 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v95, v95), (int8x16_t)v95, 0xCuLL);
      uint64_t v343 = 0;
      unint64_t v344 = 0;
      unint64_t v345 = 0;
      uint64_t v342 = 1065353216;
      long long v340 = 0u;
      long long v341 = 0u;
      float32x4_t v313 = v97;
      float32x4_t v314 = (float32x4_t)v95;
      unint64_t v316 = (char *)v334;
      if (v53 == v334)
      {
        long long __p = 0;
        int v338 = 0;
        v339 = 0;
      }
      else
      {
        unint64_t v98 = 0;
        int32x4_t v99 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v95, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v96, v96), (int8x16_t)v96, 0xCuLL))), (float32x4_t)v96, v97);
        float32x4_t v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v99, v99), (int8x16_t)v99, 0xCuLL);
        int32x4_t v101 = (int32x4_t)vmulq_f32((float32x4_t)v99, (float32x4_t)v99);
        v101.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v101, 2), *(float32x2_t *)v101.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1)).u32[0];
        float32x2_t v102 = vrsqrte_f32((float32x2_t)v101.u32[0]);
        float32x2_t v103 = vmul_f32(vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v102, v102)), v102);
        int32x4_t v323 = (int32x4_t)vmulq_n_f32(v100, vmul_f32(v103, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v103, v103))).f32[0]);
        int32x4_t v104 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v323, v97)), (float32x4_t)v95, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v323, v323), (int8x16_t)v323, 0xCuLL));
        float32x4_t v105 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v104, v104), (int8x16_t)v104, 0xCuLL);
        int32x4_t v106 = (int32x4_t)vmulq_f32((float32x4_t)v104, (float32x4_t)v104);
        v106.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v106, 2), *(float32x2_t *)v106.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1)).u32[0];
        float32x2_t v107 = vrsqrte_f32((float32x2_t)v106.u32[0]);
        float32x2_t v108 = vmul_f32(vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(v107, v107)), v107);
        float32x4_t v319 = vmulq_n_f32(v105, vmul_f32(v108, vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(v108, v108))).f32[0]);
        long long v109 = (float32x4_t *)v334;
        do
        {
          float32x4_t v110 = v109[v98];
          int32x4_t v111 = (int32x4_t)vmulq_f32(v110, (float32x4_t)v323);
          int32x4_t v112 = (int32x4_t)vmulq_f32(v110, v319);
          *(int32x2_t *)v112.i8 = vzip1_s32((int32x2_t)vadd_f32(vadd_f32(*(float32x2_t *)v111.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v111.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v111, 2)), (int32x2_t)vadd_f32(vadd_f32(*(float32x2_t *)v112.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v112.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v112, 2)));
          long long __p = (void *)v112.i64[0];
          uint64_t v113 = v344;
          if ((unint64_t)v344 >= v345)
          {
            uint64_t v115 = v344 - v343;
            if ((unint64_t)(v115 + 1) >> 61) {
              sub_20B05D0BC();
            }
            unint64_t v116 = (uint64_t)(v345 - (void)v343) >> 2;
            if (v116 <= v115 + 1) {
              unint64_t v116 = v115 + 1;
            }
            if (v345 - (unint64_t)v343 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v117 = v116;
            }
            if (v117)
            {
              float32x4_t v118 = (char *)sub_20B0602EC((uint64_t)&v345, v117);
              v112.i64[0] = (uint64_t)__p;
            }
            else
            {
              float32x4_t v118 = 0;
            }
            unint64_t v119 = (uint64_t *)&v118[8 * v115];
            uint64_t *v119 = v112.i64[0];
            uint64_t v114 = v119 + 1;
            float64x2_t v121 = v343;
            float64x2_t v120 = v344;
            if (v344 != v343)
            {
              do
              {
                uint64_t v122 = *--v120;
                v112.i64[0] = v122;
                *--unint64_t v119 = v122;
              }
              while (v120 != v121);
              float64x2_t v120 = v343;
            }
            uint64_t v343 = v119;
            unint64_t v344 = v114;
            unint64_t v345 = (unint64_t)&v118[8 * v117];
            if (v120) {
              operator delete(v120);
            }
          }
          else
          {
            *unint64_t v344 = v112.i64[0];
            uint64_t v114 = v113 + 1;
          }
          unint64_t v344 = v114;
          if (sub_20B07DD08(&v340, (unint64_t *)&__p, (float32x4_t)v112))
          {
            p_p = &__p;
            uint64_t v124 = sub_20B07DE0C((uint64_t)&v340, (unint64_t *)&__p, v123, (uint64_t)&unk_20B1E7420, (float32x2_t **)&p_p);
            ++v124[3].i32[0];
          }
          else
          {
            p_p = &__p;
            sub_20B07DE0C((uint64_t)&v340, (unint64_t *)&__p, v123, (uint64_t)&unk_20B1E7420, (float32x2_t **)&p_p)[3].i32[0] = 0;
          }
          p_p = &__p;
          if (sub_20B07DE0C((uint64_t)&v340, (unint64_t *)&__p, v125, (uint64_t)&unk_20B1E7420, (float32x2_t **)&p_p)[3].i32[0] >= 3)
          {
            BOOL v188 = 0;
            goto LABEL_156;
          }
          ++v98;
          long long v109 = (float32x4_t *)v334;
        }
        while (v98 < (v335 - (unsigned char *)v334) >> 4);
        uint64_t v126 = v343;
        long long __p = 0;
        int v338 = 0;
        v339 = 0;
        if (v344 != v343)
        {
          long long v127 = 0;
          unint64_t v128 = 0;
          unint64_t v129 = v344 - v343;
          do
          {
            uint64_t v130 = v126[v128++];
            uint64_t v131 = v126[v128 % v129];
            if (v127 >= v339)
            {
              uint64_t v132 = (v127 - (unsigned char *)__p) >> 4;
              if ((unint64_t)(v132 + 1) >> 60) {
                sub_20B05D0BC();
              }
              unint64_t v133 = (v339 - (unsigned char *)__p) >> 3;
              if (v133 <= v132 + 1) {
                unint64_t v133 = v132 + 1;
              }
              if ((unint64_t)(v339 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v134 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v134 = v133;
              }
              if (v134) {
                uint64_t v135 = (char *)sub_20B077E90((uint64_t)&v339, v134);
              }
              else {
                uint64_t v135 = 0;
              }
              uint64_t v136 = (uint64_t *)&v135[16 * v132];
              uint64_t *v136 = v130;
              v136[1] = v131;
              float64x2_t v138 = (char *)__p;
              float64x2_t v137 = v338;
              float64x2_t v139 = (char *)v136;
              if (v338 != __p)
              {
                do
                {
                  *((_OWORD *)v139 - 1) = *((_OWORD *)v137 - 1);
                  v139 -= 16;
                  v137 -= 16;
                }
                while (v137 != v138);
                float64x2_t v137 = (char *)__p;
              }
              long long v127 = (char *)(v136 + 2);
              long long __p = v139;
              int v338 = (char *)(v136 + 2);
              v339 = &v135[16 * v134];
              if (v137) {
                operator delete(v137);
              }
            }
            else
            {
              *(void *)long long v127 = v130;
              *((void *)v127 + 1) = v131;
              v127 += 16;
            }
            int v338 = v127;
            uint64_t v126 = v343;
            unint64_t v129 = v344 - v343;
          }
          while (v129 > v128);
          uint64_t v140 = (char *)__p;
          if (v127 != __p)
          {
            float64x2_t v141 = 0;
            unint64_t v142 = 0;
            long long v143 = 0;
            long long v144 = 0;
            do
            {
              uint64_t v145 = (float32x2_t *)&v140[16 * v142];
              float32x2_t v147 = *v145;
              float32x2_t v146 = v145[1];
              int32x2_t v148 = vcgt_f32(*v145, v146);
              if (v148.i8[0] & 1) != 0 || (vceq_f32(v147, v146).u8[0] & 1) != 0 && (v148.i8[4])
              {
                *uint64_t v145 = v146;
                *((float32x2_t *)__p + 2 * v142 + 1) = v147;
                uint64_t v140 = (char *)__p;
                uint64_t v149 = (float32x2_t *)((char *)__p + 16 * v142);
                float32x2_t v147 = *v149;
                float32x2_t v146 = v149[1];
              }
              uint64_t v150 = &v140[16 * v142];
              if (v143 >= v141)
              {
                unint64_t v152 = 0xAAAAAAAAAAAAAAABLL * (v143 - v144) + 1;
                if (v152 > 0xAAAAAAAAAAAAAAALL) {
                  goto LABEL_324;
                }
                if (0x5555555555555556 * (v141 - v144) > v152) {
                  unint64_t v152 = 0x5555555555555556 * (v141 - v144);
                }
                if (0xAAAAAAAAAAAAAAABLL * (v141 - v144) >= 0x555555555555555) {
                  unint64_t v153 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v153 = v152;
                }
                if (v153)
                {
                  if (v153 > 0xAAAAAAAAAAAAAAALL) {
                    goto LABEL_326;
                  }
                  uint64_t v154 = (char *)operator new(24 * v153);
                }
                else
                {
                  uint64_t v154 = 0;
                }
                uint64_t v155 = &v154[8 * (v143 - v144)];
                *(float32x2_t *)uint64_t v155 = v147;
                *((void *)v155 + 1) = v150;
                v155[16] = 1;
                *(_DWORD *)(v155 + 17) = 0;
                *((_DWORD *)v155 + 5) = 0;
                if (v143 == v144)
                {
                  long long v144 = (float32x2_t *)&v154[8 * (v143 - v144)];
                }
                else
                {
                  long long v156 = (float32x2_t *)&v154[8 * (v143 - v144)];
                  do
                  {
                    long long v157 = *(_OWORD *)v143[-3].f32;
                    v156[-1] = v143[-1];
                    *(_OWORD *)v156[-3].f32 = v157;
                    v156 -= 3;
                    v143 -= 3;
                  }
                  while (v143 != v144);
                  long long v143 = v144;
                  long long v144 = v156;
                }
                float64x2_t v141 = (float32x2_t *)&v154[24 * v153];
                int v151 = (float32x2_t *)(v155 + 24);
                if (v143) {
                  operator delete(v143);
                }
              }
              else
              {
                *long long v143 = v147;
                v143[1] = (float32x2_t)v150;
                v143[2].i8[0] = 1;
                *(__int32 *)((char *)v143[2].i32 + 1) = 0;
                int v151 = v143 + 3;
                v143[2].i32[1] = 0;
              }
              if (v151 >= v141)
              {
                __n128 v158 = v150;
                unint64_t v159 = 0xAAAAAAAAAAAAAAABLL * (v151 - v144) + 1;
                if (v159 > 0xAAAAAAAAAAAAAAALL) {
LABEL_324:
                }
                  sub_20B05D0BC();
                if (0x5555555555555556 * (v141 - v144) > v159) {
                  unint64_t v159 = 0x5555555555555556 * (v141 - v144);
                }
                if (0xAAAAAAAAAAAAAAABLL * (v141 - v144) >= 0x555555555555555) {
                  unint64_t v160 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v160 = v159;
                }
                if (v160)
                {
                  if (v160 > 0xAAAAAAAAAAAAAAALL) {
LABEL_326:
                  }
                    sub_20B05D178();
                  unint64_t v161 = (char *)operator new(24 * v160);
                }
                else
                {
                  unint64_t v161 = 0;
                }
                long long v162 = (float32x2_t *)&v161[8 * (v151 - v144)];
                *long long v162 = v146;
                float64x2_t v141 = (float32x2_t *)&v161[24 * v160];
                long long v143 = v162 + 3;
                v162[1] = (float32x2_t)v158;
                v162[2] = 0;
                if (v151 == v144) {
                  goto LABEL_127;
                }
                do
                {
                  long long v163 = *(_OWORD *)v151[-3].f32;
                  v162[-1] = v151[-1];
                  *(_OWORD *)v162[-3].f32 = v163;
                  v162 -= 3;
                  v151 -= 3;
                }
                while (v151 != v144);
                if (v144) {
LABEL_127:
                }
                  operator delete(v144);
                long long v144 = v162;
              }
              else
              {
                *int v151 = v146;
                long long v143 = v151 + 3;
                v151[1] = (float32x2_t)v150;
                v151[2] = 0;
              }
              ++v142;
              uint64_t v140 = (char *)__p;
            }
            while (v142 < (v338 - (unsigned char *)__p) >> 4);
LABEL_136:
            unint64_t v176 = ((char *)v143 - (char *)v144) / 24;
            unint64_t v177 = 126 - 2 * __clz(v176);
            p_p = (void **)sub_20B198CBC;
            if (v143 == v144) {
              uint64_t v178 = 0;
            }
            else {
              uint64_t v178 = v177;
            }
            sub_20B198F68((unint64_t)v144, (unint64_t)v143, (uint64_t (**)(long long *, long long *))&p_p, v178, 1);
            p_p = 0;
            int v347 = 0;
            uint64_t v348 = 0;
            uint64_t v179 = sub_20B0D2D7C(&p_p);
            if (v143 == v144)
            {
              sub_20B0D2F48(v179);
              BOOL v183 = 0;
              if (!v143)
              {
LABEL_154:
                BOOL v188 = !v183;
                if (__p)
                {
                  int v338 = (char *)__p;
                  operator delete(__p);
                }
LABEL_156:
                sub_20B05F1D0((uint64_t)&v340);
                if (v343)
                {
                  unint64_t v344 = v343;
                  operator delete(v343);
                }
                if (!v188)
                {
                  unint64_t v205 = a2 - 2;
                  int v206 = a4 + 1;
                  do
                  {
                    uint64_t v207 = (*a6)++;
                    sub_20B06C1E8(this);
                    *(_DWORD *)(*((void *)this + 4) + 4 * v207) = a4;
                    uint64_t v208 = (*a6)++;
                    sub_20B06C1E8(this);
                    *(_DWORD *)(*((void *)this + 4) + 4 * v208) = v206;
                    uint64_t v209 = (*a6)++;
                    sub_20B06C1E8(this);
                    *(_DWORD *)(*((void *)this + 4) + 4 * v209) = v206 + 1;
                    uint64_t v210 = (*a8)++;
                    sub_20B06C1E8(a7);
                    *(_DWORD *)(*((void *)a7 + 4) + 4 * v210) = 3;
                    ++v206;
                    --v205;
                  }
                  while (v205);
                  goto LABEL_319;
                }
                if (v53 != v316)
                {
                  uint64_t v189 = 0;
                  float32x4_t v190 = vsubq_f32(*(float32x4_t *)v334, v315);
                  int32x4_t v191 = (int32x4_t)vmulq_f32(v190, v190);
                  v191.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v191.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v191.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v191, 2)).u32[0];
                  float32x2_t v192 = vrsqrte_f32((float32x2_t)v191.u32[0]);
                  float32x2_t v193 = vmul_f32(vrsqrts_f32((float32x2_t)v191.u32[0], vmul_f32(v192, v192)), v192);
                  int32x4_t v194 = (int32x4_t)vmulq_n_f32(v190, vmul_f32(v193, vrsqrts_f32((float32x2_t)v191.u32[0], vmul_f32(v193, v193))).f32[0]);
                  int32x4_t v195 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v194, v194), (int8x16_t)v194, 0xCuLL), v314)), v313, (float32x4_t)v194);
                  float32x4_t v196 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v195, v195), (int8x16_t)v195, 0xCuLL);
                  if (v317 <= 1) {
                    uint64_t v197 = 1;
                  }
                  else {
                    uint64_t v197 = v317;
                  }
                  do
                  {
                    float32x4_t v198 = vsubq_f32(*((float32x4_t *)v334 + v189), v315);
                    int32x4_t v199 = (int32x4_t)vmulq_f32(v198, (float32x4_t)v194);
                    int32x4_t v200 = (int32x4_t)vmulq_f32(v198, v196);
                    float32x2_t v201 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v199.i8, *(int32x2_t *)v200.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v199.i8, *(int32x2_t *)v200.i8));
                    int32x4_t v202 = vzip2q_s32(v199, v200);
                    *(float32x2_t *)v202.i8 = vadd_f32(v201, *(float32x2_t *)v202.i8);
                    v202.i32[2] = 0;
                    *((int32x4_t *)v334 + v189++) = v202;
                  }
                  while (v197 != v189);
                }
                unint64_t v344 = 0;
                unint64_t v345 = 0;
                uint64_t v343 = (uint64_t *)&v344;
                long long v203 = v332;
                *(void *)&long long v340 = v332;
                if (v332 == (void **)&v331)
                {
                  long long v204 = (void **)&v331;
                }
                else
                {
                  do
                  {
                    if (sub_20B198C08((uint64_t *)&v340, (uint64_t)&v331, &v334)) {
                      sub_20B07F2D8(&v343, (uint64_t *)&v344, (int *)v203 + 4, (_DWORD *)v203 + 4);
                    }
                    long long v203 = (void **)v203[1];
                    *(void *)&long long v340 = v203;
                  }
                  while (v203 != (void **)&v331);
                  long long v204 = v332;
                }
                long long __p = v204;
                v330 = (void **)&v331;
                int v211 = v333;
                if (v333 < 3)
                {
LABEL_306:
                  sub_20B05D2CC((uint64_t)&v343, v344);
                  v299 = 0;
                  unint64_t v344 = 0;
                  unint64_t v345 = 0;
                  uint64_t v343 = (uint64_t *)&v344;
                  if (v333 >= 4)
                  {
                    unsigned __int32 v300 = v332;
                    do
                    {
                      v301 = v332;
                      if (v332 == v300) {
                        v302 = (void **)&v331;
                      }
                      else {
                        v302 = v300;
                      }
                      int v303 = *((_DWORD *)*v302 + 4);
                      int v304 = *((_DWORD *)v300 + 4);
                      if (v300[1] != &v331) {
                        v301 = (void **)v300[1];
                      }
                      int v305 = *((_DWORD *)v301 + 4);
                      uint64_t v306 = (*a6)++;
                      sub_20B06C1E8(this);
                      *(_DWORD *)(*((void *)this + 4) + 4 * v306) = v303 + a4;
                      uint64_t v307 = (*a6)++;
                      sub_20B06C1E8(this);
                      *(_DWORD *)(*((void *)this + 4) + 4 * v307) = v304 + a4;
                      uint64_t v308 = (*a6)++;
                      sub_20B06C1E8(this);
                      *(_DWORD *)(*((void *)this + 4) + 4 * v308) = v305 + a4;
                      uint64_t v309 = (*a8)++;
                      sub_20B06C1E8(a7);
                      *(_DWORD *)(*((void *)a7 + 4) + 4 * v309) = 3;
                      v311 = *v300;
                      int v310 = (void **)v300[1];
                      if (v310 == (void **)&v331) {
                        v312 = v332;
                      }
                      else {
                        v312 = (void **)v300[1];
                      }
                      v311[1] = v310;
                      *(void *)v300[1] = v311;
                      --v333;
                      operator delete(v300);
                      unsigned __int32 v300 = v312;
                    }
                    while (v333 > 2);
                    sub_20B07F6E8(&v331);
                    v299 = v344;
                  }
                  sub_20B05D2CC((uint64_t)&v343, v299);
                  goto LABEL_319;
                }
                if (v333 == 3)
                {
                  long long v212 = v204;
LABEL_300:
                  unint64_t v297 = v332;
                  if (v332 == v204) {
                    v298 = (void **)&v331;
                  }
                  else {
                    v298 = v204;
                  }
                  if (v212[1] != &v331) {
                    unint64_t v297 = (void **)v212[1];
                  }
                  sub_20B198B48(this, a6, a7, a8, *((_DWORD *)*v298 + 4) + a4, *((_DWORD *)v212 + 4) + a4, *((_DWORD *)v297 + 4) + a4);
                  goto LABEL_306;
                }
                int v213 = 0;
                unint64_t v214 = v333;
                while (1)
                {
                  uint64_t v215 = *((int *)v204 + 4);
                  long long v216 = v344;
                  if (!v344) {
                    goto LABEL_186;
                  }
                  long long v217 = &v344;
                  do
                  {
                    long long v218 = v216;
                    long long v219 = v217;
                    int v220 = *((_DWORD *)v216 + 7);
                    uint64_t v221 = v216 + 1;
                    if (v220 >= (int)v215)
                    {
                      uint64_t v221 = v218;
                      long long v217 = (void **)v218;
                    }
                    long long v216 = (void *)*v221;
                  }
                  while (v216);
                  if (v217 == &v344) {
                    goto LABEL_186;
                  }
                  if (v220 < (int)v215) {
                    long long v218 = v219;
                  }
                  if ((int)v215 >= *((_DWORD *)v218 + 7))
                  {
                    v243 = v332;
                  }
                  else
                  {
LABEL_186:
                    unint64_t v222 = v332;
                    if (v332 == v204) {
                      uint64_t v223 = (void **)&v331;
                    }
                    else {
                      uint64_t v223 = v204;
                    }
                    uint64_t v224 = *((int *)*v223 + 4);
                    if (v204[1] != &v331) {
                      unint64_t v222 = (void **)v204[1];
                    }
                    uint64_t v225 = *((int *)v222 + 4);
                    long long v340 = 0uLL;
                    *(void *)&long long v341 = 0;
                    v226 = v334;
                    int v227 = operator new(0x10uLL);
                    *int v227 = v226[v224];
                    *((void *)&v340 + 1) = v227 + 1;
                    *(void *)&long long v341 = v227 + 1;
                    *(void *)&long long v340 = v227;
                    v229 = sub_20B077E90((uint64_t)&v341, 2uLL);
                    uint64_t v231 = (char *)*((void *)&v340 + 1);
                    v230 = (char *)v340;
                    v229[1] = v226[v215];
                    unint64_t v232 = (char *)(v229 + 1);
                    if (v231 != v230)
                    {
                      do
                      {
                        long long v233 = *((_OWORD *)v231 - 1);
                        v231 -= 16;
                        *((_OWORD *)v232 - 1) = v233;
                        v232 -= 16;
                      }
                      while (v231 != v230);
                      v230 = (char *)v340;
                    }
                    unint64_t v234 = (char *)&v229[v228];
                    v235 = (char *)(v229 + 2);
                    *(void *)&long long v340 = v232;
                    *((void *)&v340 + 1) = v229 + 2;
                    *(void *)&long long v341 = v234;
                    if (v230)
                    {
                      operator delete(v230);
                      unint64_t v234 = (char *)v341;
                    }
                    *((void *)&v340 + 1) = v229 + 2;
                    v236 = v334;
                    if (v235 >= v234)
                    {
                      uint64_t v238 = (uint64_t)&v235[-v340] >> 4;
                      if ((unint64_t)(v238 + 1) >> 60) {
                        sub_20B05D0BC();
                      }
                      uint64_t v239 = (uint64_t)&v234[-v340];
                      uint64_t v240 = v239 >> 3;
                      if (v239 >> 3 <= (unint64_t)(v238 + 1)) {
                        uint64_t v240 = v238 + 1;
                      }
                      if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v241 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v241 = v240;
                      }
                      if (v241) {
                        __n128 v242 = (char *)sub_20B077E90((uint64_t)&v341, v241);
                      }
                      else {
                        __n128 v242 = 0;
                      }
                      v244 = &v242[16 * v238];
                      *(_OWORD *)v244 = v236[v225];
                      v237 = v244 + 16;
                      uint64_t v245 = (char *)*((void *)&v340 + 1);
                      unint64_t v246 = (char *)v340;
                      if (*((void *)&v340 + 1) != (void)v340)
                      {
                        do
                        {
                          long long v247 = *((_OWORD *)v245 - 1);
                          v245 -= 16;
                          *((_OWORD *)v244 - 1) = v247;
                          v244 -= 16;
                        }
                        while (v245 != v246);
                        uint64_t v245 = (char *)v340;
                      }
                      *(void *)&long long v340 = v244;
                      *((void *)&v340 + 1) = v237;
                      *(void *)&long long v341 = &v242[16 * v241];
                      if (v245) {
                        operator delete(v245);
                      }
                    }
                    else
                    {
                      v229[2] = *((_OWORD *)v334 + v225);
                      v237 = v229 + 3;
                    }
                    *((void *)&v340 + 1) = v237;
                    unint64_t v248 = v343;
                    if (v343 != (uint64_t *)&v344)
                    {
                      do
                      {
                        int v249 = *((_DWORD *)v248 + 7);
                        _ZF = v249 == v224 || v249 == v225;
                        if (!_ZF)
                        {
                          float32x4_t v327 = *((float32x4_t *)v334 + v249);
                          int v347 = 0;
                          uint64_t v348 = 0;
                          p_p = 0;
                          sub_20B07F50C(&p_p, (const void *)v340, *((uint64_t *)&v340 + 1), (uint64_t)(*((void *)&v340 + 1) - v340) >> 4);
                          float32x4_t v251 = *((float32x4_t *)p_p + 2);
                          _D2 = (int32x2_t)vsubq_f32(v327, v251).u64[0];
                          _Q0 = vsubq_f32(*((float32x4_t *)p_p + 1), v251);
                          __asm { FMLS            S4, S2, V0.S[1] }
                          if (fabsf(_S4) < 0.000001) {
                            goto LABEL_221;
                          }
                          _D1 = (float32x2_t)vsubq_f32(*(float32x4_t *)p_p, v251).u64[0];
                          float32x2_t v258 = vmul_f32((float32x2_t)vrev64_s32(_D2), vneg_f32(_D1));
                          LODWORD(v259) = vsub_f32(v258, (float32x2_t)vdup_lane_s32((int32x2_t)v258, 1)).u32[0];
                          if (fabsf(v259) < 0.000001) {
                            goto LABEL_221;
                          }
                          _S0 = _Q0.i32[1];
                          __asm { FMLS            S2, S0, V1.S[0] }
                          float v262 = v259 + _S4;
                          if (vabds_f32(v259 + _S4, _S2) >= 0.000001)
                          {
                            float v325 = v259;
                            float v328 = _S4;
                            int v347 = p_p;
                            float v320 = _S2;
                            operator delete(p_p);
                            if (v320 >= 0.0)
                            {
                              if (v328 >= 0.0 && v325 >= 0.0 && v262 <= v320)
                              {
LABEL_241:
                                char v267 = 0;
                                goto LABEL_243;
                              }
                            }
                            else if (v328 <= 0.0 && v325 <= 0.0 && v262 >= v320)
                            {
                              goto LABEL_241;
                            }
                          }
                          else
                          {
LABEL_221:
                            int v347 = p_p;
                            operator delete(p_p);
                          }
                        }
                        unsigned __int32 v263 = (uint64_t *)v248[1];
                        if (v263)
                        {
                          do
                          {
                            v264 = v263;
                            unsigned __int32 v263 = (uint64_t *)*v263;
                          }
                          while (v263);
                        }
                        else
                        {
                          do
                          {
                            v264 = (uint64_t *)v248[2];
                            _ZF = *v264 == (void)v248;
                            unint64_t v248 = v264;
                          }
                          while (!_ZF);
                        }
                        unint64_t v248 = v264;
                      }
                      while (v264 != (uint64_t *)&v344);
                    }
                    char v267 = 1;
LABEL_243:
                    if ((void)v340)
                    {
                      *((void *)&v340 + 1) = v340;
                      operator delete((void *)v340);
                    }
                    long long v204 = (void **)__p;
                    v243 = v332;
                    if (v267)
                    {
                      if (v332 == __p) {
                        uint64_t v268 = (void **)&v331;
                      }
                      else {
                        uint64_t v268 = (void **)__p;
                      }
                      int v269 = *((_DWORD *)*v268 + 4);
                      int v270 = *((_DWORD *)__p + 4);
                      v271 = (void **)*((void *)__p + 1);
                      if (v271 == (void **)&v331) {
                        v271 = v332;
                      }
                      int v272 = *((_DWORD *)v271 + 4);
                      uint64_t v273 = (*a6)++;
                      sub_20B06C1E8(this);
                      *(_DWORD *)(*((void *)this + 4) + 4 * v273) = v269 + a4;
                      uint64_t v274 = (*a6)++;
                      sub_20B06C1E8(this);
                      *(_DWORD *)(*((void *)this + 4) + 4 * v274) = v270 + a4;
                      uint64_t v275 = (*a6)++;
                      sub_20B06C1E8(this);
                      *(_DWORD *)(*((void *)this + 4) + 4 * v275) = v272 + a4;
                      uint64_t v276 = (*a8)++;
                      sub_20B06C1E8(a7);
                      *(_DWORD *)(*((void *)a7 + 4) + 4 * v276) = 3;
                      unint64_t v278 = *v204;
                      uint64_t v277 = (void **)v204[1];
                      if (v277 == (void **)&v331) {
                        long long v212 = v332;
                      }
                      else {
                        long long v212 = (void **)v204[1];
                      }
                      v278[1] = v277;
                      *(void *)v204[1] = v278;
                      --v333;
                      operator delete(v204);
                      long long __p = v212;
                      v279 = v344;
                      if (v212 != (void **)&v331)
                      {
                        if (v344)
                        {
                          int v280 = *((_DWORD *)v212 + 4);
                          v281 = &v344;
                          int v282 = v344;
                          do
                          {
                            v283 = v282;
                            v284 = v281;
                            int v285 = *((_DWORD *)v282 + 7);
                            if (v285 >= v280) {
                              v281 = (void **)v282;
                            }
                            else {
                              ++v282;
                            }
                            int v282 = (void *)*v282;
                          }
                          while (v282);
                          if (v281 == &v344) {
                            goto LABEL_267;
                          }
                          if (v285 < v280) {
                            v283 = v284;
                          }
                          if (v280 < *((_DWORD *)v283 + 7))
                          {
LABEL_267:
                            long long v204 = v212;
                          }
                          else
                          {
                            long long v204 = v212;
                            if (!sub_20B198C08((uint64_t *)&__p, (uint64_t)&v331, &v334))
                            {
                              sub_20B07F66C((uint64_t)&v343, (int *)v212 + 4);
                              long long v212 = (void **)__p;
                              v279 = v344;
                              goto LABEL_267;
                            }
                          }
LABEL_274:
                          unint64_t v286 = (uint64_t *)&v331;
                          if (v332 != v204) {
                            unint64_t v286 = (uint64_t *)v204;
                          }
                          uint64_t v287 = *v286;
                          v330 = (void **)v287;
                          if (v279)
                          {
                            unint64_t v288 = (int *)(v287 + 16);
                            int v289 = *(_DWORD *)(v287 + 16);
                            v290 = &v344;
                            do
                            {
                              int v291 = v279;
                              v292 = v290;
                              int v293 = *((_DWORD *)v279 + 7);
                              if (v293 >= v289) {
                                uint64_t v294 = v279;
                              }
                              else {
                                uint64_t v294 = v279 + 1;
                              }
                              if (v293 >= v289) {
                                v290 = (void **)v279;
                              }
                              v279 = (void *)*v294;
                            }
                            while (*v294);
                            if (v290 != &v344)
                            {
                              if (v293 < v289) {
                                int v291 = v292;
                              }
                              if (v289 >= *((_DWORD *)v291 + 7)
                                && !sub_20B198C08((uint64_t *)&v330, (uint64_t)&v331, &v334))
                              {
                                sub_20B07F66C((uint64_t)&v343, v288);
                              }
                            }
                          }
                        }
                        else
                        {
                          unint64_t v295 = (void ***)&v331;
                          if (v332 != v212) {
                            unint64_t v295 = (void ***)v212;
                          }
                          v330 = *v295;
                          long long v204 = v212;
                        }
                        int v213 = 0;
                        unint64_t v214 = v333;
                        int v211 = v333;
                        goto LABEL_294;
                      }
                      long long v204 = v212;
                      long long v212 = (void **)&v331;
                      goto LABEL_274;
                    }
                    unint64_t v214 = v333;
                  }
                  if (v204[1] == &v331) {
                    long long v212 = v243;
                  }
                  else {
                    long long v212 = (void **)v204[1];
                  }
                  long long __p = v212;
                  ++v213;
                  long long v204 = v212;
LABEL_294:
                  if (v213 > v211 || v214 <= 2) {
                    goto LABEL_306;
                  }
                  if (v214 == 3) {
                    goto LABEL_300;
                  }
                }
              }
            }
            else
            {
              uint64_t v180 = 0;
              if (v176 <= 1) {
                uint64_t v181 = 1;
              }
              else {
                uint64_t v181 = ((char *)v143 - (char *)v144) / 24;
              }
              uint64_t v324 = v181;
              id v182 = v144 + 2;
              BOOL v183 = 1;
              while (1)
              {
                uint64_t v184 = (uint64_t)v182[-1];
                if (v182->i8[0]) {
                  sub_20B0D2F4C();
                }
                uint64_t v185 = (float32x2_t *)sub_20B0D38E8((uint64_t)&p_p, *(void *)&v182[-1]);
                unint64_t v186 = (float32x2_t *)sub_20B0D39D4((uint64_t)&p_p, v184);
                if (sub_20B198D48(v186, v185, v187)) {
                  break;
                }
                sub_20B0D3520((uint64_t)&p_p, v184);
                v182 += 3;
                BOOL v183 = v176 > ++v180;
                if (v324 == v180)
                {
                  sub_20B0D2F48(&p_p);
                  BOOL v183 = 0;
                  goto LABEL_153;
                }
              }
              sub_20B0D2F48(&p_p);
            }
LABEL_153:
            operator delete(v144);
            goto LABEL_154;
          }
        }
      }
      long long v143 = 0;
      long long v144 = 0;
      goto LABEL_136;
    }
    int v25 = a4;
    int v26 = (int *)(*(void *)(a3 + 32) + 4 * a4);
    int v27 = a4 + 1;
    int v28 = a4 + 2;
    uint64_t v29 = *(void *)(a1 + 32);
    uint64_t v30 = v29 + 12 * *v26;
    a9.i64[0] = *(void *)v30;
    a9.i32[2] = *(_DWORD *)(v30 + 8);
    uint64_t v31 = v29 + 12 * v26[1];
    a15.i64[0] = *(void *)v31;
    a15.i32[2] = *(_DWORD *)(v31 + 8);
    uint64_t v32 = v29 + 12 * v26[2];
    a10.i64[0] = *(void *)v32;
    a10.i32[2] = *(_DWORD *)(v32 + 8);
    uint64_t v33 = v29 + 12 * v26[3];
    a11.i64[0] = *(void *)v33;
    a11.i32[2] = *(_DWORD *)(v33 + 8);
    int32x4_t v34 = (int32x4_t)vsubq_f32(a15, a9);
    int32x4_t v35 = (int32x4_t)vsubq_f32(a11, a10);
    float32x4_t v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
    float32x4_t v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL);
    int32x4_t v38 = (int32x4_t)vsubq_f32(a11, a15);
    float32x4_t v39 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL), (float32x4_t)v34)), v36, (float32x4_t)v38);
    int32x4_t v40 = (int32x4_t)vsubq_f32(a10, a15);
    float32x4_t v41 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), (int8x16_t)v40, 0xCuLL);
    float32x4_t v42 = vmlaq_f32(vnegq_f32(vmulq_f32(v37, (float32x4_t)v40)), (float32x4_t)v35, v41);
    int32x4_t v43 = (int32x4_t)vmulq_f32(v39, v42);
    int v44 = a4 + 3;
    if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v43, 2), (float32x4_t)v43), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.i8, 1)).f32[0] < 0.0)
    {
      uint64_t v45 = (*a6)++;
      sub_20B06C1E8(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v45) = a4;
      uint64_t v46 = (*a6)++;
      sub_20B06C1E8(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v46) = v27;
      uint64_t v47 = (*a6)++;
      sub_20B06C1E8(this);
      uint64_t v48 = *((void *)this + 4);
LABEL_7:
      *(_DWORD *)(v48 + 4 * v47) = v28;
      uint64_t v49 = (*a8)++;
      sub_20B06C1E8(a7);
      *(_DWORD *)(*((void *)a7 + 4) + 4 * v49) = 3;
      uint64_t v50 = (*a6)++;
      sub_20B06C1E8(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v50) = v25;
LABEL_133:
      uint64_t v173 = (*a6)++;
      sub_20B06C1E8(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v173) = v28;
      uint64_t v174 = (*a6)++;
      sub_20B06C1E8(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v174) = v44;
      uint64_t v175 = (*a8)++;
      sub_20B06C1E8(a7);
      *(_DWORD *)(*((void *)a7 + 4) + 4 * v175) = 3;
      return;
    }
    int32x4_t v78 = (int32x4_t)vsubq_f32(a10, a9);
    float32x4_t v79 = vmlaq_f32(vnegq_f32(vmulq_f32(v37, (float32x4_t)v78)), (float32x4_t)v35, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v78, v78), (int8x16_t)v78, 0xCuLL));
    float32x4_t v80 = vmlaq_f32(vnegq_f32(vmulq_f32(v41, (float32x4_t)v34)), (float32x4_t)v40, v36);
    int32x4_t v81 = (int32x4_t)vmulq_f32(v79, v80);
    if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v81, 2), (float32x4_t)v81), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.i8, 1)).f32[0] >= 0.0)
    {
      int32x4_t v164 = (int32x4_t)vmulq_f32(v39, v39);
      int32x4_t v165 = (int32x4_t)vmulq_f32(v42, v42);
      int32x4_t v166 = (int32x4_t)vmulq_f32(v80, v80);
      int32x4_t v167 = (int32x4_t)vmulq_f32(v79, v79);
      *(float32x2_t *)v167.i8 = vabd_f32(vabs_f32(vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v164, v166), (float32x2_t)vzip1_s32(*(int32x2_t *)v164.i8, *(int32x2_t *)v166.i8)), (float32x2_t)vzip2_s32(*(int32x2_t *)v164.i8, *(int32x2_t *)v166.i8))), vabs_f32(vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v165, v167), (float32x2_t)vzip1_s32(*(int32x2_t *)v165.i8, *(int32x2_t *)v167.i8)), (float32x2_t)vzip2_s32(*(int32x2_t *)v165.i8, *(int32x2_t *)v167.i8))));
      unsigned __int8 v168 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v167.i8, 1), *(float32x2_t *)v167.i8).u8[0];
      uint64_t v169 = (*a6)++;
      sub_20B06C1E8(this);
      int v25 = a4;
      *(_DWORD *)(*((void *)this + 4) + 4 * v169) = a4;
      uint64_t v170 = (*a6)++;
      sub_20B06C1E8(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v170) = v27;
      uint64_t v47 = (*a6)++;
      sub_20B06C1E8(this);
      uint64_t v48 = *((void *)this + 4);
      if ((v168 & 1) == 0) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v82 = (*a6)++;
      sub_20B06C1E8(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v82) = a4;
      uint64_t v83 = (*a6)++;
      sub_20B06C1E8(this);
      *(_DWORD *)(*((void *)this + 4) + 4 * v83) = v27;
      uint64_t v47 = (*a6)++;
      sub_20B06C1E8(this);
      uint64_t v48 = *((void *)this + 4);
    }
    *(_DWORD *)(v48 + 4 * v47) = v44;
    uint64_t v171 = (*a8)++;
    sub_20B06C1E8(a7);
    *(_DWORD *)(*((void *)a7 + 4) + 4 * v171) = 3;
    uint64_t v172 = (*a6)++;
    sub_20B06C1E8(this);
    *(_DWORD *)(*((void *)this + 4) + 4 * v172) = v27;
    goto LABEL_133;
  }
}

void sub_20B198A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  sub_20B05D2CC(v37 - 152, *(void **)(v37 - 144));
  sub_20B07F6E8(&a30);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20B198B48(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, void *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3, void *a4, int a5, int a6, int a7)
{
  uint64_t v14 = (*a2)++;
  sub_20B06C1E8(a1);
  *(_DWORD *)(*((void *)a1 + 4) + 4 * v14) = a5;
  uint64_t v15 = (*a2)++;
  sub_20B06C1E8(a1);
  *(_DWORD *)(*((void *)a1 + 4) + 4 * v15) = a6;
  uint64_t v16 = (*a2)++;
  sub_20B06C1E8(a1);
  *(_DWORD *)(*((void *)a1 + 4) + 4 * v16) = a7;
  uint64_t v17 = (*a4)++;
  sub_20B06C1E8(a3);
  *(_DWORD *)(*((void *)a3 + 4) + 4 * v17) = 3;
}

BOOL sub_20B198C08(uint64_t *a1, uint64_t a2, void *a3)
{
  if (*(void *)(a2 + 8) == *a1) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = *a1;
  }
  uint64_t v4 = *(int *)(*(void *)v3 + 16);
  uint64_t v5 = *(void *)(*a1 + 8);
  if (v5 == a2) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  float32x4_t v6 = *(float32x4_t *)(*a3 + 16 * *(int *)(*a1 + 16));
  float32x4_t v7 = vsubq_f32(v6, *(float32x4_t *)(*a3 + 16 * v4));
  float32x4_t v8 = vsubq_f32(*(float32x4_t *)(*a3 + 16 * *(int *)(v5 + 16)), v6);
  float32x4_t v9 = vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), v7)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v8);
  float32x4_t v10 = vmulq_f32(v9, v9);
  if (vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), v10), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)).f32[0] < 1.0e-12)return 1; {
  float32x4_t v12 = vmulq_f32(v9, (float32x4_t)xmmword_20B1E74C0);
  }
  return vaddq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), v12), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)).f32[0] < 0.0;
}

uint64_t sub_20B198CBC(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2 = vcgt_f32(*a2, *a1);
  if (v2.i8[0])
  {
    char v3 = 1;
  }
  else
  {
    if ((vcgt_f32(*a1, *a2).u8[0] & 1) == 0)
    {
      uint64_t v4 = (uint64_t *)a1[1];
      uint64_t v5 = (uint64_t *)a2[1];
      if (v4 != v5)
      {
        uint64_t v6 = v4[1];
        uint64_t v7 = *v5;
        uint64_t v8 = v5[1];
        if (COERCE_FLOAT(*v4) == *(float *)&v6 && *(float *)&v7 != *(float *)&v8)
        {
          char v3 = a1[2].i8[0] != 0;
          return v3 & 1;
        }
        if (COERCE_FLOAT(*v4) != *(float *)&v6 && *(float *)&v7 == *(float *)&v8)
        {
          char v3 = a2[2].i8[0] == 0;
          return v3 & 1;
        }
      }
      char v3 = v2.i8[4];
      return v3 & 1;
    }
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_20B198D48(float32x2_t *a1, float32x2_t *a2, int8x16_t a3)
{
  char v3 = 0;
  if (a1 && a2)
  {
    *(float32x2_t *)a3.i8 = *a1;
    float32x2_t v4 = a2[1];
    if (vcgt_f32(*a1, v4).u8[0] & 1) != 0 || (float32x2_t v5 = *a2, v6 = a1[1], (vcgt_f32(*a2, v6).u8[0]))
    {
LABEL_5:
      char v3 = 0;
      return v3 & 1;
    }
    float32x2_t v8 = vsub_f32(*(float32x2_t *)a3.i8, v6);
    float32x2_t v9 = vsub_f32(v5, v4);
    float32x2_t v10 = vmul_f32(v8, (float32x2_t)vrev64_s32((int32x2_t)v9));
    float32x2_t v11 = vsub_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1));
    if (vmul_f32(v11, v11).f32[0] < 0.000001) {
      v11.f32[0] = 0.0;
    }
    if (v11.f32[0] == 0.0)
    {
      float32x2_t v12 = vsub_f32(v5, v6);
      float32x2_t v13 = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v12), v8);
      float32x2_t v14 = vsub_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1));
      if (vmul_f32(v14, v14).f32[0] < 0.000001) {
        v14.f32[0] = 0.0;
      }
      if (v14.f32[0] != 0.0) {
        goto LABEL_5;
      }
      int32x2_t v15 = (int32x2_t)vmul_f32(v12, vsub_f32(v5, *(float32x2_t *)a3.i8));
      int32x2_t v16 = (int32x2_t)vmul_f32(vsub_f32(v4, v6), vsub_f32(v4, *(float32x2_t *)a3.i8));
      int8x8_t v17 = vmvn_s8((int8x8_t)vcltz_f32(vadd_f32((float32x2_t)vzip1_s32(v16, v15), (float32x2_t)vzip2_s32(v16, v15))));
      if (v17.i32[1] & v17.i32[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      float32x2_t v18 = vsub_f32(v5, *(float32x2_t *)a3.i8);
      float32x2_t v19 = vsub_f32(v6, *(float32x2_t *)a3.i8);
      int32x2_t v20 = (int32x2_t)vsub_f32(v4, *(float32x2_t *)a3.i8);
      int32x2_t v21 = (int32x2_t)vsub_f32(*(float32x2_t *)a3.i8, v5);
      int32x2_t v22 = (int32x2_t)vsub_f32(v4, v5);
      int8x8_t v23 = (int8x8_t)vsub_f32(v6, v5);
      float32x2_t v24 = vmla_f32(vneg_f32(vmul_f32((float32x2_t)vzip1_s32((int32x2_t)v19, v22), (float32x2_t)vzip2_s32(v20, v21))), (float32x2_t)vzip1_s32(v20, v21), (float32x2_t)vzip2_s32((int32x2_t)v19, v22));
      float32x2_t v25 = (float32x2_t)vdup_n_s32(0x358637BDu);
      float32x2_t v26 = (float32x2_t)vext_s8((int8x8_t)v18, (int8x8_t)v22, 4uLL);
      v18.i32[1] = v22.i32[1];
      float32x2_t v27 = (float32x2_t)vext_s8((int8x8_t)v19, v23, 4uLL);
      v19.i32[1] = v23.i32[1];
      float32x2_t v28 = vmla_f32(vneg_f32(vmul_f32(v19, v26)), v18, v27);
      float32x2_t v29 = vmul_f32((float32x2_t)vbic_s8((int8x8_t)v28, (int8x8_t)vcgt_f32(v25, vmul_f32(v28, v28))), (float32x2_t)vbic_s8((int8x8_t)v24, (int8x8_t)vcgt_f32(v25, vmul_f32(v24, v24))));
      if (v29.f32[0] >= 0.0 || v29.f32[1] >= 0.0)
      {
        int8x8_t v30 = (int8x8_t)vsub_f32(v5, v6);
        int32x2_t v31 = (int32x2_t)vsub_f32(v4, v6);
        *(float32x2_t *)a3.i8 = vsub_f32(*(float32x2_t *)a3.i8, v4);
        float32x2_t v32 = vsub_f32(v6, v4);
        *(float32x2_t *)a3.i8 = vmla_f32(vneg_f32(vmul_f32((float32x2_t)vzip1_s32((int32x2_t)v9, (int32x2_t)v8), (float32x2_t)vzip2_s32(*(int32x2_t *)a3.i8, v31))), (float32x2_t)vzip1_s32(*(int32x2_t *)a3.i8, v31), (float32x2_t)vzip2_s32((int32x2_t)v9, (int32x2_t)v8));
        float32x2_t v33 = (float32x2_t)vext_s8((int8x8_t)v32, (int8x8_t)v8, 4uLL);
        v32.i32[1] = v8.i32[1];
        float32x2_t v34 = (float32x2_t)vext_s8((int8x8_t)v9, v30, 4uLL);
        v9.i32[1] = v30.i32[1];
        float32x2_t v35 = vmla_f32(vneg_f32(vmul_f32(v33, v9)), v34, v32);
        *(float32x2_t *)a3.i8 = vmul_f32((float32x2_t)vbic_s8((int8x8_t)v35, (int8x8_t)vcgt_f32(v25, vmul_f32(v35, v35))), (float32x2_t)vbic_s8(*(int8x8_t *)a3.i8, (int8x8_t)vcgt_f32(v25, vmul_f32(*(float32x2_t *)a3.i8, *(float32x2_t *)a3.i8))));
        float32x4_t v36 = (float32x4_t)vextq_s8(a3, a3, 4uLL);
        *(float32x2_t *)&v36.i32[1] = v29;
        if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_f32(v36))))
        {
          int32x2_t v37 = vcltz_f32(*(float32x2_t *)a3.i8);
          char v3 = (v29.f32[0] < 0.0 || v29.f32[1] < 0.0) | v37.i8[4] | v37.i8[0];
          return v3 & 1;
        }
        goto LABEL_5;
      }
    }
    char v3 = 1;
  }
  return v3 & 1;
}

void sub_20B198F68(unint64_t a1, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  while (2)
  {
    uint64_t v110 = a2 - 24;
    float32x2_t v107 = (long long *)(a2 - 72);
    float32x2_t v108 = (long long *)(a2 - 48);
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v12) >> 3);
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((*a3)((long long *)v110, (long long *)a1))
                {
                  long long v43 = *(_OWORD *)a1;
                  uint64_t v115 = *(void *)(a1 + 16);
                  long long v114 = v43;
                  long long v44 = *(_OWORD *)v110;
                  *(void *)(a1 + 16) = *(void *)(v110 + 16);
                  *(_OWORD *)a1 = v44;
                  long long v45 = v114;
                  *(void *)(v110 + 16) = v115;
                  *(_OWORD *)uint64_t v110 = v45;
                }
                break;
              case 3uLL:
                sub_20B07ED04((long long *)a1, (long long *)(a1 + 24), (long long *)v110, a3);
                break;
              case 4uLL:
                sub_20B07F12C(a1, a1 + 24, a1 + 48, v110, a3);
                break;
              case 5uLL:
                uint64_t v46 = (long long *)(a1 + 24);
                uint64_t v47 = (long long *)(a1 + 48);
                uint64_t v48 = (long long *)(a1 + 72);
                __n128 v49 = sub_20B07F12C(a1, a1 + 24, a1 + 48, a1 + 72, a3);
                if (((unsigned int (*)(uint64_t, unint64_t, __n128))*a3)(v110, a1 + 72, v49))
                {
                  long long v114 = *v48;
                  long long v50 = v114;
                  uint64_t v115 = *(void *)(a1 + 88);
                  uint64_t v51 = v115;
                  uint64_t v52 = *(void *)(v110 + 16);
                  *uint64_t v48 = *(_OWORD *)v110;
                  *(void *)(a1 + 88) = v52;
                  *(void *)(v110 + 16) = v51;
                  *(_OWORD *)uint64_t v110 = v50;
                  if ((*a3)((long long *)(a1 + 72), (long long *)(a1 + 48)))
                  {
                    uint64_t v53 = *(void *)(a1 + 64);
                    long long v54 = *v47;
                    *uint64_t v47 = *v48;
                    *(void *)(a1 + 64) = *(void *)(a1 + 88);
                    *uint64_t v48 = v54;
                    *(void *)(a1 + 88) = v53;
                    if ((*a3)((long long *)(a1 + 48), (long long *)(a1 + 24)))
                    {
                      uint64_t v55 = *(void *)(a1 + 40);
                      long long v56 = *v46;
                      *uint64_t v46 = *v47;
                      *(void *)(a1 + 40) = *(void *)(a1 + 64);
                      *uint64_t v47 = v56;
                      *(void *)(a1 + 64) = v55;
                      if ((*a3)((long long *)(a1 + 24), (long long *)a1))
                      {
                        long long v57 = *(_OWORD *)a1;
                        uint64_t v115 = *(void *)(a1 + 16);
                        long long v114 = v57;
                        *(_OWORD *)a1 = *v46;
                        *(void *)(a1 + 16) = *(void *)(a1 + 40);
                        *uint64_t v46 = v114;
                        *(void *)(a1 + 40) = v115;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            uint64_t v58 = (long long *)(a1 + 24);
            BOOL v60 = a1 == a2 || v58 == (long long *)a2;
            if (a5)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                unint64_t v62 = a1;
                do
                {
                  uint64_t v63 = (long long *)v62;
                  unint64_t v62 = (unint64_t)v58;
                  if ((*a3)(v58, v63))
                  {
                    long long v64 = *(_OWORD *)v62;
                    uint64_t v115 = *(void *)(v62 + 16);
                    long long v114 = v64;
                    uint64_t v65 = v61;
                    while (1)
                    {
                      uint64_t v66 = a1 + v65;
                      *(_OWORD *)(v66 + 24) = *(_OWORD *)(a1 + v65);
                      *(void *)(v66 + 40) = *(void *)(a1 + v65 + 16);
                      if (!v65) {
                        break;
                      }
                      v65 -= 24;
                      if (((*a3)(&v114, (long long *)(v65 + a1)) & 1) == 0)
                      {
                        uint64_t v67 = a1 + v65 + 24;
                        goto LABEL_78;
                      }
                    }
                    uint64_t v67 = a1;
LABEL_78:
                    long long v68 = v114;
                    *(void *)(v67 + 16) = v115;
                    *(_OWORD *)uint64_t v67 = v68;
                  }
                  uint64_t v58 = (long long *)(v62 + 24);
                  v61 += 24;
                }
                while (v62 + 24 != a2);
              }
            }
            else if (!v60)
            {
              unint64_t v101 = a1 - 24;
              do
              {
                float32x2_t v102 = (long long *)a1;
                a1 = (unint64_t)v58;
                if ((*a3)(v58, v102))
                {
                  long long v103 = *(_OWORD *)a1;
                  uint64_t v115 = *(void *)(a1 + 16);
                  long long v114 = v103;
                  unint64_t v104 = v101;
                  do
                  {
                    *(_OWORD *)(v104 + 48) = *(_OWORD *)(v104 + 24);
                    *(void *)(v104 + 64) = *(void *)(v104 + 40);
                    char v105 = (*a3)(&v114, (long long *)v104);
                    v104 -= 24;
                  }
                  while ((v105 & 1) != 0);
                  long long v106 = v114;
                  *(void *)(v104 + 64) = v115;
                  *(_OWORD *)(v104 + 48) = v106;
                }
                uint64_t v58 = (long long *)(a1 + 24);
                v101 += 24;
              }
              while (a1 + 24 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v69 = (v14 - 2) >> 1;
              unint64_t v109 = a2;
              int64_t v111 = v69;
              do
              {
                int64_t v70 = v69;
                if (v111 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  unint64_t v72 = a1 + 24 * v71;
                  if (2 * v69 + 2 < (uint64_t)v14
                    && (*a3)((long long *)(a1 + 24 * v71), (long long *)(v72 + 24)))
                  {
                    v72 += 24;
                    uint64_t v71 = 2 * v70 + 2;
                  }
                  unint64_t v73 = a1 + 24 * v70;
                  if (((*a3)((long long *)v72, (long long *)v73) & 1) == 0)
                  {
                    long long v74 = *(_OWORD *)v73;
                    uint64_t v115 = *(void *)(v73 + 16);
                    long long v114 = v74;
                    do
                    {
                      unint64_t v75 = v72;
                      long long v76 = *(_OWORD *)v72;
                      *(void *)(v73 + 16) = *(void *)(v72 + 16);
                      *(_OWORD *)unint64_t v73 = v76;
                      if (v111 < v71) {
                        break;
                      }
                      uint64_t v77 = (2 * v71) | 1;
                      unint64_t v72 = a1 + 24 * v77;
                      uint64_t v78 = 2 * v71 + 2;
                      if (v78 < (uint64_t)v14
                        && (*a3)((long long *)(a1 + 24 * v77), (long long *)(v72 + 24)))
                      {
                        v72 += 24;
                        uint64_t v77 = v78;
                      }
                      unint64_t v73 = v75;
                      uint64_t v71 = v77;
                    }
                    while (!(*a3)((long long *)v72, &v114));
                    long long v79 = v114;
                    *(void *)(v75 + 16) = v115;
                    *(_OWORD *)unint64_t v75 = v79;
                    a2 = v109;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              int64_t v80 = v13 / 0x18uLL;
              do
              {
                uint64_t v81 = 0;
                long long v82 = *(_OWORD *)a1;
                uint64_t v113 = *(void *)(a1 + 16);
                long long v112 = v82;
                unint64_t v83 = a1;
                do
                {
                  uint64_t v84 = v83 + 24 * v81 + 24;
                  uint64_t v85 = (2 * v81) | 1;
                  uint64_t v86 = 2 * v81 + 2;
                  if (v86 < v80
                    && (*a3)((long long *)(v83 + 24 * v81 + 24), (long long *)(v83 + 24 * v81 + 48)))
                  {
                    v84 += 24;
                    uint64_t v85 = v86;
                  }
                  long long v87 = *(_OWORD *)v84;
                  *(void *)(v83 + 16) = *(void *)(v84 + 16);
                  *(_OWORD *)unint64_t v83 = v87;
                  unint64_t v83 = v84;
                  uint64_t v81 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
                uint64_t v88 = (long long *)(a2 - 24);
                if (v84 == a2 - 24)
                {
                  unint64_t v91 = a2 - 24;
                  long long v99 = v112;
                  *(void *)(v84 + 16) = v113;
                  *(_OWORD *)uint64_t v84 = v99;
                }
                else
                {
                  long long v89 = *v88;
                  *(void *)(v84 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)uint64_t v84 = v89;
                  long long v90 = v112;
                  *(void *)(a2 - 8) = v113;
                  unint64_t v91 = a2 - 24;
                  *uint64_t v88 = v90;
                  uint64_t v92 = v84 - a1 + 24;
                  if (v92 >= 25)
                  {
                    unint64_t v93 = (v92 / 0x18uLL - 2) >> 1;
                    unint64_t v94 = a1 + 24 * v93;
                    if ((*a3)((long long *)v94, (long long *)v84))
                    {
                      long long v95 = *(_OWORD *)v84;
                      uint64_t v115 = *(void *)(v84 + 16);
                      long long v114 = v95;
                      do
                      {
                        uint64_t v96 = v94;
                        long long v97 = *(_OWORD *)v94;
                        *(void *)(v84 + 16) = *(void *)(v94 + 16);
                        *(_OWORD *)uint64_t v84 = v97;
                        if (!v93) {
                          break;
                        }
                        unint64_t v93 = (v93 - 1) >> 1;
                        unint64_t v94 = a1 + 24 * v93;
                        uint64_t v84 = v96;
                      }
                      while (((*a3)((long long *)v94, &v114) & 1) != 0);
                      long long v98 = v114;
                      *(void *)(v96 + 16) = v115;
                      *(_OWORD *)uint64_t v96 = v98;
                    }
                  }
                }
                BOOL v100 = v80-- <= 2;
                a2 = v91;
              }
              while (!v100);
            }
            return;
          }
          uint64_t v15 = a2;
          unint64_t v16 = a1 + 24 * (v14 >> 1);
          if ((unint64_t)v13 >= 0xC01)
          {
            sub_20B07ED04((long long *)a1, (long long *)(a1 + 24 * (v14 >> 1)), (long long *)v110, a3);
            sub_20B07ED04((long long *)(a1 + 24), (long long *)(a1 + 24 * (v14 >> 1) - 24), v108, a3);
            sub_20B07ED04((long long *)(a1 + 48), (long long *)(a1 + 24 + 24 * (v14 >> 1)), v107, a3);
            sub_20B07ED04((long long *)(a1 + 24 * (v14 >> 1) - 24), (long long *)v16, (long long *)(a1 + 24 + 24 * (v14 >> 1)), a3);
            long long v17 = *(_OWORD *)a1;
            uint64_t v115 = *(void *)(a1 + 16);
            long long v114 = v17;
            uint64_t v18 = *(void *)(v16 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(void *)(a1 + 16) = v18;
            long long v19 = v114;
            *(void *)(v16 + 16) = v115;
            *(_OWORD *)unint64_t v16 = v19;
          }
          else
          {
            sub_20B07ED04((long long *)(a1 + 24 * (v14 >> 1)), (long long *)a1, (long long *)v110, a3);
          }
          --a4;
          if (a5 & 1) != 0 || ((*a3)((long long *)(a1 - 24), (long long *)a1)) {
            break;
          }
          long long v33 = *(_OWORD *)a1;
          uint64_t v113 = *(void *)(a1 + 16);
          long long v112 = v33;
          if ((*a3)(&v112, (long long *)v110))
          {
            unint64_t v12 = a1;
            do
              v12 += 24;
            while (((*a3)(&v112, (long long *)v12) & 1) == 0);
          }
          else
          {
            float32x2_t v34 = (long long *)(a1 + 24);
            do
            {
              unint64_t v12 = (unint64_t)v34;
              if ((unint64_t)v34 >= a2) {
                break;
              }
              int v35 = (*a3)(&v112, v34);
              float32x2_t v34 = (long long *)(v12 + 24);
            }
            while (!v35);
          }
          unint64_t v36 = a2;
          if (v12 < a2)
          {
            unint64_t v36 = a2;
            do
              v36 -= 24;
            while (((*a3)(&v112, (long long *)v36) & 1) != 0);
          }
          while (v12 < v36)
          {
            long long v37 = *(_OWORD *)v12;
            uint64_t v115 = *(void *)(v12 + 16);
            long long v114 = v37;
            long long v38 = *(_OWORD *)v36;
            *(void *)(v12 + 16) = *(void *)(v36 + 16);
            *(_OWORD *)unint64_t v12 = v38;
            long long v39 = v114;
            *(void *)(v36 + 16) = v115;
            *(_OWORD *)unint64_t v36 = v39;
            do
              v12 += 24;
            while (!(*a3)(&v112, (long long *)v12));
            do
              v36 -= 24;
            while (((*a3)(&v112, (long long *)v36) & 1) != 0);
          }
          int32x4_t v40 = (long long *)(v12 - 24);
          BOOL v5 = v12 - 24 >= a1;
          BOOL v6 = v12 - 24 == a1;
          if (v12 - 24 != a1)
          {
            long long v41 = *v40;
            *(void *)(a1 + 16) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v41;
          }
          a5 = 0;
          long long v42 = v112;
          *(void *)(v12 - 8) = v113;
          *int32x4_t v40 = v42;
        }
        uint64_t v20 = 0;
        long long v21 = *(_OWORD *)a1;
        uint64_t v113 = *(void *)(a1 + 16);
        long long v112 = v21;
        do
          v20 += 24;
        while (((*a3)((long long *)(v20 + a1), &v112) & 1) != 0);
        unint64_t v22 = a1 + v20;
        int8x8_t v23 = (long long *)v15;
        BOOL v6 = v20 == 24;
        a2 = v15;
        if (v6)
        {
          int8x8_t v23 = (long long *)v15;
          do
          {
            if (v22 >= (unint64_t)v23) {
              break;
            }
            int8x8_t v23 = (long long *)((char *)v23 - 24);
          }
          while (((*a3)(v23, &v112) & 1) == 0);
        }
        else
        {
          do
            int8x8_t v23 = (long long *)((char *)v23 - 24);
          while (!(*a3)(v23, &v112));
        }
        if (v22 < (unint64_t)v23)
        {
          float32x2_t v24 = v23;
          unint64_t v25 = v22;
          do
          {
            long long v26 = *(_OWORD *)v25;
            uint64_t v115 = *(void *)(v25 + 16);
            long long v114 = v26;
            long long v27 = *v24;
            *(void *)(v25 + 16) = *((void *)v24 + 2);
            *(_OWORD *)unint64_t v25 = v27;
            long long v28 = v114;
            *((void *)v24 + 2) = v115;
            *float32x2_t v24 = v28;
            do
              v25 += 24;
            while (((*a3)((long long *)v25, &v112) & 1) != 0);
            do
              float32x2_t v24 = (long long *)((char *)v24 - 24);
            while (!(*a3)(v24, &v112));
          }
          while (v25 < (unint64_t)v24);
          uint64_t v29 = v25 - 24;
        }
        else
        {
          uint64_t v29 = v22 - 24;
        }
        if (v29 != a1)
        {
          long long v30 = *(_OWORD *)v29;
          *(void *)(a1 + 16) = *(void *)(v29 + 16);
          *(_OWORD *)a1 = v30;
        }
        long long v31 = v112;
        *(void *)(v29 + 16) = v113;
        *(_OWORD *)uint64_t v29 = v31;
        if (v22 >= (unint64_t)v23) {
          break;
        }
LABEL_32:
        sub_20B198F68(a1, v29, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v29 + 24;
      }
      BOOL v32 = sub_20B199970(a1, v29, a3);
      unint64_t v12 = v29 + 24;
      if (sub_20B199970(v29 + 24, v15, a3)) {
        break;
      }
      if (!v32) {
        goto LABEL_32;
      }
    }
    a2 = v29;
    if (!v32) {
      continue;
    }
    break;
  }
}

BOOL sub_20B199970(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float32x2_t v8 = (long long *)(a2 - 24);
      if ((*a3)((long long *)(a2 - 24), (long long *)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(void *)(a1 + 16) = v11;
        *float32x2_t v8 = v10;
        *(void *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      sub_20B07ED04((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_20B07F12C(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      long long v19 = (long long *)(a1 + 24);
      uint64_t v20 = (long long *)(a1 + 48);
      long long v21 = (long long *)(a1 + 72);
      uint64_t v22 = a2 - 24;
      __n128 v23 = sub_20B07F12C(a1, a1 + 24, a1 + 48, a1 + 72, a3);
      if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v22, a1 + 72, v23))
      {
        uint64_t v24 = *(void *)(a1 + 88);
        long long v25 = *v21;
        uint64_t v26 = *(void *)(v22 + 16);
        *long long v21 = *(_OWORD *)v22;
        *(void *)(a1 + 88) = v26;
        *(_OWORD *)uint64_t v22 = v25;
        *(void *)(v22 + 16) = v24;
        if ((*a3)((long long *)(a1 + 72), (long long *)(a1 + 48)))
        {
          uint64_t v27 = *(void *)(a1 + 64);
          long long v28 = *v20;
          long long *v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *long long v21 = v28;
          *(void *)(a1 + 88) = v27;
          if ((*a3)((long long *)(a1 + 48), (long long *)(a1 + 24)))
          {
            uint64_t v29 = *(void *)(a1 + 40);
            long long v30 = *v19;
            *long long v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            long long *v20 = v30;
            *(void *)(a1 + 64) = v29;
            if ((*a3)((long long *)(a1 + 24), (long long *)a1))
            {
              uint64_t v31 = *(void *)(a1 + 16);
              long long v32 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *long long v19 = v32;
              *(void *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v12 = (long long *)(a1 + 48);
      sub_20B07ED04((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v13, v12))
    {
      long long v33 = *(_OWORD *)v13;
      uint64_t v34 = *(void *)(v13 + 16);
      uint64_t v16 = v14;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (((*a3)(&v33, (long long *)(v17 + 24)) & 1) == 0)
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(_OWORD *)uint64_t v18 = v33;
      *(void *)(v18 + 16) = v34;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    unint64_t v12 = (long long *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n64 sub_20B199C5C(float32x4_t *a1, float32x4_t a2)
{
  float32x4_t v2 = a1[1];
  float32x4_t v3 = a1[2];
  float32x4_t v4 = vsubq_f32(v3, v2);
  float32x4_t v5 = vmulq_f32(v4, v4);
  float32x4_t v6 = a1[3];
  float32x4_t v7 = vaddq_f32(vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2));
  float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  float32x4_t v9 = vmulq_n_f32(v4, vmul_f32(vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)), v8).f32[0]);
  float32x4_t v10 = vsubq_f32(v6, v2);
  float32x4_t v11 = vmulq_f32(v10, v10);
  float32x4_t v12 = vaddq_f32(vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2));
  float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  float32x4_t v14 = vmulq_n_f32(v10, vmul_f32(vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)), v13).f32[0]);
  float32x4_t v15 = vsubq_f32(v6, v3);
  float32x4_t v16 = vmulq_f32(v15, v15);
  float32x4_t v17 = vaddq_f32(vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2));
  float32x2_t v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
  float32x4_t v19 = vmulq_n_f32(v15, vmul_f32(vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)), v18).f32[0]);
  float32x4_t v20 = vmulq_f32(v14, v9);
  float v21 = fabsf(vaddq_f32(vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2)).f32[0]);
  float32x4_t v22 = vmulq_f32(v19, vnegq_f32(v9));
  float v23 = fabsf(vaddq_f32(vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2)).f32[0]);
  float32x4_t v24 = vmulq_f32(v19, v14);
  float v25 = fabsf(vaddq_f32(vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2)).f32[0]);
  if (v21 < v23 && v21 < v25)
  {
    float32x4_t v43 = vsubq_f32(a2, v2);
    float32x4_t v44 = vmulq_f32(v10, v4);
    float32x4_t v45 = vmulq_f32(v4, v43);
    float32x4_t v46 = vaddq_f32(vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2));
    float32x4_t v47 = vaddq_f32(vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2));
    float32x4_t v48 = vmulq_f32(v10, v43);
    float32x4_t v49 = vaddq_f32(vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2));
    v45.f32[0] = vmulq_f32(v12, v7).f32[0] - vmulq_f32(v46, v46).f32[0];
    float v50 = vmlas_n_f32(-vmulq_f32(v46, v49).f32[0], v12.f32[0], v47.f32[0]);
    result.n64_f32[0] = 1.0
                      - (float)((float)(vmlas_n_f32(-vmulq_f32(v46, v47).f32[0], v7.f32[0], v49.f32[0]) / v45.f32[0])
                              + (float)(v50 / v45.f32[0]));
    result.n64_f32[1] = v50 / v45.f32[0];
  }
  else if (v23 < v21 && v23 < v25)
  {
    float32x4_t v51 = vsubq_f32(v2, v3);
    float32x4_t v52 = vsubq_f32(a2, v3);
    float32x4_t v53 = vmulq_f32(v51, v51);
    float32x4_t v54 = vaddq_f32(vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2));
    float32x4_t v55 = vmulq_f32(v15, v51);
    float32x4_t v56 = vmulq_f32(v51, v52);
    float32x4_t v57 = vaddq_f32(vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2));
    float32x4_t v58 = vaddq_f32(vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2));
    float32x4_t v59 = vmulq_f32(v15, v52);
    float32x4_t v60 = vaddq_f32(vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2));
    float v61 = vmulq_f32(v17, v54).f32[0] - vmulq_f32(v57, v57).f32[0];
    result.n64_f32[0] = vmlas_n_f32(-vmulq_f32(v57, v60).f32[0], v17.f32[0], v58.f32[0]) / v61;
    result.n64_f32[1] = 1.0
                      - (float)((float)(vmlas_n_f32(-vmulq_f32(v57, v58).f32[0], v54.f32[0], v60.f32[0]) / v61)
                              + result.n64_f32[0]);
  }
  else
  {
    float32x4_t v28 = vsubq_f32(v2, v6);
    float32x4_t v29 = vsubq_f32(v3, v6);
    float32x4_t v30 = vsubq_f32(a2, v6);
    float32x4_t v31 = vmulq_f32(v28, v28);
    float32x4_t v32 = vaddq_f32(vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2));
    float32x4_t v33 = vmulq_f32(v28, v29);
    float32x4_t v34 = vaddq_f32(vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2));
    float32x4_t v35 = vmulq_f32(v29, v29);
    float32x4_t v36 = vmulq_f32(v28, v30);
    float32x4_t v37 = vaddq_f32(vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2));
    float32x4_t v38 = vaddq_f32(vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2));
    float32x4_t v39 = vmulq_f32(v29, v30);
    float32x4_t v40 = vaddq_f32(vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2));
    float v41 = vmulq_f32(v32, v37).f32[0] - vmulq_f32(v34, v34).f32[0];
    result.n64_f32[0] = vmlas_n_f32(-vmulq_f32(v34, v40).f32[0], v37.f32[0], v38.f32[0]) / v41;
    result.n64_f32[1] = vmlas_n_f32(-vmulq_f32(v34, v38).f32[0], v32.f32[0], v40.f32[0]) / v41;
  }
  return result;
}

uint64_t sub_20B199F34(float32x4_t *a1, float *a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4 = a1[7];
  float32x4_t v5 = vmulq_f32(v4, a4);
  float v6 = vaddq_f32(vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2)).f32[0];
  if (v6 > -0.00024414) {
    return 0;
  }
  float32x4_t v7 = vsubq_f32(a3, a1[1]);
  float32x4_t v8 = vmulq_f32(v7, v4);
  float v9 = vaddq_f32(vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2)).f32[0];
  if (v9 < 0.00024414) {
    return 0;
  }
  float v10 = (float)-v9 / v6;
  if (v10 >= *a2) {
    return 0;
  }
  uint64_t v11 = 0;
  float32x4_t v12 = vmlaq_n_f32(v7, a4, v10);
  float32x4_t v13 = vmulq_f32(a1[8], v12);
  float v14 = vaddq_f32(vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2)).f32[0];
  float32x4_t v15 = vmulq_f32(a1[9], v12);
  LODWORD(v16) = vaddq_f32(vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2)).u32[0];
  float v17 = a1[10].f32[1];
  float v18 = vmlas_n_f32(-(float)(v14 * a1[10].f32[2]), v17, v16);
  if (v18 >= 0.0)
  {
    float v19 = vmlas_n_f32(-(float)(v16 * a1[10].f32[0]), v17, v14);
    if (v19 >= 0.0 && (float)(v18 + v19) <= 1.0)
    {
      *a2 = v10;
      return 1;
    }
  }
  return v11;
}

void sub_20B19A128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B19A1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLScene;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B19A3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B19A3F4(uint64_t a1)
{
  __asm { FMOV            V0.2S, #1.0 }
  float v6 = *(uint64_t **)(a1 + 16);
  for (uint64_t i = *(uint64_t **)(a1 + 24); v6 != i; ++v6)
    sub_20B06C6F8(*v6);
  return 0;
}

void sub_20B19A7E4(_Unwind_Exception *a1)
{
  MEMORY[0x210532650](v3, 0x10A1C4029A5C24FLL);
  std::mutex::unlock(v2);

  _Unwind_Resume(a1);
}

id sub_20B19A84C(char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  float32x4_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_20B05D0BC();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      float v14 = (char *)sub_20B0602EC(v4, v13);
    }
    else {
      float v14 = 0;
    }
    float32x4_t v15 = &v14[8 * v10];
    float v16 = &v14[8 * v13];
    float32x4_t v24 = v16;
    *(void *)float32x4_t v15 = *a2;
    float v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    float v18 = *a1;
    float v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)float v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      float v9 = (char *)v23.i64[1];
      float v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    float v21 = a1[2];
    a1[2] = v16;
    float32x4_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)sub_20B19B2B4((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)float32x4_t v7 = result;
    float v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_20B19AD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  MEMORY[0x210532650](v22, 0x10A1C40A30AD078);
  __cxa_guard_abort(&qword_267691130);

  _Unwind_Resume(a1);
}

void sub_20B19ADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  int v48 = *(void *)(a1 + 168);
  unint64_t v3 = (int)HIDWORD(*(void *)(a1 + 168)) * a2;
  unint64_t v4 = v3 >> 5;
  unint64_t v5 = (v3 + (int)HIDWORD(*(void *)(a1 + 168))) >> 5;
  uint64_t v6 = *(void *)(a1 + 176);
  context = (void *)MEMORY[0x210532AA0]();
  if ((int)v4 < (int)v5)
  {
    int v7 = 0;
    uint64_t v8 = v6 + 4 * v48 * (int)v4;
    __int32 v9 = *(_DWORD *)(a1 + 172);
    int32x2_t v10 = *(int32x2_t *)(a1 + 168);
    long long v11 = 0uLL;
    float32x4_t v43 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    do
    {
      __int32 v12 = v10.i32[0];
      if (v10.i32[0] >= 1)
      {
        uint64_t v13 = 0;
        *(float *)v10.i32 = (float)(int)v4 / (float)(v9 - 1);
        float32x4_t v14 = vmlaq_n_f32(*(float32x4_t *)(a1 + 32), vsubq_f32(*(float32x4_t *)(a1 + 48), *(float32x4_t *)(a1 + 32)), *(float *)v10.i32);
        float32x4_t v44 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(a1 + 64), vsubq_f32(*(float32x4_t *)(a1 + 80), *(float32x4_t *)(a1 + 64)), (float32x4_t)vdupq_lane_s32(v10, 0)), v14);
        float32x4_t v45 = v14;
        do
        {
          float32x4_t v15 = vmlaq_n_f32(v45, v44, (float)(int)v13 / (float)(v12 - 1));
          int32x4_t v16 = (int32x4_t)vmulq_f32(v15, v15);
          v16.i32[0] = vadd_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v16.i8, 1)), (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v16, 2)).u32[0];
          float32x2_t v17 = vrsqrte_f32((float32x2_t)v16.u32[0]);
          long long v61 = v11;
          uint64_t v63 = *((void *)&v11 + 1);
          uint64_t v59 = *((void *)&v11 + 1);
          long long v60 = v11;
          v54[6] = v11;
          uint64_t v62 = 0;
          long long v55 = v11;
          long long v56 = v11;
          long long v57 = v11;
          uint64_t v58 = 0;
          float32x4_t v49 = vmulq_n_f32(v15, vmul_f32(vrsqrts_f32((float32x2_t)v16.u32[0], vmul_f32(v17, v17)), v17).f32[0]);
          sub_20B19A3F4(*(void *)(a1 + 128));
          if (v58)
          {
            uint64_t v20 = qword_267691128;
            long long v21 = *(_OWORD *)(a1 + 112);
            void v54[2] = vnegq_f32(v49);
            v54[3] = v21;
            v54[4] = v56;
            v54[5] = v57;
            v54[0] = v60;
            v54[1] = v55;
            memset(v53, 0, sizeof(v53));
            uint64_t v22 = objc_msgSend_textureData(*(void **)(a1 + 136), v18, v19);
            uint64_t v25 = objc_msgSend_textureData(*(void **)(a1 + 144), v23, v24);
            (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _OWORD *))(*(void *)v20 + 24))(v20, v54, v22, v25, v53);
            *(double *)v26.i64 = (*(double (**)(uint64_t, _OWORD *, _OWORD *))(*(void *)v20 + 16))(v20, v54, v53);
            float32x4_t v46 = v26;
            float v27 = powf(v26.f32[0], 2.2);
            float32x4_t v28 = v46;
            v28.f32[0] = v27;
            float32x4_t v50 = v28;
            float v29 = powf(v46.f32[1], 2.2);
            float32x4_t v30 = v50;
            v30.f32[1] = v29;
            float32x4_t v51 = v30;
            float v31 = v46.f32[2];
            float v32 = 2.2;
          }
          else
          {
            float32x4_t v33 = (int32x2_t *)objc_msgSend_textureData(*(void **)(a1 + 136), v18, v19);
            *(double *)v34.i64 = sub_20B1BB520(v33, v49);
            float32x4_t v47 = v34;
            float v35 = powf(v34.f32[0], 0.625);
            float32x4_t v36 = v47;
            v36.f32[0] = v35;
            float32x4_t v52 = v36;
            float v37 = powf(v47.f32[1], 0.625);
            float32x4_t v38 = v52;
            v38.f32[1] = v37;
            float32x4_t v51 = v38;
            float v31 = v47.f32[2];
            float v32 = 0.625;
          }
          float v39 = powf(v31, v32);
          float32x4_t v40 = v51;
          v40.f32[2] = v39;
          long long v11 = 0uLL;
          int16x8_t v41 = (int16x8_t)vcvtq_s32_f32(vminnmq_f32(vmaxnmq_f32(vmulq_f32(v40, v43), (float32x4_t)0), v43));
          *(int16x4_t *)v41.i8 = vmovn_s32((int32x4_t)v41);
          *(_DWORD *)(v8 + 4 * (v13 + v7 * *(_DWORD *)(a1 + 168))) = vmovn_s16(v41).u32[0];
          int32x2_t v10 = *(int32x2_t *)(a1 + 168);
          __int32 v12 = v10.i32[0];
          ++v13;
        }
        while ((int)v13 < v10.i32[0]);
      }
      __int32 v9 = v10.i32[1];
      LODWORD(v4) = v4 + 1;
      ++v7;
    }
    while (v4 != v5);
  }
  dispatch_group_async(*(dispatch_group_t *)(a1 + 152), *(dispatch_queue_t *)(a1 + 160), &unk_26BF51960);
}

void sub_20B19B1D0(void ***a1)
{
  uint64_t v1 = *a1;
  float32x4_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20B19B250(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    unint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }
      while (v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20B19B2B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B19B308(uint64_t a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3)
{
  uint64_t v3 = a3;
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  sub_20B0A3504((uint64_t)&v69, *(unsigned int *)a3);
  uint64_t v6 = MEMORY[0x2105310B0](&v68, "constant");
  int v7 = (uint64_t *)(a1 + 80);
  unint64_t v8 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
  __int32 v9 = (atomic_uint *)(v68 & 0xFFFFFFFFFFFFFFF8);
  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v8 == v9)
  {
    if (*(void *)v3)
    {
      unint64_t v18 = 0;
      do
      {
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v69);
        *(_DWORD *)(v71 + 4 * v18++) = 0;
      }
      while (*(void *)v3 > v18);
    }
  }
  else
  {
    uint64_t v10 = MEMORY[0x2105310B0](v6, "vertex");
    unint64_t v11 = *v7 & 0xFFFFFFFFFFFFFFF8;
    __int32 v12 = (atomic_uint *)(v68 & 0xFFFFFFFFFFFFFFF8);
    if ((v68 & 7) != 0) {
      atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v11 == v12)
    {
      if (!*(void *)(a1 + 16)) {
        goto LABEL_32;
      }
      if (*(void *)v3)
      {
        unint64_t v19 = 0;
        do
        {
          sub_20B06C1E8(v3);
          uint64_t v20 = *(int *)(*((void *)v3 + 4) + 4 * v19);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16));
          LODWORD(v20) = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v20);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v69);
          *(_DWORD *)(v71 + 4 * v19++) = v20;
        }
        while (*(void *)v3 > v19);
      }
    }
    else
    {
      uint64_t v13 = MEMORY[0x2105310B0](v10, "uniform");
      unint64_t v14 = *v7 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v15 = (atomic_uint *)(v68 & 0xFFFFFFFFFFFFFFF8);
      if ((v68 & 7) != 0) {
        atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v14 == v15)
      {
        uint64_t v21 = *(void *)a2;
        if (*(void *)(a1 + 16))
        {
          if (v21)
          {
            unint64_t v22 = 0;
            LODWORD(i) = 0;
            do
            {
              int v24 = 0;
              for (uint64_t i = (int)i; ; ++i)
              {
                sub_20B06C1E8(a2);
                if (v24 >= *(_DWORD *)(*((void *)a2 + 4) + 4 * v22)) {
                  break;
                }
                sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16));
                int v25 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * v22);
                sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v69);
                *(_DWORD *)(v71 + 4 * i) = v25;
                ++v24;
              }
              ++v22;
            }
            while (*(void *)a2 > v22);
          }
        }
        else if (v21)
        {
          unint64_t v35 = 0;
          LODWORD(j) = 0;
          do
          {
            int v37 = 0;
            for (uint64_t j = (int)j; ; ++j)
            {
              sub_20B06C1E8(a2);
              if (v37 >= *(_DWORD *)(*((void *)a2 + 4) + 4 * v35)) {
                break;
              }
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v69);
              *(_DWORD *)(v71 + 4 * j) = v35;
              ++v37;
            }
            ++v35;
          }
          while (*(void *)a2 > v35);
        }
      }
      else
      {
        MEMORY[0x2105310B0](v13, "faceVarying");
        unint64_t v16 = *v7 & 0xFFFFFFFFFFFFFFF8;
        float32x2_t v17 = (atomic_uint *)(v68 & 0xFFFFFFFFFFFFFFF8);
        if ((v68 & 7) != 0) {
          atomic_fetch_add_explicit(v17, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)v16 == v17)
        {
          if (*(void *)(a1 + 16))
          {
            uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16);
LABEL_32:
            sub_20B0A4010((uint64_t)&v69, (long long *)v3);
            goto LABEL_33;
          }
          if (*(void *)v3)
          {
            unint64_t v38 = 0;
            do
            {
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v69);
              *(_DWORD *)(v71 + 4 * v38) = v38;
              ++v38;
            }
            while (*(void *)v3 > v38);
          }
        }
      }
    }
  }
LABEL_33:
  float32x4_t v26 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_39;
  }
  if (!atomic_load(v26)) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_39:
    long long v65 = v69;
    long long v66 = v70;
    uint64_t v67 = v71;
    if (v71)
    {
      float v29 = (atomic_ullong *)(v71 - 16);
      if (*((void *)&v66 + 1)) {
        float v29 = (atomic_ullong *)*((void *)&v66 + 1);
      }
      atomic_fetch_add_explicit(v29, 1uLL, memory_order_relaxed);
    }
    sub_20B19BAB8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v65, *(int *)(a1 + 88), (void *)a1);
    sub_20B06A6E8((uint64_t)&v65);
  }
  else
  {
    if (!atomic_load(v26)) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_57;
    }
    if (!atomic_load(v26)) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_57:
      long long v62 = v69;
      long long v63 = v70;
      uint64_t v64 = v71;
      if (v71)
      {
        float v32 = (atomic_ullong *)(v71 - 16);
        if (*((void *)&v63 + 1)) {
          float v32 = (atomic_ullong *)*((void *)&v63 + 1);
        }
        atomic_fetch_add_explicit(v32, 1uLL, memory_order_relaxed);
      }
      sub_20B19BC28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v62, *(int *)(a1 + 88), (void *)a1);
      sub_20B06A6E8((uint64_t)&v62);
    }
    else
    {
      if (!atomic_load(v26)) {
        sub_20B0A6508(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        long long v59 = v69;
        long long v60 = v70;
        uint64_t v61 = v71;
        if (v71)
        {
          float32x4_t v34 = (atomic_ullong *)(v71 - 16);
          if (*((void *)&v60 + 1)) {
            float32x4_t v34 = (atomic_ullong *)*((void *)&v60 + 1);
          }
          atomic_fetch_add_explicit(v34, 1uLL, memory_order_relaxed);
        }
        sub_20B19BDAC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v59, *(int *)(a1 + 88), (void *)a1);
        sub_20B06A6E8((uint64_t)&v59);
      }
      else
      {
        if (!atomic_load(v26)) {
          sub_20B0A6508(MEMORY[0x263F90560]);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          long long v56 = v69;
          long long v57 = v70;
          uint64_t v58 = v71;
          if (v71)
          {
            float32x4_t v40 = (atomic_ullong *)(v71 - 16);
            if (*((void *)&v57 + 1)) {
              float32x4_t v40 = (atomic_ullong *)*((void *)&v57 + 1);
            }
            atomic_fetch_add_explicit(v40, 1uLL, memory_order_relaxed);
          }
          sub_20B19BF14((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v56, *(int *)(a1 + 88), (void *)a1);
          sub_20B06A6E8((uint64_t)&v56);
        }
        else
        {
          if (!atomic_load(v26)) {
            sub_20B0A6508(MEMORY[0x263F90560]);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            long long v53 = v69;
            long long v54 = v70;
            uint64_t v55 = v71;
            if (v71)
            {
              long long v42 = (atomic_ullong *)(v71 - 16);
              if (*((void *)&v54 + 1)) {
                long long v42 = (atomic_ullong *)*((void *)&v54 + 1);
              }
              atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
            }
            sub_20B19C084((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53, *(int *)(a1 + 88), (void *)a1);
            sub_20B06A6E8((uint64_t)&v53);
          }
          else
          {
            if (!atomic_load(v26)) {
              sub_20B0A6508(MEMORY[0x263F90560]);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              long long v50 = v69;
              long long v51 = v70;
              uint64_t v52 = v71;
              if (v71)
              {
                float32x4_t v44 = (atomic_ullong *)(v71 - 16);
                if (*((void *)&v51 + 1)) {
                  float32x4_t v44 = (atomic_ullong *)*((void *)&v51 + 1);
                }
                atomic_fetch_add_explicit(v44, 1uLL, memory_order_relaxed);
              }
              sub_20B19C1F4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v50, *(int *)(a1 + 88), (void *)a1);
              sub_20B06A6E8((uint64_t)&v50);
            }
            else
            {
              if (!atomic_load(v26)) {
                sub_20B0A6508(MEMORY[0x263F90560]);
              }
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
              {
                long long v47 = v69;
                long long v48 = v70;
                uint64_t v49 = v71;
                if (v71)
                {
                  float32x4_t v46 = (atomic_ullong *)(v71 - 16);
                  if (*((void *)&v48 + 1)) {
                    float32x4_t v46 = (atomic_ullong *)*((void *)&v48 + 1);
                  }
                  atomic_fetch_add_explicit(v46, 1uLL, memory_order_relaxed);
                }
                sub_20B19C35C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v47, *(int *)(a1 + 88), (void *)a1);
                sub_20B06A6E8((uint64_t)&v47);
              }
            }
          }
        }
      }
    }
  }
  MEMORY[0x2105310B0](&v68, "vertex");
  if (&v68 == v7)
  {
    if ((v68 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *int v7 = v68;
  }
  sub_20B06A85C((void *)(a1 + 16));
  sub_20B06A6E8((uint64_t)&v69);
}

void sub_20B19B9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B06A6E8((uint64_t)&a9);
  sub_20B06A6E8(v9 - 128);
  _Unwind_Resume(a1);
}

void sub_20B19BAB8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_20B19FE14((uint64_t)v19, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_20B0A46C0(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v16 = *(_OWORD *)v6;
  long long v17 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v18 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v17 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v17 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  if ((void)v16)
  {
    unint64_t v10 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v11 = 0;
      int v12 = 0;
      do
      {
        if (a2)
        {
          uint64_t v13 = 0;
          do
          {
            sub_20B06C1E8(a1);
            uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
            sub_20B112470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
            uint64_t v15 = v18;
            sub_20B112470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
            *(void *)(v20 + 8 * v12 + 8 * v13) = *(void *)(v15 + 8 * (v13 + v14 * a2));
            ++v13;
          }
          while (a2 != v13);
          v12 += v13;
          unint64_t v10 = *(void *)a1;
        }
        ++v11;
      }
      while (v10 > v11);
    }
  }
  sub_20B19FE88(a3, v19);
  sub_20B06A6E8((uint64_t)&v16);
  sub_20B06A6E8((uint64_t)v19);
}

void sub_20B19BBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_20B19BC28(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, void *a3)
{
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  sub_20B0A4CAC((uint64_t)v23, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_20B0A3578(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v20 = *(_OWORD *)v6;
  long long v21 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v22 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v21 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v21 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  if ((void)v20)
  {
    unint64_t v10 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v11 = 0;
      int v12 = 0;
      do
      {
        if (a2)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 12 * v12;
          do
          {
            sub_20B06C1E8(a1);
            uint64_t v15 = *(int *)(*((void *)a1 + 4) + 4 * v11);
            sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
            uint64_t v16 = v22;
            sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23);
            long long v17 = (uint64_t *)(v16 + 12 * (v13 + v15 * a2));
            uint64_t v18 = v24 + v14;
            uint64_t v19 = *v17;
            *(_DWORD *)(v18 + 8) = *((_DWORD *)v17 + 2);
            *(void *)uint64_t v18 = v19;
            ++v13;
            v14 += 12;
          }
          while (a2 != v13);
          v12 += v13;
          unint64_t v10 = *(void *)a1;
        }
        ++v11;
      }
      while (v10 > v11);
    }
  }
  sub_20B0A3ED0(a3, v23);
  sub_20B06A6E8((uint64_t)&v20);
  sub_20B06A6E8((uint64_t)v23);
}

void sub_20B19BD7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_20B19BDAC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, void *a3)
{
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  sub_20B0A3504((uint64_t)v18, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_20B1A0460(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v15 = *(_OWORD *)v6;
  long long v16 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v17 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v16 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  if ((void)v15)
  {
    unint64_t v10 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v11 = 0;
      int v12 = 0;
      do
      {
        if (a2)
        {
          uint64_t v13 = 0;
          do
          {
            sub_20B06C1E8(a1);
            uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
            sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
            LODWORD(v14) = *(_DWORD *)(v17 + 4 * (v13 + v14 * a2));
            sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
            *(_DWORD *)(v19 + 4 * v12 + 4 * v13++) = v14;
          }
          while (a2 != v13);
          v12 += v13;
          unint64_t v10 = *(void *)a1;
        }
        ++v11;
      }
      while (v10 > v11);
    }
  }
  sub_20B1A04F4(a3, v18);
  sub_20B06A6E8((uint64_t)&v15);
  sub_20B06A6E8((uint64_t)v18);
}

void sub_20B19BEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_20B19BF14(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, void *a3)
{
  uint64_t v21 = 0;
  memset(v20, 0, sizeof(v20));
  sub_20B06A31C((uint64_t)v20, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_20B06A288(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v17 = *(_OWORD *)v6;
  long long v18 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v19 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v18 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v18 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  if ((void)v17)
  {
    unint64_t v10 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v11 = 0;
      int v12 = 0;
      do
      {
        if (a2)
        {
          uint64_t v13 = 0;
          uint64_t v14 = 16 * v12;
          do
          {
            sub_20B06C1E8(a1);
            uint64_t v15 = *(int *)(*((void *)a1 + 4) + 4 * v11);
            sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
            uint64_t v16 = v19;
            sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
            *(_OWORD *)(v21 + v14) = *(_OWORD *)(v16 + 16 * (v13 + v15 * a2));
            ++v13;
            v14 += 16;
          }
          while (a2 != v13);
          v12 += v13;
          unint64_t v10 = *(void *)a1;
        }
        ++v11;
      }
      while (v10 > v11);
    }
  }
  sub_20B0C4C84(a3, v20);
  sub_20B06A6E8((uint64_t)&v17);
  sub_20B06A6E8((uint64_t)v20);
}

void sub_20B19C054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_20B19C084(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_20B0C4EFC((uint64_t)v19, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_20B0C2AB8(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v16 = *(_OWORD *)v6;
  long long v17 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v18 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v17 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v17 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  if ((void)v16)
  {
    unint64_t v10 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v11 = 0;
      int v12 = 0;
      do
      {
        if (a2)
        {
          uint64_t v13 = 0;
          do
          {
            sub_20B06C1E8(a1);
            uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
            sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
            int v15 = *(_DWORD *)(v18 + 4 * (v13 + v14 * a2));
            sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
            *(_DWORD *)(v20 + 4 * v12 + 4 * v13++) = v15;
          }
          while (a2 != v13);
          v12 += v13;
          unint64_t v10 = *(void *)a1;
        }
        ++v11;
      }
      while (v10 > v11);
    }
  }
  sub_20B0C4F70(a3, v19);
  sub_20B06A6E8((uint64_t)&v16);
  sub_20B06A6E8((uint64_t)v19);
}

void sub_20B19C1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_20B19C1F4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, void *a3)
{
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  sub_20B1A0808((uint64_t)v18, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_20B0C2B4C(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v15 = *(_OWORD *)v6;
  long long v16 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v17 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v16 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  if ((void)v15)
  {
    unint64_t v10 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v11 = 0;
      int v12 = 0;
      do
      {
        if (a2)
        {
          uint64_t v13 = 0;
          do
          {
            sub_20B06C1E8(a1);
            uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
            sub_20B0C7CA8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
            LODWORD(v14) = *(_DWORD *)(v17 + 4 * (v13 + v14 * a2));
            sub_20B0C7CA8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
            *(_DWORD *)(v19 + 4 * v12 + 4 * v13++) = v14;
          }
          while (a2 != v13);
          v12 += v13;
          unint64_t v10 = *(void *)a1;
        }
        ++v11;
      }
      while (v10 > v11);
    }
  }
  sub_20B1A087C(a3, v18);
  sub_20B06A6E8((uint64_t)&v15);
  sub_20B06A6E8((uint64_t)v18);
}

void sub_20B19C32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_20B19C35C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, void *a3)
{
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  sub_20B0C4D3C((uint64_t)v18, (*(_DWORD *)a1 * a2));
  uint64_t v6 = sub_20B0C4DB0(a3);
  long long v7 = *(_OWORD *)(v6 + 16);
  long long v15 = *(_OWORD *)v6;
  long long v16 = v7;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v17 = v8;
  if (v8)
  {
    uint64_t v9 = (atomic_ullong *)(v8 - 16);
    if (*((void *)&v16 + 1)) {
      uint64_t v9 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  if ((void)v15)
  {
    unint64_t v10 = *(void *)a1;
    if (*(void *)a1)
    {
      unint64_t v11 = 0;
      int v12 = 0;
      do
      {
        if (a2)
        {
          uint64_t v13 = 0;
          do
          {
            sub_20B06C1E8(a1);
            uint64_t v14 = *(int *)(*((void *)a1 + 4) + 4 * v11);
            sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v15);
            LOWORD(v14) = *(_WORD *)(v17 + 2 * (v13 + v14 * a2));
            sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v18);
            *(_WORD *)(v19 + 2 * v12 + 2 * v13++) = v14;
          }
          while (a2 != v13);
          v12 += v13;
          unint64_t v10 = *(void *)a1;
        }
        ++v11;
      }
      while (v10 > v11);
    }
  }
  sub_20B0C4E44(a3, v18);
  sub_20B06A6E8((uint64_t)&v15);
  sub_20B06A6E8((uint64_t)v18);
}

void sub_20B19C494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_20B19C4C4(uint64_t a1, unsigned int a2)
{
  float32x4_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_20B0A3504((uint64_t)&v44, a2);
  sub_20B06C1E8(v3);
  unint64_t v4 = v46;
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v44);
  uint64_t v5 = &v46[4 * v44] - v4;
  if (v5 >= 1) {
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  }
  uint64_t v6 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
    goto LABEL_9;
  }
  if (!atomic_load(v6)) {
    sub_20B0A6508(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_9:
    long long v41 = v44;
    long long v42 = v45;
    float32x4_t v43 = v46;
    if (v46)
    {
      uint64_t v9 = (atomic_ullong *)(v46 - 16);
      if (*((void *)&v42 + 1)) {
        uint64_t v9 = (atomic_ullong *)*((void *)&v42 + 1);
      }
      atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
    }
    sub_20B19BAB8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41, *(int *)(a1 + 88), (void *)a1);
    sub_20B06A6E8((uint64_t)&v41);
  }
  else
  {
    if (!atomic_load(v6)) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_21;
    }
    if (!atomic_load(v6)) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_21:
      long long v38 = v44;
      long long v39 = v45;
      float32x4_t v40 = v46;
      if (v46)
      {
        int v12 = (atomic_ullong *)(v46 - 16);
        if (*((void *)&v39 + 1)) {
          int v12 = (atomic_ullong *)*((void *)&v39 + 1);
        }
        atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
      }
      sub_20B19BC28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38, *(int *)(a1 + 88), (void *)a1);
      sub_20B06A6E8((uint64_t)&v38);
    }
    else
    {
      if (!atomic_load(v6)) {
        sub_20B0A6508(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        long long v35 = v44;
        long long v36 = v45;
        int v37 = v46;
        if (v46)
        {
          uint64_t v14 = (atomic_ullong *)(v46 - 16);
          if (*((void *)&v36 + 1)) {
            uint64_t v14 = (atomic_ullong *)*((void *)&v36 + 1);
          }
          atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
        }
        sub_20B19BDAC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35, *(int *)(a1 + 88), (void *)a1);
        sub_20B06A6E8((uint64_t)&v35);
      }
      else
      {
        if (!atomic_load(v6)) {
          sub_20B0A6508(MEMORY[0x263F90560]);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          long long v32 = v44;
          long long v33 = v45;
          float32x4_t v34 = v46;
          if (v46)
          {
            long long v16 = (atomic_ullong *)(v46 - 16);
            if (*((void *)&v33 + 1)) {
              long long v16 = (atomic_ullong *)*((void *)&v33 + 1);
            }
            atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
          }
          sub_20B19BF14((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v32, *(int *)(a1 + 88), (void *)a1);
          sub_20B06A6E8((uint64_t)&v32);
        }
        else
        {
          if (!atomic_load(v6)) {
            sub_20B0A6508(MEMORY[0x263F90560]);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            long long v29 = v44;
            long long v30 = v45;
            float v31 = v46;
            if (v46)
            {
              uint64_t v18 = (atomic_ullong *)(v46 - 16);
              if (*((void *)&v30 + 1)) {
                uint64_t v18 = (atomic_ullong *)*((void *)&v30 + 1);
              }
              atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
            }
            sub_20B19C084((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29, *(int *)(a1 + 88), (void *)a1);
            sub_20B06A6E8((uint64_t)&v29);
          }
          else
          {
            if (!atomic_load(v6)) {
              sub_20B0A6508(MEMORY[0x263F90560]);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              long long v26 = v44;
              long long v27 = v45;
              float32x4_t v28 = v46;
              if (v46)
              {
                uint64_t v20 = (atomic_ullong *)(v46 - 16);
                if (*((void *)&v27 + 1)) {
                  uint64_t v20 = (atomic_ullong *)*((void *)&v27 + 1);
                }
                atomic_fetch_add_explicit(v20, 1uLL, memory_order_relaxed);
              }
              sub_20B19C1F4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v26, *(int *)(a1 + 88), (void *)a1);
              sub_20B06A6E8((uint64_t)&v26);
            }
            else
            {
              if (!atomic_load(v6)) {
                sub_20B0A6508(MEMORY[0x263F90560]);
              }
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
              {
                long long v23 = v44;
                long long v24 = v45;
                int v25 = v46;
                if (v46)
                {
                  uint64_t v22 = (atomic_ullong *)(v46 - 16);
                  if (*((void *)&v24 + 1)) {
                    uint64_t v22 = (atomic_ullong *)*((void *)&v24 + 1);
                  }
                  atomic_fetch_add_explicit(v22, 1uLL, memory_order_relaxed);
                }
                sub_20B19C35C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v23, *(int *)(a1 + 88), (void *)a1);
                sub_20B06A6E8((uint64_t)&v23);
              }
            }
          }
        }
      }
    }
  }
  sub_20B06A6E8((uint64_t)&v44);
}

void sub_20B19C8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B06A6E8((uint64_t)&a9);
  sub_20B06A6E8(v9 - 80);
  _Unwind_Resume(a1);
}

void sub_20B19C988(unint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a4, uint64_t *a5)
{
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
  int v56 = 0;
  *(void *)&long long v53 = &v56;
  sub_20B0A624C(a1, v10, (_DWORD **)&v53);
  sub_20B0C3BB4(a5, (uint64_t)a4);
  uint64_t v11 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v12 = 0;
    int v13 = -1;
    uint64_t v52 = v9;
    do
    {
      uint64_t v14 = v11 + 96 * v12;
      MEMORY[0x2105310B0](&v53, "vertex");
      uint64_t v15 = *(void *)(v14 + 80);
      long long v16 = (atomic_uint *)(v53 & 0xFFFFFFFFFFFFFFF8);
      if ((v53 & 7) != 0) {
        atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v18 = *a2;
      if ((atomic_uint *)v17 == v16)
      {
        if (*(void *)(v18 + 96 * v12 + 16))
        {
          uint64_t v55 = 0;
          long long v53 = 0u;
          long long v54 = 0u;
          sub_20B0A3504((uint64_t)&v53, *(unsigned int *)a4);
          if (*(void *)a4)
          {
            unint64_t v31 = 0;
            do
            {
              sub_20B06C1E8(a4);
              uint64_t v32 = *(int *)(*((void *)a4 + 4) + 4 * v31);
              uint64_t v33 = *a2;
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(*a2 + 96 * v12 + 16));
              LODWORD(v33) = *(_DWORD *)(*(void *)(v33 + 96 * v12 + 48) + 4 * v32);
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
              *(_DWORD *)(v55 + 4 * v31) = v33;
              uint64_t v35 = *a5;
              uint64_t v34 = a5[1];
              sub_20B06C1E8(v52);
              int v36 = -858993459 * ((unint64_t)(v34 - v35) >> 3);
              uint64_t v9 = v52;
              *(_DWORD *)(*((void *)v52 + 4) + 4 * v12) = v36;
              ++v31;
            }
            while (*(void *)a4 > v31);
          }
          sub_20B0C3BB4(a5, (uint64_t)&v53);
          sub_20B06A6E8((uint64_t)&v53);
        }
        else
        {
          sub_20B06C1E8(v9);
          *(_DWORD *)(*((void *)v9 + 4) + 4 * v12) = 0;
        }
      }
      else
      {
        uint64_t v19 = v18 + 96 * v12;
        MEMORY[0x2105310B0](&v53, "uniform");
        uint64_t v20 = *(void *)(v19 + 80);
        uint64_t v21 = (atomic_uint *)(v53 & 0xFFFFFFFFFFFFFFF8);
        if ((v53 & 7) != 0) {
          atomic_fetch_add_explicit(v21, 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v23 = *a2;
        if ((atomic_uint *)v22 == v21)
        {
          if (*(void *)(v23 + 96 * v12 + 16))
          {
            int v51 = v13;
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            sub_20B0A3504((uint64_t)&v53, *(unsigned int *)a4);
            if (*(void *)a3)
            {
              unint64_t v37 = 0;
              LODWORD(i) = 0;
              do
              {
                int v39 = 0;
                for (uint64_t i = (int)i; ; ++i)
                {
                  sub_20B06C1E8(a3);
                  if (v39 >= *(_DWORD *)(*((void *)a3 + 4) + 4 * v37)) {
                    break;
                  }
                  uint64_t v40 = *a2;
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(*a2 + 96 * v12 + 16));
                  LODWORD(v40) = *(_DWORD *)(*(void *)(v40 + 96 * v12 + 48) + 4 * v37);
                  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
                  *(_DWORD *)(v55 + 4 * i) = v40;
                  ++v39;
                }
                ++v37;
              }
              while (*(void *)a3 > v37);
            }
            uint64_t v42 = *a5;
            uint64_t v41 = a5[1];
            uint64_t v9 = v52;
            sub_20B06C1E8(v52);
            *(_DWORD *)(*((void *)v52 + 4) + 4 * v12) = -858993459 * ((unint64_t)(v41 - v42) >> 3);
            sub_20B0C3BB4(a5, (uint64_t)&v53);
            sub_20B06A6E8((uint64_t)&v53);
            int v13 = v51;
          }
          else
          {
            if (v13 == -1)
            {
              uint64_t v55 = 0;
              long long v53 = 0u;
              long long v54 = 0u;
              sub_20B0A3504((uint64_t)&v53, *(unsigned int *)a4);
              if (*(void *)a3)
              {
                unint64_t v43 = 0;
                LODWORD(j) = 0;
                do
                {
                  int v45 = 0;
                  for (uint64_t j = (int)j; ; ++j)
                  {
                    sub_20B06C1E8(a3);
                    if (v45 >= *(_DWORD *)(*((void *)a3 + 4) + 4 * v43)) {
                      break;
                    }
                    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
                    *(_DWORD *)(v55 + 4 * j) = v43;
                    ++v45;
                  }
                  ++v43;
                }
                while (*(void *)a3 > v43);
              }
              sub_20B0C3BB4(a5, (uint64_t)&v53);
              uint64_t v47 = *a5;
              uint64_t v46 = a5[1];
              sub_20B06A6E8((uint64_t)&v53);
              int v13 = -1 - 858993459 * ((unint64_t)(v46 - v47) >> 3);
            }
            uint64_t v9 = v52;
            sub_20B06C1E8(v52);
            *(_DWORD *)(*((void *)v52 + 4) + 4 * v12) = v13;
          }
        }
        else
        {
          uint64_t v24 = v23 + 96 * v12;
          MEMORY[0x2105310B0](&v53, "constant");
          uint64_t v25 = *(void *)(v24 + 80);
          long long v26 = (atomic_uint *)(v53 & 0xFFFFFFFFFFFFFFF8);
          if ((v53 & 7) != 0) {
            atomic_fetch_add_explicit(v26, 0xFFFFFFFE, memory_order_release);
          }
          if ((atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8) != v26)
          {
            uint64_t v27 = *a2 + 96 * v12;
            MEMORY[0x2105310B0](&v53, "faceVarying");
            uint64_t v28 = *(void *)(v27 + 80);
            long long v29 = (atomic_uint *)(v53 & 0xFFFFFFFFFFFFFFF8);
            if ((v53 & 7) != 0) {
              atomic_fetch_add_explicit(v29, 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v28 & 0xFFFFFFFFFFFFFFF8) == v29)
            {
              if (*(void *)(*a2 + 96 * v12 + 16))
              {
                int v30 = -858993459 * ((unint64_t)(a5[1] - *a5) >> 3);
                sub_20B06C1E8(v9);
                *(_DWORD *)(*((void *)v9 + 4) + 4 * v12) = v30;
                sub_20B0C3BB4(a5, *a2 + 96 * v12 + 16);
              }
              else
              {
                uint64_t v55 = 0;
                long long v53 = 0u;
                long long v54 = 0u;
                sub_20B0A3504((uint64_t)&v53, *(unsigned int *)a4);
                if (*(void *)a4)
                {
                  unint64_t v48 = 0;
                  do
                  {
                    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v53);
                    *(_DWORD *)(v55 + 4 * v48) = v48;
                    ++v48;
                  }
                  while (*(void *)a4 > v48);
                }
                uint64_t v50 = *a5;
                uint64_t v49 = a5[1];
                sub_20B06C1E8(v9);
                *(_DWORD *)(*((void *)v9 + 4) + 4 * v12) = -858993459 * ((unint64_t)(v49 - v50) >> 3);
                sub_20B0C3BB4(a5, *a2 + 96 * v12 + 16);
                sub_20B06A6E8((uint64_t)&v53);
              }
            }
          }
        }
      }
      ++v12;
      uint64_t v11 = *a2;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5) > v12);
  }
}

void sub_20B19CEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_20B06A6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B19CF20(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, void *a3, uint64_t **a4, unint64_t a5, int *a6)
{
  unint64_t v6 = a5;
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (a4[1] - *a4);
  uint64_t v11 = **a4;
  unint64_t v64 = (int)v10;
  LODWORD(v77[0]) = 0;
  *(void *)&v79[0] = v77;
  sub_20B0A624C(a2, (int)v10 * a5, (_DWORD **)v79);
  sub_20B06C1E8(a1);
  unint64_t v12 = (void *)*((void *)a1 + 4);
  sub_20B06C1E8(a1);
  uint64_t v13 = *((void *)a1 + 4) + 4 * *(void *)a1 - (void)v12;
  if (v13 >= 1) {
    memset(v12, 255, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  }
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
  uint64_t v15 = a2 + 4;
  uint64_t v14 = (void *)a2[4];
  sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
  uint64_t v16 = a2[4] + 4 * *a2 - (void)v14;
  if (v16 >= 1) {
    memset(v14, 255, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
  }
  int64_t v80 = 0;
  memset(v79, 0, sizeof(v79));
  sub_20B0A3504((uint64_t)v79, v10);
  uint64_t v78 = 0;
  memset(v77, 0, sizeof(v77));
  sub_20B0A3504((uint64_t)v77, v10);
  uint64_t v17 = (int)v10 + 1;
  uint64_t v76 = 0;
  memset(v75, 0, sizeof(v75));
  sub_20B0A3504((uint64_t)v75, (v10 + 1));
  uint64_t v18 = v11 << 32;
  *a6 = 0;
  if (v11 << 32)
  {
    uint64_t v19 = 0;
    long long v65 = a1;
    unint64_t v66 = v10 << 32;
    unint64_t v20 = (int)v11;
    uint64_t v21 = (int)v10 - 1;
    uint64_t v70 = v17;
    uint64_t v71 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3;
    if (v64 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v64;
    }
    uint64_t v23 = 2;
    if (v64 > 2) {
      uint64_t v23 = v64;
    }
    uint64_t v68 = v23;
    long long v69 = a3 + 4;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    unint64_t v63 = v20;
    unint64_t v61 = v6;
    uint64_t v60 = 4 * v17;
    do
    {
      if (v66)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 4;
        do
        {
          int v26 = *(_DWORD *)((*a4)[v25] + 4 * v19);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
          v80[v24++] = v26;
          v25 += 5;
        }
        while (v22 != v24);
      }
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
      int v27 = *v80;
      sub_20B06C1E8(v65);
      int v28 = v27;
      *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = -1;
      if (v66)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
          int v30 = *(_DWORD *)(*v15 + 4 * v64 * v27 + 4 * i);
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
          *(_DWORD *)(v78 + 4 * i) = v30;
        }
      }
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
      int v31 = *(_DWORD *)(v78 + 4 * v21);
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
      uint64_t v67 = (int)v64 * (uint64_t)v27;
      if (*(_DWORD *)(*v15 + 4 * v67) == -1)
      {
        if (v66)
        {
          for (uint64_t j = 0; j != v22; ++j)
          {
            if (v21 == j)
            {
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
              *(_DWORD *)(*v15 + 4 * (v21 + v67)) = -1;
            }
            else
            {
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              int v44 = v80[j + 1];
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
              *(_DWORD *)(*v15 + 4 * (j + v67)) = v44;
            }
          }
        }
        sub_20B06C1E8(v65);
        *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = v28;
        ++*a6;
      }
      else
      {
        int v32 = v27;
        uint64_t v33 = 0;
        do
        {
          if (v21 == v33)
          {
            sub_20B06C1E8(v65);
            *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = v32;
            goto LABEL_54;
          }
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
          int v34 = v80[v33 + 1];
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
          int v35 = *(_DWORD *)(v78 + 4 * v33++);
          BOOL v36 = v34 == v35;
          int v32 = v27;
        }
        while (v36);
        int v37 = v31;
        if (v31 < 0)
        {
          int v38 = -1;
        }
        else
        {
          while (1)
          {
            int v38 = v37;
            if (v70)
            {
              for (uint64_t k = 0; k != v70; ++k)
              {
                sub_20B06C1E8(v71);
                int v40 = *(_DWORD *)(*v69 + v60 * v38 + 4 * k);
                sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
                *(_DWORD *)(v76 + 4 * k) = v40;
              }
            }
            sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
            if (v66 < 0x100000001) {
              break;
            }
            int v37 = *(_DWORD *)(v76 + 4 * v64);
            uint64_t v41 = 1;
            while (1)
            {
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              int v42 = v80[v41];
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
              if (v42 != *(_DWORD *)(v76 + 4 * v41)) {
                break;
              }
              if (v68 == ++v41) {
                goto LABEL_45;
              }
            }
            if (v37 < 0) {
              goto LABEL_46;
            }
          }
          int v38 = v31;
LABEL_45:
          sub_20B06C1E8(v65);
          *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = v38 + v61;
        }
LABEL_46:
        sub_20B06C1E8(v65);
        if (*(_DWORD *)(*((void *)v65 + 4) + 4 * v19) == -1)
        {
          unint64_t v45 = *(int *)v71;
          if (v31 < 0)
          {
            sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
            uint64_t v48 = v21 + v67;
            uint64_t v46 = a2 + 4;
            unint64_t v47 = v70;
          }
          else
          {
            sub_20B06C1E8(v71);
            uint64_t v46 = v69;
            unint64_t v47 = v70;
            uint64_t v48 = v47 + v47 * v38 - 1;
          }
          unint64_t v49 = v45 / v47;
          *(_DWORD *)(*v46 + 4 * v48) = v45 / v47;
          sub_20B06C1E8(v65);
          *(_DWORD *)(*((void *)v65 + 4) + 4 * v19) = v49 + v61;
          if (v66)
          {
            uint64_t v50 = 0;
            uint64_t v51 = v22;
            do
            {
              sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              sub_20B0C857C((uint64_t)v71, &v80[v50++]);
              --v51;
            }
            while (v51);
          }
          LODWORD(v73[0]) = -1;
          sub_20B194BFC((uint64_t)v71, v73);
        }
      }
LABEL_54:
      ++v19;
    }
    while (v19 != v63);
    uint64_t v18 = *a6;
    unint64_t v6 = v61;
    a1 = v65;
  }
  if (v18 != v6)
  {
    uint64_t v74 = 0;
    memset(v73, 0, sizeof(v73));
    sub_20B0A3504((uint64_t)v73, v6);
    if (v6)
    {
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      int v54 = 0;
      do
      {
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (*(_DWORD *)(*v15 + v52) != -1)
        {
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v73);
          *(_DWORD *)(v74 + 4 * v53) = v54++;
        }
        ++v53;
        v52 += 4 * v64;
      }
      while (v6 != v53);
    }
    if (*(void *)a1)
    {
      unint64_t v55 = 0;
      do
      {
        sub_20B06C1E8(a1);
        unint64_t v56 = *(int *)(*((void *)a1 + 4) + 4 * v55);
        if (v56 >= v6)
        {
          sub_20B06C1E8(a1);
          int v58 = *(_DWORD *)(*((void *)a1 + 4) + 4 * v55);
          int v59 = *a6;
          sub_20B06C1E8(a1);
          *(_DWORD *)(*((void *)a1 + 4) + 4 * v55) = v58 - v6 + v59;
        }
        else
        {
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v73);
          int v57 = *(_DWORD *)(v74 + 4 * v56);
          sub_20B06C1E8(a1);
          *(_DWORD *)(*((void *)a1 + 4) + 4 * v55) = v57;
        }
        ++v55;
      }
      while (*(void *)a1 > v55);
    }
    sub_20B06A6E8((uint64_t)v73);
  }
  sub_20B06A6E8((uint64_t)v75);
  sub_20B06A6E8((uint64_t)v77);
  sub_20B06A6E8((uint64_t)v79);
}

void sub_20B19D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20B06A6E8((uint64_t)&a29);
  sub_20B06A6E8(v29 - 176);
  sub_20B06A6E8(v29 - 128);
  _Unwind_Resume(a1);
}

void sub_20B19D684(uint64_t a1, int a2, int a3, unsigned int a4, unint64_t a5, long long *a6, long long *a7)
{
  MEMORY[0x2105310B0](&v111, "constant");
  unint64_t v14 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (atomic_uint *)(v111 & 0xFFFFFFFFFFFFFFF8);
  if ((v111 & 7) != 0) {
    atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v14 == v15)
  {
    sub_20B19C4C4(a1, a4);
  }
  else
  {
    uint64_t v16 = (unint64_t *)MEMORY[0x263F90560];
    if (!atomic_load(MEMORY[0x263F90560])) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
      goto LABEL_10;
    }
    if (!atomic_load(v16)) {
      sub_20B0A6508(MEMORY[0x263F90560]);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_10:
      long long v19 = a6[1];
      long long v108 = *a6;
      long long v109 = v19;
      uint64_t v20 = *((void *)a6 + 4);
      uint64_t v110 = v20;
      if (v20)
      {
        uint64_t v21 = (atomic_ullong *)(v20 - 16);
        if (*((void *)&v109 + 1)) {
          uint64_t v21 = (atomic_ullong *)*((void *)&v109 + 1);
        }
        atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
      }
      long long v22 = a7[1];
      long long v105 = *a7;
      long long v106 = v22;
      uint64_t v23 = *((void *)a7 + 4);
      uint64_t v107 = v23;
      if (v23)
      {
        uint64_t v24 = (atomic_ullong *)(v23 - 16);
        if (*((void *)&v106 + 1)) {
          uint64_t v24 = (atomic_ullong *)*((void *)&v106 + 1);
        }
        atomic_fetch_add_explicit(v24, 1uLL, memory_order_relaxed);
      }
      sub_20B19DDD0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v108, (unint64_t *)&v105, a3, a4, a2, a5, (void *)a1, *(_DWORD *)(a1 + 88));
      sub_20B06A6E8((uint64_t)&v105);
      sub_20B06A6E8((uint64_t)&v108);
    }
    else
    {
      if (!atomic_load(v16)) {
        sub_20B0A6508(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
        goto LABEL_29;
      }
      if (!atomic_load(v16)) {
        sub_20B0A6508(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()) {
        goto LABEL_29;
      }
      if (!atomic_load(v16)) {
        sub_20B0A6508(MEMORY[0x263F90560]);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
LABEL_29:
        long long v28 = a6[1];
        long long v102 = *a6;
        long long v103 = v28;
        uint64_t v29 = *((void *)a6 + 4);
        uint64_t v104 = v29;
        if (v29)
        {
          int v30 = (atomic_ullong *)(v29 - 16);
          if (*((void *)&v103 + 1)) {
            int v30 = (atomic_ullong *)*((void *)&v103 + 1);
          }
          atomic_fetch_add_explicit(v30, 1uLL, memory_order_relaxed);
        }
        long long v31 = a7[1];
        long long v99 = *a7;
        long long v100 = v31;
        uint64_t v32 = *((void *)a7 + 4);
        uint64_t v101 = v32;
        if (v32)
        {
          uint64_t v33 = (atomic_ullong *)(v32 - 16);
          if (*((void *)&v100 + 1)) {
            uint64_t v33 = (atomic_ullong *)*((void *)&v100 + 1);
          }
          atomic_fetch_add_explicit(v33, 1uLL, memory_order_relaxed);
        }
        sub_20B19E100((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v102, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99, a3, a4, a2, a5, (void *)a1, *(_DWORD *)(a1 + 88));
        sub_20B06A6E8((uint64_t)&v99);
        sub_20B06A6E8((uint64_t)&v102);
      }
      else
      {
        if (!atomic_load(v16)) {
          sub_20B0A6508(MEMORY[0x263F90560]);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          long long v35 = a6[1];
          long long v96 = *a6;
          long long v97 = v35;
          uint64_t v36 = *((void *)a6 + 4);
          uint64_t v98 = v36;
          if (v36)
          {
            int v37 = (atomic_ullong *)(v36 - 16);
            if (*((void *)&v97 + 1)) {
              int v37 = (atomic_ullong *)*((void *)&v97 + 1);
            }
            atomic_fetch_add_explicit(v37, 1uLL, memory_order_relaxed);
          }
          long long v38 = a7[1];
          long long v93 = *a7;
          long long v94 = v38;
          uint64_t v39 = *((void *)a7 + 4);
          uint64_t v95 = v39;
          if (v39)
          {
            int v40 = (atomic_ullong *)(v39 - 16);
            if (*((void *)&v94 + 1)) {
              int v40 = (atomic_ullong *)*((void *)&v94 + 1);
            }
            atomic_fetch_add_explicit(v40, 1uLL, memory_order_relaxed);
          }
          sub_20B19E460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v96, (unint64_t *)&v93, a3, a4, a2, a5, (void *)a1, *(_DWORD *)(a1 + 88));
          sub_20B06A6E8((uint64_t)&v93);
          sub_20B06A6E8((uint64_t)&v96);
        }
        else
        {
          if (!atomic_load(v16)) {
            sub_20B0A6508(MEMORY[0x263F90560]);
          }
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            long long v42 = a6[1];
            long long v90 = *a6;
            long long v91 = v42;
            uint64_t v43 = *((void *)a6 + 4);
            uint64_t v92 = v43;
            if (v43)
            {
              int v44 = (atomic_ullong *)(v43 - 16);
              if (*((void *)&v91 + 1)) {
                int v44 = (atomic_ullong *)*((void *)&v91 + 1);
              }
              atomic_fetch_add_explicit(v44, 1uLL, memory_order_relaxed);
            }
            long long v45 = a7[1];
            long long v87 = *a7;
            long long v88 = v45;
            uint64_t v46 = *((void *)a7 + 4);
            uint64_t v89 = v46;
            if (v46)
            {
              unint64_t v47 = (atomic_ullong *)(v46 - 16);
              if (*((void *)&v88 + 1)) {
                unint64_t v47 = (atomic_ullong *)*((void *)&v88 + 1);
              }
              atomic_fetch_add_explicit(v47, 1uLL, memory_order_relaxed);
            }
            sub_20B19E790((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v90, (unint64_t *)&v87, a3, a4, a2, a5, (void *)a1, *(_DWORD *)(a1 + 88));
            sub_20B06A6E8((uint64_t)&v87);
            sub_20B06A6E8((uint64_t)&v90);
          }
          else
          {
            if (!atomic_load(v16)) {
              sub_20B0A6508(MEMORY[0x263F90560]);
            }
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              long long v49 = a6[1];
              long long v84 = *a6;
              long long v85 = v49;
              uint64_t v50 = *((void *)a6 + 4);
              uint64_t v86 = v50;
              if (v50)
              {
                uint64_t v51 = (atomic_ullong *)(v50 - 16);
                if (*((void *)&v85 + 1)) {
                  uint64_t v51 = (atomic_ullong *)*((void *)&v85 + 1);
                }
                atomic_fetch_add_explicit(v51, 1uLL, memory_order_relaxed);
              }
              long long v52 = a7[1];
              long long v81 = *a7;
              long long v82 = v52;
              uint64_t v53 = *((void *)a7 + 4);
              uint64_t v83 = v53;
              if (v53)
              {
                int v54 = (atomic_ullong *)(v53 - 16);
                if (*((void *)&v82 + 1)) {
                  int v54 = (atomic_ullong *)*((void *)&v82 + 1);
                }
                atomic_fetch_add_explicit(v54, 1uLL, memory_order_relaxed);
              }
              sub_20B19EAC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v84, (unint64_t *)&v81, a3, a4, a2, a5, (void *)a1, *(_DWORD *)(a1 + 88));
              sub_20B06A6E8((uint64_t)&v81);
              sub_20B06A6E8((uint64_t)&v84);
            }
            else
            {
              if (!atomic_load(v16)) {
                sub_20B0A6508(MEMORY[0x263F90560]);
              }
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
              {
                long long v56 = a6[1];
                long long v78 = *a6;
                long long v79 = v56;
                uint64_t v57 = *((void *)a6 + 4);
                uint64_t v80 = v57;
                if (v57)
                {
                  int v58 = (atomic_ullong *)(v57 - 16);
                  if (*((void *)&v79 + 1)) {
                    int v58 = (atomic_ullong *)*((void *)&v79 + 1);
                  }
                  atomic_fetch_add_explicit(v58, 1uLL, memory_order_relaxed);
                }
                long long v59 = a7[1];
                long long v75 = *a7;
                long long v76 = v59;
                uint64_t v60 = *((void *)a7 + 4);
                uint64_t v77 = v60;
                if (v60)
                {
                  unint64_t v61 = (atomic_ullong *)(v60 - 16);
                  if (*((void *)&v76 + 1)) {
                    unint64_t v61 = (atomic_ullong *)*((void *)&v76 + 1);
                  }
                  atomic_fetch_add_explicit(v61, 1uLL, memory_order_relaxed);
                }
                sub_20B19EDE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v78, (unint64_t *)&v75, a3, a4, a2, a5, (void *)a1, *(_DWORD *)(a1 + 88));
                sub_20B06A6E8((uint64_t)&v75);
                sub_20B06A6E8((uint64_t)&v78);
              }
              else
              {
                if (!atomic_load(v16)) {
                  sub_20B0A6508(MEMORY[0x263F90560]);
                }
                if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
                {
                  long long v63 = a6[1];
                  long long v72 = *a6;
                  long long v73 = v63;
                  uint64_t v64 = *((void *)a6 + 4);
                  uint64_t v74 = v64;
                  if (v64)
                  {
                    long long v65 = (atomic_ullong *)(v64 - 16);
                    if (*((void *)&v73 + 1)) {
                      long long v65 = (atomic_ullong *)*((void *)&v73 + 1);
                    }
                    atomic_fetch_add_explicit(v65, 1uLL, memory_order_relaxed);
                  }
                  long long v66 = a7[1];
                  long long v69 = *a7;
                  long long v70 = v66;
                  uint64_t v67 = *((void *)a7 + 4);
                  uint64_t v71 = v67;
                  if (v67)
                  {
                    uint64_t v68 = (atomic_ullong *)(v67 - 16);
                    if (*((void *)&v70 + 1)) {
                      uint64_t v68 = (atomic_ullong *)*((void *)&v70 + 1);
                    }
                    atomic_fetch_add_explicit(v68, 1uLL, memory_order_relaxed);
                  }
                  sub_20B19F114((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v72, (unint64_t *)&v69, a3, a4, a2, a5, (void *)a1, *(_DWORD *)(a1 + 88));
                  sub_20B06A6E8((uint64_t)&v69);
                  sub_20B06A6E8((uint64_t)&v72);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_20B19DCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_20B19DDD0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, void *a7, int a8)
{
  int v8 = a8;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  sub_20B19FE14((uint64_t)v46, (a4 * a8));
  uint64_t v15 = sub_20B0A46C0(a7);
  long long v16 = *(_OWORD *)(v15 + 16);
  long long v43 = *(_OWORD *)v15;
  long long v44 = v16;
  uint64_t v17 = *(void *)(v15 + 32);
  uint64_t v45 = v17;
  if (v17)
  {
    uint64_t v18 = (atomic_ullong *)(v17 - 16);
    if (*((void *)&v44 + 1)) {
      uint64_t v18 = (atomic_ullong *)*((void *)&v44 + 1);
    }
    atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
  }
  if (!(void)v43)
  {
    sub_20B19FE88(a7, v46);
    goto LABEL_10;
  }
  int v42 = v8;
  if (*(void *)a1 < a6)
  {
LABEL_7:
    unint64_t v19 = a6 + 1;
    if (v19 <= *a2)
    {
      unint64_t v28 = 0;
      uint64_t v41 = a5;
      uint64_t v29 = v8;
      int v30 = v8 * a3;
      while (1)
      {
        long long v31 = a2;
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1) {
          break;
        }
LABEL_34:
        ++v28;
        a2 = v31;
        v30 += v29;
        int v8 = v42;
        if (*v31 / v19 <= v28) {
          goto LABEL_8;
        }
      }
      unsigned int v32 = *(_DWORD *)(a2[4] + 4 * (v41 + v28 * v19)) * v42;
      uint64_t v33 = v29;
      unsigned int v34 = v30;
      while ((v30 & 0x80000000) == 0
           && (v32 & 0x80000000) == 0
           && v46[0].n128_u64[0] > v34
           && (unint64_t)v43 > v32)
      {
        sub_20B112470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
        uint64_t v35 = v45;
        sub_20B112470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
        *(void *)(v47 + 8 * v34++) = *(void *)(v35 + 8 * v32++);
        if (!--v33) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_8:
      sub_20B19FE88(a7, v46);
    }
    goto LABEL_10;
  }
  uint64_t v20 = 0;
  int v40 = 0;
  uint64_t v38 = a5 - 1;
  uint64_t v39 = v8;
  int v37 = a3;
  int v36 = a5;
  while (1)
  {
    sub_20B06C1E8(a1);
    if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v20 * a6) != -1) {
      break;
    }
LABEL_24:
    if (*(void *)a1 / a6 <= ++v20) {
      goto LABEL_7;
    }
  }
  uint64_t v21 = a2;
  if (a5)
  {
    long long v22 = a7;
    sub_20B06C1E8(a1);
    int v23 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (v38 + v20 * a6));
  }
  else
  {
    long long v22 = a7;
    int v23 = v20;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v40;
    a7 = v22;
    a2 = v21;
    int v8 = v42;
    a3 = v37;
    a5 = v36;
    goto LABEL_24;
  }
  unsigned int v24 = v23 * v42;
  uint64_t v25 = v39;
  unsigned int v26 = v40 * v42;
  while (((v40 * v42) & 0x80000000) == 0
       && (v24 & 0x80000000) == 0
       && v46[0].n128_u64[0] > v26
       && (unint64_t)v43 > v24)
  {
    sub_20B112470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
    uint64_t v27 = v45;
    sub_20B112470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
    *(void *)(v47 + 8 * v26++) = *(void *)(v27 + 8 * v24++);
    if (!--v25) {
      goto LABEL_23;
    }
  }
LABEL_10:
  sub_20B06A6E8((uint64_t)&v43);
  sub_20B06A6E8((uint64_t)v46);
}

void sub_20B19E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B19E100(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, void *a7, int a8)
{
  int v8 = a8;
  uint64_t v54 = 0;
  memset(v53, 0, sizeof(v53));
  sub_20B0A4CAC((uint64_t)v53, (a4 * a8));
  uint64_t v15 = sub_20B0A3578(a7);
  long long v16 = *(_OWORD *)(v15 + 16);
  long long v50 = *(_OWORD *)v15;
  long long v51 = v16;
  uint64_t v17 = *(void *)(v15 + 32);
  uint64_t v52 = v17;
  if (v17)
  {
    uint64_t v18 = (atomic_ullong *)(v17 - 16);
    if (*((void *)&v51 + 1)) {
      uint64_t v18 = (atomic_ullong *)*((void *)&v51 + 1);
    }
    atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
  }
  if (!(void)v50)
  {
    sub_20B0A3ED0(a7, v53);
    goto LABEL_10;
  }
  int v49 = v8;
  if (*(void *)a1 < a6)
  {
LABEL_7:
    unint64_t v19 = a6 + 1;
    if (v19 <= *(void *)a2)
    {
      int v30 = a2;
      unint64_t v31 = 0;
      uint64_t v48 = v8;
      int v32 = v8 * a3;
      while (1)
      {
        uint64_t v33 = a7;
        unsigned int v34 = v30;
        sub_20B06C1E8(v30);
        if (v8 >= 1) {
          break;
        }
LABEL_34:
        ++v31;
        int v30 = v34;
        v32 += v48;
        a7 = v33;
        int v8 = v49;
        if (*(void *)v34 / v19 <= v31) {
          goto LABEL_8;
        }
      }
      uint64_t v35 = v48;
      unsigned int v36 = *(_DWORD *)(*((void *)v34 + 4) + 4 * (a5 + v31 * v19)) * v49;
      unsigned int v37 = v32;
      while ((v32 & 0x80000000) == 0
           && (v36 & 0x80000000) == 0
           && v53[0].n128_u64[0] > v37
           && (unint64_t)v50 > v36)
      {
        sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v50);
        uint64_t v38 = v52;
        sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v53);
        uint64_t v39 = (uint64_t *)(v38 + 12 * v36);
        uint64_t v40 = *v39;
        uint64_t v41 = v54 + 12 * v37;
        *(_DWORD *)(v41 + 8) = *((_DWORD *)v39 + 2);
        *(void *)uint64_t v41 = v40;
        ++v36;
        ++v37;
        if (!--v35) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_8:
      sub_20B0A3ED0(a7, v53);
    }
    goto LABEL_10;
  }
  uint64_t v20 = 0;
  int v47 = 0;
  uint64_t v45 = a5 - 1;
  uint64_t v46 = v8;
  int v43 = a3;
  int v42 = a5;
  long long v44 = a2;
  while (1)
  {
    sub_20B06C1E8(a1);
    if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v20 * a6) != -1) {
      break;
    }
LABEL_24:
    if (*(void *)a1 / a6 <= ++v20) {
      goto LABEL_7;
    }
  }
  uint64_t v21 = a7;
  if (a5)
  {
    sub_20B06C1E8(a1);
    int v22 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (v45 + v20 * a6));
  }
  else
  {
    int v22 = v20;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v47;
    a7 = v21;
    int v8 = v49;
    a2 = v44;
    a3 = v43;
    a5 = v42;
    goto LABEL_24;
  }
  unsigned int v23 = v22 * v49;
  uint64_t v24 = v46;
  unsigned int v25 = v47 * v49;
  while (((v47 * v49) & 0x80000000) == 0
       && (v23 & 0x80000000) == 0
       && v53[0].n128_u64[0] > v25
       && (unint64_t)v50 > v23)
  {
    sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v50);
    uint64_t v26 = v52;
    sub_20B06C094((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v53);
    uint64_t v27 = (uint64_t *)(v26 + 12 * v23);
    uint64_t v28 = *v27;
    uint64_t v29 = v54 + 12 * v25;
    *(_DWORD *)(v29 + 8) = *((_DWORD *)v27 + 2);
    *(void *)uint64_t v29 = v28;
    ++v25;
    ++v23;
    if (!--v24) {
      goto LABEL_23;
    }
  }
LABEL_10:
  sub_20B06A6E8((uint64_t)&v50);
  sub_20B06A6E8((uint64_t)v53);
}

void sub_20B19E414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B19E460(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, void *a7, int a8)
{
  int v8 = a8;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  sub_20B0A3504((uint64_t)v46, (a4 * a8));
  uint64_t v15 = sub_20B1A0460(a7);
  long long v16 = *(_OWORD *)(v15 + 16);
  long long v43 = *(_OWORD *)v15;
  long long v44 = v16;
  uint64_t v17 = *(void *)(v15 + 32);
  uint64_t v45 = v17;
  if (v17)
  {
    uint64_t v18 = (atomic_ullong *)(v17 - 16);
    if (*((void *)&v44 + 1)) {
      uint64_t v18 = (atomic_ullong *)*((void *)&v44 + 1);
    }
    atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
  }
  if (!(void)v43)
  {
    sub_20B1A04F4(a7, v46);
    goto LABEL_10;
  }
  int v42 = v8;
  if (*(void *)a1 < a6)
  {
LABEL_7:
    unint64_t v19 = a6 + 1;
    if (v19 <= *a2)
    {
      unint64_t v28 = 0;
      uint64_t v41 = a5;
      uint64_t v29 = v8;
      int v30 = v8 * a3;
      while (1)
      {
        unint64_t v31 = a2;
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1) {
          break;
        }
LABEL_34:
        ++v28;
        a2 = v31;
        v30 += v29;
        int v8 = v42;
        if (*v31 / v19 <= v28) {
          goto LABEL_8;
        }
      }
      unsigned int v32 = *(_DWORD *)(a2[4] + 4 * (v41 + v28 * v19)) * v42;
      uint64_t v33 = v29;
      unsigned int v34 = v30;
      while ((v30 & 0x80000000) == 0
           && (v32 & 0x80000000) == 0
           && v46[0].n128_u64[0] > v34
           && (unint64_t)v43 > v32)
      {
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
        int v35 = *(_DWORD *)(v45 + 4 * v32);
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
        *(_DWORD *)(v47 + 4 * v34) = v35;
        ++v32;
        ++v34;
        if (!--v33) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_8:
      sub_20B1A04F4(a7, v46);
    }
    goto LABEL_10;
  }
  uint64_t v20 = 0;
  int v40 = 0;
  uint64_t v38 = a5 - 1;
  uint64_t v39 = v8;
  int v37 = a3;
  int v36 = a5;
  while (1)
  {
    sub_20B06C1E8(a1);
    if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v20 * a6) != -1) {
      break;
    }
LABEL_24:
    if (*(void *)a1 / a6 <= ++v20) {
      goto LABEL_7;
    }
  }
  uint64_t v21 = a2;
  if (a5)
  {
    int v22 = a7;
    sub_20B06C1E8(a1);
    int v23 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (v38 + v20 * a6));
  }
  else
  {
    int v22 = a7;
    int v23 = v20;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v40;
    a7 = v22;
    a2 = v21;
    int v8 = v42;
    a3 = v37;
    a5 = v36;
    goto LABEL_24;
  }
  unsigned int v24 = v23 * v42;
  uint64_t v25 = v39;
  unsigned int v26 = v40 * v42;
  while (((v40 * v42) & 0x80000000) == 0
       && (v24 & 0x80000000) == 0
       && v46[0].n128_u64[0] > v26
       && (unint64_t)v43 > v24)
  {
    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
    int v27 = *(_DWORD *)(v45 + 4 * v24);
    sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
    *(_DWORD *)(v47 + 4 * v26++) = v27;
    ++v24;
    if (!--v25) {
      goto LABEL_23;
    }
  }
LABEL_10:
  sub_20B06A6E8((uint64_t)&v43);
  sub_20B06A6E8((uint64_t)v46);
}

void sub_20B19E744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B19E790(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, void *a7, int a8)
{
  int v8 = a8;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  sub_20B06A31C((uint64_t)v46, (a4 * a8));
  uint64_t v15 = sub_20B06A288(a7);
  long long v16 = *(_OWORD *)(v15 + 16);
  long long v43 = *(_OWORD *)v15;
  long long v44 = v16;
  uint64_t v17 = *(void *)(v15 + 32);
  uint64_t v45 = v17;
  if (v17)
  {
    uint64_t v18 = (atomic_ullong *)(v17 - 16);
    if (*((void *)&v44 + 1)) {
      uint64_t v18 = (atomic_ullong *)*((void *)&v44 + 1);
    }
    atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
  }
  if (!(void)v43)
  {
    sub_20B0C4C84(a7, v46);
    goto LABEL_10;
  }
  int v42 = v8;
  if (*(void *)a1 < a6)
  {
LABEL_7:
    unint64_t v19 = a6 + 1;
    if (v19 <= *a2)
    {
      unint64_t v28 = 0;
      uint64_t v41 = a5;
      uint64_t v29 = v8;
      int v30 = v8 * a3;
      while (1)
      {
        unint64_t v31 = a2;
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1) {
          break;
        }
LABEL_34:
        ++v28;
        a2 = v31;
        v30 += v29;
        int v8 = v42;
        if (*v31 / v19 <= v28) {
          goto LABEL_8;
        }
      }
      unsigned int v32 = *(_DWORD *)(a2[4] + 4 * (v41 + v28 * v19)) * v42;
      uint64_t v33 = v29;
      unsigned int v34 = v30;
      while ((v30 & 0x80000000) == 0
           && (v32 & 0x80000000) == 0
           && v46[0].n128_u64[0] > v34
           && (unint64_t)v43 > v32)
      {
        sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
        uint64_t v35 = v45;
        sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
        *(_OWORD *)(v47 + 16 * v34++) = *(_OWORD *)(v35 + 16 * v32++);
        if (!--v33) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_8:
      sub_20B0C4C84(a7, v46);
    }
    goto LABEL_10;
  }
  uint64_t v20 = 0;
  int v40 = 0;
  uint64_t v38 = a5 - 1;
  uint64_t v39 = v8;
  int v37 = a3;
  int v36 = a5;
  while (1)
  {
    sub_20B06C1E8(a1);
    if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v20 * a6) != -1) {
      break;
    }
LABEL_24:
    if (*(void *)a1 / a6 <= ++v20) {
      goto LABEL_7;
    }
  }
  uint64_t v21 = a2;
  if (a5)
  {
    int v22 = a7;
    sub_20B06C1E8(a1);
    int v23 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (v38 + v20 * a6));
  }
  else
  {
    int v22 = a7;
    int v23 = v20;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v40;
    a7 = v22;
    a2 = v21;
    int v8 = v42;
    a3 = v37;
    a5 = v36;
    goto LABEL_24;
  }
  unsigned int v24 = v23 * v42;
  uint64_t v25 = v39;
  unsigned int v26 = v40 * v42;
  while (((v40 * v42) & 0x80000000) == 0
       && (v24 & 0x80000000) == 0
       && v46[0].n128_u64[0] > v26
       && (unint64_t)v43 > v24)
  {
    sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
    uint64_t v27 = v45;
    sub_20B06ABD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
    *(_OWORD *)(v47 + 16 * v26++) = *(_OWORD *)(v27 + 16 * v24++);
    if (!--v25) {
      goto LABEL_23;
    }
  }
LABEL_10:
  sub_20B06A6E8((uint64_t)&v43);
  sub_20B06A6E8((uint64_t)v46);
}

void sub_20B19EA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B19EAC0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, void *a7, int a8)
{
  uint64_t v44 = 0;
  memset(v43, 0, sizeof(v43));
  sub_20B0C4EFC((uint64_t)v43, (a4 * a8));
  uint64_t v15 = sub_20B0C2AB8(a7);
  long long v16 = *(_OWORD *)(v15 + 16);
  long long v40 = *(_OWORD *)v15;
  long long v41 = v16;
  uint64_t v17 = *(void *)(v15 + 32);
  uint64_t v42 = v17;
  if (v17)
  {
    uint64_t v18 = (atomic_ullong *)(v17 - 16);
    if (*((void *)&v41 + 1)) {
      uint64_t v18 = (atomic_ullong *)*((void *)&v41 + 1);
    }
    atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
  }
  if (!(void)v40)
  {
    sub_20B0C4F70(a7, v43);
    goto LABEL_10;
  }
  if (*(void *)a1 < a6)
  {
LABEL_7:
    unint64_t v19 = a6 + 1;
    if (v19 <= *a2)
    {
      unint64_t v28 = 0;
      uint64_t v39 = a5;
      int v29 = a8 * a3;
      while (1)
      {
        int v30 = a2;
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (a8 >= 1) {
          break;
        }
LABEL_34:
        ++v28;
        a2 = v30;
        v29 += a8;
        if (*v30 / v19 <= v28) {
          goto LABEL_8;
        }
      }
      unsigned int v31 = *(_DWORD *)(a2[4] + 4 * (v39 + v28 * v19)) * a8;
      uint64_t v32 = a8;
      unsigned int v33 = v29;
      while ((v29 & 0x80000000) == 0
           && (v31 & 0x80000000) == 0
           && v43[0].n128_u64[0] > v33
           && (unint64_t)v40 > v31)
      {
        sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
        int v34 = *(_DWORD *)(v42 + 4 * v31);
        sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v43);
        *(_DWORD *)(v44 + 4 * v33) = v34;
        ++v31;
        ++v33;
        if (!--v32) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_8:
      sub_20B0C4F70(a7, v43);
    }
    goto LABEL_10;
  }
  uint64_t v20 = 0;
  int v38 = 0;
  uint64_t v37 = a5 - 1;
  int v36 = a3;
  int v35 = a5;
  while (1)
  {
    sub_20B06C1E8(a1);
    if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v20 * a6) != -1) {
      break;
    }
LABEL_24:
    if (*(void *)a1 / a6 <= ++v20) {
      goto LABEL_7;
    }
  }
  if (a5)
  {
    uint64_t v21 = a2;
    int v22 = a7;
    sub_20B06C1E8(a1);
    int v23 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (v37 + v20 * a6));
  }
  else
  {
    uint64_t v21 = a2;
    int v22 = a7;
    int v23 = v20;
  }
  if (a8 < 1)
  {
LABEL_23:
    ++v38;
    a7 = v22;
    a2 = v21;
    a3 = v36;
    a5 = v35;
    goto LABEL_24;
  }
  unsigned int v24 = v23 * a8;
  uint64_t v25 = a8;
  unsigned int v26 = v38 * a8;
  while (((v38 * a8) & 0x80000000) == 0
       && (v24 & 0x80000000) == 0
       && v43[0].n128_u64[0] > v26
       && (unint64_t)v40 > v24)
  {
    sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
    int v27 = *(_DWORD *)(v42 + 4 * v24);
    sub_20B0B1548((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v43);
    *(_DWORD *)(v44 + 4 * v26++) = v27;
    ++v24;
    if (!--v25) {
      goto LABEL_23;
    }
  }
LABEL_10:
  sub_20B06A6E8((uint64_t)&v40);
  sub_20B06A6E8((uint64_t)v43);
}

void sub_20B19ED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B19EDE4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, void *a7, int a8)
{
  int v8 = a8;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  sub_20B1A0808((uint64_t)v46, (a4 * a8));
  uint64_t v15 = sub_20B0C2B4C(a7);
  long long v16 = *(_OWORD *)(v15 + 16);
  long long v43 = *(_OWORD *)v15;
  long long v44 = v16;
  uint64_t v17 = *(void *)(v15 + 32);
  uint64_t v45 = v17;
  if (v17)
  {
    uint64_t v18 = (atomic_ullong *)(v17 - 16);
    if (*((void *)&v44 + 1)) {
      uint64_t v18 = (atomic_ullong *)*((void *)&v44 + 1);
    }
    atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
  }
  if (!(void)v43)
  {
    sub_20B1A087C(a7, v46);
    goto LABEL_10;
  }
  int v42 = v8;
  if (*(void *)a1 < a6)
  {
LABEL_7:
    unint64_t v19 = a6 + 1;
    if (v19 <= *a2)
    {
      unint64_t v28 = 0;
      uint64_t v41 = a5;
      uint64_t v29 = v8;
      int v30 = v8 * a3;
      while (1)
      {
        unsigned int v31 = a2;
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1) {
          break;
        }
LABEL_34:
        ++v28;
        a2 = v31;
        v30 += v29;
        int v8 = v42;
        if (*v31 / v19 <= v28) {
          goto LABEL_8;
        }
      }
      unsigned int v32 = *(_DWORD *)(a2[4] + 4 * (v41 + v28 * v19)) * v42;
      uint64_t v33 = v29;
      unsigned int v34 = v30;
      while ((v30 & 0x80000000) == 0
           && (v32 & 0x80000000) == 0
           && v46[0].n128_u64[0] > v34
           && (unint64_t)v43 > v32)
      {
        sub_20B0C7CA8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
        int v35 = *(_DWORD *)(v45 + 4 * v32);
        sub_20B0C7CA8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
        *(_DWORD *)(v47 + 4 * v34) = v35;
        ++v32;
        ++v34;
        if (!--v33) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_8:
      sub_20B1A087C(a7, v46);
    }
    goto LABEL_10;
  }
  uint64_t v20 = 0;
  int v40 = 0;
  uint64_t v38 = a5 - 1;
  uint64_t v39 = v8;
  int v37 = a3;
  int v36 = a5;
  while (1)
  {
    sub_20B06C1E8(a1);
    if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v20 * a6) != -1) {
      break;
    }
LABEL_24:
    if (*(void *)a1 / a6 <= ++v20) {
      goto LABEL_7;
    }
  }
  uint64_t v21 = a2;
  if (a5)
  {
    int v22 = a7;
    sub_20B06C1E8(a1);
    int v23 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (v38 + v20 * a6));
  }
  else
  {
    int v22 = a7;
    int v23 = v20;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v40;
    a7 = v22;
    a2 = v21;
    int v8 = v42;
    a3 = v37;
    a5 = v36;
    goto LABEL_24;
  }
  unsigned int v24 = v23 * v42;
  uint64_t v25 = v39;
  unsigned int v26 = v40 * v42;
  while (((v40 * v42) & 0x80000000) == 0
       && (v24 & 0x80000000) == 0
       && v46[0].n128_u64[0] > v26
       && (unint64_t)v43 > v24)
  {
    sub_20B0C7CA8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
    int v27 = *(_DWORD *)(v45 + 4 * v24);
    sub_20B0C7CA8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
    *(_DWORD *)(v47 + 4 * v26++) = v27;
    ++v24;
    if (!--v25) {
      goto LABEL_23;
    }
  }
LABEL_10:
  sub_20B06A6E8((uint64_t)&v43);
  sub_20B06A6E8((uint64_t)v46);
}

void sub_20B19F0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B19F114(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, int a3, int a4, int a5, unint64_t a6, void *a7, int a8)
{
  int v8 = a8;
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  sub_20B0C4D3C((uint64_t)v46, (a4 * a8));
  uint64_t v15 = sub_20B0C4DB0(a7);
  long long v16 = *(_OWORD *)(v15 + 16);
  long long v43 = *(_OWORD *)v15;
  long long v44 = v16;
  uint64_t v17 = *(void *)(v15 + 32);
  uint64_t v45 = v17;
  if (v17)
  {
    uint64_t v18 = (atomic_ullong *)(v17 - 16);
    if (*((void *)&v44 + 1)) {
      uint64_t v18 = (atomic_ullong *)*((void *)&v44 + 1);
    }
    atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
  }
  if (!(void)v43)
  {
    sub_20B0C4E44(a7, v46);
    goto LABEL_10;
  }
  int v42 = v8;
  if (*(void *)a1 < a6)
  {
LABEL_7:
    unint64_t v19 = a6 + 1;
    if (v19 <= *a2)
    {
      unint64_t v28 = 0;
      uint64_t v41 = a5;
      uint64_t v29 = v8;
      int v30 = v8 * a3;
      while (1)
      {
        unsigned int v31 = a2;
        sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (v8 >= 1) {
          break;
        }
LABEL_34:
        ++v28;
        a2 = v31;
        v30 += v29;
        int v8 = v42;
        if (*v31 / v19 <= v28) {
          goto LABEL_8;
        }
      }
      unsigned int v32 = *(_DWORD *)(a2[4] + 4 * (v41 + v28 * v19)) * v42;
      uint64_t v33 = v29;
      unsigned int v34 = v30;
      while ((v30 & 0x80000000) == 0
           && (v32 & 0x80000000) == 0
           && v46[0].n128_u64[0] > v34
           && (unint64_t)v43 > v32)
      {
        sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
        __int16 v35 = *(_WORD *)(v45 + 2 * v32);
        sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
        *(_WORD *)(v47 + 2 * v34) = v35;
        ++v32;
        ++v34;
        if (!--v33) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_8:
      sub_20B0C4E44(a7, v46);
    }
    goto LABEL_10;
  }
  uint64_t v20 = 0;
  int v40 = 0;
  uint64_t v38 = a5 - 1;
  uint64_t v39 = v8;
  int v37 = a3;
  int v36 = a5;
  while (1)
  {
    sub_20B06C1E8(a1);
    if (*(_DWORD *)(*((void *)a1 + 4) + 4 * v20 * a6) != -1) {
      break;
    }
LABEL_24:
    if (*(void *)a1 / a6 <= ++v20) {
      goto LABEL_7;
    }
  }
  uint64_t v21 = a2;
  if (a5)
  {
    int v22 = a7;
    sub_20B06C1E8(a1);
    int v23 = *(_DWORD *)(*((void *)a1 + 4) + 4 * (v38 + v20 * a6));
  }
  else
  {
    int v22 = a7;
    int v23 = v20;
  }
  if (v8 < 1)
  {
LABEL_23:
    ++v40;
    a7 = v22;
    a2 = v21;
    int v8 = v42;
    a3 = v37;
    a5 = v36;
    goto LABEL_24;
  }
  unsigned int v24 = v23 * v42;
  uint64_t v25 = v39;
  unsigned int v26 = v40 * v42;
  while (((v40 * v42) & 0x80000000) == 0
       && (v24 & 0x80000000) == 0
       && v46[0].n128_u64[0] > v26
       && (unint64_t)v43 > v24)
  {
    sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v43);
    __int16 v27 = *(_WORD *)(v45 + 2 * v24);
    sub_20B0C90B4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v46);
    *(_WORD *)(v47 + 2 * v26++) = v27;
    ++v24;
    if (!--v25) {
      goto LABEL_23;
    }
  }
LABEL_10:
  sub_20B06A6E8((uint64_t)&v43);
  sub_20B06A6E8((uint64_t)v46);
}

void sub_20B19F3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_20B06A6E8((uint64_t)va);
  sub_20B06A6E8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B19F444(uint64_t a1)
{
  uint64_t v88 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  float32x4_t v2 = (uint64_t *)(a1 + 8);
  if (v3 == v1) {
    return;
  }
  do
  {
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    sub_20B0A592C(&v82, (void *)v1);
    long long v5 = *(_OWORD *)(v1 + 32);
    long long v83 = *(_OWORD *)(v1 + 16);
    long long v84 = v5;
    uint64_t v6 = *(void *)(v1 + 48);
    *(void *)&long long v85 = v6;
    if (v6)
    {
      long long v7 = (atomic_ullong *)(v6 - 16);
      if (*((void *)&v84 + 1)) {
        long long v7 = (atomic_ullong *)*((void *)&v84 + 1);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = *(void *)(v1 + 56);
    *((void *)&v85 + 1) = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *((void *)&v85 + 1) &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = *(void *)(v1 + 64);
    *(void *)&long long v86 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&long long v86 = v86 & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)&v86 + 1) = *(void *)(v1 + 72);
    unint64_t v10 = *(void *)(v1 + 80);
    *(void *)&long long v87 = v10;
    if ((v10 & 7) != 0)
    {
      char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
      unint64_t v10 = v87;
      if ((add_explicit & 1) == 0)
      {
        unint64_t v10 = v87 & 0xFFFFFFFFFFFFFFF8;
        *(void *)&long long v87 = v87 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    DWORD2(v87) = *(_DWORD *)(v1 + 88);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((BYTE8(v85) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_20B06A6E8((uint64_t)&v83);
    sub_20B06A698((uint64_t)&v82);
    v1 += 96;
  }
  while (v1 != v3);
  unint64_t NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  uint64_t v13 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v13)
  {
LABEL_32:
    long long v79 = 0;
    memset(v78, 0, sizeof(v78));
    long long v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    sub_20B19C988(v78, v2, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152), (uint64_t *)&v75);
    if (v76 - (void)v75 == 40)
    {
      unsigned int v18 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)*v2);
      unint64_t v19 = *(_OWORD **)(a1 + 8);
      uint64_t v20 = *(_OWORD **)(a1 + 16);
      if (v19 != v20)
      {
        unsigned int v21 = v18;
        int v22 = v19 + 5;
        do
        {
          MEMORY[0x2105310B0](&v82, "constant");
          uint64_t v23 = *(void *)v22;
          unsigned int v24 = (atomic_uint *)(v82 & 0xFFFFFFFFFFFFFFF8);
          if ((v82 & 7) != 0) {
            atomic_fetch_add_explicit(v24, 0xFFFFFFFE, memory_order_release);
          }
          if ((atomic_uint *)(v23 & 0xFFFFFFFFFFFFFFF8) == v24) {
            sub_20B19C4C4((uint64_t)(v22 - 5), v21);
          }
          MEMORY[0x2105310B0](&v82, "vertex");
          if (v22 == &v82)
          {
            uint64_t v25 = v82;
          }
          else
          {
            if ((*(void *)v22 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v25 = 0;
            *(void *)int v22 = v82;
            *(void *)&long long v82 = 0;
          }
          if ((v25 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          sub_20B06A85C((void *)v22 - 8);
          unsigned int v26 = v22 + 1;
          v22 += 6;
        }
        while (v26 != v20);
      }
    }
    else
    {
      memset(v74, 0, sizeof(v74));
      sub_20B0A3504((uint64_t)v74, *(void *)(a1 + 152));
      uint64_t v73 = 0;
      memset(v72, 0, sizeof(v72));
      uint64_t v71 = 0;
      memset(v70, 0, sizeof(v70));
      int v69 = 0;
      sub_20B19CF20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v74, (unint64_t *)v72, v70, &v75, NumElements, &v69);
      uint64_t v68 = (unint64_t *)(a1 + 152);
      unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((v76 - (uint64_t)v75) >> 3);
      uint64_t v28 = *(void *)&v70[0] / (v27 + 1) + v69;
      unint64_t v29 = (int)v27;
      int v30 = *(_OWORD **)(a1 + 8);
      unsigned int v31 = *(_OWORD **)(a1 + 16);
      if (v30 != v31)
      {
        uint64_t v32 = 0;
        uint64_t v33 = v30 + 5;
        do
        {
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v78);
          sub_20B19D684((uint64_t)(v33 - 5), v79[v32], v69, v28, v29, v72, v70);
          MEMORY[0x2105310B0](&v82, "vertex");
          if (v33 == &v82)
          {
            uint64_t v34 = v82;
          }
          else
          {
            if ((*(void *)v33 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v34 = 0;
            *(void *)uint64_t v33 = v82;
            *(void *)&long long v82 = 0;
          }
          if ((v34 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          sub_20B06A85C((void *)v33 - 8);
          ++v32;
          __int16 v35 = v33 + 1;
          v33 += 6;
        }
        while (v35 != v31);
      }
      uint64_t v37 = *(void *)(a1 + 32);
      for (uint64_t i = *(void *)(a1 + 40); v37 != i; v37 += 32)
      {
        uint64_t v38 = *(void *)(v37 + 8);
        if (*(void *)(v37 + 16) != v38)
        {
          sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v78);
          sub_20B19D684(v38, *v79, v69, v28, v29, v72, v70);
          MEMORY[0x2105310B0](&v82, "vertex");
          uint64_t v39 = (void *)(v38 + 80);
          if (&v82 == (long long *)(v38 + 80))
          {
            uint64_t v40 = v82;
          }
          else
          {
            if ((*v39 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v40 = 0;
            *uint64_t v39 = v82;
            *(void *)&long long v82 = 0;
          }
          if ((v40 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          sub_20B06A85C((void *)(v38 + 16));
        }
      }
      unint64_t v41 = *v68;
      int v80 = 0;
      long long v81 = &v80;
      sub_20B0A624C((unint64_t *)v74, v41, &v81);
      uint64_t v42 = *(void *)(a1 + 168);
      long long v43 = *(_OWORD *)v68;
      *(_OWORD *)uint64_t v68 = *(_OWORD *)v74;
      *(void *)(a1 + 168) = *(void *)&v74[16];
      *(_OWORD *)uint64_t v74 = v43;
      *(void *)&v74[16] = v42;
      long long v44 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)&v74[24];
      *(_OWORD *)&v74[24] = v44;
      uint64_t v45 = *(void *)(a1 + 8);
      for (uint64_t j = *(void *)(a1 + 16); v45 != j; v45 += 96)
      {
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        sub_20B0A592C(&v82, (void *)v45);
        long long v47 = *(_OWORD *)(v45 + 32);
        long long v83 = *(_OWORD *)(v45 + 16);
        long long v84 = v47;
        uint64_t v48 = *(void *)(v45 + 48);
        *(void *)&long long v85 = v48;
        if (v48)
        {
          int v49 = (atomic_ullong *)(v48 - 16);
          if (*((void *)&v84 + 1)) {
            int v49 = (atomic_ullong *)*((void *)&v84 + 1);
          }
          atomic_fetch_add_explicit(v49, 1uLL, memory_order_relaxed);
        }
        uint64_t v50 = *(void *)(v45 + 56);
        *((void *)&v85 + 1) = v50;
        if ((v50 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *((void *)&v85 + 1) &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v51 = *(void *)(v45 + 64);
        *(void *)&long long v86 = v51;
        if ((v51 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)&long long v86 = v86 & 0xFFFFFFFFFFFFFFF8;
        }
        *((void *)&v86 + 1) = *(void *)(v45 + 72);
        unint64_t v52 = *(void *)(v45 + 80);
        *(void *)&long long v87 = v52;
        if ((v52 & 7) != 0)
        {
          char v53 = atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
          unint64_t v52 = v87;
          if ((v53 & 1) == 0)
          {
            unint64_t v52 = v87 & 0xFFFFFFFFFFFFFFF8;
            *(void *)&long long v87 = v87 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        DWORD2(v87) = *(_DWORD *)(v45 + 88);
        if ((v52 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v86 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((BYTE8(v85) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_20B06A6E8((uint64_t)&v83);
        sub_20B06A698((uint64_t)&v82);
      }
      sub_20B06A6E8((uint64_t)v70);
      sub_20B06A6E8((uint64_t)v72);
      sub_20B06A6E8((uint64_t)v74);
    }
    *(void *)&long long v82 = &v75;
    sub_20B0C8B48((void ***)&v82);
    sub_20B06A6E8((uint64_t)v78);
    return;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  while (1)
  {
    MEMORY[0x2105310B0](&v82, "faceVarying");
    long long v16 = (atomic_uint *)(*(void *)(v13 + v14 + 80) & 0xFFFFFFFFFFFFFFF8);
    if (v16 == (atomic_uint *)(v82 & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    if ((v82 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v13 = *v2;
LABEL_31:
    ++v15;
    v14 += 96;
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v13) >> 5) <= v15) {
      goto LABEL_32;
    }
  }
  uint64_t v13 = *v2;
  uint64_t v17 = *(void *)(*v2 + v14 + 16);
  if ((v82 & 7) != 0)
  {
    atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
    uint64_t v13 = *v2;
  }
  if (v17) {
    goto LABEL_31;
  }
  for (uint64_t k = *(void *)(a1 + 16); v13 != k; v13 += 96)
    sub_20B19B308(v13, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
  uint64_t v56 = *(void *)(a1 + 32);
  for (uint64_t m = *(void *)(a1 + 40); v56 != m; v56 += 32)
  {
    uint64_t v57 = *(void *)(v56 + 8);
    if (*(void *)(v56 + 16) != v57) {
      sub_20B19B308(v57, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 112), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
    }
  }
  if (*(void *)(a1 + 152))
  {
    unint64_t v58 = 0;
    do
    {
      sub_20B06C1E8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 152));
      *(_DWORD *)(*(void *)(a1 + 184) + 4 * v58) = v58;
      ++v58;
    }
    while (*(void *)(a1 + 152) > v58);
  }
  uint64_t v59 = *(void *)(a1 + 8);
  for (uint64_t n = *(void *)(a1 + 16); v59 != n; v59 += 96)
  {
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    sub_20B0A592C(&v82, (void *)v59);
    long long v61 = *(_OWORD *)(v59 + 32);
    long long v83 = *(_OWORD *)(v59 + 16);
    long long v84 = v61;
    uint64_t v62 = *(void *)(v59 + 48);
    *(void *)&long long v85 = v62;
    if (v62)
    {
      long long v63 = (atomic_ullong *)(v62 - 16);
      if (*((void *)&v84 + 1)) {
        long long v63 = (atomic_ullong *)*((void *)&v84 + 1);
      }
      atomic_fetch_add_explicit(v63, 1uLL, memory_order_relaxed);
    }
    uint64_t v64 = *(void *)(v59 + 56);
    *((void *)&v85 + 1) = v64;
    if ((v64 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *((void *)&v85 + 1) &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v65 = *(void *)(v59 + 64);
    *(void *)&long long v86 = v65;
    if ((v65 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&long long v86 = v86 & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)&v86 + 1) = *(void *)(v59 + 72);
    unint64_t v66 = *(void *)(v59 + 80);
    *(void *)&long long v87 = v66;
    if ((v66 & 7) != 0)
    {
      char v67 = atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
      unint64_t v66 = v87;
      if ((v67 & 1) == 0)
      {
        unint64_t v66 = v87 & 0xFFFFFFFFFFFFFFF8;
        *(void *)&long long v87 = v87 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    DWORD2(v87) = *(_DWORD *)(v59 + 88);
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((BYTE8(v85) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v85 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_20B06A6E8((uint64_t)&v83);
    sub_20B06A698((uint64_t)&v82);
  }
}

void sub_20B19FD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B19FE14(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_20B06A85C((void *)a1);
  uint64_t v6 = &v5;
  sub_20B1936C8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B19FE70(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20B19FE88(void *a1, __n128 *a2)
{
  if ((sub_20B0A7634((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_20B19FF40((uint64_t)a1);
  }
  unint64_t v4 = (__n128 *)sub_20B1A03CC(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20B19FF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B19FF40(uint64_t a1)
{
  void v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_20B0A5A2C((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26BF50D18;
  sub_20B0A6DA4();
}

void sub_20B19FFD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B1A0014(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_20B1A0034(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20B1A01A4(a1);
}

uint64_t sub_20B1A0044()
{
  return 1;
}

unint64_t sub_20B1A004C(unint64_t **a1)
{
  return sub_20B1A020C((uint64_t)&v2, *a1);
}

BOOL sub_20B1A0074(void **a1, uint64_t *a2)
{
  return sub_20B1A0264(*a1, *a2);
}

BOOL sub_20B1A0080(void **a1, uint64_t a2)
{
  return sub_20B1A0264(*a1, a2);
}

uint64_t sub_20B1A008C()
{
  return 0;
}

uint64_t sub_20B1A0098(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_20B1A00EC()
{
  return &unk_26BF4F000;
}

uint64_t sub_20B1A00F8()
{
  return 1;
}

void *sub_20B1A0100()
{
  return &unk_26BF4EEF8;
}

uint64_t sub_20B1A010C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_20B1A0114(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_20B1A0120(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20B1A0154(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26BF4F000, a2);
}

void *sub_20B1A0178()
{
  return &unk_26BF4F000;
}

uint64_t sub_20B1A0184(uint64_t a1)
{
  return *(void *)a1;
}

void sub_20B1A018C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &off_26BF50D18;
  sub_20B0A6DA4();
}

uint64_t *sub_20B1A01A4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_20B06A6E8(v2);
    MEMORY[0x210532650](v2, 0x1020C40874388CCLL);
  }
  return a1;
}

unint64_t sub_20B1A020C(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = (unsigned int *)a2[4];
    unint64_t v4 = *a2;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      v3 += 2;
      unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (v6 + ((unint64_t)(v6 + v5 + (v6 + v5) * (v6 + v5)) >> 1)));
      unint64_t v2 = v7 + ((v7 + v2 + (v7 + v2) * (v7 + v2)) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_20B1A0264(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_20B0A6C00((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_20B0A6C00((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (float *)a1[4];
  uint64_t v6 = &v5[2 * *a1];
  unint64_t v7 = *(float **)(a2 + 32);
  do
  {
    float v8 = *v5;
    float v9 = v5[1];
    v5 += 2;
    float v10 = *v7;
    float v11 = v7[1];
    v7 += 2;
    BOOL result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_20B1A0308(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 40));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

uint64_t sub_20B1A03B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 += 8;
  return MEMORY[0x270FA3F28](a2, v3);
}

uint64_t sub_20B1A03CC(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20B0A6EB4(a1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return sub_20B1A0308((uint64_t)a1);
}

uint64_t sub_20B1A0460(void *a1)
{
  if (sub_20B1A05AC((uint64_t)a1))
  {
    uint64_t v2 = a1[1];
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *a1;
    }
  }
  else
  {
    return MEMORY[0x270FA4FC8](a1, sub_20B1A05E4, &unk_26BF4F0F0);
  }
}

__n128 sub_20B1A04F4(void *a1, __n128 *a2)
{
  if ((sub_20B1A05AC((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_20B1A06A0((uint64_t)a1);
  }
  unint64_t v4 = (__n128 *)sub_20B1A0774(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20B1A0594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20B1A05AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 52) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return MEMORY[0x270FA4F90]();
  }
  else {
    return 0;
  }
}

void sub_20B1A05E4()
{
}

uint64_t sub_20B1A0644(uint64_t result)
{
  if (result)
  {
    sub_20B06A6E8(result);
    JUMPOUT(0x210532650);
  }
  return result;
}

void sub_20B1A06A0(uint64_t a1)
{
  void v2[2] = *MEMORY[0x263EF8340];
  v2[0] = 0;
  v2[1] = 0;
  sub_20B0A5A2C((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &off_26BF512D8;
  sub_20B0C8144();
}

void sub_20B1A0738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_20B05D0D4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B1A0774(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20B0A6EB4(a1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return sub_20B0C8098((uint64_t)a1);
}

uint64_t sub_20B1A0808(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_20B06A85C((void *)a1);
  unint64_t v6 = &v5;
  sub_20B1A0934((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_20B1A0864(_Unwind_Exception *a1)
{
  sub_20B06A6E8(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20B1A087C(void *a1, __n128 *a2)
{
  if ((sub_20B0C7BB4((uint64_t)a1) & 1) == 0)
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    sub_20B115D08((uint64_t)a1);
  }
  unint64_t v4 = (__n128 *)sub_20B1A0AFC(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_20B1A091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20B1A0934(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    unint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              long long v10 = sub_20B0C7D40((uint64_t)a1, a2);
              unint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        unint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_20B0C7D40((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        int v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          unint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)int v22 = v23;
          int v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        unsigned int v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      long long v16 = sub_20B0C7D40((uint64_t)a1, a2);
      uint64_t v14 = v16;
      uint64_t v17 = 0;
      unsigned int v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_20B06A6E8((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_20B06A85C(a1);
}

uint64_t sub_20B1A0AFC(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20B0A6EB4(a1, v4);
    sub_20B06A698((uint64_t)v4);
  }
  return sub_20B12352C((uint64_t)a1);
}

uint64_t sub_20B1A0B90(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 - 2;
  if (a2 == 2) {
    return 0;
  }
  unint64_t v4 = 0;
  uint64_t result = 0;
  do
  {
    if (v4 <= v2) {
      unint64_t v6 = a2 - 2;
    }
    else {
      unint64_t v6 = v4;
    }
    while (v6 != v4)
    {
      uint64_t v7 = a1 + v4;
      int v8 = *(unsigned __int8 *)(a1 + v4++);
      if (v8 != *(unsigned __int8 *)(v7 + 1))
      {
        unint64_t v6 = v4 - 1;
        break;
      }
    }
    if (v6 < a2 - 3 && *(unsigned __int8 *)(v6 + a1 + 2) == *(unsigned __int8 *)(a1 + v6 + 3)) {
      v6 += 3;
    }
    ++result;
    unint64_t v4 = v6 + 1;
  }
  while (v6 + 1 < v2);
  return result;
}

uint64_t sub_20B1A0C10(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 - 2;
  if (a2 == 2) {
    return 0;
  }
  unint64_t v4 = 0;
  uint64_t result = 0;
  do
  {
    if (v4 <= v2) {
      unint64_t v6 = a2 - 2;
    }
    else {
      unint64_t v6 = v4;
    }
    while (v6 != v4)
    {
      uint64_t v7 = (unsigned __int16 *)(a1 + 2 * v4++);
      if (*v7 != v7[1])
      {
        unint64_t v6 = v4 - 1;
        break;
      }
    }
    if (v6 < a2 - 3 && *(unsigned __int16 *)(a1 + 2 * v6 + 4) == *(unsigned __int16 *)(a1 + 2 * (v6 + 3))) {
      v6 += 3;
    }
    ++result;
    unint64_t v4 = v6 + 1;
  }
  while (v6 + 1 < v2);
  return result;
}

uint64_t sub_20B1A0C90(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 - 2;
  if (a2 == 2) {
    return 0;
  }
  unint64_t v4 = 0;
  uint64_t result = 0;
  do
  {
    if (v4 <= v2) {
      unint64_t v6 = a2 - 2;
    }
    else {
      unint64_t v6 = v4;
    }
    while (v6 != v4)
    {
      uint64_t v7 = (_DWORD *)(a1 + 4 * v4++);
      if (*v7 != v7[1])
      {
        unint64_t v6 = v4 - 1;
        break;
      }
    }
    if (v6 < a2 - 3 && *(_DWORD *)(a1 + 4 * v6 + 8) == *(_DWORD *)(a1 + 4 * (v6 + 3))) {
      v6 += 3;
    }
    ++result;
    unint64_t v4 = v6 + 1;
  }
  while (v6 + 1 < v2);
  return result;
}

void sub_20B1A0D10(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v8 = a3;
  unint64_t v9 = (char *)a2;
  unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFF8;
  if ((a6 & 0xFFFFFFFFFFFFFFF8) == 8 && a7 == a8)
  {
    unint64_t v19 = (void *)*a1;
    unint64_t v20 = a1[1] - *a1;
    if (a3 <= v20)
    {
      if (a3 < v20) {
        a1[1] = (unint64_t)v19 + a3;
      }
    }
    else
    {
      sub_20B05CF80(a1, a3 - v20);
      unint64_t v19 = (void *)*a1;
    }
    memcpy(v19, v9, v8);
  }
  else
  {
    if (!a6)
    {
      NSLog(&cfstr_CouldnTCopyInd_0.isa);
      return;
    }
    uint64_t v14 = a4;
    uint64_t v15 = __ROR8__(a6, 3);
    if (v15 == 2)
    {
      if (a3)
      {
        uint64_t v21 = (unsigned __int16 *)a2;
        unint64_t v22 = a3;
        do
        {
          unsigned int v23 = *v21++;
          if (v23 >= 0x100) {
            goto LABEL_34;
          }
        }
        while (--v22);
      }
    }
    else if (v15 == 4 && a3)
    {
      long long v16 = (unsigned int *)a2;
      unint64_t v17 = a3;
      while (1)
      {
        unsigned int v18 = *v16++;
        if (v18 >= 0x100) {
          break;
        }
        if (!--v17) {
          goto LABEL_25;
        }
      }
LABEL_34:
      NSLog(&cfstr_CouldnTCopyInd.isa);
      return;
    }
LABEL_25:
    if (a7 == a8)
    {
      unint64_t v24 = a1[1] - *a1;
      if (a3 <= v24)
      {
        if (a3 < v24) {
          a1[1] = *a1 + a3;
        }
      }
      else
      {
        sub_20B05CF80(a1, a3 - v24);
      }
      if (a6 == 32)
      {
        if (v8)
        {
          int v30 = (unsigned char *)*a1;
          do
          {
            int v31 = *(_DWORD *)v9;
            v9 += 4;
            *v30++ = v31;
            --v8;
          }
          while (v8);
        }
      }
      else if (a6 == 16)
      {
        if (v8)
        {
          uint64_t v32 = (unsigned char *)*a1;
          do
          {
            char v33 = *v9;
            v9 += 2;
            *v32++ = v33;
            --v8;
          }
          while (v8);
        }
      }
      else if (a6 == 8 && v8)
      {
        unint64_t v27 = (unsigned char *)*a1;
        do
        {
          char v28 = *v9++;
          *v27++ = v28;
          --v8;
        }
        while (v8);
      }
      return;
    }
    if (a7 == 3 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          unint64_t v25 = sub_20B1A0C90(a2, a3);
          uint64_t v26 = sub_20B1A6B4C((uint64_t)v9, v8, v25);
          break;
        case 16:
          unint64_t v25 = sub_20B1A0C10(a2, a3);
          uint64_t v26 = sub_20B1A6A14((uint64_t)v9, v8, v25);
          break;
        case 8:
          unint64_t v25 = sub_20B1A0B90(a2, a3);
          uint64_t v26 = sub_20B1A68D8((uint64_t)v9, v8, v25);
          break;
        default:
          goto LABEL_736;
      }
      id v500 = (id)v26;
      if (v26)
      {
        unint64_t v470 = *a1;
        unint64_t v471 = a1[1] - *a1;
        if (v25 <= v471)
        {
          if (v25 < v471) {
            a1[1] = v470 + v25;
          }
        }
        else
        {
          sub_20B05CF80(a1, v25 - v471);
          unint64_t v470 = *a1;
        }
        id v501 = v500;
        v474 = (const void *)objc_msgSend_bytes(v501, v472, v473);
        int v475 = (void *)v470;
        size_t v476 = v25;
        goto LABEL_741;
      }
LABEL_736:
      NSLog(&cfstr_CouldnTCreateB.isa);
      return;
    }
    if (a7 == 4 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          unint64_t v29 = sub_20B1A6E40(a2, a3);
          break;
        case 16:
          unint64_t v29 = sub_20B1A6D64(a2, a3);
          break;
        case 8:
          unint64_t v29 = sub_20B1A6C84(a2, a3);
          break;
        default:
          unint64_t v29 = 0;
          goto LABEL_743;
      }
      id v502 = v29;
      if (!v29)
      {
LABEL_743:

        return;
      }
      unint64_t v477 = 3 * (v8 >> 1);
      sub_20B1A68B0(a1, v477);
      if (v11 != 8)
      {
        if (a6 == 32)
        {
          id v501 = v502;
          uint64_t v488 = objc_msgSend_bytes(v501, v486, v487);
          if (v8 >= 2)
          {
            uint64_t v489 = 0;
            if (v477 <= 1) {
              uint64_t v490 = 1;
            }
            else {
              uint64_t v490 = 3 * (v8 >> 1);
            }
            do
            {
              *(unsigned char *)(*a1 + v489) = *(_DWORD *)(v488 + 4 * v489);
              ++v489;
            }
            while (v490 != v489);
          }
        }
        else if (a6 == 16)
        {
          id v501 = v502;
          uint64_t v493 = objc_msgSend_bytes(v501, v491, v492);
          if (v8 >= 2)
          {
            uint64_t v494 = 0;
            if (v477 <= 1) {
              uint64_t v495 = 1;
            }
            else {
              uint64_t v495 = 3 * (v8 >> 1);
            }
            do
            {
              *(unsigned char *)(*a1 + v494) = *(_WORD *)(v493 + 2 * v494);
              ++v494;
            }
            while (v495 != v494);
          }
        }
        else
        {
          id v501 = v502;
          uint64_t v483 = objc_msgSend_bytes(v501, v481, v482);
          if (v8 >= 2)
          {
            uint64_t v484 = 0;
            if (v477 <= 1) {
              uint64_t v485 = 1;
            }
            else {
              uint64_t v485 = 3 * (v8 >> 1);
            }
            do
            {
              *(unsigned char *)(*a1 + v484) = *(unsigned char *)(v483 + v484);
              ++v484;
            }
            while (v485 != v484);
          }
        }
        goto LABEL_742;
      }
      unint64_t v478 = *a1;
      id v501 = v502;
      v474 = (const void *)objc_msgSend_bytes(v501, v479, v480);
      int v475 = (void *)v478;
      size_t v476 = 3 * (v8 >> 1);
LABEL_741:
      memcpy(v475, v474, v476);
LABEL_742:
      unint64_t v29 = v501;
      goto LABEL_743;
    }
    if (a7 != 5 || a8 != 2)
    {
      NSLog(&cfstr_CouldnTCopyInd_1.isa);
      return;
    }
    if (a5)
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      do
      {
        LODWORD(v36) = v34[v14];
        uint64_t v499 = (unsigned __int8 *)v34;
        switch(v36)
        {
          case 3:
            switch(a6)
            {
              case 8:
                unint64_t v161 = (unsigned char *)a1[1];
                unint64_t v160 = a1[2];
                if ((unint64_t)v161 >= v160)
                {
                  unint64_t v174 = *a1;
                  uint64_t v175 = &v161[-*a1];
                  unint64_t v176 = (unint64_t)(v175 + 1);
                  if ((uint64_t)(v175 + 1) < 0) {
                    goto LABEL_772;
                  }
                  unint64_t v177 = v160 - v174;
                  if (2 * v177 > v176) {
                    unint64_t v176 = 2 * v177;
                  }
                  if (v177 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v178 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v178 = v176;
                  }
                  if (v178) {
                    uint64_t v179 = (char *)operator new(v178);
                  }
                  else {
                    uint64_t v179 = 0;
                  }
                  uint64_t v197 = &v175[(void)v179];
                  v175[(void)v179] = v9[v35];
                  long long v162 = &v175[(void)v179 + 1];
                  if (v161 != (unsigned char *)v174)
                  {
                    float32x4_t v198 = &v161[~v174];
                    do
                    {
                      char v199 = *--v161;
                      (v198--)[(void)v179] = v199;
                    }
                    while (v161 != (unsigned char *)v174);
                    unint64_t v161 = (unsigned char *)*a1;
                    uint64_t v197 = v179;
                  }
                  *a1 = (unint64_t)v197;
                  a1[1] = (unint64_t)v162;
                  a1[2] = (unint64_t)&v179[v178];
                  if (v161) {
                    operator delete(v161);
                  }
                }
                else
                {
                  *unint64_t v161 = v9[v35];
                  long long v162 = v161 + 1;
                }
                a1[1] = (unint64_t)v162;
                uint64_t v200 = v35 + 1;
                unint64_t v201 = a1[2];
                if ((unint64_t)v162 < v201)
                {
                  *long long v162 = v9[v200];
                  int32x4_t v202 = v162 + 1;
                  goto LABEL_366;
                }
                unint64_t v203 = *a1;
                long long v204 = &v162[-*a1];
                unint64_t v205 = (unint64_t)(v204 + 1);
                if ((uint64_t)(v204 + 1) < 0) {
                  goto LABEL_772;
                }
                unint64_t v206 = v201 - v203;
                if (2 * v206 > v205) {
                  unint64_t v205 = 2 * v206;
                }
                if (v206 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v207 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v207 = v205;
                }
                if (v207) {
                  unint64_t v208 = (unint64_t)operator new(v207);
                }
                else {
                  unint64_t v208 = 0;
                }
                uint64_t v224 = (char *)(v208 + v207);
                v204[v208] = v9[v200];
                int32x4_t v202 = &v204[v208 + 1];
                if (v162 == (unsigned char *)v203)
                {
                  *a1 = (unint64_t)&v204[v208];
                  a1[1] = (unint64_t)v202;
                  a1[2] = (unint64_t)v224;
                }
                else
                {
                  uint64_t v225 = &v162[~v203];
                  do
                  {
                    char v226 = *--v162;
                    (v225--)[v208] = v226;
                  }
                  while (v162 != (unsigned char *)v203);
                  long long v162 = (unsigned char *)*a1;
                  *a1 = v208;
                  a1[1] = (unint64_t)v202;
                  a1[2] = (unint64_t)v224;
                  if (!v162)
                  {
LABEL_366:
                    a1[1] = (unint64_t)v202;
                    uint64_t v237 = v35 + 2;
                    unint64_t v238 = a1[2];
                    if ((unint64_t)v202 >= v238)
                    {
                      unint64_t v239 = *a1;
                      uint64_t v240 = &v202[-*a1];
                      unint64_t v241 = (unint64_t)(v240 + 1);
                      if ((uint64_t)(v240 + 1) < 0) {
                        goto LABEL_772;
                      }
                      unint64_t v242 = v238 - v239;
                      if (2 * v242 > v241) {
                        unint64_t v241 = 2 * v242;
                      }
                      if (v242 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v243 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v243 = v241;
                      }
                      if (v243) {
                        unint64_t v244 = (unint64_t)operator new(v243);
                      }
                      else {
                        unint64_t v244 = 0;
                      }
                      v255 = (char *)(v244 + v243);
                      v240[v244] = v9[v237];
                      long long v163 = &v240[v244 + 1];
                      if (v202 == (unsigned char *)v239)
                      {
                        *a1 = (unint64_t)&v240[v244];
                        a1[1] = (unint64_t)v163;
                        a1[2] = (unint64_t)v255;
                      }
                      else
                      {
                        uint64_t v256 = &v202[~v239];
                        do
                        {
                          char v257 = *--v202;
                          (v256--)[v244] = v257;
                        }
                        while (v202 != (unsigned char *)v239);
                        int32x4_t v202 = (unsigned char *)*a1;
                        *a1 = v244;
                        a1[1] = (unint64_t)v163;
                        a1[2] = (unint64_t)v255;
                        if (!v202) {
                          goto LABEL_514;
                        }
                      }
                      operator delete(v202);
                    }
                    else
                    {
                      unsigned char *v202 = v9[v237];
                      long long v163 = v202 + 1;
                    }
LABEL_514:
                    a1[1] = (unint64_t)v163;
LABEL_515:
                    __int16 v334 = *(_WORD *)&v9[2 * v35];
                    unint64_t v335 = a1[2];
                    if ((unint64_t)v163 >= v335)
                    {
                      unint64_t v337 = *a1;
                      int v338 = &v163[-*a1];
                      unint64_t v339 = (unint64_t)(v338 + 1);
                      if ((uint64_t)(v338 + 1) < 0) {
                        goto LABEL_772;
                      }
                      unint64_t v340 = v335 - v337;
                      if (2 * v340 > v339) {
                        unint64_t v339 = 2 * v340;
                      }
                      if (v340 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v341 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v341 = v339;
                      }
                      if (v341) {
                        uint64_t v342 = (char *)operator new(v341);
                      }
                      else {
                        uint64_t v342 = 0;
                      }
                      uint64_t v343 = &v338[(void)v342];
                      v338[(void)v342] = v334;
                      v336 = &v338[(void)v342 + 1];
                      if (v163 != (unsigned char *)v337)
                      {
                        unint64_t v344 = &v163[~v337];
                        do
                        {
                          char v345 = *--v163;
                          (v344--)[(void)v342] = v345;
                        }
                        while (v163 != (unsigned char *)v337);
                        long long v163 = (unsigned char *)*a1;
                        uint64_t v343 = v342;
                      }
                      *a1 = (unint64_t)v343;
                      a1[1] = (unint64_t)v336;
                      a1[2] = (unint64_t)&v342[v341];
                      if (v163) {
                        operator delete(v163);
                      }
                    }
                    else
                    {
                      *long long v163 = v334;
                      v336 = v163 + 1;
                    }
                    a1[1] = (unint64_t)v336;
                    __int16 v346 = *(_WORD *)&v9[2 * v35 + 2];
                    unint64_t v347 = a1[2];
                    if ((unint64_t)v336 < v347)
                    {
                      unsigned char *v336 = v346;
                      uint64_t v348 = v336 + 1;
                      goto LABEL_550;
                    }
                    unint64_t v349 = *a1;
                    uint64_t v350 = &v336[-*a1];
                    unint64_t v351 = (unint64_t)(v350 + 1);
                    if ((uint64_t)(v350 + 1) < 0) {
                      goto LABEL_772;
                    }
                    unint64_t v352 = v347 - v349;
                    if (2 * v352 > v351) {
                      unint64_t v351 = 2 * v352;
                    }
                    if (v352 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v353 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v353 = v351;
                    }
                    if (v353) {
                      unint64_t v354 = (unint64_t)operator new(v353);
                    }
                    else {
                      unint64_t v354 = 0;
                    }
                    v355 = (char *)(v354 + v353);
                    v350[v354] = v346;
                    uint64_t v348 = &v350[v354 + 1];
                    if (v336 == (unsigned char *)v349)
                    {
                      *a1 = (unint64_t)&v350[v354];
                      a1[1] = (unint64_t)v348;
                      a1[2] = (unint64_t)v355;
                    }
                    else
                    {
                      v356 = &v336[~v349];
                      do
                      {
                        char v357 = *--v336;
                        (v356--)[v354] = v357;
                      }
                      while (v336 != (unsigned char *)v349);
                      v336 = (unsigned char *)*a1;
                      *a1 = v354;
                      a1[1] = (unint64_t)v348;
                      a1[2] = (unint64_t)v355;
                      if (!v336)
                      {
LABEL_550:
                        a1[1] = (unint64_t)v348;
                        __int16 v358 = *(_WORD *)&v9[2 * v35 + 4];
                        unint64_t v359 = a1[2];
                        if ((unint64_t)v348 >= v359)
                        {
                          unint64_t v360 = *a1;
                          v361 = &v348[-*a1];
                          unint64_t v362 = (unint64_t)(v361 + 1);
                          if ((uint64_t)(v361 + 1) < 0) {
                            goto LABEL_772;
                          }
                          unint64_t v363 = v359 - v360;
                          if (2 * v363 > v362) {
                            unint64_t v362 = 2 * v363;
                          }
                          if (v363 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v364 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v364 = v362;
                          }
                          if (v364) {
                            unint64_t v365 = (unint64_t)operator new(v364);
                          }
                          else {
                            unint64_t v365 = 0;
                          }
                          unint64_t v366 = (char *)(v365 + v364);
                          v361[v365] = v358;
                          uint64_t v38 = &v361[v365 + 1];
                          if (v348 == (unsigned char *)v360)
                          {
                            *a1 = (unint64_t)&v361[v365];
                            a1[1] = (unint64_t)v38;
                            a1[2] = (unint64_t)v366;
                          }
                          else
                          {
                            v367 = &v348[~v360];
                            do
                            {
                              char v368 = *--v348;
                              (v367--)[v365] = v368;
                            }
                            while (v348 != (unsigned char *)v360);
                            uint64_t v348 = (unsigned char *)*a1;
                            *a1 = v365;
                            a1[1] = (unint64_t)v38;
                            a1[2] = (unint64_t)v366;
                            if (!v348) {
                              goto LABEL_568;
                            }
                          }
                          operator delete(v348);
                        }
                        else
                        {
                          unsigned char *v348 = v358;
                          uint64_t v38 = v348 + 1;
                        }
LABEL_568:
                        a1[1] = (unint64_t)v38;
LABEL_569:
                        int v369 = *(_DWORD *)&v9[4 * v35];
                        unint64_t v370 = a1[2];
                        if ((unint64_t)v38 >= v370)
                        {
                          unint64_t v372 = *a1;
                          v373 = &v38[-*a1];
                          unint64_t v374 = (unint64_t)(v373 + 1);
                          if ((uint64_t)(v373 + 1) < 0) {
                            goto LABEL_772;
                          }
                          unint64_t v375 = v370 - v372;
                          if (2 * v375 > v374) {
                            unint64_t v374 = 2 * v375;
                          }
                          if (v375 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v376 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v376 = v374;
                          }
                          if (v376) {
                            unint64_t v377 = (char *)operator new(v376);
                          }
                          else {
                            unint64_t v377 = 0;
                          }
                          uint64_t v378 = &v373[(void)v377];
                          v373[(void)v377] = v369;
                          v371 = &v373[(void)v377 + 1];
                          if (v38 != (unsigned char *)v372)
                          {
                            unint64_t v379 = &v38[~v372];
                            do
                            {
                              char v380 = *--v38;
                              (v379--)[(void)v377] = v380;
                            }
                            while (v38 != (unsigned char *)v372);
                            uint64_t v38 = (unsigned char *)*a1;
                            uint64_t v378 = v377;
                          }
                          *a1 = (unint64_t)v378;
                          a1[1] = (unint64_t)v371;
                          a1[2] = (unint64_t)&v377[v376];
                          if (v38) {
                            operator delete(v38);
                          }
                        }
                        else
                        {
                          *uint64_t v38 = v369;
                          v371 = v38 + 1;
                        }
                        a1[1] = (unint64_t)v371;
                        int v381 = *(_DWORD *)&v9[4 * v35 + 4];
                        unint64_t v382 = a1[2];
                        if ((unint64_t)v371 >= v382)
                        {
                          unint64_t v383 = *a1;
                          v384 = &v371[-*a1];
                          unint64_t v385 = (unint64_t)(v384 + 1);
                          if ((uint64_t)(v384 + 1) < 0) {
                            goto LABEL_772;
                          }
                          unint64_t v386 = v382 - v383;
                          if (2 * v386 > v385) {
                            unint64_t v385 = 2 * v386;
                          }
                          if (v386 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v387 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v387 = v385;
                          }
                          if (v387) {
                            unint64_t v388 = (unint64_t)operator new(v387);
                          }
                          else {
                            unint64_t v388 = 0;
                          }
                          v389 = (char *)(v388 + v387);
                          v384[v388] = v381;
                          int v310 = &v384[v388 + 1];
                          if (v371 == (unsigned char *)v383)
                          {
                            *a1 = (unint64_t)&v384[v388];
                            a1[1] = (unint64_t)v310;
                            a1[2] = (unint64_t)v389;
                          }
                          else
                          {
                            v390 = &v371[~v383];
                            do
                            {
                              char v391 = *--v371;
                              (v390--)[v388] = v391;
                            }
                            while (v371 != (unsigned char *)v383);
                            v371 = (unsigned char *)*a1;
                            *a1 = v388;
                            a1[1] = (unint64_t)v310;
                            a1[2] = (unint64_t)v389;
                            if (!v371) {
                              goto LABEL_604;
                            }
                          }
                          operator delete(v371);
                        }
                        else
                        {
                          unsigned char *v371 = v381;
                          int v310 = v371 + 1;
                        }
LABEL_604:
                        a1[1] = (unint64_t)v310;
                        int v320 = *(_DWORD *)&v9[4 * v35 + 8];
                        unint64_t v392 = a1[2];
                        if ((unint64_t)v310 < v392) {
                          goto LABEL_711;
                        }
                        unint64_t v393 = *a1;
                        unint64_t v394 = &v310[-*a1];
                        unint64_t v395 = (unint64_t)(v394 + 1);
                        if ((uint64_t)(v394 + 1) < 0) {
                          goto LABEL_772;
                        }
                        unint64_t v396 = v392 - v393;
                        if (2 * v396 > v395) {
                          unint64_t v395 = 2 * v396;
                        }
                        if (v396 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v397 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v397 = v395;
                        }
                        if (v397) {
                          unint64_t v327 = (unint64_t)operator new(v397);
                        }
                        else {
                          unint64_t v327 = 0;
                        }
                        float v328 = &v394[v327];
                        v329 = (char *)(v327 + v397);
                        v398 = &v394[v327];
                        unsigned char *v398 = v320;
                        uint64_t v331 = v398 + 1;
                        if (v310 == (unsigned char *)v393) {
                          goto LABEL_726;
                        }
                        int v399 = &v310[~v393];
                        do
                        {
                          char v400 = *--v310;
                          (v399--)[v327] = v400;
                        }
                        while (v310 != (unsigned char *)v393);
LABEL_724:
                        int v310 = (unsigned char *)*a1;
                        *a1 = v327;
                        a1[1] = (unint64_t)v331;
                        a1[2] = (unint64_t)v329;
                        if (!v310) {
                          goto LABEL_728;
                        }
                        goto LABEL_727;
                      }
                    }
                    operator delete(v336);
                    goto LABEL_550;
                  }
                }
                operator delete(v162);
                goto LABEL_366;
              case 16:
                long long v163 = (unsigned char *)a1[1];
                goto LABEL_515;
              case 32:
                uint64_t v38 = (unsigned char *)a1[1];
                goto LABEL_569;
            }
            break;
          case 2:
            switch(a6)
            {
              case 8:
                int32x4_t v165 = (unsigned char *)a1[1];
                unint64_t v164 = a1[2];
                if ((unint64_t)v165 >= v164)
                {
                  unint64_t v180 = *a1;
                  uint64_t v181 = &v165[-*a1];
                  unint64_t v182 = (unint64_t)(v181 + 1);
                  if ((uint64_t)(v181 + 1) < 0) {
                    goto LABEL_772;
                  }
                  unint64_t v183 = v164 - v180;
                  if (2 * v183 > v182) {
                    unint64_t v182 = 2 * v183;
                  }
                  if (v183 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v184 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v184 = v182;
                  }
                  if (v184) {
                    uint64_t v185 = (char *)operator new(v184);
                  }
                  else {
                    uint64_t v185 = 0;
                  }
                  uint64_t v209 = &v181[(void)v185];
                  v181[(void)v185] = v9[v35];
                  int32x4_t v166 = &v181[(void)v185 + 1];
                  if (v165 != (unsigned char *)v180)
                  {
                    uint64_t v210 = &v165[~v180];
                    do
                    {
                      char v211 = *--v165;
                      (v210--)[(void)v185] = v211;
                    }
                    while (v165 != (unsigned char *)v180);
                    int32x4_t v165 = (unsigned char *)*a1;
                    uint64_t v209 = v185;
                  }
                  *a1 = (unint64_t)v209;
                  a1[1] = (unint64_t)v166;
                  a1[2] = (unint64_t)&v185[v184];
                  if (v165) {
                    operator delete(v165);
                  }
                }
                else
                {
                  *int32x4_t v165 = v9[v35];
                  int32x4_t v166 = v165 + 1;
                }
                a1[1] = (unint64_t)v166;
                uint64_t v212 = v35 + 1;
                unint64_t v213 = a1[2];
                if ((unint64_t)v166 < v213)
                {
                  unsigned char *v166 = v9[v212];
                  unint64_t v214 = v166 + 1;
                  goto LABEL_378;
                }
                unint64_t v215 = *a1;
                long long v216 = &v166[-*a1];
                unint64_t v217 = (unint64_t)(v216 + 1);
                if ((uint64_t)(v216 + 1) < 0) {
                  goto LABEL_772;
                }
                unint64_t v218 = v213 - v215;
                if (2 * v218 > v217) {
                  unint64_t v217 = 2 * v218;
                }
                if (v218 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v219 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v219 = v217;
                }
                if (v219) {
                  unint64_t v220 = (unint64_t)operator new(v219);
                }
                else {
                  unint64_t v220 = 0;
                }
                int v227 = (char *)(v220 + v219);
                v216[v220] = v9[v212];
                unint64_t v214 = &v216[v220 + 1];
                if (v166 == (unsigned char *)v215)
                {
                  *a1 = (unint64_t)&v216[v220];
                  a1[1] = (unint64_t)v214;
                  a1[2] = (unint64_t)v227;
                }
                else
                {
                  uint64_t v228 = &v166[~v215];
                  do
                  {
                    char v229 = *--v166;
                    (v228--)[v220] = v229;
                  }
                  while (v166 != (unsigned char *)v215);
                  int32x4_t v166 = (unsigned char *)*a1;
                  *a1 = v220;
                  a1[1] = (unint64_t)v214;
                  a1[2] = (unint64_t)v227;
                  if (!v166)
                  {
LABEL_378:
                    a1[1] = (unint64_t)v214;
                    unint64_t v245 = a1[2];
                    if ((unint64_t)v214 >= v245)
                    {
                      unint64_t v246 = *a1;
                      long long v247 = &v214[-*a1];
                      unint64_t v248 = (unint64_t)(v247 + 1);
                      if ((uint64_t)(v247 + 1) < 0) {
                        goto LABEL_772;
                      }
                      unint64_t v249 = v245 - v246;
                      if (2 * v249 > v248) {
                        unint64_t v248 = 2 * v249;
                      }
                      if (v249 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v250 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v250 = v248;
                      }
                      if (v250) {
                        unint64_t v251 = (unint64_t)operator new(v250);
                      }
                      else {
                        unint64_t v251 = 0;
                      }
                      float32x2_t v258 = (char *)(v251 + v250);
                      v247[v251] = v9[v212];
                      int32x4_t v167 = &v247[v251 + 1];
                      if (v214 == (unsigned char *)v246)
                      {
                        *a1 = (unint64_t)&v247[v251];
                        a1[1] = (unint64_t)v167;
                        a1[2] = (unint64_t)v258;
                      }
                      else
                      {
                        float v259 = &v214[~v246];
                        do
                        {
                          char v260 = *--v214;
                          (v259--)[v251] = v260;
                        }
                        while (v214 != (unsigned char *)v246);
                        unint64_t v214 = (unsigned char *)*a1;
                        *a1 = v251;
                        a1[1] = (unint64_t)v167;
                        a1[2] = (unint64_t)v258;
                        if (!v214) {
                          goto LABEL_620;
                        }
                      }
                      operator delete(v214);
                    }
                    else
                    {
                      *unint64_t v214 = v9[v212];
                      int32x4_t v167 = v214 + 1;
                    }
LABEL_620:
                    a1[1] = (unint64_t)v167;
LABEL_621:
                    __int16 v401 = *(_WORD *)&v9[2 * v35];
                    unint64_t v402 = a1[2];
                    if ((unint64_t)v167 >= v402)
                    {
                      unint64_t v404 = *a1;
                      v405 = &v167[-*a1];
                      unint64_t v406 = (unint64_t)(v405 + 1);
                      if ((uint64_t)(v405 + 1) < 0) {
                        goto LABEL_772;
                      }
                      unint64_t v407 = v402 - v404;
                      if (2 * v407 > v406) {
                        unint64_t v406 = 2 * v407;
                      }
                      if (v407 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v408 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v408 = v406;
                      }
                      if (v408) {
                        unint64_t v409 = (char *)operator new(v408);
                      }
                      else {
                        unint64_t v409 = 0;
                      }
                      v410 = &v405[(void)v409];
                      v405[(void)v409] = v401;
                      v403 = &v405[(void)v409 + 1];
                      if (v167 != (unsigned char *)v404)
                      {
                        v411 = &v167[~v404];
                        do
                        {
                          char v412 = *--v167;
                          (v411--)[(void)v409] = v412;
                        }
                        while (v167 != (unsigned char *)v404);
                        int32x4_t v167 = (unsigned char *)*a1;
                        v410 = v409;
                      }
                      *a1 = (unint64_t)v410;
                      a1[1] = (unint64_t)v403;
                      a1[2] = (unint64_t)&v409[v408];
                      if (v167) {
                        operator delete(v167);
                      }
                    }
                    else
                    {
                      unsigned char *v167 = v401;
                      v403 = v167 + 1;
                    }
                    a1[1] = (unint64_t)v403;
                    __int16 v413 = *(_WORD *)&v9[2 * v35 + 2];
                    unint64_t v414 = a1[2];
                    if ((unint64_t)v403 < v414)
                    {
                      unsigned char *v403 = v413;
                      v415 = v403 + 1;
                      goto LABEL_656;
                    }
                    unint64_t v416 = *a1;
                    unint64_t v417 = &v403[-*a1];
                    unint64_t v418 = (unint64_t)(v417 + 1);
                    if ((uint64_t)(v417 + 1) < 0) {
                      goto LABEL_772;
                    }
                    unint64_t v419 = v414 - v416;
                    if (2 * v419 > v418) {
                      unint64_t v418 = 2 * v419;
                    }
                    if (v419 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v420 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v420 = v418;
                    }
                    if (v420) {
                      unint64_t v421 = (unint64_t)operator new(v420);
                    }
                    else {
                      unint64_t v421 = 0;
                    }
                    int v422 = &v417[v421];
                    v423 = (char *)(v421 + v420);
                    int v424 = &v417[v421];
                    *int v424 = v413;
                    v415 = v424 + 1;
                    if (v403 == (unsigned char *)v416)
                    {
                      *a1 = (unint64_t)v422;
                      a1[1] = (unint64_t)v415;
                      a1[2] = (unint64_t)v423;
                    }
                    else
                    {
                      v425 = &v403[~v416];
                      do
                      {
                        char v426 = *--v403;
                        (v425--)[v421] = v426;
                      }
                      while (v403 != (unsigned char *)v416);
                      v403 = (unsigned char *)*a1;
                      *a1 = v421;
                      a1[1] = (unint64_t)v415;
                      a1[2] = (unint64_t)v423;
                      if (!v403)
                      {
LABEL_656:
                        a1[1] = (unint64_t)v415;
                        __int16 v427 = *(_WORD *)&v9[2 * v35 + 2];
                        unint64_t v428 = a1[2];
                        if ((unint64_t)v415 >= v428)
                        {
                          unint64_t v429 = *a1;
                          unint64_t v430 = &v415[-*a1];
                          unint64_t v431 = (unint64_t)(v430 + 1);
                          if ((uint64_t)(v430 + 1) < 0) {
                            goto LABEL_772;
                          }
                          unint64_t v432 = v428 - v429;
                          if (2 * v432 > v431) {
                            unint64_t v431 = 2 * v432;
                          }
                          if (v432 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v433 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v433 = v431;
                          }
                          if (v433) {
                            unint64_t v434 = (unint64_t)operator new(v433);
                          }
                          else {
                            unint64_t v434 = 0;
                          }
                          v435 = (char *)(v434 + v433);
                          v430[v434] = v427;
                          uint64_t v39 = &v430[v434 + 1];
                          if (v415 == (unsigned char *)v429)
                          {
                            *a1 = (unint64_t)&v430[v434];
                            a1[1] = (unint64_t)v39;
                            a1[2] = (unint64_t)v435;
                          }
                          else
                          {
                            uint64_t v436 = &v415[~v429];
                            do
                            {
                              char v437 = *--v415;
                              (v436--)[v434] = v437;
                            }
                            while (v415 != (unsigned char *)v429);
                            v415 = (unsigned char *)*a1;
                            *a1 = v434;
                            a1[1] = (unint64_t)v39;
                            a1[2] = (unint64_t)v435;
                            if (!v415) {
                              goto LABEL_674;
                            }
                          }
                          operator delete(v415);
                        }
                        else
                        {
                          unsigned char *v415 = v427;
                          uint64_t v39 = v415 + 1;
                        }
LABEL_674:
                        a1[1] = (unint64_t)v39;
LABEL_675:
                        int v438 = *(_DWORD *)&v9[4 * v35];
                        unint64_t v439 = a1[2];
                        if ((unint64_t)v39 >= v439)
                        {
                          unint64_t v441 = *a1;
                          int v442 = &v39[-*a1];
                          unint64_t v443 = (unint64_t)(v442 + 1);
                          if ((uint64_t)(v442 + 1) < 0) {
                            goto LABEL_772;
                          }
                          unint64_t v444 = v439 - v441;
                          if (2 * v444 > v443) {
                            unint64_t v443 = 2 * v444;
                          }
                          if (v444 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v445 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v445 = v443;
                          }
                          if (v445) {
                            unint64_t v446 = (char *)operator new(v445);
                          }
                          else {
                            unint64_t v446 = 0;
                          }
                          uint64_t v447 = &v442[(void)v446];
                          v442[(void)v446] = v438;
                          v440 = &v442[(void)v446 + 1];
                          if (v39 != (unsigned char *)v441)
                          {
                            unint64_t v448 = &v39[~v441];
                            do
                            {
                              char v449 = *--v39;
                              (v448--)[(void)v446] = v449;
                            }
                            while (v39 != (unsigned char *)v441);
                            uint64_t v39 = (unsigned char *)*a1;
                            uint64_t v447 = v446;
                          }
                          *a1 = (unint64_t)v447;
                          a1[1] = (unint64_t)v440;
                          a1[2] = (unint64_t)&v446[v445];
                          if (v39) {
                            operator delete(v39);
                          }
                        }
                        else
                        {
                          *uint64_t v39 = v438;
                          v440 = v39 + 1;
                        }
                        a1[1] = (unint64_t)v440;
                        int v450 = *(_DWORD *)&v9[4 * v35 + 4];
                        unint64_t v451 = a1[2];
                        if ((unint64_t)v440 < v451)
                        {
                          unsigned char *v440 = v450;
                          int v310 = v440 + 1;
                          goto LABEL_710;
                        }
                        unint64_t v452 = *a1;
                        v453 = &v440[-*a1];
                        unint64_t v454 = (unint64_t)(v453 + 1);
                        if ((uint64_t)(v453 + 1) < 0) {
                          goto LABEL_772;
                        }
                        unint64_t v455 = v451 - v452;
                        if (2 * v455 > v454) {
                          unint64_t v454 = 2 * v455;
                        }
                        if (v455 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v456 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v456 = v454;
                        }
                        if (v456) {
                          unint64_t v457 = (unint64_t)operator new(v456);
                        }
                        else {
                          unint64_t v457 = 0;
                        }
                        unint64_t v458 = (char *)(v457 + v456);
                        v453[v457] = v450;
                        int v310 = &v453[v457 + 1];
                        if (v440 == (unsigned char *)v452)
                        {
                          *a1 = (unint64_t)&v453[v457];
                          a1[1] = (unint64_t)v310;
                          a1[2] = (unint64_t)v458;
                        }
                        else
                        {
                          v459 = &v440[~v452];
                          do
                          {
                            char v460 = *--v440;
                            (v459--)[v457] = v460;
                          }
                          while (v440 != (unsigned char *)v452);
                          v440 = (unsigned char *)*a1;
                          *a1 = v457;
                          a1[1] = (unint64_t)v310;
                          a1[2] = (unint64_t)v458;
                          if (!v440)
                          {
LABEL_710:
                            a1[1] = (unint64_t)v310;
                            int v320 = *(_DWORD *)&v9[4 * v35 + 4];
                            unint64_t v461 = a1[2];
                            if ((unint64_t)v310 < v461) {
                              goto LABEL_711;
                            }
                            unint64_t v462 = *a1;
                            v463 = &v310[-*a1];
                            unint64_t v464 = (unint64_t)(v463 + 1);
                            if ((uint64_t)(v463 + 1) < 0) {
LABEL_772:
                            }
                              sub_20B05D0BC();
                            unint64_t v465 = v461 - v462;
                            if (2 * v465 > v464) {
                              unint64_t v464 = 2 * v465;
                            }
                            if (v465 >= 0x3FFFFFFFFFFFFFFFLL) {
                              size_t v466 = 0x7FFFFFFFFFFFFFFFLL;
                            }
                            else {
                              size_t v466 = v464;
                            }
                            if (v466) {
                              unint64_t v327 = (unint64_t)operator new(v466);
                            }
                            else {
                              unint64_t v327 = 0;
                            }
                            float v328 = &v463[v327];
                            v329 = (char *)(v327 + v466);
                            v467 = &v463[v327];
                            unsigned char *v467 = v320;
                            uint64_t v331 = v467 + 1;
                            if (v310 == (unsigned char *)v462) {
                              goto LABEL_726;
                            }
                            v468 = &v310[~v462];
                            do
                            {
                              char v469 = *--v310;
                              (v468--)[v327] = v469;
                            }
                            while (v310 != (unsigned char *)v462);
                            goto LABEL_724;
                          }
                        }
                        operator delete(v440);
                        goto LABEL_710;
                      }
                    }
                    operator delete(v403);
                    goto LABEL_656;
                  }
                }
                operator delete(v166);
                goto LABEL_378;
              case 16:
                int32x4_t v167 = (unsigned char *)a1[1];
                goto LABEL_621;
              case 32:
                uint64_t v39 = (unsigned char *)a1[1];
                goto LABEL_675;
            }
            break;
          case 1:
            switch(a6)
            {
              case 8:
                long long v157 = (unsigned char *)a1[1];
                unint64_t v156 = a1[2];
                if ((unint64_t)v157 >= v156)
                {
                  unint64_t v168 = *a1;
                  uint64_t v169 = &v157[-*a1];
                  unint64_t v170 = (unint64_t)(v169 + 1);
                  if ((uint64_t)(v169 + 1) < 0) {
                    goto LABEL_772;
                  }
                  unint64_t v171 = v156 - v168;
                  if (2 * v171 > v170) {
                    unint64_t v170 = 2 * v171;
                  }
                  if (v171 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v172 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v172 = v170;
                  }
                  if (v172) {
                    uint64_t v173 = (char *)operator new(v172);
                  }
                  else {
                    uint64_t v173 = 0;
                  }
                  unint64_t v186 = &v169[(void)v173];
                  v169[(void)v173] = v9[v35];
                  __n128 v158 = &v169[(void)v173 + 1];
                  if (v157 != (unsigned char *)v168)
                  {
                    int8x16_t v187 = &v157[~v168];
                    do
                    {
                      char v188 = *--v157;
                      (v187--)[(void)v173] = v188;
                    }
                    while (v157 != (unsigned char *)v168);
                    long long v157 = (unsigned char *)*a1;
                    unint64_t v186 = v173;
                  }
                  *a1 = (unint64_t)v186;
                  a1[1] = (unint64_t)v158;
                  a1[2] = (unint64_t)&v173[v172];
                  if (v157) {
                    operator delete(v157);
                  }
                }
                else
                {
                  unsigned char *v157 = v9[v35];
                  __n128 v158 = v157 + 1;
                }
                a1[1] = (unint64_t)v158;
                unint64_t v189 = a1[2];
                if ((unint64_t)v158 < v189)
                {
                  *__n128 v158 = v9[v35];
                  float32x4_t v190 = v158 + 1;
                  goto LABEL_354;
                }
                unint64_t v191 = *a1;
                float32x2_t v192 = &v158[-*a1];
                unint64_t v193 = (unint64_t)(v192 + 1);
                if ((uint64_t)(v192 + 1) < 0) {
                  goto LABEL_772;
                }
                unint64_t v194 = v189 - v191;
                if (2 * v194 > v193) {
                  unint64_t v193 = 2 * v194;
                }
                if (v194 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v195 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v195 = v193;
                }
                if (v195) {
                  unint64_t v196 = (unint64_t)operator new(v195);
                }
                else {
                  unint64_t v196 = 0;
                }
                uint64_t v221 = (char *)(v196 + v195);
                v192[v196] = v9[v35];
                float32x4_t v190 = &v192[v196 + 1];
                if (v158 == (unsigned char *)v191)
                {
                  *a1 = (unint64_t)&v192[v196];
                  a1[1] = (unint64_t)v190;
                  a1[2] = (unint64_t)v221;
                }
                else
                {
                  unint64_t v222 = &v158[~v191];
                  do
                  {
                    char v223 = *--v158;
                    (v222--)[v196] = v223;
                  }
                  while (v158 != (unsigned char *)v191);
                  __n128 v158 = (unsigned char *)*a1;
                  *a1 = v196;
                  a1[1] = (unint64_t)v190;
                  a1[2] = (unint64_t)v221;
                  if (!v158)
                  {
LABEL_354:
                    a1[1] = (unint64_t)v190;
                    unint64_t v230 = a1[2];
                    if ((unint64_t)v190 >= v230)
                    {
                      unint64_t v231 = *a1;
                      unint64_t v232 = &v190[-*a1];
                      unint64_t v233 = (unint64_t)(v232 + 1);
                      if ((uint64_t)(v232 + 1) < 0) {
                        goto LABEL_772;
                      }
                      unint64_t v234 = v230 - v231;
                      if (2 * v234 > v233) {
                        unint64_t v233 = 2 * v234;
                      }
                      if (v234 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v235 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v235 = v233;
                      }
                      if (v235) {
                        unint64_t v236 = (unint64_t)operator new(v235);
                      }
                      else {
                        unint64_t v236 = 0;
                      }
                      int v252 = (char *)(v236 + v235);
                      v232[v236] = v9[v35];
                      unint64_t v159 = &v232[v236 + 1];
                      if (v190 == (unsigned char *)v231)
                      {
                        *a1 = (unint64_t)&v232[v236];
                        a1[1] = (unint64_t)v159;
                        a1[2] = (unint64_t)v252;
                      }
                      else
                      {
                        unsigned __int32 v253 = &v190[~v231];
                        do
                        {
                          char v254 = *--v190;
                          (v253--)[v236] = v254;
                        }
                        while (v190 != (unsigned char *)v231);
                        float32x4_t v190 = (unsigned char *)*a1;
                        *a1 = v236;
                        a1[1] = (unint64_t)v159;
                        a1[2] = (unint64_t)v252;
                        if (!v190) {
                          goto LABEL_408;
                        }
                      }
                      operator delete(v190);
                    }
                    else
                    {
                      *float32x4_t v190 = v9[v35];
                      unint64_t v159 = v190 + 1;
                    }
LABEL_408:
                    a1[1] = (unint64_t)v159;
LABEL_409:
                    __int16 v261 = *(_WORD *)&v9[2 * v35];
                    unint64_t v262 = a1[2];
                    if ((unint64_t)v159 >= v262)
                    {
                      unint64_t v264 = *a1;
                      v265 = &v159[-*a1];
                      unint64_t v266 = (unint64_t)(v265 + 1);
                      if ((uint64_t)(v265 + 1) < 0) {
                        goto LABEL_772;
                      }
                      unint64_t v267 = v262 - v264;
                      if (2 * v267 > v266) {
                        unint64_t v266 = 2 * v267;
                      }
                      if (v267 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v268 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v268 = v266;
                      }
                      if (v268) {
                        int v269 = (char *)operator new(v268);
                      }
                      else {
                        int v269 = 0;
                      }
                      int v270 = &v265[(void)v269];
                      v265[(void)v269] = v261;
                      unsigned __int32 v263 = &v265[(void)v269 + 1];
                      if (v159 != (unsigned char *)v264)
                      {
                        v271 = &v159[~v264];
                        do
                        {
                          char v272 = *--v159;
                          (v271--)[(void)v269] = v272;
                        }
                        while (v159 != (unsigned char *)v264);
                        unint64_t v159 = (unsigned char *)*a1;
                        int v270 = v269;
                      }
                      *a1 = (unint64_t)v270;
                      a1[1] = (unint64_t)v263;
                      a1[2] = (unint64_t)&v269[v268];
                      if (v159) {
                        operator delete(v159);
                      }
                    }
                    else
                    {
                      *unint64_t v159 = v261;
                      unsigned __int32 v263 = v159 + 1;
                    }
                    a1[1] = (unint64_t)v263;
                    __int16 v273 = *(_WORD *)&v9[2 * v35];
                    unint64_t v274 = a1[2];
                    if ((unint64_t)v263 < v274)
                    {
                      *unsigned __int32 v263 = v273;
                      uint64_t v275 = v263 + 1;
                      goto LABEL_444;
                    }
                    unint64_t v276 = *a1;
                    uint64_t v277 = &v263[-*a1];
                    unint64_t v278 = (unint64_t)(v277 + 1);
                    if ((uint64_t)(v277 + 1) < 0) {
                      goto LABEL_772;
                    }
                    unint64_t v279 = v274 - v276;
                    if (2 * v279 > v278) {
                      unint64_t v278 = 2 * v279;
                    }
                    if (v279 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v280 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v280 = v278;
                    }
                    if (v280) {
                      unint64_t v281 = (unint64_t)operator new(v280);
                    }
                    else {
                      unint64_t v281 = 0;
                    }
                    int v282 = (char *)(v281 + v280);
                    v277[v281] = v273;
                    uint64_t v275 = &v277[v281 + 1];
                    if (v263 == (unsigned char *)v276)
                    {
                      *a1 = (unint64_t)&v277[v281];
                      a1[1] = (unint64_t)v275;
                      a1[2] = (unint64_t)v282;
                    }
                    else
                    {
                      v283 = &v263[~v276];
                      do
                      {
                        char v284 = *--v263;
                        (v283--)[v281] = v284;
                      }
                      while (v263 != (unsigned char *)v276);
                      unsigned __int32 v263 = (unsigned char *)*a1;
                      *a1 = v281;
                      a1[1] = (unint64_t)v275;
                      a1[2] = (unint64_t)v282;
                      if (!v263)
                      {
LABEL_444:
                        a1[1] = (unint64_t)v275;
                        __int16 v285 = *(_WORD *)&v9[2 * v35];
                        unint64_t v286 = a1[2];
                        if ((unint64_t)v275 >= v286)
                        {
                          unint64_t v287 = *a1;
                          unint64_t v288 = &v275[-*a1];
                          unint64_t v289 = (unint64_t)(v288 + 1);
                          if ((uint64_t)(v288 + 1) < 0) {
                            goto LABEL_772;
                          }
                          unint64_t v290 = v286 - v287;
                          if (2 * v290 > v289) {
                            unint64_t v289 = 2 * v290;
                          }
                          if (v290 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v291 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v291 = v289;
                          }
                          if (v291) {
                            unint64_t v292 = (unint64_t)operator new(v291);
                          }
                          else {
                            unint64_t v292 = 0;
                          }
                          int v293 = (char *)(v292 + v291);
                          v288[v292] = v285;
                          uint64_t v37 = &v288[v292 + 1];
                          if (v275 == (unsigned char *)v287)
                          {
                            *a1 = (unint64_t)&v288[v292];
                            a1[1] = (unint64_t)v37;
                            a1[2] = (unint64_t)v293;
                          }
                          else
                          {
                            uint64_t v294 = &v275[~v287];
                            do
                            {
                              char v295 = *--v275;
                              (v294--)[v292] = v295;
                            }
                            while (v275 != (unsigned char *)v287);
                            uint64_t v275 = (unsigned char *)*a1;
                            *a1 = v292;
                            a1[1] = (unint64_t)v37;
                            a1[2] = (unint64_t)v293;
                            if (!v275) {
                              goto LABEL_462;
                            }
                          }
                          operator delete(v275);
                        }
                        else
                        {
                          *uint64_t v275 = v285;
                          uint64_t v37 = v275 + 1;
                        }
LABEL_462:
                        a1[1] = (unint64_t)v37;
LABEL_463:
                        int v296 = *(_DWORD *)&v9[4 * v35];
                        unint64_t v297 = a1[2];
                        if ((unint64_t)v37 >= v297)
                        {
                          unint64_t v299 = *a1;
                          unsigned __int32 v300 = &v37[-*a1];
                          unint64_t v301 = (unint64_t)(v300 + 1);
                          if ((uint64_t)(v300 + 1) < 0) {
                            goto LABEL_772;
                          }
                          unint64_t v302 = v297 - v299;
                          if (2 * v302 > v301) {
                            unint64_t v301 = 2 * v302;
                          }
                          if (v302 >= 0x3FFFFFFFFFFFFFFFLL) {
                            size_t v303 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            size_t v303 = v301;
                          }
                          if (v303) {
                            int v304 = (char *)operator new(v303);
                          }
                          else {
                            int v304 = 0;
                          }
                          int v305 = &v300[(void)v304];
                          v300[(void)v304] = v296;
                          v298 = &v300[(void)v304 + 1];
                          if (v37 != (unsigned char *)v299)
                          {
                            uint64_t v306 = &v37[~v299];
                            do
                            {
                              char v307 = *--v37;
                              (v306--)[(void)v304] = v307;
                            }
                            while (v37 != (unsigned char *)v299);
                            uint64_t v37 = (unsigned char *)*a1;
                            int v305 = v304;
                          }
                          *a1 = (unint64_t)v305;
                          a1[1] = (unint64_t)v298;
                          a1[2] = (unint64_t)&v304[v303];
                          if (v37) {
                            operator delete(v37);
                          }
                        }
                        else
                        {
                          *uint64_t v37 = v296;
                          v298 = v37 + 1;
                        }
                        a1[1] = (unint64_t)v298;
                        int v308 = *(_DWORD *)&v9[4 * v35];
                        unint64_t v309 = a1[2];
                        if ((unint64_t)v298 < v309)
                        {
                          unsigned char *v298 = v308;
                          int v310 = v298 + 1;
                          goto LABEL_498;
                        }
                        unint64_t v311 = *a1;
                        v312 = &v298[-*a1];
                        unint64_t v313 = (unint64_t)(v312 + 1);
                        if ((uint64_t)(v312 + 1) < 0) {
                          goto LABEL_772;
                        }
                        unint64_t v314 = v309 - v311;
                        if (2 * v314 > v313) {
                          unint64_t v313 = 2 * v314;
                        }
                        if (v314 >= 0x3FFFFFFFFFFFFFFFLL) {
                          size_t v315 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          size_t v315 = v313;
                        }
                        if (v315) {
                          unint64_t v316 = (unint64_t)operator new(v315);
                        }
                        else {
                          unint64_t v316 = 0;
                        }
                        unint64_t v317 = (char *)(v316 + v315);
                        v312[v316] = v308;
                        int v310 = &v312[v316 + 1];
                        if (v298 == (unsigned char *)v311)
                        {
                          *a1 = (unint64_t)&v312[v316];
                          a1[1] = (unint64_t)v310;
                          a1[2] = (unint64_t)v317;
                        }
                        else
                        {
                          v318 = &v298[~v311];
                          do
                          {
                            char v319 = *--v298;
                            (v318--)[v316] = v319;
                          }
                          while (v298 != (unsigned char *)v311);
                          v298 = (unsigned char *)*a1;
                          *a1 = v316;
                          a1[1] = (unint64_t)v310;
                          a1[2] = (unint64_t)v317;
                          if (!v298)
                          {
LABEL_498:
                            a1[1] = (unint64_t)v310;
                            int v320 = *(_DWORD *)&v9[4 * v35];
                            unint64_t v321 = a1[2];
                            if ((unint64_t)v310 >= v321)
                            {
                              unint64_t v322 = *a1;
                              int32x4_t v323 = &v310[-*a1];
                              unint64_t v324 = (unint64_t)(v323 + 1);
                              if ((uint64_t)(v323 + 1) < 0) {
                                goto LABEL_772;
                              }
                              unint64_t v325 = v321 - v322;
                              if (2 * v325 > v324) {
                                unint64_t v324 = 2 * v325;
                              }
                              if (v325 >= 0x3FFFFFFFFFFFFFFFLL) {
                                size_t v326 = 0x7FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                size_t v326 = v324;
                              }
                              if (v326) {
                                unint64_t v327 = (unint64_t)operator new(v326);
                              }
                              else {
                                unint64_t v327 = 0;
                              }
                              float v328 = &v323[v327];
                              v329 = (char *)(v327 + v326);
                              v330 = &v323[v327];
                              unsigned char *v330 = v320;
                              uint64_t v331 = v330 + 1;
                              if (v310 != (unsigned char *)v322)
                              {
                                unint64_t v332 = &v310[~v322];
                                do
                                {
                                  char v333 = *--v310;
                                  (v332--)[v327] = v333;
                                }
                                while (v310 != (unsigned char *)v322);
                                goto LABEL_724;
                              }
LABEL_726:
                              *a1 = (unint64_t)v328;
                              a1[1] = (unint64_t)v331;
                              a1[2] = (unint64_t)v329;
LABEL_727:
                              operator delete(v310);
                              goto LABEL_728;
                            }
LABEL_711:
                            *int v310 = v320;
                            uint64_t v331 = v310 + 1;
LABEL_728:
                            a1[1] = (unint64_t)v331;
                            goto LABEL_729;
                          }
                        }
                        operator delete(v298);
                        goto LABEL_498;
                      }
                    }
                    operator delete(v263);
                    goto LABEL_444;
                  }
                }
                operator delete(v158);
                goto LABEL_354;
              case 16:
                unint64_t v159 = (unsigned char *)a1[1];
                goto LABEL_409;
              case 32:
                uint64_t v37 = (unsigned char *)a1[1];
                goto LABEL_463;
            }
            break;
          default:
            if (a6 != 32)
            {
              if (a6 != 16)
              {
                if (a6 != 8 || v36 < 3) {
                  break;
                }
                uint64_t v40 = 0;
                unint64_t v41 = (unsigned char *)a1[1];
                while (2)
                {
                  unint64_t v42 = a1[2];
                  if ((unint64_t)v41 >= v42)
                  {
                    unint64_t v44 = *a1;
                    uint64_t v45 = &v41[-*a1];
                    unint64_t v46 = (unint64_t)(v45 + 1);
                    if ((uint64_t)(v45 + 1) < 0) {
                      goto LABEL_772;
                    }
                    unint64_t v47 = v42 - v44;
                    if (2 * v47 > v46) {
                      unint64_t v46 = 2 * v47;
                    }
                    if (v47 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v48 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v48 = v46;
                    }
                    if (v48) {
                      int v49 = (char *)operator new(v48);
                    }
                    else {
                      int v49 = 0;
                    }
                    uint64_t v50 = &v45[(void)v49];
                    v45[(void)v49] = v9[v35];
                    long long v43 = &v45[(void)v49 + 1];
                    if (v41 != (unsigned char *)v44)
                    {
                      uint64_t v51 = &v41[~v44];
                      do
                      {
                        char v52 = *--v41;
                        (v51--)[(void)v49] = v52;
                      }
                      while (v41 != (unsigned char *)v44);
                      unint64_t v41 = (unsigned char *)*a1;
                      uint64_t v50 = v49;
                    }
                    *a1 = (unint64_t)v50;
                    a1[1] = (unint64_t)v43;
                    a1[2] = (unint64_t)&v49[v48];
                    if (v41) {
                      operator delete(v41);
                    }
                  }
                  else
                  {
                    *unint64_t v41 = v9[v35];
                    long long v43 = v41 + 1;
                  }
                  a1[1] = (unint64_t)v43;
                  uint64_t v53 = v40 + v35 + 1;
                  unint64_t v54 = a1[2];
                  if ((unint64_t)v43 < v54)
                  {
                    *long long v43 = v9[v53];
                    unint64_t v55 = v43 + 1;
                    goto LABEL_118;
                  }
                  unint64_t v56 = *a1;
                  uint64_t v57 = &v43[-*a1];
                  unint64_t v58 = (unint64_t)(v57 + 1);
                  if ((uint64_t)(v57 + 1) < 0) {
                    goto LABEL_772;
                  }
                  unint64_t v59 = v54 - v56;
                  if (2 * v59 > v58) {
                    unint64_t v58 = 2 * v59;
                  }
                  if (v59 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v60 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v60 = v58;
                  }
                  if (v60) {
                    unint64_t v61 = (unint64_t)operator new(v60);
                  }
                  else {
                    unint64_t v61 = 0;
                  }
                  uint64_t v62 = (char *)(v61 + v60);
                  v57[v61] = v9[v53];
                  unint64_t v55 = &v57[v61 + 1];
                  if (v43 == (unsigned char *)v56)
                  {
                    *a1 = (unint64_t)&v57[v61];
                    a1[1] = (unint64_t)v55;
                    a1[2] = (unint64_t)v62;
                    uint64_t v14 = a4;
                  }
                  else
                  {
                    long long v63 = &v43[~v56];
                    uint64_t v14 = a4;
                    do
                    {
                      char v64 = *--v43;
                      (v63--)[v61] = v64;
                    }
                    while (v43 != (unsigned char *)v56);
                    long long v43 = (unsigned char *)*a1;
                    *a1 = v61;
                    a1[1] = (unint64_t)v55;
                    a1[2] = (unint64_t)v62;
                    if (!v43)
                    {
LABEL_118:
                      a1[1] = (unint64_t)v55;
                      uint64_t v65 = v40 + v35 + 2;
                      unint64_t v66 = a1[2];
                      if ((unint64_t)v55 < v66)
                      {
                        *unint64_t v55 = v9[v65];
                        unint64_t v41 = v55 + 1;
                        goto LABEL_136;
                      }
                      unint64_t v67 = *a1;
                      uint64_t v68 = &v55[-*a1];
                      unint64_t v69 = (unint64_t)(v68 + 1);
                      if ((uint64_t)(v68 + 1) < 0) {
                        goto LABEL_772;
                      }
                      unint64_t v70 = v66 - v67;
                      if (2 * v70 > v69) {
                        unint64_t v69 = 2 * v70;
                      }
                      if (v70 >= 0x3FFFFFFFFFFFFFFFLL) {
                        size_t v71 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        size_t v71 = v69;
                      }
                      if (v71) {
                        unint64_t v72 = (unint64_t)operator new(v71);
                      }
                      else {
                        unint64_t v72 = 0;
                      }
                      uint64_t v73 = (char *)(v72 + v71);
                      v68[v72] = v9[v65];
                      unint64_t v41 = &v68[v72 + 1];
                      if (v55 == (unsigned char *)v67)
                      {
                        *a1 = (unint64_t)&v68[v72];
                        a1[1] = (unint64_t)v41;
                        a1[2] = (unint64_t)v73;
                      }
                      else
                      {
                        uint64_t v74 = &v55[~v67];
                        do
                        {
                          char v75 = *--v55;
                          (v74--)[v72] = v75;
                        }
                        while (v55 != (unsigned char *)v67);
                        unint64_t v55 = (unsigned char *)*a1;
                        *a1 = v72;
                        a1[1] = (unint64_t)v41;
                        a1[2] = (unint64_t)v73;
                        if (!v55)
                        {
LABEL_136:
                          a1[1] = (unint64_t)v41;
                          ++v40;
                          uint64_t v36 = v499[v14];
                          if (v40 >= v36 - 2) {
                            goto LABEL_137;
                          }
                          continue;
                        }
                      }
                      operator delete(v55);
                      goto LABEL_136;
                    }
                  }
                  break;
                }
                operator delete(v43);
                goto LABEL_118;
              }
LABEL_137:
              if (v36 < 3) {
                break;
              }
              uint64_t v76 = 0;
              uint64_t v77 = (unsigned char *)a1[1];
              while (2)
              {
                __int16 v78 = *(_WORD *)&v9[2 * v35];
                unint64_t v79 = a1[2];
                if ((unint64_t)v77 >= v79)
                {
                  unint64_t v81 = *a1;
                  long long v82 = &v77[-*a1];
                  unint64_t v83 = (unint64_t)(v82 + 1);
                  if ((uint64_t)(v82 + 1) < 0) {
                    goto LABEL_772;
                  }
                  unint64_t v84 = v79 - v81;
                  if (2 * v84 > v83) {
                    unint64_t v83 = 2 * v84;
                  }
                  if (v84 >= 0x3FFFFFFFFFFFFFFFLL) {
                    size_t v85 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    size_t v85 = v83;
                  }
                  if (v85) {
                    long long v86 = (char *)operator new(v85);
                  }
                  else {
                    long long v86 = 0;
                  }
                  long long v87 = &v82[(void)v86];
                  uint64_t v88 = &v82[(void)v86];
                  *uint64_t v88 = v78;
                  int v80 = v88 + 1;
                  if (v77 != (unsigned char *)v81)
                  {
                    uint64_t v89 = &v77[~v81];
                    do
                    {
                      char v90 = *--v77;
                      (v89--)[(void)v86] = v90;
                    }
                    while (v77 != (unsigned char *)v81);
                    uint64_t v77 = (unsigned char *)*a1;
                    long long v87 = v86;
                  }
                  *a1 = (unint64_t)v87;
                  a1[1] = (unint64_t)v80;
                  a1[2] = (unint64_t)&v86[v85];
                  if (v77) {
                    operator delete(v77);
                  }
                }
                else
                {
                  *uint64_t v77 = v78;
                  int v80 = v77 + 1;
                }
                a1[1] = (unint64_t)v80;
                __int16 v91 = *(_WORD *)&v9[2 * v76 + 2 + 2 * v35];
                unint64_t v92 = a1[2];
                if ((unint64_t)v80 < v92)
                {
                  *int v80 = v91;
                  long long v93 = v80 + 1;
                  uint64_t v14 = a4;
                  goto LABEL_174;
                }
                unint64_t v94 = *a1;
                uint64_t v95 = &v80[-*a1];
                unint64_t v96 = (unint64_t)(v95 + 1);
                if ((uint64_t)(v95 + 1) < 0) {
                  goto LABEL_772;
                }
                unint64_t v97 = v92 - v94;
                if (2 * v97 > v96) {
                  unint64_t v96 = 2 * v97;
                }
                if (v97 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v98 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v98 = v96;
                }
                if (v98) {
                  unint64_t v99 = (unint64_t)operator new(v98);
                }
                else {
                  unint64_t v99 = 0;
                }
                long long v100 = &v95[v99];
                uint64_t v101 = (char *)(v99 + v98);
                long long v102 = &v95[v99];
                *long long v102 = v91;
                long long v93 = v102 + 1;
                if (v80 == (unsigned char *)v94)
                {
                  *a1 = (unint64_t)v100;
                  a1[1] = (unint64_t)v93;
                  a1[2] = (unint64_t)v101;
                  uint64_t v14 = a4;
                }
                else
                {
                  long long v103 = &v80[~v94];
                  uint64_t v14 = a4;
                  do
                  {
                    char v104 = *--v80;
                    (v103--)[v99] = v104;
                  }
                  while (v80 != (unsigned char *)v94);
                  int v80 = (unsigned char *)*a1;
                  *a1 = v99;
                  a1[1] = (unint64_t)v93;
                  a1[2] = (unint64_t)v101;
                  if (!v80)
                  {
LABEL_174:
                    a1[1] = (unint64_t)v93;
                    __int16 v105 = *(_WORD *)&v9[2 * v76 + 4 + 2 * v35];
                    unint64_t v106 = a1[2];
                    if ((unint64_t)v93 < v106)
                    {
                      *long long v93 = v105;
                      uint64_t v77 = v93 + 1;
                      goto LABEL_192;
                    }
                    unint64_t v107 = *a1;
                    long long v108 = &v93[-*a1];
                    unint64_t v109 = (unint64_t)(v108 + 1);
                    if ((uint64_t)(v108 + 1) < 0) {
                      goto LABEL_772;
                    }
                    unint64_t v110 = v106 - v107;
                    if (2 * v110 > v109) {
                      unint64_t v109 = 2 * v110;
                    }
                    if (v110 >= 0x3FFFFFFFFFFFFFFFLL) {
                      size_t v111 = 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      size_t v111 = v109;
                    }
                    if (v111) {
                      unint64_t v112 = (unint64_t)operator new(v111);
                    }
                    else {
                      unint64_t v112 = 0;
                    }
                    uint64_t v113 = (char *)(v112 + v111);
                    v108[v112] = v105;
                    uint64_t v77 = &v108[v112 + 1];
                    if (v93 == (unsigned char *)v107)
                    {
                      *a1 = (unint64_t)&v108[v112];
                      a1[1] = (unint64_t)v77;
                      a1[2] = (unint64_t)v113;
                    }
                    else
                    {
                      long long v114 = &v93[~v107];
                      do
                      {
                        char v115 = *--v93;
                        (v114--)[v112] = v115;
                      }
                      while (v93 != (unsigned char *)v107);
                      long long v93 = (unsigned char *)*a1;
                      *a1 = v112;
                      a1[1] = (unint64_t)v77;
                      a1[2] = (unint64_t)v113;
                      if (!v93)
                      {
LABEL_192:
                        a1[1] = (unint64_t)v77;
                        ++v76;
                        uint64_t v36 = v499[v14];
                        if (v76 >= v36 - 2) {
                          goto LABEL_193;
                        }
                        continue;
                      }
                    }
                    operator delete(v93);
                    goto LABEL_192;
                  }
                }
                break;
              }
              operator delete(v80);
              goto LABEL_174;
            }
LABEL_193:
            if (v36 < 3) {
              break;
            }
            uint64_t v116 = 0;
            unint64_t v117 = (unsigned char *)a1[1];
LABEL_195:
            int v118 = *(_DWORD *)&v9[4 * v35];
            unint64_t v119 = a1[2];
            if ((unint64_t)v117 >= v119)
            {
              unint64_t v121 = *a1;
              uint64_t v122 = &v117[-*a1];
              unint64_t v123 = (unint64_t)(v122 + 1);
              if ((uint64_t)(v122 + 1) < 0) {
                goto LABEL_772;
              }
              unint64_t v124 = v119 - v121;
              if (2 * v124 > v123) {
                unint64_t v123 = 2 * v124;
              }
              if (v124 >= 0x3FFFFFFFFFFFFFFFLL) {
                size_t v125 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                size_t v125 = v123;
              }
              if (v125) {
                uint64_t v126 = (char *)operator new(v125);
              }
              else {
                uint64_t v126 = 0;
              }
              long long v127 = &v122[(void)v126];
              unint64_t v128 = &v122[(void)v126];
              *unint64_t v128 = v118;
              float64x2_t v120 = v128 + 1;
              if (v117 != (unsigned char *)v121)
              {
                unint64_t v129 = &v117[~v121];
                do
                {
                  char v130 = *--v117;
                  (v129--)[(void)v126] = v130;
                }
                while (v117 != (unsigned char *)v121);
                unint64_t v117 = (unsigned char *)*a1;
                long long v127 = v126;
              }
              *a1 = (unint64_t)v127;
              a1[1] = (unint64_t)v120;
              a1[2] = (unint64_t)&v126[v125];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *unint64_t v117 = v118;
              float64x2_t v120 = v117 + 1;
            }
            a1[1] = (unint64_t)v120;
            int v131 = *(_DWORD *)&v9[4 * v116 + 4 + 4 * v35];
            unint64_t v132 = a1[2];
            if ((unint64_t)v120 < v132)
            {
              *float64x2_t v120 = v131;
              unint64_t v133 = v120 + 1;
              uint64_t v14 = a4;
              goto LABEL_230;
            }
            unint64_t v134 = *a1;
            uint64_t v135 = &v120[-*a1];
            unint64_t v136 = (unint64_t)(v135 + 1);
            if ((uint64_t)(v135 + 1) < 0) {
              goto LABEL_772;
            }
            unint64_t v137 = v132 - v134;
            if (2 * v137 > v136) {
              unint64_t v136 = 2 * v137;
            }
            if (v137 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v138 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v138 = v136;
            }
            if (v138) {
              unint64_t v139 = (unint64_t)operator new(v138);
            }
            else {
              unint64_t v139 = 0;
            }
            uint64_t v140 = &v135[v139];
            float64x2_t v141 = (char *)(v139 + v138);
            unint64_t v142 = &v135[v139];
            *unint64_t v142 = v131;
            unint64_t v133 = v142 + 1;
            if (v120 == (unsigned char *)v134)
            {
              *a1 = (unint64_t)v140;
              a1[1] = (unint64_t)v133;
              a1[2] = (unint64_t)v141;
              uint64_t v14 = a4;
            }
            else
            {
              long long v143 = &v120[~v134];
              uint64_t v14 = a4;
              do
              {
                char v144 = *--v120;
                (v143--)[v139] = v144;
              }
              while (v120 != (unsigned char *)v134);
              float64x2_t v120 = (unsigned char *)*a1;
              *a1 = v139;
              a1[1] = (unint64_t)v133;
              a1[2] = (unint64_t)v141;
              if (!v120)
              {
LABEL_230:
                a1[1] = (unint64_t)v133;
                int v145 = *(_DWORD *)&v9[4 * v116 + 8 + 4 * v35];
                unint64_t v146 = a1[2];
                if ((unint64_t)v133 < v146)
                {
                  unsigned char *v133 = v145;
                  unint64_t v117 = v133 + 1;
                  goto LABEL_248;
                }
                unint64_t v147 = *a1;
                int32x2_t v148 = &v133[-*a1];
                unint64_t v149 = (unint64_t)(v148 + 1);
                if ((uint64_t)(v148 + 1) < 0) {
                  goto LABEL_772;
                }
                unint64_t v150 = v146 - v147;
                if (2 * v150 > v149) {
                  unint64_t v149 = 2 * v150;
                }
                if (v150 >= 0x3FFFFFFFFFFFFFFFLL) {
                  size_t v151 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  size_t v151 = v149;
                }
                if (v151) {
                  unint64_t v152 = (unint64_t)operator new(v151);
                }
                else {
                  unint64_t v152 = 0;
                }
                unint64_t v153 = (char *)(v152 + v151);
                v148[v152] = v145;
                unint64_t v117 = &v148[v152 + 1];
                if (v133 == (unsigned char *)v147)
                {
                  *a1 = (unint64_t)&v148[v152];
                  a1[1] = (unint64_t)v117;
                  a1[2] = (unint64_t)v153;
                }
                else
                {
                  uint64_t v154 = &v133[~v147];
                  do
                  {
                    char v155 = *--v133;
                    (v154--)[v152] = v155;
                  }
                  while (v133 != (unsigned char *)v147);
                  unint64_t v133 = (unsigned char *)*a1;
                  *a1 = v152;
                  a1[1] = (unint64_t)v117;
                  a1[2] = (unint64_t)v153;
                  if (!v133)
                  {
LABEL_248:
                    a1[1] = (unint64_t)v117;
                    if (++v116 >= v499[v14] - 2) {
                      break;
                    }
                    goto LABEL_195;
                  }
                }
                operator delete(v133);
                goto LABEL_248;
              }
            }
            operator delete(v120);
            goto LABEL_230;
        }
LABEL_729:
        v35 += v499[v14];
        uint64_t v34 = (char *)(v499 + 1);
      }
      while (v499 + 1 != a5);
    }
  }
}

void sub_20B1A2DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B1A2DD4(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a3;
  unint64_t v9 = (int *)a2;
  unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFF8;
  if ((a6 & 0xFFFFFFFFFFFFFFF8) == 0x10 && a7 == a8)
  {
    sub_20B0AABB4((uint64_t)a1, a3);
    unint64_t v20 = (char *)*a1;
    memcpy(v20, v9, 2 * v8);
    return;
  }
  uint64_t v13 = a6;
  if (!a6)
  {
    NSLog(&cfstr_CouldnTCopyInd_0.isa);
    return;
  }
  uint64_t v14 = a4;
  if (__ROR8__(a6, 3) != 4 || !a3)
  {
LABEL_11:
    if (a7 == a8)
    {
      sub_20B0AABB4((uint64_t)a1, a3);
      if (v13 == 32)
      {
        if (v8)
        {
          unint64_t v24 = (char *)*a1;
          do
          {
            int v25 = *v9++;
            *(_WORD *)unint64_t v24 = v25;
            v24 += 2;
            --v8;
          }
          while (v8);
        }
      }
      else if (v13 == 16)
      {
        if (v8)
        {
          uint64_t v26 = (char *)*a1;
          do
          {
            __int16 v27 = *(_WORD *)v9;
            unint64_t v9 = (int *)((char *)v9 + 2);
            *(_WORD *)uint64_t v26 = v27;
            v26 += 2;
            --v8;
          }
          while (v8);
        }
      }
      else if (v13 == 8 && v8)
      {
        unsigned int v18 = (char *)*a1;
        do
        {
          __int16 v19 = *(unsigned __int8 *)v9;
          unint64_t v9 = (int *)((char *)v9 + 1);
          *(_WORD *)unsigned int v18 = v19;
          v18 += 2;
          --v8;
        }
        while (v8);
      }
      return;
    }
    if (a7 == 3 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          unint64_t v21 = sub_20B1A0C90(a2, a3);
          uint64_t v22 = sub_20B1A6B4C((uint64_t)v9, v8, 2 * v21);
          break;
        case 16:
          unint64_t v21 = sub_20B1A0C10(a2, a3);
          uint64_t v22 = sub_20B1A6A14((uint64_t)v9, v8, 2 * v21);
          break;
        case 8:
          unint64_t v21 = sub_20B1A0B90(a2, a3);
          uint64_t v22 = sub_20B1A68D8((uint64_t)v9, v8, 2 * v21);
          break;
        default:
          goto LABEL_700;
      }
      if (v22)
      {
        id v454 = (id)v22;
        sub_20B0AABB4((uint64_t)a1, v21);
        v425 = (char *)*a1;
        id v455 = v454;
        unint64_t v428 = (const void *)objc_msgSend_bytes(v455, v426, v427);
        size_t v429 = 2 * v21;
        goto LABEL_708;
      }
LABEL_700:
      NSLog(&cfstr_CouldnTCreateB.isa);
      return;
    }
    if (a7 == 4 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          unsigned int v23 = sub_20B1A6E40(a2, a3);
          break;
        case 16:
          unsigned int v23 = sub_20B1A6D64(a2, a3);
          break;
        case 8:
          unsigned int v23 = sub_20B1A6C84(a2, a3);
          break;
        default:
          unsigned int v23 = 0;
          goto LABEL_710;
      }
      id v456 = v23;
      if (!v23)
      {
LABEL_710:

        return;
      }
      unint64_t v430 = 3 * (v8 >> 1);
      sub_20B0AABB4((uint64_t)a1, v430);
      if (v11 != 16)
      {
        if (v13 == 32)
        {
          id v455 = v456;
          unint64_t v441 = (int *)objc_msgSend_bytes(v455, v439, v440);
          if (v8 >= 2)
          {
            int v442 = (char *)*a1;
            if (v430 <= 1) {
              uint64_t v443 = 1;
            }
            else {
              uint64_t v443 = 3 * (v8 >> 1);
            }
            do
            {
              int v444 = *v441++;
              *(_WORD *)int v442 = v444;
              v442 += 2;
              --v443;
            }
            while (v443);
          }
        }
        else if (v13 == 16)
        {
          id v455 = v456;
          uint64_t v447 = (__int16 *)objc_msgSend_bytes(v455, v445, v446);
          if (v8 >= 2)
          {
            unint64_t v448 = (char *)*a1;
            if (v430 <= 1) {
              uint64_t v449 = 1;
            }
            else {
              uint64_t v449 = 3 * (v8 >> 1);
            }
            do
            {
              __int16 v450 = *v447++;
              *(_WORD *)unint64_t v448 = v450;
              v448 += 2;
              --v449;
            }
            while (v449);
          }
        }
        else
        {
          id v455 = v456;
          v435 = (unsigned __int8 *)objc_msgSend_bytes(v455, v433, v434);
          if (v8 >= 2)
          {
            uint64_t v436 = (char *)*a1;
            if (v430 <= 1) {
              uint64_t v437 = 1;
            }
            else {
              uint64_t v437 = 3 * (v8 >> 1);
            }
            do
            {
              __int16 v438 = *v435++;
              *(_WORD *)uint64_t v436 = v438;
              v436 += 2;
              --v437;
            }
            while (v437);
          }
        }
        goto LABEL_709;
      }
      v425 = (char *)*a1;
      id v455 = v456;
      unint64_t v428 = (const void *)objc_msgSend_bytes(v455, v431, v432);
      size_t v429 = 6 * (v8 >> 1);
LABEL_708:
      memcpy(v425, v428, v429);
LABEL_709:
      unsigned int v23 = v455;
      goto LABEL_710;
    }
    if (a7 != 5 || a8 != 2)
    {
      NSLog(&cfstr_CouldnTCopyInd_1.isa);
      return;
    }
    if (!a5) {
      return;
    }
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v30 = (char **)(a1 + 2);
    while (1)
    {
      LODWORD(v31) = *(unsigned __int8 *)(v14 + v28);
      switch(v31)
      {
        case 3:
          switch(v13)
          {
            case 8:
              __int16 v144 = *((unsigned __int8 *)v9 + v29);
              unint64_t v146 = (char *)a1[1];
              int v145 = (char *)a1[2];
              if (v146 >= v145)
              {
                unint64_t v161 = (char *)*a1;
                uint64_t v162 = (uint64_t)&v146[-*a1];
                if (v162 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v163 = v162 >> 1;
                unint64_t v164 = v145 - v161;
                if (v164 <= (v162 >> 1) + 1) {
                  unint64_t v165 = v163 + 1;
                }
                else {
                  unint64_t v165 = v164;
                }
                if (v164 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v166 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v166 = v165;
                }
                if (v166)
                {
                  int32x4_t v167 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v166);
                  unint64_t v161 = (char *)*a1;
                  unint64_t v146 = (char *)a1[1];
                }
                else
                {
                  int32x4_t v167 = 0;
                }
                unint64_t v186 = &v167[2 * v163];
                *(_WORD *)unint64_t v186 = v144;
                unint64_t v147 = v186 + 2;
                while (v146 != v161)
                {
                  __int16 v187 = *((_WORD *)v146 - 1);
                  v146 -= 2;
                  *((_WORD *)v186 - 1) = v187;
                  v186 -= 2;
                }
                int v145 = &v167[2 * v166];
                *a1 = v186;
                a1[1] = v147;
                a1[2] = v145;
                if (v161)
                {
                  operator delete(v161);
                  int v145 = *v30;
                }
              }
              else
              {
                *(_WORD *)unint64_t v146 = v144;
                unint64_t v147 = v146 + 2;
              }
              a1[1] = v147;
              __int16 v188 = *((unsigned __int8 *)v9 + v29 + 1);
              if (v147 >= v145)
              {
                float32x4_t v190 = (char *)*a1;
                uint64_t v191 = (uint64_t)&v147[-*a1];
                if (v191 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v192 = v191 >> 1;
                unint64_t v193 = v145 - v190;
                if (v193 <= (v191 >> 1) + 1) {
                  unint64_t v194 = v192 + 1;
                }
                else {
                  unint64_t v194 = v193;
                }
                if (v193 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v195 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v195 = v194;
                }
                if (v195)
                {
                  unint64_t v196 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v195);
                  float32x4_t v190 = (char *)*a1;
                  unint64_t v147 = (char *)a1[1];
                }
                else
                {
                  unint64_t v196 = 0;
                }
                unint64_t v218 = &v196[2 * v192];
                *(_WORD *)unint64_t v218 = v188;
                unint64_t v189 = v218 + 2;
                while (v147 != v190)
                {
                  __int16 v219 = *((_WORD *)v147 - 1);
                  v147 -= 2;
                  *((_WORD *)v218 - 1) = v219;
                  v218 -= 2;
                }
                int v145 = &v196[2 * v195];
                *a1 = v218;
                a1[1] = v189;
                a1[2] = v145;
                if (v190)
                {
                  operator delete(v190);
                  int v145 = *v30;
                }
              }
              else
              {
                *(_WORD *)unint64_t v147 = v188;
                unint64_t v189 = v147 + 2;
              }
              a1[1] = v189;
              __int16 v220 = *((unsigned __int8 *)v9 + v29 + 2);
              if (v189 >= v145)
              {
                uint64_t v221 = (char *)*a1;
                uint64_t v222 = (uint64_t)&v189[-*a1];
                if (v222 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v223 = v222 >> 1;
                unint64_t v224 = v145 - v221;
                if (v224 <= (v222 >> 1) + 1) {
                  unint64_t v225 = v223 + 1;
                }
                else {
                  unint64_t v225 = v224;
                }
                if (v224 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v226 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v226 = v225;
                }
                if (v226)
                {
                  int v227 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v226);
                  uint64_t v221 = (char *)*a1;
                  unint64_t v189 = (char *)a1[1];
                }
                else
                {
                  int v227 = 0;
                }
                int v304 = &v227[2 * v223];
                *(_WORD *)int v304 = v220;
                int32x2_t v148 = v304 + 2;
                while (v189 != v221)
                {
                  __int16 v305 = *((_WORD *)v189 - 1);
                  v189 -= 2;
                  *((_WORD *)v304 - 1) = v305;
                  v304 -= 2;
                }
                *a1 = v304;
                a1[1] = v148;
                a1[2] = &v227[2 * v226];
                if (v221) {
                  operator delete(v221);
                }
              }
              else
              {
                *(_WORD *)unint64_t v189 = v220;
                int32x2_t v148 = v189 + 2;
              }
              a1[1] = v148;
              goto LABEL_481;
            case 16:
              int32x2_t v148 = (char *)a1[1];
LABEL_481:
              uint64_t v306 = *v30;
              if (v148 >= *v30)
              {
                int v308 = (char *)*a1;
                uint64_t v309 = (uint64_t)&v148[-*a1];
                if (v309 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v310 = v309 >> 1;
                unint64_t v311 = v306 - v308;
                if (v311 <= (v309 >> 1) + 1) {
                  unint64_t v312 = v310 + 1;
                }
                else {
                  unint64_t v312 = v311;
                }
                if (v311 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v313 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v313 = v312;
                }
                if (v313)
                {
                  unint64_t v314 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v313);
                  int v308 = (char *)*a1;
                  int32x2_t v148 = (char *)a1[1];
                }
                else
                {
                  unint64_t v314 = 0;
                }
                size_t v315 = &v314[2 * v310];
                *(_WORD *)size_t v315 = *((_WORD *)v9 + v29);
                char v307 = v315 + 2;
                while (v148 != v308)
                {
                  __int16 v316 = *((_WORD *)v148 - 1);
                  v148 -= 2;
                  *((_WORD *)v315 - 1) = v316;
                  v315 -= 2;
                }
                uint64_t v306 = &v314[2 * v313];
                *a1 = v315;
                a1[1] = v307;
                a1[2] = v306;
                if (v308)
                {
                  operator delete(v308);
                  uint64_t v306 = *v30;
                }
              }
              else
              {
                *(_WORD *)int32x2_t v148 = *((_WORD *)v9 + v29);
                char v307 = v148 + 2;
              }
              a1[1] = v307;
              uint64_t v317 = v29 + 1;
              if (v307 >= v306)
              {
                char v319 = (char *)*a1;
                uint64_t v320 = (uint64_t)&v307[-*a1];
                if (v320 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v321 = v320 >> 1;
                unint64_t v322 = v306 - v319;
                if (v322 <= (v320 >> 1) + 1) {
                  unint64_t v323 = v321 + 1;
                }
                else {
                  unint64_t v323 = v322;
                }
                if (v322 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v324 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v324 = v323;
                }
                if (v324)
                {
                  unint64_t v325 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v324);
                  char v319 = (char *)*a1;
                  char v307 = (char *)a1[1];
                }
                else
                {
                  unint64_t v325 = 0;
                }
                size_t v326 = &v325[2 * v321];
                *(_WORD *)size_t v326 = *((_WORD *)v9 + v317);
                v318 = v326 + 2;
                while (v307 != v319)
                {
                  __int16 v327 = *((_WORD *)v307 - 1);
                  v307 -= 2;
                  *((_WORD *)v326 - 1) = v327;
                  v326 -= 2;
                }
                uint64_t v306 = &v325[2 * v324];
                *a1 = v326;
                a1[1] = v318;
                a1[2] = v306;
                if (v319)
                {
                  operator delete(v319);
                  uint64_t v306 = *v30;
                }
              }
              else
              {
                *(_WORD *)char v307 = *((_WORD *)v9 + v317);
                v318 = v307 + 2;
              }
              a1[1] = v318;
              uint64_t v328 = v29 + 2;
              if (v318 >= v306)
              {
                v329 = (char *)*a1;
                uint64_t v330 = (uint64_t)&v318[-*a1];
                if (v330 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v331 = v330 >> 1;
                unint64_t v332 = v306 - v329;
                if (v332 <= (v330 >> 1) + 1) {
                  unint64_t v333 = v331 + 1;
                }
                else {
                  unint64_t v333 = v332;
                }
                if (v332 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v334 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v334 = v333;
                }
                if (v334)
                {
                  unint64_t v335 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v334);
                  v329 = (char *)*a1;
                  v318 = (char *)a1[1];
                }
                else
                {
                  unint64_t v335 = 0;
                }
                v336 = &v335[2 * v331];
                *(_WORD *)v336 = *((_WORD *)v9 + v328);
                char v33 = v336 + 2;
                while (v318 != v329)
                {
                  __int16 v337 = *((_WORD *)v318 - 1);
                  v318 -= 2;
                  *((_WORD *)v336 - 1) = v337;
                  v336 -= 2;
                }
                *a1 = v336;
                a1[1] = v33;
                a1[2] = &v335[2 * v334];
                if (v329) {
                  operator delete(v329);
                }
              }
              else
              {
                *(_WORD *)v318 = *((_WORD *)v9 + v328);
                char v33 = v318 + 2;
              }
              uint64_t v14 = a4;
              a1[1] = v33;
              goto LABEL_533;
            case 32:
              char v33 = (char *)a1[1];
LABEL_533:
              int v338 = v9[v29];
              unint64_t v339 = *v30;
              if (v33 >= *v30)
              {
                size_t v341 = (char *)*a1;
                uint64_t v342 = (uint64_t)&v33[-*a1];
                if (v342 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v343 = v342 >> 1;
                unint64_t v344 = v339 - v341;
                if (v344 <= (v342 >> 1) + 1) {
                  unint64_t v345 = v343 + 1;
                }
                else {
                  unint64_t v345 = v344;
                }
                if (v344 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v346 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v346 = v345;
                }
                if (v346)
                {
                  unint64_t v347 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v346);
                  size_t v341 = (char *)*a1;
                  char v33 = (char *)a1[1];
                }
                else
                {
                  unint64_t v347 = 0;
                }
                uint64_t v348 = &v347[2 * v343];
                *(_WORD *)uint64_t v348 = v338;
                unint64_t v340 = v348 + 2;
                while (v33 != v341)
                {
                  __int16 v349 = *((_WORD *)v33 - 1);
                  v33 -= 2;
                  *((_WORD *)v348 - 1) = v349;
                  v348 -= 2;
                }
                unint64_t v339 = &v347[2 * v346];
                *a1 = v348;
                a1[1] = v340;
                a1[2] = v339;
                if (v341)
                {
                  operator delete(v341);
                  unint64_t v339 = *v30;
                }
              }
              else
              {
                *(_WORD *)char v33 = v338;
                unint64_t v340 = v33 + 2;
              }
              a1[1] = v340;
              int v350 = v9[v29 + 1];
              if (v340 >= v339)
              {
                unint64_t v351 = (char *)*a1;
                uint64_t v352 = (uint64_t)&v340[-*a1];
                if (v352 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v353 = v352 >> 1;
                unint64_t v354 = v339 - v351;
                if (v354 <= (v352 >> 1) + 1) {
                  unint64_t v355 = v353 + 1;
                }
                else {
                  unint64_t v355 = v354;
                }
                if (v354 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v356 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v356 = v355;
                }
                if (v356)
                {
                  char v357 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v356);
                  unint64_t v351 = (char *)*a1;
                  unint64_t v340 = (char *)a1[1];
                }
                else
                {
                  char v357 = 0;
                }
                __int16 v358 = &v357[2 * v353];
                *(_WORD *)__int16 v358 = v350;
                v283 = v358 + 2;
                while (v340 != v351)
                {
                  __int16 v359 = *((_WORD *)v340 - 1);
                  v340 -= 2;
                  *((_WORD *)v358 - 1) = v359;
                  v358 -= 2;
                }
                unint64_t v339 = &v357[2 * v356];
                *a1 = v358;
                a1[1] = v283;
                a1[2] = v339;
                if (v351)
                {
                  operator delete(v351);
                  unint64_t v339 = *v30;
                }
              }
              else
              {
                *(_WORD *)unint64_t v340 = v350;
                v283 = v340 + 2;
              }
              a1[1] = v283;
              int v293 = v9[v29 + 2];
              if (v283 < v339) {
                goto LABEL_677;
              }
              uint64_t v294 = (char *)*a1;
              uint64_t v360 = (uint64_t)&v283[-*a1];
              if (v360 <= -3) {
                goto LABEL_734;
              }
              uint64_t v361 = v360 >> 1;
              unint64_t v362 = v339 - v294;
              if (v362 <= (v360 >> 1) + 1) {
                unint64_t v363 = v361 + 1;
              }
              else {
                unint64_t v363 = v362;
              }
              if (v362 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v299 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v299 = v363;
              }
              if (v299)
              {
                unsigned __int32 v300 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v299);
                uint64_t v294 = (char *)*a1;
                v283 = (char *)a1[1];
              }
              else
              {
                unsigned __int32 v300 = 0;
              }
              unint64_t v301 = &v300[2 * v361];
              *(_WORD *)unint64_t v301 = v293;
              unint64_t v302 = v301 + 2;
              while (v283 != v294)
              {
                __int16 v364 = *((_WORD *)v283 - 1);
                v283 -= 2;
                *((_WORD *)v301 - 1) = v364;
                v301 -= 2;
              }
              goto LABEL_691;
          }
          break;
        case 2:
          switch(v13)
          {
            case 8:
              __int16 v149 = *((unsigned __int8 *)v9 + v29);
              size_t v151 = (char *)a1[1];
              unint64_t v150 = (char *)a1[2];
              if (v151 >= v150)
              {
                unint64_t v168 = (char *)*a1;
                uint64_t v169 = (uint64_t)&v151[-*a1];
                if (v169 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v170 = v169 >> 1;
                unint64_t v171 = v150 - v168;
                if (v171 <= (v169 >> 1) + 1) {
                  unint64_t v172 = v170 + 1;
                }
                else {
                  unint64_t v172 = v171;
                }
                if (v171 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v173 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v173 = v172;
                }
                if (v173)
                {
                  unint64_t v174 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v173);
                  unint64_t v168 = (char *)*a1;
                  size_t v151 = (char *)a1[1];
                }
                else
                {
                  unint64_t v174 = 0;
                }
                uint64_t v197 = &v174[2 * v170];
                *(_WORD *)uint64_t v197 = v149;
                unint64_t v152 = v197 + 2;
                while (v151 != v168)
                {
                  __int16 v198 = *((_WORD *)v151 - 1);
                  v151 -= 2;
                  *((_WORD *)v197 - 1) = v198;
                  v197 -= 2;
                }
                unint64_t v150 = &v174[2 * v173];
                *a1 = v197;
                a1[1] = v152;
                a1[2] = v150;
                if (v168)
                {
                  operator delete(v168);
                  unint64_t v150 = *v30;
                }
              }
              else
              {
                *(_WORD *)size_t v151 = v149;
                unint64_t v152 = v151 + 2;
              }
              a1[1] = v152;
              __int16 v199 = *((unsigned __int8 *)v9 + v29 + 1);
              if (v152 >= v150)
              {
                unint64_t v201 = (char *)*a1;
                uint64_t v202 = (uint64_t)&v152[-*a1];
                if (v202 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v203 = v202 >> 1;
                unint64_t v204 = v150 - v201;
                if (v204 <= (v202 >> 1) + 1) {
                  unint64_t v205 = v203 + 1;
                }
                else {
                  unint64_t v205 = v204;
                }
                if (v204 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v206 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v206 = v205;
                }
                if (v206)
                {
                  size_t v207 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v206);
                  unint64_t v201 = (char *)*a1;
                  unint64_t v152 = (char *)a1[1];
                }
                else
                {
                  size_t v207 = 0;
                }
                uint64_t v228 = &v207[2 * v203];
                *(_WORD *)uint64_t v228 = v199;
                uint64_t v200 = v228 + 2;
                while (v152 != v201)
                {
                  __int16 v229 = *((_WORD *)v152 - 1);
                  v152 -= 2;
                  *((_WORD *)v228 - 1) = v229;
                  v228 -= 2;
                }
                unint64_t v150 = &v207[2 * v206];
                *a1 = v228;
                a1[1] = v200;
                a1[2] = v150;
                if (v201)
                {
                  operator delete(v201);
                  unint64_t v150 = *v30;
                }
              }
              else
              {
                *(_WORD *)unint64_t v152 = v199;
                uint64_t v200 = v152 + 2;
              }
              a1[1] = v200;
              __int16 v230 = *((unsigned __int8 *)v9 + v29 + 1);
              if (v200 >= v150)
              {
                unint64_t v231 = (char *)*a1;
                uint64_t v232 = (uint64_t)&v200[-*a1];
                if (v232 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v233 = v232 >> 1;
                unint64_t v234 = v150 - v231;
                if (v234 <= (v232 >> 1) + 1) {
                  unint64_t v235 = v233 + 1;
                }
                else {
                  unint64_t v235 = v234;
                }
                if (v234 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v236 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v236 = v235;
                }
                if (v236)
                {
                  uint64_t v237 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v236);
                  unint64_t v231 = (char *)*a1;
                  uint64_t v200 = (char *)a1[1];
                }
                else
                {
                  uint64_t v237 = 0;
                }
                unint64_t v365 = &v237[2 * v233];
                *(_WORD *)unint64_t v365 = v230;
                unint64_t v153 = v365 + 2;
                while (v200 != v231)
                {
                  __int16 v366 = *((_WORD *)v200 - 1);
                  v200 -= 2;
                  *((_WORD *)v365 - 1) = v366;
                  v365 -= 2;
                }
                *a1 = v365;
                a1[1] = v153;
                a1[2] = &v237[2 * v236];
                if (v231) {
                  operator delete(v231);
                }
              }
              else
              {
                *(_WORD *)uint64_t v200 = v230;
                unint64_t v153 = v200 + 2;
              }
              a1[1] = v153;
              goto LABEL_588;
            case 16:
              unint64_t v153 = (char *)a1[1];
LABEL_588:
              v367 = *v30;
              if (v153 >= *v30)
              {
                int v369 = (char *)*a1;
                uint64_t v370 = (uint64_t)&v153[-*a1];
                if (v370 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v371 = v370 >> 1;
                unint64_t v372 = v367 - v369;
                if (v372 <= (v370 >> 1) + 1) {
                  unint64_t v373 = v371 + 1;
                }
                else {
                  unint64_t v373 = v372;
                }
                if (v372 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v374 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v374 = v373;
                }
                if (v374)
                {
                  unint64_t v375 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v374);
                  int v369 = (char *)*a1;
                  unint64_t v153 = (char *)a1[1];
                }
                else
                {
                  unint64_t v375 = 0;
                }
                size_t v376 = &v375[2 * v371];
                *(_WORD *)size_t v376 = *((_WORD *)v9 + v29);
                char v368 = v376 + 2;
                while (v153 != v369)
                {
                  __int16 v377 = *((_WORD *)v153 - 1);
                  v153 -= 2;
                  *((_WORD *)v376 - 1) = v377;
                  v376 -= 2;
                }
                v367 = &v375[2 * v374];
                *a1 = v376;
                a1[1] = v368;
                a1[2] = v367;
                if (v369)
                {
                  operator delete(v369);
                  v367 = *v30;
                }
              }
              else
              {
                *(_WORD *)unint64_t v153 = *((_WORD *)v9 + v29);
                char v368 = v153 + 2;
              }
              a1[1] = v368;
              uint64_t v378 = v29 + 1;
              if (v368 >= v367)
              {
                char v380 = (char *)*a1;
                uint64_t v381 = (uint64_t)&v368[-*a1];
                if (v381 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v382 = v381 >> 1;
                unint64_t v383 = v367 - v380;
                if (v383 <= (v381 >> 1) + 1) {
                  unint64_t v384 = v382 + 1;
                }
                else {
                  unint64_t v384 = v383;
                }
                if (v383 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v385 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v385 = v384;
                }
                if (v385)
                {
                  unint64_t v386 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v385);
                  char v380 = (char *)*a1;
                  char v368 = (char *)a1[1];
                }
                else
                {
                  unint64_t v386 = 0;
                }
                size_t v387 = &v386[2 * v382];
                *(_WORD *)size_t v387 = *((_WORD *)v9 + v378);
                unint64_t v379 = v387 + 2;
                while (v368 != v380)
                {
                  __int16 v388 = *((_WORD *)v368 - 1);
                  v368 -= 2;
                  *((_WORD *)v387 - 1) = v388;
                  v387 -= 2;
                }
                v367 = &v386[2 * v385];
                *a1 = v387;
                a1[1] = v379;
                a1[2] = v367;
                if (v380)
                {
                  operator delete(v380);
                  v367 = *v30;
                }
              }
              else
              {
                *(_WORD *)char v368 = *((_WORD *)v9 + v378);
                unint64_t v379 = v368 + 2;
              }
              a1[1] = v379;
              if (v379 >= v367)
              {
                v389 = (char *)*a1;
                uint64_t v390 = (uint64_t)&v379[-*a1];
                if (v390 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v391 = v390 >> 1;
                unint64_t v392 = v367 - v389;
                if (v392 <= (v390 >> 1) + 1) {
                  unint64_t v393 = v391 + 1;
                }
                else {
                  unint64_t v393 = v392;
                }
                if (v392 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v394 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v394 = v393;
                }
                if (v394)
                {
                  unint64_t v395 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v394);
                  v389 = (char *)*a1;
                  unint64_t v379 = (char *)a1[1];
                }
                else
                {
                  unint64_t v395 = 0;
                }
                unint64_t v396 = &v395[2 * v391];
                *(_WORD *)unint64_t v396 = *((_WORD *)v9 + v378);
                uint64_t v34 = v396 + 2;
                while (v379 != v389)
                {
                  __int16 v397 = *((_WORD *)v379 - 1);
                  v379 -= 2;
                  *((_WORD *)v396 - 1) = v397;
                  v396 -= 2;
                }
                *a1 = v396;
                a1[1] = v34;
                a1[2] = &v395[2 * v394];
                if (v389) {
                  operator delete(v389);
                }
              }
              else
              {
                *(_WORD *)unint64_t v379 = *((_WORD *)v9 + v378);
                uint64_t v34 = v379 + 2;
              }
              a1[1] = v34;
LABEL_640:
              int v398 = v9[v29];
              int v399 = *v30;
              if (v34 >= *v30)
              {
                __int16 v401 = (char *)*a1;
                uint64_t v402 = (uint64_t)&v34[-*a1];
                if (v402 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v403 = v402 >> 1;
                unint64_t v404 = v399 - v401;
                if (v404 <= (v402 >> 1) + 1) {
                  unint64_t v405 = v403 + 1;
                }
                else {
                  unint64_t v405 = v404;
                }
                if (v404 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v406 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v406 = v405;
                }
                if (v406)
                {
                  unint64_t v407 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v406);
                  __int16 v401 = (char *)*a1;
                  uint64_t v34 = (char *)a1[1];
                }
                else
                {
                  unint64_t v407 = 0;
                }
                size_t v408 = &v407[2 * v403];
                *(_WORD *)size_t v408 = v398;
                char v400 = v408 + 2;
                while (v34 != v401)
                {
                  __int16 v409 = *((_WORD *)v34 - 1);
                  v34 -= 2;
                  *((_WORD *)v408 - 1) = v409;
                  v408 -= 2;
                }
                int v399 = &v407[2 * v406];
                *a1 = v408;
                a1[1] = v400;
                a1[2] = v399;
                if (v401)
                {
                  operator delete(v401);
                  int v399 = *v30;
                }
              }
              else
              {
                *(_WORD *)uint64_t v34 = v398;
                char v400 = v34 + 2;
              }
              a1[1] = v400;
              int v410 = v9[v29 + 1];
              if (v400 >= v399)
              {
                v411 = (char *)*a1;
                uint64_t v412 = (uint64_t)&v400[-*a1];
                if (v412 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v413 = v412 >> 1;
                unint64_t v414 = v399 - v411;
                if (v414 <= (v412 >> 1) + 1) {
                  unint64_t v415 = v413 + 1;
                }
                else {
                  unint64_t v415 = v414;
                }
                if (v414 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v416 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v416 = v415;
                }
                if (v416)
                {
                  unint64_t v417 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v416);
                  v411 = (char *)*a1;
                  char v400 = (char *)a1[1];
                }
                else
                {
                  unint64_t v417 = 0;
                }
                unint64_t v418 = &v417[2 * v413];
                *(_WORD *)unint64_t v418 = v410;
                v283 = v418 + 2;
                if (v400 == v411)
                {
                  uint64_t v14 = a4;
                }
                else
                {
                  uint64_t v14 = a4;
                  do
                  {
                    __int16 v419 = *((_WORD *)v400 - 1);
                    v400 -= 2;
                    *((_WORD *)v418 - 1) = v419;
                    v418 -= 2;
                  }
                  while (v400 != v411);
                }
                int v399 = &v417[2 * v416];
                *a1 = v418;
                a1[1] = v283;
                a1[2] = v399;
                if (v411)
                {
                  operator delete(v411);
                  int v399 = *v30;
                }
              }
              else
              {
                *(_WORD *)char v400 = v410;
                v283 = v400 + 2;
                uint64_t v14 = a4;
              }
              a1[1] = v283;
              int v293 = v9[v29 + 1];
              if (v283 < v399)
              {
LABEL_677:
                *(_WORD *)v283 = v293;
                unint64_t v302 = v283 + 2;
LABEL_693:
                a1[1] = v302;
                goto LABEL_694;
              }
              uint64_t v294 = (char *)*a1;
              uint64_t v420 = (uint64_t)&v283[-*a1];
              if (v420 <= -3) {
LABEL_734:
              }
                sub_20B05D0BC();
              uint64_t v421 = v420 >> 1;
              unint64_t v422 = v399 - v294;
              if (v422 <= (v420 >> 1) + 1) {
                unint64_t v423 = v421 + 1;
              }
              else {
                unint64_t v423 = v422;
              }
              if (v422 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v299 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v299 = v423;
              }
              if (v299)
              {
                unsigned __int32 v300 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v299);
                uint64_t v294 = (char *)*a1;
                v283 = (char *)a1[1];
              }
              else
              {
                unsigned __int32 v300 = 0;
              }
              unint64_t v301 = &v300[2 * v421];
              *(_WORD *)unint64_t v301 = v293;
              unint64_t v302 = v301 + 2;
              while (v283 != v294)
              {
                __int16 v424 = *((_WORD *)v283 - 1);
                v283 -= 2;
                *((_WORD *)v301 - 1) = v424;
                v301 -= 2;
              }
LABEL_691:
              *a1 = v301;
              a1[1] = v302;
              a1[2] = &v300[2 * v299];
              if (v294) {
                operator delete(v294);
              }
              goto LABEL_693;
            case 32:
              uint64_t v34 = (char *)a1[1];
              goto LABEL_640;
          }
          break;
        case 1:
          switch(v13)
          {
            case 8:
              __int16 v139 = *((unsigned __int8 *)v9 + v29);
              float64x2_t v141 = (char *)a1[1];
              uint64_t v140 = (char *)a1[2];
              if (v141 >= v140)
              {
                uint64_t v154 = (char *)*a1;
                uint64_t v155 = (uint64_t)&v141[-*a1];
                if (v155 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v156 = v155 >> 1;
                unint64_t v157 = v140 - v154;
                if (v157 <= (v155 >> 1) + 1) {
                  unint64_t v158 = v156 + 1;
                }
                else {
                  unint64_t v158 = v157;
                }
                if (v157 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v159 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v159 = v158;
                }
                if (v159)
                {
                  unint64_t v160 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v159);
                  uint64_t v154 = (char *)*a1;
                  float64x2_t v141 = (char *)a1[1];
                }
                else
                {
                  unint64_t v160 = 0;
                }
                uint64_t v175 = &v160[2 * v156];
                *(_WORD *)uint64_t v175 = v139;
                unint64_t v142 = v175 + 2;
                while (v141 != v154)
                {
                  __int16 v176 = *((_WORD *)v141 - 1);
                  v141 -= 2;
                  *((_WORD *)v175 - 1) = v176;
                  v175 -= 2;
                }
                uint64_t v140 = &v160[2 * v159];
                *a1 = v175;
                a1[1] = v142;
                a1[2] = v140;
                if (v154)
                {
                  operator delete(v154);
                  uint64_t v140 = *v30;
                }
              }
              else
              {
                *(_WORD *)float64x2_t v141 = v139;
                unint64_t v142 = v141 + 2;
              }
              a1[1] = v142;
              __int16 v177 = *((unsigned __int8 *)v9 + v29);
              if (v142 >= v140)
              {
                uint64_t v179 = (char *)*a1;
                uint64_t v180 = (uint64_t)&v142[-*a1];
                if (v180 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v181 = v180 >> 1;
                unint64_t v182 = v140 - v179;
                if (v182 <= (v180 >> 1) + 1) {
                  unint64_t v183 = v181 + 1;
                }
                else {
                  unint64_t v183 = v182;
                }
                if (v182 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v184 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v184 = v183;
                }
                if (v184)
                {
                  uint64_t v185 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v184);
                  uint64_t v179 = (char *)*a1;
                  unint64_t v142 = (char *)a1[1];
                }
                else
                {
                  uint64_t v185 = 0;
                }
                unint64_t v208 = &v185[2 * v181];
                *(_WORD *)unint64_t v208 = v177;
                size_t v178 = v208 + 2;
                while (v142 != v179)
                {
                  __int16 v209 = *((_WORD *)v142 - 1);
                  v142 -= 2;
                  *((_WORD *)v208 - 1) = v209;
                  v208 -= 2;
                }
                uint64_t v140 = &v185[2 * v184];
                *a1 = v208;
                a1[1] = v178;
                a1[2] = v140;
                if (v179)
                {
                  operator delete(v179);
                  uint64_t v140 = *v30;
                }
              }
              else
              {
                *(_WORD *)unint64_t v142 = v177;
                size_t v178 = v142 + 2;
              }
              a1[1] = v178;
              __int16 v210 = *((unsigned __int8 *)v9 + v29);
              if (v178 >= v140)
              {
                char v211 = (char *)*a1;
                uint64_t v212 = (uint64_t)&v178[-*a1];
                if (v212 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v213 = v212 >> 1;
                unint64_t v214 = v140 - v211;
                if (v214 <= (v212 >> 1) + 1) {
                  unint64_t v215 = v213 + 1;
                }
                else {
                  unint64_t v215 = v214;
                }
                if (v214 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v216 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v216 = v215;
                }
                if (v216)
                {
                  unint64_t v217 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v216);
                  char v211 = (char *)*a1;
                  size_t v178 = (char *)a1[1];
                }
                else
                {
                  unint64_t v217 = 0;
                }
                unint64_t v238 = &v217[2 * v213];
                *(_WORD *)unint64_t v238 = v210;
                long long v143 = v238 + 2;
                while (v178 != v211)
                {
                  __int16 v239 = *((_WORD *)v178 - 1);
                  v178 -= 2;
                  *((_WORD *)v238 - 1) = v239;
                  v238 -= 2;
                }
                *a1 = v238;
                a1[1] = v143;
                a1[2] = &v217[2 * v216];
                if (v211) {
                  operator delete(v211);
                }
              }
              else
              {
                *(_WORD *)size_t v178 = v210;
                long long v143 = v178 + 2;
              }
              a1[1] = v143;
              goto LABEL_374;
            case 16:
              long long v143 = (char *)a1[1];
LABEL_374:
              uint64_t v240 = *v30;
              if (v143 >= *v30)
              {
                unint64_t v242 = (char *)*a1;
                uint64_t v243 = (uint64_t)&v143[-*a1];
                if (v243 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v244 = v243 >> 1;
                unint64_t v245 = v240 - v242;
                if (v245 <= (v243 >> 1) + 1) {
                  unint64_t v246 = v244 + 1;
                }
                else {
                  unint64_t v246 = v245;
                }
                if (v245 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v247 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v247 = v246;
                }
                if (v247)
                {
                  unint64_t v248 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v247);
                  unint64_t v242 = (char *)*a1;
                  long long v143 = (char *)a1[1];
                }
                else
                {
                  unint64_t v248 = 0;
                }
                unint64_t v249 = &v248[2 * v244];
                *(_WORD *)unint64_t v249 = *((_WORD *)v9 + v29);
                unint64_t v241 = v249 + 2;
                while (v143 != v242)
                {
                  __int16 v250 = *((_WORD *)v143 - 1);
                  v143 -= 2;
                  *((_WORD *)v249 - 1) = v250;
                  v249 -= 2;
                }
                uint64_t v240 = &v248[2 * v247];
                *a1 = v249;
                a1[1] = v241;
                a1[2] = v240;
                if (v242)
                {
                  operator delete(v242);
                  uint64_t v240 = *v30;
                }
              }
              else
              {
                *(_WORD *)long long v143 = *((_WORD *)v9 + v29);
                unint64_t v241 = v143 + 2;
              }
              a1[1] = v241;
              if (v241 >= v240)
              {
                int v252 = (char *)*a1;
                uint64_t v253 = (uint64_t)&v241[-*a1];
                if (v253 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v254 = v253 >> 1;
                unint64_t v255 = v240 - v252;
                if (v255 <= (v253 >> 1) + 1) {
                  unint64_t v256 = v254 + 1;
                }
                else {
                  unint64_t v256 = v255;
                }
                if (v255 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v257 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v257 = v256;
                }
                if (v257)
                {
                  float32x2_t v258 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v257);
                  int v252 = (char *)*a1;
                  unint64_t v241 = (char *)a1[1];
                }
                else
                {
                  float32x2_t v258 = 0;
                }
                float v259 = &v258[2 * v254];
                *(_WORD *)float v259 = *((_WORD *)v9 + v29);
                unint64_t v251 = v259 + 2;
                while (v241 != v252)
                {
                  __int16 v260 = *((_WORD *)v241 - 1);
                  v241 -= 2;
                  *((_WORD *)v259 - 1) = v260;
                  v259 -= 2;
                }
                uint64_t v240 = &v258[2 * v257];
                *a1 = v259;
                a1[1] = v251;
                a1[2] = v240;
                if (v252)
                {
                  operator delete(v252);
                  uint64_t v240 = *v30;
                }
              }
              else
              {
                *(_WORD *)unint64_t v241 = *((_WORD *)v9 + v29);
                unint64_t v251 = v241 + 2;
              }
              a1[1] = v251;
              if (v251 >= v240)
              {
                __int16 v261 = (char *)*a1;
                uint64_t v262 = (uint64_t)&v251[-*a1];
                if (v262 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v263 = v262 >> 1;
                unint64_t v264 = v240 - v261;
                if (v264 <= (v262 >> 1) + 1) {
                  unint64_t v265 = v263 + 1;
                }
                else {
                  unint64_t v265 = v264;
                }
                if (v264 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v266 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v266 = v265;
                }
                if (v266)
                {
                  unint64_t v267 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v266);
                  __int16 v261 = (char *)*a1;
                  unint64_t v251 = (char *)a1[1];
                }
                else
                {
                  unint64_t v267 = 0;
                }
                size_t v268 = &v267[2 * v263];
                *(_WORD *)size_t v268 = *((_WORD *)v9 + v29);
                uint64_t v32 = v268 + 2;
                while (v251 != v261)
                {
                  __int16 v269 = *((_WORD *)v251 - 1);
                  v251 -= 2;
                  *((_WORD *)v268 - 1) = v269;
                  v268 -= 2;
                }
                *a1 = v268;
                a1[1] = v32;
                a1[2] = &v267[2 * v266];
                if (v261) {
                  operator delete(v261);
                }
              }
              else
              {
                *(_WORD *)unint64_t v251 = *((_WORD *)v9 + v29);
                uint64_t v32 = v251 + 2;
              }
              a1[1] = v32;
              goto LABEL_426;
            case 32:
              uint64_t v32 = (char *)a1[1];
LABEL_426:
              int v270 = v9[v29];
              v271 = *v30;
              if (v32 >= *v30)
              {
                __int16 v273 = (char *)*a1;
                uint64_t v274 = (uint64_t)&v32[-*a1];
                if (v274 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v275 = v274 >> 1;
                unint64_t v276 = v271 - v273;
                if (v276 <= (v274 >> 1) + 1) {
                  unint64_t v277 = v275 + 1;
                }
                else {
                  unint64_t v277 = v276;
                }
                if (v276 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v278 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v278 = v277;
                }
                if (v278)
                {
                  unint64_t v279 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v278);
                  __int16 v273 = (char *)*a1;
                  uint64_t v32 = (char *)a1[1];
                }
                else
                {
                  unint64_t v279 = 0;
                }
                size_t v280 = &v279[2 * v275];
                *(_WORD *)size_t v280 = v270;
                char v272 = v280 + 2;
                while (v32 != v273)
                {
                  __int16 v281 = *((_WORD *)v32 - 1);
                  v32 -= 2;
                  *((_WORD *)v280 - 1) = v281;
                  v280 -= 2;
                }
                v271 = &v279[2 * v278];
                *a1 = v280;
                a1[1] = v272;
                a1[2] = v271;
                if (v273)
                {
                  operator delete(v273);
                  v271 = *v30;
                }
              }
              else
              {
                *(_WORD *)uint64_t v32 = v270;
                char v272 = v32 + 2;
              }
              a1[1] = v272;
              int v282 = v9[v29];
              if (v272 >= v271)
              {
                char v284 = (char *)*a1;
                uint64_t v285 = (uint64_t)&v272[-*a1];
                if (v285 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v286 = v285 >> 1;
                unint64_t v287 = v271 - v284;
                if (v287 <= (v285 >> 1) + 1) {
                  unint64_t v288 = v286 + 1;
                }
                else {
                  unint64_t v288 = v287;
                }
                if (v287 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v289 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v289 = v288;
                }
                if (v289)
                {
                  unint64_t v290 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v289);
                  char v284 = (char *)*a1;
                  char v272 = (char *)a1[1];
                }
                else
                {
                  unint64_t v290 = 0;
                }
                size_t v291 = &v290[2 * v286];
                *(_WORD *)size_t v291 = v282;
                v283 = v291 + 2;
                while (v272 != v284)
                {
                  __int16 v292 = *((_WORD *)v272 - 1);
                  v272 -= 2;
                  *((_WORD *)v291 - 1) = v292;
                  v291 -= 2;
                }
                v271 = &v290[2 * v289];
                *a1 = v291;
                a1[1] = v283;
                a1[2] = v271;
                if (v284)
                {
                  operator delete(v284);
                  v271 = *v30;
                }
              }
              else
              {
                *(_WORD *)char v272 = v282;
                v283 = v272 + 2;
              }
              a1[1] = v283;
              int v293 = v9[v29];
              if (v283 < v271) {
                goto LABEL_677;
              }
              uint64_t v294 = (char *)*a1;
              uint64_t v295 = (uint64_t)&v283[-*a1];
              if (v295 <= -3) {
                goto LABEL_734;
              }
              uint64_t v296 = v295 >> 1;
              unint64_t v297 = v271 - v294;
              if (v297 <= (v295 >> 1) + 1) {
                unint64_t v298 = v296 + 1;
              }
              else {
                unint64_t v298 = v297;
              }
              if (v297 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v299 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v299 = v298;
              }
              if (v299)
              {
                unsigned __int32 v300 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v299);
                uint64_t v294 = (char *)*a1;
                v283 = (char *)a1[1];
              }
              else
              {
                unsigned __int32 v300 = 0;
              }
              unint64_t v301 = &v300[2 * v296];
              *(_WORD *)unint64_t v301 = v293;
              unint64_t v302 = v301 + 2;
              while (v283 != v294)
              {
                __int16 v303 = *((_WORD *)v283 - 1);
                v283 -= 2;
                *((_WORD *)v301 - 1) = v303;
                v301 -= 2;
              }
              goto LABEL_691;
          }
          break;
        default:
          if (v13 == 32) {
            goto LABEL_174;
          }
          if (v13 != 16)
          {
            if (v13 != 8 || v31 < 3) {
              break;
            }
            uint64_t v35 = 0;
            uint64_t v36 = (char *)a1[1];
            do
            {
              __int16 v37 = *((unsigned __int8 *)v9 + v29);
              uint64_t v38 = *v30;
              if (v36 >= *v30)
              {
                uint64_t v40 = (char *)*a1;
                uint64_t v41 = (uint64_t)&v36[-*a1];
                if (v41 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v42 = v41 >> 1;
                unint64_t v43 = v38 - v40;
                if (v43 <= (v41 >> 1) + 1) {
                  unint64_t v44 = v42 + 1;
                }
                else {
                  unint64_t v44 = v43;
                }
                if (v43 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v45 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v45 = v44;
                }
                if (v45)
                {
                  unint64_t v46 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v45);
                  uint64_t v40 = (char *)*a1;
                  uint64_t v36 = (char *)a1[1];
                }
                else
                {
                  unint64_t v46 = 0;
                }
                unint64_t v47 = &v46[2 * v42];
                *(_WORD *)unint64_t v47 = v37;
                uint64_t v39 = v47 + 2;
                while (v36 != v40)
                {
                  __int16 v48 = *((_WORD *)v36 - 1);
                  v36 -= 2;
                  *((_WORD *)v47 - 1) = v48;
                  v47 -= 2;
                }
                uint64_t v38 = &v46[2 * v45];
                *a1 = v47;
                a1[1] = v39;
                a1[2] = v38;
                if (v40)
                {
                  operator delete(v40);
                  uint64_t v38 = *v30;
                }
              }
              else
              {
                *(_WORD *)uint64_t v36 = v37;
                uint64_t v39 = v36 + 2;
              }
              a1[1] = v39;
              __int16 v49 = *((unsigned __int8 *)v9 + v35 + v29 + 1);
              if (v39 >= v38)
              {
                uint64_t v51 = (char *)*a1;
                uint64_t v52 = (uint64_t)&v39[-*a1];
                if (v52 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v53 = v52 >> 1;
                unint64_t v54 = v38 - v51;
                if (v54 <= (v52 >> 1) + 1) {
                  unint64_t v55 = v53 + 1;
                }
                else {
                  unint64_t v55 = v54;
                }
                if (v54 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v56 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v56 = v55;
                }
                if (v56)
                {
                  uint64_t v57 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v56);
                  uint64_t v51 = (char *)*a1;
                  uint64_t v39 = (char *)a1[1];
                }
                else
                {
                  uint64_t v57 = 0;
                }
                unint64_t v58 = &v57[2 * v53];
                *(_WORD *)unint64_t v58 = v49;
                uint64_t v50 = v58 + 2;
                while (v39 != v51)
                {
                  __int16 v59 = *((_WORD *)v39 - 1);
                  v39 -= 2;
                  *((_WORD *)v58 - 1) = v59;
                  v58 -= 2;
                }
                uint64_t v38 = &v57[2 * v56];
                *a1 = v58;
                a1[1] = v50;
                a1[2] = v38;
                if (v51)
                {
                  operator delete(v51);
                  uint64_t v38 = *v30;
                }
              }
              else
              {
                *(_WORD *)uint64_t v39 = v49;
                uint64_t v50 = v39 + 2;
              }
              uint64_t v14 = a4;
              a1[1] = v50;
              __int16 v60 = *((unsigned __int8 *)v9 + v35 + v29 + 2);
              if (v50 >= v38)
              {
                unint64_t v61 = (char *)*a1;
                uint64_t v62 = (uint64_t)&v50[-*a1];
                if (v62 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v63 = v62 >> 1;
                unint64_t v64 = v38 - v61;
                if (v64 <= (v62 >> 1) + 1) {
                  unint64_t v65 = v63 + 1;
                }
                else {
                  unint64_t v65 = v64;
                }
                if (v64 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v66 = v65;
                }
                if (v66)
                {
                  unint64_t v67 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v66);
                  unint64_t v61 = (char *)*a1;
                  uint64_t v50 = (char *)a1[1];
                }
                else
                {
                  unint64_t v67 = 0;
                }
                uint64_t v68 = &v67[2 * v63];
                *(_WORD *)uint64_t v68 = v60;
                uint64_t v36 = v68 + 2;
                while (v50 != v61)
                {
                  __int16 v69 = *((_WORD *)v50 - 1);
                  v50 -= 2;
                  *((_WORD *)v68 - 1) = v69;
                  v68 -= 2;
                }
                *a1 = v68;
                a1[1] = v36;
                a1[2] = &v67[2 * v66];
                if (v61) {
                  operator delete(v61);
                }
              }
              else
              {
                *(_WORD *)uint64_t v50 = v60;
                uint64_t v36 = v50 + 2;
              }
              a1[1] = v36;
              ++v35;
              uint64_t v31 = *(unsigned __int8 *)(a4 + v28);
            }
            while (v35 < v31 - 2);
          }
          if (v31 >= 3)
          {
            uint64_t v70 = 0;
            size_t v71 = (char *)a1[1];
            do
            {
              unint64_t v72 = *v30;
              if (v71 >= *v30)
              {
                uint64_t v74 = (char *)*a1;
                uint64_t v75 = (uint64_t)&v71[-*a1];
                if (v75 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v76 = v75 >> 1;
                unint64_t v77 = v72 - v74;
                if (v77 <= (v75 >> 1) + 1) {
                  unint64_t v78 = v76 + 1;
                }
                else {
                  unint64_t v78 = v77;
                }
                if (v77 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v79 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v79 = v78;
                }
                if (v79)
                {
                  int v80 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v79);
                  uint64_t v74 = (char *)*a1;
                  size_t v71 = (char *)a1[1];
                }
                else
                {
                  int v80 = 0;
                }
                unint64_t v81 = &v80[2 * v76];
                *(_WORD *)unint64_t v81 = *((_WORD *)v9 + v29);
                uint64_t v73 = v81 + 2;
                while (v71 != v74)
                {
                  __int16 v82 = *((_WORD *)v71 - 1);
                  v71 -= 2;
                  *((_WORD *)v81 - 1) = v82;
                  v81 -= 2;
                }
                unint64_t v72 = &v80[2 * v79];
                *a1 = v81;
                a1[1] = v73;
                a1[2] = v72;
                if (v74)
                {
                  operator delete(v74);
                  unint64_t v72 = *v30;
                }
              }
              else
              {
                *(_WORD *)size_t v71 = *((_WORD *)v9 + v29);
                uint64_t v73 = v71 + 2;
              }
              a1[1] = v73;
              uint64_t v83 = v70 + v29 + 1;
              if (v73 >= v72)
              {
                size_t v85 = (char *)*a1;
                uint64_t v86 = (uint64_t)&v73[-*a1];
                if (v86 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v87 = v86 >> 1;
                unint64_t v88 = v72 - v85;
                if (v88 <= (v86 >> 1) + 1) {
                  unint64_t v89 = v87 + 1;
                }
                else {
                  unint64_t v89 = v88;
                }
                if (v88 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v90 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v90 = v89;
                }
                if (v90)
                {
                  __int16 v91 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v90);
                  size_t v85 = (char *)*a1;
                  uint64_t v73 = (char *)a1[1];
                }
                else
                {
                  __int16 v91 = 0;
                }
                unint64_t v92 = &v91[2 * v87];
                *(_WORD *)unint64_t v92 = *((_WORD *)v9 + v83);
                unint64_t v84 = v92 + 2;
                while (v73 != v85)
                {
                  __int16 v93 = *((_WORD *)v73 - 1);
                  v73 -= 2;
                  *((_WORD *)v92 - 1) = v93;
                  v92 -= 2;
                }
                unint64_t v72 = &v91[2 * v90];
                *a1 = v92;
                a1[1] = v84;
                a1[2] = v72;
                if (v85)
                {
                  operator delete(v85);
                  unint64_t v72 = *v30;
                }
              }
              else
              {
                *(_WORD *)uint64_t v73 = *((_WORD *)v9 + v83);
                unint64_t v84 = v73 + 2;
              }
              uint64_t v14 = a4;
              a1[1] = v84;
              uint64_t v94 = v70 + v29 + 2;
              if (v84 >= v72)
              {
                uint64_t v95 = (char *)*a1;
                uint64_t v96 = (uint64_t)&v84[-*a1];
                if (v96 <= -3) {
                  goto LABEL_734;
                }
                uint64_t v97 = v96 >> 1;
                unint64_t v98 = v72 - v95;
                if (v98 <= (v96 >> 1) + 1) {
                  unint64_t v99 = v97 + 1;
                }
                else {
                  unint64_t v99 = v98;
                }
                if (v98 >= 0x7FFFFFFFFFFFFFFELL) {
                  uint64_t v100 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else {
                  uint64_t v100 = v99;
                }
                if (v100)
                {
                  uint64_t v101 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v100);
                  uint64_t v95 = (char *)*a1;
                  unint64_t v84 = (char *)a1[1];
                }
                else
                {
                  uint64_t v101 = 0;
                }
                long long v102 = &v101[2 * v97];
                *(_WORD *)long long v102 = *((_WORD *)v9 + v94);
                size_t v71 = v102 + 2;
                while (v84 != v95)
                {
                  __int16 v103 = *((_WORD *)v84 - 1);
                  v84 -= 2;
                  *((_WORD *)v102 - 1) = v103;
                  v102 -= 2;
                }
                *a1 = v102;
                a1[1] = v71;
                a1[2] = &v101[2 * v100];
                if (v95) {
                  operator delete(v95);
                }
              }
              else
              {
                *(_WORD *)unint64_t v84 = *((_WORD *)v9 + v94);
                size_t v71 = v84 + 2;
              }
              a1[1] = v71;
              ++v70;
              uint64_t v31 = *(unsigned __int8 *)(a4 + v28);
            }
            while (v70 < v31 - 2);
LABEL_174:
            if (v31 >= 3)
            {
              uint64_t v104 = 0;
              __int16 v105 = (char *)a1[1];
              do
              {
                int v106 = v9[v29];
                unint64_t v107 = *v30;
                if (v105 >= *v30)
                {
                  unint64_t v109 = (char *)*a1;
                  uint64_t v110 = (uint64_t)&v105[-*a1];
                  if (v110 <= -3) {
                    goto LABEL_734;
                  }
                  uint64_t v111 = v110 >> 1;
                  unint64_t v112 = v107 - v109;
                  if (v112 <= (v110 >> 1) + 1) {
                    unint64_t v113 = v111 + 1;
                  }
                  else {
                    unint64_t v113 = v112;
                  }
                  if (v112 >= 0x7FFFFFFFFFFFFFFELL) {
                    uint64_t v114 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v114 = v113;
                  }
                  if (v114)
                  {
                    char v115 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v114);
                    unint64_t v109 = (char *)*a1;
                    __int16 v105 = (char *)a1[1];
                  }
                  else
                  {
                    char v115 = 0;
                  }
                  uint64_t v116 = &v115[2 * v111];
                  *(_WORD *)uint64_t v116 = v106;
                  long long v108 = v116 + 2;
                  while (v105 != v109)
                  {
                    __int16 v117 = *((_WORD *)v105 - 1);
                    v105 -= 2;
                    *((_WORD *)v116 - 1) = v117;
                    v116 -= 2;
                  }
                  unint64_t v107 = &v115[2 * v114];
                  *a1 = v116;
                  a1[1] = v108;
                  a1[2] = v107;
                  if (v109)
                  {
                    operator delete(v109);
                    unint64_t v107 = *v30;
                  }
                }
                else
                {
                  *(_WORD *)__int16 v105 = v106;
                  long long v108 = v105 + 2;
                }
                a1[1] = v108;
                int v118 = v9[v104 + 1 + v29];
                if (v108 >= v107)
                {
                  float64x2_t v120 = (char *)*a1;
                  uint64_t v121 = (uint64_t)&v108[-*a1];
                  if (v121 <= -3) {
                    goto LABEL_734;
                  }
                  uint64_t v122 = v121 >> 1;
                  unint64_t v123 = v107 - v120;
                  if (v123 <= (v121 >> 1) + 1) {
                    unint64_t v124 = v122 + 1;
                  }
                  else {
                    unint64_t v124 = v123;
                  }
                  if (v123 >= 0x7FFFFFFFFFFFFFFELL) {
                    uint64_t v125 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v125 = v124;
                  }
                  if (v125)
                  {
                    uint64_t v126 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v125);
                    float64x2_t v120 = (char *)*a1;
                    long long v108 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v126 = 0;
                  }
                  long long v127 = &v126[2 * v122];
                  *(_WORD *)long long v127 = v118;
                  unint64_t v119 = v127 + 2;
                  while (v108 != v120)
                  {
                    __int16 v128 = *((_WORD *)v108 - 1);
                    v108 -= 2;
                    *((_WORD *)v127 - 1) = v128;
                    v127 -= 2;
                  }
                  unint64_t v107 = &v126[2 * v125];
                  *a1 = v127;
                  a1[1] = v119;
                  a1[2] = v107;
                  if (v120)
                  {
                    operator delete(v120);
                    unint64_t v107 = *v30;
                  }
                }
                else
                {
                  *(_WORD *)long long v108 = v118;
                  unint64_t v119 = v108 + 2;
                }
                a1[1] = v119;
                int v129 = v9[v104 + 2 + v29];
                if (v119 >= v107)
                {
                  char v130 = (char *)*a1;
                  uint64_t v131 = (uint64_t)&v119[-*a1];
                  if (v131 <= -3) {
                    goto LABEL_734;
                  }
                  uint64_t v132 = v131 >> 1;
                  unint64_t v133 = v107 - v130;
                  if (v133 <= (v131 >> 1) + 1) {
                    unint64_t v134 = v132 + 1;
                  }
                  else {
                    unint64_t v134 = v133;
                  }
                  if (v133 >= 0x7FFFFFFFFFFFFFFELL) {
                    uint64_t v135 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v135 = v134;
                  }
                  if (v135)
                  {
                    unint64_t v136 = (char *)sub_20B08AAC4((uint64_t)(a1 + 2), v135);
                    char v130 = (char *)*a1;
                    unint64_t v119 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v136 = 0;
                  }
                  unint64_t v137 = &v136[2 * v132];
                  *(_WORD *)unint64_t v137 = v129;
                  __int16 v105 = v137 + 2;
                  while (v119 != v130)
                  {
                    __int16 v138 = *((_WORD *)v119 - 1);
                    v119 -= 2;
                    *((_WORD *)v137 - 1) = v138;
                    v137 -= 2;
                  }
                  *a1 = v137;
                  a1[1] = v105;
                  a1[2] = &v136[2 * v135];
                  if (v130) {
                    operator delete(v130);
                  }
                }
                else
                {
                  *(_WORD *)unint64_t v119 = v129;
                  __int16 v105 = v119 + 2;
                }
                uint64_t v14 = a4;
                a1[1] = v105;
                ++v104;
              }
              while (v104 < *(unsigned __int8 *)(a4 + v28) - 2);
            }
          }
          break;
      }
LABEL_694:
      v29 += *(unsigned __int8 *)(v14 + v28++);
      uint64_t v13 = a6;
      if (v28 == a5) {
        return;
      }
    }
  }
  uint64_t v15 = (unsigned int *)a2;
  unint64_t v16 = a3;
  while (1)
  {
    unsigned int v17 = *v15++;
    if (v17 >= 0x10000) {
      break;
    }
    if (!--v16) {
      goto LABEL_11;
    }
  }
  NSLog(&cfstr_CouldnTCopyInd.isa);
}

void sub_20B1A4AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B1A4B00(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = a3;
  unint64_t v9 = (unsigned __int16 *)a2;
  unint64_t v11 = a6 & 0xFFFFFFFFFFFFFFF8;
  if ((a6 & 0xFFFFFFFFFFFFFFF8) == 0x20 && a7 == a8)
  {
    sub_20B0A2BE0((uint64_t)a1, a3);
    unint64_t v16 = (char *)*a1;
    memcpy(v16, v9, 4 * v8);
  }
  else
  {
    uint64_t v13 = a6;
    if (!a6)
    {
      NSLog(&cfstr_CouldnTCopyInd_0.isa);
      return;
    }
    if (a7 == a8)
    {
      sub_20B0A2BE0((uint64_t)a1, a3);
      if (v13 == 32)
      {
        if (v8)
        {
          unint64_t v21 = (char *)*a1;
          do
          {
            int v22 = *(_DWORD *)v9;
            v9 += 2;
            *(_DWORD *)unint64_t v21 = v22;
            v21 += 4;
            --v8;
          }
          while (v8);
        }
      }
      else if (v13 == 16)
      {
        if (v8)
        {
          unsigned int v23 = (char *)*a1;
          do
          {
            int v24 = *v9++;
            *(_DWORD *)unsigned int v23 = v24;
            v23 += 4;
            --v8;
          }
          while (v8);
        }
      }
      else if (v13 == 8 && v8)
      {
        uint64_t v14 = (char *)*a1;
        do
        {
          int v15 = *(unsigned __int8 *)v9;
          unint64_t v9 = (unsigned __int16 *)((char *)v9 + 1);
          *(_DWORD *)uint64_t v14 = v15;
          v14 += 4;
          --v8;
        }
        while (v8);
      }
      return;
    }
    uint64_t v17 = a4;
    if (a7 == 3 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          unint64_t v18 = sub_20B1A0C90(a2, a3);
          uint64_t v19 = sub_20B1A6B4C((uint64_t)v9, v8, 4 * v18);
          break;
        case 16:
          unint64_t v18 = sub_20B1A0C10(a2, a3);
          uint64_t v19 = sub_20B1A6A14((uint64_t)v9, v8, 4 * v18);
          break;
        case 8:
          unint64_t v18 = sub_20B1A0B90(a2, a3);
          uint64_t v19 = sub_20B1A68D8((uint64_t)v9, v8, 4 * v18);
          break;
        default:
          goto LABEL_664;
      }
      if (v19)
      {
        id v423 = (id)v19;
        sub_20B0A2BE0((uint64_t)a1, v18);
        uint64_t v394 = (char *)*a1;
        id v424 = v423;
        __int16 v397 = (const void *)objc_msgSend_bytes(v424, v395, v396);
        size_t v398 = 4 * v18;
        goto LABEL_671;
      }
LABEL_664:
      NSLog(&cfstr_CouldnTCreateB.isa);
      return;
    }
    if (a7 == 4 && a8 == 2)
    {
      switch(a6)
      {
        case 32:
          unint64_t v20 = sub_20B1A6E40(a2, a3);
          break;
        case 16:
          unint64_t v20 = sub_20B1A6D64(a2, a3);
          break;
        case 8:
          unint64_t v20 = sub_20B1A6C84(a2, a3);
          break;
        default:
          unint64_t v20 = 0;
          goto LABEL_673;
      }
      id v425 = v20;
      if (!v20)
      {
LABEL_673:

        return;
      }
      unint64_t v399 = 3 * (v8 >> 1);
      sub_20B0A2BE0((uint64_t)a1, v399);
      if (v11 != 32)
      {
        if (v13 == 32)
        {
          id v424 = v425;
          int v410 = (int *)objc_msgSend_bytes(v424, v408, v409);
          if (v8 >= 2)
          {
            v411 = (char *)*a1;
            if (v399 <= 1) {
              uint64_t v412 = 1;
            }
            else {
              uint64_t v412 = 3 * (v8 >> 1);
            }
            do
            {
              int v413 = *v410++;
              *(_DWORD *)v411 = v413;
              v411 += 4;
              --v412;
            }
            while (v412);
          }
        }
        else if (v13 == 16)
        {
          id v424 = v425;
          uint64_t v416 = (unsigned __int16 *)objc_msgSend_bytes(v424, v414, v415);
          if (v8 >= 2)
          {
            unint64_t v417 = (char *)*a1;
            if (v399 <= 1) {
              uint64_t v418 = 1;
            }
            else {
              uint64_t v418 = 3 * (v8 >> 1);
            }
            do
            {
              int v419 = *v416++;
              *(_DWORD *)unint64_t v417 = v419;
              v417 += 4;
              --v418;
            }
            while (v418);
          }
        }
        else
        {
          id v424 = v425;
          unint64_t v404 = (unsigned __int8 *)objc_msgSend_bytes(v424, v402, v403);
          if (v8 >= 2)
          {
            unint64_t v405 = (char *)*a1;
            if (v399 <= 1) {
              uint64_t v406 = 1;
            }
            else {
              uint64_t v406 = 3 * (v8 >> 1);
            }
            do
            {
              int v407 = *v404++;
              *(_DWORD *)unint64_t v405 = v407;
              v405 += 4;
              --v406;
            }
            while (v406);
          }
        }
        goto LABEL_672;
      }
      uint64_t v394 = (char *)*a1;
      id v424 = v425;
      __int16 v397 = (const void *)objc_msgSend_bytes(v424, v400, v401);
      size_t v398 = 12 * (v8 >> 1);
LABEL_671:
      memcpy(v394, v397, v398);
LABEL_672:
      unint64_t v20 = v424;
      goto LABEL_673;
    }
    if (a7 != 5 || a8 != 2)
    {
      NSLog(&cfstr_CouldnTCopyInd_1.isa);
      return;
    }
    if (a5)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      __int16 v27 = (char **)(a1 + 2);
      do
      {
        LODWORD(v28) = *(unsigned __int8 *)(v17 + v25);
        switch(v28)
        {
          case 3:
            switch(v13)
            {
              case 8:
                int v132 = *((unsigned __int8 *)v9 + v26);
                unint64_t v134 = (char *)a1[1];
                unint64_t v133 = (char *)a1[2];
                if (v134 >= v133)
                {
                  int32x2_t v148 = (char *)*a1;
                  uint64_t v149 = (uint64_t)&v134[-*a1] >> 2;
                  unint64_t v150 = v149 + 1;
                  if ((unint64_t)(v149 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v151 = v133 - v148;
                  if (v151 >> 1 > v150) {
                    unint64_t v150 = v151 >> 1;
                  }
                  if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v152 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v152 = v150;
                  }
                  if (v152)
                  {
                    unint64_t v153 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v152);
                    int32x2_t v148 = (char *)*a1;
                    unint64_t v134 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v153 = 0;
                  }
                  uint64_t v170 = &v153[4 * v149];
                  *(_DWORD *)uint64_t v170 = v132;
                  uint64_t v135 = v170 + 4;
                  while (v134 != v148)
                  {
                    int v171 = *((_DWORD *)v134 - 1);
                    v134 -= 4;
                    *((_DWORD *)v170 - 1) = v171;
                    v170 -= 4;
                  }
                  unint64_t v133 = &v153[4 * v152];
                  *a1 = v170;
                  a1[1] = v135;
                  a1[2] = v133;
                  if (v148)
                  {
                    operator delete(v148);
                    unint64_t v133 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v134 = v132;
                  uint64_t v135 = v134 + 4;
                }
                a1[1] = v135;
                int v172 = *((unsigned __int8 *)v9 + v26 + 1);
                if (v135 >= v133)
                {
                  unint64_t v174 = (char *)*a1;
                  uint64_t v175 = (uint64_t)&v135[-*a1] >> 2;
                  unint64_t v176 = v175 + 1;
                  if ((unint64_t)(v175 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v177 = v133 - v174;
                  if (v177 >> 1 > v176) {
                    unint64_t v176 = v177 >> 1;
                  }
                  if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v178 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v178 = v176;
                  }
                  if (v178)
                  {
                    uint64_t v179 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v178);
                    unint64_t v174 = (char *)*a1;
                    uint64_t v135 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v179 = 0;
                  }
                  __int16 v199 = &v179[4 * v175];
                  *(_DWORD *)__int16 v199 = v172;
                  uint64_t v173 = v199 + 4;
                  while (v135 != v174)
                  {
                    int v200 = *((_DWORD *)v135 - 1);
                    v135 -= 4;
                    *((_DWORD *)v199 - 1) = v200;
                    v199 -= 4;
                  }
                  unint64_t v133 = &v179[4 * v178];
                  *a1 = v199;
                  a1[1] = v173;
                  a1[2] = v133;
                  if (v174)
                  {
                    operator delete(v174);
                    unint64_t v133 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v135 = v172;
                  uint64_t v173 = v135 + 4;
                }
                a1[1] = v173;
                int v201 = *((unsigned __int8 *)v9 + v26 + 2);
                if (v173 >= v133)
                {
                  uint64_t v202 = (char *)*a1;
                  uint64_t v203 = (uint64_t)&v173[-*a1] >> 2;
                  unint64_t v204 = v203 + 1;
                  if ((unint64_t)(v203 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v205 = v133 - v202;
                  if (v205 >> 1 > v204) {
                    unint64_t v204 = v205 >> 1;
                  }
                  if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v206 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v206 = v204;
                  }
                  if (v206)
                  {
                    size_t v207 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v206);
                    uint64_t v202 = (char *)*a1;
                    uint64_t v173 = (char *)a1[1];
                  }
                  else
                  {
                    size_t v207 = 0;
                  }
                  unint64_t v277 = &v207[4 * v203];
                  *(_DWORD *)unint64_t v277 = v201;
                  unint64_t v136 = v277 + 4;
                  while (v173 != v202)
                  {
                    int v278 = *((_DWORD *)v173 - 1);
                    v173 -= 4;
                    *((_DWORD *)v277 - 1) = v278;
                    v277 -= 4;
                  }
                  *a1 = v277;
                  a1[1] = v136;
                  a1[2] = &v207[4 * v206];
                  if (v202) {
                    operator delete(v202);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v173 = v201;
                  unint64_t v136 = v173 + 4;
                }
                a1[1] = v136;
                goto LABEL_453;
              case 16:
                unint64_t v136 = (char *)a1[1];
LABEL_453:
                int v279 = v9[v26];
                size_t v280 = *v27;
                if (v136 >= *v27)
                {
                  int v282 = (char *)*a1;
                  uint64_t v283 = (uint64_t)&v136[-*a1] >> 2;
                  unint64_t v284 = v283 + 1;
                  if ((unint64_t)(v283 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v285 = v280 - v282;
                  if (v285 >> 1 > v284) {
                    unint64_t v284 = v285 >> 1;
                  }
                  if ((unint64_t)v285 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v286 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v286 = v284;
                  }
                  if (v286)
                  {
                    unint64_t v287 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v286);
                    int v282 = (char *)*a1;
                    unint64_t v136 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v287 = 0;
                  }
                  unint64_t v288 = &v287[4 * v283];
                  *(_DWORD *)unint64_t v288 = v279;
                  __int16 v281 = v288 + 4;
                  while (v136 != v282)
                  {
                    int v289 = *((_DWORD *)v136 - 1);
                    v136 -= 4;
                    *((_DWORD *)v288 - 1) = v289;
                    v288 -= 4;
                  }
                  size_t v280 = &v287[4 * v286];
                  *a1 = v288;
                  a1[1] = v281;
                  a1[2] = v280;
                  if (v282)
                  {
                    operator delete(v282);
                    size_t v280 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v136 = v279;
                  __int16 v281 = v136 + 4;
                }
                a1[1] = v281;
                int v290 = v9[v26 + 1];
                if (v281 >= v280)
                {
                  __int16 v292 = (char *)*a1;
                  uint64_t v293 = (uint64_t)&v281[-*a1] >> 2;
                  unint64_t v294 = v293 + 1;
                  if ((unint64_t)(v293 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v295 = v280 - v292;
                  if (v295 >> 1 > v294) {
                    unint64_t v294 = v295 >> 1;
                  }
                  if ((unint64_t)v295 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v296 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v296 = v294;
                  }
                  if (v296)
                  {
                    unint64_t v297 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v296);
                    __int16 v292 = (char *)*a1;
                    __int16 v281 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v297 = 0;
                  }
                  unint64_t v298 = &v297[4 * v293];
                  *(_DWORD *)unint64_t v298 = v290;
                  size_t v291 = v298 + 4;
                  while (v281 != v292)
                  {
                    int v299 = *((_DWORD *)v281 - 1);
                    v281 -= 4;
                    *((_DWORD *)v298 - 1) = v299;
                    v298 -= 4;
                  }
                  size_t v280 = &v297[4 * v296];
                  *a1 = v298;
                  a1[1] = v291;
                  a1[2] = v280;
                  if (v292)
                  {
                    operator delete(v292);
                    size_t v280 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)__int16 v281 = v290;
                  size_t v291 = v281 + 4;
                }
                a1[1] = v291;
                int v300 = v9[v26 + 2];
                if (v291 >= v280)
                {
                  unint64_t v301 = (char *)*a1;
                  uint64_t v302 = (uint64_t)&v291[-*a1] >> 2;
                  unint64_t v303 = v302 + 1;
                  if ((unint64_t)(v302 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v304 = v280 - v301;
                  if (v304 >> 1 > v303) {
                    unint64_t v303 = v304 >> 1;
                  }
                  if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v305 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v305 = v303;
                  }
                  if (v305)
                  {
                    uint64_t v306 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v305);
                    unint64_t v301 = (char *)*a1;
                    size_t v291 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v306 = 0;
                  }
                  char v307 = &v306[4 * v302];
                  *(_DWORD *)char v307 = v300;
                  int v30 = v307 + 4;
                  while (v291 != v301)
                  {
                    int v308 = *((_DWORD *)v291 - 1);
                    v291 -= 4;
                    *((_DWORD *)v307 - 1) = v308;
                    v307 -= 4;
                  }
                  *a1 = v307;
                  a1[1] = v30;
                  a1[2] = &v306[4 * v305];
                  if (v301) {
                    operator delete(v301);
                  }
                }
                else
                {
                  *(_DWORD *)size_t v291 = v300;
                  int v30 = v291 + 4;
                }
                a1[1] = v30;
                goto LABEL_502;
              case 32:
                int v30 = (char *)a1[1];
LABEL_502:
                uint64_t v309 = *v27;
                if (v30 >= *v27)
                {
                  unint64_t v311 = (char *)*a1;
                  uint64_t v312 = (uint64_t)&v30[-*a1] >> 2;
                  unint64_t v313 = v312 + 1;
                  if ((unint64_t)(v312 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v314 = v309 - v311;
                  if (v314 >> 1 > v313) {
                    unint64_t v313 = v314 >> 1;
                  }
                  if ((unint64_t)v314 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v315 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v315 = v313;
                  }
                  if (v315)
                  {
                    __int16 v316 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v315);
                    unint64_t v311 = (char *)*a1;
                    int v30 = (char *)a1[1];
                  }
                  else
                  {
                    __int16 v316 = 0;
                  }
                  uint64_t v317 = &v316[4 * v312];
                  *(_DWORD *)uint64_t v317 = *(_DWORD *)&v9[2 * v26];
                  uint64_t v310 = v317 + 4;
                  while (v30 != v311)
                  {
                    int v318 = *((_DWORD *)v30 - 1);
                    v30 -= 4;
                    *((_DWORD *)v317 - 1) = v318;
                    v317 -= 4;
                  }
                  uint64_t v309 = &v316[4 * v315];
                  *a1 = v317;
                  a1[1] = v310;
                  a1[2] = v309;
                  if (v311)
                  {
                    operator delete(v311);
                    uint64_t v309 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)int v30 = *(_DWORD *)&v9[2 * v26];
                  uint64_t v310 = v30 + 4;
                }
                a1[1] = v310;
                uint64_t v319 = v26 + 1;
                if (v310 >= v309)
                {
                  uint64_t v321 = (char *)*a1;
                  uint64_t v322 = (uint64_t)&v310[-*a1] >> 2;
                  unint64_t v323 = v322 + 1;
                  if ((unint64_t)(v322 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v324 = v309 - v321;
                  if (v324 >> 1 > v323) {
                    unint64_t v323 = v324 >> 1;
                  }
                  if ((unint64_t)v324 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v325 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v325 = v323;
                  }
                  if (v325)
                  {
                    size_t v326 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v325);
                    uint64_t v321 = (char *)*a1;
                    uint64_t v310 = (char *)a1[1];
                  }
                  else
                  {
                    size_t v326 = 0;
                  }
                  __int16 v327 = &v326[4 * v322];
                  *(_DWORD *)__int16 v327 = *(_DWORD *)&v9[2 * v319];
                  uint64_t v320 = v327 + 4;
                  while (v310 != v321)
                  {
                    int v328 = *((_DWORD *)v310 - 1);
                    v310 -= 4;
                    *((_DWORD *)v327 - 1) = v328;
                    v327 -= 4;
                  }
                  uint64_t v309 = &v326[4 * v325];
                  *a1 = v327;
                  a1[1] = v320;
                  a1[2] = v309;
                  if (v321)
                  {
                    operator delete(v321);
                    uint64_t v309 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v310 = *(_DWORD *)&v9[2 * v319];
                  uint64_t v320 = v310 + 4;
                }
                a1[1] = v320;
                uint64_t v329 = v26 + 2;
                if (v320 >= v309)
                {
                  uint64_t v330 = (char *)*a1;
                  uint64_t v331 = (uint64_t)&v320[-*a1] >> 2;
                  unint64_t v332 = v331 + 1;
                  if ((unint64_t)(v331 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v333 = v309 - v330;
                  if (v333 >> 1 > v332) {
                    unint64_t v332 = v333 >> 1;
                  }
                  if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v334 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v334 = v332;
                  }
                  if (v334)
                  {
                    unint64_t v335 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v334);
                    uint64_t v330 = (char *)*a1;
                    uint64_t v320 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v335 = 0;
                  }
                  v336 = &v335[4 * v331];
                  *(_DWORD *)v336 = *(_DWORD *)&v9[2 * v329];
                  size_t v268 = v336 + 4;
                  while (v320 != v330)
                  {
                    int v337 = *((_DWORD *)v320 - 1);
                    v320 -= 4;
                    *((_DWORD *)v336 - 1) = v337;
                    v336 -= 4;
                  }
                  *a1 = v336;
                  a1[1] = v268;
                  a1[2] = &v335[4 * v334];
                  if (v330) {
                    operator delete(v330);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v320 = *(_DWORD *)&v9[2 * v329];
                  size_t v268 = v320 + 4;
                }
                uint64_t v17 = a4;
                goto LABEL_657;
            }
            break;
          case 2:
            switch(v13)
            {
              case 8:
                int v137 = *((unsigned __int8 *)v9 + v26);
                __int16 v139 = (char *)a1[1];
                __int16 v138 = (char *)a1[2];
                if (v139 >= v138)
                {
                  uint64_t v154 = (char *)*a1;
                  uint64_t v155 = (uint64_t)&v139[-*a1] >> 2;
                  unint64_t v156 = v155 + 1;
                  if ((unint64_t)(v155 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v157 = v138 - v154;
                  if (v157 >> 1 > v156) {
                    unint64_t v156 = v157 >> 1;
                  }
                  if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v158 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v158 = v156;
                  }
                  if (v158)
                  {
                    uint64_t v159 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v158);
                    uint64_t v154 = (char *)*a1;
                    __int16 v139 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v159 = 0;
                  }
                  uint64_t v180 = &v159[4 * v155];
                  *(_DWORD *)uint64_t v180 = v137;
                  uint64_t v140 = v180 + 4;
                  while (v139 != v154)
                  {
                    int v181 = *((_DWORD *)v139 - 1);
                    v139 -= 4;
                    *((_DWORD *)v180 - 1) = v181;
                    v180 -= 4;
                  }
                  __int16 v138 = &v159[4 * v158];
                  *a1 = v180;
                  a1[1] = v140;
                  a1[2] = v138;
                  if (v154)
                  {
                    operator delete(v154);
                    __int16 v138 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)__int16 v139 = v137;
                  uint64_t v140 = v139 + 4;
                }
                a1[1] = v140;
                int v182 = *((unsigned __int8 *)v9 + v26 + 1);
                if (v140 >= v138)
                {
                  uint64_t v184 = (char *)*a1;
                  uint64_t v185 = (uint64_t)&v140[-*a1] >> 2;
                  unint64_t v186 = v185 + 1;
                  if ((unint64_t)(v185 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v187 = v138 - v184;
                  if (v187 >> 1 > v186) {
                    unint64_t v186 = v187 >> 1;
                  }
                  if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v188 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v188 = v186;
                  }
                  if (v188)
                  {
                    unint64_t v189 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v188);
                    uint64_t v184 = (char *)*a1;
                    uint64_t v140 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v189 = 0;
                  }
                  unint64_t v208 = &v189[4 * v185];
                  *(_DWORD *)unint64_t v208 = v182;
                  unint64_t v183 = v208 + 4;
                  while (v140 != v184)
                  {
                    int v209 = *((_DWORD *)v140 - 1);
                    v140 -= 4;
                    *((_DWORD *)v208 - 1) = v209;
                    v208 -= 4;
                  }
                  __int16 v138 = &v189[4 * v188];
                  *a1 = v208;
                  a1[1] = v183;
                  a1[2] = v138;
                  if (v184)
                  {
                    operator delete(v184);
                    __int16 v138 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v140 = v182;
                  unint64_t v183 = v140 + 4;
                }
                a1[1] = v183;
                int v210 = *((unsigned __int8 *)v9 + v26 + 1);
                if (v183 >= v138)
                {
                  char v211 = (char *)*a1;
                  uint64_t v212 = (uint64_t)&v183[-*a1] >> 2;
                  unint64_t v213 = v212 + 1;
                  if ((unint64_t)(v212 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v214 = v138 - v211;
                  if (v214 >> 1 > v213) {
                    unint64_t v213 = v214 >> 1;
                  }
                  if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v215 = v213;
                  }
                  if (v215)
                  {
                    uint64_t v216 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v215);
                    char v211 = (char *)*a1;
                    unint64_t v183 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v216 = 0;
                  }
                  int v338 = &v216[4 * v212];
                  *(_DWORD *)int v338 = v210;
                  float64x2_t v141 = v338 + 4;
                  while (v183 != v211)
                  {
                    int v339 = *((_DWORD *)v183 - 1);
                    v183 -= 4;
                    *((_DWORD *)v338 - 1) = v339;
                    v338 -= 4;
                  }
                  *a1 = v338;
                  a1[1] = v141;
                  a1[2] = &v216[4 * v215];
                  if (v211) {
                    operator delete(v211);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v183 = v210;
                  float64x2_t v141 = v183 + 4;
                }
                a1[1] = v141;
                goto LABEL_558;
              case 16:
                float64x2_t v141 = (char *)a1[1];
LABEL_558:
                int v340 = v9[v26];
                size_t v341 = *v27;
                if (v141 >= *v27)
                {
                  uint64_t v343 = (char *)*a1;
                  uint64_t v344 = (uint64_t)&v141[-*a1] >> 2;
                  unint64_t v345 = v344 + 1;
                  if ((unint64_t)(v344 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v346 = v341 - v343;
                  if (v346 >> 1 > v345) {
                    unint64_t v345 = v346 >> 1;
                  }
                  if ((unint64_t)v346 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v347 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v347 = v345;
                  }
                  if (v347)
                  {
                    uint64_t v348 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v347);
                    uint64_t v343 = (char *)*a1;
                    float64x2_t v141 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v348 = 0;
                  }
                  __int16 v349 = &v348[4 * v344];
                  *(_DWORD *)__int16 v349 = v340;
                  uint64_t v342 = v349 + 4;
                  while (v141 != v343)
                  {
                    int v350 = *((_DWORD *)v141 - 1);
                    v141 -= 4;
                    *((_DWORD *)v349 - 1) = v350;
                    v349 -= 4;
                  }
                  size_t v341 = &v348[4 * v347];
                  *a1 = v349;
                  a1[1] = v342;
                  a1[2] = v341;
                  if (v343)
                  {
                    operator delete(v343);
                    size_t v341 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)float64x2_t v141 = v340;
                  uint64_t v342 = v141 + 4;
                }
                a1[1] = v342;
                int v351 = v9[v26 + 1];
                if (v342 >= v341)
                {
                  uint64_t v353 = (char *)*a1;
                  uint64_t v354 = (uint64_t)&v342[-*a1] >> 2;
                  unint64_t v355 = v354 + 1;
                  if ((unint64_t)(v354 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v356 = v341 - v353;
                  if (v356 >> 1 > v355) {
                    unint64_t v355 = v356 >> 1;
                  }
                  if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v357 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v357 = v355;
                  }
                  if (v357)
                  {
                    __int16 v358 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v357);
                    uint64_t v353 = (char *)*a1;
                    uint64_t v342 = (char *)a1[1];
                  }
                  else
                  {
                    __int16 v358 = 0;
                  }
                  __int16 v359 = &v358[4 * v354];
                  *(_DWORD *)__int16 v359 = v351;
                  uint64_t v352 = v359 + 4;
                  if (v342 == v353)
                  {
                    uint64_t v17 = a4;
                  }
                  else
                  {
                    uint64_t v17 = a4;
                    do
                    {
                      int v360 = *((_DWORD *)v342 - 1);
                      v342 -= 4;
                      *((_DWORD *)v359 - 1) = v360;
                      v359 -= 4;
                    }
                    while (v342 != v353);
                  }
                  size_t v341 = &v358[4 * v357];
                  *a1 = v359;
                  a1[1] = v352;
                  a1[2] = v341;
                  if (v353)
                  {
                    operator delete(v353);
                    size_t v341 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v342 = v351;
                  uint64_t v352 = v342 + 4;
                  uint64_t v17 = a4;
                }
                a1[1] = v352;
                int v361 = v9[v26 + 1];
                if (v352 >= v341)
                {
                  unint64_t v362 = (char *)*a1;
                  uint64_t v363 = (uint64_t)&v352[-*a1] >> 2;
                  unint64_t v364 = v363 + 1;
                  if ((unint64_t)(v363 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v365 = v341 - v362;
                  if (v365 >> 1 > v364) {
                    unint64_t v364 = v365 >> 1;
                  }
                  if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v366 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v366 = v364;
                  }
                  if (v366)
                  {
                    v367 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v366);
                    unint64_t v362 = (char *)*a1;
                    uint64_t v352 = (char *)a1[1];
                  }
                  else
                  {
                    v367 = 0;
                  }
                  char v368 = &v367[4 * v363];
                  *(_DWORD *)char v368 = v361;
                  uint64_t v31 = v368 + 4;
                  while (v352 != v362)
                  {
                    int v369 = *((_DWORD *)v352 - 1);
                    v352 -= 4;
                    *((_DWORD *)v368 - 1) = v369;
                    v368 -= 4;
                  }
                  *a1 = v368;
                  a1[1] = v31;
                  a1[2] = &v367[4 * v366];
                  if (v362) {
                    operator delete(v362);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v352 = v361;
                  uint64_t v31 = v352 + 4;
                }
                a1[1] = v31;
LABEL_609:
                uint64_t v370 = *v27;
                if (v31 >= *v27)
                {
                  unint64_t v372 = (char *)*a1;
                  uint64_t v373 = (uint64_t)&v31[-*a1] >> 2;
                  unint64_t v374 = v373 + 1;
                  if ((unint64_t)(v373 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v375 = v370 - v372;
                  if (v375 >> 1 > v374) {
                    unint64_t v374 = v375 >> 1;
                  }
                  if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v376 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v376 = v374;
                  }
                  if (v376)
                  {
                    __int16 v377 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v376);
                    unint64_t v372 = (char *)*a1;
                    uint64_t v31 = (char *)a1[1];
                  }
                  else
                  {
                    __int16 v377 = 0;
                  }
                  uint64_t v378 = &v377[4 * v373];
                  *(_DWORD *)uint64_t v378 = *(_DWORD *)&v9[2 * v26];
                  uint64_t v371 = v378 + 4;
                  while (v31 != v372)
                  {
                    int v379 = *((_DWORD *)v31 - 1);
                    v31 -= 4;
                    *((_DWORD *)v378 - 1) = v379;
                    v378 -= 4;
                  }
                  uint64_t v370 = &v377[4 * v376];
                  *a1 = v378;
                  a1[1] = v371;
                  a1[2] = v370;
                  if (v372)
                  {
                    operator delete(v372);
                    uint64_t v370 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v31 = *(_DWORD *)&v9[2 * v26];
                  uint64_t v371 = v31 + 4;
                }
                a1[1] = v371;
                uint64_t v380 = v26 + 1;
                if (v371 >= v370)
                {
                  uint64_t v382 = (char *)*a1;
                  uint64_t v383 = (uint64_t)&v371[-*a1] >> 2;
                  unint64_t v384 = v383 + 1;
                  if ((unint64_t)(v383 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v385 = v370 - v382;
                  if (v385 >> 1 > v384) {
                    unint64_t v384 = v385 >> 1;
                  }
                  if ((unint64_t)v385 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v386 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v386 = v384;
                  }
                  if (v386)
                  {
                    size_t v387 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v386);
                    uint64_t v382 = (char *)*a1;
                    uint64_t v371 = (char *)a1[1];
                  }
                  else
                  {
                    size_t v387 = 0;
                  }
                  __int16 v388 = &v387[4 * v383];
                  *(_DWORD *)__int16 v388 = *(_DWORD *)&v9[2 * v380];
                  uint64_t v381 = v388 + 4;
                  while (v371 != v382)
                  {
                    int v389 = *((_DWORD *)v371 - 1);
                    v371 -= 4;
                    *((_DWORD *)v388 - 1) = v389;
                    v388 -= 4;
                  }
                  uint64_t v370 = &v387[4 * v386];
                  *a1 = v388;
                  a1[1] = v381;
                  a1[2] = v370;
                  if (v382)
                  {
                    operator delete(v382);
                    uint64_t v370 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v371 = *(_DWORD *)&v9[2 * v380];
                  uint64_t v381 = v371 + 4;
                }
                a1[1] = v381;
                if (v381 < v370)
                {
                  *(_DWORD *)uint64_t v381 = *(_DWORD *)&v9[2 * v380];
                  size_t v268 = v381 + 4;
                  goto LABEL_657;
                }
                __int16 v269 = (char *)*a1;
                uint64_t v390 = (uint64_t)&v381[-*a1] >> 2;
                unint64_t v391 = v390 + 1;
                if ((unint64_t)(v390 + 1) >> 62) {
LABEL_697:
                }
                  sub_20B05D0BC();
                uint64_t v392 = v370 - v269;
                if (v392 >> 1 > v391) {
                  unint64_t v391 = v392 >> 1;
                }
                if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v273 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v273 = v391;
                }
                if (v273)
                {
                  uint64_t v274 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v273);
                  __int16 v269 = (char *)*a1;
                  uint64_t v381 = (char *)a1[1];
                }
                else
                {
                  uint64_t v274 = 0;
                }
                uint64_t v275 = &v274[4 * v390];
                *(_DWORD *)uint64_t v275 = *(_DWORD *)&v9[2 * v380];
                size_t v268 = v275 + 4;
                while (v381 != v269)
                {
                  int v393 = *((_DWORD *)v381 - 1);
                  v381 -= 4;
                  *((_DWORD *)v275 - 1) = v393;
                  v275 -= 4;
                }
LABEL_655:
                *a1 = v275;
                a1[1] = v268;
                a1[2] = &v274[4 * v273];
                if (v269) {
                  operator delete(v269);
                }
                goto LABEL_657;
              case 32:
                uint64_t v31 = (char *)a1[1];
                goto LABEL_609;
            }
            break;
          case 1:
            switch(v13)
            {
              case 8:
                int v127 = *((unsigned __int8 *)v9 + v26);
                int v129 = (char *)a1[1];
                __int16 v128 = (char *)a1[2];
                if (v129 >= v128)
                {
                  unint64_t v142 = (char *)*a1;
                  uint64_t v143 = (uint64_t)&v129[-*a1] >> 2;
                  unint64_t v144 = v143 + 1;
                  if ((unint64_t)(v143 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v145 = v128 - v142;
                  if (v145 >> 1 > v144) {
                    unint64_t v144 = v145 >> 1;
                  }
                  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v146 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v146 = v144;
                  }
                  if (v146)
                  {
                    unint64_t v147 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v146);
                    unint64_t v142 = (char *)*a1;
                    int v129 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v147 = 0;
                  }
                  unint64_t v160 = &v147[4 * v143];
                  *(_DWORD *)unint64_t v160 = v127;
                  char v130 = v160 + 4;
                  while (v129 != v142)
                  {
                    int v161 = *((_DWORD *)v129 - 1);
                    v129 -= 4;
                    *((_DWORD *)v160 - 1) = v161;
                    v160 -= 4;
                  }
                  __int16 v128 = &v147[4 * v146];
                  *a1 = v160;
                  a1[1] = v130;
                  a1[2] = v128;
                  if (v142)
                  {
                    operator delete(v142);
                    __int16 v128 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)int v129 = v127;
                  char v130 = v129 + 4;
                }
                a1[1] = v130;
                int v162 = *((unsigned __int8 *)v9 + v26);
                if (v130 >= v128)
                {
                  unint64_t v164 = (char *)*a1;
                  uint64_t v165 = (uint64_t)&v130[-*a1] >> 2;
                  unint64_t v166 = v165 + 1;
                  if ((unint64_t)(v165 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v167 = v128 - v164;
                  if (v167 >> 1 > v166) {
                    unint64_t v166 = v167 >> 1;
                  }
                  if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v168 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v168 = v166;
                  }
                  if (v168)
                  {
                    uint64_t v169 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v168);
                    unint64_t v164 = (char *)*a1;
                    char v130 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v169 = 0;
                  }
                  float32x4_t v190 = &v169[4 * v165];
                  *(_DWORD *)float32x4_t v190 = v162;
                  uint64_t v163 = v190 + 4;
                  while (v130 != v164)
                  {
                    int v191 = *((_DWORD *)v130 - 1);
                    v130 -= 4;
                    *((_DWORD *)v190 - 1) = v191;
                    v190 -= 4;
                  }
                  __int16 v128 = &v169[4 * v168];
                  *a1 = v190;
                  a1[1] = v163;
                  a1[2] = v128;
                  if (v164)
                  {
                    operator delete(v164);
                    __int16 v128 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)char v130 = v162;
                  uint64_t v163 = v130 + 4;
                }
                a1[1] = v163;
                int v192 = *((unsigned __int8 *)v9 + v26);
                if (v163 >= v128)
                {
                  unint64_t v193 = (char *)*a1;
                  uint64_t v194 = (uint64_t)&v163[-*a1] >> 2;
                  unint64_t v195 = v194 + 1;
                  if ((unint64_t)(v194 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v196 = v128 - v193;
                  if (v196 >> 1 > v195) {
                    unint64_t v195 = v196 >> 1;
                  }
                  if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v197 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v197 = v195;
                  }
                  if (v197)
                  {
                    __int16 v198 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v197);
                    unint64_t v193 = (char *)*a1;
                    uint64_t v163 = (char *)a1[1];
                  }
                  else
                  {
                    __int16 v198 = 0;
                  }
                  unint64_t v217 = &v198[4 * v194];
                  *(_DWORD *)unint64_t v217 = v192;
                  uint64_t v131 = v217 + 4;
                  while (v163 != v193)
                  {
                    int v218 = *((_DWORD *)v163 - 1);
                    v163 -= 4;
                    *((_DWORD *)v217 - 1) = v218;
                    v217 -= 4;
                  }
                  *a1 = v217;
                  a1[1] = v131;
                  a1[2] = &v198[4 * v197];
                  if (v193) {
                    operator delete(v193);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v163 = v192;
                  uint64_t v131 = v163 + 4;
                }
                a1[1] = v131;
                goto LABEL_351;
              case 16:
                uint64_t v131 = (char *)a1[1];
LABEL_351:
                int v219 = v9[v26];
                __int16 v220 = *v27;
                if (v131 >= *v27)
                {
                  uint64_t v222 = (char *)*a1;
                  uint64_t v223 = (uint64_t)&v131[-*a1] >> 2;
                  unint64_t v224 = v223 + 1;
                  if ((unint64_t)(v223 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v225 = v220 - v222;
                  if (v225 >> 1 > v224) {
                    unint64_t v224 = v225 >> 1;
                  }
                  if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v226 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v226 = v224;
                  }
                  if (v226)
                  {
                    int v227 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v226);
                    uint64_t v222 = (char *)*a1;
                    uint64_t v131 = (char *)a1[1];
                  }
                  else
                  {
                    int v227 = 0;
                  }
                  uint64_t v228 = &v227[4 * v223];
                  *(_DWORD *)uint64_t v228 = v219;
                  uint64_t v221 = v228 + 4;
                  while (v131 != v222)
                  {
                    int v229 = *((_DWORD *)v131 - 1);
                    v131 -= 4;
                    *((_DWORD *)v228 - 1) = v229;
                    v228 -= 4;
                  }
                  __int16 v220 = &v227[4 * v226];
                  *a1 = v228;
                  a1[1] = v221;
                  a1[2] = v220;
                  if (v222)
                  {
                    operator delete(v222);
                    __int16 v220 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v131 = v219;
                  uint64_t v221 = v131 + 4;
                }
                a1[1] = v221;
                int v230 = v9[v26];
                if (v221 >= v220)
                {
                  uint64_t v232 = (char *)*a1;
                  uint64_t v233 = (uint64_t)&v221[-*a1] >> 2;
                  unint64_t v234 = v233 + 1;
                  if ((unint64_t)(v233 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v235 = v220 - v232;
                  if (v235 >> 1 > v234) {
                    unint64_t v234 = v235 >> 1;
                  }
                  if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v236 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v236 = v234;
                  }
                  if (v236)
                  {
                    uint64_t v237 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v236);
                    uint64_t v232 = (char *)*a1;
                    uint64_t v221 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v237 = 0;
                  }
                  unint64_t v238 = &v237[4 * v233];
                  *(_DWORD *)unint64_t v238 = v230;
                  unint64_t v231 = v238 + 4;
                  while (v221 != v232)
                  {
                    int v239 = *((_DWORD *)v221 - 1);
                    v221 -= 4;
                    *((_DWORD *)v238 - 1) = v239;
                    v238 -= 4;
                  }
                  __int16 v220 = &v237[4 * v236];
                  *a1 = v238;
                  a1[1] = v231;
                  a1[2] = v220;
                  if (v232)
                  {
                    operator delete(v232);
                    __int16 v220 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v221 = v230;
                  unint64_t v231 = v221 + 4;
                }
                a1[1] = v231;
                int v240 = v9[v26];
                if (v231 >= v220)
                {
                  unint64_t v241 = (char *)*a1;
                  uint64_t v242 = (uint64_t)&v231[-*a1] >> 2;
                  unint64_t v243 = v242 + 1;
                  if ((unint64_t)(v242 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v244 = v220 - v241;
                  if (v244 >> 1 > v243) {
                    unint64_t v243 = v244 >> 1;
                  }
                  if ((unint64_t)v244 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v245 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v245 = v243;
                  }
                  if (v245)
                  {
                    unint64_t v246 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v245);
                    unint64_t v241 = (char *)*a1;
                    unint64_t v231 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v246 = 0;
                  }
                  uint64_t v247 = &v246[4 * v242];
                  *(_DWORD *)uint64_t v247 = v240;
                  uint64_t v29 = v247 + 4;
                  while (v231 != v241)
                  {
                    int v248 = *((_DWORD *)v231 - 1);
                    v231 -= 4;
                    *((_DWORD *)v247 - 1) = v248;
                    v247 -= 4;
                  }
                  *a1 = v247;
                  a1[1] = v29;
                  a1[2] = &v246[4 * v245];
                  if (v241) {
                    operator delete(v241);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v231 = v240;
                  uint64_t v29 = v231 + 4;
                }
                a1[1] = v29;
                goto LABEL_400;
              case 32:
                uint64_t v29 = (char *)a1[1];
LABEL_400:
                unint64_t v249 = *v27;
                if (v29 >= *v27)
                {
                  unint64_t v251 = (char *)*a1;
                  uint64_t v252 = (uint64_t)&v29[-*a1] >> 2;
                  unint64_t v253 = v252 + 1;
                  if ((unint64_t)(v252 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v254 = v249 - v251;
                  if (v254 >> 1 > v253) {
                    unint64_t v253 = v254 >> 1;
                  }
                  if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v255 = v253;
                  }
                  if (v255)
                  {
                    unint64_t v256 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v255);
                    unint64_t v251 = (char *)*a1;
                    uint64_t v29 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v256 = 0;
                  }
                  uint64_t v257 = &v256[4 * v252];
                  *(_DWORD *)uint64_t v257 = *(_DWORD *)&v9[2 * v26];
                  __int16 v250 = v257 + 4;
                  while (v29 != v251)
                  {
                    int v258 = *((_DWORD *)v29 - 1);
                    v29 -= 4;
                    *((_DWORD *)v257 - 1) = v258;
                    v257 -= 4;
                  }
                  unint64_t v249 = &v256[4 * v255];
                  *a1 = v257;
                  a1[1] = v250;
                  a1[2] = v249;
                  if (v251)
                  {
                    operator delete(v251);
                    unint64_t v249 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v29 = *(_DWORD *)&v9[2 * v26];
                  __int16 v250 = v29 + 4;
                }
                a1[1] = v250;
                if (v250 >= v249)
                {
                  __int16 v260 = (char *)*a1;
                  uint64_t v261 = (uint64_t)&v250[-*a1] >> 2;
                  unint64_t v262 = v261 + 1;
                  if ((unint64_t)(v261 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v263 = v249 - v260;
                  if (v263 >> 1 > v262) {
                    unint64_t v262 = v263 >> 1;
                  }
                  if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v264 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v264 = v262;
                  }
                  if (v264)
                  {
                    unint64_t v265 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v264);
                    __int16 v260 = (char *)*a1;
                    __int16 v250 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v265 = 0;
                  }
                  uint64_t v266 = &v265[4 * v261];
                  *(_DWORD *)uint64_t v266 = *(_DWORD *)&v9[2 * v26];
                  float v259 = v266 + 4;
                  while (v250 != v260)
                  {
                    int v267 = *((_DWORD *)v250 - 1);
                    v250 -= 4;
                    *((_DWORD *)v266 - 1) = v267;
                    v266 -= 4;
                  }
                  unint64_t v249 = &v265[4 * v264];
                  *a1 = v266;
                  a1[1] = v259;
                  a1[2] = v249;
                  if (v260)
                  {
                    operator delete(v260);
                    unint64_t v249 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)__int16 v250 = *(_DWORD *)&v9[2 * v26];
                  float v259 = v250 + 4;
                }
                a1[1] = v259;
                if (v259 < v249)
                {
                  *(_DWORD *)float v259 = *(_DWORD *)&v9[2 * v26];
                  size_t v268 = v259 + 4;
LABEL_657:
                  a1[1] = v268;
                  goto LABEL_658;
                }
                __int16 v269 = (char *)*a1;
                uint64_t v270 = (uint64_t)&v259[-*a1] >> 2;
                unint64_t v271 = v270 + 1;
                if ((unint64_t)(v270 + 1) >> 62) {
                  goto LABEL_697;
                }
                uint64_t v272 = v249 - v269;
                if (v272 >> 1 > v271) {
                  unint64_t v271 = v272 >> 1;
                }
                if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v273 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v273 = v271;
                }
                if (v273)
                {
                  uint64_t v274 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v273);
                  __int16 v269 = (char *)*a1;
                  float v259 = (char *)a1[1];
                }
                else
                {
                  uint64_t v274 = 0;
                }
                uint64_t v275 = &v274[4 * v270];
                *(_DWORD *)uint64_t v275 = *(_DWORD *)&v9[2 * v26];
                size_t v268 = v275 + 4;
                while (v259 != v269)
                {
                  int v276 = *((_DWORD *)v259 - 1);
                  v259 -= 4;
                  *((_DWORD *)v275 - 1) = v276;
                  v275 -= 4;
                }
                goto LABEL_655;
            }
            break;
          default:
            if (v13 == 32) {
              goto LABEL_163;
            }
            if (v13 != 16)
            {
              if (v13 != 8 || v28 < 3) {
                break;
              }
              uint64_t v32 = 0;
              char v33 = (char *)a1[1];
              do
              {
                int v34 = *((unsigned __int8 *)v9 + v26);
                uint64_t v35 = *v27;
                if (v33 >= *v27)
                {
                  __int16 v37 = (char *)*a1;
                  uint64_t v38 = (uint64_t)&v33[-*a1] >> 2;
                  unint64_t v39 = v38 + 1;
                  if ((unint64_t)(v38 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v40 = v35 - v37;
                  if (v40 >> 1 > v39) {
                    unint64_t v39 = v40 >> 1;
                  }
                  if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v41 = v39;
                  }
                  if (v41)
                  {
                    uint64_t v42 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v41);
                    __int16 v37 = (char *)*a1;
                    char v33 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v42 = 0;
                  }
                  unint64_t v43 = &v42[4 * v38];
                  *(_DWORD *)unint64_t v43 = v34;
                  uint64_t v36 = v43 + 4;
                  while (v33 != v37)
                  {
                    int v44 = *((_DWORD *)v33 - 1);
                    v33 -= 4;
                    *((_DWORD *)v43 - 1) = v44;
                    v43 -= 4;
                  }
                  uint64_t v35 = &v42[4 * v41];
                  *a1 = v43;
                  a1[1] = v36;
                  a1[2] = v35;
                  if (v37)
                  {
                    operator delete(v37);
                    uint64_t v35 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)char v33 = v34;
                  uint64_t v36 = v33 + 4;
                }
                a1[1] = v36;
                int v45 = *((unsigned __int8 *)v9 + v32 + v26 + 1);
                if (v36 >= v35)
                {
                  unint64_t v47 = (char *)*a1;
                  uint64_t v48 = (uint64_t)&v36[-*a1] >> 2;
                  unint64_t v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v50 = v35 - v47;
                  if (v50 >> 1 > v49) {
                    unint64_t v49 = v50 >> 1;
                  }
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v51 = v49;
                  }
                  if (v51)
                  {
                    uint64_t v52 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v51);
                    unint64_t v47 = (char *)*a1;
                    uint64_t v36 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v52 = 0;
                  }
                  uint64_t v53 = &v52[4 * v48];
                  *(_DWORD *)uint64_t v53 = v45;
                  unint64_t v46 = v53 + 4;
                  while (v36 != v47)
                  {
                    int v54 = *((_DWORD *)v36 - 1);
                    v36 -= 4;
                    *((_DWORD *)v53 - 1) = v54;
                    v53 -= 4;
                  }
                  uint64_t v35 = &v52[4 * v51];
                  *a1 = v53;
                  a1[1] = v46;
                  a1[2] = v35;
                  if (v47)
                  {
                    operator delete(v47);
                    uint64_t v35 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v36 = v45;
                  unint64_t v46 = v36 + 4;
                }
                uint64_t v17 = a4;
                a1[1] = v46;
                int v55 = *((unsigned __int8 *)v9 + v32 + v26 + 2);
                if (v46 >= v35)
                {
                  uint64_t v56 = (char *)*a1;
                  uint64_t v57 = (uint64_t)&v46[-*a1] >> 2;
                  unint64_t v58 = v57 + 1;
                  if ((unint64_t)(v57 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v59 = v35 - v56;
                  if (v59 >> 1 > v58) {
                    unint64_t v58 = v59 >> 1;
                  }
                  if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v60 = v58;
                  }
                  if (v60)
                  {
                    unint64_t v61 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v60);
                    uint64_t v56 = (char *)*a1;
                    unint64_t v46 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v61 = 0;
                  }
                  uint64_t v62 = &v61[4 * v57];
                  *(_DWORD *)uint64_t v62 = v55;
                  char v33 = v62 + 4;
                  while (v46 != v56)
                  {
                    int v63 = *((_DWORD *)v46 - 1);
                    v46 -= 4;
                    *((_DWORD *)v62 - 1) = v63;
                    v62 -= 4;
                  }
                  *a1 = v62;
                  a1[1] = v33;
                  a1[2] = &v61[4 * v60];
                  if (v56) {
                    operator delete(v56);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v46 = v55;
                  char v33 = v46 + 4;
                }
                a1[1] = v33;
                ++v32;
                uint64_t v28 = *(unsigned __int8 *)(a4 + v25);
              }
              while (v32 < v28 - 2);
            }
            if (v28 >= 3)
            {
              uint64_t v64 = 0;
              unint64_t v65 = (char *)a1[1];
              do
              {
                int v66 = v9[v26];
                unint64_t v67 = *v27;
                if (v65 >= *v27)
                {
                  __int16 v69 = (char *)*a1;
                  uint64_t v70 = (uint64_t)&v65[-*a1] >> 2;
                  unint64_t v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v72 = v67 - v69;
                  if (v72 >> 1 > v71) {
                    unint64_t v71 = v72 >> 1;
                  }
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  if (v73)
                  {
                    uint64_t v74 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v73);
                    __int16 v69 = (char *)*a1;
                    unint64_t v65 = (char *)a1[1];
                  }
                  else
                  {
                    uint64_t v74 = 0;
                  }
                  uint64_t v75 = &v74[4 * v70];
                  *(_DWORD *)uint64_t v75 = v66;
                  uint64_t v68 = v75 + 4;
                  while (v65 != v69)
                  {
                    int v76 = *((_DWORD *)v65 - 1);
                    v65 -= 4;
                    *((_DWORD *)v75 - 1) = v76;
                    v75 -= 4;
                  }
                  unint64_t v67 = &v74[4 * v73];
                  *a1 = v75;
                  a1[1] = v68;
                  a1[2] = v67;
                  if (v69)
                  {
                    operator delete(v69);
                    unint64_t v67 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v65 = v66;
                  uint64_t v68 = v65 + 4;
                }
                a1[1] = v68;
                int v77 = v9[v64 + 1 + v26];
                if (v68 >= v67)
                {
                  uint64_t v79 = (char *)*a1;
                  uint64_t v80 = (uint64_t)&v68[-*a1] >> 2;
                  unint64_t v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v82 = v67 - v79;
                  if (v82 >> 1 > v81) {
                    unint64_t v81 = v82 >> 1;
                  }
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v83 = v81;
                  }
                  if (v83)
                  {
                    unint64_t v84 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v83);
                    uint64_t v79 = (char *)*a1;
                    uint64_t v68 = (char *)a1[1];
                  }
                  else
                  {
                    unint64_t v84 = 0;
                  }
                  size_t v85 = &v84[4 * v80];
                  *(_DWORD *)size_t v85 = v77;
                  unint64_t v78 = v85 + 4;
                  while (v68 != v79)
                  {
                    int v86 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v85 - 1) = v86;
                    v85 -= 4;
                  }
                  unint64_t v67 = &v84[4 * v83];
                  *a1 = v85;
                  a1[1] = v78;
                  a1[2] = v67;
                  if (v79)
                  {
                    operator delete(v79);
                    unint64_t v67 = *v27;
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v68 = v77;
                  unint64_t v78 = v68 + 4;
                }
                uint64_t v17 = a4;
                a1[1] = v78;
                int v87 = v9[v64 + 2 + v26];
                if (v78 >= v67)
                {
                  unint64_t v88 = (char *)*a1;
                  uint64_t v89 = (uint64_t)&v78[-*a1] >> 2;
                  unint64_t v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 62) {
                    goto LABEL_697;
                  }
                  uint64_t v91 = v67 - v88;
                  if (v91 >> 1 > v90) {
                    unint64_t v90 = v91 >> 1;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  if (v92)
                  {
                    __int16 v93 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v92);
                    unint64_t v88 = (char *)*a1;
                    unint64_t v78 = (char *)a1[1];
                  }
                  else
                  {
                    __int16 v93 = 0;
                  }
                  uint64_t v94 = &v93[4 * v89];
                  *(_DWORD *)uint64_t v94 = v87;
                  unint64_t v65 = v94 + 4;
                  while (v78 != v88)
                  {
                    int v95 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v94 - 1) = v95;
                    v94 -= 4;
                  }
                  *a1 = v94;
                  a1[1] = v65;
                  a1[2] = &v93[4 * v92];
                  if (v88) {
                    operator delete(v88);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v78 = v87;
                  unint64_t v65 = v78 + 4;
                }
                a1[1] = v65;
                ++v64;
                uint64_t v28 = *(unsigned __int8 *)(a4 + v25);
              }
              while (v64 < v28 - 2);
LABEL_163:
              if (v28 >= 3)
              {
                uint64_t v96 = 0;
                uint64_t v97 = (char *)a1[1];
                do
                {
                  unint64_t v98 = *v27;
                  if (v97 >= *v27)
                  {
                    uint64_t v100 = (char *)*a1;
                    uint64_t v101 = (uint64_t)&v97[-*a1] >> 2;
                    unint64_t v102 = v101 + 1;
                    if ((unint64_t)(v101 + 1) >> 62) {
                      goto LABEL_697;
                    }
                    uint64_t v103 = v98 - v100;
                    if (v103 >> 1 > v102) {
                      unint64_t v102 = v103 >> 1;
                    }
                    if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v104 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v104 = v102;
                    }
                    if (v104)
                    {
                      __int16 v105 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v104);
                      uint64_t v100 = (char *)*a1;
                      uint64_t v97 = (char *)a1[1];
                    }
                    else
                    {
                      __int16 v105 = 0;
                    }
                    int v106 = &v105[4 * v101];
                    *(_DWORD *)int v106 = *(_DWORD *)&v9[2 * v26];
                    unint64_t v99 = v106 + 4;
                    while (v97 != v100)
                    {
                      int v107 = *((_DWORD *)v97 - 1);
                      v97 -= 4;
                      *((_DWORD *)v106 - 1) = v107;
                      v106 -= 4;
                    }
                    unint64_t v98 = &v105[4 * v104];
                    *a1 = v106;
                    a1[1] = v99;
                    a1[2] = v98;
                    if (v100)
                    {
                      operator delete(v100);
                      unint64_t v98 = *v27;
                    }
                  }
                  else
                  {
                    *(_DWORD *)uint64_t v97 = *(_DWORD *)&v9[2 * v26];
                    unint64_t v99 = v97 + 4;
                  }
                  a1[1] = v99;
                  uint64_t v108 = v96 + v26 + 1;
                  if (v99 >= v98)
                  {
                    uint64_t v110 = (char *)*a1;
                    uint64_t v111 = (uint64_t)&v99[-*a1] >> 2;
                    unint64_t v112 = v111 + 1;
                    if ((unint64_t)(v111 + 1) >> 62) {
                      goto LABEL_697;
                    }
                    uint64_t v113 = v98 - v110;
                    if (v113 >> 1 > v112) {
                      unint64_t v112 = v113 >> 1;
                    }
                    if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v114 = v112;
                    }
                    if (v114)
                    {
                      char v115 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v114);
                      uint64_t v110 = (char *)*a1;
                      unint64_t v99 = (char *)a1[1];
                    }
                    else
                    {
                      char v115 = 0;
                    }
                    uint64_t v116 = &v115[4 * v111];
                    *(_DWORD *)uint64_t v116 = *(_DWORD *)&v9[2 * v108];
                    unint64_t v109 = v116 + 4;
                    while (v99 != v110)
                    {
                      int v117 = *((_DWORD *)v99 - 1);
                      v99 -= 4;
                      *((_DWORD *)v116 - 1) = v117;
                      v116 -= 4;
                    }
                    unint64_t v98 = &v115[4 * v114];
                    *a1 = v116;
                    a1[1] = v109;
                    a1[2] = v98;
                    if (v110)
                    {
                      operator delete(v110);
                      unint64_t v98 = *v27;
                    }
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v99 = *(_DWORD *)&v9[2 * v108];
                    unint64_t v109 = v99 + 4;
                  }
                  uint64_t v17 = a4;
                  a1[1] = v109;
                  uint64_t v118 = v96 + v26 + 2;
                  if (v109 >= v98)
                  {
                    unint64_t v119 = (char *)*a1;
                    uint64_t v120 = (uint64_t)&v109[-*a1] >> 2;
                    unint64_t v121 = v120 + 1;
                    if ((unint64_t)(v120 + 1) >> 62) {
                      goto LABEL_697;
                    }
                    uint64_t v122 = v98 - v119;
                    if (v122 >> 1 > v121) {
                      unint64_t v121 = v122 >> 1;
                    }
                    if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v123 = v121;
                    }
                    if (v123)
                    {
                      unint64_t v124 = (char *)sub_20B05D1AC((uint64_t)(a1 + 2), v123);
                      unint64_t v119 = (char *)*a1;
                      unint64_t v109 = (char *)a1[1];
                    }
                    else
                    {
                      unint64_t v124 = 0;
                    }
                    uint64_t v125 = &v124[4 * v120];
                    *(_DWORD *)uint64_t v125 = *(_DWORD *)&v9[2 * v118];
                    uint64_t v97 = v125 + 4;
                    while (v109 != v119)
                    {
                      int v126 = *((_DWORD *)v109 - 1);
                      v109 -= 4;
                      *((_DWORD *)v125 - 1) = v126;
                      v125 -= 4;
                    }
                    *a1 = v125;
                    a1[1] = v97;
                    a1[2] = &v124[4 * v123];
                    if (v119) {
                      operator delete(v119);
                    }
                  }
                  else
                  {
                    *(_DWORD *)unint64_t v109 = *(_DWORD *)&v9[2 * v118];
                    uint64_t v97 = v109 + 4;
                  }
                  a1[1] = v97;
                  ++v96;
                }
                while (v96 < *(unsigned __int8 *)(a4 + v25) - 2);
              }
            }
            break;
        }
LABEL_658:
        v26 += *(unsigned __int8 *)(v17 + v25++);
        uint64_t v13 = a6;
      }
      while (v25 != a5);
    }
  }
}

void sub_20B1A688C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20B1A68B0(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20B05CF80(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

id sub_20B1A68D8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_20B1A0B90(a1, a2);
  uint64_t v7 = 12 * v6;
  if (12 * v6 - 1 >= a3)
  {
    uint64_t v19 = 0;
  }
  else
  {
    unint64_t v8 = malloc_type_malloc(12 * v6, 0xE312B385uLL);
    long long v10 = v8;
    unint64_t v11 = a2 - 2;
    if (a2 != 2)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v8;
      do
      {
        if (v12 <= v11) {
          unint64_t v14 = a2 - 2;
        }
        else {
          unint64_t v14 = v12;
        }
        while (v14 != v12)
        {
          unint64_t v15 = a1 + v12;
          int v16 = *(unsigned __int8 *)(a1 + v12++);
          if (v16 != *(unsigned __int8 *)(v15 + 1))
          {
            unint64_t v14 = v12 - 1;
            break;
          }
        }
        *uint64_t v13 = *(unsigned __int8 *)(a1 + v14);
        if (v14) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = 2;
        }
        if (v14) {
          uint64_t v18 = 2;
        }
        else {
          uint64_t v18 = 1;
        }
        v13[1] = *(unsigned __int8 *)(a1 + v14 + v17);
        _OWORD v13[2] = *(unsigned __int8 *)(a1 + v14 + v18);
        if (v14 < a2 - 3 && *(unsigned __int8 *)(v14 + a1 + 2) == *(unsigned __int8 *)(a1 + v14 + 3)) {
          v14 += 3;
        }
        v13 += 3;
        unint64_t v12 = v14 + 1;
      }
      while (v14 + 1 < v11);
    }
    uint64_t v19 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v9, (uint64_t)v8, v7);
    free(v10);
  }

  return v19;
}

id sub_20B1A6A14(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_20B1A0C10(a1, a2);
  uint64_t v7 = 12 * v6;
  if (12 * v6 - 1 >= a3)
  {
    unint64_t v20 = 0;
  }
  else
  {
    unint64_t v8 = malloc_type_malloc(12 * v6, 0xE312B385uLL);
    long long v10 = v8;
    unint64_t v11 = a2 - 2;
    if (a2 != 2)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v8;
      do
      {
        if (v12 <= v11) {
          unint64_t v14 = a2 - 2;
        }
        else {
          unint64_t v14 = v12;
        }
        while (v14 != v12)
        {
          unint64_t v15 = (unsigned __int16 *)(a1 + 2 * v12++);
          if (*v15 != v15[1])
          {
            unint64_t v14 = v12 - 1;
            break;
          }
        }
        if (v14) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = 2;
        }
        if (v14) {
          uint64_t v17 = 2;
        }
        else {
          uint64_t v17 = 1;
        }
        int v18 = *(unsigned __int16 *)(a1 + 2 * (v14 + v17));
        int v19 = *(unsigned __int16 *)(a1 + 2 * (v14 + v16));
        *uint64_t v13 = *(unsigned __int16 *)(a1 + 2 * v14);
        v13[1] = v19;
        _OWORD v13[2] = v18;
        if (v14 < a2 - 3 && *(unsigned __int16 *)(a1 + 2 * v14 + 4) == *(unsigned __int16 *)(a1 + 2 * (v14 + 3))) {
          v14 += 3;
        }
        v13 += 3;
        unint64_t v12 = v14 + 1;
      }
      while (v14 + 1 < v11);
    }
    unint64_t v20 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v9, (uint64_t)v8, v7);
    free(v10);
  }

  return v20;
}

id sub_20B1A6B4C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_20B1A0C90(a1, a2);
  uint64_t v7 = 12 * v6;
  if (12 * v6 - 1 >= a3)
  {
    int v18 = 0;
  }
  else
  {
    unint64_t v8 = malloc_type_malloc(12 * v6, 0xE312B385uLL);
    long long v10 = v8;
    unint64_t v11 = a2 - 2;
    if (a2 != 2)
    {
      unint64_t v12 = 0;
      uint64_t v13 = v8;
      do
      {
        if (v12 <= v11) {
          unint64_t v14 = a2 - 2;
        }
        else {
          unint64_t v14 = v12;
        }
        while (v14 != v12)
        {
          unint64_t v15 = (_DWORD *)(a1 + 4 * v12++);
          if (*v15 != v15[1])
          {
            unint64_t v14 = v12 - 1;
            break;
          }
        }
        *uint64_t v13 = *(_DWORD *)(a1 + 4 * v14);
        if (v14) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = 2;
        }
        if (v14) {
          uint64_t v17 = 2;
        }
        else {
          uint64_t v17 = 1;
        }
        v13[1] = *(_DWORD *)(a1 + 4 * (v14 + v16));
        _OWORD v13[2] = *(_DWORD *)(a1 + 4 * (v14 + v17));
        if (v14 < a2 - 3 && *(_DWORD *)(a1 + 4 * v14 + 8) == *(_DWORD *)(a1 + 4 * (v14 + 3))) {
          v14 += 3;
        }
        v13 += 3;
        unint64_t v12 = v14 + 1;
      }
      while (v14 + 1 < v11);
    }
    int v18 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v9, (uint64_t)v8, v7);
    free(v10);
  }

  return v18;
}

id sub_20B1A6C84(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2)
  {
    size_t v5 = 3 * (a2 >> 1);
    uint64_t v7 = malloc_type_malloc(v5, 0x6AE4B2B9uLL);
    unint64_t v8 = 0;
    unint64_t v9 = v7;
    do
    {
      *unint64_t v9 = *(unsigned char *)(a1 + v8);
      v9[1] = *(unsigned char *)(a1 + v8 + 1);
      v9[2] = *(unsigned char *)(a1 + v8 + 2);
      v9[3] = *(unsigned char *)(a1 + v8);
      v9[4] = *(unsigned char *)(a1 + v8 + 2);
      v9[5] = *(unsigned char *)(a1 + v8 + 3);
      v9 += 6;
      v8 += 4;
    }
    while (v8 < a2);
    unint64_t v2 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v6, (uint64_t)v7, v5);
    free(v7);
  }
  else
  {
    unint64_t v2 = 0;
  }

  return v2;
}

id sub_20B1A6D64(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 6 * (a2 >> 1);
  if (v2)
  {
    size_t v5 = malloc_type_malloc(6 * (a2 >> 1), 0x6AE4B2B9uLL);
    uint64_t v7 = v5;
    if (a2)
    {
      unint64_t v8 = 0;
      unint64_t v9 = v5;
      do
      {
        long long v10 = (_WORD *)(a1 + 2 * v8);
        *unint64_t v9 = *v10;
        v9[1] = v10[1];
        v9[2] = v10[2];
        v9[3] = *v10;
        v9[4] = v10[2];
        v9[5] = v10[3];
        v8 += 4;
        v9 += 6;
      }
      while (v8 < a2);
    }
    uint64_t v2 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v6, (uint64_t)v5, v2);
    free(v7);
  }

  return (id)v2;
}

id sub_20B1A6E40(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 12 * (a2 >> 1);
  if (v2)
  {
    size_t v5 = malloc_type_malloc(12 * (a2 >> 1), 0x6AE4B2B9uLL);
    uint64_t v7 = v5;
    if (a2)
    {
      unint64_t v8 = 0;
      unint64_t v9 = v5;
      do
      {
        long long v10 = (_DWORD *)(a1 + 4 * v8);
        *unint64_t v9 = *v10;
        v9[1] = v10[1];
        v9[2] = v10[2];
        v9[3] = *v10;
        v9[4] = v10[2];
        v9[5] = v10[3];
        v8 += 4;
        v9 += 6;
      }
      while (v8 < a2);
    }
    uint64_t v2 = objc_msgSend_dataWithBytes_length_(MEMORY[0x263EFF8F8], v6, (uint64_t)v5, v2);
    free(v7);
  }

  return (id)v2;
}

void sub_20B1A7008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v13 = v12;

  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B1A70FC(void *a1, __n128 a2)
{
  unint64_t v5 = a1[8];
  uint64_t v3 = (uint64_t)(a1 + 8);
  unint64_t v4 = v5;
  uint64_t v6 = *(__n128 **)(v3 - 16);
  *(void *)(v3 - 8) = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = v4 - (void)v6;
    uint64_t v9 = v8 >> 4;
    if ((unint64_t)(v8 >> 4) <= 1) {
      uint64_t v9 = 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    unint64_t v11 = (__n128 *)sub_20B06C71C(v3, v10);
    uint64_t v13 = &v11[2 * v12];
    v11->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v11[1] = a2;
    uint64_t v7 = v11 + 2;
    unint64_t v15 = (__n128 *)a1[6];
    unint64_t v14 = (__n128 *)a1[7];
    if (v14 != v15)
    {
      do
      {
        __n128 v16 = v14[-1];
        v11[-2] = v14[-2];
        v11[-1] = v16;
        v11 -= 2;
        v14 -= 2;
      }
      while (v14 != v15);
      unint64_t v14 = (__n128 *)a1[6];
    }
    a1[6] = v11;
    a1[7] = v7;
    a1[8] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    v6->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v6[1] = a2;
    uint64_t v7 = v6 + 2;
  }
  a1[7] = v7;

  sub_20B0CA84C((uint64_t)a1);
}

void sub_20B1A7204(void *a1, __n128 a2)
{
  unint64_t v5 = a1[11];
  uint64_t v3 = (uint64_t)(a1 + 11);
  unint64_t v4 = v5;
  uint64_t v6 = *(__n128 **)(v3 - 16);
  *(void *)(v3 - 8) = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = v4 - (void)v6;
    uint64_t v9 = v8 >> 4;
    if ((unint64_t)(v8 >> 4) <= 1) {
      uint64_t v9 = 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    unint64_t v11 = (__n128 *)sub_20B06C71C(v3, v10);
    uint64_t v13 = &v11[2 * v12];
    v11->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v11[1] = a2;
    uint64_t v7 = v11 + 2;
    unint64_t v15 = (__n128 *)a1[9];
    unint64_t v14 = (__n128 *)a1[10];
    if (v14 != v15)
    {
      do
      {
        __n128 v16 = v14[-1];
        v11[-2] = v14[-2];
        v11[-1] = v16;
        v11 -= 2;
        v14 -= 2;
      }
      while (v14 != v15);
      unint64_t v14 = (__n128 *)a1[9];
    }
    a1[9] = v11;
    a1[10] = v7;
    a1[11] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    v6->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v6[1] = a2;
    uint64_t v7 = v6 + 2;
  }
  a1[10] = v7;

  sub_20B0CA84C((uint64_t)a1);
}

void sub_20B1A7314(void *a1, __n128 a2)
{
  unint64_t v5 = a1[5];
  uint64_t v3 = (uint64_t)(a1 + 5);
  unint64_t v4 = v5;
  uint64_t v6 = *(__n128 **)(v3 - 16);
  *(void *)(v3 - 8) = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = v4 - (void)v6;
    uint64_t v9 = v8 >> 4;
    if ((unint64_t)(v8 >> 4) <= 1) {
      uint64_t v9 = 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    unint64_t v11 = (__n128 *)sub_20B06C71C(v3, v10);
    uint64_t v13 = &v11[2 * v12];
    v11->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v11[1] = a2;
    uint64_t v7 = v11 + 2;
    unint64_t v15 = (__n128 *)a1[3];
    unint64_t v14 = (__n128 *)a1[4];
    if (v14 != v15)
    {
      do
      {
        __n128 v16 = v14[-1];
        v11[-2] = v14[-2];
        v11[-1] = v16;
        v11 -= 2;
        v14 -= 2;
      }
      while (v14 != v15);
      unint64_t v14 = (__n128 *)a1[3];
    }
    a1[3] = v11;
    a1[4] = v7;
    a1[5] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    v6->n128_u64[0] = 0x7FEFFFFFFFFFFFFFLL;
    v6[1] = a2;
    uint64_t v7 = v6 + 2;
  }
  a1[4] = v7;

  sub_20B0CA84C((uint64_t)a1);
}

void sub_20B1A74D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A756C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A761C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A7694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A76EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A782C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A79B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A7C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL MDLAABB::intersect(MDLAABB *this, float32x4_t *a2, float *a3, float *a4, unsigned __int8 *a5)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v5 = *(_OWORD *)this;
  v27[0] = *((_OWORD *)this + 1);
  v27[1] = v5;
  uint64_t v6 = a2[3].u8[0];
  long long v7 = v27[v6];
  float32x4_t v8 = a2[2];
  long long v9 = v27[v6 ^ 1];
  uint64_t v10 = a2[3].u8[1];
  unint64_t v11 = (__int32 *)((unint64_t)&v27[v10] | 4);
  uint64_t v12 = (__int32 *)((unint64_t)&v27[v10 ^ 1] | 4);
  uint64_t v13 = a2[3].u8[2];
  v14.i32[0] = DWORD2(v27[v13]);
  v14.i32[1] = *(_DWORD *)((unint64_t)&v27[v13 ^ 1] | 8);
  float32x2_t v15 = vmul_laneq_f32(vsub_f32(v14, (float32x2_t)vdup_laneq_s32(*(int32x4_t *)a2, 2)), v8, 2);
  float32x2_t v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v7, 0);
  if (v15.f32[1] >= v15.f32[0]) {
    float v17 = v15.f32[0];
  }
  else {
    float v17 = v15.f32[1];
  }
  v16.i32[0] = *v11;
  float32x2_t v18 = (float32x2_t)vrev64_s32(*(int32x2_t *)a2->f32);
  float32x2_t v19 = (float32x2_t)vrev64_s32(*(int32x2_t *)v8.f32);
  float32x2_t v20 = vmul_f32(vsub_f32(v16, v18), v19);
  float32x2_t v21 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v9, 0);
  v21.i32[0] = *v12;
  float32x2_t v22 = vmul_f32(vsub_f32(v21, v18), v19);
  int8x8_t v23 = vbsl_s8((int8x8_t)vcgt_f32(v20, v22), (int8x8_t)v22, (int8x8_t)v20);
  if (*(float *)&v23.i32[1] >= *(float *)v23.i32) {
    v23.i32[0] = v23.i32[1];
  }
  if (*(float *)v23.i32 < v17) {
    *(float *)v23.i32 = v17;
  }
  *a3 = *(float *)v23.i32;
  int8x8_t v24 = vbsl_s8((int8x8_t)vcgt_f32(v22, v20), (int8x8_t)v22, (int8x8_t)v20);
  if (v15.f32[0] >= v15.f32[1]) {
    float v25 = v15.f32[0];
  }
  else {
    float v25 = v15.f32[1];
  }
  if (*(float *)v24.i32 >= *(float *)&v24.i32[1]) {
    v24.i32[0] = v24.i32[1];
  }
  if (v25 < *(float *)v24.i32) {
    *(float *)v24.i32 = v25;
  }
  *a4 = *(float *)v24.i32;
  *a5 = (*(float *)v24.i32 == v22.f32[1]) | (2 * (*(float *)v24.i32 == v22.f32[0])) | (4
                                                                                     * (*(float *)v24.i32 == v15.f32[1]));
  return *a4 >= *a3;
}

BOOL MDLAABB::intersect(long long *a1, uint64_t a2, float32x2_t *a3, float *a4, float *a5, float *a6, unsigned char *a7)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v7 = *a1;
  v17[0] = a1[1];
  v17[1] = v7;
  a3->f32[0] = (float)(*(float *)&v17[*(unsigned __int8 *)(a2 + 48)] - *(float *)a2) * *(float *)(a2 + 32);
  *a4 = (float)(*(float *)&v17[*(unsigned __int8 *)(a2 + 48) ^ 1] - *(float *)a2) * *(float *)(a2 + 32);
  a3->f32[1] = (float)(*((float *)&v17[*(unsigned __int8 *)(a2 + 49)] + 1) - *(float *)(a2 + 4)) * *(float *)(a2 + 36);
  a4[1] = (float)(*((float *)&v17[*(unsigned __int8 *)(a2 + 49) ^ 1] + 1) - *(float *)(a2 + 4)) * *(float *)(a2 + 36);
  a3[1].f32[0] = (float)(*((float *)&v17[*(unsigned __int8 *)(a2 + 50)] + 2) - *(float *)(a2 + 8)) * *(float *)(a2 + 40);
  float v8 = (float)(*((float *)&v17[*(unsigned __int8 *)(a2 + 50) ^ 1] + 2) - *(float *)(a2 + 8)) * *(float *)(a2 + 40);
  long long v9 = *(_OWORD *)a4;
  a4[2] = v8;
  int8x8_t v10 = vbsl_s8((int8x8_t)vcgt_f32(*a3, *(float32x2_t *)&v9), *(int8x8_t *)&v9, (int8x8_t)*a3);
  if (*(float *)v10.i32 < *(float *)&v10.i32[1]) {
    v10.i32[0] = v10.i32[1];
  }
  if (v8 >= COERCE_FLOAT(*(void *)&a3[1])) {
    LODWORD(v8) = a3[1];
  }
  if (*(float *)v10.i32 >= v8) {
    float v8 = *(float *)v10.i32;
  }
  *a5 = v8;
  float32x2_t v11 = (float32x2_t)vrev64_s32((int32x2_t)*a3);
  float32x2_t v12 = (float32x2_t)vrev64_s32(*(int32x2_t *)a4);
  int8x8_t v13 = vbsl_s8((int8x8_t)vcgt_f32(v12, v11), (int8x8_t)v12, (int8x8_t)v11);
  float v14 = COERCE_FLOAT(*(void *)&a3[1]);
  if (v14 < COERCE_FLOAT(*((void *)a4 + 1))) {
    LODWORD(v14) = *((void *)a4 + 1);
  }
  if (*(float *)v13.i32 >= *(float *)&v13.i32[1]) {
    float v15 = *(float *)&v13.i32[1];
  }
  else {
    float v15 = *(float *)v13.i32;
  }
  if (v14 >= v15) {
    float v14 = v15;
  }
  *a6 = v14;
  *a7 = (v14 == *a4) | (2 * (v14 == a4[1])) | (4 * (v14 == a4[2]));
  return *a6 >= *a5;
}

void sub_20B1A804C()
{
  v1[0] = 0;
  v1[1] = 0;
  uint64_t v0 = v1;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  sub_20B07F87C((uint64_t)&v0, v1[0]);
}

void sub_20B1A8094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_20B1A812C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLMeshBufferMap;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B1A8250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A82E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A856C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A86B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLMeshBufferData;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B1A87EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A8EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A9058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_20B1A908C(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_path(a1, a2, a3);
  unint64_t v4 = v3;
  if (v3)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v13 = 0;
    id v5 = v3;
    long long v7 = (char *)objc_msgSend_cStringUsingEncoding_(v5, v6, 4);
    sub_20B07F8E0(__p, v7);
    if (v13 >= 0) {
      float v8 = __p;
    }
    else {
      float v8 = (void **)__p[0];
    }
    long long v9 = fopen((const char *)v8, "rb");
    BOOL v10 = v9 != 0;
    if (v9) {
      fclose(v9);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v10 = 0;
  }

  return v10;
}

void sub_20B1A9140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

FILE *sub_20B1A9168(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = objc_msgSend_path(a1, a2, a3);
  unint64_t v4 = v3;
  if (v3)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    id v5 = v3;
    long long v7 = (char *)objc_msgSend_cStringUsingEncoding_(v5, v6, 4);
    sub_20B07F8E0(__p, v7);
    if (v12 >= 0) {
      float v8 = __p;
    }
    else {
      float v8 = (void **)__p[0];
    }
    long long v9 = fopen((const char *)v8, "rb");
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v9 = 0;
  }

  return v9;
}

void sub_20B1A9210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B1A9238(void *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v5 = objc_msgSend_path(a1, a2, a3);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  id v8 = v5;
  long long v7 = (char *)objc_msgSend_cStringUsingEncoding_(v8, v6, 4);
  sub_20B07F8E0(a4, v7);
}

void sub_20B1A92A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

FILE *sub_20B1A92B4(void *a1, const char *a2, uint64_t a3)
{
  uint64_t result = sub_20B1A9168(a1, a2, a3);
  if (result)
  {
    unint64_t v4 = result;
    fseek(result, 0, 2);
    uint64_t v5 = MEMORY[0x210532990](v4);
    fseek(v4, 0, 0);
    fclose(v4);
    return (FILE *)v5;
  }
  return result;
}

void sub_20B1A9310(uint64_t a1, uint64_t *a2, void *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  id v10 = a3;
  uint64_t v13 = objc_msgSend_transform(v10, v11, v12);
  unint64_t v43 = v13;
  if (v13)
  {
    objc_msgSend_matrix(v13, v14, v15);
    uint64_t v16 = 0;
    v61[0] = v17;
    v61[1] = v18;
    v61[2] = v19;
    _OWORD v61[3] = v20;
    __n128 v52 = 0u;
    __n128 v53 = 0u;
    __n128 v54 = 0u;
    __n128 v55 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v52 + v16 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a4, COERCE_FLOAT(v61[v16])), (float32x4_t)a5, *(float32x2_t *)&v61[v16], 1), (float32x4_t)a6, (float32x4_t)v61[v16], 2), (float32x4_t)a7, (float32x4_t)v61[v16], 3);
      ++v16;
    }
    while (v16 != 4);
    a5 = v53;
    a4 = v52;
    a7 = v55;
    a6 = v54;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v23 = v10;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id v42 = v23;
    uint64_t v26 = objc_msgSend_submeshes(v23, v24, v25);
    uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v57, v63, 16);
    if (v28)
    {
      uint64_t v29 = *(void *)v58;
      do
      {
        for (uint64_t i = 0; i != v28; ++i)
        {
          if (*(void *)v58 != v29) {
            objc_enumerationMutation(v26);
          }
          uint64_t v31 = *(void **)(*((void *)&v57 + 1) + 8 * i);
          __n128 v55 = 0u;
          long long v56 = 0u;
          __n128 v53 = 0u;
          __n128 v54 = 0u;
          __n128 v52 = 0u;
          sub_20B1A9680(a2, (long long *)&v52);

          uint64_t v32 = a2[1];
          *(__n128 *)(v32 - 80) = a4;
          *(__n128 *)(v32 - 64) = a5;
          *(__n128 *)(v32 - 48) = a6;
          *(__n128 *)(v32 - 32) = a7;
          objc_storeStrong((id *)(a2[1] - 16), a3);
          objc_storeStrong((id *)(a2[1] - 8), v31);
        }
        uint64_t v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v33, (uint64_t)&v57, v63, 16);
      }
      while (v28);
    }
  }
  int v34 = objc_msgSend_children(v10, v21, v22);
  uint64_t v35 = v34;
  if (v34)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id v36 = v34;
    uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v37, (uint64_t)&v48, v62, 16);
    if (v38)
    {
      uint64_t v39 = *(void *)v49;
      do
      {
        for (uint64_t j = 0; j != v38; ++j)
        {
          if (*(void *)v49 != v39) {
            objc_enumerationMutation(v36);
          }
          sub_20B1A9310(a1, a2, *(void *)(*((void *)&v48 + 1) + 8 * j), a4, a5, a6, a7);
        }
        uint64_t v38 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v41, (uint64_t)&v48, v62, 16);
      }
      while (v38);
    }
  }
}

void sub_20B1A95FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B1A9680(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(_OWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v7 - *a1) >> 4);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x333333333333333) {
      sub_20B05D0BC();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x199999999999999) {
      unint64_t v16 = 0x333333333333333;
    }
    else {
      unint64_t v16 = v14;
    }
    v24[4] = result;
    long long v17 = (char *)sub_20B07D120(result, v16);
    long long v18 = &v17[80 * v13];
    v24[0] = v17;
    v24[1] = v18;
    v24[3] = &v17[80 * v19];
    long long v21 = *a2;
    long long v20 = a2[1];
    long long v22 = a2[3];
    *((_OWORD *)v18 + 2) = a2[2];
    *((_OWORD *)v18 + 3) = v22;
    *(_OWORD *)long long v18 = v21;
    *((_OWORD *)v18 + 1) = v20;
    long long v23 = a2[4];
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 9) = 0;
    *((_OWORD *)v18 + 4) = v23;
    v24[2] = v18 + 80;
    sub_20B1A9B40(a1, v24);
    uint64_t v12 = (_OWORD *)a1[1];
    uint64_t result = sub_20B1A9D78((uint64_t)v24);
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    long long v10 = a2[3];
    void v7[2] = a2[2];
    uint64_t v7[3] = v10;
    *long long v7 = v8;
    v7[1] = v9;
    long long v11 = a2[4];
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 9) = 0;
    v7[4] = v11;
    uint64_t v12 = v7 + 5;
    a1[1] = (uint64_t)(v7 + 5);
  }
  a1[1] = (uint64_t)v12;
  return result;
}

void sub_20B1A97A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B1A9D78((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B1A97B8(uint64_t a1, uint64_t *a2, void *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  id v9 = a3;
  uint64_t v12 = objc_msgSend_transform(v9, v10, v11);
  int v44 = v12;
  if (v12)
  {
    objc_msgSend_matrix(v12, v13, v14);
    uint64_t v15 = 0;
    v62[0] = v16;
    v62[1] = v17;
    v62[2] = v18;
    v62[3] = v19;
    __n128 v53 = 0u;
    __n128 v54 = 0u;
    __n128 v55 = 0u;
    __n128 v56 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v53 + v15 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a4, COERCE_FLOAT(v62[v15])), (float32x4_t)a5, *(float32x2_t *)&v62[v15], 1), (float32x4_t)a6, (float32x4_t)v62[v15], 2), (float32x4_t)a7, (float32x4_t)v62[v15], 3);
      ++v15;
    }
    while (v15 != 4);
    a5 = v54;
    a4 = v53;
    a7 = v56;
    a6 = v55;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v43 = v9;
    int8x8_t v24 = objc_msgSend_coarseMesh(v43, v22, v23);
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    __int16 v27 = objc_msgSend_submeshes(v24, v25, v26);
    uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v28, (uint64_t)&v58, v64, 16);
    if (v29)
    {
      uint64_t v30 = *(void *)v59;
      do
      {
        for (uint64_t i = 0; i != v29; ++i)
        {
          if (*(void *)v59 != v30) {
            objc_enumerationMutation(v27);
          }
          uint64_t v32 = *(void **)(*((void *)&v58 + 1) + 8 * i);
          __n128 v56 = 0u;
          long long v57 = 0u;
          __n128 v54 = 0u;
          __n128 v55 = 0u;
          __n128 v53 = 0u;
          sub_20B1A9680(a2, (long long *)&v53);

          uint64_t v33 = a2[1];
          *(__n128 *)(v33 - 80) = a4;
          *(__n128 *)(v33 - 64) = a5;
          *(__n128 *)(v33 - 48) = a6;
          *(__n128 *)(v33 - 32) = a7;
          objc_storeStrong((id *)(a2[1] - 16), v24);
          objc_storeStrong((id *)(a2[1] - 8), v32);
        }
        uint64_t v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(v27, v34, (uint64_t)&v58, v64, 16);
      }
      while (v29);
    }
  }
  uint64_t v35 = objc_msgSend_children(v9, v20, v21);
  id v36 = v35;
  if (v35)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    id v37 = v35;
    uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v38, (uint64_t)&v49, v63, 16);
    if (v39)
    {
      uint64_t v40 = *(void *)v50;
      do
      {
        for (uint64_t j = 0; j != v39; ++j)
        {
          if (*(void *)v50 != v40) {
            objc_enumerationMutation(v37);
          }
          sub_20B1A97B8(a1, a2, *(void *)(*((void *)&v49 + 1) + 8 * j), a4, a5, a6, a7);
        }
        uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v37, v42, (uint64_t)&v49, v63, 16);
      }
      while (v39);
    }
  }
}

void sub_20B1A9AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B1A9B40(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B1A9BB8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B1A9BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  long long v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  uint64_t v16 = 0;
  if (a3 == a5)
  {
    uint64_t v13 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 80);
      long long v10 = *(_OWORD *)(a3 - 64);
      long long v11 = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 - 48);
      *(_OWORD *)(v8 - 32) = v11;
      *(_OWORD *)(v8 - 80) = v9;
      *(_OWORD *)(v8 - 64) = v10;
      long long v12 = *(_OWORD *)(a3 - 16);
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(_OWORD *)(v8 - 16) = v12;
      v8 -= 80;
      v7 -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    *((void *)&v18 + 1) = v8;
    uint64_t v13 = v18;
  }
  LOBYTE(v16) = 1;
  sub_20B1A9C64((uint64_t)v15);
  return v13;
}

uint64_t sub_20B1A9C64(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B1A9C9C((uint64_t *)a1);
  }
  return a1;
}

void sub_20B1A9C9C(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v14 = v3;
  uint64_t v15 = v2;
  uint64_t v16 = v3;
  uint64_t v17 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v9 = v7;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  uint64_t v12 = v6;
  sub_20B1A9D14(v4, (uint64_t)v13, (uint64_t)v8);
}

void sub_20B1A9D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(void *)(a2 + 32); i != *(void *)(a3 + 32); *(void *)(a2 + 32) = i)
  {

    uint64_t i = *(void *)(a2 + 32) + 80;
  }
}

uint64_t sub_20B1A9D78(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B1A9DB0(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
  }
}

void sub_20B1A9ED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1A9F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B1AA03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B1AA084@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20B07F994(a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    a2[2] = *(unsigned __int8 **)(a1 + 16);
  }
  LODWORD(v3) = *((char *)a2 + 23);
  uint64_t v4 = (char *)*a2;
  if ((v3 & 0x80000000) == 0) {
    uint64_t v4 = (char *)a2;
  }
  unsigned int v5 = *v4;
  uint64_t v6 = MEMORY[0x263EF8318];
  if ((v5 & 0x80000000) != 0)
  {
    uint64_t result = __maskrune(v5, 0x100uLL);
    LOBYTE(v3) = *((unsigned char *)a2 + 23);
    if (result) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t result = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v5 + 60) & 0x100;
    if (result) {
      goto LABEL_16;
    }
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t v9 = *a2;
    int v8 = **a2;
    if (v8 == 58) {
      goto LABEL_16;
    }
  }
  else
  {
    int v8 = *(unsigned __int8 *)a2;
    if (v8 == 58) {
      goto LABEL_16;
    }
    uint64_t v9 = a2;
  }
  if (v8 != 95)
  {
    *uint64_t v9 = 95;
    LOBYTE(v3) = *((unsigned char *)a2 + 23);
  }
LABEL_16:
  BOOL v10 = (v3 & 0x80u) != 0;
  BOOL v11 = v10;
  unint64_t v3 = v3;
  if (v10) {
    unint64_t v3 = (unint64_t)a2[1];
  }
  if (v3 >= 2)
  {
    unint64_t v12 = 1;
    do
    {
      uint64_t v13 = (unsigned __int8 **)*a2;
      if (!v11) {
        uint64_t v13 = a2;
      }
      unsigned int v14 = *((char *)v13 + v12);
      if ((v14 & 0x80000000) != 0) {
        uint64_t result = __maskrune(*((char *)v13 + v12), 0x500uLL);
      }
      else {
        uint64_t result = *(_DWORD *)(v6 + 4 * v14 + 60) & 0x500;
      }
      if (!result
        && (v14 - 45 > 0x32
         || ((1 << (v14 - 45)) & 0x4000000002003) == 0))
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v17 = a2;
        }
        else {
          uint64_t v17 = (unsigned __int8 **)*a2;
        }
        *((unsigned char *)v17 + v12) = 95;
      }
      ++v12;
      BOOL v11 = *((char *)a2 + 23) < 0;
      unint64_t v16 = *((unsigned __int8 *)a2 + 23);
      if ((v16 & 0x80u) != 0) {
        unint64_t v16 = (unint64_t)a2[1];
      }
    }
    while (v12 < v16);
  }
  return result;
}

void sub_20B1AA234(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B1AA66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  long long __p = &a23;
  sub_20B0AF458((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_20B1AA8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1AAAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_20B1AABF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B1AACCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1AAED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1AAF90(void *a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  id v5 = a1;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  id v55 = v5;
  int v8 = objc_msgSend_transform(v5, v6, v7);
  float32x4_t v11 = a2[1];
  float32x4_t v64 = *a2;
  float32x4_t v65 = v11;
  float32x4_t v12 = a2[3];
  float32x4_t v66 = a2[2];
  float32x4_t v67 = v12;
  __n128 v53 = v8;
  if (v8)
  {
    objc_msgSend_matrix(v8, v9, v10);
    unint64_t v13 = 0;
    float32x4_t v68 = v14;
    float32x4_t v69 = v15;
    float32x4_t v70 = v16;
    float32x4_t v71 = v17;
    float32x4_t v72 = 0u;
    float32x4_t v73 = 0u;
    float32x4_t v74 = 0u;
    float32x4_t v75 = 0u;
    float32x4_t v18 = v64;
    float32x4_t v20 = v66;
    float32x4_t v19 = v65;
    float32x4_t v21 = v67;
    do
    {
      *(float32x4_t *)((char *)&v72 + v13) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_OWORD *)((char *)&v68 + v13))), v19, *(float32x2_t *)&v68.f32[v13 / 4], 1), v20, *(float32x4_t *)((char *)&v68 + v13), 2), v21, *(float32x4_t *)((char *)&v68 + v13), 3);
      v13 += 16;
    }
    while (v13 != 64);
    float32x4_t v64 = v72;
    float32x4_t v65 = v73;
    float32x4_t v66 = v74;
    float32x4_t v67 = v75;
  }
  __asm { FMOV            V1.4S, #-1.0 }
  *(_OWORD *)a3 = _Q1;
  *(_OWORD *)(a3 + 16) = 0u;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    __int16 v27 = v55;
  }
  else {
    __int16 v27 = 0;
  }
  id v54 = v27;
  if (v54)
  {
    objc_msgSend_boundingBox(v54, v28, v29);
    float32x4_t v72 = v30;
    float32x4_t v73 = v31;
    sub_20B0A25D0((float32x4_t *)a3, (long long *)&v72, &v64);
  }
  uint64_t v32 = objc_msgSend_children(v55, v28, v29);
  if (v32)
  {
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v52 = v32;
    id v33 = v32;
    uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v60, v76, 16);
    if (v37)
    {
      uint64_t v38 = *(void *)v61;
      do
      {
        for (uint64_t i = 0; i != v37; ++i)
        {
          if (*(void *)v61 != v38) {
            objc_enumerationMutation(v33);
          }
          uint64_t v40 = *(void **)(*((void *)&v60 + 1) + 8 * i);
          id v43 = objc_msgSend_transform(v40, v35, v36);
          if (v43)
          {
            int v44 = objc_msgSend_transform(v40, v41, v42);
            objc_msgSend_matrix(v44, v45, v46);
            unint64_t v51 = 0;
            float32x4_t v68 = v64;
            float32x4_t v69 = v65;
            float32x4_t v70 = v66;
            float32x4_t v71 = v67;
            float32x4_t v72 = 0u;
            float32x4_t v73 = 0u;
            float32x4_t v74 = 0u;
            float32x4_t v75 = 0u;
            do
            {
              *(float32x4_t *)((char *)&v72 + v51) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v47, COERCE_FLOAT(*(_OWORD *)((char *)&v68 + v51))), v48, *(float32x2_t *)&v68.f32[v51 / 4], 1), v49, *(float32x4_t *)((char *)&v68 + v51), 2), v50, *(float32x4_t *)((char *)&v68 + v51), 3);
              v51 += 16;
            }
            while (v51 != 64);
            float32x4_t v56 = v72;
            float32x4_t v57 = v73;
            float32x4_t v58 = v74;
            float32x4_t v59 = v75;
          }
          else
          {
            float32x4_t v56 = v64;
            float32x4_t v57 = v65;
            float32x4_t v58 = v66;
            float32x4_t v59 = v67;
          }

          sub_20B1AAF90(&v72, v40, &v56);
          sub_20B0A2540((float32x4_t *)a3, &v72);
        }
        uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v35, (uint64_t)&v60, v76, 16);
      }
      while (v37);
    }

    uint64_t v32 = v52;
  }
}

void sub_20B1AB288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_20B1AB41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B1AB468(uint64_t *a1, void *a2)
{
  uint64_t result = sub_20B1AB4E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20B1AB4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  LOBYTE(v13) = 1;
  sub_20B1AB580((uint64_t)v12);
  return a6;
}

uint64_t sub_20B1AB580(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_20B1AB5B8(a1);
  }
  return a1;
}

void sub_20B1AB5B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_20B1AB600(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20B1AB638(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_20B1AB690(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_20B05D0BC();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  float32x4_t v18 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_20B07D5B8(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  float32x4_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  float32x4_t v16 = v11;
  float32x4_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_20B07F994(v11, *(void **)a2, *((void *)a2 + 1));
    float32x4_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)float32x4_t v11 = v12;
  }
  float32x4_t v16 = v11 + 24;
  sub_20B1AB468(a1, v15);
  uint64_t v13 = a1[1];
  sub_20B1AB600((uint64_t)v15);
  return v13;
}

void sub_20B1AB7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_20B1AB600((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B1AB7B4(uint64_t a1)
{
  int v1 = a1;
  if ((a1 & 0x1000) != 0) {
    return 4 * (((a1 - 593924) & 0xFFFFFFFFFFFEFFFFLL) == 0);
  }
  uint64_t result = 0;
  switch(HIWORD(v1))
  {
    case 1:
    case 2:
      uint64_t result = v1;
      break;
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xB:
      uint64_t result = 2 * v1;
      break;
    case 9:
    case 0xA:
    case 0xC:
      uint64_t result = 4 * v1;
      break;
    default:
      return result;
  }
  return result;
}

float sub_20B1AB850(int a1)
{
  unsigned int v1 = (__int16)a1 & 0x80000000;
  unsigned int v2 = a1 & 0x3FF;
  int v3 = a1 & 0x7C00;
  if ((a1 & 0x7C00) == 0)
  {
    unsigned int v5 = __clz(v2);
    int v6 = a1 << (v5 - 21);
    int v7 = 1124073472 - (v5 << 23);
    int v8 = v6 & 0x3FE;
    if ((a1 & 0x3FF) != 0)
    {
      unsigned int v2 = v8;
    }
    else
    {
      int v7 = 0;
      unsigned int v2 = 0;
    }
    goto LABEL_9;
  }
  if (v3 != 31744)
  {
    int v7 = (v3 << 13) + 939524096;
LABEL_9:
    int v4 = v7 | (v2 << 13) | v1;
    return *(float *)&v4;
  }
  int v4 = v1 | 0x7F800000;
  if ((a1 & 0x3FF) != 0) {
    int v4 = (__int16)a1 | 0x7FFFFFFF;
  }
  return *(float *)&v4;
}

uint64_t sub_20B1AB8C4(float a1)
{
  int v1 = HIWORD(LODWORD(a1)) & 0x8000;
  unsigned int v2 = LODWORD(a1) & 0x7F800000;
  unsigned int v3 = LODWORD(a1) & 0x7FFFFF;
  if ((LODWORD(a1) >> 23) < 0x8Fu)
  {
    unsigned int v4 = v1 | (((v2 + 0x8000000) | v3) >> 13);
    v1 |= v3 >> (((939524096 - v2) >> 23) + 14);
    if (v2 > 0x38000000) {
      LOWORD(v1) = v4;
    }
  }
  else if (v3 && v2 == 2139095040)
  {
    LOWORD(v1) = HIWORD(a1) | 0x7FFF;
  }
  else
  {
    LOWORD(v1) = v1 | 0x7C00;
  }
  return (unsigned __int16)v1;
}

void sub_20B1AB93C(void *a1, float *a2, void *a3, float *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v8 = a3;
  bzero(v45, 0x3FCuLL);
  unsigned __int8 v11 = objc_msgSend_format(v8, v9, v10);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & (v11 < 5u)) == 1)
  {
    objc_msgSend_initializationValue(v8, v12, v13);
    if (v11)
    {
      uint64_t v15 = 0;
      do
      {
        long long v44 = v14;
        v45[v15] = *(float *)((unint64_t)&v44 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
        ++v15;
      }
      while (v11 != v15);
    }
  }
  float32x4_t v16 = objc_msgSend_map(v7, v12, v13);
  id v17 = objc_alloc(MEMORY[0x263EFF990]);
  uint64_t v20 = objc_msgSend_bytes(v16, v18, v19);
  uint64_t v23 = objc_msgSend_length(v7, v21, v22);
  id v25 = objc_msgSend_initWithBytes_length_(v17, v24, v20, v23);
  uint64_t v28 = objc_msgSend_mutableBytes(v25, v26, v27);
  uint64_t v31 = objc_msgSend_offset(v8, v29, v30);
  uint64_t v34 = objc_msgSend_format(v8, v32, v33);
  uint64_t v37 = (float *)objc_msgSend_length(v7, v35, v36);
  unint64_t v40 = objc_msgSend_length(v7, v38, v39);
  sub_20B1ABB50((void *)(v28 + v31), v34, a2, 0, (float *)0xC0000, 0, v45, a4, v41, v42, v37, v40);
  objc_msgSend_fillData_offset_(v7, v43, (uint64_t)v25, 0);
}

void sub_20B1ABB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1ABB50(void *a1, uint64_t a2, float *a3, const void *a4, float *a5, float *a6, float *a7, float *a8, double a9, float a10, float *a11, unint64_t a12)
{
  if (a2 && a5)
  {
    if ((float *)a2 == a5 && a3 == a6 && (float *)sub_20B1AB7B4(a2) == a3)
    {
      if (a12 >= (unint64_t)a11) {
        size_t v20 = (size_t)a11;
      }
      else {
        size_t v20 = a12;
      }
      if (v20 >= (void)a8 * (void)a3) {
        size_t v21 = (void)a8 * (void)a3;
      }
      else {
        size_t v21 = v20;
      }
      memcpy(a1, a4, v21);
    }
    else
    {
      v26[0] = (float *)a1;
      v26[1] = (float *)a2;
      void v26[2] = a3;
      void v26[3] = (float *)a4;
      v26[4] = a5;
      v26[5] = a6;
      v26[6] = a11;
      v26[7] = a7;
      v26[8] = a8;
      if ((a2 & 0x1000) != 0)
      {
        if (a2 == 593924)
        {
          sub_20B1AC9AC(v26, 1.0);
        }
        else if (a2 == 659460)
        {
          sub_20B1AC06C(v26, 1.0);
        }
      }
      else
      {
        switch(((unint64_t)(a2 & 0xFFFF0000) - 0x10000) >> 16)
        {
          case 0uLL:
            float v22 = 1.0;
            goto LABEL_24;
          case 1uLL:
            float v23 = 1.0;
            goto LABEL_26;
          case 2uLL:
            float v22 = 255.0;
LABEL_24:
            sub_20B1B13DC((uint64_t)v26, v22);
            return;
          case 3uLL:
            float v23 = 127.0;
LABEL_26:
            sub_20B1AE29C((uint64_t)v26, v23);
            return;
          case 4uLL:
            float v24 = 1.0;
            goto LABEL_30;
          case 5uLL:
            float v25 = 1.0;
            goto LABEL_32;
          case 6uLL:
            float v24 = 65535.0;
LABEL_30:
            sub_20B1B24D4(v26, v24, a10);
            break;
          case 7uLL:
            float v25 = 32767.0;
LABEL_32:
            sub_20B1AF394(v26, v25, a10);
            break;
          case 8uLL:
            sub_20B1B34E8(v26, 1.0, a10);
            break;
          case 9uLL:
            sub_20B1B03A8(v26, 1.0, a10);
            break;
          case 0xAuLL:
            sub_20B1B451C((uint64_t)v26, 1.0);
            break;
          case 0xBuLL:
            sub_20B1AD2B0(v26, 1.0, a10);
            break;
          default:
            return;
        }
      }
    }
  }
}

void sub_20B1ABDA8(uint64_t a1, float *a2, void *a3, uint64_t a4, float *a5, void *a6, float *a7, unint64_t a8, float *a9)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  id v15 = a3;
  id v16 = a6;
  bzero(v38, 0x3FCuLL);
  unsigned __int8 v19 = objc_msgSend_format(v15, v17, v18);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & (v19 < 5u)) == 1)
  {
    objc_msgSend_initializationValue(v15, v20, v21);
    if (v19)
    {
      uint64_t v23 = 0;
      do
      {
        long long v37 = v22;
        v38[v23] = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
        ++v23;
      }
      while (v19 != v23);
    }
  }
  uint64_t v24 = objc_msgSend_offset(v16, v20, v21);
  uint64_t v27 = objc_msgSend_offset(v15, v25, v26);
  uint64_t v30 = objc_msgSend_format(v15, v28, v29);
  uint64_t v33 = (float *)objc_msgSend_format(v16, v31, v32);
  sub_20B1ABB50((void *)(a1 + v27), v30, a2, (const void *)(a4 + v24), v33, a5, v38, a7, v34, v35, a9, a8);
}

void sub_20B1ABF24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1ABF44(void *a1, float *a2, void *a3, void *a4, float *a5, void *a6, float *a7, unint64_t a8, float *a9)
{
  id v30 = a1;
  id v16 = a3;
  id v17 = a6;
  size_t v20 = objc_msgSend_map(a4, v18, v19);
  uint64_t v23 = objc_msgSend_bytes(v20, v21, v22);

  uint64_t v26 = objc_msgSend_map(v30, v24, v25);
  uint64_t v29 = objc_msgSend_bytes(v26, v27, v28);

  sub_20B1ABDA8(v29, a2, v16, v23, a5, v17, a7, a8, a9);
}

void sub_20B1AC03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B1AC06C(void *a1, float a2)
{
  if ((a1[4] & 0x1000) == 0)
  {
    switch(((a1[4] & 0xFFFF0000uLL) - 0x10000) >> 16)
    {
      case 0uLL:
        if (a2 == 1.0)
        {
          uint64_t v3 = a1[8];
          if (v3)
          {
            unsigned int v4 = a1[4];
            uint64_t v5 = a1[2];
            uint64_t v6 = a1[5];
            id v7 = (_DWORD *)(*a1 + 8);
            id v8 = (unsigned __int8 *)(a1[3] + 1);
            do
            {
              *(v7 - 2) = 2143289344 * *(v8 - 1);
              if (v4 >= 2)
              {
                *(v7 - 1) |= (2093056 * *v8) & 0x3FF000;
                if (v4 != 2)
                {
                  *v7 |= (2044 * v8[1]) & 0xFFC;
                  if (v4 >= 4) {
                    v7[1] |= v8[2] & 3;
                  }
                }
              }
              id v7 = (_DWORD *)((char *)v7 + v5);
              v8 += v6;
              --v3;
            }
            while (v3);
          }
        }
        else
        {
          sub_20B1B58F4((uint64_t)nullsub_53, (uint64_t)a1);
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          uint64_t v9 = a1[8];
          if (v9)
          {
            unsigned int v10 = a1[4];
            uint64_t v11 = a1[2];
            uint64_t v12 = a1[5];
            uint64_t v13 = (_DWORD *)(*a1 + 8);
            long long v14 = (char *)(a1[3] + 1);
            do
            {
              *(v13 - 2) = 2143289344 * *(v14 - 1);
              if (v10 >= 2)
              {
                *(v13 - 1) |= (2093056 * *v14) & 0x3FF000;
                if (v10 != 2)
                {
                  *v13 |= (2044 * v14[1]) & 0xFFC;
                  if (v10 >= 4) {
                    v13[1] |= v14[2] & 3;
                  }
                }
              }
              uint64_t v13 = (_DWORD *)((char *)v13 + v11);
              v14 += v12;
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          sub_20B1B5848((uint64_t)nullsub_52, (uint64_t)a1);
        }
        break;
      case 2uLL:
        uint64_t v15 = a1[8];
        if (v15)
        {
          unsigned int v16 = a1[4];
          uint64_t v17 = a1[2];
          uint64_t v18 = a1[5];
          uint64_t v19 = (_DWORD *)(*a1 + 8);
          size_t v20 = (unsigned __int8 *)(a1[3] + 1);
          do
          {
            *(v19 - 2) = 2143289344 * *(v20 - 1);
            if (v16 >= 2)
            {
              *(v19 - 1) |= (2093056 * *v20) & 0x3FF000;
              if (v16 != 2)
              {
                *v19 |= (2044 * v20[1]) & 0xFFC;
                if (v16 >= 4) {
                  v19[1] |= v20[2] & 3;
                }
              }
            }
            uint64_t v19 = (_DWORD *)((char *)v19 + v17);
            v20 += v18;
            --v15;
          }
          while (v15);
        }
        break;
      case 3uLL:
        uint64_t v21 = a1[8];
        if (v21)
        {
          unsigned int v22 = a1[4];
          uint64_t v23 = a1[2];
          uint64_t v24 = a1[5];
          uint64_t v25 = (_DWORD *)(*a1 + 8);
          uint64_t v26 = (char *)(a1[3] + 1);
          do
          {
            *(v25 - 2) = 2143289344 * *(v26 - 1);
            if (v22 >= 2)
            {
              *(v25 - 1) |= (2093056 * *v26) & 0x3FF000;
              if (v22 != 2)
              {
                *v25 |= (2044 * v26[1]) & 0xFFC;
                if (v22 >= 4) {
                  v25[1] |= v26[2] & 3;
                }
              }
            }
            uint64_t v25 = (_DWORD *)((char *)v25 + v23);
            v26 += v24;
            --v21;
          }
          while (v21);
        }
        break;
      case 4uLL:
        if (a2 != 1.0)
        {
          float32x4_t v75 = nullsub_55;
          goto LABEL_109;
        }
        uint64_t v27 = a1[8];
        if (v27)
        {
          unsigned int v28 = a1[4];
          uint64_t v29 = a1[2];
          uint64_t v30 = a1[5];
          uint64_t v31 = (_DWORD *)(*a1 + 8);
          uint64_t v32 = (_WORD *)(a1[3] + 4);
          do
          {
            *(v31 - 2) = 2143289344 * (unsigned __int16)*(v32 - 2);
            if (v28 >= 2)
            {
              *(v31 - 1) |= ((511 * *(v32 - 1)) & 0x3FF) << 12;
              if (v28 != 2)
              {
                *v31 |= (2044 * *v32) & 0xFFC;
                if (v28 >= 4) {
                  v31[1] |= v32[1] & 3;
                }
              }
            }
            uint64_t v31 = (_DWORD *)((char *)v31 + v29);
            uint64_t v32 = (_WORD *)((char *)v32 + v30);
            --v27;
          }
          while (v27);
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          uint64_t v33 = a1[8];
          if (v33)
          {
            unsigned int v34 = a1[4];
            uint64_t v35 = a1[2];
            uint64_t v36 = a1[5];
            long long v37 = (_DWORD *)(*a1 + 8);
            uint64_t v38 = (_WORD *)(a1[3] + 4);
            do
            {
              *(v37 - 2) = 2143289344 * (unsigned __int16)*(v38 - 2);
              if (v34 >= 2)
              {
                *(v37 - 1) |= ((511 * *(v38 - 1)) & 0x3FF) << 12;
                if (v34 != 2)
                {
                  *v37 |= (2044 * *v38) & 0xFFC;
                  if (v34 >= 4) {
                    v37[1] |= v38[1] & 3;
                  }
                }
              }
              long long v37 = (_DWORD *)((char *)v37 + v35);
              uint64_t v38 = (_WORD *)((char *)v38 + v36);
              --v33;
            }
            while (v33);
          }
        }
        else
        {
          float32x4_t v75 = nullsub_54;
LABEL_109:
          sub_20B1B59A0((uint64_t)v75, (uint64_t)a1);
        }
        break;
      case 6uLL:
        uint64_t v39 = a1[8];
        if (v39)
        {
          unsigned int v40 = a1[4];
          uint64_t v41 = a1[2];
          uint64_t v42 = a1[5];
          id v43 = (_DWORD *)(*a1 + 8);
          long long v44 = (_WORD *)(a1[3] + 4);
          do
          {
            *(v43 - 2) = 2143289344 * (unsigned __int16)*(v44 - 2);
            if (v40 >= 2)
            {
              *(v43 - 1) |= ((511 * *(v44 - 1)) & 0x3FF) << 12;
              if (v40 != 2)
              {
                *v43 |= (2044 * *v44) & 0xFFC;
                if (v40 >= 4) {
                  v43[1] |= v44[1] & 3;
                }
              }
            }
            id v43 = (_DWORD *)((char *)v43 + v41);
            long long v44 = (_WORD *)((char *)v44 + v42);
            --v39;
          }
          while (v39);
        }
        break;
      case 7uLL:
        uint64_t v45 = a1[8];
        if (v45)
        {
          unsigned int v46 = a1[4];
          uint64_t v47 = a1[2];
          uint64_t v48 = a1[5];
          float32x4_t v49 = (_DWORD *)(*a1 + 8);
          float32x4_t v50 = (_WORD *)(a1[3] + 4);
          do
          {
            *(v49 - 2) = 2143289344 * (unsigned __int16)*(v50 - 2);
            if (v46 >= 2)
            {
              *(v49 - 1) |= ((511 * *(v50 - 1)) & 0x3FF) << 12;
              if (v46 != 2)
              {
                *v49 |= (2044 * *v50) & 0xFFC;
                if (v46 >= 4) {
                  v49[1] |= v50[1] & 3;
                }
              }
            }
            float32x4_t v49 = (_DWORD *)((char *)v49 + v47);
            float32x4_t v50 = (_WORD *)((char *)v50 + v48);
            --v45;
          }
          while (v45);
        }
        break;
      case 8uLL:
        if (a2 != 1.0) {
          goto LABEL_111;
        }
        uint64_t v51 = a1[8];
        if (v51)
        {
          unsigned int v52 = a1[4];
          uint64_t v53 = a1[2];
          uint64_t v54 = a1[5];
          id v55 = (_DWORD *)(*a1 + 8);
          uint64_t v56 = a1[3] + 8;
          do
          {
            *(v55 - 2) = 2143289344 * *(_DWORD *)(v56 - 8);
            if (v52 >= 2)
            {
              *(v55 - 1) |= (2093056 * *(_DWORD *)(v56 - 4)) & 0x3FF000;
              if (v52 != 2)
              {
                *v55 |= (2044 * *(_WORD *)v56) & 0xFFC;
                if (v52 >= 4) {
                  v55[1] |= *(_DWORD *)(v56 + 4) & 3;
                }
              }
            }
            id v55 = (_DWORD *)((char *)v55 + v53);
            v56 += v54;
            --v51;
          }
          while (v51);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          uint64_t v57 = a1[8];
          if (v57)
          {
            unsigned int v58 = a1[4];
            uint64_t v59 = a1[2];
            uint64_t v60 = a1[5];
            long long v61 = (_DWORD *)(*a1 + 8);
            uint64_t v62 = a1[3] + 8;
            do
            {
              *(v61 - 2) = 2143289344 * *(_DWORD *)(v62 - 8);
              if (v58 >= 2)
              {
                *(v61 - 1) |= (2093056 * *(_DWORD *)(v62 - 4)) & 0x3FF000;
                if (v58 != 2)
                {
                  *v61 |= (2044 * *(_WORD *)v62) & 0xFFC;
                  if (v58 >= 4) {
                    v61[1] |= *(_DWORD *)(v62 + 4) & 3;
                  }
                }
              }
              long long v61 = (_DWORD *)((char *)v61 + v59);
              v62 += v60;
              --v57;
            }
            while (v57);
          }
        }
        else
        {
LABEL_111:
          sub_20B1B5A50((uint64_t)nullsub_56, (uint64_t)a1);
        }
        break;
      case 0xAuLL:
        uint64_t v63 = a1[8];
        if (v63)
        {
          unsigned int v64 = a1[4];
          uint64_t v65 = a1[2];
          uint64_t v66 = a1[5];
          float32x4_t v67 = (_DWORD *)(*a1 + 8);
          float32x4_t v68 = (_WORD *)(a1[3] + 4);
          do
          {
            *(v67 - 2) = 2143289344 * (unsigned __int16)*(v68 - 2);
            if (v64 >= 2)
            {
              *(v67 - 1) |= ((511 * *(v68 - 1)) & 0x3FF) << 12;
              if (v64 != 2)
              {
                *v67 |= (2044 * *v68) & 0xFFC;
                if (v64 >= 4) {
                  v67[1] |= v68[1] & 3;
                }
              }
            }
            float32x4_t v67 = (_DWORD *)((char *)v67 + v65);
            float32x4_t v68 = (_WORD *)((char *)v68 + v66);
            --v63;
          }
          while (v63);
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          uint64_t v69 = a1[8];
          if (v69)
          {
            unsigned int v70 = a1[4];
            uint64_t v71 = a1[2];
            uint64_t v72 = a1[5];
            float32x4_t v73 = (_DWORD *)(*a1 + 8);
            float32x4_t v74 = (float *)(a1[3] + 8);
            do
            {
              *(v73 - 2) = (float)(*(v74 - 2) * 511.0) << 22;
              if (v70 >= 2)
              {
                *(v73 - 1) |= ((float)(*(v74 - 1) * 511.0) & 0x3FF) << 12;
                if (v70 != 2)
                {
                  *v73 |= 4 * ((float)(*v74 * 511.0) & 0x3FF);
                  if (v70 >= 4) {
                    v73[1] |= v74[1] & 3;
                  }
                }
              }
              float32x4_t v73 = (_DWORD *)((char *)v73 + v71);
              float32x4_t v74 = (float *)((char *)v74 + v72);
              --v69;
            }
            while (v69);
          }
        }
        else
        {
          sub_20B1B578C((uint64_t)nullsub_51, (uint64_t)a1);
        }
        break;
      default:
        return;
    }
  }
}

void sub_20B1AC9AC(void *a1, float a2)
{
  if ((a1[4] & 0x1000) == 0)
  {
    switch(((a1[4] & 0xFFFF0000uLL) - 0x10000) >> 16)
    {
      case 0uLL:
        if (a2 == 1.0)
        {
          uint64_t v3 = a1[8];
          if (v3)
          {
            unsigned int v4 = a1[4];
            uint64_t v5 = a1[2];
            uint64_t v6 = a1[5];
            id v7 = (_DWORD *)(*a1 + 8);
            id v8 = (unsigned __int8 *)(a1[3] + 1);
            do
            {
              *(v7 - 2) = -4194304 * *(v8 - 1);
              if (v4 >= 2)
              {
                *(v7 - 1) |= (-4096 * *v8) & 0x3FF000;
                if (v4 != 2)
                {
                  *v7 |= (-4 * v8[1]) & 0xFFC;
                  if (v4 >= 4) {
                    v7[1] |= -v8[2] & 3;
                  }
                }
              }
              id v7 = (_DWORD *)((char *)v7 + v5);
              v8 += v6;
              --v3;
            }
            while (v3);
          }
        }
        else
        {
          sub_20B1B5C64((uint64_t)nullsub_59, (uint64_t)a1);
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          uint64_t v9 = a1[8];
          if (v9)
          {
            unsigned int v10 = a1[4];
            uint64_t v11 = a1[2];
            uint64_t v12 = a1[5];
            uint64_t v13 = (_DWORD *)(*a1 + 8);
            long long v14 = (char *)(a1[3] + 1);
            do
            {
              *(v13 - 2) = -4194304 * *(v14 - 1);
              if (v10 >= 2)
              {
                *(v13 - 1) |= (-4096 * *v14) & 0x3FF000;
                if (v10 != 2)
                {
                  *v13 |= (-4 * v14[1]) & 0xFFC;
                  if (v10 >= 4) {
                    v13[1] |= -v14[2] & 3;
                  }
                }
              }
              uint64_t v13 = (_DWORD *)((char *)v13 + v11);
              v14 += v12;
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          sub_20B1B5BC0((uint64_t)nullsub_58, (uint64_t)a1);
        }
        break;
      case 2uLL:
        uint64_t v15 = a1[8];
        if (v15)
        {
          unsigned int v16 = a1[4];
          uint64_t v17 = a1[2];
          uint64_t v18 = a1[5];
          uint64_t v19 = (_DWORD *)(*a1 + 8);
          size_t v20 = (unsigned __int8 *)(a1[3] + 1);
          do
          {
            *(v19 - 2) = -4194304 * *(v20 - 1);
            if (v16 >= 2)
            {
              *(v19 - 1) |= (-4096 * *v20) & 0x3FF000;
              if (v16 != 2)
              {
                *v19 |= (-4 * v20[1]) & 0xFFC;
                if (v16 >= 4) {
                  v19[1] |= -v20[2] & 3;
                }
              }
            }
            uint64_t v19 = (_DWORD *)((char *)v19 + v17);
            v20 += v18;
            --v15;
          }
          while (v15);
        }
        break;
      case 3uLL:
        uint64_t v21 = a1[8];
        if (v21)
        {
          unsigned int v22 = a1[4];
          uint64_t v23 = a1[2];
          uint64_t v24 = a1[5];
          uint64_t v25 = (_DWORD *)(*a1 + 8);
          uint64_t v26 = (char *)(a1[3] + 1);
          do
          {
            *(v25 - 2) = -4194304 * *(v26 - 1);
            if (v22 >= 2)
            {
              *(v25 - 1) |= (-4096 * *v26) & 0x3FF000;
              if (v22 != 2)
              {
                *v25 |= (-4 * v26[1]) & 0xFFC;
                if (v22 >= 4) {
                  v25[1] |= -v26[2] & 3;
                }
              }
            }
            uint64_t v25 = (_DWORD *)((char *)v25 + v23);
            v26 += v24;
            --v21;
          }
          while (v21);
        }
        break;
      case 4uLL:
        if (a2 != 1.0)
        {
          float32x4_t v75 = nullsub_61;
          goto LABEL_109;
        }
        uint64_t v27 = a1[8];
        if (v27)
        {
          unsigned int v28 = a1[4];
          uint64_t v29 = a1[2];
          uint64_t v30 = a1[5];
          uint64_t v31 = (_DWORD *)(*a1 + 8);
          uint64_t v32 = (unsigned __int16 *)(a1[3] + 4);
          do
          {
            *(v31 - 2) = -4194304 * *(v32 - 2);
            if (v28 >= 2)
            {
              *(v31 - 1) |= (-*(v32 - 1) & 0x3FF) << 12;
              if (v28 != 2)
              {
                *v31 |= (-4 * *v32) & 0xFFC;
                if (v28 >= 4) {
                  v31[1] |= -v32[1] & 3;
                }
              }
            }
            uint64_t v31 = (_DWORD *)((char *)v31 + v29);
            uint64_t v32 = (unsigned __int16 *)((char *)v32 + v30);
            --v27;
          }
          while (v27);
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          uint64_t v33 = a1[8];
          if (v33)
          {
            unsigned int v34 = a1[4];
            uint64_t v35 = a1[2];
            uint64_t v36 = a1[5];
            long long v37 = (_DWORD *)(*a1 + 8);
            uint64_t v38 = (unsigned __int16 *)(a1[3] + 4);
            do
            {
              *(v37 - 2) = -4194304 * *(v38 - 2);
              if (v34 >= 2)
              {
                *(v37 - 1) |= (-*(v38 - 1) & 0x3FF) << 12;
                if (v34 != 2)
                {
                  *v37 |= (-4 * *v38) & 0xFFC;
                  if (v34 >= 4) {
                    v37[1] |= -v38[1] & 3;
                  }
                }
              }
              long long v37 = (_DWORD *)((char *)v37 + v35);
              uint64_t v38 = (unsigned __int16 *)((char *)v38 + v36);
              --v33;
            }
            while (v33);
          }
        }
        else
        {
          float32x4_t v75 = nullsub_60;
LABEL_109:
          sub_20B1B5D08((uint64_t)v75, (uint64_t)a1);
        }
        break;
      case 6uLL:
        uint64_t v39 = a1[8];
        if (v39)
        {
          unsigned int v40 = a1[4];
          uint64_t v41 = a1[2];
          uint64_t v42 = a1[5];
          id v43 = (_DWORD *)(*a1 + 8);
          long long v44 = (unsigned __int16 *)(a1[3] + 4);
          do
          {
            *(v43 - 2) = -4194304 * *(v44 - 2);
            if (v40 >= 2)
            {
              *(v43 - 1) |= (-*(v44 - 1) & 0x3FF) << 12;
              if (v40 != 2)
              {
                *v43 |= (-4 * *v44) & 0xFFC;
                if (v40 >= 4) {
                  v43[1] |= -v44[1] & 3;
                }
              }
            }
            id v43 = (_DWORD *)((char *)v43 + v41);
            long long v44 = (unsigned __int16 *)((char *)v44 + v42);
            --v39;
          }
          while (v39);
        }
        break;
      case 7uLL:
        uint64_t v45 = a1[8];
        if (v45)
        {
          unsigned int v46 = a1[4];
          uint64_t v47 = a1[2];
          uint64_t v48 = a1[5];
          float32x4_t v49 = (_DWORD *)(*a1 + 8);
          float32x4_t v50 = (unsigned __int16 *)(a1[3] + 4);
          do
          {
            *(v49 - 2) = -4194304 * *(v50 - 2);
            if (v46 >= 2)
            {
              *(v49 - 1) |= (-*(v50 - 1) & 0x3FF) << 12;
              if (v46 != 2)
              {
                *v49 |= (-4 * *v50) & 0xFFC;
                if (v46 >= 4) {
                  v49[1] |= -v50[1] & 3;
                }
              }
            }
            float32x4_t v49 = (_DWORD *)((char *)v49 + v47);
            float32x4_t v50 = (unsigned __int16 *)((char *)v50 + v48);
            --v45;
          }
          while (v45);
        }
        break;
      case 8uLL:
        if (a2 != 1.0) {
          goto LABEL_111;
        }
        uint64_t v51 = a1[8];
        if (v51)
        {
          unsigned int v52 = a1[4];
          uint64_t v53 = a1[2];
          uint64_t v54 = a1[5];
          id v55 = (_DWORD *)(*a1 + 8);
          uint64_t v56 = (_DWORD *)(a1[3] + 8);
          do
          {
            *(v55 - 2) = -4194304 * *(v56 - 2);
            if (v52 >= 2)
            {
              *(v55 - 1) |= (-4096 * *(v56 - 1)) & 0x3FF000;
              if (v52 != 2)
              {
                *v55 |= (-4 * *v56) & 0xFFC;
                if (v52 >= 4) {
                  v55[1] |= -v56[1] & 3;
                }
              }
            }
            id v55 = (_DWORD *)((char *)v55 + v53);
            uint64_t v56 = (_DWORD *)((char *)v56 + v54);
            --v51;
          }
          while (v51);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          uint64_t v57 = a1[8];
          if (v57)
          {
            unsigned int v58 = a1[4];
            uint64_t v59 = a1[2];
            uint64_t v60 = a1[5];
            long long v61 = (_DWORD *)(*a1 + 8);
            uint64_t v62 = (_DWORD *)(a1[3] + 8);
            do
            {
              *(v61 - 2) = -4194304 * *(v62 - 2);
              if (v58 >= 2)
              {
                *(v61 - 1) |= (-4096 * *(v62 - 1)) & 0x3FF000;
                if (v58 != 2)
                {
                  *v61 |= (-4 * *v62) & 0xFFC;
                  if (v58 >= 4) {
                    v61[1] |= -v62[1] & 3;
                  }
                }
              }
              long long v61 = (_DWORD *)((char *)v61 + v59);
              uint64_t v62 = (_DWORD *)((char *)v62 + v60);
              --v57;
            }
            while (v57);
          }
        }
        else
        {
LABEL_111:
          sub_20B1B5DB4((uint64_t)nullsub_62, (uint64_t)a1);
        }
        break;
      case 0xAuLL:
        uint64_t v63 = a1[8];
        if (v63)
        {
          unsigned int v64 = a1[4];
          uint64_t v65 = a1[2];
          uint64_t v66 = a1[5];
          float32x4_t v67 = (_DWORD *)(*a1 + 8);
          float32x4_t v68 = (unsigned __int16 *)(a1[3] + 4);
          do
          {
            *(v67 - 2) = -4194304 * *(v68 - 2);
            if (v64 >= 2)
            {
              *(v67 - 1) |= (-*(v68 - 1) & 0x3FF) << 12;
              if (v64 != 2)
              {
                *v67 |= (-4 * *v68) & 0xFFC;
                if (v64 >= 4) {
                  v67[1] |= -v68[1] & 3;
                }
              }
            }
            float32x4_t v67 = (_DWORD *)((char *)v67 + v65);
            float32x4_t v68 = (unsigned __int16 *)((char *)v68 + v66);
            --v63;
          }
          while (v63);
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          uint64_t v69 = a1[8];
          if (v69)
          {
            unsigned int v70 = a1[4];
            uint64_t v71 = a1[2];
            uint64_t v72 = a1[5];
            float32x4_t v73 = (_DWORD *)(*a1 + 8);
            float32x4_t v74 = (float *)(a1[3] + 8);
            do
            {
              *(v73 - 2) = (float)(*(v74 - 2) * 1023.0) << 22;
              if (v70 >= 2)
              {
                *(v73 - 1) |= ((float)(*(v74 - 1) * 1023.0) & 0x3FF) << 12;
                if (v70 != 2)
                {
                  *v73 |= 4 * ((float)(*v74 * 1023.0) & 0x3FF);
                  if (v70 >= 4) {
                    v73[1] |= (float)(v74[1] * 3.0) & 3;
                  }
                }
              }
              float32x4_t v73 = (_DWORD *)((char *)v73 + v71);
              float32x4_t v74 = (float *)((char *)v74 + v72);
              --v69;
            }
            while (v69);
          }
        }
        else
        {
          sub_20B1B5AFC((uint64_t)nullsub_57, (uint64_t)a1);
        }
        break;
      default:
        return;
    }
  }
}

void sub_20B1AD2B0(float **a1, float a2, float a3)
{
  float v3 = a2;
  uint64_t v5 = a1[4];
  if (((unsigned __int16)v5 & 0x1000) != 0)
  {
    if (v5 == (float *)593924)
    {
      uint64_t v29 = a1[8];
      if (v29)
      {
        float v30 = a2 * 0.00097752;
        unsigned int v31 = *((unsigned __int8 *)a1 + 8);
        uint64_t v32 = a1[2];
        uint64_t v33 = a1[5];
        unsigned int v34 = *a1 + 2;
        uint64_t v35 = a1[3] + 2;
        do
        {
          *(v34 - 2) = v30 * (float)(*(v35 - 2) >> 22);
          if (v31 >= 2)
          {
            *(v34 - 1) = v30 * (float)((*(v35 - 1) >> 12) & 0x3FF);
            if (v31 != 2)
            {
              *unsigned int v34 = v30 * (float)((*v35 >> 2) & 0x3FF);
              if (v31 >= 4) {
                v34[1] = (float)(v3 * 0.33333) * (float)(v35[1] & 3);
              }
            }
          }
          unsigned int v34 = (float *)((char *)v32 + (void)v34);
          uint64_t v35 = (_DWORD *)((char *)v33 + (void)v35);
          uint64_t v29 = (float *)((char *)v29 - 1);
        }
        while (v29);
      }
    }
    else if (v5 == (float *)659460)
    {
      unsigned int v22 = a1[8];
      if (v22)
      {
        float v23 = a2 * 0.0019569;
        unsigned int v24 = *((unsigned __int8 *)a1 + 8);
        uint64_t v25 = a1[2];
        uint64_t v26 = a1[5];
        uint64_t v27 = *a1 + 2;
        unsigned int v28 = a1[3] + 2;
        do
        {
          *(v27 - 2) = v23 * (float)(*(v28 - 2) >> 22);
          if (v24 >= 2)
          {
            *(v27 - 1) = v23 * (float)((*(v28 - 1) >> 12) & 0x3FF);
            if (v24 != 2)
            {
              float *v27 = v23 * (float)((*v28 >> 2) & 0x3FF);
              if (v24 >= 4) {
                v27[1] = (float)(v28[1] & 3) * v3;
              }
            }
          }
          uint64_t v27 = (float *)((char *)v25 + (void)v27);
          unsigned int v28 = (_DWORD *)((char *)v26 + (void)v28);
          unsigned int v22 = (float *)((char *)v22 - 1);
        }
        while (v22);
      }
    }
  }
  else
  {
    switch((((unint64_t)a1[4] & 0xFFFF0000) - 0x10000) >> 16)
    {
      case 0uLL:
        float v6 = 1.0;
        if (v3 != 1.0)
        {
          unint64_t v204 = (float (*)(char *, float))sub_20B1B617C;
          a2 = v3;
          goto LABEL_256;
        }
        id v7 = a1[8];
        if (v7)
        {
          id v8 = 0;
          unint64_t v9 = 0;
          uint64_t v11 = *a1;
          unsigned int v10 = a1[1];
          if (a1[4] >= v10) {
            uint64_t v12 = a1[1];
          }
          else {
            uint64_t v12 = a1[4];
          }
          uint64_t v13 = a1[4];
          if (v10 < (unint64_t)v5) {
            uint64_t v13 = a1[1];
          }
          uint64_t v15 = a1[2];
          long long v14 = a1[3];
          unsigned int v16 = a1[5];
          unint64_t v17 = (unint64_t)a1[6];
          uint64_t v18 = a1[7];
          do
          {
            if (v9 >= v17)
            {
              if ((_BYTE)v10)
              {
                uint64_t v21 = 0;
                do
                {
                  float v6 = truncf(v18[v21]);
                  v11[v21++] = v6;
                }
                while (v10 != v21);
              }
            }
            else
            {
              if (v12)
              {
                for (uint64_t i = 0; i != v12; ++i)
                {
                  LOBYTE(v6) = *((unsigned char *)v14 + i);
                  float v6 = (float)LODWORD(v6);
                  v11[i] = v6;
                }
              }
              uint64_t v20 = v13;
              if (v10 > v5)
              {
                do
                {
                  float v6 = truncf(v18[v20]);
                  v11[v20++] = v6;
                }
                while (((_BYTE)v10 - v12 + v13) != v20);
              }
            }
            uint64_t v11 = (float *)((char *)v15 + (void)v11);
            long long v14 = (float *)((char *)v16 + (void)v14);
            v9 += (unint64_t)v16;
            id v8 = (float *)((char *)v8 + 1);
          }
          while (v8 != v7);
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          uint64_t v36 = a1[8];
          if (v36)
          {
            long long v37 = 0;
            unint64_t v38 = 0;
            unsigned int v40 = *a1;
            uint64_t v39 = a1[1];
            if (a1[4] >= v39) {
              uint64_t v41 = a1[1];
            }
            else {
              uint64_t v41 = a1[4];
            }
            uint64_t v42 = a1[4];
            if (v39 < (unint64_t)v5) {
              uint64_t v42 = a1[1];
            }
            long long v44 = a1[2];
            id v43 = a1[3];
            uint64_t v45 = a1[5];
            unint64_t v46 = (unint64_t)a1[6];
            uint64_t v47 = a1[7];
            do
            {
              if (v38 >= v46)
              {
                if ((_BYTE)v39)
                {
                  uint64_t v50 = 0;
                  do
                  {
                    v40[v50] = truncf(v47[v50]);
                    ++v50;
                  }
                  while (v39 != v50);
                }
              }
              else
              {
                if (v41)
                {
                  for (uint64_t j = 0; j != v41; ++j)
                    v40[j] = (float)*((char *)v43 + j);
                }
                uint64_t v49 = v42;
                if (v39 > v5)
                {
                  do
                  {
                    v40[v49] = truncf(v47[v49]);
                    ++v49;
                  }
                  while (((_BYTE)v39 - v41 + v42) != v49);
                }
              }
              unsigned int v40 = (float *)((char *)v44 + (void)v40);
              id v43 = (float *)((char *)v45 + (void)v43);
              v38 += (unint64_t)v45;
              long long v37 = (float *)((char *)v37 + 1);
            }
            while (v37 != v36);
          }
        }
        else
        {
          unint64_t v204 = sub_20B1B616C;
LABEL_256:
          sub_20B1B5FE4(v204, a1, a2);
        }
        break;
      case 2uLL:
        uint64_t v51 = a1[8];
        if (v51)
        {
          unsigned int v52 = 0;
          unint64_t v53 = 0;
          float v54 = a2 * 0.0039216;
          uint64_t v56 = *a1;
          id v55 = a1[1];
          if (a1[4] >= v55) {
            uint64_t v57 = a1[1];
          }
          else {
            uint64_t v57 = a1[4];
          }
          uint64_t v58 = a1[4];
          if (v55 < (unint64_t)v5) {
            uint64_t v58 = a1[1];
          }
          uint64_t v60 = a1[2];
          uint64_t v59 = a1[3];
          long long v61 = a1[5];
          unint64_t v62 = (unint64_t)a1[6];
          uint64_t v63 = a1[7];
          do
          {
            if (v53 >= v62)
            {
              if ((_BYTE)v55)
              {
                uint64_t v66 = 0;
                do
                {
                  v56[v66] = v54 * (float)(char)(int)v63[v66];
                  ++v66;
                }
                while (v55 != v66);
              }
            }
            else
            {
              if (v57)
              {
                for (uint64_t k = 0; k != v57; ++k)
                  v56[k] = v54 * (float)*((char *)v59 + k);
              }
              uint64_t v65 = v58;
              if (v55 > v5)
              {
                do
                {
                  v56[v65] = v54 * (float)(char)(int)v63[v65];
                  ++v65;
                }
                while (((_BYTE)v55 - v57 + v58) != v65);
              }
            }
            uint64_t v56 = (float *)((char *)v60 + (void)v56);
            uint64_t v59 = (float *)((char *)v61 + (void)v59);
            v53 += (unint64_t)v61;
            unsigned int v52 = (float *)((char *)v52 + 1);
          }
          while (v52 != v51);
        }
        break;
      case 3uLL:
        float32x4_t v67 = a1[8];
        if (v67)
        {
          float32x4_t v68 = 0;
          unint64_t v69 = 0;
          float v70 = a2 * 0.007874;
          uint64_t v72 = *a1;
          uint64_t v71 = a1[1];
          if (a1[4] >= v71) {
            uint64_t v73 = a1[1];
          }
          else {
            uint64_t v73 = a1[4];
          }
          uint64_t v74 = a1[4];
          if (v71 < (unint64_t)v5) {
            uint64_t v74 = a1[1];
          }
          int v76 = a1[2];
          float32x4_t v75 = a1[3];
          uint64_t v77 = a1[5];
          unint64_t v78 = (unint64_t)a1[6];
          uint64_t v79 = a1[7];
          do
          {
            if (v69 >= v78)
            {
              if ((_BYTE)v71)
              {
                uint64_t v82 = 0;
                do
                {
                  v72[v82] = v70 * truncf(v79[v82]);
                  ++v82;
                }
                while (v71 != v82);
              }
            }
            else
            {
              if (v73)
              {
                for (uint64_t m = 0; m != v73; ++m)
                  v72[m] = v70 * (float)*((char *)v75 + m);
              }
              uint64_t v81 = v74;
              if (v71 > v5)
              {
                do
                {
                  v72[v81] = v70 * truncf(v79[v81]);
                  ++v81;
                }
                while (((_BYTE)v71 - v73 + v74) != v81);
              }
            }
            uint64_t v72 = (float *)((char *)v76 + (void)v72);
            float32x4_t v75 = (float *)((char *)v77 + (void)v75);
            v69 += (unint64_t)v77;
            float32x4_t v68 = (float *)((char *)v68 + 1);
          }
          while (v68 != v67);
        }
        break;
      case 4uLL:
        float v83 = 1.0;
        if (v3 != 1.0)
        {
          uint64_t v205 = (float (*)(__int16 *, float))sub_20B1B6324;
          a2 = v3;
          goto LABEL_262;
        }
        unint64_t v84 = a1[8];
        if (v84)
        {
          size_t v85 = 0;
          unint64_t v86 = 0;
          unint64_t v88 = *a1;
          int v87 = a1[1];
          if (a1[4] >= v87) {
            uint64_t v89 = a1[1];
          }
          else {
            uint64_t v89 = a1[4];
          }
          uint64_t v90 = a1[4];
          if (v87 < (unint64_t)v5) {
            uint64_t v90 = a1[1];
          }
          unint64_t v92 = a1[2];
          uint64_t v91 = a1[3];
          __int16 v93 = a1[5];
          unint64_t v94 = (unint64_t)a1[6];
          int v95 = a1[7];
          do
          {
            if (v86 >= v94)
            {
              if ((_BYTE)v87)
              {
                uint64_t v98 = 0;
                do
                {
                  float v83 = truncf(v95[v98]);
                  v88[v98++] = v83;
                }
                while (v87 != v98);
              }
            }
            else
            {
              if (v89)
              {
                for (uint64_t n = 0; n != v89; ++n)
                {
                  LOWORD(v83) = *((_WORD *)v91 + n);
                  float v83 = (float)LODWORD(v83);
                  v88[n] = v83;
                }
              }
              uint64_t v97 = v90;
              if (v87 > v5)
              {
                do
                {
                  float v83 = truncf(v95[v97]);
                  v88[v97++] = v83;
                }
                while (((_BYTE)v87 - v89 + v90) != v97);
              }
            }
            unint64_t v88 = (float *)((char *)v92 + (void)v88);
            uint64_t v91 = (float *)((char *)v93 + (void)v91);
            v86 += (unint64_t)v93;
            size_t v85 = (float *)((char *)v85 + 1);
          }
          while (v85 != v84);
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          unint64_t v99 = a1[8];
          if (v99)
          {
            uint64_t v100 = 0;
            unint64_t v101 = 0;
            uint64_t v103 = *a1;
            unint64_t v102 = a1[1];
            if (a1[4] >= v102) {
              uint64_t v104 = a1[1];
            }
            else {
              uint64_t v104 = a1[4];
            }
            uint64_t v105 = a1[4];
            if (v102 < (unint64_t)v5) {
              uint64_t v105 = a1[1];
            }
            int v107 = a1[2];
            int v106 = a1[3];
            uint64_t v108 = a1[5];
            unint64_t v109 = (unint64_t)a1[6];
            uint64_t v110 = a1[7];
            do
            {
              if (v101 >= v109)
              {
                if ((_BYTE)v102)
                {
                  uint64_t v113 = 0;
                  do
                  {
                    v103[v113] = truncf(v110[v113]);
                    ++v113;
                  }
                  while (v102 != v113);
                }
              }
              else
              {
                if (v104)
                {
                  for (iuint64_t i = 0; ii != v104; ++ii)
                    v103[ii] = (float)*((__int16 *)v106 + ii);
                }
                uint64_t v112 = v105;
                if (v102 > v5)
                {
                  do
                  {
                    v103[v112] = truncf(v110[v112]);
                    ++v112;
                  }
                  while (((_BYTE)v102 - v104 + v105) != v112);
                }
              }
              uint64_t v103 = (float *)((char *)v107 + (void)v103);
              int v106 = (float *)((char *)v108 + (void)v106);
              v101 += (unint64_t)v108;
              uint64_t v100 = (float *)((char *)v100 + 1);
            }
            while (v100 != v99);
          }
        }
        else
        {
          uint64_t v205 = sub_20B1B6314;
LABEL_262:
          sub_20B1B618C(v205, a1, a2);
        }
        break;
      case 6uLL:
        unint64_t v114 = a1[8];
        if (v114)
        {
          char v115 = 0;
          unint64_t v116 = 0;
          float v117 = a2 * 0.000015259;
          unint64_t v119 = *a1;
          uint64_t v118 = a1[1];
          if (a1[4] >= v118) {
            uint64_t v120 = a1[1];
          }
          else {
            uint64_t v120 = a1[4];
          }
          uint64_t v121 = a1[4];
          if (v118 < (unint64_t)v5) {
            uint64_t v121 = a1[1];
          }
          unint64_t v123 = a1[2];
          uint64_t v122 = a1[3];
          unint64_t v124 = a1[5];
          unint64_t v125 = (unint64_t)a1[6];
          int v126 = a1[7];
          do
          {
            if (v116 >= v125)
            {
              if ((_BYTE)v118)
              {
                uint64_t v129 = 0;
                do
                {
                  a3 = v117 * truncf(v126[v129]);
                  v119[v129++] = a3;
                }
                while (v118 != v129);
              }
            }
            else
            {
              if (v120)
              {
                for (juint64_t j = 0; jj != v120; ++jj)
                {
                  LOWORD(a3) = *((_WORD *)v122 + jj);
                  a3 = v117 * (float)LODWORD(a3);
                  v119[jj] = a3;
                }
              }
              uint64_t v128 = v121;
              if (v118 > v5)
              {
                do
                {
                  a3 = v117 * truncf(v126[v128]);
                  v119[v128++] = a3;
                }
                while (((_BYTE)v118 - v120 + v121) != v128);
              }
            }
            unint64_t v119 = (float *)((char *)v123 + (void)v119);
            uint64_t v122 = (float *)((char *)v124 + (void)v122);
            v116 += (unint64_t)v124;
            char v115 = (float *)((char *)v115 + 1);
          }
          while (v115 != v114);
        }
        break;
      case 7uLL:
        char v130 = a1[8];
        if (v130)
        {
          uint64_t v131 = 0;
          unint64_t v132 = 0;
          float v133 = a2 * 0.000030519;
          uint64_t v135 = *a1;
          unint64_t v134 = a1[1];
          if (a1[4] >= v134) {
            uint64_t v136 = a1[1];
          }
          else {
            uint64_t v136 = a1[4];
          }
          uint64_t v137 = a1[4];
          if (v134 < (unint64_t)v5) {
            uint64_t v137 = a1[1];
          }
          __int16 v139 = a1[2];
          __int16 v138 = a1[3];
          uint64_t v140 = a1[5];
          unint64_t v141 = (unint64_t)a1[6];
          unint64_t v142 = a1[7];
          do
          {
            if (v132 >= v141)
            {
              if ((_BYTE)v134)
              {
                uint64_t v145 = 0;
                do
                {
                  v135[v145] = v133 * truncf(v142[v145]);
                  ++v145;
                }
                while (v134 != v145);
              }
            }
            else
            {
              if (v136)
              {
                for (kuint64_t k = 0; kk != v136; ++kk)
                  v135[kk] = v133 * (float)*((__int16 *)v138 + kk);
              }
              uint64_t v144 = v137;
              if (v134 > v5)
              {
                do
                {
                  v135[v144] = v133 * truncf(v142[v144]);
                  ++v144;
                }
                while (((_BYTE)v134 - v136 + v137) != v144);
              }
            }
            uint64_t v135 = (float *)((char *)v139 + (void)v135);
            __int16 v138 = (float *)((char *)v140 + (void)v138);
            v132 += (unint64_t)v140;
            uint64_t v131 = (float *)((char *)v131 + 1);
          }
          while (v131 != v130);
        }
        break;
      case 8uLL:
        if (a2 == 1.0)
        {
          unint64_t v146 = a1[8];
          if (v146)
          {
            unint64_t v147 = 0;
            unint64_t v148 = 0;
            unsigned int v149 = a1[4];
            uint64_t v151 = *a1;
            unint64_t v150 = a1[1];
            if (v149 >= v150) {
              unsigned int v149 = a1[1];
            }
            uint64_t v152 = a1[4];
            if (v150 < (unint64_t)v5) {
              uint64_t v152 = a1[1];
            }
            uint64_t v154 = a1[2];
            unint64_t v153 = a1[3];
            uint64_t v155 = a1[5];
            unint64_t v156 = (unint64_t)a1[6];
            uint64_t v157 = a1[7];
            do
            {
              if (v148 >= v156)
              {
                if ((_BYTE)v150)
                {
                  uint64_t v160 = 0;
                  do
                  {
                    v151[v160] = (float)(int)v157[v160];
                    ++v160;
                  }
                  while (v150 != v160);
                }
              }
              else
              {
                if (v149)
                {
                  for (muint64_t m = 0; mm != v149; ++mm)
                    v151[mm] = (float)SLODWORD(v153[mm]);
                }
                uint64_t v159 = v152;
                if (v150 > v5)
                {
                  do
                  {
                    v151[v159] = (float)(int)v157[v159];
                    ++v159;
                  }
                  while (((_BYTE)v150 - v149 + v152) != v159);
                }
              }
              uint64_t v151 = (float *)((char *)v154 + (void)v151);
              unint64_t v153 = (float *)((char *)v155 + (void)v153);
              v148 += (unint64_t)v155;
              unint64_t v147 = (float *)((char *)v147 + 1);
            }
            while (v147 != v146);
          }
        }
        else
        {
          sub_20B1B64CC((float (*)(unsigned int *, float))sub_20B1B64BC, a1, a2);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          int v161 = a1[8];
          if (v161)
          {
            int v162 = 0;
            unint64_t v163 = 0;
            unsigned int v164 = a1[4];
            unint64_t v166 = *a1;
            uint64_t v165 = a1[1];
            if (v164 >= v165) {
              unsigned int v164 = a1[1];
            }
            uint64_t v167 = a1[4];
            if (v165 < (unint64_t)v5) {
              uint64_t v167 = a1[1];
            }
            uint64_t v169 = a1[2];
            unint64_t v168 = a1[3];
            uint64_t v170 = a1[5];
            unint64_t v171 = (unint64_t)a1[6];
            int v172 = a1[7];
            do
            {
              if (v163 >= v171)
              {
                if ((_BYTE)v165)
                {
                  uint64_t v175 = 0;
                  do
                  {
                    v166[v175] = truncf(v172[v175]);
                    ++v175;
                  }
                  while (v165 != v175);
                }
              }
              else
              {
                if (v164)
                {
                  for (nuint64_t n = 0; nn != v164; ++nn)
                    v166[nn] = (float)SLODWORD(v168[nn]);
                }
                uint64_t v174 = v167;
                if (v165 > v5)
                {
                  do
                  {
                    v166[v174] = truncf(v172[v174]);
                    ++v174;
                  }
                  while (((_BYTE)v165 - v164 + v167) != v174);
                }
              }
              unint64_t v166 = (float *)((char *)v169 + (void)v166);
              unint64_t v168 = (float *)((char *)v170 + (void)v168);
              v163 += (unint64_t)v170;
              int v162 = (float *)((char *)v162 + 1);
            }
            while (v162 != v161);
          }
        }
        else
        {
          sub_20B1B6334(sub_20B1B64BC, a1, a2);
        }
        break;
      case 0xAuLL:
        char v211 = a1[8];
        if (v211)
        {
          unint64_t v176 = 0;
          unint64_t v177 = 0;
          uint64_t v179 = *a1;
          unint64_t v178 = a1[1];
          if (a1[4] >= v178) {
            uint64_t v180 = a1[1];
          }
          else {
            uint64_t v180 = a1[4];
          }
          if (v178 >= (unint64_t)v5) {
            uint64_t v181 = a1[4];
          }
          else {
            uint64_t v181 = a1[1];
          }
          uint64_t v206 = v181;
          int v182 = a1[3];
          int v209 = a1[2];
          int v210 = a1[1];
          unint64_t v183 = a1[7];
          unint64_t v208 = (unint64_t)a1[6];
          size_t v207 = a1[5];
          uint64_t v184 = 4 * v178;
          int v185 = ((_BYTE)v178 - v180 + v181);
          do
          {
            if (v177 >= v208)
            {
              if ((_BYTE)v210)
              {
                unint64_t v188 = 0;
                do
                {
                  v179[v188 / 4] = sub_20B1AB850((int)v183[v188 / 4]) * v3;
                  v188 += 4;
                }
                while (v184 != v188);
              }
            }
            else
            {
              if (v180)
              {
                for (uint64_t i1 = 0; i1 != v180; ++i1)
                  v179[i1] = sub_20B1AB850(*((unsigned __int16 *)v182 + i1)) * v3;
              }
              uint64_t v187 = v206;
              if (v210 > v5)
              {
                do
                {
                  v179[v187] = sub_20B1AB850((int)v183[v187]) * v3;
                  ++v187;
                }
                while (v185 != v187);
              }
            }
            uint64_t v179 = (float *)((char *)v209 + (void)v179);
            int v182 = (float *)((char *)v207 + (void)v182);
            v177 += (unint64_t)v207;
            unint64_t v176 = (float *)((char *)v176 + 1);
          }
          while (v176 != v211);
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          unint64_t v189 = a1[8];
          if (v189)
          {
            float32x4_t v190 = 0;
            unint64_t v191 = 0;
            unsigned int v192 = a1[4];
            uint64_t v194 = *a1;
            unint64_t v193 = a1[1];
            if (v192 >= v193) {
              unsigned int v192 = a1[1];
            }
            uint64_t v195 = a1[4];
            if (v193 < (unint64_t)v5) {
              uint64_t v195 = a1[1];
            }
            unint64_t v197 = a1[2];
            uint64_t v196 = a1[3];
            __int16 v198 = a1[5];
            unint64_t v199 = (unint64_t)a1[6];
            int v200 = a1[7];
            do
            {
              if (v191 >= v199)
              {
                if ((_BYTE)v193)
                {
                  uint64_t v203 = 0;
                  do
                  {
                    v194[v203] = v200[v203];
                    ++v203;
                  }
                  while (v193 != v203);
                }
              }
              else
              {
                if (v192)
                {
                  for (uint64_t i2 = 0; i2 != v192; ++i2)
                    v194[i2] = v196[i2];
                }
                uint64_t v202 = v195;
                if (v193 > v5)
                {
                  do
                  {
                    v194[v202] = v200[v202];
                    ++v202;
                  }
                  while (((_BYTE)v193 - v192 + v195) != v202);
                }
              }
              uint64_t v194 = (float *)((char *)v197 + (void)v194);
              uint64_t v196 = (float *)((char *)v198 + (void)v196);
              v191 += (unint64_t)v198;
              float32x4_t v190 = (float *)((char *)v190 + 1);
            }
            while (v190 != v189);
          }
        }
        else
        {
          sub_20B1B5E58(sub_20B1B5FD8, a1, a2);
        }
        break;
      default:
        return;
    }
  }
}

void sub_20B1AE29C(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if ((v4 & 0x1000) != 0)
  {
    if (v4 == 593924)
    {
      if (*(void *)(a1 + 64))
      {
        unint64_t v24 = 0;
        float v25 = a2 * 0.00097752;
        uint64_t v26 = *(_DWORD **)(a1 + 24);
        uint64_t v27 = *(unsigned char **)a1;
        do
        {
          unsigned int v28 = *(unsigned __int8 *)(a1 + 8);
          unsigned char *v27 = (int)(float)(v25 * (float)(*v26 >> 22));
          if (v28 >= 2)
          {
            v27[1] = (int)(float)(v25 * (float)((v26[1] >> 12) & 0x3FF));
            if (v28 != 2)
            {
              _OWORD v27[2] = (int)(float)(v25 * (float)((v26[2] >> 2) & 0x3FF));
              if (v28 >= 4) {
                v27[3] = (int)(float)((float)(a2 * 0.33333) * (float)(v26[3] & 3));
              }
            }
          }
          v27 += *(void *)(a1 + 16);
          uint64_t v26 = (_DWORD *)((char *)v26 + *(void *)(a1 + 40));
          ++v24;
        }
        while (v24 < *(void *)(a1 + 64));
      }
    }
    else if (v4 == 659460 && *(void *)(a1 + 64))
    {
      unint64_t v19 = 0;
      float v20 = a2 * 0.0019569;
      uint64_t v21 = *(_DWORD **)(a1 + 24);
      unsigned int v22 = *(unsigned char **)a1;
      do
      {
        unsigned int v23 = *(unsigned __int8 *)(a1 + 8);
        *unsigned int v22 = (int)(float)(v20 * (float)(*v21 >> 22));
        if (v23 >= 2)
        {
          v22[1] = (int)(float)(v20 * (float)((v21[1] >> 12) & 0x3FF));
          if (v23 != 2)
          {
            v22[2] = (int)(float)(v20 * (float)((v21[2] >> 2) & 0x3FF));
            if (v23 >= 4) {
              v22[3] = (int)(float)((float)(v21[3] & 3) * a2);
            }
          }
        }
        v22 += *(void *)(a1 + 16);
        uint64_t v21 = (_DWORD *)((char *)v21 + *(void *)(a1 + 40));
        ++v19;
      }
      while (v19 < *(void *)(a1 + 64));
    }
  }
  else
  {
    switch(((*(void *)(a1 + 32) & 0xFFFF0000uLL) - 0x10000) >> 16)
    {
      case 0uLL:
        if (a2 != 1.0)
        {
          unint64_t v189 = sub_20B1B697C;
          float32x4_t v190 = (void *)a1;
          goto LABEL_236;
        }
        if (*(void *)(a1 + 64))
        {
          unint64_t v5 = 0;
          unint64_t v6 = 0;
          id v8 = *(unsigned char **)a1;
          uint64_t v7 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v7) {
            uint64_t v9 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v9 = *(void *)(a1 + 32);
          }
          unsigned int v10 = *(char **)(a1 + 24);
          uint64_t v11 = *(void *)(a1 + 32);
          if (v7 < (unint64_t)v4) {
            uint64_t v11 = *(void *)(a1 + 8);
          }
          do
          {
            if (v6 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v7)
              {
                uint64_t v17 = 0;
                do
                {
                  v8[v17] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v17);
                  ++v17;
                }
                while (v7 != v17);
              }
            }
            else
            {
              uint64_t v12 = v10;
              uint64_t v13 = v8;
              uint64_t v14 = v9;
              if (v9)
              {
                do
                {
                  char v15 = *v12++;
                  *v13++ = v15;
                  --v14;
                }
                while (v14);
              }
              uint64_t v16 = v11;
              if (v7 > v4)
              {
                do
                {
                  v8[v16] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v16);
                  ++v16;
                }
                while ((v7 - v9 + v11) != v16);
              }
            }
            v8 += *(void *)(a1 + 16);
            uint64_t v18 = *(void *)(a1 + 40);
            v10 += v18;
            v6 += v18;
            ++v5;
          }
          while (v5 < *(void *)(a1 + 64));
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v29 = 0;
            unint64_t v30 = 0;
            uint64_t v32 = *(unsigned char **)a1;
            uint64_t v31 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v31) {
              uint64_t v33 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v33 = *(void *)(a1 + 32);
            }
            unsigned int v34 = *(char **)(a1 + 24);
            uint64_t v35 = *(void *)(a1 + 32);
            if (v31 < (unint64_t)v4) {
              uint64_t v35 = *(void *)(a1 + 8);
            }
            do
            {
              if (v30 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v31)
                {
                  uint64_t v41 = 0;
                  do
                  {
                    v32[v41] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v41);
                    ++v41;
                  }
                  while (v31 != v41);
                }
              }
              else
              {
                uint64_t v36 = v34;
                long long v37 = v32;
                uint64_t v38 = v33;
                if (v33)
                {
                  do
                  {
                    char v39 = *v36++;
                    *v37++ = v39;
                    --v38;
                  }
                  while (v38);
                }
                uint64_t v40 = v35;
                if (v31 > v4)
                {
                  do
                  {
                    v32[v40] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v40);
                    ++v40;
                  }
                  while ((v31 - v33 + v35) != v40);
                }
              }
              v32 += *(void *)(a1 + 16);
              uint64_t v42 = *(void *)(a1 + 40);
              v34 += v42;
              v30 += v42;
              ++v29;
            }
            while (v29 < *(void *)(a1 + 64));
          }
        }
        else
        {
          unint64_t v189 = sub_20B1B6968;
          float32x4_t v190 = (void *)a1;
LABEL_236:
          sub_20B1B67E4((uint64_t)v189, v190, a2);
        }
        break;
      case 2uLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v43 = 0;
          unint64_t v44 = 0;
          float v45 = a2 * 0.0039216;
          uint64_t v47 = *(unsigned char **)a1;
          uint64_t v46 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v46) {
            uint64_t v48 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v48 = *(void *)(a1 + 32);
          }
          uint64_t v49 = *(char **)(a1 + 24);
          uint64_t v50 = *(void *)(a1 + 32);
          if (v46 < (unint64_t)v4) {
            uint64_t v50 = *(void *)(a1 + 8);
          }
          do
          {
            if (v44 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v46)
              {
                uint64_t v56 = 0;
                do
                {
                  v47[v56] = (int)(float)(v45 * (float)(char)(int)*(float *)(*(void *)(a1 + 56) + 4 * v56));
                  ++v56;
                }
                while (v46 != v56);
              }
            }
            else
            {
              uint64_t v51 = v49;
              unsigned int v52 = v47;
              uint64_t v53 = v48;
              if (v48)
              {
                do
                {
                  int v54 = *v51++;
                  *v52++ = (int)(float)(v45 * (float)v54);
                  --v53;
                }
                while (v53);
              }
              uint64_t v55 = v50;
              if (v46 > v4)
              {
                do
                {
                  v47[v55] = (int)(float)(v45 * (float)(char)(int)*(float *)(*(void *)(a1 + 56) + 4 * v55));
                  ++v55;
                }
                while ((v46 - v48 + v50) != v55);
              }
            }
            v47 += *(void *)(a1 + 16);
            uint64_t v57 = *(void *)(a1 + 40);
            v49 += v57;
            v44 += v57;
            ++v43;
          }
          while (v43 < *(void *)(a1 + 64));
        }
        break;
      case 3uLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v58 = 0;
          unint64_t v59 = 0;
          float v60 = a2 * 0.007874;
          unint64_t v62 = *(unsigned char **)a1;
          uint64_t v61 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v61) {
            uint64_t v63 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v63 = *(void *)(a1 + 32);
          }
          unsigned int v64 = *(char **)(a1 + 24);
          uint64_t v65 = *(void *)(a1 + 32);
          if (v61 < (unint64_t)v4) {
            uint64_t v65 = *(void *)(a1 + 8);
          }
          do
          {
            if (v59 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v61)
              {
                uint64_t v71 = 0;
                do
                {
                  v62[v71] = (int)(float)(v60 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v71)));
                  ++v71;
                }
                while (v61 != v71);
              }
            }
            else
            {
              uint64_t v66 = v64;
              float32x4_t v67 = v62;
              uint64_t v68 = v63;
              if (v63)
              {
                do
                {
                  int v69 = *v66++;
                  *v67++ = (int)(float)(v60 * (float)v69);
                  --v68;
                }
                while (v68);
              }
              uint64_t v70 = v65;
              if (v61 > v4)
              {
                do
                {
                  v62[v70] = (int)(float)(v60 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v70)));
                  ++v70;
                }
                while ((v61 - v63 + v65) != v70);
              }
            }
            v62 += *(void *)(a1 + 16);
            uint64_t v72 = *(void *)(a1 + 40);
            v64 += v72;
            v59 += v72;
            ++v58;
          }
          while (v58 < *(void *)(a1 + 64));
        }
        break;
      case 4uLL:
        if (a2 != 1.0)
        {
          unint64_t v191 = sub_20B1B6B28;
          unsigned int v192 = (void *)a1;
          goto LABEL_242;
        }
        if (*(void *)(a1 + 64))
        {
          unint64_t v73 = 0;
          unint64_t v74 = 0;
          int v76 = *(unsigned char **)a1;
          uint64_t v75 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v75) {
            uint64_t v77 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v77 = *(void *)(a1 + 32);
          }
          unint64_t v78 = *(char **)(a1 + 24);
          uint64_t v79 = *(void *)(a1 + 32);
          if (v75 < (unint64_t)v4) {
            uint64_t v79 = *(void *)(a1 + 8);
          }
          do
          {
            if (v74 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v75)
              {
                uint64_t v85 = 0;
                do
                {
                  v76[v85] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v85);
                  ++v85;
                }
                while (v75 != v85);
              }
            }
            else
            {
              uint64_t v80 = v78;
              uint64_t v81 = v76;
              uint64_t v82 = v77;
              if (v77)
              {
                do
                {
                  char v83 = *v80;
                  v80 += 2;
                  *v81++ = v83;
                  --v82;
                }
                while (v82);
              }
              uint64_t v84 = v79;
              if (v75 > v4)
              {
                do
                {
                  v76[v84] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v84);
                  ++v84;
                }
                while ((v75 - v77 + v79) != v84);
              }
            }
            v76 += *(void *)(a1 + 16);
            uint64_t v86 = *(void *)(a1 + 40);
            v78 += v86;
            v74 += v86;
            ++v73;
          }
          while (v73 < *(void *)(a1 + 64));
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v87 = 0;
            unint64_t v88 = 0;
            uint64_t v90 = *(unsigned char **)a1;
            uint64_t v89 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v89) {
              uint64_t v91 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v91 = *(void *)(a1 + 32);
            }
            unint64_t v92 = *(char **)(a1 + 24);
            uint64_t v93 = *(void *)(a1 + 32);
            if (v89 < (unint64_t)v4) {
              uint64_t v93 = *(void *)(a1 + 8);
            }
            do
            {
              if (v88 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v89)
                {
                  uint64_t v99 = 0;
                  do
                  {
                    v90[v99] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v99);
                    ++v99;
                  }
                  while (v89 != v99);
                }
              }
              else
              {
                unint64_t v94 = v92;
                int v95 = v90;
                uint64_t v96 = v91;
                if (v91)
                {
                  do
                  {
                    char v97 = *v94;
                    v94 += 2;
                    *v95++ = v97;
                    --v96;
                  }
                  while (v96);
                }
                uint64_t v98 = v93;
                if (v89 > v4)
                {
                  do
                  {
                    v90[v98] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v98);
                    ++v98;
                  }
                  while ((v89 - v91 + v93) != v98);
                }
              }
              v90 += *(void *)(a1 + 16);
              uint64_t v100 = *(void *)(a1 + 40);
              v92 += v100;
              v88 += v100;
              ++v87;
            }
            while (v87 < *(void *)(a1 + 64));
          }
        }
        else
        {
          unint64_t v191 = sub_20B1B6B14;
          unsigned int v192 = (void *)a1;
LABEL_242:
          sub_20B1B6990((uint64_t)v191, v192, a2);
        }
        break;
      case 6uLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v101 = 0;
          unint64_t v102 = 0;
          float v103 = a2 * 0.000015259;
          uint64_t v105 = *(unsigned char **)a1;
          uint64_t v104 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v104) {
            uint64_t v106 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v106 = *(void *)(a1 + 32);
          }
          int v107 = *(unsigned __int16 **)(a1 + 24);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v104 < (unint64_t)v4) {
            uint64_t v108 = *(void *)(a1 + 8);
          }
          do
          {
            if (v102 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v104)
              {
                uint64_t v114 = 0;
                do
                {
                  v105[v114] = (int)(float)(v103 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v114)));
                  ++v114;
                }
                while (v104 != v114);
              }
            }
            else
            {
              unint64_t v109 = v107;
              uint64_t v110 = v105;
              uint64_t v111 = v106;
              if (v106)
              {
                do
                {
                  unsigned int v112 = *v109++;
                  *v110++ = (int)(float)(v103 * (float)v112);
                  --v111;
                }
                while (v111);
              }
              uint64_t v113 = v108;
              if (v104 > v4)
              {
                do
                {
                  v105[v113] = (int)(float)(v103 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v113)));
                  ++v113;
                }
                while ((v104 - v106 + v108) != v113);
              }
            }
            v105 += *(void *)(a1 + 16);
            uint64_t v115 = *(void *)(a1 + 40);
            int v107 = (unsigned __int16 *)((char *)v107 + v115);
            v102 += v115;
            ++v101;
          }
          while (v101 < *(void *)(a1 + 64));
        }
        break;
      case 7uLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v116 = 0;
          unint64_t v117 = 0;
          float v118 = a2 * 0.000030519;
          uint64_t v120 = *(unsigned char **)a1;
          uint64_t v119 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v119) {
            uint64_t v121 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v121 = *(void *)(a1 + 32);
          }
          uint64_t v122 = *(__int16 **)(a1 + 24);
          uint64_t v123 = *(void *)(a1 + 32);
          if (v119 < (unint64_t)v4) {
            uint64_t v123 = *(void *)(a1 + 8);
          }
          do
          {
            if (v117 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v119)
              {
                uint64_t v129 = 0;
                do
                {
                  v120[v129] = (int)(float)(v118 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v129)));
                  ++v129;
                }
                while (v119 != v129);
              }
            }
            else
            {
              unint64_t v124 = v122;
              unint64_t v125 = v120;
              uint64_t v126 = v121;
              if (v121)
              {
                do
                {
                  int v127 = *v124++;
                  *v125++ = (int)(float)(v118 * (float)v127);
                  --v126;
                }
                while (v126);
              }
              uint64_t v128 = v123;
              if (v119 > v4)
              {
                do
                {
                  v120[v128] = (int)(float)(v118 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v128)));
                  ++v128;
                }
                while ((v119 - v121 + v123) != v128);
              }
            }
            v120 += *(void *)(a1 + 16);
            uint64_t v130 = *(void *)(a1 + 40);
            uint64_t v122 = (__int16 *)((char *)v122 + v130);
            v117 += v130;
            ++v116;
          }
          while (v116 < *(void *)(a1 + 64));
        }
        break;
      case 8uLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v131 = 0;
            unint64_t v132 = 0;
            unint64_t v134 = *(unsigned char **)a1;
            uint64_t v133 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v133) {
              uint64_t v135 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v135 = *(void *)(a1 + 32);
            }
            uint64_t v136 = *(int **)(a1 + 24);
            uint64_t v137 = *(void *)(a1 + 32);
            if (v133 < (unint64_t)v4) {
              uint64_t v137 = *(void *)(a1 + 8);
            }
            do
            {
              if (v132 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v133)
                {
                  uint64_t v143 = 0;
                  do
                  {
                    v134[v143] = *(float *)(*(void *)(a1 + 56) + 4 * v143);
                    ++v143;
                  }
                  while (v133 != v143);
                }
              }
              else
              {
                __int16 v138 = v136;
                __int16 v139 = v134;
                uint64_t v140 = v135;
                if (v135)
                {
                  do
                  {
                    int v141 = *v138++;
                    *v139++ = v141;
                    --v140;
                  }
                  while (v140);
                }
                uint64_t v142 = v137;
                if (v133 > v4)
                {
                  do
                  {
                    v134[v142] = *(float *)(*(void *)(a1 + 56) + 4 * v142);
                    ++v142;
                  }
                  while ((v133 - v135 + v137) != v142);
                }
              }
              v134 += *(void *)(a1 + 16);
              uint64_t v144 = *(void *)(a1 + 40);
              uint64_t v136 = (int *)((char *)v136 + v144);
              v132 += v144;
              ++v131;
            }
            while (v131 < *(void *)(a1 + 64));
          }
        }
        else
        {
          sub_20B1B6CD4((uint64_t)sub_20B1B6CC0, (void *)a1, a2);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v145 = 0;
            unint64_t v146 = 0;
            unint64_t v148 = *(unsigned char **)a1;
            uint64_t v147 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v147) {
              uint64_t v149 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v149 = *(void *)(a1 + 32);
            }
            unint64_t v150 = *(int **)(a1 + 24);
            uint64_t v151 = *(void *)(a1 + 32);
            if (v147 < (unint64_t)v4) {
              uint64_t v151 = *(void *)(a1 + 8);
            }
            do
            {
              if (v146 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v147)
                {
                  uint64_t v157 = 0;
                  do
                  {
                    v148[v157] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v157);
                    ++v157;
                  }
                  while (v147 != v157);
                }
              }
              else
              {
                uint64_t v152 = v150;
                unint64_t v153 = v148;
                uint64_t v154 = v149;
                if (v149)
                {
                  do
                  {
                    int v155 = *v152++;
                    *v153++ = v155;
                    --v154;
                  }
                  while (v154);
                }
                uint64_t v156 = v151;
                if (v147 > v4)
                {
                  do
                  {
                    v148[v156] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v156);
                    ++v156;
                  }
                  while ((v147 - v149 + v151) != v156);
                }
              }
              v148 += *(void *)(a1 + 16);
              uint64_t v158 = *(void *)(a1 + 40);
              unint64_t v150 = (int *)((char *)v150 + v158);
              v146 += v158;
              ++v145;
            }
            while (v145 < *(void *)(a1 + 64));
          }
        }
        else
        {
          sub_20B1B6B3C((uint64_t)sub_20B1B6CC0, (void *)a1, a2);
        }
        break;
      case 0xAuLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v159 = 0;
          unint64_t v160 = 0;
          int v161 = *(unsigned char **)a1;
          uint64_t v162 = *(void *)(a1 + 8);
          uint64_t v163 = v162;
          if (*(void *)(a1 + 32) >= v162) {
            uint64_t v164 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v164 = *(void *)(a1 + 32);
          }
          uint64_t v165 = *(unsigned __int16 **)(a1 + 24);
          if (v162 >= (unint64_t)v4) {
            uint64_t v166 = *(void *)(a1 + 32);
          }
          else {
            uint64_t v166 = *(void *)(a1 + 8);
          }
          uint64_t v193 = v166;
          uint64_t v194 = v164;
          int v167 = (v162 - v164 + v166);
          uint64_t v195 = *(void *)(a1 + 8);
          uint64_t v196 = *(void *)(a1 + 32);
          do
          {
            if (v160 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v162)
              {
                uint64_t v173 = 0;
                do
                {
                  v161[v173] = (int)(float)(sub_20B1AB850((int)*(float *)(*(void *)(a1 + 56) + 4 * v173)) * a2);
                  ++v173;
                }
                while (v163 != v173);
              }
            }
            else
            {
              unint64_t v168 = v165;
              uint64_t v169 = v161;
              uint64_t v170 = v194;
              if (v194)
              {
                do
                {
                  int v171 = *v168++;
                  *v169++ = (int)(float)(sub_20B1AB850(v171) * a2);
                  --v170;
                }
                while (v170);
              }
              LOBYTE(v162) = v195;
              uint64_t v172 = v193;
              if (v195 > v196)
              {
                do
                {
                  v161[v172] = (int)(float)(sub_20B1AB850((int)*(float *)(*(void *)(a1 + 56) + 4 * v172)) * a2);
                  ++v172;
                }
                while (v167 != v172);
              }
            }
            v161 += *(void *)(a1 + 16);
            uint64_t v174 = *(void *)(a1 + 40);
            uint64_t v165 = (unsigned __int16 *)((char *)v165 + v174);
            v160 += v174;
            ++v159;
          }
          while (v159 < *(void *)(a1 + 64));
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v175 = 0;
            unint64_t v176 = 0;
            unint64_t v178 = *(unsigned char **)a1;
            uint64_t v177 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v177) {
              uint64_t v179 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v179 = *(void *)(a1 + 32);
            }
            uint64_t v180 = *(float **)(a1 + 24);
            uint64_t v181 = *(void *)(a1 + 32);
            if (v177 < (unint64_t)v4) {
              uint64_t v181 = *(void *)(a1 + 8);
            }
            do
            {
              if (v176 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v177)
                {
                  uint64_t v187 = 0;
                  do
                  {
                    v178[v187] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v187);
                    ++v187;
                  }
                  while (v177 != v187);
                }
              }
              else
              {
                int v182 = v180;
                unint64_t v183 = v178;
                uint64_t v184 = v179;
                if (v179)
                {
                  do
                  {
                    float v185 = *v182++;
                    *v183++ = (int)v185;
                    --v184;
                  }
                  while (v184);
                }
                uint64_t v186 = v181;
                if (v177 > v4)
                {
                  do
                  {
                    v178[v186] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v186);
                    ++v186;
                  }
                  while ((v177 - v179 + v181) != v186);
                }
              }
              v178 += *(void *)(a1 + 16);
              uint64_t v188 = *(void *)(a1 + 40);
              uint64_t v180 = (float *)((char *)v180 + v188);
              v176 += v188;
              ++v175;
            }
            while (v175 < *(void *)(a1 + 64));
          }
        }
        else
        {
          sub_20B1B6658((uint64_t)sub_20B1B67D4, (void *)a1, a2);
        }
        break;
      default:
        return;
    }
  }
}

void sub_20B1AF394(void *a1, float a2, float a3)
{
  uint64_t v5 = a1[4];
  if ((v5 & 0x1000) != 0)
  {
    if (v5 == 593924)
    {
      uint64_t v28 = a1[8];
      if (v28)
      {
        float v29 = a2 * 0.00097752;
        unsigned int v30 = *((unsigned __int8 *)a1 + 8);
        uint64_t v31 = a1[2];
        uint64_t v32 = a1[5];
        uint64_t v33 = (_WORD *)(*a1 + 4);
        unsigned int v34 = (_DWORD *)(a1[3] + 8);
        do
        {
          *(v33 - 2) = (int)(float)(v29 * (float)(*(v34 - 2) >> 22));
          if (v30 >= 2)
          {
            *(v33 - 1) = (int)(float)(v29 * (float)((*(v34 - 1) >> 12) & 0x3FF));
            if (v30 != 2)
            {
              *uint64_t v33 = (int)(float)(v29 * (float)((*v34 >> 2) & 0x3FF));
              if (v30 >= 4) {
                v33[1] = (int)(float)((float)(a2 * 0.33333) * (float)(v34[1] & 3));
              }
            }
          }
          uint64_t v33 = (_WORD *)((char *)v33 + v31);
          unsigned int v34 = (_DWORD *)((char *)v34 + v32);
          --v28;
        }
        while (v28);
      }
    }
    else if (v5 == 659460)
    {
      uint64_t v21 = a1[8];
      if (v21)
      {
        float v22 = a2 * 0.0019569;
        unsigned int v23 = *((unsigned __int8 *)a1 + 8);
        uint64_t v24 = a1[2];
        uint64_t v25 = a1[5];
        uint64_t v26 = (_WORD *)(*a1 + 4);
        uint64_t v27 = (_DWORD *)(a1[3] + 8);
        do
        {
          *(v26 - 2) = (int)(float)(v22 * (float)(*(v27 - 2) >> 22));
          if (v23 >= 2)
          {
            *(v26 - 1) = (int)(float)(v22 * (float)((*(v27 - 1) >> 12) & 0x3FF));
            if (v23 != 2)
            {
              *uint64_t v26 = (int)(float)(v22 * (float)((*v27 >> 2) & 0x3FF));
              if (v23 >= 4) {
                v26[1] = (int)(float)((float)(v27[1] & 3) * a2);
              }
            }
          }
          uint64_t v26 = (_WORD *)((char *)v26 + v24);
          uint64_t v27 = (_DWORD *)((char *)v27 + v25);
          --v21;
        }
        while (v21);
      }
    }
  }
  else
  {
    switch(((a1[4] & 0xFFFF0000uLL) - 0x10000) >> 16)
    {
      case 0uLL:
        if (a2 != 1.0)
        {
          uint64_t v203 = sub_20B1B7180;
          goto LABEL_255;
        }
        uint64_t v6 = a1[8];
        if (v6)
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          uint64_t v10 = *a1;
          uint64_t v9 = a1[1];
          if (a1[4] >= v9) {
            uint64_t v11 = a1[1];
          }
          else {
            uint64_t v11 = a1[4];
          }
          uint64_t v12 = a1[4];
          if (v9 < (unint64_t)v5) {
            uint64_t v12 = a1[1];
          }
          uint64_t v14 = a1[2];
          uint64_t v13 = a1[3];
          uint64_t v16 = a1[5];
          unint64_t v15 = a1[6];
          uint64_t v17 = a1[7];
          do
          {
            if (v8 >= v15)
            {
              if ((_BYTE)v9)
              {
                uint64_t v20 = 0;
                do
                {
                  *(_WORD *)(v10 + 2 * v20) = (int)*(float *)(v17 + 4 * v20);
                  ++v20;
                }
                while (v9 != v20);
              }
            }
            else
            {
              if (v11)
              {
                for (uint64_t i = 0; i != v11; ++i)
                  *(_WORD *)(v10 + 2 * i) = *(unsigned __int8 *)(v13 + i);
              }
              uint64_t v19 = v12;
              if (v9 > v5)
              {
                do
                {
                  *(_WORD *)(v10 + 2 * v19) = (int)*(float *)(v17 + 4 * v19);
                  ++v19;
                }
                while ((v9 - v11 + v12) != v19);
              }
            }
            v10 += v14;
            v13 += v16;
            v8 += v16;
            ++v7;
          }
          while (v7 != v6);
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          uint64_t v35 = a1[8];
          if (v35)
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            uint64_t v39 = *a1;
            uint64_t v38 = a1[1];
            if (a1[4] >= v38) {
              uint64_t v40 = a1[1];
            }
            else {
              uint64_t v40 = a1[4];
            }
            uint64_t v41 = a1[4];
            if (v38 < (unint64_t)v5) {
              uint64_t v41 = a1[1];
            }
            uint64_t v43 = a1[2];
            uint64_t v42 = a1[3];
            uint64_t v45 = a1[5];
            unint64_t v44 = a1[6];
            uint64_t v46 = a1[7];
            do
            {
              if (v37 >= v44)
              {
                if ((_BYTE)v38)
                {
                  uint64_t v49 = 0;
                  do
                  {
                    *(_WORD *)(v39 + 2 * v49) = (int)*(float *)(v46 + 4 * v49);
                    ++v49;
                  }
                  while (v38 != v49);
                }
              }
              else
              {
                if (v40)
                {
                  for (uint64_t j = 0; j != v40; ++j)
                    *(_WORD *)(v39 + 2 * j) = *(char *)(v42 + j);
                }
                uint64_t v48 = v41;
                if (v38 > v5)
                {
                  do
                  {
                    *(_WORD *)(v39 + 2 * v48) = (int)*(float *)(v46 + 4 * v48);
                    ++v48;
                  }
                  while ((v38 - v40 + v41) != v48);
                }
              }
              v39 += v43;
              v42 += v45;
              v37 += v45;
              ++v36;
            }
            while (v36 != v35);
          }
        }
        else
        {
          uint64_t v203 = sub_20B1B716C;
LABEL_255:
          sub_20B1B6FE8((uint64_t)v203, a1, a2);
        }
        break;
      case 2uLL:
        uint64_t v50 = a1[8];
        if (v50)
        {
          uint64_t v51 = 0;
          unint64_t v52 = 0;
          float v53 = a2 * 0.0039216;
          uint64_t v55 = *a1;
          uint64_t v54 = a1[1];
          if (a1[4] >= v54) {
            uint64_t v56 = a1[1];
          }
          else {
            uint64_t v56 = a1[4];
          }
          uint64_t v57 = a1[4];
          if (v54 < (unint64_t)v5) {
            uint64_t v57 = a1[1];
          }
          uint64_t v59 = a1[2];
          uint64_t v58 = a1[3];
          uint64_t v61 = a1[5];
          unint64_t v60 = a1[6];
          uint64_t v62 = a1[7];
          do
          {
            if (v52 >= v60)
            {
              if ((_BYTE)v54)
              {
                uint64_t v65 = 0;
                do
                {
                  *(_WORD *)(v55 + 2 * v65) = (int)(float)(v53 * (float)(char)(int)*(float *)(v62 + 4 * v65));
                  ++v65;
                }
                while (v54 != v65);
              }
            }
            else
            {
              if (v56)
              {
                for (uint64_t k = 0; k != v56; ++k)
                  *(_WORD *)(v55 + 2 * k) = (int)(float)(v53 * (float)*(char *)(v58 + k));
              }
              uint64_t v64 = v57;
              if (v54 > v5)
              {
                do
                {
                  *(_WORD *)(v55 + 2 * v64) = (int)(float)(v53 * (float)(char)(int)*(float *)(v62 + 4 * v64));
                  ++v64;
                }
                while ((v54 - v56 + v57) != v64);
              }
            }
            v55 += v59;
            v58 += v61;
            v52 += v61;
            ++v51;
          }
          while (v51 != v50);
        }
        break;
      case 3uLL:
        uint64_t v66 = a1[8];
        if (v66)
        {
          uint64_t v67 = 0;
          unint64_t v68 = 0;
          float v69 = a2 * 0.007874;
          uint64_t v71 = *a1;
          uint64_t v70 = a1[1];
          if (a1[4] >= v70) {
            uint64_t v72 = a1[1];
          }
          else {
            uint64_t v72 = a1[4];
          }
          uint64_t v73 = a1[4];
          if (v70 < (unint64_t)v5) {
            uint64_t v73 = a1[1];
          }
          uint64_t v75 = a1[2];
          uint64_t v74 = a1[3];
          uint64_t v77 = a1[5];
          unint64_t v76 = a1[6];
          uint64_t v78 = a1[7];
          do
          {
            if (v68 >= v76)
            {
              if ((_BYTE)v70)
              {
                uint64_t v81 = 0;
                do
                {
                  *(_WORD *)(v71 + 2 * v81) = (int)(float)(v69 * truncf(*(float *)(v78 + 4 * v81)));
                  ++v81;
                }
                while (v70 != v81);
              }
            }
            else
            {
              if (v72)
              {
                for (uint64_t m = 0; m != v72; ++m)
                  *(_WORD *)(v71 + 2 * m) = (int)(float)(v69 * (float)*(char *)(v74 + m));
              }
              uint64_t v80 = v73;
              if (v70 > v5)
              {
                do
                {
                  *(_WORD *)(v71 + 2 * v80) = (int)(float)(v69 * truncf(*(float *)(v78 + 4 * v80)));
                  ++v80;
                }
                while ((v70 - v72 + v73) != v80);
              }
            }
            v71 += v75;
            v74 += v77;
            v68 += v77;
            ++v67;
          }
          while (v67 != v66);
        }
        break;
      case 4uLL:
        if (a2 != 1.0)
        {
          unint64_t v204 = sub_20B1B732C;
          goto LABEL_261;
        }
        uint64_t v82 = a1[8];
        if (v82)
        {
          uint64_t v83 = 0;
          unint64_t v84 = 0;
          unsigned int v85 = a1[4];
          uint64_t v87 = *a1;
          uint64_t v86 = a1[1];
          if (v85 >= v86) {
            unsigned int v85 = a1[1];
          }
          uint64_t v88 = a1[4];
          if (v86 < (unint64_t)v5) {
            uint64_t v88 = a1[1];
          }
          uint64_t v90 = a1[2];
          uint64_t v89 = a1[3];
          uint64_t v92 = a1[5];
          unint64_t v91 = a1[6];
          uint64_t v93 = a1[7];
          do
          {
            if (v84 >= v91)
            {
              if ((_BYTE)v86)
              {
                uint64_t v96 = 0;
                do
                {
                  *(_WORD *)(v87 + 2 * v96) = (int)*(float *)(v93 + 4 * v96);
                  ++v96;
                }
                while (v86 != v96);
              }
            }
            else
            {
              if (v85)
              {
                uint64_t v94 = 0;
                do
                {
                  *(_WORD *)(v87 + v94) = *(_WORD *)(v89 + v94);
                  v94 += 2;
                }
                while (2 * v85 != v94);
              }
              uint64_t v95 = v88;
              if (v86 > v5)
              {
                do
                {
                  *(_WORD *)(v87 + 2 * v95) = (int)*(float *)(v93 + 4 * v95);
                  ++v95;
                }
                while ((v86 - v85 + v88) != v95);
              }
            }
            v87 += v90;
            v89 += v92;
            v84 += v92;
            ++v83;
          }
          while (v83 != v82);
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          uint64_t v97 = a1[8];
          if (v97)
          {
            uint64_t v98 = 0;
            unint64_t v99 = 0;
            unsigned int v100 = a1[4];
            uint64_t v102 = *a1;
            uint64_t v101 = a1[1];
            if (v100 >= v101) {
              unsigned int v100 = a1[1];
            }
            uint64_t v103 = a1[4];
            if (v101 < (unint64_t)v5) {
              uint64_t v103 = a1[1];
            }
            uint64_t v105 = a1[2];
            uint64_t v104 = a1[3];
            uint64_t v107 = a1[5];
            unint64_t v106 = a1[6];
            uint64_t v108 = a1[7];
            do
            {
              if (v99 >= v106)
              {
                if ((_BYTE)v101)
                {
                  uint64_t v111 = 0;
                  do
                  {
                    *(_WORD *)(v102 + 2 * v111) = (int)*(float *)(v108 + 4 * v111);
                    ++v111;
                  }
                  while (v101 != v111);
                }
              }
              else
              {
                if (v100)
                {
                  uint64_t v109 = 0;
                  do
                  {
                    *(_WORD *)(v102 + v109) = *(_WORD *)(v104 + v109);
                    v109 += 2;
                  }
                  while (2 * v100 != v109);
                }
                uint64_t v110 = v103;
                if (v101 > v5)
                {
                  do
                  {
                    *(_WORD *)(v102 + 2 * v110) = (int)*(float *)(v108 + 4 * v110);
                    ++v110;
                  }
                  while ((v101 - v100 + v103) != v110);
                }
              }
              v102 += v105;
              v104 += v107;
              v99 += v107;
              ++v98;
            }
            while (v98 != v97);
          }
        }
        else
        {
          unint64_t v204 = sub_20B1B7318;
LABEL_261:
          sub_20B1B7194((uint64_t)v204, a1, a2);
        }
        break;
      case 6uLL:
        uint64_t v112 = a1[8];
        if (v112)
        {
          uint64_t v113 = 0;
          unint64_t v114 = 0;
          float v115 = a2 * 0.000015259;
          unsigned int v116 = a1[4];
          uint64_t v118 = *a1;
          uint64_t v117 = a1[1];
          if (v116 >= v117) {
            unsigned int v116 = a1[1];
          }
          uint64_t v119 = a1[4];
          if (v117 < (unint64_t)v5) {
            uint64_t v119 = a1[1];
          }
          uint64_t v121 = a1[2];
          uint64_t v120 = a1[3];
          uint64_t v123 = a1[5];
          unint64_t v122 = a1[6];
          uint64_t v124 = a1[7];
          do
          {
            if (v114 >= v122)
            {
              if ((_BYTE)v117)
              {
                uint64_t v127 = 0;
                do
                {
                  a3 = v115 * truncf(*(float *)(v124 + 4 * v127));
                  *(_WORD *)(v118 + 2 * v127++) = (int)a3;
                }
                while (v117 != v127);
              }
            }
            else
            {
              if (v116)
              {
                uint64_t v125 = 0;
                do
                {
                  LOWORD(a3) = *(_WORD *)(v120 + v125);
                  a3 = v115 * (float)LODWORD(a3);
                  *(_WORD *)(v118 + v125) = (int)a3;
                  v125 += 2;
                }
                while (2 * v116 != v125);
              }
              uint64_t v126 = v119;
              if (v117 > v5)
              {
                do
                {
                  a3 = v115 * truncf(*(float *)(v124 + 4 * v126));
                  *(_WORD *)(v118 + 2 * v126++) = (int)a3;
                }
                while ((v117 - v116 + v119) != v126);
              }
            }
            v118 += v121;
            v120 += v123;
            v114 += v123;
            ++v113;
          }
          while (v113 != v112);
        }
        break;
      case 7uLL:
        uint64_t v128 = a1[8];
        if (v128)
        {
          uint64_t v129 = 0;
          unint64_t v130 = 0;
          float v131 = a2 * 0.000030519;
          unsigned int v132 = a1[4];
          uint64_t v134 = *a1;
          uint64_t v133 = a1[1];
          if (v132 >= v133) {
            unsigned int v132 = a1[1];
          }
          uint64_t v135 = a1[4];
          if (v133 < (unint64_t)v5) {
            uint64_t v135 = a1[1];
          }
          uint64_t v137 = a1[2];
          uint64_t v136 = a1[3];
          uint64_t v139 = a1[5];
          unint64_t v138 = a1[6];
          uint64_t v140 = a1[7];
          do
          {
            if (v130 >= v138)
            {
              if ((_BYTE)v133)
              {
                uint64_t v143 = 0;
                do
                {
                  *(_WORD *)(v134 + 2 * v143) = (int)(float)(v131 * truncf(*(float *)(v140 + 4 * v143)));
                  ++v143;
                }
                while (v133 != v143);
              }
            }
            else
            {
              if (v132)
              {
                uint64_t v141 = 0;
                do
                {
                  *(_WORD *)(v134 + v141) = (int)(float)(v131 * (float)*(__int16 *)(v136 + v141));
                  v141 += 2;
                }
                while (2 * v132 != v141);
              }
              uint64_t v142 = v135;
              if (v133 > v5)
              {
                do
                {
                  *(_WORD *)(v134 + 2 * v142) = (int)(float)(v131 * truncf(*(float *)(v140 + 4 * v142)));
                  ++v142;
                }
                while ((v133 - v132 + v135) != v142);
              }
            }
            v134 += v137;
            v136 += v139;
            v130 += v139;
            ++v129;
          }
          while (v129 != v128);
        }
        break;
      case 8uLL:
        if (a2 == 1.0)
        {
          uint64_t v144 = a1[8];
          if (v144)
          {
            uint64_t v145 = 0;
            unint64_t v146 = 0;
            uint64_t v148 = *a1;
            uint64_t v147 = a1[1];
            if (a1[4] >= v147) {
              uint64_t v149 = a1[1];
            }
            else {
              uint64_t v149 = a1[4];
            }
            uint64_t v150 = a1[4];
            if (v147 < (unint64_t)v5) {
              uint64_t v150 = a1[1];
            }
            uint64_t v152 = a1[2];
            uint64_t v151 = a1[3];
            uint64_t v154 = a1[5];
            unint64_t v153 = a1[6];
            uint64_t v155 = a1[7];
            do
            {
              if (v146 >= v153)
              {
                if ((_BYTE)v147)
                {
                  uint64_t v158 = 0;
                  do
                  {
                    *(_WORD *)(v148 + 2 * v158) = *(float *)(v155 + 4 * v158);
                    ++v158;
                  }
                  while (v147 != v158);
                }
              }
              else
              {
                if (v149)
                {
                  for (uint64_t n = 0; n != v149; ++n)
                    *(_WORD *)(v148 + 2 * n) = *(_DWORD *)(v151 + 4 * n);
                }
                uint64_t v157 = v150;
                if (v147 > v5)
                {
                  do
                  {
                    *(_WORD *)(v148 + 2 * v157) = *(float *)(v155 + 4 * v157);
                    ++v157;
                  }
                  while ((v147 - v149 + v150) != v157);
                }
              }
              v148 += v152;
              v151 += v154;
              v146 += v154;
              ++v145;
            }
            while (v145 != v144);
          }
        }
        else
        {
          sub_20B1B74D8((uint64_t)sub_20B1B74C4, a1, a2);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          uint64_t v159 = a1[8];
          if (v159)
          {
            uint64_t v160 = 0;
            unint64_t v161 = 0;
            uint64_t v163 = *a1;
            uint64_t v162 = a1[1];
            if (a1[4] >= v162) {
              uint64_t v164 = a1[1];
            }
            else {
              uint64_t v164 = a1[4];
            }
            uint64_t v165 = a1[4];
            if (v162 < (unint64_t)v5) {
              uint64_t v165 = a1[1];
            }
            uint64_t v167 = a1[2];
            uint64_t v166 = a1[3];
            uint64_t v169 = a1[5];
            unint64_t v168 = a1[6];
            uint64_t v170 = a1[7];
            do
            {
              if (v161 >= v168)
              {
                if ((_BYTE)v162)
                {
                  uint64_t v173 = 0;
                  do
                  {
                    *(_WORD *)(v163 + 2 * v173) = (int)*(float *)(v170 + 4 * v173);
                    ++v173;
                  }
                  while (v162 != v173);
                }
              }
              else
              {
                if (v164)
                {
                  for (iuint64_t i = 0; ii != v164; ++ii)
                    *(_WORD *)(v163 + 2 * ii) = *(_DWORD *)(v166 + 4 * ii);
                }
                uint64_t v172 = v165;
                if (v162 > v5)
                {
                  do
                  {
                    *(_WORD *)(v163 + 2 * v172) = (int)*(float *)(v170 + 4 * v172);
                    ++v172;
                  }
                  while ((v162 - v164 + v165) != v172);
                }
              }
              v163 += v167;
              v166 += v169;
              v161 += v169;
              ++v160;
            }
            while (v160 != v159);
          }
        }
        else
        {
          sub_20B1B7340((uint64_t)sub_20B1B74C4, a1, a2);
        }
        break;
      case 0xAuLL:
        uint64_t v211 = a1[8];
        if (v211)
        {
          uint64_t v174 = 0;
          unint64_t v175 = 0;
          uint64_t v177 = *a1;
          uint64_t v176 = a1[1];
          uint64_t v178 = v176;
          if (a1[4] >= v176) {
            unsigned int v179 = a1[1];
          }
          else {
            unsigned int v179 = a1[4];
          }
          if (v176 >= (unint64_t)v5) {
            uint64_t v180 = a1[4];
          }
          else {
            uint64_t v180 = a1[1];
          }
          uint64_t v210 = a1[1];
          uint64_t v205 = v180;
          unsigned int v206 = v179;
          uint64_t v181 = a1[3];
          uint64_t v209 = a1[2];
          uint64_t v182 = a1[7];
          unint64_t v208 = a1[6];
          uint64_t v207 = a1[5];
          uint64_t v183 = 2 * v179;
          int v184 = (v176 - v179 + v180);
          do
          {
            if (v175 >= v208)
            {
              if ((_BYTE)v210)
              {
                uint64_t v187 = 0;
                do
                {
                  *(_WORD *)(v177 + 2 * v187) = (int)(float)(sub_20B1AB850((int)*(float *)(v182 + 4 * v187)) * a2);
                  ++v187;
                }
                while (v178 != v187);
              }
            }
            else
            {
              if (v206)
              {
                uint64_t v185 = 0;
                do
                {
                  *(_WORD *)(v177 + v185) = (int)(float)(sub_20B1AB850(*(unsigned __int16 *)(v181 + v185)) * a2);
                  v185 += 2;
                }
                while (v183 != v185);
              }
              uint64_t v186 = v205;
              if (v210 > v5)
              {
                do
                {
                  *(_WORD *)(v177 + 2 * v186) = (int)(float)(sub_20B1AB850((int)*(float *)(v182 + 4 * v186)) * a2);
                  ++v186;
                }
                while (v184 != v186);
              }
            }
            v177 += v209;
            v181 += v207;
            v175 += v207;
            ++v174;
          }
          while (v174 != v211);
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          uint64_t v188 = a1[8];
          if (v188)
          {
            uint64_t v189 = 0;
            unint64_t v190 = 0;
            uint64_t v192 = *a1;
            uint64_t v191 = a1[1];
            if (a1[4] >= v191) {
              uint64_t v193 = a1[1];
            }
            else {
              uint64_t v193 = a1[4];
            }
            uint64_t v194 = a1[4];
            if (v191 < (unint64_t)v5) {
              uint64_t v194 = a1[1];
            }
            uint64_t v196 = a1[2];
            uint64_t v195 = a1[3];
            uint64_t v198 = a1[5];
            unint64_t v197 = a1[6];
            uint64_t v199 = a1[7];
            do
            {
              if (v190 >= v197)
              {
                if ((_BYTE)v191)
                {
                  uint64_t v202 = 0;
                  do
                  {
                    *(_WORD *)(v192 + 2 * v202) = (int)*(float *)(v199 + 4 * v202);
                    ++v202;
                  }
                  while (v191 != v202);
                }
              }
              else
              {
                if (v193)
                {
                  for (juint64_t j = 0; jj != v193; ++jj)
                    *(_WORD *)(v192 + 2 * jj) = (int)*(float *)(v195 + 4 * jj);
                }
                uint64_t v201 = v194;
                if (v191 > v5)
                {
                  do
                  {
                    *(_WORD *)(v192 + 2 * v201) = (int)*(float *)(v199 + 4 * v201);
                    ++v201;
                  }
                  while ((v191 - v193 + v194) != v201);
                }
              }
              v192 += v196;
              v195 += v198;
              v190 += v198;
              ++v189;
            }
            while (v189 != v188);
          }
        }
        else
        {
          sub_20B1B6E5C((uint64_t)sub_20B1B6FD8, a1, a2);
        }
        break;
      default:
        return;
    }
  }
}

void sub_20B1B03A8(void *a1, float a2, float a3)
{
  uint64_t v5 = a1[4];
  if ((v5 & 0x1000) != 0)
  {
    if (v5 == 593924)
    {
      uint64_t v28 = a1[8];
      if (v28)
      {
        float v29 = a2 * 0.00097752;
        unsigned int v30 = *((unsigned __int8 *)a1 + 8);
        uint64_t v31 = a1[2];
        uint64_t v32 = a1[5];
        uint64_t v33 = (_DWORD *)(*a1 + 8);
        unsigned int v34 = (_DWORD *)(a1[3] + 8);
        do
        {
          *(v33 - 2) = (int)(float)(v29 * (float)(*(v34 - 2) >> 22));
          if (v30 >= 2)
          {
            *(v33 - 1) = (int)(float)(v29 * (float)((*(v34 - 1) >> 12) & 0x3FF));
            if (v30 != 2)
            {
              *uint64_t v33 = (int)(float)(v29 * (float)((*v34 >> 2) & 0x3FF));
              if (v30 >= 4) {
                v33[1] = (int)(float)((float)(a2 * 0.33333) * (float)(v34[1] & 3));
              }
            }
          }
          uint64_t v33 = (_DWORD *)((char *)v33 + v31);
          unsigned int v34 = (_DWORD *)((char *)v34 + v32);
          --v28;
        }
        while (v28);
      }
    }
    else if (v5 == 659460)
    {
      uint64_t v21 = a1[8];
      if (v21)
      {
        float v22 = a2 * 0.0019569;
        unsigned int v23 = *((unsigned __int8 *)a1 + 8);
        uint64_t v24 = a1[2];
        uint64_t v25 = a1[5];
        uint64_t v26 = (_DWORD *)(*a1 + 8);
        uint64_t v27 = (_DWORD *)(a1[3] + 8);
        do
        {
          *(v26 - 2) = (int)(float)(v22 * (float)(*(v27 - 2) >> 22));
          if (v23 >= 2)
          {
            *(v26 - 1) = (int)(float)(v22 * (float)((*(v27 - 1) >> 12) & 0x3FF));
            if (v23 != 2)
            {
              *uint64_t v26 = (int)(float)(v22 * (float)((*v27 >> 2) & 0x3FF));
              if (v23 >= 4) {
                v26[1] = (int)(float)((float)(v27[1] & 3) * a2);
              }
            }
          }
          uint64_t v26 = (_DWORD *)((char *)v26 + v24);
          uint64_t v27 = (_DWORD *)((char *)v27 + v25);
          --v21;
        }
        while (v21);
      }
    }
  }
  else
  {
    switch(((a1[4] & 0xFFFF0000uLL) - 0x10000) >> 16)
    {
      case 0uLL:
        if (a2 != 1.0)
        {
          uint64_t v202 = sub_20B1B798C;
          goto LABEL_256;
        }
        uint64_t v6 = a1[8];
        if (v6)
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          uint64_t v10 = *a1;
          uint64_t v9 = a1[1];
          if (a1[4] >= v9) {
            uint64_t v11 = a1[1];
          }
          else {
            uint64_t v11 = a1[4];
          }
          uint64_t v12 = a1[4];
          if (v9 < (unint64_t)v5) {
            uint64_t v12 = a1[1];
          }
          uint64_t v14 = a1[2];
          uint64_t v13 = a1[3];
          uint64_t v15 = a1[5];
          unint64_t v16 = a1[6];
          uint64_t v17 = a1[7];
          do
          {
            if (v8 >= v16)
            {
              if ((_BYTE)v9)
              {
                uint64_t v20 = 0;
                do
                {
                  *(_DWORD *)(v10 + v20) = (int)*(float *)(v17 + v20);
                  v20 += 4;
                }
                while (4 * v9 != v20);
              }
            }
            else
            {
              if (v11)
              {
                for (uint64_t i = 0; i != v11; ++i)
                  *(_DWORD *)(v10 + 4 * i) = *(unsigned __int8 *)(v13 + i);
              }
              uint64_t v19 = v12;
              if (v9 > v5)
              {
                do
                {
                  *(_DWORD *)(v10 + 4 * v19) = (int)*(float *)(v17 + 4 * v19);
                  ++v19;
                }
                while ((v9 - v11 + v12) != v19);
              }
            }
            v10 += v14;
            v13 += v15;
            v8 += v15;
            ++v7;
          }
          while (v7 != v6);
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          uint64_t v35 = a1[8];
          if (v35)
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            uint64_t v39 = *a1;
            uint64_t v38 = a1[1];
            if (a1[4] >= v38) {
              uint64_t v40 = a1[1];
            }
            else {
              uint64_t v40 = a1[4];
            }
            uint64_t v41 = a1[4];
            if (v38 < (unint64_t)v5) {
              uint64_t v41 = a1[1];
            }
            uint64_t v43 = a1[2];
            uint64_t v42 = a1[3];
            uint64_t v44 = a1[5];
            unint64_t v45 = a1[6];
            uint64_t v46 = a1[7];
            do
            {
              if (v37 >= v45)
              {
                if ((_BYTE)v38)
                {
                  uint64_t v49 = 0;
                  do
                  {
                    *(_DWORD *)(v39 + v49) = (int)*(float *)(v46 + v49);
                    v49 += 4;
                  }
                  while (4 * v38 != v49);
                }
              }
              else
              {
                if (v40)
                {
                  for (uint64_t j = 0; j != v40; ++j)
                    *(_DWORD *)(v39 + 4 * j) = *(char *)(v42 + j);
                }
                uint64_t v48 = v41;
                if (v38 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v39 + 4 * v48) = (int)*(float *)(v46 + 4 * v48);
                    ++v48;
                  }
                  while ((v38 - v40 + v41) != v48);
                }
              }
              v39 += v43;
              v42 += v44;
              v37 += v44;
              ++v36;
            }
            while (v36 != v35);
          }
        }
        else
        {
          uint64_t v202 = sub_20B1B7978;
LABEL_256:
          sub_20B1B77F0((uint64_t)v202, a1, a2);
        }
        break;
      case 2uLL:
        uint64_t v50 = a1[8];
        if (v50)
        {
          uint64_t v51 = 0;
          unint64_t v52 = 0;
          float v53 = a2 * 0.0039216;
          uint64_t v55 = *a1;
          uint64_t v54 = a1[1];
          if (a1[4] >= v54) {
            uint64_t v56 = a1[1];
          }
          else {
            uint64_t v56 = a1[4];
          }
          uint64_t v57 = a1[4];
          if (v54 < (unint64_t)v5) {
            uint64_t v57 = a1[1];
          }
          uint64_t v59 = a1[2];
          uint64_t v58 = a1[3];
          uint64_t v60 = a1[5];
          unint64_t v61 = a1[6];
          uint64_t v62 = a1[7];
          do
          {
            if (v52 >= v61)
            {
              if ((_BYTE)v54)
              {
                uint64_t v65 = 0;
                do
                {
                  *(_DWORD *)(v55 + v65) = (int)(float)(v53 * (float)(char)(int)*(float *)(v62 + v65));
                  v65 += 4;
                }
                while (4 * v54 != v65);
              }
            }
            else
            {
              if (v56)
              {
                for (uint64_t k = 0; k != v56; ++k)
                  *(_DWORD *)(v55 + 4 * k) = (int)(float)(v53 * (float)*(char *)(v58 + k));
              }
              uint64_t v64 = v57;
              if (v54 > v5)
              {
                do
                {
                  *(_DWORD *)(v55 + 4 * v64) = (int)(float)(v53 * (float)(char)(int)*(float *)(v62 + 4 * v64));
                  ++v64;
                }
                while ((v54 - v56 + v57) != v64);
              }
            }
            v55 += v59;
            v58 += v60;
            v52 += v60;
            ++v51;
          }
          while (v51 != v50);
        }
        break;
      case 3uLL:
        uint64_t v66 = a1[8];
        if (v66)
        {
          uint64_t v67 = 0;
          unint64_t v68 = 0;
          float v69 = a2 * 0.007874;
          uint64_t v71 = *a1;
          uint64_t v70 = a1[1];
          if (a1[4] >= v70) {
            uint64_t v72 = a1[1];
          }
          else {
            uint64_t v72 = a1[4];
          }
          uint64_t v73 = a1[4];
          if (v70 < (unint64_t)v5) {
            uint64_t v73 = a1[1];
          }
          uint64_t v75 = a1[2];
          uint64_t v74 = a1[3];
          uint64_t v76 = a1[5];
          unint64_t v77 = a1[6];
          uint64_t v78 = a1[7];
          do
          {
            if (v68 >= v77)
            {
              if ((_BYTE)v70)
              {
                uint64_t v81 = 0;
                do
                {
                  *(_DWORD *)(v71 + v81) = (int)(float)(v69 * truncf(*(float *)(v78 + v81)));
                  v81 += 4;
                }
                while (4 * v70 != v81);
              }
            }
            else
            {
              if (v72)
              {
                for (uint64_t m = 0; m != v72; ++m)
                  *(_DWORD *)(v71 + 4 * m) = (int)(float)(v69 * (float)*(char *)(v74 + m));
              }
              uint64_t v80 = v73;
              if (v70 > v5)
              {
                do
                {
                  *(_DWORD *)(v71 + 4 * v80) = (int)(float)(v69 * truncf(*(float *)(v78 + 4 * v80)));
                  ++v80;
                }
                while ((v70 - v72 + v73) != v80);
              }
            }
            v71 += v75;
            v74 += v76;
            v68 += v76;
            ++v67;
          }
          while (v67 != v66);
        }
        break;
      case 4uLL:
        if (a2 != 1.0)
        {
          uint64_t v203 = sub_20B1B7B3C;
          goto LABEL_262;
        }
        uint64_t v82 = a1[8];
        if (v82)
        {
          uint64_t v83 = 0;
          unint64_t v84 = 0;
          uint64_t v86 = *a1;
          uint64_t v85 = a1[1];
          if (a1[4] >= v85) {
            uint64_t v87 = a1[1];
          }
          else {
            uint64_t v87 = a1[4];
          }
          uint64_t v88 = a1[4];
          if (v85 < (unint64_t)v5) {
            uint64_t v88 = a1[1];
          }
          uint64_t v90 = a1[2];
          uint64_t v89 = a1[3];
          uint64_t v91 = a1[5];
          unint64_t v92 = a1[6];
          uint64_t v93 = a1[7];
          do
          {
            if (v84 >= v92)
            {
              if ((_BYTE)v85)
              {
                uint64_t v96 = 0;
                do
                {
                  *(_DWORD *)(v86 + v96) = (int)*(float *)(v93 + v96);
                  v96 += 4;
                }
                while (4 * v85 != v96);
              }
            }
            else
            {
              if (v87)
              {
                for (uint64_t n = 0; n != v87; ++n)
                  *(_DWORD *)(v86 + 4 * n) = *(unsigned __int16 *)(v89 + 2 * n);
              }
              uint64_t v95 = v88;
              if (v85 > v5)
              {
                do
                {
                  *(_DWORD *)(v86 + 4 * v95) = (int)*(float *)(v93 + 4 * v95);
                  ++v95;
                }
                while ((v85 - v87 + v88) != v95);
              }
            }
            v86 += v90;
            v89 += v91;
            v84 += v91;
            ++v83;
          }
          while (v83 != v82);
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          uint64_t v97 = a1[8];
          if (v97)
          {
            uint64_t v98 = 0;
            unint64_t v99 = 0;
            uint64_t v101 = *a1;
            uint64_t v100 = a1[1];
            if (a1[4] >= v100) {
              uint64_t v102 = a1[1];
            }
            else {
              uint64_t v102 = a1[4];
            }
            uint64_t v103 = a1[4];
            if (v100 < (unint64_t)v5) {
              uint64_t v103 = a1[1];
            }
            uint64_t v105 = a1[2];
            uint64_t v104 = a1[3];
            uint64_t v106 = a1[5];
            unint64_t v107 = a1[6];
            uint64_t v108 = a1[7];
            do
            {
              if (v99 >= v107)
              {
                if ((_BYTE)v100)
                {
                  uint64_t v111 = 0;
                  do
                  {
                    *(_DWORD *)(v101 + v111) = (int)*(float *)(v108 + v111);
                    v111 += 4;
                  }
                  while (4 * v100 != v111);
                }
              }
              else
              {
                if (v102)
                {
                  for (iuint64_t i = 0; ii != v102; ++ii)
                    *(_DWORD *)(v101 + 4 * ii) = *(__int16 *)(v104 + 2 * ii);
                }
                uint64_t v110 = v103;
                if (v100 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v101 + 4 * v110) = (int)*(float *)(v108 + 4 * v110);
                    ++v110;
                  }
                  while ((v100 - v102 + v103) != v110);
                }
              }
              v101 += v105;
              v104 += v106;
              v99 += v106;
              ++v98;
            }
            while (v98 != v97);
          }
        }
        else
        {
          uint64_t v203 = sub_20B1B7B28;
LABEL_262:
          sub_20B1B79A0((uint64_t)v203, a1, a2);
        }
        break;
      case 6uLL:
        uint64_t v112 = a1[8];
        if (v112)
        {
          uint64_t v113 = 0;
          unint64_t v114 = 0;
          float v115 = a2 * 0.000015259;
          uint64_t v117 = *a1;
          uint64_t v116 = a1[1];
          if (a1[4] >= v116) {
            uint64_t v118 = a1[1];
          }
          else {
            uint64_t v118 = a1[4];
          }
          uint64_t v119 = a1[4];
          if (v116 < (unint64_t)v5) {
            uint64_t v119 = a1[1];
          }
          uint64_t v121 = a1[2];
          uint64_t v120 = a1[3];
          uint64_t v122 = a1[5];
          unint64_t v123 = a1[6];
          uint64_t v124 = a1[7];
          do
          {
            if (v114 >= v123)
            {
              if ((_BYTE)v116)
              {
                uint64_t v127 = 0;
                do
                {
                  a3 = v115 * truncf(*(float *)(v124 + v127));
                  *(_DWORD *)(v117 + v127) = (int)a3;
                  v127 += 4;
                }
                while (4 * v116 != v127);
              }
            }
            else
            {
              if (v118)
              {
                for (juint64_t j = 0; jj != v118; ++jj)
                {
                  LOWORD(a3) = *(_WORD *)(v120 + 2 * jj);
                  a3 = v115 * (float)LODWORD(a3);
                  *(_DWORD *)(v117 + 4 * jj) = (int)a3;
                }
              }
              uint64_t v126 = v119;
              if (v116 > v5)
              {
                do
                {
                  a3 = v115 * truncf(*(float *)(v124 + 4 * v126));
                  *(_DWORD *)(v117 + 4 * v126++) = (int)a3;
                }
                while ((v116 - v118 + v119) != v126);
              }
            }
            v117 += v121;
            v120 += v122;
            v114 += v122;
            ++v113;
          }
          while (v113 != v112);
        }
        break;
      case 7uLL:
        uint64_t v128 = a1[8];
        if (v128)
        {
          uint64_t v129 = 0;
          unint64_t v130 = 0;
          float v131 = a2 * 0.000030519;
          uint64_t v133 = *a1;
          uint64_t v132 = a1[1];
          if (a1[4] >= v132) {
            uint64_t v134 = a1[1];
          }
          else {
            uint64_t v134 = a1[4];
          }
          uint64_t v135 = a1[4];
          if (v132 < (unint64_t)v5) {
            uint64_t v135 = a1[1];
          }
          uint64_t v137 = a1[2];
          uint64_t v136 = a1[3];
          uint64_t v138 = a1[5];
          unint64_t v139 = a1[6];
          uint64_t v140 = a1[7];
          do
          {
            if (v130 >= v139)
            {
              if ((_BYTE)v132)
              {
                uint64_t v143 = 0;
                do
                {
                  *(_DWORD *)(v133 + v143) = (int)(float)(v131 * truncf(*(float *)(v140 + v143)));
                  v143 += 4;
                }
                while (4 * v132 != v143);
              }
            }
            else
            {
              if (v134)
              {
                for (kuint64_t k = 0; kk != v134; ++kk)
                  *(_DWORD *)(v133 + 4 * kk) = (int)(float)(v131 * (float)*(__int16 *)(v136 + 2 * kk));
              }
              uint64_t v142 = v135;
              if (v132 > v5)
              {
                do
                {
                  *(_DWORD *)(v133 + 4 * v142) = (int)(float)(v131 * truncf(*(float *)(v140 + 4 * v142)));
                  ++v142;
                }
                while ((v132 - v134 + v135) != v142);
              }
            }
            v133 += v137;
            v136 += v138;
            v130 += v138;
            ++v129;
          }
          while (v129 != v128);
        }
        break;
      case 8uLL:
        if (a2 == 1.0)
        {
          uint64_t v144 = a1[8];
          if (v144)
          {
            uint64_t v145 = 0;
            unint64_t v146 = 0;
            unsigned int v147 = a1[4];
            uint64_t v149 = *a1;
            uint64_t v148 = a1[1];
            if (v147 >= v148) {
              unsigned int v147 = a1[1];
            }
            uint64_t v150 = a1[4];
            if (v148 < (unint64_t)v5) {
              uint64_t v150 = a1[1];
            }
            uint64_t v152 = a1[2];
            uint64_t v151 = a1[3];
            uint64_t v153 = a1[5];
            unint64_t v154 = a1[6];
            uint64_t v155 = a1[7];
            do
            {
              if (v146 >= v154)
              {
                if ((_BYTE)v148)
                {
                  uint64_t v158 = 0;
                  do
                  {
                    *(_DWORD *)(v149 + v158) = *(float *)(v155 + v158);
                    v158 += 4;
                  }
                  while (4 * v148 != v158);
                }
              }
              else
              {
                if (v147)
                {
                  uint64_t v156 = 0;
                  do
                  {
                    *(_DWORD *)(v149 + v156) = *(_DWORD *)(v151 + v156);
                    v156 += 4;
                  }
                  while (4 * v147 != v156);
                }
                uint64_t v157 = v150;
                if (v148 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v149 + 4 * v157) = *(float *)(v155 + 4 * v157);
                    ++v157;
                  }
                  while ((v148 - v147 + v150) != v157);
                }
              }
              v149 += v152;
              v151 += v153;
              v146 += v153;
              ++v145;
            }
            while (v145 != v144);
          }
        }
        else
        {
          sub_20B1B7CEC((uint64_t)sub_20B1B7CD8, a1, a2);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          uint64_t v159 = a1[8];
          if (v159)
          {
            uint64_t v160 = 0;
            unint64_t v161 = 0;
            unsigned int v162 = a1[4];
            uint64_t v164 = *a1;
            uint64_t v163 = a1[1];
            if (v162 >= v163) {
              unsigned int v162 = a1[1];
            }
            uint64_t v165 = a1[4];
            if (v163 < (unint64_t)v5) {
              uint64_t v165 = a1[1];
            }
            uint64_t v167 = a1[2];
            uint64_t v166 = a1[3];
            uint64_t v168 = a1[5];
            unint64_t v169 = a1[6];
            uint64_t v170 = a1[7];
            do
            {
              if (v161 >= v169)
              {
                if ((_BYTE)v163)
                {
                  uint64_t v173 = 0;
                  do
                  {
                    *(_DWORD *)(v164 + v173) = (int)*(float *)(v170 + v173);
                    v173 += 4;
                  }
                  while (4 * v163 != v173);
                }
              }
              else
              {
                if (v162)
                {
                  uint64_t v171 = 0;
                  do
                  {
                    *(_DWORD *)(v164 + v171) = *(_DWORD *)(v166 + v171);
                    v171 += 4;
                  }
                  while (4 * v162 != v171);
                }
                uint64_t v172 = v165;
                if (v163 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v164 + 4 * v172) = (int)*(float *)(v170 + 4 * v172);
                    ++v172;
                  }
                  while ((v163 - v162 + v165) != v172);
                }
              }
              v164 += v167;
              v166 += v168;
              v161 += v168;
              ++v160;
            }
            while (v160 != v159);
          }
        }
        else
        {
          sub_20B1B7B50((uint64_t)sub_20B1B7CD8, a1, a2);
        }
        break;
      case 0xAuLL:
        uint64_t v209 = a1[8];
        if (v209)
        {
          uint64_t v174 = 0;
          unint64_t v175 = 0;
          uint64_t v177 = *a1;
          uint64_t v176 = a1[1];
          if (a1[4] >= v176) {
            uint64_t v178 = a1[1];
          }
          else {
            uint64_t v178 = a1[4];
          }
          if (v176 >= (unint64_t)v5) {
            uint64_t v179 = a1[4];
          }
          else {
            uint64_t v179 = a1[1];
          }
          uint64_t v204 = v179;
          uint64_t v180 = a1[3];
          uint64_t v207 = a1[2];
          uint64_t v208 = a1[1];
          uint64_t v181 = a1[7];
          unint64_t v206 = a1[6];
          uint64_t v205 = a1[5];
          uint64_t v182 = 4 * v176;
          int v183 = (v176 - v178 + v179);
          do
          {
            if (v175 >= v206)
            {
              if ((_BYTE)v208)
              {
                uint64_t v186 = 0;
                do
                {
                  *(_DWORD *)(v177 + v186) = (int)(float)(sub_20B1AB850((int)*(float *)(v181 + v186)) * a2);
                  v186 += 4;
                }
                while (v182 != v186);
              }
            }
            else
            {
              if (v178)
              {
                for (muint64_t m = 0; mm != v178; ++mm)
                  *(_DWORD *)(v177 + 4 * mm) = (int)(float)(sub_20B1AB850(*(unsigned __int16 *)(v180 + 2 * mm)) * a2);
              }
              uint64_t v185 = v204;
              if (v208 > v5)
              {
                do
                {
                  *(_DWORD *)(v177 + 4 * v185) = (int)(float)(sub_20B1AB850((int)*(float *)(v181 + 4 * v185)) * a2);
                  ++v185;
                }
                while (v183 != v185);
              }
            }
            v177 += v207;
            v180 += v205;
            v175 += v205;
            ++v174;
          }
          while (v174 != v209);
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          uint64_t v187 = a1[8];
          if (v187)
          {
            uint64_t v188 = 0;
            unint64_t v189 = 0;
            unsigned int v190 = a1[4];
            uint64_t v192 = *a1;
            uint64_t v191 = a1[1];
            if (v190 >= v191) {
              unsigned int v190 = a1[1];
            }
            uint64_t v193 = a1[4];
            if (v191 < (unint64_t)v5) {
              uint64_t v193 = a1[1];
            }
            uint64_t v195 = a1[2];
            uint64_t v194 = a1[3];
            uint64_t v196 = a1[5];
            unint64_t v197 = a1[6];
            uint64_t v198 = a1[7];
            do
            {
              if (v189 >= v197)
              {
                if ((_BYTE)v191)
                {
                  uint64_t v201 = 0;
                  do
                  {
                    *(_DWORD *)(v192 + v201) = (int)*(float *)(v198 + v201);
                    v201 += 4;
                  }
                  while (4 * v191 != v201);
                }
              }
              else
              {
                if (v190)
                {
                  uint64_t v199 = 0;
                  do
                  {
                    *(_DWORD *)(v192 + v199) = (int)*(float *)(v194 + v199);
                    v199 += 4;
                  }
                  while (4 * v190 != v199);
                }
                uint64_t v200 = v193;
                if (v191 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v192 + 4 * v200) = (int)*(float *)(v198 + 4 * v200);
                    ++v200;
                  }
                  while ((v191 - v190 + v193) != v200);
                }
              }
              v192 += v195;
              v194 += v196;
              v189 += v196;
              ++v188;
            }
            while (v188 != v187);
          }
        }
        else
        {
          sub_20B1B7660((uint64_t)sub_20B1B77E0, a1, a2);
        }
        break;
      default:
        return;
    }
  }
}

void sub_20B1B13DC(uint64_t a1, float a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if ((v4 & 0x1000) != 0)
  {
    if (v4 == 593924)
    {
      if (*(void *)(a1 + 64))
      {
        unint64_t v24 = 0;
        float v25 = a2 * 0.00097752;
        uint64_t v26 = *(_DWORD **)(a1 + 24);
        uint64_t v27 = *(unsigned char **)a1;
        do
        {
          unsigned int v28 = *(unsigned __int8 *)(a1 + 8);
          unsigned char *v27 = (int)(float)(v25 * (float)(*v26 >> 22));
          if (v28 >= 2)
          {
            v27[1] = (int)(float)(v25 * (float)((v26[1] >> 12) & 0x3FF));
            if (v28 != 2)
            {
              _OWORD v27[2] = (int)(float)(v25 * (float)((v26[2] >> 2) & 0x3FF));
              if (v28 >= 4) {
                v27[3] = (int)(float)((float)(a2 * 0.33333) * (float)(v26[3] & 3));
              }
            }
          }
          v27 += *(void *)(a1 + 16);
          uint64_t v26 = (_DWORD *)((char *)v26 + *(void *)(a1 + 40));
          ++v24;
        }
        while (v24 < *(void *)(a1 + 64));
      }
    }
    else if (v4 == 659460 && *(void *)(a1 + 64))
    {
      unint64_t v19 = 0;
      float v20 = a2 * 0.0019569;
      uint64_t v21 = *(_DWORD **)(a1 + 24);
      float v22 = *(unsigned char **)a1;
      do
      {
        unsigned int v23 = *(unsigned __int8 *)(a1 + 8);
        *float v22 = (int)(float)(v20 * (float)(*v21 >> 22));
        if (v23 >= 2)
        {
          v22[1] = (int)(float)(v20 * (float)((v21[1] >> 12) & 0x3FF));
          if (v23 != 2)
          {
            v22[2] = (int)(float)(v20 * (float)((v21[2] >> 2) & 0x3FF));
            if (v23 >= 4) {
              v22[3] = (int)(float)((float)(v21[3] & 3) * a2);
            }
          }
        }
        v22 += *(void *)(a1 + 16);
        uint64_t v21 = (_DWORD *)((char *)v21 + *(void *)(a1 + 40));
        ++v19;
      }
      while (v19 < *(void *)(a1 + 64));
    }
  }
  else
  {
    switch(((*(void *)(a1 + 32) & 0xFFFF0000uLL) - 0x10000) >> 16)
    {
      case 0uLL:
        if (a2 != 1.0)
        {
          unint64_t v189 = sub_20B1B7E9C;
          unsigned int v190 = (void *)a1;
          goto LABEL_236;
        }
        if (*(void *)(a1 + 64))
        {
          unint64_t v5 = 0;
          unint64_t v6 = 0;
          unint64_t v8 = *(unsigned char **)a1;
          uint64_t v7 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v7) {
            uint64_t v9 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v9 = *(void *)(a1 + 32);
          }
          uint64_t v10 = *(char **)(a1 + 24);
          uint64_t v11 = *(void *)(a1 + 32);
          if (v7 < (unint64_t)v4) {
            uint64_t v11 = *(void *)(a1 + 8);
          }
          do
          {
            if (v6 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v7)
              {
                uint64_t v17 = 0;
                do
                {
                  v8[v17] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v17);
                  ++v17;
                }
                while (v7 != v17);
              }
            }
            else
            {
              uint64_t v12 = v10;
              uint64_t v13 = v8;
              uint64_t v14 = v9;
              if (v9)
              {
                do
                {
                  char v15 = *v12++;
                  *v13++ = v15;
                  --v14;
                }
                while (v14);
              }
              uint64_t v16 = v11;
              if (v7 > v4)
              {
                do
                {
                  v8[v16] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v16);
                  ++v16;
                }
                while ((v7 - v9 + v11) != v16);
              }
            }
            v8 += *(void *)(a1 + 16);
            uint64_t v18 = *(void *)(a1 + 40);
            v10 += v18;
            v6 += v18;
            ++v5;
          }
          while (v5 < *(void *)(a1 + 64));
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v29 = 0;
            unint64_t v30 = 0;
            uint64_t v32 = *(unsigned char **)a1;
            uint64_t v31 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v31) {
              uint64_t v33 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v33 = *(void *)(a1 + 32);
            }
            unsigned int v34 = *(char **)(a1 + 24);
            uint64_t v35 = *(void *)(a1 + 32);
            if (v31 < (unint64_t)v4) {
              uint64_t v35 = *(void *)(a1 + 8);
            }
            do
            {
              if (v30 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v31)
                {
                  uint64_t v41 = 0;
                  do
                  {
                    v32[v41] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v41);
                    ++v41;
                  }
                  while (v31 != v41);
                }
              }
              else
              {
                uint64_t v36 = v34;
                unint64_t v37 = v32;
                uint64_t v38 = v33;
                if (v33)
                {
                  do
                  {
                    char v39 = *v36++;
                    *v37++ = v39;
                    --v38;
                  }
                  while (v38);
                }
                uint64_t v40 = v35;
                if (v31 > v4)
                {
                  do
                  {
                    v32[v40] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v40);
                    ++v40;
                  }
                  while ((v31 - v33 + v35) != v40);
                }
              }
              v32 += *(void *)(a1 + 16);
              uint64_t v42 = *(void *)(a1 + 40);
              v34 += v42;
              v30 += v42;
              ++v29;
            }
            while (v29 < *(void *)(a1 + 64));
          }
        }
        else
        {
          unint64_t v189 = sub_20B1B7E88;
          unsigned int v190 = (void *)a1;
LABEL_236:
          sub_20B1B67E4((uint64_t)v189, v190, a2);
        }
        break;
      case 2uLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v43 = 0;
          unint64_t v44 = 0;
          float v45 = a2 * 0.0039216;
          uint64_t v47 = *(unsigned char **)a1;
          uint64_t v46 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v46) {
            uint64_t v48 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v48 = *(void *)(a1 + 32);
          }
          uint64_t v49 = *(char **)(a1 + 24);
          uint64_t v50 = *(void *)(a1 + 32);
          if (v46 < (unint64_t)v4) {
            uint64_t v50 = *(void *)(a1 + 8);
          }
          do
          {
            if (v44 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v46)
              {
                uint64_t v56 = 0;
                do
                {
                  v47[v56] = (int)(float)(v45 * (float)(char)(int)*(float *)(*(void *)(a1 + 56) + 4 * v56));
                  ++v56;
                }
                while (v46 != v56);
              }
            }
            else
            {
              uint64_t v51 = v49;
              unint64_t v52 = v47;
              uint64_t v53 = v48;
              if (v48)
              {
                do
                {
                  int v54 = *v51++;
                  *v52++ = (int)(float)(v45 * (float)v54);
                  --v53;
                }
                while (v53);
              }
              uint64_t v55 = v50;
              if (v46 > v4)
              {
                do
                {
                  v47[v55] = (int)(float)(v45 * (float)(char)(int)*(float *)(*(void *)(a1 + 56) + 4 * v55));
                  ++v55;
                }
                while ((v46 - v48 + v50) != v55);
              }
            }
            v47 += *(void *)(a1 + 16);
            uint64_t v57 = *(void *)(a1 + 40);
            v49 += v57;
            v44 += v57;
            ++v43;
          }
          while (v43 < *(void *)(a1 + 64));
        }
        break;
      case 3uLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v58 = 0;
          unint64_t v59 = 0;
          float v60 = a2 * 0.007874;
          uint64_t v62 = *(unsigned char **)a1;
          uint64_t v61 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v61) {
            uint64_t v63 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v63 = *(void *)(a1 + 32);
          }
          uint64_t v64 = *(char **)(a1 + 24);
          uint64_t v65 = *(void *)(a1 + 32);
          if (v61 < (unint64_t)v4) {
            uint64_t v65 = *(void *)(a1 + 8);
          }
          do
          {
            if (v59 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v61)
              {
                uint64_t v71 = 0;
                do
                {
                  v62[v71] = (int)(float)(v60 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v71)));
                  ++v71;
                }
                while (v61 != v71);
              }
            }
            else
            {
              uint64_t v66 = v64;
              uint64_t v67 = v62;
              uint64_t v68 = v63;
              if (v63)
              {
                do
                {
                  int v69 = *v66++;
                  *v67++ = (int)(float)(v60 * (float)v69);
                  --v68;
                }
                while (v68);
              }
              uint64_t v70 = v65;
              if (v61 > v4)
              {
                do
                {
                  v62[v70] = (int)(float)(v60 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v70)));
                  ++v70;
                }
                while ((v61 - v63 + v65) != v70);
              }
            }
            v62 += *(void *)(a1 + 16);
            uint64_t v72 = *(void *)(a1 + 40);
            v64 += v72;
            v59 += v72;
            ++v58;
          }
          while (v58 < *(void *)(a1 + 64));
        }
        break;
      case 4uLL:
        if (a2 != 1.0)
        {
          uint64_t v191 = sub_20B1B7EC4;
          uint64_t v192 = (void *)a1;
          goto LABEL_242;
        }
        if (*(void *)(a1 + 64))
        {
          unint64_t v73 = 0;
          unint64_t v74 = 0;
          uint64_t v76 = *(unsigned char **)a1;
          uint64_t v75 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v75) {
            uint64_t v77 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v77 = *(void *)(a1 + 32);
          }
          uint64_t v78 = *(char **)(a1 + 24);
          uint64_t v79 = *(void *)(a1 + 32);
          if (v75 < (unint64_t)v4) {
            uint64_t v79 = *(void *)(a1 + 8);
          }
          do
          {
            if (v74 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v75)
              {
                uint64_t v85 = 0;
                do
                {
                  v76[v85] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v85);
                  ++v85;
                }
                while (v75 != v85);
              }
            }
            else
            {
              uint64_t v80 = v78;
              uint64_t v81 = v76;
              uint64_t v82 = v77;
              if (v77)
              {
                do
                {
                  char v83 = *v80;
                  v80 += 2;
                  *v81++ = v83;
                  --v82;
                }
                while (v82);
              }
              uint64_t v84 = v79;
              if (v75 > v4)
              {
                do
                {
                  v76[v84] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v84);
                  ++v84;
                }
                while ((v75 - v77 + v79) != v84);
              }
            }
            v76 += *(void *)(a1 + 16);
            uint64_t v86 = *(void *)(a1 + 40);
            v78 += v86;
            v74 += v86;
            ++v73;
          }
          while (v73 < *(void *)(a1 + 64));
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v87 = 0;
            unint64_t v88 = 0;
            uint64_t v90 = *(unsigned char **)a1;
            uint64_t v89 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v89) {
              uint64_t v91 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v91 = *(void *)(a1 + 32);
            }
            unint64_t v92 = *(char **)(a1 + 24);
            uint64_t v93 = *(void *)(a1 + 32);
            if (v89 < (unint64_t)v4) {
              uint64_t v93 = *(void *)(a1 + 8);
            }
            do
            {
              if (v88 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v89)
                {
                  uint64_t v99 = 0;
                  do
                  {
                    v90[v99] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v99);
                    ++v99;
                  }
                  while (v89 != v99);
                }
              }
              else
              {
                uint64_t v94 = v92;
                uint64_t v95 = v90;
                uint64_t v96 = v91;
                if (v91)
                {
                  do
                  {
                    char v97 = *v94;
                    v94 += 2;
                    *v95++ = v97;
                    --v96;
                  }
                  while (v96);
                }
                uint64_t v98 = v93;
                if (v89 > v4)
                {
                  do
                  {
                    v90[v98] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v98);
                    ++v98;
                  }
                  while ((v89 - v91 + v93) != v98);
                }
              }
              v90 += *(void *)(a1 + 16);
              uint64_t v100 = *(void *)(a1 + 40);
              v92 += v100;
              v88 += v100;
              ++v87;
            }
            while (v87 < *(void *)(a1 + 64));
          }
        }
        else
        {
          uint64_t v191 = sub_20B1B7EB0;
          uint64_t v192 = (void *)a1;
LABEL_242:
          sub_20B1B6990((uint64_t)v191, v192, a2);
        }
        break;
      case 6uLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v101 = 0;
          unint64_t v102 = 0;
          float v103 = a2 * 0.000015259;
          uint64_t v105 = *(unsigned char **)a1;
          uint64_t v104 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v104) {
            uint64_t v106 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v106 = *(void *)(a1 + 32);
          }
          unint64_t v107 = *(unsigned __int16 **)(a1 + 24);
          uint64_t v108 = *(void *)(a1 + 32);
          if (v104 < (unint64_t)v4) {
            uint64_t v108 = *(void *)(a1 + 8);
          }
          do
          {
            if (v102 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v104)
              {
                uint64_t v114 = 0;
                do
                {
                  v105[v114] = (int)(float)(v103 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v114)));
                  ++v114;
                }
                while (v104 != v114);
              }
            }
            else
            {
              uint64_t v109 = v107;
              uint64_t v110 = v105;
              uint64_t v111 = v106;
              if (v106)
              {
                do
                {
                  unsigned int v112 = *v109++;
                  *v110++ = (int)(float)(v103 * (float)v112);
                  --v111;
                }
                while (v111);
              }
              uint64_t v113 = v108;
              if (v104 > v4)
              {
                do
                {
                  v105[v113] = (int)(float)(v103 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v113)));
                  ++v113;
                }
                while ((v104 - v106 + v108) != v113);
              }
            }
            v105 += *(void *)(a1 + 16);
            uint64_t v115 = *(void *)(a1 + 40);
            unint64_t v107 = (unsigned __int16 *)((char *)v107 + v115);
            v102 += v115;
            ++v101;
          }
          while (v101 < *(void *)(a1 + 64));
        }
        break;
      case 7uLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v116 = 0;
          unint64_t v117 = 0;
          float v118 = a2 * 0.000030519;
          uint64_t v120 = *(unsigned char **)a1;
          uint64_t v119 = *(void *)(a1 + 8);
          if (*(void *)(a1 + 32) >= v119) {
            uint64_t v121 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v121 = *(void *)(a1 + 32);
          }
          uint64_t v122 = *(__int16 **)(a1 + 24);
          uint64_t v123 = *(void *)(a1 + 32);
          if (v119 < (unint64_t)v4) {
            uint64_t v123 = *(void *)(a1 + 8);
          }
          do
          {
            if (v117 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v119)
              {
                uint64_t v129 = 0;
                do
                {
                  v120[v129] = (int)(float)(v118 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v129)));
                  ++v129;
                }
                while (v119 != v129);
              }
            }
            else
            {
              uint64_t v124 = v122;
              uint64_t v125 = v120;
              uint64_t v126 = v121;
              if (v121)
              {
                do
                {
                  int v127 = *v124++;
                  *v125++ = (int)(float)(v118 * (float)v127);
                  --v126;
                }
                while (v126);
              }
              uint64_t v128 = v123;
              if (v119 > v4)
              {
                do
                {
                  v120[v128] = (int)(float)(v118 * truncf(*(float *)(*(void *)(a1 + 56) + 4 * v128)));
                  ++v128;
                }
                while ((v119 - v121 + v123) != v128);
              }
            }
            v120 += *(void *)(a1 + 16);
            uint64_t v130 = *(void *)(a1 + 40);
            uint64_t v122 = (__int16 *)((char *)v122 + v130);
            v117 += v130;
            ++v116;
          }
          while (v116 < *(void *)(a1 + 64));
        }
        break;
      case 8uLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v131 = 0;
            unint64_t v132 = 0;
            uint64_t v134 = *(unsigned char **)a1;
            uint64_t v133 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v133) {
              uint64_t v135 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v135 = *(void *)(a1 + 32);
            }
            uint64_t v136 = *(int **)(a1 + 24);
            uint64_t v137 = *(void *)(a1 + 32);
            if (v133 < (unint64_t)v4) {
              uint64_t v137 = *(void *)(a1 + 8);
            }
            do
            {
              if (v132 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v133)
                {
                  uint64_t v143 = 0;
                  do
                  {
                    v134[v143] = *(float *)(*(void *)(a1 + 56) + 4 * v143);
                    ++v143;
                  }
                  while (v133 != v143);
                }
              }
              else
              {
                uint64_t v138 = v136;
                unint64_t v139 = v134;
                uint64_t v140 = v135;
                if (v135)
                {
                  do
                  {
                    int v141 = *v138++;
                    *v139++ = v141;
                    --v140;
                  }
                  while (v140);
                }
                uint64_t v142 = v137;
                if (v133 > v4)
                {
                  do
                  {
                    v134[v142] = *(float *)(*(void *)(a1 + 56) + 4 * v142);
                    ++v142;
                  }
                  while ((v133 - v135 + v137) != v142);
                }
              }
              v134 += *(void *)(a1 + 16);
              uint64_t v144 = *(void *)(a1 + 40);
              uint64_t v136 = (int *)((char *)v136 + v144);
              v132 += v144;
              ++v131;
            }
            while (v131 < *(void *)(a1 + 64));
          }
        }
        else
        {
          sub_20B1B6CD4((uint64_t)sub_20B1B7ED8, (void *)a1, a2);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v145 = 0;
            unint64_t v146 = 0;
            uint64_t v148 = *(unsigned char **)a1;
            uint64_t v147 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v147) {
              uint64_t v149 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v149 = *(void *)(a1 + 32);
            }
            uint64_t v150 = *(int **)(a1 + 24);
            uint64_t v151 = *(void *)(a1 + 32);
            if (v147 < (unint64_t)v4) {
              uint64_t v151 = *(void *)(a1 + 8);
            }
            do
            {
              if (v146 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v147)
                {
                  uint64_t v157 = 0;
                  do
                  {
                    v148[v157] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v157);
                    ++v157;
                  }
                  while (v147 != v157);
                }
              }
              else
              {
                uint64_t v152 = v150;
                uint64_t v153 = v148;
                uint64_t v154 = v149;
                if (v149)
                {
                  do
                  {
                    int v155 = *v152++;
                    *v153++ = v155;
                    --v154;
                  }
                  while (v154);
                }
                uint64_t v156 = v151;
                if (v147 > v4)
                {
                  do
                  {
                    v148[v156] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v156);
                    ++v156;
                  }
                  while ((v147 - v149 + v151) != v156);
                }
              }
              v148 += *(void *)(a1 + 16);
              uint64_t v158 = *(void *)(a1 + 40);
              uint64_t v150 = (int *)((char *)v150 + v158);
              v146 += v158;
              ++v145;
            }
            while (v145 < *(void *)(a1 + 64));
          }
        }
        else
        {
          sub_20B1B6B3C((uint64_t)sub_20B1B7ED8, (void *)a1, a2);
        }
        break;
      case 0xAuLL:
        if (*(void *)(a1 + 64))
        {
          unint64_t v159 = 0;
          unint64_t v160 = 0;
          unint64_t v161 = *(unsigned char **)a1;
          uint64_t v162 = *(void *)(a1 + 8);
          uint64_t v163 = v162;
          if (*(void *)(a1 + 32) >= v162) {
            uint64_t v164 = *(void *)(a1 + 8);
          }
          else {
            uint64_t v164 = *(void *)(a1 + 32);
          }
          uint64_t v165 = *(unsigned __int16 **)(a1 + 24);
          if (v162 >= (unint64_t)v4) {
            uint64_t v166 = *(void *)(a1 + 32);
          }
          else {
            uint64_t v166 = *(void *)(a1 + 8);
          }
          uint64_t v193 = v166;
          uint64_t v194 = v164;
          int v167 = (v162 - v164 + v166);
          uint64_t v195 = *(void *)(a1 + 8);
          uint64_t v196 = *(void *)(a1 + 32);
          do
          {
            if (v160 >= *(void *)(a1 + 48))
            {
              if ((_BYTE)v162)
              {
                uint64_t v173 = 0;
                do
                {
                  v161[v173] = (int)(float)(sub_20B1AB850((int)*(float *)(*(void *)(a1 + 56) + 4 * v173)) * a2);
                  ++v173;
                }
                while (v163 != v173);
              }
            }
            else
            {
              uint64_t v168 = v165;
              unint64_t v169 = v161;
              uint64_t v170 = v194;
              if (v194)
              {
                do
                {
                  int v171 = *v168++;
                  *v169++ = (int)(float)(sub_20B1AB850(v171) * a2);
                  --v170;
                }
                while (v170);
              }
              LOBYTE(v162) = v195;
              uint64_t v172 = v193;
              if (v195 > v196)
              {
                do
                {
                  v161[v172] = (int)(float)(sub_20B1AB850((int)*(float *)(*(void *)(a1 + 56) + 4 * v172)) * a2);
                  ++v172;
                }
                while (v167 != v172);
              }
            }
            v161 += *(void *)(a1 + 16);
            uint64_t v174 = *(void *)(a1 + 40);
            uint64_t v165 = (unsigned __int16 *)((char *)v165 + v174);
            v160 += v174;
            ++v159;
          }
          while (v159 < *(void *)(a1 + 64));
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          if (*(void *)(a1 + 64))
          {
            unint64_t v175 = 0;
            unint64_t v176 = 0;
            uint64_t v178 = *(unsigned char **)a1;
            uint64_t v177 = *(void *)(a1 + 8);
            if (*(void *)(a1 + 32) >= v177) {
              uint64_t v179 = *(void *)(a1 + 8);
            }
            else {
              uint64_t v179 = *(void *)(a1 + 32);
            }
            uint64_t v180 = *(float **)(a1 + 24);
            uint64_t v181 = *(void *)(a1 + 32);
            if (v177 < (unint64_t)v4) {
              uint64_t v181 = *(void *)(a1 + 8);
            }
            do
            {
              if (v176 >= *(void *)(a1 + 48))
              {
                if ((_BYTE)v177)
                {
                  uint64_t v187 = 0;
                  do
                  {
                    v178[v187] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v187);
                    ++v187;
                  }
                  while (v177 != v187);
                }
              }
              else
              {
                uint64_t v182 = v180;
                int v183 = v178;
                uint64_t v184 = v179;
                if (v179)
                {
                  do
                  {
                    float v185 = *v182++;
                    *v183++ = (int)v185;
                    --v184;
                  }
                  while (v184);
                }
                uint64_t v186 = v181;
                if (v177 > v4)
                {
                  do
                  {
                    v178[v186] = (int)*(float *)(*(void *)(a1 + 56) + 4 * v186);
                    ++v186;
                  }
                  while ((v177 - v179 + v181) != v186);
                }
              }
              v178 += *(void *)(a1 + 16);
              uint64_t v188 = *(void *)(a1 + 40);
              uint64_t v180 = (float *)((char *)v180 + v188);
              v176 += v188;
              ++v175;
            }
            while (v175 < *(void *)(a1 + 64));
          }
        }
        else
        {
          sub_20B1B6658((uint64_t)sub_20B1B7E78, (void *)a1, a2);
        }
        break;
      default:
        return;
    }
  }
}

void sub_20B1B24D4(void *a1, float a2, float a3)
{
  uint64_t v5 = a1[4];
  if ((v5 & 0x1000) != 0)
  {
    if (v5 == 593924)
    {
      uint64_t v28 = a1[8];
      if (v28)
      {
        float v29 = a2 * 0.00097752;
        unsigned int v30 = *((unsigned __int8 *)a1 + 8);
        uint64_t v31 = a1[2];
        uint64_t v32 = a1[5];
        uint64_t v33 = (_WORD *)(*a1 + 4);
        unsigned int v34 = (_DWORD *)(a1[3] + 8);
        do
        {
          *(v33 - 2) = (int)(float)(v29 * (float)(*(v34 - 2) >> 22));
          if (v30 >= 2)
          {
            *(v33 - 1) = (int)(float)(v29 * (float)((*(v34 - 1) >> 12) & 0x3FF));
            if (v30 != 2)
            {
              *uint64_t v33 = (int)(float)(v29 * (float)((*v34 >> 2) & 0x3FF));
              if (v30 >= 4) {
                v33[1] = (int)(float)((float)(a2 * 0.33333) * (float)(v34[1] & 3));
              }
            }
          }
          uint64_t v33 = (_WORD *)((char *)v33 + v31);
          unsigned int v34 = (_DWORD *)((char *)v34 + v32);
          --v28;
        }
        while (v28);
      }
    }
    else if (v5 == 659460)
    {
      uint64_t v21 = a1[8];
      if (v21)
      {
        float v22 = a2 * 0.0019569;
        unsigned int v23 = *((unsigned __int8 *)a1 + 8);
        uint64_t v24 = a1[2];
        uint64_t v25 = a1[5];
        uint64_t v26 = (_WORD *)(*a1 + 4);
        uint64_t v27 = (_DWORD *)(a1[3] + 8);
        do
        {
          *(v26 - 2) = (int)(float)(v22 * (float)(*(v27 - 2) >> 22));
          if (v23 >= 2)
          {
            *(v26 - 1) = (int)(float)(v22 * (float)((*(v27 - 1) >> 12) & 0x3FF));
            if (v23 != 2)
            {
              *uint64_t v26 = (int)(float)(v22 * (float)((*v27 >> 2) & 0x3FF));
              if (v23 >= 4) {
                v26[1] = (int)(float)((float)(v27[1] & 3) * a2);
              }
            }
          }
          uint64_t v26 = (_WORD *)((char *)v26 + v24);
          uint64_t v27 = (_DWORD *)((char *)v27 + v25);
          --v21;
        }
        while (v21);
      }
    }
  }
  else
  {
    switch(((a1[4] & 0xFFFF0000uLL) - 0x10000) >> 16)
    {
      case 0uLL:
        if (a2 != 1.0)
        {
          uint64_t v203 = sub_20B1B7F10;
          goto LABEL_255;
        }
        uint64_t v6 = a1[8];
        if (v6)
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          uint64_t v10 = *a1;
          uint64_t v9 = a1[1];
          if (a1[4] >= v9) {
            uint64_t v11 = a1[1];
          }
          else {
            uint64_t v11 = a1[4];
          }
          uint64_t v12 = a1[4];
          if (v9 < (unint64_t)v5) {
            uint64_t v12 = a1[1];
          }
          uint64_t v14 = a1[2];
          uint64_t v13 = a1[3];
          uint64_t v16 = a1[5];
          unint64_t v15 = a1[6];
          uint64_t v17 = a1[7];
          do
          {
            if (v8 >= v15)
            {
              if ((_BYTE)v9)
              {
                uint64_t v20 = 0;
                do
                {
                  *(_WORD *)(v10 + 2 * v20) = (int)*(float *)(v17 + 4 * v20);
                  ++v20;
                }
                while (v9 != v20);
              }
            }
            else
            {
              if (v11)
              {
                for (uint64_t i = 0; i != v11; ++i)
                  *(_WORD *)(v10 + 2 * i) = *(unsigned __int8 *)(v13 + i);
              }
              uint64_t v19 = v12;
              if (v9 > v5)
              {
                do
                {
                  *(_WORD *)(v10 + 2 * v19) = (int)*(float *)(v17 + 4 * v19);
                  ++v19;
                }
                while ((v9 - v11 + v12) != v19);
              }
            }
            v10 += v14;
            v13 += v16;
            v8 += v16;
            ++v7;
          }
          while (v7 != v6);
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          uint64_t v35 = a1[8];
          if (v35)
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            uint64_t v39 = *a1;
            uint64_t v38 = a1[1];
            if (a1[4] >= v38) {
              uint64_t v40 = a1[1];
            }
            else {
              uint64_t v40 = a1[4];
            }
            uint64_t v41 = a1[4];
            if (v38 < (unint64_t)v5) {
              uint64_t v41 = a1[1];
            }
            uint64_t v43 = a1[2];
            uint64_t v42 = a1[3];
            uint64_t v45 = a1[5];
            unint64_t v44 = a1[6];
            uint64_t v46 = a1[7];
            do
            {
              if (v37 >= v44)
              {
                if ((_BYTE)v38)
                {
                  uint64_t v49 = 0;
                  do
                  {
                    *(_WORD *)(v39 + 2 * v49) = (int)*(float *)(v46 + 4 * v49);
                    ++v49;
                  }
                  while (v38 != v49);
                }
              }
              else
              {
                if (v40)
                {
                  for (uint64_t j = 0; j != v40; ++j)
                    *(_WORD *)(v39 + 2 * j) = *(char *)(v42 + j);
                }
                uint64_t v48 = v41;
                if (v38 > v5)
                {
                  do
                  {
                    *(_WORD *)(v39 + 2 * v48) = (int)*(float *)(v46 + 4 * v48);
                    ++v48;
                  }
                  while ((v38 - v40 + v41) != v48);
                }
              }
              v39 += v43;
              v42 += v45;
              v37 += v45;
              ++v36;
            }
            while (v36 != v35);
          }
        }
        else
        {
          uint64_t v203 = sub_20B1B7EFC;
LABEL_255:
          sub_20B1B6FE8((uint64_t)v203, a1, a2);
        }
        break;
      case 2uLL:
        uint64_t v50 = a1[8];
        if (v50)
        {
          uint64_t v51 = 0;
          unint64_t v52 = 0;
          float v53 = a2 * 0.0039216;
          uint64_t v55 = *a1;
          uint64_t v54 = a1[1];
          if (a1[4] >= v54) {
            uint64_t v56 = a1[1];
          }
          else {
            uint64_t v56 = a1[4];
          }
          uint64_t v57 = a1[4];
          if (v54 < (unint64_t)v5) {
            uint64_t v57 = a1[1];
          }
          uint64_t v59 = a1[2];
          uint64_t v58 = a1[3];
          uint64_t v61 = a1[5];
          unint64_t v60 = a1[6];
          uint64_t v62 = a1[7];
          do
          {
            if (v52 >= v60)
            {
              if ((_BYTE)v54)
              {
                uint64_t v65 = 0;
                do
                {
                  *(_WORD *)(v55 + 2 * v65) = (int)(float)(v53 * (float)(char)(int)*(float *)(v62 + 4 * v65));
                  ++v65;
                }
                while (v54 != v65);
              }
            }
            else
            {
              if (v56)
              {
                for (uint64_t k = 0; k != v56; ++k)
                  *(_WORD *)(v55 + 2 * k) = (int)(float)(v53 * (float)*(char *)(v58 + k));
              }
              uint64_t v64 = v57;
              if (v54 > v5)
              {
                do
                {
                  *(_WORD *)(v55 + 2 * v64) = (int)(float)(v53 * (float)(char)(int)*(float *)(v62 + 4 * v64));
                  ++v64;
                }
                while ((v54 - v56 + v57) != v64);
              }
            }
            v55 += v59;
            v58 += v61;
            v52 += v61;
            ++v51;
          }
          while (v51 != v50);
        }
        break;
      case 3uLL:
        uint64_t v66 = a1[8];
        if (v66)
        {
          uint64_t v67 = 0;
          unint64_t v68 = 0;
          float v69 = a2 * 0.007874;
          uint64_t v71 = *a1;
          uint64_t v70 = a1[1];
          if (a1[4] >= v70) {
            uint64_t v72 = a1[1];
          }
          else {
            uint64_t v72 = a1[4];
          }
          uint64_t v73 = a1[4];
          if (v70 < (unint64_t)v5) {
            uint64_t v73 = a1[1];
          }
          uint64_t v75 = a1[2];
          uint64_t v74 = a1[3];
          uint64_t v77 = a1[5];
          unint64_t v76 = a1[6];
          uint64_t v78 = a1[7];
          do
          {
            if (v68 >= v76)
            {
              if ((_BYTE)v70)
              {
                uint64_t v81 = 0;
                do
                {
                  *(_WORD *)(v71 + 2 * v81) = (int)(float)(v69 * truncf(*(float *)(v78 + 4 * v81)));
                  ++v81;
                }
                while (v70 != v81);
              }
            }
            else
            {
              if (v72)
              {
                for (uint64_t m = 0; m != v72; ++m)
                  *(_WORD *)(v71 + 2 * m) = (int)(float)(v69 * (float)*(char *)(v74 + m));
              }
              uint64_t v80 = v73;
              if (v70 > v5)
              {
                do
                {
                  *(_WORD *)(v71 + 2 * v80) = (int)(float)(v69 * truncf(*(float *)(v78 + 4 * v80)));
                  ++v80;
                }
                while ((v70 - v72 + v73) != v80);
              }
            }
            v71 += v75;
            v74 += v77;
            v68 += v77;
            ++v67;
          }
          while (v67 != v66);
        }
        break;
      case 4uLL:
        if (a2 != 1.0)
        {
          uint64_t v204 = sub_20B1B7F38;
          goto LABEL_261;
        }
        uint64_t v82 = a1[8];
        if (v82)
        {
          uint64_t v83 = 0;
          unint64_t v84 = 0;
          unsigned int v85 = a1[4];
          uint64_t v87 = *a1;
          uint64_t v86 = a1[1];
          if (v85 >= v86) {
            unsigned int v85 = a1[1];
          }
          uint64_t v88 = a1[4];
          if (v86 < (unint64_t)v5) {
            uint64_t v88 = a1[1];
          }
          uint64_t v90 = a1[2];
          uint64_t v89 = a1[3];
          uint64_t v92 = a1[5];
          unint64_t v91 = a1[6];
          uint64_t v93 = a1[7];
          do
          {
            if (v84 >= v91)
            {
              if ((_BYTE)v86)
              {
                uint64_t v96 = 0;
                do
                {
                  *(_WORD *)(v87 + 2 * v96) = (int)*(float *)(v93 + 4 * v96);
                  ++v96;
                }
                while (v86 != v96);
              }
            }
            else
            {
              if (v85)
              {
                uint64_t v94 = 0;
                do
                {
                  *(_WORD *)(v87 + v94) = *(_WORD *)(v89 + v94);
                  v94 += 2;
                }
                while (2 * v85 != v94);
              }
              uint64_t v95 = v88;
              if (v86 > v5)
              {
                do
                {
                  *(_WORD *)(v87 + 2 * v95) = (int)*(float *)(v93 + 4 * v95);
                  ++v95;
                }
                while ((v86 - v85 + v88) != v95);
              }
            }
            v87 += v90;
            v89 += v92;
            v84 += v92;
            ++v83;
          }
          while (v83 != v82);
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          uint64_t v97 = a1[8];
          if (v97)
          {
            uint64_t v98 = 0;
            unint64_t v99 = 0;
            unsigned int v100 = a1[4];
            uint64_t v102 = *a1;
            uint64_t v101 = a1[1];
            if (v100 >= v101) {
              unsigned int v100 = a1[1];
            }
            uint64_t v103 = a1[4];
            if (v101 < (unint64_t)v5) {
              uint64_t v103 = a1[1];
            }
            uint64_t v105 = a1[2];
            uint64_t v104 = a1[3];
            uint64_t v107 = a1[5];
            unint64_t v106 = a1[6];
            uint64_t v108 = a1[7];
            do
            {
              if (v99 >= v106)
              {
                if ((_BYTE)v101)
                {
                  uint64_t v111 = 0;
                  do
                  {
                    *(_WORD *)(v102 + 2 * v111) = (int)*(float *)(v108 + 4 * v111);
                    ++v111;
                  }
                  while (v101 != v111);
                }
              }
              else
              {
                if (v100)
                {
                  uint64_t v109 = 0;
                  do
                  {
                    *(_WORD *)(v102 + v109) = *(_WORD *)(v104 + v109);
                    v109 += 2;
                  }
                  while (2 * v100 != v109);
                }
                uint64_t v110 = v103;
                if (v101 > v5)
                {
                  do
                  {
                    *(_WORD *)(v102 + 2 * v110) = (int)*(float *)(v108 + 4 * v110);
                    ++v110;
                  }
                  while ((v101 - v100 + v103) != v110);
                }
              }
              v102 += v105;
              v104 += v107;
              v99 += v107;
              ++v98;
            }
            while (v98 != v97);
          }
        }
        else
        {
          uint64_t v204 = sub_20B1B7F24;
LABEL_261:
          sub_20B1B7194((uint64_t)v204, a1, a2);
        }
        break;
      case 6uLL:
        uint64_t v112 = a1[8];
        if (v112)
        {
          uint64_t v113 = 0;
          unint64_t v114 = 0;
          float v115 = a2 * 0.000015259;
          unsigned int v116 = a1[4];
          uint64_t v118 = *a1;
          uint64_t v117 = a1[1];
          if (v116 >= v117) {
            unsigned int v116 = a1[1];
          }
          uint64_t v119 = a1[4];
          if (v117 < (unint64_t)v5) {
            uint64_t v119 = a1[1];
          }
          uint64_t v121 = a1[2];
          uint64_t v120 = a1[3];
          uint64_t v123 = a1[5];
          unint64_t v122 = a1[6];
          uint64_t v124 = a1[7];
          do
          {
            if (v114 >= v122)
            {
              if ((_BYTE)v117)
              {
                uint64_t v127 = 0;
                do
                {
                  a3 = v115 * truncf(*(float *)(v124 + 4 * v127));
                  *(_WORD *)(v118 + 2 * v127++) = (int)a3;
                }
                while (v117 != v127);
              }
            }
            else
            {
              if (v116)
              {
                uint64_t v125 = 0;
                do
                {
                  LOWORD(a3) = *(_WORD *)(v120 + v125);
                  a3 = v115 * (float)LODWORD(a3);
                  *(_WORD *)(v118 + v125) = (int)a3;
                  v125 += 2;
                }
                while (2 * v116 != v125);
              }
              uint64_t v126 = v119;
              if (v117 > v5)
              {
                do
                {
                  a3 = v115 * truncf(*(float *)(v124 + 4 * v126));
                  *(_WORD *)(v118 + 2 * v126++) = (int)a3;
                }
                while ((v117 - v116 + v119) != v126);
              }
            }
            v118 += v121;
            v120 += v123;
            v114 += v123;
            ++v113;
          }
          while (v113 != v112);
        }
        break;
      case 7uLL:
        uint64_t v128 = a1[8];
        if (v128)
        {
          uint64_t v129 = 0;
          unint64_t v130 = 0;
          float v131 = a2 * 0.000030519;
          unsigned int v132 = a1[4];
          uint64_t v134 = *a1;
          uint64_t v133 = a1[1];
          if (v132 >= v133) {
            unsigned int v132 = a1[1];
          }
          uint64_t v135 = a1[4];
          if (v133 < (unint64_t)v5) {
            uint64_t v135 = a1[1];
          }
          uint64_t v137 = a1[2];
          uint64_t v136 = a1[3];
          uint64_t v139 = a1[5];
          unint64_t v138 = a1[6];
          uint64_t v140 = a1[7];
          do
          {
            if (v130 >= v138)
            {
              if ((_BYTE)v133)
              {
                uint64_t v143 = 0;
                do
                {
                  *(_WORD *)(v134 + 2 * v143) = (int)(float)(v131 * truncf(*(float *)(v140 + 4 * v143)));
                  ++v143;
                }
                while (v133 != v143);
              }
            }
            else
            {
              if (v132)
              {
                uint64_t v141 = 0;
                do
                {
                  *(_WORD *)(v134 + v141) = (int)(float)(v131 * (float)*(__int16 *)(v136 + v141));
                  v141 += 2;
                }
                while (2 * v132 != v141);
              }
              uint64_t v142 = v135;
              if (v133 > v5)
              {
                do
                {
                  *(_WORD *)(v134 + 2 * v142) = (int)(float)(v131 * truncf(*(float *)(v140 + 4 * v142)));
                  ++v142;
                }
                while ((v133 - v132 + v135) != v142);
              }
            }
            v134 += v137;
            v136 += v139;
            v130 += v139;
            ++v129;
          }
          while (v129 != v128);
        }
        break;
      case 8uLL:
        if (a2 == 1.0)
        {
          uint64_t v144 = a1[8];
          if (v144)
          {
            uint64_t v145 = 0;
            unint64_t v146 = 0;
            uint64_t v148 = *a1;
            uint64_t v147 = a1[1];
            if (a1[4] >= v147) {
              uint64_t v149 = a1[1];
            }
            else {
              uint64_t v149 = a1[4];
            }
            uint64_t v150 = a1[4];
            if (v147 < (unint64_t)v5) {
              uint64_t v150 = a1[1];
            }
            uint64_t v152 = a1[2];
            uint64_t v151 = a1[3];
            uint64_t v154 = a1[5];
            unint64_t v153 = a1[6];
            uint64_t v155 = a1[7];
            do
            {
              if (v146 >= v153)
              {
                if ((_BYTE)v147)
                {
                  uint64_t v158 = 0;
                  do
                  {
                    *(_WORD *)(v148 + 2 * v158) = *(float *)(v155 + 4 * v158);
                    ++v158;
                  }
                  while (v147 != v158);
                }
              }
              else
              {
                if (v149)
                {
                  for (uint64_t n = 0; n != v149; ++n)
                    *(_WORD *)(v148 + 2 * n) = *(_DWORD *)(v151 + 4 * n);
                }
                uint64_t v157 = v150;
                if (v147 > v5)
                {
                  do
                  {
                    *(_WORD *)(v148 + 2 * v157) = *(float *)(v155 + 4 * v157);
                    ++v157;
                  }
                  while ((v147 - v149 + v150) != v157);
                }
              }
              v148 += v152;
              v151 += v154;
              v146 += v154;
              ++v145;
            }
            while (v145 != v144);
          }
        }
        else
        {
          sub_20B1B74D8((uint64_t)sub_20B1B7F4C, a1, a2);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          uint64_t v159 = a1[8];
          if (v159)
          {
            uint64_t v160 = 0;
            unint64_t v161 = 0;
            uint64_t v163 = *a1;
            uint64_t v162 = a1[1];
            if (a1[4] >= v162) {
              uint64_t v164 = a1[1];
            }
            else {
              uint64_t v164 = a1[4];
            }
            uint64_t v165 = a1[4];
            if (v162 < (unint64_t)v5) {
              uint64_t v165 = a1[1];
            }
            uint64_t v167 = a1[2];
            uint64_t v166 = a1[3];
            uint64_t v169 = a1[5];
            unint64_t v168 = a1[6];
            uint64_t v170 = a1[7];
            do
            {
              if (v161 >= v168)
              {
                if ((_BYTE)v162)
                {
                  uint64_t v173 = 0;
                  do
                  {
                    *(_WORD *)(v163 + 2 * v173) = (int)*(float *)(v170 + 4 * v173);
                    ++v173;
                  }
                  while (v162 != v173);
                }
              }
              else
              {
                if (v164)
                {
                  for (iuint64_t i = 0; ii != v164; ++ii)
                    *(_WORD *)(v163 + 2 * ii) = *(_DWORD *)(v166 + 4 * ii);
                }
                uint64_t v172 = v165;
                if (v162 > v5)
                {
                  do
                  {
                    *(_WORD *)(v163 + 2 * v172) = (int)*(float *)(v170 + 4 * v172);
                    ++v172;
                  }
                  while ((v162 - v164 + v165) != v172);
                }
              }
              v163 += v167;
              v166 += v169;
              v161 += v169;
              ++v160;
            }
            while (v160 != v159);
          }
        }
        else
        {
          sub_20B1B7340((uint64_t)sub_20B1B7F4C, a1, a2);
        }
        break;
      case 0xAuLL:
        uint64_t v211 = a1[8];
        if (v211)
        {
          uint64_t v174 = 0;
          unint64_t v175 = 0;
          uint64_t v177 = *a1;
          uint64_t v176 = a1[1];
          uint64_t v178 = v176;
          if (a1[4] >= v176) {
            unsigned int v179 = a1[1];
          }
          else {
            unsigned int v179 = a1[4];
          }
          if (v176 >= (unint64_t)v5) {
            uint64_t v180 = a1[4];
          }
          else {
            uint64_t v180 = a1[1];
          }
          uint64_t v210 = a1[1];
          uint64_t v205 = v180;
          unsigned int v206 = v179;
          uint64_t v181 = a1[3];
          uint64_t v209 = a1[2];
          uint64_t v182 = a1[7];
          unint64_t v208 = a1[6];
          uint64_t v207 = a1[5];
          uint64_t v183 = 2 * v179;
          int v184 = (v176 - v179 + v180);
          do
          {
            if (v175 >= v208)
            {
              if ((_BYTE)v210)
              {
                uint64_t v187 = 0;
                do
                {
                  *(_WORD *)(v177 + 2 * v187) = (int)(float)(sub_20B1AB850((int)*(float *)(v182 + 4 * v187)) * a2);
                  ++v187;
                }
                while (v178 != v187);
              }
            }
            else
            {
              if (v206)
              {
                uint64_t v185 = 0;
                do
                {
                  *(_WORD *)(v177 + v185) = (int)(float)(sub_20B1AB850(*(unsigned __int16 *)(v181 + v185)) * a2);
                  v185 += 2;
                }
                while (v183 != v185);
              }
              uint64_t v186 = v205;
              if (v210 > v5)
              {
                do
                {
                  *(_WORD *)(v177 + 2 * v186) = (int)(float)(sub_20B1AB850((int)*(float *)(v182 + 4 * v186)) * a2);
                  ++v186;
                }
                while (v184 != v186);
              }
            }
            v177 += v209;
            v181 += v207;
            v175 += v207;
            ++v174;
          }
          while (v174 != v211);
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          uint64_t v188 = a1[8];
          if (v188)
          {
            uint64_t v189 = 0;
            unint64_t v190 = 0;
            uint64_t v192 = *a1;
            uint64_t v191 = a1[1];
            if (a1[4] >= v191) {
              uint64_t v193 = a1[1];
            }
            else {
              uint64_t v193 = a1[4];
            }
            uint64_t v194 = a1[4];
            if (v191 < (unint64_t)v5) {
              uint64_t v194 = a1[1];
            }
            uint64_t v196 = a1[2];
            uint64_t v195 = a1[3];
            uint64_t v198 = a1[5];
            unint64_t v197 = a1[6];
            uint64_t v199 = a1[7];
            do
            {
              if (v190 >= v197)
              {
                if ((_BYTE)v191)
                {
                  uint64_t v202 = 0;
                  do
                  {
                    *(_WORD *)(v192 + 2 * v202) = (int)*(float *)(v199 + 4 * v202);
                    ++v202;
                  }
                  while (v191 != v202);
                }
              }
              else
              {
                if (v193)
                {
                  for (juint64_t j = 0; jj != v193; ++jj)
                    *(_WORD *)(v192 + 2 * jj) = (int)*(float *)(v195 + 4 * jj);
                }
                uint64_t v201 = v194;
                if (v191 > v5)
                {
                  do
                  {
                    *(_WORD *)(v192 + 2 * v201) = (int)*(float *)(v199 + 4 * v201);
                    ++v201;
                  }
                  while ((v191 - v193 + v194) != v201);
                }
              }
              v192 += v196;
              v195 += v198;
              v190 += v198;
              ++v189;
            }
            while (v189 != v188);
          }
        }
        else
        {
          sub_20B1B6E5C((uint64_t)sub_20B1B7EEC, a1, a2);
        }
        break;
      default:
        return;
    }
  }
}

void sub_20B1B34E8(void *a1, float a2, float a3)
{
  uint64_t v5 = a1[4];
  if ((v5 & 0x1000) != 0)
  {
    if (v5 == 593924)
    {
      uint64_t v28 = a1[8];
      if (v28)
      {
        float v29 = a2 * 0.00097752;
        unsigned int v30 = *((unsigned __int8 *)a1 + 8);
        uint64_t v31 = a1[2];
        uint64_t v32 = a1[5];
        uint64_t v33 = (_DWORD *)(*a1 + 8);
        unsigned int v34 = (_DWORD *)(a1[3] + 8);
        do
        {
          *(v33 - 2) = (float)(v29 * (float)(*(v34 - 2) >> 22));
          if (v30 >= 2)
          {
            *(v33 - 1) = (float)(v29 * (float)((*(v34 - 1) >> 12) & 0x3FF));
            if (v30 != 2)
            {
              *uint64_t v33 = (float)(v29 * (float)((*v34 >> 2) & 0x3FF));
              if (v30 >= 4) {
                v33[1] = (float)((float)(a2 * 0.33333) * (float)(v34[1] & 3));
              }
            }
          }
          uint64_t v33 = (_DWORD *)((char *)v33 + v31);
          unsigned int v34 = (_DWORD *)((char *)v34 + v32);
          --v28;
        }
        while (v28);
      }
    }
    else if (v5 == 659460)
    {
      uint64_t v21 = a1[8];
      if (v21)
      {
        float v22 = a2 * 0.0019569;
        unsigned int v23 = *((unsigned __int8 *)a1 + 8);
        uint64_t v24 = a1[2];
        uint64_t v25 = a1[5];
        uint64_t v26 = (_DWORD *)(*a1 + 8);
        uint64_t v27 = (_DWORD *)(a1[3] + 8);
        do
        {
          *(v26 - 2) = (float)(v22 * (float)(*(v27 - 2) >> 22));
          if (v23 >= 2)
          {
            *(v26 - 1) = (float)(v22 * (float)((*(v27 - 1) >> 12) & 0x3FF));
            if (v23 != 2)
            {
              *uint64_t v26 = (float)(v22 * (float)((*v27 >> 2) & 0x3FF));
              if (v23 >= 4) {
                v26[1] = (float)((float)(v27[1] & 3) * a2);
              }
            }
          }
          uint64_t v26 = (_DWORD *)((char *)v26 + v24);
          uint64_t v27 = (_DWORD *)((char *)v27 + v25);
          --v21;
        }
        while (v21);
      }
    }
  }
  else
  {
    switch(((a1[4] & 0xFFFF0000uLL) - 0x10000) >> 16)
    {
      case 0uLL:
        if (a2 != 1.0)
        {
          uint64_t v202 = sub_20B1B7F84;
          goto LABEL_256;
        }
        uint64_t v6 = a1[8];
        if (v6)
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          uint64_t v10 = *a1;
          uint64_t v9 = a1[1];
          if (a1[4] >= v9) {
            uint64_t v11 = a1[1];
          }
          else {
            uint64_t v11 = a1[4];
          }
          uint64_t v12 = a1[4];
          if (v9 < (unint64_t)v5) {
            uint64_t v12 = a1[1];
          }
          uint64_t v14 = a1[2];
          uint64_t v13 = a1[3];
          uint64_t v15 = a1[5];
          unint64_t v16 = a1[6];
          uint64_t v17 = a1[7];
          do
          {
            if (v8 >= v16)
            {
              if ((_BYTE)v9)
              {
                uint64_t v20 = 0;
                do
                {
                  *(_DWORD *)(v10 + v20) = (int)*(float *)(v17 + v20);
                  v20 += 4;
                }
                while (4 * v9 != v20);
              }
            }
            else
            {
              if (v11)
              {
                for (uint64_t i = 0; i != v11; ++i)
                  *(_DWORD *)(v10 + 4 * i) = *(unsigned __int8 *)(v13 + i);
              }
              uint64_t v19 = v12;
              if (v9 > v5)
              {
                do
                {
                  *(_DWORD *)(v10 + 4 * v19) = (int)*(float *)(v17 + 4 * v19);
                  ++v19;
                }
                while ((v9 - v11 + v12) != v19);
              }
            }
            v10 += v14;
            v13 += v15;
            v8 += v15;
            ++v7;
          }
          while (v7 != v6);
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          uint64_t v35 = a1[8];
          if (v35)
          {
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            uint64_t v39 = *a1;
            uint64_t v38 = a1[1];
            if (a1[4] >= v38) {
              uint64_t v40 = a1[1];
            }
            else {
              uint64_t v40 = a1[4];
            }
            uint64_t v41 = a1[4];
            if (v38 < (unint64_t)v5) {
              uint64_t v41 = a1[1];
            }
            uint64_t v43 = a1[2];
            uint64_t v42 = a1[3];
            uint64_t v44 = a1[5];
            unint64_t v45 = a1[6];
            uint64_t v46 = a1[7];
            do
            {
              if (v37 >= v45)
              {
                if ((_BYTE)v38)
                {
                  uint64_t v49 = 0;
                  do
                  {
                    *(_DWORD *)(v39 + v49) = (int)*(float *)(v46 + v49);
                    v49 += 4;
                  }
                  while (4 * v38 != v49);
                }
              }
              else
              {
                if (v40)
                {
                  for (uint64_t j = 0; j != v40; ++j)
                    *(_DWORD *)(v39 + 4 * j) = *(char *)(v42 + j);
                }
                uint64_t v48 = v41;
                if (v38 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v39 + 4 * v48) = (int)*(float *)(v46 + 4 * v48);
                    ++v48;
                  }
                  while ((v38 - v40 + v41) != v48);
                }
              }
              v39 += v43;
              v42 += v44;
              v37 += v44;
              ++v36;
            }
            while (v36 != v35);
          }
        }
        else
        {
          uint64_t v202 = sub_20B1B7F70;
LABEL_256:
          sub_20B1B77F0((uint64_t)v202, a1, a2);
        }
        break;
      case 2uLL:
        uint64_t v50 = a1[8];
        if (v50)
        {
          uint64_t v51 = 0;
          unint64_t v52 = 0;
          float v53 = a2 * 0.0039216;
          uint64_t v55 = *a1;
          uint64_t v54 = a1[1];
          if (a1[4] >= v54) {
            uint64_t v56 = a1[1];
          }
          else {
            uint64_t v56 = a1[4];
          }
          uint64_t v57 = a1[4];
          if (v54 < (unint64_t)v5) {
            uint64_t v57 = a1[1];
          }
          uint64_t v59 = a1[2];
          uint64_t v58 = a1[3];
          uint64_t v60 = a1[5];
          unint64_t v61 = a1[6];
          uint64_t v62 = a1[7];
          do
          {
            if (v52 >= v61)
            {
              if ((_BYTE)v54)
              {
                uint64_t v65 = 0;
                do
                {
                  *(_DWORD *)(v55 + v65) = (float)(v53 * (float)(char)(int)*(float *)(v62 + v65));
                  v65 += 4;
                }
                while (4 * v54 != v65);
              }
            }
            else
            {
              if (v56)
              {
                for (uint64_t k = 0; k != v56; ++k)
                  *(_DWORD *)(v55 + 4 * k) = (float)(v53 * (float)*(char *)(v58 + k));
              }
              uint64_t v64 = v57;
              if (v54 > v5)
              {
                do
                {
                  *(_DWORD *)(v55 + 4 * v64) = (float)(v53 * (float)(char)(int)*(float *)(v62 + 4 * v64));
                  ++v64;
                }
                while ((v54 - v56 + v57) != v64);
              }
            }
            v55 += v59;
            v58 += v60;
            v52 += v60;
            ++v51;
          }
          while (v51 != v50);
        }
        break;
      case 3uLL:
        uint64_t v66 = a1[8];
        if (v66)
        {
          uint64_t v67 = 0;
          unint64_t v68 = 0;
          float v69 = a2 * 0.007874;
          uint64_t v71 = *a1;
          uint64_t v70 = a1[1];
          if (a1[4] >= v70) {
            uint64_t v72 = a1[1];
          }
          else {
            uint64_t v72 = a1[4];
          }
          uint64_t v73 = a1[4];
          if (v70 < (unint64_t)v5) {
            uint64_t v73 = a1[1];
          }
          uint64_t v75 = a1[2];
          uint64_t v74 = a1[3];
          uint64_t v76 = a1[5];
          unint64_t v77 = a1[6];
          uint64_t v78 = a1[7];
          do
          {
            if (v68 >= v77)
            {
              if ((_BYTE)v70)
              {
                uint64_t v81 = 0;
                do
                {
                  *(_DWORD *)(v71 + v81) = (float)(v69 * truncf(*(float *)(v78 + v81)));
                  v81 += 4;
                }
                while (4 * v70 != v81);
              }
            }
            else
            {
              if (v72)
              {
                for (uint64_t m = 0; m != v72; ++m)
                  *(_DWORD *)(v71 + 4 * m) = (float)(v69 * (float)*(char *)(v74 + m));
              }
              uint64_t v80 = v73;
              if (v70 > v5)
              {
                do
                {
                  *(_DWORD *)(v71 + 4 * v80) = (float)(v69 * truncf(*(float *)(v78 + 4 * v80)));
                  ++v80;
                }
                while ((v70 - v72 + v73) != v80);
              }
            }
            v71 += v75;
            v74 += v76;
            v68 += v76;
            ++v67;
          }
          while (v67 != v66);
        }
        break;
      case 4uLL:
        if (a2 != 1.0)
        {
          uint64_t v203 = sub_20B1B7FAC;
          goto LABEL_262;
        }
        uint64_t v82 = a1[8];
        if (v82)
        {
          uint64_t v83 = 0;
          unint64_t v84 = 0;
          uint64_t v86 = *a1;
          uint64_t v85 = a1[1];
          if (a1[4] >= v85) {
            uint64_t v87 = a1[1];
          }
          else {
            uint64_t v87 = a1[4];
          }
          uint64_t v88 = a1[4];
          if (v85 < (unint64_t)v5) {
            uint64_t v88 = a1[1];
          }
          uint64_t v90 = a1[2];
          uint64_t v89 = a1[3];
          uint64_t v91 = a1[5];
          unint64_t v92 = a1[6];
          uint64_t v93 = a1[7];
          do
          {
            if (v84 >= v92)
            {
              if ((_BYTE)v85)
              {
                uint64_t v96 = 0;
                do
                {
                  *(_DWORD *)(v86 + v96) = (int)*(float *)(v93 + v96);
                  v96 += 4;
                }
                while (4 * v85 != v96);
              }
            }
            else
            {
              if (v87)
              {
                for (uint64_t n = 0; n != v87; ++n)
                  *(_DWORD *)(v86 + 4 * n) = *(unsigned __int16 *)(v89 + 2 * n);
              }
              uint64_t v95 = v88;
              if (v85 > v5)
              {
                do
                {
                  *(_DWORD *)(v86 + 4 * v95) = (int)*(float *)(v93 + 4 * v95);
                  ++v95;
                }
                while ((v85 - v87 + v88) != v95);
              }
            }
            v86 += v90;
            v89 += v91;
            v84 += v91;
            ++v83;
          }
          while (v83 != v82);
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          uint64_t v97 = a1[8];
          if (v97)
          {
            uint64_t v98 = 0;
            unint64_t v99 = 0;
            uint64_t v101 = *a1;
            uint64_t v100 = a1[1];
            if (a1[4] >= v100) {
              uint64_t v102 = a1[1];
            }
            else {
              uint64_t v102 = a1[4];
            }
            uint64_t v103 = a1[4];
            if (v100 < (unint64_t)v5) {
              uint64_t v103 = a1[1];
            }
            uint64_t v105 = a1[2];
            uint64_t v104 = a1[3];
            uint64_t v106 = a1[5];
            unint64_t v107 = a1[6];
            uint64_t v108 = a1[7];
            do
            {
              if (v99 >= v107)
              {
                if ((_BYTE)v100)
                {
                  uint64_t v111 = 0;
                  do
                  {
                    *(_DWORD *)(v101 + v111) = (int)*(float *)(v108 + v111);
                    v111 += 4;
                  }
                  while (4 * v100 != v111);
                }
              }
              else
              {
                if (v102)
                {
                  for (iuint64_t i = 0; ii != v102; ++ii)
                    *(_DWORD *)(v101 + 4 * ii) = *(__int16 *)(v104 + 2 * ii);
                }
                uint64_t v110 = v103;
                if (v100 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v101 + 4 * v110) = (int)*(float *)(v108 + 4 * v110);
                    ++v110;
                  }
                  while ((v100 - v102 + v103) != v110);
                }
              }
              v101 += v105;
              v104 += v106;
              v99 += v106;
              ++v98;
            }
            while (v98 != v97);
          }
        }
        else
        {
          uint64_t v203 = sub_20B1B7F98;
LABEL_262:
          sub_20B1B79A0((uint64_t)v203, a1, a2);
        }
        break;
      case 6uLL:
        uint64_t v112 = a1[8];
        if (v112)
        {
          uint64_t v113 = 0;
          unint64_t v114 = 0;
          float v115 = a2 * 0.000015259;
          uint64_t v117 = *a1;
          uint64_t v116 = a1[1];
          if (a1[4] >= v116) {
            uint64_t v118 = a1[1];
          }
          else {
            uint64_t v118 = a1[4];
          }
          uint64_t v119 = a1[4];
          if (v116 < (unint64_t)v5) {
            uint64_t v119 = a1[1];
          }
          uint64_t v121 = a1[2];
          uint64_t v120 = a1[3];
          uint64_t v122 = a1[5];
          unint64_t v123 = a1[6];
          uint64_t v124 = a1[7];
          do
          {
            if (v114 >= v123)
            {
              if ((_BYTE)v116)
              {
                uint64_t v127 = 0;
                do
                {
                  a3 = v115 * truncf(*(float *)(v124 + v127));
                  *(_DWORD *)(v117 + v127) = a3;
                  v127 += 4;
                }
                while (4 * v116 != v127);
              }
            }
            else
            {
              if (v118)
              {
                for (juint64_t j = 0; jj != v118; ++jj)
                {
                  LOWORD(a3) = *(_WORD *)(v120 + 2 * jj);
                  a3 = v115 * (float)LODWORD(a3);
                  *(_DWORD *)(v117 + 4 * jj) = a3;
                }
              }
              uint64_t v126 = v119;
              if (v116 > v5)
              {
                do
                {
                  a3 = v115 * truncf(*(float *)(v124 + 4 * v126));
                  *(_DWORD *)(v117 + 4 * v126++) = a3;
                }
                while ((v116 - v118 + v119) != v126);
              }
            }
            v117 += v121;
            v120 += v122;
            v114 += v122;
            ++v113;
          }
          while (v113 != v112);
        }
        break;
      case 7uLL:
        uint64_t v128 = a1[8];
        if (v128)
        {
          uint64_t v129 = 0;
          unint64_t v130 = 0;
          float v131 = a2 * 0.000030519;
          uint64_t v133 = *a1;
          uint64_t v132 = a1[1];
          if (a1[4] >= v132) {
            uint64_t v134 = a1[1];
          }
          else {
            uint64_t v134 = a1[4];
          }
          uint64_t v135 = a1[4];
          if (v132 < (unint64_t)v5) {
            uint64_t v135 = a1[1];
          }
          uint64_t v137 = a1[2];
          uint64_t v136 = a1[3];
          uint64_t v138 = a1[5];
          unint64_t v139 = a1[6];
          uint64_t v140 = a1[7];
          do
          {
            if (v130 >= v139)
            {
              if ((_BYTE)v132)
              {
                uint64_t v143 = 0;
                do
                {
                  *(_DWORD *)(v133 + v143) = (float)(v131 * truncf(*(float *)(v140 + v143)));
                  v143 += 4;
                }
                while (4 * v132 != v143);
              }
            }
            else
            {
              if (v134)
              {
                for (kuint64_t k = 0; kk != v134; ++kk)
                  *(_DWORD *)(v133 + 4 * kk) = (float)(v131 * (float)*(__int16 *)(v136 + 2 * kk));
              }
              uint64_t v142 = v135;
              if (v132 > v5)
              {
                do
                {
                  *(_DWORD *)(v133 + 4 * v142) = (float)(v131 * truncf(*(float *)(v140 + 4 * v142)));
                  ++v142;
                }
                while ((v132 - v134 + v135) != v142);
              }
            }
            v133 += v137;
            v136 += v138;
            v130 += v138;
            ++v129;
          }
          while (v129 != v128);
        }
        break;
      case 8uLL:
        if (a2 == 1.0)
        {
          uint64_t v144 = a1[8];
          if (v144)
          {
            uint64_t v145 = 0;
            unint64_t v146 = 0;
            unsigned int v147 = a1[4];
            uint64_t v149 = *a1;
            uint64_t v148 = a1[1];
            if (v147 >= v148) {
              unsigned int v147 = a1[1];
            }
            uint64_t v150 = a1[4];
            if (v148 < (unint64_t)v5) {
              uint64_t v150 = a1[1];
            }
            uint64_t v152 = a1[2];
            uint64_t v151 = a1[3];
            uint64_t v153 = a1[5];
            unint64_t v154 = a1[6];
            uint64_t v155 = a1[7];
            do
            {
              if (v146 >= v154)
              {
                if ((_BYTE)v148)
                {
                  uint64_t v158 = 0;
                  do
                  {
                    *(_DWORD *)(v149 + v158) = *(float *)(v155 + v158);
                    v158 += 4;
                  }
                  while (4 * v148 != v158);
                }
              }
              else
              {
                if (v147)
                {
                  uint64_t v156 = 0;
                  do
                  {
                    *(_DWORD *)(v149 + v156) = *(_DWORD *)(v151 + v156);
                    v156 += 4;
                  }
                  while (4 * v147 != v156);
                }
                uint64_t v157 = v150;
                if (v148 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v149 + 4 * v157) = *(float *)(v155 + 4 * v157);
                    ++v157;
                  }
                  while ((v148 - v147 + v150) != v157);
                }
              }
              v149 += v152;
              v151 += v153;
              v146 += v153;
              ++v145;
            }
            while (v145 != v144);
          }
        }
        else
        {
          sub_20B1B7CEC((uint64_t)sub_20B1B7FC0, a1, a2);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          uint64_t v159 = a1[8];
          if (v159)
          {
            uint64_t v160 = 0;
            unint64_t v161 = 0;
            unsigned int v162 = a1[4];
            uint64_t v164 = *a1;
            uint64_t v163 = a1[1];
            if (v162 >= v163) {
              unsigned int v162 = a1[1];
            }
            uint64_t v165 = a1[4];
            if (v163 < (unint64_t)v5) {
              uint64_t v165 = a1[1];
            }
            uint64_t v167 = a1[2];
            uint64_t v166 = a1[3];
            uint64_t v168 = a1[5];
            unint64_t v169 = a1[6];
            uint64_t v170 = a1[7];
            do
            {
              if (v161 >= v169)
              {
                if ((_BYTE)v163)
                {
                  uint64_t v173 = 0;
                  do
                  {
                    *(_DWORD *)(v164 + v173) = (int)*(float *)(v170 + v173);
                    v173 += 4;
                  }
                  while (4 * v163 != v173);
                }
              }
              else
              {
                if (v162)
                {
                  uint64_t v171 = 0;
                  do
                  {
                    *(_DWORD *)(v164 + v171) = *(_DWORD *)(v166 + v171);
                    v171 += 4;
                  }
                  while (4 * v162 != v171);
                }
                uint64_t v172 = v165;
                if (v163 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v164 + 4 * v172) = (int)*(float *)(v170 + 4 * v172);
                    ++v172;
                  }
                  while ((v163 - v162 + v165) != v172);
                }
              }
              v164 += v167;
              v166 += v168;
              v161 += v168;
              ++v160;
            }
            while (v160 != v159);
          }
        }
        else
        {
          sub_20B1B7B50((uint64_t)sub_20B1B7FC0, a1, a2);
        }
        break;
      case 0xAuLL:
        uint64_t v209 = a1[8];
        if (v209)
        {
          uint64_t v174 = 0;
          unint64_t v175 = 0;
          uint64_t v177 = *a1;
          uint64_t v176 = a1[1];
          if (a1[4] >= v176) {
            uint64_t v178 = a1[1];
          }
          else {
            uint64_t v178 = a1[4];
          }
          if (v176 >= (unint64_t)v5) {
            uint64_t v179 = a1[4];
          }
          else {
            uint64_t v179 = a1[1];
          }
          uint64_t v204 = v179;
          uint64_t v180 = a1[3];
          uint64_t v207 = a1[2];
          uint64_t v208 = a1[1];
          uint64_t v181 = a1[7];
          unint64_t v206 = a1[6];
          uint64_t v205 = a1[5];
          uint64_t v182 = 4 * v176;
          int v183 = (v176 - v178 + v179);
          do
          {
            if (v175 >= v206)
            {
              if ((_BYTE)v208)
              {
                uint64_t v186 = 0;
                do
                {
                  *(_DWORD *)(v177 + v186) = (float)(sub_20B1AB850((int)*(float *)(v181 + v186)) * a2);
                  v186 += 4;
                }
                while (v182 != v186);
              }
            }
            else
            {
              if (v178)
              {
                for (muint64_t m = 0; mm != v178; ++mm)
                  *(_DWORD *)(v177 + 4 * mm) = (float)(sub_20B1AB850(*(unsigned __int16 *)(v180 + 2 * mm))
                                                                   * a2);
              }
              uint64_t v185 = v204;
              if (v208 > v5)
              {
                do
                {
                  *(_DWORD *)(v177 + 4 * v185) = (float)(sub_20B1AB850((int)*(float *)(v181 + 4 * v185))
                                                                     * a2);
                  ++v185;
                }
                while (v183 != v185);
              }
            }
            v177 += v207;
            v180 += v205;
            v175 += v205;
            ++v174;
          }
          while (v174 != v209);
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          uint64_t v187 = a1[8];
          if (v187)
          {
            uint64_t v188 = 0;
            unint64_t v189 = 0;
            unsigned int v190 = a1[4];
            uint64_t v192 = *a1;
            uint64_t v191 = a1[1];
            if (v190 >= v191) {
              unsigned int v190 = a1[1];
            }
            uint64_t v193 = a1[4];
            if (v191 < (unint64_t)v5) {
              uint64_t v193 = a1[1];
            }
            uint64_t v195 = a1[2];
            uint64_t v194 = a1[3];
            uint64_t v196 = a1[5];
            unint64_t v197 = a1[6];
            uint64_t v198 = a1[7];
            do
            {
              if (v189 >= v197)
              {
                if ((_BYTE)v191)
                {
                  uint64_t v201 = 0;
                  do
                  {
                    *(_DWORD *)(v192 + v201) = *(float *)(v198 + v201);
                    v201 += 4;
                  }
                  while (4 * v191 != v201);
                }
              }
              else
              {
                if (v190)
                {
                  uint64_t v199 = 0;
                  do
                  {
                    *(_DWORD *)(v192 + v199) = *(float *)(v194 + v199);
                    v199 += 4;
                  }
                  while (4 * v190 != v199);
                }
                uint64_t v200 = v193;
                if (v191 > v5)
                {
                  do
                  {
                    *(_DWORD *)(v192 + 4 * v200) = *(float *)(v198 + 4 * v200);
                    ++v200;
                  }
                  while ((v191 - v190 + v193) != v200);
                }
              }
              v192 += v195;
              v194 += v196;
              v189 += v196;
              ++v188;
            }
            while (v188 != v187);
          }
        }
        else
        {
          sub_20B1B7660((uint64_t)sub_20B1B7F60, a1, a2);
        }
        break;
      default:
        return;
    }
  }
}

uint64_t sub_20B1B451C(uint64_t result, float a2)
{
  float v2 = a2;
  float v3 = (void *)result;
  uint64_t v4 = *(void *)(result + 32);
  if ((v4 & 0x1000) != 0)
  {
    if (v4 == 593924)
    {
      uint64_t v27 = *(void *)(result + 64);
      if (v27)
      {
        float v28 = a2 * 0.00097752;
        float v29 = a2 * 0.33333;
        unsigned int v30 = *(unsigned __int8 *)(result + 8);
        uint64_t v31 = *(void *)(result + 16);
        uint64_t v32 = *(void *)(result + 40);
        uint64_t v33 = (_WORD *)(*(void *)result + 4);
        unsigned int v34 = (_DWORD *)(*(void *)(result + 24) + 8);
        do
        {
          uint64_t result = sub_20B1AB8C4(v28 * (float)(*(v34 - 2) >> 22));
          *(v33 - 2) = result;
          if (v30 >= 2)
          {
            uint64_t result = sub_20B1AB8C4(v28 * (float)((*(v34 - 1) >> 12) & 0x3FF));
            *(v33 - 1) = result;
            if (v30 != 2)
            {
              uint64_t result = sub_20B1AB8C4(v28 * (float)((*v34 >> 2) & 0x3FF));
              *uint64_t v33 = result;
              if (v30 >= 4)
              {
                uint64_t result = sub_20B1AB8C4(v29 * (float)(v34[1] & 3));
                v33[1] = result;
              }
            }
          }
          uint64_t v33 = (_WORD *)((char *)v33 + v31);
          unsigned int v34 = (_DWORD *)((char *)v34 + v32);
          --v27;
        }
        while (v27);
      }
    }
    else if (v4 == 659460)
    {
      uint64_t v20 = *(void *)(result + 64);
      if (v20)
      {
        float v21 = a2 * 0.0019569;
        unsigned int v22 = *(unsigned __int8 *)(result + 8);
        uint64_t v23 = *(void *)(result + 16);
        uint64_t v24 = *(void *)(result + 40);
        uint64_t v25 = (_WORD *)(*(void *)result + 4);
        uint64_t v26 = (_DWORD *)(*(void *)(result + 24) + 8);
        do
        {
          uint64_t result = sub_20B1AB8C4(v21 * (float)(*(v26 - 2) >> 22));
          *(v25 - 2) = result;
          if (v22 >= 2)
          {
            uint64_t result = sub_20B1AB8C4(v21 * (float)((*(v26 - 1) >> 12) & 0x3FF));
            *(v25 - 1) = result;
            if (v22 != 2)
            {
              uint64_t result = sub_20B1AB8C4(v21 * (float)((*v26 >> 2) & 0x3FF));
              *uint64_t v25 = result;
              if (v22 >= 4)
              {
                uint64_t result = sub_20B1AB8C4((float)(v26[1] & 3) * v2);
                v25[1] = result;
              }
            }
          }
          uint64_t v25 = (_WORD *)((char *)v25 + v23);
          uint64_t v26 = (_DWORD *)((char *)v26 + v24);
          --v20;
        }
        while (v20);
      }
    }
  }
  else
  {
    uint64_t v270 = *(void *)(result + 32);
    switch(((unint64_t)(v270 & 0xFFFF0000) - 0x10000) >> 16)
    {
      case 0uLL:
        unsigned int v5 = 1.0;
        if (v2 != 1.0)
        {
          uint64_t v203 = sub_20B1B8018;
          a2 = v2;
          goto LABEL_270;
        }
        uint64_t v258 = *(void *)(result + 64);
        if (v258)
        {
          uint64_t v6 = 0;
          unint64_t v7 = 0;
          uint64_t v9 = *(void *)result;
          uint64_t v8 = *(void *)(result + 8);
          uint64_t v10 = v8;
          if (*(void *)(result + 32) >= v8) {
            uint64_t v11 = *(void *)(result + 8);
          }
          else {
            uint64_t v11 = *(void *)(result + 32);
          }
          if (v8 >= (unint64_t)v270) {
            uint64_t v12 = *(void *)(result + 32);
          }
          else {
            uint64_t v12 = *(void *)(result + 8);
          }
          uint64_t v210 = v12;
          uint64_t v13 = *(void *)(result + 24);
          uint64_t v234 = *(void *)(result + 16);
          uint64_t v246 = *(void *)(result + 8);
          uint64_t v14 = *(void *)(result + 40);
          unint64_t v222 = *(void *)(result + 48);
          uint64_t v15 = *(void *)(result + 56);
          int v16 = (v8 - v11 + v12);
          do
          {
            if (v7 >= v222)
            {
              if ((_BYTE)v246)
              {
                uint64_t v19 = 0;
                do
                {
                  uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v15 + 4 * v19)));
                  *(_WORD *)(v9 + 2 * v19++) = result;
                }
                while (v10 != v19);
              }
            }
            else
            {
              if (v11)
              {
                for (uint64_t i = 0; i != v11; ++i)
                {
                  LOBYTE(v5) = *(unsigned char *)(v13 + i);
                  uint64_t result = sub_20B1AB8C4((float)v5);
                  *(_WORD *)(v9 + 2 * i) = result;
                }
              }
              uint64_t v18 = v210;
              if (v246 > v270)
              {
                do
                {
                  uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v15 + 4 * v18)));
                  *(_WORD *)(v9 + 2 * v18++) = result;
                }
                while (v16 != v18);
              }
            }
            v9 += v234;
            v13 += v14;
            v7 += v14;
            ++v6;
          }
          while (v6 != v258);
        }
        break;
      case 1uLL:
        if (a2 == 1.0)
        {
          uint64_t v259 = *(void *)(result + 64);
          if (v259)
          {
            uint64_t v35 = 0;
            unint64_t v36 = 0;
            uint64_t v38 = *(void *)result;
            uint64_t v37 = *(void *)(result + 8);
            uint64_t v39 = v37;
            if (*(void *)(result + 32) >= v37) {
              uint64_t v40 = *(void *)(result + 8);
            }
            else {
              uint64_t v40 = *(void *)(result + 32);
            }
            if (v37 >= (unint64_t)v270) {
              uint64_t v41 = *(void *)(result + 32);
            }
            else {
              uint64_t v41 = *(void *)(result + 8);
            }
            uint64_t v211 = v41;
            uint64_t v42 = *(void *)(result + 24);
            uint64_t v235 = *(void *)(result + 16);
            uint64_t v247 = *(void *)(result + 8);
            uint64_t v43 = *(void *)(result + 40);
            unint64_t v223 = *(void *)(result + 48);
            uint64_t v44 = *(void *)(result + 56);
            int v45 = (v37 - v40 + v41);
            do
            {
              if (v36 >= v223)
              {
                if ((_BYTE)v247)
                {
                  uint64_t v48 = 0;
                  do
                  {
                    uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v44 + 4 * v48)));
                    *(_WORD *)(v38 + 2 * v48++) = result;
                  }
                  while (v39 != v48);
                }
              }
              else
              {
                if (v40)
                {
                  for (uint64_t j = 0; j != v40; ++j)
                  {
                    uint64_t result = sub_20B1AB8C4((float)*(char *)(v42 + j));
                    *(_WORD *)(v38 + 2 * j) = result;
                  }
                }
                uint64_t v47 = v211;
                if (v247 > v270)
                {
                  do
                  {
                    uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v44 + 4 * v47)));
                    *(_WORD *)(v38 + 2 * v47++) = result;
                  }
                  while (v45 != v47);
                }
              }
              v38 += v235;
              v42 += v43;
              v36 += v43;
              ++v35;
            }
            while (v35 != v259);
          }
        }
        else
        {
          uint64_t v203 = sub_20B1B7FF4;
LABEL_270:
          uint64_t result = sub_20B1B6FE8((uint64_t)v203, v3, a2);
        }
        break;
      case 2uLL:
        uint64_t v260 = *(void *)(result + 64);
        if (v260)
        {
          uint64_t v49 = 0;
          unint64_t v50 = 0;
          float v51 = a2 * 0.0039216;
          uint64_t v53 = *(void *)result;
          uint64_t v52 = *(void *)(result + 8);
          uint64_t v54 = v52;
          if (*(void *)(result + 32) >= v52) {
            uint64_t v55 = *(void *)(result + 8);
          }
          else {
            uint64_t v55 = *(void *)(result + 32);
          }
          if (v52 >= (unint64_t)v270) {
            uint64_t v56 = *(void *)(result + 32);
          }
          else {
            uint64_t v56 = *(void *)(result + 8);
          }
          uint64_t v212 = v56;
          uint64_t v57 = *(void *)(result + 24);
          uint64_t v236 = *(void *)(result + 16);
          uint64_t v248 = *(void *)(result + 8);
          uint64_t v58 = *(void *)(result + 40);
          unint64_t v224 = *(void *)(result + 48);
          uint64_t v59 = *(void *)(result + 56);
          int v60 = (v52 - v55 + v56);
          do
          {
            if (v50 >= v224)
            {
              if ((_BYTE)v248)
              {
                uint64_t v63 = 0;
                do
                {
                  uint64_t result = sub_20B1AB8C4(v51 * (float)(char)(int)*(float *)(v59 + 4 * v63));
                  *(_WORD *)(v53 + 2 * v63++) = result;
                }
                while (v54 != v63);
              }
            }
            else
            {
              if (v55)
              {
                for (uint64_t k = 0; k != v55; ++k)
                {
                  uint64_t result = sub_20B1AB8C4(v51 * (float)*(char *)(v57 + k));
                  *(_WORD *)(v53 + 2 * k) = result;
                }
              }
              uint64_t v62 = v212;
              if (v248 > v270)
              {
                do
                {
                  uint64_t result = sub_20B1AB8C4(v51 * (float)(char)(int)*(float *)(v59 + 4 * v62));
                  *(_WORD *)(v53 + 2 * v62++) = result;
                }
                while (v60 != v62);
              }
            }
            v53 += v236;
            v57 += v58;
            v50 += v58;
            ++v49;
          }
          while (v49 != v260);
        }
        break;
      case 3uLL:
        uint64_t v261 = *(void *)(result + 64);
        if (v261)
        {
          uint64_t v64 = 0;
          unint64_t v65 = 0;
          float v66 = a2 * 0.007874;
          uint64_t v68 = *(void *)result;
          uint64_t v67 = *(void *)(result + 8);
          uint64_t v69 = v67;
          if (*(void *)(result + 32) >= v67) {
            uint64_t v70 = *(void *)(result + 8);
          }
          else {
            uint64_t v70 = *(void *)(result + 32);
          }
          if (v67 >= (unint64_t)v270) {
            uint64_t v71 = *(void *)(result + 32);
          }
          else {
            uint64_t v71 = *(void *)(result + 8);
          }
          uint64_t v213 = v71;
          uint64_t v72 = *(void *)(result + 24);
          uint64_t v237 = *(void *)(result + 16);
          uint64_t v249 = *(void *)(result + 8);
          uint64_t v73 = *(void *)(result + 40);
          unint64_t v225 = *(void *)(result + 48);
          uint64_t v74 = *(void *)(result + 56);
          int v75 = (v67 - v70 + v71);
          do
          {
            if (v65 >= v225)
            {
              if ((_BYTE)v249)
              {
                uint64_t v78 = 0;
                do
                {
                  uint64_t result = sub_20B1AB8C4(v66 * truncf(*(float *)(v74 + 4 * v78)));
                  *(_WORD *)(v68 + 2 * v78++) = result;
                }
                while (v69 != v78);
              }
            }
            else
            {
              if (v70)
              {
                for (uint64_t m = 0; m != v70; ++m)
                {
                  uint64_t result = sub_20B1AB8C4(v66 * (float)*(char *)(v72 + m));
                  *(_WORD *)(v68 + 2 * m) = result;
                }
              }
              uint64_t v77 = v213;
              if (v249 > v270)
              {
                do
                {
                  uint64_t result = sub_20B1AB8C4(v66 * truncf(*(float *)(v74 + 4 * v77)));
                  *(_WORD *)(v68 + 2 * v77++) = result;
                }
                while (v75 != v77);
              }
            }
            v68 += v237;
            v72 += v73;
            v65 += v73;
            ++v64;
          }
          while (v64 != v261);
        }
        break;
      case 4uLL:
        unsigned int v79 = 1.0;
        if (v2 != 1.0)
        {
          uint64_t v204 = sub_20B1B8060;
          a2 = v2;
          goto LABEL_276;
        }
        uint64_t v262 = *(void *)(result + 64);
        if (v262)
        {
          uint64_t v80 = 0;
          unint64_t v81 = 0;
          uint64_t v83 = *(void *)result;
          uint64_t v82 = *(void *)(result + 8);
          uint64_t v84 = v82;
          if (*(void *)(result + 32) >= v82) {
            unsigned int v85 = *(void *)(result + 8);
          }
          else {
            unsigned int v85 = *(void *)(result + 32);
          }
          if (v82 >= (unint64_t)v270) {
            uint64_t v86 = *(void *)(result + 32);
          }
          else {
            uint64_t v86 = *(void *)(result + 8);
          }
          uint64_t v205 = v86;
          unsigned int v214 = v85;
          uint64_t v87 = *(void *)(result + 24);
          uint64_t v238 = *(void *)(result + 16);
          uint64_t v250 = *(void *)(result + 8);
          uint64_t v88 = *(void *)(result + 40);
          unint64_t v226 = *(void *)(result + 48);
          uint64_t v89 = *(void *)(result + 56);
          uint64_t v90 = 2 * v85;
          int v91 = (v82 - v85 + v86);
          do
          {
            if (v81 >= v226)
            {
              if ((_BYTE)v250)
              {
                uint64_t v94 = 0;
                do
                {
                  uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v89 + 4 * v94)));
                  *(_WORD *)(v83 + 2 * v94++) = result;
                }
                while (v84 != v94);
              }
            }
            else
            {
              if (v214)
              {
                uint64_t v92 = 0;
                do
                {
                  LOWORD(v79) = *(_WORD *)(v87 + v92);
                  uint64_t result = sub_20B1AB8C4((float)v79);
                  *(_WORD *)(v83 + v92) = result;
                  v92 += 2;
                }
                while (v90 != v92);
              }
              uint64_t v93 = v205;
              if (v250 > v270)
              {
                do
                {
                  uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v89 + 4 * v93)));
                  *(_WORD *)(v83 + 2 * v93++) = result;
                }
                while (v91 != v93);
              }
            }
            v83 += v238;
            v87 += v88;
            v81 += v88;
            ++v80;
          }
          while (v80 != v262);
        }
        break;
      case 5uLL:
        if (a2 == 1.0)
        {
          uint64_t v263 = *(void *)(result + 64);
          if (v263)
          {
            uint64_t v95 = 0;
            unint64_t v96 = 0;
            uint64_t v98 = *(void *)result;
            uint64_t v97 = *(void *)(result + 8);
            uint64_t v99 = v97;
            if (*(void *)(result + 32) >= v97) {
              unsigned int v100 = *(void *)(result + 8);
            }
            else {
              unsigned int v100 = *(void *)(result + 32);
            }
            if (v97 >= (unint64_t)v270) {
              uint64_t v101 = *(void *)(result + 32);
            }
            else {
              uint64_t v101 = *(void *)(result + 8);
            }
            uint64_t v206 = v101;
            unsigned int v215 = v100;
            uint64_t v102 = *(void *)(result + 24);
            uint64_t v239 = *(void *)(result + 16);
            uint64_t v251 = *(void *)(result + 8);
            uint64_t v103 = *(void *)(result + 40);
            unint64_t v227 = *(void *)(result + 48);
            uint64_t v104 = *(void *)(result + 56);
            uint64_t v105 = 2 * v100;
            int v106 = (v97 - v100 + v101);
            do
            {
              if (v96 >= v227)
              {
                if ((_BYTE)v251)
                {
                  uint64_t v109 = 0;
                  do
                  {
                    uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v104 + 4 * v109)));
                    *(_WORD *)(v98 + 2 * v109++) = result;
                  }
                  while (v99 != v109);
                }
              }
              else
              {
                if (v215)
                {
                  uint64_t v107 = 0;
                  do
                  {
                    uint64_t result = sub_20B1AB8C4((float)*(__int16 *)(v102 + v107));
                    *(_WORD *)(v98 + v107) = result;
                    v107 += 2;
                  }
                  while (v105 != v107);
                }
                uint64_t v108 = v206;
                if (v251 > v270)
                {
                  do
                  {
                    uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v104 + 4 * v108)));
                    *(_WORD *)(v98 + 2 * v108++) = result;
                  }
                  while (v106 != v108);
                }
              }
              v98 += v239;
              v102 += v103;
              v96 += v103;
              ++v95;
            }
            while (v95 != v263);
          }
        }
        else
        {
          uint64_t v204 = sub_20B1B803C;
LABEL_276:
          uint64_t result = sub_20B1B7194((uint64_t)v204, v3, a2);
        }
        break;
      case 6uLL:
        uint64_t v264 = *(void *)(result + 64);
        if (v264)
        {
          uint64_t v110 = 0;
          unint64_t v111 = 0;
          HIWORD(v112) = 14208;
          float v113 = v2 * 0.000015259;
          uint64_t v115 = *(void *)result;
          uint64_t v114 = *(void *)(result + 8);
          uint64_t v116 = v114;
          if (*(void *)(result + 32) >= v114) {
            unsigned int v117 = *(void *)(result + 8);
          }
          else {
            unsigned int v117 = *(void *)(result + 32);
          }
          if (v114 >= (unint64_t)v270) {
            uint64_t v118 = *(void *)(result + 32);
          }
          else {
            uint64_t v118 = *(void *)(result + 8);
          }
          uint64_t v207 = v118;
          unsigned int v216 = v117;
          uint64_t v119 = *(void *)(result + 24);
          uint64_t v240 = *(void *)(result + 16);
          uint64_t v252 = *(void *)(result + 8);
          uint64_t v120 = *(void *)(result + 40);
          unint64_t v228 = *(void *)(result + 48);
          uint64_t v121 = *(void *)(result + 56);
          uint64_t v122 = 2 * v117;
          int v123 = (v114 - v117 + v118);
          do
          {
            if (v111 >= v228)
            {
              if ((_BYTE)v252)
              {
                uint64_t v126 = 0;
                do
                {
                  uint64_t result = sub_20B1AB8C4(v113 * truncf(*(float *)(v121 + 4 * v126)));
                  *(_WORD *)(v115 + 2 * v126++) = result;
                }
                while (v116 != v126);
              }
            }
            else
            {
              if (v216)
              {
                uint64_t v124 = 0;
                do
                {
                  LOWORD(v112) = *(_WORD *)(v119 + v124);
                  uint64_t result = sub_20B1AB8C4(v113 * (float)v112);
                  *(_WORD *)(v115 + v124) = result;
                  v124 += 2;
                }
                while (v122 != v124);
              }
              uint64_t v125 = v207;
              if (v252 > v270)
              {
                do
                {
                  uint64_t result = sub_20B1AB8C4(v113 * truncf(*(float *)(v121 + 4 * v125)));
                  *(_WORD *)(v115 + 2 * v125++) = result;
                }
                while (v123 != v125);
              }
            }
            v115 += v240;
            v119 += v120;
            v111 += v120;
            ++v110;
          }
          while (v110 != v264);
        }
        break;
      case 7uLL:
        uint64_t v265 = *(void *)(result + 64);
        if (v265)
        {
          uint64_t v127 = 0;
          unint64_t v128 = 0;
          float v129 = a2 * 0.000030519;
          uint64_t v131 = *(void *)result;
          uint64_t v130 = *(void *)(result + 8);
          uint64_t v132 = v130;
          if (*(void *)(result + 32) >= v130) {
            unsigned int v133 = *(void *)(result + 8);
          }
          else {
            unsigned int v133 = *(void *)(result + 32);
          }
          if (v130 >= (unint64_t)v270) {
            uint64_t v134 = *(void *)(result + 32);
          }
          else {
            uint64_t v134 = *(void *)(result + 8);
          }
          uint64_t v208 = v134;
          unsigned int v217 = v133;
          uint64_t v135 = *(void *)(result + 24);
          uint64_t v241 = *(void *)(result + 16);
          uint64_t v253 = *(void *)(result + 8);
          uint64_t v136 = *(void *)(result + 40);
          unint64_t v229 = *(void *)(result + 48);
          uint64_t v137 = *(void *)(result + 56);
          uint64_t v138 = 2 * v133;
          int v139 = (v130 - v133 + v134);
          do
          {
            if (v128 >= v229)
            {
              if ((_BYTE)v253)
              {
                uint64_t v142 = 0;
                do
                {
                  uint64_t result = sub_20B1AB8C4(v129 * truncf(*(float *)(v137 + 4 * v142)));
                  *(_WORD *)(v131 + 2 * v142++) = result;
                }
                while (v132 != v142);
              }
            }
            else
            {
              if (v217)
              {
                uint64_t v140 = 0;
                do
                {
                  uint64_t result = sub_20B1AB8C4(v129 * (float)*(__int16 *)(v135 + v140));
                  *(_WORD *)(v131 + v140) = result;
                  v140 += 2;
                }
                while (v138 != v140);
              }
              uint64_t v141 = v208;
              if (v253 > v270)
              {
                do
                {
                  uint64_t result = sub_20B1AB8C4(v129 * truncf(*(float *)(v137 + 4 * v141)));
                  *(_WORD *)(v131 + 2 * v141++) = result;
                }
                while (v139 != v141);
              }
            }
            v131 += v241;
            v135 += v136;
            v128 += v136;
            ++v127;
          }
          while (v127 != v265);
        }
        break;
      case 8uLL:
        if (a2 == 1.0)
        {
          uint64_t v266 = *(void *)(result + 64);
          if (v266)
          {
            uint64_t v143 = 0;
            unint64_t v144 = 0;
            uint64_t v146 = *(void *)result;
            uint64_t v145 = *(void *)(result + 8);
            uint64_t v147 = v145;
            if (*(void *)(result + 32) >= v145) {
              uint64_t v148 = *(void *)(result + 8);
            }
            else {
              uint64_t v148 = *(void *)(result + 32);
            }
            if (v145 >= (unint64_t)v270) {
              uint64_t v149 = *(void *)(result + 32);
            }
            else {
              uint64_t v149 = *(void *)(result + 8);
            }
            uint64_t v218 = v149;
            uint64_t v150 = *(void *)(result + 24);
            uint64_t v242 = *(void *)(result + 16);
            uint64_t v254 = *(void *)(result + 8);
            uint64_t v151 = *(void *)(result + 40);
            unint64_t v230 = *(void *)(result + 48);
            uint64_t v152 = *(void *)(result + 56);
            int v153 = (v145 - v148 + v149);
            do
            {
              if (v144 >= v230)
              {
                if ((_BYTE)v254)
                {
                  uint64_t v156 = 0;
                  do
                  {
                    uint64_t result = sub_20B1AB8C4((float)(int)*(float *)(v152 + 4 * v156));
                    *(_WORD *)(v146 + 2 * v156++) = result;
                  }
                  while (v147 != v156);
                }
              }
              else
              {
                if (v148)
                {
                  for (uint64_t n = 0; n != v148; ++n)
                  {
                    uint64_t result = sub_20B1AB8C4((float)*(int *)(v150 + 4 * n));
                    *(_WORD *)(v146 + 2 * n) = result;
                  }
                }
                uint64_t v155 = v218;
                if (v254 > v270)
                {
                  do
                  {
                    uint64_t result = sub_20B1AB8C4((float)(int)*(float *)(v152 + 4 * v155));
                    *(_WORD *)(v146 + 2 * v155++) = result;
                  }
                  while (v153 != v155);
                }
              }
              v146 += v242;
              v150 += v151;
              v144 += v151;
              ++v143;
            }
            while (v143 != v266);
          }
        }
        else
        {
          uint64_t result = sub_20B1B74D8((uint64_t)sub_20B1B8084, (void *)result, a2);
        }
        break;
      case 9uLL:
        if (a2 == 1.0)
        {
          uint64_t v267 = *(void *)(result + 64);
          if (v267)
          {
            uint64_t v157 = 0;
            unint64_t v158 = 0;
            uint64_t v160 = *(void *)result;
            uint64_t v159 = *(void *)(result + 8);
            uint64_t v161 = v159;
            if (*(void *)(result + 32) >= v159) {
              uint64_t v162 = *(void *)(result + 8);
            }
            else {
              uint64_t v162 = *(void *)(result + 32);
            }
            if (v159 >= (unint64_t)v270) {
              uint64_t v163 = *(void *)(result + 32);
            }
            else {
              uint64_t v163 = *(void *)(result + 8);
            }
            uint64_t v219 = v163;
            uint64_t v164 = *(void *)(result + 24);
            uint64_t v243 = *(void *)(result + 16);
            uint64_t v255 = *(void *)(result + 8);
            uint64_t v165 = *(void *)(result + 40);
            unint64_t v231 = *(void *)(result + 48);
            uint64_t v166 = *(void *)(result + 56);
            int v167 = (v159 - v162 + v163);
            do
            {
              if (v158 >= v231)
              {
                if ((_BYTE)v255)
                {
                  uint64_t v170 = 0;
                  do
                  {
                    uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v166 + 4 * v170)));
                    *(_WORD *)(v160 + 2 * v170++) = result;
                  }
                  while (v161 != v170);
                }
              }
              else
              {
                if (v162)
                {
                  for (iuint64_t i = 0; ii != v162; ++ii)
                  {
                    uint64_t result = sub_20B1AB8C4((float)*(int *)(v164 + 4 * ii));
                    *(_WORD *)(v160 + 2 * ii) = result;
                  }
                }
                uint64_t v169 = v219;
                if (v255 > v270)
                {
                  do
                  {
                    uint64_t result = sub_20B1AB8C4(truncf(*(float *)(v166 + 4 * v169)));
                    *(_WORD *)(v160 + 2 * v169++) = result;
                  }
                  while (v167 != v169);
                }
              }
              v160 += v243;
              v164 += v165;
              v158 += v165;
              ++v157;
            }
            while (v157 != v267);
          }
        }
        else
        {
          uint64_t result = sub_20B1B7340((uint64_t)sub_20B1B8084, (void *)result, a2);
        }
        break;
      case 0xAuLL:
        uint64_t v268 = *(void *)(result + 64);
        if (v268)
        {
          uint64_t v171 = 0;
          unint64_t v172 = 0;
          uint64_t v174 = *(void *)result;
          uint64_t v173 = *(void *)(result + 8);
          uint64_t v175 = v173;
          if (*(void *)(result + 32) >= v173) {
            unsigned int v176 = *(void *)(result + 8);
          }
          else {
            unsigned int v176 = *(void *)(result + 32);
          }
          if (v173 >= (unint64_t)v270) {
            uint64_t v177 = *(void *)(result + 32);
          }
          else {
            uint64_t v177 = *(void *)(result + 8);
          }
          uint64_t v209 = v177;
          unsigned int v220 = v176;
          uint64_t v178 = *(void *)(result + 24);
          uint64_t v244 = *(void *)(result + 16);
          uint64_t v256 = *(void *)(result + 8);
          uint64_t v179 = *(void *)(result + 40);
          unint64_t v232 = *(void *)(result + 48);
          uint64_t v180 = *(void *)(result + 56);
          uint64_t v181 = 2 * v176;
          int v182 = (v173 - v176 + v177);
          do
          {
            if (v172 >= v232)
            {
              if ((_BYTE)v256)
              {
                uint64_t v187 = 0;
                do
                {
                  float v188 = sub_20B1AB850((int)*(float *)(v180 + 4 * v187));
                  uint64_t result = sub_20B1AB8C4(v188 * v2);
                  *(_WORD *)(v174 + 2 * v187++) = result;
                }
                while (v175 != v187);
              }
            }
            else
            {
              if (v220)
              {
                uint64_t v183 = 0;
                do
                {
                  float v184 = sub_20B1AB850(*(unsigned __int16 *)(v178 + v183));
                  uint64_t result = sub_20B1AB8C4(v184 * v2);
                  *(_WORD *)(v174 + v183) = result;
                  v183 += 2;
                }
                while (v181 != v183);
              }
              uint64_t v185 = v209;
              if (v256 > v270)
              {
                do
                {
                  float v186 = sub_20B1AB850((int)*(float *)(v180 + 4 * v185));
                  uint64_t result = sub_20B1AB8C4(v186 * v2);
                  *(_WORD *)(v174 + 2 * v185++) = result;
                }
                while (v182 != v185);
              }
            }
            v174 += v244;
            v178 += v179;
            v172 += v179;
            ++v171;
          }
          while (v171 != v268);
        }
        break;
      case 0xBuLL:
        if (a2 == 1.0)
        {
          uint64_t v269 = *(void *)(result + 64);
          if (v269)
          {
            uint64_t v189 = 0;
            unint64_t v190 = 0;
            uint64_t v192 = *(void *)result;
            uint64_t v191 = *(void *)(result + 8);
            uint64_t v193 = v191;
            if (*(void *)(result + 32) >= v191) {
              uint64_t v194 = *(void *)(result + 8);
            }
            else {
              uint64_t v194 = *(void *)(result + 32);
            }
            if (v191 >= (unint64_t)v270) {
              uint64_t v195 = *(void *)(result + 32);
            }
            else {
              uint64_t v195 = *(void *)(result + 8);
            }
            uint64_t v221 = v195;
            uint64_t v196 = *(void *)(result + 24);
            uint64_t v245 = *(void *)(result + 16);
            uint64_t v257 = *(void *)(result + 8);
            uint64_t v197 = *(void *)(result + 40);
            unint64_t v233 = *(void *)(result + 48);
            uint64_t v198 = *(void *)(result + 56);
            int v199 = (v191 - v194 + v195);
            do
            {
              if (v190 >= v233)
              {
                if ((_BYTE)v257)
                {
                  uint64_t v202 = 0;
                  do
                  {
                    uint64_t result = sub_20B1AB8C4(*(float *)(v198 + 4 * v202));
                    *(_WORD *)(v192 + 2 * v202++) = result;
                  }
                  while (v193 != v202);
                }
              }
              else
              {
                if (v194)
                {
                  for (juint64_t j = 0; jj != v194; ++jj)
                  {
                    uint64_t result = sub_20B1AB8C4(*(float *)(v196 + 4 * jj));
                    *(_WORD *)(v192 + 2 * jj) = result;
                  }
                }
                uint64_t v201 = v221;
                if (v257 > v270)
                {
                  do
                  {
                    uint64_t result = sub_20B1AB8C4(*(float *)(v198 + 4 * v201));
                    *(_WORD *)(v192 + 2 * v201++) = result;
                  }
                  while (v199 != v201);
                }
              }
              v192 += v245;
              v196 += v197;
              v190 += v197;
              ++v189;
            }
            while (v189 != v269);
          }
        }
        else
        {
          uint64_t result = sub_20B1B6E5C((uint64_t)sub_20B1B7FD4, (void *)result, a2);
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_20B1B578C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    unint64_t v7 = (float *)(*(void *)(a2 + 24) + 8);
    do
    {
      *(v6 - 2) = (float)(*(v7 - 2) * 511.0) << 22;
      if (v3 >= 2)
      {
        *(v6 - 1) |= ((float)(*(v7 - 1) * 511.0) & 0x3FF) << 12;
        if (v3 != 2)
        {
          *v6 |= 4 * ((float)(*v7 * 511.0) & 0x3FF);
          if (v3 >= 4) {
            v6[1] |= v7[1] & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      unint64_t v7 = (float *)((char *)v7 + v5);
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B5848(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    unint64_t v7 = (unsigned char *)(*(void *)(a2 + 24) + 3);
    do
    {
      *(v6 - 2) = 2143289344 * (char)*(v7 - 3);
      if (v3 >= 2)
      {
        *(v6 - 1) |= (2093056 * (char)*(v7 - 2)) & 0x3FF000;
        if (v3 != 2)
        {
          *v6 |= (2044 * (char)*(v7 - 1)) & 0xFFC;
          if (v3 >= 4) {
            v6[1] |= *v7 & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      v7 += v5;
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B58F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    unint64_t v7 = (unsigned char *)(*(void *)(a2 + 24) + 3);
    do
    {
      *(v6 - 2) = 2143289344 * *(v7 - 3);
      if (v3 >= 2)
      {
        *(v6 - 1) |= (2093056 * *(v7 - 2)) & 0x3FF000;
        if (v3 != 2)
        {
          *v6 |= (2044 * *(v7 - 1)) & 0xFFC;
          if (v3 >= 4) {
            v6[1] |= *v7 & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      v7 += v5;
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B59A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    unint64_t v7 = (_WORD *)(*(void *)(a2 + 24) + 4);
    do
    {
      *(v6 - 2) = 2143289344 * (unsigned __int16)*(v7 - 2);
      if (v3 >= 2)
      {
        *(v6 - 1) |= ((511 * *(v7 - 1)) & 0x3FF) << 12;
        if (v3 != 2)
        {
          *v6 |= (2044 * *v7) & 0xFFC;
          if (v3 >= 4) {
            v6[1] |= v7[1] & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      unint64_t v7 = (_WORD *)((char *)v7 + v5);
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B5A50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    uint64_t v7 = *(void *)(a2 + 24) + 8;
    do
    {
      *(v6 - 2) = 2143289344 * *(_DWORD *)(v7 - 8);
      if (v3 >= 2)
      {
        *(v6 - 1) |= (2093056 * *(_DWORD *)(v7 - 4)) & 0x3FF000;
        if (v3 != 2)
        {
          *v6 |= (2044 * *(_WORD *)v7) & 0xFFC;
          if (v3 >= 4) {
            v6[1] |= *(_DWORD *)(v7 + 4) & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      v7 += v5;
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B5AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    uint64_t v7 = (float *)(*(void *)(a2 + 24) + 8);
    do
    {
      *(v6 - 2) = (float)(*(v7 - 2) * 1023.0) << 22;
      if (v3 >= 2)
      {
        *(v6 - 1) |= ((float)(*(v7 - 1) * 1023.0) & 0x3FF) << 12;
        if (v3 != 2)
        {
          *v6 |= 4 * ((float)(*v7 * 1023.0) & 0x3FF);
          if (v3 >= 4) {
            v6[1] |= (float)(v7[1] * 3.0) & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      uint64_t v7 = (float *)((char *)v7 + v5);
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B5BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    uint64_t v7 = (unsigned __int8 *)(*(void *)(a2 + 24) + 3);
    do
    {
      *(v6 - 2) = -4194304 * (char)*(v7 - 3);
      if (v3 >= 2)
      {
        *(v6 - 1) |= (-4096 * (char)*(v7 - 2)) & 0x3FF000;
        if (v3 != 2)
        {
          *v6 |= (-4 * (char)*(v7 - 1)) & 0xFFC;
          if (v3 >= 4) {
            v6[1] |= -*v7 & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      v7 += v5;
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B5C64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    uint64_t v7 = (unsigned __int8 *)(*(void *)(a2 + 24) + 3);
    do
    {
      *(v6 - 2) = -4194304 * *(v7 - 3);
      if (v3 >= 2)
      {
        *(v6 - 1) |= (-4096 * *(v7 - 2)) & 0x3FF000;
        if (v3 != 2)
        {
          *v6 |= (-4 * *(v7 - 1)) & 0xFFC;
          if (v3 >= 4) {
            v6[1] |= -*v7 & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      v7 += v5;
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B5D08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    uint64_t v7 = (unsigned __int16 *)(*(void *)(a2 + 24) + 4);
    do
    {
      *(v6 - 2) = -4194304 * *(v7 - 2);
      if (v3 >= 2)
      {
        *(v6 - 1) |= (-*(v7 - 1) & 0x3FF) << 12;
        if (v3 != 2)
        {
          *v6 |= (-4 * *v7) & 0xFFC;
          if (v3 >= 4) {
            v6[1] |= -v7[1] & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      uint64_t v7 = (unsigned __int16 *)((char *)v7 + v5);
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B5DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 64);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int8 *)(a2 + 32);
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 40);
    uint64_t v6 = (_DWORD *)(*(void *)a2 + 8);
    uint64_t v7 = (_DWORD *)(*(void *)(a2 + 24) + 8);
    do
    {
      *(v6 - 2) = -4194304 * *(v7 - 2);
      if (v3 >= 2)
      {
        *(v6 - 1) |= (-4096 * *(v7 - 1)) & 0x3FF000;
        if (v3 != 2)
        {
          *v6 |= (-4 * *v7) & 0xFFC;
          if (v3 >= 4) {
            v6[1] |= -v7[1] & 3;
          }
        }
      }
      uint64_t v6 = (_DWORD *)((char *)v6 + v4);
      uint64_t v7 = (_DWORD *)((char *)v7 + v5);
      --v2;
    }
    while (v2);
  }
}

void sub_20B1B5E58(float (*a1)(float *, float), float **a2, float a3)
{
  if (a2[8])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v22 = v13;
    uint64_t v23 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = ((_BYTE)v11 + v13 - v12);
    do
    {
      if (v7 >= (unint64_t)a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v20 = 0;
          do
          {
            float v27 = a2[7][v20 / 4];
            v10[v20 / 4] = a1(&v27, a3);
            v20 += 4;
          }
          while (v14 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            *v17++ = a1(v18++, a3);
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = (_BYTE)v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            float v28 = a2[7][v19];
            v10[v19++] = a1(&v28, a3);
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (float *)((char *)a2[2] + (void)v10);
      float v21 = a2[5];
      uint64_t v9 = (float *)((char *)v21 + (void)v9);
      v7 += (unint64_t)v21;
      ++v6;
    }
    while (v6 < (unint64_t)a2[8]);
  }
}

float sub_20B1B5FD8(float *a1, float a2)
{
  return *a1 * a2;
}

void sub_20B1B5FE4(float (*a1)(char *, float), float **a2, float a3)
{
  if (a2[8])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v22 = v13;
    uint64_t v23 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = ((_BYTE)v11 + v13 - v12);
    do
    {
      if (v7 >= (unint64_t)a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v20 = 0;
          do
          {
            char v27 = (int)a2[7][v20 / 4];
            v10[v20 / 4] = a1(&v27, a3);
            v20 += 4;
          }
          while (v14 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            *v17++ = a1((char *)v18, a3);
            uint64_t v18 = (float *)((char *)v18 + 1);
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = (_BYTE)v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            char v28 = (int)a2[7][v19];
            v10[v19++] = a1(&v28, a3);
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (float *)((char *)a2[2] + (void)v10);
      float v21 = a2[5];
      uint64_t v9 = (float *)((char *)v21 + (void)v9);
      v7 += (unint64_t)v21;
      ++v6;
    }
    while (v6 < (unint64_t)a2[8]);
  }
}

float sub_20B1B616C(char *a1, float a2)
{
  return (float)*a1 * a2;
}

float sub_20B1B617C(unsigned char *a1, float a2, float a3)
{
  LOBYTE(a3) = *a1;
  return (float)LODWORD(a3) * a2;
}

void sub_20B1B618C(float (*a1)(__int16 *, float), float **a2, float a3)
{
  if (a2[8])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v22 = v13;
    uint64_t v23 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = ((_BYTE)v11 + v13 - v12);
    do
    {
      if (v7 >= (unint64_t)a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v20 = 0;
          do
          {
            __int16 v27 = (int)a2[7][v20 / 4];
            v10[v20 / 4] = a1(&v27, a3);
            v20 += 4;
          }
          while (v14 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            *v17++ = a1((__int16 *)v18, a3);
            uint64_t v18 = (float *)((char *)v18 + 2);
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = (_BYTE)v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            __int16 v28 = (int)a2[7][v19];
            v10[v19++] = a1(&v28, a3);
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (float *)((char *)a2[2] + (void)v10);
      float v21 = a2[5];
      uint64_t v9 = (float *)((char *)v21 + (void)v9);
      v7 += (unint64_t)v21;
      ++v6;
    }
    while (v6 < (unint64_t)a2[8]);
  }
}

float sub_20B1B6314(__int16 *a1, float a2)
{
  return (float)*a1 * a2;
}

float sub_20B1B6324(_WORD *a1, float a2, float a3)
{
  LOWORD(a3) = *a1;
  return (float)LODWORD(a3) * a2;
}

void sub_20B1B6334(float (*a1)(int *, float), float **a2, float a3)
{
  if (a2[8])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v22 = v13;
    uint64_t v23 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = ((_BYTE)v11 + v13 - v12);
    do
    {
      if (v7 >= (unint64_t)a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v20 = 0;
          do
          {
            int v27 = (int)a2[7][v20 / 4];
            v10[v20 / 4] = a1(&v27, a3);
            v20 += 4;
          }
          while (v14 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            *v17++ = a1((int *)v18++, a3);
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = (_BYTE)v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            int v28 = (int)a2[7][v19];
            v10[v19++] = a1(&v28, a3);
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (float *)((char *)a2[2] + (void)v10);
      float v21 = a2[5];
      uint64_t v9 = (float *)((char *)v21 + (void)v9);
      v7 += (unint64_t)v21;
      ++v6;
    }
    while (v6 < (unint64_t)a2[8]);
  }
}

float sub_20B1B64BC(int *a1, float a2)
{
  return (float)*a1 * a2;
}

void sub_20B1B64CC(float (*a1)(unsigned int *, float), float **a2, float a3)
{
  if (a2[8])
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    unsigned int v25 = a2[1];
    unsigned int v26 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v23 = v13;
    uint64_t v24 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = ((_BYTE)v11 + v13 - v12);
    do
    {
      if (v7 >= (unint64_t)a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v21 = 0;
          do
          {
            unsigned int v28 = a2[7][v21 / 4];
            v10[v21 / 4] = a1(&v28, a3);
            v21 += 4;
          }
          while (v14 != v21);
        }
      }
      else
      {
        unint64_t v27 = v6;
        uint64_t v16 = v24;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v24)
        {
          do
          {
            int v19 = *(_DWORD *)v18++;
            int v30 = v19;
            *v17++ = a1((unsigned int *)&v30, a3);
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = (_BYTE)v25;
        uint64_t v20 = v23;
        unint64_t v6 = v27;
        if (v26 < v25)
        {
          do
          {
            unsigned int v29 = a2[7][v20];
            v10[v20++] = a1(&v29, a3);
          }
          while (v15 != v20);
        }
      }
      uint64_t v10 = (float *)((char *)a2[2] + (void)v10);
      uint64_t v22 = a2[5];
      uint64_t v9 = (float *)((char *)v22 + (void)v9);
      v7 += (unint64_t)v22;
      ++v6;
    }
    while (v6 < (unint64_t)a2[8]);
  }
}

uint64_t sub_20B1B6658(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (unsigned char *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v20 = 0;
          do
          {
            int v27 = *(_DWORD *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v27, a3);
            v10[v20++] = result;
          }
          while (v12 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            int v28 = *(_DWORD *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      v10 += a2[2];
      uint64_t v21 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B67D4(float *a1, float a2)
{
  return (int)(float)(*a1 * a2);
}

uint64_t sub_20B1B67E4(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(char *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (char *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (unsigned char *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v20 = 0;
          do
          {
            char v27 = (int)*(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v27, a3);
            v10[v20++] = result;
          }
          while (v12 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            char v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      v10 += a2[2];
      uint64_t v21 = a2[5];
      v9 += v21;
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B6968(char *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B697C(unsigned char *a1, float a2, float a3)
{
  LOBYTE(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B6990(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(__int16 *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (__int16 *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (unsigned char *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v20 = 0;
          do
          {
            __int16 v27 = (int)*(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v27, a3);
            v10[v20++] = result;
          }
          while (v12 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            __int16 v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      v10 += a2[2];
      uint64_t v21 = a2[5];
      uint64_t v9 = (__int16 *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B6B14(__int16 *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B6B28(_WORD *a1, float a2, float a3)
{
  LOWORD(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B6B3C(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (unsigned char *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v20 = 0;
          do
          {
            int v27 = (int)*(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v27, a3);
            v10[v20++] = result;
          }
          while (v12 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            int v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      v10 += a2[2];
      uint64_t v21 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B6CC0(int *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B6CD4(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(unsigned int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (unsigned char *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v25 = a2[1];
    unsigned int v26 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v23 = v14;
    uint64_t v24 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v21 = 0;
          do
          {
            unsigned int v28 = *(float *)(a2[7] + 4 * v21);
            uint64_t result = v5(&v28, a3);
            v10[v21++] = result;
          }
          while (v12 != v21);
        }
      }
      else
      {
        unint64_t v27 = v6;
        uint64_t v16 = v24;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v24)
        {
          do
          {
            int v19 = *v18++;
            int v30 = v19;
            uint64_t result = v5((unsigned int *)&v30, a3);
            *v17++ = result;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v25;
        uint64_t v20 = v23;
        unint64_t v6 = v27;
        if (v26 < v25)
        {
          do
          {
            unsigned int v29 = *(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v29, a3);
            v10[v20++] = result;
          }
          while (v15 != v20);
        }
      }
      v10 += a2[2];
      uint64_t v22 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v22);
      v7 += v22;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B6E5C(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_WORD *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v20 = 0;
          do
          {
            int v27 = *(_DWORD *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v27, a3);
            v10[v20++] = result;
          }
          while (v12 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            int v28 = *(_DWORD *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (_WORD *)((char *)v10 + a2[2]);
      uint64_t v21 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B6FD8(float *a1, float a2)
{
  return (int)(float)(*a1 * a2);
}

uint64_t sub_20B1B6FE8(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(char *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (char *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_WORD *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v20 = 0;
          do
          {
            char v27 = (int)*(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v27, a3);
            v10[v20++] = result;
          }
          while (v12 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            char v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (_WORD *)((char *)v10 + a2[2]);
      uint64_t v21 = a2[5];
      v9 += v21;
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B716C(char *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7180(unsigned char *a1, float a2, float a3)
{
  LOBYTE(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7194(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(__int16 *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (__int16 *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_WORD *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v20 = 0;
          do
          {
            __int16 v27 = (int)*(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v27, a3);
            v10[v20++] = result;
          }
          while (v12 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            __int16 v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (_WORD *)((char *)v10 + a2[2]);
      uint64_t v21 = a2[5];
      uint64_t v9 = (__int16 *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B7318(__int16 *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B732C(_WORD *a1, float a2, float a3)
{
  LOWORD(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7340(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_WORD *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v22 = v14;
    uint64_t v23 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v20 = 0;
          do
          {
            int v27 = (int)*(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v27, a3);
            v10[v20++] = result;
          }
          while (v12 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            int v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (_WORD *)((char *)v10 + a2[2]);
      uint64_t v21 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B74C4(int *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B74D8(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(unsigned int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_WORD *)*a2;
    uint64_t v11 = a2[1];
    uint64_t v12 = v11;
    if (v8 >= v11) {
      uint64_t v13 = a2[1];
    }
    else {
      uint64_t v13 = a2[4];
    }
    uint64_t v25 = a2[1];
    unsigned int v26 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v14 = a2[4];
    }
    else {
      uint64_t v14 = a2[1];
    }
    uint64_t v23 = v14;
    uint64_t v24 = v13;
    int v15 = (v11 + v14 - v13);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          uint64_t v21 = 0;
          do
          {
            unsigned int v28 = *(float *)(a2[7] + 4 * v21);
            uint64_t result = v5(&v28, a3);
            v10[v21++] = result;
          }
          while (v12 != v21);
        }
      }
      else
      {
        unint64_t v27 = v6;
        uint64_t v16 = v24;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v24)
        {
          do
          {
            int v19 = *v18++;
            int v30 = v19;
            uint64_t result = v5((unsigned int *)&v30, a3);
            *v17++ = result;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v25;
        uint64_t v20 = v23;
        unint64_t v6 = v27;
        if (v26 < v25)
        {
          do
          {
            unsigned int v29 = *(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v29, a3);
            v10[v20++] = result;
          }
          while (v15 != v20);
        }
      }
      uint64_t v10 = (_WORD *)((char *)v10 + a2[2]);
      uint64_t v22 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v22);
      v7 += v22;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B7660(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_DWORD *)*a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v22 = v13;
    uint64_t v23 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = (v11 + v13 - v12);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v20 = 0;
          do
          {
            int v27 = *(_DWORD *)(a2[7] + v20);
            uint64_t result = v5(&v27, a3);
            v10[v20 / 4] = result;
            v20 += 4;
          }
          while (v14 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            int v28 = *(_DWORD *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (_DWORD *)((char *)v10 + a2[2]);
      uint64_t v21 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B77E0(float *a1, float a2)
{
  return (int)(float)(*a1 * a2);
}

uint64_t sub_20B1B77F0(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(char *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (char *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_DWORD *)*a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v22 = v13;
    uint64_t v23 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = (v11 + v13 - v12);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v20 = 0;
          do
          {
            char v27 = (int)*(float *)(a2[7] + v20);
            uint64_t result = v5(&v27, a3);
            v10[v20 / 4] = result;
            v20 += 4;
          }
          while (v14 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            char v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (_DWORD *)((char *)v10 + a2[2]);
      uint64_t v21 = a2[5];
      v9 += v21;
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B7978(char *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B798C(unsigned char *a1, float a2, float a3)
{
  LOBYTE(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B79A0(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(__int16 *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (__int16 *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_DWORD *)*a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v22 = v13;
    uint64_t v23 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = (v11 + v13 - v12);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v20 = 0;
          do
          {
            __int16 v27 = (int)*(float *)(a2[7] + v20);
            uint64_t result = v5(&v27, a3);
            v10[v20 / 4] = result;
            v20 += 4;
          }
          while (v14 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            __int16 v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (_DWORD *)((char *)v10 + a2[2]);
      uint64_t v21 = a2[5];
      uint64_t v9 = (__int16 *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B7B28(__int16 *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7B3C(_WORD *a1, float a2, float a3)
{
  LOWORD(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7B50(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_DWORD *)*a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v24 = a2[1];
    unsigned int v25 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v22 = v13;
    uint64_t v23 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = (v11 + v13 - v12);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v20 = 0;
          do
          {
            int v27 = (int)*(float *)(a2[7] + v20);
            uint64_t result = v5(&v27, a3);
            v10[v20 / 4] = result;
            v20 += 4;
          }
          while (v14 != v20);
        }
      }
      else
      {
        unint64_t v26 = v6;
        uint64_t v16 = v23;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v23)
        {
          do
          {
            uint64_t result = v5(v18, a3);
            *v17++ = result;
            ++v18;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v24;
        uint64_t v19 = v22;
        unint64_t v6 = v26;
        if (v25 < v24)
        {
          do
          {
            int v28 = (int)*(float *)(a2[7] + 4 * v19);
            uint64_t result = v5(&v28, a3);
            v10[v19++] = result;
          }
          while (v15 != v19);
        }
      }
      uint64_t v10 = (_DWORD *)((char *)v10 + a2[2]);
      uint64_t v21 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v21);
      v7 += v21;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B7CD8(int *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7CEC(uint64_t result, void *a2, float a3)
{
  if (a2[8])
  {
    uint64_t v5 = (uint64_t (*)(unsigned int *, float))result;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v9 = (int *)a2[3];
    uint64_t v8 = a2[4];
    uint64_t v10 = (_DWORD *)*a2;
    uint64_t v11 = a2[1];
    if (v8 >= v11) {
      uint64_t v12 = a2[1];
    }
    else {
      uint64_t v12 = a2[4];
    }
    uint64_t v25 = a2[1];
    unsigned int v26 = a2[4];
    if (v11 >= (unint64_t)v8) {
      uint64_t v13 = a2[4];
    }
    else {
      uint64_t v13 = a2[1];
    }
    uint64_t v23 = v13;
    uint64_t v24 = v12;
    uint64_t v14 = 4 * v11;
    int v15 = (v11 + v13 - v12);
    do
    {
      if (v7 >= a2[6])
      {
        if ((_BYTE)v11)
        {
          unint64_t v21 = 0;
          do
          {
            unsigned int v28 = *(float *)(a2[7] + v21);
            uint64_t result = v5(&v28, a3);
            v10[v21 / 4] = result;
            v21 += 4;
          }
          while (v14 != v21);
        }
      }
      else
      {
        unint64_t v27 = v6;
        uint64_t v16 = v24;
        uint64_t v17 = v10;
        uint64_t v18 = v9;
        if (v24)
        {
          do
          {
            int v19 = *v18++;
            int v30 = v19;
            uint64_t result = v5((unsigned int *)&v30, a3);
            *v17++ = result;
            --v16;
          }
          while (v16);
        }
        LOBYTE(v11) = v25;
        uint64_t v20 = v23;
        unint64_t v6 = v27;
        if (v26 < v25)
        {
          do
          {
            unsigned int v29 = *(float *)(a2[7] + 4 * v20);
            uint64_t result = v5(&v29, a3);
            v10[v20++] = result;
          }
          while (v15 != v20);
        }
      }
      uint64_t v10 = (_DWORD *)((char *)v10 + a2[2]);
      uint64_t v22 = a2[5];
      uint64_t v9 = (int *)((char *)v9 + v22);
      v7 += v22;
      ++v6;
    }
    while (v6 < a2[8]);
  }
  return result;
}

uint64_t sub_20B1B7E78(float *a1, float a2)
{
  return (int)(float)(*a1 * a2);
}

uint64_t sub_20B1B7E88(char *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7E9C(unsigned char *a1, float a2, float a3)
{
  LOBYTE(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7EB0(__int16 *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7EC4(_WORD *a1, float a2, float a3)
{
  LOWORD(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7ED8(int *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7EEC(float *a1, float a2)
{
  return (int)(float)(*a1 * a2);
}

uint64_t sub_20B1B7EFC(char *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7F10(unsigned char *a1, float a2, float a3)
{
  LOBYTE(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7F24(__int16 *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7F38(_WORD *a1, float a2, float a3)
{
  LOWORD(a3) = *a1;
  return (int)(float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7F4C(int *a1, float a2)
{
  return (int)(float)((float)*a1 * a2);
}

uint64_t sub_20B1B7F60(float *a1, float a2)
{
  return (float)(*a1 * a2);
}

uint64_t sub_20B1B7F70(char *a1, float a2)
{
  return (float)((float)*a1 * a2);
}

uint64_t sub_20B1B7F84(unsigned char *a1, float a2, float a3)
{
  LOBYTE(a3) = *a1;
  return (float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7F98(__int16 *a1, float a2)
{
  return (float)((float)*a1 * a2);
}

uint64_t sub_20B1B7FAC(_WORD *a1, float a2, float a3)
{
  LOWORD(a3) = *a1;
  return (float)((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B7FC0(int *a1, float a2)
{
  return (float)((float)*a1 * a2);
}

uint64_t sub_20B1B7FD4(float *a1, float a2)
{
  return sub_20B1AB8C4(*a1 * a2);
}

uint64_t sub_20B1B7FF4(char *a1, float a2)
{
  return sub_20B1AB8C4((float)*a1 * a2);
}

uint64_t sub_20B1B8018(unsigned char *a1, float a2, float a3)
{
  LOBYTE(a3) = *a1;
  return sub_20B1AB8C4((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B803C(__int16 *a1, float a2)
{
  return sub_20B1AB8C4((float)*a1 * a2);
}

uint64_t sub_20B1B8060(_WORD *a1, float a2, float a3)
{
  LOWORD(a3) = *a1;
  return sub_20B1AB8C4((float)LODWORD(a3) * a2);
}

uint64_t sub_20B1B8084(int *a1, float a2)
{
  return sub_20B1AB8C4((float)*a1 * a2);
}

uint64_t sub_20B1B8320(uint64_t a1)
{
  if (a1 == 770) {
    int v1 = 16;
  }
  else {
    int v1 = 8;
  }
  if (a1 == 260) {
    int v2 = 32;
  }
  else {
    int v2 = v1;
  }
  if (a1 == 258) {
    unsigned int v3 = 16;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a1 == 4) {
    unsigned int v4 = 32;
  }
  else {
    unsigned int v4 = 8;
  }
  if (a1 == 3) {
    unsigned int v4 = 24;
  }
  if (a1 == 2) {
    unsigned int v4 = 16;
  }
  if (a1 <= 257) {
    return v4;
  }
  else {
    return v3;
  }
}

void sub_20B1B851C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1B85B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1B8720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1B8B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_20B1B8BF4(void *a1, void *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  id v3 = a1;
  id v4 = a2;
  memset(&__str, 0, sizeof(__str));
  id v5 = v3;
  unint64_t v7 = (char *)objc_msgSend_cStringUsingEncoding_(v5, v6, 4);
  sub_20B07F8E0(&__str, v7);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = (unsigned __int8 *)p_str + size;
  if (size)
  {
    uint64_t v11 = p_str;
    uint64_t v12 = (std::string *)((char *)p_str + size);
    do
    {
      uint64_t v13 = v11;
      uint64_t v14 = (unsigned __int8 *)v11;
      while (1)
      {
        int v15 = *v14++;
        if (v15 == 46) {
          break;
        }
        uint64_t v13 = (std::string *)v14;
        if (v14 == v10)
        {
          uint64_t v13 = v12;
          goto LABEL_16;
        }
      }
      uint64_t v11 = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
      uint64_t v12 = v13;
    }
    while (v14 != v10);
  }
  else
  {
    uint64_t v13 = p_str;
  }
LABEL_16:
  std::string::size_type v16 = (char *)v13 - (char *)p_str;
  if (v13 == (std::string *)v10) {
    std::string::size_type v17 = -1;
  }
  else {
    std::string::size_type v17 = v16;
  }
  memset(&v63, 0, sizeof(v63));
  std::string::basic_string(&v63, &__str, v17 + 1, size, (std::allocator<char> *)&v62);
  std::string::basic_string(&v62, &__str, 0, v17, (std::allocator<char> *)&v65);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::string __str = v62;
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    objc_msgSend_stringWithCString_encoding_(NSString, v18, (uint64_t)&__str, 4);
  }
  else {
  uint64_t v20 = objc_msgSend_stringWithCString_encoding_(NSString, v18, (uint64_t)v62.__r_.__value_.__l.__data_, 4);
  }
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    objc_msgSend_stringWithCString_encoding_(NSString, v19, (uint64_t)&v63, 4);
  }
  else {
  unint64_t v21 = objc_msgSend_stringWithCString_encoding_(NSString, v19, (uint64_t)v63.__r_.__value_.__l.__data_, 4);
  }
  if (objc_msgSend_characterAtIndex_(v5, v22, 0) == 47)
  {
    id v24 = objc_alloc(NSURL);
    unsigned int v26 = objc_msgSend_stringWithFormat_(NSString, v25, @"file://%@", v5);
    unsigned int v28 = objc_msgSend_initWithString_(v24, v27, (uint64_t)v26);

    if (v28) {
      goto LABEL_47;
    }
    goto LABEL_35;
  }
  if (objc_msgSend_rangeOfString_(v5, v23, @":") != 0x7FFFFFFFFFFFFFFFLL)
  {
    id v32 = objc_alloc(NSURL);
    uint64_t v31 = objc_msgSend_initWithString_(v32, v33, (uint64_t)v5);
LABEL_34:
    unsigned int v28 = (void *)v31;
    if (v31) {
      goto LABEL_47;
    }
    goto LABEL_35;
  }
  if (v4)
  {
    uint64_t v31 = objc_msgSend_URLForResource_withExtension_(v4, v29, (uint64_t)v20, v21);
    goto LABEL_34;
  }
LABEL_35:
  unsigned int v34 = objc_msgSend_mainBundle(MEMORY[0x263F086E0], v29, v30);
  unsigned int v28 = objc_msgSend_URLForResource_withExtension_(v34, v35, (uint64_t)v20, v21);

  if (!v28)
  {
    uint64_t v38 = objc_msgSend_defaultManager(MEMORY[0x263F08850], v36, v37);
    uint64_t v41 = objc_msgSend_mainBundle(MEMORY[0x263F086E0], v39, v40);
    uint64_t v44 = objc_msgSend_resourcePath(v41, v42, v43);
    uint64_t v46 = objc_msgSend_contentsOfDirectoryAtPath_error_(v38, v45, (uint64_t)v44, 0);

    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    id v47 = v46;
    unsigned int v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v48, (uint64_t)&v58, v66, 16);
    if (v28)
    {
      uint64_t v57 = v38;
      uint64_t v50 = *(void *)v59;
      while (2)
      {
        for (uint64_t i = 0; i != v28; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v59 != v50) {
            objc_enumerationMutation(v47);
          }
          uint64_t v52 = *(void **)(*((void *)&v58 + 1) + 8 * i);
          if (objc_msgSend_hasPrefix_(v52, v49, (uint64_t)v5))
          {
            uint64_t v38 = v57;
            uint64_t v54 = objc_msgSend_mainBundle(MEMORY[0x263F086E0], v49, v53);
            unsigned int v28 = objc_msgSend_URLForResource_withExtension_(v54, v55, (uint64_t)v52, 0);

            goto LABEL_46;
          }
        }
        unsigned int v28 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v49, (uint64_t)&v58, v66, 16);
        if (v28) {
          continue;
        }
        break;
      }
      uint64_t v38 = v57;
    }
LABEL_46:
  }
LABEL_47:

  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }

  return v28;
}

void sub_20B1B900C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

void sub_20B1B9278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1B9474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1B9690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1B9924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B1B9C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B1B9EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1B9FAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BA308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BA3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_20B1BA648(void *a1, size_t a2, double a3)
{
  int v18 = HIDWORD(a3);
  id v4 = a1;
  id v5 = v4;
  if (v4)
  {
    id v6 = v4;
    uint64_t v9 = (char *)objc_msgSend_bytes(v6, v7, v8);
    objc_msgSend_dataWithLength_(MEMORY[0x263EFF990], v10, v18 * a2);
    id v11 = objc_claimAutoreleasedReturnValue();
    uint64_t v14 = objc_msgSend_mutableBytes(v11, v12, v13);
    uint64_t v15 = v18;
    if (v18 >= 1)
    {
      uint64_t v16 = v14;
      do
      {
        memcpy((void *)(v16 + (int)--v15 * a2), v9, a2);
        v9 += a2;
      }
      while (v15);
    }
  }
  else
  {
    id v11 = 0;
  }

  return v11;
}

void sub_20B1BA720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BA8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B1BA978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BAACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BABB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BADAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_20B1BADCC(float32x2_t *a1, float32x4_t a2)
{
  float32x4_t v2 = vabsq_f32(a2);
  if (v2.f32[0] < v2.f32[1] || v2.f32[0] < v2.f32[2])
  {
    v2.i32[0] = a2.i32[2];
    float v4 = -a2.f32[0];
    if (a2.f32[2] > 0.0)
    {
      LODWORD(v5) = 5;
    }
    else
    {
      float v4 = a2.f32[0];
      LODWORD(v5) = 4;
    }
    double v6 = COERCE_DOUBLE(__PAIR64__(a2.u32[1], LODWORD(v4)));
    if (a2.f32[1] > 0.0)
    {
      unsigned int v7 = 2;
    }
    else
    {
      v2.f32[0] = -a2.f32[2];
      unsigned int v7 = 3;
    }
    a2.i32[1] = v2.i32[0];
    if (v2.f32[1] >= v2.f32[2]) {
      uint64_t v5 = v7;
    }
    else {
      uint64_t v5 = v5;
    }
    if (v2.f32[1] >= v2.f32[2]) {
      v2.f32[0] = v2.f32[1];
    }
    else {
      v2.f32[0] = v2.f32[2];
    }
    if (v2.f32[1] < v2.f32[2]) {
      *(double *)a2.i64 = v6;
    }
    goto LABEL_26;
  }
  if (v2.f32[0] != 0.0)
  {
    float v9 = a2.f32[2];
    uint64_t v5 = a2.f32[0] <= 0.0;
    if (a2.f32[0] <= 0.0) {
      float v9 = -a2.f32[2];
    }
    a2.f32[0] = v9;
LABEL_26:
    float32x2_t v8 = vadd_f32(vdiv_f32(vmul_f32(*(float32x2_t *)a2.f32, (float32x2_t)0x3F0000003F000000), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.f32, 0)), (float32x2_t)0x3F0000003F000000);
    goto LABEL_27;
  }
  uint64_t v5 = 0;
  float32x2_t v8 = 0;
LABEL_27:
  *a1 = v8;
  return v5;
}

float64_t directionForPixel(int a1, float a2, double a3, float64x2_t a4)
{
  _Q0 = (float64x2_t)xmmword_20B1E74C0;
  if (SLODWORD(a2) >= 1)
  {
    double v6 = *(float *)a4.f64;
    double v7 = (double)SLODWORD(a3) + v6;
    double v8 = 2.0 / (double)SLODWORD(a2);
    _Q0.f64[0] = v8 * v7 + -1.0;
    double v9 = (double)SHIDWORD(a3) - v6;
    a4.f64[0] = v8 * v9 + -1.0;
    switch(a1)
    {
      case 0:
        __asm { FMOV            V1.2D, #1.0; jumptable 000000020B1BAEF8 case 0 }
        goto LABEL_5;
      case 1:
        _Q0.f64[0] = -_Q0.f64[0];
        __asm { FMOV            V1.2D, #-1.0 }
LABEL_5:
        _Q1.f64[1] = a4.f64[0];
        goto LABEL_10;
      case 2:
        __asm { FMOV            V1.2D, #1.0; jumptable 000000020B1BAEF8 case 2 }
        _Q1.f64[0] = v8 * v7 + -1.0;
        _Q0 = a4;
        goto LABEL_10;
      case 3:
        __asm { FMOV            V1.2D, #-1.0; jumptable 000000020B1BAEF8 case 3 }
        _Q1.f64[0] = v8 * v7 + -1.0;
        _Q0.f64[0] = -a4.f64[0];
        goto LABEL_10;
      case 4:
        _Q1.f64[0] = -_Q0.f64[0];
        _Q1.f64[1] = a4.f64[0];
        __asm { FMOV            V0.2D, #1.0 }
        goto LABEL_10;
      case 5:
        _Q0.f64[1] = v8 * v9 + -1.0;
        _Q1 = _Q0;
        __asm { FMOV            V0.2D, #-1.0 }
LABEL_10:
        *(float32x2_t *)&_Q0.f64[0] = vcvt_f32_f64(vmulq_n_f64(_Q1, 1.0 / sqrt(vaddvq_f64(vmulq_f64(_Q1, _Q1)) + vmulq_f64(_Q0, _Q0).f64[0])));
        break;
      default:
        return _Q0.f64[0];
    }
  }
  return _Q0.f64[0];
}

float32x2_t equirectangularCoordinateForDirection(__n128 a1)
{
  float v2 = a1.n128_f32[1];
  float v3 = atan2f(a1.n128_f32[2], a1.n128_f32[0]);
  return vmul_f32((float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(acosf(v2)), LODWORD(v3)), (float32x2_t)0x3EA2F9833E22F983);
}

double sub_20B1BAFEC(double *a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  switch(objc_msgSend_channelCount(a1, a2, a3))
  {
    case 1:
      double result = sub_20B1BB110(a1, a2, v6, a4);
      break;
    case 2:
      double result = sub_20B1BB214(a1, a2, v6, a4);
      break;
    case 3:
      double result = sub_20B1BB318(a1, a2, v6, a4);
      break;
    case 4:
      double result = sub_20B1BB41C(a1, a2, v6, a4);
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double sub_20B1BB110(void *a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  if (!a2) {
    return 0.0;
  }
  if (objc_msgSend_isCube(a1, a2, a3))
  {
    v6.i64[0] = a1[35];
    v6.i32[1] /= 6;
    float32x4_t v19 = v6;
    uint64_t v7 = a1[36] * v6.i32[1];
    float32x2_t v21 = 0;
    uint64_t v8 = (uint64_t)&a2[v7 * sub_20B1BADCC(&v21, a4)];
    *(float32x2_t *)v14.f32 = v21;
    float v15 = v21.f32[1];
    float32x4_t v16 = v19;
  }
  else
  {
    float v18 = atan2f(a4.f32[2], a4.f32[0]);
    v16.f32[0] = acosf(a4.f32[1]);
    v14.f32[0] = v18 * 0.15915;
    float v15 = v16.f32[0] * 0.31831;
    v16.i64[0] = a1[35];
    uint64_t v8 = (uint64_t)a2;
  }

  return sub_20B1BF21C(v8, v16, v14, v15, v9, v10, v11, v12, v13);
}

double sub_20B1BB214(double *a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  if (!a2) {
    return 0.0;
  }
  if (objc_msgSend_isCube(a1, a2, a3))
  {
    double v6 = a1[35];
    SHIDWORD(v6) /= 6;
    double v20 = v6;
    uint64_t v7 = *((void *)a1 + 36) * SHIDWORD(v6);
    float32x2_t v22 = 0;
    uint64_t v8 = (uint64_t)&a2[v7 * sub_20B1BADCC(&v22, a4)];
    float v15 = v22.f32[1];
    float v14 = v22.f32[0];
    double v16 = v20;
  }
  else
  {
    float v18 = atan2f(a4.f32[2], a4.f32[0]);
    float v19 = acosf(a4.f32[1]);
    float v14 = v18 * 0.15915;
    float v15 = v19 * 0.31831;
    double v16 = a1[35];
    uint64_t v8 = (uint64_t)a2;
  }

  return sub_20B1BF374(v8, v16, v14, v15, v9, v10, v11, v12, v13);
}

double sub_20B1BB318(double *a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  if (!a2) {
    return 0.0;
  }
  if (objc_msgSend_isCube(a1, a2, a3))
  {
    double v6 = a1[35];
    SHIDWORD(v6) /= 6;
    double v20 = v6;
    uint64_t v7 = *((void *)a1 + 36) * SHIDWORD(v6);
    float32x2_t v22 = 0;
    uint64_t v8 = (uint64_t)&a2[v7 * sub_20B1BADCC(&v22, a4)];
    float v15 = v22.f32[1];
    float v14 = v22.f32[0];
    double v16 = v20;
  }
  else
  {
    float v18 = atan2f(a4.f32[2], a4.f32[0]);
    float v19 = acosf(a4.f32[1]);
    float v14 = v18 * 0.15915;
    float v15 = v19 * 0.31831;
    double v16 = a1[35];
    uint64_t v8 = (uint64_t)a2;
  }

  return sub_20B1BF4CC(v8, v16, v14, v15, v9, v10, v11, v12, v13);
}

double sub_20B1BB41C(double *a1, const char *a2, uint64_t a3, float32x4_t a4)
{
  if (!a2) {
    return 0.0;
  }
  if (objc_msgSend_isCube(a1, a2, a3))
  {
    double v6 = a1[35];
    SHIDWORD(v6) /= 6;
    double v20 = v6;
    uint64_t v7 = *((void *)a1 + 36) * SHIDWORD(v6);
    float32x2_t v22 = 0;
    uint64_t v8 = (uint64_t)&a2[v7 * sub_20B1BADCC(&v22, a4)];
    float v15 = v22.f32[1];
    float v14 = v22.f32[0];
    double v16 = v20;
  }
  else
  {
    float v18 = atan2f(a4.f32[2], a4.f32[0]);
    float v19 = acosf(a4.f32[1]);
    float v14 = v18 * 0.15915;
    float v15 = v19 * 0.31831;
    double v16 = a1[35];
    uint64_t v8 = (uint64_t)a2;
  }

  return sub_20B1BF620(v8, v16, v14, v15, v9, v10, v11, v12, v13);
}

double sub_20B1BB520(int32x2_t *a1, float32x4_t a2)
{
  switch(a1[32].i32[0])
  {
    case 1:
      double result = sub_20B1BB588(a1, 0, a2);
      break;
    case 2:
      double result = sub_20B1BB6A0(a1, 0, a2);
      break;
    case 3:
      double result = sub_20B1BB7B8(a1, 0, a2);
      break;
    case 4:
      double result = sub_20B1BB8D0(a1, 0, a2);
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double sub_20B1BB588(int32x2_t *a1, signed int a2, float32x4_t a3)
{
  uint64_t v3 = (uint64_t)a1[a2];
  if (!v3) {
    return 0.0;
  }
  float32x4_t v4 = a3;
  *(int32x2_t *)a3.f32 = vshl_s32(a1[33], vneg_s32(vdup_n_s32(a2)));
  if (a1[35].i8[0])
  {
    a3.i32[1] /= 6;
    float32x4_t v18 = a3;
    uint64_t v5 = (*(void *)&a1[34] >> a2) * a3.i32[1];
    float32x2_t v19 = 0;
    uint64_t v6 = v3 + v5 * sub_20B1BADCC(&v19, v4);
    *(float32x2_t *)v12.f32 = v19;
    float v13 = v19.f32[1];
  }
  else
  {
    float v17 = v4.f32[1];
    float32x4_t v18 = a3;
    float v15 = atan2f(v4.f32[2], v4.f32[0]);
    float v16 = acosf(v17);
    v12.f32[0] = v15 * 0.15915;
    float v13 = v16 * 0.31831;
    uint64_t v6 = v3;
  }

  return sub_20B1BF21C(v6, v18, v12, v13, v7, v8, v9, v10, v11);
}

double sub_20B1BB6A0(int32x2_t *a1, signed int a2, float32x4_t a3)
{
  uint64_t v3 = (uint64_t)a1[a2];
  if (!v3) {
    return 0.0;
  }
  int32x2_t v5 = vshl_s32(a1[33], vneg_s32(vdup_n_s32(a2)));
  if (a1[35].i8[0])
  {
    v5.i32[1] /= 6;
    double v19 = *(double *)&v5;
    uint64_t v6 = (*(void *)&a1[34] >> a2) * v5.i32[1];
    float32x2_t v20 = 0;
    uint64_t v7 = v3 + v6 * sub_20B1BADCC(&v20, a3);
    float v14 = v20.f32[1];
    float v13 = v20.f32[0];
  }
  else
  {
    float v18 = a3.f32[1];
    double v19 = *(double *)&v5;
    float v16 = atan2f(a3.f32[2], a3.f32[0]);
    float v17 = acosf(v18);
    float v13 = v16 * 0.15915;
    float v14 = v17 * 0.31831;
    uint64_t v7 = v3;
  }

  return sub_20B1BF374(v7, v19, v13, v14, v8, v9, v10, v11, v12);
}

double sub_20B1BB7B8(int32x2_t *a1, signed int a2, float32x4_t a3)
{
  uint64_t v3 = (uint64_t)a1[a2];
  if (!v3) {
    return 0.0;
  }
  int32x2_t v5 = vshl_s32(a1[33], vneg_s32(vdup_n_s32(a2)));
  if (a1[35].i8[0])
  {
    v5.i32[1] /= 6;
    double v19 = *(double *)&v5;
    uint64_t v6 = (*(void *)&a1[34] >> a2) * v5.i32[1];
    float32x2_t v20 = 0;
    uint64_t v7 = v3 + v6 * sub_20B1BADCC(&v20, a3);
    float v14 = v20.f32[1];
    float v13 = v20.f32[0];
  }
  else
  {
    float v18 = a3.f32[1];
    double v19 = *(double *)&v5;
    float v16 = atan2f(a3.f32[2], a3.f32[0]);
    float v17 = acosf(v18);
    float v13 = v16 * 0.15915;
    float v14 = v17 * 0.31831;
    uint64_t v7 = v3;
  }

  return sub_20B1BF4CC(v7, v19, v13, v14, v8, v9, v10, v11, v12);
}

double sub_20B1BB8D0(int32x2_t *a1, signed int a2, float32x4_t a3)
{
  uint64_t v3 = (uint64_t)a1[a2];
  if (!v3) {
    return 0.0;
  }
  int32x2_t v5 = vshl_s32(a1[33], vneg_s32(vdup_n_s32(a2)));
  if (a1[35].i8[0])
  {
    v5.i32[1] /= 6;
    double v19 = *(double *)&v5;
    uint64_t v6 = (*(void *)&a1[34] >> a2) * v5.i32[1];
    float32x2_t v20 = 0;
    uint64_t v7 = v3 + v6 * sub_20B1BADCC(&v20, a3);
    float v14 = v20.f32[1];
    float v13 = v20.f32[0];
  }
  else
  {
    float v18 = a3.f32[1];
    double v19 = *(double *)&v5;
    float v16 = atan2f(a3.f32[2], a3.f32[0]);
    float v17 = acosf(v18);
    float v13 = v16 * 0.15915;
    float v14 = v17 * 0.31831;
    uint64_t v7 = v3;
  }

  return sub_20B1BF620(v7, v19, v13, v14, v8, v9, v10, v11, v12);
}

double sub_20B1BB9E8(int32x2_t *a1, float32x4_t a2, float a3)
{
  int v4 = (int)a3;
  float v13 = a3 - truncf(a3);
  switch(a1[32].i32[0])
  {
    case 1:
      *(double *)v5.i64 = sub_20B1BB588(a1, (int)a3, a2);
      float32x4_t v12 = v5;
      *(double *)v6.i64 = sub_20B1BB588(a1, v4 + 1, a2);
      goto LABEL_7;
    case 2:
      *(double *)v8.i64 = sub_20B1BB6A0(a1, (int)a3, a2);
      float32x4_t v12 = v8;
      *(double *)v6.i64 = sub_20B1BB6A0(a1, v4 + 1, a2);
      goto LABEL_7;
    case 3:
      *(double *)v9.i64 = sub_20B1BB7B8(a1, (int)a3, a2);
      float32x4_t v12 = v9;
      *(double *)v6.i64 = sub_20B1BB7B8(a1, v4 + 1, a2);
      goto LABEL_7;
    case 4:
      *(double *)v10.i64 = sub_20B1BB8D0(a1, (int)a3, a2);
      float32x4_t v12 = v10;
      *(double *)v6.i64 = sub_20B1BB8D0(a1, v4 + 1, a2);
LABEL_7:
      *(void *)&double result = vmlaq_n_f32(v12, vsubq_f32(v6, v12), v13).u64[0];
      break;
    default:
      double result = 0.0;
      break;
  }
  return result;
}

double sub_20B1BBB1C(double a1, float a2, int32x4_t a3)
{
  float v3 = (float)(a2 * a2) * (float)(a2 * a2);
  float v4 = *(float *)&a1 * 6.28318531;
  float v5 = sqrt((float)(1.0 - *((float *)&a1 + 1)) / ((v3 + -1.0) * *((float *)&a1 + 1) + 1.0));
  float v21 = v5;
  float v6 = sqrtf(1.0 - (float)(v5 * v5));
  __float2 v7 = __sincosf_stret(v4);
  v8.f64[0] = fabsf(*(float *)&a3.i32[2]);
  v9.f64[0] = 0.999;
  int32x4_t v10 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgtq_f64(v9, v8).i64[0], 0), (int8x16_t)xmmword_20B1E74A0, (int8x16_t)xmmword_20B1E6130);
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a3, a3), (int8x16_t)a3, 0xCuLL);
  int32x4_t v12 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)v10, v11)), (float32x4_t)a3, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL));
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL);
  int32x4_t v14 = (int32x4_t)vmulq_f32((float32x4_t)v12, (float32x4_t)v12);
  v14.i32[0] = vadd_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), *(float32x2_t *)v14.i8), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1)).u32[0];
  float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
  float32x2_t v16 = vmul_f32(vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)), v15);
  int32x4_t v17 = (int32x4_t)vmulq_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
  int32x4_t v18 = (int32x4_t)vmlaq_f32(vnegq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v17, v17), (int8x16_t)v17, 0xCuLL), (float32x4_t)a3)), v11, (float32x4_t)v17);
  *(void *)&double result = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)a3, v21), (float32x4_t)v17, v6 * v7.__cosval), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v18, v18), (int8x16_t)v18, 0xCuLL), v6 * v7.__sinval).u64[0];
  return result;
}

void sub_20B1BBC70(void *a1, const char *a2, int a3, float a4, double a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v38 = a1;
  if (a3 == 5) {
    int v13 = 4;
  }
  else {
    int v13 = a3;
  }
  if (a3 == 4) {
    int v14 = 5;
  }
  else {
    int v14 = v13;
  }
  if (SHIDWORD(a5) >= 1)
  {
    uint64_t v15 = 0;
    if (4 * a7 <= 1) {
      int v16 = 1;
    }
    else {
      int v16 = 4 * a7;
    }
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v35 = _Q0;
    do
    {
      uint64_t v22 = 0;
      do
      {
        v12.i32[0] = 0.5;
        *(double *)v23.i64 = directionForPixel(v14, *(float *)&a5, COERCE_DOUBLE(__PAIR64__(v15, v22)), (float64x2_t)v12);
        int32x4_t v42 = v23;
        if (a7 < 1)
        {
          v39.i64[0] = 0;
          float32x4_t v40 = 0u;
        }
        else
        {
          signed int v24 = 0;
          v23.i64[0] = 0;
          int32x4_t v39 = v23;
          float32x4_t v40 = 0u;
          do
          {
            *(float *)&double v25 = (float)v24 * (float)(1.0 / (float)(4 * a7));
            *((float *)&v25 + 1) = (float)__rbit32(v24) * 2.3283e-10;
            *(double *)v27.i64 = sub_20B1BBB1C(v25, a4, v42);
            float32x4_t v28 = v27;
            int32x4_t v29 = (int32x4_t)vmulq_f32(v27, (float32x4_t)v42);
            *(float *)v29.i32 = vaddq_f32(vaddq_f32((float32x4_t)v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1)), (float32x4_t)vdupq_laneq_s32(v29, 2)).f32[0];
            float32x4_t v30 = vmlaq_n_f32(vnegq_f32((float32x4_t)v42), v28, *(float *)v29.i32 + *(float *)v29.i32);
            int32x4_t v31 = (int32x4_t)vmulq_f32(v30, (float32x4_t)v42);
            float32x4_t v12 = vaddq_f32((float32x4_t)v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.i8, 1));
            float32x4_t v32 = vaddq_f32(v12, (float32x4_t)vdupq_laneq_s32(v31, 2));
            v32.f32[0] = fmaxf(fminf(v32.f32[0], 1.0), 0.0);
            float32x4_t v41 = v32;
            if (v32.f32[0] >= 0.00000011921)
            {
              *(double *)v33.i64 = sub_20B1BAFEC(v38, a2, v26, v30);
              int32x4_t v34 = v39;
              float32x4_t v12 = v41;
              *(float *)v34.i32 = v41.f32[0] + *(float *)v39.i32;
              int32x4_t v39 = v34;
              float32x4_t v40 = vmlaq_n_f32(v40, v33, v41.f32[0]);
            }
            ++v24;
          }
          while (v16 != v24);
        }
        *(float32x4_t *)(a8 + 16 * (v22 + (HIDWORD(a5) + ~v15) * LODWORD(a5))) = vmulq_f32(v40, vdivq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.i8, 0)));
        ++v22;
      }
      while (v22 != HIDWORD(a5));
      ++v15;
    }
    while (v15 != HIDWORD(a5));
  }
}

void sub_20B1BBEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _Unwind_Resume(a1);
}

void sub_20B1BC1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Unwind_Resume(a1);
}

void sub_20B1BC214(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_20B1BF108((void **)a1, a2 - v2);
  }
}

void sub_20B1BC488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20B1BC890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BCE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BCFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BD0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BD220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BD2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BD4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B1BD588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLCheckerboardTexture;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B1BD924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BDA78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BDB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BDC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BE07C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BE3B4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  MEMORY[0x210532650](v4, 0x10A0C401EE0EB22);

  _Unwind_Resume(a1);
}

void sub_20B1BE488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)MDLSkyCubeTexture;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20B1BE8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20B1BEC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BEC98(int a1, int a2, unsigned int *a3, float a4, float a5)
{
  int32x4_t v10 = (float *)malloc_type_malloc(4 * a2 * a1, 0x100004052888210uLL);
  if (v10)
  {
    float v12 = 5.0;
    if (a4 <= 1.0) {
      float v12 = a4 * 5.0;
    }
    if (a4 < 0.0) {
      float v12 = 0.0;
    }
    unint64_t v13 = (unint64_t)v12;
    if ((unint64_t)v12 >= 4) {
      unint64_t v13 = 4;
    }
    int v14 = a2 - 1;
    if (a2 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = dword_20B1E9FAC[325 * v13];
      int32x4_t v17 = v10;
      int32x4_t v18 = a3;
      do
      {
        uint64_t v19 = a1;
        float32x2_t v20 = v17;
        int v21 = a1 - 1;
        if (a1 >= 1)
        {
          do
          {
            unsigned int v23 = *v18++;
            unsigned int v22 = v23;
            float v24 = 0.0;
            int v25 = HIBYTE(v23);
            if (HIBYTE(v23))
            {
              float v26 = 255.0 / (double)v25;
              float32x2_t v27 = vmul_f32(vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v22), (uint32x2_t)0xFFFFFFF0FFFFFFF8), (int8x8_t)0xFF000000FFLL)), (float32x2_t)0x3DE147AE3F170A3DLL);
              float v28 = v26
                  * (float)(0.0039216
                          * (float)((float)(v27.f32[0] + (float)((float)v22 * 0.3)) + v27.f32[1]));
              if (v28 <= 1.0) {
                float v29 = v28;
              }
              else {
                float v29 = 1.0;
              }
              if (v28 >= 0.0) {
                float v24 = v29;
              }
              else {
                float v24 = 0.0;
              }
            }
            *v20++ = v24;
            --v19;
          }
          while (v19);
        }
        ++v15;
        v17 += a1;
      }
      while (v15 != a2);
      int v30 = 0;
      float v31 = -a5;
      float32x2_t v32 = (float32x2_t)vdup_n_s32(0x42FF0000u);
      do
      {
        if (a1 >= 1)
        {
          int v33 = 0;
          do
          {
            if (v16)
            {
              uint64_t v34 = 0;
              float v35 = 0.0;
              unint64_t v36 = (float *)&dword_20B1E9FAC[325 * v13 + 1];
              float v37 = 0.0;
              do
              {
                int v38 = v33 + *(char *)v36;
                int v39 = v30 + *((char *)v36 + 1);
                if (v21 >= v38) {
                  int v40 = v33 + *(char *)v36;
                }
                else {
                  int v40 = a1 - 1;
                }
                if (v38 >= 0) {
                  int v41 = v40;
                }
                else {
                  int v41 = 0;
                }
                if (v14 >= v39) {
                  int v42 = v30 + *((char *)v36 + 1);
                }
                else {
                  int v42 = a2 - 1;
                }
                if (v39 >= 0) {
                  int v43 = v42;
                }
                else {
                  int v43 = 0;
                }
                float v44 = v10[v41 + v43 * a1];
                int v45 = (float *)&dword_20B1E9FAC[325 * v13 + 2 * (v16 + v34)];
                int v46 = v33 + *((char *)v45 + 4);
                int v47 = v30 + *((char *)v45 + 5);
                if (v21 >= v46) {
                  int v48 = v33 + *((char *)v45 + 4);
                }
                else {
                  int v48 = a1 - 1;
                }
                if (v46 >= 0) {
                  int v49 = v48;
                }
                else {
                  int v49 = 0;
                }
                if (v14 >= v47) {
                  int v50 = v30 + *((char *)v45 + 5);
                }
                else {
                  int v50 = a2 - 1;
                }
                if (v47 >= 0) {
                  int v51 = v50;
                }
                else {
                  int v51 = 0;
                }
                float v37 = v37 + (float)(v36[1] * v44);
                float v35 = v35 + (float)(v45[2] * v10[v49 + v51 * a1]);
                ++v34;
                v36 += 2;
              }
              while (v16 != v34);
            }
            else
            {
              float v37 = 0.0;
              float v35 = 0.0;
            }
            unsigned int v52 = *a3 & 0xFF000000;
            float v53 = v37 * v31;
            float v54 = v35 * v31;
            float v55 = sqrtf((float)((float)(v53 * v53) + 1.0) + (float)(v54 * v54));
            if (v55 > 0.0001)
            {
              float v56 = (float)((float)HIBYTE(*a3) * 0.0039216) / v55;
              v11.i32[0] = 1124007936;
              unsigned int v57 = (float)((float)((float)(v53 * 127.5) * v56) + 127.5);
              float32x2_t v58 = (float32x2_t)vdup_lane_s32(v11, 0);
              v58.f32[0] = v54 * 127.5;
              uint32x2_t v59 = vshl_u32(vcvt_u32_f32(vmla_n_f32(v32, v58, v56)), (uint32x2_t)0x1000000008);
              v52 |= v59.i32[0] | v57 | v59.i32[1];
            }
            *a3++ = v52;
            ++v33;
          }
          while (v33 != a1);
        }
        ++v30;
      }
      while (v30 != a2);
    }
    free(v10);
  }
}

void sub_20B1BF0DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20B1BF108(void **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  __float2 v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_20B05D0BC();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_20B077E90(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    int32x4_t v18 = (char *)*a1;
    int32x4_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      int32x4_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

double sub_20B1BF21C(uint64_t a1, float32x4_t a2, float32x4_t a3, float a4, uint8x8_t a5, int8x16_t a6, float32x4_t a7, uint8x8_t a8, uint8x8_t a9)
{
  float v10 = (float)((float)a2.i32[0] * a3.f32[0]) + 0.5;
  float v11 = (float)((float)(1.0 - a4) * (float)a2.i32[1]) + -0.5;
  int v12 = (int)v10;
  int v13 = (int)v11;
  a3.f32[0] = vabds_f32(v10, truncf(v10));
  float v14 = vabds_f32(v11, truncf(v11));
  int v15 = v12 & ~(v12 >> 31);
  if (a2.i32[0] - 1 < v15) {
    int v15 = a2.i32[0] - 1;
  }
  if (v12 < 0) {
    int v12 = -1;
  }
  if (a2.i32[0] - 1 >= v12 + 1) {
    signed __int32 v16 = v12 + 1;
  }
  else {
    signed __int32 v16 = a2.i32[0] - 1;
  }
  uint64_t v17 = 4 * v16;
  signed __int32 v18 = a2.i32[1] - 1;
  int v19 = v13 & ~(v13 >> 31);
  if (a2.i32[1] - 1 < v19) {
    int v19 = a2.i32[1] - 1;
  }
  signed __int32 v20 = 4 * a2.i32[0] * v19;
  if (v13 < 0) {
    int v13 = -1;
  }
  if (v18 >= v13 + 1) {
    signed __int32 v18 = v13 + 1;
  }
  signed __int32 v21 = 4 * a2.i32[0] * v18;
  a5.i32[0] = *(_DWORD *)(a1 + v20 + 4 * v15);
  a6.i32[0] = 1262485504;
  a7.i32[0] = -884998144;
  a8.i32[0] = *(_DWORD *)(a1 + v17 + v20);
  float32x4_t v22 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5)), a6), a7);
  a9.i32[0] = *(_DWORD *)(a1 + v21 + (uint64_t)(4 * v15));
  float32x4_t v23 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a8)), a6), a7);
  v9.i32[0] = *(_DWORD *)(a1 + v21 + (uint64_t)(int)v17);
  float32x4_t v24 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a9)), a6), a7);
  float32x4_t v25 = (float32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v9));
  float32x4_t v26 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)v25, a6), a7);
  v25.f32[0] = (float)(1.0 - v14) * (float)(1.0 - a3.f32[0]);
  a7.f32[0] = (float)(1.0 - v14) * a3.f32[0];
  a2.f32[0] = v14 * (float)(1.0 - a3.f32[0]);
  a3.f32[0] = v14 * a3.f32[0];
  a2.i64[0] = vmulq_f32((float32x4_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v22, v25), a7, v23), a2, v24), a3, v26).u32[0], (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return *(double *)a2.i64;
}

double sub_20B1BF374(uint64_t a1, double a2, float a3, float a4, uint8x8_t a5, double a6, double a7, uint8x8_t a8, uint8x8_t a9)
{
  float v10 = (float)((float)SLODWORD(a2) * a3) + 0.5;
  float v11 = (float)((float)(1.0 - a4) * (float)SHIDWORD(a2)) + -0.5;
  int v12 = (int)v10;
  int v13 = (int)v11;
  float v14 = vabds_f32(v10, truncf(v10));
  float v15 = vabds_f32(v11, truncf(v11));
  int v16 = v12 & ~(v12 >> 31);
  if (LODWORD(a2) - 1 < v16) {
    int v16 = LODWORD(a2) - 1;
  }
  if (v12 < 0) {
    int v12 = -1;
  }
  if (LODWORD(a2) - 1 >= v12 + 1) {
    int v17 = v12 + 1;
  }
  else {
    int v17 = LODWORD(a2) - 1;
  }
  uint64_t v18 = 4 * v17;
  int v19 = HIDWORD(a2) - 1;
  int v20 = v13 & ~(v13 >> 31);
  if (HIDWORD(a2) - 1 < v20) {
    int v20 = HIDWORD(a2) - 1;
  }
  int v21 = 4 * LODWORD(a2) * v20;
  if (v13 < 0) {
    int v13 = -1;
  }
  if (v19 >= v13 + 1) {
    int v19 = v13 + 1;
  }
  int v22 = 4 * LODWORD(a2) * v19;
  a5.i32[0] = *(_DWORD *)(a1 + v21 + 4 * v16);
  int8x16_t v23 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  float32x4_t v24 = (float32x4_t)vdupq_n_s32(0xCB400000);
  a8.i32[0] = *(_DWORD *)(a1 + v18 + v21);
  a9.i32[0] = *(_DWORD *)(a1 + v22 + (uint64_t)(4 * v16));
  v9.i32[0] = *(_DWORD *)(a1 + v22 + (uint64_t)(int)v18);
  *(void *)&double result = vmulq_f32((float32x4_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5)), v23), v24), (float)(1.0 - v15) * (float)(1.0 - v14)), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a8)), v23), v24), (float)(1.0 - v15) * v14), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a9)),
                                                           v23),
                                            v24),
                                          v15 * (float)(1.0 - v14)),
                                        vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v9)), v23), v24), v15 * v14).u64[0], (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_20B1BF4CC(uint64_t a1, double a2, float a3, float a4, uint8x8_t a5, double a6, double a7, uint8x8_t a8, uint8x8_t a9)
{
  float v10 = (float)((float)SLODWORD(a2) * a3) + 0.5;
  int v11 = (int)v10;
  float v12 = (float)((float)(1.0 - a4) * (float)SHIDWORD(a2)) + -0.5;
  int v13 = (int)v12;
  float v14 = vabds_f32(v10, truncf(v10));
  float v15 = vabds_f32(v12, truncf(v12));
  int v16 = v11 & ~(v11 >> 31);
  if (LODWORD(a2) - 1 < v16) {
    int v16 = LODWORD(a2) - 1;
  }
  if (v11 < 0) {
    int v11 = -1;
  }
  if (LODWORD(a2) - 1 >= v11 + 1) {
    int v17 = v11 + 1;
  }
  else {
    int v17 = LODWORD(a2) - 1;
  }
  uint64_t v18 = 4 * v17;
  int v19 = HIDWORD(a2) - 1;
  int v20 = v13 & ~(v13 >> 31);
  if (HIDWORD(a2) - 1 < v20) {
    int v20 = HIDWORD(a2) - 1;
  }
  int v21 = 4 * LODWORD(a2) * v20;
  if (v13 < 0) {
    int v13 = -1;
  }
  if (v19 >= v13 + 1) {
    int v19 = v13 + 1;
  }
  int v22 = 4 * LODWORD(a2) * v19;
  a5.i32[0] = *(_DWORD *)(a1 + v21 + 4 * v16);
  int8x16_t v23 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  float32x4_t v24 = (float32x4_t)vdupq_n_s32(0xCB400000);
  a8.i32[0] = *(_DWORD *)(a1 + v18 + v21);
  a9.i32[0] = *(_DWORD *)(a1 + v22 + (uint64_t)(4 * v16));
  v9.i32[0] = *(_DWORD *)(a1 + v22 + (uint64_t)(int)v18);
  float32x4_t v25 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5)), v23), v24), (float)(1.0 - v15) * (float)(1.0 - v14)), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a8)), v23), v24), (float)(1.0 - v15) * v14), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a9)), v23), v24), v15 * (float)(1.0 - v14)), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v9)), v23), v24), v15 * v14);
  v25.i32[3] = 0;
  *(void *)&double result = vmulq_f32(v25, (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

double sub_20B1BF620(uint64_t a1, double a2, float a3, float a4, uint8x8_t a5, double a6, double a7, uint8x8_t a8, uint8x8_t a9)
{
  float v10 = (float)((float)SLODWORD(a2) * a3) + 0.5;
  float v11 = (float)((float)(1.0 - a4) * (float)SHIDWORD(a2)) + -0.5;
  int v12 = (int)v10;
  int v13 = (int)v11;
  float v14 = vabds_f32(v10, truncf(v10));
  float v15 = vabds_f32(v11, truncf(v11));
  int v16 = v12 & ~(v12 >> 31);
  if (LODWORD(a2) - 1 < v16) {
    int v16 = LODWORD(a2) - 1;
  }
  if (v12 < 0) {
    int v12 = -1;
  }
  if (LODWORD(a2) - 1 >= v12 + 1) {
    int v17 = v12 + 1;
  }
  else {
    int v17 = LODWORD(a2) - 1;
  }
  uint64_t v18 = 4 * v17;
  int v19 = HIDWORD(a2) - 1;
  int v20 = v13 & ~(v13 >> 31);
  if (HIDWORD(a2) - 1 < v20) {
    int v20 = HIDWORD(a2) - 1;
  }
  int v21 = 4 * LODWORD(a2) * v20;
  if (v13 < 0) {
    int v13 = -1;
  }
  if (v19 >= v13 + 1) {
    int v19 = v13 + 1;
  }
  int v22 = 4 * LODWORD(a2) * v19;
  a5.i32[0] = *(_DWORD *)(a1 + v21 + 4 * v16);
  int8x16_t v23 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  float32x4_t v24 = (float32x4_t)vdupq_n_s32(0xCB400000);
  a8.i32[0] = *(_DWORD *)(a1 + v18 + v21);
  a9.i32[0] = *(_DWORD *)(a1 + v22 + (uint64_t)(4 * v16));
  v9.i32[0] = *(_DWORD *)(a1 + v22 + (uint64_t)(int)v18);
  *(void *)&double result = vmulq_f32(vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a5)), v23), v24), (float)(1.0 - v15) * (float)(1.0 - v14)), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a8)), v23), v24), (float)(1.0 - v15) * v14), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a9)), v23), v24), v15 * (float)(1.0 - v14)), vaddq_f32(
                             (float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v9)), v23),
                             v24),
                           v15 * v14),
                         (float32x4_t)vdupq_n_s32(0x3B808081u)).u64[0];
  return result;
}

void sub_20B1BF770(_DWORD *a1)
{
  unint64_t v2 = objc_alloc_init(MDLCamera);
  uint64_t v3 = NSString;
  unint64_t v5 = *(void *)sub_20B06A3E4(a1) & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    float v6 = (uint64_t *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0)
    {
      objc_msgSend_stringWithCString_encoding_(v3, v4, *v6, 4);
      goto LABEL_6;
    }
  }
  else
  {
    float v6 = (uint64_t *)"";
  }
  objc_msgSend_stringWithCString_encoding_(v3, v4, (uint64_t)v6, 4);
  __float2 v7 = LABEL_6:;
  objc_msgSend_setName_(v2, v8, (uint64_t)v7);

  LODWORD(v9) = 1008981770;
  objc_msgSend_setWorldToMetersConversionScale_(v2, v10, v11, v9);
  v13[6] = 0;
  v13[7] = 0;
  int v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  _OWORD v13[4] = 0;
  v13[5] = MEMORY[0x263F906C0] + 16;
  pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetProjectionAttr(v13, v12);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
}

void sub_20B1BFCD4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v2 - 96);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x210530A20](v2 - 88);

  _Unwind_Resume(a1);
}

void sub_20B1BFDD4(void *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  id v3 = a1;
  if (sub_20B0D26D8(a2))
  {
    v68[1] = 0;
    v68[2] = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v68[0] = MEMORY[0x263F906C0] + 16;
    if (objc_msgSend_projection(v3, v4, v5) == 1)
    {
      unint64_t v8 = atomic_load(MEMORY[0x263F90538]);
      if (!v8) {
        sub_20B06AC70();
      }
      uint64_t v9 = *(void *)(v8 + 760);
      uint64_t v69 = v9;
      uint64_t v70 = (char *)&off_26BF508C8 + 1;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v69 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateProjectionAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
      if ((v67 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_20B06A424((uint64_t)&v66);
      if (v65) {
        sub_20B06A5E0(v65);
      }
      sub_20B06A698((uint64_t)&v69);
    }
    objc_msgSend_sensorVerticalAperture(v3, v6, v7);
    float v11 = v10;
    uint64_t v70 = (char *)&unk_26BF517E3;
    *(float *)&uint64_t v69 = v10;
    pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateVerticalApertureAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    if ((v64 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v63);
    if (v62) {
      sub_20B06A5E0(v62);
    }
    sub_20B06A698((uint64_t)&v69);
    objc_msgSend_sensorAspect(v3, v12, v13);
    uint64_t v70 = (char *)&unk_26BF517E3;
    *(float *)&uint64_t v69 = v14 * v11;
    pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateHorizontalApertureAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v60);
    if (v59) {
      sub_20B06A5E0(v59);
    }
    sub_20B06A698((uint64_t)&v69);
    objc_msgSend_sensorShift(v3, v15, v16);
    uint64_t v70 = (char *)&unk_26BF517E3;
    int v40 = v17;
    LODWORD(v69) = v18;
    pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateHorizontalApertureOffsetAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    if ((v58 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v57);
    if (v56) {
      sub_20B06A5E0(v56);
    }
    sub_20B06A698((uint64_t)&v69);
    uint64_t v70 = (char *)&unk_26BF517E3;
    LODWORD(v69) = v40;
    pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateVerticalApertureOffsetAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v54);
    if (v53) {
      sub_20B06A5E0(v53);
    }
    sub_20B06A698((uint64_t)&v69);
    objc_msgSend_focalLength(v3, v19, v20);
    uint64_t v70 = (char *)&unk_26BF517E3;
    LODWORD(v69) = v21;
    pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateFocalLengthAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v51);
    if (v50) {
      sub_20B06A5E0(v50);
    }
    sub_20B06A698((uint64_t)&v69);
    objc_msgSend_fStop(v3, v22, v23);
    uint64_t v70 = (char *)&unk_26BF517E3;
    LODWORD(v69) = v24;
    pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateFStopAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    if ((v49 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v48);
    if (v47) {
      sub_20B06A5E0(v47);
    }
    sub_20B06A698((uint64_t)&v69);
    objc_msgSend_worldToMetersConversionScale(v3, v25, v26);
    float v28 = v27;
    objc_msgSend_focusDistance(v3, v29, v30);
    float v31 = v28 * 100.0;
    uint64_t v70 = (char *)&unk_26BF517E3;
    *(float *)&uint64_t v69 = v32 * (float)(v28 * 100.0);
    pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateFocusDistanceAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v45);
    if (v44) {
      sub_20B06A5E0(v44);
    }
    sub_20B06A698((uint64_t)&v69);
    objc_msgSend_nearVisibilityDistance(v3, v33, v34);
    float v36 = v35;
    objc_msgSend_farVisibilityDistance(v3, v37, v38);
    uint64_t v70 = (char *)&off_26BF50308 + 3;
    *(float *)&uint64_t v69 = v36 * v31;
    *((float *)&v69 + 1) = v39 * v31;
    pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateClippingRangeAttr((pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v69);
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_20B06A424((uint64_t)&v42);
    if (v41) {
      sub_20B06A5E0(v41);
    }
    sub_20B06A698((uint64_t)&v69);
    MEMORY[0x210530A20](v68);
  }
}

void sub_20B1C02D4(_Unwind_Exception *a1)
{
  MEMORY[0x210530A20](v2 - 96);

  _Unwind_Resume(a1);
}

void sub_20B1C0384(void **a1, uint64_t a2)
{
  id v3 = *a1;
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

void *sub_20B1C03DC(void *result)
{
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_20B1C03F8(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
  if (*a3) {
    operator delete(*a3);
  }
}

uint64_t sub_20B1C0434(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void sub_20B1C0458(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (v5)
  {
    *(void *)(a3 + 56) = v5;
    operator delete(v5);
  }
  float v6 = *a2;
  if (*a2)
  {
    *(void *)(a3 + 32) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a3;
  if (*(void *)a3)
  {
    *(void *)(a3 + 8) = v7;
    operator delete(v7);
  }
}

atomic_uint *sub_20B1C04C4(atomic_uint *result)
{
  if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    return (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t sub_20B1C0510(uint64_t a1)
{
  uint64_t result = sub_20B195838(a1);
  if (v2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x270EE4440](arg);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x270EE4548](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x270EE4600]();
}

void CFBundleGetPackageInfo(CFBundleRef bundle, UInt32 *packageType, UInt32 *packageCreator)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x270EE5148](theString, stringToFind, compareOptions);
  result.length = v4;
  result.locatiouint64_t n = v3;
  return result;
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x270EE5348](anURL);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

CGColorRef CGColorCreateCopy(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x270EE5B58](color);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x270EE5B60](a1, *(void *)&intent, color, options);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5BC8](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x270EE5BD0](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x270EE5BE0](color);
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x270EE5C20](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C60]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D08](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x270EE6750](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F38](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5030](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x270EF5048](isrc);
}

xpc_object_t IOSurfaceCreateXPCObject(IOSurfaceRef aSurface)
{
  return (xpc_object_t)MEMORY[0x270EF4C38](aSurface);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4C50](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x270EF4C58](buffer);
}

IOSurfaceRef IOSurfaceLookupFromXPCObject(xpc_object_t xobj)
{
  return (IOSurfaceRef)MEMORY[0x270EF4E38](xobj);
}

NSZone *NSDefaultMallocZone(void)
{
  return (NSZone *)MEMORY[0x270EF2A70]();
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefiner::RefineUniform()
{
  return MEMORY[0x270FA2F78]();
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefiner::TopologyRefiner()
{
  return MEMORY[0x270FA2F80]();
}

void OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(OpenSubdiv::__aapl__::Far::TopologyRefiner *this)
{
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyDescriptor::TopologyDescriptor(OpenSubdiv::__aapl__::Far::TopologyDescriptor *this)
{
  return MEMORY[0x270FA2F90](this);
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTags()
{
  return MEMORY[0x270FA2F98]();
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::reportInvalidTopology()
{
  return MEMORY[0x270FA2FA0]();
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTopology()
{
  return MEMORY[0x270FA2FA8]();
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::resizeComponentTopology()
{
  return MEMORY[0x270FA2FB0]();
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignFaceVaryingTopology()
{
  return MEMORY[0x270FA2FB8]();
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::__aapl__::Far::TopologyRefiner *a2)
{
  return MEMORY[0x270FA2FC8](this, a2);
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::__aapl__::Far::TopologyRefiner *a2)
{
  return MEMORY[0x270FA2FD0](this, a2);
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment()
{
  return MEMORY[0x270FA2FD8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate()
{
  return MEMORY[0x270FA30B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale()
{
  return MEMORY[0x270FA30D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate()
{
  return MEMORY[0x270FA30E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=()
{
  return MEMORY[0x270FA30F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_End()
{
  return MEMORY[0x270FA3168]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin()
{
  return MEMORY[0x270FA3170]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDescribe()
{
  return MEMORY[0x270FA3178]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x270FA3180](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCone::~UsdGeomCone(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
  return MEMORY[0x270FA3190](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCube::~UsdGeomCube(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA31A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::Define()
{
  return MEMORY[0x270FA31B0]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomMesh::~UsdGeomMesh(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdModelAPI::~UsdModelAPI(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelRoot::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelRoot *this)
{
  return MEMORY[0x270FA31C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOut()
{
  return MEMORY[0x270FA31E0]();
}

{
  return MEMORY[0x270FA31E8]();
}

{
  return MEMORY[0x270FA31F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath()
{
  return MEMORY[0x270FA3208]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(pxrInternal__aapl__pxrReserved__::SdfAssetPath *this)
{
  return MEMORY[0x270FA3218](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, const char *a2)
{
  return MEMORY[0x270FA3250](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomScope::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
  return MEMORY[0x270FA3268](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomScope::Define()
{
  return MEMORY[0x270FA3270]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomScope::~UsdGeomScope(pxrInternal__aapl__pxrReserved__::UsdGeomScope *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXform::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
  return MEMORY[0x270FA3280](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXform::Define()
{
  return MEMORY[0x270FA3288]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXform::~UsdGeomXform(pxrInternal__aapl__pxrReserved__::UsdGeomXform *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  return MEMORY[0x270FA32A0](this);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA32F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA3348](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCamera::~UsdGeomCamera(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCurves::ComputeExtent()
{
  return MEMORY[0x270FA3358]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCurves::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCurves *this)
{
  return MEMORY[0x270FA3360](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCurves::~UsdGeomCurves(pxrInternal__aapl__pxrReserved__::UsdGeomCurves *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::ComputeExtent()
{
  return MEMORY[0x270FA3370]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  return MEMORY[0x270FA3378](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPoints::~UsdGeomPoints(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return MEMORY[0x270FA3388](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSphere::~UsdGeomSphere(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x270FA33A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetUnassignedIndices()
{
  return MEMORY[0x270FA33B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference()
{
  return MEMORY[0x270FA33E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase()
{
  return MEMORY[0x270FA33F0]();
}

{
  return MEMORY[0x270FA33F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
{
  return MEMORY[0x270FA3400]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this, double a2, double a3)
{
  return MEMORY[0x270FA3440](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, ...)
{
  return MEMORY[0x270FA3450](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x270FA3478](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::~UsdGeomCapsule(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::UsdGeomPrimvar()
{
  return MEMORY[0x270FA3498]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput()
{
  return MEMORY[0x270FA34A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateInput()
{
  return MEMORY[0x270FA34B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateOutput()
{
  return MEMORY[0x270FA34C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA34C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define()
{
  return MEMORY[0x270FA34D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader()
{
  return MEMORY[0x270FA34E0]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::usd_initialize()
{
  return MEMORY[0x270FA3518]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x270FA3560](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::~UsdGeomCylinder(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x270FA3570](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA3590](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::ComputeWorldBound()
{
  return MEMORY[0x270FA35E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomBBoxCache::UsdGeomBBoxCache()
{
  return MEMORY[0x270FA35F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *this)
{
  return MEMORY[0x270FA35F8](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::~UsdGeomBoundable(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return MEMORY[0x270FA3638](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define()
{
  return MEMORY[0x270FA3640]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x270FA3650](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::~UsdSkelAnimation(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOutArray()
{
  return MEMORY[0x270FA3660]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery()
{
  return MEMORY[0x270FA3680]();
}

{
  return MEMORY[0x270FA3688]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA3690](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::~UsdGeomNurbsPatch(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::ComputeExtent()
{
  return MEMORY[0x270FA36A0]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::~UsdGeomPointBased(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomTokensType::UsdGeomTokensType(pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *this)
{
  return MEMORY[0x270FA36B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo()
{
  return MEMORY[0x270FA36D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA3708](this);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::~UsdSkelBlendShape(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper()
{
  return MEMORY[0x270FA3750]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  return MEMORY[0x270FA3768](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper()
{
  return MEMORY[0x270FA37C0]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper()
{
  return MEMORY[0x270FA3800]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat(pxrInternal__aapl__pxrReserved__ *this, const char *a2, ...)
{
  return MEMORY[0x270FA3808](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGetStageUpAxis()
{
  return MEMORY[0x270FA3810]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSetStageUpAxis()
{
  return MEMORY[0x270FA3818]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver()
{
  return MEMORY[0x270FA3828]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init::New(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *this)
{
  return MEMORY[0x270FA3838](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  return MEMORY[0x270FA3848](this);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::~UsdDeformersBlendShape(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource()
{
  return MEMORY[0x270FA3860]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::HasConnectedSource()
{
  return MEMORY[0x270FA3868]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x270FA3928](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::KindTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *this)
{
  return MEMORY[0x270FA3930](this);
}

void pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType::~KindTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::KindTokens_StaticTokenType *this)
{
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::~UsdDeformersDeformableMesh(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  return MEMORY[0x270FA3968](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply()
{
  return MEMORY[0x270FA3988]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfGetValueTypeNameForValue(pxrInternal__aapl__pxrReserved__ *this, const VtValue *a2)
{
  return MEMORY[0x270FA39A0](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::~UsdDeformersSkinDeformerAPI(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  return MEMORY[0x270FA39B0](this);
}

void pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit()
{
  return MEMORY[0x270FA39C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked()
{
  return MEMORY[0x270FA3A00]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner()
{
  return MEMORY[0x270FA3A10]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter()
{
  return MEMORY[0x270FA3A18]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode *this)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return MEMORY[0x270FA3A28](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage()
{
  return MEMORY[0x270FA3A40]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError()
{
  return MEMORY[0x270FA3A70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetName()
{
  return MEMORY[0x270FA3AA8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x270FA3AC8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA3B58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath()
{
  return MEMORY[0x270FA3B60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(pxrInternal__aapl__pxrReserved__::TfToken *this)
{
  return MEMORY[0x270FA3B98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken(pxrInternal__aapl__pxrReserved__::TfToken *this, const char *a2)
{
  return MEMORY[0x270FA3BA0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken()
{
  return MEMORY[0x270FA3BB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const VtValue *a3)
{
  return MEMORY[0x270FA3BD8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous()
{
  return MEMORY[0x270FA3C20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x270FA3D58]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x270FA3D60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x270FA3D68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x270FA3D70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x270FA3D78]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x270FA3D80]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x270FA3DC0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA3DE8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetDefaultPrim()
{
  return MEMORY[0x270FA3E08]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetEndTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x270FA3E10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::IsSupportedFile()
{
  return MEMORY[0x270FA3E20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetStartTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x270FA3E30](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Open()
{
  return MEMORY[0x270FA3E38]();
}

{
  return MEMORY[0x270FA3E50]();
}

uint64_t Alembic::AbcCoreOgawa::v12::WriteArchive::WriteArchive(Alembic::AbcCoreOgawa::v12::WriteArchive *this)
{
  return MEMORY[0x270FA3FB0](this);
}

uint64_t Alembic::Abc::v12::ErrorHandler::operator()()
{
  return MEMORY[0x270FA3FB8]();
}

{
  return MEMORY[0x270FA3FC0]();
}

uint64_t Alembic::Abc::v12::OArrayProperty::setFromPrevious(Alembic::Abc::v12::OArrayProperty *this)
{
  return MEMORY[0x270FA3FC8](this);
}

uint64_t Alembic::Abc::v12::OArrayProperty::set()
{
  return MEMORY[0x270FA3FD0]();
}

void Alembic::Abc::v12::OArrayProperty::~OArrayProperty(Alembic::Abc::v12::OArrayProperty *this)
{
}

void Alembic::Abc::v12::OScalarProperty::~OScalarProperty(Alembic::Abc::v12::OScalarProperty *this)
{
}

uint64_t Alembic::Abc::v12::OCompoundProperty::OCompoundProperty()
{
  return MEMORY[0x270FA3FE8]();
}

void Alembic::Abc::v12::OCompoundProperty::~OCompoundProperty(Alembic::Abc::v12::OCompoundProperty *this)
{
}

{
  MEMORY[0x270FA3FF8](this);
}

uint64_t Alembic::Abc::v12::OObject::getChildHeader()
{
  return MEMORY[0x270FA4000]();
}

uint64_t Alembic::Abc::v12::OObject::OObject()
{
  return MEMORY[0x270FA4008]();
}

void Alembic::Abc::v12::OObject::~OObject(Alembic::Abc::v12::OObject *this)
{
}

{
  MEMORY[0x270FA4018](this);
}

uint64_t Alembic::Abc::v12::OArchive::getTop(Alembic::Abc::v12::OArchive *this)
{
  return MEMORY[0x270FA4020](this);
}

void Alembic::Abc::v12::OArchive::~OArchive(Alembic::Abc::v12::OArchive *this)
{
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::set()
{
  return MEMORY[0x270FA4030]();
}

uint64_t Alembic::AbcGeom::v12::OSubDSchema::OSubDSchema()
{
  return MEMORY[0x270FA4038]();
}

uint64_t Alembic::AbcGeom::v12::XformSample::reset(Alembic::AbcGeom::v12::XformSample *this)
{
  return MEMORY[0x270FA4040](this);
}

uint64_t Alembic::AbcGeom::v12::XformSample::setMatrix()
{
  return MEMORY[0x270FA4048]();
}

uint64_t Alembic::AbcGeom::v12::XformSample::XformSample(Alembic::AbcGeom::v12::XformSample *this)
{
  return MEMORY[0x270FA4050](this);
}

uint64_t Alembic::AbcGeom::v12::OXformSchema::set(Alembic::AbcGeom::v12::OXformSchema *this, Alembic::AbcGeom::v12::XformSample *a2)
{
  return MEMORY[0x270FA4058](this, a2);
}

uint64_t Alembic::AbcGeom::v12::OXformSchema::OXformSchema()
{
  return MEMORY[0x270FA4060]();
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::set()
{
  return MEMORY[0x270FA4068]();
}

uint64_t Alembic::AbcGeom::v12::OPolyMeshSchema::OPolyMeshSchema()
{
  return MEMORY[0x270FA4070]();
}

uint64_t OpenSubdiv::__aapl__::Sdc::Crease::DetermineVertexVertexRule(OpenSubdiv::__aapl__::Sdc::Crease *this, float a2, uint64_t a3, const float *a4)
{
  return MEMORY[0x270FA4078](this, a3, a4, a2);
}

uint64_t OpenSubdiv::__aapl__::Sdc::Crease::ComputeFractionalWeightAtVertex(OpenSubdiv::__aapl__::Sdc::Crease *this, float a2, float a3, uint64_t a4, const float *a5, const float *a6)
{
  return MEMORY[0x270FA4080](this, a4, a5, a6, a2, a3);
}

uint64_t OpenSubdiv::__aapl__::Sdc::Crease::SubdivideEdgeSharpnessesAroundVertex(OpenSubdiv::__aapl__::Sdc::Crease *this, uint64_t a2, const float *a3, float *a4)
{
  return MEMORY[0x270FA4088](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset()
{
  return MEMORY[0x270FA40A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset()
{
  return MEMORY[0x270FA40A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==()
{
  return MEMORY[0x270FA40E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==()
{
  return MEMORY[0x270FA40E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x270FA4130](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x270FA4138](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCone::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCone *this)
{
  return MEMORY[0x270FA4140](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCube::GetSizeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCube *this)
{
  return MEMORY[0x270FA4148](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4158](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4160](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseLengthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4168](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCornerIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4170](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCreaseIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4178](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCreaseLengthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4180](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4188](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCornerSharpnessesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4190](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetCreaseSharpnessesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA4198](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA41A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::GetSubdivisionSchemeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this)
{
  return MEMORY[0x270FA41A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA41B0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCornerSharpnessesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA41B8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateCreaseSharpnessesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA41C0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateFaceVertexIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA41C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomMesh::CreateSubdivisionSchemeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomMesh *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA41D0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdModelAPI::SetKind(pxrInternal__aapl__pxrReserved__::UsdModelAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA41D8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x270FA41E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdTimeCode::_IssueGetValueOnDefaultError(pxrInternal__aapl__pxrReserved__::UsdTimeCode *this)
{
  return MEMORY[0x270FA4218](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  return MEMORY[0x270FA4238](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples()
{
  return MEMORY[0x270FA42A0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValueOpinion(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x270FA42E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
{
  return MEMORY[0x270FA42F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Set()
{
  return MEMORY[0x270FA4308]();
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2d>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>()
{
  while (1)
    ;
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDoubleSidedAttr(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA4328](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetOrientationAttr(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA4330](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayColorPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA4340](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetDisplayOpacityPrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomGprim *this)
{
  return MEMORY[0x270FA4348](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA4388](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x270FA4390](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, const char *a2)
{
  return MEMORY[0x270FA43C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetFStopAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA4430](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateFStopAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4438](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetProjectionAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA4440](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetFocalLengthAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA4448](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateProjectionAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4450](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetClippingRangeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA4458](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetFocusDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA4460](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateFocalLengthAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4468](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateClippingRangeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4470](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateFocusDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4478](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetVerticalApertureAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA4480](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetHorizontalApertureAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA4488](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateVerticalApertureAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4490](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateHorizontalApertureAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4498](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetVerticalApertureOffsetAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA44A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetHorizontalApertureOffsetAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this)
{
  return MEMORY[0x270FA44A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateVerticalApertureOffsetAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA44B0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCamera::CreateHorizontalApertureOffsetAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCamera *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA44B8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCurves::GetWidthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCurves *this)
{
  return MEMORY[0x270FA44C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCurves::GetCurveVertexCountsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCurves *this)
{
  return MEMORY[0x270FA44D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPoints::GetWidthsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPoints *this)
{
  return MEMORY[0x270FA44D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSphere::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSphere *this)
{
  return MEMORY[0x270FA44E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x270FA44E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdShadeInput *this)
{
  return MEMORY[0x270FA4500](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::ConnectToSource()
{
  return MEMORY[0x270FA4518]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::Get()
{
  return MEMORY[0x270FA4568]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::Set()
{
  return MEMORY[0x270FA4570]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x270FA45B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x270FA45C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *this)
{
  return MEMORY[0x270FA45C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetIndices()
{
  return MEMORY[0x270FA45D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::SetIndices()
{
  return MEMORY[0x270FA45D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetElementSize(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  return MEMORY[0x270FA45E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  return MEMORY[0x270FA45E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::GetDeclarationInfo(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, int *a5)
{
  return MEMORY[0x270FA45F0](this, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::Get<pxrInternal__aapl__pxrReserved__::VtValue>()
{
  return MEMORY[0x270FA45F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsIndexed(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *this)
{
  return MEMORY[0x270FA4600](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  return MEMORY[0x270FA4608](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this)
{
  return MEMORY[0x270FA4618](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::ConnectToSource(pxrInternal__aapl__pxrReserved__::UsdShadeOutput *this, const pxrInternal__aapl__pxrReserved__::UsdShadeOutput *a2)
{
  return MEMORY[0x270FA4638](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4670](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4680](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA4688](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x270FA4690](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4698](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x270FA46E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x270FA46F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::GetRadiusAttr(pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *this)
{
  return MEMORY[0x270FA46F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::GetForwardedTargets()
{
  return MEMORY[0x270FA4728]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x270FA4738](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x270FA4740](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::GetRestTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  return MEMORY[0x270FA4748](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x270FA4758](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()
{
  return MEMORY[0x270FA47A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::GetExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *this)
{
  return MEMORY[0x270FA47D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomBoundable::CreateExtentAttr(pxrInternal__aapl__pxrReserved__::UsdGeomBoundable *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA47D8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTransformOp()
{
  return MEMORY[0x270FA4808]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples()
{
  return MEMORY[0x270FA4818]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, BOOL *a2)
{
  return MEMORY[0x270FA4820](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x270FA48B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetScalesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x270FA48C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetRotationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x270FA48C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x270FA48D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetTranslationsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x270FA48D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelAnimation::GetBlendShapeWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelAnimation *this)
{
  return MEMORY[0x270FA48E0](this);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>()
{
  while (1)
    ;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUFormAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA48F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVFormAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA48F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUKnotsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4900](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4908](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetURangeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4910](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVKnotsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4918](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVOrderAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4920](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVRangeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4928](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetPointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4930](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetUVertexCountAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4938](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch::GetVVertexCountAttr(pxrInternal__aapl__pxrReserved__::UsdGeomNurbsPatch *this)
{
  return MEMORY[0x270FA4940](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetPointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x270FA4948](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x270FA4950](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreatePointsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4958](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::CreateNormalsAttr(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x270FA4960](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPointBased::GetNormalsInterpolation(pxrInternal__aapl__pxrReserved__::UsdGeomPointBased *this)
{
  return MEMORY[0x270FA4968](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x270FA4980](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::CreateOutput(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3)
{
  return MEMORY[0x270FA4990](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *this)
{
  return MEMORY[0x270FA49A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA49F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetBlendShapeTargetsRel(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA4A00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetGeomBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA4A08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x270FA4A10](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetInbetweens(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x270FA4A18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetOffsetsAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x270FA4A20](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape::GetPointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdSkelBlendShape *this)
{
  return MEMORY[0x270FA4A28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::GetPrimvars(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  return MEMORY[0x270FA4A40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::CreatePrimvar(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  return MEMORY[0x270FA4A48](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetOffsets()
{
  return MEMORY[0x270FA4AB8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape::GetWeight(pxrInternal__aapl__pxrReserved__::UsdSkelInbetweenShape *this, float *a2)
{
  return MEMORY[0x270FA4AC0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape::GetPointsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersBlendShape *this)
{
  return MEMORY[0x270FA4AD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4AF0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  return MEMORY[0x270FA4AF8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B38](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B48](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphTargetBlendShapesRel(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B60](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphChannelTargetCountsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B68](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh::GetMorphChannelTargetWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersDeformableMesh *this)
{
  return MEMORY[0x270FA4B70](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial()
{
  return MEMORY[0x270FA4BA0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  return MEMORY[0x270FA4BC8](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinTargetJointsRel(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  return MEMORY[0x270FA4BD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  return MEMORY[0x270FA4BD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinJointWeightsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  return MEMORY[0x270FA4BE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinBindTransformsAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  return MEMORY[0x270FA4BE8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI::GetSkinMeshBindTransformAttr(pxrInternal__aapl__pxrReserved__::UsdDeformersSkinDeformerAPI *this)
{
  return MEMORY[0x270FA4BF0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetSizeof(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x270FA4C28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4C50](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4CD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetName(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DC8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetText(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x270FA4DE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4E40](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x270FA4E60](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x270FA4E88](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()
{
  return MEMORY[0x270FA4F60]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI()
{
  return MEMORY[0x270FA4F70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4F98](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FB0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetType(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FC0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x270FA4FD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Export()
{
  return MEMORY[0x270FA5118]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x270FA5148]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x270FA5150]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==()
{
  return MEMORY[0x270FA5158]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x270FA5160]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x270FA5168]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5188](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x270FA5198](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51A8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51C0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA51E0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x270FA5210](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x270FA5220](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::UsdStage *this, double a2)
{
  return MEMORY[0x270FA5230](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetAssetInfoByKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x270FA52D8](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA5310](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x270FA5328](this);
}

uint64_t Alembic::AbcCoreOgawa::v12::WriteArchive::operator()()
{
  return MEMORY[0x270FA5330]();
}

uint64_t Alembic::Abc::v12::OArrayProperty::getNumSamples(Alembic::Abc::v12::OArrayProperty *this)
{
  return MEMORY[0x270FA5338](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98240](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F98480](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984C0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984E0](this, __pos, __s);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986E0]();
}

{
  return MEMORY[0x270F986E8]();
}

{
  return MEMORY[0x270F986F0]();
}

{
  return MEMORY[0x270F986F8]();
}

{
  return MEMORY[0x270F98708]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98790]();
}

{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987C0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x270F98878]();
}

{
  return MEMORY[0x270F98880]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x270F98E38]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

uint64_t __invert_d4()
{
  return MEMORY[0x270ED7E08]();
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  MEMORY[0x270ED7E18]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  MEMORY[0x270ED7E20]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

long double acos(long double __x)
{
  MEMORY[0x270ED8588](__x);
  return result;
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

uint32_t arc4random(void)
{
  return MEMORY[0x270ED85E0]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x270ED86C0](a1);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x270F9A438](cls, outCount);
}

clock_t clock(void)
{
  return MEMORY[0x270ED8EE8]();
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x270ED9378](group, timeout);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x270ED9978](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x270ED9A18](*(void *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x270ED9AF0](*(void *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

float log2f(float a1)
{
  MEMORY[0x270EDA0E0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

const char *__cdecl property_getAttributes(objc_property_t property)
{
  return (const char *)MEMORY[0x270F9AA90](property);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x270F9AA98](property);
}

int putchar(int a1)
{
  return MEMORY[0x270EDB090](*(void *)&a1);
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x270EDB2C0]();
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB530](a1, a2);
}

void srand(unsigned int a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x270EDB638](__s1, __s2, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB680](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x270EDB6A0](__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x270EDB7C8](*(void *)&a1);
}

float tanf(float a1)
{
  MEMORY[0x270EDB818](a1);
  return result;
}