uint64_t sub_1907BDEFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  long long v7;
  long long v8;
  long long v9;

  v5 = *a2;
  v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    sub_1906BFE48(v6);
  }
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)((char *)a2 + 65);
  *(_OWORD *)(a1 + 56) = v9;
  if ((uint64_t *)a1 != a2) {
    sub_1907B5974((char *)(a1 + 88), (char *)a2[11], a2[12], 0x8E38E38E38E38E39 * ((a2[12] - a2[11]) >> 3));
  }
  return a1;
}

uint64_t sub_1907BDF98(uint64_t a1)
{
  uint64_t v269 = *MEMORY[0x1E4F143B8];
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v240 = *(void *)(a1 + 8);
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v2 = a1;
  double v3 = *(double *)(a1 + 2064);
  double v4 = 0.0;
  if (v3 >= 0.0)
  {
    if (*(double *)(a1 + 2152) > 0.0) {
      double v4 = *(double *)(a1 + 2152);
    }
    else {
      double v4 = 0.0;
    }
  }
  double v5 = *(double *)(a1 + 1224);
  if (v5 >= 0.0)
  {
    double v6 = *(double *)(a1 + 1640);
    if (v3 >= 0.0 && v6 < 2.2) {
      double v5 = (v3 + v5) * 0.5;
    }
    uint64_t v2 = a1;
    *(double *)(a1 + 1792) = v5;
  }
  else
  {
    *(void *)(a1 + 1792) = 0;
    double v6 = *(double *)(a1 + 1640);
    double v5 = 0.0;
  }
  double v7 = v6 * v5;
  if (*(double *)(v2 + 2048) <= 0.0 || v6 >= 2.2)
  {
    uint64_t v8 = a1;
    *(double *)(a1 + 1800) = v7;
    double v9 = -1.0;
  }
  else
  {
    uint64_t v8 = a1;
    double v9 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 2024), *(double *)(a1 + 2032), *(double *)(a1 + 1200));
    if (v9 > 300.0)
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_81;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v10 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = *(void *)(a1 + 1640);
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = v11;
        _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "CLMM, Position jump(m),%{public}.1lf,dT(s),%{public}.1lf", buf, 0x16u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_81;
      }
      v230 = v1;
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v12 = *(void *)(a1 + 1640);
      LODWORD(v258[0]) = 134349312;
      *(double *)((char *)v258 + 4) = v9;
      WORD2(v258[1]) = 2050;
      *(void *)((char *)&v258[1] + 6) = v12;
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v13);
LABEL_421:
      if (v13 != buf) {
        free(v13);
      }
      v1 = v230;
LABEL_81:
      uint64_t v41 = 0;
      uint64_t v42 = a1;
      goto LABEL_82;
    }
    *(double *)(a1 + 1800) = v7;
    if (v9 < 0.0 || *(double *)(a1 + 1792) <= 0.0 || *(unsigned char *)(a1 + 1356))
    {
      if (v9 < 0.0)
      {
        uint64_t v8 = a1;
      }
      else
      {
        uint64_t v8 = a1;
        if (!*(unsigned char *)(a1 + 1356)) {
          *(double *)(a1 + 1800) = v9;
        }
      }
    }
    else
    {
      *(double *)(a1 + 1800) = (v7 + v9) * 0.5;
    }
  }
  if (*(unsigned char *)(v8 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v14 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 1136);
      uint64_t v16 = *(void *)(a1 + 1800);
      *(_DWORD *)buf = 134349824;
      *(void *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 2050;
      *(void *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v7;
      LOWORD(v263[0]) = 2050;
      *(double *)((char *)v263 + 2) = v9;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,predictionAndUpdate,distance,%{public}.1lf,distBasedOnSpeed,%{public}.1lf,distBasedOnPos,%{public}.1lf", buf, 0x2Au);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v217 = *(void *)(a1 + 1136);
      uint64_t v218 = *(void *)(a1 + 1800);
      LODWORD(v258[0]) = 134349824;
      *(void *)((char *)v258 + 4) = v217;
      WORD2(v258[1]) = 2050;
      *(void *)((char *)&v258[1] + 6) = v218;
      HIWORD(v258[2]) = 2050;
      *(double *)&v258[3] = v7;
      LOWORD(v258[4]) = 2050;
      *(double *)((char *)&v258[4] + 2) = v9;
      v219 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v219);
      if (v219 != buf) {
        free(v219);
      }
    }
  }
  *(void *)(a1 + 1608) = 0xBFF0000000000000;
  uint64_t v17 = *(void *)(a1 + 872);
  uint64_t v18 = *(void *)(a1 + 864);
  uint64_t v19 = v17 - v18;
  if (v17 == v18)
  {
LABEL_370:
    uint64_t v41 = 1;
    if (v1) {
      goto LABEL_83;
    }
    return v41;
  }
  double v20 = *(double *)(a1 + 1800);
  double v21 = *(double *)(a1 + 1640);
  double v22 = v21 * v21;
  if (*(unsigned char *)(a1 + 1356) && v21 > 4.9)
  {
    double v23 = 24.01;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v24 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v22;
        *(_WORD *)&buf[12] = 2050;
        *(void *)&buf[14] = 0x4038028F5C28F5C4;
        _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEBUG, "CLMM,dT2 limited,from,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        LODWORD(v258[0]) = 134349312;
        *(double *)((char *)v258 + 4) = v22;
        WORD2(v258[1]) = 2050;
        *(void *)((char *)&v258[1] + 6) = 0x4038028F5C28F5C4;
        v25 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v25);
        if (v25 != buf) {
          free(v25);
        }
      }
    }
  }
  else
  {
    double v23 = v21 * v21;
  }
  double v26 = v23 * ((v4 * v4 + *(double *)(a1 + 1312) * *(double *)(a1 + 1312)) * 0.25);
  *(double *)(a1 + 1808) = v26;
  double v27 = *(double *)(a1 + 1792);
  double v28 = v23 * 3.0;
  if (v27 >= 8.05555556) {
    double v28 = v23;
  }
  *(double *)(a1 + 1816) = v28;
  double v29 = v23 * (v27 * v27 * 0.25);
  *(double *)(a1 + 1824) = v29;
  *(double *)(a1 + 1832) = sqrt(v26 + v28 + v29);
  double v30 = *(double *)(a1 + 1640);
  if (v30 <= 0.0
    || (v30 > 4.9 ? (BOOL v31 = *(unsigned char *)(a1 + 1356) == 0) : (BOOL v31 = 0), !v31 ? (v32 = 0) : (v32 = 1), v30 > 75.0 || v32))
  {
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_81;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v39 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)(a1 + 1640);
      *(_DWORD *)buf = 134349568;
      *(void *)&buf[4] = v40;
      *(_WORD *)&buf[12] = 2050;
      *(void *)&buf[14] = 0x401399999999999ALL;
      *(_WORD *)&buf[22] = 2050;
      *(void *)&buf[24] = 0x4052C00000000000;
      _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_ERROR, "#Warning CLMM,unexpected,dT,%{public}.1lf,minMoreThan,0,threshold1,%{public}.1lf,threshold2,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_81;
    }
    v230 = v1;
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v220 = *(void *)(a1 + 1640);
    LODWORD(v258[0]) = 134349568;
    *(void *)((char *)v258 + 4) = v220;
    WORD2(v258[1]) = 2050;
    *(void *)((char *)&v258[1] + 6) = 0x401399999999999ALL;
    HIWORD(v258[2]) = 2050;
    v258[3] = 0x4052C00000000000;
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v13);
    goto LABEL_421;
  }
  v243 = (uint64_t *)(a1 + 864);
  v230 = v1;
  if (*(unsigned char *)(a1 + 2688))
  {
    double v33 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 2120), *(double *)(a1 + 2128), *(double *)(a1 + 2744), *(double *)(a1 + 2752), *(double *)(a1 + 1200));
    int v34 = *(_DWORD *)(a1 + 2824);
    int v35 = 4 * v34;
    if (v34 >= 1)
    {
      if (v35 <= 1) {
        int v36 = 1;
      }
      else {
        int v36 = 4 * v34;
      }
      unint64_t v37 = *(void *)(a1 + 872);
      do
      {
        if (v37 >= *(void *)(a1 + 880))
        {
          unint64_t v37 = sub_1907D5EFC(v243, a1 + 2712);
          uint64_t v38 = a1;
        }
        else
        {
          sub_1907D6024(a1 + 880, v37, a1 + 2712);
          v37 += 112;
          uint64_t v38 = a1;
          *(void *)(a1 + 872) = v37;
        }
        *(void *)(v38 + 872) = v37;
        --v36;
      }
      while (v36);
    }
  }
  else
  {
    int v35 = 0;
    double v33 = 0.0;
  }
  int v231 = v35;
  uint64_t v229 = v19;
  if (*(unsigned char *)(a1 + 2232))
  {
    v44 = (uint64_t *)(a1 + 3048);
    v45 = (uint64_t *)(a1 + 3096);
    *(_DWORD *)&buf[16] = 0;
    buf[21] = 0;
    *(_DWORD *)&buf[24] = 0;
    v263[0] = 0uLL;
    uint64_t v46 = *(void *)(a1 + 1856);
    uint64_t v47 = *(void *)(a1 + 1864);
    if (v47) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)buf = v46;
    *(void *)&buf[8] = v47;
    uint64_t v48 = *(void *)(a1 + 1904);
    buf[20] = *(unsigned char *)(a1 + 1876);
    *(void *)&v263[1] = v48;
    sub_190770ADC(v44);
    sub_190770ADC(v45);
    LODWORD(v245) = 0;
    char v49 = sub_1907BCCB4(*(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), (uint64_t **)buf, (int *)&v245, v44, (__n128 **)v45, v258, &v248, 80.0);
    if (*(void *)&buf[8]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
    }
    if ((v49 & 1) == 0)
    {
      uint64_t v41 = 0;
      ++*(_DWORD *)(a1 + 108);
      goto LABEL_113;
    }
    uint64_t v50 = *(void *)(a1 + 3104);
    if ((uint64_t *)v50 == v45)
    {
      int v51 = 0;
    }
    else
    {
      int v51 = 0;
      v52 = (unint64_t *)(a1 + 880);
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v267 = 0;
        uint64_t v268 = 0;
        __p = 0;
        memset(v263, 0, sizeof(v263));
        long long v264 = 0u;
        char v265 = 0;
        uint64_t v53 = *(void *)(v50 + 16);
        uint64_t v54 = *(void *)(v50 + 24);
        if (v54)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
          v55 = *(std::__shared_weak_count **)&buf[8];
          *(void *)buf = v53;
          *(void *)&buf[8] = v54;
          if (v55) {
            sub_1906BFE48(v55);
          }
        }
        else
        {
          *(void *)buf = *(void *)(v50 + 16);
          *(void *)&buf[8] = 0;
        }
        *(void *)&v263[1] = *(void *)(v50 + 40);
        buf[20] = *(unsigned char *)(v50 + 32);
        v51 += 6;
        unint64_t v56 = *(void *)(a1 + 872);
        int v57 = 6;
        do
        {
          if (v56 >= *v52)
          {
            unint64_t v56 = sub_1907D5EFC(v243, (uint64_t)buf);
            uint64_t v58 = a1;
          }
          else
          {
            sub_1907D6024((uint64_t)v52, v56, (uint64_t)buf);
            v56 += 112;
            uint64_t v58 = a1;
            *(void *)(a1 + 872) = v56;
          }
          *(void *)(v58 + 872) = v56;
          --v57;
        }
        while (v57);
        if (__p)
        {
          v267 = __p;
          operator delete(__p);
        }
        if (*(void *)&buf[8]) {
          sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v50 = *(void *)(v50 + 8);
      }
      while ((uint64_t *)v50 != v45);
    }
    uint64_t v61 = *(void *)(a1 + 3056);
    int v59 = v51;
    if ((uint64_t *)v61 != v44)
    {
      v62 = (unint64_t *)(a1 + 880);
      int v59 = v51;
      do
      {
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v267 = 0;
        uint64_t v268 = 0;
        __p = 0;
        memset(v263, 0, sizeof(v263));
        long long v264 = 0u;
        char v265 = 0;
        uint64_t v63 = *(void *)(v61 + 16);
        uint64_t v64 = *(void *)(v61 + 24);
        if (v64)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
          v65 = *(std::__shared_weak_count **)&buf[8];
          *(void *)buf = v63;
          *(void *)&buf[8] = v64;
          if (v65) {
            sub_1906BFE48(v65);
          }
        }
        else
        {
          *(void *)buf = *(void *)(v61 + 16);
          *(void *)&buf[8] = 0;
        }
        v59 += 6;
        *(void *)&v263[1] = *(void *)(v61 + 40);
        buf[20] = *(unsigned char *)(v61 + 32);
        unint64_t v66 = *(void *)(a1 + 872);
        int v67 = 6;
        do
        {
          if (v66 >= *v62)
          {
            unint64_t v66 = sub_1907D5EFC(v243, (uint64_t)buf);
            uint64_t v68 = a1;
          }
          else
          {
            sub_1907D6024((uint64_t)v62, v66, (uint64_t)buf);
            v66 += 112;
            uint64_t v68 = a1;
            *(void *)(a1 + 872) = v66;
          }
          *(void *)(v68 + 872) = v66;
          --v67;
        }
        while (v67);
        if (__p)
        {
          v267 = __p;
          operator delete(__p);
        }
        if (*(void *)&buf[8]) {
          sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v61 = *(void *)(v61 + 8);
      }
      while ((uint64_t *)v61 != v44);
    }
    int v60 = v51 + v35 + v59;
    if (*(unsigned char *)(a1 + 2232))
    {
      uint64_t v69 = a1 + 1856;
      v70 = (unint64_t *)(a1 + 880);
      unint64_t v71 = *(void *)(a1 + 872);
      int v72 = 12;
      do
      {
        if (v71 >= *v70)
        {
          unint64_t v71 = sub_1907D5EFC(v243, v69);
          uint64_t v73 = a1;
        }
        else
        {
          sub_1907D6024((uint64_t)v70, v71, v69);
          v71 += 112;
          uint64_t v73 = a1;
          *(void *)(a1 + 872) = v71;
        }
        *(void *)(v73 + 872) = v71;
        --v72;
      }
      while (v72);
      v60 += 12;
      int v226 = 12;
    }
    else
    {
      int v226 = 0;
    }
  }
  else
  {
    int v59 = 0;
    int v226 = 0;
    int v60 = v35;
  }
  if (*(unsigned char *)(a1 + 114)
    && ((double v74 = *(double *)(a1 + 88), v75 = vabdd_f64(*(double *)(a1 + 1152), v74), v74 >= 0.0)
      ? (BOOL v76 = v75 <= 6.0)
      : (BOOL v76 = 0),
        v76 && (uint64_t v77 = *(void *)(a1 + 4048), v233 = *(void *)(a1 + 4056), v77 != v233)))
  {
    int v239 = 0;
    do
    {
      v78 = *(uint64_t **)v77;
      v79 = *(std::__shared_weak_count **)(v77 + 8);
      if (v79) {
        atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v80 = *(_DWORD *)(v77 + 16);
      int v241 = *(unsigned __int8 *)(v77 + 20);
      LOWORD(v248) = *(_WORD *)(v77 + 21);
      BYTE2(v248) = *(unsigned char *)(v77 + 23);
      float v81 = *(float *)(v77 + 24);
      int v82 = *(_DWORD *)(v77 + 28);
      uint64_t v83 = *(void *)(v77 + 32);
      uint64_t v84 = *(void *)(v77 + 40);
      v239 += 2;
      int v237 = v60 + 2;
      char v85 = 1;
      uint64_t v235 = v77;
      uint64_t v86 = *(void *)(v77 + 48);
      do
      {
        char v87 = v85;
        memset(buf, 0, 20);
        *(_WORD *)&buf[20] = 1;
        *(_DWORD *)&buf[24] = 0;
        v267 = 0;
        uint64_t v268 = 0;
        __p = 0;
        memset(v263, 0, sizeof(v263));
        long long v264 = 0u;
        char v265 = 0;
        if (v79)
        {
          atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          v88 = *(std::__shared_weak_count **)&buf[8];
          *(void *)buf = v78;
          *(void *)&buf[8] = v79;
          if (v88) {
            sub_1906BFE48(v88);
          }
        }
        else
        {
          *(void *)buf = v78;
          *(void *)&buf[8] = 0;
        }
        *(_DWORD *)&buf[16] = v80;
        buf[20] = v241;
        *(_WORD *)&buf[21] = v248;
        buf[23] = BYTE2(v248);
        *(float *)&buf[24] = v81;
        *(_DWORD *)&buf[28] = v82;
        *(void *)&v263[0] = v83;
        *((void *)&v263[0] + 1) = v84;
        *(void *)&v263[1] = v86;
        unint64_t v89 = *(void *)(a1 + 872);
        if (v89 >= *(void *)(a1 + 880))
        {
          uint64_t v90 = sub_1907D5EFC(v243, (uint64_t)buf);
          uint64_t v91 = a1;
        }
        else
        {
          sub_1907D6024(a1 + 880, *(void *)(a1 + 872), (uint64_t)buf);
          uint64_t v90 = v89 + 112;
          uint64_t v91 = a1;
          *(void *)(a1 + 872) = v89 + 112;
        }
        *(void *)(v91 + 872) = v90;
        if (__p)
        {
          v267 = __p;
          operator delete(__p);
        }
        if (*(void *)&buf[8]) {
          sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
        }
        char v85 = 0;
      }
      while ((v87 & 1) != 0);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v92 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v93 = *(void *)(a1 + 1136);
        uint64_t v94 = *v78;
        *(_DWORD *)buf = 134350337;
        *(void *)&buf[4] = v93;
        *(_WORD *)&buf[12] = 2049;
        *(void *)&buf[14] = v83;
        *(_WORD *)&buf[22] = 2049;
        *(void *)&buf[24] = v84;
        LOWORD(v263[0]) = 2050;
        *(double *)((char *)v263 + 2) = v81;
        WORD5(v263[0]) = 2049;
        *(void *)((char *)v263 + 12) = v94;
        WORD2(v263[1]) = 1026;
        *(_DWORD *)((char *)&v263[1] + 6) = v241;
        _os_log_impl(&dword_1906B8000, v92, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHint,add particle,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", buf, 0x3Au);
      }
      int v60 = v237;
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v95 = *(void *)(a1 + 1136);
        uint64_t v96 = *v78;
        LODWORD(v258[0]) = 134350337;
        *(void *)((char *)v258 + 4) = v95;
        WORD2(v258[1]) = 2049;
        *(void *)((char *)&v258[1] + 6) = v83;
        HIWORD(v258[2]) = 2049;
        v258[3] = v84;
        LOWORD(v258[4]) = 2050;
        *(double *)((char *)&v258[4] + 2) = v81;
        WORD1(v258[5]) = 2049;
        *(void *)((char *)&v258[5] + 4) = v96;
        WORD2(v258[6]) = 1026;
        *(_DWORD *)((char *)&v258[6] + 6) = v241;
        v97 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v97);
        if (v97 != buf) {
          free(v97);
        }
      }
      if (v79) {
        sub_1906BFE48(v79);
      }
      uint64_t v77 = v235 + 56;
    }
    while (v235 + 56 != v233);
  }
  else
  {
    int v239 = 0;
  }
  if (*(unsigned char *)(a1 + 2684))
  {
    uint64_t v245 = (uint64_t)&v245;
    v246 = &v245;
    uint64_t v247 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, double))(*(void *)v240 + 64))(v240, &v245, 40.0) & 1) == 0
      && *(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v98 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v98, OS_LOG_TYPE_DEBUG, "CLMM,railway search,roadsWithinDistance returned false", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        LOWORD(v258[0]) = 0;
        v224 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v224);
        if (v224 != buf) {
          free(v224);
        }
      }
    }
    if (!v247 || (v99 = v246, v246 == &v245))
    {
      int v100 = 0;
    }
    else
    {
      int v100 = 0;
      uint64_t v101 = a1 + 880;
      do
      {
        if (*(unsigned char *)(v99[2] + 17))
        {
          memset(v258, 0, 20);
          WORD2(v258[2]) = 1;
          LODWORD(v258[3]) = 0;
          v260 = 0;
          uint64_t v261 = 0;
          v259 = 0;
          memset(&v258[4], 0, 49);
          uint64_t v102 = v99[2];
          uint64_t v103 = v99[3];
          if (v103)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
            v104 = (std::__shared_weak_count *)v258[1];
            v258[0] = v102;
            v258[1] = v103;
            if (v104) {
              sub_1906BFE48(v104);
            }
          }
          else
          {
            v258[0] = v99[2];
            v258[1] = 0;
          }
          long long v105 = *((_OWORD *)v99 + 3);
          *(_OWORD *)&v258[2] = *((_OWORD *)v99 + 2);
          *(_OWORD *)&v258[4] = v105;
          v258[6] = v99[8];
          unint64_t v106 = *(void *)(a1 + 872);
          if (v106 >= *(void *)(a1 + 880))
          {
            unint64_t v107 = sub_1907D5EFC(v243, (uint64_t)v258);
            uint64_t v108 = a1;
          }
          else
          {
            sub_1907D6024(v101, *(void *)(a1 + 872), (uint64_t)v258);
            unint64_t v107 = v106 + 112;
            uint64_t v108 = a1;
            *(void *)(a1 + 872) = v107;
          }
          *(void *)(v108 + 872) = v107;
          if (v107 >= *(void *)(v108 + 880))
          {
            uint64_t v109 = sub_1907D5EFC(v243, (uint64_t)v258);
            uint64_t v110 = a1;
          }
          else
          {
            sub_1907D6024(v101, v107, (uint64_t)v258);
            uint64_t v109 = v107 + 112;
            uint64_t v110 = a1;
            *(void *)(a1 + 872) = v107 + 112;
          }
          *(void *)(v110 + 872) = v109;
          if (*(unsigned char *)(v110 + 96))
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            v111 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v112 = *(void *)(a1 + 1136);
              uint64_t v113 = *(void *)v99[2];
              *(_DWORD *)buf = 134350081;
              *(void *)&buf[4] = v112;
              *(_WORD *)&buf[12] = 2049;
              *(void *)&buf[14] = v258[4];
              *(_WORD *)&buf[22] = 2049;
              *(void *)&buf[24] = v258[5];
              LOWORD(v263[0]) = 2050;
              *(double *)((char *)v263 + 2) = *(float *)&v258[3];
              WORD5(v263[0]) = 2049;
              *(void *)((char *)v263 + 12) = v113;
              _os_log_impl(&dword_1906B8000, v111, OS_LOG_TYPE_DEBUG, "CLMM,railwayParticle,timestamp,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.3lf,rseg,%{private}lld", buf, 0x34u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              uint64_t v114 = *(void *)(a1 + 1136);
              uint64_t v115 = *(void *)v99[2];
              int v248 = 134350081;
              uint64_t v249 = v114;
              __int16 v250 = 2049;
              uint64_t v251 = v258[4];
              __int16 v252 = 2049;
              uint64_t v253 = v258[5];
              __int16 v254 = 2050;
              double v255 = *(float *)&v258[3];
              __int16 v256 = 2049;
              uint64_t v257 = v115;
              v116 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v116);
              if (v116 != buf) {
                free(v116);
              }
            }
          }
          if (v259)
          {
            v260 = v259;
            operator delete(v259);
          }
          if (v258[1]) {
            sub_1906BFE48((std::__shared_weak_count *)v258[1]);
          }
          v100 += 2;
        }
        v99 = (uint64_t *)v99[1];
      }
      while (v99 != &v245);
    }
    sub_190770ADC(&v245);
  }
  else
  {
    int v100 = 0;
  }
  int v117 = v231;
  if (*(unsigned char *)(a1 + 2512) && *(unsigned char *)(a1 + 2233))
  {
    uint64_t v118 = a1 + 2520;
    v119 = (unint64_t *)(a1 + 880);
    unint64_t v120 = *(void *)(a1 + 872);
    int v121 = 4;
    do
    {
      if (v120 >= *v119)
      {
        unint64_t v120 = sub_1907D5EFC(v243, v118);
        uint64_t v122 = a1;
      }
      else
      {
        sub_1907D6024((uint64_t)v119, v120, v118);
        v120 += 112;
        uint64_t v122 = a1;
        *(void *)(a1 + 872) = v120;
      }
      *(void *)(v122 + 872) = v120;
      --v121;
    }
    while (v121);
    int v123 = v60 + 4;
    int v124 = 4;
    int v117 = v231;
  }
  else
  {
    int v123 = v60;
    int v124 = 0;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v125 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v126 = -1227133513 * ((*(void *)(a1 + 872) - *(void *)(a1 + 864)) >> 4);
      *(_DWORD *)buf = 67242240;
      *(_DWORD *)&buf[4] = v126;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = -1227133513 * (v229 >> 4);
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v123;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v117;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&buf[28] = 0;
      LOWORD(v263[0]) = 1026;
      *(_DWORD *)((char *)v263 + 2) = v59;
      WORD3(v263[0]) = 1026;
      DWORD2(v263[0]) = v226;
      WORD6(v263[0]) = 1026;
      *(_DWORD *)((char *)v263 + 14) = v124;
      WORD1(v263[1]) = 1026;
      DWORD1(v263[1]) = v239;
      _os_log_impl(&dword_1906B8000, v125, OS_LOG_TYPE_DEBUG, "CLMM,prediction,NrParticles,%{public}d,NrStandard,%{public}d,NrNew,%{public}d,NrPriorIntersectionParticles,%{public}d,NrNewAlternateCandidateNoiseParticles,%{public}d,NrNewFwdIntersectionParticles,%{public}d,NrNewBiasedToPrior,%{public}d,NrNewAmbiguous,%{public}d,NrNewRouteParticles,%{public}d", buf, 0x38u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      int v221 = -1227133513 * ((*(void *)(a1 + 872) - *(void *)(a1 + 864)) >> 4);
      LODWORD(v258[0]) = 67242240;
      HIDWORD(v258[0]) = v221;
      LOWORD(v258[1]) = 1026;
      *(_DWORD *)((char *)&v258[1] + 2) = -1227133513 * (v229 >> 4);
      HIWORD(v258[1]) = 1026;
      LODWORD(v258[2]) = v123;
      WORD2(v258[2]) = 1026;
      *(_DWORD *)((char *)&v258[2] + 6) = v231;
      WORD1(v258[3]) = 1026;
      HIDWORD(v258[3]) = 0;
      LOWORD(v258[4]) = 1026;
      *(_DWORD *)((char *)&v258[4] + 2) = v59;
      HIWORD(v258[4]) = 1026;
      LODWORD(v258[5]) = v226;
      WORD2(v258[5]) = 1026;
      *(_DWORD *)((char *)&v258[5] + 6) = v124;
      WORD1(v258[6]) = 1026;
      HIDWORD(v258[6]) = v239;
      v222 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v222);
      if (v222 != buf) {
        free(v222);
      }
    }
  }
  uint64_t v127 = *(void *)(a1 + 864);
  if (v127 == *(void *)(a1 + 872))
  {
    double v132 = 0.0;
    goto LABEL_329;
  }
  int v128 = 0;
  int v129 = -1227133513 * (v229 >> 4);
  int v234 = v231 - 1227133513 * (v229 >> 4);
  int v232 = v59 + v234;
  int v228 = v226 + v59 + v234;
  int v130 = v239 + v228;
  if (v130 <= v100 + v130) {
    v130 += v100;
  }
  int v227 = v130;
  uint64_t v242 = a1 + 912;
  double v236 = v20;
  if (v20 + v33 + 0.0 <= 0.0) {
    double v131 = 0.1;
  }
  else {
    double v131 = v20 + v33 + 0.0;
  }
  double v132 = 0.0;
  v133 = (double *)(a1 + 1128);
  double v238 = v131;
  while (v128 < v129)
  {
    if (byte_1E929FD78)
    {
      byte_1E929FD78 = 0;
      float v134 = *(float *)&dword_1E929FD7C;
    }
    else
    {
      do
      {
        float v135 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
        float v136 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
        float v137 = (float)(v136 * v136) + (float)(v135 * v135);
      }
      while (v137 >= 1.0);
      float v134 = 0.0;
      if (v137 != 0.0)
      {
        float v138 = sqrtf((float)(logf((float)(v136 * v136) + (float)(v135 * v135)) * -2.0) / v137);
        *(float *)&dword_1E929FD7C = v136 * v138;
        byte_1E929FD78 = 1;
        float v134 = v135 * v138;
      }
    }
    double v139 = *(double *)(a1 + 1832);
    double v140 = v139 * v134;
    if ((-1171354717 * v128) <= 0x1745D174 && v139 < 8.0)
    {
      double v140 = fabs(v140) / v139 * 8.0;
      double v131 = v238;
    }
    else
    {
      double v131 = v238;
      if ((-252645135 * v128) <= 0xF0F0F0F) {
        double v140 = fabs(v140) / v139 * 34.0;
      }
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v240 + 88))(v240, v127, v242, v236 + v140) & 1) == 0)
    {
      v1 = v230;
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_412;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v213 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v213, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,standard particles", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_412;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_440;
      }
LABEL_446:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      goto LABEL_440;
    }
LABEL_294:
    if (!*(void *)v127)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v1 = v230;
      v192 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v192, OS_LOG_TYPE_ERROR, "CLMM,NULL road", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_81;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_344;
      }
      goto LABEL_444;
    }
    if (*(double *)(v127 + 32) == 0.0 && *(double *)(v127 + 40) == 0.0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v1 = v230;
      v212 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v212, OS_LOG_TYPE_ERROR, "CLMM,Unexpected particle with snapLat == snapLon == 0", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_81;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_344:
        LOWORD(v258[0]) = 0;
        v13 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v13);
        goto LABEL_421;
      }
LABEL_444:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      goto LABEL_344;
    }
    *(void *)(v127 + 56) = 0;
    *(void *)(v127 + 64) = 0;
    *(void *)(v127 + 72) = 0;
    v160 = (char **)(v127 + 88);
    *(void *)(v127 + 96) = *(void *)(v127 + 88);
    memset(buf, 0, 24);
    *(void *)&buf[24] = 0x3FF0000000000000;
    memset(v263, 0, sizeof(v263));
    LODWORD(v264) = 0;
    sub_190799FB8(a1, a1 + 656, (uint64_t *)v127, v133, (double *)v258, (double *)&v248, (double *)&v245, (uint64_t)buf, 0);
    unint64_t v161 = *(void *)(v127 + 104);
    uint64_t v162 = *(void *)&buf[16];
    *(void *)(v127 + 56) = *(void *)buf;
    *(void *)(v127 + 72) = v162;
    LODWORD(v264) = 1;
    *(void *)&buf[24] = 0x3FF0000000000000;
    unint64_t v163 = *(void *)(v127 + 96);
    if (v163 >= v161)
    {
      unint64_t v168 = 0x8E38E38E38E38E39 * ((uint64_t)(v163 - (void)*v160) >> 3);
      unint64_t v169 = v168 + 1;
      if (v168 + 1 > 0x38E38E38E38E38ELL) {
        sub_190718FD4();
      }
      unint64_t v170 = 0x8E38E38E38E38E39 * ((uint64_t)(v161 - (void)*v160) >> 3);
      if (2 * v170 > v169) {
        unint64_t v169 = 2 * v170;
      }
      if (v170 >= 0x1C71C71C71C71C7) {
        unint64_t v171 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v171 = v169;
      }
      if (v171) {
        v172 = (char *)sub_1907B5928(v127 + 104, v171);
      }
      else {
        v172 = 0;
      }
      v173 = &v172[72 * v168];
      *(_OWORD *)v173 = *(_OWORD *)buf;
      long long v174 = *(_OWORD *)&buf[16];
      long long v175 = v263[0];
      long long v176 = v263[1];
      *((void *)v173 + 8) = v264;
      *((_OWORD *)v173 + 2) = v175;
      *((_OWORD *)v173 + 3) = v176;
      *((_OWORD *)v173 + 1) = v174;
      v178 = *(char **)(v127 + 88);
      v177 = *(char **)(v127 + 96);
      v179 = v173;
      if (v177 != v178)
      {
        do
        {
          *(_OWORD *)(v179 - 72) = *(_OWORD *)(v177 - 72);
          long long v180 = *(_OWORD *)(v177 - 56);
          long long v181 = *(_OWORD *)(v177 - 40);
          long long v182 = *(_OWORD *)(v177 - 24);
          *((_DWORD *)v179 - 2) = *((_DWORD *)v177 - 2);
          *(_OWORD *)(v179 - 24) = v182;
          *(_OWORD *)(v179 - 40) = v181;
          *(_OWORD *)(v179 - 56) = v180;
          v179 -= 72;
          v177 -= 72;
        }
        while (v177 != v178);
        v177 = *v160;
      }
      v167 = v173 + 72;
      *(void *)(v127 + 88) = v179;
      *(void *)(v127 + 96) = v173 + 72;
      *(void *)(v127 + 104) = &v172[72 * v171];
      if (v177) {
        operator delete(v177);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v163 = *(_OWORD *)buf;
      long long v164 = *(_OWORD *)&buf[16];
      long long v165 = v263[0];
      long long v166 = v263[1];
      *(void *)(v163 + 64) = v264;
      *(_OWORD *)(v163 + 32) = v165;
      *(_OWORD *)(v163 + 48) = v166;
      *(_OWORD *)(v163 + 16) = v164;
      v167 = (char *)(v163 + 72);
    }
    ++v128;
    *(void *)(v127 + 96) = v167;
    double v132 = v132 + *(double *)(v127 + 56);
    v127 += 112;
    if (v127 == *(void *)(a1 + 872))
    {
      if (v132 > 0.0)
      {
        uint64_t v193 = *v243;
        if (*v243 == v127)
        {
          uint64_t v41 = 1;
LABEL_113:
          v1 = v230;
          if (v230) {
            goto LABEL_83;
          }
          return v41;
        }
        v194 = (void **)(a1 + 936);
        v195 = (void *)(a1 + 952);
        v196 = *(float **)(a1 + 944);
        double v197 = 0.0;
        do
        {
          uint64_t v198 = v193;
          double v199 = *(double *)(v193 + 56) / v132;
          *(double *)(v193 + 64) = v199;
          double v197 = v197 + v199;
          float v200 = v197;
          if ((unint64_t)v196 >= *v195)
          {
            v202 = (float *)*v194;
            uint64_t v203 = ((char *)v196 - (unsigned char *)*v194) >> 2;
            unint64_t v204 = v203 + 1;
            if ((unint64_t)(v203 + 1) >> 62) {
              sub_190718FD4();
            }
            uint64_t v205 = *v195 - (void)v202;
            if (v205 >> 1 > v204) {
              unint64_t v204 = v205 >> 1;
            }
            if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v206 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v206 = v204;
            }
            if (v206)
            {
              v207 = (char *)sub_19074E100((uint64_t)v195, v206);
              v196 = *(float **)(a1 + 944);
              v202 = *(float **)(a1 + 936);
            }
            else
            {
              v207 = 0;
            }
            v208 = (float *)&v207[4 * v203];
            float *v208 = v200;
            v201 = v208 + 1;
            while (v196 != v202)
            {
              int v209 = *((_DWORD *)v196-- - 1);
              *((_DWORD *)v208-- - 1) = v209;
            }
            *(void *)(a1 + 936) = v208;
            *(void *)(a1 + 944) = v201;
            *(void *)(a1 + 952) = &v207[4 * v206];
            if (v202) {
              operator delete(v202);
            }
          }
          else
          {
            float *v196 = v200;
            v201 = v196 + 1;
          }
          *(void *)(a1 + 944) = v201;
          uint64_t v193 = v198 + 112;
          v196 = v201;
        }
        while (v198 + 112 != *(void *)(a1 + 872));
        v1 = v230;
        if (v193 != *v243)
        {
          uint64_t v210 = *v243 - 112;
          double v211 = 0.0;
          do
          {
            double v211 = v211 + *(double *)(v210 + 176) * *(double *)(v210 + 176);
            v210 += 112;
          }
          while (v210 != v198);
          if (v211 > 0.0) {
            *(double *)(a1 + 1608) = 1.0 / v211;
          }
        }
        goto LABEL_370;
      }
LABEL_329:
      v1 = v230;
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v189 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = v132;
          _os_log_impl(&dword_1906B8000, v189, OS_LOG_TYPE_ERROR, "CLMM,totalScore<=0,%{public}.1lf", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          LODWORD(v258[0]) = 134349056;
          *(double *)((char *)v258 + 4) = v132;
          v223 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v223);
          if (v223 != buf) {
            free(v223);
          }
          v1 = v230;
        }
      }
      v190 = *(void **)(a1 + 872);
      v191 = *(void **)(a1 + 864);
      while (v190 != v191)
      {
        v190 -= 14;
        sub_1907D5B4C(a1 + 880, v190);
      }
      uint64_t v41 = 0;
      uint64_t v42 = a1;
      *(void *)(a1 + 872) = v191;
LABEL_82:
      ++*(_DWORD *)(v42 + 104);
      if (v1) {
        goto LABEL_83;
      }
      return v41;
    }
  }
  if (v128 < v234)
  {
    uint64_t v142 = *(void *)(v127 + 8);
    v258[0] = *(void *)v127;
    v258[1] = v142;
    if (v142) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v142 + 8), 1uLL, memory_order_relaxed);
    }
    long long v143 = *(_OWORD *)(v127 + 16);
    long long v144 = *(_OWORD *)(v127 + 32);
    v258[6] = *(void *)(v127 + 48);
    *(_OWORD *)&v258[2] = v143;
    *(_OWORD *)&v258[4] = v144;
    long long v145 = *(_OWORD *)(v127 + 65);
    *(_OWORD *)&v258[7] = *(_OWORD *)(v127 + 56);
    *(_OWORD *)((char *)&v258[8] + 1) = v145;
    v260 = 0;
    uint64_t v261 = 0;
    v259 = 0;
    sub_1907B5854(&v259, *(const void **)(v127 + 88), *(void *)(v127 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v127 + 96) - *(void *)(v127 + 88)) >> 3));
    int v146 = 4;
    while (1)
    {
      char v147 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v240 + 88))(v240, v127, v242, v131);
      if ((v147 & 1) == 0) {
        break;
      }
      uint64_t v148 = v258[0];
      if (**(void **)v127 == *(void *)v258[0] && *(unsigned __int8 *)(v127 + 20) != BYTE4(v258[2]))
      {
        uint64_t v149 = v258[1];
        if (v258[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v258[1] + 8), 1uLL, memory_order_relaxed);
        }
        v150 = *(std::__shared_weak_count **)(v127 + 8);
        *(void *)uint64_t v127 = v148;
        *(void *)(v127 + 8) = v149;
        if (v150) {
          sub_1906BFE48(v150);
        }
        long long v151 = *(_OWORD *)&v258[2];
        long long v152 = *(_OWORD *)&v258[4];
        *(void *)(v127 + 48) = v258[6];
        *(_OWORD *)(v127 + 16) = v151;
        *(_OWORD *)(v127 + 32) = v152;
        long long v153 = *(_OWORD *)&v258[7];
        *(_OWORD *)(v127 + 65) = *(_OWORD *)((char *)&v258[8] + 1);
        *(_OWORD *)(v127 + 56) = v153;
        if ((void *)v127 != v258) {
          sub_1907B5974((char *)(v127 + 88), (char *)v259, (uint64_t)v260, 0x8E38E38E38E38E39 * ((v260 - (unsigned char *)v259) >> 3));
        }
        if (--v146) {
          continue;
        }
      }
      goto LABEL_289;
    }
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v159 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1906B8000, v159, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,prior intersection particles", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        LOWORD(v248) = 0;
        v188 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v188);
        if (v188 != buf) {
          free(v188);
        }
        double v131 = v238;
      }
    }
    ++*(_DWORD *)(a1 + 108);
LABEL_289:
    if (v259)
    {
      v260 = v259;
      operator delete(v259);
    }
    v133 = (double *)(a1 + 1128);
    int v129 = -1227133513 * (v229 >> 4);
    if (v258[1]) {
      sub_1906BFE48((std::__shared_weak_count *)v258[1]);
    }
    if ((v147 & 1) == 0)
    {
      uint64_t v41 = 0;
      goto LABEL_113;
    }
    goto LABEL_294;
  }
  if (v128 < v232)
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v240 + 88))(v240, v127, v242, (double)((v128 - v234) % 6 + 1) * 3.5 + 0.0))goto LABEL_294; {
    v1 = v230;
    }
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_412;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v214 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v214, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,fwd intersection particles", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_412;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      goto LABEL_446;
    }
    goto LABEL_440;
  }
  if (v128 < v228)
  {
    if (byte_1E929FD78)
    {
      byte_1E929FD78 = 0;
      float v154 = *(float *)&dword_1E929FD7C;
    }
    else
    {
      do
      {
        float v155 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
        float v156 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
        float v157 = (float)(v156 * v156) + (float)(v155 * v155);
      }
      while (v157 >= 1.0);
      float v154 = 0.0;
      if (v157 != 0.0)
      {
        float v158 = sqrtf((float)(logf((float)(v156 * v156) + (float)(v155 * v155)) * -2.0) / v157);
        *(float *)&dword_1E929FD7C = v156 * v158;
        byte_1E929FD78 = 1;
        float v154 = v155 * v158;
      }
    }
    double v131 = v238;
    if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v240 + 88))(v240, v127, v242, *(double *)(a1 + 1832) * v154 + 0.0))goto LABEL_294; {
    v1 = v230;
    }
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_412;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v215 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v215, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,prior snap particles", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_412;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      goto LABEL_446;
    }
LABEL_440:
    LOWORD(v258[0]) = 0;
    v225 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::predictionAndUpdate()", "CoreLocation: %s\n", v225);
    if (v225 != buf) {
      free(v225);
    }
    v1 = v230;
    goto LABEL_412;
  }
  if (v128 < v227) {
    goto LABEL_294;
  }
  if (byte_1E929FD78)
  {
    byte_1E929FD78 = 0;
    float v183 = *(float *)&dword_1E929FD7C;
  }
  else
  {
    do
    {
      float v184 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
      float v185 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
      float v186 = (float)(v185 * v185) + (float)(v184 * v184);
    }
    while (v186 >= 1.0);
    float v183 = 0.0;
    if (v186 != 0.0)
    {
      float v187 = sqrtf((float)(logf((float)(v185 * v185) + (float)(v184 * v184)) * -2.0) / v186);
      *(float *)&dword_1E929FD7C = v185 * v187;
      byte_1E929FD78 = 1;
      float v183 = v184 * v187;
    }
  }
  double v131 = v238;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v240 + 88))(v240, v127, v242, v236 + *(double *)(a1 + 1832) * v183))goto LABEL_294; {
  v1 = v230;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v216 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1906B8000, v216, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,alternate ambiguous particles", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_440;
      }
      goto LABEL_446;
    }
  }
LABEL_412:
  uint64_t v41 = 0;
  ++*(_DWORD *)(a1 + 108);
  if (!v1) {
    return v41;
  }
LABEL_83:
  sub_1906BFE48(v1);
  return v41;
}

void sub_1907C0D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56)
{
  if (a13) {
    sub_1906BFE48(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907C0EC4(uint64_t a1)
{
  uint64_t v316 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)(a1 + 1656);
  if (*(void *)(a1 + 1656))
  {
    double v3 = *(std::__shared_weak_count **)(a1 + 1664);
    *uint64_t v2 = 0;
    v2[1] = 0;
    if (v3) {
      sub_1906BFE48(v3);
    }
  }
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v4 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "CLMM,extractSolution", (uint8_t *)&buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      __int16 v239 = 0;
      float v185 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v185);
      if (v185 != &buf) {
        free(v185);
      }
    }
  }
  LOBYTE(v239) = 0;
  double v5 = (void *)(a1 + 984);
  long long v240 = 0u;
  double v6 = (void *)(a1 + 992);
  int v241 = 0;
  __int16 v242 = 1;
  int v243 = 0;
  long long v244 = 0u;
  long long v245 = 0u;
  long long v246 = 0u;
  char v247 = 0;
  *(_OWORD *)int v248 = 0u;
  long long v249 = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v251 = _Q1;
  long long v252 = 0u;
  uint64_t v250 = 0;
  unint64_t v253 = 0xBFF0000000000000;
  uint64_t v265 = 0;
  int v266 = 0;
  __int16 v264 = 0;
  memset(&v263[32], 0, 32);
  long long v267 = 0u;
  long long v268 = 0u;
  long long v269 = 0u;
  memset(v270, 0, 27);
  memset(&v270[32], 0, 48);
  long long v254 = 0u;
  long long v255 = 0u;
  long long v256 = 0u;
  long long v257 = 0u;
  long long v258 = 0u;
  long long v259 = 0u;
  long long v260 = 0u;
  long long v261 = 0u;
  long long v262 = 0u;
  memset(v263, 0, 30);
  unint64_t v272 = 0xBFF0000000000000;
  uint64_t v271 = 0;
  char v273 = 0;
  long long v281 = 0u;
  int v282 = 0;
  long long v274 = 0u;
  long long v275 = 0u;
  long long v276 = 0u;
  long long v277 = 0u;
  memset(v278, 0, sizeof(v278));
  long long v279 = 0u;
  char v280 = 0;
  __int16 v283 = 1;
  int v284 = 0;
  char v288 = 0;
  long long v286 = 0u;
  long long v287 = 0u;
  long long v285 = 0u;
  memset(v292, 0, sizeof(v292));
  long long v291 = 0u;
  long long v290 = 0u;
  *(void *)&_Q1 = *(void *)(a1 + 1224);
  long long v289 = 0u;
  if (*(double *)&_Q1 == 0.0 || *(unsigned char *)(a1 + 1356)) {
    *(void *)(a1 + 3144) = *(void *)(a1 + 1136);
  }
  double v236 = (void *)(a1 + 984);
  v10 = (void *)*v5;
  if ((void *)*v5 == v6) {
    goto LABEL_37;
  }
  int v11 = 0;
  int v237 = (double *)(a1 + 1128);
  uint64_t v12 = a1 + 992;
  do
  {
    if (!v10[7])
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      double v23 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", (uint8_t *)&buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_50;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_493;
      }
      goto LABEL_492;
    }
    if (*((unsigned char *)v10 + 200)) {
      uint64_t v13 = 216;
    }
    else {
      uint64_t v13 = 76;
    }
    int v14 = *(_DWORD *)((char *)v10 + v13);
    if (v14 > v11)
    {
      uint64_t v12 = (uint64_t)v10;
      int v11 = v14;
    }
    uint64_t v15 = (void *)v10[1];
    if (v15)
    {
      do
      {
        uint64_t v16 = v15;
        uint64_t v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        uint64_t v16 = (void *)v10[2];
        _ZF = *v16 == (void)v10;
        v10 = v16;
      }
      while (!_ZF);
    }
    v10 = v16;
  }
  while (v16 != v6);
  if (v11 <= 0)
  {
LABEL_37:
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v22 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_ERROR, "CLMM,Unexpected bestCount<=0", (uint8_t *)&buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_50;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    goto LABEL_493;
  }
  if ((void *)v12 == v6)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v25 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_ERROR, "CLMM,Unexpected no best candidate found", (uint8_t *)&buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_50;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    goto LABEL_493;
  }
  *(_WORD *)(a1 + 1649) = 0;
  if (!*(unsigned char *)(v12 + 200) || !*(unsigned char *)(v12 + 192) || *(_DWORD *)(v12 + 212) <= *(_DWORD *)(v12 + 208)) {
    goto LABEL_165;
  }
  uint64_t v17 = sub_1907D5E44((uint64_t)v236, (uint64_t *)(v12 + 224));
  if (v6 == (void *)v17)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v26 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_ERROR, "CLMM,Unexpected. There should be an outgoing road", (uint8_t *)&buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_50;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_493;
    }
LABEL_492:
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
LABEL_493:
    v297[0] = 0;
    float v186 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v186);
    if (v186 != &buf) {
      free(v186);
    }
    goto LABEL_50;
  }
  memset(v302, 0, 20);
  uint64_t v18 = *(void *)(v17 + 56);
  uint64_t v19 = *(void *)(v17 + 64);
  double v20 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
  if (v19)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    *(void *)v302 = v18;
    *(void *)&v302[8] = v19;
  }
  else
  {
    *(void *)v302 = *(void *)(v17 + 56);
  }
  if (!v18)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v30 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_ERROR, "CLMM,Unexpected NULL outgoing road candidate", (uint8_t *)&buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_521;
      }
      goto LABEL_573;
    }
LABEL_93:
    int v31 = 0;
    goto LABEL_162;
  }
  *(_DWORD *)&v302[16] = 0;
  v302[20] = *(unsigned char *)(v17 + 48);
  v302[21] = 0;
  float v27 = *(double *)(v12 + 856);
  *(float *)&double v304 = v27;
  double v28 = *(double *)(v12 + 848);
  *(void *)&long long v305 = *(void *)(v12 + 840);
  *((double *)&v305 + 1) = v28;
  uint64_t v306 = *(void *)(v12 + 960);
  if (*(double *)&v305 == 0.0 && v28 == 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v29 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_ERROR, "CLMM,Unexpected outgoing snapLat==snapLon==0", (uint8_t *)&buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_521:
        v297[0] = 0;
        double v199 = (std::string *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v199);
        if (v199 != &buf) {
          free(v199);
        }
        int v31 = 0;
        goto LABEL_162;
      }
LABEL_573:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      goto LABEL_521;
    }
    goto LABEL_93;
  }
  *(void *)v294 = 0;
  double v293 = 0.0;
  uint64_t v238 = 0;
  memset(&buf, 0, sizeof(buf));
  double v308 = 1.0;
  memset(v309, 0, sizeof(v309));
  sub_190799FB8(a1, a1 + 656, (uint64_t *)v302, v237, (double *)v294, &v293, (double *)&v238, (uint64_t)&buf, 0);
  double v32 = *(double *)(v12 + 5136);
  double v33 = fmod(v32 - v27, 360.0);
  if (v33 < 0.0) {
    double v33 = v33 + 360.0;
  }
  if (v33 > 180.0) {
    double v33 = v33 + -360.0;
  }
  double v34 = fabs(v33);
  double v35 = *(double *)(a1 + 1232);
  if (v35 >= 0.0)
  {
    double v39 = fmod(v35 - v27, 360.0);
    BOOL v37 = 0;
    if (v39 < 0.0) {
      double v39 = v39 + 360.0;
    }
    if (v39 > 180.0) {
      double v39 = v39 + -360.0;
    }
    double v40 = fabs(v39);
    BOOL v36 = v40 < 25.0;
    BOOL v38 = v40 < 25.0 || *(double *)(v12 + 248) >= 7.5;
    if (v38 && v34 >= 45.0 && v40 >= 25.0)
    {
      if (*(double *)(a1 + 1320) >= 20.0)
      {
        BOOL v36 = 0;
        BOOL v37 = 0;
      }
      else
      {
        double v42 = fmod(v32 - v35, 360.0);
        BOOL v36 = 0;
        if (v42 < 0.0) {
          double v42 = v42 + 360.0;
        }
        if (v42 > 180.0) {
          double v42 = v42 + -360.0;
        }
        double v43 = fabs(v42);
        BOOL v37 = v43 < 10.0;
        BOOL v38 = v43 >= 10.0;
      }
    }
  }
  else
  {
    BOOL v36 = 0;
    BOOL v37 = 0;
    BOOL v38 = 1;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v44 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v45 = *(void *)(a1 + 1136);
      std::string::size_type v46 = *(void *)(v12 + 5136);
      uint64_t v47 = *(void *)(a1 + 1232);
      uint64_t v48 = *(void *)(v12 + 248);
      uint64_t v49 = *(void *)(a1 + 1320);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134351360;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v45;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v46;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      double v308 = v27;
      *(_WORD *)v309 = 2050;
      *(void *)&v309[2] = v47;
      *(_WORD *)&v309[10] = 2050;
      *(void *)&v309[12] = v48;
      *(_WORD *)&v309[20] = 1026;
      *(_DWORD *)&v309[22] = v38;
      *(_WORD *)&v309[26] = 2050;
      *(void *)&v309[28] = v49;
      __int16 v310 = 1026;
      BOOL v311 = v34 >= 45.0;
      __int16 v312 = 1026;
      BOOL v313 = v36;
      __int16 v314 = 1026;
      BOOL v315 = v37;
      _os_log_impl(&dword_1906B8000, v44, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCourseAligned,%{public}d, isMeanCandidateAlignedWithCourse,%{public}d", (uint8_t *)&buf, 0x56u);
    }
    double v20 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    if (sub_1906CB57C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v206 = *(void *)(a1 + 1136);
      uint64_t v207 = *(void *)(v12 + 5136);
      uint64_t v208 = *(void *)(a1 + 1232);
      uint64_t v209 = *(void *)(v12 + 248);
      uint64_t v210 = *(void *)(a1 + 1320);
      *(_DWORD *)v297 = 134351360;
      *(void *)&v297[2] = v206;
      v297[6] = 2050;
      *(void *)&v297[7] = v207;
      v297[11] = 2050;
      *(double *)&v297[12] = v27;
      v297[16] = 2050;
      *(void *)&v297[17] = v208;
      v297[21] = 2050;
      *(void *)&v297[22] = v209;
      v297[26] = 1026;
      *(_DWORD *)&v297[27] = v38;
      v297[29] = 2050;
      *(void *)&v297[30] = v210;
      v297[34] = 1026;
      *(_DWORD *)&v297[35] = v34 >= 45.0;
      v297[37] = 1026;
      *(_DWORD *)&v297[38] = v36;
      v297[40] = 1026;
      BOOL v298 = v37;
      double v211 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v211);
      if (v211 != &buf) {
        free(v211);
      }
      double v20 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    }
  }
  if (*(double *)(a1 + 1792) < 8.05555556 && (*(int *)(v12 + 196) > 1 || *(double *)(a1 + 1208) > 10.0))
  {
    double v50 = 15.0;
    if (*(double *)(a1 + 1224) > 0.0
      && !*(unsigned char *)(a1 + 1356)
      && vabdd_f64(*(double *)(a1 + 1136), *(double *)(a1 + 3144)) < 20.0)
    {
      double v50 = 7.5;
    }
    if (v34 >= 45.0 && v36) {
      double v51 = v50 * 0.6;
    }
    else {
      double v51 = v50;
    }
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_141;
    }
    if (*((void *)v20 + 216) != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v52 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v53 = *(void *)(a1 + 1136);
      std::string::size_type v54 = *(void *)(v12 + 248);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      double v308 = v51;
      _os_log_impl(&dword_1906B8000, v52, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,exit distance check,distance,%{public}.2lf,exitDistance,%{public}.2lf", (uint8_t *)&buf, 0x20u);
    }
    double v20 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    if (sub_1906CB57C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v228 = *(void *)(a1 + 1136);
      uint64_t v229 = *(void *)(v12 + 248);
      *(_DWORD *)v297 = 134349568;
      *(void *)&v297[2] = v228;
      v297[6] = 2050;
      *(void *)&v297[7] = v229;
      v297[11] = 2050;
      *(double *)&v297[12] = v51;
      v230 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v230);
      if (v230 != &buf) {
        free(v230);
      }
      double v20 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
      if (v38) {
LABEL_142:
      }
        BOOL v38 = *(double *)(v12 + 248) > v51;
    }
    else
    {
LABEL_141:
      if (v38) {
        goto LABEL_142;
      }
    }
  }
  BOOL v55 = v34 >= 45.0 && v36;
  if (v55 && *(double *)(a1 + 1320) < 20.0)
  {
    if (!v38) {
      goto LABEL_154;
    }
LABEL_152:
    if (*(double *)(a1 + 1224) <= 0.0) {
      goto LABEL_154;
    }
    BOOL v56 = *(unsigned char *)(a1 + 1356) == 0;
  }
  else
  {
    if (v38 && *(int *)(v12 + 212) > 2 * *(int *)(v12 + 208)) {
      goto LABEL_152;
    }
LABEL_154:
    BOOL v56 = 0;
  }
  *(unsigned char *)(a1 + 1650) = v56;
  if (*(unsigned char *)(a1 + 96))
  {
    if (*((void *)v20 + 216) != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    int v57 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      std::string::size_type v58 = *(void *)(a1 + 1136);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v58;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v56;
      _os_log_impl(&dword_1906B8000, v57, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,outgoing condition,%{public}d", (uint8_t *)&buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v212 = *(void *)(a1 + 1136);
      *(_DWORD *)v297 = 134349312;
      *(void *)&v297[2] = v212;
      v297[6] = 1026;
      *(_DWORD *)&v297[7] = v56;
      v213 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v213);
      if (v213 != &buf) {
        free(v213);
      }
    }
  }
  int v31 = 1;
  *(unsigned char *)(a1 + 1649) = 1;
LABEL_162:
  if (*(void *)&v302[8]) {
    sub_1906BFE48(*(std::__shared_weak_count **)&v302[8]);
  }
  if (!v31)
  {
LABEL_50:
    uint64_t v21 = 0;
    goto LABEL_51;
  }
LABEL_165:
  memset(v297, 0, 20);
  v297[10] = 1;
  *(_DWORD *)&v297[12] = 0;
  uint64_t v301 = 0;
  __src = 0;
  v300 = 0;
  memset(&v297[16], 0, 49);
  double v59 = *(double *)(a1 + 1320);
  if (v59 < 19.0)
  {
    *(void *)(a1 + 1320) = 0x4033000000000000;
    sub_190802558(a1 + 656, (uint64_t)v237, *(unsigned __int8 *)(a1 + 752));
  }
  uint64_t v60 = *(void *)(a1 + 864);
  if (v60 != *(void *)(a1 + 872))
  {
    while (1)
    {
      *(unsigned char *)(v60 + 80) = 0;
      sub_1907BDE7C(v60, (uint64_t)&buf);
      if (buf.__r_.__value_.__r.__words[0] != *(void *)(v12 + 32)
        || buf.__r_.__value_.__s.__data_[16] != *(unsigned __int8 *)(v12 + 48))
      {
        break;
      }
      if (buf.__r_.__value_.__l.__size_ == *(void *)(v12 + 40))
      {
        if (*(unsigned char *)(a1 + 1650) || !*(unsigned char *)(v12 + 200) || !*(unsigned char *)(v12 + 192)) {
          goto LABEL_172;
        }
        double v71 = *(double *)(v60 + 48);
        double v72 = *(double *)(v12 + 528);
        if (buf.__r_.__value_.__s.__data_[16])
        {
          if (v71 <= v72) {
            goto LABEL_172;
          }
        }
        else if (v71 >= v72)
        {
          goto LABEL_172;
        }
        goto LABEL_207;
      }
      if (*(unsigned char *)(a1 + 1650)) {
        goto LABEL_180;
      }
LABEL_189:
      if (*(unsigned char *)(v12 + 200))
      {
        if (!*(unsigned char *)(v12 + 192))
        {
          sub_1907BDE7C(v60, (uint64_t)&buf);
          if (buf.__r_.__value_.__r.__words[0] == *(void *)(v12 + 224)
            && buf.__r_.__value_.__s.__data_[16] == *(unsigned __int8 *)(v12 + 240)
            && buf.__r_.__value_.__l.__size_ == *(void *)(v12 + 232))
          {
            double v69 = *(double *)(v60 + 48);
            double v70 = *(double *)(v12 + 1120);
            if (buf.__r_.__value_.__s.__data_[16])
            {
              if (v69 >= v70) {
                goto LABEL_205;
              }
            }
            else if (v69 <= v70)
            {
LABEL_205:
              *(unsigned char *)(v60 + 80) = 1;
LABEL_172:
              *(unsigned char *)(v60 + 80) = 1;
              memset(&buf, 0, sizeof(buf));
              double v308 = 1.0;
              memset(v309, 0, sizeof(v309));
              sub_190799FB8(a1, a1 + 656, (uint64_t *)v60, v237, (double *)v302, (double *)v294, &v293, (uint64_t)&buf, 0);
              *(void *)(v60 + 56) = buf.__r_.__value_.__r.__words[0];
              *(void *)(v60 + 72) = *((void *)&buf.__r_.__value_.__l + 2);
              if (*(double *)(v60 + 56) > *(double *)&v297[28])
              {
                uint64_t v62 = *(void *)v60;
                uint64_t v61 = *(void *)(v60 + 8);
                if (v61) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
                }
                uint64_t v63 = *(std::__shared_weak_count **)&v297[4];
                *(void *)v297 = v62;
                *(void *)&v297[4] = v61;
                if (v63) {
                  sub_1906BFE48(v63);
                }
                long long v64 = *(_OWORD *)(v60 + 16);
                long long v65 = *(_OWORD *)(v60 + 32);
                *(void *)&v297[24] = *(void *)(v60 + 48);
                *(_OWORD *)&v297[8] = v64;
                *(_OWORD *)&v297[16] = v65;
                long long v66 = *(_OWORD *)(v60 + 56);
                *(_OWORD *)((char *)&v297[32] + 1) = *(_OWORD *)(v60 + 65);
                *(_OWORD *)&v297[28] = v66;
                if ((_WORD *)v60 != v297) {
                  sub_1907B5974((char *)&__src, *(char **)(v60 + 88), *(void *)(v60 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v60 + 96) - *(void *)(v60 + 88)) >> 3));
                }
              }
              goto LABEL_208;
            }
          }
        }
      }
LABEL_207:
      *(unsigned char *)(v60 + 80) = 0;
LABEL_208:
      v60 += 112;
      if (v60 == *(void *)(a1 + 872)) {
        goto LABEL_209;
      }
    }
    if (!*(unsigned char *)(a1 + 1650)) {
      goto LABEL_189;
    }
LABEL_180:
    if (*(unsigned char *)(v12 + 200))
    {
      if (*(unsigned char *)(v12 + 192))
      {
        sub_1907BDE7C(v60, (uint64_t)&buf);
        if (buf.__r_.__value_.__r.__words[0] == *(void *)(v12 + 224)
          && buf.__r_.__value_.__s.__data_[16] == *(unsigned __int8 *)(v12 + 240)
          && buf.__r_.__value_.__l.__size_ == *(void *)(v12 + 232))
        {
          double v67 = *(double *)(v60 + 48);
          double v68 = *(double *)(v12 + 1120);
          if (buf.__r_.__value_.__s.__data_[16])
          {
            if (v67 >= v68) {
              goto LABEL_172;
            }
          }
          else if (v67 <= v68)
          {
            goto LABEL_172;
          }
        }
      }
    }
    goto LABEL_189;
  }
LABEL_209:
  *(unsigned char *)(a1 + 1008) = 1;
  uint64_t v73 = *(void *)v297;
  uint64_t v74 = *(void *)&v297[4];
  if (*(void *)&v297[4]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v297[4] + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v235 = (uint64_t *)(a1 + 1016);
  *(void *)(a1 + 1016) = v73;
  double v75 = *(std::__shared_weak_count **)(a1 + 1024);
  *(void *)(a1 + 1024) = v74;
  BOOL v76 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
  if (v75) {
    sub_1906BFE48(v75);
  }
  *(void *)(a1 + 1064) = *(void *)&v297[24];
  long long v77 = *(_OWORD *)&v297[16];
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)&v297[8];
  *(_OWORD *)(a1 + 1048) = v77;
  *(_OWORD *)(a1 + 1072) = *(_OWORD *)&v297[28];
  *(_OWORD *)(a1 + 1081) = *(_OWORD *)((char *)&v297[32] + 1);
  if (v235 != (uint64_t *)v297) {
    sub_1907B5974((char *)(a1 + 1104), (char *)__src, (uint64_t)v300, 0x8E38E38E38E38E39 * ((v300 - (unsigned char *)__src) >> 3));
  }
  if (*(unsigned char *)(a1 + 1650))
  {
    sub_1907BDE7C((uint64_t)v297, (uint64_t)&buf);
    if (*(void *)(v12 + 224) == buf.__r_.__value_.__r.__words[0]
      && *(unsigned __int8 *)(v12 + 240) == buf.__r_.__value_.__s.__data_[16]
      && *(void *)(v12 + 232) == buf.__r_.__value_.__l.__size_)
    {
      long long v78 = *(_OWORD *)(v12 + 688);
      long long v79 = *(_OWORD *)(v12 + 704);
      long long v80 = *(_OWORD *)(v12 + 736);
      *(_OWORD *)(a1 + 1160) = *(_OWORD *)(v12 + 720);
      *(_OWORD *)(a1 + 1176) = v80;
      *(_OWORD *)int v237 = v78;
      *(_OWORD *)(a1 + 1144) = v79;
      long long v81 = *(_OWORD *)(v12 + 752);
      long long v82 = *(_OWORD *)(v12 + 768);
      long long v83 = *(_OWORD *)(v12 + 800);
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(v12 + 784);
      *(_OWORD *)(a1 + 1240) = v83;
      *(_OWORD *)(a1 + 1192) = v81;
      *(_OWORD *)(a1 + 1208) = v82;
      std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(v12 + 816));
      memcpy((void *)(a1 + 1280), (const void *)(v12 + 840), 0x118uLL);
      uint64_t v85 = *(void *)(v12 + 56);
      uint64_t v84 = *(void *)(v12 + 64);
      if (v84) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v84 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 1656) = v85;
      uint64_t v86 = *(std::__shared_weak_count **)(a1 + 1664);
      *(void *)(a1 + 1664) = v84;
      if (v86) {
        sub_1906BFE48(v86);
      }
      if (*(unsigned char *)(a1 + 96) && *v2)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        char v87 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v88 = *(void *)(a1 + 1136);
          std::string::size_type v89 = **(void **)(a1 + 1656);
          double v90 = *(double *)(v12 + 224);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349569;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v88;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v89;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
          double v308 = v90;
          _os_log_impl(&dword_1906B8000, v87, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", (uint8_t *)&buf, 0x20u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v202 = *(void *)(a1 + 1136);
          uint64_t v203 = **(void **)(a1 + 1656);
          double v204 = *(double *)(v12 + 224);
          *(_DWORD *)v302 = 134349569;
          *(void *)&v302[4] = v202;
          *(_WORD *)&v302[12] = 2049;
          *(void *)&v302[14] = v203;
          __int16 v303 = 2049;
          double v304 = v204;
          uint64_t v205 = (std::string *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v205);
          if (v205 != &buf) {
            free(v205);
          }
        }
      }
      if (v59 >= 19.0) {
        goto LABEL_253;
      }
LABEL_252:
      *(double *)(a1 + 1320) = v59;
      sub_190802558(a1 + 656, (uint64_t)v237, *(unsigned __int8 *)(a1 + 752));
      goto LABEL_253;
    }
  }
  if (*(unsigned char *)(v12 + 200))
  {
    if (!*(unsigned char *)(v12 + 192))
    {
      sub_1907BDE7C((uint64_t)v297, (uint64_t)&buf);
      if (*(void *)(v12 + 224) == buf.__r_.__value_.__r.__words[0]
        && *(unsigned __int8 *)(v12 + 240) == buf.__r_.__value_.__s.__data_[16]
        && *(void *)(v12 + 232) == buf.__r_.__value_.__l.__size_)
      {
        sub_19076BC8C(v2, (uint64_t *)(v12 + 56));
        if (*(unsigned char *)(a1 + 96))
        {
          if (*v2)
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            uint64_t v91 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              std::string::size_type v92 = *(void *)(a1 + 1136);
              std::string::size_type v93 = **(void **)(a1 + 1656);
              double v94 = **(double **)v297;
              LODWORD(buf.__r_.__value_.__l.__data_) = 134349569;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v92;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2049;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v93;
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2049;
              double v308 = v94;
              _os_log_impl(&dword_1906B8000, v91, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Using particle on outgoing,incomingID,%{private}lld,outgoingID,%{private}lld", (uint8_t *)&buf, 0x20u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              uint64_t v220 = *(void *)(a1 + 1136);
              uint64_t v221 = **(void **)(a1 + 1656);
              double v222 = **(double **)v297;
              *(_DWORD *)v302 = 134349569;
              *(void *)&v302[4] = v220;
              *(_WORD *)&v302[12] = 2049;
              *(void *)&v302[14] = v221;
              __int16 v303 = 2049;
              double v304 = v222;
              v223 = (std::string *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v223);
              if (v223 != &buf) {
                free(v223);
              }
            }
          }
        }
      }
    }
  }
  long long v95 = *(_OWORD *)(v12 + 4968);
  long long v96 = *(_OWORD *)(v12 + 4984);
  long long v97 = *(_OWORD *)(v12 + 5016);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(v12 + 5000);
  *(_OWORD *)(a1 + 1176) = v97;
  *(_OWORD *)int v237 = v95;
  *(_OWORD *)(a1 + 1144) = v96;
  long long v98 = *(_OWORD *)(v12 + 5032);
  long long v99 = *(_OWORD *)(v12 + 5048);
  long long v100 = *(_OWORD *)(v12 + 5080);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(v12 + 5064);
  *(_OWORD *)(a1 + 1240) = v100;
  *(_OWORD *)(a1 + 1192) = v98;
  *(_OWORD *)(a1 + 1208) = v99;
  std::string::operator=((std::string *)(a1 + 1256), (const std::string *)(v12 + 5096));
  memcpy((void *)(a1 + 1280), (const void *)(v12 + 5120), 0x118uLL);
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v101 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v102 = *(void *)(a1 + 1136);
      sub_1907BDE7C((uint64_t)v297, (uint64_t)&buf);
      *(_DWORD *)v302 = 134349313;
      *(void *)&v302[4] = v102;
      *(_WORD *)&v302[12] = 2049;
      *(void *)&v302[14] = buf.__r_.__value_.__r.__words[0];
      _os_log_impl(&dword_1906B8000, v101, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,bestParticleRoadID,%{private}lld", v302, 0x16u);
      BOOL v76 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v187 = *(void *)(a1 + 1136);
      sub_1907BDE7C((uint64_t)v297, (uint64_t)v302);
      *(_DWORD *)v294 = 134349313;
      *(void *)&v294[4] = v187;
      __int16 v295 = 2049;
      uint64_t v296 = *(void *)v302;
      v188 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v188);
      if (v188 != &buf) {
        free(v188);
      }
      BOOL v76 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    }
  }
  if (v59 < 19.0 && !*(unsigned char *)(a1 + 1649)) {
    goto LABEL_252;
  }
LABEL_253:
  if (*(unsigned char *)(a1 + 1490))
  {
    double v103 = 0.0;
    if (*(_DWORD *)(a1 + 1528) == 1) {
      goto LABEL_306;
    }
  }
  if (*(unsigned char *)(a1 + 1649) && !*(unsigned char *)(a1 + 1650) || (v104 = (void *)*v236, (void *)*v236 == v6))
  {
    double v103 = 0.0;
    goto LABEL_306;
  }
  double v103 = 0.0;
  double v105 = 3.0;
  while (2)
  {
    if (v104 == (void *)v12
      || *(unsigned char *)(v12 + 200)
      && v104[4] == *(void *)(v12 + 224)
      && *((unsigned __int8 *)v104 + 48) == *(unsigned __int8 *)(v12 + 240)
      && v104[5] == *(void *)(v12 + 232))
    {
      goto LABEL_293;
    }
    double v106 = *((double *)v104 + 17);
    if (v106 == 0.0) {
      goto LABEL_293;
    }
    if (v106 > v103) {
      double v103 = *((double *)v104 + 17);
    }
    double v107 = *(double *)(v12 + 136) / v106;
    double v108 = v107 <= 1000000.0 ? v107 : 1000000.0;
    if (v108 > v105) {
      goto LABEL_293;
    }
    double v109 = *(double *)(v12 + 5136);
    double v110 = fmod(v109 - *((double *)v104 + 642), 360.0);
    if (v110 < 0.0) {
      double v110 = v110 + 360.0;
    }
    if (v110 > 180.0) {
      double v110 = v110 + -360.0;
    }
    double v111 = fabs(v110);
    *(void *)v294 = 0;
    double v293 = 0.0;
    sub_190839A78((double *)(a1 + 608), (double *)v294, &v293, *(double *)(v12 + 5120), *(double *)(v12 + 5128), *(double *)(v12 + 5040), v109, *((double *)v104 + 640), *((double *)v104 + 641));
    if (v111 >= 35.0)
    {
LABEL_293:
      v119 = (void *)v104[1];
      if (v119)
      {
        do
        {
          unint64_t v120 = v119;
          v119 = (void *)*v119;
        }
        while (v119);
      }
      else
      {
        do
        {
          unint64_t v120 = (void *)v104[2];
          _ZF = *v120 == (void)v104;
          v104 = v120;
        }
        while (!_ZF);
      }
      v104 = v120;
      if (v120 == v6) {
        goto LABEL_306;
      }
      continue;
    }
    break;
  }
  if (*(unsigned char *)(a1 + 1848) && !*(unsigned char *)(a1 + 2233))
  {
    double v112 = v293;
    double v113 = fabs(v293);
    std::string::size_type v114 = *(void *)v294;
    double v115 = fabs(*(double *)v294);
    BOOL v116 = v115 > 2.0 && v113 < 1.5;
    if (!v116 && v115 <= 10.0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (*((void *)v76 + 216) != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v118 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349824;
          *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v111;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v114;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          double v308 = v108;
          *(_WORD *)v309 = 2050;
          *(double *)&v309[2] = v112;
          _os_log_impl(&dword_1906B8000, v118, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution not detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", (uint8_t *)&buf, 0x2Au);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (*((void *)v76 + 216) != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          *(_DWORD *)v302 = 134349824;
          *(double *)&v302[4] = v111;
          *(_WORD *)&v302[12] = 2050;
          *(void *)&v302[14] = v114;
          __int16 v303 = 2050;
          double v304 = v108;
          LOWORD(v305) = 2050;
          *(double *)((char *)&v305 + 2) = v112;
          int v121 = (std::string *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v121);
          if (v121 != &buf) {
            free(v121);
          }
          BOOL v76 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
        }
      }
      double v105 = 3.0;
      if (*(unsigned char *)(a1 + 1393)) {
        goto LABEL_477;
      }
      goto LABEL_293;
    }
  }
  *(unsigned char *)(a1 + 1393) = 1;
LABEL_477:
  if (*(unsigned char *)(a1 + 96))
  {
    if (*((void *)v76 + 216) != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    float v184 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349824;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v111;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = *(void *)v294;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
      double v308 = v108;
      *(_WORD *)v309 = 2050;
      *(double *)&v309[2] = v293;
      _os_log_impl(&dword_1906B8000, v184, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution detected,fabsCourseDiff,%{public}.1lf,acrossTrack,%{public}.1lf,ratio,%{public}.3lf,alongTrackToAlt,%{public}.1lf", (uint8_t *)&buf, 0x2Au);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (*((void *)v76 + 216) != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_DWORD *)v302 = 134349824;
      *(double *)&v302[4] = v111;
      *(_WORD *)&v302[12] = 2050;
      *(void *)&v302[14] = *(void *)v294;
      __int16 v303 = 2050;
      double v304 = v108;
      LOWORD(v305) = 2050;
      *(double *)((char *)&v305 + 2) = v293;
      v201 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v201);
      if (v201 != &buf) {
        free(v201);
      }
    }
  }
  *(unsigned char *)(a1 + 1648) = 1;
  sub_1907BDEFC(a1 + 1680, v104 + 10);
  *(unsigned char *)(a1 + 1672) = 1;
  if (*(unsigned char *)(a1 + 1848) && !*(unsigned char *)(a1 + 2233)) {
    *(void *)(a1 + 3152) = *(void *)(a1 + 1136);
  }
LABEL_306:
  if (!*(unsigned char *)(a1 + 1393)) {
    goto LABEL_328;
  }
  uint64_t v122 = *(unsigned __int8 **)(a1 + 4048);
  int v123 = *(unsigned __int8 **)(a1 + 4056);
  if (v122 == v123) {
    goto LABEL_328;
  }
  int v124 = v122 + 20;
  while (2)
  {
    sub_1907BDE7C((uint64_t)v235, (uint64_t)&buf);
    v125 = v124 - 20;
    int v126 = *(uint64_t **)(v124 - 20);
    uint64_t v127 = *(std::__shared_weak_count **)(v124 - 12);
    if (v127)
    {
      atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
      int v128 = *v124;
      atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v130 = *v126;
      uint64_t v129 = v126[1];
      sub_1906BFE48(v127);
    }
    else
    {
      int v128 = *v124;
      uint64_t v130 = *v126;
      uint64_t v129 = v126[1];
    }
    _ZF = buf.__r_.__value_.__r.__words[0] == v130 && buf.__r_.__value_.__s.__data_[16] == v128;
    if (_ZF)
    {
      BOOL v132 = buf.__r_.__value_.__l.__size_ == v129;
      if (!v127) {
        goto LABEL_320;
      }
      goto LABEL_319;
    }
    BOOL v132 = 0;
    if (v127) {
LABEL_319:
    }
      sub_1906BFE48(v127);
LABEL_320:
    if (!v132)
    {
      v124 += 56;
      if (v125 + 56 == v123) {
        goto LABEL_328;
      }
      continue;
    }
    break;
  }
  *(unsigned char *)(a1 + 1393) = 0;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  v133 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v134 = *(void *)(a1 + 1136);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v134;
    _os_log_impl(&dword_1906B8000, v133, OS_LOG_TYPE_DEBUG, "%{public}.1lf,CLMM,ambiguity reverted using route-hints", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v191 = *(void *)(a1 + 1136);
    *(_DWORD *)v302 = 134349056;
    *(void *)&v302[4] = v191;
    v192 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v192);
    if (v192 != &buf) {
      free(v192);
    }
  }
LABEL_328:
  if (*(unsigned char *)(a1 + 1848)
    && *(unsigned char *)(a1 + 2233)
    && !*(unsigned char *)(a1 + 1393)
    && *(double *)(a1 + 1136) - *(double *)(a1 + 3152) < 3.1)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      float v135 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1906B8000, v135, OS_LOG_TYPE_DEBUG, "CLMM,ambiguous solution hysteresis", (uint8_t *)&buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        *(_WORD *)v302 = 0;
        float v200 = (std::string *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v200);
        if (v200 != &buf) {
          free(v200);
        }
      }
    }
    *(unsigned char *)(a1 + 1393) = 1;
    *(unsigned char *)(a1 + 1648) = 1;
    *(unsigned char *)(a1 + 1672) = 0;
  }
  double v136 = *(double *)&v297[28];
  *(void *)(a1 + 1616) = *(void *)&v297[28];
  if (v103 <= 0.0)
  {
    double v137 = *(double *)(a1 + 1632);
  }
  else
  {
    double v137 = v136 / v103;
    *(double *)(a1 + 1632) = v137;
    if (v137 > 1000000.0)
    {
      *(void *)(a1 + 1632) = 0x412E848000000000;
      double v137 = 1000000.0;
    }
  }
  *(_DWORD *)(a1 + 1408) = 1;
  uint64_t v138 = *(void *)&v297[16];
  uint64_t v139 = *(void *)&v297[20];
  *(void *)(a1 + 1280) = *(void *)&v297[16];
  *(void *)(a1 + 1288) = v139;
  double v140 = *(float *)&v297[12];
  *(double *)(a1 + 1296) = *(float *)&v297[12];
  *(void *)(a1 + 1416) = v138;
  *(void *)(a1 + 1424) = v139;
  *(double *)(a1 + 1432) = v140;
  uint64_t v141 = *(void *)v297;
  *(void *)(a1 + 1248) = *(void *)(*(void *)v297 + 20);
  *(void *)(a1 + 1400) = *(void *)&v297[24];
  *(float *)(a1 + 1304) = (float)v11;
  float v142 = v137;
  *(float *)(a1 + 1308) = v142;
  if (*(char *)(v141 + 71) < 0) {
    sub_1906C00FC(&buf, *(void **)(v141 + 48), *(void *)(v141 + 56));
  }
  else {
    std::string buf = *(std::string *)(v141 + 48);
  }
  std::string::operator=((std::string *)(a1 + 1256), &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 1240) = **(void **)v297;
  double v143 = *(double *)(a1 + 1232);
  double v144 = -1.0;
  if (v143 >= 0.0)
  {
    double v145 = fmod(v143 - *(double *)(a1 + 1296), 360.0);
    if (v145 < 0.0) {
      double v145 = v145 + 360.0;
    }
    if (v145 > 180.0) {
      double v145 = v145 + -360.0;
    }
    double v144 = fabs(v145);
  }
  *(double *)(a1 + 1600) = v144;
  if (!*(unsigned char *)(a1 + 1357) && !*(unsigned char *)(a1 + 816))
  {
    double v152 = *(double *)(a1 + 824) - *(double *)(a1 + 832);
    if (v152 >= 0.0 && v152 < 30.0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        long long v153 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          int v154 = *(unsigned __int8 *)(a1 + 1648);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v154;
          _os_log_impl(&dword_1906B8000, v153, OS_LOG_TYPE_DEBUG, "CLMM,dismounted recently,doNotSnapCourse,%{public}d", (uint8_t *)&buf, 8u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          int v155 = *(unsigned __int8 *)(a1 + 1648);
          *(_DWORD *)v302 = 67240192;
          *(_DWORD *)&v302[4] = v155;
          float v156 = (std::string *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v156);
          if (v156 != &buf) {
            free(v156);
          }
        }
      }
      goto LABEL_467;
    }
  }
  double v146 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 2024), *(double *)(a1 + 2032), *(double *)(a1 + 1200));
  double v147 = sub_1907BD04C(a1, 35.0);
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v148 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
      *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v147;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
      *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v146;
      _os_log_impl(&dword_1906B8000, v148, OS_LOG_TYPE_DEBUG, "CLMM,distToNextMulti,%{public}.1lf, distFromPriorCrumb,%{public}.1lf", (uint8_t *)&buf, 0x16u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_DWORD *)v302 = 134349312;
      *(double *)&v302[4] = v147;
      *(_WORD *)&v302[12] = 2050;
      *(double *)&v302[14] = v146;
      v189 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v189);
      if (v189 != &buf) {
        free(v189);
      }
    }
  }
  double v149 = *(double *)(a1 + 1320);
  if (v149 <= 0.0 || v149 >= 45.0 || *(double *)(a1 + 1600) <= 30.0)
  {
    if (*(unsigned char *)(a1 + 776))
    {
      BOOL v150 = 0;
      double v151 = *(double *)(a1 + 800);
      if (v151 > 0.0 && v151 < 45.0) {
        BOOL v150 = *(double *)(a1 + 792) > 30.0;
      }
    }
    else
    {
      BOOL v150 = 0;
    }
  }
  else
  {
    BOOL v150 = 1;
  }
  if (*(unsigned char *)(a1 + 1648) || v147 < 0.0 || v147 >= 35.0 || !v150)
  {
LABEL_393:
    if (!*(unsigned char *)(a1 + 1648) && *(unsigned char *)(a1 + 1649) && v150)
    {
      if (*(unsigned char *)(v12 + 200))
      {
        if (*(unsigned char *)(v12 + 192))
        {
          if (sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(v12 + 408), *(double *)(v12 + 416), *(double *)(a1 + 1200)) < 35.0)
          {
            *(unsigned char *)(a1 + 1648) = 1;
            if (*(unsigned char *)(a1 + 96))
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              v159 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                std::string::size_type v160 = *(void *)(a1 + 1600);
                LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v160;
                _os_log_impl(&dword_1906B8000, v159, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,at intersection,fabsCourseDifference,%{public}.1lf", (uint8_t *)&buf, 0xCu);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
                }
                uint64_t v218 = *(void *)(a1 + 1600);
                *(_DWORD *)v302 = 134349056;
                *(void *)&v302[4] = v218;
                v219 = (std::string *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v219);
                if (v219 != &buf) {
                  free(v219);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1648) = 1;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      float v157 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v147;
        _os_log_impl(&dword_1906B8000, v157, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,distanceToIntersection,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        *(_DWORD *)v302 = 134349056;
        *(double *)&v302[4] = v147;
        v190 = (std::string *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v190);
        if (v190 != &buf) {
          free(v190);
        }
      }
      goto LABEL_393;
    }
  }
  double v161 = *(double *)(a1 + 1320);
  if (v161 > 0.0 && v161 < 5.0 && *(unsigned char *)(a1 + 752) && *(double *)(a1 + 1600) > 45.0)
  {
    *(unsigned char *)(a1 + 1648) = 1;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v162 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v163 = *(void *)(a1 + 1600);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v163;
        _os_log_impl(&dword_1906B8000, v162, OS_LOG_TYPE_DEBUG, "CLMM,not snapping course,reason,turning,fabsCourseDifference,%{public}.1lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v197 = *(void *)(a1 + 1600);
        *(_DWORD *)v302 = 134349056;
        *(void *)&v302[4] = v197;
        uint64_t v198 = (std::string *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v198);
        if (v198 != &buf) {
          free(v198);
        }
      }
      goto LABEL_417;
    }
  }
  else
  {
LABEL_417:
    if (!*(unsigned char *)(a1 + 1648)) {
      goto LABEL_467;
    }
  }
  if ((*(double *)(a1 + 1224) < 0.2 || *(unsigned char *)(a1 + 1356))
    && v146 < 2.5
    && (*(double *)(a1 + 1600) > 135.0 || *(unsigned char *)(a1 + 776) && *(double *)(a1 + 792) > 30.0))
  {
    *(unsigned char *)(a1 + 1648) = 0;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      long long v164 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        std::string::size_type v165 = *(void *)(a1 + 1136);
        std::string::size_type v166 = *(void *)(a1 + 1600);
        double v167 = *(double *)(a1 + 792);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v165;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v166;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
        double v308 = v167;
        _os_log_impl(&dword_1906B8000, v164, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,snapping course,reason,gps course not reliable,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", (uint8_t *)&buf, 0x20u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v193 = *(void *)(a1 + 1136);
        uint64_t v194 = *(void *)(a1 + 1600);
        double v195 = *(double *)(a1 + 792);
        *(_DWORD *)v302 = 134349568;
        *(void *)&v302[4] = v193;
        *(_WORD *)&v302[12] = 2050;
        *(void *)&v302[14] = v194;
        __int16 v303 = 2050;
        double v304 = v195;
        v196 = (std::string *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v196);
        if (v196 != &buf) {
          free(v196);
        }
      }
    }
    if (*(double *)(a1 + 1600) > 135.0 && !*(unsigned char *)(a1 + 776))
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        unint64_t v168 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v169 = *(void *)(a1 + 1136);
          std::string::size_type v170 = *(void *)(a1 + 1232);
          double v171 = *(double *)(a1 + 1296);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v169;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v170;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          double v308 = v171;
          _os_log_impl(&dword_1906B8000, v168, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,overwriting unreliable GPS course,static case, priorCourse,%{public}.1lf,newCourse,%{public}.1lf", (uint8_t *)&buf, 0x20u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v214 = *(void *)(a1 + 1136);
          uint64_t v215 = *(void *)(a1 + 1232);
          double v216 = *(double *)(a1 + 1296);
          *(_DWORD *)v302 = 134349568;
          *(void *)&v302[4] = v214;
          *(_WORD *)&v302[12] = 2050;
          *(void *)&v302[14] = v215;
          __int16 v303 = 2050;
          double v304 = v216;
          uint64_t v217 = (std::string *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v217);
          if (v217 != &buf) {
            free(v217);
          }
        }
      }
      *(void *)(a1 + 1232) = *(void *)(a1 + 1296);
      *(void *)(a1 + 1320) = 0x403DE66666666666;
      *(void *)(a1 + 1600) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 1648)
    && *(unsigned char *)(a1 + 384)
    && *(double *)(a1 + 1224) < 5.0
    && v146 < 5.0
    && fabs(*(double *)(a1 + 1640)) < 1.4)
  {
    double v172 = fmod(*(double *)(a1 + 1296) - *(double *)(a1 + 288), 360.0);
    if (v172 < 0.0) {
      double v172 = v172 + 360.0;
    }
    if (v172 > 180.0) {
      double v172 = v172 + -360.0;
    }
    if (fabs(v172) < 10.0 && (*(double *)(a1 + 1600) > 135.0 || *(unsigned char *)(a1 + 776) && *(double *)(a1 + 792) > 135.0))
    {
      *(unsigned char *)(a1 + 1648) = 0;
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v173 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v174 = *(void *)(a1 + 1136);
          std::string::size_type v175 = *(void *)(a1 + 1600);
          double v176 = *(double *)(a1 + 792);
          LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v174;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v175;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
          double v308 = v176;
          _os_log_impl(&dword_1906B8000, v173, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,snapping course, reason,gps course flipping at low speeds,%{public}.1lf,fabsCourseDiffWithPriorSnap,%{public}.1lf", (uint8_t *)&buf, 0x20u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v224 = *(void *)(a1 + 1136);
          uint64_t v225 = *(void *)(a1 + 1600);
          double v226 = *(double *)(a1 + 792);
          *(_DWORD *)v302 = 134349568;
          *(void *)&v302[4] = v224;
          *(_WORD *)&v302[12] = 2050;
          *(void *)&v302[14] = v225;
          __int16 v303 = 2050;
          double v304 = v226;
          int v227 = (std::string *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v227);
          if (v227 != &buf) {
            free(v227);
          }
        }
      }
      if (*(double *)(a1 + 1600) > 135.0 && !*(unsigned char *)(a1 + 776))
      {
        if (*(unsigned char *)(a1 + 96))
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          v177 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            std::string::size_type v178 = *(void *)(a1 + 1136);
            std::string::size_type v179 = *(void *)(a1 + 1232);
            double v180 = *(double *)(a1 + 1296);
            LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v178;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v179;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
            double v308 = v180;
            _os_log_impl(&dword_1906B8000, v177, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,overwriting unreliable GPS course,low speed case,priorCourse,%{public}.1lf,newCourse,%{public}.1lf", (uint8_t *)&buf, 0x20u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            uint64_t v231 = *(void *)(a1 + 1136);
            uint64_t v232 = *(void *)(a1 + 1232);
            double v233 = *(double *)(a1 + 1296);
            *(_DWORD *)v302 = 134349568;
            *(void *)&v302[4] = v231;
            *(_WORD *)&v302[12] = 2050;
            *(void *)&v302[14] = v232;
            __int16 v303 = 2050;
            double v304 = v233;
            int v234 = (std::string *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::extractSolution()", "CoreLocation: %s\n", (const char *)v234);
            if (v234 != &buf) {
              free(v234);
            }
          }
        }
        *(void *)(a1 + 1232) = *(void *)(a1 + 1296);
        *(void *)(a1 + 1320) = 0x403DE66666666666;
        *(void *)(a1 + 1600) = 0;
      }
    }
  }
LABEL_467:
  if (*(unsigned char *)(a1 + 1648)) {
    *(void *)(a1 + 1296) = *(void *)(a1 + 1232);
  }
  char v181 = *(unsigned char *)(a1 + 1393);
  memset(&buf, 0, sizeof(buf));
  double v308 = 1.0;
  memset(v309, 0, sizeof(v309));
  sub_190799FB8(a1, a1 + 656, v235, v237, (double *)(a1 + 1576), (double *)(a1 + 1584), (double *)(a1 + 1568), (uint64_t)&buf, v181);
  std::string::size_type v182 = buf.__r_.__value_.__r.__words[0];
  std::string::size_type v183 = buf.__r_.__value_.__r.__words[2];
  *(void *)(a1 + 1072) = buf.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 1088) = v183;
  *(void *)(a1 + 1592) = *(void *)&v309[24];
  *(void *)(a1 + 1616) = v182;
  *(void *)(a1 + 1360) = v183;
  if (__src)
  {
    v300 = __src;
    operator delete(__src);
  }
  if (*(void *)&v297[4]) {
    sub_1906BFE48(*(std::__shared_weak_count **)&v297[4]);
  }
  if ((void)v289) {
    operator delete((void *)v289);
  }
  uint64_t v21 = 1;
LABEL_51:
  if (*((void *)&v281 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v281 + 1));
  }
  if (*((void *)&v279 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v279 + 1));
  }
  if (SHIBYTE(v259) < 0) {
    operator delete(*((void **)&v258 + 1));
  }
  if (v248[0]) {
    operator delete(v248[0]);
  }
  if (*((void *)&v240 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v240 + 1));
  }
  return v21;
}

void sub_1907C47A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1907B515C(&STACK[0x3C0]);
  sub_1907BC88C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1907C48BC(uint64_t a1)
{
  *(void *)&v63[803] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v18 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v59 = v19;
      _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWithAdustment,number of particles are 0", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v20 = *(void *)(a1 + 1136);
    int v52 = 134349056;
    uint64_t v53 = v20;
LABEL_41:
    v24 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "CoreLocation: %s\n");
LABEL_42:
    if (v24 != buf) {
      free(v24);
    }
    return;
  }
  *(void *)(a1 + 1448) = 0;
  *(void *)(a1 + 1440) = 0;
  if (!*(unsigned char *)(a1 + 1008))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v21 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v59 = v22;
      _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v23 = *(void *)(a1 + 1136);
    int v52 = 134349056;
    uint64_t v53 = v23;
    goto LABEL_41;
  }
  if (!*(void *)(a1 + 1016))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v25 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)(a1 + 1136);
      *(_DWORD *)std::string buf = 134349056;
      uint64_t v59 = v26;
      _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,roadWithAdustment,road is nullptr", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v27 = *(void *)(a1 + 1136);
      int v52 = 134349056;
      uint64_t v53 = v27;
      v24 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "CoreLocation: %s\n");
      goto LABEL_42;
    }
    return;
  }
  uint64_t v50 = 0;
  double v51 = 0.0;
  sub_190839A78((double *)(a1 + 608), &v51, (double *)&v50, *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200), *(double *)(a1 + 1432), *(double *)(a1 + 1184), *(double *)(a1 + 1192));
  uint64_t v2 = *(void *)(a1 + 1016);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(int *)(v2 + 20);
  if (v3 == 9 || ((int v4 = *(_DWORD *)(v2 + 72), v4 != 255) ? (v5 = v4 == 6) : (v5 = 1), v5))
  {
    BOOL v6 = *(unsigned char *)(v2 + 16) == 0;
    double v7 = (double *)&unk_190885420;
LABEL_12:
    double v8 = v7[v6];
    goto LABEL_13;
  }
  double v8 = *(double *)(v2 + 96);
  if (v8 < 0.000001)
  {
    int v36 = *(unsigned __int8 *)(v2 + 16);
    if ((v3 & 0xFFFFFFFE) == 8)
    {
      BOOL v6 = v36 == 0;
      double v7 = dbl_190882500;
      goto LABEL_12;
    }
    if (v36)
    {
      if (v3 < 8)
      {
        double v42 = (double *)&unk_190885540;
LABEL_90:
        double v8 = v42[v3];
        goto LABEL_13;
      }
      double v8 = 5.55000019;
    }
    else
    {
      if (v3 < 8)
      {
        double v42 = (double *)&unk_190885580;
        goto LABEL_90;
      }
      double v8 = 7.4000001;
    }
  }
LABEL_13:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  double v9 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a1 + 1136);
    uint64_t v11 = *(void *)(a1 + 1016);
    int v12 = *(_DWORD *)(v11 + 20);
    LODWORD(v11) = *(unsigned __int8 *)(v11 + 16);
    *(_DWORD *)std::string buf = 134350080;
    uint64_t v59 = v10;
    __int16 v60 = 1026;
    *(_DWORD *)uint64_t v61 = v12;
    *(_WORD *)&v61[4] = 1026;
    *(_DWORD *)&v61[6] = v11;
    *(_WORD *)uint64_t v62 = 2050;
    *(double *)&v62[2] = v8;
    v63[0] = 2050;
    *(double *)&v63[1] = v51;
    _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", buf, 0x2Cu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v43 = *(void *)(a1 + 1136);
    uint64_t v44 = *(void *)(a1 + 1016);
    int v45 = *(_DWORD *)(v44 + 20);
    LODWORD(v44) = *(unsigned __int8 *)(v44 + 16);
    int v52 = 134350080;
    uint64_t v53 = v43;
    __int16 v54 = 1026;
    *(_DWORD *)BOOL v55 = v45;
    *(_WORD *)&v55[4] = 1026;
    *(_DWORD *)&v55[6] = v44;
    *(_WORD *)BOOL v56 = 2050;
    *(double *)&v56[2] = v8;
    *(_WORD *)int v57 = 2050;
    *(double *)&v57[2] = v51;
    std::string::size_type v46 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMapMatcher::adjustSolutionforRoadWidth()", "CoreLocation: %s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  if (v8 >= 0.000001)
  {
    *(double *)(a1 + 1552) = v8;
    uint64_t v13 = *(void *)(a1 + 1280);
    uint64_t v48 = *(void *)(a1 + 1288);
    uint64_t v49 = v13;
    double v14 = *(double *)(a1 + 768);
    double v15 = *(double *)(a1 + 1136);
    if (v14 <= 0.0 || vabdd_f64(v15, v14) > 120.0)
    {
      *(_DWORD *)(a1 + 760) = sub_1907BA824(*(double *)(a1 + 1184), *(double *)(a1 + 1192));
      *(double *)(a1 + 768) = v15;
    }
    double v16 = v8 * 0.5;
    if (*(unsigned char *)(*(void *)(a1 + 1016) + 16)) {
      goto LABEL_23;
    }
    int v28 = *(_DWORD *)(a1 + 760);
    double v29 = 0.0;
    switch(v28)
    {
      case 2:
        if (v51 <= 0.0)
        {
          if (v51 < 0.0) {
            double v29 = fabs(v51) + 1.85000002;
          }
          goto LABEL_61;
        }
        double v37 = fabs(v51);
        if (v37 < v16) {
          goto LABEL_24;
        }
        double v38 = v16 + -1.85000002;
        if (v16 <= 1.85000002) {
          double v38 = v16 * 0.85;
        }
        double v39 = v37 - v38;
        break;
      case 1:
        if (v51 < 0.0)
        {
          double v40 = fabs(v51);
          if (v40 < v16) {
            goto LABEL_24;
          }
          double v41 = v16 + -1.85000002;
          if (v16 <= 1.85000002) {
            double v41 = v16 * 0.85;
          }
          double v29 = v40 - v41;
          goto LABEL_61;
        }
        if (v51 <= 0.0)
        {
LABEL_61:
          sub_1908397AC((double *)(a1 + 608), (double *)&v49, (double *)&v48, *(double *)(a1 + 1184), *(double *)(a1 + 1192), *(double *)(a1 + 1200), *(double *)(a1 + 1432), v29);
          *(double *)(a1 + 1568) = v29;
          *(_DWORD *)(a1 + 1408) = 2;
          uint64_t v33 = v48;
          uint64_t v32 = v49;
          *(void *)(a1 + 1280) = v49;
          *(void *)(a1 + 1288) = v33;
          *(void *)(a1 + 1440) = v32;
          *(void *)(a1 + 1448) = v33;
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          double v34 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v35 = *(void *)(a1 + 1136);
            *(_DWORD *)std::string buf = 134349824;
            uint64_t v59 = v35;
            __int16 v60 = 2050;
            *(double *)uint64_t v61 = v51;
            *(_WORD *)&v61[8] = 2050;
            *(double *)uint64_t v62 = v29;
            *(_WORD *)&v62[8] = 2050;
            *(double *)uint64_t v63 = v16;
            _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,roadWidthCorrection,acrossTrack,%{public}.2lf,correction,%{public}.2lf,halfRoadWidth,%{public}.2lf", buf, 0x2Au);
          }
          if (!sub_1906CB57C(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v47 = *(void *)(a1 + 1136);
          int v52 = 134349824;
          uint64_t v53 = v47;
          __int16 v54 = 2050;
          *(double *)BOOL v55 = v51;
          *(_WORD *)&v55[8] = 2050;
          *(double *)BOOL v56 = v29;
          *(_WORD *)&v56[8] = 2050;
          *(double *)int v57 = v16;
          goto LABEL_41;
        }
        double v39 = fabs(v51) + 1.85000002;
        break;
      case 0:
LABEL_23:
        double v17 = fabs(v51);
        if (v17 < v16)
        {
LABEL_24:
          *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
          return;
        }
        double v30 = v16 + -1.85000002;
        if (v16 <= 1.85000002) {
          double v30 = v16 * 0.85;
        }
        double v31 = v17 - v30;
        if (v51 >= 0.0) {
          double v29 = -v31;
        }
        else {
          double v29 = v31;
        }
        goto LABEL_61;
      default:
        goto LABEL_61;
    }
    double v29 = -v39;
    goto LABEL_61;
  }
}

void sub_1907C5298(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864) || !*(unsigned char *)(a1 + 1392)) {
    return;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v2 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEBUG, "CLMM,performPartialMatching", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  double v3 = *(double *)(a1 + 1280);
  double v4 = *(double *)(a1 + 1288);
  if (*(unsigned char *)(a1 + 1490) && *(_DWORD *)(a1 + 1528) == 1)
  {
    *(double *)(a1 + 1456) = v3;
    *(double *)(a1 + 1464) = v4;
    *(_DWORD *)(a1 + 2972) = 0;
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    BOOL v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "CLMM,skipping partial match as solution is inside tunnel", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (*(double *)(a1 + 2200) < 4.0) {
    *(_DWORD *)(a1 + 2972) = 0;
  }
  double v7 = *(double *)(a1 + 1600);
  double v8 = *(double *)(a1 + 1360);
  if (v7 >= 0.0 && v7 < 25.0)
  {
    int v11 = *(_DWORD *)(a1 + 2972);
    if (v8 > 10.0)
    {
LABEL_33:
      int v10 = v11 + 2;
      goto LABEL_38;
    }
LABEL_35:
    if (v11 <= 0) {
      int v10 = 0;
    }
    else {
      int v10 = v11 - 1;
    }
    goto LABEL_38;
  }
  if (v8 <= 6.0)
  {
    if (v7 > 45.0)
    {
      if (v8 <= 8.0)
      {
        int v15 = *(_DWORD *)(a1 + 2972);
        if (v8 <= 10.0) {
          int v10 = v15 + 4;
        }
        else {
          int v10 = v15 + 3;
        }
        goto LABEL_38;
      }
      int v11 = *(_DWORD *)(a1 + 2972);
      goto LABEL_33;
    }
    int v11 = *(_DWORD *)(a1 + 2972);
    goto LABEL_35;
  }
  int v10 = *(_DWORD *)(a1 + 2972) + 1;
LABEL_38:
  *(_DWORD *)(a1 + 2972) = v10;
  if (v10 >= 1)
  {
    if (v10 >= 0x1F)
    {
      int v10 = 30;
      *(_DWORD *)(a1 + 2972) = 30;
    }
    double v12 = (double)v10 / 40.0;
    double v3 = *(double *)(a1 + 1184) * v12 + (1.0 - v12) * v3;
    double v4 = v12 * *(double *)(a1 + 1192) + (1.0 - v12) * v4;
    if (v7 >= 0.0 && v7 > 20.0) {
      *(void *)(a1 + 1296) = *(void *)(a1 + 1232);
    }
    *(_DWORD *)(a1 + 1408) = 3;
    *(double *)(a1 + 1280) = v3;
    *(double *)(a1 + 1288) = v4;
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v13 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        int v14 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)std::string buf = 67240704;
        int v19 = v14;
        __int16 v20 = 2050;
        double v21 = v12;
        __int16 v22 = 2050;
        double v23 = 1.0 - v12;
        _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEBUG, "CLMM,partial snapping,poorVarFactorCount,%{public}d,weightGPS,%{public}.2lf,weightSnap,%{public}.2lf", buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        double v17 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMapMatcher::performPartialMatching()", "CoreLocation: %s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
    }
  }
  *(double *)(a1 + 1456) = v3;
  *(double *)(a1 + 1464) = v4;
}

uint64_t sub_1907C5864(uint64_t a1, double *a2, double *a3, unsigned char *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  *a4 = 1;
  uint64_t v9 = *(void *)(a1 + 8);
  double v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v55 = (uint64_t)&v55;
  BOOL v56 = &v55;
  uint64_t v57 = 0;
  long long v10 = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)&v48[16] = *(_OWORD *)(a1 + 1192);
  long long v49 = v10;
  long long v11 = *(_OWORD *)(a1 + 1240);
  long long v50 = *(_OWORD *)(a1 + 1224);
  long long v51 = v11;
  long long v12 = *(_OWORD *)(a1 + 1144);
  v47[0] = *(_OWORD *)(a1 + 1128);
  v47[1] = v12;
  long long v13 = *(_OWORD *)(a1 + 1176);
  v47[2] = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)uint64_t v48 = v13;
  if (*(char *)(a1 + 1279) < 0)
  {
    sub_1906C00FC(&v52, *(void **)(a1 + 1256), *(void *)(a1 + 1264));
  }
  else
  {
    long long v52 = *(_OWORD *)(a1 + 1256);
    uint64_t v53 = *(void *)(a1 + 1272);
  }
  memcpy(v54, (const void *)(a1 + 1280), sizeof(v54));
  *(_OWORD *)&v48[8] = *(_OWORD *)&v54[17];
  *((void *)&v50 + 1) = v54[19];
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *, uint64_t, double))(*(void *)v9 + 64))(v9, &v55, v47, 1, *a2) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      int v36 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__s1[0]) = 0;
        _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_DEBUG, "CLMM,roadsWithinDistance returned false", (uint8_t *)__s1, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(__s1, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        LOWORD(__p[0]) = 0;
        double v42 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "CoreLocation: %s\n", v42);
        if (v42 != (char *)__s1) {
          free(v42);
        }
      }
    }
    uint64_t v37 = 0;
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_89;
  }
  if (!v57)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      double v38 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__s1[0]) = 0;
        _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_ERROR, "CLMM,Unexpected roadsWithinDistance returned empty list", (uint8_t *)__s1, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(__s1, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        LOWORD(__p[0]) = 0;
        uint64_t v44 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "CoreLocation: %s\n", v44);
        if (v44 != (char *)__s1) {
          free(v44);
        }
      }
    }
    uint64_t v37 = 0;
    goto LABEL_89;
  }
  int v14 = v56;
  if (v56 == &v55)
  {
LABEL_76:
    unsigned int v39 = *(unsigned __int8 *)(a1 + 96);
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      double v40 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
      {
        LOWORD(__s1[0]) = 0;
        _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_INFO, "CLMM,Unexpected roadsWithinDistance returned only railways", (uint8_t *)__s1, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(__s1, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        LOWORD(__p[0]) = 0;
        uint64_t v43 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, BOOL &)", "CoreLocation: %s\n", v43);
        if (v43 != (char *)__s1) {
          free(v43);
        }
      }
      unsigned int v39 = 0;
    }
    int v34 = 1;
    goto LABEL_86;
  }
  char v15 = 1;
  do
  {
    uint64_t v16 = v14[2];
    if (*(unsigned char *)(v16 + 17)) {
      goto LABEL_49;
    }
    double v17 = (std::__shared_weak_count *)v14[3];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(void *)(a1 + 1016);
    if (*(void *)v18 == *(void *)v16) {
      goto LABEL_44;
    }
    float v19 = *((float *)v14 + 10);
    if (*(char *)(v18 + 71) < 0)
    {
      sub_1906C00FC(__s1, *(void **)(v18 + 48), *(void *)(v18 + 56));
    }
    else
    {
      *(_OWORD *)__s1 = *(_OWORD *)(v18 + 48);
      uint64_t v59 = *(void *)(v18 + 64);
    }
    if (*(char *)(v16 + 71) < 0)
    {
      sub_1906C00FC(__p, *(void **)(v16 + 48), *(void *)(v16 + 56));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v16 + 48);
      uint64_t v46 = *(void *)(v16 + 64);
    }
    char v20 = HIBYTE(v59);
    if (v59 >= 0) {
      double v21 = (void *)HIBYTE(v59);
    }
    else {
      double v21 = __s1[1];
    }
    __int16 v22 = (void *)HIBYTE(v46);
    int v23 = SHIBYTE(v46);
    if (v46 < 0) {
      __int16 v22 = __p[1];
    }
    if (v21 != v22)
    {
      BOOL v33 = 0;
      if ((SHIBYTE(v46) & 0x80000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_52;
    }
    if (v46 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      uint64_t v24 = (void **)__p[0];
    }
    if (SHIBYTE(v59) < 0)
    {
      BOOL v33 = memcmp(__s1[0], v24, (size_t)__s1[1]) == 0;
      goto LABEL_41;
    }
    if (HIBYTE(v59))
    {
      uint64_t v25 = HIBYTE(v59) - 1;
      uint64_t v26 = __s1;
      do
      {
        int v28 = *(unsigned __int8 *)v26;
        uint64_t v26 = (void **)((char *)v26 + 1);
        int v27 = v28;
        int v30 = *(unsigned __int8 *)v24;
        uint64_t v24 = (void **)((char *)v24 + 1);
        int v29 = v30;
        BOOL v32 = v25-- != 0;
        BOOL v33 = v27 == v29;
      }
      while (v27 == v29 && v32);
LABEL_41:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_52;
    }
    BOOL v33 = 1;
    if ((SHIBYTE(v46) & 0x80000000) == 0)
    {
LABEL_42:
      if ((v20 & 0x80) == 0) {
        goto LABEL_43;
      }
      goto LABEL_53;
    }
LABEL_52:
    operator delete(__p[0]);
    if ((v59 & 0x8000000000000000) == 0)
    {
LABEL_43:
      if (!v33) {
        goto LABEL_54;
      }
      goto LABEL_44;
    }
LABEL_53:
    operator delete(__s1[0]);
    if (!v33)
    {
LABEL_54:
      double v35 = fmod(*(double *)(a1 + 1432) - v19, 360.0);
      if (v35 < 0.0) {
        double v35 = v35 + 360.0;
      }
      if (v35 > 180.0) {
        double v35 = v35 + -360.0;
      }
      if (fabs(v35) >= *a3)
      {
        int v34 = 0;
      }
      else
      {
        int v34 = 1;
        *a4 = 1;
      }
      goto LABEL_45;
    }
LABEL_44:
    int v34 = 16;
LABEL_45:
    if (v17) {
      sub_1906BFE48(v17);
    }
    if ((v34 | 0x10) != 0x10) {
      goto LABEL_85;
    }
    char v15 = 0;
LABEL_49:
    int v14 = (uint64_t *)v14[1];
  }
  while (v14 != &v55);
  if (v15) {
    goto LABEL_76;
  }
  int v34 = 0;
  *a4 = 0;
LABEL_85:
  unsigned int v39 = 1;
LABEL_86:
  if (v34) {
    uint64_t v37 = v39;
  }
  else {
    uint64_t v37 = 1;
  }
LABEL_89:
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  sub_190770ADC(&v55);
  if (v8) {
    sub_1906BFE48(v8);
  }
  return v37;
}

void sub_1907C5FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_190770ADC(&a72);
  if (v72) {
    sub_1906BFE48(v72);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1907C6068(uint64_t a1)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 872);
  uint64_t v3 = *(void *)(a1 + 864);
  if (v2 != v3 && *(unsigned char *)(a1 + 652)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    BOOL v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "CLMM,prepareSeeding", (uint8_t *)&buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      LOWORD(v104) = 0;
      long long v81 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v81);
      if (v81 != (char *)&buf) {
        free(v81);
      }
    }
  }
  BOOL v6 = *(_DWORD **)(a1 + 8);
  double v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v8 = *(double *)(a1 + 1208);
  double v9 = *(double *)(a1 + 1328);
  if (v9 > 0.0)
  {
    double v10 = *(double *)(a1 + 1336);
    if (v10 > 0.0) {
      double v8 = sqrt(v10 / 2.45 * (v10 / 2.45) + v9 / 2.45 * (v9 / 2.45));
    }
  }
  double v11 = v8 * 4.0;
  double v12 = 75.0;
  if (v11 >= 75.0)
  {
    double v12 = v11;
    if (v11 > 249.9999) {
      double v12 = 249.9999;
    }
  }
  if (v2 != v3 && *(unsigned char *)(a1 + 1008))
  {
    double v13 = *(double *)(a1 + 1184);
    if (v13 == 0.0 && *(double *)(a1 + 1192) == 0.0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      int v14 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb lat==lon==0", (uint8_t *)&buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        uint64_t v84 = v7;
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_203;
        }
        goto LABEL_207;
      }
      goto LABEL_36;
    }
    double v15 = *(double *)(a1 + 1280);
    double v16 = *(double *)(a1 + 1288);
    if (v15 == 0.0 && v16 == 0.0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      double v17 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb snapLat==snapLon==0", (uint8_t *)&buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        uint64_t v84 = v7;
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1)
        {
LABEL_203:
          LOWORD(v104) = 0;
          long long v83 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v83);
          if (v83 != (char *)&buf) {
            free(v83);
          }
          double v7 = v84;
          goto LABEL_36;
        }
LABEL_207:
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        goto LABEL_203;
      }
LABEL_36:
      uint64_t v4 = 0;
      ++*(_DWORD *)(a1 + 104);
      if (v7) {
        goto LABEL_191;
      }
      return v4;
    }
    double v18 = sub_1906DA618((double *)(a1 + 608), v13, *(double *)(a1 + 1192), v15, v16, *(double *)(a1 + 1200));
    if (v12 < v18) {
      double v12 = v18 + 10.0;
    }
  }
  double v19 = 1249.9995;
  uint64_t v86 = v3;
  if (v12 <= 1249.9995)
  {
    double v19 = v12;
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    char v20 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 134349056;
      *(double *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_ERROR, "CLMM,Unexpected maxDistance,%{public}.1lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      LODWORD(v104) = 134349056;
      *(double *)((char *)&v104 + 4) = v12;
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v21);
      if (v21 != (char *)&buf) {
        free(v21);
      }
    }
  }
  v6[9] = 0;
  uint64_t v99 = (uint64_t)&v99;
  long long v100 = &v99;
  uint64_t v101 = 0;
  std::string::size_type v89 = (double *)(a1 + 1128);
  if (((*(uint64_t (**)(_DWORD *, uint64_t *, double))(*(void *)v6 + 64))(v6, &v99, v19) & 1) == 0)
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      double v42 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_DEBUG, "CLMM,roadsWithinDistance returned false", (uint8_t *)&buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        LOWORD(v104) = 0;
        long long v82 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v82);
        if (v82 != (char *)&buf) {
          free(v82);
        }
      }
    }
    uint64_t v4 = 0;
    ++*(_DWORD *)(a1 + 108);
    goto LABEL_190;
  }
  if (!v101)
  {
    uint64_t v4 = 0;
    ++*(_DWORD *)(a1 + 104);
    goto LABEL_190;
  }
  char v87 = (uint64_t *)(a1 + 888);
  __int16 v22 = *(void **)(a1 + 896);
  int v23 = *(void **)(a1 + 888);
  while (v22 != v23)
  {
    v22 -= 14;
    sub_1907D5B4C(a1 + 904, v22);
  }
  *(void *)(a1 + 896) = v23;
  sub_1906DDB40(v87, 0x60uLL);
  *(void *)(a1 + 968) = *(void *)(a1 + 960);
  std::string::size_type v88 = (void **)(a1 + 960);
  uint64_t v85 = v7;
  sub_1907C72B0((void **)(a1 + 960), 0x60uLL);
  long long v104 = 0uLL;
  LODWORD(v105) = 0;
  WORD2(v105) = 1;
  DWORD2(v105) = 0;
  double v109 = 0;
  uint64_t v110 = 0;
  double v108 = 0;
  long long v106 = 0u;
  memset(v107, 0, sizeof(v107));
  uint64_t v24 = v100;
  if (v100 == &v99)
  {
    double v25 = 0.0;
  }
  else
  {
    double v25 = 0.0;
    double v26 = 0.0;
    double v27 = 0.0;
    do
    {
      if (*(unsigned char *)(v24[2] + 17) && *(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        int v28 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_DEBUG, "CLMM,including railway", (uint8_t *)&buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          LOWORD(__s1[0]) = 0;
          double v40 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v40);
          if (v40 != (char *)&buf) {
            free(v40);
          }
        }
      }
      LODWORD(v93) = 0;
      __s1[0] = 0;
      __s1[1] = 0;
      WORD2(v93) = 1;
      DWORD2(v93) = 0;
      long long v97 = 0;
      uint64_t v98 = 0;
      __p = 0;
      long long v94 = 0u;
      memset(v95, 0, 33);
      int v30 = (void *)v24[2];
      int v29 = (atomic_ullong *)v24[3];
      if (v29)
      {
        atomic_fetch_add_explicit(v29 + 1, 1uLL, memory_order_relaxed);
        double v31 = (std::__shared_weak_count *)__s1[1];
        __s1[0] = v30;
        __s1[1] = v29;
        if (v31)
        {
          sub_1906BFE48(v31);
          int v30 = __s1[0];
        }
      }
      else
      {
        __s1[0] = (void *)v24[2];
        __s1[1] = 0;
      }
      long long v32 = *((_OWORD *)v24 + 3);
      long long v93 = *((_OWORD *)v24 + 2);
      long long v94 = v32;
      v95[0] = v24[8];
      if (v30)
      {
        long long buf = 0uLL;
        *(void *)&long long v112 = 0;
        *((void *)&v112 + 1) = 0x3FF0000000000000;
        long long v113 = 0u;
        long long v114 = 0u;
        LODWORD(v115) = 0;
        sub_190799FB8(a1, a1 + 656, v24 + 2, v89, (double *)__dst, &v103, &v102, (uint64_t)&buf, 0);
        v95[1] = buf;
        v95[3] = v112;
        if (*(double *)&buf <= v27)
        {
          double v36 = v27;
          if (*(double *)&buf > v26) {
            double v26 = *(double *)&buf;
          }
        }
        else
        {
          int v34 = __s1[0];
          BOOL v33 = __s1[1];
          if (__s1[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)__s1[1] + 1, 1uLL, memory_order_relaxed);
          }
          double v35 = (std::__shared_weak_count *)*((void *)&v104 + 1);
          *(void *)&long long v104 = v34;
          *((void *)&v104 + 1) = v33;
          if (v35) {
            sub_1906BFE48(v35);
          }
          long long v105 = v93;
          long long v106 = v94;
          *(void *)double v107 = v95[0];
          *(_OWORD *)&v107[8] = *(_OWORD *)&v95[1];
          *(_OWORD *)&v107[17] = *(_OWORD *)((char *)&v95[2] + 1);
          sub_1907B5974((char *)&v108, (char *)__p, (uint64_t)v97, 0x8E38E38E38E38E39 * ((v97 - (unsigned char *)__p) >> 3));
          double v36 = *(double *)&v95[1];
          double v26 = v27;
        }
        unint64_t v38 = *(void *)(a1 + 896);
        if (v38 >= *(void *)(a1 + 904))
        {
          uint64_t v39 = sub_1907D5EFC(v87, (uint64_t)__s1);
        }
        else
        {
          sub_1907D6024(a1 + 904, *(void *)(a1 + 896), (uint64_t)__s1);
          uint64_t v39 = v38 + 112;
          *(void *)(a1 + 896) = v38 + 112;
        }
        *(void *)(a1 + 896) = v39;
        double v25 = v25 + *(double *)&v95[1];
        double v27 = v36;
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v37 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLMM,Unexpected NULL road", (uint8_t *)&buf, 2u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          LOWORD(__dst[0]) = 0;
          double v41 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::prepareSeeding()", "CoreLocation: %s\n", v41);
          if (v41 != (char *)&buf) {
            free(v41);
          }
        }
        ++*(_DWORD *)(a1 + 104);
      }
      if (__p)
      {
        long long v97 = __p;
        operator delete(__p);
      }
      if (__s1[1]) {
        sub_1906BFE48((std::__shared_weak_count *)__s1[1]);
      }
      if (!v30)
      {
        uint64_t v4 = 0;
        goto LABEL_185;
      }
      uint64_t v24 = (uint64_t *)v24[1];
    }
    while (v24 != &v99);
  }
  uint64_t v43 = *(void *)(a1 + 888);
  if (v43 == *(void *)(a1 + 896))
  {
    uint64_t v4 = 0;
    ++*(_DWORD *)(a1 + 104);
    goto LABEL_186;
  }
  uint64_t v44 = (void *)(a1 + 976);
  int v45 = *(float **)(a1 + 968);
  double v46 = 0.0;
  do
  {
    double v47 = *(double *)(v43 + 56) / v25;
    *(double *)(v43 + 64) = v47;
    double v46 = v46 + v47;
    float v48 = v46;
    if ((unint64_t)v45 >= *v44)
    {
      long long v50 = (float *)*v88;
      uint64_t v51 = ((char *)v45 - (unsigned char *)*v88) >> 2;
      unint64_t v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 62) {
        sub_190718FD4();
      }
      uint64_t v53 = *v44 - (void)v50;
      if (v53 >> 1 > v52) {
        unint64_t v52 = v53 >> 1;
      }
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v52;
      }
      if (v54)
      {
        uint64_t v55 = (char *)sub_19074E100(a1 + 976, v54);
        int v45 = *(float **)(a1 + 968);
        long long v50 = *(float **)(a1 + 960);
      }
      else
      {
        uint64_t v55 = 0;
      }
      BOOL v56 = (float *)&v55[4 * v51];
      *BOOL v56 = v48;
      long long v49 = v56 + 1;
      while (v45 != v50)
      {
        int v57 = *((_DWORD *)v45-- - 1);
        *((_DWORD *)v56-- - 1) = v57;
      }
      *(void *)(a1 + 960) = v56;
      *(void *)(a1 + 968) = v49;
      *(void *)(a1 + 976) = &v55[4 * v54];
      if (v50) {
        operator delete(v50);
      }
    }
    else
    {
      float *v45 = v48;
      long long v49 = v45 + 1;
    }
    *(void *)(a1 + 968) = v49;
    v43 += 112;
    int v45 = v49;
  }
  while (v43 != *(void *)(a1 + 896));
  *(void *)(a1 + 1624) = 0;
  if (v2 == v86)
  {
LABEL_183:
    uint64_t v4 = 1;
    goto LABEL_186;
  }
  std::string::size_type v58 = v100;
  if (v100 == &v99)
  {
    *(void *)(a1 + 1632) = 0;
    goto LABEL_183;
  }
  do
  {
    uint64_t v118 = 0;
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    *((void *)&v114 + 1) = 0;
    char v117 = 0;
    uint64_t v59 = v58[2];
    uint64_t v60 = (std::__shared_weak_count *)v58[3];
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long buf = v59;
    *((void *)&buf + 1) = v60;
    long long v61 = *((_OWORD *)v58 + 2);
    long long v62 = *((_OWORD *)v58 + 3);
    *(void *)&long long v114 = v58[8];
    long long v112 = v61;
    long long v113 = v62;
    uint64_t v63 = *(void *)(a1 + 1016);
    if (v59 != v63)
    {
      if (*(char *)(v59 + 71) < 0)
      {
        sub_1906C00FC(__s1, *(void **)(v59 + 48), *(void *)(v59 + 56));
        uint64_t v63 = *(void *)(a1 + 1016);
      }
      else
      {
        *(_OWORD *)__s1 = *(_OWORD *)(v59 + 48);
        *(void *)&long long v93 = *(void *)(v59 + 64);
      }
      if (*(char *)(v63 + 71) < 0)
      {
        sub_1906C00FC(__dst, *(void **)(v63 + 48), *(void *)(v63 + 56));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(v63 + 48);
        uint64_t v91 = *(void *)(v63 + 64);
      }
      char v64 = BYTE7(v93);
      if ((SBYTE7(v93) & 0x80u) == 0) {
        long long v65 = (void *)BYTE7(v93);
      }
      else {
        long long v65 = __s1[1];
      }
      long long v66 = (void *)HIBYTE(v91);
      int v67 = SHIBYTE(v91);
      if (v91 < 0) {
        long long v66 = __dst[1];
      }
      if (v65 == v66)
      {
        if (v91 >= 0) {
          double v68 = __dst;
        }
        else {
          double v68 = (void **)__dst[0];
        }
        if (SBYTE7(v93) < 0)
        {
          BOOL v77 = memcmp(__s1[0], v68, (size_t)__s1[1]) == 0;
          if ((v67 & 0x80000000) == 0) {
            goto LABEL_160;
          }
        }
        else if (BYTE7(v93))
        {
          uint64_t v69 = BYTE7(v93) - 1;
          double v70 = __s1;
          do
          {
            int v72 = *(unsigned __int8 *)v70;
            double v70 = (void **)((char *)v70 + 1);
            int v71 = v72;
            int v74 = *(unsigned __int8 *)v68;
            double v68 = (void **)((char *)v68 + 1);
            int v73 = v74;
            BOOL v76 = v69-- != 0;
            BOOL v77 = v71 == v73;
          }
          while (v71 == v73 && v76);
          if ((SHIBYTE(v91) & 0x80000000) == 0)
          {
LABEL_160:
            if ((v64 & 0x80) == 0) {
              goto LABEL_161;
            }
            goto LABEL_165;
          }
        }
        else
        {
          BOOL v77 = 1;
          if ((SHIBYTE(v91) & 0x80000000) == 0) {
            goto LABEL_160;
          }
        }
      }
      else
      {
        BOOL v77 = 0;
        if ((SHIBYTE(v91) & 0x80000000) == 0) {
          goto LABEL_160;
        }
      }
      operator delete(__dst[0]);
      if ((BYTE7(v93) & 0x80) == 0)
      {
LABEL_161:
        if (v77) {
          goto LABEL_169;
        }
        goto LABEL_166;
      }
LABEL_165:
      operator delete(__s1[0]);
      if (v77) {
        goto LABEL_169;
      }
LABEL_166:
      if (*(void *)v59 != **(void **)(a1 + 1016))
      {
        __s1[0] = 0;
        __s1[1] = 0;
        *(void *)&long long v93 = 0;
        *((void *)&v93 + 1) = 0x3FF0000000000000;
        long long v94 = 0u;
        memset(v95, 0, 20);
        sub_190799FB8(a1, a1 + 656, v58 + 2, v89, (double *)__dst, &v103, &v102, (uint64_t)__s1, 0);
        if (*(double *)__s1 > *(double *)(a1 + 1624)) {
          *(void **)(a1 + 1624) = __s1[0];
        }
      }
    }
LABEL_169:
    if (v60) {
      sub_1906BFE48(v60);
    }
    std::string::size_type v58 = (uint64_t *)v58[1];
  }
  while (v58 != &v99);
  double v78 = *(double *)(a1 + 1624);
  *(void *)(a1 + 1632) = 0;
  if (v78 > 0.0)
  {
    double v79 = *(double *)(a1 + 1616) / v78;
    *(double *)(a1 + 1632) = v79;
    double v7 = v85;
    if (v79 > 1000000.0) {
      *(void *)(a1 + 1632) = 0x412E848000000000;
    }
    goto LABEL_183;
  }
  uint64_t v4 = 1;
LABEL_185:
  double v7 = v85;
LABEL_186:
  if (v108)
  {
    double v109 = v108;
    operator delete(v108);
  }
  if (*((void *)&v104 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v104 + 1));
  }
LABEL_190:
  sub_190770ADC(&v99);
  if (v7) {
LABEL_191:
  }
    sub_1906BFE48(v7);
  return v4;
}

void sub_1907C71FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1906BFE48(a13);
  }
  _Unwind_Resume(a1);
}

void sub_1907C72B0(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_190718FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    BOOL v6 = (char *)sub_19074E100(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    double v9 = &v6[4 * v8];
    double v10 = (char *)*a1;
    double v11 = (char *)a1[1];
    double v12 = v7;
    if (v11 != *a1)
    {
      double v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_1907C7358(uint64_t a1, unsigned char *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864))
  {
    uint64_t result = 1;
    *a2 = 1;
    return result;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v4 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "CLMM,assessMatchAndNeedForReseed", (uint8_t *)buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      LOWORD(v31.__r_.__value_.__l.__data_) = 0;
      double v26 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v26);
      if (v26 != buf) {
        free(v26);
      }
    }
  }
  *(void *)(a1 + 1360) = *(void *)(a1 + 1088);
  *(_OWORD *)(a1 + 1376) = *(_OWORD *)(a1 + 1576);
  float v5 = *(double *)(a1 + 1632);
  *(float *)(a1 + 1308) = v5;
  *(void *)(a1 + 1368) = *(void *)(a1 + 1592);
  uint64_t v6 = *(void *)(a1 + 1016);
  *(unsigned char *)(a1 + 1489) = *(unsigned char *)(v6 + 19);
  *(unsigned char *)(a1 + 1490) = *(unsigned char *)(v6 + 18);
  if (*(unsigned char *)(a1 + 1649)) {
    BOOL v7 = *(unsigned char *)(a1 + 1650) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  int v9 = sub_1907987CC(a1, a1 + 1128, v7);
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v10 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      sub_19072FBA8(a1 + 1128, buf);
      double v11 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? buf
          : (std::string *)buf[0].__r_.__value_.__r.__words[0];
      LODWORD(v31.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "CLMM,postEvaluateMatch,%{private}s", (uint8_t *)&v31, 0xCu);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      sub_19072FBA8(a1 + 1128, &v31);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v27 = &v31;
      }
      else {
        double v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      int v32 = 136380675;
      BOOL v33 = v27;
      int v28 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
  *(unsigned char *)(a1 + 1392) = v9;
  if (*(unsigned char *)(a1 + 841)) {
    char v12 = v9;
  }
  else {
    char v12 = 0;
  }
  *(unsigned char *)(a1 + 1478) = v12;
  if (!*(unsigned char *)(a1 + 1488)) {
    sub_1907B506C(a1 + 3832, (uint64_t *)(a1 + 1016), v9, *(double *)(a1 + 1136), *(double *)(a1 + 1208), *(double *)(a1 + 1200), *(double *)(a1 + 1216));
  }
  sub_1907B519C(a1 + 3184, (long long *)(a1 + 1128));
  int v13 = sub_1907B53E4((uint64_t *)(a1 + 3184), *(unsigned __int8 *)(a1 + 96));
  if (!v13)
  {
    if (v9)
    {
      *(_DWORD *)(a1 + 2968) = 0;
      *(_OWORD *)(a1 + 2832) = 0u;
      return v13 ^ 1u;
    }
    *(_DWORD *)(a1 + 1408) = 0;
    *(_OWORD *)(a1 + 1280) = *(_OWORD *)(a1 + 1184);
    *(void *)(a1 + 1296) = *(void *)(a1 + 1232);
    if (*(double *)(a1 + 1088) > 70.0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        int v14 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          std::string::size_type v15 = *(void *)(a1 + 1088);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v15;
          WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000;
          _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", (uint8_t *)buf, 0x16u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          std::string::size_type v29 = *(void *)(a1 + 1088);
          LODWORD(v31.__r_.__value_.__l.__data_) = 134349312;
          *(std::string::size_type *)((char *)v31.__r_.__value_.__r.__words + 4) = v29;
          WORD2(v31.__r_.__value_.__r.__words[1]) = 2050;
          *(std::string::size_type *)((char *)&v31.__r_.__value_.__r.__words[1] + 6) = 0x4051800000000000;
          int v30 = (std::string *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v30);
          if (v30 != buf) {
            free(v30);
          }
        }
      }
      *a2 = 1;
    }
    unsigned int v16 = *(_DWORD *)(a1 + 2968);
    if ((v16 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 2968) = v16 + 1, v16 < 0x1E))
    {
      if (*a2 || !*(unsigned char *)(a1 + 1848) || *(double *)(a1 + 1136) - *(double *)(a1 + 1976) >= 4.9) {
        return v13 ^ 1u;
      }
      if (*(double *)(a1 + 1088) <= 50.0
        || *(double *)(a1 + 1928) <= 50.0
        || (double v18 = *(double *)(a1 + 1608), v18 < 0.0)
        || (double v23 = *(double *)(a1 + 2448), v23 >= 2.5)
        || v18 >= 2.5
        || v23 < 0.0)
      {
        *(double *)(a1 + 2832) = *(double *)(a1 + 1800) + *(double *)(a1 + 2832);
        double v19 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 2120), *(double *)(a1 + 2128), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(a1 + 1200))+ *(double *)(a1 + 2840);
        *(double *)(a1 + 2840) = v19;
        double v20 = *(double *)(a1 + 2832);
        if (v20 > 80.0 && v20 / v19 > 5.0)
        {
          *a2 = 1;
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            double v21 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to stuck at dead-end while observations move away", (uint8_t *)buf, 2u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              LOWORD(v31.__r_.__value_.__l.__data_) = 0;
              __int16 v22 = (std::string *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v22);
              if (v22 != buf) {
                free(v22);
              }
            }
          }
        }
        return v13 ^ 1u;
      }
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_47;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v24 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to Neff", (uint8_t *)buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      LOWORD(v31.__r_.__value_.__l.__data_) = 0;
      double v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v25);
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_47;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      double v17 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        buf[0].__r_.__value_.__r.__words[0] = 0x1E04020100;
        _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEBUG, "CLMM,Reseeding due to badMatchCount,max,%{public}d", (uint8_t *)buf, 8u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v31.__r_.__value_.__r.__words[0] = 0x1E04020100;
      double v25 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessMatchAndNeedForReseed(BOOL &)", "CoreLocation: %s\n", (const char *)v25);
    }
    if (v25 != buf) {
      free(v25);
    }
LABEL_47:
    *a2 = 1;
    return v13 ^ 1u;
  }
  *(unsigned char *)(a1 + 1392) = 0;
  *(unsigned char *)(a1 + 1478) = 0;
  return v13 ^ 1u;
}

BOOL sub_1907C7E10(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v2 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEBUG, "CLMM,reseed", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      LOWORD(v37) = 0;
      BOOL v33 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::reseed()", "CoreLocation: %s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1907C84B4(a1);
  if (*(void *)(a1 + 888) == *(void *)(a1 + 896) && (sub_1907C6068(a1) & 1) == 0)
  {
    BOOL v28 = 0;
    if (!v3) {
      return v28;
    }
    goto LABEL_55;
  }
  long long v37 = 0uLL;
  v38[0] = 0;
  sub_1906DDB40((uint64_t *)&v37, 0x60uLL);
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 896) - *(void *)(a1 + 888)) >> 4);
  *(_DWORD *)long long buf = 0;
  sub_1907D6360(&__p, v4, buf);
  sub_1907D5BA0(*(void **)(a1 + 992));
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 992) = 0;
  uint64_t v5 = *(void *)(a1 + 896);
  uint64_t v6 = *(void *)(a1 + 888);
  if (v5 != v6 && (int)(-1227133513 * ((unint64_t)(v5 - v6) >> 4)) <= 95)
  {
    uint64_t v5 = *(void *)(a1 + 888);
    do
    {
      uint64_t v7 = *((void *)&v37 + 1);
      if (*((void *)&v37 + 1) >= v38[0])
      {
        uint64_t v8 = sub_1907D5EFC((uint64_t *)&v37, v5);
      }
      else
      {
        sub_1907D6024((uint64_t)v38, *((uint64_t *)&v37 + 1), v5);
        uint64_t v8 = v7 + 112;
      }
      *((void *)&v37 + 1) = v8;
      sub_1907BD194();
      v5 += 112;
    }
    while (v5 != *(void *)(a1 + 896));
  }
  uint64_t v9 = *((void *)&v37 + 1);
  uint64_t v10 = v37;
  if (*((void *)&v37 + 1) - (void)v37 != 10752)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = random();
      int v13 = *(float **)(a1 + 960);
      int v14 = *(float **)(a1 + 968);
      if (v14 == v13)
      {
        unsigned int v16 = *(float **)(a1 + 968);
      }
      else
      {
        unint64_t v15 = v14 - v13;
        unsigned int v16 = *(float **)(a1 + 960);
        do
        {
          unint64_t v17 = v15 >> 1;
          double v18 = &v16[v15 >> 1];
          float v20 = *v18;
          double v19 = v18 + 1;
          v15 += ~(v15 >> 1);
          if (v20 < (float)((float)v12 * 4.6566e-10)) {
            unsigned int v16 = v19;
          }
          else {
            unint64_t v15 = v17;
          }
        }
        while (v15);
      }
      if (v14 != v16) {
        ++*(_DWORD *)((char *)__p + (((char *)v16 - (char *)v13) << 30 >> 30));
      }
      ++v11;
      uint64_t v9 = *((void *)&v37 + 1);
      uint64_t v10 = v37;
    }
    while (96 - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v37 + 1) - v37) >> 4) > v11);
    uint64_t v5 = *(void *)(a1 + 896);
  }
  uint64_t v21 = *(void *)(a1 + 888);
  if (v21 != v5)
  {
    unint64_t v22 = 0;
    double v23 = __p;
    do
    {
      if (v22 >= (v36 - v23) >> 2) {
        break;
      }
      if (*(int *)&v23[4 * v22] >= 1)
      {
        int v24 = 0;
        do
        {
          uint64_t v25 = *((void *)&v37 + 1);
          if (*((void *)&v37 + 1) >= v38[0])
          {
            uint64_t v26 = sub_1907D5EFC((uint64_t *)&v37, v21);
          }
          else
          {
            sub_1907D6024((uint64_t)v38, *((uint64_t *)&v37 + 1), v21);
            uint64_t v26 = v25 + 112;
          }
          *((void *)&v37 + 1) = v26;
          sub_1907BD194();
          ++v24;
          double v23 = __p;
        }
        while (v24 < *((_DWORD *)__p + v22));
        uint64_t v5 = *(void *)(a1 + 896);
      }
      v21 += 112;
      ++v22;
    }
    while (v21 != v5);
    uint64_t v9 = *((void *)&v37 + 1);
    uint64_t v10 = v37;
  }
  unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v10) >> 4);
  BOOL v28 = v27 < 0x61;
  if (v27 >= 0x61)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    std::string v31 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v27;
      _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_ERROR, "CLMM,Unexpected number of particles after resampling,%{public}d", buf, 8u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      int v39 = 67240192;
      int v40 = v27;
      int v34 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::reseed()", "CoreLocation: %s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    ++*(_DWORD *)(a1 + 104);
  }
  else
  {
    long long v29 = *(_OWORD *)(a1 + 864);
    *(void *)(a1 + 864) = v10;
    *(void *)(a1 + 872) = v9;
    long long v37 = v29;
    uint64_t v30 = *(void *)(a1 + 880);
    *(void *)(a1 + 880) = v38[0];
    v38[0] = v30;
  }
  if (__p)
  {
    double v36 = __p;
    operator delete(__p);
  }
  *(void *)long long buf = &v37;
  sub_1907D5AB4((void ***)buf);
  if (v3) {
LABEL_55:
  }
    sub_1906BFE48(v3);
  return v28;
}

void sub_1907C8438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21)
{
  if (__p) {
    operator delete(__p);
  }
  a21 = &a15;
  sub_1907D5AB4((void ***)&a21);
  if (v21) {
    sub_1906BFE48(v21);
  }
  _Unwind_Resume(a1);
}

void sub_1907C84B4(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  uint64_t v2 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 1136);
    uint64_t v4 = *(void *)(a1 + 1184);
    uint64_t v5 = *(void *)(a1 + 1192);
    *(_DWORD *)long long buf = 134349569;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&buf[12] = 2049;
    *(void *)&buf[14] = v4;
    *(_WORD *)&buf[22] = 2049;
    *(void *)&long long v24 = v5;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,filterResetForReseed,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v11 = *(void *)(a1 + 1136);
    uint64_t v12 = *(void *)(a1 + 1184);
    uint64_t v13 = *(void *)(a1 + 1192);
    int v15 = 134349569;
    *(void *)unsigned int v16 = v11;
    *(_WORD *)&v16[8] = 2049;
    *(void *)&v16[10] = v12;
    *(_WORD *)&v16[18] = 2049;
    *(void *)&long long v17 = v13;
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLParticleMapMatcher::resetForReseed()", "CoreLocation: %s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
  sub_190796F10(a1);
  *(_DWORD *)(a1 + 2968) = -1;
  uint64_t v6 = *(void **)(a1 + 872);
  uint64_t v7 = *(void **)(a1 + 864);
  while (v6 != v7)
  {
    v6 -= 14;
    sub_1907D5B4C(a1 + 880, v6);
  }
  *(void *)(a1 + 872) = v7;
  sub_1907D5BA0(*(void **)(a1 + 992));
  *(void *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 992) = 0u;
  *(unsigned char *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 2832) = 0u;
  sub_1907B5AD8((void *)(a1 + 912));
  buf[0] = 0;
  *(_OWORD *)&uint8_t buf[8] = 0u;
  long long v24 = 0u;
  LODWORD(v25) = 0;
  WORD2(v25) = 1;
  DWORD2(v25) = 0;
  long long v26 = 0u;
  memset(v27, 0, 33);
  long long v29 = 0;
  uint64_t v30 = 0;
  BOOL v28 = 0;
  int v31 = 0;
  *(void *)(a1 + 2704) = 0;
  *(_OWORD *)(a1 + 2688) = *(_OWORD *)buf;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 2720);
  *(void *)(a1 + 2712) = 0;
  *(void *)(a1 + 2720) = 0;
  if (v8) {
    sub_1906BFE48(v8);
  }
  *(void *)(a1 + 2760) = v27[0];
  *(_OWORD *)(a1 + 2728) = v25;
  *(_OWORD *)(a1 + 2744) = v26;
  *(_OWORD *)(a1 + 2768) = *(_OWORD *)&v27[1];
  *(_OWORD *)(a1 + 2777) = *(_OWORD *)((char *)&v27[2] + 1);
  if ((unsigned char *)(a1 + 2688) == buf)
  {
    int v9 = 0;
  }
  else
  {
    sub_1907B5974((char *)(a1 + 2800), 0, 0, 0);
    int v9 = v31;
  }
  *(_DWORD *)(a1 + 2824) = v9;
  *(_DWORD *)(a1 + 2972) = 0;
  LOBYTE(v15) = 0;
  *(void *)&v16[4] = 0;
  *(void *)&v16[12] = 0;
  LODWORD(v17) = 0;
  WORD2(v17) = 1;
  DWORD2(v17) = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  __p = 0;
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(unsigned char *)(a1 + 2848) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 2864);
  *(void *)(a1 + 2856) = 0;
  *(void *)(a1 + 2864) = 0;
  if (v10) {
    sub_1906BFE48(v10);
  }
  *(void *)(a1 + 2904) = *(void *)v19;
  *(_OWORD *)(a1 + 2872) = v17;
  *(_OWORD *)(a1 + 2888) = v18;
  *(_OWORD *)(a1 + 2912) = *(_OWORD *)&v19[8];
  *(_OWORD *)(a1 + 2921) = *(_OWORD *)&v19[17];
  if ((int *)(a1 + 2848) != &v15) {
    sub_1907B5974((char *)(a1 + 2944), 0, 0, 0);
  }
  sub_1907C88D8(a1 + 3832);
  *(_DWORD *)(a1 + 4040) = 0;
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  if (*(void *)&v16[12]) {
    sub_1906BFE48(*(std::__shared_weak_count **)&v16[12]);
  }
  if (v28)
  {
    long long v29 = v28;
    operator delete(v28);
  }
  if (*((void *)&v24 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v24 + 1));
  }
}

void sub_1907C88AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
}

void sub_1907C88D8(uint64_t a1)
{
  v13[0] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v13[8] = _Q0;
  long long v15 = 0uLL;
  uint64_t v14 = 0;
  long long v16 = _Q0;
  uint64_t v17 = 0;
  long long v18 = 0;
  LODWORD(v19) = 0;
  WORD2(v19) = 1;
  DWORD2(v19) = 0;
  __p = 0;
  double v23 = 0;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  uint64_t v24 = 0;
  unint64_t v25 = 0xBFF0000000000000;
  long long v7 = *(_OWORD *)v13;
  long long v8 = *(unint64_t *)&v13[16];
  long long v9 = v16;
  *(_OWORD *)(a1 + 32) = 0uLL;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (v10) {
    sub_1906BFE48(v10);
  }
  long long v11 = v20;
  *(_OWORD *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 96) = v11;
  *(void *)(a1 + 112) = *(void *)v21;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)&v21[8];
  *(_OWORD *)(a1 + 129) = *(_OWORD *)&v21[17];
  if (v13 == (unsigned char *)a1)
  {
    *(void *)(a1 + 176) = 0xBFF0000000000000;
  }
  else
  {
    sub_1907B5974((char *)(a1 + 152), 0, 0, 0);
    uint64_t v12 = __p;
    *(void *)(a1 + 176) = v25;
    if (v12)
    {
      double v23 = v12;
      operator delete(v12);
    }
  }
  if (v18) {
    sub_1906BFE48(v18);
  }
}

void sub_1907C89E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1907BC788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1907C89FC(uint64_t *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  uint64_t v2 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[142];
    uint64_t v4 = a1[148];
    uint64_t v5 = a1[149];
    *(_DWORD *)long long buf = 134349569;
    uint64_t v10 = v3;
    __int16 v11 = 2049;
    uint64_t v12 = v4;
    __int16 v13 = 2049;
    uint64_t v14 = v5;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,filterReset,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    long long v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLParticleMapMatcher::reset()", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_1907C84B4((uint64_t)a1);
  uint64_t v6 = (void *)a1[112];
  long long v7 = (void *)a1[111];
  while (v6 != v7)
  {
    v6 -= 14;
    sub_1907D5B4C((uint64_t)(a1 + 113), v6);
  }
  a1[112] = (uint64_t)v7;
  a1[121] = a1[120];
  sub_1907C8C5C((uint64_t)(a1 + 126));
  sub_1907C8C5C((uint64_t)(a1 + 231));
  sub_190770ADC(a1 + 381);
  sub_190770ADC(a1 + 384);
  sub_190770ADC(a1 + 387);
  sub_190770ADC(a1 + 390);
}

void sub_1907C8C5C(uint64_t a1)
{
  uint64_t v17 = 0;
  long long v18 = 0;
  LODWORD(v19) = 0;
  WORD2(v19) = 1;
  DWORD2(v19) = 0;
  double v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  v2[1] = 0;
  if (v3) {
    sub_1906BFE48(v3);
  }
  long long v4 = v20;
  *(_OWORD *)(a1 + 24) = v19;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = *(void *)v21;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v21[8];
  *(_OWORD *)(a1 + 73) = *(_OWORD *)&v21[17];
  if (v2 == &v17)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    sub_1907B5974((char *)(a1 + 96), 0, 0, 0);
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  *(void *)(a1 + 672) = v5;
  long long v7 = *(std::__shared_weak_count **)(a1 + 680);
  *(void *)(a1 + 680) = v6;
  if (v7) {
    sub_1906BFE48(v7);
  }
  long long v8 = v20;
  *(_OWORD *)(a1 + 688) = v19;
  *(_OWORD *)(a1 + 704) = v8;
  *(void *)(a1 + 720) = *(void *)v21;
  *(_OWORD *)(a1 + 728) = *(_OWORD *)&v21[8];
  *(_OWORD *)(a1 + 737) = *(_OWORD *)&v21[17];
  if ((uint64_t *)(a1 + 672) != &v17) {
    sub_1907B5974((char *)(a1 + 760), v22, (uint64_t)v23, 0x8E38E38E38E38E39 * ((v23 - v22) >> 3));
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(void *)uint64_t v14 = 0xBFF0000000000000;
  *(void *)&v16[120] = 0;
  *(_DWORD *)&v16[128] = 0;
  memset(&v16[80], 0, 34);
  memset(&v16[136], 0, 75);
  memset(&v16[216], 0, 56);
  memset(&v14[8], 0, 80);
  memset(v16, 0, 78);
  long long v15 = 0u;
  *(void *)&v16[272] = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)v14;
  *(_OWORD *)(a1 + 152) = 0uLL;
  *(_OWORD *)(a1 + 136) = _Q0;
  *(_OWORD *)(a1 + 120) = 0uLL;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v14[64];
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v14[48];
  *(_OWORD *)(a1 + 200) = *(_OWORD *)&v14[32];
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v14[16];
  std::string::operator=((std::string *)(a1 + 248), (const std::string *)&v14[80]);
  memcpy((void *)(a1 + 272), v16, 0x118uLL);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 639) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(void *)(a1 + 830) = 0;
  if (SHIBYTE(v15) < 0) {
    operator delete(*(void **)&v14[80]);
  }
  if (v22)
  {
    double v23 = v22;
    operator delete(v22);
  }
  if (v18) {
    sub_1906BFE48(v18);
  }
}

void sub_1907C8EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_1907B515C((void *)(v30 - 160));
  _Unwind_Resume(a1);
}

BOOL sub_1907C8F08(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v6 = (unsigned __int8 *)(a1 + 3832);
  uint64_t v9 = v5;
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v7 = sub_1907B2B04(v6, a2, &v9, *(unsigned __int8 *)(a1 + 96), a3);
  if (v10) {
    sub_1906BFE48(v10);
  }
  return v7;
}

void sub_1907C8F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907C8F84(uint64_t a1)
{
}

uint64_t sub_1907C8F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (double *)(a1 + 3832);
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  long long v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = sub_1907B3CC8(v3, a2, &v7, *(unsigned __int8 *)(a1 + 96));
  if (v8) {
    sub_1906BFE48(v8);
  }
  return v5;
}

void sub_1907C8FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907C9008(uint64_t a1, uint64_t a2)
{
  uint64_t v681 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  v645 = *(void **)(a1 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v644 = v3;
  if (!v645)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    long long v29 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_789;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v31 = *(void *)(a2 + 8);
    *(_DWORD *)v675 = 134349056;
    *(void *)&v675[4] = v31;
    uint64_t v32 = (const char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v32);
    if (v32 == buf) {
      goto LABEL_789;
    }
    BOOL v33 = (char *)v32;
LABEL_180:
    free(v33);
LABEL_789:
    uint64_t v132 = 0;
    goto LABEL_790;
  }
  if (*(unsigned char *)(a1 + 96)) {
    sub_190811854((uint64_t)v645);
  }
  *(unsigned char *)(a1 + 1848) = *(unsigned char *)(a1 + 1008);
  uint64_t v4 = *(void *)(a1 + 1016);
  uint64_t v5 = *(void *)(a1 + 1024);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1856) = v4;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 1864);
  *(void *)(a1 + 1864) = v5;
  if (v6) {
    sub_1906BFE48(v6);
  }
  *(void *)(a1 + 1904) = *(void *)(a1 + 1064);
  *(_OWORD *)(a1 + 1872) = *(_OWORD *)(a1 + 1032);
  *(_OWORD *)(a1 + 1888) = *(_OWORD *)(a1 + 1048);
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)(a1 + 1072);
  *(_OWORD *)(a1 + 1921) = *(_OWORD *)(a1 + 1081);
  sub_1907B5974((char *)(a1 + 1944), *(char **)(a1 + 1104), *(void *)(a1 + 1112), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 1112) - *(void *)(a1 + 1104)) >> 3));
  *(_OWORD *)(a1 + 2032) = *(_OWORD *)(a1 + 1192);
  *(_OWORD *)(a1 + 2048) = *(_OWORD *)(a1 + 1208);
  *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a1 + 1224);
  *(_OWORD *)(a1 + 2080) = *(_OWORD *)(a1 + 1240);
  *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a1 + 1128);
  *(_OWORD *)(a1 + 1984) = *(_OWORD *)(a1 + 1144);
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a1 + 1160);
  *(_OWORD *)(a1 + 2016) = *(_OWORD *)(a1 + 1176);
  __str = (std::string *)(a1 + 1256);
  std::string::operator=((std::string *)(a1 + 2096), (const std::string *)(a1 + 1256));
  __dst = (double *)(a1 + 1280);
  memcpy((void *)(a1 + 2120), (const void *)(a1 + 1280), 0x118uLL);
  long long v7 = *(_OWORD *)(a1 + 1608);
  *(_OWORD *)(a1 + 2432) = *(_OWORD *)(a1 + 1592);
  *(_OWORD *)(a1 + 2448) = v7;
  *(_OWORD *)(a1 + 2464) = *(_OWORD *)(a1 + 1624);
  *(_OWORD *)(a1 + 2475) = *(_OWORD *)(a1 + 1635);
  long long v8 = *(_OWORD *)(a1 + 1576);
  *(_OWORD *)(a1 + 2400) = *(_OWORD *)(a1 + 1560);
  *(_OWORD *)(a1 + 2416) = v8;
  uint64_t v9 = *(void *)(a1 + 1656);
  uint64_t v10 = *(void *)(a1 + 1664);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2496) = v9;
  __int16 v11 = *(std::__shared_weak_count **)(a1 + 2504);
  *(void *)(a1 + 2504) = v10;
  if (v11) {
    sub_1906BFE48(v11);
  }
  *(unsigned char *)(a1 + 2512) = *(unsigned char *)(a1 + 1672);
  uint64_t v12 = *(void *)(a1 + 1680);
  uint64_t v13 = *(void *)(a1 + 1688);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2520) = v12;
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 2528);
  *(void *)(a1 + 2528) = v13;
  if (v14) {
    sub_1906BFE48(v14);
  }
  long long v15 = *(_OWORD *)(a1 + 1712);
  *(_OWORD *)(a1 + 2536) = *(_OWORD *)(a1 + 1696);
  *(_OWORD *)(a1 + 2552) = v15;
  *(void *)(a1 + 2568) = *(void *)(a1 + 1728);
  *(_OWORD *)(a1 + 2576) = *(_OWORD *)(a1 + 1736);
  *(_OWORD *)(a1 + 2585) = *(_OWORD *)(a1 + 1745);
  sub_1907B5974((char *)(a1 + 2608), *(char **)(a1 + 1768), *(void *)(a1 + 1776), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 1776) - *(void *)(a1 + 1768)) >> 3));
  long long v16 = *(_OWORD *)(a1 + 1808);
  *(_OWORD *)(a1 + 2632) = *(_OWORD *)(a1 + 1792);
  *(_OWORD *)(a1 + 2648) = v16;
  *(_OWORD *)(a1 + 2664) = *(_OWORD *)(a1 + 1824);
  *(void *)(a1 + 2678) = *(void *)(a1 + 1838);
  double v17 = *(double *)(a2 + 96);
  if (v17 >= 0.0)
  {
    *(void *)(a1 + 3880) = *(void *)(a2 + 8);
    *(double *)(a1 + 3840) = v17;
  }
  *(unsigned char *)(a1 + 3720) = 0;
  uint64_t v18 = *(void *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 192);
  *(void *)(a1 + 848) = v18;
  *(void *)(a1 + 856) = v19;
  int v20 = *(unsigned __int8 *)(a1 + 1357);
  uint64_t v21 = *(void *)(a1 + 1136);
  if (*(unsigned __int8 *)(a1 + 816) != v20 || *(double *)(a1 + 832) == 0.0)
  {
    *(void *)(a1 + 832) = v21;
    *(unsigned char *)(a1 + 816) = v20;
  }
  *(void *)(a1 + 824) = v21;
  uint64_t v22 = *(void *)(a2 + 56);
  *(void *)(a2 + 152) = v22;
  uint64_t v23 = *(void *)(a2 + 64);
  *(void *)(a2 + 160) = v23;
  *(void *)(a2 + 168) = v18;
  *(void *)(a2 + 288) = v22;
  *(void *)(a2 + 296) = v23;
  *(void *)(a2 + 304) = v18;
  *(void *)(a2 + 312) = v22;
  *(void *)(a2 + 320) = v23;
  *(void *)(a2 + 328) = v22;
  *(void *)(a2 + 336) = v23;
  *(_DWORD *)(a2 + 280) = 0;
  __src = (void *)(a2 + 152);
  if (*(double *)(a2 + 8) - *(double *)(a1 + 1976) <= 6.0)
  {
    unint64_t v25 = *(char **)(a1 + 3016);
    uint64_t v24 = *(void ***)(a1 + 3008);
    goto LABEL_42;
  }
  uint64_t v24 = *(void ***)(a1 + 3008);
  unint64_t v25 = *(char **)(a1 + 3016);
  *(void *)(a1 + 3040) = 0;
  unint64_t v26 = v25 - (char *)v24;
  if ((unint64_t)(v25 - (char *)v24) >= 0x11)
  {
    do
    {
      operator delete(*v24);
      uint64_t v24 = (void **)(*(void *)(a1 + 3008) + 8);
      *(void *)(a1 + 3008) = v24;
      unint64_t v25 = *(char **)(a1 + 3016);
      unint64_t v26 = v25 - (char *)v24;
    }
    while ((unint64_t)(v25 - (char *)v24) > 0x10);
  }
  unint64_t v27 = v26 >> 3;
  if (v27 == 1)
  {
    uint64_t v28 = 512;
    goto LABEL_40;
  }
  if (v27 == 2)
  {
    uint64_t v28 = 1024;
LABEL_40:
    *(void *)(a1 + 3032) = v28;
  }
  *(void *)(a1 + 2992) = 0;
  double v17 = *(double *)(a2 + 96);
LABEL_42:
  uint64_t v34 = v25 - (char *)v24;
  if (v25 == (char *)v24) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = ((v25 - (char *)v24) << 7) - 1;
  }
  unint64_t v36 = *(void *)(a1 + 3032);
  uint64_t v37 = *(void *)(a1 + 3040);
  unint64_t v38 = v37 + v36;
  if (v35 == v37 + v36)
  {
    if (v36 < 0x400)
    {
      uint64_t v52 = v34 >> 3;
      uint64_t v53 = *(char **)(a1 + 3024);
      unint64_t v54 = *(void ***)(a1 + 3000);
      if (v34 >> 3 >= (unint64_t)((v53 - (char *)v54) >> 3))
      {
        if (v53 == (char *)v54) {
          unint64_t v57 = 1;
        }
        else {
          unint64_t v57 = (v53 - (char *)v54) >> 2;
        }
        std::string::size_type v58 = (char *)sub_190781384(v57);
        uint64_t v60 = v59;
        long long v61 = operator new(0x1000uLL);
        long long v62 = &v58[8 * v52];
        uint64_t v63 = &v58[8 * v60];
        if (v52 == v60)
        {
          uint64_t v64 = 8 * v52;
          if (v34 < 1)
          {
            uint64_t v101 = v61;
            uint64_t v102 = v64 >> 2;
            if (v25 == (char *)v24) {
              unint64_t v103 = 1;
            }
            else {
              unint64_t v103 = v102;
            }
            long long v104 = (char *)sub_190781384(v103);
            long long v62 = &v104[8 * (v103 >> 2)];
            uint64_t v63 = &v104[8 * v105];
            if (v58) {
              operator delete(v58);
            }
            std::string::size_type v58 = v104;
            long long v61 = v101;
          }
          else
          {
            uint64_t v65 = v64 >> 3;
            if (v65 >= -1) {
              unint64_t v66 = v65 + 1;
            }
            else {
              unint64_t v66 = v65 + 2;
            }
            v62 -= 8 * (v66 >> 1);
          }
        }
        *(void *)long long v62 = v61;
        long long v106 = v62 + 8;
        for (uint64_t i = *(void *)(a1 + 3016); i != *(void *)(a1 + 3008); i -= 8)
        {
          if (v62 == v58)
          {
            if (v106 >= v63)
            {
              if (v63 == v58) {
                unint64_t v112 = 1;
              }
              else {
                unint64_t v112 = (v63 - v58) >> 2;
              }
              long long v113 = (char *)sub_190781384(v112);
              uint64_t v115 = v113;
              long long v62 = &v113[(2 * v112 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v116 = v106 - v58;
              _ZF = v106 == v58;
              long long v106 = v62;
              if (!_ZF)
              {
                long long v106 = &v62[v116 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v117 = 8 * (v116 >> 3);
                uint64_t v118 = &v113[(2 * v112 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v119 = (uint64_t *)v58;
                do
                {
                  uint64_t v120 = *v119++;
                  *(void *)uint64_t v118 = v120;
                  v118 += 8;
                  v117 -= 8;
                }
                while (v117);
              }
              uint64_t v63 = &v113[8 * v114];
              if (v58) {
                operator delete(v58);
              }
              std::string::size_type v58 = v115;
            }
            else
            {
              uint64_t v108 = (v63 - v106) >> 3;
              if (v108 >= -1) {
                uint64_t v109 = v108 + 1;
              }
              else {
                uint64_t v109 = v108 + 2;
              }
              uint64_t v110 = v109 >> 1;
              long long v62 = &v58[8 * (v109 >> 1)];
              double v111 = v58;
              if (v106 != v58)
              {
                memmove(v62, v58, v106 - v58);
                double v111 = v106;
              }
              long long v106 = &v111[8 * v110];
            }
          }
          uint64_t v121 = *(void *)(i - 8);
          *((void *)v62 - 1) = v121;
          v62 -= 8;
        }
        uint64_t v122 = *(void **)(a1 + 3000);
        *(void *)(a1 + 3000) = v58;
        *(void *)(a1 + 3008) = v62;
        *(void *)(a1 + 3016) = v106;
        *(void *)(a1 + 3024) = v63;
        if (v122) {
          operator delete(v122);
        }
        goto LABEL_122;
      }
      uint64_t v55 = operator new(0x1000uLL);
      BOOL v56 = v55;
      if (v53 != v25)
      {
        *(void *)unint64_t v25 = v55;
        *(void *)(a1 + 3016) += 8;
LABEL_122:
        uint64_t v37 = *(void *)(a1 + 3040);
        uint64_t v24 = *(void ***)(a1 + 3008);
        unint64_t v36 = *(void *)(a1 + 3032);
        unint64_t v38 = v36 + v37;
        goto LABEL_123;
      }
      if (v24 == v54)
      {
        if (v25 == (char *)v24) {
          unint64_t v79 = 1;
        }
        else {
          unint64_t v79 = (v53 - (char *)v24) >> 2;
        }
        long long v80 = (char *)sub_190781384(v79);
        uint64_t v24 = (void **)&v80[(2 * v79 + 6) & 0xFFFFFFFFFFFFFFF8];
        long long v82 = *(uint64_t **)(a1 + 3008);
        long long v83 = v24;
        uint64_t v84 = *(void *)(a1 + 3016) - (void)v82;
        if (v84)
        {
          long long v83 = (void **)((char *)v24 + (v84 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v85 = 8 * (v84 >> 3);
          uint64_t v86 = &v80[(2 * v79 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            uint64_t v87 = *v82++;
            *(void *)uint64_t v86 = v87;
            v86 += 8;
            v85 -= 8;
          }
          while (v85);
        }
        std::string::size_type v88 = *(void **)(a1 + 3000);
        *(void *)(a1 + 3000) = v80;
        *(void *)(a1 + 3008) = v24;
        *(void *)(a1 + 3016) = v83;
        *(void *)(a1 + 3024) = &v80[8 * v81];
        if (v88)
        {
          operator delete(v88);
          uint64_t v24 = *(void ***)(a1 + 3008);
        }
      }
      *(v24 - 1) = v56;
      std::string::size_type v89 = *(char **)(a1 + 3008);
      *(void *)(a1 + 3008) = v89 - 8;
      uint64_t v90 = *((void *)v89 - 1);
      *(void *)(a1 + 3008) = v89;
      uint64_t v91 = *(char **)(a1 + 3016);
      if (v91 == *(char **)(a1 + 3024))
      {
        unint64_t v92 = *(void *)(a1 + 3000);
        uint64_t v93 = (uint64_t)&v89[-v92];
        if ((unint64_t)v89 <= v92)
        {
          uint64_t v199 = (uint64_t)&v91[-v92];
          _ZF = v199 == 0;
          uint64_t v200 = v199 >> 2;
          if (_ZF) {
            unint64_t v201 = 1;
          }
          else {
            unint64_t v201 = v200;
          }
          uint64_t v202 = (char *)sub_190781384(v201);
          double v204 = &v202[8 * (v201 >> 2)];
          uint64_t v205 = *(uint64_t **)(a1 + 3008);
          uint64_t v91 = v204;
          uint64_t v206 = *(void *)(a1 + 3016) - (void)v205;
          if (v206)
          {
            uint64_t v91 = &v204[v206 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v207 = 8 * (v206 >> 3);
            uint64_t v208 = &v202[8 * (v201 >> 2)];
            do
            {
              uint64_t v209 = *v205++;
              *(void *)uint64_t v208 = v209;
              v208 += 8;
              v207 -= 8;
            }
            while (v207);
          }
          uint64_t v210 = *(void **)(a1 + 3000);
          *(void *)(a1 + 3000) = v202;
          *(void *)(a1 + 3008) = v204;
          *(void *)(a1 + 3016) = v91;
          *(void *)(a1 + 3024) = &v202[8 * v203];
          if (v210)
          {
            operator delete(v210);
            uint64_t v91 = *(char **)(a1 + 3016);
          }
        }
        else
        {
          uint64_t v94 = v93 >> 3;
          BOOL v150 = v93 >> 3 < -1;
          uint64_t v95 = (v93 >> 3) + 2;
          if (v150) {
            uint64_t v96 = v95;
          }
          else {
            uint64_t v96 = v94 + 1;
          }
          uint64_t v97 = -(v96 >> 1);
          uint64_t v98 = v96 >> 1;
          uint64_t v99 = &v89[-8 * v98];
          int64_t v100 = v91 - v89;
          if (v91 != v89)
          {
            memmove(&v89[-8 * v98], v89, v91 - v89);
            std::string::size_type v89 = *(char **)(a1 + 3008);
          }
          uint64_t v91 = &v99[v100];
          *(void *)(a1 + 3016) = &v99[v100];
          *(void *)(a1 + 3008) = &v89[8 * v97];
        }
      }
      *(void *)uint64_t v91 = v90;
    }
    else
    {
      *(void *)(a1 + 3032) = v36 - 1024;
      double v41 = *v24;
      int v40 = (char *)(v24 + 1);
      int v39 = v41;
      *(void *)(a1 + 3008) = v40;
      if (v25 == *(char **)(a1 + 3024))
      {
        unint64_t v42 = *(void *)(a1 + 3000);
        uint64_t v43 = (uint64_t)&v40[-v42];
        if ((unint64_t)v40 <= v42)
        {
          uint64_t v67 = (uint64_t)&v25[-v42];
          _ZF = v67 == 0;
          uint64_t v68 = v67 >> 2;
          if (_ZF) {
            unint64_t v69 = 1;
          }
          else {
            unint64_t v69 = v68;
          }
          double v70 = (char *)sub_190781384(v69);
          int v72 = &v70[8 * (v69 >> 2)];
          int v73 = *(uint64_t **)(a1 + 3008);
          unint64_t v25 = v72;
          uint64_t v74 = *(void *)(a1 + 3016) - (void)v73;
          if (v74)
          {
            unint64_t v25 = &v72[v74 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v75 = 8 * (v74 >> 3);
            BOOL v76 = &v70[8 * (v69 >> 2)];
            do
            {
              uint64_t v77 = *v73++;
              *(void *)BOOL v76 = v77;
              v76 += 8;
              v75 -= 8;
            }
            while (v75);
          }
          double v78 = *(void **)(a1 + 3000);
          *(void *)(a1 + 3000) = v70;
          *(void *)(a1 + 3008) = v72;
          *(void *)(a1 + 3016) = v25;
          *(void *)(a1 + 3024) = &v70[8 * v71];
          if (v78)
          {
            operator delete(v78);
            unint64_t v25 = *(char **)(a1 + 3016);
          }
        }
        else
        {
          uint64_t v44 = v43 >> 3;
          BOOL v150 = v43 >> 3 < -1;
          uint64_t v45 = (v43 >> 3) + 2;
          if (v150) {
            uint64_t v46 = v45;
          }
          else {
            uint64_t v46 = v44 + 1;
          }
          uint64_t v47 = -(v46 >> 1);
          uint64_t v48 = v46 >> 1;
          long long v49 = &v40[-8 * v48];
          int64_t v50 = v25 - v40;
          if (v25 != v40)
          {
            memmove(&v40[-8 * v48], v40, v25 - v40);
            unint64_t v25 = *(char **)(a1 + 3008);
          }
          uint64_t v51 = &v25[8 * v47];
          unint64_t v25 = &v49[v50];
          *(void *)(a1 + 3016) = &v49[v50];
          *(void *)(a1 + 3008) = v51;
        }
      }
      *(void *)unint64_t v25 = v39;
    }
    *(void *)(a1 + 3016) += 8;
    goto LABEL_122;
  }
LABEL_123:
  float v123 = v17;
  (*(float **)((char *)v24 + ((v38 >> 7) & 0x1FFFFFFFFFFFFF8)))[v38 & 0x3FF] = v123;
  *(void *)(a1 + 3040) = v37 + 1;
  if ((unint64_t)(v37 + 1) > *(void *)(a1 + 2984))
  {
    float v124 = (*(float **)((char *)v24 + ((v36 >> 7) & 0x1FFFFFFFFFFFFF8)))[v36 & 0x3FF];
    *(float *)(a1 + 2992) = *(float *)(a1 + 2992) - v124;
    *(float *)(a1 + 2996) = *(float *)(a1 + 2996) - (float)(v124 * v124);
    *(void *)(a1 + 3040) = v37;
    *(void *)(a1 + 3032) = v36 + 1;
    if (v36 + 1 >= 0x800)
    {
      operator delete(*v24);
      *(void *)(a1 + 3008) += 8;
      *(void *)(a1 + 3032) -= 1024;
    }
  }
  *(float *)(a1 + 2992) = *(float *)(a1 + 2992) + v123;
  *(float *)(a1 + 2996) = *(float *)(a1 + 2996) + (float)(v123 * v123);
  double v125 = *(double *)(a1 + 4032);
  if (v125 < 0.0)
  {
    if (*(double *)(a2 + 24) - *(double *)(a1 + 4016) >= 900.0) {
      double v125 = 5.55555556;
    }
    else {
      double v125 = 1.66666667;
    }
  }
  if (*(double *)(a2 + 96) <= v125 && !*(unsigned char *)(a1 + 2232))
  {
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v130 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v131 = *(void *)(a2 + 8);
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v131;
        _os_log_impl(&dword_1906B8000, v130, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, not matching", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v550 = *(void *)(a2 + 8);
        *(_DWORD *)v675 = 134349056;
        *(void *)&v675[4] = v550;
        v551 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v551);
        if (v551 != buf) {
          free(v551);
        }
      }
    }
    goto LABEL_149;
  }
  if (!*(unsigned char *)(a2 + 348)) {
    goto LABEL_140;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    int v126 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v126, OS_LOG_TYPE_DEBUG, "CLMM,opportunistic tile download only, favorable GPS conditions", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_WORD *)v675 = 0;
      v549 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v549);
      if (v549 != buf) {
        free(v549);
      }
    }
  }
  unsigned int v127 = *(unsigned __int8 *)(a1 + 112);
  if (*(unsigned char *)(a1 + 112))
  {
LABEL_140:
    unint64_t v128 = *(void *)(a1 + 3040);
    if (v128 < *(void *)(a1 + 2984)
      || (!v128 ? (float v129 = 0.0) : (float v129 = *(float *)(a1 + 2992) / (float)v128), v129 <= 22.222))
    {
      unsigned int v127 = 1;
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96))
      {
        uint64_t v134 = 0;
        goto LABEL_169;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v133 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v133, OS_LOG_TYPE_DEBUG, "CLMM,opportunistic tile download only, high speed threshold", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        *(_WORD *)v675 = 0;
        v552 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v552);
        if (v552 != buf) {
          free(v552);
        }
        unsigned int v127 = 0;
      }
      else
      {
        unsigned int v127 = 0;
      }
    }
  }
  if (*(unsigned char *)(a1 + 113)) {
    uint64_t v134 = 0;
  }
  else {
    uint64_t v134 = v127;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    float v135 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v136 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v136;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v134;
      _os_log_impl(&dword_1906B8000, v135, OS_LOG_TYPE_DEBUG, "CLMM,match,%{public}.1lf,allowsNetworkUsage,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v282 = *(void *)(a2 + 8);
      *(_DWORD *)v675 = 134349312;
      *(void *)&v675[4] = v282;
      *(_WORD *)&v675[12] = 1026;
      *(_DWORD *)&v675[14] = v134;
      __int16 v283 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v283);
      if (v283 != buf) {
        free(v283);
      }
    }
  }
LABEL_169:
  (*(void (**)(void *, uint64_t))(*v645 + 32))(v645, v134);
  (*(void (**)(void *, uint64_t, double))(*v645 + 48))(v645, a2, 450.0);
  v645[1] = *(void *)(a2 + 8);
  (*(void (**)(void *))(*v645 + 96))(v645);
  sub_1907D5BA0(*(void **)(a1 + 992));
  v639 = (void *)(a1 + 992);
  *(void *)(a1 + 984) = a1 + 992;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 944) = *(void *)(a1 + 936);
  v646 = (void **)(a1 + 936);
  sub_1907C72B0((void **)(a1 + 936), 0xC0uLL);
  v637 = (unsigned char *)(a1 + 1008);
  sub_1907C8C5C(a1 + 1008);
  double v137 = (_OWORD *)(a1 + 1128);
  long long v138 = *(_OWORD *)a2;
  long long v139 = *(_OWORD *)(a2 + 16);
  long long v140 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1176) = v140;
  *(_OWORD *)(a1 + 1128) = v138;
  *(_OWORD *)(a1 + 1144) = v139;
  long long v141 = *(_OWORD *)(a2 + 64);
  long long v142 = *(_OWORD *)(a2 + 80);
  long long v143 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1240) = v143;
  *(_OWORD *)(a1 + 1192) = v141;
  *(_OWORD *)(a1 + 1208) = v142;
  std::string::operator=(__str, (const std::string *)(a2 + 128));
  memcpy(__dst, __src, 0x118uLL);
  double v144 = *(double *)(a1 + 1976);
  double v145 = *(double *)(a1 + 1136) - v144;
  *(double *)(a1 + 1640) = v145;
  if (v145 == 0.0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_789;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v146 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v146, OS_LOG_TYPE_INFO, "CLMM,Time difference between updates is zero,update ignored", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_789;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    *(_WORD *)v675 = 0;
    double v147 = (const char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v147);
    if (v147 == buf) {
      goto LABEL_789;
    }
    BOOL v33 = (char *)v147;
    goto LABEL_180;
  }
  if (*(unsigned char *)(a1 + 1356))
  {
    double v148 = 4.9;
    if (v145 > 4.9 && *(unsigned char *)(a1 + 2232))
    {
      double v149 = *(double *)(a1 + 1480);
      BOOL v150 = v149 > v144 + 1.2 || v149 <= 0.0;
      double v148 = 4.9;
      if (!v150) {
        double v148 = 75.0;
      }
    }
  }
  else
  {
    double v148 = 4.9;
  }
  if (v145 < 0.0 || v145 > v148) {
    sub_1907C84B4(a1);
  }
  if (*(void *)(a1 + 864) == *(void *)(a1 + 872)) {
    *(void *)(a1 + 1640) = 0;
  }
  sub_190797308(a1, a1 + 1128);
  sub_190802558(a1 + 656, a1 + 1128, *(unsigned __int8 *)(a1 + 752));
  sub_1907D5A04((uint64_t *)(a1 + 4048));
  if (*(unsigned char *)(a1 + 114))
  {
    uint64_t v151 = *(void *)(a1 + 8);
    double v152 = *(std::__shared_weak_count **)(a1 + 16);
    if (v152)
    {
      atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&uint8_t buf[8] = v152;
      atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *(void *)&uint8_t buf[8] = 0;
    }
    *(void *)long long buf = v151;
    sub_1907D3000(a1 + 1128, buf, (double *)(a1 + 608), a1 + 48, (uint64_t *)(a1 + 4048), 1, 200.0);
    if (*(void *)&buf[8]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v152) {
      sub_1906BFE48(v152);
    }
  }
  ++*(_DWORD *)(a1 + 100);
  if (!sub_1907BDF98(a1)) {
    goto LABEL_788;
  }
  v638 = (void *)(a1 + 1856);
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864) || !*(unsigned char *)(a1 + 114))
  {
    LOBYTE(v156) = 0;
    goto LABEL_465;
  }
  double v153 = *(double *)(a1 + 88);
  if (*(double *)(a1 + 4120) < 0.0 || vabdd_f64(*(double *)(a1 + 4128), v153) > 6.0) {
    *(double *)(a1 + 4120) = v153;
  }
  *(double *)(a1 + 4128) = v153;
  uint64_t v154 = *(void *)(a1 + 4080);
  uint64_t v155 = *(void *)(a1 + 4072);
  if (v154 != v155) {
    sub_1907D6428((uint64_t *)(a1 + 4096), v155, v154, 0xF83E0F83E0F83E1 * ((v154 - v155) >> 3));
  }
  v633 = (uint64_t *)(a1 + 4072);
  sub_1907D5DF8((uint64_t *)(a1 + 4072));
  if (!*(unsigned char *)(a1 + 114) || *(void *)(a1 + 4048) == *(void *)(a1 + 4056)) {
    goto LABEL_463;
  }
  LOBYTE(v156) = 0;
  double v157 = *(double *)(a1 + 88);
  if (v157 < 0.0 || vabdd_f64(*(double *)(a1 + 1152), v157) > 2.5)
  {
LABEL_464:
    sub_1907D5DF8(v633);
    goto LABEL_465;
  }
  if (vabdd_f64(v157, *(double *)(a1 + 4120)) < 60.0) {
    goto LABEL_463;
  }
  uint64_t v158 = *(void *)(a1 + 1136);
  uint64_t v159 = *(void *)(a1 + 8);
  std::string::size_type v160 = *(std::__shared_weak_count **)(a1 + 16);
  if (v160) {
    atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v628 = v160;
  if (!v159)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v211 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v211, OS_LOG_TYPE_ERROR, "CLMM,Unexpected,invalid geometry pointer,generateRouteHint", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_WORD *)v675 = 0;
      v599 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v599);
      if (v599 != buf) {
        free(v599);
      }
      int v156 = 0;
      if (v160) {
        goto LABEL_427;
      }
    }
    else
    {
      int v156 = 0;
      if (v160) {
        goto LABEL_427;
      }
    }
    goto LABEL_298;
  }
  v657 = 0;
  v658 = 0;
  unint64_t v659 = 0;
  uint64_t v626 = v158;
  uint64_t v635 = v159;
  if (!*(unsigned char *)(a1 + 2232)) {
    goto LABEL_236;
  }
  sub_1907BDE7C((uint64_t)v638, (uint64_t)v655);
  double v161 = *(__n128 **)(a1 + 4048);
  if (v161 != *(__n128 **)(a1 + 4056))
  {
    while (1)
    {
      uint64_t v162 = (uint64_t *)v161->n128_u64[0];
      std::string::size_type v163 = (std::__shared_weak_count *)v161->n128_u64[1];
      if (v163)
      {
        atomic_fetch_add_explicit(&v163->__shared_owners_, 1uLL, memory_order_relaxed);
        int v164 = v161[1].n128_u8[4];
        atomic_fetch_add_explicit(&v163->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v166 = *v162;
        uint64_t v165 = v162[1];
        sub_1906BFE48(v163);
      }
      else
      {
        int v164 = v161[1].n128_u8[4];
        uint64_t v166 = *v162;
        uint64_t v165 = v162[1];
      }
      _ZF = v655[0] == v166 && v656 == v164;
      BOOL v168 = _ZF && v655[1] == v165;
      if (v163) {
        sub_1906BFE48(v163);
      }
      if (v168) {
        break;
      }
      double v161 = (__n128 *)((char *)v161 + 56);
      if (v161 == *(__n128 **)(a1 + 4056)) {
        goto LABEL_235;
      }
    }
    double v257 = *(double *)(a1 + 1152);
    double v258 = -1.0;
    if (v257 >= 0.0)
    {
      double v259 = *(double *)(a1 + 1992);
      double v260 = vabdd_f64(v257, v259);
      if (v259 >= 0.0) {
        double v258 = v260;
      }
      else {
        double v258 = -1.0;
      }
    }
    double v261 = fmax(*(double *)(a1 + 1800), 0.0) + (float)((float)random() * 4.6566e-10) * 0.25;
    if (v261 <= v258 * 72.0) {
      double v262 = v261;
    }
    else {
      double v262 = v258 * 72.0;
    }
    sub_1907B4FC4((uint64_t)v670, (uint64_t)v638);
    double v652 = COERCE_DOUBLE(&v652);
    v653 = &v652;
    unint64_t v654 = 0;
    while (v161 != *(__n128 **)(a1 + 4056))
    {
      sub_19076BCD4((__n128 **)&v652, v161);
      double v161 = (__n128 *)((char *)v161 + 56);
    }
    int v651 = 0;
    if (((*(uint64_t (**)(uint64_t, unsigned char *, double *, int *, double, double))(*(void *)v159 + 56))(v159, v670, &v652, &v651, *(double *)&v670[48], v262) & 1) == 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      char v280 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v158;
        _os_log_impl(&dword_1906B8000, v280, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        *(_DWORD *)v675 = 134349056;
        *(void *)&v675[4] = v158;
        long long v281 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v281);
        if (v281 != buf) {
          free(v281);
        }
      }
      goto LABEL_425;
    }
    if (v654 <= v651)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      int v284 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349568;
        *(void *)&uint8_t buf[4] = v158;
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v651;
        *(_WORD *)&buf[18] = 2050;
        *(void *)&buf[20] = v654;
        _os_log_impl(&dword_1906B8000, v284, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", buf, 0x1Cu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_425;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_DWORD *)v675 = 134349568;
      *(void *)&v675[4] = v158;
      *(_WORD *)&v675[12] = 1026;
      *(_DWORD *)&v675[14] = v651;
      *(_WORD *)&v675[18] = 2050;
      *(void *)&v675[20] = v654;
      v594 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v594);
      goto LABEL_1019;
    }
    double v263 = *(float *)&v670[24];
    double v264 = 5.0;
    if (*(double *)&v670[48] <= 0.97 && *(double *)&v670[48] >= 0.03)
    {
      if (*(double *)(a1 + 1320) <= 0.0 || (double v265 = *(double *)(a1 + 1232), v265 < 0.0))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        int v266 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349312;
          *(void *)&uint8_t buf[4] = v158;
          *(_WORD *)&buf[12] = 2050;
          *(void *)&buf[14] = 0x403E000000000000;
          _os_log_impl(&dword_1906B8000, v266, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", buf, 0x16u);
        }
        double v264 = 30.0;
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          *(_DWORD *)v675 = 134349312;
          *(void *)&v675[4] = v158;
          *(_WORD *)&v675[12] = 2050;
          *(void *)&v675[14] = 0x403E000000000000;
          v609 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v609);
          if (v609 != buf) {
            free(v609);
          }
        }
        goto LABEL_380;
      }
      double v580 = fmod(v265 - v263, 360.0);
      if (v580 < 0.0) {
        double v580 = v580 + 360.0;
      }
      if (v580 > 180.0) {
        double v580 = v580 + -360.0;
      }
      double v581 = fabs(v580);
      int v582 = *(_DWORD *)(a1 + 4040);
      if (v581 >= 135.0)
      {
        *(_DWORD *)(a1 + 4040) = v582 + 1;
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v589 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v590 = *(void *)(a1 + 1232);
          int v591 = *(_DWORD *)(a1 + 4040);
          *(_DWORD *)long long buf = 134349824;
          *(void *)&uint8_t buf[4] = v158;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v263;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&unsigned char buf[24] = v590;
          *(_WORD *)&unsigned char buf[32] = 1026;
          *(_DWORD *)&buf[34] = v591;
          _os_log_impl(&dword_1906B8000, v589, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_425;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_971;
        }
        goto LABEL_1042;
      }
      if (v581 > 60.0 && v582 >= 1)
      {
        *(_DWORD *)(a1 + 4040) = v582 + 1;
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v596 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v597 = *(void *)(a1 + 1232);
          int v598 = *(_DWORD *)(a1 + 4040);
          *(_DWORD *)long long buf = 134349824;
          *(void *)&uint8_t buf[4] = v158;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v263;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&unsigned char buf[24] = v597;
          *(_WORD *)&unsigned char buf[32] = 1026;
          *(_DWORD *)&buf[34] = v598;
          _os_log_impl(&dword_1906B8000, v596, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", buf, 0x26u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_425;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_971;
        }
LABEL_1042:
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
LABEL_971:
        uint64_t v592 = *(void *)(a1 + 1232);
        int v593 = *(_DWORD *)(a1 + 4040);
        *(_DWORD *)v675 = 134349824;
        *(void *)&v675[4] = v158;
        *(_WORD *)&v675[12] = 2050;
        *(double *)&v675[14] = v263;
        *(_WORD *)&v675[22] = 2050;
        *(void *)&v675[24] = v592;
        *(_WORD *)&v675[32] = 1026;
        *(_DWORD *)&v675[34] = v593;
        v594 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v594);
LABEL_1019:
        if (v594 != buf) {
          free(v594);
        }
LABEL_425:
        sub_190770ADC((uint64_t *)&v652);
        sub_1907B515C(v670);
        int v156 = 0;
        std::string::size_type v160 = v628;
        goto LABEL_426;
      }
      if (v581 > 80.0)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v584 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v585 = *(void *)(a1 + 1232);
          *(_DWORD *)long long buf = 134349568;
          *(void *)&uint8_t buf[4] = v158;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v263;
          *(_WORD *)&buf[22] = 2050;
          *(void *)&unsigned char buf[24] = v585;
          _os_log_impl(&dword_1906B8000, v584, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", buf, 0x20u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v586 = *(void *)(a1 + 1232);
          *(_DWORD *)v675 = 134349568;
          *(void *)&v675[4] = v158;
          *(_WORD *)&v675[12] = 2050;
          *(double *)&v675[14] = v263;
          *(_WORD *)&v675[22] = 2050;
          *(void *)&v675[24] = v586;
          v587 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v587);
          if (v587 != buf) {
            free(v587);
          }
        }
        goto LABEL_400;
      }
    }
LABEL_380:
    uint64_t v267 = *(void *)&v670[32];
    uint64_t v268 = *(void *)&v670[40];
    long long v269 = v653;
    uint64_t v270 = v651;
    if (v651 < 0)
    {
      do
        long long v269 = *(double **)v269;
      while (!__CFADD__(v270++, 1));
    }
    else if (v651)
    {
      unint64_t v271 = v651 + 1;
      do
      {
        long long v269 = (double *)*((void *)v269 + 1);
        --v271;
      }
      while (v271 > 1);
    }
    double v272 = sub_1906DA618((double *)(a1 + 608), *(double *)&v670[32], *(double *)&v670[40], v269[6], v269[7], 0.0);
    memset(v675, 0, 24);
    *(_OWORD *)&v675[24] = xmmword_1908824F0;
    v675[40] = 0;
    memset(v676, 0, 32);
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)&v676[112] = _Q1;
    *(void *)&v676[128] = 0xBFF0000000000000;
    memset(&v676[160], 0, 20);
    *(_WORD *)&v676[180] = 1;
    *(_DWORD *)&v676[184] = 0;
    memset(&v676[192], 0, 24);
    *(void *)&v676[32] = v267;
    *(void *)&v676[40] = v268;
    *(void *)&v676[48] = *(void *)(a1 + 1200);
    *(double *)&v676[56] = v263;
    if (v272 < 8.0) {
      double v272 = 8.0;
    }
    *(double *)&v676[64] = v272;
    *(double *)&v676[72] = v264;
    *(void *)&v676[80] = 0x3FF0000000000000;
    uint64_t v274 = *(void *)(a1 + 1312);
    *(void *)&v676[88] = *(void *)(a1 + 1224);
    *(void *)&v676[96] = v274;
    v676[104] = *(unsigned char *)(a1 + 1356);
    *(int8x16_t *)&v676[136] = vextq_s8(*(int8x16_t *)(a1 + 1144), *(int8x16_t *)(a1 + 1144), 8uLL);
    *(void *)&v676[152] = *(void *)(a1 + 1136);
    sub_1907D4B8C((uint64_t)v675, 0);
    uint64_t v276 = *(void *)v670;
    uint64_t v275 = *(void *)&v670[8];
    if (*(void *)&v670[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v670[8] + 8), 1uLL, memory_order_relaxed);
    }
    long long v277 = *(std::__shared_weak_count **)&v676[168];
    *(void *)&v676[160] = v276;
    *(void *)&v676[168] = v275;
    if (v277) {
      sub_1906BFE48(v277);
    }
    *(_OWORD *)&v676[176] = *(_OWORD *)&v670[16];
    *(_OWORD *)&v676[192] = *(_OWORD *)&v670[32];
    *(void *)&v676[208] = *(void *)&v670[48];
    sub_1907D4C9C((uint64_t *)&v657, (uint64_t)v675);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v278 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v279 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a1 + 4080) - *(void *)(a1 + 4072)) >> 3);
      *(_DWORD *)long long buf = 134350593;
      *(void *)&uint8_t buf[4] = v158;
      *(_WORD *)&buf[12] = 2049;
      *(void *)&buf[14] = *(void *)&v676[32];
      *(_WORD *)&buf[22] = 2049;
      *(void *)&unsigned char buf[24] = *(void *)&v676[40];
      *(_WORD *)&unsigned char buf[32] = 2050;
      *(void *)&buf[34] = *(void *)&v676[56];
      *(_WORD *)&buf[42] = 2050;
      *(void *)&buf[44] = *(void *)&v676[64];
      *(_WORD *)&buf[52] = 2050;
      *(void *)&buf[54] = *(void *)&v676[72];
      *(_WORD *)&buf[62] = 2050;
      uint64_t v678 = v279;
      _os_log_impl(&dword_1906B8000, v278, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", buf, 0x48u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v603 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a1 + 4080) - *(void *)(a1 + 4072)) >> 3);
      *(_DWORD *)v660 = 134350593;
      *(void *)&v660[4] = v158;
      *(_WORD *)&v660[12] = 2049;
      *(void *)&v660[14] = *(void *)&v676[32];
      *(_WORD *)&v660[22] = 2049;
      uint64_t v661 = *(void *)&v676[40];
      __int16 v662 = 2050;
      uint64_t v663 = *(void *)&v676[56];
      __int16 v664 = 2050;
      uint64_t v665 = *(void *)&v676[64];
      __int16 v666 = 2050;
      uint64_t v667 = *(void *)&v676[72];
      __int16 v668 = 2050;
      uint64_t v669 = v603;
      v604 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v604);
      if (v604 != buf) {
        free(v604);
      }
    }
    if (*(void *)&v676[168]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&v676[168]);
    }
LABEL_400:
    sub_190770ADC((uint64_t *)&v652);
    sub_1907B515C(v670);
    std::string::size_type v160 = v628;
    goto LABEL_236;
  }
LABEL_235:
  std::string::size_type v160 = v628;
LABEL_236:
  uint64_t v169 = (uint64_t)v657;
  v629 = v658;
  if (v658 != v657) {
    goto LABEL_237;
  }
  uint64_t v212 = *(double **)(a1 + 4048);
  v213 = *(uint64_t **)(a1 + 4056);
  if (v212 == (double *)v213) {
    goto LABEL_352;
  }
  int v214 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v622 = _Q0;
  do
  {
    double v218 = sub_1906DA618((double *)(a1 + 608), v212[4], v212[5], *(double *)(a1 + 1160), *(double *)(a1 + 1168), 0.0);
    memset(v675, 0, 24);
    *(_OWORD *)&v675[24] = xmmword_1908824F0;
    v675[40] = 0;
    memset(v676, 0, 32);
    *(_OWORD *)&v676[112] = v622;
    *(void *)&v676[128] = 0xBFF0000000000000;
    memset(&v676[160], 0, 20);
    *(_WORD *)&v676[180] = 1;
    *(_DWORD *)&v676[184] = 0;
    memset(&v676[192], 0, 24);
    *(_OWORD *)&v676[32] = *((_OWORD *)v212 + 2);
    *(void *)&v676[48] = *(void *)(a1 + 1200);
    if (v218 < 8.0) {
      double v218 = 8.0;
    }
    *(double *)&v676[56] = *((float *)v212 + 6);
    *(double *)&v676[64] = v218;
    *(_OWORD *)&v676[72] = xmmword_190885430;
    uint64_t v219 = *(void *)(a1 + 1312);
    *(void *)&v676[88] = *(void *)(a1 + 1224);
    *(void *)&v676[96] = v219;
    v676[104] = *(unsigned char *)(a1 + 1356);
    *(int8x16_t *)&v676[136] = vextq_s8(*(int8x16_t *)(a1 + 1144), *(int8x16_t *)(a1 + 1144), 8uLL);
    *(void *)&v676[152] = *(void *)(a1 + 1136);
    sub_1907D4B8C((uint64_t)v675, 0);
    *(double *)&v676[80] = 1.0 / *(double *)&v676[72];
    double v221 = *v212;
    uint64_t v220 = *((void *)v212 + 1);
    if (v220) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v220 + 8), 1uLL, memory_order_relaxed);
    }
    double v222 = *(std::__shared_weak_count **)&v676[168];
    *(double *)&v676[160] = v221;
    *(void *)&v676[168] = v220;
    if (v222) {
      sub_1906BFE48(v222);
    }
    long long v223 = *((_OWORD *)v212 + 1);
    long long v224 = *((_OWORD *)v212 + 2);
    *(double *)&v676[208] = v212[6];
    *(_OWORD *)&v676[176] = v223;
    *(_OWORD *)&v676[192] = v224;
    if (*(double *)(a1 + 1320) <= 0.0 || (double v225 = *(double *)(a1 + 1232), v225 < 0.0))
    {
      if (!*(unsigned char *)(a1 + 1848)) {
        goto LABEL_321;
      }
      double v225 = *(double *)(a1 + 2136);
      if (v225 < 0.0) {
        goto LABEL_321;
      }
    }
    double v226 = fmod(v225 - *(double *)&v676[56], 360.0);
    if (v226 < 0.0) {
      double v226 = v226 + 360.0;
    }
    double v227 = v226 + -360.0;
    if (v226 <= 180.0) {
      double v227 = v226;
    }
    if ((double v228 = fabs(v227), v228 < 135.0)
      && (v228 <= 60.0 || *(int *)(a1 + 4040) <= 0)
      && (v228 <= 80.0
       || (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 4056) - *(void *)(a1 + 4048)) >> 3)) < 2))
    {
      if (v227 == 0.0) {
        double v233 = *(double *)&v676[80];
      }
      else {
        double v233 = 1.0 / v228;
      }
      *(double *)&v676[80] = v233;
      sub_1907D4B8C((uint64_t)v675, 0);
      int v234 = v658;
      if ((unint64_t)v658 >= v659)
      {
        uint64_t v247 = sub_1907D68C4((uint64_t *)&v657, (uint64_t)v675);
      }
      else
      {
        _OWORD *v658 = *(_OWORD *)v675;
        long long v235 = *(_OWORD *)&v675[16];
        long long v236 = *(_OWORD *)&v675[32];
        long long v237 = *(_OWORD *)&v676[16];
        v234[3] = *(_OWORD *)v676;
        v234[4] = v237;
        v234[1] = v235;
        v234[2] = v236;
        long long v238 = *(_OWORD *)&v676[32];
        long long v239 = *(_OWORD *)&v676[48];
        long long v240 = *(_OWORD *)&v676[80];
        v234[7] = *(_OWORD *)&v676[64];
        v234[8] = v240;
        v234[5] = v238;
        v234[6] = v239;
        long long v241 = *(_OWORD *)&v676[96];
        long long v242 = *(_OWORD *)&v676[112];
        long long v243 = *(_OWORD *)&v676[144];
        v234[11] = *(_OWORD *)&v676[128];
        v234[12] = v243;
        v234[9] = v241;
        v234[10] = v242;
        *((void *)v234 + 26) = *(void *)&v676[160];
        uint64_t v244 = *(void *)&v676[168];
        *((void *)v234 + 27) = *(void *)&v676[168];
        if (v244) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v244 + 8), 1uLL, memory_order_relaxed);
        }
        long long v245 = *(_OWORD *)&v676[176];
        long long v246 = *(_OWORD *)&v676[192];
        *((void *)v234 + 32) = *(void *)&v676[208];
        v234[14] = v245;
        v234[15] = v246;
        uint64_t v247 = (uint64_t)v234 + 264;
      }
      v658 = (_OWORD *)v247;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      int v248 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v249 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a1 + 4080) - *(void *)(a1 + 4072)) >> 3);
        *(_DWORD *)long long buf = 134350849;
        *(void *)&uint8_t buf[4] = v158;
        *(_WORD *)&buf[12] = 2049;
        *(void *)&buf[14] = *(void *)&v676[32];
        *(_WORD *)&buf[22] = 2049;
        *(void *)&unsigned char buf[24] = *(void *)&v676[40];
        *(_WORD *)&unsigned char buf[32] = 2050;
        *(void *)&buf[34] = *(void *)&v676[56];
        *(_WORD *)&buf[42] = 2050;
        *(void *)&buf[44] = *(void *)&v676[64];
        *(_WORD *)&buf[52] = 2050;
        *(void *)&buf[54] = *(void *)&v676[72];
        *(_WORD *)&buf[62] = 2050;
        uint64_t v678 = v249;
        __int16 v679 = 2050;
        uint64_t v680 = *(void *)&v676[80];
        _os_log_impl(&dword_1906B8000, v248, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", buf, 0x52u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v250 = 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a1 + 4080) - *(void *)(a1 + 4072)) >> 3);
        *(_DWORD *)v670 = 134350849;
        *(void *)&v670[4] = v626;
        *(_WORD *)&v670[12] = 2049;
        *(void *)&v670[14] = *(void *)&v676[32];
        *(_WORD *)&v670[22] = 2049;
        *(void *)&v670[24] = *(void *)&v676[40];
        *(_WORD *)&v670[32] = 2050;
        *(void *)&v670[34] = *(void *)&v676[56];
        *(_WORD *)&v670[42] = 2050;
        *(void *)&v670[44] = *(void *)&v676[64];
        *(_WORD *)&v670[52] = 2050;
        *(void *)&v670[54] = *(void *)&v676[72];
        __int16 v671 = 2050;
        uint64_t v672 = v250;
        __int16 v673 = 2050;
        uint64_t v674 = *(void *)&v676[80];
        long long v251 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v251);
        goto LABEL_349;
      }
    }
    else
    {
LABEL_321:
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v229 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        double v230 = *((float *)v212 + 6);
        uint64_t v231 = *(void *)(a1 + 1232);
        int v232 = *(_DWORD *)(a1 + 4040);
        *(_DWORD *)long long buf = 134349824;
        *(void *)&uint8_t buf[4] = v158;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v230;
        *(_WORD *)&buf[22] = 2050;
        *(void *)&unsigned char buf[24] = v231;
        *(_WORD *)&unsigned char buf[32] = 1026;
        *(_DWORD *)&buf[34] = v232;
        _os_log_impl(&dword_1906B8000, v229, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
      }
      ++v214;
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        double v252 = *((float *)v212 + 6);
        uint64_t v253 = *(void *)(a1 + 1232);
        int v254 = *(_DWORD *)(a1 + 4040);
        *(_DWORD *)v670 = 134349824;
        *(void *)&v670[4] = v626;
        *(_WORD *)&v670[12] = 2050;
        *(double *)&v670[14] = v252;
        *(_WORD *)&v670[22] = 2050;
        *(void *)&v670[24] = v253;
        *(_WORD *)&v670[32] = 1026;
        *(_DWORD *)&v670[34] = v254;
        long long v251 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v251);
LABEL_349:
        if (v251 != buf) {
          free(v251);
        }
        uint64_t v158 = v626;
      }
    }
    if (*(void *)&v676[168]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&v676[168]);
    }
    v212 += 7;
  }
  while (v212 != (double *)v213);
  uint64_t v169 = (uint64_t)v657;
  v629 = v658;
  if (v214 <= 0)
  {
    std::string::size_type v160 = v628;
    goto LABEL_237;
  }
  std::string::size_type v160 = v628;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 4056) - *(void *)(a1 + 4048)) >> 3) != v214 || v658 != v657)
  {
LABEL_237:
    if (v629 != (_OWORD *)v169)
    {
      *(_DWORD *)(a1 + 4040) = 0;
      double v170 = -1.0;
      double v171 = 0.0;
      double v172 = -1.0;
      do
      {
        v173 = *(double **)(a1 + 4096);
        std::string::size_type v174 = *(double **)(a1 + 4104);
        if (v173 == v174) {
          goto LABEL_264;
        }
        BOOL v175 = 1;
        do
        {
          double v176 = vabdd_f64(v173[23], *(double *)(v169 + 184));
          if (v170 < 0.0) {
            double v170 = v176;
          }
          double v177 = sub_1906DA618((double *)(a1 + 608), *(double *)(v169 + 80), *(double *)(v169 + 88), v173[10], v173[11], 0.0);
          if (v177 < v172 || v172 < 0.0) {
            double v172 = v177;
          }
          if (v177 < 0.001)
          {
            BOOL v179 = *(double *)(v169 + 256) >= 0.2;
            *(void *)v670 = v670;
            *(void *)&v670[8] = v670;
            *(void *)&v670[16] = 0;
            if ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t, BOOL, void))(*(void *)v159 + 72))(v159, v670, v169 + 208, v179, 0))
            {
              unint64_t v180 = *(void *)&v670[16];
              BOOL v175 = *(void *)&v670[16] > 1uLL;
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              char v181 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 134349568;
                *(void *)&uint8_t buf[4] = v158;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v180 > 1;
                *(_WORD *)&buf[18] = 2050;
                *(void *)&buf[20] = *(void *)&v670[16];
                _os_log_impl(&dword_1906B8000, v181, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", buf, 0x1Cu);
              }
              uint64_t v159 = v635;
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
                }
                *(_DWORD *)v675 = 134349568;
                *(void *)&v675[4] = v626;
                *(_WORD *)&v675[12] = 1026;
                *(_DWORD *)&v675[14] = v180 > 1;
                *(_WORD *)&v675[18] = 2050;
                *(void *)&v675[20] = *(void *)&v670[16];
                std::string::size_type v182 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v182);
                if (v182 != buf) {
                  free(v182);
                }
                uint64_t v158 = v626;
                uint64_t v159 = v635;
              }
            }
            sub_19079AA88((uint64_t *)v670);
          }
          v173 += 33;
        }
        while (v173 != v174);
        std::string::size_type v160 = v628;
        if (v175)
        {
LABEL_264:
          double v183 = *(double *)(v169 + 128);
          unint64_t v184 = *(void *)(a1 + 4080);
          if (v184 >= *(void *)(a1 + 4088))
          {
            uint64_t v197 = sub_1907D68C4(v633, v169);
          }
          else
          {
            *(_OWORD *)unint64_t v184 = *(_OWORD *)v169;
            long long v185 = *(_OWORD *)(v169 + 16);
            long long v186 = *(_OWORD *)(v169 + 32);
            long long v187 = *(_OWORD *)(v169 + 64);
            *(_OWORD *)(v184 + 48) = *(_OWORD *)(v169 + 48);
            *(_OWORD *)(v184 + 64) = v187;
            *(_OWORD *)(v184 + 16) = v185;
            *(_OWORD *)(v184 + 32) = v186;
            long long v188 = *(_OWORD *)(v169 + 80);
            long long v189 = *(_OWORD *)(v169 + 96);
            long long v190 = *(_OWORD *)(v169 + 128);
            *(_OWORD *)(v184 + 112) = *(_OWORD *)(v169 + 112);
            *(_OWORD *)(v184 + 128) = v190;
            *(_OWORD *)(v184 + 80) = v188;
            *(_OWORD *)(v184 + 96) = v189;
            long long v191 = *(_OWORD *)(v169 + 144);
            long long v192 = *(_OWORD *)(v169 + 160);
            long long v193 = *(_OWORD *)(v169 + 192);
            *(_OWORD *)(v184 + 176) = *(_OWORD *)(v169 + 176);
            *(_OWORD *)(v184 + 192) = v193;
            *(_OWORD *)(v184 + 144) = v191;
            *(_OWORD *)(v184 + 160) = v192;
            *(void *)(v184 + 208) = *(void *)(v169 + 208);
            uint64_t v194 = *(void *)(v169 + 216);
            *(void *)(v184 + 216) = v194;
            if (v194) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v194 + 8), 1uLL, memory_order_relaxed);
            }
            long long v195 = *(_OWORD *)(v169 + 224);
            long long v196 = *(_OWORD *)(v169 + 240);
            *(void *)(v184 + 256) = *(void *)(v169 + 256);
            *(_OWORD *)(v184 + 224) = v195;
            *(_OWORD *)(v184 + 240) = v196;
            uint64_t v197 = v184 + 264;
          }
          double v171 = v171 + v183;
          *(void *)(a1 + 4080) = v197;
          uint64_t v158 = v626;
        }
        v169 += 264;
      }
      while ((_OWORD *)v169 != v629);
      if (v172 < 0.0 || v170 <= 0.0 || v170 >= 5.0 || v172 <= v170 * 50.0)
      {
        double v137 = (_OWORD *)(a1 + 1128);
        if (v171 > 0.0)
        {
          uint64_t v255 = *(void *)(a1 + 4072);
          uint64_t v256 = *(void *)(a1 + 4080);
          while (v255 != v256)
          {
            *(double *)(v255 + 128) = *(double *)(v255 + 128) / v171;
            v255 += 264;
          }
        }
        int v156 = 1;
      }
      else
      {
        double v137 = (_OWORD *)(a1 + 1128);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v198 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349312;
          *(void *)&uint8_t buf[4] = v158;
          *(_WORD *)&buf[12] = 2050;
          *(double *)&buf[14] = v172;
          _os_log_impl(&dword_1906B8000, v198, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", buf, 0x16u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          *(_DWORD *)v675 = 134349312;
          *(void *)&v675[4] = v626;
          *(_WORD *)&v675[12] = 2050;
          *(double *)&v675[14] = v172;
          v601 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::generateRouteHintMeasurement()", "CoreLocation: %s\n", v601);
          if (v601 != buf) {
            free(v601);
          }
          double v137 = (_OWORD *)(a1 + 1128);
          std::string::size_type v160 = v628;
        }
        sub_1907D5DF8(v633);
        int v156 = 0;
      }
      goto LABEL_426;
    }
LABEL_352:
    int v156 = 0;
    goto LABEL_353;
  }
  int v156 = 0;
  ++*(_DWORD *)(a1 + 4040);
LABEL_353:
  double v137 = (_OWORD *)(a1 + 1128);
LABEL_426:
  *(void *)long long buf = &v657;
  sub_1907D5DA4((void ***)buf);
  if (v160)
  {
LABEL_427:
    sub_1906BFE48(v160);
    if (v156) {
      goto LABEL_428;
    }
LABEL_463:
    LOBYTE(v156) = 0;
    goto LABEL_464;
  }
LABEL_298:
  if (!v156) {
    goto LABEL_464;
  }
LABEL_428:
  uint64_t v285 = *(void *)(a1 + 4072);
  if (v285 == *(void *)(a1 + 4080))
  {
    LOBYTE(v156) = 0;
  }
  else
  {
    uint64_t v286 = *(void *)(a1 + 4080);
    double v287 = *(double *)(v285 + 184);
    double v288 = vabdd_f64(v287, *(double *)(a1 + 1152));
    LOBYTE(v156) = v288 <= 0.01;
    if (v288 > 0.01) {
      goto LABEL_464;
    }
    while (1)
    {
      *(void *)&v676[224] = 0;
      *(_DWORD *)&v676[232] = 0;
      memset(&v676[184], 0, 34);
      memset(&v676[240], 0, 75);
      memset(&v676[320], 0, 56);
      *(_OWORD *)&v676[166] = 0u;
      memset(&v676[136], 0, 32);
      memset(&v676[40], 0, 96);
      *(void *)&v676[376] = 0xBFF0000000000000;
      *(_OWORD *)&v676[8] = *(_OWORD *)(v285 + 80);
      uint64_t v289 = *(void *)(v285 + 104);
      uint64_t v290 = *(void *)(v285 + 112);
      uint64_t v291 = *(void *)(v285 + 120);
      *(void *)&v676[24] = *(void *)(v285 + 96);
      *(void *)&v676[32] = v290;
      *(void *)&v676[144] = v291;
      *(_OWORD *)&v676[152] = *(_OWORD *)(v285 + 160);
      *(void *)&v676[168] = *(void *)(v285 + 176);
      uint64_t v292 = *(void *)(v285 + 144);
      *(void *)&v676[48] = *(void *)(v285 + 136);
      *(void *)&v676[56] = v289;
      *(void *)v675 = 0;
      *(void *)&v675[32] = 0;
      *(void *)&v675[40] = 0;
      *(void *)v676 = 0xBFF0000000000000;
      *(void *)&v676[136] = v292;
      v676[180] = *(unsigned char *)(v285 + 152);
      *(double *)&v675[24] = v287;
      *(int8x16_t *)&v675[8] = vextq_s8(*(int8x16_t *)(v285 + 192), *(int8x16_t *)(v285 + 192), 8uLL);
      double v293 = *(uint64_t **)(a1 + 864);
      v294 = *(uint64_t **)(a1 + 872);
      while (v293 != v294)
      {
        memset(buf, 0, 24);
        *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
        memset(&buf[32], 0, 32);
        LODWORD(v678) = 0;
        sub_190799FB8(a1, v285, v293, (double *)v675, (double *)v670, (double *)v660, (double *)&v657, (uint64_t)buf, 0);
        LODWORD(v678) = 2;
        *(void *)&unsigned char buf[24] = *(void *)(v285 + 128);
        unint64_t v295 = v293[13];
        unint64_t v296 = v293[12];
        if (v296 >= v295)
        {
          uint64_t v301 = v293[11];
          unint64_t v302 = 0x8E38E38E38E38E39 * ((uint64_t)(v296 - v301) >> 3);
          unint64_t v303 = v302 + 1;
          if (v302 + 1 > 0x38E38E38E38E38ELL) {
            sub_190718FD4();
          }
          unint64_t v304 = 0x8E38E38E38E38E39 * ((uint64_t)(v295 - v301) >> 3);
          if (2 * v304 > v303) {
            unint64_t v303 = 2 * v304;
          }
          if (v304 >= 0x1C71C71C71C71C7) {
            unint64_t v305 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v305 = v303;
          }
          if (v305) {
            uint64_t v306 = (char *)sub_1907B5928((uint64_t)(v293 + 13), v305);
          }
          else {
            uint64_t v306 = 0;
          }
          v307 = &v306[72 * v302];
          *(_OWORD *)v307 = *(_OWORD *)buf;
          long long v308 = *(_OWORD *)&buf[16];
          long long v309 = *(_OWORD *)&buf[32];
          long long v310 = *(_OWORD *)&buf[48];
          *((void *)v307 + 8) = v678;
          *((_OWORD *)v307 + 2) = v309;
          *((_OWORD *)v307 + 3) = v310;
          *((_OWORD *)v307 + 1) = v308;
          __int16 v312 = (char *)v293[11];
          BOOL v311 = (char *)v293[12];
          uint64_t v313 = (uint64_t)v307;
          if (v311 != v312)
          {
            do
            {
              *(_OWORD *)(v313 - 72) = *(_OWORD *)(v311 - 72);
              long long v314 = *(_OWORD *)(v311 - 56);
              long long v315 = *(_OWORD *)(v311 - 40);
              long long v316 = *(_OWORD *)(v311 - 24);
              *(_DWORD *)(v313 - 8) = *((_DWORD *)v311 - 2);
              *(_OWORD *)(v313 - 24) = v316;
              *(_OWORD *)(v313 - 40) = v315;
              *(_OWORD *)(v313 - 56) = v314;
              v313 -= 72;
              v311 -= 72;
            }
            while (v311 != v312);
            BOOL v311 = (char *)v293[11];
          }
          uint64_t v300 = (uint64_t)(v307 + 72);
          v293[11] = v313;
          v293[12] = (uint64_t)(v307 + 72);
          v293[13] = (uint64_t)&v306[72 * v305];
          if (v311) {
            operator delete(v311);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v296 = *(_OWORD *)buf;
          long long v297 = *(_OWORD *)&buf[16];
          long long v298 = *(_OWORD *)&buf[32];
          long long v299 = *(_OWORD *)&buf[48];
          *(void *)(v296 + 64) = v678;
          *(_OWORD *)(v296 + 32) = v298;
          *(_OWORD *)(v296 + 48) = v299;
          *(_OWORD *)(v296 + 16) = v297;
          uint64_t v300 = v296 + 72;
        }
        v293[12] = v300;
        sub_1907D4D3C((double *)v293);
        v293 += 14;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v317 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v318 = *(void *)(a1 + 1136);
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v318;
        _os_log_impl(&dword_1906B8000, v317, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,used route-hint", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v319 = *(void *)(a1 + 1136);
        *(_DWORD *)v670 = 134349056;
        *(void *)&v670[4] = v319;
        v320 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::integrateRouteHint()", "CoreLocation: %s\n", v320);
        if (v320 != buf) {
          free(v320);
        }
      }
      if ((v676[103] & 0x80000000) != 0) {
        operator delete(*(void **)&v676[80]);
      }
      if (v285 + 264 == v286) {
        break;
      }
      double v287 = *(double *)(v285 + 448);
      v285 += 264;
      if (vabdd_f64(v287, *(double *)(a1 + 1152)) > 0.01)
      {
        LOBYTE(v156) = 1;
        goto LABEL_464;
      }
    }
    LOBYTE(v156) = 1;
  }
LABEL_465:
  *(unsigned char *)(a1 + 1845) = v156;
  v321 = *(void **)(a1 + 872);
  uint64_t v322 = *(void *)(a1 + 864);
  if (v321 != (void *)v322)
  {
    double v323 = 0.0;
    uint64_t v324 = *(void *)(a1 + 864);
    do
    {
      double v323 = v323 + *(double *)(v324 + 56);
      v324 += 112;
    }
    while ((void *)v324 != v321);
    if (v323 > 0.0)
    {
      v325 = *(float **)(a1 + 936);
      *(void *)(a1 + 944) = v325;
      v326 = (void *)(a1 + 952);
      double v327 = 0.0;
      do
      {
        uint64_t v328 = v322;
        double v329 = *(double *)(v322 + 56) / v323;
        *(double *)(v322 + 64) = v329;
        double v327 = v327 + v329;
        float v330 = v327;
        if ((unint64_t)v325 >= *v326)
        {
          v332 = (float *)*v646;
          uint64_t v333 = ((char *)v325 - (unsigned char *)*v646) >> 2;
          unint64_t v334 = v333 + 1;
          if ((unint64_t)(v333 + 1) >> 62) {
            sub_190718FD4();
          }
          uint64_t v335 = *v326 - (void)v332;
          if (v335 >> 1 > v334) {
            unint64_t v334 = v335 >> 1;
          }
          if ((unint64_t)v335 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v336 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v336 = v334;
          }
          if (v336)
          {
            v337 = (char *)sub_19074E100(a1 + 952, v336);
            v325 = *(float **)(a1 + 944);
            v332 = *(float **)(a1 + 936);
          }
          else
          {
            v337 = 0;
          }
          v338 = (float *)&v337[4 * v333];
          float *v338 = v330;
          v331 = v338 + 1;
          while (v325 != v332)
          {
            int v339 = *((_DWORD *)v325-- - 1);
            *((_DWORD *)v338-- - 1) = v339;
          }
          *(void *)(a1 + 936) = v338;
          *(void *)(a1 + 944) = v331;
          *(void *)(a1 + 952) = &v337[4 * v336];
          if (v332) {
            operator delete(v332);
          }
        }
        else
        {
          float *v325 = v330;
          v331 = v325 + 1;
        }
        *(void *)(a1 + 944) = v331;
        uint64_t v322 = v328 + 112;
        v325 = v331;
      }
      while (v328 + 112 != *(void *)(a1 + 872));
      uint64_t v340 = *(void *)(a1 + 864);
      if (v322 != v340)
      {
        uint64_t v341 = v340 - 112;
        double v342 = 0.0;
        do
        {
          double v342 = v342 + *(double *)(v341 + 176) * *(double *)(v341 + 176);
          v341 += 112;
        }
        while (v341 != v328);
        if (v342 > 0.0) {
          *(double *)(a1 + 1608) = 1.0 / v342;
        }
      }
      goto LABEL_492;
    }
    do
    {
      v321 -= 14;
      sub_1907D5B4C(a1 + 880, v321);
    }
    while (v321 != (void *)v322);
    *(void *)(a1 + 872) = v322;
    goto LABEL_788;
  }
LABEL_492:
  sub_1907D5BA0(*(void **)(a1 + 992));
  *(void *)(a1 + 984) = v639;
  *(_OWORD *)(a1 + 992) = 0u;
  uint64_t v343 = *(void *)(a1 + 872);
  uint64_t v344 = *(void *)(a1 + 864);
  uint64_t v345 = v343 - v344;
  if (v343 == v344) {
    goto LABEL_771;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v346 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v346, OS_LOG_TYPE_DEBUG, "CLMM,resample", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_WORD *)v675 = 0;
      v588 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::resample()", "CoreLocation: %s\n", v588);
      if (v588 != buf) {
        free(v588);
      }
    }
  }
  if (*(double *)(a1 + 1224) == 0.0 || *(unsigned char *)(a1 + 1356))
  {
    unsigned int v347 = 48;
    int v348 = 5;
  }
  else
  {
    unsigned int v347 = 96;
    int v348 = 10;
  }
  memset(v675, 0, 24);
  unint64_t v349 = v347;
  sub_1906DDB40((uint64_t *)v675, v347);
  *(_DWORD *)long long buf = 0;
  sub_1907D6360(v670, 0x6DB6DB6DB6DB6DB7 * (v345 >> 4), buf);
  if (*(unsigned char *)(a1 + 2232) && *(unsigned char *)(a1 + 2489) && *v638)
  {
    int v350 = v348;
    do
    {
      uint64_t v351 = *(void *)&v675[8];
      if (*(void *)&v675[8] >= *(void *)&v675[16])
      {
        uint64_t v352 = sub_1907D5EFC((uint64_t *)v675, (uint64_t)v638);
      }
      else
      {
        sub_1907D6024((uint64_t)&v675[16], *(uint64_t *)&v675[8], (uint64_t)v638);
        uint64_t v352 = v351 + 112;
      }
      *(void *)&v675[8] = v352;
      sub_1907BD194();
      --v350;
    }
    while (v350);
  }
  else
  {
    int v348 = 0;
  }
  int v353 = 0;
  v632 = (void *)(a1 + 984);
  int v354 = v349 - v348;
  do
  {
    uint64_t v355 = random();
    v356 = *(float **)(a1 + 936);
    v357 = *(float **)(a1 + 944);
    if (v357 != v356)
    {
      unint64_t v358 = v357 - v356;
      v357 = *(float **)(a1 + 936);
      do
      {
        unint64_t v359 = v358 >> 1;
        v360 = &v357[v358 >> 1];
        float v362 = *v360;
        v361 = v360 + 1;
        v358 += ~(v358 >> 1);
        if (v362 < (float)((float)v355 * 4.6566e-10)) {
          v357 = v361;
        }
        else {
          unint64_t v358 = v359;
        }
      }
      while (v358);
    }
    uint64_t v363 = (char *)v357 - (char *)v356;
    uint64_t v364 = *(void *)v670;
    ++*(_DWORD *)(*(void *)v670 + (v363 << 30 >> 30));
    ++v353;
  }
  while (v353 != v354);
  uint64_t v365 = *(void *)(a1 + 864);
  uint64_t v366 = *(void *)(a1 + 872);
  if (v365 == v366)
  {
    uint64_t v366 = *(void *)(a1 + 864);
  }
  else
  {
    unint64_t v367 = 0;
    do
    {
      if (v367 >= (*(void *)&v670[8] - v364) >> 2) {
        break;
      }
      if (*(int *)(v364 + 4 * v367) >= 1)
      {
        int v368 = 0;
        do
        {
          uint64_t v369 = *(void *)&v675[8];
          if (*(void *)&v675[8] >= *(void *)&v675[16])
          {
            uint64_t v370 = sub_1907D5EFC((uint64_t *)v675, v365);
          }
          else
          {
            sub_1907D6024((uint64_t)&v675[16], *(uint64_t *)&v675[8], v365);
            uint64_t v370 = v369 + 112;
          }
          *(void *)&v675[8] = v370;
          sub_1907BD194();
          ++v368;
          uint64_t v364 = *(void *)v670;
        }
        while (v368 < *(_DWORD *)(*(void *)v670 + 4 * v367));
        uint64_t v366 = *(void *)(a1 + 872);
      }
      v365 += 112;
      ++v367;
    }
    while (v365 != v366);
  }
  uint64_t v371 = *(void *)&v675[8];
  unint64_t v372 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)&v675[8] - *(void *)v675) >> 4);
  if (v372 <= v349)
  {
    uint64_t v375 = *(void *)(a1 + 864);
    *(void *)(a1 + 864) = *(void *)v675;
    *(void *)(a1 + 872) = v371;
    *(void *)v675 = v375;
    *(void *)&v675[8] = v366;
    uint64_t v376 = *(void *)(a1 + 880);
    *(void *)(a1 + 880) = *(void *)&v675[16];
    *(void *)&v675[16] = v376;
  }
  else if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v373 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v372;
      _os_log_impl(&dword_1906B8000, v373, OS_LOG_TYPE_ERROR, "CLMM,Unexpected number of particles after resampling,%{public}d", buf, 8u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_DWORD *)v660 = 67240192;
      *(_DWORD *)&v660[4] = v372;
      v374 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::resample()", "CoreLocation: %s\n", v374);
      if (v374 != buf) {
        free(v374);
      }
    }
  }
  if (*(void *)v670)
  {
    *(void *)&v670[8] = *(void *)v670;
    operator delete(*(void **)v670);
  }
  *(void *)long long buf = v675;
  sub_1907D5AB4((void ***)buf);
  if (v372 > v349) {
    goto LABEL_793;
  }
  if (*(void *)(a1 + 872) == *(void *)(a1 + 864)) {
    goto LABEL_771;
  }
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v377 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v377, OS_LOG_TYPE_DEBUG, "CLMM,Assessing candidates", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_WORD *)v675 = 0;
      v595 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v595);
      if (v595 != buf) {
        free(v595);
      }
    }
  }
  v631 = v137;
  v378 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v634 = *(void *)(a1 + 8);
  if (v378) {
    atomic_fetch_add_explicit(&v378->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v623 = v378;
  unint64_t v630 = *(void *)(a1 + 1000);
  v379 = *(void **)(a1 + 984);
  if (v379 != v639)
  {
    while (1)
    {
      uint64_t v380 = v379[7];
      *((unsigned char *)v379 + 200) = 0;
      *((unsigned char *)v379 + 192) = 0;
      if (!v380) {
        break;
      }
      if (*(unsigned char *)(v380 + 17)) {
        *(unsigned char *)(a1 + 1844) = 1;
      }
      long long v381 = *v631;
      long long v382 = v631[1];
      long long v383 = v631[2];
      *(_OWORD *)(v379 + 627) = v631[3];
      *(_OWORD *)(v379 + 625) = v383;
      *(_OWORD *)(v379 + 623) = v382;
      *(_OWORD *)(v379 + 621) = v381;
      long long v384 = v631[4];
      long long v385 = v631[5];
      long long v386 = v631[6];
      *(_OWORD *)(v379 + 635) = v631[7];
      *(_OWORD *)(v379 + 633) = v386;
      *(_OWORD *)(v379 + 631) = v385;
      *(_OWORD *)(v379 + 629) = v384;
      std::string::operator=((std::string *)(v379 + 637), __str);
      memcpy(v379 + 640, __dst, 0x118uLL);
      if ((sub_19081203C(v634, (uint64_t)(v379 + 621), v379 + 7, *((unsigned char *)v379 + 48), (double *)v379 + 333, *((_DWORD *)v379 + 18)) & 1) == 0)
      {
        double v137 = v631;
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_764;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v500 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1906B8000, v500, OS_LOG_TYPE_DEBUG, "CLMM,interpolateOnRoad returned false, determining mean road position", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_764;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        *(_WORD *)v675 = 0;
        v499 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v499);
LABEL_987:
        if (v499 != buf) {
          free(v499);
        }
        double v137 = v631;
LABEL_764:
        int v624 = 0;
        ++*(_DWORD *)(a1 + 104);
        goto LABEL_767;
      }
      v387 = (double *)(v379 + 677);
      *(_OWORD *)(v379 + 677) = xmmword_190884920;
      if (*((int *)v379 + 18) < 1)
      {
        int v389 = 0;
      }
      else
      {
        uint64_t v388 = 0;
        int v389 = 0;
        do
        {
          v390 = (double *)&v379[v388];
          if (sub_1906DA618((double *)(a1 + 608), *((double *)v379 + 640), *((double *)v379 + 641), v390[141], v390[237], *(double *)(a1 + 1200)) <= 40.0)
          {
            double v391 = v390[333];
            if (v391 > *((double *)v379 + 678))
            {
              *((double *)v379 + 678) = v391;
              double v391 = v390[333];
            }
            ++v389;
            if (v391 < *v387) {
              double *v387 = v391;
            }
          }
          ++v388;
        }
        while (v388 < *((int *)v379 + 18));
      }
      *((_DWORD *)v379 + 19) = v389;
      uint64_t v392 = *(void *)(a1 + 872);
      uint64_t v393 = *(void *)(a1 + 864);
      if (v393 != v392)
      {
        double v394 = 0.0;
        do
        {
          sub_1907BDE7C(v393, (uint64_t)buf);
          if (*(void *)buf == v379[4]
            && buf[16] == *((unsigned __int8 *)v379 + 48)
            && *(void *)&buf[8] == v379[5]
            && *(double *)(v393 + 56) > v394)
          {
            uint64_t v392 = v393;
            double v394 = *(double *)(v393 + 56);
          }
          v393 += 112;
        }
        while (v393 != *(void *)(a1 + 872));
        if (v393 != v392)
        {
          uint64_t v396 = *(void *)v392;
          uint64_t v395 = *(void *)(v392 + 8);
          if (v395) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v395 + 8), 1uLL, memory_order_relaxed);
          }
          v397 = (std::__shared_weak_count *)v379[11];
          v379[10] = v396;
          v379[11] = v395;
          if (v397) {
            sub_1906BFE48(v397);
          }
          long long v398 = *(_OWORD *)(v392 + 16);
          long long v399 = *(_OWORD *)(v392 + 32);
          v379[16] = *(void *)(v392 + 48);
          *((_OWORD *)v379 + 6) = v398;
          *((_OWORD *)v379 + 7) = v399;
          long long v400 = *(_OWORD *)(v392 + 56);
          *(_OWORD *)((char *)v379 + 145) = *(_OWORD *)(v392 + 65);
          *(_OWORD *)(v379 + 17) = v400;
          if (v379 + 10 != (void *)v392) {
            sub_1907B5974((char *)v379 + 168, *(char **)(v392 + 88), *(void *)(v392 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v392 + 96) - *(void *)(v392 + 88)) >> 3));
          }
        }
      }
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v401 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v402 = *(void *)(a1 + 1136);
          uint64_t v403 = v379[4];
          int v404 = *((unsigned __int8 *)v379 + 48);
          int v405 = *((_DWORD *)v379 + 19);
          *(_DWORD *)long long buf = 134349825;
          *(void *)&uint8_t buf[4] = v402;
          *(_WORD *)&buf[12] = 2049;
          *(void *)&buf[14] = v403;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&unsigned char buf[24] = v404;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v405;
          _os_log_impl(&dword_1906B8000, v401, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,candidate,roadID,%{private}llu,fwd,%{public}d,countAroundMean,%{public}d", buf, 0x22u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v408 = *(void *)(a1 + 1136);
          uint64_t v409 = v379[4];
          int v410 = *((unsigned __int8 *)v379 + 48);
          int v411 = *((_DWORD *)v379 + 19);
          *(_DWORD *)v675 = 134349825;
          *(void *)&v675[4] = v408;
          *(_WORD *)&v675[12] = 2049;
          *(void *)&v675[14] = v409;
          *(_WORD *)&v675[22] = 1026;
          *(_DWORD *)&v675[24] = v410;
          *(_WORD *)&v675[28] = 1026;
          *(_DWORD *)&v675[30] = v411;
          v412 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v412);
          if (v412 != buf) {
            free(v412);
          }
        }
      }
      v406 = (void *)v379[1];
      if (v406)
      {
        do
        {
          v407 = v406;
          v406 = (void *)*v406;
        }
        while (v406);
      }
      else
      {
        do
        {
          v407 = (void *)v379[2];
          _ZF = *v407 == (void)v379;
          v379 = v407;
        }
        while (!_ZF);
      }
      v379 = v407;
      if (v407 == v639) {
        goto LABEL_606;
      }
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v137 = v631;
    v498 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v498, OS_LOG_TYPE_ERROR, "CLMM,NULL road, bad candidate", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_764;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    *(_WORD *)v675 = 0;
    v499 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v499);
    goto LABEL_987;
  }
LABEL_606:
  if (v630 < 2)
  {
    int v624 = 1;
    goto LABEL_766;
  }
  v413 = (void *)*v632;
  int v624 = 1;
  if ((void *)*v632 == v639) {
    goto LABEL_766;
  }
  v647 = (double *)(a1 + 608);
  __asm { FMOV            V0.2D, #-1.0 }
  long long v627 = _Q0;
  while (2)
  {
    v655[0] = 0;
    uint64_t v415 = *(void *)(a1 + 1136);
    *(void *)v675 = 0;
    *(void *)&v675[8] = v415;
    *(_OWORD *)&v675[16] = v627;
    *(void *)&v675[32] = 0;
    *(void *)&v675[40] = 0;
    *(void *)v676 = 0xBFF0000000000000;
    *(void *)&v676[224] = 0;
    *(_DWORD *)&v676[232] = 0;
    memset(&v676[184], 0, 34);
    memset(&v676[240], 0, 75);
    memset(&v676[320], 0, 56);
    memset(&v676[8], 0, 174);
    *(void *)&v676[376] = 0xBFF0000000000000;
    *(void *)v660 = v660;
    *(void *)&v660[8] = v660;
    *(void *)&v660[16] = 0;
    uint64_t v416 = 677;
    if (!*((unsigned char *)v413 + 48)) {
      uint64_t v416 = 678;
    }
    if (((*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, void, uint64_t, void *, double, double))(*(void *)v634 + 80))(v634, v675, v660, 0, 1, v413 + 7, *(double *)&v413[v416], 40.0) & 1) == 0)
    {
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v425 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1906B8000, v425, OS_LOG_TYPE_DEBUG, "CLMM,roadsAtIntersection returned false, searching for connected candidates", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          *(_WORD *)v670 = 0;
          v485 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v485);
          if (v485 != buf) {
            free(v485);
          }
        }
      }
      ++*(_DWORD *)(a1 + 108);
LABEL_633:
      int v426 = 1;
      goto LABEL_705;
    }
    if (!*(void *)&v660[16]) {
      goto LABEL_704;
    }
    int v417 = *((_DWORD *)v413 + 18);
    if (v417 < 1)
    {
LABEL_679:
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_704;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v472 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v472, OS_LOG_TYPE_DEBUG, "CLMM,unexpected incomingCount < 1", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_704;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_WORD *)v670 = 0;
      v473 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v473);
      goto LABEL_737;
    }
    uint64_t v418 = 0;
    int v636 = 0;
    double v419 = *(double *)&v676[224];
    double v420 = *(double *)&v676[104];
    double v421 = *(double *)&v676[112];
    while (2)
    {
      double v422 = *(double *)&v413[v418 + 333];
      if (*((unsigned char *)v413 + 48))
      {
        if (v422 >= v419) {
          goto LABEL_619;
        }
      }
      else if (v422 >= v419)
      {
LABEL_619:
        long double v423 = sub_1906DA618(v647, v420, v421, *(double *)&v413[v418 + 141], *(double *)&v413[v418 + 237], *(double *)(a1 + 1200));
        int v424 = v636;
        if (v423 <= 40.0) {
          int v424 = v636 + 1;
        }
        int v636 = v424;
        int v417 = *((_DWORD *)v413 + 18);
      }
      if (++v418 < v417) {
        continue;
      }
      break;
    }
    if (v636 < 1) {
      goto LABEL_679;
    }
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v427 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v428 = *(void *)(a1 + 1136);
        uint64_t v429 = v413[4];
        int v430 = *((_DWORD *)v413 + 19);
        *(_DWORD *)long long buf = 134349569;
        *(void *)&uint8_t buf[4] = v428;
        *(_WORD *)&buf[12] = 2049;
        *(void *)&buf[14] = v429;
        *(_WORD *)&buf[22] = 1026;
        *(_DWORD *)&unsigned char buf[24] = v430;
        _os_log_impl(&dword_1906B8000, v427, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,incoming,countAroundMean,%{public}d", buf, 0x1Cu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v486 = *(void *)(a1 + 1136);
        uint64_t v487 = v413[4];
        int v488 = *((_DWORD *)v413 + 19);
        *(_DWORD *)v670 = 134349569;
        *(void *)&v670[4] = v486;
        *(_WORD *)&v670[12] = 2049;
        *(void *)&v670[14] = v487;
        *(_WORD *)&v670[22] = 1026;
        *(_DWORD *)&v670[24] = v488;
        v489 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v489);
        if (v489 != buf) {
          free(v489);
        }
      }
    }
    *((_DWORD *)v413 + 52) = v636;
    uint64_t v431 = *(void *)&v660[8];
    if (*(unsigned char **)&v660[8] == v660) {
      goto LABEL_698;
    }
    uint64_t v432 = 0;
    int v625 = 0;
    int v433 = 0;
    v621 = v413 + 86;
    while (2)
    {
      v434 = *(uint64_t **)(v431 + 16);
      uint64_t v435 = *v434;
      if (*v434 == v413[4] && *(unsigned __int8 *)(v431 + 32) == (*((unsigned __int8 *)v413 + 48) ^ 1)) {
        goto LABEL_670;
      }
      v436 = *(std::__shared_weak_count **)(v431 + 24);
      if (v436)
      {
        atomic_fetch_add_explicit(&v436->__shared_owners_, 1uLL, memory_order_relaxed);
        char v437 = *(unsigned char *)(v431 + 32);
        atomic_fetch_add_explicit(&v436->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v435 = *v434;
        v438 = (_OWORD *)v434[1];
        sub_1906BFE48(v436);
        sub_1906BFE48(v436);
      }
      else
      {
        char v437 = *(unsigned char *)(v431 + 32);
        v438 = (_OWORD *)v434[1];
      }
      v657 = (_OWORD *)v435;
      v658 = v438;
      LOBYTE(v659) = v437;
      uint64_t v439 = sub_1907D5E44((uint64_t)v632, (uint64_t *)&v657);
      double v652 = 0.0;
      if (v639 == (void *)v439 || (uint64_t v440 = v439, *(int *)(v439 + 72) < 1))
      {
LABEL_668:
        uint64_t v451 = v432;
        goto LABEL_669;
      }
      uint64_t v441 = 0;
      int v442 = 0;
      double v443 = 0.0;
      double v444 = *(double *)&v676[104];
      double v445 = *(double *)&v676[112];
      double v446 = 0.0;
      while (2)
      {
        uint64_t v447 = v440 + 8 * v441;
        double v448 = *(double *)(v447 + 2664);
        double v449 = *(double *)(v431 + 40);
        if (*(unsigned char *)(v440 + 48))
        {
          if (v448 <= v449) {
            goto LABEL_657;
          }
        }
        else if (v448 >= v449)
        {
          goto LABEL_657;
        }
        double v450 = sub_1906DA618(v647, v444, v445, *(double *)(v440 + 8 * v441 + 1128), *(double *)(v440 + 8 * v441 + 1896), *(double *)(a1 + 1200));
        if (v450 <= 40.0)
        {
          double v443 = v443 + *(double *)(v447 + 2664);
          double v652 = v443;
          double v446 = v446 + v450;
          ++v442;
        }
LABEL_657:
        if (++v441 < *(int *)(v440 + 72)) {
          continue;
        }
        break;
      }
      if (!v442) {
        goto LABEL_668;
      }
      ++v625;
      double v652 = v443 / (double)v442;
      uint64_t v451 = (v442 + v636);
      if ((int)v451 <= (int)v432) {
        goto LABEL_668;
      }
      if (*(unsigned char *)(a1 + 96))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        v452 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v453 = *(void *)(a1 + 1136);
          uint64_t v454 = v413[4];
          *(_DWORD *)long long buf = 134349825;
          *(void *)&uint8_t buf[4] = v453;
          *(_WORD *)&buf[12] = 2049;
          *(void *)&buf[14] = v454;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&unsigned char buf[24] = v636;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v442;
          _os_log_impl(&dword_1906B8000, v452, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,combinedBest,roadID,%{private}llu,incomingCount,%{public}d,outgoingCount,%{public}d", buf, 0x22u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v469 = *(void *)(a1 + 1136);
          uint64_t v470 = v413[4];
          *(_DWORD *)v670 = 134349825;
          *(void *)&v670[4] = v469;
          *(_WORD *)&v670[12] = 2049;
          *(void *)&v670[14] = v470;
          *(_WORD *)&v670[22] = 1026;
          *(_DWORD *)&v670[24] = v636;
          *(_WORD *)&v670[28] = 1026;
          *(_DWORD *)&v670[30] = v442;
          v471 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v471);
          if (v471 != buf) {
            free(v471);
          }
        }
      }
      long long v455 = *(_OWORD *)&v676[32];
      *((_OWORD *)v413 + 20) = *(_OWORD *)&v676[16];
      *((_OWORD *)v413 + 21) = v455;
      long long v456 = *(_OWORD *)&v676[64];
      *((_OWORD *)v413 + 22) = *(_OWORD *)&v676[48];
      *((_OWORD *)v413 + 23) = v456;
      long long v457 = *(_OWORD *)&v675[16];
      *((_OWORD *)v413 + 16) = *(_OWORD *)v675;
      *((_OWORD *)v413 + 17) = v457;
      long long v458 = *(_OWORD *)v676;
      *((_OWORD *)v413 + 18) = *(_OWORD *)&v675[32];
      *((_OWORD *)v413 + 19) = v458;
      std::string::operator=((std::string *)v413 + 16, (const std::string *)&v676[80]);
      memcpy(v413 + 51, &v676[104], 0x118uLL);
      *((_DWORD *)v413 + 53) = v442;
      *((_DWORD *)v413 + 54) = v451;
      *((double *)v413 + 31) = v446 / (double)v442;
      v413[140] = *(void *)(v431 + 40);
      v460 = *(_OWORD **)(v440 + 56);
      v459 = *(std::__shared_weak_count **)(v440 + 64);
      if (v459)
      {
        atomic_fetch_add_explicit(&v459->__shared_owners_, 1uLL, memory_order_relaxed);
        char v461 = *(unsigned char *)(v440 + 48);
        *((_OWORD *)v413 + 14) = *v460;
        *((unsigned char *)v413 + 240) = v461;
        sub_1906BFE48(v459);
      }
      else
      {
        char v462 = *(unsigned char *)(v440 + 48);
        *((_OWORD *)v413 + 14) = *v460;
        *((unsigned char *)v413 + 240) = v462;
      }
      long long v463 = *v631;
      long long v464 = v631[1];
      long long v465 = v631[3];
      *((_OWORD *)v413 + 45) = v631[2];
      *((_OWORD *)v413 + 46) = v465;
      _OWORD *v621 = v463;
      *((_OWORD *)v413 + 44) = v464;
      long long v466 = v631[4];
      long long v467 = v631[5];
      long long v468 = v631[7];
      *((_OWORD *)v413 + 49) = v631[6];
      *((_OWORD *)v413 + 50) = v468;
      *((_OWORD *)v413 + 47) = v466;
      *((_OWORD *)v413 + 48) = v467;
      std::string::operator=((std::string *)v413 + 34, __str);
      memcpy(v413 + 105, __dst, 0x118uLL);
      if ((sub_19081203C(v634, (uint64_t)v621, (uint64_t *)(v440 + 56), *(unsigned char *)(v440 + 48), &v652, 1) & 1) == 0)
      {
        if (*(unsigned char *)(a1 + 96))
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          v484 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1906B8000, v484, OS_LOG_TYPE_DEBUG, "CLMM,interpolateOnRoad returned false, determining outgoing road position", buf, 2u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            *(_WORD *)v670 = 0;
            v497 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v497);
            if (v497 != buf) {
              free(v497);
            }
          }
        }
        ++*(_DWORD *)(a1 + 104);
        goto LABEL_633;
      }
LABEL_669:
      ++v433;
      uint64_t v432 = v451;
LABEL_670:
      uint64_t v431 = *(void *)(v431 + 8);
      if ((unsigned char *)v431 != v660) {
        continue;
      }
      break;
    }
    if ((int)v432 >= 1)
    {
      *((unsigned char *)v413 + 200) = 1;
      if (v433 > 1) {
        *((unsigned char *)v413 + 192) = 1;
      }
      *((_DWORD *)v413 + 49) = v625;
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_697;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      v474 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v475 = *(void *)(a1 + 1136);
        uint64_t v476 = v413[4];
        int v477 = *((unsigned __int8 *)v413 + 200);
        int v478 = *((unsigned __int8 *)v413 + 192);
        *(_DWORD *)long long buf = 134349825;
        *(void *)&uint8_t buf[4] = v475;
        *(_WORD *)&buf[12] = 2049;
        *(void *)&buf[14] = v476;
        *(_WORD *)&buf[22] = 1026;
        *(_DWORD *)&unsigned char buf[24] = v477;
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = v478;
        _os_log_impl(&dword_1906B8000, v474, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,isCombined,%{public}d,isMulti,%{public}d", buf, 0x22u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v492 = *(void *)(a1 + 1136);
        uint64_t v493 = v413[4];
        int v494 = *((unsigned __int8 *)v413 + 200);
        int v495 = *((unsigned __int8 *)v413 + 192);
        *(_DWORD *)v670 = 134349825;
        *(void *)&v670[4] = v492;
        *(_WORD *)&v670[12] = 2049;
        *(void *)&v670[14] = v493;
        *(_WORD *)&v670[22] = 1026;
        *(_DWORD *)&v670[24] = v494;
        *(_WORD *)&v670[28] = 1026;
        *(_DWORD *)&v670[30] = v495;
        v496 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v496);
        if (v496 != buf) {
          free(v496);
        }
        int v426 = 0;
      }
      else
      {
LABEL_697:
        int v426 = 0;
      }
      goto LABEL_705;
    }
LABEL_698:
    if (!*(unsigned char *)(a1 + 96))
    {
      int v426 = 37;
      goto LABEL_705;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v479 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v480 = *(void *)(a1 + 1136);
      uint64_t v481 = v413[4];
      *(_DWORD *)long long buf = 134349313;
      *(void *)&uint8_t buf[4] = v480;
      *(_WORD *)&buf[12] = 2049;
      *(void *)&buf[14] = v481;
      _os_log_impl(&dword_1906B8000, v479, OS_LOG_TYPE_DEBUG, "CLMM,Time,%{public}.1lf,roadID,%{private}llu,no particles after the intersection", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 2))
    {
LABEL_704:
      int v426 = 37;
      goto LABEL_705;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v490 = *(void *)(a1 + 1136);
    uint64_t v491 = v413[4];
    *(_DWORD *)v670 = 134349313;
    *(void *)&v670[4] = v490;
    *(_WORD *)&v670[12] = 2049;
    *(void *)&v670[14] = v491;
    v473 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::assessCandidates()", "CoreLocation: %s\n", v473);
LABEL_737:
    if (v473 != buf) {
      free(v473);
    }
    int v426 = 37;
LABEL_705:
    sub_190770ADC((uint64_t *)v660);
    if ((v676[103] & 0x80000000) != 0) {
      operator delete(*(void **)&v676[80]);
    }
    if (v426 == 37 || !v426)
    {
      v482 = (void *)v413[1];
      if (v482)
      {
        do
        {
          v483 = v482;
          v482 = (void *)*v482;
        }
        while (v482);
      }
      else
      {
        do
        {
          v483 = (void *)v413[2];
          _ZF = *v483 == (void)v413;
          v413 = v483;
        }
        while (!_ZF);
      }
      v413 = v483;
      if (v483 == v639)
      {
        int v624 = 1;
        goto LABEL_766;
      }
      continue;
    }
    break;
  }
  int v624 = 0;
LABEL_766:
  double v137 = v631;
LABEL_767:
  if (!v623)
  {
    if (v624) {
      goto LABEL_771;
    }
    goto LABEL_788;
  }
  sub_1906BFE48(v623);
  if ((v624 & 1) == 0) {
    goto LABEL_788;
  }
LABEL_771:
  if ((sub_1907C0EC4(a1) & 1) == 0) {
    goto LABEL_793;
  }
  sub_1907C48BC(a1);
  if ((sub_1907C6068(a1) & 1) == 0) {
    goto LABEL_788;
  }
  v670[0] = 0;
  if ((sub_1907C7358(a1, v670) & 1) == 0) {
    goto LABEL_793;
  }
  if (v670[0] && !sub_1907C7E10(a1))
  {
LABEL_788:
    (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    goto LABEL_789;
  }
  if (!*(unsigned char *)(a1 + 1392)
    || (uint64_t v501 = *(void *)(a1 + 1016),
        *(unsigned char *)(a1 + 777) = *(unsigned char *)(v501 + 16),
        *(_DWORD *)(a1 + 780) = *(_DWORD *)(v501 + 20),
        *(unsigned char *)(a1 + 784) = *(unsigned char *)(a1 + 1649),
        !*(unsigned char *)(a1 + 2232)))
  {
    sub_190770ADC((uint64_t *)(a1 + 3072));
    v508 = (uint64_t *)(a1 + 3120);
    goto LABEL_887;
  }
  uint64_t v502 = *(void *)(a1 + 1240);
  if (*(void *)(a1 + 2080) != v502)
  {
    double v503 = fmod(*(double *)(a1 + 1432) - *(double *)(a1 + 2272), 360.0);
    if (v503 < 0.0) {
      double v503 = v503 + 360.0;
    }
    if (v503 > 180.0) {
      double v503 = v503 + -360.0;
    }
    if (fabs(v503) > 45.0)
    {
      uint64_t v504 = *(void *)(a1 + 3080);
      if (v504 == a1 + 3072)
      {
        BOOL v506 = 1;
      }
      else
      {
        do
        {
          uint64_t v505 = **(void **)(v504 + 16);
          _ZF = v502 == v505;
          BOOL v506 = v502 != v505;
          if (_ZF) {
            break;
          }
          uint64_t v504 = *(void *)(v504 + 8);
        }
        while (v504 != a1 + 3072);
      }
      for (uint64_t j = *(void *)(a1 + 3128); j != a1 + 3120; uint64_t j = *(void *)(j + 8))
      {
        if (v502 == **(void **)(j + 16)) {
          goto LABEL_886;
        }
      }
      if (v506)
      {
        v510 = *(std::__shared_weak_count **)(a1 + 1024);
        if (v510) {
          atomic_fetch_add_explicit(&v510->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v511 = *(void *)(a1 + 1856);
        v512 = *(std::__shared_weak_count **)(a1 + 1864);
        if (v512) {
          atomic_fetch_add_explicit(&v512->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v514 = *(float64x2_t **)(v501 + 136);
        v513 = *(float64x2_t **)(v501 + 144);
        float64x2_t v515 = 0uLL;
        float64x2_t v516 = 0uLL;
        if (v513 != v514) {
          float64x2_t v516 = *v514;
        }
        uint64_t v519 = v511 + 136;
        v518 = *(float64x2_t **)(v511 + 136);
        v517 = *(float64x2_t **)(v519 + 8);
        if (v517 != v518) {
          float64x2_t v515 = *v518;
        }
        int32x2_t v520 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v516, v515)));
        if (vand_s8((int8x8_t)v520, (int8x8_t)vdup_lane_s32(v520, 1)).u8[0]) {
          goto LABEL_829;
        }
        float64x2_t v521 = 0uLL;
        float64x2_t v522 = 0uLL;
        if (v513 != v514) {
          float64x2_t v522 = *v514;
        }
        if (v517 != v518) {
          float64x2_t v521 = v517[-1];
        }
        int32x2_t v523 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v522, v521)));
        if (vand_s8((int8x8_t)v523, (int8x8_t)vdup_lane_s32(v523, 1)).u8[0]) {
          goto LABEL_829;
        }
        float64x2_t v524 = 0uLL;
        float64x2_t v525 = 0uLL;
        if (v513 != v514) {
          float64x2_t v525 = v513[-1];
        }
        if (v517 != v518) {
          float64x2_t v524 = *v518;
        }
        int32x2_t v526 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v525, v524)));
        if (vand_s8((int8x8_t)v526, (int8x8_t)vdup_lane_s32(v526, 1)).u8[0]) {
          goto LABEL_829;
        }
        float64x2_t v527 = 0uLL;
        float64x2_t v528 = 0uLL;
        if (v513 != v514) {
          float64x2_t v528 = v513[-1];
        }
        if (v517 != v518) {
          float64x2_t v527 = v517[-1];
        }
        int32x2_t v529 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v528, v527)));
        if (vand_s8((int8x8_t)v529, (int8x8_t)vdup_lane_s32(v529, 1)).u8[0]) {
LABEL_829:
        }
          int v530 = 1;
        else {
          int v530 = 0;
        }
        if (*(unsigned char *)(a1 + 96))
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          v531 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v532 = *(void *)(a1 + 1136);
            uint64_t v533 = **(void **)(a1 + 1016);
            uint64_t v534 = **(void **)(a1 + 1856);
            *(_DWORD *)long long buf = 134349825;
            *(void *)&uint8_t buf[4] = v532;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v530;
            *(_WORD *)&buf[18] = 2049;
            *(void *)&buf[20] = v533;
            *(_WORD *)&buf[28] = 2049;
            *(void *)&buf[30] = v534;
            _os_log_impl(&dword_1906B8000, v531, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping check,connecting roads,%{public}d,current road,%{private}lld,prior road,%{private}lld", buf, 0x26u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            uint64_t v605 = *(void *)(a1 + 1136);
            uint64_t v606 = **(void **)(a1 + 1016);
            uint64_t v607 = **(void **)(a1 + 1856);
            *(_DWORD *)v675 = 134349825;
            *(void *)&v675[4] = v605;
            *(_WORD *)&v675[12] = 1026;
            *(_DWORD *)&v675[14] = v530;
            *(_WORD *)&v675[18] = 2049;
            *(void *)&v675[20] = v606;
            *(_WORD *)&v675[28] = 2049;
            *(void *)&v675[30] = v607;
            v608 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v608);
            if (v608 != buf) {
              free(v608);
            }
          }
        }
        if (v512) {
          sub_1906BFE48(v512);
        }
        if (v510) {
          sub_1906BFE48(v510);
        }
        if ((v530 & 1) == 0)
        {
          v535 = *(void **)(a1 + 1656);
          if (!v535 || !*v535) {
            goto LABEL_862;
          }
          v536 = *(uint64_t **)(a1 + 1016);
          v537 = *(std::__shared_weak_count **)(a1 + 1024);
          if (v537) {
            atomic_fetch_add_explicit(&v537->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v538 = *(uint64_t **)(a1 + 1856);
          v539 = *(std::__shared_weak_count **)(a1 + 1864);
          if (v539) {
            atomic_fetch_add_explicit(&v539->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v540 = *(float64x2_t **)(*(void *)(a1 + 1656) + 136);
          float64x2_t v648 = 0u;
          float64x2_t v640 = 0u;
          if (*(float64x2_t **)(*(void *)(a1 + 1656) + 144) != v540) {
            float64x2_t v640 = *v540;
          }
          uint64_t v541 = v538[18];
          if (v541 != v538[17]) {
            float64x2_t v648 = *(float64x2_t *)(v541 - 16);
          }
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            v542 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v543 = *(void *)(a1 + 1136);
              uint64_t v544 = *v538;
              uint64_t v545 = **(void **)(a1 + 1656);
              uint64_t v546 = *v536;
              *(_DWORD *)long long buf = 134349825;
              *(void *)&uint8_t buf[4] = v543;
              *(_WORD *)&buf[12] = 2049;
              *(void *)&buf[14] = v544;
              *(_WORD *)&buf[22] = 2049;
              *(void *)&unsigned char buf[24] = v545;
              *(_WORD *)&unsigned char buf[32] = 2049;
              *(void *)&buf[34] = v546;
              _os_log_impl(&dword_1906B8000, v542, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping check,prior road,%{private}lld, connected to the incoming road,%{private}lld, of the current solution road,%{private}lld", buf, 0x2Au);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              uint64_t v616 = *(void *)(a1 + 1136);
              uint64_t v617 = *v538;
              uint64_t v618 = **(void **)(a1 + 1656);
              uint64_t v619 = *v536;
              *(_DWORD *)v675 = 134349825;
              *(void *)&v675[4] = v616;
              *(_WORD *)&v675[12] = 2049;
              *(void *)&v675[14] = v617;
              *(_WORD *)&v675[22] = 2049;
              *(void *)&v675[24] = v618;
              *(_WORD *)&v675[32] = 2049;
              *(void *)&v675[34] = v619;
              v620 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v620);
              if (v620 != buf) {
                free(v620);
              }
            }
          }
          int32x2_t v547 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v640, v648)));
          unsigned __int8 v649 = vand_s8((int8x8_t)v547, (int8x8_t)vdup_lane_s32(v547, 1)).u8[0];
          if (v539) {
            sub_1906BFE48(v539);
          }
          if (v537) {
            sub_1906BFE48(v537);
          }
          if ((v649 & 1) == 0)
          {
LABEL_862:
            BOOL v548 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 2256), *(double *)(a1 + 2264), *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200)) > 35.0|| *(_DWORD *)(a1 + 2680) > 15;
            if (*(unsigned char *)(a1 + 96))
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              v553 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v554 = *(void *)(a1 + 1136);
                uint64_t v555 = *(void *)(a1 + 2272);
                uint64_t v556 = *(void *)(a1 + 1432);
                uint64_t v557 = **(void **)(a1 + 1016);
                uint64_t v558 = **(void **)(a1 + 1856);
                *(_DWORD *)long long buf = 134350337;
                *(void *)&uint8_t buf[4] = v554;
                *(_WORD *)&buf[12] = 1026;
                *(_DWORD *)&buf[14] = v548;
                *(_WORD *)&buf[18] = 2050;
                *(void *)&buf[20] = v555;
                *(_WORD *)&buf[28] = 2050;
                *(void *)&buf[30] = v556;
                *(_WORD *)&buf[38] = 2049;
                *(void *)&buf[40] = v557;
                *(_WORD *)&buf[48] = 2049;
                *(void *)&buf[50] = v558;
                _os_log_impl(&dword_1906B8000, v553, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,hopping between roads detected,reset,%{public}d,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", buf, 0x3Au);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
                }
                uint64_t v610 = *(void *)(a1 + 1136);
                uint64_t v611 = *(void *)(a1 + 2272);
                uint64_t v612 = *(void *)(a1 + 1432);
                uint64_t v613 = **(void **)(a1 + 1016);
                uint64_t v614 = **(void **)(a1 + 1856);
                *(_DWORD *)v675 = 134350337;
                *(void *)&v675[4] = v610;
                *(_WORD *)&v675[12] = 1026;
                *(_DWORD *)&v675[14] = v548;
                *(_WORD *)&v675[18] = 2050;
                *(void *)&v675[20] = v611;
                *(_WORD *)&v675[28] = 2050;
                *(void *)&v675[30] = v612;
                *(_WORD *)&v675[38] = 2049;
                *(void *)&v675[40] = v613;
                *(_WORD *)v676 = 2049;
                *(void *)&v676[2] = v614;
                v615 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v615);
                if (v615 != buf) {
                  free(v615);
                }
              }
            }
            if (v548) {
              goto LABEL_793;
            }
          }
        }
      }
    }
  }
LABEL_886:
  sub_190771004((uint64_t *)(a1 + 3072), *(void *)(a1 + 3056), a1 + 3048);
  sub_190770ADC((uint64_t *)(a1 + 3048));
  v508 = (uint64_t *)(a1 + 3096);
  sub_190771004((uint64_t *)(a1 + 3120), *(void *)(a1 + 3104), a1 + 3096);
LABEL_887:
  sub_190770ADC(v508);
  if (*v637)
  {
    uint64_t v559 = **(void **)(a1 + 1016);
    int v560 = *(unsigned __int8 *)(a1 + 1036);
    uint64_t v561 = *(void *)(a1 + 928);
    if (!v561
      || (uint64_t v562 = *(void *)(a1 + 920), v559 != *(void *)(v562 + 16))
      || v560 != *(unsigned __int8 *)(v562 + 24))
    {
      v563 = operator new(0x20uLL);
      v563[24] = v560;
      v564 = *(void **)(a1 + 920);
      *(void *)v563 = a1 + 912;
      *((void *)v563 + 1) = v564;
      *((void *)v563 + 2) = v559;
      void *v564 = v563;
      *(void *)(a1 + 920) = v563;
      *(void *)(a1 + 928) = v561 + 1;
      if ((int)v561 + 1 >= 51)
      {
        sub_1907CFC40((uint64_t **)(a1 + 912));
        if (!*v637) {
          goto LABEL_897;
        }
      }
    }
    if (*(unsigned char *)(a1 + 1848))
    {
      if (v559 == *(void *)*v638 && v560 == *(unsigned __int8 *)(a1 + 1876)) {
        int v565 = *(_DWORD *)(a1 + 2680) + 1;
      }
      else {
        int v565 = 0;
      }
      *(_DWORD *)(a1 + 1840) = v565;
      double v566 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 1888), *(double *)(a1 + 1896), *(double *)(a1 + 1048), *(double *)(a1 + 1056), *(double *)(a1 + 1200));
      sub_1907B4FC4((uint64_t)buf, (uint64_t)v638);
      *(_DWORD *)v675 = 0;
      if (sub_1907BCB60(a1, (uint64_t)buf, (int *)v675, v566))
      {
        *(unsigned char *)(a1 + 2688) = 1;
        *(_DWORD *)(a1 + 2824) = *(_DWORD *)v675;
        sub_1907BDEFC(a1 + 2712, (uint64_t *)buf);
        *(void *)(a1 + 2704) = *(void *)(a1 + 1976);
      }
      sub_1907B515C(buf);
    }
    else
    {
LABEL_897:
      *(_DWORD *)(a1 + 1840) = 0;
    }
  }
  if (*(unsigned char *)(a1 + 2688))
  {
    if (!*v637
      || (long double v567 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 2744), *(double *)(a1 + 2752), *(double *)(a1 + 1280), *(double *)(a1 + 1288), *(double *)(a1 + 1200)), *(long double *)(a1 + 2696) = v567, v567 > 450.0))
    {
      *(unsigned char *)(a1 + 2688) = 0;
    }
  }
  sub_1907C5298(a1);
  if (*(double *)(a1 + 1184) == 0.0 && *(double *)(a1 + 1192) == 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    v568 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v568, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb lat==lon==0", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      *(_WORD *)v675 = 0;
      v600 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v600);
      if (v600 != buf) {
        goto LABEL_999;
      }
    }
    goto LABEL_793;
  }
  if (!*v637)
  {
LABEL_925:
    long long v571 = *v137;
    long long v572 = v137[1];
    long long v573 = v137[3];
    *(_OWORD *)(a2 + 32) = v137[2];
    *(_OWORD *)(a2 + 48) = v573;
    *(_OWORD *)a2 = v571;
    *(_OWORD *)(a2 + 16) = v572;
    long long v574 = v137[4];
    long long v575 = v137[5];
    long long v576 = v137[7];
    *(_OWORD *)(a2 + 96) = v137[6];
    *(_OWORD *)(a2 + 112) = v576;
    *(_OWORD *)(a2 + 64) = v574;
    *(_OWORD *)(a2 + 80) = v575;
    std::string::operator=((std::string *)(a2 + 128), __str);
    memcpy(__src, __dst, 0x118uLL);
    if (*(unsigned char *)(a1 + 1392))
    {
      *(void *)(a1 + 4016) = *(void *)(a1 + 1152);
      if (*(unsigned char *)(a1 + 776) && *(unsigned char *)(a1 + 1648))
      {
        if (*(unsigned char *)(a1 + 96))
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          v577 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1906B8000, v577, OS_LOG_TYPE_DEBUG, "CLMM,holdCourse engaged but not snapping course", buf, 2u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            *(_WORD *)v675 = 0;
            v602 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v602);
            if (v602 != buf) {
              free(v602);
            }
          }
        }
        *(void *)(a2 + 168) = *(void *)(a1 + 848);
      }
      sub_1907CFC68(a1, a2);
      int v578 = *(unsigned __int8 *)(a1 + 1392);
      *(void *)long long buf = *(void *)(a2 + 192);
      if (v578 && (sub_190797098(a1, (uint64_t *)buf) & 1) != 0)
      {
        v579 = buf;
LABEL_940:
        *(void *)(a2 + 192) = *v579;
LABEL_149:
        uint64_t v132 = 1;
        goto LABEL_790;
      }
    }
    else
    {
      *(void *)(a2 + 168) = *(void *)(a1 + 848);
      ++*(_DWORD *)(a1 + 104);
      *(void *)long long buf = *(void *)(a2 + 192);
    }
    v579 = (void *)(a1 + 856);
    goto LABEL_940;
  }
  if (*__dst != 0.0 || *(double *)(a1 + 1288) != 0.0)
  {
    uint64_t v570 = *(void *)(a1 + 1016);
    if (v570) {
      *(unsigned char *)(a1 + 1477) = *(unsigned char *)(v570 + 17);
    }
    goto LABEL_925;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  v569 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v569, OS_LOG_TYPE_ERROR, "CLMM,Unexpected crumb snapLat==snapLon==0", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    *(_WORD *)v675 = 0;
    v600 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::match(CLMapCrumb &)", "CoreLocation: %s\n", v600);
    if (v600 != buf) {
LABEL_999:
    }
      free(v600);
  }
LABEL_793:
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v132 = 0;
  ++*(_DWORD *)(a1 + 104);
LABEL_790:
  if (v644) {
    sub_1906BFE48(v644);
  }
  return v132;
}

void sub_1907CF98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_190770ADC(&a64);
  sub_1907B515C(&STACK[0x250]);
  STACK[0x470] = (unint64_t)&a70;
  sub_1907D5DA4((void ***)&STACK[0x470]);
  if (a42) {
    sub_1906BFE48(a42);
  }
  if (a58) {
    sub_1906BFE48(a58);
  }
  _Unwind_Resume(a1);
}

void sub_1907CFC40(uint64_t **a1)
{
  v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)(v2 + 8) = (*a1)[1];
  *(void *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  operator delete(v1);
}

void sub_1907CFC68(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 264)) {
    BOOL v2 = *(unsigned char *)(a2 + 265) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    double v4 = *(double *)(a2 + 80);
    if (v4 < 400.0 && v4 > 0.0)
    {
      if (!*(unsigned char *)(a1 + 1649)
        || *(unsigned char *)(a1 + 1650)
        || ((double v6 = *(double *)(a1 + 4024), v7 = vabdd_f64(*(double *)(a2 + 8), v6), v6 >= 0.0)
          ? (BOOL v8 = v7 <= 2.0)
          : (BOOL v8 = 0),
            v8))
      {
        double v9 = sub_1906DA618((double *)(a1 + 608), *(double *)(a2 + 56), *(double *)(a2 + 64), *(double *)(a2 + 152), *(double *)(a2 + 160), 0.0);
        double v10 = v9 / *(double *)(a2 + 80);
        if (v10 > 1.5)
        {
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            __int16 v11 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v12 = *(void *)(a2 + 8);
              uint64_t v13 = *(void *)(a2 + 56);
              uint64_t v14 = *(void *)(a2 + 64);
              uint64_t v15 = *(void *)(a2 + 104);
              uint64_t v16 = *(void *)(a2 + 152);
              uint64_t v17 = *(void *)(a2 + 160);
              uint64_t v18 = *(void *)(a2 + 168);
              uint64_t v19 = *(void *)(a2 + 72);
              uint64_t v20 = *(void *)(a2 + 80);
              *(_DWORD *)long long buf = 134351617;
              uint64_t v24 = v12;
              __int16 v25 = 2049;
              uint64_t v26 = v13;
              __int16 v27 = 2049;
              uint64_t v28 = v14;
              __int16 v29 = 2050;
              uint64_t v30 = v19;
              __int16 v31 = 2050;
              uint64_t v32 = v15;
              __int16 v33 = 2049;
              uint64_t v34 = v16;
              __int16 v35 = 2049;
              uint64_t v36 = v17;
              __int16 v37 = 2050;
              uint64_t v38 = v18;
              __int16 v39 = 2050;
              double v40 = v9;
              __int16 v41 = 2050;
              uint64_t v42 = v20;
              __int16 v43 = 2050;
              double v44 = v10;
              _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf,alt,%{public}.2lf,course,%{public}.1lf,snapLat,%{private}.8lf,snapLon,%{private}.8lf,snapCourse,%{public}.1lf,horizontalError,%{public}.2lf,hunc,%{public}.2lf,ratio,%{public}.2lf", buf, 0x70u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              uint64_t v22 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::modifyHorizontalUncertainty(CLMapCrumb &)", "CoreLocation: %s\n", v22);
              if (v22 != (char *)buf) {
                free(v22);
              }
            }
          }
          double v21 = v9 * 1.05;
          if (v9 * 1.05 > 400.0) {
            double v21 = 400.0;
          }
          *(double *)(a2 + 80) = v21;
          *(void *)(a1 + 4024) = *(void *)(a2 + 8);
        }
      }
    }
  }
}

uint64_t sub_1907CFFC0(uint64_t a1, double *a2, double a3, double a4, double a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  double v9 = *(double *)(a1 + 1432);
  double v10 = fmod(v9 - a5, 360.0);
  if (v10 < 0.0) {
    double v10 = v10 + 360.0;
  }
  if (v10 > 180.0) {
    double v10 = v10 + -360.0;
  }
  double v11 = fabs(v10);
  if (v11 <= 8.0)
  {
    if (v11 > *a2)
    {
      *a2 = v11;
      double v9 = *(double *)(a1 + 1432);
    }
    double v17 = 0.0;
    v18[0] = 0.0;
    sub_190839A78((double *)(a1 + 608), v18, &v17, *(double *)(a1 + 1416), *(double *)(a1 + 1424), *(double *)(a1 + 1200), v9, a3, a4);
    if (fabs(v18[0]) <= 5.0)
    {
      if (fabs(v17) <= 45.0) {
        return 1;
      }
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v15 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_DEBUG, "CLMM,along track too large, not suitable DOT assistance", buf, 2u);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_34:
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcher::runDirectionOfTravelHelper(double, double, double, double &)", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
        return 0;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v14 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMM,across track too large, not suitable DOT assistance", buf, 2u);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_34;
      }
    }
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    goto LABEL_34;
  }
  if (!*(unsigned char *)(a1 + 96)) {
    return 0;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  uint64_t v12 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEBUG, "CLMM,no DOT, course is not aligned", buf, 2u);
  }
  uint64_t result = sub_1906CB57C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    LOWORD(v18[0]) = 0;
    goto LABEL_34;
  }
  return result;
}

uint64_t sub_1907D03EC(uint64_t a1, double *a2)
{
  uint64_t v198 = *MEMORY[0x1E4F143B8];
  bzero(a2, 0x68uLL);
  double v4 = *(double *)(a1 + 3728);
  if (v4 > 0.0 && vabdd_f64(*(double *)(a1 + 1136), v4 + -1.0) < 0.9)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,feedback interval check", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_10;
    }
LABEL_233:
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
LABEL_10:
    *(_WORD *)float v124 = 0;
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v6);
    goto LABEL_11;
  }
  if (!*(_DWORD *)(a1 + 1248) && sub_190795378() && !sub_190795180() && (sub_190795894() & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    BOOL v8 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,frc,0", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_10;
    }
    goto LABEL_233;
  }
  if (!*(unsigned char *)(a1 + 2232)
    || !*(unsigned char *)(a1 + 1392)
    || *(unsigned char *)(a1 + 2233)
    || *(unsigned char *)(a1 + 1393)
    || *(double *)(a1 + 1136) - *(double *)(a1 + 1976) > 1.5)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 2688) && *(double *)(a1 + 2696) < 36.0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v7 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to prior intersection", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_10;
    }
    goto LABEL_233;
  }
  double v11 = fmod(*(double *)(a1 + 1296) - *(double *)(a1 + 1432), 360.0);
  if (v11 < 0.0) {
    double v11 = v11 + 360.0;
  }
  if (v11 > 180.0) {
    double v11 = v11 + -360.0;
  }
  if (fabs(v11) > 1.0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      return 0;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v12 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,course not aligned to full snap", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_10;
    }
    goto LABEL_233;
  }
  double v123 = -1.0;
  if (!sub_1907CFFC0(a1, &v123, *(double *)(a1 + 2256), *(double *)(a1 + 2264), *(double *)(a1 + 2272))) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 1490) || *(_DWORD *)(a1 + 1528) != 1)
  {
    *(void *)float v124 = 0x4044000000000000;
    LOBYTE(v113[0]) = 1;
    *(void *)long long buf = 0x4046800000000000;
    if ((sub_1907C5864(a1, (double *)v124, (double *)buf, v113) & 1) == 0)
    {
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      double v21 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,assessParallelRoadsWithinDist returned false,unexpected", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_65;
      }
      goto LABEL_249;
    }
    if (LOBYTE(v113[0]))
    {
      if (!*(unsigned char *)(a1 + 96)) {
        return 0;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v13 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to a road with similar course", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_65;
      }
LABEL_249:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
LABEL_65:
      LOWORD(v119[0]) = 0;
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v6);
LABEL_11:
      if (v6 != buf) {
        free(v6);
      }
      return 0;
    }
  }
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v16 = 70.0;
  double v17 = sub_1907BD04C(a1, 70.0);
  double v18 = *(double *)(a1 + 1224);
  if (v17 >= 0.0)
  {
    if (v17 - v18 >= 18.0)
    {
      double v16 = v17 + -1.0;
      if (v18 >= 5.0 || !*(unsigned char *)(a1 + 3168)) {
        goto LABEL_121;
      }
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_119;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v23 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too slow when nearing intersection", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_119;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_110:
        *(_WORD *)float v124 = 0;
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v24);
        if (v24 != buf) {
          free(v24);
        }
        goto LABEL_119;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_119;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v22 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close to next intersection", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_119;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_110;
      }
    }
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    goto LABEL_110;
  }
  if (v18 < 5.0)
  {
    sub_1907B4FC4((uint64_t)v124, a1 + 1016);
    if (((*(uint64_t (**)(uint64_t, unsigned char *, uint64_t, double))(*(void *)v15 + 88))(v15, v124, a1 + 912, *(double *)(a1 + 3176)) & 1) == 0)
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_118;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      __int16 v25 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_118;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_226;
      }
      goto LABEL_253;
    }
    double v19 = fmod(*(float *)&v128 - *(double *)(a1 + 1232), 360.0);
    if (v19 < 0.0) {
      double v19 = v19 + 360.0;
    }
    if (v19 > 180.0) {
      double v19 = v19 + -360.0;
    }
    if (fabs(v19) > 8.0)
    {
      if (!*(unsigned char *)(a1 + 96)) {
        goto LABEL_118;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v20 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,too close large road direction change", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_118;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_226:
        LOWORD(v119[0]) = 0;
        uint64_t v85 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v85);
        if (v85 != buf) {
          free(v85);
        }
LABEL_118:
        sub_1907B515C(v124);
LABEL_119:
        uint64_t v9 = 0;
        goto LABEL_143;
      }
LABEL_253:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      goto LABEL_226;
    }
    sub_1907B515C(v124);
  }
LABEL_121:
  sub_1907B4FC4((uint64_t)v119, a1 + 1016);
  if (((*(uint64_t (**)(uint64_t, void *, uint64_t, double))(*(void *)v15 + 88))(v15, v119, a1 + 912, -15.0) & 1) == 0)
  {
    if (!*(unsigned char *)(a1 + 96)) {
      goto LABEL_141;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    __int16 v29 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_141;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_223;
    }
    goto LABEL_251;
  }
  if (sub_1907CFFC0(a1, &v123, v121, v122, v120))
  {
    sub_1906D5C70(__p, "Start");
    uint64_t v105 = a1 + 912;
    BOOL v26 = sub_190730588(a1 + 1128, (double *)(a1 + 608), (uint64_t *)__p, a2 + 1, a2 + 2, v121, v122);
    if (v118 < 0) {
      operator delete(__p[0]);
    }
    if (v26)
    {
      double v27 = sub_1906DA618((double *)(a1 + 608), *(double *)(a1 + 1048), *(double *)(a1 + 1056), v121, v122, *(double *)(a1 + 1200));
      sub_1907B4FC4((uint64_t)v113, a1 + 1016);
      if (v16 - *(double *)(a1 + 1224) < 18.0)
      {
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_180;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v28 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,predicted point is too close to intersection", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_180;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_230;
        }
LABEL_256:
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
LABEL_230:
        *(_WORD *)float v124 = 0;
        int v73 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v73);
LABEL_231:
        if (v73 != buf) {
          free(v73);
        }
        goto LABEL_180;
      }
      if (((*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v15 + 88))(v15, v113, v105) & 1) == 0)
      {
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_180;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v71 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1906B8000, v71, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_180;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_230;
        }
        goto LABEL_256;
      }
      if (!sub_1907CFFC0(a1, &v123, v115, v116, v114))
      {
LABEL_180:
        uint64_t v9 = 0;
LABEL_181:
        sub_1907B515C(v113);
        goto LABEL_142;
      }
      double v31 = v115;
      double v32 = v116;
      a2[4] = v116;
      a2[3] = v31;
      uint64_t v33 = *(void *)(a1 + 1016);
      int v34 = *(unsigned __int8 *)(v33 + 16);
      double v35 = sub_19079877C(a1, *(_DWORD *)(v33 + 20), v34);
      a2[8] = v35;
      if (!v34)
      {
        int v74 = *(_DWORD *)(a1 + 760);
        if (v74)
        {
          double v75 = v35 * 0.5;
          a2[8] = v75;
          double v76 = v75 * 0.5;
          double v77 = -(v75 * 0.5);
          if (v74 == 1) {
            double v78 = v77;
          }
          else {
            double v78 = v76;
          }
          *(void *)float v124 = 0;
          v108[0] = 0.0;
          if (sub_1908397AC((double *)(a1 + 608), (double *)v124, v108, v31, v32, *(double *)(a1 + 1200), v114, v78))
          {
            double v79 = v108[0];
            a2[3] = *(double *)v124;
            a2[4] = v79;
            double v35 = a2[8];
          }
          else
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            uint64_t v81 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1906B8000, v81, OS_LOG_TYPE_ERROR, "CLMM,Unexpected calculateNewPosUsingAcrossTrack fail", buf, 2u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              __int16 v112 = 0;
              uint64_t v86 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v86);
              if (v86 != buf) {
                free(v86);
              }
            }
            double v35 = a2[8] + a2[8];
            a2[8] = v35;
          }
        }
      }
      double v36 = fmax(v35, 15.0);
      if (v16 <= v36 + 1.0)
      {
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_180;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        int v72 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1906B8000, v72, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,current particle within the stopDistanceFromIntersection", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_180;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        *(_WORD *)float v124 = 0;
        int v73 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v73);
        goto LABEL_231;
      }
      sub_1907B4FC4((uint64_t)v108, a1 + 1016);
      if (v16 - v36 >= (*(double *)(a1 + 1224) + 15.0) * 1.5) {
        double v37 = (*(double *)(a1 + 1224) + 15.0) * 1.5;
      }
      else {
        double v37 = v16 - v36;
      }
      if ((*(uint64_t (**)(uint64_t, double *, uint64_t, double))(*(void *)v15 + 88))(v15, v108, v105, v37))
      {
        if (!sub_1907CFFC0(a1, &v123, v110, v111, v109)) {
          goto LABEL_205;
        }
        double v38 = fmin(v27, 15.0);
        a2[5] = v38 + v37;
        double v39 = v123;
        if (v123 < 3.0) {
          double v39 = 3.0;
        }
        a2[7] = v39;
        sub_1906D5C70(v106, "Predicted");
        BOOL v40 = sub_190730588(a1 + 1128, (double *)(a1 + 608), (uint64_t *)v106, a2 + 3, a2 + 4, a2[3], a2[4]);
        if (v107 < 0) {
          operator delete(v106[0]);
        }
        if (v40)
        {
          a2[6] = v114;
          *a2 = *(double *)(a1 + 1136) + 1.0;
          __asm { FMOV            V1.2D, #1.0 }
          float64x2_t v46 = vaddq_f64(*(float64x2_t *)(a1 + 1144), _Q1);
          *(float64x2_t *)(a2 + 11) = v46;
          LODWORD(v46.f64[0]) = *(_DWORD *)(v113[0] + 16);
          int16x8_t v47 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v46.f64[0]);
          *(int16x4_t *)v47.i8 = vuzp2_s16((int16x4_t)vext_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v47.i8, 2uLL), *(int16x4_t *)v47.i8);
          *((_DWORD *)a2 + 18) = vmovn_s16(v47).u32[0];
          *((unsigned char *)a2 + 76) = *(_DWORD *)(a1 + 1248) == 0;
          uint64_t v9 = 1;
          *((_DWORD *)a2 + 20) = 1;
          if (*(unsigned char *)(a1 + 96))
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            uint64_t v48 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v49 = *((void *)a2 + 6);
              uint64_t v50 = *((void *)a2 + 7);
              uint64_t v51 = *((void *)a2 + 8);
              double v52 = *a2;
              uint64_t v53 = *((void *)a2 + 1);
              uint64_t v55 = *((void *)a2 + 2);
              uint64_t v54 = *((void *)a2 + 3);
              uint64_t v56 = *((void *)a2 + 4);
              uint64_t v57 = *((void *)a2 + 5);
              uint64_t v58 = *(void *)(a1 + 1224);
              int v59 = *((unsigned __int8 *)a2 + 73);
              int v60 = *((unsigned __int8 *)a2 + 74);
              int v61 = *((unsigned __int8 *)a2 + 72);
              int v62 = *((unsigned __int8 *)a2 + 75);
              int v63 = *((unsigned __int8 *)a2 + 76);
              uint64_t v64 = *((void *)a2 + 12);
              int v65 = *((_DWORD *)a2 + 20);
              *(_DWORD *)long long buf = 134353665;
              *(double *)&uint8_t buf[4] = v52;
              __int16 v162 = 2049;
              uint64_t v163 = v54;
              __int16 v164 = 2049;
              uint64_t v165 = v56;
              __int16 v166 = 2050;
              uint64_t v167 = v49;
              __int16 v168 = 2050;
              uint64_t v169 = v50;
              __int16 v170 = 2050;
              uint64_t v171 = v51;
              __int16 v172 = 2049;
              uint64_t v173 = v53;
              __int16 v174 = 2049;
              uint64_t v175 = v55;
              __int16 v176 = 2050;
              uint64_t v177 = v57;
              __int16 v178 = 2050;
              uint64_t v179 = v58;
              __int16 v180 = 1026;
              int v181 = v59;
              __int16 v182 = 1026;
              int v183 = v60;
              __int16 v184 = 1026;
              int v185 = v61;
              __int16 v186 = 1026;
              int v187 = v62;
              __int16 v188 = 2050;
              double v189 = v36;
              __int16 v190 = 1026;
              int v191 = v63;
              __int16 v192 = 2050;
              uint64_t v193 = v64;
              __int16 v194 = 2050;
              double v195 = v38;
              __int16 v196 = 1026;
              int v197 = v65;
              _os_log_impl(&dword_1906B8000, v48, OS_LOG_TYPE_DEBUG, "CLMM,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContinuousTime,%{public}.3lf,lookBehindDistance,%{public}.2lf,type,%{public}d", buf, 0xA8u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              uint64_t v87 = *((void *)a2 + 6);
              uint64_t v88 = *((void *)a2 + 7);
              uint64_t v89 = *((void *)a2 + 8);
              double v90 = *a2;
              uint64_t v91 = *((void *)a2 + 1);
              uint64_t v93 = *((void *)a2 + 2);
              uint64_t v92 = *((void *)a2 + 3);
              uint64_t v94 = *((void *)a2 + 4);
              uint64_t v95 = *((void *)a2 + 5);
              uint64_t v96 = *(void *)(a1 + 1224);
              int v97 = *((unsigned __int8 *)a2 + 73);
              int v98 = *((unsigned __int8 *)a2 + 74);
              int v99 = *((unsigned __int8 *)a2 + 72);
              int v100 = *((unsigned __int8 *)a2 + 75);
              int v101 = *((unsigned __int8 *)a2 + 76);
              uint64_t v102 = *((void *)a2 + 12);
              int v103 = *((_DWORD *)a2 + 20);
              *(_DWORD *)float v124 = 134353665;
              *(double *)&v124[4] = v90;
              __int16 v125 = 2049;
              uint64_t v126 = v92;
              __int16 v127 = 2049;
              uint64_t v128 = v94;
              __int16 v129 = 2050;
              uint64_t v130 = v87;
              __int16 v131 = 2050;
              uint64_t v132 = v88;
              __int16 v133 = 2050;
              uint64_t v134 = v89;
              __int16 v135 = 2049;
              uint64_t v136 = v91;
              __int16 v137 = 2049;
              uint64_t v138 = v93;
              __int16 v139 = 2050;
              uint64_t v140 = v95;
              __int16 v141 = 2050;
              uint64_t v142 = v96;
              __int16 v143 = 1026;
              int v144 = v97;
              __int16 v145 = 1026;
              int v146 = v98;
              __int16 v147 = 1026;
              int v148 = v99;
              __int16 v149 = 1026;
              int v150 = v100;
              __int16 v151 = 2050;
              double v152 = v36;
              __int16 v153 = 1026;
              int v154 = v101;
              __int16 v155 = 2050;
              uint64_t v156 = v102;
              __int16 v157 = 2050;
              double v158 = v38;
              __int16 v159 = 1026;
              int v160 = v103;
              long long v104 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v104);
              if (v104 != buf) {
                free(v104);
              }
            }
          }
          *(unsigned char *)(a1 + 3720) = 1;
          long long v66 = *(_OWORD *)a2;
          long long v67 = *((_OWORD *)a2 + 2);
          *(_OWORD *)(a1 + 3744) = *((_OWORD *)a2 + 1);
          *(_OWORD *)(a1 + 3760) = v67;
          *(_OWORD *)(a1 + 3728) = v66;
          long long v68 = *((_OWORD *)a2 + 3);
          long long v69 = *((_OWORD *)a2 + 4);
          long long v70 = *((_OWORD *)a2 + 5);
          *(double *)(a1 + 3824) = a2[12];
          *(_OWORD *)(a1 + 3792) = v69;
          *(_OWORD *)(a1 + 3808) = v70;
          *(_OWORD *)(a1 + 3776) = v68;
          goto LABEL_206;
        }
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_205;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        long long v82 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1906B8000, v82, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates predicted returned false", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2))
        {
LABEL_205:
          uint64_t v9 = 0;
LABEL_206:
          sub_1907B515C(v108);
          goto LABEL_181;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        *(_WORD *)float v124 = 0;
        long long v83 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v83);
      }
      else
      {
        if (!*(unsigned char *)(a1 + 96)) {
          goto LABEL_205;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        long long v80 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1906B8000, v80, OS_LOG_TYPE_DEBUG, "CLMM,moveOnRoad returned false,DOT particle assistance", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_205;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        *(_WORD *)float v124 = 0;
        long long v83 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v83);
      }
      if (v83 != buf) {
        free(v83);
      }
      goto LABEL_205;
    }
    if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v30 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_DEBUG, "CLMM,no DOT,computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1)
        {
LABEL_223:
          *(_WORD *)float v124 = 0;
          uint64_t v84 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)", "CoreLocation: %s\n", v84);
          if (v84 != buf) {
            free(v84);
          }
          goto LABEL_141;
        }
LABEL_251:
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        goto LABEL_223;
      }
    }
  }
LABEL_141:
  uint64_t v9 = 0;
LABEL_142:
  sub_1907B515C(v119);
LABEL_143:
  if (v14) {
    sub_1906BFE48(v14);
  }
  return v9;
}

void sub_1907D22FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  sub_1907B515C(&a15);
  sub_1907B515C(&a30);
  sub_1907B515C(&a47);
  if (v47) {
    sub_1906BFE48(v47);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1907D23D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 3720) || *(double *)(a1 + 1224) >= 22.222 || *(int *)(a1 + 1248) < 2) {
    return 0;
  }
  uint64_t v24 = 0x4056800000000000;
  double v4 = *(double *)(a1 + 1208);
  uint64_t v5 = 0x4049000000000000;
  if (v4 <= 10.0) {
    goto LABEL_7;
  }
  if (v4 < 50.0)
  {
    uint64_t v5 = 0x4052C00000000000;
LABEL_7:
    uint64_t v24 = v5;
  }
  char v23 = 1;
  *(void *)long long buf = 0x4024000000000000;
  if (!sub_1907C5864(a1, (double *)&v24, (double *)buf, &v23) || v23) {
    return 0;
  }
  *a2 = *(void *)(a1 + 3728);
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a1 + 3752);
  a2[3] = 0x4059000000000000;
  a2[4] = *(void *)(a1 + 3792);
  a2[5] = *(void *)(a1 + 3776);
  if (*(unsigned char *)(a1 + 96))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *a2;
      uint64_t v8 = a2[1];
      uint64_t v9 = a2[2];
      uint64_t v10 = a2[3];
      uint64_t v11 = a2[4];
      uint64_t v12 = a2[5];
      uint64_t v13 = *(void *)(a1 + 1432);
      *(_DWORD *)long long buf = 134350593;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v40 = 2049;
      uint64_t v41 = v8;
      __int16 v42 = 2049;
      uint64_t v43 = v9;
      __int16 v44 = 2050;
      uint64_t v45 = v10;
      __int16 v46 = 2050;
      uint64_t v47 = v11;
      __int16 v48 = 2050;
      uint64_t v49 = v12;
      __int16 v50 = 2050;
      uint64_t v51 = v13;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMM,MMPA,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,a,%{public}.2lf,b,%{public}.2lf,az,%{public}.3lf,course,%{public}.3lf", buf, 0x48u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v15 = *a2;
      uint64_t v16 = a2[1];
      uint64_t v17 = a2[2];
      uint64_t v18 = a2[3];
      uint64_t v19 = a2[4];
      uint64_t v20 = a2[5];
      uint64_t v21 = *(void *)(a1 + 1432);
      int v25 = 134350593;
      uint64_t v26 = v15;
      __int16 v27 = 2049;
      uint64_t v28 = v16;
      __int16 v29 = 2049;
      uint64_t v30 = v17;
      __int16 v31 = 2050;
      uint64_t v32 = v18;
      __int16 v33 = 2050;
      uint64_t v34 = v19;
      __int16 v35 = 2050;
      uint64_t v36 = v20;
      __int16 v37 = 2050;
      uint64_t v38 = v21;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getPosAssistanceForGps(CLGpsAssistant_Type::MapMatchedPositionAssistance &)", "CoreLocation: %s\n", v22);
      if (v22 != buf) {
        free(v22);
      }
    }
  }
  return 1;
}

uint64_t sub_1907D26E8(uint64_t a1, uint64_t a2)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  double v2 = *(double *)(a2 + 8);
  if (v2 < 0.0 || (double v4 = *(double *)a2, *(double *)a2 < 0.0))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v7 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEBUG, "CLMM,TBA,Invalid time", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_60;
    }
    goto LABEL_70;
  }
  if (vabdd_f64(*(double *)(a1 + 1136), v2) < 5.0)
  {
    if (*(unsigned char *)(a1 + 1392))
    {
      if (!*(unsigned char *)(a1 + 1393))
      {
        int v34 = *(unsigned __int8 *)(a1 + 1489);
        *(unsigned char *)(a2 + 43) = v34;
        int v35 = *(unsigned __int8 *)(a1 + 1490);
        *(unsigned char *)(a2 + 42) = v35;
        if (v35 | v34)
        {
          *(unsigned char *)(a2 + 40) = v35;
          *(unsigned char *)(a2 + 41) = v34;
          return 1;
        }
      }
    }
  }
  if (fabs(*(double *)(a2 + 16)) >= 0.00003 || fabs(*(double *)(a2 + 24)) >= 0.00003)
  {
    uint64_t v74 = (uint64_t)&v74;
    double v75 = &v74;
    uint64_t v76 = 0;
    double v9 = *(double *)(a1 + 3160);
    if (v9 > 0.0 && vabdd_f64(v9, v4) < *(double *)(a2 + 32) / 38.0)
    {
      uint64_t v8 = 0;
LABEL_55:
      sub_190770ADC(&v74);
      return v8;
    }
    *(double *)(a1 + 3160) = v4;
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void))(*(void *)v11 + 32))(v11, 0);
    v50[0] = 0;
    v50[1] = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v51 = _Q0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    unint64_t v54 = 0xBFF0000000000000;
    uint64_t v66 = 0;
    int v67 = 0;
    memset(&v64[32], 0, 32);
    __int16 v65 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    memset(v71, 0, 27);
    memset(&v71[32], 0, 48);
    memset(v64, 0, 30);
    long long v63 = 0u;
    long long v62 = 0u;
    long long v61 = 0u;
    long long v60 = 0u;
    *(_OWORD *)__p = 0u;
    long long v58 = 0u;
    long long v57 = 0u;
    long long v56 = 0u;
    uint64_t v72 = 0;
    unint64_t v73 = 0xBFF0000000000000;
    long long v55 = *(_OWORD *)(a2 + 16);
    if ((*(uint64_t (**)(uint64_t, uint64_t *, void *, uint64_t, double))(*(void *)v11 + 64))(v11, &v74, v50, 1, *(double *)(a2 + 32)))
    {
      if (v76)
      {
        uint64_t v17 = v75;
        if (v75 != &v74)
        {
          char v18 = 0;
          do
          {
            while (1)
            {
              uint64_t v19 = v17[2];
              if (!v19) {
                break;
              }
              if (*(unsigned char *)(v19 + 18))
              {
                char v18 = 1;
                *(unsigned char *)(a2 + 40) = 1;
              }
              if (!*(unsigned char *)(v19 + 19)) {
                break;
              }
              char v18 = 1;
              *(unsigned char *)(a2 + 41) = 1;
              uint64_t v17 = (uint64_t *)v17[1];
              if (v17 == &v74) {
                goto LABEL_38;
              }
            }
            uint64_t v17 = (uint64_t *)v17[1];
          }
          while (v17 != &v74);
          if ((v18 & 1) == 0) {
            goto LABEL_50;
          }
LABEL_38:
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v20 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = *(void *)(a2 + 16);
            uint64_t v22 = *(void *)(a2 + 24);
            uint64_t v23 = *(void *)(a1 + 1208);
            uint64_t v24 = *(void *)(a2 + 32);
            int v25 = *(unsigned __int8 *)(a2 + 40);
            int v26 = *(unsigned __int8 *)(a2 + 41);
            int v27 = *(unsigned __int8 *)(a2 + 42);
            int v28 = *(unsigned __int8 *)(a2 + 43);
            *(_DWORD *)long long buf = 134285313;
            uint64_t v94 = v21;
            __int16 v95 = 2049;
            uint64_t v96 = v22;
            __int16 v97 = 2050;
            uint64_t v98 = v23;
            __int16 v99 = 2050;
            uint64_t v100 = v24;
            __int16 v101 = 1026;
            int v102 = v25;
            __int16 v103 = 1026;
            int v104 = v26;
            __int16 v105 = 1026;
            int v106 = v27;
            __int16 v107 = 1026;
            int v108 = v28;
            _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "CLMM, TBA,lat,%{private}.8lf,lon,%{private}.8lf,unc,%{public}.2lf,searchRadius,%{public}.1lf,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,isTunnel,%{public}d,isBridge,%{public}d", buf, 0x42u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            uint64_t v41 = *(void *)(a2 + 16);
            uint64_t v42 = *(void *)(a2 + 24);
            uint64_t v43 = *(void *)(a1 + 1208);
            uint64_t v44 = *(void *)(a2 + 32);
            int v45 = *(unsigned __int8 *)(a2 + 40);
            int v46 = *(unsigned __int8 *)(a2 + 41);
            int v47 = *(unsigned __int8 *)(a2 + 42);
            int v48 = *(unsigned __int8 *)(a2 + 43);
            int v77 = 134285313;
            uint64_t v78 = v41;
            __int16 v79 = 2049;
            uint64_t v80 = v42;
            __int16 v81 = 2050;
            uint64_t v82 = v43;
            __int16 v83 = 2050;
            uint64_t v84 = v44;
            __int16 v85 = 1026;
            int v86 = v45;
            __int16 v87 = 1026;
            int v88 = v46;
            __int16 v89 = 1026;
            int v90 = v47;
            __int16 v91 = 1026;
            int v92 = v48;
            uint64_t v49 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "CoreLocation: %s\n", v49);
            if (v49 != (char *)buf) {
              free(v49);
            }
          }
          uint64_t v8 = 1;
          goto LABEL_51;
        }
      }
    }
    else if (*(unsigned char *)(a1 + 96))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      __int16 v29 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v30 = *(void *)(a1 + 1184);
        uint64_t v31 = *(void *)(a1 + 1192);
        uint64_t v32 = *(void *)(a2 + 32);
        *(_DWORD *)long long buf = 134284033;
        uint64_t v94 = v30;
        __int16 v95 = 2049;
        uint64_t v96 = v31;
        __int16 v97 = 2050;
        uint64_t v98 = v32;
        _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_DEBUG, "CLMM,TBA,roadsWithinDistance returns query failed,lat,%{private}.8lf,lon,%{private}.8lf,searchRadius,%{public}.1lf", buf, 0x20u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v37 = *(void *)(a1 + 1184);
        uint64_t v38 = *(void *)(a1 + 1192);
        uint64_t v39 = *(void *)(a2 + 32);
        int v77 = 134284033;
        uint64_t v78 = v37;
        __int16 v79 = 2049;
        uint64_t v80 = v38;
        __int16 v81 = 2050;
        uint64_t v82 = v39;
        __int16 v40 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "CoreLocation: %s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
    }
LABEL_50:
    uint64_t v8 = 0;
LABEL_51:
    if (SHIBYTE(v60) < 0) {
      operator delete(__p[1]);
    }
    if (v10) {
      sub_1906BFE48(v10);
    }
    goto LABEL_55;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  double v6 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMM,TBA,NULL Island", buf, 2u);
  }
  if (!sub_1906CB57C(115, 2)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6C0 != -1) {
LABEL_70:
  }
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
LABEL_60:
  LOWORD(v50[0]) = 0;
  uint64_t v36 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMapMatcher::getTunnelBridgeAssistance(CLGpsAssistant_Type::TunnelBridgeAssistance &)", "CoreLocation: %s\n", v36);
  if (v36 != (char *)buf) {
    free(v36);
  }
  return 0;
}

void sub_1907D2FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v69) {
    sub_1906BFE48(v69);
  }
  sub_190770ADC(&a69);
  _Unwind_Resume(a1);
}

BOOL sub_1907D3000(uint64_t a1, void *a2, double *a3, uint64_t a4, uint64_t *a5, int a6, double a7)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  sub_1907D5A04(a5);
  if (*(void *)(a4 + 16) == *(void *)(a4 + 8)
    || ((v14 = *(double *)(a4 + 40), double v15 = vabdd_f64(*(double *)(a1 + 24), v14), v14 >= 0.0)
      ? (BOOL v16 = v15 <= 6.0)
      : (BOOL v16 = 0),
        !v16))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v17 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 8);
      unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v191 = 2050;
      unint64_t v192 = v19;
      _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routehint timed out or empty, segments,%{public}lu", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v142 = *(void *)(a1 + 8);
      unint64_t v143 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
      *(_DWORD *)int v183 = 134349312;
      *(void *)&v183[4] = v142;
      *(_WORD *)&v183[12] = 2050;
      *(void *)&v183[14] = v143;
      int v144 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v144);
      if (v144 != buf) {
        free(v144);
      }
    }
    BOOL v20 = 0;
    *(void *)(a4 + 16) = *(void *)(a4 + 8);
    return v20;
  }
  if (!*a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v24 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,invalid geometry pointer, determineRouteHintRoadVectors", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v26 = *(void *)(a1 + 8);
    *(_DWORD *)int v183 = 134349056;
    *(void *)&v183[4] = v26;
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v27);
    goto LABEL_206;
  }
  if (a6)
  {
    if (!sub_190718368((void *)a4))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v21 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(a1 + 8);
        unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
        *(_DWORD *)long long buf = 134349312;
        *(void *)&uint8_t buf[4] = v22;
        __int16 v191 = 2050;
        unint64_t v192 = v23;
        _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHint road search,isConnectivityGood,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", buf, 0x16u);
      }
      if (!sub_1906CB57C(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_205;
      }
LABEL_222:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
LABEL_205:
      uint64_t v145 = *(void *)(a1 + 8);
      unint64_t v146 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
      *(_DWORD *)int v183 = 134349312;
      *(void *)&v183[4] = v145;
      *(_WORD *)&v183[12] = 2050;
      *(void *)&v183[14] = v146;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v27);
LABEL_206:
      if (v27 != buf) {
        free(v27);
      }
      return 0;
    }
  }
  else if ((sub_190718600((void *)a4) & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    float v120 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v121 = *(void *)(a1 + 8);
      unint64_t v122 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
      *(_DWORD *)long long buf = 134349312;
      *(void *)&uint8_t buf[4] = v121;
      __int16 v191 = 2050;
      unint64_t v192 = v122;
      _os_log_impl(&dword_1906B8000, v120, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHint road search,getConnectedRouteSegments,poorConnectivity caused by radar:58817500,%{public}lu,file radar if 58817500 is already fixed", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_205;
    }
    goto LABEL_222;
  }
  uint64_t v176 = (uint64_t)&v176;
  uint64_t v177 = &v176;
  unint64_t v178 = 0;
  if (((*(uint64_t (**)(void, uint64_t *, uint64_t, uint64_t, double))(*(void *)*a2 + 64))(*a2, &v176, a1, 1, a7) & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v123 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v124 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v124;
      _os_log_impl(&dword_1906B8000, v123, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,search, roadsWithinDistance returned false", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_179;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v125 = *(void *)(a1 + 8);
    *(_DWORD *)int v183 = 134349056;
    *(void *)&v183[4] = v125;
    uint64_t v126 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v126);
    goto LABEL_211;
  }
  if (!v178)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    __int16 v127 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v128 = *(void *)(a1 + 8);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v128;
      _os_log_impl(&dword_1906B8000, v127, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected, empty road list", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_179;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v147 = *(void *)(a1 + 8);
    *(_DWORD *)int v183 = 134349056;
    *(void *)&v183[4] = v147;
    uint64_t v126 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v126);
LABEL_211:
    if (v126 != buf) {
      free(v126);
    }
LABEL_179:
    BOOL v20 = 0;
    goto LABEL_198;
  }
  __int16 v159 = a5;
  v175[0] = 0;
  v175[1] = 0;
  __int16 v174 = (uint64_t *)v175;
  int v28 = *(double **)(a4 + 8);
  __int16 v157 = *(double **)(a4 + 16);
  if (v28 == v157) {
    goto LABEL_196;
  }
  uint64_t v158 = a1;
  float64x2_t v160 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
  do
  {
    uint64_t v171 = (__n128 *)&v171;
    __int16 v172 = &v171;
    uint64_t v173 = 0;
    __int16 v168 = (__n128 *)&v168;
    uint64_t v169 = &v168;
    uint64_t v170 = 0;
    __int16 v29 = v177;
    if (v177 == &v176) {
      goto LABEL_154;
    }
    char v30 = 0;
    while (1)
    {
      uint64_t v32 = (unint64_t **)(v29 + 2);
      uint64_t v31 = (void *)v29[2];
      if (*(void *)v28 != *v31) {
        goto LABEL_65;
      }
      *(void *)uint64_t v179 = 0;
      uint64_t v166 = 0;
      double v167 = 0.0;
      double v33 = v28[1];
      double v34 = v28[2];
      int v35 = (std::__shared_weak_count *)v29[3];
      uint64_t v163 = v31;
      __int16 v164 = v35;
      uint64_t v165 = 0;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v36 = sub_1907D4FB4(a3, (uint64_t *)&v163, (double *)&v166, (double *)v179, v33, v34);
      if (v164) {
        sub_1906BFE48(v164);
      }
      double v37 = v28[3];
      double v38 = v28[4];
      uint64_t v39 = (std::__shared_weak_count *)v29[3];
      uint64_t v161 = v29[2];
      __int16 v162 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v40 = sub_1907D4FB4(a3, &v161, (double *)&v165, &v167, v37, v38);
      if (v162) {
        sub_1906BFE48(v162);
      }
      if (v36) {
        sub_19076BCD4(&v171, (__n128 *)v29 + 1);
      }
      if (!v40) {
        goto LABEL_65;
      }
      sub_19076BCD4(&v168, (__n128 *)v29 + 1);
      if (!v36) {
        goto LABEL_65;
      }
      if (vabdd_f64(*(double *)v179, v167) < 0.0001)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        __int16 v129 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v130 = *(void *)(v158 + 8);
          unint64_t v131 = *((void *)v28 + 1);
          unint64_t v132 = *((void *)v28 + 2);
          double v133 = v28[3];
          unint64_t v134 = *((void *)v28 + 4);
          *(_DWORD *)long long buf = 134350081;
          *(void *)&uint8_t buf[4] = v130;
          __int16 v191 = 2049;
          unint64_t v192 = v131;
          __int16 v193 = 2049;
          unint64_t v194 = v132;
          __int16 v195 = 2049;
          double v196 = v133;
          __int16 v197 = 2049;
          unint64_t v198 = v134;
          _os_log_impl(&dword_1906B8000, v129, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,routeHints,road search, invalid data encountered, same start and end route coords, not using routehints,sLat,%{private}.7lf,sLon,%{private}.7lf,eLat,%{private}.7lf,eLon,%{private}.7lf", buf, 0x34u);
        }
        int v135 = sub_1906CB57C(115, 0);
        uint64_t v136 = v159;
        if (v135)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
          }
          uint64_t v148 = *(void *)(v158 + 8);
          uint64_t v149 = *((void *)v28 + 1);
          unint64_t v150 = *((void *)v28 + 2);
          double v151 = v28[3];
          unint64_t v152 = *((void *)v28 + 4);
          *(_DWORD *)int v183 = 134350081;
          *(void *)&v183[4] = v148;
          *(_WORD *)&v183[12] = 2049;
          *(void *)&v183[14] = v149;
          __int16 v184 = 2049;
          unint64_t v185 = v150;
          __int16 v186 = 2049;
          double v187 = v151;
          __int16 v188 = 2049;
          unint64_t v189 = v152;
          __int16 v153 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v153);
          if (v153 != buf) {
            free(v153);
          }
          uint64_t v136 = v159;
        }
        sub_1907D5A04(v136);
        sub_190770ADC((uint64_t *)&v168);
        sub_190770ADC((uint64_t *)&v171);
        BOOL v20 = 0;
        goto LABEL_197;
      }
      if (*(double *)v179 >= v167)
      {
        double v41 = fmod((float)(*((float *)v29 + 10) + 180.0), 360.0);
        if (v41 < 0.0) {
          double v41 = v41 + 360.0;
        }
        float v42 = v41;
        *((float *)v29 + 10) = v42;
        *((unsigned char *)v29 + 36) ^= 1u;
      }
      uint64_t v43 = (_OWORD *)v29[2];
      uint64_t v44 = (std::__shared_weak_count *)v29[3];
      if (v44)
      {
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        char v45 = *((unsigned char *)v29 + 36);
        *(void *)__int16 v182 = 0;
        *(void *)&v182[8] = 0;
        v182[16] = 1;
        atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_OWORD *)__int16 v182 = *v43;
        v182[16] = v45;
        sub_1906BFE48(v44);
        sub_1906BFE48(v44);
      }
      else
      {
        char v46 = *((unsigned char *)v29 + 36);
        *(void *)__int16 v182 = 0;
        *(void *)&v182[8] = 0;
        *(_OWORD *)__int16 v182 = *v43;
        v182[16] = v46;
      }
      if (!sub_1907D5478((uint64_t)&v174, (uint64_t *)v182)) {
        break;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      int v47 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v48 = *(void *)(v158 + 8);
        unint64_t v49 = **v32;
        *(_DWORD *)long long buf = 134349313;
        *(void *)&uint8_t buf[4] = v48;
        __int16 v191 = 2049;
        unint64_t v192 = v49;
        _os_log_impl(&dword_1906B8000, v47, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,%{private}lld", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
        }
        uint64_t v50 = *(void *)(v158 + 8);
        unint64_t v51 = **v32;
        *(_DWORD *)int v183 = 134349313;
        *(void *)&v183[4] = v50;
        *(_WORD *)&v183[12] = 2049;
        *(void *)&v183[14] = v51;
        uint64_t v52 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v52);
        if (v52 != buf) {
          free(v52);
        }
      }
      char v30 = 1;
LABEL_65:
      __int16 v29 = (uint64_t *)v29[1];
      if (v29 == &v176)
      {
        uint64_t v53 = v172;
        if (v30 & 1 | (v172 == &v171)) {
          goto LABEL_154;
        }
        while (1)
        {
          unint64_t v54 = v169;
          if (v169 != &v168) {
            break;
          }
LABEL_136:
          uint64_t v53 = (__n128 **)v53[1];
          if (v53 == &v171) {
            goto LABEL_154;
          }
        }
        char v55 = 0;
        long long v56 = (unint64_t **)(v53 + 2);
        while (1)
        {
          while (1)
          {
            long long v57 = (unint64_t **)(v54 + 2);
            long long v58 = *v56;
            if (v55) {
              goto LABEL_89;
            }
            int v59 = (float64x2_t *)v58[17];
            long long v60 = (float64x2_t *)v58[18];
            float64x2_t v61 = 0uLL;
            float64x2_t v62 = 0uLL;
            if (v60 != v59) {
              float64x2_t v62 = v60[-1];
            }
            uint64_t v64 = (float64x2_t *)(*v57)[17];
            long long v63 = (float64x2_t *)(*v57)[18];
            if (v63 != v64) {
              float64x2_t v61 = *v64;
            }
            int32x2_t v65 = vmovn_s64(vcgtq_f64(v160, vabdq_f64(v62, v61)));
            if ((vand_s8((int8x8_t)v65, (int8x8_t)vdup_lane_s32(v65, 1)).u8[0] & 1) == 0) {
              break;
            }
            char v66 = 1;
LABEL_81:
            char v67 = 1;
LABEL_88:
            *((unsigned char *)v53 + 36) = v66;
            *((unsigned char *)v54 + 36) = v67;
LABEL_89:
            uint64_t v71 = (std::__shared_weak_count *)v53[3];
            if (v71)
            {
              atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
              char v72 = *((unsigned char *)v53 + 36);
              *(void *)int v183 = 0;
              *(void *)&v183[8] = 0;
              v183[16] = 1;
              atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
              *(_OWORD *)int v183 = *(_OWORD *)v58;
              v183[16] = v72;
              sub_1906BFE48(v71);
              sub_1906BFE48(v71);
            }
            else
            {
              char v73 = *((unsigned char *)v53 + 36);
              *(void *)int v183 = 0;
              *(void *)&v183[8] = 0;
              *(_OWORD *)int v183 = *(_OWORD *)v58;
              v183[16] = v73;
            }
            if (sub_1907D5478((uint64_t)&v174, (uint64_t *)v183))
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              uint64_t v74 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v75 = *(void *)(v158 + 8);
                unint64_t v76 = **v56;
                *(_DWORD *)long long buf = 134349313;
                *(void *)&uint8_t buf[4] = v75;
                __int16 v191 = 2049;
                unint64_t v192 = v76;
                _os_log_impl(&dword_1906B8000, v74, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,start,%{private}lld", buf, 0x16u);
              }
              if (!sub_1906CB57C(115, 2)) {
                goto LABEL_115;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              uint64_t v77 = *(void *)(v158 + 8);
              unint64_t v78 = **v56;
              *(_DWORD *)__int16 v182 = 134349313;
              *(void *)&v182[4] = v77;
              *(_WORD *)&v182[12] = 2049;
              *(void *)&v182[14] = v78;
              __int16 v79 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v79);
              goto LABEL_134;
            }
            *(void *)long long buf = v183;
            *((unsigned char *)sub_1907D550C(&v174, (uint64_t *)v183, (uint64_t)&unk_1908825E8, (_OWORD **)buf) + 56) = 1;
            unint64_t v80 = v159[1];
            if (v80 >= v159[2])
            {
              uint64_t v84 = sub_1907D5650(v159, (uint64_t)(v53 + 2));
            }
            else
            {
              *(void *)unint64_t v80 = v53[2];
              __int16 v81 = v53[3];
              *(void *)(v80 + 8) = v81;
              if (v81) {
                atomic_fetch_add_explicit(&v81->n128_i64[1], 1uLL, memory_order_relaxed);
              }
              long long v82 = *((_OWORD *)v53 + 2);
              long long v83 = *((_OWORD *)v53 + 3);
              *(void *)(v80 + 48) = v53[8];
              *(_OWORD *)(v80 + 16) = v82;
              *(_OWORD *)(v80 + 32) = v83;
              uint64_t v84 = v80 + 56;
            }
            v159[1] = v84;
            __int16 v85 = v54[2];
            int v86 = (std::__shared_weak_count *)v54[3];
            if (v86)
            {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
              char v87 = *((unsigned char *)v54 + 36);
              *(void *)__int16 v182 = 0;
              *(void *)&v182[8] = 0;
              v182[16] = 1;
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
              *(__n128 *)__int16 v182 = *v85;
              v182[16] = v87;
              sub_1906BFE48(v86);
              sub_1906BFE48(v86);
            }
            else
            {
              char v88 = *((unsigned char *)v54 + 36);
              *(void *)__int16 v182 = 0;
              *(void *)&v182[8] = 0;
              *(__n128 *)__int16 v182 = *v85;
              v182[16] = v88;
            }
            if (!sub_1907D5478((uint64_t)&v174, (uint64_t *)v182))
            {
              *(void *)long long buf = v182;
              *((unsigned char *)sub_1907D550C(&v174, (uint64_t *)v182, (uint64_t)&unk_1908825E8, (_OWORD **)buf) + 56) = 1;
              unint64_t v100 = v159[1];
              if (v100 >= v159[2])
              {
                uint64_t v104 = sub_1907D5650(v159, (uint64_t)(v54 + 2));
              }
              else
              {
                *(void *)unint64_t v100 = v54[2];
                __int16 v101 = v54[3];
                *(void *)(v100 + 8) = v101;
                if (v101) {
                  atomic_fetch_add_explicit(&v101->n128_i64[1], 1uLL, memory_order_relaxed);
                }
                long long v102 = *((_OWORD *)v54 + 2);
                long long v103 = *((_OWORD *)v54 + 3);
                *(void *)(v100 + 48) = v54[8];
                *(_OWORD *)(v100 + 16) = v102;
                *(_OWORD *)(v100 + 32) = v103;
                uint64_t v104 = v100 + 56;
              }
              v159[1] = v104;
              goto LABEL_154;
            }
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
            }
            __int16 v89 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v90 = *(void *)(v158 + 8);
              unint64_t v91 = **v57;
              *(_DWORD *)long long buf = 134349313;
              *(void *)&uint8_t buf[4] = v90;
              __int16 v191 = 2049;
              unint64_t v192 = v91;
              _os_log_impl(&dword_1906B8000, v89, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,road already present,stop,%{private}lld", buf, 0x16u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
              }
              uint64_t v98 = *(void *)(v158 + 8);
              unint64_t v99 = **v57;
              *(_DWORD *)uint64_t v179 = 134349313;
              *(void *)&v179[4] = v98;
              __int16 v180 = 2049;
              unint64_t v181 = v99;
              __int16 v79 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v79);
LABEL_134:
              if (v79 != buf) {
                free(v79);
              }
            }
LABEL_115:
            unint64_t v54 = (__n128 **)v54[1];
            char v55 = 1;
            if (v54 == &v168) {
              goto LABEL_154;
            }
          }
          float64x2_t v68 = 0uLL;
          float64x2_t v69 = 0uLL;
          if (v60 != v59) {
            float64x2_t v69 = v60[-1];
          }
          if (v63 != v64) {
            float64x2_t v68 = v63[-1];
          }
          int32x2_t v70 = vmovn_s64(vcgtq_f64(v160, vabdq_f64(v69, v68)));
          if (vand_s8((int8x8_t)v70, (int8x8_t)vdup_lane_s32(v70, 1)).u8[0])
          {
            char v67 = 0;
            char v66 = 1;
            goto LABEL_88;
          }
          float64x2_t v92 = 0uLL;
          float64x2_t v93 = 0uLL;
          if (v60 != v59) {
            float64x2_t v93 = *v59;
          }
          if (v63 != v64) {
            float64x2_t v92 = *v64;
          }
          int32x2_t v94 = vmovn_s64(vcgtq_f64(v160, vabdq_f64(v93, v92)));
          if (vand_s8((int8x8_t)v94, (int8x8_t)vdup_lane_s32(v94, 1)).u8[0])
          {
            char v66 = 0;
            goto LABEL_81;
          }
          float64x2_t v95 = 0uLL;
          float64x2_t v96 = 0uLL;
          if (v60 != v59) {
            float64x2_t v96 = *v59;
          }
          if (v63 != v64) {
            float64x2_t v95 = v63[-1];
          }
          int32x2_t v97 = vmovn_s64(vcgtq_f64(v160, vabdq_f64(v96, v95)));
          if (vand_s8((int8x8_t)v97, (int8x8_t)vdup_lane_s32(v97, 1)).u8[0])
          {
            char v66 = 0;
            char v67 = 0;
            goto LABEL_88;
          }
          char v55 = 0;
          unint64_t v54 = (__n128 **)v54[1];
          if (v54 == &v168) {
            goto LABEL_136;
          }
        }
      }
    }
    *(void *)long long buf = v182;
    *((unsigned char *)sub_1907D550C(&v174, (uint64_t *)v182, (uint64_t)&unk_1908825E8, (_OWORD **)buf) + 56) = 1;
    unint64_t v105 = v159[1];
    if (v105 >= v159[2])
    {
      uint64_t v109 = sub_1907D5650(v159, (uint64_t)(v29 + 2));
    }
    else
    {
      *(void *)unint64_t v105 = v29[2];
      uint64_t v106 = v29[3];
      *(void *)(v105 + 8) = v106;
      if (v106) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v106 + 8), 1uLL, memory_order_relaxed);
      }
      long long v107 = *((_OWORD *)v29 + 2);
      long long v108 = *((_OWORD *)v29 + 3);
      *(void *)(v105 + 48) = v29[8];
      *(_OWORD *)(v105 + 16) = v107;
      *(_OWORD *)(v105 + 32) = v108;
      uint64_t v109 = v105 + 56;
    }
    v159[1] = v109;
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    double v110 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v111 = *(void *)(v158 + 8);
      unint64_t v112 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
      double v113 = *v28;
      unint64_t v114 = **v32;
      *(_DWORD *)long long buf = 134350081;
      *(void *)&uint8_t buf[4] = v111;
      __int16 v191 = 2050;
      unint64_t v192 = v178;
      __int16 v193 = 2050;
      unint64_t v194 = v112;
      __int16 v195 = 2049;
      double v196 = v113;
      __int16 v197 = 2049;
      unint64_t v198 = v114;
      _os_log_impl(&dword_1906B8000, v110, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,routeHints,road search,roadList,%{public}lu,routeRoads,%{public}lu,routeID,%{private}lld,matched,%{private}lld", buf, 0x34u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v115 = *(void *)(v158 + 8);
      unint64_t v116 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
      double v117 = *v28;
      unint64_t v118 = **v32;
      *(_DWORD *)int v183 = 134350081;
      *(void *)&v183[4] = v115;
      *(_WORD *)&v183[12] = 2050;
      *(void *)&v183[14] = v178;
      __int16 v184 = 2050;
      unint64_t v185 = v116;
      __int16 v186 = 2049;
      double v187 = v117;
      __int16 v188 = 2049;
      unint64_t v189 = v118;
      uint64_t v119 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v119);
      if (v119 != buf) {
        free(v119);
      }
    }
LABEL_154:
    sub_190770ADC((uint64_t *)&v168);
    sub_190770ADC((uint64_t *)&v171);
    v28 += 5;
  }
  while (v28 != v157);
  BOOL v137 = *(void *)(a4 + 16) == *(void *)(a4 + 8) || v178 == 0;
  if (!v137 && v159[1] == *v159)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    uint64_t v138 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v139 = *(void *)(v158 + 8);
      unint64_t v140 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
      *(_DWORD *)long long buf = 134349568;
      *(void *)&uint8_t buf[4] = v139;
      __int16 v191 = 2050;
      unint64_t v192 = v140;
      __int16 v193 = 2050;
      unint64_t v194 = v178;
      _os_log_impl(&dword_1906B8000, v138, OS_LOG_TYPE_DEBUG, "#Warning,CLMM,%{public}.1lf,routeHints,unable to find routeHints road,segments,%{public}lu,roadList,%{public}lu", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
      }
      uint64_t v154 = *(void *)(v158 + 8);
      unint64_t v155 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 3);
      *(_DWORD *)int v183 = 134349568;
      *(void *)&v183[4] = v154;
      *(_WORD *)&v183[12] = 2050;
      *(void *)&v183[14] = v155;
      __int16 v184 = 2050;
      unint64_t v185 = v178;
      uint64_t v156 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::determineRouteHintRoadVectors(const CLMapCrumb &, const CLMapGeometryPtr, CLDistanceCalc &, CLMapsRouteHintData &, std::vector<CLMapGeometry::DistanceQueryResult> &, double, BOOL)", "CoreLocation: %s\n", v156);
      if (v156 != buf) {
        free(v156);
      }
    }
  }
LABEL_196:
  BOOL v20 = v159[1] != *v159;
LABEL_197:
  sub_19074E308((uint64_t)&v174, v175[0]);
LABEL_198:
  sub_190770ADC(&v176);
  return v20;
}

void sub_1907D4AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *a36,uint64_t a37,uint64_t a38)
{
}

void sub_1907D4B8C(uint64_t a1, int a2)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  memset(v32, 0, 27);
  memset(&v32[32], 0, 48);
  *(_OWORD *)&v23[14] = 0u;
  *(_OWORD *)unint64_t v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  *(_OWORD *)__p = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v13 = *(_OWORD *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v14 = *(void *)(a1 + 96);
  uint64_t v15 = v3;
  *(_OWORD *)unint64_t v23 = *(_OWORD *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 184);
  *(void *)&v23[16] = *(void *)(a1 + 176);
  uint64_t v6 = *(void *)(a1 + 144);
  *((void *)&v16 + 1) = *(void *)(a1 + 136);
  *(void *)&long long v17 = v2;
  *(void *)&long long v22 = v6;
  *((void *)&v22 + 1) = v4;
  uint64_t v7 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = 0xBFF0000000000000;
  uint64_t v27 = 0;
  int v28 = 0;
  __int16 v26 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0xBFF0000000000000;
  v23[28] = *(unsigned char *)(a1 + 152);
  uint64_t v9 = v5;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)(a1 + 192), *(int8x16_t *)(a1 + 192), 8uLL);
  sub_190802558(a1, (uint64_t)&v7, a2);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[1]);
  }
}

void sub_1907D4C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907D4C9C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_1907D68C4(a1, a2);
  }
  else
  {
    *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
    long long v4 = *(_OWORD *)(a2 + 16);
    long long v5 = *(_OWORD *)(a2 + 32);
    long long v6 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v3 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v3 + 64) = v6;
    *(_OWORD *)(v3 + 16) = v4;
    *(_OWORD *)(v3 + 32) = v5;
    long long v7 = *(_OWORD *)(a2 + 80);
    long long v8 = *(_OWORD *)(a2 + 96);
    long long v9 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v3 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(v3 + 128) = v9;
    *(_OWORD *)(v3 + 80) = v7;
    *(_OWORD *)(v3 + 96) = v8;
    long long v10 = *(_OWORD *)(a2 + 144);
    long long v11 = *(_OWORD *)(a2 + 160);
    long long v12 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(v3 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(v3 + 192) = v12;
    *(_OWORD *)(v3 + 144) = v10;
    *(_OWORD *)(v3 + 160) = v11;
    uint64_t v13 = *(void *)(a2 + 216);
    *(void *)(v3 + 208) = *(void *)(a2 + 208);
    *(void *)(v3 + 216) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    long long v14 = *(_OWORD *)(a2 + 224);
    long long v15 = *(_OWORD *)(a2 + 240);
    *(void *)(v3 + 256) = *(void *)(a2 + 256);
    *(_OWORD *)(v3 + 224) = v14;
    *(_OWORD *)(v3 + 240) = v15;
    uint64_t result = v3 + 264;
  }
  a1[1] = result;
  return result;
}

void sub_1907D4D3C(double *a1)
{
  a1[7] = 0.0;
  a1[8] = 0.0;
  a1[9] = 0.0;
  uint64_t v1 = *((void *)a1 + 11);
  uint64_t v2 = *((void *)a1 + 12);
  if (v1 != v2)
  {
    double v4 = 0.0;
    double v5 = 0.0;
    uint64_t v6 = *((void *)a1 + 11);
    do
    {
      if (*(_DWORD *)(v6 + 64) == 2)
      {
        double v7 = *(double *)(v6 + 24);
        double v4 = v4 + *(double *)v6 * v7;
        double v5 = v5 + *(double *)(v6 + 16) * v7;
      }
      v6 += 72;
    }
    while (v6 != v2);
    a1[7] = v4;
    double v8 = v5 + 0.0;
    a1[9] = v5 + 0.0;
    do
    {
      if (*(_DWORD *)(v1 + 64) != 2)
      {
        double v9 = *(double *)(v1 + 24);
        double v10 = *(double *)v1 * v9;
        if (v4 > 0.0)
        {
          double v11 = log(v4);
          long double v12 = log(v10);
          double v10 = exp(v11 + v12);
        }
        a1[7] = v10;
        double v8 = v8 + *(double *)(v1 + 16) * v9;
        a1[9] = v8;
        double v4 = v10;
      }
      v1 += 72;
    }
    while (v1 != v2);
  }
}

uint64_t sub_1907D4E28@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 1024);
  *a2 = *(void *)(result + 1016);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1907D4E48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1036);
}

double sub_1907D4E50(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 1;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 136) = _Q1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 467) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 334) = 0u;
  *(void *)(a1 + 544) = 0xBFF0000000000000;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 639) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_WORD *)(a1 + 692) = 1;
  *(_DWORD *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 822) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  return result;
}

os_log_t sub_1907D4F40()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

uint64_t sub_1907D4F70(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0) {
    operator delete(*(void **)(a1 + 608));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  return a1;
}

BOOL sub_1907D4FB4(double *a1, uint64_t *a2, double *a3, double *a4, double a5, double a6)
{
  v46[204] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v6 = *a2;
  double v7 = *(double **)(*a2 + 136);
  unint64_t v8 = *(void *)(*a2 + 144) - (void)v7;
  *a3 = -1.0;
  *a4 = -1.0;
  if ((int)(v8 >> 4) > 1)
  {
    double v14 = *v7;
    double v15 = v7[1];
    *(double *)long long buf = 0.0;
    v46[0] = 0.0;
    sub_1906DA778(a1, (double *)buf, v46, &v42, a5, a6, 0.0, v14, v15, 0.0);
    uint64_t v16 = 0;
    double v17 = *(double *)buf;
    double v18 = v46[0];
    uint64_t v19 = (v8 >> 4) - 1;
    double v20 = 0.0;
    double v21 = 0.0;
    while (1)
    {
      uint64_t v22 = *(void *)(v6 + 136) + v16;
      double v23 = *(double *)(v22 + 16);
      double v24 = *(double *)(v22 + 24);
      double v42 = 0.0;
      v43[0] = 0.0;
      sub_1906DA778(a1, &v42, v43, &v44, a5, a6, 0.0, v23, v24, 0.0);
      double v25 = v42;
      double v26 = v43[0];
      double v27 = (v17 - v42) * (v17 - v42) + (v18 - v43[0]) * (v18 - v43[0]);
      double v28 = 0.0 - v17;
      if (v27 >= 0.001)
      {
        double v30 = ((0.0 - v18) * (v43[0] - v18) + v28 * (v42 - v17)) / v27;
        if (v30 < 0.0)
        {
          double v32 = v28 * v28 + (0.0 - v18) * (0.0 - v18);
          double v30 = 0.0;
          goto LABEL_11;
        }
        if (v30 > 1.0)
        {
          double v32 = (0.0 - v42) * (0.0 - v42) + (0.0 - v43[0]) * (0.0 - v43[0]);
          double v30 = 1.0;
          goto LABEL_11;
        }
        double v29 = (0.0 - (v17 + (v42 - v17) * v30)) * (0.0 - (v17 + (v42 - v17) * v30));
        double v31 = 0.0 - (v18 + (v43[0] - v18) * v30);
      }
      else
      {
        double v29 = v28 * v28;
        double v30 = 0.0;
        double v31 = 0.0 - v18;
      }
      double v32 = v29 + v31 * v31;
LABEL_11:
      double v33 = sqrt(v27);
      double v34 = sqrt(v32);
      if (*a3 < 0.0 || v34 < *a3)
      {
        *a3 = v34;
        double v20 = v21 + v33 * v30;
      }
      double v21 = v21 + v33;
      v16 += 16;
      double v18 = v26;
      double v17 = v25;
      if (!--v19)
      {
        double v35 = v20 / v21;
        if (v21 < 0.001) {
          double v35 = 0.0;
        }
        *a4 = v35;
        return *a3 < 0.03;
      }
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  double v37 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    LOWORD(v42) = 0;
    BOOL v40 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "CoreLocation: %s\n", v40);
    if (v40 != (char *)buf) {
      free(v40);
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
  }
  double v38 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_ERROR, "#Warning CLMM, findClosestPointOnRoad returned false", buf, 2u);
  }
  int v39 = sub_1906CB57C(115, 0);
  BOOL result = 0;
  if (v39)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005C00);
    }
    LOWORD(v42) = 0;
    double v41 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::isCoordinateOnRoadVector(CLDistanceCalc &, const double, const double, CLMapRoadPtr, double &, double &)", "CoreLocation: %s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
    return 0;
  }
  return result;
}

uint64_t sub_1907D5478(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *a2;
    unint64_t v4 = a2[1];
    uint64_t result = 1;
    while (1)
    {
      uint64_t v6 = v2[4];
      if (v3 == v6) {
        break;
      }
      if (v3 >= v6)
      {
        if (v6 >= v3) {
          return result;
        }
LABEL_21:
        ++v2;
      }
LABEL_22:
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        return 0;
      }
    }
    if (*((unsigned char *)a2 + 16) && *((unsigned char *)v2 + 48))
    {
      if (v4 < v2[5]) {
        goto LABEL_22;
      }
    }
    else
    {
      if (*((unsigned char *)v2 + 48)) {
        BOOL v7 = 0;
      }
      else {
        BOOL v7 = *((unsigned char *)a2 + 16) != 0;
      }
      if (v7) {
        goto LABEL_22;
      }
    }
    if (*((unsigned char *)v2 + 48) && *((unsigned char *)a2 + 16))
    {
      if (v2[5] >= v4) {
        return result;
      }
    }
    else if (!*((unsigned char *)v2 + 48) || *((unsigned char *)a2 + 16))
    {
      return result;
    }
    goto LABEL_21;
  }
  return 0;
}

_OWORD *sub_1907D550C(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = sub_1907D55A0((uint64_t)a1, &v11, a2);
  BOOL v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x40uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v9;
    *((unsigned char *)v7 + 56) = 0;
    sub_19074BC4C(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_1907D55A0(uint64_t a1, void *a2, uint64_t *a3)
{
  double v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  unint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = *a3;
    unint64_t v7 = a3[1];
    while (1)
    {
      unint64_t v8 = v4;
      uint64_t v9 = v4[4];
      if (v6 != v9) {
        break;
      }
      if (*((unsigned char *)a3 + 16) && *((unsigned char *)v8 + 48))
      {
        if (v7 >= v8[5]) {
          goto LABEL_17;
        }
LABEL_15:
        unint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_26;
        }
      }
      else
      {
        if (*((unsigned char *)v8 + 48)) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = *((unsigned char *)a3 + 16) != 0;
        }
        if (v10) {
          goto LABEL_15;
        }
LABEL_17:
        if (*((unsigned char *)v8 + 48) && *((unsigned char *)a3 + 16))
        {
          if (v8[5] >= v7) {
            goto LABEL_26;
          }
        }
        else if (!*((unsigned char *)v8 + 48) || *((unsigned char *)a3 + 16))
        {
          goto LABEL_26;
        }
LABEL_23:
        uint64_t result = v8 + 1;
        unint64_t v4 = (uint64_t *)v8[1];
        if (!v4) {
          goto LABEL_26;
        }
      }
    }
    if (v6 >= v9)
    {
      if (v9 >= v6) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    goto LABEL_15;
  }
  unint64_t v8 = result;
LABEL_26:
  *a2 = v8;
  return result;
}

uint64_t sub_1907D5650(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_190718FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  v18[4] = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_1907D5810(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[56 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  *((void *)v11 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = &v10[56 * v4];
  long long v14 = *(_OWORD *)(a2 + 16);
  long long v15 = *(_OWORD *)(a2 + 32);
  *((void *)v13 + 6) = *(void *)(a2 + 48);
  *((_OWORD *)v13 + 1) = v14;
  *((_OWORD *)v13 + 2) = v15;
  double v18[2] = v11 + 56;
  sub_1907D5798(a1, v18);
  uint64_t v16 = a1[1];
  sub_1907D597C(v18);
  return v16;
}

void sub_1907D5784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1907D597C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D5798(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1907D585C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1907D5810(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_190718124();
  }
  return operator new(56 * a2);
}

uint64_t sub_1907D585C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v8 = a7 - 56;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)uint64_t v8 = v9;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v11 = *(_OWORD *)(a3 + 16);
      long long v10 = *(_OWORD *)(a3 + 32);
      *(void *)(v8 + 48) = *(void *)(a3 + 48);
      *(_OWORD *)(v8 + 16) = v11;
      *(_OWORD *)(v8 + 32) = v10;
      *((void *)&v17 + 1) = v8;
      v8 -= 56;
      v7 -= 56;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_1907D5900((uint64_t)v14);
  return v12;
}

uint64_t sub_1907D5900(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1907D5938(a1);
  }
  return a1;
}

void sub_1907D5938(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_1906BFE48(v3);
    }
    v1 += 56;
  }
}

void **sub_1907D597C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1907D59B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 56;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 48);
    if (v4)
    {
      sub_1906BFE48(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 56;
    }
  }
}

void sub_1907D5A04(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 48);
    if (v4) {
      sub_1906BFE48(v4);
    }
  }
  a1[1] = v2;
}

void sub_1907D5A50(void *a1)
{
  *a1 = &unk_1EE004B28;
  sub_1907D5C88((uint64_t)(a1 + 3));

  JUMPOUT(0x192FCEAD0);
}

void sub_1907D5AB4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 14;
        sub_1907D5B4C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1907D5B4C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[11];
  if (v3)
  {
    a2[12] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    sub_1906BFE48(v4);
  }
}

void sub_1907D5BA0(void *a1)
{
  if (a1)
  {
    sub_1907D5BA0(*a1);
    sub_1907D5BA0(a1[1]);
    sub_1907D5BF4((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_1907D5BF4(uint64_t a1)
{
  if (*(char *)(a1 + 5087) < 0) {
    operator delete(*(void **)(a1 + 5064));
  }
  if (*(char *)(a1 + 807) < 0) {
    operator delete(*(void **)(a1 + 784));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1906BFE48(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    sub_1906BFE48(v4);
  }
}

uint64_t sub_1907D5C88(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1907D5D50(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1907D5A04((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1907D5DA4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1907D5DF8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1907D5DF8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 264)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 48);
    if (v4) {
      sub_1906BFE48(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_1907D5E44(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  int v5 = *((unsigned __int8 *)a2 + 16);
  uint64_t v6 = v2;
  uint64_t v8 = *a2;
  unint64_t v7 = a2[1];
  do
  {
    uint64_t v9 = *(void *)(v3 + 32);
    if (v9 == v8)
    {
      if (*(unsigned char *)(v3 + 48)) {
        BOOL v10 = v5 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      if (v10)
      {
        if (*(unsigned char *)(v3 + 48)) {
          BOOL v11 = v5 == 0;
        }
        else {
          BOOL v11 = 0;
        }
        BOOL v12 = v11;
      }
      else
      {
        BOOL v12 = *(void *)(v3 + 40) < v7;
      }
    }
    else
    {
      BOOL v12 = v9 < v8;
    }
    BOOL v13 = !v12;
    if (v12) {
      long long v14 = (uint64_t *)(v3 + 8);
    }
    else {
      long long v14 = (uint64_t *)v3;
    }
    if (v13) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v14;
  }
  while (*v14);
  if (v6 == v2) {
    return v2;
  }
  uint64_t v15 = *(void *)(v6 + 32);
  if (v8 != v15)
  {
    if (v8 >= v15) {
      return v6;
    }
    return v2;
  }
  if (*((unsigned char *)a2 + 16) && *(unsigned char *)(v6 + 48))
  {
    if (v7 >= *(void *)(v6 + 40)) {
      return v6;
    }
    return v2;
  }
  if (*((unsigned char *)a2 + 16) && !*(unsigned char *)(v6 + 48)) {
    return v2;
  }
  return v6;
}

uint64_t sub_1907D5EFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    sub_190718FD4();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)sub_1907D613C((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  BOOL v10 = v7;
  BOOL v11 = &v7[112 * v3];
  BOOL v13 = &v7[112 * v6];
  sub_1907D6024((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  BOOL v12 = v11 + 112;
  sub_1907D60C4(a1, &v10);
  uint64_t v8 = a1[1];
  sub_1907D62E4(&v10);
  return v8;
}

void sub_1907D6010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1907D62E4((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1907D6024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  long long v6 = *(_OWORD *)(a3 + 56);
  long long v7 = *(_OWORD *)(a3 + 65);
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 65) = v7;
  *(_OWORD *)(a2 + 56) = v6;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  return sub_1907B5854((void *)(a2 + 88), *(const void **)(a3 + 88), *(void *)(a3 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a3 + 96) - *(void *)(a3 + 88)) >> 3));
}

void sub_1907D60AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1906BFE48(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907D60C4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1907D6188((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1907D613C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_190718124();
  }
  return operator new(112 * a2);
}

uint64_t sub_1907D6188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 112);
      a3 -= 112;
      *(_OWORD *)(v7 - 112) = v8;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v9 = *(_OWORD *)(a3 + 16);
      long long v10 = *(_OWORD *)(a3 + 32);
      *(void *)(v7 - 64) = *(void *)(a3 + 48);
      *(_OWORD *)(v7 - 96) = v9;
      *(_OWORD *)(v7 - 80) = v10;
      long long v11 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(v7 - 47) = *(_OWORD *)(a3 + 65);
      *(_OWORD *)(v7 - 56) = v11;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 88);
      *(void *)(v7 - 8) = *(void *)(a3 + 104);
      *(void *)(a3 + 88) = 0;
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 104) = 0;
      uint64_t v7 = *((void *)&v17 + 1) - 112;
      *((void *)&v17 + 1) -= 112;
    }
    while (a3 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_1907D6258((uint64_t)v14);
  return v12;
}

uint64_t sub_1907D6258(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1907D6290((uint64_t *)a1);
  }
  return a1;
}

void sub_1907D6290(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_1907D5B4C(v3, v1);
      v1 += 14;
    }
    while (v1 != v2);
  }
}

void **sub_1907D62E4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1907D6318(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 112;
    sub_1907D5B4C(v4, (void *)(i - 112));
  }
}

void *sub_1907D6360(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1907D63E4(a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1907D63C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1907D63E4(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_190718FD4();
  }
  uint64_t result = (char *)sub_19074E100((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void sub_1907D6428(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0xF83E0F83E0F83E1 * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_1907D65CC(a1);
    if (a4 > 0xF83E0F83E0F83ELL) {
      sub_190718FD4();
    }
    unint64_t v10 = 0x1F07C1F07C1F07C2 * ((a1[2] - *a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0xF83E0F83E0F83E1 * ((a1[2] - *a1) >> 3)) >= 0x7C1F07C1F07C1FLL) {
      unint64_t v11 = 0xF83E0F83E0F83ELL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1907D6608(a1, v11);
    uint64_t v12 = sub_1907D6660(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xF83E0F83E0F83E1 * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((a1[1] - v9) >> 3);
    sub_1907D67B4((uint64_t)&v18, a2, v13, v9);
    uint64_t v12 = sub_1907D6660(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_1907D67B4((uint64_t)&v19, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = a1[1];
  if (v16 != v14)
  {
    do
    {
      long long v17 = *(std::__shared_weak_count **)(v16 - 48);
      if (v17) {
        sub_1906BFE48(v17);
      }
      v16 -= 264;
    }
    while (v16 != v15);
  }
  a1[1] = v15;
}

void sub_1907D65BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1907D65C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1907D65CC(uint64_t *a1)
{
  if (*a1)
  {
    sub_1907D5DF8(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1907D6608(void *a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL) {
    sub_190718FD4();
  }
  uint64_t result = (char *)sub_1907D6878((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[264 * v4];
  return result;
}

uint64_t sub_1907D6660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v21 = a4;
  uint64_t v20 = a4;
  v18[0] = a1;
  v18[1] = &v20;
  double v18[2] = &v21;
  if (a2 != a3)
  {
    do
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v4 + 64) = v7;
      *(_OWORD *)(v4 + 16) = v5;
      *(_OWORD *)(v4 + 32) = v6;
      long long v8 = *(_OWORD *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(v4 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(v4 + 128) = v10;
      *(_OWORD *)(v4 + 80) = v8;
      *(_OWORD *)(v4 + 96) = v9;
      long long v11 = *(_OWORD *)(a2 + 144);
      long long v12 = *(_OWORD *)(a2 + 160);
      long long v13 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(v4 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(v4 + 192) = v13;
      *(_OWORD *)(v4 + 144) = v11;
      *(_OWORD *)(v4 + 160) = v12;
      *(void *)(v4 + 208) = *(void *)(a2 + 208);
      uint64_t v14 = *(void *)(a2 + 216);
      *(void *)(v4 + 216) = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      long long v15 = *(_OWORD *)(a2 + 224);
      long long v16 = *(_OWORD *)(a2 + 240);
      *(void *)(v4 + 256) = *(void *)(a2 + 256);
      *(_OWORD *)(v4 + 224) = v15;
      *(_OWORD *)(v4 + 240) = v16;
      v4 += 264;
      a2 += 264;
    }
    while (a2 != a3);
    uint64_t v21 = v4;
  }
  char v19 = 1;
  sub_1907D6738((uint64_t)v18);
  return v4;
}

uint64_t sub_1907D6738(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1907D6770(a1);
  }
  return a1;
}

void sub_1907D6770(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 48);
    if (v3) {
      sub_1906BFE48(v3);
    }
    v1 -= 264;
  }
}

uint64_t sub_1907D67B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    *(_OWORD *)a4 = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    long long v8 = *(_OWORD *)(v5 + 32);
    long long v9 = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a4 + 48) = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a4 + 64) = v9;
    *(_OWORD *)(a4 + 16) = v7;
    *(_OWORD *)(a4 + 32) = v8;
    long long v10 = *(_OWORD *)(v5 + 80);
    long long v11 = *(_OWORD *)(v5 + 96);
    long long v12 = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(a4 + 112) = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a4 + 128) = v12;
    *(_OWORD *)(a4 + 80) = v10;
    *(_OWORD *)(a4 + 96) = v11;
    long long v13 = *(_OWORD *)(v5 + 144);
    long long v14 = *(_OWORD *)(v5 + 160);
    long long v15 = *(_OWORD *)(v5 + 192);
    *(_OWORD *)(a4 + 176) = *(_OWORD *)(v5 + 176);
    *(_OWORD *)(a4 + 192) = v15;
    *(_OWORD *)(a4 + 144) = v13;
    *(_OWORD *)(a4 + 160) = v14;
    uint64_t v17 = *(void *)(v5 + 208);
    uint64_t v16 = *(void *)(v5 + 216);
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    char v18 = *(std::__shared_weak_count **)(a4 + 216);
    *(void *)(a4 + 208) = v17;
    *(void *)(a4 + 216) = v16;
    if (v18) {
      sub_1906BFE48(v18);
    }
    long long v19 = *(_OWORD *)(v5 + 224);
    long long v20 = *(_OWORD *)(v5 + 240);
    *(void *)(a4 + 256) = *(void *)(v5 + 256);
    *(_OWORD *)(a4 + 224) = v19;
    *(_OWORD *)(a4 + 240) = v20;
    a4 += 264;
    v5 += 264;
  }
  while (v5 != v6);
  return v6;
}

void *sub_1907D6878(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF83E0F83E0F83FLL) {
    sub_190718124();
  }
  return operator new(264 * a2);
}

uint64_t sub_1907D68C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0xF83E0F83E0F83E1 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xF83E0F83E0F83ELL) {
    sub_190718FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xF83E0F83E0F83E1 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x7C1F07C1F07C1FLL) {
    unint64_t v9 = 0xF83E0F83E0F83ELL;
  }
  else {
    unint64_t v9 = v5;
  }
  v27[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_1907D6878(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[264 * v4];
  v27[0] = v10;
  v27[1] = v11;
  v27[3] = &v10[264 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v13 = *(_OWORD *)(a2 + 32);
  long long v14 = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v11 + 4) = v14;
  *((_OWORD *)v11 + 2) = v13;
  long long v15 = *(_OWORD *)(a2 + 128);
  long long v17 = *(_OWORD *)(a2 + 80);
  long long v16 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v11 + 7) = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v11 + 8) = v15;
  *((_OWORD *)v11 + 5) = v17;
  *((_OWORD *)v11 + 6) = v16;
  long long v18 = *(_OWORD *)(a2 + 192);
  long long v20 = *(_OWORD *)(a2 + 144);
  long long v19 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v11 + 11) = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v11 + 12) = v18;
  *((_OWORD *)v11 + 9) = v20;
  *((_OWORD *)v11 + 10) = v19;
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 26) = *(void *)(a2 + 208);
  uint64_t v21 = *(void *)(a2 + 216);
  *((void *)v11 + 27) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = &v10[264 * v4];
  long long v23 = *(_OWORD *)(a2 + 224);
  long long v24 = *(_OWORD *)(a2 + 240);
  *((void *)v22 + 32) = *(void *)(a2 + 256);
  *((_OWORD *)v22 + 14) = v23;
  *((_OWORD *)v22 + 15) = v24;
  v27[2] = v11 + 264;
  sub_1907D6A44(a1, v27);
  uint64_t v25 = a1[1];
  sub_1907D6C20(v27);
  return v25;
}

void sub_1907D6A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1907D6C20((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D6A44(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1907D6ABC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1907D6ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v27 = a6;
  *((void *)&v27 + 1) = a7;
  long long v26 = v27;
  v24[0] = a1;
  v24[1] = &v26;
  v24[2] = &v27;
  if (a3 == a5)
  {
    uint64_t v22 = a6;
  }
  else
  {
    uint64_t v8 = a3 - 56;
    uint64_t v9 = a7 - 264;
    do
    {
      uint64_t v10 = v8 - 208;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(v8 - 208);
      long long v11 = *(_OWORD *)(v8 - 192);
      long long v12 = *(_OWORD *)(v8 - 176);
      long long v13 = *(_OWORD *)(v8 - 144);
      *(_OWORD *)(v9 + 48) = *(_OWORD *)(v8 - 160);
      *(_OWORD *)(v9 + 64) = v13;
      *(_OWORD *)(v9 + 16) = v11;
      *(_OWORD *)(v9 + 32) = v12;
      long long v14 = *(_OWORD *)(v8 - 128);
      long long v15 = *(_OWORD *)(v8 - 112);
      long long v16 = *(_OWORD *)(v8 - 80);
      *(_OWORD *)(v9 + 112) = *(_OWORD *)(v8 - 96);
      *(_OWORD *)(v9 + 128) = v16;
      *(_OWORD *)(v9 + 80) = v14;
      *(_OWORD *)(v9 + 96) = v15;
      long long v17 = *(_OWORD *)(v8 - 64);
      long long v18 = *(_OWORD *)(v8 - 48);
      long long v19 = *(_OWORD *)(v8 - 16);
      *(_OWORD *)(v9 + 176) = *(_OWORD *)(v8 - 32);
      *(_OWORD *)(v9 + 192) = v19;
      *(_OWORD *)(v9 + 144) = v17;
      *(_OWORD *)(v9 + 160) = v18;
      *(_OWORD *)(v9 + 208) = *(_OWORD *)v8;
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      long long v21 = *(_OWORD *)(v8 + 16);
      long long v20 = *(_OWORD *)(v8 + 32);
      *(void *)(v9 + 256) = *(void *)(v8 + 48);
      *(_OWORD *)(v9 + 224) = v21;
      *(_OWORD *)(v9 + 240) = v20;
      *((void *)&v27 + 1) = v9;
      v8 -= 264;
      v9 -= 264;
      v7 -= 264;
    }
    while (v10 != a5);
    uint64_t v22 = v27;
  }
  char v25 = 1;
  sub_1907D6BA4((uint64_t)v24);
  return v22;
}

uint64_t sub_1907D6BA4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1907D6BDC(a1);
  }
  return a1;
}

void sub_1907D6BDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 216);
    if (v3) {
      sub_1906BFE48(v3);
    }
    v1 += 264;
  }
}

void **sub_1907D6C20(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1907D6C54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 264;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 48);
    if (v4)
    {
      sub_1906BFE48(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 264;
    }
  }
}

void sub_1907D6D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907D8704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907D8724()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F618 != -1) {
    dispatch_once(&qword_1E929F618, &unk_1EE006220);
  }
  v0 = qword_1E929F5F8;
  if (os_log_type_enabled((os_log_t)qword_1E929F5F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_DEFAULT, "Simulation connection interrupted", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F618 != -1) {
      dispatch_once(&qword_1E929F618, &unk_1EE006220);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLSimulationManager daemonProxy]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1907D88AC(uint64_t a1, uint64_t a2)
{
}

void sub_1907D88BC(uint64_t a1)
{
}

uint64_t sub_1907D88C8(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F618 != -1) {
    dispatch_once(&qword_1E929F618, &unk_1EE006220);
  }
  uint64_t v2 = qword_1E929F5F8;
  if (os_log_type_enabled((os_log_t)qword_1E929F5F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "Simulation connection invalidated", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F618 != -1) {
      dispatch_once(&qword_1E929F618, &unk_1EE006220);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLSimulationManager daemonProxy]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setConnection:0];
}

void sub_1907D8A70()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F618 != -1) {
    dispatch_once(&qword_1E929F618, &unk_1EE006220);
  }
  v0 = qword_1E929F5F8;
  if (os_log_type_enabled((os_log_t)qword_1E929F5F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_DEFAULT, "Error fetching remoteObjectProxy", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F618 != -1) {
      dispatch_once(&qword_1E929F618, &unk_1EE006220);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLSimulationManager daemonProxy]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

os_log_t sub_1907D8C30()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Simulation");
  qword_1E929F5F8 = (uint64_t)result;
  return result;
}

void *sub_1907D9394(uint64_t a1)
{
  *(void *)a1 = &unk_1EE004BF8;
  sub_1907D9408(a1, 0, 0);
  dispatch_release(*(dispatch_object_t *)(a1 + 208));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2) {
    sub_1906BFE48(v2);
  }

  return sub_19086B2A4((void *)a1);
}

uint64_t sub_1907D9408(uint64_t a1, FILE *a2, char a3)
{
  uint64_t v6 = (void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  uint64_t v7 = (FILE *)v6[18];
  if (v7 != a2)
  {
    *(void *)(a1 + 184) = a2;
    if (v7 && *(unsigned char *)(a1 + 156)) {
      fclose(v7);
    }
    *(unsigned char *)(a1 + 156) = a3;
  }
  return (*(uint64_t (**)(void *))(*v6 + 24))(v6);
}

void sub_1907D94B8(uint64_t a1)
{
  sub_1907D9394(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_1907D94F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v10 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  sub_1907D95C4(a1, "Generic", 0, 2, "void CLLog::logHeader()", "%s\n", &a9);
  return (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
}

void sub_1907D95B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907D95C4(uint64_t a1, const char *a2, int a3, signed int a4, const char *a5, const char *a6, va_list a7, ...)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  fpos_t v13 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  unsigned int v14 = vsnprintf(__str, 0x1FFuLL, a6, a7);
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 >= 0x1FF) {
      operator new[]();
    }
    uint64_t v15 = (int)v14 - 1;
    if (__str[v15] != 10) {
      __assert_rtn("vlog", "CLLog.mm", 172, "'\\n' == buffer[fullContentLength - 1]");
    }
    if (v14 >= 2)
    {
      uint64_t v15 = v15;
      long long v16 = __str;
      do
      {
        if (*v16 == 10) {
          *long long v16 = 32;
        }
        ++v16;
        --v15;
      }
      while (v15);
    }
    double Current = CFAbsoluteTimeGetCurrent();
    double v18 = Current;
    if (*(unsigned char *)(a1 + 152))
    {
      if (a4 > 5) {
        long long v19 = "NONE";
      }
      else {
        long long v19 = off_1E5697B90[a4];
      }
      fprintf(*(FILE **)(a1 + 200), "%s,%s,Time,%08.3f,Function,\"%s\",", v19, a2, Current, a5);
      fputs(__str, *(FILE **)(a1 + 200));
    }
    else
    {
      long long v20 = *(FILE **)(a1 + 184);
      if (v20 && *(_DWORD *)(a1 + 160) >= a4)
      {
        if (a4 > 5) {
          long long v21 = "NONE";
        }
        else {
          long long v21 = off_1E5697B90[a4];
        }
        fprintf(v20, "%s,%s,Time,%08.3f,Function,\"%s\",", v21, a2, Current, a5);
        fputs(__str, *(FILE **)(a1 + 184));
        if (*(_DWORD *)(a1 + 172) >= a4) {
          sub_1907DA198(a1, 3, *(FILE **)(a1 + 184));
        }
        v48[1] = v13;
        (*(void (**)(fpos_t))(*(void *)v13 + 16))(v13);
        __int16 v49 = 256;
        if (*(int *)(a1 + 12) >= 1)
        {
          long long v23 = *(FILE **)(a1 + 184);
          if (v23)
          {
            if (*(char *)(a1 + 151) < 0 ? *(void *)(a1 + 136) : *(unsigned __int8 *)(a1 + 151))
            {
              if (*(char *)(a1 + 79) < 0 ? *(void *)(a1 + 64) : *(unsigned __int8 *)(a1 + 79))
              {
                v48[0] = 0;
                fgetpos(v23, v48);
                if (v48[0] >= *(int *)(a1 + 12))
                {
                  fpos_t v75 = v13;
                  (*(void (**)(fpos_t))(*(void *)v13 + 16))(v13);
                  __int16 v76 = 256;
                  sub_1906D5C70(__p, ".log");
                  uint64_t v26 = sub_19086BBBC();
                  sub_19086B854((const void **)(a1 + 56), a1 + 80, (uint64_t)__p, v26, &v74);
                  if (SHIBYTE(v51) < 0) {
                    operator delete(__p[0]);
                  }
                  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type size = v74.__r_.__value_.__l.__size_;
                  }
                  double v28 = &v72;
                  sub_190796A90((uint64_t)&v72, size + 4);
                  if (v73 < 0) {
                    double v28 = (long long *)v72;
                  }
                  if (size)
                  {
                    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      double v29 = &v74;
                    }
                    else {
                      double v29 = (std::string *)v74.__r_.__value_.__r.__words[0];
                    }
                    memmove(v28, v29, size);
                  }
                  strcpy((char *)v28 + size, ".bz2");
                  sub_1907DB094(a1);
                  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    double v30 = &v74;
                  }
                  else {
                    double v30 = (std::string *)v74.__r_.__value_.__r.__words[0];
                  }
                  uid_t v31 = getuid();
                  gid_t v32 = getgid();
                  sub_190715868(v30, v31, v32);
                  double v34 = (char *)(a1 + 128);
                  double v35 = (const std::__fs::filesystem::path *)(a1 + 128);
                  if (*(char *)(a1 + 151) < 0) {
                    double v35 = *(const std::__fs::filesystem::path **)v34;
                  }
                  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    BOOL v36 = (const std::__fs::filesystem::path *)&v74;
                  }
                  else {
                    BOOL v36 = (const std::__fs::filesystem::path *)v74.__r_.__value_.__r.__words[0];
                  }
                  rename(v35, v36, v33);
                  if (v37)
                  {
                    int v38 = SHIBYTE(v73);
                    int v39 = (const char *)v72;
                    BOOL v40 = __error();
                    double v41 = (const char *)&v72;
                    if (v38 < 0) {
                      double v41 = v39;
                    }
                    syslog(3, "%s,%s,Failed to move aside log file %s (%d)\n", "ERROR", "CLLog", v41, *v40);
                  }
                  if (*(char *)(a1 + 151) < 0) {
                    double v34 = *(char **)v34;
                  }
                  sub_1907DAA74(a1, v34);
                  if (*(char *)(a1 + 103) < 0)
                  {
                    sub_1906C00FC(&__dst, *(void **)(a1 + 80), *(void *)(a1 + 88));
                  }
                  else
                  {
                    long long __dst = *(_OWORD *)(a1 + 80);
                    uint64_t v71 = *(void *)(a1 + 96);
                  }
                  if (*(char *)(a1 + 79) < 0)
                  {
                    sub_1906C00FC(&v68, *(void **)(a1 + 56), *(void *)(a1 + 64));
                  }
                  else
                  {
                    long long v68 = *(_OWORD *)(a1 + 56);
                    uint64_t v69 = *(void *)(a1 + 72);
                  }
                  int v42 = *(_DWORD *)(a1 + 16);
                  v66[0] = 0;
                  v66[1] = v66;
                  v66[2] = 0x2020000000;
                  int v67 = 0;
                  v60[0] = MEMORY[0x1E4F143A8];
                  v60[1] = 3321888768;
                  v60[2] = sub_1907DB114;
                  v60[3] = &unk_1EE0054E8;
                  v60[5] = a1;
                  if (SHIBYTE(v71) < 0)
                  {
                    sub_1906C00FC(&v61, (void *)__dst, *((unint64_t *)&__dst + 1));
                  }
                  else
                  {
                    long long v61 = __dst;
                    uint64_t v62 = v71;
                  }
                  v60[4] = v66;
                  int v65 = v42;
                  if (SHIBYTE(v69) < 0)
                  {
                    sub_1906C00FC(&v63, (void *)v68, *((unint64_t *)&v68 + 1));
                  }
                  else
                  {
                    long long v63 = v68;
                    uint64_t v64 = v69;
                  }
                  uint64_t v43 = *(NSObject **)(a1 + 208);
                  __p[0] = (void *)MEMORY[0x1E4F143A8];
                  __p[1] = (void *)3321888768;
                  unint64_t v51 = sub_1907DB500;
                  uint64_t v52 = &unk_1EE005520;
                  int v59 = v42;
                  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                    sub_1906C00FC(&v54, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v54 = v74;
                  }
                  if (SHIBYTE(v73) < 0)
                  {
                    sub_1906C00FC(&v55, (void *)v72, *((unint64_t *)&v72 + 1));
                  }
                  else
                  {
                    long long v55 = v72;
                    uint64_t v56 = v73;
                  }
                  if (SHIBYTE(v69) < 0)
                  {
                    sub_1906C00FC(&v57, (void *)v68, *((unint64_t *)&v68 + 1));
                  }
                  else
                  {
                    long long v57 = v68;
                    uint64_t v58 = v69;
                  }
                  uint64_t v53 = v60;
                  dispatch_async(v43, __p);
                  if (SHIBYTE(v58) < 0) {
                    operator delete((void *)v57);
                  }
                  if (SHIBYTE(v56) < 0) {
                    operator delete((void *)v55);
                  }
                  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v54.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v64) < 0) {
                    operator delete((void *)v63);
                  }
                  if (SHIBYTE(v62) < 0) {
                    operator delete((void *)v61);
                  }
                  _Block_object_dispose(v66, 8);
                  if (SHIBYTE(v69) < 0) {
                    operator delete((void *)v68);
                  }
                  if (SHIBYTE(v71) < 0) {
                    operator delete((void *)__dst);
                  }
                  if (SHIBYTE(v73) < 0) {
                    operator delete((void *)v72);
                  }
                  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v74.__r_.__value_.__l.__data_);
                  }
                  (*(void (**)(fpos_t))(*(void *)v13 + 24))(v13);
                }
              }
            }
          }
        }
        (*(void (**)(fpos_t))(*(void *)v13 + 24))(v13);
      }
      double v44 = *(FILE **)(a1 + 192);
      if (v44 && *(_DWORD *)(a1 + 164) >= a4)
      {
        if (a4 > 5) {
          char v45 = "NONE";
        }
        else {
          char v45 = off_1E5697B90[a4];
        }
        fprintf(v44, "%s,%s,Time,%08.3f,", v45, a2, v18);
        fputs(__str, *(FILE **)(a1 + 192));
      }
      if ((!a3 || *(_DWORD *)(a1 + 176)) && *(_DWORD *)(a1 + 168) >= a4)
      {
        if (a4) {
          int v46 = 5;
        }
        else {
          int v46 = 3;
        }
        syslog(v46, "%s", __str);
      }
    }
  }
  return (*(uint64_t (**)(fpos_t))(*(void *)v13 + 24))(v13);
}

void sub_1907D9E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  _Block_object_dispose(&a65, 8);
  if (a72 < 0) {
    operator delete(a69);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  sub_1906EB9DC((uint64_t)&a79);
  sub_1906EB9DC((uint64_t)&a22);
  if (v79) {
    MEMORY[0x192FCEAB0](v79, 0x1000C8077774924);
  }
  sub_1906EB9DC((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_1907D9FC8(int a1, char *__s)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int64_t v3 = strlen(__s);
  if (v3 < 1) {
    return 1;
  }
  uint64_t v4 = &__s[v3];
  uint64_t v5 = __s;
  while (1)
  {
    if (*v5 != 37)
    {
      uint64_t v6 = v5;
      goto LABEL_18;
    }
    uint64_t v6 = v5 + 1;
    int v7 = v5[1];
    if (v7 == 123) {
      break;
    }
LABEL_11:
    uint64_t v6 = v5 + 1;
    long long v12 = v5 + 1;
    if (v7 != 64)
    {
      if (v7 != 46) {
        goto LABEL_18;
      }
      if (v5[2] != 42) {
        goto LABEL_18;
      }
      long long v12 = v5 + 3;
      if (v5[3] != 80) {
        goto LABEL_18;
      }
      *(_WORD *)(v5 + 1) = 9572;
    }
    *long long v12 = 112;
LABEL_18:
    uint64_t v5 = v6 + 1;
    if (v6 + 1 >= v4) {
      return 1;
    }
  }
  if (v6 != v4)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = &v5[v8 + 2];
      if (v9 == v4) {
        break;
      }
      ++v8;
      if (*v9 == 125)
      {
        if (v8 == -1) {
          goto LABEL_18;
        }
        uint64_t v10 = &v5[v8];
        uint64_t v11 = (uint64_t)&v5[v8 + 1];
        memmove(v5, v6, v8 + 1);
        v10[1] = 37;
        int v7 = v10[2];
        uint64_t v5 = (char *)v11;
        goto LABEL_11;
      }
    }
  }
  if (qword_1EB2713D8 != -1) {
    dispatch_once(&qword_1EB2713D8, &unk_1EE006420);
  }
  unsigned int v14 = qword_1EB2713D0;
  BOOL result = os_log_type_enabled((os_log_t)qword_1EB2713D0, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v15 = 136446210;
    long long v16 = __s;
    _os_log_error_impl(&dword_1906B8000, v14, OS_LOG_TYPE_ERROR, "Failed parse os_log format specifier for shimming:missing closing brace,format,%{public}s", (uint8_t *)&v15, 0xCu);
    return 0;
  }
  return result;
}

uint64_t sub_1907DA198(uint64_t a1, int a2, FILE *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 40;
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v12 = a1 + 40;
  (*(void (**)(uint64_t))(v5 + 16))(a1 + 40);
  __int16 v13 = 256;
  CFAbsoluteTimeGetCurrent();
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)unsigned int v14 = 0u;
  int v7 = backtrace(v14, 128);
  int v8 = a2 + 1;
  if (a2 + 1 < v7)
  {
    uint64_t v9 = (const void **)&v14[v8];
    do
    {
      if (dladdr(*v9, &v11))
      {
        if (v11.dli_sname)
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx %s + %lu\n", "STATUS");
        }
        else
        {
          basename((char *)v11.dli_fname);
          fprintf(a3, "%s,%s,Time,%08.3f,%d\t%s\t0x%08lx 0x%08lx + %lu\n", "STATUS");
        }
      }
      else
      {
        fprintf(a3, "%s,%s,Time,%08.3f,%d\t0x%08lx\n");
      }
      ++v8;
      ++v9;
    }
    while (v7 != v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_1907DA3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2) {
    sub_1906F4064(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907DA3F4(uint64_t a1)
{
  v36[2] = *MEMORY[0x1E4F143B8];
  [*(id *)(*(void *)(a1 + 48) + 64) assertInside];
  pthread_self();
  sub_1906C1BD4(*(void *)(a1 + 24), "ShowError", (BOOL *)(a1 + 154));
  sub_1906C1BD4(*(void *)(a1 + 24), "LogShowUI", (BOOL *)(a1 + 155));
  sub_1906C1070(*(void *)(a1 + 24), "LogFileLevel", (_DWORD *)(a1 + 160));
  sub_1906C1070(*(void *)(a1 + 24), "LogBufferLevel", (_DWORD *)(a1 + 164));
  sub_1906C1070(*(void *)(a1 + 24), "LogConsoleLevel", (_DWORD *)(a1 + 168));
  sub_1906C1070(*(void *)(a1 + 24), "LogStackLevel", (_DWORD *)(a1 + 172));
  sub_19078431C(*(void *)(a1 + 24), "LogFileDirectory", a1 + 56);
  sub_19078431C(*(void *)(a1 + 24), "LogFilePrefix", a1 + 80);
  sub_1906C1BD4(*(void *)(a1 + 24), "LogFileFlush", (BOOL *)(a1 + 157));
  sub_1906C1BD4(*(void *)(a1 + 24), "LogFence", (BOOL *)(a1 + 153));
  int v35 = 0;
  sub_1906C1070(*(void *)(a1 + 24), "LogBufferSize", &v35);
  if ((*(_DWORD *)(a1 + 160) & 0x80000000) != 0)
  {
    sub_1907D9408(a1, 0, 0);
    goto LABEL_75;
  }
  uint64_t v2 = *(void *)(a1 + 184);
  __p = 0;
  long long __n = 0uLL;
  if (!sub_19078431C(*(void *)(a1 + 24), "LogFile", (uint64_t)&__p)) {
    goto LABEL_6;
  }
  uint64_t v3 = HIBYTE(__n);
  if (__n < 0) {
    uint64_t v3 = __n;
  }
  if (!v3)
  {
LABEL_6:
    if (*(char *)(a1 + 79) < 0)
    {
      if (!*(void *)(a1 + 64)) {
        goto LABEL_43;
      }
    }
    else if (!*(unsigned char *)(a1 + 79))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 103) < 0)
    {
      if (!*(void *)(a1 + 88)) {
        goto LABEL_43;
      }
    }
    else if (!*(unsigned char *)(a1 + 103))
    {
      goto LABEL_43;
    }
    if (*(char *)(a1 + 79) >= 0) {
      size_t v4 = *(unsigned __int8 *)(a1 + 79);
    }
    else {
      size_t v4 = *(void *)(a1 + 64);
    }
    uint64_t v5 = &v31;
    sub_190796A90((uint64_t)&v31, v4 + 1);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v5 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if (v4)
    {
      if (*(char *)(a1 + 79) >= 0) {
        uint64_t v6 = (const void *)(a1 + 56);
      }
      else {
        uint64_t v6 = *(const void **)(a1 + 56);
      }
      memmove(v5, v6, v4);
    }
    *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
    int v7 = *(char *)(a1 + 103);
    if (v7 >= 0) {
      int v8 = (const std::string::value_type *)(a1 + 80);
    }
    else {
      int v8 = *(const std::string::value_type **)(a1 + 80);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      std::string::size_type v9 = *(void *)(a1 + 88);
    }
    uint64_t v10 = std::string::append(&v31, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    int v12 = *(char *)(a1 + 127);
    if (v12 >= 0) {
      __int16 v13 = (const std::string::value_type *)(a1 + 104);
    }
    else {
      __int16 v13 = *(const std::string::value_type **)(a1 + 104);
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *(unsigned __int8 *)(a1 + 127);
    }
    else {
      std::string::size_type v14 = *(void *)(a1 + 112);
    }
    long long v15 = std::string::append(&v32, v13, v14);
    long long v16 = (void *)v15->__r_.__value_.__r.__words[0];
    v36[0] = v15->__r_.__value_.__l.__size_;
    *(void *)((char *)v36 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
    char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__n) < 0) {
      operator delete(__p);
    }
    __p = v16;
    *(void *)&long long __n = v36[0];
    *(void *)((char *)&__n + 7) = *(void *)((char *)v36 + 7);
    HIBYTE(__n) = v17;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
  }
LABEL_43:
  if (__n >= 0) {
    uint64_t v18 = HIBYTE(__n);
  }
  else {
    uint64_t v18 = __n;
  }
  if (v18)
  {
    if (v2)
    {
      uint64_t v19 = *(unsigned __int8 *)(a1 + 151);
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *(void *)(a1 + 136);
      }
      if (v18 == v19)
      {
        if (v20 >= 0) {
          long long v21 = (unsigned __int8 *)(a1 + 128);
        }
        else {
          long long v21 = *(unsigned __int8 **)(a1 + 128);
        }
        if ((HIBYTE(__n) & 0x80) != 0)
        {
          long long v24 = (char *)__p;
          if (memcmp(__p, v21, __n)) {
            goto LABEL_63;
          }
        }
        else if (HIBYTE(__n))
        {
          p_p = &__p;
          uint64_t v23 = HIBYTE(__n);
          while (*(unsigned __int8 *)p_p == *v21)
          {
            p_p = (void **)((char *)p_p + 1);
            ++v21;
            if (!--v23) {
              goto LABEL_66;
            }
          }
          goto LABEL_60;
        }
LABEL_66:
        sub_1907DAFF4(a1, *(unsigned __int8 *)(a1 + 157));
        long long v26 = (const char *)&__p;
        if (__n < 0) {
          long long v26 = (const char *)__p;
        }
        if (*(unsigned char *)(a1 + 157)) {
          long long v27 = " and flushing immediately";
        }
        else {
          long long v27 = " no flush";
        }
        syslog(5, "%s,%s,logging locations to %s%s\n", "NOTICE", "CLLog", v26, v27);
        goto LABEL_73;
      }
    }
LABEL_60:
    if (__n >= 0) {
      long long v24 = (char *)&__p;
    }
    else {
      long long v24 = (char *)__p;
    }
LABEL_63:
    sub_1907DAA74(a1, v24);
    if (!v2)
    {
      uint64_t v25 = *(void *)(a1 + 216);
      if (v25) {
        sub_1907E0FBC(v25, *(FILE **)(a1 + 184));
      }
    }
    goto LABEL_66;
  }
  sub_1907D9408(a1, 0, 0);
LABEL_73:
  if (SHIBYTE(__n) < 0) {
    operator delete(__p);
  }
LABEL_75:
  if ((*(_DWORD *)(a1 + 164) & 0x80000000) != 0 || (int v28 = v35, v35 < 1))
  {
    long long v30 = *(std::__shared_weak_count **)(a1 + 224);
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    if (v30) {
      sub_1906BFE48(v30);
    }
    *(void *)(a1 + 192) = 0;
  }
  else
  {
    if (v35 > 0xA00000)
    {
      int v28 = 10485760;
      int v35 = 10485760;
    }
    uint64_t v29 = *(void *)(a1 + 216);
    if (!v29 || *(_DWORD *)(v29 + 16) != v28) {
      operator new();
    }
    *(void *)(a1 + 192) = sub_1907E0D48((FILE **)v29);
    syslog(5, "%s,%s,logging locations to an internal buffer with capacity %d\n", "NOTICE", "CLLog", v35);
  }
}

void sub_1907DA9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907DAA74(uint64_t a1, char *a2)
{
  *(void *)&v67[1526] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  if (a2)
  {
    uid_t v5 = getuid();
    gid_t v6 = getgid();
    sub_190715868(a2, v5, v6);
    int v7 = fopen(a2, "a");
    if (v7)
    {
      MEMORY[0x192FCE920](a1 + 128, a2);
      sub_1907D9408(a1, v7, 1);
      sub_1907DAFF4(a1, *(unsigned __int8 *)(a1 + 157));
      int v8 = *(FILE **)(a1 + 184);
      if (v8) {
        sub_190717134(v8);
      }
      sub_1906D54D4();
      sub_190794360((uint64_t)__p);
      if (__p[23] >= 0) {
        std::string::size_type v9 = __p;
      }
      else {
        std::string::size_type v9 = *(char **)__p;
      }
      sub_1906D5C70(v63, v9);
      if (__p[23] < 0) {
        operator delete(*(void **)__p);
      }
      unint64_t v10 = v64;
      unsigned __int8 v11 = v64;
      if ((v64 & 0x80u) != 0) {
        unint64_t v10 = (unint64_t)v63[1];
      }
      if (!v10)
      {
        MEMORY[0x192FCE920](v63, "Unplugged!");
        unsigned __int8 v11 = v64;
      }
      bzero(__p, 0x65CuLL);
      int v12 = v63;
      if ((v11 & 0x80u) != 0) {
        int v12 = (void **)v63[0];
      }
      snprintf(__p, 0x65CuLL, "CoreLocation-%s\n", (const char *)v12);
      sub_1907D94F0(a1, v13, 0, v14, v15, v16, v17, v18, (char)__p);
      bzero(__p, 0x65CuLL);
      snprintf(__p, 0x65CuLL, "locationd was compiled on %s at %s\n", "Nov 21 2024", "19:55:12");
      sub_1907D94F0(a1, v19, 0, v20, v21, v22, v23, v24, (char)__p);
      bufstd::string::size_type size = 1024;
      if (_NSGetExecutablePath(buf, &bufsize))
      {
        bzero(__p, 0x65CuLL);
        uint64_t v25 = sub_1906D54D4();
        long long v26 = v60;
        sub_19079415C(v25, (uint64_t)v60);
        if (v61 < 0) {
          long long v26 = (void **)v60[0];
        }
        sub_1906D54D4();
        sub_190793C98((uint64_t)v58);
        if (v59 >= 0) {
          long long v27 = v58;
        }
        else {
          long long v27 = (void **)v58[0];
        }
        snprintf(__p, 0x65CuLL, "/usr/libexec/locationd @ system model %s / version %s\n", (const char *)v26, (const char *)v27);
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        if (v61 < 0) {
          operator delete(v60[0]);
        }
      }
      else
      {
        bzero(__p, 0x65CuLL);
        uint64_t v35 = sub_1906D54D4();
        long long v36 = v60;
        sub_19079415C(v35, (uint64_t)v60);
        if (v61 < 0) {
          long long v36 = (void **)v60[0];
        }
        sub_1906D54D4();
        sub_190793C98((uint64_t)v58);
        if (v59 >= 0) {
          long long v37 = v58;
        }
        else {
          long long v37 = (void **)v58[0];
        }
        snprintf(__p, 0x65CuLL, "%s @ system model %s / version %s\n", buf, (const char *)v36, (const char *)v37);
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        if (v61 < 0) {
          operator delete(v60[0]);
        }
      }
      sub_1907D94F0(a1, v28, 0, v29, v30, v31, v32, v33, (char)__p);
      bzero(__p, 0x65CuLL);
      sub_1906D54D4();
      sub_1907945C8((uint64_t)v60);
      if (v61 >= 0) {
        long long v38 = v60;
      }
      else {
        long long v38 = (void **)v60[0];
      }
      snprintf(__p, 0x65CuLL, "IOPlatformSerialNumber: %s\n", (const char *)v38);
      if (v61 < 0) {
        operator delete(v60[0]);
      }
      sub_1907D94F0(a1, v39, 0, v40, v41, v42, v43, v44, (char)__p);
      bzero(v67, 0x5EAuLL);
      strcpy(__p, "Begin settings dump (read at construction of CLSettings or upon darwin notification 'com.apple.locationd/prefs')\n");
      sub_1907D94F0(a1, v45, 0, v46, v47, v48, v49, v50, (char)__p);
      (*(void (**)(void))(**(void **)(a1 + 24) + 792))(*(void *)(a1 + 24));
      bzero(&__p[19], 0x649uLL);
      strcpy(__p, "End settings dump\n");
      sub_1907D94F0(a1, v51, 0, v52, v53, v54, v55, v56, (char)__p);
      if ((char)v64 < 0) {
        operator delete(v63[0]);
      }
    }
    else
    {
      long long v34 = __error();
      syslog(3, "%s,%s,could not open locations log %s, errno %d\n", "ERROR", "CLLog", a2, *v34);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_1907DAF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_1906EB9DC((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1907DAFF4(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 40;
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  *(unsigned char *)(v3 + 117) = a2 != 0;
  uint64_t v4 = *(FILE **)(v3 + 144);
  if (v4) {
    setvbuf(v4, 0, a2 != 0, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

uint64_t sub_1907DB094(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40);
  uint64_t v2 = (FILE *)v1[18];
  if (v2) {
    fflush(v2);
  }
  return (*(uint64_t (**)(void *))(*v1 + 24))(v1);
}

uint64_t sub_1907DB114(uint64_t a1, char *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 40);
  sub_1906D5C70(v21, a2);
  if (*(char *)(a1 + 71) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v5 = *(void *)(a1 + 56);
  }
  gid_t v6 = v19;
  sub_190796A90((uint64_t)v19, v5 + 1);
  if (v20 < 0) {
    gid_t v6 = (void **)v19[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 71) >= 0) {
      int v7 = (const void *)(a1 + 48);
    }
    else {
      int v7 = *(const void **)(a1 + 48);
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)v6 + v5) = 95;
  if (sub_19086BBC8(v4, (char **)v21, (char *)v19))
  {
    sub_1906D5C70(v17, a2);
    sub_1906D5C70(v15, ".log.bz2");
    if (sub_19086BCA0(v4, v17, (char *)v15))
    {
      int v8 = 1;
    }
    else
    {
      sub_1906D5C70(v13, a2);
      sub_1906D5C70(__p, ".log");
      int v8 = sub_19086BCA0(v4, v13, (char *)__p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0)
  {
    operator delete(v21[0]);
    if (!v8) {
      return 1;
    }
  }
  else if (!v8)
  {
    return 1;
  }
  if (++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) > *(_DWORD *)(a1 + 96))
  {
    LOBYTE(v21[0]) = 0;
    std::string::size_type v9 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      std::string::size_type v9 = *(const char **)v9;
    }
    if (snprintf((char *)v21, 0x400uLL, "%s/%s", v9, a2) > 1023)
    {
      syslog(3, "%s,%s,Rotation path is too long, could not delete old logs.\n", "ERROR", "CLLog");
    }
    else if (unlink((const char *)v21))
    {
      perror("Failed to delete log");
    }
  }
  return 1;
}

void sub_1907DB380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1907DB404(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0)
  {
    sub_1906C00FC((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v4;
  }
  BOOL result = (unsigned char *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0) {
    return sub_1906C00FC(result, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  long long v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)BOOL result = v6;
  return result;
}

void sub_1907DB48C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907DB4A8(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

void sub_1907DB500(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 112)) {
    goto LABEL_7;
  }
  uint64_t v2 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  uint64_t v3 = (const char *)(a1 + 64);
  long long v4 = (const char *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    long long v4 = *(const char **)v3;
  }
  if (!sub_190715FCC(v2, v4))
  {
    if (*(char *)(a1 + 87) < 0) {
      uint64_t v3 = *(const char **)v3;
    }
    syslog(3, "%s,%s,Failed to write %s\n", "ERROR", "CLLog", v3);
  }
  else
  {
LABEL_7:
    size_t v5 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      size_t v5 = *(const char **)v5;
    }
    unlink(v5);
  }
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    long long v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v6 = (void *)*v6;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    sub_1907E1D94((uint64_t)v6, v7);
  }
}

unsigned char *sub_1907DB5E4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1906C00FC((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_1906C00FC((unsigned char *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  BOOL result = (unsigned char *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0) {
    return sub_1906C00FC(result, *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  long long v7 = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_OWORD *)BOOL result = v7;
  return result;
}

void sub_1907DB69C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907DB6D0(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

uint64_t sub_1907DB738(uint64_t a1)
{
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v73 = a1 + 40;
  (*(void (**)(uint64_t))(v2 + 16))(a1 + 40);
  __int16 v74 = 256;
  uint64_t v4 = sub_19086BBBC();
  if (*(char *)(a1 + 79) < 0)
  {
    sub_1906C00FC(&__dst, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }
  else
  {
    long long __dst = *(_OWORD *)(a1 + 56);
    uint64_t v72 = *(void *)(a1 + 72);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    sub_1906C00FC(&v69, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    long long v69 = *(_OWORD *)(a1 + 80);
    uint64_t v70 = *(void *)(a1 + 96);
  }
  if (*(void *)(a1 + 216))
  {
    syslog(5, "%s,%s,dumping internal buffer\n", "NOTICE", "CLLog");
    sub_19086BAEC(a1, (std::string *)&v75);
    if ((v75.st_gid & 0x80000000) == 0) {
      long long v5 = &v75;
    }
    else {
      long long v5 = *(stat **)&v75.st_dev;
    }
    long long v6 = fopen((const char *)v5, "a");
    long long v7 = v6;
    if (SHIBYTE(v75.st_gid) < 0)
    {
      operator delete(*(void **)&v75.st_dev);
      if (v7) {
        goto LABEL_13;
      }
    }
    else if (v6)
    {
LABEL_13:
      sub_1907E0FBC(*(void *)(a1 + 216), v7);
      fclose(v7);
      char v8 = 1;
      goto LABEL_16;
    }
  }
  char v8 = 0;
LABEL_16:
  if (v72 >= 0) {
    p_dst = (const char *)&__dst;
  }
  else {
    p_dst = (const char *)__dst;
  }
  if (!stat(p_dst, &v75))
  {
    char v10 = HIBYTE(v72);
    if (v72 >= 0) {
      unsigned __int8 v11 = &__dst;
    }
    else {
      unsigned __int8 v11 = (long long *)__dst;
    }
    v64[0] = MEMORY[0x1E4F143A8];
    v64[1] = 3321888768;
    v64[2] = sub_1907DC2E4;
    v64[3] = &unk_1EE005550;
    v64[4] = a1;
    if (SHIBYTE(v70) < 0)
    {
      sub_1906C00FC(&v65, (void *)v69, *((unint64_t *)&v69 + 1));
      char v10 = HIBYTE(v72);
    }
    else
    {
      long long v65 = v69;
      uint64_t v66 = v70;
    }
    if (v10 < 0)
    {
      sub_1906C00FC(&__p, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long __p = __dst;
      uint64_t v68 = v72;
    }
    sub_1907E1D94((uint64_t)v11, (uint64_t)v64);
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete((void *)v65);
    }
  }
  sub_1907DB094(a1);
  char v12 = (char *)(a1 + 128);
  uint64_t v13 = (const char *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    uint64_t v13 = *(const char **)v12;
  }
  if (!stat(v13, &v75))
  {
    sub_19086BAEC(a1, (std::string *)&v75);
    uint64_t v15 = (const std::__fs::filesystem::path *)(a1 + 128);
    if (*(char *)(a1 + 151) < 0) {
      uint64_t v15 = *(const std::__fs::filesystem::path **)v12;
    }
    if ((v75.st_gid & 0x80000000) == 0) {
      char v16 = &v75;
    }
    else {
      char v16 = *(stat **)&v75.st_dev;
    }
    rename(v15, (const std::__fs::filesystem::path *)v16, v14);
    if ((v75.st_gid & 0x80000000) == 0) {
      uint64_t v17 = &v75;
    }
    else {
      uint64_t v17 = *(stat **)&v75.st_dev;
    }
    sub_190715814((const char *)v17);
    if (*(char *)(a1 + 151) < 0) {
      char v12 = *(char **)v12;
    }
    sub_1907DAA74(a1, v12);
    if (SHIBYTE(v75.st_gid) < 0) {
      operator delete(*(void **)&v75.st_dev);
    }
    char v8 = 1;
  }
  BOOL v63 = 0;
  sub_19079AC6C(&v75);
  if (sub_1906C1BD4(*(uint64_t *)&v75.st_dev, "LogNatalimetry", &v63))
  {
    char v18 = 1;
  }
  else
  {
    sub_19079AC6C(v61);
    char v18 = sub_1906C1BD4((uint64_t)v61[0], "LogCalorimetry", &v63);
    if (v61[1]) {
      sub_1906BFE48((std::__shared_weak_count *)v61[1]);
    }
  }
  if (v75.st_ino) {
    sub_1906BFE48((std::__shared_weak_count *)v75.st_ino);
  }
  if (v18)
  {
    if (v63)
    {
      sub_1907AA9D0(0, &v60);
      uint64_t v19 = std::string::append(&v60, "userinfo");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      *(void *)&v75.st_uid = *((void *)&v19->__r_.__value_.__l + 2);
      *(_OWORD *)&v75.st_dev = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      uint64_t v21 = std::string::append((std::string *)&v75, ".plist");
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      int64_t v62 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)char v61 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v75.st_gid) < 0) {
        operator delete(*(void **)&v75.st_dev);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (v62 >= 0) {
        uint64_t v23 = v61;
      }
      else {
        uint64_t v23 = (void **)v61[0];
      }
      if (!stat((const char *)v23, &v75))
      {
        sub_19086B674((uint64_t)&v58);
        uint64_t v24 = std::string::append(&v58, "/");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        long long v26 = std::string::append(&v59, "userinfo");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        uint64_t v28 = std::string::append(&v60, ".log");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        *(void *)&v75.st_uid = *((void *)&v28->__r_.__value_.__l + 2);
        *(_OWORD *)&v75.st_dev = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (v62 >= 0) {
          uint64_t v30 = v61;
        }
        else {
          uint64_t v30 = (void **)v61[0];
        }
        if ((v75.st_gid & 0x80000000) == 0) {
          uint64_t v31 = &v75;
        }
        else {
          uint64_t v31 = *(stat **)&v75.st_dev;
        }
        sub_190715964((const char *)v30, (const char *)v31);
        if ((v75.st_gid & 0x80000000) == 0) {
          uint64_t v32 = &v75;
        }
        else {
          uint64_t v32 = *(stat **)&v75.st_dev;
        }
        sub_190715814((const char *)v32);
        if (SHIBYTE(v75.st_gid) < 0) {
          operator delete(*(void **)&v75.st_dev);
        }
      }
      sub_1907AA9D0(0, &v59);
      uint64_t v33 = std::string::append(&v59, "cache");
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      *(void *)&v75.st_uid = *((void *)&v33->__r_.__value_.__l + 2);
      *(_OWORD *)&v75.st_dev = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      uint64_t v35 = std::string::append((std::string *)&v75, ".plist");
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v75.st_gid) < 0) {
        operator delete(*(void **)&v75.st_dev);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v37 = &v60;
      }
      else {
        long long v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if (!stat((const char *)v37, &v75))
      {
        sub_19086B674((uint64_t)&v57);
        long long v38 = std::string::append(&v57, "/");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v58.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        uint64_t v40 = std::string::append(&v58, "cache");
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v59.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        uint64_t v42 = std::string::append(&v59, ".log");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        *(void *)&v75.st_uid = *((void *)&v42->__r_.__value_.__l + 2);
        *(_OWORD *)&v75.st_dev = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v44 = &v60;
        }
        else {
          uint64_t v44 = (std::string *)v60.__r_.__value_.__r.__words[0];
        }
        if ((v75.st_gid & 0x80000000) == 0) {
          uint64_t v45 = &v75;
        }
        else {
          uint64_t v45 = *(stat **)&v75.st_dev;
        }
        sub_190715964((const char *)v44, (const char *)v45);
        if ((v75.st_gid & 0x80000000) == 0) {
          uint64_t v46 = &v75;
        }
        else {
          uint64_t v46 = *(stat **)&v75.st_dev;
        }
        sub_190715814((const char *)v46);
        if (SHIBYTE(v75.st_gid) < 0) {
          operator delete(*(void **)&v75.st_dev);
        }
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62) < 0) {
        operator delete(v61[0]);
      }
    }
  }
  else
  {
    BOOL v63 = 0;
  }
  sub_19086B494((uint64_t)&v59);
  uint64_t v47 = std::string::append(&v59, "/");
  long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v48;
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  uint64_t v49 = std::string::append(&v60, "com.apple.timed");
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  *(void *)&v75.st_uid = *((void *)&v49->__r_.__value_.__l + 2);
  *(_OWORD *)&v75.st_dev = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  uint64_t v51 = std::string::append((std::string *)&v75, ".plist");
  long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  int64_t v62 = v51->__r_.__value_.__r.__words[2];
  *(_OWORD *)char v61 = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v75.st_gid) < 0) {
    operator delete(*(void **)&v75.st_dev);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (v62 >= 0) {
    uint64_t v53 = v61;
  }
  else {
    uint64_t v53 = (void **)v61[0];
  }
  if (stat((const char *)v53, &v75)) {
    goto LABEL_137;
  }
  sub_19086B390((uint64_t)&v60);
  sub_1906D5C70(&v59, "com.apple.timed");
  sub_1906D5C70(&v58, ".plist.log");
  sub_19086B854((const void **)&v60.__r_.__value_.__l.__data_, (uint64_t)&v59, (uint64_t)&v58, v4, (std::string *)&v75);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v59.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v60.__r_.__value_.__l.__data_);
  }
  if (v62 >= 0) {
    uint64_t v54 = v61;
  }
  else {
    uint64_t v54 = (void **)v61[0];
  }
  if ((v75.st_gid & 0x80000000) == 0) {
    uint64_t v55 = &v75;
  }
  else {
    uint64_t v55 = *(stat **)&v75.st_dev;
  }
  if (sub_190715964((const char *)v54, (const char *)v55) == 1) {
    syslog(5, "%s,%s,could not copy %s log\n", "WARNING", "CLLog", "com.apple.timed");
  }
  if ((SHIBYTE(v75.st_gid) & 0x80000000) == 0)
  {
LABEL_137:
    if (v8) {
      goto LABEL_139;
    }
    goto LABEL_138;
  }
  operator delete(*(void **)&v75.st_dev);
  if ((v8 & 1) == 0) {
LABEL_138:
  }
    syslog(5, "%s,%s,could not dump log file\n", "WARNING", "CLLog");
LABEL_139:
  if (SHIBYTE(v62) < 0) {
    operator delete(v61[0]);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete((void *)__dst);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_1907DC048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (*(char *)(v63 - 233) < 0) {
    operator delete(*(void **)(v63 - 256));
  }
  sub_1906EB9DC(v63 - 232);
  _Unwind_Resume(a1);
}

uint64_t sub_1907DC2E4(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  sub_1906D5C70(&v31, a2);
  if (*(char *)(a1 + 63) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v5 = *(void *)(a1 + 48);
  }
  long long v6 = &v30;
  sub_190796A90((uint64_t)&v30, v5 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v6 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(a1 + 63) >= 0) {
      long long v7 = (const void *)(a1 + 40);
    }
    else {
      long long v7 = *(const void **)(a1 + 40);
    }
    memmove(v6, v7, v5);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 95;
  if (sub_19086BBC8(v4, (char **)&v31, (char *)&v30))
  {
    sub_1906D5C70(&v29, a2);
    sub_1906D5C70(v27, ".log.bz2");
    if (sub_19086BCA0(v4, (void **)&v29.__r_.__value_.__l.__data_, (char *)v27))
    {
      int v8 = 1;
    }
    else
    {
      sub_1906D5C70(v25, a2);
      sub_1906D5C70(__p, ".log");
      int v8 = sub_19086BCA0(v4, v25, (char *)__p);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v8 = 0;
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v32) < 0)
  {
    operator delete((void *)v31);
    if (!v8) {
      return 1;
    }
  }
  else if (!v8)
  {
    return 1;
  }
  sub_19086B674((uint64_t)&v29);
  std::string::size_type v9 = std::string::append(&v29, "/");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  unsigned __int8 v11 = std::string::append(&v30, a2);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v32 = v11->__r_.__value_.__r.__words[2];
  long long v31 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 87) >= 0) {
    size_t v13 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    size_t v13 = *(void *)(a1 + 72);
  }
  char v14 = &v29;
  sub_190796A90((uint64_t)&v29, v13 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    char v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if (*(char *)(a1 + 87) >= 0) {
      uint64_t v15 = (const void *)(a1 + 64);
    }
    else {
      uint64_t v15 = *(const void **)(a1 + 64);
    }
    memmove(v14, v15, v13);
  }
  *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
  char v16 = std::string::append(&v29, a2);
  std::string v30 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  int v18 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  uint64_t v19 = (void *)v30.__r_.__value_.__r.__words[0];
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v20 = (const std::__fs::filesystem::path *)&v30;
  }
  else {
    long long v20 = (const std::__fs::filesystem::path *)v30.__r_.__value_.__r.__words[0];
  }
  if (v32 >= 0) {
    uint64_t v21 = (const std::__fs::filesystem::path *)&v31;
  }
  else {
    uint64_t v21 = (const std::__fs::filesystem::path *)v31;
  }
  rename(v20, v21, v17);
  sub_190715814((const char *)v21);
  if (v18 < 0) {
    operator delete(v19);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  return 1;
}

void sub_1907DC5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v35 - 57) < 0) {
    operator delete(*(void **)(v35 - 80));
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1907DC6B4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1906C00FC((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  BOOL result = (unsigned char *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0) {
    return sub_1906C00FC(result, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  long long v6 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)BOOL result = v6;
  return result;
}

void sub_1907DC73C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907DC758(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

os_log_t sub_1907DC7B0()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

void sub_1907DC7E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

FILE **sub_1907DC81C(uint64_t a1)
{
  os_log_t result = *(FILE ***)(a1 + 24);
  if (result)
  {
    sub_1907E0C34(result);
    JUMPOUT(0x192FCEAD0);
  }
  return result;
}

uint64_t sub_1907DC864(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE003640)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

FILE **sub_1907DC8A8(FILE ***a1)
{
  os_log_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1907E0C34(result);
    JUMPOUT(0x192FCEAD0);
  }
  return result;
}

uint64_t sub_1907DC8F8(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v2 setDateFormat:@"yy-MM-dd"];

  return [v2 stringFromDate:a1];
}

uint64_t sub_1907DC950(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v2 setDateFormat:@"HH-mm-ss"];

  return [v2 stringFromDate:a1];
}

void sub_1907DC9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v63[152] = *MEMORY[0x1E4F143B8];
  sub_1906D54D4();
  if (sub_190795DAC() && *(unsigned char *)a1)
  {
    if (a4) {
      goto LABEL_4;
    }
    sub_1906D54D4();
    if (sub_190795DAC() && *(unsigned char *)a1)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      buf[0] = 0;
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:isDirectory:", v14, buf))
      {
LABEL_20:
        uint64_t v17 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceNow:-604800.0];
        sub_1906D54D4();
        if (sub_190795DAC())
        {
          if (*(unsigned char *)a1)
          {
            int v18 = (void *)[MEMORY[0x1E4F28CB8] defaultManager];
            uint64_t v19 = (void *)[v18 enumeratorAtPath:*(void *)(a1 + 8)];
            for (uint64_t i = [v19 nextObject]; i; uint64_t i = objc_msgSend(v19, "nextObject"))
            {
              uint64_t v53 = 0;
              uint64_t v21 = [NSString stringWithFormat:@"%@/%@", *(void *)(a1 + 8), i];
              long long v22 = objc_msgSend((id)objc_msgSend(v18, "attributesOfItemAtPath:error:", v21, 0), "fileCreationDate");
              if ([v22 compare:v17] == -1)
              {
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
                }
                uint64_t v23 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
                {
                  [v22 timeIntervalSinceReferenceDate];
                  *(_DWORD *)long long buf = 138543618;
                  *(void *)&uint8_t buf[4] = v21;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  uint64_t v61 = v24;
                  _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_INFO, "CLTSP,Recorder,old file deleted,%{public}@,creationDate,%{public}.2lf", buf, 0x16u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
                  }
                  [v22 timeIntervalSinceReferenceDate];
                  *(_DWORD *)long long __p = 138543618;
                  *(void *)&__p[4] = v21;
                  __int16 v57 = 2050;
                  uint64_t v58 = v25;
                  char v26 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRecorder::removeFilesOlderThanThisDate(NSDate * _Nonnull)", "CoreLocation: %s\n", v26);
                  if (v26 != buf) {
                    free(v26);
                  }
                }
                objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "removeItemAtPath:error:", v21, &v53);
              }
            }
          }
        }
LABEL_4:
        int v8 = (void *)sub_1907DC8F8(a3);
        std::string::size_type v9 = (void *)sub_1907DC950(a3);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
        }
        long long v10 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = [v8 UTF8String];
          uint64_t v12 = [v9 UTF8String];
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = v11;
          *(_WORD *)&unsigned char buf[12] = 2082;
          uint64_t v61 = v12;
          _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_INFO, "CLTSP,Recorder,recording data for date,%{public}s,time,%{public}s", buf, 0x16u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
          }
          uint64_t v44 = [v8 UTF8String];
          uint64_t v45 = [v9 UTF8String];
          *(_DWORD *)long long __p = 136446466;
          *(void *)&__p[4] = v44;
          __int16 v57 = 2082;
          uint64_t v58 = v45;
          uint64_t v46 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "NSString * _Nonnull CLTripSegmentRecorder::getFileName(NSDate * _Nonnull)", "CoreLocation: %s\n", v46);
          if (v46 != buf) {
            free(v46);
          }
        }
        if (*(unsigned char *)(a1 + 1)) {
          size_t v13 = (void *)[NSString stringWithFormat:@"%@/tripSegment_%@_%@.cltsp", *(void *)(a1 + 8), v8, v9];
        }
        else {
          size_t v13 = (void *)[NSString stringWithFormat:@"%@/tripSegment_%@.cltsp", *(void *)(a1 + 8), v8];
        }
        long long v27 = v13;
        sub_1906D5C70(__p, (char *)[v13 UTF8String]);
        buf[0] = 0;
        if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:isDirectory:", v27, buf) & 1) == 0)
        {
          uint64_t v28 = MEMORY[0x1E4FBA468] + 64;
          v63[0] = MEMORY[0x1E4FBA468] + 64;
          std::string v29 = (void *)MEMORY[0x1E4FBA400];
          uint64_t v30 = *(void *)(MEMORY[0x1E4FBA400] + 16);
          *(void *)long long buf = *(void *)(MEMORY[0x1E4FBA400] + 8);
          *(void *)&buf[*(void *)(*(void *)buf - 24)] = v30;
          long long v31 = (std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
          std::ios_base::init(v31, &buf[8]);
          uint64_t v32 = MEMORY[0x1E4FBA468] + 24;
          v31[1].__vftable = 0;
          v31[1].__fmtflags_ = -1;
          *(void *)long long buf = v32;
          v63[0] = v28;
          MEMORY[0x192FCE970](&buf[8]);
          if (!std::filebuf::open()) {
            std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&v62[*(void *)(*(void *)buf - 24)] | 4);
          }
          if (!std::filebuf::close()) {
            std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)&v62[*(void *)(*(void *)buf - 24)] | 4);
          }
          *(void *)long long buf = *v29;
          *(void *)&buf[*(void *)(*(void *)buf - 24)] = v29[3];
          MEMORY[0x192FCE980](&buf[8]);
          std::ostream::~ostream();
          MEMORY[0x192FCEA70](v63);
        }
        uint64_t v33 = (void *)MEMORY[0x192FCF260]();
        long long v34 = (void *)[MEMORY[0x1E4F28CB0] fileHandleForWritingAtPath:v27];
        if (!v34) {
          goto LABEL_58;
        }
        uint64_t v52 = 0;
        uint64_t v35 = (void *)[MEMORY[0x1E4F28DB0] archivedDataWithRootObject:a2 requiringSecureCoding:1 error:&v52];
        if ([v35 length])
        {
          [v34 seekToEndOfFile];
          [v34 writeData:objc_msgSend((id)objc_msgSend(NSString, "stringWithFormat:", @"cltspv1,%d,%d,AA", a4, objc_msgSend(v35, "length")), "dataUsingEncoding:", 4)];
          [v34 writeData:v35];
          [v34 closeFile];
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
          }
          long long v36 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
          {
            int v37 = [v35 length];
            *(_DWORD *)long long buf = 67240448;
            *(_DWORD *)&uint8_t buf[4] = a4;
            *(_WORD *)&uint8_t buf[8] = 1026;
            *(_DWORD *)&buf[10] = v37;
            _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_INFO, "CLTSP,Recorder,writeToFile,success,type,%{public}d,length,%{public}d", buf, 0xEu);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_58;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
          }
          int v38 = [v35 length];
          LODWORD(v53) = 67240448;
          HIDWORD(v53) = a4;
          __int16 v54 = 1026;
          int v55 = v38;
          long long v39 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRecorder::writeToFile(id _Nonnull, NSDate * _Nonnull, const CLTripSegmentRecorderLogEnum)", "CoreLocation: %s\n", v39);
        }
        else
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
          }
          uint64_t v40 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = a4;
            _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_INFO, "CLTSP,Recorder,writeToFile,failed as date length is 0,type,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_58;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
          }
          LODWORD(v53) = 67240192;
          HIDWORD(v53) = a4;
          long long v39 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRecorder::writeToFile(id _Nonnull, NSDate * _Nonnull, const CLTripSegmentRecorderLogEnum)", "CoreLocation: %s\n", v39);
        }
        if (v39 != buf) {
          free(v39);
        }
LABEL_58:
        if (v59 < 0) {
          operator delete(*(void **)__p);
        }
        return;
      }
      uint64_t v53 = 0;
      if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", *(void *)(a1 + 8), 1, 0, &v53))
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
        }
        uint64_t v15 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
        {
          uint64_t v16 = *(void *)(a1 + 8);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v16;
          _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_INFO, "CLTSP,Recorder,created directory at path,%{public}@", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
          }
          uint64_t v48 = *(void *)(a1 + 8);
          *(_DWORD *)long long __p = 138543362;
          *(void *)&__p[4] = v48;
          uint64_t v49 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRecorder::createDirectory()", "CoreLocation: %s\n", v49);
          if (v49 != buf) {
            free(v49);
          }
        }
        goto LABEL_20;
      }
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
      }
      long long v41 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v42 = *(void *)(a1 + 8);
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v42;
        *(_WORD *)&unsigned char buf[12] = 2114;
        uint64_t v61 = v53;
        _os_log_impl(&dword_1906B8000, v41, OS_LOG_TYPE_INFO, "CLTSP,Recorder,unable to create directory at path,%{public}@, error, %{public}@", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
        }
        uint64_t v50 = *(void *)(a1 + 8);
        *(_DWORD *)long long __p = 138543618;
        *(void *)&__p[4] = v50;
        __int16 v57 = 2114;
        uint64_t v58 = v53;
        uint64_t v51 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRecorder::createDirectory()", "CoreLocation: %s\n", v51);
        if (v51 != buf) {
          free(v51);
        }
      }
    }
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
    }
    long long v43 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 0;
      _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_ERROR, "CLTSP,Recorder,unable to write data of type,%{pubilc}d,as directory could not be created", buf, 8u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005C60);
      }
      *(void *)long long __p = 67109120;
      uint64_t v47 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLTripSegmentRecorder::writeToFile(id _Nonnull, NSDate * _Nonnull, const CLTripSegmentRecorderLogEnum)", "CoreLocation: %s\n", v47);
      if (v47 != buf) {
        free(v47);
      }
    }
  }
}

void sub_1907DD8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1907DD92C(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *a1 = *MEMORY[0x1E4FBA400];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x192FCE980](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x192FCEA70](a1 + 52);
  return a1;
}

os_log_t sub_1907DD9F8()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

void sub_1907DFBF4(_Unwind_Exception *a1)
{
}

id sub_1907E056C()
{
  v2[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *MEMORY[0x1E4F28370];
  v2[0] = *MEMORY[0x1E4F28358];
  id result = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v2 forKeys:&v1 count:1];
  qword_1EB272550 = (uint64_t)result;
  return result;
}

os_log_t sub_1907E05F8()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

char *sub_1907E0B48(char *a1, const __CFString *a2, char a3)
{
  uint64_t v4 = sub_190790FFC((uint64_t)a1, a2, a3, 0x1EE007460);
  *(void *)uint64_t v4 = &unk_1EE003870;
  if (*(unsigned char *)(v4 + 16)) {
    sub_190791930(a1, 1);
  }
  return a1;
}

void sub_1907E0BA8(_Unwind_Exception *a1)
{
  sub_190791860(v1);
  _Unwind_Resume(a1);
}

void sub_1907E0BC0(uint64_t a1)
{
  sub_190791860(a1);

  JUMPOUT(0x192FCEAD0);
}

BOOL sub_1907E0BFC(uint64_t a1, const __CFString *a2, const void *a3)
{
  sub_190793498(a1, a2, a3);

  return sub_1907917B8(a1);
}

FILE **sub_1907E0C34(FILE **a1)
{
  return a1;
}

uint64_t sub_1907E0C68(FILE **a1)
{
  uint64_t v2 = a1 + 4;
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  uint64_t v3 = *a1;
  if (*a1)
  {
    *a1 = 0;
    fclose(v3);
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    free(v4);
    a1[1] = 0;
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_1907E0F44((uint64_t)a1);
  (*(void (**)(void *))(*v2 + 24))(v2);
  return v5;
}

void sub_1907E0D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

FILE *sub_1907E0D48(FILE **a1)
{
  uint64_t v2 = (char *)(a1 + 4);
  (*(void (**)(FILE **))&a1[4]->_flags)(a1 + 4);
  uint64_t v3 = *a1;
  if (!*a1)
  {
    uint64_t v4 = (FILE *)malloc_type_malloc(*((int *)a1 + 4), 0x100004077774924uLL);
    a1[1] = v4;
    if (v4)
    {
      *a1 = funopen(a1, 0, (int (__cdecl *)(void *, const char *, int))sub_1907E0E5C, 0, (int (__cdecl *)(void *))sub_1907E0F40);
      sub_1907E0F44((uint64_t)a1);
    }
    uint64_t v3 = *a1;
  }
  (*(void (**)(char *))(*(void *)v2 + 24))(v2);
  return v3;
}

void sub_1907E0E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907E0E5C(uint64_t a1, const void *a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v6 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32);
  uint64_t v7 = *(void *)(v6 - 24);
  if (v7)
  {
    uint64_t v8 = *(int *)(a1 + 20);
    int v9 = *(_DWORD *)(a1 + 16) - v8;
    if (v9 >= (int)v3) {
      uint64_t v3 = v3;
    }
    else {
      uint64_t v3 = v9;
    }
    memcpy((void *)(v7 + v8), a2, (int)v3);
    int v10 = *(_DWORD *)(a1 + 16);
    int v11 = (*(_DWORD *)(a1 + 20) + (int)v3) % v10;
    if (*(_DWORD *)(a1 + 24) + (int)v3 < v10) {
      int v10 = *(_DWORD *)(a1 + 24) + v3;
    }
    *(_DWORD *)(a1 + 20) = v11;
    *(_DWORD *)(a1 + 24) = v10;
  }
  else
  {
    uint64_t v3 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v3;
}

uint64_t sub_1907E0F44(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32);
  *(void *)(v1 - 12) = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1);
}

uint64_t sub_1907E0FBC(uint64_t a1, FILE *a2)
{
  uint64_t v4 = a1 + 32;
  (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 16))(a1 + 32);
  uint64_t v5 = *(void *)(v4 - 24);
  if (v5)
  {
    if (*(void *)a1)
    {
      fflush(*(FILE **)a1);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    uint64_t v6 = *(unsigned int *)(a1 + 24);
    uint64_t v7 = *(int *)(a1 + 16);
    if ((int)v6 >= (int)v7)
    {
      uint64_t v8 = v7 + v5;
      int v9 = *(char *)(v8 - 1);
      *(unsigned char *)(v8 - 1) = 0;
      fputs((const char *)(*(void *)(a1 + 8) + *(int *)(a1 + 20)), a2);
      fputc(v9, a2);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    *(unsigned char *)(v5 + *(int *)(a1 + 20)) = 0;
    fputs(*(const char **)(a1 + 8), a2);
    sub_1907E0F44(a1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v6;
}

void sub_1907E10D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1907E1770(unint64_t a1)
{
  double v2 = *(double *)&qword_1E92A0160;
  if (*(double *)&qword_1E92A0160 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      uint32_t denom = info.denom;
      uint32_t numer = info.numer;
      do
      {
        uint32_t v5 = denom;
        uint32_t denom = numer % denom;
        uint32_t numer = v5;
      }
      while (denom);
    }
    else
    {
      uint32_t v5 = info.numer;
    }
    unsigned int v6 = 1000000000;
    uint32_t v7 = info.numer / v5;
    do
    {
      uint32_t v8 = v7;
      uint32_t v7 = v6;
      unsigned int v6 = v8 % v6;
    }
    while (v6);
    double v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_1E92A0160 = v2;
  }
  return v2 * (double)a1;
}

void sub_1907E1D94(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = objc_alloc_init(MEMORY[0x1E4F28CB8]);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint32_t v5 = objc_msgSend((id)objc_msgSend(v4, "contentsOfDirectoryAtPath:error:", objc_msgSend(NSString, "stringWithUTF8String:", a1), 0), "reverseObjectEnumerator", 0);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v11 != v8) {
        objc_enumerationMutation(v5);
      }
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(a2 + 16))(a2, [*(id *)(*((void *)&v10 + 1) + 8 * v9) UTF8String]))break; {
      if (v7 == ++v9)
      }
      {
        uint64_t v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v7) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

uint64_t sub_1907E258C(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 32) + 32) = a2;
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_handleDiagnosticUpdate);
}

uint64_t sub_1907E259C(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 32) + 32) = a2;
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_handleDiagnosticUpdate);
}

uint64_t sub_1907E25AC(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 32) + 32) = a2;
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_handleDiagnosticUpdate);
}

uint64_t sub_1907E25BC(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 32) + 40) = a2;
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_handleDiagnosticUpdate);
}

id sub_1907E2FE0(void *a1, uint64_t a2, void *a3)
{
  v31.receiver = a1;
  v31.super_class = (Class)&off_1EE03A0E8;
  id v4 = objc_msgSendSuper2(&v31, sel_init);
  if (v4)
  {
    double v29 = 0.0;
    double v30 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
    [a3 center];
    double v6 = v5;
    [a3 center];
    double v8 = v7;
    [a3 radius];
    objc_msgSend(a3, "center", sub_190716C08(&v30, &v26, v6, v8, 0.0, v9));
    double v11 = v10;
    [a3 center];
    double v13 = v12;
    [a3 radius];
    objc_msgSend(a3, "center", sub_190716C08(&v26, &v28, v11, v13, 90.0, v14));
    double v16 = v15;
    [a3 center];
    double v18 = v17;
    [a3 radius];
    objc_msgSend(a3, "center", sub_190716C08(&v29, &v26, v16, v18, 180.0, v19));
    double v21 = v20;
    [a3 center];
    double v23 = v22;
    [a3 radius];
    sub_190716C08(&v26, &v27, v21, v23, 270.0, v24);
    [v4 setSouthLat:v29];
    [v4 setWestLng:v27];
    [v4 setNorthLat:v30];
    [v4 setEastLng:v28];
  }
  return v4;
}

uint64_t sub_1907E31E4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyNoResult];
}

void sub_1907E3274(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isGeocoding] & 1) == 0)
  {
    double v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 8);
    if (v2) {
      id v3 = v2;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 8) = [*(id *)(a1 + 56) copy];
    id v4 = *(void **)(a1 + 40);
    if (v4 && [v4 count])
    {
      double v5 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F64710], "sharedService"), "defaultTraits");
      double v6 = v5;
      if (*(void *)(a1 + 48))
      {
        [v5 clearDeviceDisplayLanguages];
        uint64_t v7 = objc_msgSend(MEMORY[0x1E4F1CA20], "canonicalLanguageIdentifierFromString:", objc_msgSend(*(id *)(a1 + 48), "localeIdentifier"));
        if (v7) {
          [v6 addDeviceDisplayLanguage:v7];
        }
      }
      double v8 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F64710], "sharedService"), "_cl_ticketForForwardGeocodeAddressDictionary:maxResults:traits:", *(void *)(a1 + 40), 5, v6);
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 16) = v8;
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 3221225472;
      v11[2] = sub_1907E3428;
      v11[3] = &unk_1E5697EB8;
      v11[4] = *(void *)(a1 + 32);
      v11[5] = v8;
      [v8 submitWithRefinedHandler:v11 networkActivity:0];
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 32);
      double v10 = *(NSObject **)(*(void *)(v9 + 8) + 24);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1907E3420;
      block[3] = &unk_1E5696BF0;
      block[4] = v9;
      dispatch_async(v10, block);
    }
  }
}

uint64_t sub_1907E3420(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyNoResult];
}

uint64_t sub_1907E3428(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v5, sel__ticket_didReturnError_);
  }
  else
  {
    if (![a2 count]) {
      [a3 count];
    }
    uint64_t v7 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v7, sel__ticket_didReturnGeoMapItems_);
  }
}

void sub_1907E3624(uint64_t a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unint64_t v2 = 0;
  }
  else {
    unint64_t v2 = *(void *)(a1 + 32);
  }
  if ([*(id *)(a1 + 40) isGeocoding]) {
    return;
  }
  id v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 8);
  if (v3) {
    id v4 = v3;
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8) = [*(id *)(a1 + 64) copy];
  uint64_t v5 = *(void **)(a1 + 48);
  if (!v5 || ![v5 length]) {
    goto LABEL_17;
  }
  if (!v2) {
    goto LABEL_15;
  }
  [(id)v2 center];
  if (v7 < -180.0 || v7 > 180.0 || v6 > 90.0 || v6 < -90.0)
  {
LABEL_17:
    uint64_t v9 = *(void *)(a1 + 40);
    double v10 = *(NSObject **)(*(void *)(v9 + 8) + 24);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1907E399C;
    block[3] = &unk_1E5696BF0;
    block[4] = v9;
    dispatch_async(v10, block);
    return;
  }
  unint64_t v2 = (unint64_t)(id)[objc_alloc(MEMORY[0x1E4F64700]) _initWithCircularRegion:v2];
LABEL_15:
  getpid();
  double v15 = "com.apple.locationd.registration";
  if (sandbox_check()) {
    goto LABEL_16;
  }
  long long v33 = 0u;
  memset(v34, 0, 28);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  unsigned long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  if (!CLClientRetrieveLocationWithDynamicAccuracyReductionAndAlteredAccessoryLocations(0, 0, 0, (uint64_t)&v26))
  {
LABEL_16:
    unint64_t v8 = 0;
  }
  else
  {
    long long v23 = v32;
    long long v24 = v33;
    v25[0] = v34[0];
    *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v34 + 12);
    long long v19 = v28;
    long long v20 = v29;
    long long v17 = v26;
    unsigned long long v18 = v27;
    long long v21 = v30;
    long long v22 = v31;
    if (COERCE_DOUBLE(v27 >> 32) < 1414.21356)
    {
      sub_190715718((double *)((char *)&v17 + 4), (double *)((unint64_t)&v17 | 0xC), 1000.0);
      *(void *)((char *)&v18 + 4) = 0x409618DAB0184066;
    }
    unint64_t v8 = (unint64_t)(id)objc_msgSend(objc_alloc(MEMORY[0x1E4F64660]), "_initWithCLClientLocation:", &v17, "com.apple.locationd.registration");
  }
  double v11 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F64710], "sharedService", v15), "defaultTraits");
  double v12 = v11;
  if (*(void *)(a1 + 56))
  {
    [v11 clearDeviceDisplayLanguages];
    uint64_t v13 = objc_msgSend(MEMORY[0x1E4F1CA20], "canonicalLanguageIdentifierFromString:", objc_msgSend(*(id *)(a1 + 56), "localeIdentifier"));
    if (v13) {
      [v12 addDeviceDisplayLanguage:v13];
    }
  }
  if (v8 | v2)
  {
    if (v8) {
      [v12 setDeviceLocation:v8];
    }
    if (v2) {
      [v12 setMapRegion:v2];
    }
  }
  double v14 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F64710], "sharedService"), "_cl_ticketForForwardGeocodeString:maxResults:traits:", *(void *)(a1 + 48), 5, v12);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 16) = v14;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = sub_1907E39A4;
  v16[3] = &unk_1E5697EB8;
  v16[4] = *(void *)(a1 + 40);
  v16[5] = v14;
  [v14 submitWithRefinedHandler:v16 networkActivity:0];
}

uint64_t sub_1907E399C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyNoResult];
}

uint64_t sub_1907E39A4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v5, sel__ticket_didReturnError_);
  }
  else
  {
    if (![a2 count]) {
      [a3 count];
    }
    uint64_t v7 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v7, sel__ticket_didReturnGeoMapItems_);
  }
}

uint64_t sub_1907E3AAC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    unint64_t v2 = (void *)[MEMORY[0x1E4F64710] sharedService];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    v6[2] = sub_1907E3B90;
    v6[3] = &unk_1E5697F30;
    uint64_t v3 = *(void *)(a1 + 32);
    v6[4] = *(void *)(a1 + 40);
    return [v2 resolveMapItemLocallyFromHandle:v3 completionHandler:v6];
  }
  else
  {
    [MEMORY[0x1E4F28C58] errorWithDomain:@"kCLErrorDomain" code:8 userInfo:0];
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return v5();
  }
}

void sub_1907E3B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1907E3C0C;
  block[3] = &unk_1E5696CB8;
  uint64_t v3 = *(void *)(a1 + 32);
  void block[5] = a3;
  block[6] = v3;
  block[4] = a2;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t sub_1907E3C0C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1907E3C9C(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) isGeocoding];
  if (result)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 16) cancel];

    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 16) = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v3, sel__notifyCancel);
  }
  return result;
}

uint64_t sub_1907E3D90(uint64_t result)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void **)(*(void *)(*(void *)(result + 32) + 8) + 16);
  if (v1 == *(void **)(result + 40))
  {
    uint64_t v2 = result;

    *(void *)(*(void *)(*(void *)(v2 + 32) + 8) + 16) = 0;
    if (*(void *)(v2 + 48))
    {
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE005CC0);
      }
      uint64_t v3 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = [*(id *)(v2 + 48) description];
        *(_DWORD *)long long buf = 138477827;
        uint64_t v7 = v4;
        _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "#Warning Geocode error: %{private}@", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE005CC0);
        }
        [*(id *)(v2 + 48) description];
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "-[CLGeocoder _ticket:didReturnError:partialResultForLocation:]_block_invoke", "CoreLocation: %s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
    if (objc_msgSend((id)objc_msgSend(*(id *)(v2 + 48), "domain"), "isEqual:", GEOErrorDomain())
      && [*(id *)(v2 + 48) code] == -8)
    {
      return [*(id *)(v2 + 32) _notifyNoResult];
    }
    else
    {
      return [*(id *)(v2 + 32) _notifyError:*(void *)(v2 + 48)];
    }
  }
  return result;
}

BOOL sub_1907E4320(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((*(_DWORD *)(a1 + 20) & 0xFFFFFFFE) != 8) {
      return (*(_DWORD *)(a1 + 24) & 0xFFFFFFFE) == 6;
    }
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    uint64_t v2 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_ERROR, "CLTSP,isRestrictedRoadForWiFiFix,null road", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL isRestrictedRoadForWiFiFix(CLMapRoadPtr)", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  return 1;
}

uint64_t sub_1907E44D4(uint64_t a1, std::__shared_weak_count *a2, char a3)
{
  if (a3) {
    return 1;
  }
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v3 = !sub_1907E4320(a1);
  if (a2) {
    sub_1906BFE48(a2);
  }
  return v3;
}

void sub_1907E4528(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907E4540(char a1, uint64_t a2, uint64_t **a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *a3;
  if (!*a3) {
    return 0;
  }
  uint64_t result = *v4;
  if (!*v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a2 + 88);
  if (v7 != 11 && v7 != 4) {
    return 1;
  }
  BOOL v9 = *(_DWORD *)(result + 20) < 3u || (*(_DWORD *)(result + 24) - 1) < 2;
  double v10 = *(double *)(a2 + 24);
  BOOL v11 = v10 < 240.0 && v9;
  int v12 = v10 < 80.0 || v11;
  uint64_t v13 = (std::__shared_weak_count *)v4[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = sub_1907E44D4(result, v13, a1);
  if (v13) {
    sub_1906BFE48(v13);
  }
  if (!v12) {
    return 0;
  }
  int v15 = *((double *)*a3 + 11) < 75.0 || v9;
  return v14 & v15;
}

void sub_1907E4640(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907E4658(uint64_t result, void **a2, void **a3)
{
  if (result)
  {
    BOOL v3 = *(void **)result;
    if (*(void *)result) {
      BOOL v4 = a2 == a3;
    }
    else {
      BOOL v4 = 1;
    }
    if (v4)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        uint64_t v5 = *a2;
        if (*a2)
        {
          if (*v3 == *v5 && v3[1] == v5[1]) {
            break;
          }
        }
        a2 += 2;
        if (a2 == a3) {
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_1907E46B0(uint64_t **a1, unint64_t ****a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    memset(v31, 0, sizeof(v31));
    long long v28 = 0;
    long long v29 = 0;
    uint64_t v30 = 0;
    uint64_t v11 = *a3;
    uint64_t v13 = *v5;
    int v12 = (std::__shared_weak_count *)v5[1];
    uint64_t v26 = v13;
    unsigned long long v27 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v14 = sub_190746080(v11, &v26, v31, (uint64_t *)&v28, 0, 200.0);
    if (v27) {
      sub_1906BFE48(v27);
    }
    if ((v14 & 1) != 0 && v28 != v29)
    {
      long long v23 = 0;
      long long v24 = 0;
      uint64_t v25 = 0;
      if (sub_1907451AC(*a3, (uint64_t *)v28, (uint64_t *)&v23, 0)) {
        sub_1907ED400((uint64_t *)&v28, v29, (uint64_t *)v23, v24, (v24 - (char *)v23) >> 4);
      }
      int v15 = v28;
      for (uint64_t i = v29; v15 != i; v15 += 2)
      {
        long long v17 = *v15;
        if (*v15)
        {
          unsigned long long v18 = (void *)**a1;
          if (*v17 != *v18 || v17[1] != v18[1])
          {
            long long v19 = *a2;
            long long v20 = a2[1];
            while (v19 != v20)
            {
              long long v21 = *v19;
              if (*v19)
              {
                if (*v21)
                {
                  if (!sub_19074BAD4((uint64_t)a5, *v21))
                  {
                    long long v22 = **v19;
                    if (*v22 == *(void *)*v15 && v22[1] == *((void *)*v15 + 1))
                    {
                      long long v32 = **v19;
                      *((unsigned char *)sub_19074E748(a5, v22, (uint64_t)&unk_1908825E8, (_OWORD **)&v32) + 48) = 1;
                      sub_190745090(a4, (long long *)v19);
                    }
                  }
                }
              }
              v19 += 2;
            }
          }
        }
      }
      long long v33 = &v23;
      sub_1906C6BF0((void ***)&v33);
    }
    long long v23 = (void **)&v28;
    sub_1906C6BF0(&v23);
    long long v28 = (void **)v31;
    sub_1906C6BF0(&v28);
  }
}

void sub_1907E48B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 88) = &a9;
  sub_1906C6BF0((void ***)(v17 - 88));
  a9 = &a14;
  sub_1906C6BF0((void ***)&a9);
  a14 = (void **)&a17;
  sub_1906C6BF0(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1907E4910(void *a1, void *a2)
{
  if (a1 == a2)
  {
    char v15 = 0;
  }
  else
  {
    BOOL v3 = a1;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
    char v7 = 1;
    char v8 = 1;
    char v9 = 1;
    float64x2_t v17 = v6;
    do
    {
      uint64_t v10 = *v3;
      if (*v3)
      {
        BOOL v11 = *(double *)(v10 + 48) <= 2.22;
        BOOL v12 = *(double *)(v10 + 40) >= 179.0;
        if (v4)
        {
          uint64_t v13 = v5;
          uint64_t v10 = v4;
        }
        else
        {
          uint64_t v13 = (std::__shared_weak_count *)v3[1];
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v5)
          {
            sub_1906BFE48(v5);
            float64x2_t v6 = v17;
          }
        }
        v7 &= v11;
        int32x2_t v14 = vmovn_s64(vcgtq_f64(v6, vabdq_f64(*(float64x2_t *)(*v3 + 8), *(float64x2_t *)(v10 + 8))));
        v9 &= v12;
        v8 &= vand_s8((int8x8_t)v14, (int8x8_t)vdup_lane_s32(v14, 1)).u8[0];
        uint64_t v5 = v13;
        uint64_t v4 = v10;
      }
      v3 += 2;
    }
    while (v3 != a2);
    char v15 = v7 | v8 | v9;
    if (v5) {
      sub_1906BFE48(v5);
    }
  }
  return v15 & 1;
}

char *sub_1907E4A54(char *result, double a2)
{
  uint64_t v2 = result;
  double v12 = a2;
  int v3 = *((_DWORD *)result + 6);
  if (v3)
  {
    double v4 = *((double *)result + 1);
  }
  else
  {
    *((double *)result + 1) = a2;
    *((double *)result + 2) = a2;
    double v4 = a2;
  }
  double v5 = fabs(a2);
  if (v5 > fabs(v4)) {
    *((double *)result + 1) = a2;
  }
  if (v5 < fabs(*((double *)result + 2))) {
    *((double *)result + 2) = a2;
  }
  unsigned int v6 = v3 + 1;
  *((_DWORD *)result + 6) = v6;
  double v7 = *((double *)result + 4);
  double v8 = a2 - v7;
  double v9 = v7 + (a2 - v7) / (double)v6;
  double v10 = *((double *)result + 5) + (a2 - v9) * v8;
  *((double *)result + 4) = v9;
  *((double *)result + 5) = v10;
  *((double *)result + 6) = a2 * a2 / (double)v6 + *((double *)result + 6) - *((double *)result + 6) / (double)v6;
  if (*(int *)result >= 1)
  {
    uint64_t result = sub_1907ECCAC((uint64_t)(result + 56), *((char **)result + 7), (char *)&v12);
    uint64_t v11 = *((void *)v2 + 8);
    if (*(int *)v2 < (unint64_t)((v11 - *((void *)v2 + 7)) >> 3)) {
      *((void *)v2 + 8) = v11 - 8;
    }
  }
  return result;
}

void sub_1907E4B44(uint64_t *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v30 = (uint64_t *)v31;
  uint64_t v3 = v1 - v2;
  if (v1 != v2)
  {
    uint64_t v29 = v1 - v2;
    double v5 = &dword_1906B8000;
    unsigned int v6 = "CLTSP,%{public}.1lf,removeDuplicateSnapsOnSameRoad,invalid snap pointer";
    double v7 = -1.0;
    while (1)
    {
      uint64_t v8 = *(void *)v2;
      double v9 = *(std::__shared_weak_count **)(v2 + 8);
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v8)
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        float64x2_t v17 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134349056;
          *(double *)&uint8_t buf[4] = v7;
          _os_log_impl(v5, v17, OS_LOG_TYPE_ERROR, v6, buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0))
        {
LABEL_30:
          v2 += 16;
          if (!v9) {
            goto LABEL_32;
          }
LABEL_31:
          sub_1906BFE48(v9);
          goto LABEL_32;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 == -1)
        {
LABEL_41:
          *(_DWORD *)long long v32 = 134349056;
          *(double *)&v32[4] = v7;
          long long v24 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLTripSegmentRouteBuilder::removeDuplicateSnapsOnSameRoad(std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v24);
          if (v24 != buf) {
            free(v24);
          }
          goto LABEL_30;
        }
LABEL_43:
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        goto LABEL_41;
      }
      double v7 = *(double *)(v8 + 16);
      double v10 = *(_OWORD **)v8;
      if (!v10)
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        unsigned long long v18 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134349056;
          *(double *)&uint8_t buf[4] = v7;
          _os_log_impl(v5, v18, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,removeDuplicateSnapsOnSameRoad,invalid road in snap pointer", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_30;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 == -1) {
          goto LABEL_41;
        }
        goto LABEL_43;
      }
      *(_OWORD *)long long buf = *v10;
      uint64_t v11 = v31[0];
      if (!v31[0])
      {
LABEL_17:
        *(void *)long long v32 = buf;
        *((unsigned char *)sub_19074E748(&v30, (unint64_t *)buf, (uint64_t)&unk_1908825E8, (_OWORD **)v32) + 48) = 1;
        goto LABEL_30;
      }
      while (1)
      {
        unint64_t v12 = v11[4];
        unint64_t v13 = v11[5];
        BOOL v14 = *(void *)&buf[8] < v13;
        if (*(void *)buf != v12) {
          BOOL v14 = *(void *)buf < v12;
        }
        if (v14) {
          goto LABEL_16;
        }
        BOOL v15 = v13 < *(void *)&buf[8];
        int v16 = *(void *)buf == v12 ? v15 : v12 < *(void *)buf;
        if (v16 != 1) {
          break;
        }
        ++v11;
LABEL_16:
        uint64_t v11 = (void *)*v11;
        if (!v11) {
          goto LABEL_17;
        }
      }
      long long v19 = v6;
      long long v20 = v5;
      uint64_t v21 = sub_1907ED5AC((long long *)(v2 + 16), (long long *)a1[1], v2);
      for (uint64_t i = a1[1]; i != v21; i -= 16)
      {
        long long v23 = *(std::__shared_weak_count **)(i - 8);
        if (v23) {
          sub_1906BFE48(v23);
        }
      }
      a1[1] = v21;
      double v5 = v20;
      unsigned int v6 = v19;
      if (v9) {
        goto LABEL_31;
      }
LABEL_32:
      if (v2 == a1[1])
      {
        uint64_t v1 = *a1;
        uint64_t v3 = v29;
        goto LABEL_45;
      }
    }
  }
  double v7 = -1.0;
  uint64_t v2 = v1;
LABEL_45:
  uint64_t v25 = v3 >> 4;
  uint64_t v26 = (v2 - v1) >> 4;
  if (v26 != v3 >> 4)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    unsigned long long v27 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349568;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v25;
      __int16 v38 = 2050;
      uint64_t v39 = v26;
      _os_log_impl(&dword_1906B8000, v27, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,removeDuplicateSnapsOnSameRoad,prevSize,%{public}lu,newSize,%{public}lu", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      *(_DWORD *)long long v32 = 134349568;
      *(double *)&v32[4] = v7;
      __int16 v33 = 2050;
      uint64_t v34 = v25;
      __int16 v35 = 2050;
      uint64_t v36 = v26;
      long long v28 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::removeDuplicateSnapsOnSameRoad(std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
  }
  sub_19074E308((uint64_t)&v30, v31[0]);
}

void sub_1907E510C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16)
{
}

void sub_1907E5148(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unsigned char *a5)
{
  double v7 = a3;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  while (v11 != v10)
  {
    v11 -= 24;
    *(void *)&long long buf = v11;
    sub_1906C6BF0((void ***)&buf);
  }
  v7[1] = v10;
  unint64_t v12 = *(void **)a2;
  unint64_t v13 = *(void **)(a2 + 8);
  if (*(void **)a2 == v13)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    BOOL v14 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_ERROR, "CLTSP,processLocationSeries,empty GPS section", (uint8_t *)&buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      LOWORD(p_buf) = 0;
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processLocationSeries(std::vector<CLGeoMapLocationPtr> &, std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL &)", "CoreLocation: %s\n", v15);
      if (v15 != (char *)&buf) {
        free(v15);
      }
    }
  }
  else
  {
    __int16 v76 = 0;
    uint64_t v77 = 0;
    unint64_t v78 = 0;
    uint64_t v73 = a1;
    if (sub_1907E4910(v12, v13))
    {
      uint64_t v77 = (void *)sub_1907ED610((uint64_t *)&v76, (void **)a2);
    }
    else
    {
      long long buf = 0uLL;
      uint64_t v97 = 0;
      float64x2_t v17 = *(long long **)a2;
      int v16 = *(long long **)(a2 + 8);
      if (*(long long **)a2 == v16)
      {
        p_long long buf = (std::__shared_weak_count *)&buf;
        sub_1906C6BF0((void ***)&p_buf);
      }
      else
      {
        unsigned long long v18 = a5;
        uint64_t v19 = 0;
        long long v20 = 0;
        while (1)
        {
          if (v19)
          {
            double v21 = *(double *)(v19 + 48);
            if ((v21 >= 2.22 || *(double *)(*(void *)v17 + 48) >= 2.22)
              && (v21 < 2.22 || *(double *)(*(void *)v17 + 48) < 2.22))
            {
              long long v22 = v77;
              if ((unint64_t)v77 >= v78)
              {
                uint64_t v23 = sub_1907ED610((uint64_t *)&v76, (void **)&buf);
              }
              else
              {
                *uint64_t v77 = 0;
                v22[1] = 0;
                v22[2] = 0;
                sub_1907ED788(v22, (void *)buf, *((void **)&buf + 1), (uint64_t)(*((void *)&buf + 1) - buf) >> 4);
                uint64_t v23 = (uint64_t)(v22 + 3);
              }
              uint64_t v77 = (void *)v23;
              uint64_t v25 = *((void *)&buf + 1);
              uint64_t v24 = buf;
              while (v25 != v24)
              {
                uint64_t v26 = *(std::__shared_weak_count **)(v25 - 8);
                if (v26) {
                  sub_1906BFE48(v26);
                }
                v25 -= 16;
              }
              *((void *)&buf + 1) = v24;
            }
          }
          sub_1907A19B0((uint64_t *)&buf, v17);
          uint64_t v19 = *(void *)v17;
          if (*(void *)v17 == *(void *)(*(void *)(a2 + 8) - 16)) {
            break;
          }
          unsigned long long v27 = (std::__shared_weak_count *)*((void *)v17 + 1);
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v20) {
            sub_1906BFE48(v20);
          }
          ++v17;
          long long v20 = v27;
          if (v17 == v16) {
            goto LABEL_44;
          }
        }
        long long v28 = v77;
        if ((unint64_t)v77 >= v78)
        {
          uint64_t v29 = sub_1907ED610((uint64_t *)&v76, (void **)&buf);
        }
        else
        {
          *uint64_t v77 = 0;
          v28[1] = 0;
          v28[2] = 0;
          sub_1907ED788(v28, (void *)buf, *((void **)&buf + 1), (uint64_t)(*((void *)&buf + 1) - buf) >> 4);
          uint64_t v29 = (uint64_t)(v28 + 3);
        }
        uint64_t v77 = (void *)v29;
        unsigned long long v27 = v20;
LABEL_44:
        p_long long buf = (std::__shared_weak_count *)&buf;
        sub_1906C6BF0((void ***)&p_buf);
        a5 = v18;
        if (v27) {
          sub_1906BFE48(v27);
        }
      }
    }
    uint64_t v30 = (uint64_t)v76;
    __int16 v74 = v77;
    if (v76 != v77)
    {
      uint64_t v72 = (double *)(a1 + 80);
      uint64_t v71 = a2;
      long long v69 = a5;
      uint64_t v70 = a4;
      stat v75 = v7;
      do
      {
        uint64_t v31 = *a4;
        long long v32 = (std::__shared_weak_count *)a4[1];
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        __int16 v33 = *(double ***)v30;
        uint64_t v34 = *(char **)(v30 + 8);
        if (*(char **)v30 == v34)
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          uint64_t v40 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_ERROR, "CLTSP,processLocationSeries,empty GPS section", (uint8_t *)&buf, 2u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
            }
            LOWORD(p_buf) = 0;
            long long v41 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSplitLocationSeries(std::vector<CLGeoMapLocationPtr> &, std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL)", "CoreLocation: %s\n", v41);
            if (v41 != (char *)&buf)
            {
              free(v41);
              if (!v32) {
                goto LABEL_148;
              }
              goto LABEL_147;
            }
          }
        }
        else
        {
          int v35 = *a5;
          if (v34 - (char *)v33 != 16)
          {
            int v36 = sub_1907E4910(v33, v34);
            __int16 v33 = *(double ***)v30;
            if (!v36)
            {
              uint64_t v42 = *(void *)*v33;
              p_long long buf = 0;
              unint64_t v91 = 0;
              uint64_t v92 = 0;
              uint64_t v88 = v31;
              __int16 v89 = v32;
              if (v32) {
                atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              BOOL v43 = sub_1907F1854((double ***)v30, (uint64_t *)&p_buf, &v88);
              if (v89) {
                sub_1906BFE48(v89);
              }
              if (v43)
              {
                int v44 = *(_DWORD *)(v31 + 152);
                if (v44 == 3) {
                  double v45 = 20.0;
                }
                else {
                  double v45 = 30.0;
                }
                if (v44 == 2) {
                  double v46 = 8.0;
                }
                else {
                  double v46 = v45;
                }
                *((void *)&buf + 1) = 0;
                uint64_t v97 = 0;
                *(void *)&long long buf = (char *)&buf + 8;
                unint64_t v87 = 0xBFF0000000000000;
                uint64_t v48 = (void **)&p_buf->__vftable;
                uint64_t v47 = v91;
                if (p_buf == v91)
                {
                  a4 = v70;
                  double v7 = v75;
                  a1 = v73;
                }
                else
                {
                  uint64_t v49 = 0;
                  uint64_t v50 = 0;
                  do
                  {
                    uint64_t v51 = (double *)*v48;
                    if (*v48)
                    {
                      if (v49)
                      {
                        uint64_t v52 = v50;
                        uint64_t v51 = v49;
                      }
                      else
                      {
                        uint64_t v52 = (std::__shared_weak_count *)v48[1];
                        if (v52) {
                          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        if (v50) {
                          sub_1906BFE48(v50);
                        }
                      }
                      uint64_t v53 = (double *)*v48;
                      if (v35 && v53 == (double *)p_buf->__vftable
                        || v53 == (double *)v91[-1].__shared_owners_
                        || ((unint64_t)((char *)v91 - (char *)p_buf) < 0x1E1 || vabdd_f64(v51[2], v53[2]) >= 5.0)
                        && sub_1906DA618(v72, v53[3], v53[4], v51[3], v51[4], 0.0) >= v46)
                      {
                        uint64_t v85 = 0;
                        int v86 = 0;
                        uint64_t v83 = 0;
                        uint64_t v84 = 0;
                        for (uint64_t i = *(double ***)v30; ; i += 2)
                        {
                          if (i == *(double ***)(v30 + 8))
                          {
                            long long v94 = 0uLL;
                            uint64_t v95 = 0;
                            goto LABEL_106;
                          }
                          uint64_t v55 = (uint64_t)*i;
                          if (*i)
                          {
                            if (vabdd_f64(*(double *)v55, *((double *)*v48 + 2)) < 0.001) {
                              break;
                            }
                          }
                        }
                        uint64_t v66 = (std::__shared_weak_count *)i[1];
                        if (v66) {
                          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v85 = v55;
                        int v86 = v66;
                        long long v94 = 0uLL;
                        uint64_t v95 = 0;
                        unint64_t v87 = *(void *)(v55 + 32);
                        v82[0] = v31;
                        v82[1] = (uint64_t)v32;
                        if (v32) {
                          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        sub_1907E5E3C(v73, v82, 1, &v85, &v83, (double *)&v87, (uint64_t *)&v94);
                        if (v32) {
                          sub_1906BFE48(v32);
                        }
LABEL_106:
                        uint64_t v79 = 0;
                        unint64_t v80 = 0;
                        uint64_t v81 = 0;
                        __int16 v57 = (long long *)*((void *)&v94 + 1);
                        for (uint64_t j = (long long *)v94; j != v57; ++j)
                        {
                          uint64_t v58 = *(void *)j;
                          if (*(void *)j)
                          {
                            char v59 = *(void **)v58;
                            if (*(void *)v58)
                            {
                              std::string v60 = *(void **)*v48;
                              if (v60)
                              {
                                if (*v59 != *v60 || v59[1] != v60[1])
                                {
                                  double v61 = sqrt(*(double *)(v58 + 72) * *(double *)(v58 + 72)+ *(double *)(v58 + 80) * *(double *)(v58 + 80));
                                  double v62 = sqrt(*((double *)*v48 + 9) * *((double *)*v48 + 9)+ *((double *)*v48 + 10) * *((double *)*v48 + 10))* 1.5;
                                  if (v61 < 35.0 || v61 < v62) {
                                    sub_190745090((uint64_t *)&v79, j);
                                  }
                                }
                              }
                            }
                          }
                        }
                        sub_190745090((uint64_t *)&v79, (long long *)v48);
                        if (v79 != v80)
                        {
                          sub_1907E4B44((uint64_t *)&v79);
                          unint64_t v64 = v75[1];
                          if (v64 >= v75[2])
                          {
                            uint64_t v65 = sub_1907ED92C(v75, (void **)&v79);
                          }
                          else
                          {
                            sub_1907ED8D8((uint64_t)v75, (void **)&v79);
                            uint64_t v65 = v64 + 24;
                          }
                          v75[1] = v65;
                        }
                        uint64_t v49 = (double *)*v48;
                        uint64_t v50 = (std::__shared_weak_count *)v48[1];
                        if (v50) {
                          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        if (v52) {
                          sub_1906BFE48(v52);
                        }
                        float64x2_t v93 = &v79;
                        sub_1906C6BF0((void ***)&v93);
                        uint64_t v79 = &v94;
                        sub_1906C6BF0((void ***)&v79);
                        if (v84) {
                          sub_1906BFE48(v84);
                        }
                        if (v86) {
                          sub_1906BFE48(v86);
                        }
                      }
                      else
                      {
                        uint64_t v50 = v52;
                        uint64_t v49 = v51;
                      }
                    }
                    v48 += 2;
                  }
                  while (v48 != (void **)v47);
                  sub_19074E308((uint64_t)&buf, *((void **)&buf + 1));
                  a5 = v69;
                  a4 = v70;
                  double v7 = v75;
                  a1 = v73;
                  if (v50) {
                    sub_1906BFE48(v50);
                  }
                }
              }
              else
              {
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                }
                int v67 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(buf) = 134349056;
                  *(void *)((char *)&buf + 4) = v42;
                  _os_log_impl(&dword_1906B8000, v67, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,processLocationSeries,unable to snap solution", (uint8_t *)&buf, 0xCu);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                  }
                  LODWORD(v94) = 134349056;
                  *(void *)((char *)&v94 + 4) = v42;
                  uint64_t v68 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSplitLocationSeries(std::vector<CLGeoMapLocationPtr> &, std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL)", "CoreLocation: %s\n", v68);
                  if (v68 != (char *)&buf) {
                    free(v68);
                  }
                }
              }
              sub_19074C1F8((uint64_t *)v30);
              *(void *)&long long buf = &p_buf;
              sub_1906C6BF0((void ***)&buf);
              a2 = v71;
              if (!v32) {
                goto LABEL_148;
              }
LABEL_147:
              sub_1906BFE48(v32);
              goto LABEL_148;
            }
          }
          long long buf = 0uLL;
          uint64_t v97 = 0;
          uint64_t v79 = (long long *)*((void *)*v33 + 4);
          p_long long buf = 0;
          unint64_t v91 = 0;
          *(void *)&long long v94 = v31;
          *((void *)&v94 + 1) = v32;
          if (v32)
          {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
            __int16 v33 = *(double ***)v30;
          }
          if (v35) {
            int v37 = (uint64_t *)v33;
          }
          else {
            int v37 = (uint64_t *)(*(void *)(v30 + 8) - 16);
          }
          sub_1907E5E3C(a1, (uint64_t *)&v94, 1, v37, (uint64_t *)&p_buf, (double *)&v79, (uint64_t *)&buf);
          if (v32) {
            sub_1906BFE48(v32);
          }
          if ((void)buf != *((void *)&buf + 1))
          {
            sub_1907E4B44((uint64_t *)&buf);
            unint64_t v38 = v7[1];
            if (v38 >= v7[2])
            {
              uint64_t v39 = sub_1907ED92C(v7, (void **)&buf);
            }
            else
            {
              sub_1907ED8D8((uint64_t)v7, (void **)&buf);
              uint64_t v39 = v38 + 24;
            }
            v7[1] = v39;
          }
          sub_19074C1F8((uint64_t *)v30);
          if (v91) {
            sub_1906BFE48(v91);
          }
          p_long long buf = (std::__shared_weak_count *)&buf;
          sub_1906C6BF0((void ***)&p_buf);
        }
        if (v32) {
          goto LABEL_147;
        }
LABEL_148:
        v30 += 24;
      }
      while ((void *)v30 != v74);
    }
    *a5 = 0;
    sub_19074C1F8((uint64_t *)a2);
    *(void *)&long long buf = &v76;
    sub_19074DEC0((void ***)&buf);
  }
}

void sub_1907E5CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void ***a45)
{
  a45 = &a37;
  sub_1906C6BF0((void ***)&a45);
  if (v45) {
    sub_1906BFE48(v45);
  }
  a37 = (void **)&a22;
  sub_19074DEC0(&a37);
  _Unwind_Resume(a1);
}

BOOL sub_1907E5E3C(uint64_t a1, uint64_t *a2, char a3, uint64_t *a4, uint64_t *a5, double *a6, uint64_t *a7)
{
  uint64_t v206 = *MEMORY[0x1E4F143B8];
  double v7 = (uint64_t *)*a4;
  if (*a4)
  {
    uint64_t v15 = *v7;
    if (!*a5)
    {
      uint64_t v16 = a4[1];
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      float64x2_t v17 = (std::__shared_weak_count *)a5[1];
      *a5 = (uint64_t)v7;
      a5[1] = v16;
      if (v17) {
        sub_1906BFE48(v17);
      }
    }
    uint64_t v177 = 0;
    unint64_t v178 = 0;
    uint64_t v179 = 0;
    unsigned long long v18 = (void *)*a4;
    double v19 = *(double *)(*a4 + 32);
    __int16 v153 = a7;
    if (v19 >= 0.0)
    {
      double v20 = *((double *)v18 + 5);
      if (v20 > 0.0)
      {
        double v21 = *((double *)v18 + 3);
        if (v19 >= 0.0)
        {
          double v22 = v21 + 10.0;
          if (v20 >= v21) {
            double v22 = *((double *)v18 + 5);
          }
          if (v22 <= 179.0) {
            double v20 = v22;
          }
          else {
            double v20 = 135.0;
          }
        }
        *((double *)v18 + 5) = v20;
        unsigned int v23 = *((_DWORD *)v18 + 22);
        BOOL v24 = v23 > 9;
        int v25 = (1 << v23) & 0x20A;
        if (v24 || v25 == 0)
        {
          double v20 = fmax(v20, 60.0);
          *((double *)v18 + 5) = v20;
        }
        if (!sub_190742960(*a2, *((_DWORD *)v18 + 24), (uint64_t *)&v177, 0, *(double *)v18, *((double *)v18 + 1), *((double *)v18 + 2), v19, v21, v20))
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          unsigned long long v27 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 134349056;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl(&dword_1906B8000, v27, OS_LOG_TYPE_INFO, "CLTSP,%{public}.2lf,generateWiFiSnapCandidates,unable to compute candidates", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
            }
            *(_DWORD *)__int16 v180 = 134349056;
            *(void *)&v180[4] = v15;
            uint64_t v138 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v138);
            if (v138 != buf) {
              free(v138);
            }
          }
        }
        unsigned long long v18 = (void *)*a4;
        long long v28 = v177;
        uint64_t v29 = v178;
        while (v28 != v29)
        {
          uint64_t v30 = *v28;
          if (*v28)
          {
            *((_DWORD *)v30 + 30) = *((_DWORD *)v18 + 22);
            v30[13] = (unint64_t *)v18[6];
          }
          v28 += 2;
        }
      }
    }
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    __int16 v174 = 0;
    uint64_t v31 = (double *)(a1 + 80);
    double v32 = sub_1906DA618(v31, *((double *)v18 + 1), *((double *)v18 + 2), *(double *)(*a5 + 8), *(double *)(*a5 + 16), 0.0);
    if (v32 > 70.0 || v32 > 50.0 && *(double *)(*a4 + 24) <= 30.0 || (double v33 = *a6, *a6 < 0.0))
    {
      double v33 = sub_190839D14(v31, *(double *)(*a5 + 8), *(double *)(*a5 + 16), *(double *)(*a4 + 8), *(double *)(*a4 + 16));
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      uint64_t v34 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
      {
        double v35 = *a6;
        *(_DWORD *)long long buf = 134349824;
        *(void *)&uint8_t buf[4] = v15;
        __int16 v194 = 2050;
        double v195 = v35;
        __int16 v196 = 2050;
        double v197 = v33;
        __int16 v198 = 2050;
        double v199 = v32;
        _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,processSparseLocations,distance,lastAzimuthChangedfrom,%{public}.1lf,to,%{public}.1lf,distance,%{public}.2lf", buf, 0x2Au);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        uint64_t v122 = *(void *)a6;
        *(_DWORD *)__int16 v180 = 134349824;
        *(void *)&v180[4] = v15;
        __int16 v181 = 2050;
        uint64_t v182 = v122;
        __int16 v183 = 2050;
        double v184 = v33;
        __int16 v185 = 2050;
        double v186 = v32;
        double v123 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v123);
        if (v123 != buf) {
          free(v123);
        }
      }
      uint64_t v37 = *a4;
      uint64_t v36 = a4[1];
      if (v36) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v38 = (std::__shared_weak_count *)a5[1];
      *a5 = v37;
      a5[1] = v36;
      if (v38) {
        sub_1906BFE48(v38);
      }
      *a6 = v33;
    }
    uint64_t v39 = *a4;
    if (v33 >= 0.0)
    {
      double v58 = *(double *)(v39 + 32);
      double v57 = *(double *)(v39 + 40);
      if (v57 <= 0.0 || v58 < 0.0) {
        goto LABEL_107;
      }
      double v59 = fmod(v58 - v33, 360.0);
      if (v59 < 0.0) {
        double v59 = v59 + 360.0;
      }
      if (v59 > 180.0) {
        double v59 = v59 + -360.0;
      }
      if (fabs(v59) > 5.0)
      {
LABEL_107:
        double v60 = *(double *)(v39 + 24);
        if (v58 >= 0.0)
        {
          double v61 = v60 + 10.0;
          if (v57 >= v60) {
            double v61 = v57;
          }
          if (v61 <= 179.0) {
            double v57 = v61;
          }
          else {
            double v57 = 135.0;
          }
        }
        double v62 = fmax(v57, 60.0);
        *(double *)(v39 + 40) = v62;
        if (!sub_190742960(*a2, *(_DWORD *)(v39 + 96), (uint64_t *)&v174, 0, *(double *)v39, *(double *)(v39 + 8), *(double *)(v39 + 16), *a6, v60, v62))
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          uint64_t v63 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 134349056;
            *(void *)&uint8_t buf[4] = v15;
            _os_log_impl(&dword_1906B8000, v63, OS_LOG_TYPE_INFO, "CLTSP,%{public}.2lf,generateWiFiSnapCandidates,unable to compute candidates based on alternate course", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
            }
            *(_DWORD *)__int16 v180 = 134349056;
            *(void *)&v180[4] = v15;
            BOOL v137 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v137);
            if (v137 != buf) {
              free(v137);
            }
          }
        }
        uint64_t v39 = *a4;
        unint64_t v64 = v174;
        uint64_t v65 = v175;
        while (v64 != (unint64_t ***)v65)
        {
          uint64_t v66 = *v64;
          if (*v64)
          {
            *((_DWORD *)v66 + 30) = *(_DWORD *)(v39 + 88);
            v66[13] = *(unint64_t **)(v39 + 48);
          }
          v64 += 2;
        }
      }
    }
    uint64_t v171 = 0;
    __int16 v172 = 0;
    uint64_t v173 = 0;
    if (!sub_190742960(*a2, *(_DWORD *)(v39 + 96), (uint64_t *)&v171, 0, *(double *)v39, *(double *)(v39 + 8), *(double *)(v39 + 16), -1.0, *(double *)(v39 + 24), -1.0))
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      uint64_t v40 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_INFO, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to compute candidates with just position", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        *(_DWORD *)__int16 v180 = 134349056;
        *(void *)&v180[4] = v15;
        uint64_t v125 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v125);
        if (v125 != buf) {
          free(v125);
        }
      }
    }
    long long v41 = v171;
    uint64_t v42 = v172;
    if (v171 != (unint64_t ***)v172)
    {
      uint64_t v43 = *a4;
      do
      {
        int v44 = *v41;
        if (*v41)
        {
          *((_DWORD *)v44 + 30) = *(_DWORD *)(v43 + 88);
          v44[13] = *(unint64_t **)(v43 + 48);
        }
        v41 += 2;
      }
      while (v41 != (unint64_t ***)v42);
    }
    long long v170 = 0uLL;
    if (v177 != v178 && (sub_190748690(*a2, (uint64_t)&v177, (uint64_t)&v170, -1.0) & 1) == 0)
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      double v45 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_1906B8000, v45, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to determine snap with highest score", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        *(_DWORD *)__int16 v180 = 134349056;
        *(void *)&v180[4] = v15;
        unint64_t v134 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v134);
        if (v134 != buf) {
          free(v134);
        }
      }
    }
    long long v169 = 0uLL;
    if (v174 != (unint64_t ***)v175 && (sub_190748690(*a2, (uint64_t)&v174, (uint64_t)&v169, -1.0) & 1) == 0)
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      double v46 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to determine snap with highest score for alternate course", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        *(_DWORD *)__int16 v180 = 134349056;
        *(void *)&v180[4] = v15;
        int v135 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v135);
        if (v135 != buf) {
          free(v135);
        }
      }
    }
    long long v168 = 0uLL;
    if (v171 != (unint64_t ***)v172
      && (sub_190748690(*a2, (uint64_t)&v171, (uint64_t)&v168, *(double *)(*a4 + 32)) & 1) == 0)
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      uint64_t v47 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl(&dword_1906B8000, v47, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to determine snap with highest score for position only", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        *(_DWORD *)__int16 v180 = 134349056;
        *(void *)&v180[4] = v15;
        uint64_t v136 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v136);
        if (v136 != buf) {
          free(v136);
        }
      }
    }
    long long v48 = v170;
    if (*((void *)&v170 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v170 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v49 = v169;
    if (*((void *)&v169 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v50 = v168;
    if (*((void *)&v168 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v168 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (!(void)v48 || (uint64_t v51 = *(void *)v48) == 0)
    {
      int v54 = 0;
      int v53 = 0;
      if (!(void)v49) {
        goto LABEL_132;
      }
LABEL_127:
      uint64_t v67 = *(void *)v49;
      if (*(void *)v49)
      {
        uint64_t v68 = *(std::__shared_weak_count **)(v49 + 8);
        if (v68) {
          atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v69 = (*(_DWORD *)(v67 + 20) & 0xFFFFFFFE) == 8 || (*(_DWORD *)(v67 + 24) & 0xFFFFFFFE) == 6;
        uint64_t v70 = v153;
        ++v54;
        v53 += v69;
        if (v68) {
          sub_1906BFE48(v68);
        }
LABEL_136:
        if ((void)v50)
        {
          uint64_t v71 = *(void *)v50;
          if (*(void *)v50)
          {
            uint64_t v72 = *(std::__shared_weak_count **)(v50 + 8);
            if (v72) {
              atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v73 = (*(_DWORD *)(v71 + 20) & 0xFFFFFFFE) == 8 || (*(_DWORD *)(v71 + 24) & 0xFFFFFFFE) == 6;
            ++v54;
            v53 += v73;
            if (v72) {
              sub_1906BFE48(v72);
            }
          }
        }
        if (*((void *)&v50 + 1)) {
          sub_1906BFE48(*((std::__shared_weak_count **)&v50 + 1));
        }
        if (*((void *)&v49 + 1)) {
          sub_1906BFE48(*((std::__shared_weak_count **)&v49 + 1));
        }
        if (*((void *)&v48 + 1)) {
          sub_1906BFE48(*((std::__shared_weak_count **)&v48 + 1));
        }
        v167[0] = 0;
        v167[1] = 0;
        uint64_t v165 = 0;
        uint64_t v166 = (uint64_t *)v167;
        uint64_t v163 = 0;
        __int16 v164 = 0;
        __int16 v74 = (uint64_t *)v170;
        if ((void)v170)
        {
          if (!*(void *)v170 || (a3 & 1) != 0)
          {
            if (!*(void *)v170) {
              goto LABEL_179;
            }
          }
          else
          {
            uint64_t v75 = *a4;
            __int16 v76 = (std::__shared_weak_count *)a4[1];
            if (v76) {
              atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v77 = (std::__shared_weak_count *)*((void *)&v170 + 1);
            v162[0] = v74;
            v162[1] = *((uint64_t **)&v170 + 1);
            if (*((void *)&v170 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v170 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            int v78 = sub_1907E4540(v54 == v53, v75, v162);
            if (v77) {
              sub_1906BFE48(v77);
            }
            if (v76)
            {
              sub_1906BFE48(v76);
              if ((v78 & 1) == 0) {
                goto LABEL_179;
              }
            }
            else if (!v78)
            {
              goto LABEL_179;
            }
          }
          sub_190745090(v70, &v170);
          *(void *)__int16 v180 = *(void *)v170;
          *((unsigned char *)sub_19074E748(&v166, *(unint64_t **)v180, (uint64_t)&unk_1908825E8, (_OWORD **)v180) + 48) = 1;
          uint64_t v79 = (std::__shared_weak_count *)*((void *)&v170 + 1);
          long long v161 = v170;
          if (*((void *)&v170 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v170 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v80 = (std::__shared_weak_count *)a2[1];
          v160[0] = *a2;
          v160[1] = (uint64_t)v80;
          if (v80) {
            atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_1907E46B0((uint64_t **)&v161, &v177, v160, v70, &v166);
          if (v80) {
            sub_1906BFE48(v80);
          }
          if (v79) {
            sub_1906BFE48(v79);
          }
          sub_1907451AC(*a2, (uint64_t *)v170, (uint64_t *)&v163, 1);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          uint64_t v81 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
          {
            double v82 = *(double *)(*a4 + 8);
            double v83 = *(double *)(*a4 + 16);
            double v84 = *(double *)(*a4 + 32);
            uint64_t v85 = *(void *)(v170 + 24);
            uint64_t v86 = *(void *)(v170 + 32);
            uint64_t v87 = *(void *)(v170 + 40);
            *(_DWORD *)long long buf = 134350593;
            *(void *)&uint8_t buf[4] = v15;
            __int16 v194 = 2049;
            double v195 = v82;
            __int16 v196 = 2049;
            double v197 = v83;
            __int16 v198 = 2050;
            double v199 = v84;
            __int16 v200 = 2049;
            uint64_t v201 = v85;
            __int16 v202 = 2049;
            uint64_t v203 = v86;
            __int16 v204 = 2050;
            uint64_t v205 = v87;
            _os_log_impl(&dword_1906B8000, v81, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,generateSnapCandidates,added course based snap as primary snap,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf", buf, 0x48u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
            }
            uint64_t v127 = *(void *)(*a4 + 8);
            double v128 = *(double *)(*a4 + 16);
            double v129 = *(double *)(*a4 + 32);
            uint64_t v130 = *(void *)(v170 + 24);
            uint64_t v131 = *(void *)(v170 + 32);
            uint64_t v132 = *(void *)(v170 + 40);
            *(_DWORD *)__int16 v180 = 134350593;
            *(void *)&v180[4] = v15;
            __int16 v181 = 2049;
            uint64_t v182 = v127;
            __int16 v183 = 2049;
            double v184 = v128;
            __int16 v185 = 2050;
            double v186 = v129;
            __int16 v187 = 2049;
            uint64_t v188 = v130;
            __int16 v189 = 2049;
            uint64_t v190 = v131;
            __int16 v191 = 2050;
            uint64_t v192 = v132;
            double v133 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v133);
            if (v133 != buf) {
              free(v133);
            }
            uint64_t v70 = v153;
          }
        }
LABEL_179:
        if ((void)v169 && *(void *)v169 && !sub_19074BAD4((uint64_t)&v166, *(unint64_t **)v169))
        {
          long long v88 = v169;
          if (*((void *)&v169 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          int v89 = sub_1907E4658(v88, v163, v164);
          int v90 = v89 ^ 1;
          if ((v89 & 1) == 0 && (a3 & 1) == 0)
          {
            uint64_t v91 = *a4;
            uint64_t v92 = (std::__shared_weak_count *)a4[1];
            if (v92) {
              atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            float64x2_t v93 = (std::__shared_weak_count *)*((void *)&v169 + 1);
            v159[0] = (uint64_t *)v88;
            v159[1] = *((uint64_t **)&v169 + 1);
            if (*((void *)&v169 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            int v90 = sub_1907E4540(v54 == v53, v91, v159);
            if (v93) {
              sub_1906BFE48(v93);
            }
            if (v92) {
              sub_1906BFE48(v92);
            }
          }
          if (*((void *)&v88 + 1))
          {
            sub_1906BFE48(*((std::__shared_weak_count **)&v88 + 1));
            uint64_t v70 = v153;
            if ((v90 & 1) == 0) {
              goto LABEL_211;
            }
          }
          else
          {
            uint64_t v70 = v153;
            if (!v90) {
              goto LABEL_211;
            }
          }
          sub_190745090(v70, &v169);
          *(void *)__int16 v180 = *(void *)v169;
          *((unsigned char *)sub_19074E748(&v166, *(unint64_t **)v180, (uint64_t)&unk_1908825E8, (_OWORD **)v180) + 48) = 1;
          long long v94 = (std::__shared_weak_count *)*((void *)&v169 + 1);
          long long v158 = v169;
          if (*((void *)&v169 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v95 = (std::__shared_weak_count *)a2[1];
          v157[0] = *a2;
          v157[1] = (uint64_t)v95;
          if (v95) {
            atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_1907E46B0((uint64_t **)&v158, &v174, v157, v70, &v166);
          if (v95) {
            sub_1906BFE48(v95);
          }
          if (v94) {
            sub_1906BFE48(v94);
          }
          sub_1907451AC(*a2, (uint64_t *)v169, (uint64_t *)&v163, 1);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          float64x2_t v96 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
          {
            double v97 = *(double *)(*a4 + 8);
            double v98 = *(double *)(*a4 + 16);
            double v99 = *(double *)(*a4 + 32);
            uint64_t v100 = *(void *)(v169 + 24);
            uint64_t v101 = *(void *)(v169 + 32);
            uint64_t v102 = *(void *)(v169 + 40);
            *(_DWORD *)long long buf = 134350593;
            *(void *)&uint8_t buf[4] = v15;
            __int16 v194 = 2049;
            double v195 = v97;
            __int16 v196 = 2049;
            double v197 = v98;
            __int16 v198 = 2050;
            double v199 = v99;
            __int16 v200 = 2049;
            uint64_t v201 = v100;
            __int16 v202 = 2049;
            uint64_t v203 = v101;
            __int16 v204 = 2050;
            uint64_t v205 = v102;
            _os_log_impl(&dword_1906B8000, v96, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,generateSnapCandidates,added alternate course based snap as primary snap,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf", buf, 0x48u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
            }
            uint64_t v139 = *(void *)(*a4 + 8);
            double v140 = *(double *)(*a4 + 16);
            double v141 = *(double *)(*a4 + 32);
            uint64_t v142 = *(void *)(v169 + 24);
            uint64_t v143 = *(void *)(v169 + 32);
            uint64_t v144 = *(void *)(v169 + 40);
            *(_DWORD *)__int16 v180 = 134350593;
            *(void *)&v180[4] = v15;
            __int16 v181 = 2049;
            uint64_t v182 = v139;
            __int16 v183 = 2049;
            double v184 = v140;
            __int16 v185 = 2050;
            double v186 = v141;
            __int16 v187 = 2049;
            uint64_t v188 = v142;
            __int16 v189 = 2049;
            uint64_t v190 = v143;
            __int16 v191 = 2050;
            uint64_t v192 = v144;
            uint64_t v145 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v145);
            if (v145 != buf) {
              free(v145);
            }
            uint64_t v70 = v153;
          }
        }
LABEL_211:
        if (!(void)v168 || !*(void *)v168 || sub_19074BAD4((uint64_t)&v166, *(unint64_t **)v168)) {
          goto LABEL_243;
        }
        long long v103 = v169;
        if (*((void *)&v169 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v169 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        int v104 = sub_1907E4658(v103, v163, v164);
        int v105 = v104 ^ 1;
        if ((v104 & 1) == 0 && (a3 & 1) == 0)
        {
          uint64_t v106 = *a4;
          long long v107 = (std::__shared_weak_count *)a4[1];
          if (v107) {
            atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v108 = (std::__shared_weak_count *)*((void *)&v168 + 1);
          long long v156 = v168;
          if (*((void *)&v168 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v168 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          int v105 = sub_1907E4540(v54 == v53, v106, (uint64_t **)&v156);
          if (v108) {
            sub_1906BFE48(v108);
          }
          if (v107) {
            sub_1906BFE48(v107);
          }
        }
        if (*((void *)&v103 + 1))
        {
          sub_1906BFE48(*((std::__shared_weak_count **)&v103 + 1));
          if ((v105 & 1) == 0) {
            goto LABEL_243;
          }
        }
        else if (!v105)
        {
LABEL_243:
          if (*v70 == v70[1])
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
            }
            float v120 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 134349056;
              *(void *)&uint8_t buf[4] = v15;
              _os_log_impl(&dword_1906B8000, v120, OS_LOG_TYPE_INFO, "CLTSP,%{public}.2lf,generateSnapCandidates,unable to determine primary snap", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
              }
              *(_DWORD *)__int16 v180 = 134349056;
              *(void *)&v180[4] = v15;
              uint64_t v126 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v126);
              if (v126 != buf) {
                free(v126);
              }
            }
            BOOL v56 = 0;
          }
          else
          {
            unint64_t v118 = (uint64_t *)v177;
            uint64_t v119 = (uint64_t *)v178;
            if (v177 == v178)
            {
              sub_1907EDC6C((uint64_t)&v177, (uint64_t *)v174, v175, ((char *)v175 - (char *)v174) >> 4);
              unint64_t v118 = (uint64_t *)v177;
              uint64_t v119 = (uint64_t *)v178;
            }
            sub_1907E7C44(v118, v119, (*(_DWORD *)(*a2 + 152) & 0xFFFFFFFE) == 2, v70, &v166, &v163);
            sub_1907E7C44((uint64_t *)v171, v172, (*(_DWORD *)(*a2 + 152) & 0xFFFFFFFE) == 2, v70, &v166, &v163);
            BOOL v56 = *v70 != v70[1];
          }
          *(void *)long long buf = &v163;
          sub_1906C6BF0((void ***)buf);
          sub_19074E308((uint64_t)&v166, v167[0]);
          if (*((void *)&v168 + 1)) {
            sub_1906BFE48(*((std::__shared_weak_count **)&v168 + 1));
          }
          if (*((void *)&v169 + 1)) {
            sub_1906BFE48(*((std::__shared_weak_count **)&v169 + 1));
          }
          if (*((void *)&v170 + 1)) {
            sub_1906BFE48(*((std::__shared_weak_count **)&v170 + 1));
          }
          *(void *)long long buf = &v171;
          sub_1906C6BF0((void ***)buf);
          *(void *)long long buf = &v174;
          sub_1906C6BF0((void ***)buf);
          *(void *)long long buf = &v177;
          sub_1906C6BF0((void ***)buf);
          return v56;
        }
        sub_190745090(v70, &v168);
        *(void *)__int16 v180 = *(void *)v168;
        *((unsigned char *)sub_19074E748(&v166, *(unint64_t **)v180, (uint64_t)&unk_1908825E8, (_OWORD **)v180) + 48) = 1;
        uint64_t v109 = (std::__shared_weak_count *)*((void *)&v168 + 1);
        long long v155 = v168;
        if (*((void *)&v168 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v168 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        double v110 = (std::__shared_weak_count *)a2[1];
        v154[0] = *a2;
        v154[1] = (uint64_t)v110;
        if (v110) {
          atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_1907E46B0((uint64_t **)&v155, &v171, v154, v70, &v166);
        if (v110) {
          sub_1906BFE48(v110);
        }
        if (v109) {
          sub_1906BFE48(v109);
        }
        sub_1907451AC(*a2, (uint64_t *)v168, (uint64_t *)&v163, 1);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        uint64_t v111 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
        {
          double v112 = *(double *)(*a4 + 8);
          double v113 = *(double *)(*a4 + 16);
          double v114 = *(double *)(*a4 + 32);
          uint64_t v115 = *(void *)(v168 + 24);
          uint64_t v116 = *(void *)(v168 + 32);
          uint64_t v117 = *(void *)(v168 + 40);
          *(_DWORD *)long long buf = 134350593;
          *(void *)&uint8_t buf[4] = v15;
          __int16 v194 = 2049;
          double v195 = v112;
          __int16 v196 = 2049;
          double v197 = v113;
          __int16 v198 = 2050;
          double v199 = v114;
          __int16 v200 = 2049;
          uint64_t v201 = v115;
          __int16 v202 = 2049;
          uint64_t v203 = v116;
          __int16 v204 = 2050;
          uint64_t v205 = v117;
          _os_log_impl(&dword_1906B8000, v111, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.2lf,generateSnapCandidates,added position based snap as primary snap,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf", buf, 0x48u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          uint64_t v146 = *(void *)(*a4 + 8);
          double v147 = *(double *)(*a4 + 16);
          double v148 = *(double *)(*a4 + 32);
          uint64_t v149 = *(void *)(v168 + 24);
          uint64_t v150 = *(void *)(v168 + 32);
          uint64_t v151 = *(void *)(v168 + 40);
          *(_DWORD *)__int16 v180 = 134350593;
          *(void *)&v180[4] = v15;
          __int16 v181 = 2049;
          uint64_t v182 = v146;
          __int16 v183 = 2049;
          double v184 = v147;
          __int16 v185 = 2050;
          double v186 = v148;
          __int16 v187 = 2049;
          uint64_t v188 = v149;
          __int16 v189 = 2049;
          uint64_t v190 = v150;
          __int16 v191 = 2050;
          uint64_t v192 = v151;
          unint64_t v152 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v152);
          if (v152 != buf) {
            free(v152);
          }
          uint64_t v70 = v153;
        }
        goto LABEL_243;
      }
LABEL_132:
      uint64_t v70 = v153;
      goto LABEL_136;
    }
    uint64_t v52 = *(std::__shared_weak_count **)(v48 + 8);
    if (v52) {
      atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(_DWORD *)(v51 + 20) & 0xFFFFFFFE) == 8)
    {
      int v53 = 1;
      if (!v52)
      {
LABEL_126:
        int v54 = 1;
        if (!(void)v49) {
          goto LABEL_132;
        }
        goto LABEL_127;
      }
    }
    else
    {
      int v53 = (*(_DWORD *)(v51 + 24) & 0xFFFFFFFE) == 6;
      if (!v52) {
        goto LABEL_126;
      }
    }
    sub_1906BFE48(v52);
    goto LABEL_126;
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
  }
  uint64_t v55 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v55, OS_LOG_TYPE_ERROR, "CLTSP,addLocationToGPSSectionAndProcess,null location", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    *(_WORD *)__int16 v180 = 0;
    uint64_t v124 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentRouteBuilder::processSingleLocation(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, BOOL, const CLGeoMapLocationPtr &, CLGeoMapLocationPtr &, double &, std::vector<CLGeoMapSnapDataPtr> &)", "CoreLocation: %s\n", v124);
    if (v124 != buf) {
      free(v124);
    }
  }
  return 0;
}

void sub_1907E7AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,void *a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,std::__shared_weak_count *a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void **a63)
{
  a63 = (void **)&a31;
  sub_1906C6BF0(&a63);
  sub_19074E308((uint64_t)&a34, a35);
  if (a38) {
    sub_1906BFE48(a38);
  }
  if (a40) {
    sub_1906BFE48(a40);
  }
  if (a42) {
    sub_1906BFE48(a42);
  }
  a63 = (void **)&a43;
  sub_1906C6BF0(&a63);
  a63 = (void **)&a46;
  sub_1906C6BF0(&a63);
  a63 = (void **)&a49;
  sub_1906C6BF0(&a63);
  _Unwind_Resume(a1);
}

void sub_1907E7C44(uint64_t *a1, uint64_t *a2, int a3, uint64_t *a4, uint64_t **a5, void ***a6)
{
  if (a1 != a2)
  {
    uint64_t v10 = a1;
    if (a3) {
      double v11 = 0.01;
    }
    else {
      double v11 = 0.5;
    }
    do
    {
      unint64_t v12 = (unint64_t **)*v10;
      if (!*v10) {
        goto LABEL_28;
      }
      uint64_t v13 = (uint64_t)*v12;
      BOOL v14 = (std::__shared_weak_count *)v12[1];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v15 = sub_1907E44D4(v13, v14, 0);
      if (v14) {
        sub_1906BFE48(v14);
      }
      if ((v15 & 1) == 0) {
        goto LABEL_28;
      }
      uint64_t v16 = *(unint64_t **)*v10;
      if (!v16 || sub_19074BAD4((uint64_t)a5, v16)) {
        goto LABEL_28;
      }
      float64x2_t v17 = (double *)*v10;
      unsigned long long v18 = (std::__shared_weak_count *)v10[1];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        int v19 = sub_1907E4658((uint64_t)v17, *a6, a6[1]);
        sub_1906BFE48(v18);
        float64x2_t v17 = (double *)*v10;
        if (!v19) {
          goto LABEL_19;
        }
      }
      else if ((sub_1907E4658(*v10, *a6, a6[1]) & 1) == 0)
      {
        goto LABEL_19;
      }
      if (sqrt(v17[9] * v17[9] + v17[10] * v17[10]) < 7.0 && v17[14] > 0.25) {
        goto LABEL_27;
      }
LABEL_19:
      unsigned int v20 = *(_DWORD *)(*(void *)v17 + 20);
      if (v20 < 3 || (*(_DWORD *)(*(void *)v17 + 24) - 1) <= 1) {
        goto LABEL_27;
      }
      if (v20 == 3 || v20 == 5)
      {
        double v21 = v17[14];
        if (v21 > 0.05) {
          goto LABEL_27;
        }
      }
      else
      {
        double v21 = v17[14];
      }
      if (v21 > v11)
      {
LABEL_27:
        sub_190745090(a4, (long long *)v10);
        double v22 = *(unint64_t **)*v10;
        *((unsigned char *)sub_19074E748(a5, v22, (uint64_t)&unk_1908825E8, (_OWORD **)&v22) + 48) = 1;
      }
LABEL_28:
      v10 += 2;
    }
    while (v10 != a2);
  }
}

void sub_1907E7E28(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907E7E40(uint64_t a1, const std::string *a2, uint64_t a3, int a4, void *a5, uint64_t *a6)
{
  BOOL v8 = a3 == 1;
  uint64_t v197 = *MEMORY[0x1E4F143B8];
  sub_1907E9714(a1, a2);
  ++*(_DWORD *)(a1 + 76);
  *(unsigned char *)(a1 + 128) = sub_1907E9A00(@"UsePreferredSnapCandidatesInRouteBuilder", *(unsigned __int8 *)(a1 + 128));
  double v9 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ([a5 count])
  {
    unint64_t v10 = 0;
    double v11 = dbl_190885740[v8];
    uint64_t v12 = 1;
    while (1)
    {
      uint64_t v13 = (void *)[a5 objectAtIndexedSubscript:v10];
      if (([v13 isWiFiLocationType] & 1) != 0 || objc_msgSend(v13, "isLoiLocationType"))
      {
        objc_msgSend((id)objc_msgSend(v13, "timestamp"), "timeIntervalSinceReferenceDate");
        uint64_t v15 = v14;
        if (([v9 containsObject:v13] & 1) == 0)
        {
          if (v10)
          {
            if ([a5 count] - 1 != v10)
            {
              [v13 horizontalAccuracy];
              if (v59 > 100.0
                || ([v13 speedAccuracy], v70 > 0.0) && (objc_msgSend(v13, "speed"), v71 < 1.0))
              {
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                }
                double v60 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                {
                  [v13 latitude];
                  uint64_t v62 = v61;
                  [v13 longitude];
                  uint64_t v64 = v63;
                  [v13 horizontalAccuracy];
                  uint64_t v66 = v65;
                  [v13 speed];
                  uint64_t v68 = v67;
                  [v13 course];
                  *(_DWORD *)long long buf = 134350337;
                  *(void *)&uint8_t buf[4] = v15;
                  *(_WORD *)&unsigned char buf[12] = 2049;
                  *(void *)&unsigned char buf[14] = v62;
                  __int16 v189 = 2049;
                  uint64_t v190 = v64;
                  __int16 v191 = 2050;
                  uint64_t v192 = v66;
                  __int16 v193 = 2050;
                  uint64_t v194 = v68;
                  __int16 v195 = 2050;
                  uint64_t v196 = v69;
                  _os_log_impl(&dword_1906B8000, v60, OS_LOG_TYPE_DEBUG, "CLTSP,filterWiFiFixes,huncCheck removed,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.3lf,speed,%{public}.3lf,course,%{public}.3lf", buf, 0x3Eu);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                  }
                  [v13 latitude];
                  uint64_t v73 = v72;
                  [v13 longitude];
                  uint64_t v75 = v74;
                  [v13 horizontalAccuracy];
                  uint64_t v77 = v76;
                  [v13 speed];
                  uint64_t v79 = v78;
                  [v13 course];
                  LODWORD(v180[0]) = 134350337;
                  *(uint64_t *)((char *)v180 + 4) = v15;
                  WORD2(v180[1]) = 2049;
                  *(uint64_t *)((char *)&v180[1] + 6) = v73;
                  HIWORD(v180[2]) = 2049;
                  uint64_t v181 = v75;
                  __int16 v182 = 2050;
                  uint64_t v183 = v77;
                  __int16 v184 = 2050;
                  uint64_t v185 = v79;
                  __int16 v186 = 2050;
                  uint64_t v187 = v80;
                  uint64_t v81 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "static void CLTripSegmentUtilities::filterWiFiFixes(const CLTripSegmentModeOfTransport, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double, double)", "CoreLocation: %s\n", v81);
                  if (v81 != buf) {
                    free(v81);
                  }
                }
                [v9 addObject:v13];
                goto LABEL_51;
              }
            }
          }
          [v13 latitude];
          double v17 = v16;
          [v13 longitude];
          sub_19074CA8C(&v172, v17, v18, 50.0);
          if ([a5 count] - 1 > v10 + 1) {
            break;
          }
        }
      }
LABEL_51:
      ++v10;
      ++v12;
      if ([a5 count] <= v10) {
        goto LABEL_60;
      }
    }
    uint64_t v19 = v12;
    while (1)
    {
      unsigned int v20 = (void *)[a5 objectAtIndexedSubscript:v19];
      if (([v20 isWiFiLocationType] & 1) == 0 && !objc_msgSend(v20, "isLoiLocationType")) {
        goto LABEL_33;
      }
      objc_msgSend((id)objc_msgSend(v20, "timestamp"), "timeIntervalSinceReferenceDate");
      uint64_t v24 = v23;
      objc_msgSend((id)objc_msgSend(v20, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v13, "timestamp"));
      if (v25 > v11) {
        goto LABEL_51;
      }
      [v20 horizontalAccuracy];
      if (v26 > 100.0 && ([v9 containsObject:v20] & 1) == 0) {
        break;
      }
      [v20 latitude];
      double v28 = v27;
      [v20 longitude];
      double v22 = v172;
      if (v172 > v28) {
        goto LABEL_33;
      }
      double v22 = v174;
      if (v174 < v28) {
        goto LABEL_33;
      }
      double v22 = v173;
      if (v175 <= v173)
      {
        if (v175 >= v173 || v175 <= v21 && v173 >= v21) {
          goto LABEL_33;
        }
      }
      else if (v175 < v21 || v173 > v21)
      {
        goto LABEL_33;
      }
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      uint64_t v29 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
      {
        [v20 latitude];
        uint64_t v31 = v30;
        [v20 longitude];
        uint64_t v33 = v32;
        [v20 horizontalAccuracy];
        uint64_t v35 = v34;
        [v20 speed];
        uint64_t v37 = v36;
        [v20 course];
        *(_DWORD *)long long buf = 134350337;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)&unsigned char buf[14] = v31;
        __int16 v189 = 2049;
        uint64_t v190 = v33;
        __int16 v191 = 2050;
        uint64_t v192 = v35;
        __int16 v193 = 2050;
        uint64_t v194 = v37;
        __int16 v195 = 2050;
        uint64_t v196 = v38;
        _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_DEBUG, "CLTSP,filterWiFiFixes,boundingBoxCheck removed,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.3lf,speed,%{public}.3lf,course,%{public}.3lf", buf, 0x3Eu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 == -1)
        {
LABEL_40:
          [v20 latitude];
          uint64_t v50 = v49;
          [v20 longitude];
          uint64_t v52 = v51;
          [v20 horizontalAccuracy];
          uint64_t v54 = v53;
          [v20 speed];
          uint64_t v56 = v55;
          [v20 course];
          LODWORD(v180[0]) = 134350337;
          *(uint64_t *)((char *)v180 + 4) = v24;
          WORD2(v180[1]) = 2049;
          *(uint64_t *)((char *)&v180[1] + 6) = v50;
          HIWORD(v180[2]) = 2049;
          uint64_t v181 = v52;
          __int16 v182 = 2050;
          uint64_t v183 = v54;
          __int16 v184 = 2050;
          uint64_t v185 = v56;
          __int16 v186 = 2050;
          uint64_t v187 = v57;
          double v58 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "static void CLTripSegmentUtilities::filterWiFiFixes(const CLTripSegmentModeOfTransport, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double, double)", "CoreLocation: %s\n", v58);
          if (v58 != buf) {
            free(v58);
          }
          goto LABEL_32;
        }
LABEL_42:
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        goto LABEL_40;
      }
LABEL_32:
      [v9 addObject:v20];
LABEL_33:
      if (objc_msgSend(a5, "count", v21, v22) - 1 <= (unint64_t)++v19) {
        goto LABEL_51;
      }
    }
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    uint64_t v39 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      [v20 latitude];
      uint64_t v41 = v40;
      [v20 longitude];
      uint64_t v43 = v42;
      [v20 horizontalAccuracy];
      uint64_t v45 = v44;
      [v20 speed];
      uint64_t v47 = v46;
      [v20 course];
      *(_DWORD *)long long buf = 134350337;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&unsigned char buf[14] = v41;
      __int16 v189 = 2049;
      uint64_t v190 = v43;
      __int16 v191 = 2050;
      uint64_t v192 = v45;
      __int16 v193 = 2050;
      uint64_t v194 = v47;
      __int16 v195 = 2050;
      uint64_t v196 = v48;
      _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_DEBUG, "CLTSP,filterWiFiFixes,huncCheck removed,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.3lf,speed,%{public}.3lf,course,%{public}.3lf", buf, 0x3Eu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_32;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 == -1) {
      goto LABEL_40;
    }
    goto LABEL_42;
  }
LABEL_60:
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
  }
  double v82 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
  {
    int v83 = [a5 count];
    int v84 = [v9 count];
    *(_DWORD *)long long buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v83;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v84;
    _os_log_impl(&dword_1906B8000, v82, OS_LOG_TYPE_INFO, "CLTSP,filterWiFiFixes,locationCountIn,%{public}d,locationsRemoved,%{public}d", buf, 0xEu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    int v154 = [a5 count];
    int v155 = [v9 count];
    LODWORD(v180[0]) = 67240448;
    HIDWORD(v180[0]) = v154;
    LOWORD(v180[1]) = 1026;
    *(_DWORD *)((char *)&v180[1] + 2) = v155;
    long long v156 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "static void CLTripSegmentUtilities::filterWiFiFixes(const CLTripSegmentModeOfTransport, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double, double)", "CoreLocation: %s\n", v156);
    if (v156 != buf) {
      free(v156);
    }
  }
  [a5 removeObjectsInArray:v9];
  [v9 removeAllObjects];
  if ([a5 count])
  {
    unint64_t v85 = 0;
    uint64_t v86 = 0;
    do
    {
      uint64_t v87 = (void *)[a5 objectAtIndexedSubscript:v85];
      if ([v87 isWiFiLocationType])
      {
        if (v86
          && (objc_msgSend((id)objc_msgSend(v87, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v86, "timestamp")),
              v88 < 10.0))
        {
          [v9 addObject:v87];
        }
        else
        {
          uint64_t v86 = v87;
        }
      }
      ++v85;
    }
    while ([a5 count] > v85);
  }
  [a5 removeObjectsInArray:v9];
  unint64_t v89 = 0;
  long long v158 = (void **)(a1 + 24);
  long long v170 = 0;
  uint64_t v171 = 0;
  v168[1] = 0;
  unint64_t v169 = 0xBFF0000000000000;
  v168[0] = 0xBFF0000000000000;
  memset(v180, 0, sizeof(v180));
  if (a3 == 1) {
    double v90 = 10.0;
  }
  else {
    double v90 = 30.0;
  }
  BOOL v167 = 0;
  while ([a5 count] > v89)
  {
    BOOL v92 = *(_DWORD *)(a1 + 76) == 1 && v89 == 0;
    if (a4) {
      BOOL v93 = v89 == [a5 count] - 1;
    }
    else {
      BOOL v93 = 0;
    }
    uint64_t v166 = 0;
    uint64_t v166 = [a5 objectAtIndexedSubscript:v89];
    if (v166)
    {
      sub_1907A2044((void **)&v166, &v165);
      int v94 = sub_1907E9D74((uint64_t)v168, a5, v89, v90, 45.0, 25.0);
      uint64_t v95 = (double *)v165;
      unsigned int v96 = *(_DWORD *)(v165 + 88);
      if (v96 <= 0xD)
      {
        int v97 = 1 << v96;
        if ((v97 & 0x20A) != 0)
        {
          if (*(double *)(v165 + 24) <= 100.0)
          {
            if (v170
              && (vabdd_f64(*v170, *(double *)v165) >= 3.0 || v89 == [a5 count] - 1)
              && v180[0] != v180[1])
            {
              double v172 = 0.0;
              double v173 = 0.0;
              double v174 = 0.0;
              uint64_t v111 = (std::__shared_weak_count *)a6[1];
              v164[0] = *a6;
              v164[1] = (uint64_t)v111;
              if (v111) {
                atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_1907E5148(a1, (uint64_t)v180, (uint64_t *)&v172, v164, &v167);
              if (v111) {
                sub_1906BFE48(v111);
              }
              if (*(void *)&v172 != *(void *)&v173)
              {
                sub_1907EDDC0(v158, *(void **)(a1 + 32), *(uint64_t ***)&v172, *(void ***)&v173, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v173 - *(void *)&v172) >> 3));
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                }
                double v112 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v113 = *(void *)v165;
                  *(_DWORD *)long long buf = 134349312;
                  *(void *)&uint8_t buf[4] = v113;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(void *)&unsigned char buf[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v173 - *(void *)&v172) >> 3);
                  _os_log_impl(&dword_1906B8000, v112, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,processLocationSeries,numCandidates,%{public}lu", buf, 0x16u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                  }
                  uint64_t v124 = *(void *)v165;
                  int v176 = 134349312;
                  uint64_t v177 = v124;
                  __int16 v178 = 2050;
                  int64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v173 - *(void *)&v172) >> 3);
                  uint64_t v125 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateSnapCandidates(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v125);
                  if (v125 != buf) {
                    free(v125);
                  }
                }
              }
              *(void *)long long buf = &v172;
              sub_19074DEC0((void ***)buf);
            }
            BOOL v114 = v167;
            if (!v167 && v92) {
              BOOL v114 = v92;
            }
            BOOL v167 = v114;
            sub_1907A19B0(v180, &v165);
            uint64_t v116 = (std::__shared_weak_count *)*((void *)&v165 + 1);
            uint64_t v115 = (double *)v165;
            if (*((void *)&v165 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v165 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v117 = v171;
            long long v170 = v115;
            uint64_t v171 = v116;
            if (v117)
            {
              sub_1906BFE48(v117);
              uint64_t v115 = (double *)v165;
            }
            if (v115[5] > 0.0 && v115[4] >= 0.0) {
              unint64_t v169 = *((void *)v115 + 4);
            }
          }
        }
        else if ((v97 & 0x2810) != 0)
        {
          int v98 = v94;
          if (!v170)
          {
            double v99 = (std::__shared_weak_count *)*((void *)&v165 + 1);
            if (*((void *)&v165 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v165 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v100 = v171;
            long long v170 = v95;
            uint64_t v171 = v99;
            if (v100) {
              sub_1906BFE48(v100);
            }
          }
          int v101 = v92 || v93;
          if ((v98 | v101) == 1)
          {
            if (v180[0] != v180[1])
            {
              double v172 = 0.0;
              double v173 = 0.0;
              double v174 = 0.0;
              uint64_t v102 = (std::__shared_weak_count *)a6[1];
              v163[0] = *a6;
              v163[1] = (uint64_t)v102;
              if (v102) {
                atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_1907E5148(a1, (uint64_t)v180, (uint64_t *)&v172, v163, &v167);
              if (v102) {
                sub_1906BFE48(v102);
              }
              if (*(void *)&v172 != *(void *)&v173)
              {
                sub_1907EDDC0(v158, *(void **)(a1 + 32), *(uint64_t ***)&v172, *(void ***)&v173, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v173 - *(void *)&v172) >> 3));
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                }
                long long v103 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v104 = *(void *)v165;
                  *(_DWORD *)long long buf = 134349312;
                  *(void *)&uint8_t buf[4] = v104;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(void *)&unsigned char buf[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v173 - *(void *)&v172) >> 3);
                  _os_log_impl(&dword_1906B8000, v103, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,processLocationSeries,numCandidates,%{public}lu", buf, 0x16u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                  }
                  uint64_t v120 = *(void *)v165;
                  int v176 = 134349312;
                  uint64_t v177 = v120;
                  __int16 v178 = 2050;
                  int64_t v179 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v173 - *(void *)&v172) >> 3);
                  uint64_t v121 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateSnapCandidates(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v121);
                  if (v121 != buf) {
                    free(v121);
                  }
                }
              }
              *(void *)long long buf = &v172;
              sub_19074DEC0((void ***)buf);
            }
            double v172 = 0.0;
            double v173 = 0.0;
            double v174 = 0.0;
            int v105 = (std::__shared_weak_count *)a6[1];
            v162[0] = *a6;
            v162[1] = (uint64_t)v105;
            if (v105) {
              atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            BOOL v106 = sub_1907E5E3C(a1, v162, v101, (uint64_t *)&v165, (uint64_t *)&v170, (double *)&v169, (uint64_t *)&v172);
            if (v105) {
              sub_1906BFE48(v105);
            }
            if (v106 && *(void *)&v172 != *(void *)&v173)
            {
              sub_1907E4B44((uint64_t *)&v172);
              unint64_t v107 = *(void *)(a1 + 32);
              if (v107 >= *(void *)(a1 + 40))
              {
                uint64_t v108 = sub_1907ED92C((uint64_t *)v158, (void **)&v172);
              }
              else
              {
                sub_1907ED8D8((uint64_t)v158, (void **)&v172);
                uint64_t v108 = v107 + 24;
              }
              *(void *)(a1 + 32) = v108;
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
              }
              unint64_t v118 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v119 = *(void *)v165;
                *(_DWORD *)long long buf = 134349312;
                *(void *)&uint8_t buf[4] = v119;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(void *)&unsigned char buf[14] = (uint64_t)(*(void *)&v173 - *(void *)&v172) >> 4;
                _os_log_impl(&dword_1906B8000, v118, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,processSingleLocation,numCandidates,%{public}lu", buf, 0x16u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                }
                uint64_t v122 = *(void *)v165;
                int v176 = 134349312;
                uint64_t v177 = v122;
                __int16 v178 = 2050;
                int64_t v179 = (uint64_t)(*(void *)&v173 - *(void *)&v172) >> 4;
                double v123 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateSnapCandidates(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v123);
                if (v123 != buf) {
                  free(v123);
                }
              }
            }
            *(void *)long long buf = &v172;
            sub_1906C6BF0((void ***)buf);
          }
        }
      }
      if (*((void *)&v165 + 1)) {
        sub_1906BFE48(*((std::__shared_weak_count **)&v165 + 1));
      }
    }
    else
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      uint64_t v109 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v109, OS_LOG_TYPE_ERROR, "CLTSP,generateSnapCandidates,null location", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        LOWORD(v172) = 0;
        double v110 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void CLTripSegmentRouteBuilder::generateSnapCandidates(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v110);
        if (v110 != buf) {
          free(v110);
        }
      }
    }
    ++v89;
  }
  uint64_t v126 = (std::__shared_weak_count *)a6[1];
  v161[0] = *a6;
  v161[1] = (uint64_t)v126;
  if (v126) {
    atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1907EA06C((int64x2_t *)a1, v161, a4);
  if (v126) {
    sub_1906BFE48(v126);
  }
  double v128 = *(uint64_t **)(a1 + 48);
  uint64_t v127 = *(uint64_t **)(a1 + 56);
  while (v128 != v127)
  {
    sub_1907EFCA4(v128);
    v128 += 10;
  }
  if (*(_DWORD *)(a1 + 76) == 1 && *(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    uint64_t v129 = *(void *)(a1 + 48);
    uint64_t v130 = *(void *)(a1 + 56);
    if (v129 != v130)
    {
      uint64_t v131 = 0;
      double v132 = -1.0;
      do
      {
        double v133 = sub_1907EFD54(v129);
        BOOL v134 = v132 < 0.0;
        if (v133 < v132) {
          BOOL v134 = 1;
        }
        if (v134)
        {
          double v132 = v133;
          uint64_t v131 = v129;
        }
        v129 += 80;
      }
      while (v129 != v130);
      int v135 = (uint64_t *)*v158;
      if (*((void *)*v158 + 1) - *(void *)*v158 >= 0x11uLL && v131 != 0)
      {
        BOOL v137 = *(uint64_t **)(v131 + 24);
        if (v137 != *(uint64_t **)(v131 + 32))
        {
          uint64_t v139 = *v137;
          uint64_t v138 = (std::__shared_weak_count *)v137[1];
          *(void *)long long buf = *v137;
          *(void *)&uint8_t buf[8] = v138;
          if (v138) {
            atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v139 && vabdd_f64(*(double *)(v139 + 16), *(double *)(*(void *)*v135 + 16)) < 0.0001)
          {
            sub_19074C1F8(v135);
            sub_190745090(v135, (long long *)buf);
            uint64_t v138 = *(std::__shared_weak_count **)&buf[8];
          }
          if (v138) {
            sub_1906BFE48(v138);
          }
        }
      }
    }
  }
  if (a4)
  {
    if (*(void *)(a1 + 24) != *(void *)(a1 + 32))
    {
      uint64_t v140 = *(void *)(a1 + 48);
      uint64_t v141 = *(void *)(a1 + 56);
      if (v140 != v141)
      {
        uint64_t v142 = 0;
        double v143 = -1.0;
        do
        {
          double v144 = sub_1907EFD54(v140);
          BOOL v145 = v143 < 0.0;
          if (v144 < v143) {
            BOOL v145 = 1;
          }
          if (v145)
          {
            double v143 = v144;
            uint64_t v142 = v140;
          }
          v140 += 80;
        }
        while (v140 != v141);
        uint64_t v146 = *(void *)(a1 + 32);
        uint64_t v147 = *(void *)(v146 - 24);
        uint64_t v148 = *(void *)(v146 - 16);
        uint64_t v149 = (uint64_t *)(v146 - 24);
        if ((unint64_t)(v148 - v147) >= 0x11 && v142 != 0)
        {
          uint64_t v151 = *(void *)(v142 + 56);
          if (*(void *)(v142 + 48) != v151)
          {
            uint64_t v152 = *(void *)(v151 - 16);
            *(void *)long long buf = v152;
            __int16 v153 = *(std::__shared_weak_count **)(v151 - 8);
            *(void *)&uint8_t buf[8] = v153;
            if (v153) {
              atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v152 && vabdd_f64(*(double *)(v152 + 16), *(double *)(*(void *)*v149 + 16)) < 0.0001)
            {
              sub_19074C1F8(v149);
              sub_190745090(v149, (long long *)buf);
              __int16 v153 = *(std::__shared_weak_count **)&buf[8];
            }
            if (v153) {
              sub_1906BFE48(v153);
            }
          }
        }
      }
    }
  }
  *(void *)long long buf = v180;
  sub_1906C6BF0((void ***)buf);
  if (v171) {
    sub_1906BFE48(v171);
  }
}

void sub_1907E961C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  a51 = (void **)&a35;
  sub_19074DEC0(&a51);
  if (a27) {
    sub_1906BFE48(a27);
  }
  a51 = (void **)&a43;
  sub_1906C6BF0(&a51);
  if (a34) {
    sub_1906BFE48(a34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1907E9714(uint64_t result, const std::string *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = result;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned __int8 *)(result + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(result + 23);
  }
  else {
    uint64_t v5 = *(void *)(result + 8);
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v7 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (v5 == size)
  {
    if (v7 < 0) {
      a2 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((v4 & 0x80) != 0)
    {
      uint64_t result = memcmp(*(const void **)result, a2, *(void *)(result + 8));
      if (!result) {
        return result;
      }
    }
    else
    {
      if (!*(unsigned char *)(result + 23)) {
        return result;
      }
      for (uint64_t i = (unsigned __int8 *)result; *i == a2->__r_.__value_.__s.__data_[0]; ++i)
      {
        a2 = (const std::string *)((char *)a2 + 1);
        if (!--v4) {
          return result;
        }
      }
    }
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
  }
  double v9 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = v3;
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v10 = *(void *)v3;
    }
    if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v11 = v2;
    }
    else {
      double v11 = (const std::string *)v2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v18 = 2082;
    uint64_t v19 = v11;
    _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEBUG, "CLTSP,reset routebuilder,prevTrip,%{public}s,newTrip,%{public}s", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    double v16 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::reset(const std::string &)", "CoreLocation: %s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  std::string::operator=((std::string *)v3, v2);
  uint64_t v12 = *(void *)(v3 + 24);
  uint64_t v13 = *(void *)(v3 + 32);
  while (v13 != v12)
  {
    v13 -= 24;
    *(void *)long long buf = v13;
    sub_1906C6BF0((void ***)buf);
  }
  *(void *)(v3 + 32) = v12;
  uint64_t v15 = *(void ***)(v3 + 48);
  for (uint64_t j = *(void ***)(v3 + 56); j != v15; sub_1907ED3AC(v3 + 64, j))
    j -= 10;
  *(void *)(v3 + 56) = v15;
  *(void *)(v3 + 72) = 0;
  return [*(id *)(v3 + 120) removeAllObjects];
}

uint64_t sub_1907E9A00(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "valueForKey:", a1))
  {
    uint64_t v4 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1CB18], "standardUserDefaults"), "BOOLForKey:", a1);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    uint64_t v5 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543874;
      uint64_t v11 = a1;
      __int16 v12 = 1026;
      int v13 = a2;
      __int16 v14 = 1026;
      int v15 = v4;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "CLTSP,userDefaults read for key,%{public}@,defaultValue,%{public}d,readValue,%{public}d", buf, 0x18u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::getUserDefaultsBoolForKey(NSString * _Nonnull, const BOOL)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    int v7 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543618;
      uint64_t v11 = a1;
      __int16 v12 = 1026;
      int v13 = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "CLTSP,userDefaults not found for key,%{public}@,defaultValue,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::getUserDefaultsBoolForKey(NSString * _Nonnull, const BOOL)", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return a2;
  }
  return v4;
}

uint64_t sub_1907E9D74(uint64_t a1, void *a2, int a3, double a4, double a5, double a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if ([a2 count] <= (unint64_t)a3)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    uint64_t v16 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEFAULT, "CLTSP,locationIndex over number of entries in sparseLocations", buf, 2u);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentUtilities::CLGPSFixTracker::canUseThisFix(NSArray<CLTripSegmentLocation *> * _Nonnull, int, const double, const double, const double)", "CoreLocation: %s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
      return 0;
    }
  }
  else
  {
    __int16 v12 = (void *)[a2 objectAtIndexedSubscript:a3];
    objc_msgSend((id)objc_msgSend(v12, "timestamp"), "timeIntervalSinceReferenceDate");
    double v14 = v13;
    if ([v12 isGPSLocationType])
    {
      *(double *)a1 = v14;
      *(void *)(a1 + 8) = v12;
      return 1;
    }
    double v18 = vabdd_f64(v14, *(double *)a1);
    if (*(double *)a1 > 0.0 && v18 < a4) {
      return 0;
    }
    if (*(double *)a1 > 0.0 && v18 >= 0.0 && v18 < a5)
    {
      [v12 distanceFromLocation:*(void *)(a1 + 8)];
      if (v21 < a6) {
        return 0;
      }
    }
    LODWORD(v22) = a3 + 1;
    if ([a2 count] <= (unint64_t)(int)v22) {
      return 1;
    }
    uint64_t v22 = (int)v22;
    while (!objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v22), "isGPSLocationType")
         || !objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v22), "isGoodGPSFixWithGoodCourse"))
    {
      if ([a2 count] <= (unint64_t)++v22) {
        return 1;
      }
    }
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v22), "timestamp"), "timeIntervalSinceReferenceDate");
    double v24 = vabdd_f64(v14, v23);
    BOOL v25 = v24 < a4;
    if (v24 < a5 && v24 >= a4)
    {
      objc_msgSend(v12, "distanceFromLocation:", objc_msgSend(a2, "objectAtIndexedSubscript:", v22));
      if (v27 < a6) {
        BOOL v25 = 1;
      }
    }
    return !v25;
  }
  return result;
}

void sub_1907EA06C(int64x2_t *a1, uint64_t *a2, int a3)
{
  uint64_t v277 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1].i64[1];
  uint64_t v4 = a1[2].i64[0];
  if (v3 == v4)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
    }
    uint64_t v229 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = 0;
      _os_log_impl(&dword_1906B8000, v229, OS_LOG_TYPE_ERROR, "CLTSP,generateAndCombineRoute called with 0 snaps,runIndex,%{public}d", buf, 8u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      }
      *(void *)long long v269 = 67240192;
      uint64_t v231 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v231);
      if (v231 != (char *)buf) {
        free(v231);
      }
    }
  }
  else
  {
    uint64_t v5 = a1;
    unint64_t v6 = a1[4].i32[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 3) > v6)
    {
      long long v236 = a1 + 3;
      i64 = a1[4].i64;
      uint64_t v243 = 0xFFFFFFFFLL;
      while (1)
      {
        v5[4].i32[2] = v6;
        int v7 = (uint64_t ***)(v3 + 24 * v6);
        long long v245 = (long long **)(v7 + 1);
        if (*v7 == v7[1])
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          uint64_t v40 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = 0;
            _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_DEBUG, "CLTSP,generateAndCombineRoute,empty snap vector,runIndex,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_423;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          *(void *)long long v269 = 67240192;
          uint64_t v41 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v41);
LABEL_69:
          if (v41 != (char *)buf) {
            free(v41);
          }
          goto LABEL_423;
        }
        BOOL v8 = **v7;
        if (!v8)
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          uint64_t v42 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = 0;
            _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_ERROR, "CLTSP,generateAndCombineRoute,null front snap,runIndex,%{public}d", buf, 8u);
          }
          if (!sub_1906CB57C(115, 0)) {
            goto LABEL_423;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          *(void *)long long v269 = 67240192;
          uint64_t v41 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v41);
          goto LABEL_69;
        }
        if ((v243 & 0x80000000) == 0) {
          break;
        }
        uint64_t v243 = v6;
LABEL_423:
        ++v6;
        uint64_t v3 = v5[1].i64[1];
        if (0xAAAAAAAAAAAAAAABLL * ((v5[2].i64[0] - v3) >> 3) <= v6) {
          return;
        }
      }
      double v9 = *((double *)v8 + 2);
      int64x2_t v255 = 0uLL;
      unint64_t v256 = 0;
      double v252 = 0;
      uint64_t v253 = 0;
      uint64_t v254 = 0;
      uint64_t v246 = *a2;
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v255.i64[1])
        {
          for (uint64_t i = (void **)(v255.i64[1] - 80); ; i -= 10)
            sub_1907ED3AC((uint64_t)&v256, i);
        }
      }
      uint64_t v239 = v6;
      long long v240 = v10;
      unint64_t v244 = v6;
      uint64_t v11 = (void *)(v3 + 24 * v243);
      v255.i64[1] = 0;
      __int16 v12 = v11 + 1;
      long long v242 = v7;
      int v248 = v11;
      if (*v11 == v11[1])
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        unint64_t v6 = v244;
        uint64_t v43 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349056;
          *(double *)&uint8_t buf[4] = v9;
          _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,null or empty lastSnapVectorPointer", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_84;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 == -1) {
          goto LABEL_434;
        }
      }
      else
      {
        if (*v7 != (uint64_t **)*v245)
        {
          int v265 = 0;
          memset(v264, 0, sizeof(v264));
          long long v266 = 0u;
          long long v267 = 0u;
          if (!v5[8].i8[0])
          {
LABEL_105:
            unint64_t v6 = v244;
            if (v252 == (uint64_t *)v253)
            {
              if (v5[8].i8[0])
              {
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                }
                uint64_t v51 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)long long buf = 134349056;
                  *(double *)&uint8_t buf[4] = v9;
                  _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,unable to generate route candidates using preferred snaps, generating using all", buf, 0xCu);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                  }
                  *(_DWORD *)long long v269 = 134349056;
                  *(double *)&v269[4] = v9;
                  double v226 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v226);
                  if (v226 != (char *)buf) {
                    free(v226);
                  }
                  uint64_t v5 = a1;
                  unint64_t v6 = v244;
                  uint64_t v11 = v248;
                }
              }
              uint64_t v260 = v246;
              double v261 = v240;
              if (v240) {
                atomic_fetch_add_explicit(&v240->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_1907F0394((uint64_t *)v264, &v260, (uint64_t)v11, v242, (uint64_t *)&v252);
              if (v261) {
                sub_1906BFE48(v261);
              }
            }
            BOOL v233 = v252 != (uint64_t *)v253;
            if (v252 == (uint64_t *)v253)
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
              }
              BOOL v145 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)long long buf = 134349056;
                *(double *)&uint8_t buf[4] = v9;
                _os_log_impl(&dword_1906B8000, v145, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,unable to generate route candidates", buf, 0xCu);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                }
                *(_DWORD *)long long v269 = 134349056;
                *(double *)&v269[4] = v9;
                double v225 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v225);
                if (v225 != (char *)buf) {
                  free(v225);
                }
              }
            }
            else
            {
              uint64_t v53 = (uint64_t *)v5[3].i64[0];
              uint64_t v52 = (uint64_t *)v5[3].i64[1];
              if (v53 != v52)
              {
                long long v235 = (uint64_t *)v5[3].i64[1];
                do
                {
                  uint64_t v54 = v53[1];
                  if (*v53 != v54)
                  {
                    uint64_t v55 = *(void *)(v54 - 16);
                    if (v55)
                    {
                      uint64_t v57 = *(void *)(v55 + 48);
                      uint64_t v56 = *(void *)(v55 + 56);
                      if (v57 != v56)
                      {
                        uint64_t v58 = *(void *)(v56 - 8);
                        v259[0] = *(void *)(v56 - 16);
                        v259[1] = v58;
                        if (v58) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
                        }
                        long long v241 = (std::__shared_weak_count *)v58;
                        double v60 = v252;
                        double v59 = (uint64_t *)v253;
                        uint64_t v247 = (uint64_t *)v253;
                        if (v252 != (uint64_t *)v253)
                        {
                          while (1)
                          {
                            uint64_t v61 = *v60;
                            if (*v60)
                            {
                              uint64_t v63 = *(void *)(v61 + 48);
                              uint64_t v62 = *(void *)(v61 + 56);
                              if (v63 != v62) {
                                break;
                              }
                            }
LABEL_217:
                            v60 += 2;
                            if (v60 == v59) {
                              goto LABEL_260;
                            }
                          }
                          uint64_t v65 = *(void **)v63;
                          uint64_t v64 = *(std::__shared_weak_count **)(v63 + 8);
                          v258[0] = v65;
                          v258[1] = v64;
                          if (v64)
                          {
                            atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
                            uint64_t v62 = *(void *)(v61 + 56);
                          }
                          long long v251 = v64;
                          uint64_t v66 = *(std::__shared_weak_count **)(v62 - 8);
                          if (v66)
                          {
                            atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
                            uint64_t v62 = *(void *)(v61 + 56);
                          }
                          uint64_t v249 = v66;
                          uint64_t v67 = *(void *)(v61 + 48);
                          unint64_t v68 = (unint64_t)(v62 - v67) >> 4;
                          int v69 = sub_1907EFEB8(v53, v68);
                          uint64_t v70 = *v53;
                          unint64_t v71 = (v53[1] - *v53) >> 4;
                          if (v71 <= v69)
                          {
                            int v85 = 0;
                          }
                          else
                          {
                            unsigned int v72 = v69;
                            uint64_t v73 = v69;
                            int v74 = sub_1907EFF60(v53, v69)
                                - v68
                                + ((*(void *)(*(void *)(v70 + 16 * v73) + 56)
                                  - *(void *)(*(void *)(v70 + 16 * v73) + 48)) >> 4);
                            int v75 = -1;
                            do
                            {
                              uint64_t v76 = *(void *)(v70 + 16 * v73);
                              if (v76)
                              {
                                uint64_t v78 = v76 + 48;
                                uint64_t v77 = *(void ***)(v76 + 48);
                                unint64_t v79 = *(void *)(v78 + 8) - (void)v77;
                                if ((int)(v79 >> 4) >= 1)
                                {
                                  uint64_t v80 = 0;
                                  uint64_t v81 = (v79 >> 4);
                                  while (1)
                                  {
                                    double v82 = *v77;
                                    BOOL v83 = !*v77 || v65 == 0;
                                    if (!v83 && *v82 == *v65 && v82[1] == v65[1] && v80 >= v74) {
                                      break;
                                    }
                                    ++v80;
                                    v77 += 2;
                                    if (v81 == v80) {
                                      goto LABEL_147;
                                    }
                                  }
                                  int v75 = v80;
                                }
LABEL_147:
                                v72 += v75 >> 31;
                                if (v75 < 0) {
                                  int v74 = 0;
                                }
                              }
                              ++v73;
                            }
                            while (v73 != v71);
                            int v85 = 0;
                            if ((v72 & 0x80000000) == 0 && (v75 & 0x80000000) == 0)
                            {
                              if (v71 <= v72)
                              {
                                int v85 = 0;
                                goto LABEL_171;
                              }
                              int v86 = 0;
                              int v85 = 0;
                              uint64_t v87 = v72;
                              char v88 = 1;
                              do
                              {
                                uint64_t v89 = *(void *)(v70 + 16 * v87);
                                if (v89)
                                {
                                  uint64_t v90 = *(void *)(v89 + 48);
                                  unint64_t v91 = (unint64_t)(*(void *)(v89 + 56) - v90) >> 4;
                                  if (v75 < (int)v91)
                                  {
                                    int v85 = v85 - v75 + v91;
                                    int v92 = v86 - v75 + v91;
                                    BOOL v93 = (void **)(v67 + 16 * v86);
                                    int v94 = (void **)(v90 + 16 * v75);
                                    unint64_t v95 = (int)v91 - (unint64_t)v75;
                                    while (1)
                                    {
                                      unsigned int v96 = *v94;
                                      if (!*v94) {
                                        break;
                                      }
                                      int v97 = *v93;
                                      if (!*v93 || *v96 != *v97 || v96[1] != v97[1]) {
                                        break;
                                      }
                                      ++v86;
                                      v93 += 2;
                                      v94 += 2;
                                      if (!--v95)
                                      {
                                        int v86 = v92;
                                        goto LABEL_164;
                                      }
                                    }
                                    char v88 = 0;
                                    int v85 = 0;
                                  }
                                }
LABEL_164:
                                ++v87;
                              }
                              while (v87 != v71);
                              if (v88)
                              {
LABEL_171:
                                memset(v269, 0, 24);
                                sub_1907ECFB8(v269, (void *)*v53, (void *)v53[1], (v53[1] - *v53) >> 4);
                                *(void *)&v269[24] = 0;
                                *(void *)&v269[32] = 0;
                                uint64_t v270 = 0;
                                sub_1907ED058(&v269[24], (void *)v53[3], (void *)v53[4], (v53[4] - v53[3]) >> 4);
                                unint64_t v271 = 0;
                                double v272 = 0;
                                uint64_t v273 = 0;
                                sub_1907ED058(&v271, (void *)v53[6], (void *)v53[7], (v53[7] - v53[6]) >> 4);
                                double v274 = *((double *)v53 + 9);
                                uint64_t v98 = *v60;
                                double v99 = operator new(0x60uLL);
                                uint64_t v100 = v99;
                                v99[1] = 0;
                                v99[2] = 0;
                                void *v99 = &unk_1EE003228;
                                int v101 = *(_DWORD *)(v98 + 8);
                                v99[3] = *(void *)v98;
                                uint64_t v102 = (char *)(v99 + 3);
                                *((_DWORD *)v99 + 8) = v101;
                                v99[5] = *(void *)(v98 + 16);
                                uint64_t v103 = *(void *)(v98 + 24);
                                v99[6] = v103;
                                if (v103) {
                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
                                }
                                v99[7] = *(void *)(v98 + 32);
                                uint64_t v104 = *(void *)(v98 + 40);
                                v99[8] = v104;
                                if (v104) {
                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v104 + 8), 1uLL, memory_order_relaxed);
                                }
                                v99[9] = 0;
                                v99[10] = 0;
                                v99[11] = 0;
                                sub_19074BFE8(v99 + 9, *(void **)(v98 + 48), *(void **)(v98 + 56), (uint64_t)(*(void *)(v98 + 56) - *(void *)(v98 + 48)) >> 4);
                                *(void *)&long long v257 = v102;
                                *((void *)&v257 + 1) = v100;
                                if (v102 != (char *)v61)
                                {
                                  sub_19074E138((uint64_t)(v100 + 9), *(uint64_t **)(v61 + 48), *(uint64_t **)(v61 + 56), (uint64_t)(*(void *)(v61 + 56) - *(void *)(v61 + 48)) >> 4);
                                  uint64_t v61 = v257;
                                }
                                if (v85)
                                {
                                  sub_19074CA20((uint64_t)v268, (long long *)(*(void *)(v61 + 48) + 16 * v85), *(long long **)(v61 + 56), *(void *)(v61 + 48));
                                  uint64_t v106 = v105;
                                  for (uint64_t j = *(void *)(v61 + 56); j != v106; j -= 16)
                                  {
                                    uint64_t v108 = *(std::__shared_weak_count **)(j - 8);
                                    if (v108) {
                                      sub_1906BFE48(v108);
                                    }
                                  }
                                  *(void *)(v61 + 56) = v106;
                                }
                                sub_1907EFDA4((void **)v269, &v257);
                                uint64_t v109 = v255.i64[1];
                                if (v255.i64[0] == v255.i64[1]) {
                                  goto LABEL_205;
                                }
                                uint64_t v110 = 0;
                                uint64_t v111 = 0;
                                unint64_t v112 = (v255.i64[1] - v255.i64[0]) / 80;
                                if (v112 <= 1) {
                                  unint64_t v112 = 1;
                                }
                                uint64_t v113 = (uint64_t **)(v255.i64[0] + 8);
                                while (1)
                                {
                                  BOOL v114 = *(v113 - 1);
                                  if (v114 != *v113 && *(void *)v269 != *(void *)&v269[8])
                                  {
                                    uint64_t v116 = *v114;
                                    if (*v114)
                                    {
                                      uint64_t v117 = **(void **)v269;
                                      if (**(void **)v269)
                                      {
                                        unint64_t v118 = *(void ***)(v116 + 48);
                                        if (v118 != *(void ***)(v116 + 56))
                                        {
                                          uint64_t v119 = *(void *)(v117 + 48);
                                          if (v119 != *(void *)(v117 + 56))
                                          {
                                            uint64_t v120 = *v118;
                                            if (*v120 == **(void **)v119
                                              && v120[1] == *(void *)(*(void *)v119 + 8))
                                            {
                                              uint64_t v121 = *(*v113 - 2);
                                              if (v121)
                                              {
                                                uint64_t v122 = *(void *)(*(void *)&v269[8] - 16);
                                                if (v122)
                                                {
                                                  uint64_t v124 = *(void *)(v121 + 48);
                                                  uint64_t v123 = *(void *)(v121 + 56);
                                                  if (v124 != v123)
                                                  {
                                                    uint64_t v126 = *(void *)(v122 + 48);
                                                    uint64_t v125 = *(void *)(v122 + 56);
                                                    if (v126 != v125)
                                                    {
                                                      uint64_t v127 = *(void **)(v123 - 16);
                                                      double v128 = *(void **)(v125 - 16);
                                                      if (*v127 == *v128 && v127[1] == v128[1]) {
                                                        break;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  ++v111;
                                  v110 += 0x100000000;
                                  v113 += 10;
                                  if (v112 == v111) {
                                    goto LABEL_205;
                                  }
                                }
                                if (v111 == -1)
                                {
LABEL_205:
                                  if (v255.i64[1] >= v256)
                                  {
                                    uint64_t v129 = sub_1907EE4DC(&v255, (uint64_t)v269);
                                  }
                                  else
                                  {
                                    sub_1907EE690(v255.i64[1], (uint64_t)v269);
                                    uint64_t v129 = v109 + 80;
                                  }
                                  v255.i64[1] = v129;
                                }
                                else
                                {
                                  uint64_t v130 = v110 >> 32;
                                  double v131 = sub_1907EFD54(v255.i64[0] + 80 * SHIDWORD(v110));
                                  double v132 = v274;
                                  double v133 = *(void ***)v269;
                                  BOOL v134 = *(void ***)&v269[8];
                                  while (v133 != v134)
                                  {
                                    if (*v133) {
                                      double v132 = v132 + sub_1907EFADC(*v133);
                                    }
                                    v133 += 2;
                                  }
                                  if (qword_1E929F6D0 != -1) {
                                    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                                  }
                                  int v135 = qword_1E929F6D8;
                                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                                  {
                                    *(_DWORD *)long long buf = 134349568;
                                    *(double *)&uint8_t buf[4] = v9;
                                    *(_WORD *)&unsigned char buf[12] = 2050;
                                    *(double *)&unsigned char buf[14] = v131;
                                    *(_WORD *)&unsigned char buf[22] = 2050;
                                    *(double *)&unsigned char buf[24] = v132;
                                    _os_log_impl(&dword_1906B8000, v135, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,route already present in current list,crntLength,%{public}.1lf,newLength,%{public}.1lf", buf, 0x20u);
                                  }
                                  if (sub_1906CB57C(115, 2))
                                  {
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1E929F6D0 != -1) {
                                      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                                    }
                                    LODWORD(v268[0]) = 134349568;
                                    *(double *)((char *)v268 + 4) = v9;
                                    WORD2(v268[1]) = 2050;
                                    *(double *)((char *)&v268[1] + 6) = v131;
                                    HIWORD(v268[2]) = 2050;
                                    *(double *)&v268[3] = v132;
                                    double v144 = (char *)_os_log_send_and_compose_impl();
                                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v144);
                                    if (v144 != (char *)buf) {
                                      free(v144);
                                    }
                                  }
                                  if (vabdd_f64(v131, v132) >= v131 * 0.05)
                                  {
                                    if (v132 < v131)
                                    {
                                      uint64_t v138 = v255.i64[0];
                                      uint64_t v139 = (uint64_t *)(v255.i64[0] + 80 * (int)v130);
                                      if (v139 != (uint64_t *)v269)
                                      {
LABEL_253:
                                        sub_1907ED1A8(v139, *(uint64_t **)v269, *(uint64_t **)&v269[8], (uint64_t)(*(void *)&v269[8] - *(void *)v269) >> 4);
                                        sub_1907EDC6C(v138 + 80 * (int)v130 + 24, *(uint64_t **)&v269[24], *(uint64_t **)&v269[32], (uint64_t)(*(void *)&v269[32] - *(void *)&v269[24]) >> 4);
                                        sub_1907EDC6C(v138 + 80 * (int)v130 + 48, v271, v272, ((char *)v272 - (char *)v271) >> 4);
                                      }
LABEL_254:
                                      *(double *)(v138 + 80 * (int)v130 + 72) = v274;
                                    }
                                  }
                                  else
                                  {
                                    if (*(void *)v269 == *(void *)&v269[8])
                                    {
                                      int v136 = 0;
                                    }
                                    else
                                    {
                                      int v136 = 0;
                                      uint64_t v137 = *(void *)v269;
                                      do
                                      {
                                        if (*(void *)v137) {
                                          v136 += *(_DWORD *)(*(void *)v137 + 8);
                                        }
                                        v137 += 16;
                                      }
                                      while (v137 != *(void *)&v269[8]);
                                    }
                                    uint64_t v138 = v255.i64[0];
                                    uint64_t v139 = (uint64_t *)(v255.i64[0] + 80 * (int)v130);
                                    uint64_t v140 = *v139;
                                    uint64_t v141 = v139[1];
                                    if (*v139 == v141)
                                    {
                                      int v142 = 0;
                                    }
                                    else
                                    {
                                      int v142 = 0;
                                      do
                                      {
                                        if (*(void *)v140) {
                                          v142 += *(_DWORD *)(*(void *)v140 + 8);
                                        }
                                        v140 += 16;
                                      }
                                      while (v140 != v141);
                                    }
                                    BOOL v143 = v136 == v142;
                                    if (v132 >= v131) {
                                      BOOL v143 = 0;
                                    }
                                    if (v136 < v142 || v143)
                                    {
                                      if (v139 != (uint64_t *)v269) {
                                        goto LABEL_253;
                                      }
                                      goto LABEL_254;
                                    }
                                  }
                                }
                                if (*((void *)&v257 + 1)) {
                                  sub_1906BFE48(*((std::__shared_weak_count **)&v257 + 1));
                                }
                                *(void *)long long buf = &v271;
                                sub_1906C6BF0((void ***)buf);
                                *(void *)long long buf = &v269[24];
                                sub_1906C6BF0((void ***)buf);
                                *(void *)long long buf = v269;
                                sub_1906C6BF0((void ***)buf);
LABEL_212:
                                if (v249) {
                                  sub_1906BFE48(v249);
                                }
                                uint64_t v11 = v248;
                                if (v251) {
                                  sub_1906BFE48(v251);
                                }
                                double v59 = v247;
                                goto LABEL_217;
                              }
                            }
                          }
                          if (sub_1907488B8(v246, v259, (uint64_t)v258, 0)) {
                            goto LABEL_171;
                          }
                          goto LABEL_212;
                        }
LABEL_260:
                        unint64_t v6 = v244;
                        if (v241) {
                          sub_1906BFE48(v241);
                        }
                        uint64_t v5 = a1;
                        uint64_t v52 = v235;
                      }
                    }
                  }
                  v53 += 10;
                }
                while (v53 != v52);
              }
            }
            *(void *)long long buf = v264;
            sub_1906C6BF0((void ***)buf);
            BOOL v45 = v233;
LABEL_271:
            if (v240) {
              sub_1906BFE48(v240);
            }
            if (!v45)
            {
              sub_19074C1F8((uint64_t *)(v5[1].i64[1] + 24 * v6));
LABEL_422:
              *(void *)long long buf = &v252;
              sub_1906C6BF0((void ***)buf);
              *(void *)long long buf = &v255;
              sub_1907ED314((void ***)buf);
              goto LABEL_423;
            }
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
            }
            uint64_t v146 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v147 = *(void *)(*(void *)*v11 + 16);
              *(_DWORD *)long long buf = 134349824;
              *(double *)&uint8_t buf[4] = v9;
              *(_WORD *)&unsigned char buf[12] = 1026;
              *(_DWORD *)&unsigned char buf[14] = 0;
              *(_WORD *)&buf[18] = 2050;
              *(void *)&buf[20] = v147;
              *(_WORD *)&buf[28] = 2050;
              *(void *)&buf[30] = (v253 - (uint64_t)v252) >> 4;
              _os_log_impl(&dword_1906B8000, v146, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateAndCombineRoute,runIndex,%{public}d,prevTime,%{public}.1lf,numCandidates,%{public}lu", buf, 0x26u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
              }
              uint64_t v220 = *(void *)(*(void *)*v11 + 16);
              *(_DWORD *)long long v269 = 134349824;
              *(double *)&v269[4] = v9;
              *(_WORD *)&v269[12] = 1026;
              *(_DWORD *)&v269[14] = 0;
              *(_WORD *)&v269[18] = 2050;
              *(void *)&v269[20] = v220;
              *(_WORD *)&v269[28] = 2050;
              *(void *)&v269[30] = (v253 - (uint64_t)v252) >> 4;
              double v221 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v221);
              if (v221 != (char *)buf) {
                free(v221);
              }
            }
            uint64_t v148 = v239;
            if (v5[4].i32[3] == 1 && v244 == 1)
            {
              uint64_t v149 = (double **)v252;
              uint64_t v150 = (double **)v253;
              if (v252 != (uint64_t *)v253)
              {
                uint64_t v151 = 0;
                uint64_t v152 = 0;
                v264[0] = 0uLL;
                do
                {
                  __int16 v153 = *v149;
                  uint64_t v154 = *((void *)*v149 + 7);
                  if (*((void *)*v149 + 6) != v154)
                  {
                    int v155 = *(uint64_t **)(v154 - 16);
                    if (v155)
                    {
                      if (*(void *)&v264[0])
                      {
                        if (**(double **)&v264[0] > *v153)
                        {
                          long long v156 = v149[1];
                          if (v156) {
                            atomic_fetch_add_explicit((atomic_ullong *volatile)v156 + 1, 1uLL, memory_order_relaxed);
                          }
                          __int16 v157 = (std::__shared_weak_count *)*((void *)&v264[0] + 1);
                          *(void *)&v264[0] = v153;
                          *((void *)&v264[0] + 1) = v156;
                          if (v157) {
                            sub_1906BFE48(v157);
                          }
                        }
                        if (v151 != *v155 || v152 != v155[1]) {
                          goto LABEL_312;
                        }
                      }
                      else
                      {
                        uint64_t v151 = *v155;
                        uint64_t v152 = v155[1];
                        long long v158 = v149[1];
                        if (v158) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)v158 + 1, 1uLL, memory_order_relaxed);
                        }
                        __int16 v159 = (std::__shared_weak_count *)*((void *)&v264[0] + 1);
                        *(void *)&v264[0] = v153;
                        *((void *)&v264[0] + 1) = v158;
                        if (v159) {
                          sub_1906BFE48(v159);
                        }
                      }
                    }
                  }
                  v149 += 2;
                }
                while (v149 != v150);
                if (*(void *)&v264[0])
                {
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                  }
                  float64x2_t v160 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v161 = *(void *)(*(void *)*v248 + 16);
                    *(_DWORD *)long long buf = 134349312;
                    *(double *)&uint8_t buf[4] = v9;
                    *(_WORD *)&unsigned char buf[12] = 2050;
                    *(void *)&unsigned char buf[14] = v161;
                    _os_log_impl(&dword_1906B8000, v160, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateAndCombineRoute,prevTime,%{public}.1lf,reduced size to 1 route", buf, 0x16u);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
                    }
                    uint64_t v227 = *(void *)(*(void *)*v248 + 16);
                    *(_DWORD *)long long v269 = 134349312;
                    *(double *)&v269[4] = v9;
                    *(_WORD *)&v269[12] = 2050;
                    *(void *)&v269[14] = v227;
                    double v228 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v228);
                    if (v228 != (char *)buf) {
                      free(v228);
                    }
                    uint64_t v5 = a1;
                    uint64_t v148 = v239;
                  }
                  uint64_t v162 = (uint64_t)v252;
                  for (uint64_t k = v253; k != v162; k -= 16)
                  {
                    __int16 v164 = *(std::__shared_weak_count **)(k - 8);
                    if (v164) {
                      sub_1906BFE48(v164);
                    }
                  }
                  uint64_t v253 = v162;
                  sub_1907EC7B0((uint64_t *)&v252, v264);
                }
LABEL_312:
                if (*((void *)&v264[0] + 1)) {
                  sub_1906BFE48(*((std::__shared_weak_count **)&v264[0] + 1));
                }
              }
            }
            int64x2_t v165 = v255;
            if (v255.i64[0] == v255.i64[1])
            {
              __int16 v178 = (long long *)v252;
              uint64_t v177 = (long long *)v253;
              while (v178 != v177)
              {
                if (*(void *)v178 && *(void *)(*(void *)v178 + 48) != *(void *)(*(void *)v178 + 56))
                {
                  memset(v276, 0, 32);
                  memset(buf, 0, sizeof(buf));
                  sub_1907EFDA4((void **)buf, v178);
                  unint64_t v179 = v5[3].u64[1];
                  if (v179 >= v5[4].i64[0])
                  {
                    uint64_t v180 = sub_1907EE4DC(v236, (uint64_t)buf);
                  }
                  else
                  {
                    sub_1907EE690(v5[3].i64[1], (uint64_t)buf);
                    uint64_t v180 = v179 + 80;
                    v5[3].i64[1] = v179 + 80;
                  }
                  v5[3].i64[1] = v180;
                  *(void *)long long v269 = v276;
                  sub_1906C6BF0((void ***)v269);
                  *(void *)long long v269 = &buf[24];
                  sub_1906C6BF0((void ***)v269);
                  *(void *)long long v269 = buf;
                  sub_1906C6BF0((void ***)v269);
                }
                ++v178;
              }
              if (v244 != 1 || v5[3].i64[0] == v5[3].i64[1]) {
                goto LABEL_359;
              }
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
              }
              uint64_t v181 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v182 = 0xCCCCCCCCCCCCCCCDLL * ((v5[3].i64[1] - v5[3].i64[0]) >> 4);
                *(_DWORD *)long long buf = 134349568;
                *(double *)&uint8_t buf[4] = v9;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(void *)&unsigned char buf[14] = v182;
                *(_WORD *)&unsigned char buf[22] = 1026;
                *(_DWORD *)&unsigned char buf[24] = 0;
                _os_log_impl(&dword_1906B8000, v181, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,combined candidates initialized using routeCandidateVector,%{public}lu,runIndex,%{public}d", buf, 0x1Cu);
              }
              uint64_t v148 = v239;
              if (!sub_1906CB57C(115, 2)) {
                goto LABEL_359;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
              }
              unint64_t v183 = 0xCCCCCCCCCCCCCCCDLL * ((a1[3].i64[1] - a1[3].i64[0]) >> 4);
              *(_DWORD *)long long v269 = 134349568;
              *(double *)&v269[4] = v9;
              *(_WORD *)&v269[12] = 2050;
              *(void *)&v269[14] = v183;
              *(_WORD *)&v269[22] = 1026;
              *(_DWORD *)&v269[24] = 0;
              __int16 v184 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentRouteBuilder::generateAndCombineRoute(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const BOOL, int)", "CoreLocation: %s\n", v184);
              if (v184 != (char *)buf) {
                free(v184);
              }
              uint64_t v5 = a1;
              goto LABEL_358;
            }
            if (v236 == &v255)
            {
LABEL_359:
              uint64_t v188 = (uint64_t *)v5[1].i64[1];
              __int16 v189 = (uint64_t *)v5[2].i64[0];
              if (-1 - 0x5555555555555555 * (v189 - v188) == v244 && a3 != 0)
              {
                uint64_t v191 = (uint64_t)v252;
                uint64_t v192 = v253;
                *(void *)&uint8_t buf[8] = 0;
                *(void *)&buf[16] = 0;
                *(void *)long long buf = &buf[8];
                for (m = (uint64_t *)v242; v191 != v192; v191 += 16)
                {
                  if (*(void *)v191)
                  {
                    uint64_t v194 = *(unint64_t ***)(*(void *)v191 + 32);
                    if (v194)
                    {
                      __int16 v195 = *v194;
                      if (*v194)
                      {
                        *(void *)long long v269 = *v194;
                        *((unsigned char *)sub_19074E748((uint64_t **)buf, v195, (uint64_t)&unk_1908825E8, (_OWORD **)v269) + 48) = 1;
                        m = (uint64_t *)v242;
                      }
                    }
                  }
                }
                uint64_t v196 = *m;
                uint64_t v197 = v245;
LABEL_370:
                for (n = *v197; ; *long long v245 = n)
                {
                  if ((long long *)v196 == n)
                  {
                    sub_19074E308((uint64_t)buf, *(void **)&buf[8]);
                    uint64_t v188 = (uint64_t *)v5[1].i64[1];
                    __int16 v189 = (uint64_t *)v5[2].i64[0];
                    break;
                  }
                  double v199 = **(unint64_t ***)v196;
                  if (v199)
                  {
                    if (sub_19074BAD4((uint64_t)buf, v199))
                    {
                      v196 += 16;
                      goto LABEL_370;
                    }
                    n = *v197;
                  }
                  n = (long long *)sub_1907ED5AC((long long *)(v196 + 16), n, v196);
                  for (iuint64_t i = *v197; ii != n; --ii)
                  {
                    uint64_t v201 = (std::__shared_weak_count *)*((void *)ii - 1);
                    if (v201) {
                      sub_1906BFE48(v201);
                    }
                  }
                  uint64_t v197 = v245;
                }
              }
              while (v188 != v189)
              {
                uint64_t v202 = v188[1];
                if (v202 != *v188)
                {
                  uint64_t v203 = *(void *)(v202 - 16);
                  if (v203)
                  {
                    if (*(double *)(v203 + 16) >= v9) {
                      break;
                    }
                    *(void *)&uint8_t buf[8] = 0;
                    *(void *)&buf[16] = 0;
                    *(void *)long long buf = &buf[8];
                    uint64_t v204 = v5[3].i64[0];
                    uint64_t v205 = v5[3].i64[1];
                    if (v204 != v205)
                    {
                      do
                      {
                        for (juint64_t j = *(uint64_t **)(v204 + 24); jj != *(uint64_t **)(v204 + 32); jj += 2)
                        {
                          uint64_t v207 = *jj;
                          if (*jj)
                          {
                            uint64_t v208 = *v188;
                            uint64_t v209 = v188[1];
                            if (*v188 != v209)
                            {
                              double v210 = -1.0;
                              while (1)
                              {
                                if (*(void *)v208)
                                {
                                  double v211 = vabdd_f64(*(double *)(v207 + 16), *(double *)(*(void *)v208 + 16));
                                  if (v211 < v210 || v210 < 0.0) {
                                    double v210 = v211;
                                  }
                                  if (v210 < 0.0001) {
                                    break;
                                  }
                                }
                                v208 += 16;
                                if (v208 == v209) {
                                  goto LABEL_400;
                                }
                              }
                              v213 = *(unint64_t **)v207;
                              if (*(void *)v207)
                              {
                                *(void *)long long v269 = *(void *)v207;
                                *((unsigned char *)sub_19074E748((uint64_t **)buf, v213, (uint64_t)&unk_1908825E8, (_OWORD **)v269)+ 48) = 1;
                              }
                              break;
                            }
                          }
LABEL_400:
                          ;
                        }
                        v204 += 80;
                      }
                      while (v204 != v205);
                      if (*(void *)&buf[16])
                      {
                        uint64_t v214 = *v188;
                        uint64_t v215 = (long long *)v188[1];
                        if (v215 != (long long *)*v188 && *(void *)&buf[16] != ((uint64_t)v215 - *v188) >> 4)
                        {
                          while (1)
                          {
                            uint64_t v217 = **(unint64_t ***)v214;
                            if (!v217) {
                              goto LABEL_413;
                            }
                            if (!sub_19074BAD4((uint64_t)buf, v217)) {
                              break;
                            }
                            v214 += 16;
                            uint64_t v215 = (long long *)v188[1];
LABEL_418:
                            if ((long long *)v214 == v215) {
                              goto LABEL_419;
                            }
                          }
                          uint64_t v215 = (long long *)v188[1];
LABEL_413:
                          uint64_t v215 = (long long *)sub_1907ED5AC((long long *)(v214 + 16), v215, v214);
                          for (kuint64_t k = (long long *)v188[1]; kk != v215; --kk)
                          {
                            uint64_t v219 = (std::__shared_weak_count *)*((void *)kk - 1);
                            if (v219) {
                              sub_1906BFE48(v219);
                            }
                          }
                          v188[1] = (uint64_t)v215;
                          goto LABEL_418;
                        }
                      }
                    }
LABEL_419:
                    sub_19074E308((uint64_t)buf, *(void **)&buf[8]);
                  }
                }
                v188 += 3;
              }
              uint64_t v243 = v148;
              unint64_t v6 = v244;
              goto LABEL_422;
            }
            unint64_t v166 = 0xCCCCCCCCCCCCCCCDLL * ((v255.i64[1] - v255.i64[0]) >> 4);
            uint64_t v167 = *i64;
            long long v168 = (void **)v236->i64[0];
            if (0xCCCCCCCCCCCCCCCDLL * ((*i64 - v236->i64[0]) >> 4) >= v166)
            {
              if (0xCCCCCCCCCCCCCCCDLL * ((v5[3].i64[1] - (uint64_t)v168) >> 4) >= v166)
              {
                uint64_t v186 = sub_1907EE960(v255.i64[0], v255.i64[1], v236->i64[0]);
                for (mm = (void **)v5[3].i64[1]; mm != (void **)v186; sub_1907ED3AC((uint64_t)i64, mm))
                  mm -= 10;
                v5[3].i64[1] = v186;
                goto LABEL_358;
              }
              uint64_t v185 = v255.i64[0] + 16 * ((v5[3].i64[1] - (uint64_t)v168) >> 4);
              sub_1907EE960(v255.i64[0], v185, v236->i64[0]);
              uint64_t v176 = sub_1907EE7EC((uint64_t)i64, v185, v165.i64[1], v5[3].i64[1]);
            }
            else
            {
              if (v168)
              {
                unint64_t v169 = (void **)v5[3].i64[1];
                long long v170 = (void *)v236->i64[0];
                if (v169 != v168)
                {
                  do
                  {
                    v169 -= 10;
                    sub_1907ED3AC((uint64_t)i64, v169);
                  }
                  while (v169 != v168);
                  long long v170 = (void *)v236->i64[0];
                }
                v5[3].i64[1] = (uint64_t)v168;
                operator delete(v170);
                uint64_t v167 = 0;
                v236->i64[0] = 0;
                v236->i64[1] = 0;
                v236[1].i64[0] = 0;
              }
              if (v166 > 0x333333333333333) {
                goto LABEL_463;
              }
              unint64_t v171 = 0xCCCCCCCCCCCCCCCDLL * (v167 >> 4);
              uint64_t v172 = 2 * v171;
              if (2 * v171 <= v166) {
                uint64_t v172 = 0xCCCCCCCCCCCCCCCDLL * ((v165.i64[1] - v165.i64[0]) >> 4);
              }
              unint64_t v173 = v171 >= 0x199999999999999 ? 0x333333333333333 : v172;
              if (v173 > 0x333333333333333) {
LABEL_463:
              }
                sub_190718FD4();
              double v174 = (char *)sub_1907EE750(v173);
              v5[3].i64[0] = (uint64_t)v174;
              v5[3].i64[1] = (uint64_t)v174;
              v5[4].i64[0] = (uint64_t)&v174[80 * v175];
              uint64_t v176 = sub_1907EE7EC((uint64_t)i64, v165.i64[0], v165.i64[1], (uint64_t)v174);
            }
            v5[3].i64[1] = v176;
LABEL_358:
            uint64_t v148 = v239;
            goto LABEL_359;
          }
          memset(v268, 0, 24);
          double v14 = (void *)v5[3].i64[0];
          double v13 = (void *)v5[3].i64[1];
          *(void *)&uint8_t buf[8] = 0;
          *(void *)&buf[16] = 0;
          *(void *)long long buf = &buf[8];
          uint64_t v250 = v13;
          if (v14 == v13)
          {
            uint64_t v37 = 0;
          }
          else
          {
            do
            {
              uint64_t v15 = v14[1];
              if (*v14 != v15)
              {
                uint64_t v16 = *(void *)(v15 - 16);
                if (v16)
                {
                  double v17 = *(void ***)(v16 + 48);
                  double v18 = *(void ***)(v16 + 56);
                  while (v17 != v18)
                  {
                    uint64_t v19 = *v17;
                    if (*v17)
                    {
                      for (uint64_t nn = *v11; nn != *v12; nn += 16)
                      {
                        double v21 = *(unint64_t ***)nn;
                        if (*(void *)nn)
                        {
                          uint64_t v22 = *v21;
                          if (*v21)
                          {
                            unint64_t v23 = *v22;
                            if (*v22 == *v19)
                            {
                              unint64_t v24 = v22[1];
                              if (v24 == v19[1])
                              {
                                BOOL v25 = &buf[8];
                                double v26 = &buf[8];
                                if (*(void *)&buf[8])
                                {
                                  uint64_t v27 = *(void *)&buf[8];
                                  while (1)
                                  {
                                    while (1)
                                    {
                                      BOOL v25 = (uint8_t *)v27;
                                      unint64_t v28 = *(void *)(v27 + 32);
                                      unint64_t v29 = *((void *)v25 + 5);
                                      BOOL v30 = v29 > v24;
                                      if (v28 != v23) {
                                        BOOL v30 = v28 > v23;
                                      }
                                      if (!v30) {
                                        break;
                                      }
                                      uint64_t v27 = *(void *)v25;
                                      double v26 = v25;
                                      if (!*(void *)v25) {
                                        goto LABEL_37;
                                      }
                                    }
                                    BOOL v31 = v29 < v24;
                                    BOOL v83 = v28 == v23;
                                    BOOL v32 = v28 < v23;
                                    if (v83) {
                                      BOOL v32 = v31;
                                    }
                                    if (!v32) {
                                      break;
                                    }
                                    uint64_t v27 = *((void *)v25 + 1);
                                    if (!v27)
                                    {
                                      double v26 = v25 + 8;
                                      goto LABEL_37;
                                    }
                                  }
                                  uint64_t v33 = v25;
                                }
                                else
                                {
LABEL_37:
                                  uint64_t v33 = operator new(0x40uLL);
                                  *((_OWORD *)v33 + 2) = *(_OWORD *)v22;
                                  *((void *)v33 + 6) = 0;
                                  *((void *)v33 + 7) = 0;
                                  *(void *)uint64_t v33 = 0;
                                  *((void *)v33 + 1) = 0;
                                  *((void *)v33 + 2) = v25;
                                  *(void *)double v26 = v33;
                                  uint64_t v34 = (uint64_t *)v33;
                                  if (**(void **)buf)
                                  {
                                    *(void *)long long buf = **(void **)buf;
                                    uint64_t v34 = *(uint64_t **)v26;
                                  }
                                  sub_19074BCA4(*(uint64_t **)&buf[8], v34);
                                  ++*(void *)&buf[16];
                                  double v21 = *(unint64_t ***)nn;
                                }
                                uint64_t v35 = *(void *)(nn + 8);
                                uint64_t v11 = v248;
                                if (v35) {
                                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
                                }
                                uint64_t v36 = (std::__shared_weak_count *)*((void *)v33 + 7);
                                *((void *)v33 + 6) = v21;
                                *((void *)v33 + 7) = v35;
                                if (v36) {
                                  sub_1906BFE48(v36);
                                }
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                    v17 += 2;
                  }
                }
              }
              v14 += 10;
            }
            while (v14 != v250);
            uint64_t v37 = v268[0];
            uint64_t v38 = v268[1];
            if (v268[1] != v268[0])
            {
              uint64_t v5 = a1;
              do
              {
                uint64_t v39 = *(std::__shared_weak_count **)(v38 - 8);
                if (v39) {
                  sub_1906BFE48(v39);
                }
                v38 -= 16;
              }
              while (v38 != v37);
              goto LABEL_87;
            }
          }
          uint64_t v5 = a1;
LABEL_87:
          v268[1] = v37;
          uint64_t v46 = *(uint8_t **)buf;
          if (*(uint8_t **)buf != &buf[8])
          {
            do
            {
              sub_190745090(v268, (long long *)v46 + 3);
              uint64_t v47 = (uint8_t *)*((void *)v46 + 1);
              if (v47)
              {
                do
                {
                  uint64_t v48 = v47;
                  uint64_t v47 = *(uint8_t **)v47;
                }
                while (v47);
              }
              else
              {
                do
                {
                  uint64_t v48 = (uint8_t *)*((void *)v46 + 2);
                  BOOL v83 = *(void *)v48 == (void)v46;
                  uint64_t v46 = v48;
                }
                while (!v83);
              }
              uint64_t v46 = v48;
            }
            while (v48 != &buf[8]);
          }
          sub_1907EEA00(*(void **)&buf[8]);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
          }
          uint64_t v49 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v50 = (uint64_t)(*v12 - *v11) >> 4;
            *(_DWORD *)long long buf = 134349568;
            *(double *)&uint8_t buf[4] = v9;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&unsigned char buf[14] = v50;
            *(_WORD *)&unsigned char buf[22] = 2050;
            *(void *)&unsigned char buf[24] = (v268[1] - v268[0]) >> 4;
            _os_log_impl(&dword_1906B8000, v49, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generatedPreferredSnap,allCount,%{public}lu,preferredCount,%{public}lu", buf, 0x20u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
            }
            uint64_t v222 = (uint64_t)(*v12 - *v11) >> 4;
            *(_DWORD *)long long v269 = 134349568;
            *(double *)&v269[4] = v9;
            *(_WORD *)&v269[12] = 2050;
            *(void *)&v269[14] = v222;
            *(_WORD *)&v269[22] = 2050;
            *(void *)&v269[24] = (v268[1] - v268[0]) >> 4;
            long long v223 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v223);
            if (v223 != (char *)buf) {
              free(v223);
            }
          }
          if (v268[0] != v268[1])
          {
            uint64_t v262 = v246;
            double v263 = v240;
            if (v240) {
              atomic_fetch_add_explicit(&v240->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_1907F0394((uint64_t *)v264, &v262, (uint64_t)v268, v242, (uint64_t *)&v252);
            if (v263) {
              sub_1906BFE48(v263);
            }
          }
          *(void *)long long buf = v268;
          sub_1906C6BF0((void ***)buf);
          goto LABEL_105;
        }
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
        }
        unint64_t v6 = v244;
        uint64_t v44 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)long long buf = 134349056;
          *(double *)&uint8_t buf[4] = v9;
          _os_log_impl(&dword_1906B8000, v44, OS_LOG_TYPE_DEBUG, "CLTSP,%{public}.1lf,generateRouteCandidatesForOneSegment,null or empty crntSnapVectorPointer", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2))
        {
LABEL_84:
          BOOL v45 = 0;
          goto LABEL_271;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 == -1)
        {
LABEL_434:
          *(_DWORD *)long long v269 = 134349056;
          *(double *)&v269[4] = v9;
          long long v224 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentRouteBuilder::generateRouteCandidatesForOneSegment(const CFAbsoluteTime, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLRouteCandidateVector> &, std::vector<CLRouteCandidatePtr> &, std::vector<CLRouteCandidateVector> &)", "CoreLocation: %s\n", v224);
          if (v224 != (char *)buf) {
            free(v224);
          }
          goto LABEL_84;
        }
      }
      dispatch_once(&qword_1E929F6D0, &unk_1EE005CE0);
      goto LABEL_434;
    }
  }
}

void sub_1907EC59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a65 = (void **)&a49;
  sub_1906C6BF0(&a65);
  a65 = (void **)&a52;
  sub_1907ED314(&a65);
  _Unwind_Resume(a1);
}

void **sub_1907EC7B0(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_190718FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    double v14 = (char *)sub_19074C0B4((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    double v18[2] = v15 + 16;
    sub_1907EE398(a1, v18);
    double v9 = (void *)a1[1];
    uint64_t result = sub_19074DC48(v18);
  }
  else
  {
    *int v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    double v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1907EC8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074DC48((void **)va);
  _Unwind_Resume(a1);
}

void **sub_1907EC8CC(void **a1)
{
  uint64_t v3 = a1 + 6;
  sub_1906C6BF0(&v3);
  uint64_t v3 = a1 + 3;
  sub_1906C6BF0(&v3);
  uint64_t v3 = a1;
  sub_1906C6BF0(&v3);
  return a1;
}

void sub_1907EC924(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  unint64_t v5 = *(uint64_t ***)(a1 + 24);
  uint64_t v4 = *(uint64_t ***)(a1 + 32);
  if (v5 == v4)
  {
LABEL_7:
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    while (1)
    {
      unint64_t v6 = *v5;
      if ((char *)v5[1] - (char *)*v5 == 16)
      {
        uint64_t v7 = *v6;
        if (*v6)
        {
          double v8 = *(double *)(v7 + 16);
          if (v8 > a3 + 1.0) {
            goto LABEL_7;
          }
          if (vabdd_f64(v8, a3) < 0.0001) {
            break;
          }
        }
      }
      v5 += 3;
      if (v5 == v4) {
        goto LABEL_7;
      }
    }
    sub_1906D5C70(__p, (char *)&unk_1908DB639);
    sub_1907A1B7C(v7, (uint64_t *)__p);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = (*v5)[1];
    *a2 = **v5;
    a2[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_1907EC9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907ECA18(uint64_t a1@<X0>, void *a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v4 == v5)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v7 = 0;
    double v8 = 0;
    do
    {
      uint64_t v9 = *(uint64_t **)v4;
      if (*(void *)(v4 + 8) - *(void *)v4 == 16 && (uint64_t v10 = *v9) != 0)
      {
        if (*(double *)(v10 + 16) >= a3)
        {
          *a2 = v7;
          a2[1] = v8;
          return;
        }
        char v11 = (std::__shared_weak_count *)v9[1];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v8) {
          sub_1906BFE48(v8);
        }
        double v8 = v11;
      }
      else
      {
        uint64_t v10 = v7;
      }
      v4 += 24;
      uint64_t v7 = v10;
    }
    while (v4 != v5);
    *a2 = 0;
    a2[1] = 0;
    if (v8)
    {
      sub_1906BFE48(v8);
    }
  }
}

uint64_t sub_1907ECB00(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 120) removeAllObjects];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32) - v4;
  if (v5)
  {
    unint64_t v6 = v5 / 24;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    uint64_t v7 = (void *)(v4 + 8);
    double v8 = -1.0;
    do
    {
      uint64_t v9 = *(v7 - 1);
      if (*v7 != v9 && (unint64_t)(*v7 - v9) <= 0x10) {
        double v8 = *(double *)(*(void *)v9 + 16);
      }
      v7 += 3;
      --v6;
    }
    while (v6);
  }
  else
  {
    double v8 = -1.0;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (result)
  {
    uint64_t v12 = result;
    uint64_t v13 = *(void *)v18;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v18 != v13) {
          objc_enumerationMutation(a2);
        }
        uint64_t v15 = *(void **)(*((void *)&v17 + 1) + 8 * v14);
        objc_msgSend((id)objc_msgSend(v15, "timestamp"), "timeIntervalSinceReferenceDate");
        if (v16 > v8) {
          [*(id *)(a1 + 120) addObject:v15];
        }
        ++v14;
      }
      while (v12 != v14);
      uint64_t result = [a2 countByEnumeratingWithState:&v17 objects:v21 count:16];
      uint64_t v12 = result;
    }
    while (result);
  }
  return result;
}

os_log_t sub_1907ECC7C()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

char *sub_1907ECCAC(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_190718FD4();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)sub_190732A30(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v20 = &v19[8 * v16];
    long long __p = v19;
    uint64_t v27 = v20;
    unint64_t v28 = v20;
    unint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unint64_t v23 = (char *)sub_190732A30(v8, v22);
        long long v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        uint64_t v27 = v20;
        unint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)long long v20 = *(void *)v3;
    unint64_t v28 = v20 + 8;
    uint64_t v4 = sub_1907ECEF0((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    char v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1907ECEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1907ECEF0(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

char *sub_1907ECFB8(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    os_log_t result = sub_19074C070(result, a4);
    for (uint64_t i = (void *)*((void *)v6 + 1); a2 != a3; a2 += 2)
    {
      *uint64_t i = *a2;
      uint64_t v8 = a2[1];
      i[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

void sub_1907ED044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_1907ED058(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_19074C070(result, a4);
    os_log_t result = sub_1907ED0E0((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1907ED0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1906C6BF0(&a9);
  _Unwind_Resume(a1);
}

void *sub_1907ED0E0(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1907ED170((uint64_t)v7);
  return v4;
}

uint64_t sub_1907ED170(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19074C1B4(a1);
  }
  return a1;
}

void sub_1907ED1A8(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t v9 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v9)
    {
      sub_19074C1F8(a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      sub_190718FD4();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_19074C070(a1, v11);
    for (uint64_t i = (uint64_t *)a1[1]; v6 != a3; v6 += 2)
    {
      uint64_t v13 = v6[1];
      *uint64_t i = *v6;
      i[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
LABEL_20:
    a1[1] = (uint64_t)i;
    return;
  }
  unint64_t v14 = (a1[1] - (uint64_t)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    sub_19074EF7C(a2, v15, v9);
    for (uint64_t i = (uint64_t *)a1[1]; v15 != a3; v15 += 2)
    {
      uint64_t v16 = v15[1];
      *uint64_t i = *v15;
      i[1] = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    goto LABEL_20;
  }
  uint64_t v17 = sub_19074EF7C(a2, a3, v9);
  for (uint64_t j = (void *)a1[1]; j != v17; j -= 2)
  {
    long long v19 = (std::__shared_weak_count *)*(j - 1);
    if (v19) {
      sub_1906BFE48(v19);
    }
  }
  a1[1] = (uint64_t)v17;
}

void sub_1907ED314(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 10;
        sub_1907ED3AC((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1907ED3AC(uint64_t a1, void **a2)
{
  uint64_t v3 = a2 + 6;
  sub_1906C6BF0(&v3);
  uint64_t v3 = a2 + 3;
  sub_1906C6BF0(&v3);
  uint64_t v3 = a2;
  sub_1906C6BF0(&v3);
}

void *sub_1907ED400(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        unint64_t v21 = &a3[2 * a5];
      }
      else
      {
        unint64_t v21 = &a3[2 * v20];
        a1[1] = (uint64_t)sub_19074C0EC((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_19074DCD0((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      sub_19074E28C((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        sub_190718FD4();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        unint64_t v18 = (char *)sub_19074C0B4((uint64_t)v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      unint64_t v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      v26[3] = &v18[16 * v17];
      unint64_t v23 = &v22[2 * a5];
      do
      {
        *unint64_t v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      v26[2] = v23;
      uint64_t v5 = (void *)sub_19074DD34(a1, v26, v5);
      sub_19074DC48(v26);
    }
  }
  return v5;
}

void sub_1907ED58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_1907ED5AC(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      unint64_t v7 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v6;
      if (v7) {
        sub_1906BFE48(v7);
      }
      ++v5;
      a3 += 16;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1907ED610(uint64_t *a1, void **a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_190718FD4();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_190718124();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v2];
  unint64_t v17 = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  uint64_t v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_1907ED788(v8, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  unint64_t v12 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  uint64_t v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  uint64_t v19 = v15;
  unint64_t v17 = (char *)v14.i64[0];
  sub_19074E7D4((uint64_t)&v17);
  return v10;
}

void sub_1907ED774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074E7D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1907ED788(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_19074C070(result, a4);
    os_log_t result = sub_1907ED810((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1907ED7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1906C6BF0(&a9);
  _Unwind_Resume(a1);
}

void *sub_1907ED810(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_1907ED8A0((uint64_t)v7);
  return v4;
}

uint64_t sub_1907ED8A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19074C1B4(a1);
  }
  return a1;
}

void *sub_1907ED8D8(uint64_t a1, void **a2)
{
  unint64_t v3 = *(void **)(a1 + 8);
  *unint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  os_log_t result = sub_1907ED058(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1907ED924(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1907ED92C(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_190718FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_1907180DC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_1907ED058(v11, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v15 += 24;
  sub_1907EDA44(a1, v14);
  uint64_t v12 = a1[1];
  sub_1907EDBE4(v14);
  return v12;
}

void sub_1907EDA30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1907EDBE4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907EDA44(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1907EDABC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1907EDABC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1907EDB60((uint64_t)v11);
  return v9;
}

uint64_t sub_1907EDB60(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1907EDB98(a1);
  }
  return a1;
}

void sub_1907EDB98(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_1906C6BF0(&v3);
    v1 += 3;
  }
}

void **sub_1907EDBE4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1907EDC18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_1906C6BF0(&v5);
  }
}

void sub_1907EDC6C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_19074C29C((uint64_t *)a1);
    if (a4 >> 60) {
      sub_190718FD4();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_19074C070((void *)a1, v12);
    long long v13 = sub_1907ED0E0(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    sub_19074E28C((uint64_t)&v20, a2, v15, v9);
    long long v13 = sub_1907ED0E0(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_19074E28C((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      uint64_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_1906BFE48(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_1907EDDB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1907EDDB8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void **sub_1907EDDC0(void **result, void *a2, uint64_t **a3, void **a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v8 = (uint64_t *)result;
    uint64_t v11 = result[2];
    uint64_t v9 = (uint64_t)(result + 2);
    uint64_t v10 = (uint64_t)v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        char v21 = &a3[3 * a5];
      }
      else
      {
        char v21 = &a3[(uint64_t)(v12 - (void)a2) >> 3];
        uint64_t result = (void **)sub_1907EE0EC(v9, v21, a4, *(void **)(v9 - 8));
        v8[1] = (uint64_t)result;
        if (v20 < 1) {
          return result;
        }
      }
      sub_1907EDFB8((uint64_t)v8, a2, v12, (uint64_t)&a2[3 * a5]);
      return (void **)sub_1907EE298((uint64_t)v26, v6, v21, (uint64_t)a2);
    }
    uint64_t v13 = *v8;
    unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *v8) >> 3);
    if (v14 > 0xAAAAAAAAAAAAAAALL) {
      sub_190718FD4();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
    uint64_t v17 = 2 * v16;
    if (2 * v16 <= v14) {
      uint64_t v17 = v14;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v18 = v17;
    }
    uint64_t v29 = v9;
    if (v18) {
      uint64_t v19 = (char *)sub_1907180DC(v9, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    unint64_t v22 = &v19[24 * v15];
    v26[0] = v19;
    v26[1] = v22;
    uint64_t v27 = v22;
    unint64_t v28 = &v19[24 * v18];
    uint64_t v23 = 3 * a5;
    uint64_t v24 = &v22[24 * a5];
    uint64_t v25 = 8 * v23;
    do
    {
      *(void *)unint64_t v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = 0;
      sub_1907ED058(v22, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      v22 += 24;
      v6 += 3;
      v25 -= 24;
    }
    while (v25);
    uint64_t v27 = v24;
    sub_1907EE038(v8, v26, a2);
    return sub_1907EDBE4(v26);
  }
  return result;
}

void sub_1907EDF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void *sub_1907EDFB8(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (void *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(void **)(a1 + 8);
    do
    {
      *uint64_t v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      v8[2] = v9[2];
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      v8 += 3;
      v9 += 3;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1907EE224((uint64_t)&v11, a2, v7, v6);
}

uint64_t sub_1907EE038(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_1907EDABC((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1907EE308(v7, (uint64_t)a3, a1[1], (void *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *sub_1907EE0EC(uint64_t a1, void **a2, void **a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1907ED058(v4, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
      unint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_1907EE1A0((uint64_t)v8);
  return v4;
}

void sub_1907EE18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1907EE1A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1907EE1D8(a1);
  }
  return a1;
}

void sub_1907EE1D8(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    uint64_t v3 = v1;
    sub_1906C6BF0(&v3);
  }
}

void *sub_1907EE224(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = (uint64_t *)(a4 - 24);
    uint64_t v7 = a3;
    do
    {
      sub_19074C29C(v6);
      long long v8 = *(_OWORD *)(v7 - 3);
      v7 -= 3;
      *(_OWORD *)uint64_t v6 = v8;
      v6[2] = v7[2];
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v6 -= 3;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t **sub_1907EE298(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != (uint64_t **)a4) {
        sub_1907EDC6C(a4, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 4);
      }
      v5 += 3;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_1907EE308(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a4;
  char v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *unint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      v4[2] = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    char v9 = v4;
  }
  char v7 = 1;
  sub_1907EE1A0((uint64_t)v6);
  return v4;
}

uint64_t sub_1907EE398(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1907EE410((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1907EE410(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1907EE4A4((uint64_t)v12);
  return v10;
}

uint64_t sub_1907EE4A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19074DC04(a1);
  }
  return a1;
}

uint64_t sub_1907EE4DC(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x333333333333333) {
    sub_190718FD4();
  }
  uint64_t v6 = a1 + 1;
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999) {
    unint64_t v7 = 0x333333333333333;
  }
  else {
    unint64_t v7 = v3;
  }
  unint64_t v22 = (uint64_t *)v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_1907EE750(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v19 = v7;
  v20.i64[0] = v7 + 80 * v2;
  unint64_t v21 = v7 + 80 * v8;
  sub_1907EE690(v20.i64[0], a2);
  uint64_t v9 = v20.i64[0];
  uint64_t v10 = v20.i64[0] + 80;
  v20.i64[1] = v20.i64[0] + 80;
  uint64_t v12 = a1->i64[0];
  unint64_t v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v11);
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v9 + v13;
      uint64_t v15 = v11 + v13;
      *(void *)(v14 - 80) = 0;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 64) = 0;
      *(_OWORD *)(v14 - 80) = *(_OWORD *)(v11 + v13 - 80);
      *(void *)(v14 - 64) = *(void *)(v11 + v13 - 64);
      *(void *)(v15 - 80) = 0;
      *(void *)(v15 - 72) = 0;
      *(void *)(v15 - 64) = 0;
      *(void *)(v14 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(_OWORD *)(v14 - 56) = *(_OWORD *)(v11 + v13 - 56);
      *(void *)(v14 - 40) = *(void *)(v11 + v13 - 40);
      *(void *)(v15 - 56) = 0;
      *(void *)(v15 - 48) = 0;
      *(void *)(v15 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(_OWORD *)(v14 - 32) = *(_OWORD *)(v11 + v13 - 32);
      *(void *)(v14 - 16) = *(void *)(v11 + v13 - 16);
      *(void *)(v15 - 32) = 0;
      *(void *)(v15 - 24) = 0;
      *(void *)(v15 - 16) = 0;
      *(void *)(v14 - 8) = *(void *)(v11 + v13 - 8);
      v13 -= 80;
    }
    while (v11 + v13 != v12);
    int64x2_t v16 = *a1;
    uint64_t v10 = v20.i64[1];
    v9 += v13;
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  int64x2_t v20 = v16;
  unint64_t v17 = a1[1].u64[0];
  a1[1].i64[0] = v21;
  unint64_t v21 = v17;
  unint64_t v19 = v16.i64[0];
  sub_1907EE798((uint64_t)&v19);
  return v10;
}

void sub_1907EE67C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1907EE798((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1907EE690(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_1907ECFB8((char *)a1, *(void **)a2, *(void **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_1907ED058((void *)(a1 + 24), *(void **)(a2 + 24), *(void **)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_1907ED058((void *)(a1 + 48), *(void **)(a2 + 48), *(void **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
  double result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1907EE724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906C6BF0((void ***)va);
  sub_1906C6BF0((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_1907EE750(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    sub_190718124();
  }
  return operator new(80 * a1);
}

uint64_t sub_1907EE798(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 80;
    sub_1907ED3AC(v4, (void **)(i - 80));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1907EE7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v8 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_1907ECFB8((char *)v4, *(void **)v6, *(void **)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4);
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      sub_1907ED058((void *)(v4 + 24), *(void **)(v6 + 24), *(void **)(v6 + 32), (uint64_t)(*(void *)(v6 + 32) - *(void *)(v6 + 24)) >> 4);
      *(void *)(v4 + 48) = 0;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 64) = 0;
      sub_1907ED058((void *)(v4 + 48), *(void **)(v6 + 48), *(void **)(v6 + 56), (uint64_t)(*(void *)(v6 + 56) - *(void *)(v6 + 48)) >> 4);
      *(void *)(v4 + 72) = *(void *)(v6 + 72);
      uint64_t v4 = v8 + 80;
      v8 += 80;
      v6 += 80;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1907EE8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v4 - 40) = v3;
  sub_1906C6BF0((void ***)(v4 - 40));
  *(void *)(v4 - 40) = v2;
  sub_1906C6BF0((void ***)(v4 - 40));
  sub_1907EE8FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1907EE8FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void ****)(a1 + 8);
    uint64_t v2 = *(void ****)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 10;
        sub_1907ED3AC(v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t sub_1907EE960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a3 + 48;
    do
    {
      if (v4 != v5 - 48)
      {
        sub_1907ED1A8((uint64_t *)(v5 - 48), *(uint64_t **)v4, *(uint64_t **)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 4);
        sub_1907EDC6C(v5 - 24, *(uint64_t **)(v4 + 24), *(uint64_t **)(v4 + 32), (uint64_t)(*(void *)(v4 + 32) - *(void *)(v4 + 24)) >> 4);
        sub_1907EDC6C(v5, *(uint64_t **)(v4 + 48), *(uint64_t **)(v4 + 56), (uint64_t)(*(void *)(v4 + 56) - *(void *)(v4 + 48)) >> 4);
      }
      *(void *)(v5 + 24) = *(void *)(v4 + 72);
      v4 += 80;
      v5 += 80;
    }
    while (v4 != a2);
    return v5 - 48;
  }
  return a3;
}

void sub_1907EEA00(void *a1)
{
  if (a1)
  {
    sub_1907EEA00(*a1);
    sub_1907EEA00(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[7];
    if (v2) {
      sub_1906BFE48(v2);
    }
    operator delete(a1);
  }
}

void sub_1907EEA58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE003228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1907EEA78(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE003228;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_1907EEACC(uint64_t a1)
{
  sub_1907EEAF8((uint64_t)&v1, a1 + 24);
}

void sub_1907EEAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void **)(a2 + 48);
  sub_1906C6BF0(&v5);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 40);
  if (v3) {
    sub_1906BFE48(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 24);
  if (v4) {
    sub_1906BFE48(v4);
  }
}

uint64_t sub_1907EEB48(uint64_t a1, double *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a4;
  if (v8)
  {
    sub_1906BFE48(v8);
    uint64_t v5 = *(void *)a1;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v12 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)buf, 2u);
    }
    double v10 = 0.0;
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
LABEL_88:
    }
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    goto LABEL_18;
  }
  uint64_t v9 = (*(void *)(v5 + 144) - *(void *)(v5 + 136)) >> 4;
  if ((int)v9 <= 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v14 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)buf, 2u);
    }
    double v10 = 0.0;
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_85;
    }
    goto LABEL_89;
  }
  double v10 = 0.0;
  if (v9 == 1)
  {
    char v11 = 1;
    goto LABEL_45;
  }
  sub_19082373C(v5);
  if (v9 - 1 != (uint64_t)(*(void *)(v5 + 168) - *(void *)(v5 + 160)) >> 3)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    unint64_t v22 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_85;
    }
    goto LABEL_89;
  }
  sub_19082373C(v5);
  uint64_t v15 = *(double **)(v5 + 160);
  int64x2_t v16 = *(double **)(v5 + 168);
  if (v15 != v16)
  {
    double v17 = 0.0;
    int v18 = 2;
    uint64_t v19 = 24;
    while (1)
    {
      double v20 = *v15 / *(double *)(v5 + 40);
      if (vabdd_f64(0.5, v17 + v20) < 0.000001) {
        break;
      }
      if (v17 + v20 > 0.5)
      {
        double v34 = (0.5 - v17) / v20;
        uint64_t v35 = (double *)(*(void *)(v5 + 136) + v19);
        double v36 = *(v35 - 2);
        double v37 = *(v35 - 3);
        double v38 = *v35;
        double v39 = v36 + 360.0;
        if (v36 >= 0.0) {
          double v39 = *(v35 - 2);
        }
        double v40 = v38 + 360.0;
        if (v38 >= 0.0) {
          double v40 = *v35;
        }
        double v41 = v40 - v39;
        if (v41 <= 180.0)
        {
          if (v41 < -180.0) {
            double v41 = v41 + 360.0;
          }
        }
        else
        {
          double v41 = v41 + -360.0;
        }
        double v43 = *(v35 - 1);
        double v10 = fmod(v36 + v41 * v34, 360.0);
        if (v10 <= -180.0)
        {
          double v10 = v10 + 360.0;
        }
        else if (v10 > 180.0)
        {
          double v10 = v10 + -360.0;
        }
        double v23 = v37 + (v43 - v37) * v34;
        BOOL v31 = a2;
        double v32 = v37;
        double v33 = v36;
        double v29 = v43;
        double v30 = v38;
LABEL_82:
        sub_1906DA778(v31, buf, v45, &v44, v32, v33, 0.0, v29, v30, 0.0);
        char v11 = 1;
        if (v4) {
          goto LABEL_46;
        }
        goto LABEL_47;
      }
      ++v15;
      v19 += 16;
      ++v18;
      double v17 = v17 + v20;
      if (v15 == v16) {
        goto LABEL_32;
      }
    }
    if (v18 < (int)v9)
    {
      uint64_t v27 = (double *)(*(void *)(v5 + 136) + v19);
      double v23 = *(v27 - 1);
      double v10 = *v27;
      sub_1906DA778(a2, buf, v45, &v44, *(v27 - 3), *(v27 - 2), 0.0, v23, *v27, 0.0);
      uint64_t v28 = *(void *)(v5 + 136) + v19;
      double v29 = *(double *)(v28 + 8);
      double v30 = *(double *)(v28 + 16);
      BOOL v31 = a2;
      double v32 = v23;
      double v33 = v10;
      goto LABEL_82;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v42 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)buf, 2u);
    }
    double v10 = 0.0;
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_44;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      goto LABEL_88;
    }
LABEL_18:
    LOWORD(v45[0]) = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v13);
    goto LABEL_86;
  }
LABEL_32:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  unint64_t v21 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)buf, 2u);
  }
  if (!sub_1906CB57C(115, 2)) {
    goto LABEL_44;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6C0 != -1) {
LABEL_89:
  }
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
LABEL_85:
  LOWORD(v45[0]) = 0;
  uint64_t v13 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v13);
LABEL_86:
  if (v13 != (char *)buf) {
    free(v13);
  }
LABEL_44:
  char v11 = 0;
LABEL_45:
  double v23 = 0.0;
  if (v4) {
LABEL_46:
  }
    sub_1906BFE48(v4);
LABEL_47:
  if (v11)
  {
    *(double *)(a1 + 24) = v23;
    *(double *)(a1 + 32) = v10;
    return 1;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
  }
  uint64_t v25 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_ERROR, "CLTSP,Unable to find mid-point", (uint8_t *)buf, 2u);
  }
  uint64_t result = sub_1906CB57C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    LOWORD(v45[0]) = 0;
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLRouteRoad::initialize(CLDistanceCalc &, const CLMapRoadPtr)", "CoreLocation: %s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
    return 0;
  }
  return result;
}

void sub_1907EF538(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1907EF558(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a2;
  if (!v3) {
    return 0;
  }
  uint64_t result = *a1;
  if (result)
  {
    if (*(unsigned char *)(result + 117)
      || (~*(_DWORD *)(result + 112) & 0x7FFFFFFF) == 0
      || (uint64_t v6 = *v3, *(unsigned char *)(*v3 + 116))
      || (~*(_DWORD *)(v6 + 108) & 0x7FFFFFFF) == 0
      || *(unsigned char *)(v6 + 117))
    {
      return sub_190824938(result, v3);
    }
    else
    {
      int v7 = *(_DWORD *)(v6 + 112);
      uint64_t result = sub_190824938(result, v3);
      if (result && (v7 & 0x7FFFFFFF) != 0x7FFFFFFF)
      {
        int v8 = *(_DWORD *)(*a1 + 112);
        uint64_t v9 = **a2;
        return v8 == *(_DWORD *)(v9 + 108) || v8 == *(_DWORD *)(v9 + 112);
      }
    }
  }
  return result;
}

double sub_1907EF644(uint64_t a1, int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  if (v3 != a2)
  {
    signed int v7 = 0;
    goto LABEL_5;
  }
  uint64_t v5 = (*(void *)(v4 + 144) - *(void *)(v4 + 136)) >> 4;
  double v6 = -1.0;
  signed int v7 = v5 - 2;
  if ((int)v5 >= 2) {
LABEL_5:
  }
    double v6 = sub_190823B08(v4, v7);
  double v8 = 180.0;
  if (*(unsigned char *)(a1 + 16)) {
    double v8 = 0.0;
  }
  return v6 - v8;
}

void sub_1907EF6B4(uint64_t *a1, uint64_t **a2)
{
  if (*a2)
  {
    uint64_t v2 = **a2;
    if (v2)
    {
      unint64_t v8 = *(void *)(v2 + 8);
      uint64_t v4 = sub_1907F3DD8(a1, v8, (uint64_t *)&v8);
      double v6 = *a2;
      uint64_t v5 = a2[1];
      if (v5) {
        atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
      }
      signed int v7 = (std::__shared_weak_count *)v4[4];
      v4[3] = v6;
      v4[4] = v5;
      if (v7) {
        sub_1906BFE48(v7);
      }
    }
  }
}

void sub_1907EF724(uint64_t *a1, uint64_t a2)
{
  if (!a2) {
    return;
  }
  if (!*(void *)a2) {
    return;
  }
  uint64_t v3 = a1[3];
  if (!v3) {
    return;
  }
  unint64_t v4 = *(void *)(*(void *)a2 + 8);
  if (!sub_1907F422C(a1, v4)) {
    return;
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (*(void *)&v5 <= v4) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v9) {
    return;
  }
  double v10 = *v9;
  if (!*v9) {
    return;
  }
  uint64_t v11 = *(void *)&v5 - 1;
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v12 == v4) {
      break;
    }
    if (v6.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v5) {
        v12 %= *(void *)&v5;
      }
    }
    else
    {
      v12 &= v11;
    }
    if (v12 != v7) {
      return;
    }
LABEL_21:
    double v10 = (uint64_t *)*v10;
    if (!v10) {
      return;
    }
  }
  if (v10[2] != v4) {
    goto LABEL_21;
  }
  uint64_t v13 = (void *)*v10;
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v5) {
      v4 %= *(void *)&v5;
    }
  }
  else
  {
    v4 &= v11;
  }
  uint64_t v14 = *(uint64_t **)(v8 + 8 * v4);
  do
  {
    uint64_t v15 = v14;
    uint64_t v14 = (uint64_t *)*v14;
  }
  while (v14 != v10);
  if (v15 == a1 + 2) {
    goto LABEL_40;
  }
  unint64_t v16 = v15[1];
  if (v6.u32[0] > 1uLL)
  {
    if (v16 >= *(void *)&v5) {
      v16 %= *(void *)&v5;
    }
  }
  else
  {
    v16 &= v11;
  }
  if (v16 == v4)
  {
LABEL_42:
    if (v13)
    {
      unint64_t v17 = v13[1];
      goto LABEL_44;
    }
  }
  else
  {
LABEL_40:
    if (!v13) {
      goto LABEL_41;
    }
    unint64_t v17 = v13[1];
    if (v6.u32[0] > 1uLL)
    {
      unint64_t v18 = v13[1];
      if (v17 >= *(void *)&v5) {
        unint64_t v18 = v17 % *(void *)&v5;
      }
    }
    else
    {
      unint64_t v18 = v17 & v11;
    }
    if (v18 != v4)
    {
LABEL_41:
      *(void *)(v8 + 8 * v4) = 0;
      uint64_t v13 = (void *)*v10;
      goto LABEL_42;
    }
LABEL_44:
    if (v6.u32[0] > 1uLL)
    {
      if (v17 >= *(void *)&v5) {
        v17 %= *(void *)&v5;
      }
    }
    else
    {
      v17 &= v11;
    }
    if (v17 != v4)
    {
      *(void *)(*a1 + 8 * v17) = v15;
      uint64_t v13 = (void *)*v10;
    }
  }
  *uint64_t v15 = (uint64_t)v13;
  uint64_t *v10 = 0;
  a1[3] = v3 - 1;
  uint64_t v19 = (std::__shared_weak_count *)v10[4];
  if (v19) {
    sub_1906BFE48(v19);
  }

  operator delete(v10);
}

BOOL sub_1907EF940(uint64_t a1, void *a2)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v4) {
    sub_1906BFE48(v4);
  }
  if (!*(void *)(a1 + 24)) {
    return 0;
  }
  int8x8_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    double v6 = -1.0;
    while (1)
    {
      uint64_t v7 = v5[3];
      if (v6 < 0.0) {
        break;
      }
      if (v7)
      {
        double v8 = *(double *)(v7 + 56) + *(double *)(v7 + 64);
        if (v8 < v6) {
          goto LABEL_10;
        }
      }
LABEL_15:
      int8x8_t v5 = (void *)*v5;
      if (!v5) {
        return v6 >= 0.0;
      }
    }
    double v8 = *(double *)(v7 + 56) + *(double *)(v7 + 64);
LABEL_10:
    uint64_t v9 = v5[4];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    double v10 = (std::__shared_weak_count *)a2[1];
    *a2 = v7;
    a2[1] = v9;
    if (v10) {
      sub_1906BFE48(v10);
    }
    double v6 = v8;
    goto LABEL_15;
  }
  double v6 = -1.0;
  return v6 >= 0.0;
}

void *sub_1907EFA0C(void *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (a3 && *(void *)a3 && (unint64_t v5 = *(void *)(*(void *)a3 + 8), (result = sub_1907F422C(a2, v5)) != 0))
  {
    unint64_t v7 = v5;
    uint64_t result = sub_1907F3DD8(a2, v5, (uint64_t *)&v7);
    uint64_t v6 = result[4];
    *uint64_t v3 = result[3];
    v3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

BOOL sub_1907EFA94(void *a1)
{
  return a1[6] != a1[7] && (v1 = (void *)a1[2]) != 0 && (uint64_t v2 = (void *)a1[4]) != 0 && *v1 && *v2 != 0;
}

double sub_1907EFADC(void *a1)
{
  double v2 = 0.0;
  if (sub_1907EFA94(a1))
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = a1[7] - v3;
    if (v4)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      unint64_t v7 = v4 >> 4;
      do
      {
        if (!v6
          && (uint64_t v8 = a1[2], **(void **)v8 == **(void **)v3)
          && *(void *)(*(void *)v8 + 8) == *(void *)(*(void *)v3 + 8))
        {
          sub_1907EFBDC(v8);
        }
        else
        {
          if (v6 != v7 - 1)
          {
            uint64_t v11 = *(void *)(v3 + v5);
LABEL_13:
            sub_19082373C(v11);
            double v9 = *(double *)(v11 + 40);
            goto LABEL_14;
          }
          uint64_t v10 = a1[4];
          uint64_t v11 = *(void *)(v3 + v5);
          if (**(void **)v10 != *(void *)v11 || *(void *)(*(void *)v10 + 8) != *(void *)(v11 + 8)) {
            goto LABEL_13;
          }
          sub_1907EFC40(v10);
        }
LABEL_14:
        double v2 = v2 + v9;
        ++v6;
        uint64_t v3 = a1[6];
        unint64_t v7 = (a1[7] - v3) >> 4;
        v5 += 16;
      }
      while (v7 > v6);
    }
  }
  return v2;
}

uint64_t sub_1907EFBDC(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(unsigned char *)(result + 65))
  {
    if (!v1) {
      return result;
    }
  }
  else if (!v1)
  {
    return result;
  }
  return sub_19082373C(*(void *)result);
}

uint64_t sub_1907EFC40(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  if (*(unsigned char *)(result + 65))
  {
    if (!v1) {
      return result;
    }
  }
  else if (!v1)
  {
    return result;
  }
  return sub_19082373C(*(void *)result);
}

void sub_1907EFCA4(uint64_t *a1)
{
  a1[9] = 0;
  if (*a1 != a1[1])
  {
    *((double *)a1 + 9) = sub_1907EFD54((uint64_t)a1);
    uint64_t v2 = a1[1];
    *(void *)&long long v4 = *(void *)(v2 - 16);
    uint64_t v3 = *(void *)(v2 - 8);
    *((void *)&v4 + 1) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    sub_19074C1F8(a1);
    sub_1907EC7B0(a1, &v4);
    *((double *)a1 + 9) = *((double *)a1 + 9) - sub_1907EFADC((void *)v4);
    if (*((void *)&v4 + 1)) {
      sub_1906BFE48(*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

void sub_1907EFD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_1907EFD54(uint64_t a1)
{
  double v1 = *(double *)(a1 + 72);
  uint64_t v2 = *(void ***)a1;
  uint64_t v3 = *(void ***)(a1 + 8);
  while (v2 != v3)
  {
    if (*v2) {
      double v1 = v1 + sub_1907EFADC(*v2);
    }
    v2 += 2;
  }
  return v1;
}

BOOL sub_1907EFDA4(void **a1, long long *a2)
{
  uint64_t v2 = *(void *)a2;
  if (*(void *)a2)
  {
    if (*(void *)(v2 + 16) && *(void *)(v2 + 32))
    {
      uint64_t v5 = (std::__shared_weak_count *)*((void *)a2 + 1);
      v7[0] = *(void *)a2;
      v7[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1907EFE58(a1, (uint64_t)v7);
      if (v5) {
        sub_1906BFE48(v5);
      }
    }
    if (sub_1907EFA94(*(void **)a2)) {
      sub_1907EC7B0((uint64_t *)a1, a2);
    }
  }
  return v2 != 0;
}

void sub_1907EFE40(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1907EFE58(void **result, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v3 = result;
    sub_190745090((uint64_t *)result + 3, (long long *)(*(void *)a2 + 16));
    long long v4 = (long long *)(*(void *)a2 + 32);
    return sub_190745090((uint64_t *)v3 + 6, v4);
  }
  return result;
}

unint64_t sub_1907EFEB8(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = *a1;
    do
    {
      if (*(void *)v5) {
        v4 += (*(void *)(*(void *)v5 + 56) - *(void *)(*(void *)v5 + 48)) >> 4;
      }
      v5 += 16;
    }
    while (v5 != v3);
  }
  if (v4 < a2) {
    return 0;
  }
  unint64_t result = (unint64_t)(v3 - v2) >> 4;
  uint64_t v7 = (result & ((int)result >> 31)) - 1;
  for (unsigned int i = result - 1; ; --i)
  {
    BOOL v9 = __OFSUB__(result, 1);
    unint64_t result = (result - 1);
    if (((result & 0x80000000) != 0) != v9) {
      break;
    }
    uint64_t v10 = *(void *)(v2 + 16 * i);
    if (v10) {
      a2 -= (*(void *)(v10 + 56) - *(void *)(v10 + 48)) >> 4;
    }
    if (a2 <= 0) {
      return result;
    }
  }
  return v7;
}

uint64_t sub_1907EFF60(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = (a1[1] - *a1) >> 4;
  if (v3 <= a2 + 1) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v5 = ~(uint64_t)a2 + v3;
  uint64_t v6 = v2 + 16 * a2 + 16;
  do
  {
    if (*(void *)v6) {
      uint64_t result = result
    }
             + ((*(void *)(*(void *)v6 + 56) - *(void *)(*(void *)v6 + 48)) >> 4);
    v6 += 16;
    --v5;
  }
  while (v5);
  return result;
}

unint64_t *sub_1907EFFC0(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = result[2];
  uint64_t v7 = (void *)result[1];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *result;
    uint64_t v10 = (uint64_t)((uint64_t)v7 - *result) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_190718FD4();
    }
    uint64_t v12 = v6 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    unint64_t v22 = result + 2;
    if (v13 >> 60) {
      sub_190718124();
    }
    uint64_t v14 = (char *)operator new(16 * v13);
    uint64_t v15 = &v14[16 * v10];
    *(void *)uint64_t v15 = a2;
    *((void *)v15 + 1) = a3;
    if (a3)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
      unint64_t v9 = *v5;
      uint64_t v7 = (void *)v5[1];
    }
    uint64_t v8 = v15 + 16;
    if (v7 == (void *)v9)
    {
      int64x2_t v17 = vdupq_n_s64(v9);
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v7 - 1);
        v7 -= 2;
        *((_OWORD *)v15 - 1) = v16;
        v15 -= 16;
        *uint64_t v7 = 0;
        v7[1] = 0;
      }
      while (v7 != (void *)v9);
      int64x2_t v17 = *(int64x2_t *)v5;
    }
    *unint64_t v5 = (unint64_t)v15;
    v5[1] = (unint64_t)v8;
    int64x2_t v20 = v17;
    unint64_t v18 = v5[2];
    v5[2] = (unint64_t)&v14[16 * v13];
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = (unint64_t *)sub_19074E834((uint64_t)&v19);
  }
  else
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v7 + 2;
  }
  v5[1] = (unint64_t)v8;
  return result;
}

void sub_1907F00FC(uint64_t *a1, double *a2)
{
  uint64_t v2 = *a1;
  if ((unint64_t)(a1[1] - *a1) >= 0x11)
  {
    for (uint64_t i = 0; ; ++i)
    {
      long long v6 = *(_OWORD *)(v2 + 16 * i);
      long long v27 = v6;
      long long v7 = v6;
      if (*((void *)&v6 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v2 = *a1;
      }
      long long v8 = *(_OWORD *)(v2 + 16 * i + 16);
      long long v26 = v8;
      unint64_t v9 = (std::__shared_weak_count *)*((void *)&v8 + 1);
      if (*((void *)&v8 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (uint64_t *)v8;
      if (!(void)v8) {
        goto LABEL_16;
      }
      uint64_t v11 = *(void *)v7;
      if (!*(void *)v7) {
        goto LABEL_16;
      }
      if (*(unsigned char *)(v11 + 116)) {
        break;
      }
      if ((~*(_DWORD *)(v11 + 108) & 0x7FFFFFFF) == 0) {
        break;
      }
      uint64_t v12 = *(void *)v8;
      if (*(unsigned char *)(*(void *)v8 + 116) || (~*(_DWORD *)(v12 + 108) & 0x7FFFFFFF) == 0 || *(unsigned char *)(v12 + 117)) {
        break;
      }
      int v23 = *(_DWORD *)(v12 + 112);
      int v13 = sub_1908248D4(v11, (uint64_t *)v8);
      if ((~v23 & 0x7FFFFFFF) != 0) {
        int v24 = v13;
      }
      else {
        int v24 = 0;
      }
      if (v24 != 1) {
        goto LABEL_15;
      }
      int v25 = *(_DWORD *)(*(void *)v7 + 108);
      if (v25 == *(_DWORD *)(*v10 + 108) || v25 == *(_DWORD *)(*v10 + 112)) {
        goto LABEL_24;
      }
LABEL_16:
      if ((sub_1907EF558((uint64_t *)v7, (uint64_t **)&v26) & 1) == 0)
      {
        uint64_t v15 = *(void *)v7;
        uint64_t v16 = *v10;
        double v17 = sub_1906DA618(a2, **(double **)(v15 + 136), *(double *)(*(void *)(v15 + 136) + 8), **(double **)(*v10 + 136), *(double *)(*(void *)(*v10 + 136) + 8), 0.0);
        double v18 = sub_1906DA618(a2, **(double **)(v15 + 136), *(double *)(*(void *)(v15 + 136) + 8), *(double *)(*(void *)(v16 + 144) - 16), *(double *)(*(void *)(v16 + 144) - 8), 0.0);
        if (v18 >= v17) {
          double v19 = v17;
        }
        else {
          double v19 = v18;
        }
        double v20 = sub_1906DA618(a2, *(double *)(*(void *)(v15 + 144) - 16), *(double *)(*(void *)(v15 + 144) - 8), **(double **)(v16 + 136), *(double *)(*(void *)(v16 + 136) + 8), 0.0);
        double v21 = sub_1906DA618(a2, *(double *)(*(void *)(v15 + 144) - 16), *(double *)(*(void *)(v15 + 144) - 8), *(double *)(*(void *)(v16 + 144) - 16), *(double *)(*(void *)(v16 + 144) - 8), 0.0);
        if (v21 >= v20) {
          double v21 = v20;
        }
        if (v19 >= v21) {
          goto LABEL_26;
        }
LABEL_24:
        char v14 = 0;
        goto LABEL_25;
      }
      char v14 = 1;
LABEL_25:
      *(unsigned char *)(v7 + 16) = v14;
LABEL_26:
      if (i + 1 == ((a1[1] - *a1) >> 4) - 1 && sub_1907EF558(v10, (uint64_t **)&v27)) {
        *((unsigned char *)v10 + 16) = 0;
      }
      if (v9) {
        sub_1906BFE48(v9);
      }
      if (*((void *)&v7 + 1)) {
        sub_1906BFE48(*((std::__shared_weak_count **)&v7 + 1));
      }
      uint64_t v2 = *a1;
      unint64_t v22 = i + 2;
      if (v22 >= (a1[1] - *a1) >> 4) {
        return;
      }
    }
    LOBYTE(v13) = sub_1908248D4(v11, (uint64_t *)v8);
LABEL_15:
    if (v13) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
}

void sub_1907F0370(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_1906BFE48(v2);
  }
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907F0394(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t ***a4, uint64_t *a5)
{
  *(void *)((char *)&v140[199] + 4) = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *(uint64_t ***)a3;
  uint64_t v113 = *(char **)(a3 + 8);
  if (*(char **)a3 == v113) {
    return;
  }
  long long v6 = a4;
  long long v7 = *a4;
  long long v8 = a4[1];
  if (*a4 == v8) {
    return;
  }
  unint64_t v9 = a5;
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  int v116 = 0;
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  long long v127 = xmmword_1908820F0;
  int v115 = ((unint64_t)((char *)v8 - (char *)v7) >> 4) * ((unint64_t)(v113 - (char *)v5) >> 4);
  uint64_t v130 = 0x3FF0000000000000;
  double v12 = -1.0;
  do
  {
    if (*v5)
    {
      if (**v5)
      {
        char v14 = *v6;
        int v13 = v6[1];
        if (*v6 != v13)
        {
          unint64_t v112 = v5;
          uint64_t v117 = v6[1];
          while (1)
          {
            sub_19074C1F8(v11);
            uint64_t v15 = *v14;
            if (!*v14) {
              break;
            }
            if (!*v15)
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
              }
              long long v27 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
              {
                uint64_t v28 = (*v14)[2];
                *(_DWORD *)long long buf = 134349056;
                *(void *)&uint8_t buf[4] = v28;
                _os_log_impl(&dword_1906B8000, v27, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,construcRouteCandidates,dest road is null", buf, 0xCu);
              }
              if (!sub_1906CB57C(115, 0)) {
                goto LABEL_142;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
              }
              uint64_t v29 = (*v14)[2];
              *(_DWORD *)double v133 = 134349056;
              *(void *)&v133[4] = v29;
              long long v26 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v26);
              goto LABEL_91;
            }
            if (v12 >= 0.0)
            {
              double v30 = fmax(v12 * 0.25, 200.0);
              if (v30 < 300.0) {
                double v30 = 300.0;
              }
              double v24 = v12 + v30;
            }
            else
            {
              uint64_t v16 = *v5;
              double v17 = *((double *)*v5 + 3);
              double v18 = *((double *)v15 + 3);
              double v19 = vabdd_f64(*((double *)v15 + 2), *((double *)*v5 + 2));
              int v20 = *(_DWORD *)(*v10 + 152);
              double v21 = 66.6;
              if (v20 == 3) {
                double v21 = 30.0;
              }
              if (v20 == 2) {
                double v22 = 13.3;
              }
              else {
                double v22 = v21;
              }
              *(void *)long long buf = 0;
              *(void *)double v133 = 0;
              sub_190839A78((double *)&v127, (double *)buf, (double *)v133, v17, *((double *)v16 + 4), 0.0, *((double *)v16 + 5), v18, *((double *)v15 + 4));
              double v23 = (fabs(*(double *)buf) + fabs(*(double *)v133)) * 3.0;
              if (v23 >= v19 * v22) {
                double v24 = v19 * v22;
              }
              else {
                double v24 = v23;
              }
            }
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
            }
            BOOL v31 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v32 = v11[5];
              uint64_t v33 = v11[8];
              *(_DWORD *)long long buf = 67241472;
              *(_DWORD *)&uint8_t buf[4] = ++v116;
              *(_WORD *)&uint8_t buf[8] = 1026;
              *(_DWORD *)&buf[10] = v115;
              *(_WORD *)&unsigned char buf[14] = 2050;
              *(double *)&buf[16] = v12;
              *(_WORD *)uint64_t v138 = 2050;
              *(double *)&v138[2] = v24;
              *(_WORD *)uint64_t v139 = 2050;
              *(void *)&v139[2] = v32;
              LOWORD(v140[0]) = 2050;
              *(void *)((char *)v140 + 2) = v33;
              _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_DEBUG, "CLTSP,construcRouteCandidates,processing,%{public}d/%{public}d,minRouteLength,%{public}.1lf,maxRouteLength,%{public}.1lf,processingTimeMSec,%{public}.2lf,cumulativeProcessingTimeMSec,%{public}.2lf", buf, 0x36u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
              }
              uint64_t v81 = v11[5];
              uint64_t v82 = v11[8];
              *(_DWORD *)double v133 = 67241472;
              *(_DWORD *)&v133[4] = ++v116;
              *(_WORD *)&v133[8] = 1026;
              *(_DWORD *)&v133[10] = v115;
              *(_WORD *)&v133[14] = 2050;
              *(double *)&v133[16] = v12;
              *(_WORD *)BOOL v134 = 2050;
              *(double *)&v134[2] = v24;
              *(_WORD *)int v135 = 2050;
              *(void *)&v135[2] = v81;
              LOWORD(v136[0]) = 2050;
              *(void *)((char *)v136 + 2) = v82;
              BOOL v83 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v83);
              if (v83 != (char *)buf) {
                free(v83);
              }
            }
            uint64_t v34 = *v10;
            if (*(_DWORD *)(*v10 + 152) != 1)
            {
              double v43 = *v14;
              *(_OWORD *)double v133 = *(_OWORD *)(*v14 + 3);
              double v44 = *v5;
              double v45 = *((double *)*v5 + 2);
              uint64_t v46 = (std::__shared_weak_count *)v10[1];
              v123[0] = v34;
              v123[1] = (uint64_t)v46;
              uint64_t v47 = v43;
              uint64_t v48 = v44;
              if (v46)
              {
                atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
                uint64_t v48 = *v5;
                uint64_t v47 = *v14;
              }
              char v49 = sub_1906BB778((uint64_t)v11, (double *)&v127, v44, v43, v123, (double *)v133, *(uint64_t *)&v24, 1u, v45, *((double *)v48 + 6), *((double *)v47 + 6));
              if (v46) {
                sub_1906BFE48(v46);
              }
              if (v49)
              {
                int v13 = v117;
LABEL_71:
                uint64_t v121 = *v5;
                uint64_t v50 = (std::__shared_weak_count *)v5[1];
                uint64_t v122 = v50;
                if (v50) {
                  atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v51 = (std::__shared_weak_count *)v14[1];
                uint64_t v119 = *v14;
                uint64_t v120 = v51;
                if (v51) {
                  atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                double v52 = sub_1907F17F8(v11, (uint64_t *)&v121, (uint64_t *)&v119);
                if (v120) {
                  sub_1906BFE48(v120);
                }
                if (v122) {
                  sub_1906BFE48(v122);
                }
                if (v52 >= 0.0)
                {
                  long long v131 = 0uLL;
                  uint64_t v132 = 0;
                  uint64_t v53 = (long long **)*v11;
                  uint64_t v54 = (long long **)v11[1];
                  while (v53 != v54)
                  {
                    sub_1907458E0((uint64_t *)&v131, *v53);
                    v53 += 2;
                  }
                  uint64_t v58 = *v5;
                  double v59 = (std::__shared_weak_count *)v5[1];
                  double v60 = (char *)operator new(0x60uLL);
                  uint64_t v61 = v60;
                  *((void *)v60 + 1) = 0;
                  *((void *)v60 + 2) = 0;
                  *(void *)double v60 = &unk_1EE003228;
                  if (v59) {
                    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v62 = *v14;
                  uint64_t v63 = (std::__shared_weak_count *)v14[1];
                  if (v63) {
                    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  *(_OWORD *)(v60 + 72) = 0u;
                  *((_DWORD *)v60 + 8) = 0;
                  *(_OWORD *)(v60 + 40) = 0u;
                  *(_OWORD *)(v60 + 56) = 0u;
                  *((void *)v60 + 11) = 0;
                  *((double *)v60 + 3) = v52;
                  if (v59)
                  {
                    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
                    *((void *)v60 + 6) = v59;
                  }
                  else
                  {
                    *((void *)v60 + 6) = 0;
                  }
                  *((void *)v60 + 5) = v58;
                  if (v63)
                  {
                    atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
                    uint64_t v64 = (std::__shared_weak_count *)*((void *)v60 + 8);
                    *((void *)v61 + 7) = v62;
                    *((void *)v61 + 8) = v63;
                    if (v64) {
                      sub_1906BFE48(v64);
                    }
                  }
                  else
                  {
                    *((void *)v60 + 8) = 0;
                    *((void *)v60 + 7) = v62;
                  }
                  BOOL v114 = v63;
                  uint64_t v65 = v6;
                  sub_19074E138((uint64_t)(v61 + 72), (uint64_t *)v131, *((uint64_t **)&v131 + 1), (uint64_t)(*((void *)&v131 + 1) - v131) >> 4);
                  uint64_t v66 = v61 + 24;
                  *((_DWORD *)v61 + 8) = 0;
                  if (sub_1907EFA94((void *)v61 + 3))
                  {
                    unint64_t v68 = (uint64_t *)*((void *)v61 + 9);
                    uint64_t v67 = (uint64_t *)*((void *)v61 + 10);
                    if (v68 != v67)
                    {
                      uint64_t v69 = 0;
                      uint64_t v70 = 0;
                      do
                      {
                        if (v69)
                        {
                          uint64_t v71 = *v68;
                          if (*v68)
                          {
                            uint64_t v72 = (*(void *)(v69 + 144) - *(void *)(v69 + 136)) >> 4;
                            if ((int)v72 >= 2)
                            {
                              double v73 = sub_190823B08(v69, (int)v72 - 2);
                              uint64_t v71 = *v68;
                            }
                            else
                            {
                              double v73 = -1.0;
                            }
                            double v74 = sub_190823B08(v71, 0);
                            double v75 = fmod(v73 - v74, 360.0);
                            if (v75 < 0.0) {
                              double v75 = v75 + 360.0;
                            }
                            if (v75 > 180.0) {
                              double v75 = v75 + -360.0;
                            }
                            if (fabs(v75) > 30.0) {
                              ++*((_DWORD *)v61 + 8);
                            }
                          }
                        }
                        uint64_t v69 = *v68;
                        uint64_t v76 = (std::__shared_weak_count *)v68[1];
                        if (v76) {
                          atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        if (v70) {
                          sub_1906BFE48(v70);
                        }
                        v68 += 2;
                        uint64_t v70 = v76;
                      }
                      while (v68 != v67);
                      unint64_t v9 = a5;
                      uint64_t v66 = v61 + 24;
                      if (v76) {
                        sub_1906BFE48(v76);
                      }
                    }
                  }
                  if (v114) {
                    sub_1906BFE48(v114);
                  }
                  long long v6 = v65;
                  uint64_t v11 = a1;
                  uint64_t v10 = a2;
                  int v13 = v117;
                  if (v59) {
                    sub_1906BFE48(v59);
                  }
                  *(void *)&long long v118 = v66;
                  *((void *)&v118 + 1) = v61;
                  sub_1907EC7B0(v9, &v118);
                  unint64_t v5 = v112;
                  if (v52 < v12 || v12 < 0.0) {
                    double v12 = v52;
                  }
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
                  }
                  uint64_t v78 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v79 = (*v112)[2];
                    uint64_t v80 = (*v14)[2];
                    *(_DWORD *)long long buf = 134350080;
                    *(void *)&uint8_t buf[4] = v79;
                    *(_WORD *)&unsigned char buf[12] = 2050;
                    *(void *)&unsigned char buf[14] = v80;
                    *(_WORD *)&unsigned char buf[22] = 2050;
                    *(double *)uint64_t v138 = v52;
                    *(_WORD *)&v138[8] = 2050;
                    *(double *)uint64_t v139 = v12;
                    *(_WORD *)&v139[8] = 2050;
                    *(double *)uint64_t v140 = v24;
                    _os_log_impl(&dword_1906B8000, v78, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,construcRouteCandidates,dest,%{public}.1lf,route constructed,length,%{public}.2lf,minRouteLength,%{public}.2lf,maxRouteLength,%{public}.2lf", buf, 0x34u);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
                    }
                    uint64_t v84 = (*v112)[2];
                    uint64_t v85 = (*v14)[2];
                    *(_DWORD *)double v133 = 134350080;
                    *(void *)&v133[4] = v84;
                    *(_WORD *)&v133[12] = 2050;
                    *(void *)&v133[14] = v85;
                    *(_WORD *)&v133[22] = 2050;
                    *(double *)BOOL v134 = v52;
                    *(_WORD *)&v134[8] = 2050;
                    *(double *)int v135 = v12;
                    *(_WORD *)&v135[8] = 2050;
                    v136[0] = v24;
                    int v86 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v86);
                    if (v86 != (char *)buf) {
                      free(v86);
                    }
                  }
                  if (*((void *)&v118 + 1)) {
                    sub_1906BFE48(*((std::__shared_weak_count **)&v118 + 1));
                  }
                  *(void *)long long buf = &v131;
                  sub_1906C6BF0((void ***)buf);
                }
                goto LABEL_142;
              }
              int v13 = v117;
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
              }
              uint64_t v55 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
              {
                uint64_t v56 = (*v5)[2];
                *(_DWORD *)long long buf = 134349056;
                *(void *)&uint8_t buf[4] = v56;
                _os_log_impl(&dword_1906B8000, v55, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,constructPedestrianRouteCandidates,unable to construct route", buf, 0xCu);
              }
              if (!sub_1906CB57C(115, 2)) {
                goto LABEL_142;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
              }
              uint64_t v57 = (*v5)[2];
              LODWORD(v131) = 134349056;
              *(void *)((char *)&v131 + 4) = v57;
              long long v26 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v26);
              goto LABEL_91;
            }
            uint64_t v35 = (std::__shared_weak_count *)v5[1];
            double v36 = *((double *)*v5 + 2);
            v126[0] = (uint64_t)*v5;
            v126[1] = (uint64_t)v35;
            if (v35) {
              atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            double v37 = v14[1];
            v125[0] = (uint64_t **)*v14;
            v125[1] = (uint64_t **)v37;
            if (v37) {
              atomic_fetch_add_explicit(v37 + 1, 1uLL, memory_order_relaxed);
            }
            double v38 = (std::__shared_weak_count *)v10[1];
            v124[0] = *v10;
            v124[1] = (uint64_t)v38;
            if (v38) {
              atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v39 = sub_1906C3284(v11, (double *)&v127, v126, v125, v124, v36, v24);
            if (v38) {
              sub_1906BFE48(v38);
            }
            if (v37) {
              sub_1906BFE48((std::__shared_weak_count *)v37);
            }
            if (v35) {
              sub_1906BFE48(v35);
            }
            int v13 = v117;
            if (v39) {
              goto LABEL_71;
            }
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
            }
            double v40 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
            {
              uint64_t v41 = (*v5)[2];
              *(_DWORD *)long long buf = 134349056;
              *(void *)&uint8_t buf[4] = v41;
              _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_INFO, "CLTSP,%{public}.1lf,constructRouteCandidates,unable to construct route", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
              }
              uint64_t v42 = (*v5)[2];
              *(_DWORD *)double v133 = 134349056;
              *(void *)&v133[4] = v42;
              long long v26 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v26);
LABEL_91:
              if (v26 != (char *)buf) {
                free(v26);
              }
            }
LABEL_142:
            v14 += 2;
            if (v14 == v13) {
              goto LABEL_165;
            }
          }
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          int v25 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_ERROR, "CLTSP,construcRouteCandidates,dest snap is null", buf, 2u);
          }
          if (!sub_1906CB57C(115, 0)) {
            goto LABEL_142;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          *(_WORD *)double v133 = 0;
          long long v26 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v26);
          goto LABEL_91;
        }
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        uint64_t v89 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v90 = (*v5)[2];
          *(_DWORD *)long long buf = 134349056;
          *(void *)&uint8_t buf[4] = v90;
          _os_log_impl(&dword_1906B8000, v89, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,construcRouteCandidates,start road is null", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
          }
          uint64_t v91 = (*v5)[2];
          *(_DWORD *)double v133 = 134349056;
          *(void *)&v133[4] = v91;
          char v88 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v88);
LABEL_170:
          if (v88 != (char *)buf) {
            free(v88);
          }
        }
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      uint64_t v87 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v87, OS_LOG_TYPE_ERROR, "CLTSP,construcRouteCandidates,start snap is null", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
        }
        *(_WORD *)double v133 = 0;
        char v88 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void CLAStarRouteConstructor::constructRouteCandidates(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, std::vector<CLRouteCandidatePtr> &)", "CoreLocation: %s\n", v88);
        goto LABEL_170;
      }
    }
LABEL_165:
    v5 += 2;
  }
  while (v5 != (uint64_t **)v113);
  if ((char *)v6[1] - (char *)*v6 != 16)
  {
    memset(buf, 0, sizeof(buf));
    BOOL v93 = (long long *)*v9;
    int v92 = (long long *)v9[1];
    if ((long long *)*v9 != v92)
    {
      do
      {
        if (*(void *)(*(void *)v93 + 48) == *(void *)(*(void *)v93 + 56))
        {
          sub_1907EC7B0((uint64_t *)buf, v93);
        }
        else if (sub_1907EFADC(*(void **)v93) >= 0.00001)
        {
          int v94 = (long long *)*a5;
          unint64_t v95 = (long long *)a5[1];
          if ((long long *)*a5 != v95)
          {
            unsigned int v96 = **(void ***)(*(void *)v93 + 48);
            int v97 = *(void **)(*(void *)(*(void *)v93 + 56) - 16);
            do
            {
              if (*(void *)v93 != *(void *)v94 && sub_1907EFADC(*(void **)v94) != 0.0)
              {
                uint64_t v98 = *(void *)v94;
                uint64_t v99 = *(void *)(*(void *)v94 + 48);
                if (*v96 == **(void **)v99 && v96[1] == *(void *)(*(void *)v99 + 8))
                {
                  uint64_t v100 = *(void *)(v98 + 56);
                  if (v99 != v100)
                  {
                    while (*v97 != **(void **)v99 || v97[1] != *(void *)(*(void *)v99 + 8))
                    {
                      v99 += 16;
                      if (v99 == v100) {
                        goto LABEL_189;
                      }
                    }
                    if (*(double *)v98 > **(double **)v93) {
                      sub_1907EC7B0((uint64_t *)buf, v94);
                    }
                  }
                }
              }
LABEL_189:
              ++v94;
            }
            while (v94 != v95);
          }
        }
        ++v93;
      }
      while (v93 != v92);
      int v101 = (void *)*a5;
      uint64_t v102 = (void *)a5[1];
      while (v101 != v102)
      {
        uint64_t v103 = *(void **)buf;
        if (*(void *)buf == *(void *)&buf[8])
        {
LABEL_198:
          v101 += 2;
        }
        else
        {
          while (*v101 != *v103)
          {
            v103 += 2;
            if (v103 == *(void **)&buf[8]) {
              goto LABEL_198;
            }
          }
          uint64_t v104 = v101 + 2;
          if (v101 + 2 == v102)
          {
            unint64_t v107 = v101;
          }
          else
          {
            do
            {
              long long v105 = *(_OWORD *)v104;
              void *v104 = 0;
              v104[1] = 0;
              uint64_t v106 = (std::__shared_weak_count *)*(v104 - 1);
              *((_OWORD *)v104 - 1) = v105;
              if (v106) {
                sub_1906BFE48(v106);
              }
              v104 += 2;
            }
            while (v104 != v102);
            uint64_t v102 = (void *)a5[1];
            unint64_t v107 = v104 - 2;
          }
          if (v102 == v107)
          {
            a5[1] = (uint64_t)v102;
          }
          else
          {
            do
            {
              uint64_t v108 = (std::__shared_weak_count *)*(v102 - 1);
              if (v108) {
                sub_1906BFE48(v108);
              }
              v102 -= 2;
            }
            while (v102 != v107);
            a5[1] = (uint64_t)v107;
            uint64_t v102 = v107;
          }
        }
      }
    }
    *(void *)double v133 = buf;
    sub_1906C6BF0((void ***)v133);
  }
}

void sub_1907F16C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a34) {
    sub_1906BFE48(a34);
  }
  a65 = (void **)&a53;
  sub_1906C6BF0(&a65);
  _Unwind_Resume(a1);
}

double sub_1907F17F8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  double v5 = sub_1907F3C3C(a1, 0.0);
  if (*a2)
  {
    sub_1907EFC40(*a2);
    double v5 = v5 - v6;
  }
  if (*a3)
  {
    sub_1907EFBDC(*a3);
    return v5 - v7;
  }
  return v5;
}

BOOL sub_1907F1854(double ***a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v29 = 0;
  double v30 = 0;
  uint64_t v31 = 0;
  double v6 = (std::__shared_weak_count *)a3[1];
  v28[0] = *a3;
  v28[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1907F1B4C((uint64_t)a1, (uint64_t *)&v29, v28);
  if (v6) {
    sub_1906BFE48(v6);
  }
  double v7 = *a1;
  long long v8 = a1[1];
  uint64_t v9 = (char *)v8 - (char *)*a1;
  uint64_t v10 = *a2;
  if (v9 >> 4 > (unint64_t)((a2[2] - *a2) >> 4))
  {
    if (v9 < 0) {
      sub_190718FD4();
    }
    uint64_t v11 = a2[1];
    uint64_t v35 = a2 + 2;
    *(void *)&long long v32 = sub_19074C0B4((uint64_t)(a2 + 2), v9 >> 4);
    *((void *)&v32 + 1) = v32 + v11 - v10;
    uint64_t v33 = *((void *)&v32 + 1);
    uint64_t v34 = v32 + 16 * v12;
    sub_19074DFBC(a2, &v32);
    sub_19074DC48((void **)&v32);
    double v7 = *a1;
    long long v8 = a1[1];
  }
  for (; v7 != v8; v7 += 2)
  {
    int v13 = *v7;
    if (*v7)
    {
      for (uint64_t i = v29; i != v30; ++i)
      {
        uint64_t v15 = *(void *)i;
        if (*(void *)i)
        {
          double v16 = *(double *)(v15 + 16);
          if (vabdd_f64(v16, *v13) < 0.001)
          {
            if (*(unsigned char *)(v15 + 64))
            {
              if (v16 > 0.0)
              {
                if (*(void *)v15)
                {
                  double v18 = *(double *)(v15 + 24);
                  double v17 = *(double *)(v15 + 32);
                  if ((fabs(v18) >= 0.00003 || fabs(v17) >= 0.00003)
                    && v17 >= -180.0
                    && v18 <= 90.0
                    && v18 >= -90.0
                    && v17 <= 180.0)
                  {
                    sub_190745090(a2, i);
                    goto LABEL_34;
                  }
                }
              }
            }
            break;
          }
        }
      }
      double v19 = v13[4];
      double v20 = v13[5];
      double v21 = v13[3];
      if (v19 >= 0.0 && v21 > 0.0)
      {
        double v22 = v21 + 10.0;
        if (v20 >= v21) {
          double v22 = v13[5];
        }
        if (v22 <= 179.0) {
          double v20 = v22;
        }
        else {
          double v20 = 179.0;
        }
      }
      long long v32 = 0uLL;
      if (sub_190742774(*a3, (uint64_t *)&v32, 1, *v13, v13[1], v13[2], v19, v21, v20))
      {
        uint64_t v23 = v32;
        if ((void)v32)
        {
          double v24 = *v7;
          double v25 = -1.0;
          if ((*v7)[7] > 0.0) {
            double v25 = v24[6];
          }
          *(double *)(v32 + 104) = v25;
          *(_DWORD *)(v23 + 120) = *((_DWORD *)v24 + 22);
          sub_190745090(a2, &v32);
        }
      }
      if (*((void *)&v32 + 1)) {
        sub_1906BFE48(*((std::__shared_weak_count **)&v32 + 1));
      }
    }
LABEL_34:
    ;
  }
  BOOL v26 = *a2 != a2[1];
  *(void *)&long long v32 = &v29;
  sub_1906C6BF0((void ***)&v32);
  return v26;
}

void sub_1907F1AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a12;
  sub_1906C6BF0(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F1B4C(uint64_t a1, uint64_t *a2, void *a3)
{
  __p[205] = *(void **)MEMORY[0x1E4F143B8];
  if (*a3)
  {
    sub_19074C1F8(a2);
    int v4 = *(_DWORD *)(*a3 + 152);
    if (v4 == 1)
    {
      double v5 = operator new(0xA70uLL);
      v5[1] = 0;
      v5[2] = 0;
      *double v5 = &unk_1EE005298;
      double v6 = v5 + 3;
      sub_19081106C((uint64_t)(v5 + 3));
      *double v6 = &unk_1EE004B70;
      double v7 = (std::__shared_weak_count *)a3[1];
      uint64_t v16 = *a3;
      double v17 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1908113DC((uint64_t)v6, &v16);
      if (v17) {
        sub_1906BFE48(v17);
      }
      operator new();
    }
    if ((v4 & 0xFFFFFFFE) == 2)
    {
      uint64_t v10 = operator new(0xA78uLL);
      v10[1] = 0;
      v10[2] = 0;
      void *v10 = &unk_1EE0032D0;
      sub_19081106C((uint64_t)(v10 + 3));
      v10[3] = &unk_1EE002F70;
      *((unsigned char *)v10 + 2672) = v4 == 3;
      uint64_t v11 = (std::__shared_weak_count *)a3[1];
      uint64_t v14 = *a3;
      uint64_t v15 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1908113DC((uint64_t)(v10 + 3), &v14);
      if (v15) {
        sub_1906BFE48(v15);
      }
      operator new();
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    uint64_t v12 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid mapmatcher pointer,matchOnRoadUsingParticleMapMatcher", (uint8_t *)__p, 2u);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (result)
    {
      bzero(__p, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_27:
        LOWORD(v18) = 0;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLMapMatcherWrapper::matchOnRoadUsingParticleMapMatcher(const std::vector<CLGeoMapLocationPtr> &, std::vector<CLGeoMapSnapDataPtr> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v13);
        if (v13 != (char *)__p) {
          free(v13);
        }
        return 0;
      }
LABEL_31:
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      goto LABEL_27;
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    long long v8 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,Unexpected,invalid geometry pointer,matchOnRoadUsingParticleMapMatcher", (uint8_t *)__p, 2u);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (result)
    {
      bzero(__p, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_27;
      }
      goto LABEL_31;
    }
  }
  return result;
}

void sub_1907F356C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,void *a46,char a47,__int16 a48,char a49)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a46);
  }
  if (a29) {
    sub_1907F4510(a29);
  }
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a20) {
    sub_1906BFE48(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1907F37B0(uint64_t a1)
{
  return a1 + 384;
}

os_log_t sub_1907F37B8()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void *sub_1907F37E8(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_190718124();
  }
  uint64_t v18 = operator new(8 * *(void *)&prime);
  double v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  double v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    long long v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *double v21 = *v27;
          *long long v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          long long v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        double v21 = v27;
        long long v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v29 = *(void **)a1;
  double v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    void *v10 = *v30;
LABEL_72:
    *double v30 = v10;
    goto LABEL_73;
  }
  void *v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v5] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    double v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_1907F3BC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F3BD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      int v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        sub_1906BFE48(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

double sub_1907F3C3C(uint64_t *a1, double a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 == *a1) {
    return 0.0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  unint64_t v8 = (v2 - *a1) >> 4;
  double v9 = 0.0;
  do
  {
    uint64_t v10 = *(uint64_t **)(v3 + v6);
    if (v10)
    {
      if (a2 != 0.0 && v7 < v8 - 1 && *(void *)(v3 + v6 + 16))
      {
        double v11 = sub_1907EF644((uint64_t)v10, 1);
        double v12 = sub_1907EF644(*(void *)(v3 + v6 + 16), 0);
        double v13 = fmod(v11 + -90.0 + 90.0 - v12 + 180.0, 360.0);
        if (v13 < 0.0) {
          double v13 = v13 + 360.0;
        }
        double v14 = v13 + -360.0;
        if (v13 <= 180.0) {
          double v14 = v13;
        }
        double v15 = fabs(v14);
        double v16 = 0.0;
        if (v15 > 5.0 && v15 < 180.0) {
          double v16 = a2 / tan(v14 * 0.0174532925 * 0.5);
        }
        double v9 = v9 + v16 * -2.0;
        uint64_t v10 = *(uint64_t **)(v3 + v6);
      }
      uint64_t v17 = *v10;
      sub_19082373C(*v10);
      double v9 = v9 + *(double *)(v17 + 40);
      uint64_t v3 = *a1;
      uint64_t v2 = a1[1];
    }
    ++v7;
    unint64_t v8 = (v2 - v3) >> 4;
    v6 += 16;
  }
  while (v7 < v8);
  return v9;
}

void *sub_1907F3DD8(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    double v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  double v12 = a1 + 2;
  uint64_t i = operator new(0x28uLL);
  *uint64_t i = 0;
  i[1] = v5;
  uint64_t v13 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v13;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v35 = (void *)*a1;
      *a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_190718124();
  }
  uint64_t v20 = operator new(8 * *(void *)&prime);
  double v21 = (void *)*a1;
  *a1 = (uint64_t)v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  uint8x8_t v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v24) = v12;
    uint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*a1 + 8 * v30))
          {
            *(void *)(*a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *uint8x8_t v23 = *v29;
          *uint64_t v29 = **(void **)(*a1 + 8 * v30);
          **(void **)(*a1 + 8 * v30) = v29;
          uint64_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        uint8x8_t v23 = v29;
        uint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v31 = *a1;
  long long v32 = *(void **)(*a1 + 8 * v5);
  if (v32)
  {
    *uint64_t i = *v32;
LABEL_72:
    *long long v32 = i;
    goto LABEL_73;
  }
  *uint64_t i = *v12;
  *double v12 = i;
  *(void *)(v31 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    long long v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1907F41B8(_Unwind_Exception *a1)
{
  sub_1907F41D0(1, v1);
  _Unwind_Resume(a1);
}

void sub_1907F41D0(char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      sub_1906BFE48(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_1907F422C(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  os_log_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      os_log_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1907F42DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0051F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1907F42FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0051F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_1907F4350(uint64_t a1)
{
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_1906BFE48(v2);
  }
  uint8x8_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    sub_1906BFE48(v3);
  }
}

void sub_1907F43A4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1907F440C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1907F44AC(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1907F4428(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_1907F4460(uint64_t a1)
{
  return sub_1907F44AC(*(void *)(a1 + 24));
}

uint64_t sub_1907F4468(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE003628)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_1907F44AC(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int8x8_t v2 = *(std::__shared_weak_count **)(result + 48);
    if (v2) {
      sub_1906BFE48(v2);
    }
    uint8x8_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_1906BFE48(v3);
    }
    JUMPOUT(0x192FCEAD0);
  }
  return result;
}

void sub_1907F4510(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(void *)(a1 + 2256) = v2;
    operator delete(v2);
  }
  sub_1907F4568(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_1907F4568(uint64_t a1)
{
  *(void *)a1 = &unk_1EE003080;
  int8x8_t v2 = *(void **)(a1 + 2176);
  if (v2)
  {
    *(void *)(a1 + 2184) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void *)(a1 + 2088);
  *(void *)(a1 + 2088) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2080);
  *(void *)(a1 + 2080) = 0;
  if (v4) {
    sub_1907F4700(a1 + 2080, v4);
  }
  float v15 = (void **)(a1 + 1928);
  sub_1907D5DA4(&v15);
  float v15 = (void **)(a1 + 1904);
  sub_1907D5DA4(&v15);
  float v15 = (void **)(a1 + 1880);
  sub_1907D5D50(&v15);
  unint64_t v5 = *(void **)(a1 + 1840);
  if (v5)
  {
    *(void *)(a1 + 1848) = v5;
    operator delete(v5);
  }
  sub_190770ADC((uint64_t *)(a1 + 1808));
  sub_190770ADC((uint64_t *)(a1 + 1784));
  if (*(char *)(a1 + 1431) < 0) {
    operator delete(*(void **)(a1 + 1408));
  }
  uint64_t v6 = *(void **)(a1 + 1176);
  if (v6)
  {
    *(void *)(a1 + 1184) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 1096);
  if (v7) {
    sub_1906BFE48(v7);
  }
  sub_1907B5AD8((void *)(a1 + 1040));
  uint8x8_t v8 = *(std::__shared_weak_count **)(a1 + 1000);
  if (v8) {
    sub_1906BFE48(v8);
  }
  if (*(char *)(a1 + 655) < 0) {
    operator delete(*(void **)(a1 + 632));
  }
  double v9 = *(void **)(a1 + 472);
  if (v9)
  {
    *(void *)(a1 + 480) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 392);
  if (v10) {
    sub_1906BFE48(v10);
  }
  unint64_t v11 = *(void **)(a1 + 352);
  if (v11)
  {
    *(void *)(a1 + 360) = v11;
    operator delete(v11);
  }
  double v12 = *(std::__shared_weak_count **)(a1 + 272);
  if (v12) {
    sub_1906BFE48(v12);
  }
  float v15 = (void **)(a1 + 240);
  sub_1907D5AB4(&v15);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 216);
  if (v13) {
    sub_1906BFE48(v13);
  }
  return a1;
}

void sub_1907F4700(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 232);
    sub_1906C6BF0(&v4);
    uint64_t v3 = sub_1907F475C(a2);
    MEMORY[0x192FCEAD0](v3, 0x10B2C406FD4C524);
  }
}

uint64_t sub_1907F475C(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 88))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
    }
    int8x8_t v2 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,~CLGeoMapGeometry()", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D00);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "CLGeoMapGeometry::~CLGeoMapGeometry()", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    GEOResetGeoCodecsAllocator();

    *(void *)(a1 + 88) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {

    *(void *)(a1 + 96) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4)
  {

    *(void *)(a1 + 104) = 0;
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  sub_19078D570(a1);
  return a1;
}

void sub_1907F4944(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1906F4064(a1);
}

void sub_1907F4950(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1907F4970(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE005298;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_1907F49C4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1907F49EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0032D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1907F4A0C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0032D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_1907F4A60(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1907F4A88()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  v0 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_ERROR, "#Spi, Interrupted", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient connection]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_1907F4C10(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  int8x8_t v2 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_ERROR, "#Spi, Invalidated", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient connection]_block_invoke", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void **)(a1 + 32);
  objc_sync_enter(v3);

  *(void *)(*(void *)(a1 + 32) + 8) = 0;
  return objc_sync_exit(v3);
}

void sub_1907F4DCC(_Unwind_Exception *exception_object)
{
}

void sub_1907F4DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    uint64_t v6 = a2;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "#Spi, Error with proxy, error: %@", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient synchronousRemoteObject]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_1907F5070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F5088(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F5164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F517C(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907F5260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F5278(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F5344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F535C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F541C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F5434(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F55C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1907F55EC(uint64_t a1, uint64_t a2)
{
}

void sub_1907F55FC(uint64_t a1)
{
}

id sub_1907F5608(uint64_t a1, void *a2, void *a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = a2;
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_1907F57E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_1907F5808(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

void sub_1907F5914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F592C(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(void *)(*(void *)(result[4] + 8) + 40) = a3;
    return *(id *)(*(void *)(result[4] + 8) + 40);
  }
  return result;
}

void sub_1907F5A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F5A34(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(void *)(*(void *)(result[4] + 8) + 40) = a3;
    return *(id *)(*(void *)(result[4] + 8) + 40);
  }
  return result;
}

void sub_1907F5B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F5B3C(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 40) = a3;
      return *(id *)(*(void *)(result[4] + 8) + 40);
    }
  }
  return result;
}

void sub_1907F5C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F5C24(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_1907F5CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F5D0C(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_1907F5DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F5DF4(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_1907F6030(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int8x8_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_FAULT, "#Spi, Couldn't set location default!", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient setLocationDefaultForKey:value:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1907F62C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907F62E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v6 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289282;
    v8[1] = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 2114;
    uint64_t v12 = a2;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Spi, getLocationDefaultForKey, \", \"error\":%{public, location:escape_only}@}", (uint8_t *)v8, 0x1Cu);
  }
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1907F6570(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F6588(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      uint64_t v3 = result;
      id result = [objc_alloc(MEMORY[0x1E4F1CAF0]) initWithName:a3];
      *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 40) = result;
    }
  }
  return result;
}

void sub_1907F661C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int8x8_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_FAULT, "#Spi, setPrivateMode failed", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient setPrivateMode:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1907F6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F6868(uint64_t result, uint64_t a2, char a3)
{
  if (!a2) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  }
  return result;
}

void sub_1907F6928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F6940(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F69C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int8x8_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetLocationServicesEnabled failed", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient setLocationServicesEnabled:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1907F6BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F6C14(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(unsigned char **)(result + 40) = a3 == 1;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907F6D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F6D38(void *result, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = result;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetAuthorizationPromptMapDisplayEnabled failed", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient setAuthorizationPromptMapDisplayEnabled:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    id result = a2;
    *(void *)(*(void *)(v3[4] + 8) + 40) = result;
  }
  return result;
}

void sub_1907F6F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F6FAC(uint64_t result, uint64_t a2, char a3)
{
  if (!a2)
  {
    **(unsigned char **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907F7130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F7148(uint64_t result, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = result;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      __int16 v9 = "";
      __int16 v10 = 2114;
      __int16 v11 = a2;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLSetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
    }
    uint64_t v5 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      __int16 v9 = "";
      __int16 v10 = 2114;
      __int16 v11 = a2;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLSetClientTransientAuthorizationInfo failed", "{\"msg%{public}.0s\":\"#Spi, CLSetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    }
    id result = [a2 copy];
    *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 40) = result;
  }
  return result;
}

void sub_1907F73E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F73FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      float v14 = a2;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLGetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
    }
    int v7 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      float v14 = a2;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLGetClientTransientAuthorizationInfo failed", "{\"msg%{public}.0s\":\"#Spi, CLGetClientTransientAuthorizationInfo failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = a2;
    }
  }
  uint64_t result = [a3 copy];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1907F7698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907F76B0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int v6 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a2;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLInternalChangeClientAuthorizationTime failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
    }
    int v7 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = a2;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLInternalChangeClientAuthorizationTime failed", "{\"msg%{public}.0s\":\"#Spi, CLInternalChangeClientAuthorizationTime failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
    *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
  }
}

void sub_1907F792C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F7944(void *result, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = result;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2114;
      __int16 v11 = a2;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Spi, CLInternalTriggerExpiredAuthorizationPurge failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
    }
    uint64_t v5 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      int v6 = 68289282;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      __int16 v10 = 2114;
      __int16 v11 = a2;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Spi, CLInternalTriggerExpiredAuthorizationPurge failed", "{\"msg%{public}.0s\":\"#Spi, CLInternalTriggerExpiredAuthorizationPurge failed\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v6, 0x1Cu);
    }
    uint64_t result = a2;
    *(void *)(*(void *)(v3[4] + 8) + 40) = result;
  }
  return result;
}

void sub_1907F7B30(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int8x8_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_FAULT, "#Spi, CLInternalSetGestureServiceEnabled failed", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient setGestureServiceEnabled:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1907F7D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F7D84(uint64_t result, uint64_t a2, char a3)
{
  if (!a2)
  {
    **(unsigned char **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907F7E6C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F7E84(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907F8148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

unsigned char **sub_1907F816C(unsigned char **result, void *a2, char a3)
{
  uint64_t v3 = result;
  if (a2)
  {
    uint64_t result = a2;
    *(void *)(*((void *)v3[5] + 1) + 40) = result;
  }
  else
  {
    *result[6] = a3;
    *(unsigned char *)(*((void *)result[4] + 1) + 24) = 1;
  }
  return result;
}

void sub_1907F83D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F83F0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F8620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F863C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_1907F8868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F8884(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F8ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F8AD8(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F8BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907F8BC8(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    if (a3)
    {
      *(void *)(*(void *)(result[4] + 8) + 24) = a3;
      return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
    }
  }
  return result;
}

void sub_1907F8D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_1907F8DB4(void *a1, void *a2, char a3)
{
  id result = a2;
  *(void *)(*(void *)(a1[4] + 8) + 40) = result;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = a3;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  return result;
}

void sub_1907F8F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id sub_1907F8FA8(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F9150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id sub_1907F9174(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

id sub_1907F91BC(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907F92F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907F930C(uint64_t result, uint64_t a2, void *a3)
{
  if (!a2)
  {
    uint64_t v3 = result;
    id result = [a3 getBytes:*(void *)(result + 40) length:156];
    *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907F943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1907F9454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    uint64_t v3 = *(_OWORD **)(a1 + 40);
    __n128 result = *(__n128 *)a3;
    long long v5 = *(_OWORD *)(a3 + 16);
    *uint64_t v3 = *(_OWORD *)a3;
    v3[1] = v5;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907F9814(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int8x8_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_ERROR, "#Spi,RouteHintError,Couldn't set map-matching route hint!", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient setMapMatchingRouteHint:count:routingType:stepType:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1907F9B68(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int8x8_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_ERROR, "#Spi,CLTR,TrackRunHintError,Couldn't set track run hint!", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient setTrackRunHint:]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1907F9F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907F9F44(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "#Spi,getAccessoryTypeBitSet,failed", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationInternalClient getAccessoryTypeBitSet]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    a3 = -1;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
}

void sub_1907FA324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907FA340(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "#Spi,getAccessoryPASCDTransmissionState,failed", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationInternalClient getAccessoryPASCDTransmissionState]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    a3 = 4;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a3;
}

void sub_1907FA758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907FA77C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v3 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "#Spi,getOdometryBatchedLocations,returned with error", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient getOdometryBatchedLocations]_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v7 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349056;
      uint64_t v10 = [a3 count];
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEBUG, "#Spi,getOdometryBatchedLocations,received data count,%{public}lu", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      [a3 count];
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLLocationInternalClient getOdometryBatchedLocations]_block_invoke", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = a3;
  }
}

void sub_1907FAC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FACB0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FAEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FAF10(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FAFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907FB000(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      uint64_t v5 = *(int *)(a1 + 48);
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = v5;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Getting status bar enabled for entity class failed\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
    }
    int v6 = qword_1EB2713E0;
    if (os_signpost_enabled((os_log_t)qword_1EB2713E0))
    {
      uint64_t v7 = *(int *)(a1 + 48);
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2050;
      uint64_t v13 = v7;
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Getting status bar enabled for entity class failed", "{\"msg%{public}.0s\":\"Getting status bar enabled for entity class failed\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    **(unsigned char **)(a1 + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_1907FB258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FB270(uint64_t result, uint64_t a2, int a3)
{
  if (!a2) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a3;
  }
  return result;
}

void sub_1907FB390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907FB3AC(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2) {
    a3 = (void *)[MEMORY[0x1E4F1C978] array];
  }
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1907FB4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FB4C4(uint64_t result, uint64_t a2, void *a3)
{
  if (!a2)
  {
    uint64_t v3 = result;
    id result = [a3 getBytes:*(void *)(result + 40) length:320];
    *(unsigned char *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907FB5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FB610(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FB730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FB748(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FB808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FB820(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FB8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FB8FC(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907FB9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FB9F8(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FBD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

uint64_t sub_1907FBD78(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  int v9 = *(double **)(result + 48);
  **(double **)(result + 40) = a4;
  *int v9 = a5;
  __int16 v10 = *(double **)(result + 64);
  **(double **)(result + 56) = a6;
  double *v10 = a7;
  uint64_t v11 = *(double **)(result + 80);
  **(double **)(result + 72) = a8;
  *uint64_t v11 = a9;
  **(_DWORD **)(result + 88) = a3;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a2;
  return result;
}

uint64_t sub_1907FBDB4(uint64_t result, uint64_t a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  int v9 = *(double **)(result + 48);
  **(double **)(result + 40) = a4;
  *int v9 = a5;
  __int16 v10 = *(double **)(result + 64);
  **(double **)(result + 56) = a6;
  double *v10 = a7;
  uint64_t v11 = *(double **)(result + 80);
  **(double **)(result + 72) = a8;
  *uint64_t v11 = a9;
  **(_DWORD **)(result + 88) = a3;
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a2;
  return result;
}

void sub_1907FBEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FBED0(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *(_DWORD **)(result + 48);
  **(_DWORD **)(result + 40) = a3;
  *uint64_t v4 = a4;
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FBF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FBFB4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FC098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907FC0B0(void *result, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = result;
    id result = a2;
    *(void *)(*(void *)(v2[4] + 8) + 40) = result;
  }
  return result;
}

void sub_1907FC1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907FC1D4(void *result, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = result;
    id result = a2;
    *(void *)(*(void *)(v2[4] + 8) + 40) = result;
  }
  return result;
}

void sub_1907FC2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907FC304(void *result, void *a2, int a3, int a4)
{
  int v6 = result;
  if (a2)
  {
    id result = a2;
    *(void *)(*(void *)(v6[4] + 8) + 40) = result;
  }
  uint64_t v7 = (_DWORD *)v6[5];
  if (v7) {
    *uint64_t v7 = a3;
  }
  int v8 = (_DWORD *)v6[6];
  if (v8) {
    *int v8 = a4;
  }
  return result;
}

void sub_1907FC408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FC420(uint64_t result, char a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

void sub_1907FC510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907FC528(uint64_t a1, void *a2, void *a3)
{
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (a2)
  {
    id result = a2;
    **(void **)(a1 + 40) = result;
  }
  return result;
}

void sub_1907FC64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907FC664(uint64_t a1, void *a2, void *a3)
{
  id result = a3;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  if (a2)
  {
    id result = a2;
    **(void **)(a1 + 40) = result;
  }
  return result;
}

void sub_1907FC7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907FC7C0(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1907FC8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1907FC908(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1907FCA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FCA54(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FCB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FCB50(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FCC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FCC40(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FCD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1907FCD18(void *result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
    *(void *)(*(void *)(result[4] + 8) + 24) = a3;
    return CFRetain(*(CFTypeRef *)(*(void *)(result[4] + 8) + 24));
  }
  return result;
}

void sub_1907FCE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FCE44(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FCF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FCF24(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FCFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FD014(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FD0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FD10C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FD1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FD204(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FD2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FD300(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2 == 0;
  return result;
}

void sub_1907FD3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1907FD3DC(uint64_t result, uint64_t a2, int a3)
{
  if (!a2)
  {
    **(_DWORD **)(result + 40) = a3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_1907FD4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1907FD4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v4 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "#Spi, TimeSyncWithReplyBlock failed", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLLocationInternalClient timeSyncMachTimeStamp:oscarTimeStamp:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    **(void **)(a1 + 40) = a3;
    **(void **)(a1 + 48) = a4;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t sub_1907FD740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = _os_activity_create(&dword_1906B8000, "CL: CLInternalSetAuthorizationStatus", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetAuthorizationStatus\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setAuthorizationStatus:withCorrectiveCompensation:forBundleID:orBundlePath:", a3, 0, a1, a2);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_1907FD8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907FD8B4()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_reportLocationUtilityEvent_atDate_);
}

void sub_1907FD8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1906B8000, "CL: CLClearLocationAuthorization", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  os_activity_scope_enter(v4, &v6);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289794;
    int v8 = 0;
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "";
    __int16 v11 = 2082;
    int v12 = "activity";
    __int16 v13 = 2114;
    uint64_t v14 = a1;
    __int16 v15 = 2114;
    uint64_t v16 = a2;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLClearLocationAuthorization\", \"event\":%{public, location:escape_only}s, \"bundleId\":%{public, location:escape_only}@, \"bundlePath\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "clearLocationAuthorizationForBundleId:orBundlePath:", a1, a2);
  os_activity_scope_leave(&v6);
}

void sub_1907FDA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907FDA70()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_clearLocationAuthorizations);
}

uint64_t CLCopyAppsUsingLocation()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLCopyAppsUsingLocation", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyAppsUsingLocation\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyAppsUsingLocation");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FDBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyActiveClientsUsingLocation()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLCopyActiveClientsUsingLocation", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyActiveClientsUsingLocation\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyActiveClientsUsingLocation");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FDD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyInternalState()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLCopyInternalState", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyInternalState\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyInternalState");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FDE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void CLSetLocationDefault(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  os_activity_scope_state_s v4 = _os_activity_create(&dword_1906B8000, "CL: CLSetLocationDefault", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  os_activity_scope_enter(v4, &v6);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289538;
    int v8 = 0;
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "";
    __int16 v11 = 2082;
    int v12 = "activity";
    __int16 v13 = 2114;
    uint64_t v14 = a1;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetLocationDefault\", \"event\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setLocationDefaultForKey:value:", a1, a2);
  os_activity_scope_leave(&v6);
}

void sub_1907FDFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyMicroLocationInternalVersion()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLCopyMicroLocationInternalVersion", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyMicroLocationInternalVersion\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyMicroLocationInternalVersion");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FE138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyZaxisStats()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLCopyZaxisStats", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyZaxisStats\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyZaxisStats");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FE288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetLocationDefault(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1906B8000, "CL: CLGetLocationDefault", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  os_activity_scope_enter(v2, &v6);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289538;
    int v8 = 0;
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "";
    __int16 v11 = 2082;
    int v12 = "activity";
    __int16 v13 = 2114;
    uint64_t v14 = a1;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetLocationDefault\", \"event\":%{public, location:escape_only}s, \"key\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  uint64_t v4 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getLocationDefaultForKey:", a1);
  os_activity_scope_leave(&v6);
  return v4;
}

void sub_1907FE3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetPipelinedCache()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLGetPipelinedCaches", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetPipelinedCaches\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getPipelinedCache");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FE53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetMotionSensorLogs()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLGetMotionSensorLogs", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetMotionSensorLogs\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getMotionSensorLogs");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FE68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetAccessoryMotionSensorLogs()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLGetAccessoryMotionSensorLogs", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    int v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetAccessoryMotionSensorLogs\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getAccessoryMotionSensorLogs");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FE7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLApplyArchivedAuthorizationDecisions(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1906B8000, "CL: CLApplyArchivedAuthorizationDecisions", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  os_activity_scope_enter(v2, &v6);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v8 = 0;
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "";
    __int16 v11 = 2082;
    int v12 = "activity";
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLApplyArchivedAuthorizationDecisions\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "applyArchivedAuthorizationDecisions:", a1);
  os_activity_scope_leave(&v6);
  return v4;
}

void sub_1907FE934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetArchivedAuthorizationDecisions(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1906B8000, "CL: CLGetArchivedAuthorizationDecisions", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  os_activity_scope_enter(v2, &v6);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v8 = 0;
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "";
    __int16 v11 = 2082;
    int v12 = "activity";
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetArchivedAuthorizationDecisions\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getArchivedAuthorizationDecisionsWithError:", a1);
  os_activity_scope_leave(&v6);
  return v4;
}

void sub_1907FEA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907FEAA0(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1906B8000, "CL: CLTimeZoneAtLocation", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v6.opaque[0] = 0;
  v6.opaque[1] = 0;
  os_activity_scope_enter(v2, &v6);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v8 = 0;
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "";
    __int16 v11 = 2082;
    int v12 = "activity";
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLTimeZoneAtLocation\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v4 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "timeZoneAtLocation:", a1);
  os_activity_scope_leave(&v6);
  return v4;
}

void sub_1907FEBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLStartStopAdvertisingBeacon(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1906B8000, "CL: CLStartStopAdvertisingBeacon", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v8.opaque[0] = 0;
  v8.opaque[1] = 0;
  os_activity_scope_enter(v4, &v8);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289795;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = "activity";
    __int16 v15 = 2113;
    uint64_t v16 = a1;
    __int16 v17 = 2114;
    uint64_t v18 = a2;
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLStartStopAdvertisingBeacon\", \"event\":%{public, location:escape_only}s, \"region\":%{private, location:escape_only}@, \"power\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  uint64_t v6 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "startStopAdvertisingBeacon:power:", a1, a2);
  os_activity_scope_leave(&v8);
  return v6;
}

void sub_1907FED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907FED78()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_setPrivateMode_);
}

uint64_t sub_1907FEDB8()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_getPrivateMode);
}

uint64_t CLPingDaemon()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLPingDaemon", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    os_activity_scope_state_s v8 = "";
    __int16 v9 = 2082;
    int v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPingDaemon\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "pingDaemon");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FEF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void CLPassKitNotifyPayment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v6 = _os_activity_create(&dword_1906B8000, "CL: CLPassKitNotifyPassUsage", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v8.opaque[0] = 0;
  v8.opaque[1] = 0;
  os_activity_scope_enter(v6, &v8);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPassKitNotifyPassUsage\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "notifyPassKitPayment:transaction:info:", a1, a2, a3);
  os_activity_scope_leave(&v8);
}

void sub_1907FF08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void CLWeatherNotifyForecast(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  __int16 v7 = _os_activity_create(&dword_1906B8000, "CL: CLWeatherNotifyForecastUsage", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v7, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  os_activity_scope_state_s v8 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289282;
    __int16 v42 = 2082;
    double v43 = "";
    __int16 v44 = 2082;
    double v45 = "activity";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLWeatherNotifyForecastUsage\", \"event\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
  }
  __int16 v9 = (void *)MEMORY[0x1E4F1C978];
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  uint64_t v15 = objc_msgSend(v9, "arrayWithObjects:", v10, v11, v12, v13, v14, objc_opt_class(), 0);
  uint64_t v16 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithDictionary:a1 copyItems:1];
  uint8x8_t v27 = a5;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v17 = [a1 countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (v17)
  {
    obuint64_t j = a1;
    uint64_t v29 = *(void *)v35;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v35 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v19 = *(void *)(*((void *)&v34 + 1) + 8 * i);
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        uint64_t v20 = [v15 countByEnumeratingWithState:&v30 objects:v39 count:16];
        if (!v20) {
          goto LABEL_18;
        }
        int v21 = 0;
        uint64_t v22 = *(void *)v31;
        do
        {
          for (uint64_t j = 0; j != v20; ++j)
          {
            if (*(void *)v31 != v22) {
              objc_enumerationMutation(v15);
            }
            [v16 objectForKeyedSubscript:v19];
            v21 |= objc_opt_isKindOfClass();
          }
          uint64_t v20 = [v15 countByEnumeratingWithState:&v30 objects:v39 count:16];
        }
        while (v20);
        if ((v21 & 1) == 0) {
LABEL_18:
        }
          [v16 removeObjectForKey:v19];
      }
      uint64_t v17 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
    }
    while (v17);
  }
  id v24 = +[CLLocationInternalClient sharedServiceClient];
  [v27 coordinate];
  double v26 = v25;
  [v27 coordinate];
  objc_msgSend(v24, "notifyWeatherForecast:airQualityConditions:hourlyForecasts:dailyForecasts:latitude:longitude:", v16, MEMORY[0x1E4F1CC08], MEMORY[0x1E4F1CBF0], MEMORY[0x1E4F1CBF0], v26);

  os_activity_scope_leave(&state);
}

void sub_1907FF410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,os_activity_scope_state_s state)
{
}

uint64_t sub_1907FF448()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_setLocationServicesEnabled_);
}

uint64_t sub_1907FF488()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_getLocationServicesEnabled_);
}

uint64_t sub_1907FF4C8()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_getAuthorizationPromptMapDisplayEnabled_);
}

uint64_t CLGetClientTransientAuthorizationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = _os_activity_create(&dword_1906B8000, "CL: CLGetClientTransientAuthorizationInfo", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetClientTransientAuthorizationInfo\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getTemporaryAuthorizationStatusForBundleId:orBundlePath:error:", a1, a2, a3);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_1907FF664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLSetClientTransientAuthorizationInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = _os_activity_create(&dword_1906B8000, "CL: CLSetClientTransientAuthorizationInfo", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetClientTransientAuthorizationInfo\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setTemporaryAuthorizationStatusForBundleId:orBundlePath:statusData:", a1, a2, a3);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_1907FF7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907FF7E8()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_setAuthorizationPromptMapDisplayEnabled_);
}

uint64_t sub_1907FF828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = _os_activity_create(&dword_1906B8000, "CL: CLInternalGetPrecisionPermission", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalGetPrecisionPermission\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getPrecisionPermission:forBundleID:orBundlePath:", a3, a1, a2);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_1907FF984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907FF998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = _os_activity_create(&dword_1906B8000, "CL: CLInternalGetIncidentalUseMode", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalGetIncidentalUseMode\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getIncidentalUseMode:forBundleID:orBundlePath:", a3, a1, a2);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_1907FFAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907FFB08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9)
{
  return objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "registerCircularInterestZoneWithId:latitude:longitude:radius:serviceMaskOperator:provenanceType:forBundleId:orBundlePath:error:", a3, a4, a5, a1, a2, a6, a7, a8, a9);
}

uint64_t sub_1907FFB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "registerPhenolicInterestZoneWithId:phenolicLocation:serviceMaskOperator:provenanceType:forBundleId:orBundlePath:error:", a3, a4, a5, a6, a1, a2, a7);
}

uint64_t sub_1907FFC20(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setRelevance:forInterestZoneWithId:registeredForBundleId:orBundlePath:error:", a4 != 0, a3, a1, a2, a5);
}

uint64_t sub_1907FFC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "deleteInterestZoneWithId:registeredForBundleId:orBundlePath:error:", a3, a1, a2, a4);
}

uint64_t CLInternalPerformMigration()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLInternalPerformMigration", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    os_activity_scope_state_s v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalPerformMigration\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "performMigration");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1907FFE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_1907FFE2C()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_shutdownDaemon);
}

uint64_t CLClientDisplayStats_0()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_displayStatistics);
}

uint64_t sub_1907FFE8C()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_dumpLogs_);
}

uint64_t sub_1907FFECC()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_copyMonitoredRegionsForBundleIdentifier_orBundlePath_);
}

uint64_t sub_1907FFF14()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_setStatusBarIconEnabled_forEntityClass_);
}

uint64_t sub_1907FFF5C()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_getStatusBarIconEnabled_forEntityClass_);
}

uint64_t CLGetStatusBarIconState()
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLGetStatusBarIconState", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v0, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetStatusBarIconState\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getStatusBarIconState");
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67109120;
    int v10 = v2;
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "CLStatusBarIconState received an icon stateu of %d", buf, 8u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int v7 = 67109120;
    int v8 = v2;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLStatusBarIconState CLGetStatusBarIconState()", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  os_activity_scope_leave(&state);
  return v2;
}

void sub_190800230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void CLSetMapMatchingRouteHint(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v8 = _os_activity_create(&dword_1906B8000, "CL: CLSetMapMatchingRouteHint", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v8, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v9 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v20 = 0;
    *(_WORD *)&v20[4] = 2082;
    *(void *)&v20[6] = "";
    __int16 v21 = 2082;
    uint64_t v22 = "activity";
    _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetMapMatchingRouteHint\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
  }
  int v10 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134218496;
    *(void *)uint64_t v20 = (int)a4;
    *(_WORD *)&v20[8] = 1024;
    *(_DWORD *)&v20[10] = a1;
    __int16 v21 = 1024;
    LODWORD(v22) = a2;
    _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "RouteHints,CLSetRouteHintsForMapMatching,received,%lu,routeType,%d,stepType,%d", buf, 0x18u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int v13 = 134218496;
    uint64_t v14 = (int)a4;
    __int16 v15 = 1024;
    int v16 = a1;
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLSetMapMatchingRouteHint(CLClientLocationRouteHintType, CLClientLocationRouteHintType, CLMapsRouteHint *, int)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setMapMatchingRouteHint:count:routingType:stepType:", a3, a4, a1, a2);
  os_activity_scope_leave(&state);
}

void sub_190800528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void CLSetRouteHintsForMapMatching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v6 = _os_activity_create(&dword_1906B8000, "CL: CLSetRouteHintsForMapMatching", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v6, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  int v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)int v16 = 0;
    *(_WORD *)&v16[4] = 2082;
    *(void *)&void v16[6] = "";
    __int16 v17 = 2082;
    int v18 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetRouteHintsForMapMatching\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
  }
  int v8 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)int v16 = (int)a3;
    *(_WORD *)&v16[8] = 1024;
    *(_DWORD *)&v16[10] = a1;
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "RouteHints,CLSetRouteHintsForMapMatching,received,%lu,routeType,%d", buf, 0x12u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    int v11 = 134218240;
    uint64_t v12 = (int)a3;
    __int16 v13 = 1024;
    int v14 = a1;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLSetRouteHintsForMapMatching(CLClientLocationRouteHintType, CLMapsRouteHint *, int)", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setMapMatchingRouteHint:count:routingType:stepType:", a2, a3, a1, a1);
  os_activity_scope_leave(&state);
}

void sub_190800808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

void CLSetTrackRunHint(uint64_t *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1906B8000, "CL: CLSetTrackRunHint", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v2, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v20 = 0;
    *(_WORD *)&v20[4] = 2082;
    *(void *)&v20[6] = "";
    __int16 v21 = 2082;
    uint64_t v22 = "activity";
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSetTrackRunHint\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
  }
  os_activity_scope_state_s v4 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *a1;
    int v6 = *((_DWORD *)a1 + 2);
    int v7 = *((_DWORD *)a1 + 3);
    *(_DWORD *)uint64_t buf = 134349569;
    *(void *)uint64_t v20 = v5;
    *(_WORD *)&v20[8] = 1025;
    *(_DWORD *)&v20[10] = v6;
    __int16 v21 = 1025;
    LODWORD(v22) = v7;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "TrackRunHint,CLSetTrackRunHint,received,MCTime,%{public}.1lf,lane,%{private}d,notification,%{private}d", buf, 0x18u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v8 = *a1;
    int v9 = *((_DWORD *)a1 + 2);
    int v10 = *((_DWORD *)a1 + 3);
    int v13 = 134349569;
    uint64_t v14 = v8;
    __int16 v15 = 1025;
    int v16 = v9;
    __int16 v17 = 1025;
    int v18 = v10;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLSetTrackRunHint(CLTrackRunHint *)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setTrackRunHint:", a1);
  os_activity_scope_leave(&state);
}

void sub_190800AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

uint64_t CLGetAccessoryTypeBitSet()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  id v0 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_DEBUG, "CLGetAccessoryTypeBitSet", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "int32_t CLGetAccessoryTypeBitSet()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getAccessoryTypeBitSet");
}

uint64_t CLGetAccessoryPASCDTransmissionState()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  id v0 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_DEBUG, "CLGetAccessoryPASCDTransmissionState", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CLClientPASCDTransmissionState CLGetAccessoryPASCDTransmissionState()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getAccessoryPASCDTransmissionState");
}

uint64_t sub_190800E2C()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_getLocationForBundleID_orBundlePath_dynamicAccuracyReductionEnabled_allowsAlteredAccessoryLocations_location_);
}

uint64_t CLGetOdometryBatchedLocations()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  id v0 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_DEFAULT, "CLGetOdometryBatchedLocations", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "NSDictionary *CLGetOdometryBatchedLocations()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getOdometryBatchedLocations");
}

uint64_t sub_190801034()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_getGroundAltitudeForBundleID_orBundlePath_location_groundAltitude_);
}

uint64_t sub_190801094()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_checkAndExerciseAuthorizationForBundleID_orBundlePath_services_error_);
}

uint64_t CLGetControlPlaneStatusReport(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v16 = _os_activity_create(&dword_1906B8000, "CL: CLGetControlPlaneStatusReport", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v16, &state);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v17 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v22 = 0;
    __int16 v23 = 2082;
    id v24 = "";
    __int16 v25 = 2082;
    double v26 = "activity";
    __int16 v27 = 1026;
    int v28 = a1;
    _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetControlPlaneStatusReport\", \"event\":%{public, location:escape_only}s, \"clear\":%{public}d}", buf, 0x22u);
  }
  uint64_t v18 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getControlPlaneStatusReportClear:startTime:endTime:latitude:longitude:altitude:accuracy:status:", a1, a2, a3, a4, a5, a6, a7, a8);
  os_activity_scope_leave(&state);
  return v18;
}

void sub_190801298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

uint64_t CLGetEmergencyLocationSettingsVersionInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = _os_activity_create(&dword_1906B8000, "CL: CLGetEmergencyLocationSettingsVersion", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v8.opaque[0] = 0;
  v8.opaque[1] = 0;
  os_activity_scope_enter(v4, &v8);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = "activity";
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGetEmergencyLocationSettingsVersion\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v6 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "getEmergencyLocationSettingsCompatibilityVersion:andContentVersion:", a1, a2);
  os_activity_scope_leave(&v8);
  return v6;
}

void sub_190801400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLDeleteCurrentEmergencyLocationAsset()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLDeleteCurrentEmergencyLocationAsset", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    os_activity_scope_state_s v8 = "";
    __int16 v9 = 2082;
    int v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDeleteCurrentEmergencyLocationAsset\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "deleteCurrentEmergencyLocationAsset");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_190801550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyNearbyAssetSettings()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLCopyNearbyAssetSettings", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    os_activity_scope_state_s v8 = "";
    __int16 v9 = 2082;
    int v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyNearbyAssetSettings\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyNearbyAssetSettings");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_1908016A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyNearbyAssetSettingsOfAccessoryFile(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = _os_activity_create(&dword_1906B8000, "CL: CLCopyNearbyAssetSettingsOfAccessoryFile", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v5.opaque[0] = 0;
  v5.opaque[1] = 0;
  os_activity_scope_enter(v2, &v5);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v3 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2082;
    uint64_t v11 = "activity";
    _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyNearbyAssetSettingsOfAccessoryFile\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (a1) {
    a1 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyNearbyAssetSettingsOfAccessoryFile:", a1);
  }
  os_activity_scope_leave(&v5);
  return a1;
}

void sub_1908017FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLCopyRoutineAssetSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  os_activity_scope_state_s v4 = _os_activity_create(&dword_1906B8000, "CL: CLCopyRoutineAssetSettings", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v8.opaque[0] = 0;
  v8.opaque[1] = 0;
  os_activity_scope_enter(v4, &v8);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  os_activity_scope_state_s v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2082;
    uint64_t v14 = "activity";
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLCopyRoutineAssetSettings\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v6 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "copyRoutineAssetSettingsWithCompatibilityVersion:contentVersion:", a1, a2);
  os_activity_scope_leave(&v8);
  return v6;
}

void sub_190801964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLShouldDisplayEEDUI()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v0 = _os_activity_create(&dword_1906B8000, "CL: CLShouldDisplayEEDUI", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v4.opaque[0] = 0;
  v4.opaque[1] = 0;
  os_activity_scope_enter(v0, &v4);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  uint64_t v1 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v6 = 0;
    __int16 v7 = 2082;
    os_activity_scope_state_s v8 = "";
    __int16 v9 = 2082;
    int v10 = "activity";
    _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLShouldDisplayEEDUI\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v2 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "shouldDisplayEEDUI");
  os_activity_scope_leave(&v4);
  return v2;
}

void sub_190801AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t CLGetEEDCloakingKey()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_getEEDCloakingKey_);
}

uint64_t CLGetEEDEmergencyContactNames()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_getEEDEmergencyContactNames_);
}

uint64_t sub_190801B48(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = _os_activity_create(&dword_1906B8000, "CL: CLInternalSetTemporaryAuthorizationGranted", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v18.opaque[0] = 0;
  v18.opaque[1] = 0;
  os_activity_scope_enter(v12, &v18);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v13 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetTemporaryAuthorizationGranted\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  id v14 = +[CLLocationInternalClient sharedServiceClient];
  long long v15 = a3[1];
  *(_OWORD *)uint64_t buf = *a3;
  *(_OWORD *)&buf[16] = v15;
  uint64_t v16 = [v14 setTemporaryAuthorizationGranted:a4 forBundleID:a1 orBundlePath:a2 orAuditToken:buf byLocationButton:a5 voiceInteractionEnabled:a6];
  os_activity_scope_leave(&v18);
  return v16;
}

void sub_190801CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_190801CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = _os_activity_create(&dword_1906B8000, "CL: CLInternalSetTemporaryPreciseAuthorizationGranted", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    id v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetTemporaryPreciseAuthorizationGranted\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setTemporaryPreciseAuthorizationGranted:forBundleID:orBundlePath:", a3, a1, a2);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_190801E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_190801E58(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  os_activity_scope_state_s v4 = _os_activity_create(&dword_1906B8000, "CL: CLInternalTearDownLocationAuthPrompt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v8.opaque[0] = 0;
  v8.opaque[1] = 0;
  os_activity_scope_enter(v4, &v8);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  os_activity_scope_state_s v5 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v10 = 0;
    __int16 v11 = 2082;
    int v12 = "";
    __int16 v13 = 2082;
    id v14 = "activity";
    _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalTearDownLocationAuthPrompt\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v6 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "tearDownLocationAuthPromptForBundleID:orBundlePath:", a1, a2);
  os_activity_scope_leave(&v8);
  return v6;
}

void sub_190801FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_190801FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = _os_activity_create(&dword_1906B8000, "CL: CLInternalSetLocationButtonUseMode", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    id v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetLocationButtonUseMode\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setLocationButtonUseMode:forBundleID:orBundlePath:", a3, a1, a2);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_19080211C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_190802130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v12 = _os_activity_create(&dword_1906B8000, "CL: CLInternalSetAuthorizationStatusByType", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v16.opaque[0] = 0;
  v16.opaque[1] = 0;
  os_activity_scope_enter(v12, &v16);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v13 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68290818;
    int v18 = 0;
    __int16 v19 = 2082;
    uint64_t v20 = "";
    __int16 v21 = 2082;
    int v22 = "activity";
    __int16 v23 = 2114;
    uint64_t v24 = a1;
    __int16 v25 = 2114;
    uint64_t v26 = a2;
    __int16 v27 = 2114;
    uint64_t v28 = a3;
    __int16 v29 = 2114;
    uint64_t v30 = a4;
    __int16 v31 = 2050;
    uint64_t v32 = a5;
    __int16 v33 = 2050;
    uint64_t v34 = a6;
    _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetAuthorizationStatusByType\", \"event\":%{public, location:escape_only}s, \"bundleId\":%{public, location:escape_only}@, \"bundlePath\":%{public, location:escape_only}@, \"zoneId\":%{public, location:escape_only}@, \"subIdentityId\":%{public, location:escape_only}@, \"auth\":%{public, location:CLClientAuthorizationStatus}lld, \"compensation\":%{public, location:CLClientCorrectiveCompensation}lld}", buf, 0x58u);
  }
  uint64_t v14 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setAuthorizationStatusByType:withCorrectiveCompensation:andZoneIdentifier:andSubIdentityIdentifier:forBundleID:orBundlePath:", a5, a6, a3, a4, a1, a2);
  os_activity_scope_leave(&v16);
  return v14;
}

void sub_1908022F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_190802308()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_updatePillButtonChoiceForOutstandingPrompt_);
}

uint64_t sub_190802390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = _os_activity_create(&dword_1906B8000, "CL: CLInternalSetIncidentalUseMode", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  v10.opaque[0] = 0;
  v10.opaque[1] = 0;
  os_activity_scope_enter(v6, &v10);

  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE006660);
  }
  __int16 v7 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2082;
    os_activity_scope_state_s v16 = "activity";
    _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLInternalSetIncidentalUseMode\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  uint64_t v8 = objc_msgSend(+[CLLocationInternalClient sharedServiceClient](CLLocationInternalClient, "sharedServiceClient"), "setIncidentalUseMode:forBundleID:orBundlePath:", a3, a1, a2);
  os_activity_scope_leave(&v10);
  return v8;
}

void sub_1908024EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

uint64_t sub_190802500()
{
  id v0 = +[CLLocationInternalClient sharedServiceClient];

  return MEMORY[0x1F4181798](v0, sel_setBackgroundIndicatorForBundleID_orBundlePath_enabled_);
}

void sub_190802558(uint64_t a1, uint64_t a2, int a3)
{
  double v7 = *(double *)(a2 + 192);
  double v6 = *(double *)(a2 + 200);
  BOOL v9 = v7 >= 180.0 || *(double *)(a2 + 104) < 0.0 || v7 <= 0.0;
  double v10 = -1.0;
  if (v9) {
    double v11 = -1.0;
  }
  else {
    double v11 = v7 + 1.414;
  }
  if (v6 > 0.0 && (double v12 = *(double *)(a2 + 208), v12 > 0.0) && (v13 = *(double *)(a2 + 216), v13 >= 0.0))
  {
    memset(&v29[7], 0, 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)v29;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)&v29[16];
    *(void *)(a1 + 72) = 0;
    double v15 = v6 / 2.45;
    double v16 = v12 / 2.45;
    if (v13 > 0.0)
    {
      long double v25 = tan(v13 * -2.0 * 0.0174532925);
      double v26 = sqrt((v15 * v15 - v16 * v16) * (v15 * v15 - v16 * v16) * 0.25 * (v25 * v25) / (v25 * v25 + 1.0));
      *(double *)(a1 + 16) = v26;
      double v27 = v15 * v15 + v16 * v16;
      long double v28 = (v26 + v26) / v25;
      double v16 = (v27 + v28) * 0.5;
      double v15 = (v27 - v28) * 0.5;
    }
    *(double *)a1 = v16;
    *(double *)(a1 + 8) = v15;
    double v10 = v11 * v11;
    if (v11 <= 0.0) {
      double v10 = -1.0;
    }
    *(double *)(a1 + 24) = v10;
  }
  else
  {
    double v14 = *(double *)(a2 + 80);
    memset(&v29[7], 0, 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)v29;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)&v29[16];
    *(void *)(a1 + 72) = 0;
    double v15 = v14 * v14 * 0.5;
    *(double *)a1 = v15;
    *(double *)(a1 + 8) = v15;
    if (v11 > 0.0) {
      double v10 = v11 * v11;
    }
    *(double *)(a1 + 24) = v10;
    double v16 = v14 * v14 * 0.5;
  }
  double v17 = *(double *)(a2 + 96);
  if (v17 > 19.4444444 && v15 + v16 < 25.0)
  {
    __asm { FMOV            V2.2D, #25.0 }
    *(_OWORD *)a1 = _Q2;
    *(void *)(a1 + 16) = 0;
    double v15 = 25.0;
    double v16 = 25.0;
  }
  if (v15 + v16 < 156.25)
  {
    *(int64x2_t *)a1 = vdupq_n_s64(0x4063880000000000uLL);
    *(void *)(a1 + 16) = 0;
  }
  if (a3 && v10 > 0.0)
  {
    double v22 = 3.0;
    if (*(unsigned char *)(a2 + 228)) {
      double v22 = 15.0;
    }
    if (v17 == 0.0) {
      double v23 = 15.0;
    }
    else {
      double v23 = v22;
    }
    double v24 = sqrt(v10);
    double v10 = (v24 + v23) * (v24 + v23);
    *(double *)(a1 + 24) = v10;
  }
  if (v10 > 0.0 && v10 < 42.25) {
    *(void *)(a1 + 24) = 0x4045200000000000;
  }

  sub_190802818(a1);
}

void sub_190802818(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  double v1 = *(double *)a1;
  if (*(double *)a1 <= 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D40);
    }
    os_activity_scope_state_s v5 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_FAULT, "fVarEast <= 0.0", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  double v2 = *(double *)(a1 + 8);
  if (v2 <= 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D40);
    }
    double v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_FAULT, "fVarNorth <= 0.0", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_45;
      }
      goto LABEL_47;
    }
    return;
  }
  double v3 = *(double *)(a1 + 16);
  if (v3 >= 0.0)
  {
    double v7 = *(double *)(a1 + 24);
    if (v7 <= 0.0 || v7 >= 32400.0)
    {
      *(void *)(a1 + 24) = 0xBFF0000000000000;
      *(unsigned char *)(a1 + 40) = 0;
      double v14 = -v3;
      double v15 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 32) = v15;
      *(double *)(a1 + 48) = v2;
      *(double *)(a1 + 56) = v14;
      *(double *)(a1 + 64) = v1;
      if (v15 != 0.0)
      {
        *(double *)(a1 + 48) = v2 / v15;
        *(double *)(a1 + 56) = v14 / v15;
        *(double *)(a1 + 64) = v1 / v15;
        return;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D40);
      }
      double v16 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        goto LABEL_47;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 40) = 1;
      double v8 = v2 * v7;
      double v9 = -(v7 * v3);
      *(double *)(a1 + 48) = v2 * v7;
      *(double *)(a1 + 56) = v9;
      double v10 = v1 * v7;
      double v11 = v1 * v2 - v3 * v3;
      *(double *)(a1 + 64) = v10;
      *(double *)(a1 + 72) = v11;
      double v12 = v11 * v7;
      *(double *)(a1 + 32) = v11 * v7;
      if (v11 * v7 != 0.0)
      {
        *(double *)(a1 + 48) = v8 / v12;
        *(double *)(a1 + 56) = v9 / v12;
        *(double *)(a1 + 64) = v10 / v12;
        *(double *)(a1 + 72) = v11 / v12;
        return;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D40);
      }
      double v13 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_FAULT, "CLMM, Unexpected determinant of 0", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        goto LABEL_47;
      }
    }
LABEL_45:
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::calcInvAndDet()", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
    return;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D40);
  }
  os_activity_scope_state_s v4 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_FAULT, "fVarEastNorth < 0.0", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_45;
    }
LABEL_47:
    dispatch_once(&qword_1E929F6C0, &unk_1EE005D40);
    goto LABEL_45;
  }
}

void sub_190802DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  double v2 = *(double *)(a1 + 32);
  if (v2 <= 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005D40);
    }
    double v10 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_FAULT, "determinant <= 0.0", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005D40);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLMapDataUtil::CovarInvDet::calculateScoreAndVarFactor(MapMatcherScore &) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    double v4 = *(double *)(a1 + 48);
    double v5 = *(double *)(a1 + 56);
    double v6 = *(double *)(a1 + 64);
    if (*(unsigned char *)(a1 + 40))
    {
      double v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6
         + *(double *)(a2 + 56) * *(double *)(a2 + 56) * *(double *)(a1 + 72);
      double v8 = v7 / 3.0;
      double v9 = 248.050213;
    }
    else
    {
      double v7 = v5 * ((*(double *)(a2 + 32) + *(double *)(a2 + 32)) * *(double *)(a2 + 40))
         + *(double *)(a2 + 32) * *(double *)(a2 + 32) * v4
         + *(double *)(a2 + 40) * *(double *)(a2 + 40) * v6;
      double v8 = v7 * 0.5;
      double v9 = 39.4784176;
    }
    long double v12 = exp(v7 * -0.5);
    *(double *)(a2 + 16) = v8;
    *(long double *)a2 = v12 / sqrt(v2 * v9);
  }
}

os_log_t sub_190803018()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_190803CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_190803D20;
  block[3] = &unk_1E5698360;
  double v3 = *(NSObject **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  void block[5] = a2;
  block[6] = v4;
  block[4] = a3;
  dispatch_async(v3, block);
}

uint64_t sub_190803D20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 48);
  if (v1)
  {
    double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "geoAddress"), "formattedAddressLines");
    double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
    uint64_t v4 = v2;
    uint64_t v1 = 0;
  }

  return v3(v4, v5, v1);
}

uint64_t sub_190803D98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "geoAddress"), "formattedAddressLines");
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(v1 + 16);

  return v3(v1, v2, 0);
}

uint64_t sub_190804380(uint64_t a1, void *a2)
{
  uint64_t result = [a2 length];
  if (result)
  {
    if ([*(id *)(a1 + 32) length]) {
      [*(id *)(a1 + 32) appendString:@", "];
    }
    uint64_t v5 = *(void **)(a1 + 32);
    return [v5 appendString:a2];
  }
  return result;
}

uint64_t sub_19080456C()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1E92A01A0, "CNPostalAddressStreetKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E92A0190 = result;
  }
  else
  {
    uint64_t result = qword_1E92A0190;
  }
  off_1EB2713F0 = sub_1908045EC;
  return result;
}

uint64_t sub_1908045EC()
{
  return qword_1E92A0190;
}

void *sub_1908045F8()
{
  uint64_t result = dlopen("/System/Library/Frameworks/Contacts.framework/Contacts", 2);
  qword_1E92A01A0 = (uint64_t)result;
  return result;
}

uint64_t sub_190804624()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1E92A01A0, "CNPostalAddressSubLocalityKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E92A01A8 = result;
  }
  else
  {
    uint64_t result = qword_1E92A01A8;
  }
  off_1EB2713F8 = sub_1908046A4;
  return result;
}

uint64_t sub_1908046A4()
{
  return qword_1E92A01A8;
}

uint64_t sub_1908046B0()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1E92A01A0, "CNPostalAddressCityKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E92A01B0 = result;
  }
  else
  {
    uint64_t result = qword_1E92A01B0;
  }
  off_1EB271400 = sub_190804730;
  return result;
}

uint64_t sub_190804730()
{
  return qword_1E92A01B0;
}

uint64_t sub_19080473C()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1E92A01A0, "CNPostalAddressSubAdministrativeAreaKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E92A01B8 = result;
  }
  else
  {
    uint64_t result = qword_1E92A01B8;
  }
  off_1EB271408 = sub_1908047BC;
  return result;
}

uint64_t sub_1908047BC()
{
  return qword_1E92A01B8;
}

uint64_t sub_1908047C8()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1E92A01A0, "CNPostalAddressStateKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E92A01C0 = result;
  }
  else
  {
    uint64_t result = qword_1E92A01C0;
  }
  off_1EB271410 = sub_190804848;
  return result;
}

uint64_t sub_190804848()
{
  return qword_1E92A01C0;
}

uint64_t sub_190804854()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1E92A01A0, "CNPostalAddressPostalCodeKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E92A01C8 = result;
  }
  else
  {
    uint64_t result = qword_1E92A01C8;
  }
  off_1EB271418 = sub_1908048D4;
  return result;
}

uint64_t sub_1908048D4()
{
  return qword_1E92A01C8;
}

uint64_t sub_1908048E0()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1E92A01A0, "CNPostalAddressCountryKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E92A01D0 = result;
  }
  else
  {
    uint64_t result = qword_1E92A01D0;
  }
  off_1EB271420 = sub_190804960;
  return result;
}

uint64_t sub_190804960()
{
  return qword_1E92A01D0;
}

uint64_t sub_19080496C()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  id v0 = (uint64_t *)dlsym((void *)qword_1E92A01A0, "CNPostalAddressISOCountryCodeKey");
  if (v0)
  {
    uint64_t result = *v0;
    qword_1E92A01D8 = result;
  }
  else
  {
    uint64_t result = qword_1E92A01D8;
  }
  off_1EB271428 = sub_1908049EC;
  return result;
}

uint64_t sub_1908049EC()
{
  return qword_1E92A01D8;
}

Class sub_1908049F8()
{
  if (qword_1E92A0198 != -1) {
    dispatch_once(&qword_1E92A0198, &unk_1EE006680);
  }
  Class result = objc_getClass("CNPostalAddress");
  qword_1E92A01E0 = (uint64_t)result;
  off_1EB271430 = sub_190804A5C;
  return result;
}

uint64_t sub_190804A5C()
{
  return qword_1E92A01E0;
}

os_log_t sub_190804CDC()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Position");
  qword_1E929F678 = (uint64_t)result;
  return result;
}

void sub_190804D0C(double *a1, long double *a2, double *a3, long double a4, long double a5, long double a6)
{
  double v9 = sqrt(a5 * a5 + a4 * a4);
  *a2 = atan2(a5, a4) / 0.0174532925;
  double v10 = v9 * 0.99330562;
  double v11 = 0.0;
  double v12 = 1.57079633;
  if (v9 * 0.99330562 != 0.0)
  {
    long double __y = a6;
    unsigned int v13 = 0;
    double v12 = 0.0;
    double v14 = 0.0;
    do
    {
      double v15 = v12;
      double v12 = atan2(__y, v10);
      __double2 v16 = __sincos_stret(v12);
      double v17 = 6378137.0 / sqrt(v16.__sinval * -0.00669437999 * v16.__sinval + 1.0);
      double v11 = v9 / v16.__cosval - v17;
      if (vabdd_f64(v15, v12) >= 0.000001)
      {
        if (v13 > 8) {
          goto LABEL_13;
        }
      }
      else if (vabdd_f64(v14, v11) < 0.001 || v13 >= 9)
      {
        goto LABEL_13;
      }
      ++v13;
      double v10 = v9 * (v17 / (v17 + v11) * -0.00669437999 + 1.0);
      double v14 = v9 / v16.__cosval - v17;
    }
    while (v10 != 0.0);
    double v12 = 1.57079633;
  }
LABEL_13:
  *a1 = v12 / 0.0174532925;
  *a3 = v11;
}

uint64_t sub_190805298(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_didReceiveLocationPushPayload_completion_);
}

uint64_t sub_1908054C8(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v3, sel_serviceExtensionWillTerminate);
  }
  return result;
}

os_log_t sub_190806358()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Proximity");
  qword_1E929F688 = (uint64_t)result;
  return result;
}

void sub_190806684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_19080692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

uint64_t sub_190806958(uint64_t result)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(*(void *)(result + 40) + 8) + 24))
  {
    uint64_t v1 = result;
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE002CC0);
    }
    uint64_t v2 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "#monitor dealloc destroying connection in a deferred way", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE002CC0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "-[CLMonitor dealloc]_block_invoke", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return CLConnection::deferredDelete(*(CLConnection **)(*(void *)(*(void *)(v1 + 40) + 8) + 24));
  }
  return result;
}

void sub_190806C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_190806CB4(uint64_t a1, uint64_t a2)
{
}

void sub_190806CC4(uint64_t a1)
{
}

uint64_t sub_190806CD0(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) monitoredIdentifiers];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

uint64_t sub_190806D04(uint64_t a1)
{
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 24) allMonitoringRecordsByIdentifier];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_190807358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1908074D0(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1908074E4(uint64_t a1)
{
  Weauint64_t k = objc_loadWeak((id *)(a1 + 48));

  return MEMORY[0x1F4181798](Weak, sel_addConditionForMonitoring_identifier_options_assumedState_);
}

void sub_190807948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_190807A7C(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_190807A90(uint64_t a1)
{
  Weauint64_t k = objc_loadWeak((id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);

  return [Weak removeConditionFromMonitoringWithIdentifier:v3];
}

void sub_190807F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, os_activity_scope_state_s state, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  sub_1906BFE48(v17);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_190808630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  sub_1906BFE48(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1908086E0(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE002CC0);
  }
  uint64_t v4 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = *(void *)v5;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    double v14 = "";
    __int16 v15 = 2082;
    uint64_t v16 = v6;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#monitor Default handler invoked\", \"message\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  Weauint64_t k = objc_loadWeak((id *)(a1 + 32));
  double v8 = *(std::__shared_weak_count **)(a2 + 8);
  double v9 = *(CLConnectionMessage **)a2;
  double v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [Weak handleMessageMonitor:&v9];
  if (v10) {
    sub_1906BFE48(v10);
  }
}

void sub_19080881C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190808CF0(uint64_t a1)
{
  [*(id *)(a1 + 32) setIdentityToken:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setStorageToken:*(void *)(a1 + 48)];
  uint64_t v2 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v2, sel_manageConnection);
}

void sub_190809140(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_190809204()
{
  id result = (id)[MEMORY[0x1E4F1CA80] set];
  qword_1EB272570 = (uint64_t)result;
  return result;
}

uint64_t sub_190809390(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = &unk_1EE003C38;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (unsigned char *)(a1 + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_1906C00FC(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *(void *)(a1 + 40) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(void *)(a1 + 48) = 0x600000006;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_WORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 114) = 1;
  return a1;
}

void sub_190809438(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1906BFE48(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190809450(uint64_t a1)
{
  *(void *)a1 = &unk_1EE003C38;
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_1906BFE48(v3);
  }
  return a1;
}

uint64_t sub_1908094C4(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 112) = a2;
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t sub_1908094F8(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 113) = a2;
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)result + 32))(result, a2 ^ 1u);
  }
  return result;
}

uint64_t sub_190809530(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v311 = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3 || !a4)
  {
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    int v12 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = a2 == 0;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = a3 == 0;
      *(_WORD *)&unsigned char buf[14] = 1026;
      *(_DWORD *)&buf[16] = a4 == 0;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] Returned false. isTripLocationsNil, %{public}u, isInertialOdometryDataNil, %{public}u, isReconstructedLocationsNil, %{public}u.", buf, 0x14u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    *(_DWORD *)uint64_t v286 = 67240704;
    *(_DWORD *)&v286[4] = a2 == 0;
    *(_WORD *)&v286[8] = 1026;
    *(_DWORD *)&v286[10] = a3 == 0;
    *(_WORD *)&v286[14] = 1026;
    *(_DWORD *)&v286[16] = a4 == 0;
    __int16 v33 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v33);
    goto LABEL_385;
  }
  unint64_t v8 = [a3 count];
  if (v8 <= 1)
  {
    unint64_t v9 = v8;
    sub_190730B98((uint64_t)a2, a4);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    double v10 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = 2;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] Returned true. Deep copy tripLocations to reconstructedLocations. inertialOdometryData array count, %{public}zu, expected minimum count, %{public}zu.", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE005E20);
      }
      *(_DWORD *)uint64_t v286 = 134349312;
      *(void *)&v286[4] = v9;
      *(_WORD *)&v286[12] = 2050;
      *(void *)&v286[14] = 2;
      long long v245 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v245);
      if (v245 != buf) {
        free(v245);
      }
    }
    return 1;
  }
  double v274 = a5;
  uint64_t v276 = a4;
  sub_190731588(a2, 5uLL, (void **)buf, 15.5, 60.0);
  double v14 = (uint64_t **)(a1 + 528);
  __int16 v15 = *(void **)(a1 + 528);
  if (v15)
  {
    *(void *)(a1 + 536) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void *)buf;
  uint64_t v17 = *(void *)&buf[8];
  *(_OWORD *)(a1 + 536) = *(_OWORD *)&buf[8];
  v278 = (uint64_t **)(a1 + 536);
  *(void *)(a1 + 528) = v16;
  if ((unint64_t)(v17 - v16) <= 8)
  {
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    uint64_t v30 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *v278 - *v14;
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v31;
      _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] Returned false. Number of hunc based selected locations %{public}zu.", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    uint64_t v32 = *v278 - *v14;
    *(_DWORD *)uint64_t v286 = 134349056;
    *(void *)&v286[4] = v32;
    __int16 v33 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v33);
LABEL_385:
    if (v33 != buf) {
      free(v33);
    }
    return 0;
  }
  objc_msgSend((id)objc_msgSend(a2, "firstObject"), "latitude");
  uint64_t v19 = v18;
  objc_msgSend((id)objc_msgSend(a2, "firstObject"), "longitude");
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v20;
  *(unsigned char *)(a1 + 64) = 1;
  double v21 = sub_190732870(a2);
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", *(void *)(*(void *)(a1 + 536) - 8)), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", **(void **)(a1 + 528)), "timestamp"));
  double v23 = v22;
  BOOL v24 = v21 > 0.9;
  if (v22 >= 2700.0) {
    BOOL v24 = 0;
  }
  BOOL v273 = v24;
  if (qword_1E929F660 != -1) {
    dispatch_once(&qword_1E929F660, &unk_1EE005E20);
  }
  long double v25 = qword_1E929F668;
  if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134284033;
    *(double *)&uint8_t buf[4] = v21;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&unsigned char buf[14] = v23;
    *(_WORD *)&unsigned char buf[22] = 1026;
    LODWORD(v291) = v273;
    _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] ratioOfDenseUrbanLocation, %{private}.2f, durationOfSession_inSec, %{public}.2f, shouldRunRANSAC, %{public}d.", buf, 0x1Cu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    *(_DWORD *)uint64_t v286 = 134284033;
    *(double *)&v286[4] = v21;
    *(_WORD *)&v286[12] = 2050;
    *(double *)&v286[14] = v23;
    *(_WORD *)&v286[22] = 1026;
    *(_DWORD *)&v286[24] = v273;
    uint64_t v246 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v246);
    if (v246 != buf) {
      free(v246);
    }
  }
  if (!v273)
  {
    if (sub_19080C818(a1, a2, a3, a4)) {
      goto LABEL_194;
    }
    goto LABEL_206;
  }
  context = (void *)MEMORY[0x192FCF260]();
  *(_WORD *)a1 = 0;
  if (*(void *)(a1 + 536) - *(void *)(a1 + 528) <= 0xFuLL)
  {
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    double v26 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *v278 - *v14;
      *(_DWORD *)uint64_t buf = 134217984;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] RANSAC is called with insufficient locations samples, %{publuc}zu.", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_187;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    uint64_t v28 = *v278 - *v14;
    *(_DWORD *)__int16 v283 = 134217984;
    *(void *)&v283[4] = v28;
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v29);
    goto LABEL_406;
  }
  uint64_t v34 = (void *)[a2 objectsAtIndexes:sub_1907324FC(v14)];
  objc_msgSend((id)objc_msgSend((id)objc_msgSend(v34, "lastObject"), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(v34, "firstObject"), "timestamp"));
  if (v35 < 180.0 || v35 < 0.0)
  {
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    uint64_t v121 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v121, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] computation of scenario specific metrics failed.", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_187;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    *(_WORD *)__int16 v283 = 0;
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v29);
LABEL_406:
    if (v29 != buf) {
      free(v29);
    }
    goto LABEL_187;
  }
  unint64_t v36 = vcvtmd_u64_f64(v35 / 180.0);
  *(void *)(a1 + 552) = v36;
  long double v37 = pow(0.7, (double)(v36 + 2));
  unint64_t v38 = vcvtpd_u64_f64(-2.0 / log10(1.0 - v37));
  if (v38 <= 0x64) {
    unint64_t v38 = 100;
  }
  if (v38 >= 0x3E8) {
    unint64_t v38 = 1000;
  }
  *(void *)(a1 + 560) = v38;
  if (qword_1E929F660 != -1) {
    dispatch_once(&qword_1E929F660, &unk_1EE005E20);
  }
  char v39 = qword_1E929F668;
  if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = *(void *)(a1 + 560);
    uint64_t v41 = *(void *)(a1 + 552);
    *(_DWORD *)uint64_t buf = 134218240;
    *(void *)&uint8_t buf[4] = v40;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v41;
    _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[computeScenarioSpecificMetrics] number of iteration,%lu, number of intermediate points, %lu.", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    uint64_t v249 = *(void *)(a1 + 560);
    uint64_t v250 = *(void *)(a1 + 552);
    *(_DWORD *)__int16 v283 = 134218240;
    *(void *)&v283[4] = v249;
    *(_WORD *)&v283[12] = 2048;
    *(void *)&v283[14] = v250;
    long long v251 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::computeScenarioSpecificMetrics(NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v251);
    if (v251 != buf) {
      free(v251);
    }
  }
  id v275 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  __int16 v42 = (void *)a1;
  if (!*(void *)(a1 + 560))
  {
    uint64_t v262 = 0;
    double v264 = 0;
LABEL_309:

    double v216 = (void **)v262;
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    uint64_t v217 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = (v262 - (char *)v264) >> 4;
      _os_log_impl(&dword_1906B8000, v217, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] Number of selected models, %{public}zu.", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE005E20);
      }
      unint64_t v219 = (v262 - (char *)v264) >> 4;
      *(_DWORD *)__int16 v283 = 134349056;
      *(void *)&v283[4] = v219;
      double v252 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v252);
      if (v252 != buf) {
        free(v252);
      }
      double v216 = (void **)v262;
      unint64_t v218 = (unint64_t)v264;
    }
    else
    {
      unint64_t v218 = (unint64_t)v264;
      unint64_t v219 = (v262 - (char *)v264) >> 4;
    }
    unint64_t v220 = 126 - 2 * __clz(v219);
    if (v216 == (void **)v218) {
      uint64_t v221 = 0;
    }
    else {
      uint64_t v221 = v220;
    }
    sub_19080D00C(v218, v216, v221, 1);
    double v222 = sub_190732658(a3);
    *(_WORD *)a1 = 257;
    long long v223 = v264;
    if (v216 == v264) {
      goto LABEL_364;
    }
    unint64_t v224 = 0;
    if (v219 <= 1) {
      unint64_t v219 = 1;
    }
    double v225 = v222 * 5.0;
    double v226 = v222 * 0.5;
    while (1)
    {
      if (v224 >= 0xB) {
        *(unsigned char *)a1 = 0;
      }
      uint64_t v227 = *v223;
      if ((sub_1907A24B0((unsigned __int8 *)a1, (void *)[a2 objectsAtIndexes:*v223], a3, v276) & 1) == 0) {
        break;
      }
      double v228 = sub_190732564(v276);
      BOOL v229 = v228 > v226 && v228 < v225;
      if (*(double *)(a1 + 376) < 3.0 && *(double *)(a1 + 384) < 0.785398157 && v229)
      {
        *(void *)(a1 + 512) = *(void *)(a1 + 504);
        *(void *)uint64_t v286 = MEMORY[0x1E4F143A8];
        *(void *)&v286[8] = 3221225472;
        *(void *)&v286[16] = sub_19080CB78;
        *(void *)&v286[24] = &unk_1E5698420;
        long long __p = (void *)a1;
        [v227 enumerateIndexesUsingBlock:v286];
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE005E20);
        }
        unint64_t v244 = qword_1E929F668;
        if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          *(void *)&uint8_t buf[4] = v224;
          _os_log_impl(&dword_1906B8000, v244, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] selected model, %{public}zu.", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE005E20);
          }
          *(_DWORD *)__int16 v283 = 134349056;
          *(void *)&v283[4] = v224;
          unint64_t v256 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v256);
          if (v256 != buf) {
            free(v256);
          }
        }
        int v241 = 1;
LABEL_366:
        operator delete(v264);
        uint64_t v122 = qword_1E929F660;
        if (!v241) {
          goto LABEL_188;
        }
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE005E20);
        }
        long long v242 = qword_1E929F668;
        if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl(&dword_1906B8000, v242, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] RANSAC succeeded.", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE005E20);
          }
          *(_WORD *)uint64_t v286 = 0;
          uint64_t v243 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v243);
          if (v243 != buf) {
            free(v243);
          }
        }
LABEL_194:
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "objectAtIndex:", objc_msgSend(sub_1907324FC((uint64_t **)(a1 + 504)), "firstIndex")), "timestamp"), "timeIntervalSinceReferenceDate");
        *double v274 = v124;
        objc_msgSend((id)objc_msgSend((id)objc_msgSend(v276, "lastObject"), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend(v276, "firstObject"), "timestamp"));
        double v272 = v125;
        long long v126 = *(_OWORD *)(a1 + 424);
        *(_OWORD *)uint64_t v286 = *(_OWORD *)(a1 + 408);
        *(_OWORD *)&v286[16] = v126;
        long long __dst = 0;
        uint64_t v289 = 0;
        long long __p = 0;
        uint64_t v128 = *(unsigned char **)(a1 + 440);
        long long v127 = *(unsigned char **)(a1 + 448);
        int64_t v129 = v127 - v128;
        if (v127 != v128)
        {
          sub_190758538(&__p, v129 >> 3);
          uint64_t v130 = (char *)__dst;
          memmove(__dst, v128, v129);
          long long __dst = &v130[8 * (v129 >> 3)];
        }
        double v131 = sub_190732564(v276);
        if (v131 <= 0.0)
        {
          if (qword_1E929F660 != -1) {
            dispatch_once(&qword_1E929F660, &unk_1EE005E20);
          }
          uint64_t v146 = qword_1E929F668;
          if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl(&dword_1906B8000, v146, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[CA metrics] ptsPathLength is zero", buf, 2u);
          }
          double v131 = -1.0;
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE005E20);
            }
            *(_WORD *)__int16 v283 = 0;
            int v248 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "void CLTrajectorySmoother::computeReconstructedRouteMetrics(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, CLPedestrianRTSSmoother::RTSModelMetrics, double &, double &, double &)", "CoreLocation: %s\n", v248);
            if (v248 != buf) {
              free(v248);
            }
          }
          double contexta = -1.0;
          double v269 = -1.0;
        }
        else
        {
          *(void *)__int16 v283 = [a2 firstObject];
          *(void *)&v283[8] = [a2 lastObject];
          double v132 = sub_190732564((void *)[MEMORY[0x1E4F1C978] arrayWithObjects:v283 count:2]);
          int64_t v133 = ((unsigned char *)__dst - (unsigned char *)__p) >> 3;
          uint64_t v134 = *(void *)(a1 + 504);
          uint64_t v135 = *(void *)(a1 + 512) - v134;
          double v269 = v132 / v131;
          if (v133 == (v135 >> 3) - 1)
          {
            *(void *)uint64_t buf = 0;
            unint64_t v282 = 0;
            double v136 = 0.0;
            if (v135 != 8)
            {
              unint64_t v137 = 0;
              do
              {
                uint64_t v138 = (void *)[a2 objectAtIndexedSubscript:*(void *)(v134 + 8 * v137 + 8)];
                uint64_t v139 = (void *)[a2 objectAtIndexedSubscript:*(void *)(*(void *)(a1 + 504) + 8 * v137)];
                objc_msgSend((id)objc_msgSend(v138, "timestamp"), "timeIntervalSinceReferenceDate");
                double v141 = v140;
                objc_msgSend((id)objc_msgSend(v139, "timestamp"), "timeIntervalSinceReferenceDate");
                sub_190730AE0(v276, (unint64_t *)buf, &v282, v142, v141);
                unint64_t v143 = v282;
                double v144 = sub_190732564(objc_msgSend(v276, "subarrayWithRange:"));
                if (v144 <= 0.0) {
                  --v133;
                }
                else {
                  double v136 = v136 + *((double *)__p + v137) / v144;
                }
                ++v137;
                *(void *)uint64_t buf = v143;
                uint64_t v134 = *(void *)(a1 + 504);
              }
              while (v137 < ((*(void *)(a1 + 512) - v134) >> 3) - 1);
            }
            if (v133) {
              double v145 = v136 / (double)(unint64_t)v133;
            }
            else {
              double v145 = -1.0;
            }
            double contexta = v145;
          }
          else
          {
            if (qword_1E929F660 != -1) {
              dispatch_once(&qword_1E929F660, &unk_1EE005E20);
            }
            uint64_t v147 = qword_1E929F668;
            if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl(&dword_1906B8000, v147, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[CA metrics] fwdPropEndptError.size != consumedTripLocation.size", buf, 2u);
            }
            double contexta = -1.0;
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE005E20);
              }
              LOWORD(v282) = 0;
              uint64_t v148 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "void CLTrajectorySmoother::computeReconstructedRouteMetrics(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, CLPedestrianRTSSmoother::RTSModelMetrics, double &, double &, double &)", "CoreLocation: %s\n", v148);
              if (v148 != buf) {
                free(v148);
              }
            }
          }
        }
        if (__p)
        {
          long long __dst = __p;
          operator delete(__p);
        }
        uint64_t v149 = *(unint64_t **)(a1 + 504);
        uint64_t v150 = *(unint64_t **)(a1 + 512);
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&buf[16] = 0;
        *(void *)uint64_t buf = &buf[8];
        if (v149 == v150)
        {
LABEL_255:
          int v162 = 0;
          unint64_t v163 = 0;
          __int16 v164 = 0;
          int64x2_t v165 = 0;
          double v166 = 0.0;
          double v167 = 0.0;
          double v277 = 0.0;
          double v279 = 0.0;
          double v168 = 0.0;
          while (v163 < [a2 count])
          {
            unint64_t v169 = (void *)[a2 objectAtIndexedSubscript:v163];
            long long v170 = v169;
            unint64_t v171 = *(void **)&buf[8];
            if (*(void *)&buf[8])
            {
              uint64_t v172 = &buf[8];
              do
              {
                unint64_t v173 = v171;
                double v174 = v172;
                unint64_t v175 = v171[4];
                if (v175 >= v163) {
                  uint64_t v172 = v171;
                }
                else {
                  ++v171;
                }
                unint64_t v171 = (void *)*v171;
              }
              while (v171);
              if (v172 != &buf[8])
              {
                if (v175 < v163) {
                  unint64_t v173 = v174;
                }
                if (v163 >= v173[4])
                {
                  if (v165)
                  {
                    objc_msgSend((id)objc_msgSend(v169, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v165, "timestamp"));
                    double v177 = v279;
                    if (v176 > v279) {
                      double v177 = v176;
                    }
                    double v277 = v277 + v176;
                    double v279 = v177;
                    if (v176 > 20.0) {
                      ++v162;
                    }
                  }
                  [v170 horizontalAccuracy];
                  double v166 = v166 + v178;
                  int64x2_t v165 = v170;
                }
              }
            }
            if (v164)
            {
              objc_msgSend((id)objc_msgSend(v170, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v164, "timestamp"));
              double v168 = v168 + v179;
            }
            [v170 horizontalAccuracy];
            double v167 = v167 + v180;
            ++v163;
            __int16 v164 = v170;
          }
          uint64_t v263 = *(void *)(a1 + 504);
          int v265 = *(void **)(a1 + 512);
          unint64_t v261 = [a2 count];
          uint64_t v181 = [a2 count];
          double v258 = v166;
          double v259 = v131;
          sub_1906DDC00(*(void **)&buf[8]);
          double v257 = sub_190732658(a3);
          int v182 = 0;
          int v183 = 0;
          if ([a3 count])
          {
            unint64_t v184 = 0;
            BOOL v185 = 0;
            double v186 = 0.0;
            double v187 = 1.79769313e308;
            double v188 = 0.0;
            double v189 = 2.22507386e-308;
            double v190 = 0.0;
            do
            {
              uint64_t v191 = (void *)[a3 objectAtIndexedSubscript:v184];
              objc_msgSend((id)objc_msgSend(v191, "deltaPosition_m"), "X");
              double v193 = v192;
              objc_msgSend((id)objc_msgSend(v191, "deltaPosition_m"), "Y");
              float v194 = v193;
              *(float *)&double v195 = v195;
              *(float *)uint64_t buf = v194;
              *(_DWORD *)&uint8_t buf[4] = LODWORD(v195);
              objc_msgSend((id)objc_msgSend(v191, "deltaPosition_m"), "Z");
              double v190 = v190 + v196;
              if (v190 > v189) {
                double v189 = v190;
              }
              if (v190 < v187) {
                double v187 = v190;
              }
              if (v184)
              {
                uint64_t v197 = (void *)[a3 objectAtIndexedSubscript:v184 - 1];
                BOOL v198 = [v197 staticFlag] == 1;
                objc_msgSend((id)objc_msgSend(v191, "cfAbsTimestamp"), "timeIntervalSinceDate:", objc_msgSend(v197, "cfAbsTimestamp"));
                if (v198) {
                  double v200 = v199;
                }
                else {
                  double v200 = -0.0;
                }
                double v188 = v188 + v200;
                if (v198) {
                  double v199 = -0.0;
                }
                double v186 = v186 + v199;
                if (v184 >= 7)
                {
                  uint64_t v201 = (void *)[a3 objectAtIndexedSubscript:v184 - 6];
                  objc_msgSend((id)objc_msgSend(v201, "deltaPosition_m"), "X");
                  double v203 = v202;
                  objc_msgSend((id)objc_msgSend(v201, "deltaPosition_m"), "Y");
                  float v204 = v203;
                  *(float *)&double v205 = v205;
                  *(float *)__int16 v283 = v204;
                  *(_DWORD *)&v283[4] = LODWORD(v205);
                  sub_190731008((float *)v283, (float *)buf);
                  double v207 = fabs(v206);
                  int v208 = !v185;
                  BOOL v185 = v207 > 1.30899693;
                  int v209 = v185 & v208;
                  if (v207 > 2.44346093) {
                    int v210 = v209;
                  }
                  else {
                    int v210 = 0;
                  }
                  v182 += v210;
                  v183 += v209;
                }
              }
              ++v184;
            }
            while (v184 < [a3 count]);
            double v211 = v189 - v187;
          }
          else
          {
            double v188 = 0.0;
            double v211 = -1.79769313e308;
            double v186 = 0.0;
          }
          uint64_t v212 = ((uint64_t)v265 - v263) >> 3;
          double v213 = v257 / v259;
          if (v259 <= 0.0) {
            double v213 = -1.0;
          }
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)uint64_t buf = MEMORY[0x1E4F143A8];
          *(void *)&buf[16] = sub_19080CC58;
          uint64_t v291 = &unk_1E5698440;
          uint64_t v292 = a1;
          int v307 = v183;
          int v308 = v182;
          int v309 = v162;
          double v293 = v272 / 60.0;
          double v294 = v259;
          double v295 = v257;
          double v296 = v213;
          double v297 = v188 / (v188 + v186);
          uint64_t v298 = a1 + 408;
          double v299 = v258 / (double)(unint64_t)v212;
          double v300 = v167 / (double)v261;
          double v301 = v277 / (double)(unint64_t)(v212 - 1);
          double v302 = v279;
          double v303 = v168 / (double)(unint64_t)(v181 - 1);
          double v304 = v211;
          double v305 = v269;
          double v306 = contexta;
          BOOL v310 = v273;
          AnalyticsSendEventLazy();
          uint64_t v11 = 1;
          goto LABEL_299;
        }
        uint64_t v151 = 0;
        uint64_t v152 = &buf[8];
        while (2)
        {
          unint64_t v153 = *v149;
          uint64_t v154 = &buf[8];
          if (v152 == &buf[8]) {
            goto LABEL_234;
          }
          int v155 = v151;
          long long v156 = &buf[8];
          if (v151)
          {
            do
            {
              uint64_t v154 = v155;
              int v155 = (void *)v155[1];
            }
            while (v155);
          }
          else
          {
            do
            {
              uint64_t v154 = (void *)*((void *)v156 + 2);
              BOOL v61 = *v154 == (void)v156;
              long long v156 = v154;
            }
            while (v61);
          }
          if (v154[4] < v153)
          {
LABEL_234:
            if (v151) {
              __int16 v157 = (uint64_t **)v154;
            }
            else {
              __int16 v157 = (uint64_t **)&buf[8];
            }
            if (v151)
            {
              long long v158 = (uint64_t **)(v154 + 1);
            }
            else
            {
              uint64_t v154 = buf;
              long long v158 = (uint64_t **)&buf[8];
            }
            if (!v154[1])
            {
LABEL_250:
              uint64_t v161 = (uint64_t *)operator new(0x28uLL);
              v161[4] = v153;
              *uint64_t v161 = 0;
              v161[1] = 0;
              uint64_t v161[2] = (uint64_t)v157;
              *long long v158 = v161;
              if (**(void **)buf)
              {
                *(void *)uint64_t buf = **(void **)buf;
                uint64_t v161 = *v158;
              }
              sub_19074BCA4(*(uint64_t **)&buf[8], v161);
              ++*(void *)&buf[16];
            }
          }
          else
          {
            long long v158 = (uint64_t **)&buf[8];
            __int16 v157 = (uint64_t **)&buf[8];
            if (!v151) {
              goto LABEL_250;
            }
            __int16 v159 = v151;
            while (1)
            {
              while (1)
              {
                __int16 v157 = (uint64_t **)v159;
                unint64_t v160 = v159[4];
                if (v160 <= v153) {
                  break;
                }
                __int16 v159 = *v157;
                long long v158 = v157;
                if (!*v157) {
                  goto LABEL_250;
                }
              }
              if (v160 >= v153) {
                break;
              }
              __int16 v159 = v157[1];
              if (!v159)
              {
                long long v158 = v157 + 1;
                goto LABEL_250;
              }
            }
          }
          if (++v149 == v150) {
            goto LABEL_255;
          }
          uint64_t v152 = *(unsigned char **)buf;
          uint64_t v151 = *(void **)&buf[8];
          continue;
        }
      }
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE005E20);
      }
      uint64_t v231 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
      {
        double v232 = *(double *)(a1 + 384);
        BOOL v233 = *(double *)(a1 + 376) < 3.0;
        *(_DWORD *)uint64_t buf = 134349824;
        *(void *)&uint8_t buf[4] = v224;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v233;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v232 < 0.785398157;
        LOWORD(v291) = 1026;
        *(_DWORD *)((char *)&v291 + 2) = v229;
        _os_log_impl(&dword_1906B8000, v231, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] Disgard model, %{public}zu, isDisplacementRatio, %{public}d, isCourseOffset, %{public}d, isDistance, %{public}d.", buf, 0x1Eu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F660 != -1) {
          dispatch_once(&qword_1E929F660, &unk_1EE005E20);
        }
        BOOL v236 = *(double *)(a1 + 376) < 3.0;
        BOOL v237 = *(double *)(a1 + 384) < 0.785398157;
        *(_DWORD *)__int16 v283 = 134349824;
        *(void *)&v283[4] = v224;
        *(_WORD *)&v283[12] = 1026;
        *(_DWORD *)&v283[14] = v236;
        *(_WORD *)&v283[18] = 1026;
        *(_DWORD *)&v283[20] = v237;
        __int16 v284 = 1026;
        BOOL v285 = v229;
        long long v235 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v235);
        if (v235 != buf) {
          goto LABEL_349;
        }
      }
LABEL_344:
      [v276 removeAllObjects];
      ++v224;
      v223 += 2;
      if (v219 == v224) {
        goto LABEL_365;
      }
    }
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    int v234 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v224;
      _os_log_impl(&dword_1906B8000, v234, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] RTS failed while evaluating model, %{public}zu.", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_344;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    *(_DWORD *)__int16 v283 = 134349056;
    *(void *)&v283[4] = v224;
    long long v235 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v235);
    if (v235 == buf) {
      goto LABEL_344;
    }
LABEL_349:
    free(v235);
    goto LABEL_344;
  }
  uint64_t v262 = 0;
  double v264 = 0;
  uint64_t v260 = 0;
  uint64_t v270 = 0;
  unint64_t v271 = (double *)(a1 + 464);
  while (1)
  {
    unint64_t v43 = v42[69] + 2;
    if (v43 >= (uint64_t)(v42[67] - v42[66]) >> 3) {
      break;
    }
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&buf[16] = 0;
    *(void *)uint64_t buf = &buf[8];
    sub_19080DDCC((uint64_t *)buf, 0, 0);
    uint64_t v44 = *v278 - *v14 - 1;
    sub_19080DDCC((uint64_t *)buf, v44, v44);
    while (*(void *)&buf[16] < v43)
    {
      uint32_t v45 = arc4random_uniform((unint64_t)((char *)*v278 - (char *)*v14) >> 3);
      uint64_t v46 = v45;
      uint64_t v47 = *(uint64_t **)&buf[8];
      uint64_t v48 = (uint64_t **)&buf[8];
      char v49 = (uint64_t **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v50 = &buf[8];
        uint64_t v51 = *(void **)&buf[8];
        do
        {
          double v52 = v51;
          uint64_t v53 = v50;
          unint64_t v54 = v51[4];
          if (v54 >= v45) {
            uint64_t v50 = v51;
          }
          else {
            ++v51;
          }
          uint64_t v51 = (void *)*v51;
        }
        while (v51);
        if (v50 == &buf[8]) {
          goto LABEL_77;
        }
        if (v54 < v45) {
          double v52 = v53;
        }
        if (v52[4] > (unint64_t)v45)
        {
LABEL_77:
          while (1)
          {
            while (1)
            {
              char v49 = (uint64_t **)v47;
              unint64_t v55 = v47[4];
              if (v55 <= v45) {
                break;
              }
              uint64_t v47 = *v49;
              uint64_t v48 = v49;
              if (!*v49) {
                goto LABEL_80;
              }
            }
            if (v55 >= v45) {
              break;
            }
            uint64_t v47 = v49[1];
            if (!v47)
            {
              uint64_t v48 = v49 + 1;
              goto LABEL_80;
            }
          }
        }
      }
      else
      {
LABEL_80:
        uint64_t v56 = (uint64_t *)operator new(0x28uLL);
        v56[4] = v46;
        *uint64_t v56 = 0;
        v56[1] = 0;
        v56[2] = (uint64_t)v49;
        *uint64_t v48 = v56;
        if (**(void **)buf)
        {
          *(void *)uint64_t buf = **(void **)buf;
          uint64_t v56 = *v48;
        }
        sub_19074BCA4(*(uint64_t **)&buf[8], v56);
        ++*(void *)&buf[16];
      }
    }
    uint64_t v57 = (void *)[MEMORY[0x1E4F28E60] indexSet];
    uint64_t v58 = *(void **)buf;
    if (*(unsigned char **)buf != &buf[8])
    {
      do
      {
        [v57 addIndex:(*v14)[v58[4]]];
        double v59 = (void *)v58[1];
        if (v59)
        {
          do
          {
            double v60 = v59;
            double v59 = (void *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            double v60 = (unsigned char *)v58[2];
            BOOL v61 = *(void *)v60 == (void)v58;
            uint64_t v58 = v60;
          }
          while (!v61);
        }
        uint64_t v58 = v60;
      }
      while (v60 != &buf[8]);
    }
    sub_1906DDC00(*(void **)&buf[8]);
    if (!v57) {
      goto LABEL_359;
    }
    if ((sub_1907A24B0((unsigned __int8 *)a1, (void *)[a2 objectsAtIndexes:v57], a3, v275) & 1) == 0)
    {
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE005E20);
      }
      int v92 = qword_1E929F668;
      if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v92, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] RTS failed while generating models with randomly selected location samples.", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_156;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE005E20);
      }
      *(_WORD *)__int16 v283 = 0;
      int v101 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v101);
      if (v101 == buf) {
        goto LABEL_156;
      }
LABEL_176:
      free(v101);
      goto LABEL_156;
    }
    uint64_t v268 = (void *)[MEMORY[0x1E4F28E60] indexSet];
    if (*v278 != *v14)
    {
      unint64_t v62 = 0;
      unint64_t v63 = 0;
      double v64 = 0.0;
      while (1)
      {
        if (v63 >= [v275 count]) {
          goto LABEL_115;
        }
        uint64_t v65 = (*v14)[v62];
        uint64_t v66 = (void *)[a2 objectAtIndex:v65];
        uint64_t v67 = (void *)[v275 objectAtIndex:v63];
        if (objc_msgSend((id)objc_msgSend(v67, "timestamp"), "compare:", objc_msgSend(v66, "timestamp")) == -1)
        {
          ++v63;
        }
        else
        {
          if (v63)
          {
            unint64_t v68 = (void *)[v275 objectAtIndex:v63 - 1];
            objc_msgSend((id)objc_msgSend(v66, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v68, "timestamp"));
            double v70 = v69;
            objc_msgSend((id)objc_msgSend(v67, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v68, "timestamp"));
            double v72 = v71;
            double v73 = v70 / v71;
            if (v70 / v71 > 1.0)
            {
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE005E20);
              }
              uint64_t v106 = qword_1E929F668;
              if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t buf = 134218240;
                *(double *)&uint8_t buf[4] = v70;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(double *)&unsigned char buf[14] = v72;
                _os_log_impl(&dword_1906B8000, v106, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[selectInliers] projection is greater than 1, fromPrevToMeas, %.2f, fromPrevToEvaluate, %.2f", buf, 0x16u);
              }
              if (!sub_1906CB57C(115, 0)) {
                goto LABEL_163;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE005E20);
              }
              *(_DWORD *)__int16 v283 = 134218240;
              *(double *)&v283[4] = v70;
              *(_WORD *)&v283[12] = 2048;
              *(double *)&v283[14] = v72;
              unint64_t v107 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::selectInliers(RTSModel &, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v107);
              goto LABEL_180;
            }
            [v68 latitude];
            double v75 = v74;
            [v68 longitude];
            double v77 = v76;
            [v67 latitude];
            double v79 = v78;
            [v67 longitude];
            sub_19073290C((double *)buf, v75, v77, v79, v80, v73);
            [v66 latitude];
            double v82 = v81;
            [v66 longitude];
            double v84 = sub_1906DA618(v271, v82, v83, *(double *)buf, *(double *)&buf[8], 0.0);
            if (v84 < 25.0) {
              [v268 addIndex:v65];
            }
          }
          else
          {
            if (objc_msgSend((id)objc_msgSend(v67, "timestamp"), "compare:", objc_msgSend(v66, "timestamp")))
            {
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE005E20);
              }
              uint64_t v113 = qword_1E929F668;
              if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
              {
                objc_msgSend((id)objc_msgSend(v67, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v115 = v114;
                objc_msgSend((id)objc_msgSend(v66, "timestamp"), "timeIntervalSinceReferenceDate");
                *(_DWORD *)uint64_t buf = 134218240;
                *(void *)&uint8_t buf[4] = v115;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(void *)&unsigned char buf[14] = v116;
                _os_log_impl(&dword_1906B8000, v113, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[selectInliers] first estimated location is later than first measured locaton, timestampFirstEstimated, %.2f, timestampFirstMeasured, %.2f", buf, 0x16u);
              }
              if (!sub_1906CB57C(115, 0))
              {
LABEL_163:
                if (qword_1E929F660 != -1) {
                  dispatch_once(&qword_1E929F660, &unk_1EE005E20);
                }
                uint64_t v117 = qword_1E929F668;
                if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl(&dword_1906B8000, v117, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] Selection of inliers failed.", buf, 2u);
                }
                if (!sub_1906CB57C(115, 0)) {
                  goto LABEL_156;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1E929F660 != -1) {
                  dispatch_once(&qword_1E929F660, &unk_1EE005E20);
                }
                *(_WORD *)__int16 v283 = 0;
                int v101 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v101);
                if (v101 == buf) {
                  goto LABEL_156;
                }
                goto LABEL_176;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F660 != -1) {
                dispatch_once(&qword_1E929F660, &unk_1EE005E20);
              }
              objc_msgSend((id)objc_msgSend(v67, "timestamp"), "timeIntervalSinceReferenceDate");
              uint64_t v119 = v118;
              objc_msgSend((id)objc_msgSend(v66, "timestamp"), "timeIntervalSinceReferenceDate");
              *(_DWORD *)__int16 v283 = 134218240;
              *(void *)&v283[4] = v119;
              *(_WORD *)&v283[12] = 2048;
              *(void *)&v283[14] = v120;
              unint64_t v107 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::selectInliers(RTSModel &, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v107);
LABEL_180:
              if (v107 != buf) {
                free(v107);
              }
              goto LABEL_163;
            }
            [v66 latitude];
            double v86 = v85;
            [v66 longitude];
            double v88 = v87;
            [v67 latitude];
            double v90 = v89;
            [v67 longitude];
            double v84 = sub_1906DA618(v271, v86, v88, v90, v91, 0.0);
            if (v84 < 25.0) {
              [v268 addIndex:v65];
            }
            unint64_t v63 = 0;
          }
          double v64 = v64 + v84;
          ++v62;
        }
        if (v62 >= *v278 - *v14) {
          goto LABEL_115;
        }
      }
    }
    double v64 = 0.0;
LABEL_115:
    unint64_t v93 = [v268 count];
    int v94 = *v278;
    unint64_t v95 = *v14;
    BOOL v96 = sub_1907327B0((void *)[a2 objectsAtIndexes:v268]);
    BOOL v97 = v96;
    double v98 = (double)v93 / (double)(unint64_t)(v94 - v95);
    int v99 = v98 < 0.8 || v96;
    if (v99 != 1)
    {
      if (v262 >= v260)
      {
        uint64_t v102 = (v262 - (char *)v264) >> 4;
        unint64_t v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 60) {
          sub_190718FD4();
        }
        if ((v260 - (char *)v264) >> 3 > v103) {
          unint64_t v103 = (v260 - (char *)v264) >> 3;
        }
        if ((unint64_t)(v260 - (char *)v264) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v104 = v103;
        }
        if (v104)
        {
          if (v104 >> 60) {
            sub_190718124();
          }
          long long v105 = (char *)operator new(16 * v104);
        }
        else
        {
          long long v105 = 0;
        }
        uint64_t v108 = (double *)&v105[16 * v102];
        *(void *)uint64_t v108 = v268;
        v108[1] = v64;
        if (v262 == (char *)v264)
        {
          unint64_t v112 = &v105[16 * v102];
          uint64_t v110 = v264;
        }
        else
        {
          uint64_t v109 = &v105[16 * v102];
          uint64_t v111 = (void **)v262;
          uint64_t v110 = v264;
          do
          {
            unint64_t v112 = v109 - 16;
            *((_OWORD *)v109 - 1) = *((_OWORD *)v111 - 1);
            v111 -= 2;
            v109 -= 16;
          }
          while (v111 != v264);
        }
        uint64_t v260 = &v105[16 * v104];
        uint64_t v262 = (char *)(v108 + 2);
        if (v110) {
          operator delete(v110);
        }
        double v264 = (void **)v112;
      }
      else
      {
        *(void *)uint64_t v262 = v268;
        *((double *)v262 + 1) = v64;
        v262 += 16;
      }
      goto LABEL_156;
    }
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    uint64_t v100 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v97;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v98 < 0.8;
      _os_log_impl(&dword_1906B8000, v100, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] Disgarding model, areInliersTooSparse, %{public}d, isRatioOfInliersLow, %{public}d.", buf, 0xEu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE005E20);
      }
      *(_DWORD *)__int16 v283 = 67240448;
      *(_DWORD *)&v283[4] = v97;
      *(_WORD *)&v283[8] = 1026;
      *(_DWORD *)&v283[10] = v98 < 0.8;
      int v101 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v101);
      if (v101 != buf) {
        goto LABEL_176;
      }
    }
LABEL_156:
    [v275 removeAllObjects];
    __int16 v42 = (void *)a1;
    if ((unint64_t)++v270 >= *(void *)(a1 + 560)) {
      goto LABEL_309;
    }
  }
  if (qword_1E929F660 != -1) {
    dispatch_once(&qword_1E929F660, &unk_1EE005E20);
  }
  long long v238 = qword_1E929F668;
  if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
  {
    uint64_t v239 = *v278 - *v14;
    *(_DWORD *)uint64_t buf = 134217984;
    *(void *)&uint8_t buf[4] = v239;
    _os_log_impl(&dword_1906B8000, v238, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[chooseRandomLocationIndices] insufficient location samplers for random selection, %{publuc}zu.", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    uint64_t v254 = *v278 - *v14;
    *(_DWORD *)__int16 v283 = 134217984;
    *(void *)&v283[4] = v254;
    int64x2_t v255 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "NSIndexSet *CLTrajectorySmoother::chooseRandomLocationIndices()", "CoreLocation: %s\n", v255);
    if (v255 != buf) {
      free(v255);
    }
  }
LABEL_359:
  if (qword_1E929F660 != -1) {
    dispatch_once(&qword_1E929F660, &unk_1EE005E20);
  }
  long long v240 = qword_1E929F668;
  if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v240, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothingWithRANSAC] random location selection failed.", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    *(_WORD *)__int16 v283 = 0;
    uint64_t v253 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothingWithRANSAC(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v253);
    if (v253 != buf) {
      free(v253);
    }
  }
LABEL_364:
  if (v264)
  {
LABEL_365:
    int v241 = 0;
    goto LABEL_366;
  }
LABEL_187:
  uint64_t v122 = qword_1E929F660;
LABEL_188:
  if (v122 != -1) {
    dispatch_once(&qword_1E929F660, &unk_1EE005E20);
  }
  uint64_t v123 = qword_1E929F668;
  if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v123, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] RANSAC failed. Fall back to non-RANSAC.", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    *(_WORD *)uint64_t v286 = 0;
    uint64_t v247 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v247);
    if (v247 != buf) {
      free(v247);
    }
  }
  if (sub_19080C818(a1, a2, a3, v276)) {
    goto LABEL_194;
  }
LABEL_206:
  uint64_t v11 = 0;
LABEL_299:
  if (qword_1E929F660 != -1) {
    dispatch_once(&qword_1E929F660, &unk_1EE005E20);
  }
  uint64_t v214 = qword_1E929F668;
  if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl(&dword_1906B8000, v214, OS_LOG_TYPE_DEFAULT, "[CLTrajectorySmoother]:[runPedestrianTrajectorySmoothing] Completed, returned %{public}u.", buf, 8u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    *(_DWORD *)uint64_t v286 = 67240192;
    *(_DWORD *)&v286[4] = v11;
    uint64_t v215 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTrajectorySmoother::runPedestrianTrajectorySmoothing(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, double &)", "CoreLocation: %s\n", v215);
    if (v215 != buf) {
      free(v215);
    }
  }
  return v11;
}

void sub_19080C730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

uint64_t sub_19080C818(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned char **)(a1 + 536);
  uint64_t v6 = *(char **)(a1 + 528);
  int64_t v7 = v5 - v6;
  if ((unint64_t)(v5 - v6) <= 0xF)
  {
    if (qword_1E929F660 != -1) {
      dispatch_once(&qword_1E929F660, &unk_1EE005E20);
    }
    unint64_t v8 = qword_1E929F668;
    if (os_log_type_enabled((os_log_t)qword_1E929F668, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (uint64_t)(*(void *)(a1 + 536) - *(void *)(a1 + 528)) >> 3;
      *(_DWORD *)uint64_t buf = 134217984;
      uint64_t v29 = v9;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "[CLTrajectorySmoother]:[runRTSOnly] RTS is called with insufficient locations samples, %{publuc}zu.", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F660 != -1) {
        dispatch_once(&qword_1E929F660, &unk_1EE005E20);
      }
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTrajectorySmoother::runRTSOnly(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nullable, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    return 0;
  }
  unint64_t v14 = v7 >> 3;
  __int16 v15 = (void *)(a1 + 504);
  uint64_t v16 = *(void *)(a1 + 520);
  uint64_t v17 = *(char **)(a1 + 504);
  if (v7 >> 3 <= (unint64_t)((v16 - (uint64_t)v17) >> 3))
  {
    double v21 = *(unsigned char **)(a1 + 512);
    unint64_t v22 = (v21 - v17) >> 3;
    if (v22 < v14)
    {
      double v23 = &v6[8 * v22];
      if (v21 != v17)
      {
        memmove(*(void **)(a1 + 504), v6, v21 - v17);
        uint64_t v17 = *(char **)(a1 + 512);
      }
      int64_t v7 = v5 - v23;
      if (v5 == v23) {
        goto LABEL_27;
      }
      BOOL v24 = v17;
      long double v25 = v23;
      goto LABEL_26;
    }
  }
  else
  {
    if (v17)
    {
      *(void *)(a1 + 512) = v17;
      operator delete(v17);
      uint64_t v16 = 0;
      *__int16 v15 = 0;
      *(void *)(a1 + 512) = 0;
      *(void *)(a1 + 520) = 0;
    }
    if (v7 < 0) {
      goto LABEL_34;
    }
    uint64_t v18 = v16 >> 2;
    if (v16 >> 2 <= v14) {
      uint64_t v18 = v7 >> 3;
    }
    unint64_t v19 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v18;
    if (v19 >> 61) {
LABEL_34:
    }
      sub_190718FD4();
    uint64_t v17 = (char *)sub_190732A30(a1 + 520, v19);
    *(void *)(a1 + 504) = v17;
    *(void *)(a1 + 512) = v17;
    *(void *)(a1 + 520) = &v17[8 * v20];
  }
  if (v5 != v6)
  {
    BOOL v24 = v17;
    long double v25 = v6;
LABEL_26:
    memmove(v24, v25, v7);
  }
LABEL_27:
  *(void *)(a1 + 512) = &v17[v7];
  *(_WORD *)a1 = 257;
  double v26 = (void *)[a2 objectsAtIndexes:sub_1907324FC((uint64_t **)(a1 + 504))];

  return sub_1907A24B0((unsigned __int8 *)a1, v26, a3, a4);
}

void sub_19080CB78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = (char *)v3[64];
  unint64_t v5 = v3[65];
  if ((unint64_t)v4 >= v5)
  {
    int64_t v7 = (char *)v3[63];
    uint64_t v8 = (v4 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_190718FD4();
    }
    unint64_t v9 = v5 - (void)v7;
    unint64_t v10 = (uint64_t)(v5 - (void)v7) >> 2;
    if (v10 <= v8 + 1) {
      unint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      int v12 = (char *)sub_190732A30((uint64_t)(v3 + 65), v11);
      int64_t v7 = (char *)v3[63];
      uint64_t v4 = (char *)v3[64];
    }
    else
    {
      int v12 = 0;
    }
    __int16 v13 = &v12[8 * v8];
    unint64_t v14 = &v12[8 * v11];
    *(void *)__int16 v13 = a2;
    uint64_t v6 = v13 + 8;
    while (v4 != v7)
    {
      uint64_t v15 = *((void *)v4 - 1);
      v4 -= 8;
      *((void *)v13 - 1) = v15;
      v13 -= 8;
    }
    v3[63] = v13;
    v3[64] = v6;
    v3[65] = v14;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v4 = a2;
    uint64_t v6 = v4 + 8;
  }
  v3[64] = v6;
}

uint64_t sub_19080CC58(uint64_t a1)
{
  v16[21] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  v15[0] = @"Timespan";
  v16[0] = [NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v15[1] = @"NumberOfTurns";
  v16[1] = [NSNumber numberWithInt:*(unsigned int *)(a1 + 152)];
  v15[2] = @"NumberOfSuddenDirectionChanges";
  v16[2] = [NSNumber numberWithInt:*(unsigned int *)(a1 + 156)];
  v15[3] = @"NumberOfSegments";
  v16[3] = [NSNumber numberWithInt:*(unsigned int *)(a1 + 160)];
  v16[4] = &unk_1EE0238C0;
  v15[4] = @"NumberOfRoutes";
  v15[5] = @"PTSPathLength";
  if (*(double *)(a1 + 48) <= 0.0) {
    uint64_t v3 = [MEMORY[0x1E4F1CA98] null];
  }
  else {
    uint64_t v3 = objc_msgSend(NSNumber, "numberWithDouble:");
  }
  v16[5] = v3;
  v15[6] = @"IOPathLength";
  void v16[6] = [NSNumber numberWithDouble:*(double *)(a1 + 56)];
  v15[7] = @"IOPathLengthOverPTSPathLength";
  if (*(double *)(a1 + 64) <= 0.0) {
    uint64_t v4 = [MEMORY[0x1E4F1CA98] null];
  }
  else {
    uint64_t v4 = objc_msgSend(NSNumber, "numberWithDouble:");
  }
  v16[7] = v4;
  v15[8] = @"PercentTimeIOStatic";
  v16[8] = [NSNumber numberWithDouble:*(double *)(a1 + 72)];
  v15[9] = @"AvgFrameAlignmentConsistency";
  unint64_t v5 = NSNumber;
  uint64_t v6 = *(void *)(a1 + 80);
  unint64_t v7 = *(void *)v6;
  double v8 = 0.0;
  if (*(void *)v6) {
    double v8 = (*(double *)(v6 + 8) * *(double *)(v6 + 8) + *(double *)(v6 + 16) * *(double *)(v6 + 16)) / (double)(v7 * v7);
  }
  double v9 = log(fmax(v8, 0.00000011920929));
  if (v9 >= 0.0) {
    double v10 = 0.0;
  }
  else {
    double v10 = -v9;
  }
  double v11 = sqrt(v10);
  if (v7 < 2) {
    double v11 = 0.0;
  }
  v16[9] = [v5 numberWithDouble:v11];
  v15[10] = @"MaxFrameAlignmentConsistency";
  v16[10] = [NSNumber numberWithDouble:*(double *)(*(void *)(a1 + 80) + 24)];
  v15[11] = @"AvgConsumedGNSSUncertainty";
  v16[11] = [NSNumber numberWithDouble:*(double *)(a1 + 88)];
  v15[12] = @"AvgReceivedGNSSUncertainty";
  v16[12] = [NSNumber numberWithDouble:*(double *)(a1 + 96)];
  v15[13] = @"AvgPeriodConsumedGNSS";
  v16[13] = [NSNumber numberWithDouble:*(double *)(a1 + 104)];
  v15[14] = @"MaxPeriodConsumedGNSS";
  unsigned char v16[14] = [NSNumber numberWithDouble:*(double *)(a1 + 112)];
  v15[15] = @"AvgPeriodReceivedGNSS";
  v16[15] = [NSNumber numberWithDouble:*(double *)(a1 + 120)];
  v15[16] = @"DeltaElevation";
  v16[16] = [NSNumber numberWithDouble:*(double *)(a1 + 128)];
  v15[17] = @"Straightness";
  if (*(double *)(a1 + 136) <= 0.0) {
    uint64_t v12 = [MEMORY[0x1E4F1CA98] null];
  }
  else {
    uint64_t v12 = objc_msgSend(NSNumber, "numberWithDouble:");
  }
  v16[17] = v12;
  v15[18] = @"AvgForwardPropEndpointDistanceError";
  if (*(double *)(a1 + 144) <= 0.0) {
    uint64_t v13 = [MEMORY[0x1E4F1CA98] null];
  }
  else {
    uint64_t v13 = objc_msgSend(NSNumber, "numberWithDouble:");
  }
  v16[18] = v13;
  v15[19] = @"RansacNumberOfIterations";
  v16[19] = [NSNumber numberWithUnsignedLong:*(void *)(v2 + 560)];
  v15[20] = @"DidUseRansac";
  unsigned char v16[20] = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 164)];
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v16 forKeys:v15 count:21];
}

os_log_t sub_19080CFDC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "PedTrajectorySmoothing");
  qword_1E929F668 = (uint64_t)result;
  return result;
}

void sub_19080D00C(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v118 = a2 - 4;
    uint64_t v120 = a2 - 2;
    uint64_t v116 = a2 - 6;
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return;
              case 2:
                uint64_t v47 = *(a2 - 2);
                uint64_t v46 = a2 - 2;
                unint64_t v48 = [v47 count];
                if (v48 > [*(id *)a1 count])
                {
                  long long v125 = *(_OWORD *)a1;
                  *(_OWORD *)a1 = *(_OWORD *)v46;
                  *(_OWORD *)uint64_t v46 = v125;
                }
                break;
              case 3:
                sub_19080D94C((id *)a1, (id *)(a1 + 16), v120);
                break;
              case 4:
                sub_19080DD00((id *)a1, (id *)(a1 + 16), (id *)(a1 + 32), v120);
                break;
              case 5:
                char v49 = (id *)(a1 + 16);
                uint64_t v50 = (id *)(a1 + 32);
                uint64_t v51 = (id *)(a1 + 48);
                double v52 = a2 - 2;
                unint64_t v53 = objc_msgSend(*(a2 - 2), "count", sub_19080DD00((id *)a1, (id *)(a1 + 16), (id *)(a1 + 32), (id *)(a1 + 48)).n128_f64[0]);
                if (v53 > [*(id *)(a1 + 48) count])
                {
                  long long v54 = *(_OWORD *)v51;
                  *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
                  *(_OWORD *)double v52 = v54;
                  unint64_t v55 = [*v51 count];
                  if (v55 > [*v50 count])
                  {
                    long long v56 = *(_OWORD *)v50;
                    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
                    *(_OWORD *)uint64_t v51 = v56;
                    unint64_t v57 = [*v50 count];
                    if (v57 > [*v49 count])
                    {
                      long long v58 = *(_OWORD *)v49;
                      *(_OWORD *)char v49 = *(_OWORD *)v50;
                      *(_OWORD *)uint64_t v50 = v58;
                      unint64_t v59 = [*(id *)(a1 + 16) count];
                      if (v59 > [*(id *)a1 count])
                      {
                        long long v126 = *(_OWORD *)a1;
                        *(_OWORD *)a1 = *(_OWORD *)v49;
                        *(_OWORD *)char v49 = v126;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 383)
          {
            double v60 = (void **)(a1 + 16);
            BOOL v62 = (void **)a1 == a2 || v60 == a2;
            if (a4)
            {
              if (!v62)
              {
                uint64_t v63 = 0;
                unint64_t v64 = a1;
                do
                {
                  uint64_t v65 = v60;
                  unint64_t v66 = [*(id *)(v64 + 16) count];
                  if (v66 > [*(id *)v64 count])
                  {
                    uint64_t v67 = a2;
                    unint64_t v68 = *v65;
                    uint64_t v69 = *(void *)(v64 + 24);
                    uint64_t v70 = v63;
                    while (1)
                    {
                      *(_OWORD *)(a1 + v70 + 16) = *(_OWORD *)(a1 + v70);
                      if (!v70) {
                        break;
                      }
                      unint64_t v71 = [v68 count];
                      unint64_t v72 = [*(id *)(a1 + v70 - 16) count];
                      v70 -= 16;
                      if (v71 <= v72)
                      {
                        double v73 = (void *)(a1 + v70 + 16);
                        goto LABEL_80;
                      }
                    }
                    double v73 = (void *)a1;
LABEL_80:
                    *double v73 = v68;
                    v73[1] = v69;
                    a2 = v67;
                  }
                  double v60 = v65 + 2;
                  v63 += 16;
                  unint64_t v64 = (unint64_t)v65;
                }
                while (v65 + 2 != a2);
              }
            }
            else if (!v62)
            {
              do
              {
                uint64_t v108 = v60;
                unint64_t v109 = [*(id *)(a1 + 16) count];
                if (v109 > [*(id *)a1 count])
                {
                  uint64_t v110 = *v108;
                  uint64_t v111 = *(void **)(a1 + 24);
                  unint64_t v112 = v108;
                  do
                  {
                    *(_OWORD *)unint64_t v112 = *((_OWORD *)v112 - 1);
                    unint64_t v114 = [v110 count];
                    unint64_t v115 = [*(v112 - 4) count];
                    uint64_t v113 = v112 - 2;
                    v112 -= 2;
                  }
                  while (v114 > v115);
                  *uint64_t v113 = v110;
                  v113[1] = v111;
                }
                double v60 = v108 + 2;
                a1 = (unint64_t)v108;
              }
              while (v108 + 2 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((void **)a1 != a2)
            {
              unint64_t v117 = v11;
              uint64_t v119 = a2;
              int64_t v74 = (unint64_t)(v12 - 2) >> 1;
              int64_t v75 = v74;
              do
              {
                int64_t v76 = v75;
                if (v74 >= v75)
                {
                  uint64_t v77 = (2 * v75) | 1;
                  double v78 = (id *)(a1 + 16 * v77);
                  if (2 * v75 + 2 < v12)
                  {
                    unint64_t v79 = [*v78 count];
                    if (v79 > [v78[2] count])
                    {
                      v78 += 2;
                      uint64_t v77 = 2 * v76 + 2;
                    }
                  }
                  double v80 = (id *)(a1 + 16 * v76);
                  unint64_t v81 = [*v78 count];
                  if (v81 <= [*v80 count])
                  {
                    int64_t v121 = v76;
                    id v82 = *v80;
                    id v83 = v80[1];
                    do
                    {
                      double v84 = v80;
                      double v80 = v78;
                      *(_OWORD *)double v84 = *(_OWORD *)v78;
                      if (v74 < v77) {
                        break;
                      }
                      uint64_t v85 = (2 * v77) | 1;
                      double v78 = (id *)(a1 + 16 * v85);
                      uint64_t v86 = 2 * v77 + 2;
                      if (v86 < v12)
                      {
                        unint64_t v87 = [*v78 count];
                        if (v87 > [v78[2] count])
                        {
                          v78 += 2;
                          uint64_t v85 = v86;
                        }
                      }
                      unint64_t v88 = [*v78 count];
                      uint64_t v77 = v85;
                    }
                    while (v88 <= [v82 count]);
                    *double v80 = v82;
                    v80[1] = v83;
                    int64_t v76 = v121;
                  }
                }
                int64_t v75 = v76 - 1;
              }
              while (v76);
              double v89 = v119;
              uint64_t v90 = v117 >> 4;
              do
              {
                double v91 = v89;
                uint64_t v92 = 0;
                long long v127 = *(_OWORD *)a1;
                unint64_t v93 = (_OWORD *)a1;
                do
                {
                  uint64_t v94 = (uint64_t)&v93[v92 + 1];
                  uint64_t v95 = (2 * v92) | 1;
                  uint64_t v96 = 2 * v92 + 2;
                  if (v96 < v90)
                  {
                    unint64_t v97 = [*(id *)v94 count];
                    if (v97 > [*(id *)(v94 + 16) count])
                    {
                      v94 += 16;
                      uint64_t v95 = v96;
                    }
                  }
                  *unint64_t v93 = *(_OWORD *)v94;
                  unint64_t v93 = (_OWORD *)v94;
                  uint64_t v92 = v95;
                }
                while (v95 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
                double v98 = v91 - 2;
                if ((void **)v94 == v98)
                {
                  double v89 = v98;
                  *(_OWORD *)uint64_t v94 = v127;
                }
                else
                {
                  *(_OWORD *)uint64_t v94 = *(_OWORD *)v98;
                  double v89 = v98;
                  *(_OWORD *)double v98 = v127;
                  uint64_t v99 = v94 - a1 + 16;
                  if (v99 >= 17)
                  {
                    unint64_t v100 = (((unint64_t)v99 >> 4) - 2) >> 1;
                    int v101 = (id *)(a1 + 16 * v100);
                    unint64_t v102 = [*v101 count];
                    if (v102 > [*(id *)v94 count])
                    {
                      id v103 = *(id *)v94;
                      uint64_t v104 = *(void *)(v94 + 8);
                      do
                      {
                        long long v105 = (_OWORD *)v94;
                        uint64_t v94 = (uint64_t)v101;
                        *long long v105 = *(_OWORD *)v101;
                        if (!v100) {
                          break;
                        }
                        unint64_t v100 = (v100 - 1) >> 1;
                        int v101 = (id *)(a1 + 16 * v100);
                        unint64_t v106 = [*v101 count];
                      }
                      while (v106 > [v103 count]);
                      *(void *)uint64_t v94 = v103;
                      *(void *)(v94 + 8) = v104;
                    }
                  }
                }
              }
              while (v90-- > 2);
            }
            return;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = (id *)(a1 + 16 * ((unint64_t)v12 >> 1));
          if ((unint64_t)v11 < 0x801)
          {
            sub_19080D94C(v14, (id *)a1, v120);
          }
          else
          {
            sub_19080D94C((id *)a1, v14, v120);
            sub_19080D94C((id *)(a1 + 16), v14 - 2, v118);
            sub_19080D94C((id *)(a1 + 32), (id *)(a1 + 16 + 16 * v13), v116);
            sub_19080D94C(v14 - 2, v14, (id *)(a1 + 16 + 16 * v13));
            long long v122 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(_OWORD *)unint64_t v14 = v122;
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v15 = [*(id *)(a1 - 16) count];
          if (v15 > [*(id *)a1 count]) {
            break;
          }
          id v32 = *(id *)a1;
          uint64_t v33 = *(void *)(a1 + 8);
          unint64_t v34 = [*(id *)a1 count];
          if (v34 <= [*v120 count])
          {
            unint64_t v37 = a1 + 16;
            do
            {
              unint64_t v10 = v37;
              if (v37 >= (unint64_t)a2) {
                break;
              }
              unint64_t v38 = [v32 count];
              v37 += 16;
            }
            while (v38 <= [*(id *)v10 count]);
          }
          else
          {
            unint64_t v10 = a1;
            do
            {
              unint64_t v35 = [v32 count];
              unint64_t v36 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v35 <= [v36 count]);
          }
          char v39 = a2;
          if (v10 < (unint64_t)a2)
          {
            char v39 = a2;
            do
            {
              unint64_t v40 = [v32 count];
              uint64_t v41 = *(v39 - 2);
              v39 -= 2;
            }
            while (v40 > [v41 count]);
          }
          while (v10 < (unint64_t)v39)
          {
            long long v124 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v39;
            *(_OWORD *)char v39 = v124;
            do
            {
              unint64_t v42 = [v32 count];
              unint64_t v43 = *(void **)(v10 + 16);
              v10 += 16;
            }
            while (v42 <= [v43 count]);
            do
            {
              unint64_t v44 = [v32 count];
              uint32_t v45 = *(v39 - 2);
              v39 -= 2;
            }
            while (v44 > [v45 count]);
          }
          BOOL v4 = v10 - 16 >= a1;
          BOOL v5 = v10 - 16 == a1;
          if (v10 - 16 != a1) {
            *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v32;
          *(void *)(v10 - 8) = v33;
        }
        uint64_t v16 = 0;
        id v17 = *(id *)a1;
        uint64_t v18 = *(void *)(a1 + 8);
        do
        {
          unint64_t v19 = [*(id *)(a1 + v16 + 16) count];
          v16 += 16;
        }
        while (v19 > [v17 count]);
        unint64_t v20 = a1 + v16;
        double v21 = a2;
        if (v16 == 16)
        {
          do
          {
            if (v20 >= (unint64_t)a2) {
              break;
            }
            BOOL v24 = *(a2 - 2);
            a2 -= 2;
            unint64_t v25 = [v24 count];
          }
          while (v25 <= [v17 count]);
        }
        else
        {
          do
          {
            unint64_t v22 = *(a2 - 2);
            a2 -= 2;
            unint64_t v23 = [v22 count];
          }
          while (v23 <= [v17 count]);
        }
        unint64_t v10 = a1 + v16;
        if (v20 < (unint64_t)a2)
        {
          double v26 = a2;
          do
          {
            long long v123 = *(_OWORD *)v10;
            *(_OWORD *)unint64_t v10 = *(_OWORD *)v26;
            *(_OWORD *)double v26 = v123;
            do
            {
              uint64_t v27 = *(void **)(v10 + 16);
              v10 += 16;
              unint64_t v28 = [v27 count];
            }
            while (v28 > [v17 count]);
            do
            {
              uint64_t v29 = *(v26 - 2);
              v26 -= 2;
              unint64_t v30 = [v29 count];
            }
            while (v30 <= [v17 count]);
          }
          while (v10 < (unint64_t)v26);
        }
        if (v10 - 16 != a1) {
          *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
        }
        *(void *)(v10 - 16) = v17;
        *(void *)(v10 - 8) = v18;
        BOOL v4 = v20 >= (unint64_t)a2;
        a2 = v21;
        if (v4) {
          break;
        }
LABEL_30:
        sub_19080D00C(a1, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_19080DA5C((id *)a1, (id *)(v10 - 16));
      if (sub_19080DA5C((id *)v10, v21)) {
        break;
      }
      if (!v31) {
        goto LABEL_30;
      }
    }
    a2 = (void **)(v10 - 16);
    if (!v31) {
      continue;
    }
    break;
  }
}

unint64_t sub_19080D94C(id *a1, id *a2, id *a3)
{
  unint64_t v6 = [*a2 count];
  unint64_t v7 = [*a1 count];
  unint64_t v8 = [*a3 count];
  unint64_t result = [*a2 count];
  if (v6 <= v7)
  {
    if (v8 > result)
    {
      long long v11 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v11;
      unint64_t v12 = [*a2 count];
      unint64_t result = [*a1 count];
      if (v12 > result)
      {
        long long v13 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)a2 = v13;
      }
    }
  }
  else
  {
    if (v8 <= result)
    {
      long long v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v14;
      unint64_t v15 = [*a3 count];
      unint64_t result = [*a2 count];
      if (v15 <= result) {
        return result;
      }
      long long v10 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v10 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v10;
  }
  return result;
}

BOOL sub_19080DA5C(id *a1, id *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = a2 - 2;
      unint64_t v7 = [*(a2 - 2) count];
      if (v7 > [*a1 count])
      {
        long long v8 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_OWORD *)unint64_t v6 = v8;
      }
      return 1;
    case 3:
      sub_19080D94C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_19080DD00(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      unint64_t v20 = a1 + 2;
      double v21 = a1 + 4;
      unint64_t v22 = a1 + 6;
      *(void *)&double v23 = sub_19080DD00(a1, a1 + 2, a1 + 4, a1 + 6).n128_u64[0];
      unint64_t v25 = *(a2 - 2);
      BOOL v24 = a2 - 2;
      unint64_t v26 = objc_msgSend(v25, "count", v23);
      if (v26 > [a1[6] count])
      {
        long long v27 = *(_OWORD *)v22;
        *(_OWORD *)unint64_t v22 = *(_OWORD *)v24;
        *(_OWORD *)BOOL v24 = v27;
        unint64_t v28 = [*v22 count];
        if (v28 > [*v21 count])
        {
          long long v29 = *(_OWORD *)v21;
          *(_OWORD *)double v21 = *(_OWORD *)v22;
          *(_OWORD *)unint64_t v22 = v29;
          unint64_t v30 = [*v21 count];
          if (v30 > [*v20 count])
          {
            long long v31 = *(_OWORD *)v20;
            *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
            *(_OWORD *)double v21 = v31;
            unint64_t v32 = [a1[2] count];
            if (v32 > [*a1 count])
            {
              long long v33 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *(_OWORD *)v20;
              *(_OWORD *)unint64_t v20 = v33;
            }
          }
        }
      }
      return 1;
    default:
      double v9 = a1 + 4;
      sub_19080D94C(a1, a1 + 2, a1 + 4);
      long long v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = [*v10 count];
    if (v13 > [*v9 count])
    {
      id v14 = *v10;
      id v15 = v10[1];
      uint64_t v16 = v11;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v16 + 48) = *(_OWORD *)((char *)a1 + v16 + 32);
        if (v16 == -32) {
          break;
        }
        unint64_t v17 = [v14 count];
        unint64_t v18 = [*(id *)((char *)a1 + v16 + 16) count];
        v16 -= 16;
        if (v17 <= v18)
        {
          unint64_t v19 = (id *)((char *)a1 + v16 + 48);
          goto LABEL_13;
        }
      }
      unint64_t v19 = a1;
LABEL_13:
      *unint64_t v19 = v14;
      v19[1] = v15;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    double v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

__n128 sub_19080DD00(id *a1, id *a2, id *a3, id *a4)
{
  sub_19080D94C(a1, a2, a3);
  unint64_t v8 = [*a4 count];
  if (v8 > [*a3 count])
  {
    long long v10 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v10;
    unint64_t v11 = [*a3 count];
    if (v11 > [*a2 count])
    {
      long long v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v12;
      unint64_t v13 = [*a2 count];
      if (v13 > [*a1 count])
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t *sub_19080DDCC(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  unint64_t v6 = (uint64_t **)(result + 1);
  BOOL v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        BOOL v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      BOOL v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    double v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return sub_19074BC4C(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void sub_19080F41C(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6E0 != -1) {
    dispatch_once(&qword_1E929F6E0, &unk_1EE0062C0);
  }
  uint64_t v2 = qword_1E929F6E8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "CLHarvester invalidation handler", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6E0 != -1) {
      dispatch_once(&qword_1E929F6E0, &unk_1EE0062C0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLHarvester connect]_block_invoke", "CoreLocation: %s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }

  *(void *)(*(void *)(a1 + 32) + 8) = 0;
}

void sub_19080F5C4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6E0 != -1) {
    dispatch_once(&qword_1E929F6E0, &unk_1EE0062C0);
  }
  id v0 = qword_1E929F6E8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6E8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_ERROR, "CLHarvester interruption handler", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6E0 != -1) {
      dispatch_once(&qword_1E929F6E0, &unk_1EE0062C0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLHarvester connect]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_19080F890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19080F8A8(uint64_t a1, uint64_t a2)
{
}

void sub_19080F8B8(uint64_t a1)
{
}

void sub_19080F8C4()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6E0 != -1) {
    dispatch_once(&qword_1E929F6E0, &unk_1EE0062C0);
  }
  id v0 = qword_1E929F6E8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_DEFAULT, "CLHarvester synchronous remote proxy invalidated", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6E0 != -1) {
      dispatch_once(&qword_1E929F6E0, &unk_1EE0062C0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLHarvester currentStateDictionary]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

id sub_19080FA4C(uint64_t a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6E0 != -1) {
    dispatch_once(&qword_1E929F6E0, &unk_1EE0062C0);
  }
  uint64_t v4 = qword_1E929F6E8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "CLHarvester fetchState reply block called", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6E0 != -1) {
      dispatch_once(&qword_1E929F6E0, &unk_1EE0062C0);
    }
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLHarvester currentStateDictionary]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

os_log_t sub_19080FBF4()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Harvester");
  qword_1E929F6E8 = (uint64_t)result;
  return result;
}

BOOL sub_190810374(uint64_t a1, uint64_t *a2, double *a3, double *a4, uint64_t *a5)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  context = (void *)MEMORY[0x192FCF260]();
  if ([*(id *)(a1 + 2600) allowNetworkTileLoad]
    && sub_190811A20((void *)a1))
  {
    [*(id *)(a1 + 2600) setAllowNetworkTileLoad:0];
  }
  double v9 = *a3;
  double v10 = *a4;
  uint64_t v11 = [MEMORY[0x1E4F1CA48] array];
  v82[0] = MEMORY[0x1E4F143A8];
  v82[1] = 3221225472;
  uint64_t v82[2] = sub_190810E6C;
  v82[3] = &unk_1E5698468;
  obuint64_t j = (id)v11;
  v82[4] = v11;
  uint64_t v12 = *a5;
  unint64_t v13 = (double *)operator new(0x30uLL);
  *(void *)unint64_t v13 = &unk_1EE003108;
  *((void *)v13 + 1) = a1;
  v13[2] = v9;
  v13[3] = v10;
  *((void *)v13 + 4) = v12;
  *((void *)v13 + 5) = v82;
  v100[3] = v13;
  uint64_t v94 = 0;
  uint64_t v95 = &v94;
  uint64_t v96 = 0x2020000000;
  char v97 = 0;
  uint64_t v88 = 0;
  double v89 = &v88;
  uint64_t v90 = 0x3052000000;
  double v91 = sub_190810F2C;
  uint64_t v92 = sub_190810F3C;
  dispatch_group_t v93 = 0;
  dispatch_group_t v93 = dispatch_group_create();
  uint64_t v84 = 0;
  uint64_t v85 = &v84;
  uint64_t v86 = 0x2020000000;
  uint64_t v87 = 0;
  *(void *)&v83[0] = MEMORY[0x1E4F143A8];
  *(void *)&v83[1] = 3221225472;
  *(void *)&v83[2] = sub_1906DB948;
  *(void *)&v83[3] = &unk_1E56979A0;
  *(void *)&v83[4] = &v94;
  *(void *)&v83[5] = &v88;
  *(void *)&v83[6] = &v84;
  dispatch_group_enter((dispatch_group_t)v89[5]);
  id v14 = (void *)sub_190770A00((uint64_t)v100, (uint64_t)v83);
  id v15 = v89[5];
  dispatch_time_t v16 = dispatch_time(0, 100000000);
  intptr_t v17 = dispatch_group_wait(v15, v16);
  v85[3] = v17;
  if (v17)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
    }
    unint64_t v18 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = v85[3];
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
      }
      uint64_t v59 = v85[3];
      int v101 = 134349056;
      uint64_t v102 = v59;
      double v60 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v60);
      if (v60 != (char *)buf) {
        free(v60);
      }
    }
    [v14 cancel];
  }
  else if (v89[5])
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
    }
    unint64_t v20 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
      }
      LOWORD(v101) = 0;
      BOOL v62 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v62);
      if (v62 != (char *)buf) {
        free(v62);
      }
    }

    v89[5] = 0;
  }
  if (v85[3]) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = *((unsigned char *)v95 + 24) == 0;
  }
  _Block_object_dispose(&v84, 8);
  _Block_object_dispose(&v88, 8);
  _Block_object_dispose(&v94, 8);
  sub_190770CB8(v100);
  BOOL v63 = v21;
  if (v21)
  {
    *(_DWORD *)(a1 + 40) = 0;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    uint64_t v67 = [obj countByEnumeratingWithState:&v78 objects:v99 count:16];
    if (v67)
    {
      uint64_t v66 = *(void *)v79;
      unint64_t v22 = (double *)(a1 + 56);
      do
      {
        for (uint64_t i = 0; i != v67; ++i)
        {
          if (*(void *)v79 != v66) {
            objc_enumerationMutation(obj);
          }
          double v23 = *(void **)(*((void *)&v78 + 1) + 8 * i);
          long long v74 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          double v73 = v23;
          id v69 = (id)[v23 sections];
          uint64_t v72 = [v69 countByEnumeratingWithState:&v74 objects:v98 count:16];
          if (v72)
          {
            uint64_t v71 = *(void *)v75;
            do
            {
              for (uint64_t j = 0; j != v72; ++j)
              {
                if (*(void *)v75 != v71) {
                  objc_enumerationMutation(v69);
                }
                unint64_t v25 = *(void **)(*((void *)&v74 + 1) + 8 * j);
                long long v105 = 0u;
                long long v106 = 0u;
                *(_OWORD *)uint64_t buf = 0u;
                long long v104 = 0u;
                int v26 = [v73 tileSetStyle];
                if (!v26)
                {
                  [v25 height];
LABEL_38:
                  *(double *)uint64_t buf = v30;
                  goto LABEL_39;
                }
                if (v26 == 1)
                {
                  if ([v73 hasTerrainElevation])
                  {
                    [v25 topHeight];
                    double v28 = v27;
                    [v25 terrainElevation];
                    double v30 = v28 - v29;
                  }
                  else
                  {
                    [v25 topHeight];
                  }
                  goto LABEL_38;
                }
LABEL_39:
                for (unint64_t k = 0; [v25 coordinateCount] > k; ++k)
                {
                  uint64_t v88 = 0;
                  uint64_t v94 = 0;
                  sub_1906DA778(v22, (double *)&v88, (double *)&v94, v83, *a3, *a4, 0.0, *(double *)([v25 coordinates] + 16 * k), *(double *)(objc_msgSend(v25, "coordinates") + 16 * k + 8), 0.0);
                  uint64_t v32 = v94;
                  uint64_t v33 = v88;
                  uint64_t v34 = v104;
                  if ((unint64_t)v104 >= *((void *)&v104 + 1))
                  {
                    uint64_t v36 = (uint64_t)(v104 - *(void *)&buf[8]) >> 4;
                    unint64_t v37 = v36 + 1;
                    if ((unint64_t)(v36 + 1) >> 60) {
                      sub_190718FD4();
                    }
                    uint64_t v38 = *((void *)&v104 + 1) - *(void *)&buf[8];
                    if ((uint64_t)(*((void *)&v104 + 1) - *(void *)&buf[8]) >> 3 > v37) {
                      unint64_t v37 = v38 >> 3;
                    }
                    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v39 = v37;
                    }
                    uint64_t v41 = (char *)sub_19074C0B4((uint64_t)&v104 + 8, v39);
                    unint64_t v42 = &v41[16 * v36];
                    *(void *)unint64_t v42 = v32;
                    *((void *)v42 + 1) = v33;
                    unint64_t v43 = (void *)v104;
                    unint64_t v44 = *(void **)&buf[8];
                    uint32_t v45 = v42;
                    while (v43 != v44)
                    {
                      uint64_t v46 = *(v43 - 2);
                      v43 -= 2;
                      *((void *)v45 - 2) = v46;
                      v45 -= 16;
                      *((void *)v45 + 1) = v43[1];
                    }
                    unint64_t v35 = v42 + 16;
                    *(void *)&uint8_t buf[8] = v45;
                    *(void *)&long long v104 = v42 + 16;
                    *((void *)&v104 + 1) = &v41[16 * v40];
                    if (v44) {
                      operator delete(v44);
                    }
                  }
                  else
                  {
                    *(void *)long long v104 = v94;
                    *(void *)(v34 + 8) = v33;
                    unint64_t v35 = (void *)(v34 + 16);
                  }
                  *(void *)&long long v104 = v35;
                }
                uint64_t v47 = *(double **)&buf[8];
                if (*(void *)&buf[8] == (void)v104)
                {
                  double v48 = 0.0;
                  double v49 = 0.0;
                  double v50 = 0.0;
                  double v51 = 0.0;
                  double v52 = a2;
                }
                else
                {
                  double v48 = **(double **)&buf[8];
                  double v49 = *(double *)(*(void *)&buf[8] + 8);
                  double v50 = **(double **)&buf[8];
                  double v51 = v49;
                  double v52 = a2;
                  do
                  {
                    double v53 = *v47;
                    double v54 = v47[1];
                    v47 += 2;
                    if (v53 < v48) {
                      double v48 = v53;
                    }
                    if (v54 < v49) {
                      double v49 = v54;
                    }
                    if (v50 < v53) {
                      double v50 = v53;
                    }
                    if (v51 < v54) {
                      double v51 = v54;
                    }
                  }
                  while (v47 != (double *)v104);
                }
                *(double *)&long long v105 = v48;
                *((double *)&v105 + 1) = v49;
                *(double *)&long long v106 = v50;
                *((double *)&v106 + 1) = v51;
                unint64_t v55 = v52[1];
                if (v55 >= v52[2])
                {
                  uint64_t v56 = sub_19074E894(v52, (uint64_t)buf);
                }
                else
                {
                  *(void *)unint64_t v55 = *(void *)buf;
                  *(void *)(v55 + 16) = 0;
                  *(void *)(v55 + 24) = 0;
                  *(void *)(v55 + 8) = 0;
                  sub_19074E9EC((char *)(v55 + 8), *(void **)&buf[8], (void *)v104, (uint64_t)(v104 - *(void *)&buf[8]) >> 4);
                  *(_OWORD *)(v55 + 32) = v105;
                  *(_OWORD *)(v55 + 48) = v106;
                  uint64_t v56 = v55 + 64;
                  v52[1] = v55 + 64;
                }
                v52[1] = v56;
                if (*(void *)&buf[8])
                {
                  *(void *)&long long v104 = *(void *)&buf[8];
                  operator delete(*(void **)&buf[8]);
                }
              }
              uint64_t v72 = [v69 countByEnumeratingWithState:&v74 objects:v98 count:16];
            }
            while (v72);
          }
        }
        uint64_t v67 = [obj countByEnumeratingWithState:&v78 objects:v99 count:16];
      }
      while (v67);
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 40);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
    }
    unint64_t v57 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v57, OS_LOG_TYPE_ERROR, "CLMM,query failed (buildingsWithinDistance)", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005EA0);
      }
      LOWORD(v83[0]) = 0;
      BOOL v61 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoFeatureAccess3dBuildingGeometry::buildingsWithinDistance(ExtrudedFootprintsList &, const double &, const double &, const double &)", "CoreLocation: %s\n", v61);
      if (v61 != (char *)buf) {
        free(v61);
      }
    }
  }
  return v63;
}

void sub_190810DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

uint64_t sub_190810E6C(uint64_t a1, void *a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(a2, "sections"), "count");
  if (result)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    return [v5 addObject:a2];
  }
  return result;
}

BOOL sub_190810EC4(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  double v8 = a4;
  uint64_t v4 = *(void *)(a3 + 56);
  uint64_t v6 = *(void *)(a3 + 64);
  uint64_t v7 = v4;
  return sub_190810374(a1, a2, (double *)&v7, (double *)&v6, (uint64_t *)&v8);
}

os_log_t sub_190810EFC()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_190810F2C(uint64_t a1, uint64_t a2)
{
}

void sub_190810F3C(uint64_t a1)
{
}

void sub_190810F4C()
{
}

__n128 sub_190810F60(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1EE003108;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_190810FBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE003108;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190810FFC(uint64_t a1, void *a2)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 8) + 2600), "findBuildingsNear:radius:tileSetStyle:handler:completionHandler:", *(unsigned int *)(*(void *)(a1 + 8) + 2648), *(void *)(a1 + 40), *a2, *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32));
}

uint64_t sub_190811020(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE002F40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_190811060()
{
  return &unk_1EE002F40;
}

uint64_t sub_19081106C(uint64_t a1)
{
  *(void *)a1 = &unk_1EE003CF8;
  *(void *)(a1 + 8) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_190885CA0;
  *(void *)(a1 + 64) = 0x415854A640000000;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0x3FF0000000000000;
  unsigned int v2 = 5489;
  uint64_t v3 = 1;
  uint64_t v4 = 25;
  *(_DWORD *)(a1 + 96) = 5489;
  do
  {
    int v5 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v5 + v3;
    *(_DWORD *)(a1 + 4 * v4) = v4 + v5 - 24;
    ++v3;
    ++v4;
  }
  while (v4 != 648);
  unsigned int v6 = 0;
  *(void *)(a1 + 2632) = 0;
  *(void *)(a1 + 2624) = 0;
  *(void *)(a1 + 2592) = 0;
  *(void *)(a1 + 2608) = 0;
  *(void *)(a1 + 2600) = 0;
  *(void *)(a1 + 2616) = a1 + 2624;
  *(void *)(a1 + 2640) = 0xBFF0000000000000;
  uint64_t v7 = 1;
  uint64_t v8 = 25;
  *(_DWORD *)(a1 + 96) = 0;
  do
  {
    int v9 = 1812433253 * (v6 ^ (v6 >> 30));
    unsigned int v6 = v9 + v7;
    *(_DWORD *)(a1 + 4 * v8) = v8 + v9 - 24;
    ++v7;
    ++v8;
  }
  while (v8 != 648);
  *(void *)(a1 + 2592) = 0;
  sub_1907B2058();
  return a1;
}

void sub_190811194(_Unwind_Exception *a1)
{
  sub_1908132D4(v2, *(char **)(v1 + 2624));
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    sub_1906BFE48(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1908111B8(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE003CF8;
  if (!*(unsigned char *)(a1 + 33))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    uint64_t v2 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "CLMM,CLGCZ,destroy geocodec malloc zone,~CLGeoMapFeatureAccessGeometry()", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual CLMapGeometry::~CLMapGeometry()", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      sub_190812C34(v3);
    }
    uint64_t v4 = *(void **)(a1 + 2600);
    if (v4) {
      [v4 clearAllTiles];
    }
    int v5 = *(void **)(a1 + 2608);
    if (v5)
    {

      *(void *)(a1 + 2608) = 0;
    }
    unsigned int v6 = *(void **)(a1 + 2600);
    if (v6)
    {

      *(void *)(a1 + 2600) = 0;
    }
    GEOResetGeoCodecsAllocator();
  }
  sub_1908132D4(a1 + 2616, *(char **)(a1 + 2624));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  if (v7) {
    sub_1906BFE48(v7);
  }
  return a1;
}

void sub_1908113C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1906F4064(a1);
}

void sub_1908113DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 32) = 1;
  uint64_t v3 = *a2;
  if (*a2)
  {
    *(unsigned char *)(a1 + 33) = 1;
    *(unsigned char *)(a1 + 34) = *(unsigned char *)(v3 + 169);
    uint64_t v4 = a2[1];
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
    int v5 = *(std::__shared_weak_count **)(a1 + 24);
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v4;
    if (v5) {
      sub_1906BFE48(v5);
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    unsigned int v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v8 = (void *)(v7 + 128);
      if (*(char *)(v7 + 151) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int v9 = *(unsigned __int8 *)(v7 + 169);
      int v10 = *(unsigned __int8 *)(v7 + 216);
      int v11 = *(unsigned __int8 *)(v7 + 192);
      *(_DWORD *)uint64_t buf = 136446978;
      dispatch_time_t v16 = v8;
      __int16 v17 = 1026;
      int v18 = v9;
      __int16 v19 = 1026;
      int v20 = v10;
      __int16 v21 = 1026;
      int v22 = v11;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "CLMM,%{public}s,referenced maps buffer,xpc,%{public}d,waitForQueryComplete,%{public}d,allowNetworkTileDownload,%{public}d", buf, 0x1Eu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLMapGeometry::initializeWithRoadBufferPointer(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    unint64_t v13 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_ERROR, "CLMM,RoadGeometry pointer provided is nullptr, using maps API in process", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
      }
      id v14 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLMapGeometry::initializeWithRoadBufferPointer(std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *(_WORD *)(a1 + 33) = 0;
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
}

double sub_19081179C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (*(char *)(*a2 + 71) < 0) {
    sub_1906C00FC(&__p, *(void **)(v4 + 48), *(void *)(v4 + 56));
  }
  else {
    std::string __p = *(std::string *)(v4 + 48);
  }
  std::string::operator=((std::string *)(a1 + 128), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *a2;
  *(void *)(a1 + 112) = *(void *)*a2;
  *(void *)(a1 + 120) = *(void *)(v5 + 20);
  *(_OWORD *)(a1 + 152) = *((_OWORD *)a2 + 2);
  double result = *((float *)a2 + 6);
  *(double *)(a1 + 168) = result;
  return result;
}

void sub_190811838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190811854(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
  }
  uint64_t v2 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 36);
    int v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 67240448;
    int v7 = v3;
    __int16 v8 = 1026;
    int v9 = v4;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEBUG, "CLMM,MapsAPICallCount,%{public}d,MapsAPIQueryContinuousFailCount,%{public}d", buf, 0xEu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLMapGeometry::logMapsAPICallCount() const", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_190811A20(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a1 + 33) && (uint64_t v2 = a1[2]) != 0) {
    int v3 = (int *)(v2 + 124);
  }
  else {
    int v3 = (int *)(a1 + 5);
  }
  int v4 = *v3;
  if (*v3 < 6) {
    goto LABEL_9;
  }
  double v5 = *((double *)a1 + 6);
  if (v5 < 0.0)
  {
    uint64_t v6 = mach_continuous_time();
    double v5 = sub_1907E1770(v6);
    *((double *)a1 + 6) = v5;
  }
  uint64_t v7 = mach_continuous_time();
  double v8 = vabdd_f64(v5, sub_1907E1770(v7));
  if (v8 < 60.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    id v15 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v16 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v17 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      int v18 = "road";
      *(_DWORD *)uint64_t buf = 67240962;
      int v21 = v16;
      __int16 v22 = 2082;
      if (v17) {
        int v18 = "building";
      }
      uint64_t v23 = v18;
      __int16 v24 = 1026;
      int v25 = v4;
      __int16 v26 = 2050;
      double v27 = v8;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_DEBUG, "CLMM,shouldBackOffFromNetworkAccess,1,geometryType,%{public}d,type,%{public}s,failCount,%{public}d,timeSinceLastFail,%{public}.1lf", buf, 0x22u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
      }
      (*(void (**)(void *))(*a1 + 16))(a1);
      (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    return 1;
  }
  else
  {
LABEL_9:
    a1[6] = 0xBFF0000000000000;
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    int v9 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v10 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
      int v11 = (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      uint64_t v12 = "road";
      *(_DWORD *)uint64_t buf = 67240706;
      int v21 = v10;
      if (v11) {
        uint64_t v12 = "building";
      }
      __int16 v22 = 2082;
      uint64_t v23 = v12;
      __int16 v24 = 1026;
      int v25 = v4;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEBUG, "CLMM,shouldBackOffFromNetworkAccess,0,geometryType,%{public}d,type,%{public}s,failCount,%{public}d", buf, 0x18u);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
      }
      (*(void (**)(void *))(*a1 + 16))(a1);
      (*(uint64_t (**)(void *))(*a1 + 112))(a1);
      id v14 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLMapGeometry::shouldBackOffFromNetworkAccess()", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_190811FC4(uint64_t result, int a2)
{
  uint64_t v2 = (void *)result;
  if (*(unsigned char *)(result + 33))
  {
    uint64_t v3 = *(void *)(result + 16);
    if (v3) {
      *(unsigned char *)(v3 + 192) = a2;
    }
  }
  else
  {
    uint64_t result = *(void *)(result + 2600);
    if (result)
    {
      if (a2)
      {
        uint64_t v4 = sub_190811A20(v2) ^ 1;
        uint64_t result = v2[325];
      }
      else
      {
        uint64_t v4 = 0;
      }
      return [(id)result setAllowNetworkTileLoad:v4];
    }
  }
  return result;
}

uint64_t sub_19081203C(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, double *a5, int a6)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return 0;
  }
  uint64_t v10 = 8 * a6;
  double v11 = 0.0;
  do
  {
    double v12 = *a5++;
    double v11 = v11 + v12;
    v10 -= 8;
  }
  while (v10);
  uint64_t v14 = *a3;
  unint64_t v13 = (std::__shared_weak_count *)a3[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v15 = v11 / (double)a6;
  if (!v14)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    __int16 v19 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)buf, 2u);
    }
    double v17 = 0.0;
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
LABEL_111:
    }
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
LABEL_16:
    LOWORD(__y[0]) = 0;
    int v20 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", (const char *)v20);
    goto LABEL_109;
  }
  uint64_t v16 = (*(void *)(v14 + 144) - *(void *)(v14 + 136)) >> 4;
  if ((int)v16 <= 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    int v21 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)buf, 2u);
    }
    double v17 = 0.0;
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_108;
    }
    goto LABEL_112;
  }
  double v17 = 0.0;
  if (v16 == 1)
  {
    char v18 = 1;
    goto LABEL_36;
  }
  sub_19082373C(v14);
  uint64_t v22 = (uint64_t)(*(void *)(v14 + 168) - *(void *)(v14 + 160)) >> 3;
  if (v22 != v16 - 1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    uint64_t v33 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v33, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_108;
    }
    goto LABEL_112;
  }
  sub_19082373C(v14);
  uint64_t v23 = (double *)(a1 + 56);
  if (v15 >= 0.000001)
  {
    if (v15 >= 0.999999)
    {
      double v48 = (double *)(*(void *)(v14 + 136) + 16 * v22);
      double v25 = *v48;
      double v17 = v48[1];
      double v49 = sub_1908135C8(v23, *(v48 - 2), *(v48 - 1), *v48, v17);
LABEL_78:
      double v32 = v49;
      goto LABEL_79;
    }
    uint64_t v41 = *(double **)(v14 + 160);
    unint64_t v42 = *(double **)(v14 + 168);
    if (v41 != v42)
    {
      double v43 = 0.0;
      int v44 = 2;
      uint64_t v45 = 24;
      while (1)
      {
        double v46 = *v41 / *(double *)(v14 + 40);
        if (vabdd_f64(v15, v43 + v46) < 0.000001) {
          break;
        }
        if (v43 + v46 > v15)
        {
          BOOL v61 = (double *)(*(void *)(v14 + 136) + v45);
          double v62 = *(v61 - 2);
          double v63 = *(v61 - 3);
          double v64 = *v61;
          double v65 = v62 + 360.0;
          if (v62 >= 0.0) {
            double v65 = *(v61 - 2);
          }
          double v66 = v64 + 360.0;
          if (v64 >= 0.0) {
            double v66 = *v61;
          }
          double v67 = v66 - v65;
          if (v67 <= 180.0)
          {
            if (v67 < -180.0) {
              double v67 = v67 + 360.0;
            }
          }
          else
          {
            double v67 = v67 + -360.0;
          }
          double v71 = *(v61 - 1) - v63;
          double v72 = *(v61 - 1);
          double v69 = (v15 - v43) / v46;
          double v70 = fmod(v62 + v67 * v69, 360.0);
          double v17 = v70;
          if (v70 <= -180.0)
          {
            double v17 = v70 + 360.0;
          }
          else if (v70 > 180.0)
          {
            double v17 = v70 + -360.0;
          }
          double v26 = v72;
          double v25 = v63 + v71 * v69;
          buf[0].__r_.__value_.__r.__words[0] = 0;
          __y[0] = 0.0;
          uint64_t v28 = v23;
          double v29 = v63;
          double v30 = v62;
          double v27 = v64;
          goto LABEL_27;
        }
        ++v41;
        v45 += 16;
        ++v44;
        double v43 = v43 + v46;
        if (v41 == v42) {
          goto LABEL_70;
        }
      }
      if (v44 < (int)v16)
      {
        double v50 = (double *)(*(void *)(v14 + 136) + v45);
        double v25 = *(v50 - 1);
        double v17 = *v50;
        double v51 = *(v50 - 3);
        double v52 = *(v50 - 2);
        buf[0].__r_.__value_.__r.__words[0] = 0;
        __y[0] = 0.0;
        sub_1906DA778(v23, (double *)buf, __y, &v73, v51, v52, 0.0, v25, v17, 0.0);
        long double v53 = __y[0];
        long double v54 = *(double *)&buf[0].__r_.__value_.__l.__data_;
        uint64_t v55 = *(void *)(v14 + 136) + v45;
        double v56 = *(double *)(v55 + 8);
        double v57 = *(double *)(v55 + 16);
        buf[0].__r_.__value_.__r.__words[0] = 0;
        __y[0] = 0.0;
        sub_1906DA778(v23, (double *)buf, __y, &v73, v25, v17, 0.0, v56, v57, 0.0);
        double v58 = atan2(v53, v54);
        if (v58 < 0.0) {
          double v58 = v58 + 6.28318531;
        }
        double v59 = v58 * 57.2957795;
        double v60 = atan2(__y[0], *(long double *)&buf[0].__r_.__value_.__l.__data_);
        if (v60 < 0.0) {
          double v60 = v60 + 6.28318531;
        }
        sub_190715278(v59, v60 * 57.2957795);
        goto LABEL_78;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
      }
      unint64_t v68 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1906B8000, v68, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)buf, 2u);
      }
      double v17 = 0.0;
      if (!sub_1906CB57C(115, 0))
      {
LABEL_35:
        char v18 = 0;
LABEL_36:
        double v25 = 0.0;
        double v32 = 0.0;
        if (!v13) {
          goto LABEL_38;
        }
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        goto LABEL_111;
      }
      goto LABEL_16;
    }
LABEL_70:
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    uint64_t v47 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1906B8000, v47, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_35;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1)
    {
LABEL_108:
      LOWORD(__y[0]) = 0;
      int v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", (const char *)v20);
LABEL_109:
      if (v20 != buf) {
        free(v20);
      }
      goto LABEL_35;
    }
LABEL_112:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    goto LABEL_108;
  }
  __int16 v24 = *(double **)(v14 + 136);
  double v25 = *v24;
  double v17 = v24[1];
  double v26 = v24[2];
  double v27 = v24[3];
  buf[0].__r_.__value_.__r.__words[0] = 0;
  __y[0] = 0.0;
  uint64_t v28 = v23;
  double v29 = v25;
  double v30 = v17;
LABEL_27:
  sub_1906DA778(v28, (double *)buf, __y, &v73, v29, v30, 0.0, v26, v27, 0.0);
  double v31 = atan2(__y[0], *(long double *)&buf[0].__r_.__value_.__l.__data_);
  if (v31 < 0.0) {
    double v31 = v31 + 6.28318531;
  }
  double v32 = v31 * 57.2957795;
LABEL_79:
  char v18 = 1;
  if (v13) {
LABEL_37:
  }
    sub_1906BFE48(v13);
LABEL_38:
  if (v18)
  {
    if ((a4 & 1) == 0)
    {
      BOOL v34 = v32 >= 360.0 || v32 < 0.0;
      double v35 = dbl_190885CB0[v32 > 180.0];
      if (v34) {
        double v35 = -0.0;
      }
      double v32 = v32 + v35;
    }
    uint64_t v36 = *a3;
    if (*(char *)(*a3 + 71) < 0) {
      sub_1906C00FC(buf, *(void **)(v36 + 48), *(void *)(v36 + 56));
    }
    else {
      buf[0] = *(std::string *)(v36 + 48);
    }
    std::string::operator=((std::string *)(a2 + 128), buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    uint64_t v40 = *a3;
    *(void *)(a2 + 112) = *(void *)*a3;
    *(void *)(a2 + 120) = *(void *)(v40 + 20);
    *(double *)(a2 + 152) = v25;
    *(double *)(a2 + 160) = v17;
    *(double *)(a2 + 168) = v32;
    *(double *)(a2 + 272) = v15;
    return 1;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
  }
  unint64_t v37 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLMM,interpolateOnRoad,interpolateProjections returned false", (uint8_t *)buf, 2u);
  }
  uint64_t result = sub_1906CB57C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    LOWORD(__y[0]) = 0;
    unint64_t v39 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLMapGeometry::interpolateOnRoad(CLMapCrumb &, const CLMapRoadPtr &, BOOL, const double *, int) const", "CoreLocation: %s\n", (const char *)v39);
    if (v39 != buf) {
      free(v39);
    }
    return 0;
  }
  return result;
}

void sub_190812BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190812C34(uint64_t a1)
{
  uint64_t v2 = a1 + 248;
  uint64_t v1 = *(void **)(a1 + 248);
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 224) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  sub_190813374(a1 + 240, v1);
  *(void *)(v2 - 8) = v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  sub_190813374(v2 + 16, *(void **)(v2 + 24));
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 16) = v2 + 24;
  sub_1908132D4(v2 + 40, *(char **)(v2 + 48));
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0;
  *(void *)(v2 + 40) = v2 + 48;
  *(void *)(v2 + 72) = 0;

  sub_19074C1F8((uint64_t *)(v2 + 80));
}

uint64_t sub_190812CC4(uint64_t a1, uint64_t a2, double a3)
{
  return (*(uint64_t (**)(double, double, double))(*(void *)a1 + 40))(*(double *)(a2 + 56), *(double *)(a2 + 64), a3);
}

void sub_190812CF0(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 33))
  {
    uint64_t v2 = *(void **)(a1 + 2600);
    if (v2)
    {
      if ([v2 allowNetworkTileLoad])
      {
        ++*(_DWORD *)(a1 + 36);
        uint64_t v3 = *(void *)(a1 + 2600);
        MEMORY[0x1F4181798](v3, sel_preloadRoadTilesNear_radius_completionHandler_);
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
      }
      uint64_t v4 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_ERROR, "CLMM,provideCacheHint,fGEOMapFeatureAccess is unexpectedly nil", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
        }
        double v5 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual void CLMapGeometry::provideCacheHint(double, double, double)", "CoreLocation: %s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
}

void sub_190812F18(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    uint64_t v3 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134349571;
      uint64_t v6 = [a2 code];
      __int16 v7 = 2114;
      uint64_t v8 = [a2 domain];
      __int16 v9 = 2113;
      uint64_t v10 = [a2 localizedDescription];
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_DEBUG, "CLMM,Warning,provideCacheHint reported error:%{public}lld (%{public}@) \"%{private}@\"", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLMapGeometry::provideCacheHint(double, double, double)_block_invoke", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_190813144()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
  }
  id v0 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v0, OS_LOG_TYPE_ERROR, "Base function called for moveOnRouteRoads", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006280);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLMapGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_1908132D4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1908132D4(a1, *(void *)a2);
    sub_1908132D4(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 80);
    sub_1906C6BF0(&v4);
    uint64_t v4 = (void **)(a2 + 56);
    sub_1906C6BF0(&v4);
    operator delete(a2);
  }
}

os_log_t sub_190813344()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_190813374(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_190813374(a1, *a2);
    sub_190813374(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      sub_1906BFE48(v4);
    }
    operator delete(a2);
  }
}

void sub_1908133D4()
{
  id v0 = operator new(0x178uLL);
  sub_190813430(v0);
}

void sub_19081341C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_190813430(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE0052D0;
  sub_190740CC0(a1 + 3);
}

void sub_1908134A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1908134BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0052D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1908134DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE0052D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_190813530(uint64_t a1)
{
  return sub_19081355C((uint64_t)&v2, a1 + 24);
}

uint64_t sub_19081355C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 328);
  sub_1906C6BF0(&v4);
  sub_1908132D4(a2 + 288, *(char **)(a2 + 296));
  sub_190813374(a2 + 264, *(void **)(a2 + 272));
  sub_190813374(a2 + 240, *(void **)(a2 + 248));
  sub_1907A22C0((id *)(a2 + 232));
  return sub_1907F475C(a2);
}

double sub_1908135C8(double *a1, double a2, double a3, double a4, double a5)
{
  long double v9 = 0.0;
  long double __y = 0.0;
  sub_1906DA778(a1, &v9, &__y, &v7, a2, a3, 0.0, a4, a5, 0.0);
  double v5 = atan2(__y, v9);
  if (v5 < 0.0) {
    double v5 = v5 + 6.28318531;
  }
  return v5 * 57.2957795;
}

BOOL sub_190813638(double a1, uint64_t a2, void *a3, int a4, unint64_t a5, void *a6, void *a7)
{
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  long long v165 = 0u;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  uint64_t v158 = [a6 countByEnumeratingWithState:&v165 objects:v217 count:16];
  if (v158)
  {
    char v10 = 0;
    uint64_t v11 = 0;
    double v12 = 0.8;
    if (a5 == 1) {
      double v12 = 0.0;
    }
    double v150 = v12;
    double v13 = 20.0;
    if (a5 == 3) {
      double v13 = 5.0;
    }
    uint64_t v157 = *(void *)v166;
    if (a5 == 2) {
      double v13 = 3.0;
    }
    double v153 = v13;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v166 != v157) {
          objc_enumerationMutation(a6);
        }
        double v15 = *(void **)(*((void *)&v165 + 1) + 8 * v14);
        if (v15)
        {
          unsigned int v16 = [*(id *)(*((void *)&v165 + 1) + 8 * v14) locType];
          if (v16 > 0xD || ((1 << v16) & 0x2E1A) == 0)
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
            }
            unint64_t v114 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
            {
              int v115 = [v15 locType];
              *(_DWORD *)uint64_t buf = 67240192;
              *(_DWORD *)float v194 = v115;
              _os_log_impl(&dword_1906B8000, v114, OS_LOG_TYPE_DEBUG, "CLTSP,LI,interpolator,unsupported location type skipped,%{public}d", buf, 8u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
              }
              int v116 = [v15 locType];
              int v169 = 67240192;
              *(_DWORD *)long long v170 = v116;
LABEL_94:
              unint64_t v100 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentLinearInterpolator::upsampleTripSegmentData(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const double) const", "CoreLocation: %s\n", v100);
              goto LABEL_95;
            }
          }
          else
          {
            objc_msgSend((id)objc_msgSend(v15, "timestamp"), "timeIntervalSinceReferenceDate");
            double v19 = v18;
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
            }
            int v20 = qword_1E929F6D8;
            double v164 = v19;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
            {
              [v15 latitude];
              uint64_t v161 = v21;
              [v15 longitude];
              double v23 = v22;
              [v15 altitude];
              uint64_t v25 = v24;
              [v15 speed];
              uint64_t v27 = v26;
              [v15 course];
              uint64_t v29 = v28;
              [v15 horizontalAccuracy];
              uint64_t v31 = v30;
              [v15 altitudeAccuracy];
              uint64_t v33 = v32;
              [v15 speedAccuracy];
              uint64_t v35 = v34;
              [v15 courseAccuracy];
              uint64_t v37 = v36;
              uint64_t v38 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
              int v39 = [v15 locType];
              *(_DWORD *)uint64_t buf = 67243523;
              *(_DWORD *)float v194 = a5;
              *(_WORD *)&v194[4] = 1026;
              *(_DWORD *)&v194[6] = a4;
              *(_WORD *)double v195 = 2050;
              *(double *)&v195[2] = v164;
              *(_WORD *)double v196 = 2049;
              *(void *)&v196[2] = v161;
              __int16 v197 = 2049;
              double v198 = v23;
              __int16 v199 = 2050;
              uint64_t v200 = v25;
              double v19 = v164;
              __int16 v201 = 2050;
              uint64_t v202 = v27;
              __int16 v203 = 2050;
              uint64_t v204 = v29;
              __int16 v205 = 2050;
              uint64_t v206 = v31;
              __int16 v207 = 2050;
              uint64_t v208 = v33;
              __int16 v209 = 2050;
              uint64_t v210 = v35;
              __int16 v211 = 2050;
              uint64_t v212 = v37;
              __int16 v213 = 2082;
              uint64_t v214 = v38;
              __int16 v215 = 1026;
              int v216 = v39;
              _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "CLTSP,LI,input,mode,%{public}d,final,%{public}d,time,%{public}.4lf,LL,%{private}.7lf,%{private}.7lf,altitude,%{public}.2lf,speed,%{public}.2lf,course,%{public}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,sunc,%{public}.2lf,cunc,%{public}.2lf,id,%{public}s,type,%{public}d", buf, 0x82u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
              }
              [v15 latitude];
              uint64_t v163 = v125;
              [v15 longitude];
              double v127 = v126;
              [v15 altitude];
              uint64_t v129 = v128;
              [v15 speed];
              uint64_t v131 = v130;
              [v15 course];
              uint64_t v133 = v132;
              [v15 horizontalAccuracy];
              uint64_t v135 = v134;
              [v15 altitudeAccuracy];
              uint64_t v137 = v136;
              [v15 speedAccuracy];
              uint64_t v139 = v138;
              [v15 courseAccuracy];
              uint64_t v141 = v140;
              uint64_t v142 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
              int v143 = [v15 locType];
              int v169 = 67243523;
              *(_DWORD *)long long v170 = a5;
              *(_WORD *)&v170[4] = 1026;
              *(_DWORD *)&v170[6] = a4;
              *(_WORD *)unint64_t v171 = 2050;
              *(double *)&v171[2] = v164;
              *(_WORD *)uint64_t v172 = 2049;
              *(void *)&v172[2] = v163;
              __int16 v173 = 2049;
              double v174 = v127;
              __int16 v175 = 2050;
              uint64_t v176 = v129;
              __int16 v177 = 2050;
              uint64_t v178 = v131;
              __int16 v179 = 2050;
              uint64_t v180 = v133;
              __int16 v181 = 2050;
              uint64_t v182 = v135;
              __int16 v183 = 2050;
              uint64_t v184 = v137;
              __int16 v185 = 2050;
              uint64_t v186 = v139;
              __int16 v187 = 2050;
              uint64_t v188 = v141;
              __int16 v189 = 2082;
              uint64_t v190 = v142;
              __int16 v191 = 1026;
              int v192 = v143;
              double v144 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentLinearInterpolator::upsampleTripSegmentData(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const double) const", "CoreLocation: %s\n", v144);
              if (v144 != (char *)buf) {
                free(v144);
              }
              double v19 = v164;
              if (!v11)
              {
LABEL_119:
                char v10 = 1;
LABEL_120:
                uint64_t v11 = v15;
                goto LABEL_121;
              }
            }
            else if (!v11)
            {
              goto LABEL_119;
            }
            objc_msgSend((id)objc_msgSend(v15, "timestamp"), "timeIntervalSinceReferenceDate");
            double v41 = v40;
            objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
            if (v41 <= v42)
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
              }
              uint64_t v87 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
              {
                objc_msgSend((id)objc_msgSend(v15, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v89 = v88;
                objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v91 = v90;
                int v92 = [v15 locType];
                int v93 = [v11 locType];
                *(_DWORD *)uint64_t buf = 134349824;
                *(void *)float v194 = v89;
                *(_WORD *)&v194[8] = 2050;
                *(void *)double v195 = v91;
                *(_WORD *)&v195[8] = 1026;
                *(_DWORD *)double v196 = v92;
                *(_WORD *)&v196[4] = 1026;
                *(_DWORD *)&v196[6] = v93;
                _os_log_impl(&dword_1906B8000, v87, OS_LOG_TYPE_ERROR, "CLTSP,LI,timestamp moving back,time,%{public}.4lf,prevTime,%{public}.4lf,type,%{public}d,prevType,%{public}d", buf, 0x22u);
              }
              if (sub_1906CB57C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
                }
                objc_msgSend((id)objc_msgSend(v15, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v95 = v94;
                objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v97 = v96;
                int v98 = [v15 locType];
                int v99 = [v11 locType];
                int v169 = 134349824;
                *(void *)long long v170 = v95;
                *(_WORD *)&v170[8] = 2050;
                *(void *)unint64_t v171 = v97;
                *(_WORD *)&v171[8] = 1026;
                *(_DWORD *)uint64_t v172 = v98;
                *(_WORD *)&v172[4] = 1026;
                *(_DWORD *)&v172[6] = v99;
                goto LABEL_77;
              }
            }
            else
            {
              objc_msgSend((id)objc_msgSend(v15, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v11, "timestamp"));
              double v44 = v43;
              if (v43 > v150)
              {
                objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                double v46 = v45;
                [v15 distanceFromLocation:v11];
                double v48 = v47;
                if (v44 <= 1.5)
                {
                  [v15 speed];
                  if (v44 > 0.0 && v117 < 0.0)
                  {
                    double v118 = 53.6;
                    if (a5 <= 3) {
                      double v118 = dbl_190885D40[a5];
                    }
                    if (v118 >= v48 / v44) {
                      double v118 = v48 / v44;
                    }
                    [v15 updateSpeed:v118 andSpeedAccuracy:v153];
                  }
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
                  }
                  uint64_t v119 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                  {
                    [v15 speed];
                    *(_DWORD *)uint64_t buf = 134218496;
                    *(double *)float v194 = v44;
                    *(_WORD *)&v194[8] = 2048;
                    *(double *)double v195 = v48;
                    *(_WORD *)&v195[8] = 2048;
                    *(void *)double v196 = v120;
                    _os_log_impl(&dword_1906B8000, v119, OS_LOG_TYPE_DEBUG, "CLTSP,LI,duration_since_previous_epoch,%.2lf,distance,%.2lf,speed,%.2lf", buf, 0x20u);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
                    }
                    [v15 speed];
                    int v169 = 134218496;
                    *(double *)long long v170 = v44;
                    *(_WORD *)&v170[8] = 2048;
                    *(double *)unint64_t v171 = v48;
                    *(_WORD *)&v171[8] = 2048;
                    *(void *)uint64_t v172 = v145;
                    uint64_t v146 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentLinearInterpolator::upsampleTripSegmentData(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const double) const", "CoreLocation: %s\n", v146);
                    if (v146 != (char *)buf) {
                      free(v146);
                    }
                  }
                  if (v10)
                  {
                    [v11 speed];
                    if (v121 < 0.0)
                    {
                      [v15 speed];
                      objc_msgSend(v11, "updateSpeed:andSpeedAccuracy:");
                    }
                    [v11 setLocationReconstructionType:1];
                    [a7 addObject:v11];
                    objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                    double v123 = v122;
                    objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                    sub_1906E5A04(v11, [a7 count], a3, a5, v123, v124, -1.0, -1.0);
                  }
                  [a7 addObject:v15];
                  sub_1906E5A04(v15, [a7 count], a3, a5, v19, v46, v19, -1.0);
                  char v10 = 0;
                }
                else
                {
                  double v159 = a1 / v44 * v47 / a1;
                  double v154 = a1 / v44;
                  double v155 = v46;
                  double v49 = a1 / v44;
                  double v156 = v44;
                  do
                  {
                    if (v49 >= 0.9999999) {
                      break;
                    }
                    [v11 latitude];
                    double v51 = v50;
                    [v11 longitude];
                    double v53 = v52;
                    [v15 latitude];
                    double v55 = v54;
                    [v15 longitude];
                    double v57 = v53 + 360.0;
                    if (v53 >= 0.0) {
                      double v57 = v53;
                    }
                    if (v56 < 0.0) {
                      double v56 = v56 + 360.0;
                    }
                    double v58 = v56 - v57;
                    if (v58 <= 180.0)
                    {
                      if (v58 < -180.0) {
                        double v58 = v58 + 360.0;
                      }
                    }
                    else
                    {
                      double v58 = v58 + -360.0;
                    }
                    double v59 = fmod(v53 + v58 * v49, 360.0);
                    if (v59 <= -180.0)
                    {
                      double v59 = v59 + 360.0;
                    }
                    else if (v59 > 180.0)
                    {
                      double v59 = v59 + -360.0;
                    }
                    [v11 speed];
                    BOOL v61 = v60 < 0.0;
                    double v62 = v159;
                    if (!v61)
                    {
                      objc_msgSend(v15, "speed", v159);
                      BOOL v61 = v63 < 0.0;
                      double v62 = v159;
                      if (!v61)
                      {
                        objc_msgSend(v11, "speed", v159);
                        double v65 = v64;
                        [v15 speed];
                        double v62 = v49 * v66 + v65 * (1.0 - v49);
                      }
                    }
                    double v67 = 53.6;
                    if (a5 <= 3) {
                      double v67 = dbl_190885D40[a5];
                    }
                    double v68 = v51 + (v55 - v51) * v49;
                    if (v67 < v62) {
                      double v62 = v67;
                    }
                    double v160 = v62;
                    double v69 = [CLTripSegmentLocation alloc];
                    double v162 = v46 + v49 * v44;
                    uint64_t v70 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v162];
                    [v15 horizontalAccuracy];
                    double v72 = v71;
                    [v15 course];
                    double v74 = v73;
                    [v15 courseAccuracy];
                    double v76 = v75;
                    [v15 altitude];
                    double v78 = v77;
                    [v15 altitudeAccuracy];
                    long long v80 = -[CLTripSegmentLocation initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:referenceFrame:](v69, "initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:referenceFrame:", v70, [v15 locType], objc_msgSend(v15, "referenceFrame"), v68, v59, v72, v74, v76, v160, v153, v78, v79);
                    [(CLTripSegmentLocation *)v80 setLocationReconstructionType:4];
                    -[CLTripSegmentLocation setStartLocationType:](v80, "setStartLocationType:", [v11 locType]);
                    -[CLTripSegmentLocation setStopLocationType:](v80, "setStopLocationType:", [v15 locType]);
                    if ([v11 locType] == 13
                      || [v15 locType] == 13)
                    {
                      [(CLTripSegmentLocation *)v80 speed];
                      -[CLTripSegmentLocation updateSpeed:andSpeedAccuracy:](v80, "updateSpeed:andSpeedAccuracy:");
                    }
                    double v44 = v156;
                    double v46 = v155;
                    if (v10)
                    {
                      [v11 speed];
                      if (v81 < 0.0)
                      {
                        [(CLTripSegmentLocation *)v80 speed];
                        objc_msgSend(v11, "updateSpeed:andSpeedAccuracy:");
                      }
                      [a7 addObject:v11];
                      objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                      double v83 = v82;
                      objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                      sub_1906E5A04(v11, [a7 count], a3, a5, v83, v84, -1.0, -1.0);
                    }
                    [a7 addObject:v80];
                    sub_1906E5A04(v80, [a7 count], a3, a5, v162, v155, v164, v49);
                    char v10 = 0;
                    double v85 = v154 + v49;
                    if (v154 + v49 > 1.0) {
                      double v85 = 1.0;
                    }
                    if (v49 >= 1.0) {
                      break;
                    }
                    double v49 = v85;
                  }
                  while (v162 < v164);
                  if (a5 == 1)
                  {
                    [v15 setLocationReconstructionType:4];
                    objc_msgSend(v15, "setStartLocationType:", objc_msgSend(v11, "locType"));
                    objc_msgSend(v15, "setStopLocationType:", objc_msgSend(v15, "locType"));
                  }
                  [a7 addObject:v15];
                }
                goto LABEL_120;
              }
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
              }
              int v101 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
              {
                objc_msgSend((id)objc_msgSend(v15, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v103 = v102;
                objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v105 = v104;
                int v106 = [v15 locType];
                int v107 = [v11 locType];
                *(_DWORD *)uint64_t buf = 134350080;
                *(void *)float v194 = v103;
                *(_WORD *)&v194[8] = 2050;
                *(void *)double v195 = v105;
                *(_WORD *)&v195[8] = 1026;
                *(_DWORD *)double v196 = v106;
                *(_WORD *)&v196[4] = 1026;
                *(_DWORD *)&v196[6] = v107;
                __int16 v197 = 2050;
                double v198 = v44;
                _os_log_impl(&dword_1906B8000, v101, OS_LOG_TYPE_DEBUG, "CLTSP,LI,duration_since_previous_epoch threshold not met,time,%{public}.4lf,prevTime,%{public}.4lf,type,%{public}d,prevType,%{public}d,duration_since_previous_epoch,%{public}.2lf", buf, 0x2Cu);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
                }
                objc_msgSend((id)objc_msgSend(v15, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v109 = v108;
                objc_msgSend((id)objc_msgSend(v11, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v111 = v110;
                int v112 = [v15 locType];
                int v113 = [v11 locType];
                int v169 = 134350080;
                *(void *)long long v170 = v109;
                *(_WORD *)&v170[8] = 2050;
                *(void *)unint64_t v171 = v111;
                *(_WORD *)&v171[8] = 1026;
                *(_DWORD *)uint64_t v172 = v112;
                *(_WORD *)&v172[4] = 1026;
                *(_DWORD *)&v172[6] = v113;
                __int16 v173 = 2050;
                double v174 = v44;
                goto LABEL_94;
              }
            }
          }
        }
        else
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
          }
          uint64_t v86 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl(&dword_1906B8000, v86, OS_LOG_TYPE_ERROR, "CLTSP,LI,interpolator,null location object skipped", buf, 2u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005EE0);
            }
            LOWORD(v169) = 0;
LABEL_77:
            unint64_t v100 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentLinearInterpolator::upsampleTripSegmentData(NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const double) const", "CoreLocation: %s\n", v100);
LABEL_95:
            if (v100 != (char *)buf) {
              free(v100);
            }
          }
        }
LABEL_121:
        ++v14;
      }
      while (v14 != v158);
      uint64_t v147 = [a6 countByEnumeratingWithState:&v165 objects:v217 count:16];
      uint64_t v158 = v147;
    }
    while (v147);
  }
  return [a7 count] != 0;
}

os_log_t sub_1908148C8()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

_DWORD *sub_190814BC8(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = [(id)objc_opt_class() trackerStateSize];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = malloc_type_calloc(1uLL, v4 + 200, 0x67C60616uLL);
  *uint64_t v6 = 3;
  v6[1] = v5;
  __strlcpy_chk();
  [(id)objc_opt_class() trackerStateTypeName];
  __strlcpy_chk();
  object_getClassName(WeakRetained);
  __strlcpy_chk();
  if (([WeakRetained dumpState:v6 + 50 withSize:v5 hints:a2] & 1) == 0)
  {
    free(v6);
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_19081540C(void *a1, uint64_t *a2, char a3, void *a4, uint64_t **a5, long long ***a6, uint64_t *a7)
{
  uint64_t v205 = *MEMORY[0x1E4F143B8];
  if (*a7)
  {
    long long v158 = 0u;
    long long v159 = 0u;
    long long v156 = 0u;
    long long v157 = 0u;
    uint64_t v13 = [a4 countByEnumeratingWithState:&v156 objects:v183 count:16];
    if (v13)
    {
      uint64_t v14 = *(void *)v157;
      do
      {
        for (uint64_t i = 0; i != v13; ++i)
        {
          if (*(void *)v157 != v14) {
            objc_enumerationMutation(a4);
          }
          unsigned int v16 = *(void **)(*((void *)&v156 + 1) + 8 * i);
          [v16 course];
          [v16 courseAccuracy];
          [v16 horizontalAccuracy];
          [v16 course];
          objc_msgSend(v16, "updateCourse:andCourseAccuracy:");
        }
        uint64_t v13 = [a4 countByEnumeratingWithState:&v156 objects:v183 count:16];
      }
      while (v13);
    }
    uint64_t v150 = 0;
    uint64_t v151 = 0;
    long long v149 = xmmword_1908820F0;
    uint64_t v152 = 0x3FF0000000000000;
    double v153 = 0;
    double v154 = 0;
    uint64_t v155 = 0;
    sub_1907A1874((uint64_t)&v149, a4);
    uint64_t v146 = 0;
    uint64_t v147 = 0;
    uint64_t v148 = 0;
    if ((char *)v154 - (char *)v153 == 16)
    {
      unsigned int v17 = *((_DWORD *)*v153 + 22);
      BOOL v18 = v17 > 0xD;
      int v19 = (1 << v17) & 0x2810;
      if (!v18 && v19 != 0)
      {
        uint64_t v21 = *a5;
        double v22 = a5[1];
        if (*a5 == v22)
        {
LABEL_18:
          *(void *)&uint8_t buf[8] = 0;
          *(void *)uint64_t buf = 0;
        }
        else
        {
          while (1)
          {
            uint64_t v23 = *v21;
            if (*v21)
            {
              if (vabdd_f64(*(double *)(v23 + 16), **v153) < 0.001) {
                break;
              }
            }
            v21 += 2;
            if (v21 == v22) {
              goto LABEL_18;
            }
          }
          *(void *)uint64_t buf = *v21;
          uint64_t v137 = v21[1];
          *(void *)&uint8_t buf[8] = v137;
          if (v137) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v137 + 8), 1uLL, memory_order_relaxed);
          }
          if (*(void *)v23) {
            sub_190745090((uint64_t *)&v146, (long long *)buf);
          }
        }
        if (*(void *)&buf[8]) {
          sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v146 != v147)
        {
LABEL_72:
          long long v181 = 0uLL;
          uint64_t v182 = 0;
          double v43 = v146;
          double v44 = v147;
          double v45 = &qword_190885000;
          if (v146 == v147)
          {
            uint64_t v82 = 0;
          }
          else
          {
            uint64_t v46 = a1[6];
            double v47 = -1.0;
            if (a1[5] != v46)
            {
              uint64_t v49 = *(void *)(v46 - 24);
              uint64_t v48 = *(void *)(v46 - 16);
              if (v49 != v48)
              {
                uint64_t v50 = *(void *)(v48 - 16);
                if (v50) {
                  double v47 = *(double *)(v50 + 16);
                }
              }
            }
            do
            {
              uint64_t v51 = *(void *)v43;
              if (*(void *)v43)
              {
                if (*(unsigned char *)(v51 + 64)
                  && (double v52 = *(double *)(v51 + 16), v52 > 0.0)
                  && *(void *)v51
                  && ((v54 = *(double *)(v51 + 24), double v53 = *(double *)(v51 + 32), fabs(v54) >= 0.00003)
                   || fabs(v53) >= 0.00003))
                {
                  BOOL v68 = v47 < 0.0;
                  if (v52 > v47) {
                    BOOL v68 = 1;
                  }
                  int v55 = -1;
                  if (v53 >= -180.0 && v54 <= 90.0 && v54 >= -90.0 && v53 <= 180.0 && v68)
                  {
                    sub_190745090((uint64_t *)&v181, v43);
                    int v55 = *(_DWORD *)(**(void **)v43 + 20);
                  }
                }
                else
                {
                  int v55 = -1;
                }
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                }
                double v56 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                {
                  if (*((char *)a2 + 23) >= 0) {
                    double v57 = a2;
                  }
                  else {
                    double v57 = (uint64_t *)*a2;
                  }
                  uint64_t v58 = *(void *)(*(void *)v43 + 16);
                  uint64_t v59 = *(void *)(*(void *)v43 + 24);
                  uint64_t v60 = *(void *)(*(void *)v43 + 32);
                  uint64_t v61 = *(void *)(*(void *)v43 + 40);
                  uint64_t v62 = *(void *)(*(void *)v43 + 48);
                  uint64_t v63 = *(void *)(*(void *)v43 + 56);
                  uint64_t v65 = *(void *)(*(void *)v43 + 72);
                  uint64_t v64 = *(void *)(*(void *)v43 + 80);
                  uint64_t v66 = *(void *)(*(void *)v43 + 88);
                  int v67 = *(unsigned __int8 *)(*(void *)v43 + 64);
                  *(_DWORD *)uint64_t buf = 136449027;
                  *(void *)&uint8_t buf[4] = v57;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(void *)&unsigned char buf[14] = v58;
                  __int16 v185 = 2049;
                  uint64_t v186 = v59;
                  __int16 v187 = 2049;
                  uint64_t v188 = v60;
                  __int16 v189 = 2049;
                  uint64_t v190 = v61;
                  __int16 v191 = 2050;
                  uint64_t v192 = v62;
                  __int16 v193 = 2050;
                  uint64_t v194 = v63;
                  __int16 v195 = 2050;
                  uint64_t v196 = v64;
                  __int16 v197 = 2050;
                  uint64_t v198 = v65;
                  __int16 v199 = 2050;
                  uint64_t v200 = v66;
                  __int16 v201 = 1026;
                  int v202 = v67;
                  __int16 v203 = 1026;
                  int v204 = v55;
                  _os_log_impl(&dword_1906B8000, v56, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snappedGPSLocation,id,%{public}s,time,%{public}.3lf,snapLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,valid,%{public}d,frc,%{public}d", buf, 0x72u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                  }
                  if (*((char *)a2 + 23) >= 0) {
                    uint64_t v70 = a2;
                  }
                  else {
                    uint64_t v70 = (uint64_t *)*a2;
                  }
                  uint64_t v71 = *(void *)(*(void *)v43 + 16);
                  uint64_t v72 = *(void *)(*(void *)v43 + 24);
                  uint64_t v73 = *(void *)(*(void *)v43 + 32);
                  uint64_t v74 = *(void *)(*(void *)v43 + 40);
                  uint64_t v75 = *(void *)(*(void *)v43 + 48);
                  uint64_t v76 = *(void *)(*(void *)v43 + 56);
                  uint64_t v78 = *(void *)(*(void *)v43 + 72);
                  uint64_t v77 = *(void *)(*(void *)v43 + 80);
                  uint64_t v79 = *(void *)(*(void *)v43 + 88);
                  int v80 = *(unsigned __int8 *)(*(void *)v43 + 64);
                  *(_DWORD *)double v160 = 136449027;
                  *(void *)&v160[4] = v70;
                  *(_WORD *)&v160[12] = 2050;
                  *(void *)&v160[14] = v71;
                  __int16 v161 = 2049;
                  uint64_t v162 = v72;
                  __int16 v163 = 2049;
                  uint64_t v164 = v73;
                  __int16 v165 = 2049;
                  uint64_t v166 = v74;
                  __int16 v167 = 2050;
                  uint64_t v168 = v75;
                  __int16 v169 = 2050;
                  uint64_t v170 = v76;
                  __int16 v171 = 2050;
                  uint64_t v172 = v77;
                  __int16 v173 = 2050;
                  uint64_t v174 = v78;
                  __int16 v175 = 2050;
                  uint64_t v176 = v79;
                  __int16 v177 = 1026;
                  int v178 = v80;
                  __int16 v179 = 1026;
                  int v180 = v55;
                  double v81 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v81);
                  if (v81 != buf) {
                    free(v81);
                  }
                }
              }
              ++v43;
            }
            while (v43 != v44);
            uint64_t v82 = v181;
            if ((void)v181 != *((void *)&v181 + 1))
            {
              char v83 = 0;
              double v45 = &qword_190885000;
              goto LABEL_117;
            }
            double v45 = &qword_190885000;
          }
          if (*a6 == a6[1])
          {
            uint64_t v128 = v153;
            if (v154 != v153)
            {
              uint64_t v129 = (char *)operator new(0xC0uLL);
              *((void *)v129 + 1) = 0;
              *((void *)v129 + 2) = 0;
              *(void *)uint64_t v129 = &unk_1EE0031F0;
              *(_OWORD *)(v129 + 40) = 0u;
              *(_OWORD *)(v129 + 56) = 0u;
              *(_OWORD *)(v129 + 72) = 0u;
              *(_OWORD *)(v129 + 88) = 0u;
              *(_OWORD *)(v129 + 104) = 0u;
              *(_OWORD *)(v129 + 120) = 0u;
              *(_OWORD *)(v129 + 136) = 0u;
              *(_OWORD *)(v129 + 152) = 0u;
              *(_OWORD *)(v129 + 168) = 0u;
              *((void *)v129 + 23) = 0;
              *(_OWORD *)(v129 + 24) = 0u;
              *((void *)v129 + 6) = 0;
              *((void *)v129 + 7) = 0;
              __asm { FMOV            V1.2D, #-1.0 }
              *((_OWORD *)v129 + 4) = _Q1;
              v129[89] = 1;
              *((void *)v129 + 12) = 0;
              *((void *)v129 + 13) = 0;
              v129[120] = 0;
              *((void *)v129 + 14) = 0;
              *((void *)v129 + 16) = 0xBFF0000000000000;
              *((_DWORD *)v129 + 46) = 0;
              *(_OWORD *)(v129 + 168) = 0u;
              *(_OWORD *)(v129 + 152) = 0u;
              *(void *)uint64_t buf = v129 + 24;
              *(void *)&uint8_t buf[8] = v129;
              *((double *)v129 + 5) = **v128;
              sub_190745090((uint64_t *)&v146, (long long *)buf);
              uint64_t v134 = a1 + 5;
              unint64_t v135 = a1[6];
              if (v135 >= a1[7])
              {
                uint64_t v136 = sub_1907ED92C(v134, (void **)&v146);
              }
              else
              {
                sub_1907ED8D8((uint64_t)v134, (void **)&v146);
                uint64_t v136 = v135 + 24;
              }
              a1[6] = v136;
              if (*(void *)&buf[8]) {
                sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
              }
            }
            goto LABEL_163;
          }
          char v83 = 1;
LABEL_117:
          uint64_t v138 = a1 + 5;
          uint64_t v84 = a1[6];
          double v85 = -1.0;
          double v86 = -1.0;
          if (a1[5] != v84)
          {
            uint64_t v88 = *(void *)(v84 - 24);
            uint64_t v87 = *(void *)(v84 - 16);
            if (v88 != v87)
            {
              uint64_t v89 = *(void *)(v87 - 16);
              if (v89) {
                double v86 = *(double *)(v89 + 16);
              }
            }
          }
          if ((v83 & 1) == 0) {
            double v85 = *(double *)(*(void *)v82 + 16);
          }
          uint64_t v91 = *a6;
          uint64_t v90 = a6[1];
          if (*a6 != v90)
          {
            int v140 = v45[430];
            do
            {
              uint64_t v141 = 0;
              uint64_t v142 = 0;
              uint64_t v143 = 0;
              int v93 = *v91;
              int v92 = v91[1];
              if (*v91 != v92)
              {
                do
                {
                  uint64_t v94 = *(void *)v93;
                  if (*(void *)v93 && *(void *)v94)
                  {
                    double v95 = *(double *)(v94 + 16);
                    BOOL v96 = v95 < v85 + -1.0 || v85 == -1.0;
                    BOOL v97 = v95 > v86 + 1.0 || v86 == -1.0;
                    if (v97 && v96)
                    {
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                      }
                      int v99 = qword_1E929F6D8;
                      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                      {
                        if (*((char *)a2 + 23) >= 0) {
                          unint64_t v100 = a2;
                        }
                        else {
                          unint64_t v100 = (uint64_t *)*a2;
                        }
                        uint64_t v101 = *(void *)(*(void *)v93 + 16);
                        uint64_t v102 = *(void *)(*(void *)v93 + 24);
                        uint64_t v103 = *(void *)(*(void *)v93 + 32);
                        uint64_t v104 = *(void *)(*(void *)v93 + 40);
                        uint64_t v105 = *(void *)(*(void *)v93 + 48);
                        uint64_t v106 = *(void *)(*(void *)v93 + 56);
                        uint64_t v108 = *(void *)(*(void *)v93 + 72);
                        uint64_t v107 = *(void *)(*(void *)v93 + 80);
                        uint64_t v109 = *(void *)(*(void *)v93 + 88);
                        int v110 = *(unsigned __int8 *)(*(void *)v93 + 64);
                        int v111 = *(_DWORD *)(**(void **)v93 + 20);
                        *(_DWORD *)uint64_t buf = v140;
                        *(void *)&uint8_t buf[4] = v100;
                        *(_WORD *)&unsigned char buf[12] = 2050;
                        *(void *)&unsigned char buf[14] = v101;
                        __int16 v185 = 2049;
                        uint64_t v186 = v102;
                        __int16 v187 = 2049;
                        uint64_t v188 = v103;
                        __int16 v189 = 2049;
                        uint64_t v190 = v104;
                        __int16 v191 = 2050;
                        uint64_t v192 = v105;
                        __int16 v193 = 2050;
                        uint64_t v194 = v106;
                        __int16 v195 = 2050;
                        uint64_t v196 = v107;
                        __int16 v197 = 2050;
                        uint64_t v198 = v108;
                        __int16 v199 = 2050;
                        uint64_t v200 = v109;
                        __int16 v201 = 1026;
                        int v202 = v110;
                        __int16 v203 = 1026;
                        int v204 = v111;
                        _os_log_impl(&dword_1906B8000, v99, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snappedIILocation,id,%{public}s,time,%{public}.3lf,snapLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,valid,%{public}d,frc,%{public}d", buf, 0x72u);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6D0 != -1) {
                          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                        }
                        if (*((char *)a2 + 23) >= 0) {
                          int v112 = a2;
                        }
                        else {
                          int v112 = (uint64_t *)*a2;
                        }
                        uint64_t v113 = *(void *)(*(void *)v93 + 16);
                        uint64_t v114 = *(void *)(*(void *)v93 + 24);
                        uint64_t v115 = *(void *)(*(void *)v93 + 32);
                        uint64_t v116 = *(void *)(*(void *)v93 + 40);
                        uint64_t v117 = *(void *)(*(void *)v93 + 48);
                        uint64_t v118 = *(void *)(*(void *)v93 + 56);
                        uint64_t v120 = *(void *)(*(void *)v93 + 72);
                        uint64_t v119 = *(void *)(*(void *)v93 + 80);
                        uint64_t v121 = *(void *)(*(void *)v93 + 88);
                        int v122 = *(unsigned __int8 *)(*(void *)v93 + 64);
                        int v123 = *(_DWORD *)(**(void **)v93 + 20);
                        *(_DWORD *)double v160 = v140;
                        *(void *)&v160[4] = v112;
                        *(_WORD *)&v160[12] = 2050;
                        *(void *)&v160[14] = v113;
                        __int16 v161 = 2049;
                        uint64_t v162 = v114;
                        __int16 v163 = 2049;
                        uint64_t v164 = v115;
                        __int16 v165 = 2049;
                        uint64_t v166 = v116;
                        __int16 v167 = 2050;
                        uint64_t v168 = v117;
                        __int16 v169 = 2050;
                        uint64_t v170 = v118;
                        __int16 v171 = 2050;
                        uint64_t v172 = v119;
                        __int16 v173 = 2050;
                        uint64_t v174 = v120;
                        __int16 v175 = 2050;
                        uint64_t v176 = v121;
                        __int16 v177 = 1026;
                        int v178 = v122;
                        __int16 v179 = 1026;
                        int v180 = v123;
                        double v124 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 2, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v124);
                        if (v124 != buf) {
                          free(v124);
                        }
                      }
                      sub_190745090((uint64_t *)&v141, v93);
                    }
                  }
                  ++v93;
                }
                while (v93 != v92);
                if (v141 != v142)
                {
                  uint64_t v125 = *(v142 - 2);
                  if (v125)
                  {
                    double v86 = *(double *)(v125 + 16);
                    unint64_t v126 = a1[6];
                    if (v126 >= a1[7])
                    {
                      uint64_t v127 = sub_1907ED92C(v138, &v141);
                    }
                    else
                    {
                      sub_1907ED8D8((uint64_t)v138, &v141);
                      uint64_t v127 = v126 + 24;
                    }
                    a1[6] = v127;
                  }
                }
              }
              *(void *)uint64_t buf = &v141;
              sub_1906C6BF0((void ***)buf);
              v91 += 3;
            }
            while (v91 != v90);
          }
LABEL_163:
          *(void *)uint64_t buf = &v181;
          sub_1906C6BF0((void ***)buf);
          *(void *)uint64_t buf = &v146;
          sub_1906C6BF0((void ***)buf);
          *(void *)uint64_t buf = &v153;
          sub_1906C6BF0((void ***)buf);
          return;
        }
      }
    }
    if (a3)
    {
      uint64_t v24 = (std::__shared_weak_count *)a7[1];
      uint64_t v144 = *a7;
      uint64_t v145 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v25 = sub_1907F1B4C((uint64_t)&v153, (uint64_t *)&v146, &v144);
      if (v145) {
        sub_1906BFE48(v145);
      }
      if ((v25 & 1) == 0)
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        uint64_t v26 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = *(void *)*v153;
          *(_DWORD *)uint64_t buf = 134349056;
          *(void *)&uint8_t buf[4] = v27;
          _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,unable to compute snap using particle mapmatcher", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          uint64_t v28 = *(void *)*v153;
          *(_DWORD *)double v160 = 134349056;
          *(void *)&v160[4] = v28;
          uint64_t v29 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v29);
          if (v29 != buf) {
            free(v29);
          }
        }
      }
      goto LABEL_72;
    }
    uint64_t v33 = v153;
    uint64_t v32 = v154;
    if (v153 == v154) {
      goto LABEL_72;
    }
    while (1)
    {
      *(void *)double v160 = 0;
      *(void *)&v160[8] = 0;
      if (!sub_190742774(*a7, (uint64_t *)v160, 1, **v33, (*v33)[1], (*v33)[2], (*v33)[4], (*v33)[3], (*v33)[5])) {
        break;
      }
      uint64_t v34 = *(void *)v160;
      if (!*(void *)v160)
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        int v39 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v40 = *(void *)*v33;
          *(_DWORD *)uint64_t buf = 134349056;
          *(void *)&uint8_t buf[4] = v40;
          _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,destination snap is nullptr", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_64;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 == -1) {
          goto LABEL_69;
        }
LABEL_71:
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
LABEL_69:
        uint64_t v41 = *(void *)*v33;
        LODWORD(v181) = 134349056;
        *(void *)((char *)&v181 + 4) = v41;
        double v42 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v42);
        if (v42 != buf) {
          free(v42);
        }
        goto LABEL_64;
      }
      uint64_t v35 = *v33;
      double v36 = -1.0;
      if ((*v33)[7] > 0.0) {
        double v36 = v35[6];
      }
      *(double *)(*(void *)v160 + 104) = v36;
      *(_DWORD *)(v34 + 120) = *((_DWORD *)v35 + 22);
      sub_190745090((uint64_t *)&v146, (long long *)v160);
LABEL_64:
      if (*(void *)&v160[8]) {
        sub_1906BFE48(*(std::__shared_weak_count **)&v160[8]);
      }
      v33 += 2;
      if (v33 == v32) {
        goto LABEL_72;
      }
    }
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    uint64_t v37 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)*v33;
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v38;
      _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,unable to compute Snap", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_64;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      goto LABEL_71;
    }
    goto LABEL_69;
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
  }
  uint64_t v30 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_ERROR, "CLTSP,Unexpected,invalid geometry pointer,processLocationChunk", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    *(_WORD *)double v160 = 0;
    uint64_t v31 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "void CLTripLocationFilter::processLocationChunk(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, NSMutableArray<CLTripSegmentLocation *> * _Nonnull, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>)", "CoreLocation: %s\n", v31);
    if (v31 != buf) {
      free(v31);
    }
  }
}

void sub_190816540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  STACK[0x220] = (unint64_t)&a22;
  sub_1906C6BF0((void ***)&STACK[0x220]);
  STACK[0x220] = a12;
  sub_1906C6BF0((void ***)&STACK[0x220]);
  _Unwind_Resume(a1);
}

BOOL sub_190816610(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64)) {
    return 0;
  }
  if (*(double *)(a1 + 16) <= 0.0) {
    return 0;
  }
  if (!*(void *)a1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 24);
  double v1 = *(double *)(a1 + 32);
  if (fabs(v2) < 0.00003 && fabs(v1) < 0.00003) {
    return 0;
  }
  BOOL v4 = v2 <= 90.0;
  if (v2 < -90.0) {
    BOOL v4 = 0;
  }
  if (v1 > 180.0) {
    BOOL v4 = 0;
  }
  return v1 >= -180.0 && v4;
}

BOOL sub_19081669C(void *a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6, void *a7, void *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v480 = *MEMORY[0x1E4F143B8];
  if (!*a9)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    long long v159 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v159, OS_LOG_TYPE_ERROR, "CLTSP,Unexpected,invalid geometry pointer,makeSegmentsForRouteConstruction", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      *(_WORD *)v473 = 0;
      uint64_t v402 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v402);
      if (v402 != buf) {
        free(v402);
      }
    }
    return 0;
  }
  double v12 = a1;
  uint64_t v13 = a1[5];
  int v433 = a1 + 5;
  uint64_t v14 = a1[6];
  while (v14 != v13)
  {
    v14 -= 24;
    *(void *)uint64_t buf = v14;
    sub_1906C6BF0((void ***)buf);
  }
  v12[6] = v13;
  uint64_t v461 = 0;
  uint64_t v460 = 0;
  long long v459 = xmmword_1908820F0;
  uint64_t v462 = 0x3FF0000000000000;
  long long v463 = 0;
  uint64_t v465 = 0;
  long long v464 = 0;
  uint64_t v418 = v12;
  if (a3 != 1)
  {
    uint64_t v161 = *a9;
    uint64_t v162 = (std::__shared_weak_count *)a9[1];
    if (v162) {
      atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1906DEBEC((uint64_t)&v459, (uint64_t *)a2, a8, v161, v162, a3);
    if (v162) {
      sub_1906BFE48(v162);
    }
    __int16 v163 = (void *)[MEMORY[0x1E4F1CA48] array];
    unint64_t v164 = 0;
    __int16 v165 = 0;
    uint64_t v469 = 0;
    long long v468 = 0;
    double v166 = -1.0;
    unint64_t v470 = 0;
    long long v466 = 0uLL;
    uint64_t v467 = 0;
    long long v451 = 0uLL;
    uint64_t v452 = 0;
    long long v449 = 0uLL;
    uint64_t v450 = 0;
    v448[0] = 0xBFF0000000000000;
    v448[1] = 0;
    double v420 = v163;
    while (1)
    {
      if ([a7 count] <= v164)
      {
        if (![v163 count])
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          uint64_t v380 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
          {
            int v381 = *(char *)(a2 + 23);
            uint64_t v382 = *(void *)a2;
            uint64_t v383 = [a7 count];
            if (v381 >= 0) {
              uint64_t v384 = a2;
            }
            else {
              uint64_t v384 = v382;
            }
            *(_DWORD *)uint64_t buf = 136446466;
            *(void *)&uint8_t buf[4] = v384;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v383;
            _os_log_impl(&dword_1906B8000, v380, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,data not available for segment creation after filtering,id,%{public}s,count,%lu", buf, 0x16u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            int v410 = *(char *)(a2 + 23);
            uint64_t v411 = *(void *)a2;
            uint64_t v412 = [a7 count];
            uint64_t v413 = a2;
            if (v410 < 0) {
              uint64_t v413 = v411;
            }
            *(_DWORD *)v473 = 136446466;
            *(void *)&v473[4] = v413;
            *(_WORD *)&v473[12] = 2048;
            *(void *)&v473[14] = v412;
            v414 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v414);
            if (v414 != buf) {
              free(v414);
            }
          }
          BOOL v160 = 0;
          goto LABEL_468;
        }
        id v302 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v443 = 0u;
        long long v444 = 0u;
        long long v441 = 0u;
        long long v442 = 0u;
        uint64_t v303 = [v163 countByEnumeratingWithState:&v441 objects:v472 count:16];
        if (v303)
        {
          double v304 = 0;
          int v305 = -1;
          uint64_t v306 = *(void *)v442;
          int v307 = -1;
          do
          {
            uint64_t v308 = 0;
            do
            {
              if (*(void *)v442 != v306) {
                objc_enumerationMutation(v163);
              }
              int v309 = *(void **)(*((void *)&v441 + 1) + 8 * v308);
              if (([v309 isGPSLocationType] & 1) == 0)
              {
                if (v305 < 0)
                {
                  int v305 = [v309 mapsRoadClass];
                }
                else
                {
                  if (v307 != -1)
                  {
                    if ([v309 mapsRoadClass] == v305
                      || [v309 mapsRoadClass] != v307)
                    {
                      [v302 addObject:v304];
                      double v304 = 0;
                    }
                    else
                    {
                      double v304 = 0;
                      if ([v309 mapsRoadClass] == v307) {
                        int v305 = v307;
                      }
                    }
                  }
                  if ([v309 mapsRoadClass] == v305)
                  {
                    int v307 = -1;
                  }
                  else
                  {
                    int v307 = [v309 mapsRoadClass];
                    double v304 = v309;
                  }
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                  }
                  BOOL v310 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
                  {
                    objc_msgSend((id)objc_msgSend(v309, "timestamp"), "timeIntervalSinceReferenceDate");
                    uint64_t v312 = v311;
                    int v313 = [v309 mapsRoadClass];
                    *(_DWORD *)uint64_t buf = 134349824;
                    *(void *)&uint8_t buf[4] = v312;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&unsigned char buf[14] = v313;
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = v305;
                    *(_WORD *)&unsigned char buf[24] = 1026;
                    *(_DWORD *)&buf[26] = v307;
                    _os_log_impl(&dword_1906B8000, v310, OS_LOG_TYPE_INFO, "CLTSP,WiFiFiltering,%{public}.2lf,locFRC,%{public}d,currentFRC,%{public}d,outlierFRC,%{public}d", buf, 0x1Eu);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                    }
                    objc_msgSend((id)objc_msgSend(v309, "timestamp"), "timeIntervalSinceReferenceDate");
                    uint64_t v315 = v314;
                    int v316 = [v309 mapsRoadClass];
                    *(_DWORD *)v473 = 134349824;
                    *(void *)&v473[4] = v315;
                    *(_WORD *)&v473[12] = 1026;
                    *(_DWORD *)&v473[14] = v316;
                    *(_WORD *)&v473[18] = 1026;
                    *(_DWORD *)&v473[20] = v305;
                    *(_WORD *)&v473[24] = 1026;
                    *(_DWORD *)&v473[26] = v307;
                    v317 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v317);
                    if (v317 != buf) {
                      free(v317);
                    }
                  }
                }
              }
              ++v308;
            }
            while (v303 != v308);
            uint64_t v318 = [v163 countByEnumeratingWithState:&v441 objects:v472 count:16];
            uint64_t v303 = v318;
          }
          while (v318);
        }
        long long v439 = 0u;
        long long v440 = 0u;
        long long v437 = 0u;
        long long v438 = 0u;
        uint64_t v319 = [v302 countByEnumeratingWithState:&v437 objects:v471 count:16];
        if (v319)
        {
          uint64_t v320 = *(void *)v438;
          do
          {
            uint64_t v321 = 0;
            do
            {
              if (*(void *)v438 != v320) {
                objc_enumerationMutation(v302);
              }
              uint64_t v322 = *(void **)(*((void *)&v437 + 1) + 8 * v321);
              [v163 removeObject:v322];
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              double v323 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
              {
                objc_msgSend((id)objc_msgSend(v322, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v325 = v324;
                int v326 = [v322 mapsRoadClass];
                *(_DWORD *)uint64_t buf = 134349312;
                *(void *)&uint8_t buf[4] = v325;
                *(_WORD *)&unsigned char buf[12] = 1026;
                *(_DWORD *)&unsigned char buf[14] = v326;
                _os_log_impl(&dword_1906B8000, v323, OS_LOG_TYPE_INFO, "CLTSP,WiFiFiltering,erased,%{public}.2lf,locFRC,%{public}d", buf, 0x12u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                }
                objc_msgSend((id)objc_msgSend(v322, "timestamp"), "timeIntervalSinceReferenceDate");
                uint64_t v328 = v327;
                int v329 = [v322 mapsRoadClass];
                *(_DWORD *)v473 = 134349312;
                *(void *)&v473[4] = v328;
                *(_WORD *)&v473[12] = 1026;
                *(_DWORD *)&v473[14] = v329;
                float v330 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v330);
                if (v330 != buf) {
                  free(v330);
                }
              }
              ++v321;
            }
            while (v319 != v321);
            uint64_t v331 = [v302 countByEnumeratingWithState:&v437 objects:v471 count:16];
            uint64_t v319 = v331;
          }
          while (v331);
        }
        v332 = (void *)[MEMORY[0x1E4F1CA48] array];
        unint64_t v333 = 0;
        unint64_t v334 = 0;
        uint64_t v335 = v418;
        while (2)
        {
          if ([v163 count] <= v333)
          {
            uint64_t v361 = v418[6];
            if (v418[5] != v361)
            {
              uint64_t v363 = *(void *)(v361 - 24);
              uint64_t v362 = *(void *)(v361 - 16);
              if (v363 != v362)
              {
                uint64_t v364 = *(void *)(v362 - 16);
                if (v364)
                {
                  uint64_t v365 = v463;
                  uint64_t v366 = v464;
                  if (v463 != v464)
                  {
                    double v367 = *(double *)(v364 + 16);
                    do
                    {
                      memset(buf, 0, 24);
                      int v368 = *v365;
                      uint64_t v369 = v365[1];
                      if (*v365 != v369)
                      {
                        do
                        {
                          if (*(void *)v368 && *(double *)(*(void *)v368 + 16) > v367 + 1.0) {
                            sub_190745090((uint64_t *)buf, v368);
                          }
                          ++v368;
                        }
                        while (v368 != v369);
                        if (*(void *)buf != *(void *)&buf[8])
                        {
                          uint64_t v370 = *(void *)(*(void *)&buf[8] - 16);
                          if (v370)
                          {
                            double v367 = *(double *)(v370 + 16);
                            unint64_t v371 = v418[6];
                            if (v371 >= v418[7])
                            {
                              uint64_t v372 = sub_1907ED92C(v433, (void **)buf);
                            }
                            else
                            {
                              sub_1907ED8D8((uint64_t)v433, (void **)buf);
                              uint64_t v372 = v371 + 24;
                            }
                            v418[6] = v372;
                          }
                        }
                      }
                      *(void *)v473 = buf;
                      sub_1906C6BF0((void ***)v473);
                      v365 += 3;
                    }
                    while (v365 != v366);
                  }
                }
              }
            }
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            v373 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v374 = a2;
              }
              else {
                uint64_t v374 = *(void *)a2;
              }
              uint64_t v375 = [v420 count];
              uint64_t v376 = [a7 count];
              unint64_t v377 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v418[6] - v418[5]) >> 3);
              int v378 = *(_DWORD *)(*a9 + 116);
              int v379 = *(_DWORD *)(*a9 + 152);
              *(_DWORD *)uint64_t buf = 136447490;
              *(void *)&uint8_t buf[4] = v374;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(void *)&unsigned char buf[14] = v375;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(void *)&unsigned char buf[24] = v376;
              *(_WORD *)&unsigned char buf[32] = 2050;
              *(void *)&buf[34] = v377;
              *(_WORD *)&buf[42] = 1026;
              *(_DWORD *)&buf[44] = v378;
              *(_WORD *)&uint8_t buf[48] = 1026;
              *(_DWORD *)&buf[50] = v379;
              _os_log_impl(&dword_1906B8000, v373, OS_LOG_TYPE_INFO, "CLTSP,MI,makeSegmentsForRouteConstruction,id,%{public}s,filteredCount,%{public}lu,inputCount,%lu,segments,%{public}lu,mapsAPICalls,%{public}d,geometry,%{public}d", buf, 0x36u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v403 = a2;
              }
              else {
                uint64_t v403 = *(void *)a2;
              }
              uint64_t v404 = [v420 count];
              uint64_t v405 = [a7 count];
              unint64_t v406 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v418[6] - v418[5]) >> 3);
              int v407 = *(_DWORD *)(*a9 + 116);
              int v408 = *(_DWORD *)(*a9 + 152);
              *(_DWORD *)v473 = 136447490;
              *(void *)&v473[4] = v403;
              *(_WORD *)&v473[12] = 2050;
              *(void *)&v473[14] = v404;
              *(_WORD *)&v473[22] = 2048;
              *(void *)&v473[24] = v405;
              *(_WORD *)&v473[32] = 2050;
              *(void *)&v473[34] = v406;
              *(_WORD *)&v473[42] = 1026;
              *(_DWORD *)&v473[44] = v407;
              *(_WORD *)&v473[48] = 1026;
              *(_DWORD *)&v473[50] = v408;
              uint64_t v409 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v409);
              if (v409 != buf) {
                free(v409);
              }
              uint64_t v335 = v418;
            }
            BOOL v160 = v335[5] != v335[6];
LABEL_468:
            *(void *)uint64_t buf = &v449;
            sub_1906C6BF0((void ***)buf);
            *(void *)uint64_t buf = &v451;
            sub_1906C6BF0((void ***)buf);
            *(void *)uint64_t buf = &v466;
            sub_1906C6BF0((void ***)buf);
            *(void *)uint64_t buf = &v468;
            sub_1906C6BF0((void ***)buf);
            goto LABEL_492;
          }
          unint64_t v336 = (void *)[v163 objectAtIndexedSubscript:v333];
          v337 = v336;
          if (!v336)
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            uint64_t v340 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl(&dword_1906B8000, v340, OS_LOG_TYPE_ERROR, "CLTSP,CLTripLocationFilter,makeSegmentsForRouteConstruction,loc is nil", buf, 2u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              *(_WORD *)v473 = 0;
              uint64_t v341 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v341);
              if (v341 != buf) {
                free(v341);
              }
            }
            goto LABEL_428;
          }
          if (!v334)
          {
            [v332 addObject:v336];
            unint64_t v334 = v337;
            goto LABEL_428;
          }
          if ([v336 timestamp] && objc_msgSend(v334, "timestamp"))
          {
            objc_msgSend((id)objc_msgSend(v337, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v334, "timestamp"));
            int v339 = 0;
            if (v338 >= 0.0 && v338 < 3.0)
            {
              [v332 addObject:v337];
              if (v333 == [v163 count] - 1)
              {
                int v339 = 1;
                goto LABEL_396;
              }
LABEL_427:
              unint64_t v334 = v337;
              goto LABEL_428;
            }
          }
          else
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            double v342 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
            {
              uint64_t v343 = [v337 timestamp];
              uint64_t v344 = [v334 timestamp];
              *(_DWORD *)uint64_t buf = 67240448;
              *(_DWORD *)&uint8_t buf[4] = v343 == 0;
              *(_WORD *)&uint8_t buf[8] = 1026;
              *(_DWORD *)&buf[10] = v344 == 0;
              _os_log_impl(&dword_1906B8000, v342, OS_LOG_TYPE_ERROR, "CLTSP,CLTripLocationFilter,makeSegmentsForRouteConstruction,timeSincePrev cannot be set,loc.timestamp is nil,%{public}d,prevLocation.timestamp is nil,%{public}d", buf, 0xEu);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              uint64_t v358 = [v337 timestamp];
              uint64_t v359 = [v334 timestamp];
              *(_DWORD *)v473 = 67240448;
              *(_DWORD *)&v473[4] = v358 == 0;
              *(_WORD *)&v473[8] = 1026;
              *(_DWORD *)&v473[10] = v359 == 0;
              v360 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v360);
              if (v360 != buf) {
                free(v360);
              }
            }
            int v339 = 0;
          }
LABEL_396:
          if (![v332 count])
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            unsigned int v347 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
            {
              int v348 = *(char *)(a2 + 23);
              uint64_t v349 = *(void *)a2;
              uint64_t v350 = [a7 count];
              *(_DWORD *)uint64_t buf = 136446466;
              if (v348 >= 0) {
                uint64_t v351 = a2;
              }
              else {
                uint64_t v351 = v349;
              }
              *(void *)&uint8_t buf[4] = v351;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(void *)&unsigned char buf[14] = v350;
              _os_log_impl(&dword_1906B8000, v347, OS_LOG_TYPE_ERROR, "CLTSP,MI,unexpected,location chunk empty,id,%{public}s,sparseCount,%{public}lu", buf, 0x16u);
              __int16 v163 = v420;
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              int v352 = *(char *)(a2 + 23);
              uint64_t v353 = *(void *)a2;
              uint64_t v354 = [a7 count];
              *(_DWORD *)v473 = 136446466;
              if (v352 >= 0) {
                uint64_t v355 = a2;
              }
              else {
                uint64_t v355 = v353;
              }
              *(void *)&v473[4] = v355;
              *(_WORD *)&v473[12] = 2050;
              *(void *)&v473[14] = v354;
              v356 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v356);
              __int16 v163 = v420;
              if (v356 != buf) {
                free(v356);
              }
            }
            goto LABEL_427;
          }
          uint64_t v345 = (std::__shared_weak_count *)a9[1];
          v436[0] = *a9;
          v436[1] = (uint64_t)v345;
          if (v345) {
            atomic_fetch_add_explicit(&v345->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_19081540C(v418, (uint64_t *)a2, a5, v332, (uint64_t **)&v449, &v463, v436);
          if (v345) {
            sub_1906BFE48(v345);
          }
          [v332 removeAllObjects];
          [v332 addObject:v337];
          int v346 = [v337 isGPSLocationType];
          if ((v339 | v346 ^ 1))
          {
            if (v346) {
              goto LABEL_427;
            }
          }
          else if (v333 != [v163 count] - 1)
          {
            goto LABEL_427;
          }
          unint64_t v334 = v337;
          if ([v332 count])
          {
            v357 = (std::__shared_weak_count *)a9[1];
            v435[0] = *a9;
            v435[1] = (uint64_t)v357;
            if (v357) {
              atomic_fetch_add_explicit(&v357->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_19081540C(v418, (uint64_t *)a2, a5, v332, (uint64_t **)&v449, &v463, v435);
            if (v357) {
              sub_1906BFE48(v357);
            }
            [v332 removeAllObjects];
            unint64_t v334 = 0;
          }
LABEL_428:
          ++v333;
          continue;
        }
      }
      BOOL v167 = !v164 || [a7 count] - 1 == v164;
      uint64_t v447 = 0;
      uint64_t v447 = (void *)[a7 objectAtIndexedSubscript:v164];
      if (v447) {
        break;
      }
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v168 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = v164;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = a3;
        _os_log_impl(&dword_1906B8000, v168, OS_LOG_TYPE_ERROR, "CLTSP,MI,loc is unexpectedly nil,i,%{public}d,mode,%{public}d", buf, 0xEu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        *(_DWORD *)v473 = 67240448;
        *(_DWORD *)&v473[4] = v164;
        *(_WORD *)&v473[8] = 1026;
        *(_DWORD *)&v473[10] = a3;
        __int16 v169 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v169);
        if (v169 != buf) {
          free(v169);
        }
      }
LABEL_307:
      ++v164;
    }
    if (v165)
    {
      if (v164) {
        goto LABEL_219;
      }
    }
    else
    {
      __int16 v165 = (void *)[a7 objectAtIndexedSubscript:v164];
      if (v164) {
        goto LABEL_219;
      }
    }
    [v447 course];
    double v171 = v170;
    [v447 courseAccuracy];
    double v173 = v172;
    memset(v473, 0, 64);
    uint64_t v174 = [a7 countByEnumeratingWithState:v473 objects:buf count:16];
    if (!v174) {
      goto LABEL_218;
    }
    __int16 v175 = 0;
    uint64_t v176 = **(void **)&v473[16];
    do
    {
      for (uint64_t i = 0; i != v174; ++i)
      {
        if (**(void **)&v473[16] != v176) {
          objc_enumerationMutation(a7);
        }
        int v178 = *(void **)(*(void *)&v473[8] + 8 * i);
        if (!v175 && (__int16 v175 = *(void **)(*(void *)&v473[8] + 8 * i), ([v175 isCourseValid] & 1) != 0)
          || [v178 isGPSLocationType]
          && [v178 isCourseValid]
          && ([v178 courseAccuracy], v179 < 135.0))
        {
          [v178 course];
          double v171 = v195;
          [v178 courseAccuracy];
          double v173 = v196;
          goto LABEL_218;
        }
        [v175 latitude];
        double v181 = v180;
        [v175 longitude];
        double v183 = v182;
        [v178 latitude];
        double v185 = v184;
        [v178 longitude];
        double v187 = sub_1906DA618((double *)v12, v181, v183, v185, v186, 0.0);
        if (v187 > 10.0)
        {
          [v175 latitude];
          double v189 = v188;
          [v175 longitude];
          double v191 = v190;
          [v178 latitude];
          double v193 = v192;
          [v178 longitude];
          double v171 = sub_190839D14((double *)v12, v189, v191, v193, v194);
          double v173 = 90.0;
          if (v187 > 75.0)
          {
            double v173 = 90.0;
            goto LABEL_218;
          }
        }
      }
      uint64_t v174 = [a7 countByEnumeratingWithState:v473 objects:buf count:16];
    }
    while (v174);
LABEL_218:
    [v447 updateCourse:v171 andCourseAccuracy:v173];
LABEL_219:
    sub_1907A2044(&v447, &v446);
    if ((sub_1907E9D74((uint64_t)v448, a7, v164, 1.5, 45.0, 25.0) & 1) == 0
      || (unsigned int v197 = *(_DWORD *)(v446 + 88), v197 > 0xD))
    {
LABEL_305:
      if (*((void *)&v446 + 1)) {
        sub_1906BFE48(*((std::__shared_weak_count **)&v446 + 1));
      }
      goto LABEL_307;
    }
    int v198 = 1 << v197;
    if ((v198 & 0x20A) == 0)
    {
      if ((v198 & 0x2810) != 0)
      {
        if (v167)
        {
          if ([v447 isCourseValid])
          {
            [v447 course];
            double v166 = v199;
          }
        }
        else
        {
          [v447 latitude];
          double v202 = v201;
          [v447 longitude];
          double v204 = v203;
          [v165 latitude];
          double v206 = v205;
          [v165 longitude];
          double v208 = sub_1906DA618((double *)v12, v202, v204, v206, v207, 0.0);
          if (v208 > 75.0 || v208 > 50.0 && ([v447 horizontalAccuracy], v232 <= 30.0))
          {
            [v165 latitude];
            double v210 = v209;
            [v165 longitude];
            double v212 = v211;
            [v447 latitude];
            double v214 = v213;
            [v447 longitude];
            double v166 = sub_190839D14((double *)v12, v210, v212, v214, v215);
            __int16 v165 = v447;
          }
        }
        uint64_t v233 = v446;
        *(double *)(v446 + 32) = v166;
        double v234 = *(double *)(v233 + 40);
        if (v166 >= 0.0)
        {
          double v235 = *(double *)(v233 + 24);
          if (v234 < v235) {
            double v234 = v235 + 10.0;
          }
          if (v234 > 179.0) {
            double v234 = 135.0;
          }
        }
        *(double *)(v233 + 40) = fmax(v234, 60.0);
        sub_1907A19B0((uint64_t *)&v468, &v446);
        long long v445 = 0uLL;
        double v236 = *(double *)(v446 + 32);
        if (v236 >= 0.0)
        {
          double v237 = *(double *)(v446 + 40);
          if (v237 > 0.0
            && !sub_190742774(*a9, (uint64_t *)&v445, *(_DWORD *)(v446 + 96), *(double *)v446, *(double *)(v446 + 8), *(double *)(v446 + 16), v236, *(double *)(v446 + 24), v237))
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            long long v238 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v239 = a2;
              }
              else {
                uint64_t v239 = *(void *)a2;
              }
              uint64_t v240 = *(void *)v446;
              uint64_t v241 = *(void *)(v446 + 8);
              uint64_t v242 = *(void *)(v446 + 16);
              uint64_t v243 = *(void *)(v446 + 24);
              uint64_t v244 = *(void *)(v446 + 32);
              uint64_t v245 = *(void *)(v446 + 40);
              int v246 = *(_DWORD *)(v446 + 88);
              *(_DWORD *)uint64_t buf = 136448259;
              *(void *)&uint8_t buf[4] = v239;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(void *)&unsigned char buf[14] = v240;
              *(_WORD *)&unsigned char buf[22] = 2049;
              *(void *)&unsigned char buf[24] = v241;
              *(_WORD *)&unsigned char buf[32] = 2049;
              *(void *)&buf[34] = v242;
              *(_WORD *)&buf[42] = 2049;
              *(void *)&buf[44] = v244;
              *(_WORD *)&buf[52] = 2049;
              *(void *)&buf[54] = v243;
              *(_WORD *)&buf[62] = 2049;
              *(void *)&unsigned char buf[64] = v245;
              *(_WORD *)&buf[72] = 1026;
              *(_DWORD *)&buf[74] = a3;
              *(_WORD *)&buf[78] = 1026;
              *(_DWORD *)&buf[80] = v246;
              _os_log_impl(&dword_1906B8000, v238, OS_LOG_TYPE_DEBUG, "CLTSP,MI,unable to snap WiFi or LOI location,id,%{public}s,time,%{public}.3lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,hunc,%{private}.3lf,cunc,%{private}.3lf,mode,%{public}d,type,%{public}d", buf, 0x54u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v293 = a2;
              }
              else {
                uint64_t v293 = *(void *)a2;
              }
              uint64_t v294 = *(void *)v446;
              uint64_t v295 = *(void *)(v446 + 8);
              uint64_t v296 = *(void *)(v446 + 16);
              uint64_t v297 = *(void *)(v446 + 24);
              uint64_t v298 = *(void *)(v446 + 32);
              uint64_t v299 = *(void *)(v446 + 40);
              int v300 = *(_DWORD *)(v446 + 88);
              *(_DWORD *)v473 = 136448259;
              *(void *)&v473[4] = v293;
              *(_WORD *)&v473[12] = 2050;
              *(void *)&v473[14] = v294;
              *(_WORD *)&v473[22] = 2049;
              *(void *)&v473[24] = v295;
              *(_WORD *)&v473[32] = 2049;
              *(void *)&v473[34] = v296;
              *(_WORD *)&v473[42] = 2049;
              *(void *)&v473[44] = v298;
              *(_WORD *)&v473[52] = 2049;
              *(void *)&v473[54] = v297;
              *(_WORD *)&v473[62] = 2049;
              *(void *)&v473[64] = v299;
              *(_WORD *)&v473[72] = 1026;
              *(_DWORD *)&v473[74] = a3;
              *(_WORD *)&v473[78] = 1026;
              *(_DWORD *)&v473[80] = v300;
              double v301 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v301);
              if (v301 != buf) {
                free(v301);
              }
              double v12 = v418;
              __int16 v163 = v420;
            }
          }
          uint64_t v247 = v445;
          if ((void)v445)
          {
            uint64_t v248 = v446;
            *(void *)(v445 + 104) = *(void *)(v446 + 48);
            *(_DWORD *)(v247 + 120) = *(_DWORD *)(v248 + 88);
            if (*(void *)v247)
            {
              sub_190745090((uint64_t *)&v451, &v445);
              uint64_t v249 = *(void *)v445;
              BOOL v250 = (*(_DWORD *)(*(void *)v445 + 20) < 3u || (*(_DWORD *)(v249 + 24) - 1) <= 1)
                  && *(_DWORD *)(v249 + 76) != 2;
              int v251 = *(_DWORD *)(v446 + 88) == 13 || v167;
            }
            else
            {
              BOOL v250 = 0;
              int v251 = 0;
            }
            if ((sub_1907E9D74((uint64_t)v448, a7, v164, 60.0, 45.0, 25.0) | v251) == 1
              && ((double v252 = *(double *)(v446 + 24), v252 < 50.0)
               || (v252 < 150.0 ? (BOOL v253 = v250) : (BOOL v253 = 0), (v253 | v251) == 1))
              && ((v251 & 1) != 0
               || (uint64_t v256 = *(void *)v445) != 0
               && (*(_DWORD *)(v256 + 20) & 0xFFFFFFFE) != 8
               && (*(_DWORD *)(v256 + 24) & 0xFFFFFFFE) != 6
               && (*(double *)(v445 + 88) < 45.0 ? (int v257 = 1) : (int v257 = v250), v257 == 1)))
            {
              sub_1907A19B0((uint64_t *)&v466, &v446);
              sub_190745090((uint64_t *)&v449, &v445);
              [v447 updateCourse:*(double *)(v446 + 32) andCourseAccuracy:*(double *)(v446 + 40)];
              [v420 addObject:v447];
              uint64_t v254 = (void *)[v420 lastObject];
              if (*(void *)v445) {
                uint64_t v255 = *(unsigned int *)(*(void *)v445 + 20);
              }
              else {
                uint64_t v255 = 0xFFFFFFFFLL;
              }
              [v254 setMapsRoadClass:v255];
              int v258 = 1;
            }
            else
            {
              int v258 = 0;
            }
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            double v259 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v260 = a2;
              }
              else {
                uint64_t v260 = *(void *)a2;
              }
              uint64_t v261 = *(void *)v446;
              uint64_t v262 = *(void *)(v446 + 8);
              uint64_t v263 = *(void *)(v445 + 24);
              uint64_t v264 = *(void *)(v445 + 32);
              uint64_t v265 = *(void *)(v446 + 16);
              uint64_t v266 = *(void *)(v446 + 24);
              uint64_t v268 = *(void *)(v446 + 32);
              uint64_t v267 = *(void *)(v446 + 40);
              uint64_t v269 = *(void *)(v445 + 40);
              uint64_t v270 = *(void *)(v445 + 48);
              uint64_t v271 = *(void *)(v445 + 56);
              uint64_t v273 = *(void *)(v445 + 72);
              uint64_t v272 = *(void *)(v445 + 80);
              uint64_t v274 = *(void *)(v445 + 88);
              int v275 = *(_DWORD *)(v446 + 88);
              *(_DWORD *)uint64_t buf = 67244547;
              *(_DWORD *)&uint8_t buf[4] = v258;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = v260;
              *(_WORD *)&buf[18] = 2050;
              *(void *)&buf[20] = v261;
              *(_WORD *)&buf[28] = 2049;
              *(void *)&buf[30] = v262;
              *(_WORD *)&buf[38] = 2049;
              *(void *)&buf[40] = v265;
              *(_WORD *)&uint8_t buf[48] = 2049;
              *(void *)&buf[50] = v268;
              *(_WORD *)&buf[58] = 2049;
              *(void *)&buf[60] = v263;
              *(_WORD *)&std::string buf[68] = 2049;
              *(void *)&buf[70] = v264;
              *(_WORD *)&buf[78] = 2049;
              *(void *)&buf[80] = v269;
              *(_WORD *)&buf[88] = 2049;
              *(void *)&buf[90] = v266;
              *(_WORD *)&buf[98] = 2049;
              *(void *)&buf[100] = v267;
              *(_WORD *)&buf[108] = 2050;
              *(void *)&buf[110] = v270;
              *(_WORD *)&buf[118] = 2050;
              *(void *)&buf[120] = v271;
              *(_WORD *)&buf[128] = 2050;
              *(void *)&buf[130] = v272;
              *(_WORD *)&buf[138] = 2050;
              *(void *)&buf[140] = v273;
              *(_WORD *)&buf[148] = 2050;
              *(void *)&buf[150] = v274;
              *(_WORD *)&buf[158] = 1026;
              *(_DWORD *)&buf[160] = a3;
              *(_WORD *)int v478 = 1026;
              *(_DWORD *)&v478[2] = v275;
              _os_log_impl(&dword_1906B8000, v259, OS_LOG_TYPE_DEBUG, "CLTSP,MI,wifiLocation,filtered,%{public}d,id,%{public}s,time,%{public}.3lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{private}.3lf,hunc,%{private}.3lf,cunc,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,mode,%{public}d,type,%{public}d", buf, 0xAAu);
            }
            __int16 v163 = v420;
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v276 = a2;
              }
              else {
                uint64_t v276 = *(void *)a2;
              }
              uint64_t v277 = *(void *)v446;
              uint64_t v278 = *(void *)(v446 + 8);
              uint64_t v279 = *(void *)(v445 + 24);
              uint64_t v280 = *(void *)(v445 + 32);
              uint64_t v281 = *(void *)(v446 + 16);
              uint64_t v282 = *(void *)(v446 + 24);
              uint64_t v284 = *(void *)(v446 + 32);
              uint64_t v283 = *(void *)(v446 + 40);
              uint64_t v285 = *(void *)(v445 + 40);
              uint64_t v286 = *(void *)(v445 + 48);
              uint64_t v287 = *(void *)(v445 + 56);
              uint64_t v289 = *(void *)(v445 + 72);
              uint64_t v288 = *(void *)(v445 + 80);
              uint64_t v290 = *(void *)(v445 + 88);
              int v291 = *(_DWORD *)(v446 + 88);
              *(_DWORD *)v473 = 67244547;
              *(_DWORD *)&v473[4] = v258;
              *(_WORD *)&v473[8] = 2082;
              *(void *)&v473[10] = v276;
              *(_WORD *)&v473[18] = 2050;
              *(void *)&v473[20] = v277;
              *(_WORD *)&v473[28] = 2049;
              *(void *)&v473[30] = v278;
              *(_WORD *)&v473[38] = 2049;
              *(void *)&v473[40] = v281;
              *(_WORD *)&v473[48] = 2049;
              *(void *)&v473[50] = v284;
              *(_WORD *)&v473[58] = 2049;
              *(void *)&v473[60] = v279;
              *(_WORD *)&v473[68] = 2049;
              *(void *)&v473[70] = v280;
              *(_WORD *)&v473[78] = 2049;
              *(void *)&v473[80] = v285;
              *(_WORD *)&v473[88] = 2049;
              *(void *)&v473[90] = v282;
              *(_WORD *)&v473[98] = 2049;
              *(void *)&v473[100] = v283;
              *(_WORD *)&v473[108] = 2050;
              *(void *)&v473[110] = v286;
              *(_WORD *)&v473[118] = 2050;
              *(void *)&v473[120] = v287;
              *(_WORD *)&v473[128] = 2050;
              *(void *)&v473[130] = v288;
              *(_WORD *)&v473[138] = 2050;
              *(void *)&v473[140] = v289;
              *(_WORD *)&v473[148] = 2050;
              *(void *)&v473[150] = v290;
              *(_WORD *)&v473[158] = 1026;
              *(_DWORD *)&v473[160] = a3;
              *(_WORD *)v474 = 1026;
              *(_DWORD *)&v474[2] = v291;
              uint64_t v292 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v292);
              if (v292 != buf) {
                free(v292);
              }
            }
          }
        }
        if (*((void *)&v445 + 1)) {
          sub_1906BFE48(*((std::__shared_weak_count **)&v445 + 1));
        }
      }
      goto LABEL_305;
    }
    if ([v447 isGoodGPSFixWithGoodCourse])
    {
      if ((([v447 isOriginalLocationType] | v167) & 1) == 0)
      {
LABEL_228:
        int v200 = 0;
LABEL_233:
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        int v216 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v217 = a2;
          }
          else {
            uint64_t v217 = *(void *)a2;
          }
          uint64_t v218 = *(void *)v446;
          uint64_t v219 = *(void *)(v446 + 8);
          uint64_t v220 = *(void *)(v446 + 16);
          uint64_t v221 = *(void *)(v446 + 24);
          uint64_t v223 = *(void *)(v446 + 32);
          uint64_t v222 = *(void *)(v446 + 40);
          *(_DWORD *)uint64_t buf = 67242243;
          *(_DWORD *)&uint8_t buf[4] = v200;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = v217;
          *(_WORD *)&buf[18] = 2050;
          *(void *)&buf[20] = v218;
          *(_WORD *)&buf[28] = 2049;
          *(void *)&buf[30] = v219;
          *(_WORD *)&buf[38] = 2049;
          *(void *)&buf[40] = v220;
          *(_WORD *)&uint8_t buf[48] = 2049;
          *(void *)&buf[50] = v223;
          *(_WORD *)&buf[58] = 2049;
          *(void *)&buf[60] = v221;
          *(_WORD *)&std::string buf[68] = 2049;
          *(void *)&buf[70] = v222;
          *(_WORD *)&buf[78] = 1026;
          *(_DWORD *)&buf[80] = a3;
          _os_log_impl(&dword_1906B8000, v216, OS_LOG_TYPE_DEBUG, "CLTSP,MI,gpsLocation,filtered,%{public}d,id,%{public}s,time,%{public}.3lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,hunc,%{private}.3lf,cunc,%{private}.3lf,mode,%{public}d", buf, 0x54u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v224 = a2;
          }
          else {
            uint64_t v224 = *(void *)a2;
          }
          uint64_t v225 = *(void *)v446;
          uint64_t v226 = *(void *)(v446 + 8);
          uint64_t v227 = *(void *)(v446 + 16);
          uint64_t v228 = *(void *)(v446 + 24);
          uint64_t v230 = *(void *)(v446 + 32);
          uint64_t v229 = *(void *)(v446 + 40);
          *(_DWORD *)v473 = 67242243;
          *(_DWORD *)&v473[4] = v200;
          *(_WORD *)&v473[8] = 2082;
          *(void *)&v473[10] = v224;
          *(_WORD *)&v473[18] = 2050;
          *(void *)&v473[20] = v225;
          *(_WORD *)&v473[28] = 2049;
          *(void *)&v473[30] = v226;
          *(_WORD *)&v473[38] = 2049;
          *(void *)&v473[40] = v227;
          *(_WORD *)&v473[48] = 2049;
          *(void *)&v473[50] = v230;
          *(_WORD *)&v473[58] = 2049;
          *(void *)&v473[60] = v228;
          *(_WORD *)&v473[68] = 2049;
          *(void *)&v473[70] = v229;
          *(_WORD *)&v473[78] = 1026;
          *(_DWORD *)&v473[80] = a3;
          uint64_t v231 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v231);
          if (v231 != buf) {
            free(v231);
          }
        }
        goto LABEL_305;
      }
    }
    else if (!v167)
    {
      goto LABEL_228;
    }
    __int16 v165 = v447;
    double v166 = *(double *)(v446 + 32);
    [v163 addObject:v447];
    int v200 = 1;
    goto LABEL_233;
  }
  int v415 = a6;
  double v15 = a10;
  uint64_t v16 = *a10;
  if (*a10)
  {
    unsigned int v17 = (void *)[a7 mutableCopy];
    BOOL v18 = (std::__shared_weak_count *)a9[1];
    uint64_t v457 = *a9;
    long long v458 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1907E7E40(v16, (const std::string *)a2, 1, a4, v17, &v457);
    if (v458) {
      sub_1906BFE48(v458);
    }
    long long v455 = 0u;
    long long v456 = 0u;
    long long v453 = 0u;
    long long v454 = 0u;
    uint64_t v19 = [a7 countByEnumeratingWithState:&v453 objects:v476 count:16];
    if (v19)
    {
      int v20 = 0;
      uint64_t v416 = (uint64_t)(v12 + 7);
      uint64_t v21 = *(void *)v454;
      uint64_t v419 = *(void *)v454;
      do
      {
        uint64_t v22 = 0;
        uint64_t v429 = v19;
        do
        {
          if (*(void *)v454 != v21) {
            objc_enumerationMutation(a7);
          }
          uint64_t v23 = *(void **)(*((void *)&v453 + 1) + 8 * v22);
          if (v23)
          {
            if (v23 == (void *)[a7 objectAtIndexedSubscript:0])
            {
              uint64_t v24 = *v15;
              objc_msgSend((id)objc_msgSend(v23, "timestamp"), "timeIntervalSinceReferenceDate");
              sub_1907ECA18(v24, &v451, v25);
              if ((void)v451)
              {
                uint64_t v469 = 0;
                long long v468 = 0;
                unint64_t v470 = 0;
                sub_190745090((uint64_t *)&v468, &v451);
                unint64_t v26 = v12[6];
                if (v26 >= v12[7])
                {
                  uint64_t v27 = sub_1907ED92C(v433, &v468);
                }
                else
                {
                  sub_1907ED8D8((uint64_t)v433, &v468);
                  uint64_t v27 = v26 + 24;
                }
                v12[6] = v27;
                objc_msgSend((id)objc_msgSend((id)objc_msgSend(a8, "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
                double v31 = v30;
                while (1)
                {
                  double v32 = *(double *)(v451 + 16);
                  if (v32 <= v31)
                  {
LABEL_76:
                    *(void *)uint64_t buf = &v468;
                    sub_1906C6BF0((void ***)buf);
                    uint64_t v19 = v429;
                    uint64_t v21 = v419;
                    goto LABEL_77;
                  }
                  sub_1907ECA18(*v15, &v449, v32);
                  uint64_t v33 = v449;
                  if ((void)v449) {
                    break;
                  }
LABEL_68:
                  if (*((void *)&v449 + 1)) {
                    sub_1906BFE48(*((std::__shared_weak_count **)&v449 + 1));
                  }
                  if (!v33) {
                    goto LABEL_76;
                  }
                }
                long long v466 = 0uLL;
                uint64_t v467 = 0;
                sub_190745090((uint64_t *)&v466, &v449);
                uint64_t v35 = (uint64_t **)v12[5];
                unint64_t v34 = v12[6];
                unint64_t v36 = v12[7];
                if (v34 < v36)
                {
                  if (v35 == (uint64_t **)v34)
                  {
                    sub_1907ED8D8((uint64_t)v433, (void **)&v466);
                  }
                  else
                  {
                    sub_1907EDFB8((uint64_t)v433, (void *)v12[5], v34, (uint64_t)(v35 + 3));
                    uint64_t v37 = (uint64_t **)&v466;
                    if (v35 <= (uint64_t **)&v466) {
                      uint64_t v37 = (uint64_t **)&v466 + 3 * (v12[6] > (unint64_t)&v466);
                    }
                    if (v35 != v37) {
                      sub_1907EDC6C((uint64_t)v35, *v37, v37[1], ((char *)v37[1] - (char *)*v37) >> 4);
                    }
                  }
                  goto LABEL_58;
                }
                unint64_t v38 = 1 - 0x5555555555555555 * ((uint64_t)(v34 - (void)v35) >> 3);
                if (v38 > 0xAAAAAAAAAAAAAAALL) {
                  sub_190718FD4();
                }
                unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)v35) >> 3);
                if (2 * v39 > v38) {
                  unint64_t v38 = 2 * v39;
                }
                if (v39 >= 0x555555555555555) {
                  unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v40 = v38;
                }
                *(void *)&v473[32] = v416;
                if (v40)
                {
                  uint64_t v41 = sub_1907180DC(v416, v40);
                  *(void *)v473 = v41;
                  *(void *)&v473[8] = v41;
                  *(void *)&v473[16] = v41;
                  *(void *)&v473[24] = &v41[3 * v42];
                  if (!v42)
                  {
LABEL_51:
                    *(void *)&unsigned char buf[32] = v416;
                    double v43 = sub_1907180DC(v416, 1uLL);
                    uint64_t v45 = *(void *)&v473[8];
                    if (*(void *)&v473[16] == *(void *)&v473[8])
                    {
                      int64x2_t v48 = vdupq_n_s64(*(unint64_t *)&v473[8]);
                      uint64_t v46 = v43;
                    }
                    else
                    {
                      uint64_t v46 = (void *)((char *)v43 + *(void *)&v473[16] - *(void *)&v473[8]);
                      double v47 = v43;
                      do
                      {
                        *double v47 = 0;
                        v47[1] = 0;
                        v47[2] = 0;
                        *(_OWORD *)double v47 = *(_OWORD *)v45;
                        v47[2] = *(void *)(v45 + 16);
                        *(void *)uint64_t v45 = 0;
                        *(void *)(v45 + 8) = 0;
                        *(void *)(v45 + 16) = 0;
                        v47 += 3;
                        v45 += 24;
                      }
                      while (v47 != v46);
                      int64x2_t v48 = *(int64x2_t *)&v473[8];
                    }
                    uint64_t v49 = *(void *)v473;
                    uint64_t v50 = *(void *)&v473[24];
                    *(void *)v473 = v43;
                    *(void *)&v473[8] = v43;
                    *(int64x2_t *)&uint8_t buf[8] = v48;
                    *(void *)&v473[16] = v46;
                    *(void *)&v473[24] = &v43[3 * v44];
                    *(void *)uint64_t buf = v49;
                    *(void *)&unsigned char buf[24] = v50;
                    sub_1907EDBE4((void **)buf);
                    uint64_t v41 = *(void **)&v473[16];
                  }
                  *uint64_t v41 = 0;
                  v41[1] = 0;
                  v41[2] = 0;
                  sub_1907ED058(v41, (void *)v466, *((void **)&v466 + 1), (uint64_t)(*((void *)&v466 + 1) - v466) >> 4);
                  *(void *)&v473[16] += 24;
                  sub_1907EE038(v433, v473, v35);
                  sub_1907EDBE4((void **)v473);
LABEL_58:
                  long long v51 = v449;
                  if (*((void *)&v449 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v449 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  double v52 = (std::__shared_weak_count *)*((void *)&v451 + 1);
                  long long v451 = v51;
                  if (v52) {
                    sub_1906BFE48(v52);
                  }
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                  }
                  double v53 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v54 = *(void *)(v451 + 16);
                    *(_DWORD *)uint64_t buf = 134349312;
                    *(double *)&uint8_t buf[4] = v31;
                    *(_WORD *)&unsigned char buf[12] = 2050;
                    *(void *)&unsigned char buf[14] = v54;
                    _os_log_impl(&dword_1906B8000, v53, OS_LOG_TYPE_DEBUG, "CLTSP,makeSegmentsForRouteConstruction,prior snap added,firstUpsampledTime,%{public}.1lf,snapTime,%{public}.1lf", buf, 0x16u);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                    }
                    uint64_t v55 = *(void *)(v451 + 16);
                    *(_DWORD *)v473 = 134349312;
                    *(double *)&v473[4] = v31;
                    *(_WORD *)&v473[12] = 2050;
                    *(void *)&v473[14] = v55;
                    double v56 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v56);
                    if (v56 != buf) {
                      free(v56);
                    }
                  }
                  *(void *)uint64_t buf = &v466;
                  sub_1906C6BF0((void ***)buf);
                  goto LABEL_68;
                }
                memset(v473, 0, 32);
                goto LABEL_51;
              }
LABEL_77:
              if (*((void *)&v451 + 1)) {
                sub_1906BFE48(*((std::__shared_weak_count **)&v451 + 1));
              }
            }
            if (([v23 isGPSLocationType] & 1) != 0
              || ([v23 isWiFiLocationType] & 1) != 0
              || [v23 isLoiLocationType])
            {
              uint64_t v57 = *v15;
              objc_msgSend((id)objc_msgSend(v23, "timestamp"), "timeIntervalSinceReferenceDate");
              sub_1907EC924(v57, (uint64_t *)&v466, v58);
              if (!v20
                || v23 == (void *)[a7 lastObject]
                || ([v23 distanceFromLocation:v20], v59 >= 10.0))
              {
                if ((void)v466)
                {
                  uint64_t v469 = 0;
                  long long v468 = 0;
                  unint64_t v470 = 0;
                  sub_190745090((uint64_t *)&v468, &v466);
                  unint64_t v60 = v12[6];
                  if (v60 >= v12[7])
                  {
                    uint64_t v61 = sub_1907ED92C(v433, &v468);
                  }
                  else
                  {
                    sub_1907ED8D8((uint64_t)v433, &v468);
                    uint64_t v61 = v60 + 24;
                  }
                  v12[6] = v61;
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                  }
                  uint64_t v62 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                  {
                    loga = v62;
                    if ([v23 isGPSLocationType]) {
                      uint64_t v63 = "gps";
                    }
                    else {
                      uint64_t v63 = "wifi";
                    }
                    if (*(char *)(a2 + 23) >= 0) {
                      uint64_t v64 = a2;
                    }
                    else {
                      uint64_t v64 = *(void *)a2;
                    }
                    uint64_t v422 = v64;
                    int v424 = v63;
                    objc_msgSend((id)objc_msgSend(v23, "timestamp"), "timeIntervalSinceReferenceDate");
                    uint64_t v66 = v65;
                    [v23 latitude];
                    uint64_t v68 = v67;
                    [v23 longitude];
                    uint64_t v70 = v69;
                    [v23 course];
                    uint64_t v72 = v71;
                    uint64_t v73 = *(void *)(v466 + 24);
                    uint64_t v74 = *(void *)(v466 + 32);
                    uint64_t v75 = *(void *)(v466 + 40);
                    [v23 horizontalAccuracy];
                    uint64_t v77 = v76;
                    [v23 courseAccuracy];
                    uint64_t v79 = v78;
                    uint64_t v81 = *(void *)(v466 + 48);
                    uint64_t v80 = *(void *)(v466 + 56);
                    uint64_t v83 = *(void *)(v466 + 72);
                    uint64_t v82 = *(void *)(v466 + 80);
                    uint64_t v84 = *(void *)(v466 + 88);
                    int v85 = [v23 locType];
                    *(_DWORD *)uint64_t buf = 136450563;
                    *(void *)&uint8_t buf[4] = v424;
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    *(void *)&unsigned char buf[14] = v422;
                    *(_WORD *)&unsigned char buf[22] = 2050;
                    *(void *)&unsigned char buf[24] = v66;
                    *(_WORD *)&unsigned char buf[32] = 2049;
                    *(void *)&buf[34] = v68;
                    *(_WORD *)&buf[42] = 2049;
                    *(void *)&buf[44] = v70;
                    *(_WORD *)&buf[52] = 2049;
                    *(void *)&buf[54] = v72;
                    *(_WORD *)&buf[62] = 2049;
                    *(void *)&unsigned char buf[64] = v73;
                    *(_WORD *)&buf[72] = 2049;
                    *(void *)&buf[74] = v74;
                    *(_WORD *)&buf[82] = 2049;
                    *(void *)&buf[84] = v75;
                    *(_WORD *)&buf[92] = 2049;
                    *(void *)&buf[94] = v77;
                    *(_WORD *)&buf[102] = 2049;
                    *(void *)&buf[104] = v79;
                    *(_WORD *)&buf[112] = 2050;
                    *(void *)&buf[114] = v81;
                    *(_WORD *)&buf[122] = 2050;
                    *(void *)&buf[124] = v80;
                    *(_WORD *)&buf[132] = 2050;
                    *(void *)&buf[134] = v82;
                    *(_WORD *)&buf[142] = 2050;
                    *(void *)&buf[144] = v83;
                    *(_WORD *)&buf[152] = 2050;
                    *(void *)&buf[154] = v84;
                    *(_WORD *)&buf[162] = 1026;
                    *(_DWORD *)int v478 = 1;
                    *(_WORD *)&v478[4] = 1026;
                    int v479 = v85;
                    _os_log_impl(&dword_1906B8000, loga, OS_LOG_TYPE_DEBUG, "CLTSP,MI,%{public}sLocation,filtered,1,id,%{public}s,time,%{public}.3lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{private}.3lf,hunc,%{private}.3lf,cunc,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,mode,%{public}d,type,%{public}d", buf, 0xAEu);
                    double v12 = v418;
                    uint64_t v21 = v419;
                    double v15 = a10;
                    uint64_t v19 = v429;
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                    }
                    if ([v23 isGPSLocationType]) {
                      double v86 = "gps";
                    }
                    else {
                      double v86 = "wifi";
                    }
                    if (*(char *)(a2 + 23) >= 0) {
                      uint64_t v87 = a2;
                    }
                    else {
                      uint64_t v87 = *(void *)a2;
                    }
                    uint64_t v423 = v87;
                    v425 = v86;
                    objc_msgSend((id)objc_msgSend(v23, "timestamp"), "timeIntervalSinceReferenceDate");
                    uint64_t v89 = v88;
                    [v23 latitude];
                    uint64_t v91 = v90;
                    [v23 longitude];
                    uint64_t v93 = v92;
                    [v23 course];
                    uint64_t v95 = v94;
                    uint64_t v96 = *(void *)(v466 + 24);
                    uint64_t v97 = *(void *)(v466 + 32);
                    uint64_t v98 = *(void *)(v466 + 40);
                    [v23 horizontalAccuracy];
                    uint64_t v100 = v99;
                    [v23 courseAccuracy];
                    uint64_t v102 = v101;
                    uint64_t v104 = *(void *)(v466 + 48);
                    uint64_t v103 = *(void *)(v466 + 56);
                    uint64_t v106 = *(void *)(v466 + 72);
                    uint64_t v105 = *(void *)(v466 + 80);
                    uint64_t v107 = *(void *)(v466 + 88);
                    int v108 = [v23 locType];
                    *(_DWORD *)v473 = 136450563;
                    *(void *)&v473[4] = v425;
                    *(_WORD *)&v473[12] = 2082;
                    *(void *)&v473[14] = v423;
                    *(_WORD *)&v473[22] = 2050;
                    *(void *)&v473[24] = v89;
                    *(_WORD *)&v473[32] = 2049;
                    *(void *)&v473[34] = v91;
                    *(_WORD *)&v473[42] = 2049;
                    *(void *)&v473[44] = v93;
                    *(_WORD *)&v473[52] = 2049;
                    *(void *)&v473[54] = v95;
                    *(_WORD *)&v473[62] = 2049;
                    *(void *)&v473[64] = v96;
                    *(_WORD *)&v473[72] = 2049;
                    *(void *)&v473[74] = v97;
                    *(_WORD *)&v473[82] = 2049;
                    *(void *)&v473[84] = v98;
                    *(_WORD *)&v473[92] = 2049;
                    *(void *)&v473[94] = v100;
                    *(_WORD *)&v473[102] = 2049;
                    *(void *)&v473[104] = v102;
                    *(_WORD *)&v473[112] = 2050;
                    *(void *)&v473[114] = v104;
                    *(_WORD *)&v473[122] = 2050;
                    *(void *)&v473[124] = v103;
                    *(_WORD *)&v473[132] = 2050;
                    *(void *)&v473[134] = v105;
                    *(_WORD *)&v473[142] = 2050;
                    *(void *)&v473[144] = v106;
                    *(_WORD *)&v473[152] = 2050;
                    *(void *)&v473[154] = v107;
                    *(_WORD *)&v473[162] = 1026;
                    *(_DWORD *)v474 = 1;
                    *(_WORD *)&v474[4] = 1026;
                    int v475 = v108;
                    uint64_t v109 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v109);
                    double v12 = v418;
                    uint64_t v21 = v419;
                    double v15 = a10;
                    uint64_t v19 = v429;
                    if (v109 != buf) {
                      free(v109);
                    }
                  }
                  *(void *)uint64_t buf = &v468;
                  sub_1906C6BF0((void ***)buf);
                  int v20 = v23;
                }
              }
              if (*((void *)&v466 + 1)) {
                sub_1906BFE48(*((std::__shared_weak_count **)&v466 + 1));
              }
            }
          }
          else
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            uint64_t v28 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_ERROR, "CLTSP,MI,makeSegmentsForRouteConstruction,loc is unexpectedly nil", buf, 2u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              *(_WORD *)v473 = 0;
              uint64_t v29 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripLocationFilter::makeSegmentsForRouteConstruction(const std::string &, const CLTripSegmentModeOfTransport, const BOOL, const BOOL, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, std::shared_ptr<CLGeoMapFeatureRoadGeometryBuffer>, std::shared_ptr<CLTripSegmentRouteBuilder>)", "CoreLocation: %s\n", v29);
              if (v29 != buf) {
                free(v29);
              }
            }
          }
          ++v22;
        }
        while (v22 != v19);
        uint64_t v110 = [a7 countByEnumeratingWithState:&v453 objects:v476 count:16];
        uint64_t v19 = v110;
      }
      while (v110);
    }
  }
  if (v415)
  {
    uint64_t v111 = *a9;
    int v112 = (std::__shared_weak_count *)a9[1];
    if (v112) {
      atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1906DEBEC((uint64_t)&v459, (uint64_t *)a2, a8, v111, v112, 1);
    if (v112) {
      sub_1906BFE48(v112);
    }
  }
  uint64_t v113 = (char *)v12[5];
  uint64_t v114 = (char *)v12[6];
  if (v463 == v464) {
    goto LABEL_491;
  }
  uint64_t v469 = 0;
  long long v468 = 0;
  unint64_t v470 = 0;
  uint64_t v115 = v114 - v113;
  if (v114 == v113)
  {
    long long v158 = 0;
    uint64_t v116 = 0;
    goto LABEL_470;
  }
  os_log_t logb = (os_log_t)(v114 - v113);
  uint64_t v116 = 0;
  double v117 = -1.0;
  int v430 = v114;
  do
  {
    uint64_t v118 = *(void **)v113;
    uint64_t v119 = (void *)*((void *)v113 + 1);
    if (*(void **)v113 == v119) {
      goto LABEL_170;
    }
    if (v117 >= 0.0 || (uint64_t v120 = *(v119 - 2)) == 0)
    {
      uint64_t v431 = v113;
      uint64_t v121 = v463;
      if (v463 != v464)
      {
        int v122 = v464;
        double v123 = *(double *)(*v118 + 16);
        do
        {
          long long v466 = 0uLL;
          uint64_t v467 = 0;
          uint64_t v125 = *v121;
          double v124 = v121[1];
          if (*v121 != v124)
          {
            do
            {
              uint64_t v126 = *(void *)v125;
              if (*(void *)v125 && *(void *)v126)
              {
                double v127 = *(double *)(v126 + 16);
                if (v127 > v117 && v127 < v123)
                {
                  if (qword_1E929F6D0 != -1) {
                    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                  }
                  uint64_t v129 = qword_1E929F6D8;
                  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                  {
                    if (*(char *)(a2 + 23) >= 0) {
                      uint64_t v130 = a2;
                    }
                    else {
                      uint64_t v130 = *(void *)a2;
                    }
                    uint64_t v131 = *(void *)(*(void *)v125 + 16);
                    uint64_t v132 = *(void *)(*(void *)v125 + 24);
                    uint64_t v133 = *(void *)(*(void *)v125 + 32);
                    uint64_t v134 = *(void *)(*(void *)v125 + 40);
                    uint64_t v135 = *(void *)(*(void *)v125 + 48);
                    uint64_t v136 = *(void *)(*(void *)v125 + 56);
                    uint64_t v138 = *(void *)(*(void *)v125 + 72);
                    uint64_t v137 = *(void *)(*(void *)v125 + 80);
                    uint64_t v139 = *(void *)(*(void *)v125 + 88);
                    int v140 = *(unsigned __int8 *)(*(void *)v125 + 64);
                    int v141 = *(_DWORD *)(**(void **)v125 + 20);
                    *(_DWORD *)uint64_t buf = 136449027;
                    *(void *)&uint8_t buf[4] = v130;
                    *(_WORD *)&unsigned char buf[12] = 2050;
                    *(void *)&unsigned char buf[14] = v131;
                    *(_WORD *)&unsigned char buf[22] = 2049;
                    *(void *)&unsigned char buf[24] = v132;
                    *(_WORD *)&unsigned char buf[32] = 2049;
                    *(void *)&buf[34] = v133;
                    *(_WORD *)&buf[42] = 2049;
                    *(void *)&buf[44] = v134;
                    *(_WORD *)&buf[52] = 2050;
                    *(void *)&buf[54] = v135;
                    *(_WORD *)&buf[62] = 2050;
                    *(void *)&unsigned char buf[64] = v136;
                    *(_WORD *)&buf[72] = 2050;
                    *(void *)&buf[74] = v137;
                    *(_WORD *)&buf[82] = 2050;
                    *(void *)&buf[84] = v138;
                    *(_WORD *)&buf[92] = 2050;
                    *(void *)&buf[94] = v139;
                    *(_WORD *)&buf[102] = 1026;
                    *(_DWORD *)&buf[104] = v140;
                    *(_WORD *)&buf[108] = 1026;
                    *(_DWORD *)&buf[110] = v141;
                    _os_log_impl(&dword_1906B8000, v129, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snappedIILocation,id,%{public}s,time,%{public}.3lf,snapLL,%{private}.7lf,%{private}.7lf,rawCourse,%{private}.3lf,projection,%{public}.8lf,score,%{public}.12lf,dE,%{public}.2lf,dN,%{public}.2lf,dCourse,%{public}.2lf,valid,%{public}d,frc,%{public}d", buf, 0x72u);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                    }
                    if (*(char *)(a2 + 23) >= 0) {
                      uint64_t v142 = a2;
                    }
                    else {
                      uint64_t v142 = *(void *)a2;
                    }
                    uint64_t v143 = *(void *)(*(void *)v125 + 16);
                    uint64_t v144 = *(void *)(*(void *)v125 + 24);
                    uint64_t v145 = *(void *)(*(void *)v125 + 32);
                    uint64_t v146 = *(void *)(*(void *)v125 + 40);
                    uint64_t v147 = *(void *)(*(void *)v125 + 48);
                    uint64_t v148 = *(void *)(*(void *)v125 + 56);
                    uint64_t v150 = *(void *)(*(void *)v125 + 72);
                    uint64_t v149 = *(void *)(*(void *)v125 + 80);
                    uint64_t v151 = *(void *)(*(void *)v125 + 88);
                    int v152 = *(unsigned __int8 *)(*(void *)v125 + 64);
                    int v153 = *(_DWORD *)(**(void **)v125 + 20);
                    *(_DWORD *)v473 = 136449027;
                    *(void *)&v473[4] = v142;
                    *(_WORD *)&v473[12] = 2050;
                    *(void *)&v473[14] = v143;
                    *(_WORD *)&v473[22] = 2049;
                    *(void *)&v473[24] = v144;
                    *(_WORD *)&v473[32] = 2049;
                    *(void *)&v473[34] = v145;
                    *(_WORD *)&v473[42] = 2049;
                    *(void *)&v473[44] = v146;
                    *(_WORD *)&v473[52] = 2050;
                    *(void *)&v473[54] = v147;
                    *(_WORD *)&v473[62] = 2050;
                    *(void *)&v473[64] = v148;
                    *(_WORD *)&v473[72] = 2050;
                    *(void *)&v473[74] = v149;
                    *(_WORD *)&v473[82] = 2050;
                    *(void *)&v473[84] = v150;
                    *(_WORD *)&v473[92] = 2050;
                    *(void *)&v473[94] = v151;
                    *(_WORD *)&v473[102] = 1026;
                    *(_DWORD *)&v473[104] = v152;
                    *(_WORD *)&v473[108] = 1026;
                    *(_DWORD *)&v473[110] = v153;
                    double v154 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "void CLTripLocationFilter::insertUpsampledFilteredSnap(const std::string &, const std::vector<std::vector<CLGeoMapSnapDataPtr>> &)", "CoreLocation: %s\n", v154);
                    if (v154 != buf) {
                      free(v154);
                    }
                  }
                  sub_190745090((uint64_t *)&v466, v125);
                }
              }
              ++v125;
            }
            while (v125 != v124);
            if ((void)v466 != *((void *)&v466 + 1))
            {
              double v117 = *(double *)(*(void *)(*((void *)&v466 + 1) - 16) + 16);
              uint64_t v155 = v469;
              if ((unint64_t)v469 >= v470)
              {
                uint64_t v156 = sub_1907ED92C((uint64_t *)&v468, (void **)&v466);
              }
              else
              {
                *uint64_t v469 = 0;
                v155[1] = 0;
                v155[2] = 0;
                sub_1907ED058(v155, (void *)v466, *((void **)&v466 + 1), (uint64_t)(*((void *)&v466 + 1) - v466) >> 4);
                uint64_t v156 = (uint64_t)(v155 + 3);
              }
              uint64_t v469 = (void *)v156;
            }
          }
          *(void *)uint64_t buf = &v466;
          sub_1906C6BF0((void ***)buf);
          v121 += 3;
        }
        while (v121 != v122);
        uint64_t v116 = v469;
        uint64_t v114 = v430;
      }
      uint64_t v113 = v431;
      if ((unint64_t)v116 < v470) {
        goto LABEL_165;
      }
      uint64_t v157 = sub_1907ED92C((uint64_t *)&v468, (void **)v431);
LABEL_168:
      uint64_t v116 = (void *)v157;
      goto LABEL_169;
    }
    double v117 = *(double *)(v120 + 16);
    if ((unint64_t)v116 >= v470)
    {
      uint64_t v157 = sub_1907ED92C((uint64_t *)&v468, (void **)v113);
      goto LABEL_168;
    }
LABEL_165:
    void *v116 = 0;
    v116[1] = 0;
    v116[2] = 0;
    sub_1907ED058(v116, *(void **)v113, *((void **)v113 + 1), (uint64_t)(*((void *)v113 + 1) - *(void *)v113) >> 4);
    v116 += 3;
LABEL_169:
    uint64_t v469 = v116;
LABEL_170:
    v113 += 24;
  }
  while (v113 != v114);
  long long v158 = v468;
  uint64_t v115 = (uint64_t)logb;
LABEL_470:
  if (v433 != (uint64_t *)&v468)
  {
    unint64_t v385 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t **)v116 - v158);
    if (v385 > 0xAAAAAAAAAAAAAAABLL * (v115 >> 3))
    {
      uint64_t v387 = (uint64_t)(v418 + 7);
      uint64_t v386 = v418[7];
      uint64_t v388 = v418[5];
      if (0xAAAAAAAAAAAAAAABLL * ((v386 - v388) >> 3) >= v385)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v418[6] - v388) >> 3) < v385)
        {
          v397 = &v158[(v418[6] - v388) >> 3];
          sub_1907EE298((uint64_t)v473, v158, v397, v418[5]);
          uint64_t v396 = sub_1907EE0EC(v387, v397, (void **)v116, (void *)v418[6]);
          goto LABEL_488;
        }
        sub_1907EE298((uint64_t)v473, v158, (uint64_t **)v116, v418[5]);
        long long v398 = v400;
        v401 = (void *)v418[6];
        while (v401 != v398)
        {
          v401 -= 3;
          *(void *)uint64_t buf = v401;
          sub_1906C6BF0((void ***)buf);
        }
      }
      else
      {
        if (v388)
        {
          uint64_t v389 = v418[6];
          v390 = (void *)v418[5];
          if (v389 != v388)
          {
            do
            {
              v389 -= 24;
              *(void *)uint64_t buf = v389;
              sub_1906C6BF0((void ***)buf);
            }
            while (v389 != v388);
            v390 = (void *)*v433;
          }
          v418[6] = v388;
          operator delete(v390);
          uint64_t v386 = 0;
          *int v433 = 0;
          v433[1] = 0;
          v433[2] = 0;
        }
        if (v385 > 0xAAAAAAAAAAAAAAALL) {
          goto LABEL_516;
        }
        unint64_t v391 = 0xAAAAAAAAAAAAAAABLL * (v386 >> 3);
        uint64_t v392 = 2 * v391;
        if (2 * v391 <= v385) {
          uint64_t v392 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t **)v116 - v158);
        }
        unint64_t v393 = v391 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v392;
        if (v393 > 0xAAAAAAAAAAAAAAALL) {
LABEL_516:
        }
          sub_190718FD4();
        double v394 = sub_1907180DC(v387, v393);
        v418[5] = v394;
        v418[6] = v394;
        v418[7] = &v394[3 * v395];
        uint64_t v396 = sub_1907EE0EC(v387, v158, (void **)v116, v394);
LABEL_488:
        long long v398 = v396;
      }
      v418[6] = v398;
    }
  }
  *(void *)uint64_t buf = &v468;
  sub_19074DEC0((void ***)buf);
  uint64_t v113 = (char *)v418[5];
  uint64_t v114 = (char *)v418[6];
LABEL_491:
  BOOL v160 = v113 != v114;
LABEL_492:
  *(void *)uint64_t buf = &v463;
  sub_19074DEC0((void ***)buf);
  return v160;
}

void sub_190819CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void ****a63)
{
  a63 = &a65;
  sub_1906C6BF0((void ***)&a63);
  a65 = &a68;
  sub_1906C6BF0((void ***)&a65);
  a68 = (void **)&STACK[0x280];
  sub_1906C6BF0(&a68);
  STACK[0x280] = (unint64_t)&STACK[0x298];
  sub_1906C6BF0((void ***)&STACK[0x280]);
  STACK[0x298] = a14;
  sub_19074DEC0((void ***)&STACK[0x298]);
  _Unwind_Resume(a1);
}

uint64_t sub_190819FA0(uint64_t a1, uint64_t *a2, void *a3, int a4)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  uint64_t result = [a3 countByEnumeratingWithState:&v94 objects:v174 count:16];
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = *(void *)v95;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v95 != v7) {
          objc_enumerationMutation(a3);
        }
        long double v9 = *(void **)(*((void *)&v94 + 1) + 8 * v8);
        objc_msgSend((id)objc_msgSend(v9, "timestamp"), "timeIntervalSinceReferenceDate");
        double v11 = v10;
        uint64_t v92 = v8;
        for (uint64_t i = *(double ***)(a1 + 48); ; i += 2)
        {
          if (i == *(double ***)(a1 + 56))
          {
            uint64_t v13 = 0;
LABEL_12:
            uint64_t v93 = 0;
            goto LABEL_13;
          }
          uint64_t v13 = *i;
          if (*i)
          {
            if (vabdd_f64(v13[2], v10) < 0.001) {
              break;
            }
          }
        }
        unint64_t v38 = (std::__shared_weak_count *)i[1];
        if (!v38) {
          goto LABEL_12;
        }
        uint64_t v93 = v38;
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_13:
        [v9 latitude];
        uint64_t v87 = v14;
        [v9 longitude];
        uint64_t v86 = v15;
        [v9 course];
        uint64_t v85 = v16;
        [v9 latitude];
        uint64_t v90 = v17;
        [v9 longitude];
        uint64_t v88 = v18;
        [v9 course];
        uint64_t v20 = v19;
        if (v13 && *((unsigned char *)v13 + 64))
        {
          uint64_t v21 = [CLTripSegmentLocation alloc];
          uint64_t v22 = [v9 timestamp];
          double v89 = v13[4];
          double v91 = v13[3];
          [v9 horizontalAccuracy];
          double v24 = v23;
          double v25 = v13[5];
          [v9 courseAccuracy];
          double v27 = v26;
          [v9 speed];
          double v29 = v28;
          [v9 speedAccuracy];
          double v31 = v30;
          [v9 altitude];
          double v33 = v32;
          [v9 altitudeAccuracy];
          uint64_t v35 = -[CLTripSegmentLocation initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:referenceFrame:](v21, "initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:referenceFrame:", v22, [v9 locType], objc_msgSend(v9, "referenceFrame"), v91, v89, v24, v25, v27, v29, v31, v33, v34);
          unint64_t v36 = v35;
          uint64_t v20 = *((void *)v13 + 5);
          uint64_t v88 = *((void *)v13 + 4);
          uint64_t v90 = *((void *)v13 + 3);
          double v37 = *v13;
          if (*(void *)v13)
          {
            uint64_t v84 = *(void *)(*(void *)&v37 + 8);
            [(CLTripSegmentLocation *)v35 setMapsRoadClass:*(unsigned int *)(*(void *)&v37 + 20)];
            [(CLTripSegmentLocation *)v36 setMapsFormOfWay:*(unsigned int *)(*(void *)v13 + 24)];
          }
          else
          {
            uint64_t v84 = 0;
          }
          [v9 rawLatitude];
          double v40 = v39;
          [v9 rawLongitude];
          -[CLTripSegmentLocation setRawLatitude:longitude:referenceFrame:](v36, "setRawLatitude:longitude:referenceFrame:", [v9 rawReferenceFrame], v40, v41);
          if ([v9 isOriginalLocationType]) {
            [(CLTripSegmentLocation *)v36 setLocationReconstructionType:1];
          }
          if ([v9 isInertialIntegrated]) {
            [(CLTripSegmentLocation *)v36 setLocationReconstructionType:2];
          }
          if ([v9 isLinearInterpolated]) {
            [(CLTripSegmentLocation *)v36 setLocationReconstructionType:4];
          }
          [(CLTripSegmentLocation *)v36 setLocationReconstructionType:8];
          [(CLTripSegmentLocation *)v36 setSignalEnvironmentType:*((unsigned int *)v13 + 40)];
          -[CLTripSegmentLocation setStartLocationType:](v36, "setStartLocationType:", [v9 locTypeStart]);
          -[CLTripSegmentLocation setStopLocationType:](v36, "setStopLocationType:", [v9 locTypeStop]);
          [*(id *)(a1 + 40) addObject:v36];
        }
        else
        {
          [*(id *)(a1 + 40) addObject:v9];
          uint64_t v84 = 0;
        }
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        uint64_t v42 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v43 = a1;
          [v9 horizontalAccuracy];
          uint64_t v45 = v44;
          [v9 courseAccuracy];
          uint64_t v47 = v46;
          [v9 speed];
          uint64_t v49 = v48;
          [v9 speedAccuracy];
          uint64_t v51 = v50;
          [v9 altitude];
          uint64_t v53 = v52;
          [v9 altitudeAccuracy];
          uint64_t v55 = v54;
          int v56 = [v9 locType];
          int v57 = *((char *)a2 + 23);
          double v58 = (uint64_t *)*a2;
          int v59 = [v9 reconstructionType];
          *(_DWORD *)uint64_t buf = 134353667;
          unint64_t v60 = a2;
          if (v57 < 0) {
            unint64_t v60 = v58;
          }
          double v137 = v11;
          __int16 v138 = 2049;
          uint64_t v139 = v90;
          __int16 v140 = 2049;
          uint64_t v141 = v88;
          __int16 v142 = 2050;
          uint64_t v143 = v20;
          __int16 v144 = 2049;
          uint64_t v145 = v87;
          __int16 v146 = 2049;
          uint64_t v147 = v86;
          __int16 v148 = 2050;
          uint64_t v149 = v85;
          __int16 v150 = 2050;
          uint64_t v151 = v45;
          __int16 v152 = 2050;
          uint64_t v153 = v47;
          __int16 v154 = 2050;
          uint64_t v155 = v49;
          __int16 v156 = 2050;
          uint64_t v157 = v51;
          __int16 v158 = 2050;
          uint64_t v159 = v53;
          __int16 v160 = 2050;
          uint64_t v161 = v55;
          __int16 v162 = 2049;
          uint64_t v163 = v84;
          __int16 v164 = 1026;
          BOOL v165 = v13 != 0;
          __int16 v166 = 1026;
          int v167 = v56;
          __int16 v168 = 2082;
          __int16 v169 = v60;
          __int16 v170 = 1026;
          int v171 = a4;
          __int16 v172 = 1026;
          int v173 = v59;
          _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snapSolution,time,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf,rawLL,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,hunc,%{public}.2lf,cunc,%{public}.2lf,speed,%{public}.2lf,sunc,%{public}.2lf,alt,%{public}.2lf,vunc,%{public}.2lf,roadID,%{private}lld,snapValid,%{public}d,type,%{public}d,id,%{public}s,mode,%{public}d,reconstructedType,%{public}d", buf, 0xB0u);
          a1 = v43;
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          uint64_t v61 = v6;
          [v9 horizontalAccuracy];
          uint64_t v63 = v62;
          [v9 courseAccuracy];
          uint64_t v65 = v64;
          [v9 speed];
          uint64_t v67 = v66;
          [v9 speedAccuracy];
          uint64_t v69 = v68;
          [v9 altitude];
          uint64_t v71 = v70;
          [v9 altitudeAccuracy];
          uint64_t v73 = v72;
          BOOL v74 = v13 != 0;
          int v75 = [v9 locType];
          int v76 = *((char *)a2 + 23);
          uint64_t v77 = (uint64_t *)*a2;
          int v78 = [v9 reconstructionType];
          int v98 = 134353667;
          uint64_t v79 = a2;
          if (v76 < 0) {
            uint64_t v79 = v77;
          }
          double v99 = v11;
          __int16 v100 = 2049;
          uint64_t v101 = v90;
          __int16 v102 = 2049;
          uint64_t v103 = v88;
          __int16 v104 = 2050;
          uint64_t v105 = v20;
          __int16 v106 = 2049;
          uint64_t v107 = v87;
          __int16 v108 = 2049;
          uint64_t v109 = v86;
          __int16 v110 = 2050;
          uint64_t v111 = v85;
          __int16 v112 = 2050;
          uint64_t v113 = v63;
          __int16 v114 = 2050;
          uint64_t v115 = v65;
          __int16 v116 = 2050;
          uint64_t v117 = v67;
          __int16 v118 = 2050;
          uint64_t v119 = v69;
          __int16 v120 = 2050;
          uint64_t v121 = v71;
          __int16 v122 = 2050;
          uint64_t v123 = v73;
          __int16 v124 = 2049;
          uint64_t v125 = v84;
          __int16 v126 = 1026;
          BOOL v127 = v74;
          __int16 v128 = 1026;
          int v129 = v75;
          __int16 v130 = 2082;
          uint64_t v131 = v79;
          __int16 v132 = 1026;
          int v133 = a4;
          __int16 v134 = 1026;
          int v135 = v78;
          uint64_t v80 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentMapIntegrationBase::updateOutputLocations(const std::string &, NSArray<CLTripSegmentLocation *> * _Nonnull, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v80);
          uint64_t v6 = v61;
          if (v80 != (char *)buf) {
            free(v80);
          }
        }
        if (v93) {
          sub_1906BFE48(v93);
        }
        uint64_t v8 = v92 + 1;
      }
      while (v92 + 1 != v6);
      uint64_t result = [a3 countByEnumeratingWithState:&v94 objects:v174 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_19081A764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    sub_1906BFE48(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19081A7AC(double *a1, uint64_t **a2, uint64_t *a3, uint64_t *a4, double a5, double a6, double a7)
{
  double v7 = a5;
  long double v9 = (uint64_t *)a2;
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  double v10 = *a2;
  double v11 = (uint64_t *)v9[1];
  if (v10 == v11 || a5 > 1.0 || ((v13 = *a3, uint64_t v12 = a3[1], a5 >= 0.0) ? (_ZF = v13 == v12) : (_ZF = 1), _ZF))
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    int v135 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v136 = (unint64_t)(v9[1] - *v9) >> 4;
      unint64_t v137 = (unint64_t)(a3[1] - *a3) >> 4;
      *(_DWORD *)uint64_t buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v136;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v137;
      *(_WORD *)&unsigned char buf[14] = 2050;
      *(double *)&uint8_t buf[16] = v7;
      _os_log_impl(&dword_1906B8000, v135, OS_LOG_TYPE_ERROR, "CLTSP,MI,snapLocationsOnRoads,invalid input,inputLocations,%{public}d,roadVectors,%{public}d,firstSnapProjection,%{public}.3lf", buf, 0x18u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      unint64_t v144 = (unint64_t)(v9[1] - *v9) >> 4;
      unint64_t v145 = (unint64_t)(a3[1] - *a3) >> 4;
      LODWORD(v170) = 67240704;
      DWORD1(v170) = v144;
      WORD4(v170) = 1026;
      *(_DWORD *)((char *)&v170 + 10) = v145;
      HIWORD(v170) = 2050;
      double v171 = v7;
      __int16 v146 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v146);
      if (v146 != buf) {
        free(v146);
      }
    }
    return 0;
  }
  double v171 = 0.0;
  uint64_t v172 = 0;
  long long v170 = xmmword_1908820F0;
  uint64_t v173 = 0x3FF0000000000000;
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  uint64_t v176 = 0;
  if (&v174 != (double ***)v9)
  {
    sub_190820438((uint64_t *)&v174, v10, v11, ((char *)v11 - (char *)v10) >> 4);
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    double v10 = (uint64_t *)*v9;
    double v11 = (uint64_t *)v9[1];
  }
  uint64_t v18 = 1;
  if (v11 == v10) {
    goto LABEL_219;
  }
  uint64_t v157 = a1;
  __int16 v158 = a4;
  unint64_t v19 = 0;
  unint64_t v163 = (unint64_t)(v12 - v13) >> 4;
  double v159 = v7;
  __int16 v160 = v9;
  while (1)
  {
    __int16 v162 = &v10[2 * v19];
    if (*v162)
    {
      if (*v10) {
        break;
      }
    }
LABEL_142:
    ++v19;
    double v10 = (uint64_t *)*v9;
    if (v19 >= (v9[1] - *v9) >> 4)
    {
      uint64_t v18 = 1;
      goto LABEL_219;
    }
  }
  uint64_t v20 = v174;
  double v21 = 0.0;
  for (double i = 0.0; v20 != v175; v20 += 2)
  {
    double v23 = *v20;
    if (*v20)
    {
      if (*v23 > *(double *)*v10 && *v23 <= *(double *)*v162) {
        double i = i + v23[10];
      }
    }
  }
  int v25 = 0;
  double v26 = i * a6;
  double v27 = v7;
  while (1)
  {
    uint64_t v28 = *a3;
    if (v26 <= 0.0) {
      break;
    }
    double v29 = *(uint64_t **)(v28 + 16 * v25);
    uint64_t v31 = *v29;
    double v30 = (std::__shared_weak_count *)v29[1];
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      double v29 = *(uint64_t **)(*a3 + 16 * v25);
    }
    double v32 = sub_1907EF644((uint64_t)v29, 1);
    double v33 = v32;
    if (((a3[1] - *a3) >> 4) - 1 > (unint64_t)v25) {
      double v32 = sub_1907EF644(*(void *)(*a3 + 16 * v25 + 16), 0);
    }
    double v34 = 0.0;
    if (a7 != 0.0)
    {
      double v35 = fmod(v33 + -90.0 + 90.0 - v32 + 180.0, 360.0);
      if (v35 < 0.0) {
        double v35 = v35 + 360.0;
      }
      if (v35 > 180.0) {
        double v35 = v35 + -360.0;
      }
      double v36 = fabs(v35);
      if (v36 > 5.0 && v36 < 180.0) {
        double v34 = a7 / tan(v35 * 0.0174532925 * 0.5);
      }
    }
    if (v31)
    {
      sub_19082373C(v31);
      double v37 = *(double *)(v31 + 40);
      double v38 = 1.0 - v27;
      if (!*(unsigned char *)(*(void *)(*a3 + 16 * v25) + 16)) {
        double v38 = v27;
      }
      double v39 = v37 * v38;
      if (v26 <= v37 * v38 - v34 + 0.000000001)
      {
        int v42 = 12;
        if (!v30) {
          goto LABEL_52;
        }
      }
      else
      {
        uint64_t v40 = v25 + 1;
        if (v25 + 1 >= (int)v163)
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          uint64_t v45 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v46 = *(void *)*v162;
            *(_DWORD *)uint64_t buf = 67240448;
            *(_DWORD *)&uint8_t buf[4] = v163;
            *(_WORD *)&uint8_t buf[8] = 2050;
            *(void *)&buf[10] = v46;
            _os_log_impl(&dword_1906B8000, v45, OS_LOG_TYPE_ERROR, "CLTSP,currentRoadIndex over candidate road size,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            uint64_t v49 = *(void *)*v162;
            *(_DWORD *)long double __y = 67240448;
            *(_DWORD *)&__y[4] = v163;
            *(_WORD *)&__y[8] = 2050;
            *(void *)&__y[10] = v49;
            uint64_t v50 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v50);
            if (v50 != buf) {
              free(v50);
            }
          }
          sub_19082373C(v31);
          int v42 = 0;
          double v21 = v34 / *(double *)(v31 + 40);
          if (*(unsigned char *)(*(void *)(*a3 + 16 * v25) + 16)) {
            double v27 = 1.0 - v21;
          }
          else {
            double v27 = v34 / *(double *)(v31 + 40);
          }
          double v26 = 0.0;
          if (!v30) {
            goto LABEL_52;
          }
        }
        else
        {
          uint64_t v41 = **(void **)(*a3 + 16 * v40);
          sub_19082373C(v41);
          int v42 = 0;
          double v26 = v26 - v39;
          double v21 = v34 / *(double *)(v41 + 40);
          if (*(unsigned char *)(*(void *)(*a3 + 16 * v40) + 16)) {
            double v27 = v34 / *(double *)(v41 + 40);
          }
          else {
            double v27 = 1.0 - v21;
          }
          ++v25;
          if (!v30) {
            goto LABEL_52;
          }
        }
      }
    }
    else
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v43 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v44 = *(void *)*v162;
        *(_DWORD *)uint64_t buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = v163;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(void *)&buf[10] = v44;
        _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_ERROR, "CLTSP,MI,road pointer invalid,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        uint64_t v47 = *(void *)*v162;
        *(_DWORD *)long double __y = 67240448;
        *(_DWORD *)&__y[4] = v163;
        *(_WORD *)&__y[8] = 2050;
        *(void *)&__y[10] = v47;
        uint64_t v48 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v48);
        if (v48 != buf) {
          free(v48);
        }
      }
      int v42 = 1;
      if (!v30) {
        goto LABEL_52;
      }
    }
    sub_1906BFE48(v30);
LABEL_52:
    if (v42)
    {
      if (v42 != 12)
      {
        double v7 = v159;
        long double v9 = v160;
        goto LABEL_141;
      }
      uint64_t v28 = *a3;
      break;
    }
  }
  uint64_t v51 = v25;
  uint64_t v52 = *(uint64_t **)(v28 + 16 * v25);
  uint64_t v53 = *v52;
  long double v9 = v160;
  if (!*v52 || (sub_19082373C(*v52), *(double *)(v53 + 40) == 0.0))
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    __int16 v138 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v139 = *(void *)*v162;
      __int16 v140 = *(uint64_t **)(*a3 + 16 * v51);
      uint64_t v141 = *v140;
      if (*v140)
      {
        sub_19082373C(*v140);
        unint64_t v142 = *(void *)(v141 + 40);
      }
      else
      {
        unint64_t v142 = 0xBFF0000000000000;
      }
      *(_DWORD *)uint64_t buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v163;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = v139;
      *(_WORD *)&buf[18] = 2050;
      *(void *)&buf[20] = v142;
      _os_log_impl(&dword_1906B8000, v138, OS_LOG_TYPE_ERROR, "CLTSP,MI,road pointer invalid or zero length,count,%{public}d,locationTime,%{public}.3lf,roadLength,%{public}.2lf", buf, 0x1Cu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v147 = *(void *)*v162;
      __int16 v148 = *(uint64_t **)(*a3 + 16 * v51);
      uint64_t v149 = *v148;
      if (*v148)
      {
        sub_19082373C(*v148);
        unint64_t v150 = *(void *)(v149 + 40);
      }
      else
      {
        unint64_t v150 = 0xBFF0000000000000;
      }
      *(_DWORD *)long double __y = 67240704;
      *(_DWORD *)&__y[4] = v163;
      *(_WORD *)&__y[8] = 2050;
      *(void *)&__y[10] = v147;
      *(_WORD *)&__y[18] = 2050;
      *(void *)&__y[20] = v150;
      uint64_t v151 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v151);
      if (v151 != buf) {
        free(v151);
      }
    }
    goto LABEL_218;
  }
  uint64_t v54 = 16 * v51;
  uint64_t v55 = **(void **)(*a3 + 16 * v51);
  sub_19082373C(v55);
  double v56 = v21 + v26 / *(double *)(v55 + 40);
  int v57 = (uint64_t **)(*a3 + 16 * v51);
  if (*((unsigned char *)*v57 + 16)) {
    double v58 = v56;
  }
  else {
    double v58 = -v56;
  }
  int v59 = (char *)operator new(0xC0uLL);
  unint64_t v60 = (double *)v59;
  *((void *)v59 + 1) = 0;
  *((void *)v59 + 2) = 0;
  *(void *)int v59 = &unk_1EE0031F0;
  *(_OWORD *)(v59 + 40) = 0u;
  *(_OWORD *)(v59 + 56) = 0u;
  *(_OWORD *)(v59 + 72) = 0u;
  *(_OWORD *)(v59 + 88) = 0u;
  *(_OWORD *)(v59 + 104) = 0u;
  *(_OWORD *)(v59 + 120) = 0u;
  *(_OWORD *)(v59 + 136) = 0u;
  *(_OWORD *)(v59 + 152) = 0u;
  *(_OWORD *)(v59 + 168) = 0u;
  *((void *)v59 + 23) = 0;
  *(_OWORD *)(v59 + 24) = 0u;
  *((void *)v59 + 5) = 0xBFF0000000000000;
  *((void *)v59 + 6) = 0;
  *((void *)v59 + 7) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)v59 + 4) = _Q0;
  v59[89] = 1;
  *((void *)v59 + 12) = 0;
  *((void *)v59 + 13) = 0;
  v59[120] = 0;
  *((void *)v59 + 14) = 0;
  *((void *)v59 + 16) = 0xBFF0000000000000;
  *((_DWORD *)v59 + 46) = 0;
  *(_OWORD *)(v59 + 168) = 0u;
  *(_OWORD *)(v59 + 152) = 0u;
  *(void *)&long long v165 = v59 + 24;
  *((void *)&v165 + 1) = v59;
  uint64_t v65 = *v57;
  uint64_t v66 = **v57;
  uint64_t v67 = (std::__shared_weak_count *)v65[1];
  if (v67) {
    atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v68 = v27 + v58;
  *((void *)v59 + 8) = 0;
  if (!v66)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
    }
    uint64_t v72 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v72, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
    }
    double v70 = 0.0;
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_114;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
    }
    *(_WORD *)long double __y = 0;
    uint64_t v73 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v73);
LABEL_104:
    if (v73 != buf) {
      free(v73);
    }
    goto LABEL_114;
  }
  uint64_t v69 = (*(void *)(v66 + 144) - *(void *)(v66 + 136)) >> 4;
  if ((int)v69 <= 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
    }
    BOOL v74 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v74, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
    }
    double v70 = 0.0;
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_114;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
    }
    *(_WORD *)long double __y = 0;
    uint64_t v73 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v73);
    long double v9 = v160;
    goto LABEL_104;
  }
  double v70 = 0.0;
  if (v69 == 1)
  {
    char v71 = 1;
    goto LABEL_115;
  }
  sub_19082373C(v66);
  uint64_t v75 = (uint64_t)(*(void *)(v66 + 168) - *(void *)(v66 + 160)) >> 3;
  if (v75 != v69 - 1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
    }
    uint64_t v83 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v83, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_198:
        *(_WORD *)long double __y = 0;
        uint64_t v125 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v125);
        goto LABEL_199;
      }
LABEL_202:
      dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
      goto LABEL_198;
    }
LABEL_114:
    char v71 = 0;
LABEL_115:
    double v77 = 0.0;
    goto LABEL_116;
  }
  sub_19082373C(v66);
  if (v68 < 0.000001)
  {
    int v76 = *(double **)(v66 + 136);
    double v77 = *v76;
    double v70 = v76[1];
    double v78 = v76[2];
    double v79 = v76[3];
    *(void *)uint64_t buf = 0;
    *(void *)long double __y = 0;
    uint64_t v80 = v157;
    double v81 = v77;
    double v82 = v70;
    goto LABEL_158;
  }
  if (v68 >= 0.999999)
  {
    uint64_t v105 = (double *)(*(void *)(v66 + 136) + 16 * v75);
    double v77 = *v105;
    double v70 = v105[1];
    double v81 = *(v105 - 2);
    double v82 = *(v105 - 1);
    *(void *)uint64_t buf = 0;
    *(void *)long double __y = 0;
    uint64_t v80 = v157;
    double v78 = v77;
    double v79 = v70;
LABEL_158:
    sub_1906DA778(v80, (double *)buf, (double *)__y, &v166, v81, v82, 0.0, v78, v79, 0.0);
    double v106 = atan2(*(long double *)__y, *(long double *)buf);
    if (v106 < 0.0) {
      double v106 = v106 + 6.28318531;
    }
    double v107 = v106 * 57.2957795;
LABEL_161:
    v60[8] = v107;
    char v71 = 1;
    goto LABEL_116;
  }
  int v98 = *(double **)(v66 + 160);
  double v99 = *(double **)(v66 + 168);
  if (v98 == v99)
  {
LABEL_150:
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
    }
    __int16 v104 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v104, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_198;
      }
      goto LABEL_202;
    }
    goto LABEL_114;
  }
  double v100 = 0.0;
  int v101 = 2;
  uint64_t v102 = 24;
  while (1)
  {
    double v103 = *v98 / *(double *)(v66 + 40);
    if (vabdd_f64(v68, v100 + v103) < 0.000001) {
      break;
    }
    if (v100 + v103 > v68)
    {
      __int16 v118 = (double *)(*(void *)(v66 + 136) + v102);
      double v119 = *(v118 - 2);
      double v120 = *v118;
      double v121 = v119 + 360.0;
      if (v119 >= 0.0) {
        double v121 = *(v118 - 2);
      }
      double v122 = v120 + 360.0;
      if (v120 >= 0.0) {
        double v122 = *v118;
      }
      double v123 = v122 - v121;
      double v156 = *v118;
      if (v123 <= 180.0)
      {
        if (v123 < -180.0) {
          double v123 = v123 + 360.0;
        }
      }
      else
      {
        double v123 = v123 + -360.0;
      }
      double v126 = (v68 - v100) / v103;
      double v154 = *(v118 - 3);
      double v127 = *(v118 - 1);
      double v70 = fmod(v119 + v123 * v126, 360.0);
      if (v70 <= -180.0)
      {
        double v70 = v70 + 360.0;
        double v79 = v156;
      }
      else
      {
        double v79 = v156;
        if (v70 > 180.0) {
          double v70 = v70 + -360.0;
        }
      }
      double v81 = v154;
      double v78 = v127;
      double v77 = v154 + (v127 - v154) * v126;
      *(void *)uint64_t buf = 0;
      *(void *)long double __y = 0;
      uint64_t v80 = v157;
      double v82 = v119;
      goto LABEL_158;
    }
    ++v98;
    v102 += 16;
    ++v101;
    double v100 = v100 + v103;
    if (v98 == v99) {
      goto LABEL_150;
    }
  }
  if (v101 < (int)v69)
  {
    __int16 v108 = (double *)(*(void *)(v66 + 136) + v102);
    double v77 = *(v108 - 1);
    double v70 = *v108;
    double v109 = *(v108 - 3);
    double v110 = *(v108 - 2);
    *(void *)uint64_t buf = 0;
    *(void *)long double __y = 0;
    sub_1906DA778(v157, (double *)buf, (double *)__y, &v166, v109, v110, 0.0, v77, v70, 0.0);
    long double v111 = *(double *)__y;
    long double v112 = *(double *)buf;
    uint64_t v113 = *(void *)(v66 + 136) + v102;
    double v114 = *(double *)(v113 + 8);
    double v115 = *(double *)(v113 + 16);
    *(void *)uint64_t buf = 0;
    *(void *)long double __y = 0;
    sub_1906DA778(v157, (double *)buf, (double *)__y, &v166, v77, v70, 0.0, v114, v115, 0.0);
    long double v153 = *(double *)__y;
    long double v155 = *(double *)buf;
    double v116 = atan2(v111, v112);
    if (v116 < 0.0) {
      double v116 = v116 + 6.28318531;
    }
    double v152 = v116 * 57.2957795;
    double v117 = atan2(v153, v155);
    if (v117 < 0.0) {
      double v117 = v117 + 6.28318531;
    }
    sub_190715278(v152, v117 * 57.2957795);
    goto LABEL_161;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
  }
  __int16 v124 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v124, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
  }
  double v70 = 0.0;
  if (!sub_1906CB57C(115, 0)) {
    goto LABEL_114;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE0066A0);
  }
  *(_WORD *)long double __y = 0;
  uint64_t v125 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n", v125);
LABEL_199:
  if (v125 != buf) {
    free(v125);
  }
  char v71 = 0;
  double v77 = 0.0;
  long double v9 = v160;
LABEL_116:
  if (v67) {
    sub_1906BFE48(v67);
  }
  if (v71)
  {
    uint64_t v84 = *(uint64_t **)(*a3 + v54);
    uint64_t v85 = v165;
    if (!*((unsigned char *)v84 + 16)) {
      *(long double *)(v85 + 40) = fmod(*(double *)(v165 + 40) + 180.0, 360.0);
    }
    double v166 = v77;
    double v164 = v70;
    uint64_t v87 = *v84;
    uint64_t v86 = v84[1];
    if (v86) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v88 = *(std::__shared_weak_count **)(v85 + 8);
    *(void *)uint64_t v85 = v87;
    *(void *)(v85 + 8) = v86;
    if (v88) {
      sub_1906BFE48(v88);
    }
    uint64_t v89 = v165;
    *(unsigned char *)(v165 + 65) = *(unsigned char *)(*(void *)(*a3 + v54) + 16);
    if (a7 != 0.0)
    {
      sub_1908397AC(v157, &v166, &v164, v77, v70, 0.0, *(double *)(v89 + 40), a7);
      double v77 = v166;
      double v70 = v164;
    }
    uint64_t v90 = (void *)*v162;
    *(void *)(v89 + 16) = *(void *)*v162;
    *(double *)(v89 + 24) = v77;
    *(double *)(v89 + 32) = v70;
    *(void *)(v89 + 104) = v90[6];
    *(double *)(v89 + 48) = v68;
    *(unsigned char *)(v89 + 64) = 1;
    *(_DWORD *)(v89 + 120) = *((_DWORD *)v90 + 22);
    *(unsigned char *)(v89 + 96) = *((unsigned char *)v90 + 92);
    *(_DWORD *)(v89 + 160) = *((_DWORD *)v90 + 25);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    double v7 = v159;
    double v91 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v92 = *(void *)(v165 + 16);
      uint64_t v93 = *(void *)(v165 + 24);
      uint64_t v94 = *(void *)(v165 + 32);
      int v95 = *(unsigned __int8 *)(v165 + 64);
      *(_DWORD *)uint64_t buf = 134349825;
      *(void *)&uint8_t buf[4] = v92;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&unsigned char buf[14] = v93;
      *(_WORD *)&unsigned char buf[22] = 2049;
      *(void *)&unsigned char buf[24] = v94;
      __int16 v178 = 1026;
      int v179 = v95;
      _os_log_impl(&dword_1906B8000, v91, OS_LOG_TYPE_DEBUG, "CLTSP,MI,snapLocations,time,%{public}.1lf,snapLL,%{private}.7lf,%{private}.7lf,snapValid,%{public}d", buf, 0x26u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v128 = *(void *)(v165 + 16);
      uint64_t v129 = *(void *)(v165 + 24);
      uint64_t v130 = *(void *)(v165 + 32);
      int v131 = *(unsigned __int8 *)(v165 + 64);
      *(_DWORD *)long double __y = 134349825;
      *(void *)&__y[4] = v128;
      *(_WORD *)&__y[12] = 2049;
      *(void *)&__y[14] = v129;
      *(_WORD *)&__y[22] = 2049;
      *(void *)&__y[24] = v130;
      __int16 v168 = 1026;
      int v169 = v131;
      __int16 v132 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v132);
      if (v132 != buf) {
        free(v132);
      }
    }
    sub_190745090(v158, &v165);
    int v42 = 0;
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    double v7 = v159;
    long long v96 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v97 = *(void *)*v162;
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v163;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = v97;
      _os_log_impl(&dword_1906B8000, v96, OS_LOG_TYPE_ERROR, "CLTSP,MI,interpolateOnRoad,interpolateProjections returned false,count,%{public}d,locationTime,%{public}.3lf", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v133 = *(void *)*v162;
      *(_DWORD *)long double __y = 67240448;
      *(_DWORD *)&__y[4] = v163;
      *(_WORD *)&__y[8] = 2050;
      *(void *)&__y[10] = v133;
      __int16 v134 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegrationBase::snapLocationsOnRoads(const std::vector<CLGeoMapLocationPtr> &, const std::vector<CLRouteRoadPtr> &, const double, std::vector<CLGeoMapSnapDataPtr> &, double, double) const", "CoreLocation: %s\n", v134);
      if (v134 != buf) {
        free(v134);
      }
    }
    int v42 = 1;
  }
  if (*((void *)&v165 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v165 + 1));
  }
LABEL_141:
  if (!v42) {
    goto LABEL_142;
  }
LABEL_218:
  uint64_t v18 = 0;
LABEL_219:
  *(void *)uint64_t buf = &v174;
  sub_1906C6BF0((void ***)buf);
  return v18;
}

void sub_19081C140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void **a35)
{
  a35 = a16;
  sub_1906C6BF0(&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_19081C1D4(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t *a5, void *a6, void *a7)
{
  uint64_t v288 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 136))
  {
    uint64_t v14 = mach_continuous_time();
    double v15 = sub_1907E1770(v14);
    sub_1906D5C70(__p, (char *)objc_msgSend((id)objc_msgSend(a2, "UUIDString"), "UTF8String"));
    if (![a6 count])
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v174 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v175 = [a7 count];
        uint64_t v176 = __p;
        if (v242 < 0) {
          uint64_t v176 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 134349314;
        *(void *)&uint8_t buf[4] = v175;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v176;
        _os_log_impl(&dword_1906B8000, v174, OS_LOG_TYPE_INFO, "CLTSP,MI,integrateWithMapData,empty sparseLocations,upsampledLocations,%{public}lu,id,%{public}s", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        uint64_t v177 = [a7 count];
        __int16 v178 = __p;
        if (v242 < 0) {
          __int16 v178 = (void **)__p[0];
        }
        int v267 = 134349314;
        unint64_t v268 = v177;
        __int16 v269 = 2082;
        *(void *)uint64_t v270 = v178;
        int v179 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v179);
        if (v179 != buf) {
          free(v179);
        }
      }
      goto LABEL_271;
    }
    sub_190740E78(*(void *)(a1 + 136));
    int v16 = *(unsigned __int8 *)(a1 + 152);
    int v17 = *(unsigned __int8 *)(a1 + 153);
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 144);
    v240[0] = *(void *)(a1 + 136);
    v240[1] = (uint64_t)v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *a5;
    uint64_t v20 = (std::__shared_weak_count *)a5[1];
    v239[0] = v19;
    v239[1] = (uint64_t)v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v21 = sub_19081669C((void *)(a1 + 160), (uint64_t)__p, a3, a4, v16 != 0, v17 != 0, a6, a7, v240, v239);
    if (v20) {
      sub_1906BFE48(v20);
    }
    if (v18) {
      sub_1906BFE48(v18);
    }
    if (v21)
    {
      uint64_t v23 = *(void *)(a1 + 200);
      uint64_t v22 = *(void *)(a1 + 208);
      uint64_t v24 = sub_190857D8C();
      *(_DWORD *)(v24 + 72) -= 1431655765 * ((unint64_t)(v22 - v23) >> 3);
      int v25 = *(void **)(*(void *)(a1 + 136) + 88);
      if (v25) {
        [v25 clearRoadTiles];
      }
      if (sub_1907A1874(a1 + 72, a7) && **(void **)(a1 + 112))
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        double v26 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)(a1 + 200);
          uint64_t v27 = *(void *)(a1 + 208);
          uint64_t v29 = [a6 count];
          uint64_t v30 = [a7 count];
          uint64_t v31 = __p;
          *(_DWORD *)uint64_t buf = 134349826;
          if (v242 < 0) {
            uint64_t v31 = (void **)__p[0];
          }
          *(void *)&uint8_t buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3);
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v29;
          *(_WORD *)&unsigned char buf[22] = 2050;
          *(void *)uint64_t v280 = v30;
          *(_WORD *)&v280[8] = 2082;
          *(void *)uint64_t v281 = v31;
          _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,integrateWithMapData,segments,%{public}lu,sparseLocations,%{public}lu,upsampledLocations,%{public}lu,id,%{public}s", buf, 0x2Au);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          uint64_t v219 = *(void *)(a1 + 200);
          uint64_t v218 = *(void *)(a1 + 208);
          uint64_t v220 = [a6 count];
          uint64_t v221 = [a7 count];
          uint64_t v222 = __p;
          int v267 = 134349826;
          if (v242 < 0) {
            uint64_t v222 = (void **)__p[0];
          }
          unint64_t v268 = 0xAAAAAAAAAAAAAAABLL * ((v218 - v219) >> 3);
          __int16 v269 = 2050;
          *(void *)uint64_t v270 = v220;
          *(_WORD *)&v270[8] = 2050;
          *(void *)uint64_t v271 = v221;
          *(_WORD *)&v271[8] = 2082;
          *(void *)uint64_t v272 = v222;
          uint64_t v223 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v223);
          if (v223 != buf) {
            free(v223);
          }
        }
        double v32 = *(void ***)(a1 + 200);
        uint64_t v33 = *(void *)(a1 + 208) - (void)v32;
        if (0xAAAAAAAAAAAAAAABLL * (v33 >> 3) >= 2)
        {
          long long v238 = (uint64_t *)(a1 + 48);
          *(double *)&uint64_t v34 = 250.0;
          unint64_t v35 = 1;
          while (1)
          {
            double v36 = &v32[3 * v35];
            double v37 = v36 - 3;
            double v39 = v36 - 2;
            double v38 = *(v36 - 2);
            if (*(v36 - 3) == v38 || (uint64_t v40 = &v32[3 * v35], v42 = v40[1], v41 = v40 + 1, *v36 == v42))
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              uint64_t v49 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
              {
                uint64_t v50 = ((char *)*v39 - (char *)*v37) >> 4;
                uint64_t v51 = ((char *)v32[3 * v35 + 1] - (char *)*v36) >> 4;
                *(_DWORD *)uint64_t buf = 134349312;
                *(void *)&uint8_t buf[4] = v50;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(void *)&unsigned char buf[14] = v51;
                _os_log_impl(&dword_1906B8000, v49, OS_LOG_TYPE_ERROR, "CLTSP,MI,constructSegment,invalid size,start,%{public}lu,end,%{public}lu", buf, 0x16u);
              }
              if (!sub_1906CB57C(115, 0)) {
                goto LABEL_61;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              uint64_t v52 = ((char *)*v39 - (char *)*v37) >> 4;
              uint64_t v53 = ((char *)v32[3 * v35 + 1] - (char *)*v36) >> 4;
              int v267 = 134349312;
              unint64_t v268 = v52;
              __int16 v269 = 2050;
              *(void *)uint64_t v270 = v53;
              uint64_t v54 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v54);
LABEL_185:
              if (v54 != buf) {
                free(v54);
              }
              goto LABEL_61;
            }
            uint64_t v43 = *(v38 - 2);
            if (!v43 || (uint64_t v44 = **v36) == 0)
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              uint64_t v55 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
              {
                uint64_t v56 = ((char *)*v39 - (char *)*v37) >> 4;
                uint64_t v57 = ((char *)*v41 - (char *)*v36) >> 4;
                *(_DWORD *)uint64_t buf = 134349312;
                *(void *)&uint8_t buf[4] = v56;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(void *)&unsigned char buf[14] = v57;
                _os_log_impl(&dword_1906B8000, v55, OS_LOG_TYPE_ERROR, "CLTSP,MI,constructSegment,null pointers,start,%{public}lu,end,%{public}lu", buf, 0x16u);
              }
              if (!sub_1906CB57C(115, 0))
              {
LABEL_54:
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                }
                double v58 = qword_1E929F6D8;
                if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
                {
                  int v59 = __p;
                  if (v242 < 0) {
                    int v59 = (void **)__p[0];
                  }
                  *(_DWORD *)uint64_t buf = 136446210;
                  *(void *)&uint8_t buf[4] = v59;
                  _os_log_impl(&dword_1906B8000, v58, OS_LOG_TYPE_ERROR, "CLTSP,MI,integrateWithMapDataSparse,errorReported,id,%{public}s", buf, 0xCu);
                }
                if (!sub_1906CB57C(115, 0)) {
                  goto LABEL_61;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                }
                uint64_t v143 = __p;
                if (v242 < 0) {
                  uint64_t v143 = (void **)__p[0];
                }
                int v267 = 136446210;
                unint64_t v268 = (unint64_t)v143;
                uint64_t v54 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v54);
                goto LABEL_185;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              uint64_t v144 = ((char *)*v39 - (char *)*v37) >> 4;
              uint64_t v145 = ((char *)*v41 - (char *)*v36) >> 4;
              int v267 = 134349312;
              unint64_t v268 = v144;
              __int16 v269 = 2050;
              *(void *)uint64_t v270 = v145;
              double v77 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v77);
LABEL_190:
              if (v77 != buf) {
                free(v77);
              }
              goto LABEL_54;
            }
            double v45 = *(double *)(v43 + 16);
            double v46 = *(double *)(v44 + 16);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            uint64_t v47 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)uint64_t buf = 134349312;
              *(double *)&uint8_t buf[4] = v45;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(double *)&unsigned char buf[14] = v46;
              _os_log_impl(&dword_1906B8000, v47, OS_LOG_TYPE_INFO, "CLTSP,MI,constructSegment,start,%{public}.3lf,end,%{public}.3lf", buf, 0x16u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              int v267 = 134349312;
              unint64_t v268 = *(void *)&v45;
              __int16 v269 = 2050;
              *(double *)uint64_t v270 = v46;
              __int16 v146 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v146);
              if (v146 != buf) {
                free(v146);
              }
            }
            if (v46 - v45 < 1.5)
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              uint64_t v48 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t buf = 134349312;
                *(double *)&uint8_t buf[4] = v45;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(double *)&unsigned char buf[14] = v46 - v45;
                _os_log_impl(&dword_1906B8000, v48, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,%{public}.2lf,constructSegment,dT less that minimum interval,dT,%{public}.2lf", buf, 0x16u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                }
                int v267 = 134349312;
                unint64_t v268 = *(void *)&v45;
                __int16 v269 = 2050;
                *(double *)uint64_t v270 = v46 - v45;
                uint64_t v147 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v147);
                if (v147 != buf) {
                  free(v147);
                }
              }
              sub_1908205B8(v238, *(void **)(a1 + 56), *v37, *v39, ((char *)*v39 - (char *)*v37) >> 4);
              sub_1908205B8(v238, *(void **)(a1 + 56), *v36, *v41, ((char *)*v41 - (char *)*v36) >> 4);
              goto LABEL_61;
            }
            if (*v37 == *v39 || *v36 == *v41)
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              int v76 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t buf = 134349056;
                *(double *)&uint8_t buf[4] = v45;
                _os_log_impl(&dword_1906B8000, v76, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,start or stop snap road is empty", buf, 0xCu);
              }
              if (!sub_1906CB57C(115, 0)) {
                goto LABEL_54;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              int v267 = 134349056;
              unint64_t v268 = *(void *)&v45;
              double v77 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v77);
              goto LABEL_190;
            }
            double v235 = *v39;
            double v237 = *v36;
            unint64_t v60 = (void *)*(*v39 - 2);
            if (!sub_190816610((uint64_t)v60) || (uint64_t v61 = (void *)*v237, !sub_190816610(*v237)) || !*v60 || !*v61)
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              double v78 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t buf = 134349056;
                *(double *)&uint8_t buf[4] = v45;
                _os_log_impl(&dword_1906B8000, v78, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,%{public}.1lf,start or destination snap is not valid. Skipping constructing this segment", buf, 0xCu);
              }
              if (!sub_1906CB57C(115, 2)) {
                goto LABEL_54;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              int v267 = 134349056;
              unint64_t v268 = *(void *)&v45;
              double v77 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v77);
              goto LABEL_190;
            }
            uint64_t v263 = 0;
            uint64_t v264 = 0;
            long long v262 = xmmword_1908820F0;
            uint64_t v265 = 0x3FF0000000000000;
            memset(v266, 0, sizeof(v266));
            uint64_t v62 = v237;
            sub_1907A1ACC(a1 + 72, v266, 1, 0, *(double *)(*(v235 - 2) + 16), *(double *)(*v237 + 16));
            uint64_t v63 = *(void *)(*(void *)*(v235 - 2) + 144);
            double v64 = 0.0;
            double v65 = 0.0;
            double v66 = 0.0;
            if (v63 != *(void *)(*(void *)*(v235 - 2) + 136))
            {
              double v65 = *(double *)(v63 - 16);
              double v66 = *(double *)(v63 - 8);
            }
            uint64_t v67 = *(double **)(*(void *)*v237 + 136);
            double v68 = 0.0;
            if (*(double **)(*(void *)*v237 + 144) != v67)
            {
              double v64 = *v67;
              double v68 = v67[1];
            }
            long double v69 = sub_1906DA618((double *)a1, v65, v66, v64, v68, 0.0);
            uint64_t v70 = sub_190857D8C();
            ++*(_DWORD *)(v70 + 76);
            int v259 = 0;
            long long v257 = 0u;
            long long v258 = 0u;
            long long v260 = 0u;
            long long v261 = 0u;
            if (a3 == 2)
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              char v71 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
              {
                uint64_t v72 = *(void *)(*(void *)*(v235 - 2) + 144);
                uint64_t v73 = 0;
                if (v72 == *(void *)(*(void *)*(v235 - 2) + 136))
                {
                  uint64_t v74 = 0;
                  uint64_t v75 = 0;
                }
                else
                {
                  uint64_t v74 = *(void *)(v72 - 16);
                  uint64_t v75 = *(void *)(v72 - 8);
                }
                uint64_t v95 = *(void *)*v237;
                long long v96 = *(uint64_t **)(v95 + 136);
                if (*(uint64_t **)(v95 + 144) == v96)
                {
                  uint64_t v97 = 0;
                }
                else
                {
                  uint64_t v97 = *v96;
                  uint64_t v73 = v96[1];
                }
                *(_DWORD *)uint64_t buf = 134350593;
                *(double *)&uint8_t buf[4] = v45;
                *(_WORD *)&unsigned char buf[12] = 2049;
                *(void *)&unsigned char buf[14] = v74;
                *(_WORD *)&unsigned char buf[22] = 2049;
                *(void *)uint64_t v280 = v75;
                *(_WORD *)&v280[8] = 2049;
                *(void *)uint64_t v281 = v97;
                *(_WORD *)&v281[8] = 2049;
                *(void *)&v281[10] = v73;
                *(_WORD *)&v281[18] = 2050;
                *(long double *)&v281[20] = v69;
                __int16 v282 = 2050;
                double v283 = v46;
                _os_log_impl(&dword_1906B8000, v71, OS_LOG_TYPE_INFO, "CLTSP,MI,%{public}.3lf,constructing astar route between,startPoint,%{private}.7lf,%{private}.7lf,endPoint,%{private}.7lf,%{private}.7lf,distance,%{public}.3lf,endTime,%{public}.3lf", buf, 0x48u);
              }
              int v101 = sub_1906CB57C(115, 2);
              double v103 = v235;
              uint64_t v102 = v237;
              if (v101)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                }
                uint64_t v148 = *(void *)(*(void *)*(v235 - 2) + 144);
                uint64_t v149 = 0;
                if (v148 == *(void *)(*(void *)*(v235 - 2) + 136))
                {
                  uint64_t v150 = 0;
                  uint64_t v151 = 0;
                }
                else
                {
                  uint64_t v150 = *(void *)(v148 - 16);
                  uint64_t v151 = *(void *)(v148 - 8);
                }
                uint64_t v164 = *(void *)*v237;
                long long v165 = *(uint64_t **)(v164 + 136);
                if (*(uint64_t **)(v164 + 144) == v165)
                {
                  uint64_t v166 = 0;
                }
                else
                {
                  uint64_t v166 = *v165;
                  uint64_t v149 = v165[1];
                }
                int v267 = 134350593;
                unint64_t v268 = *(void *)&v45;
                __int16 v269 = 2049;
                *(void *)uint64_t v270 = v150;
                *(_WORD *)&v270[8] = 2049;
                *(void *)uint64_t v271 = v151;
                *(_WORD *)&v271[8] = 2049;
                *(void *)uint64_t v272 = v166;
                *(_WORD *)&v272[8] = 2049;
                *(void *)&v272[10] = v149;
                *(_WORD *)&v272[18] = 2050;
                *(long double *)&v272[20] = v69;
                __int16 v273 = 2050;
                double v274 = v46;
                long long v170 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v170);
                if (v170 != buf) {
                  free(v170);
                }
                double v103 = v235;
                uint64_t v102 = v237;
              }
              *(void *)&uint8_t buf[8] = 0;
              *(void *)uint64_t buf = 0;
              __int16 v104 = (uint64_t *)*v102;
              *(_OWORD *)uint64_t buf = *(_OWORD *)(*v102 + 24);
              uint64_t v105 = (uint64_t *)*(v103 - 2);
              double v106 = *(std::__shared_weak_count **)(a1 + 144);
              uint64_t v255 = *(void *)(a1 + 136);
              uint64_t v256 = v106;
              double v107 = v104;
              __int16 v108 = v105;
              if (v106)
              {
                atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
                __int16 v108 = (uint64_t *)*(v103 - 2);
                double v107 = (uint64_t *)*v102;
              }
              char v109 = sub_1906BB778((uint64_t)&v257, (double *)a1, v105, v104, &v255, (double *)buf, 0, 0, v45, *((double *)v108 + 6), *((double *)v107 + 6));
              if (v256) {
                sub_1906BFE48(v256);
              }
              if (v109) {
                goto LABEL_156;
              }
              goto LABEL_134;
            }
            double v79 = (double *)*(v235 - 2);
            double v80 = *v79;
            double v81 = 53.0;
            if (*(void *)v79)
            {
              unsigned int v82 = *(_DWORD *)(*(void *)&v80 + 20);
              double v81 = 53.0;
              if (v82 >= 3)
              {
                double v81 = 53.0;
                if (v82 != 3)
                {
                  double v81 = 53.0;
                  if ((*(_DWORD *)(*(void *)&v80 + 24) - 1) >= 2) {
                    double v81 = dbl_190885D60[v82 - 5 < 2];
                  }
                }
              }
            }
            double v83 = v79[13];
            double v84 = *(double *)(*v237 + 104);
            double v85 = *(double *)&v34;
            if (v83 >= 0.0) {
              break;
            }
            double v86 = v81;
            if (v84 >= 0.0) {
              goto LABEL_106;
            }
LABEL_107:
            if (v81 >= v86) {
              double v81 = v86;
            }
            if (v86 >= 20.0) {
              double v87 = v81;
            }
            else {
              double v87 = 20.0;
            }
            double v88 = fabs(v46 - v45) * v87;
            *(double *)&uint64_t v234 = v85;
            if (v88 >= v85) {
              double v89 = v88;
            }
            else {
              double v89 = v85;
            }
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            uint64_t v90 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
            {
              uint64_t v91 = *(void *)(*(void *)*(v235 - 2) + 144);
              uint64_t v92 = 0;
              if (v91 == *(void *)(*(void *)*(v235 - 2) + 136))
              {
                uint64_t v93 = 0;
                uint64_t v94 = 0;
              }
              else
              {
                uint64_t v93 = *(void *)(v91 - 16);
                uint64_t v94 = *(void *)(v91 - 8);
              }
              uint64_t v98 = *(void *)*v237;
              double v99 = *(uint64_t **)(v98 + 136);
              if (*(uint64_t **)(v98 + 144) == v99)
              {
                uint64_t v100 = 0;
              }
              else
              {
                uint64_t v100 = *v99;
                uint64_t v92 = v99[1];
              }
              *(_DWORD *)uint64_t buf = 134351105;
              *(double *)&uint8_t buf[4] = v45;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&unsigned char buf[14] = v93;
              *(_WORD *)&unsigned char buf[22] = 2049;
              *(void *)uint64_t v280 = v94;
              *(_WORD *)&v280[8] = 2049;
              *(void *)uint64_t v281 = v100;
              *(_WORD *)&v281[8] = 2049;
              *(void *)&v281[10] = v92;
              *(_WORD *)&v281[18] = 2050;
              *(long double *)&v281[20] = v69;
              __int16 v282 = 2050;
              double v283 = v46;
              __int16 v284 = 2050;
              double v285 = v89;
              __int16 v286 = 2050;
              double v287 = v87;
              _os_log_impl(&dword_1906B8000, v90, OS_LOG_TYPE_INFO, "CLTSP,MI,%{public}.3lf,constructing astar route between,startPoint,%{private}.7lf,%{private}.7lf,endPoint,%{private}.7lf,%{private}.7lf,distance,%{public}.3lf,endTime,%{public}.3lf,maxDistance,%{public}.3lf,speed,%{public}.3lf", buf, 0x5Cu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              uint64_t v152 = *(void *)(*(void *)*(v235 - 2) + 144);
              uint64_t v153 = 0;
              if (v152 == *(void *)(*(void *)*(v235 - 2) + 136))
              {
                uint64_t v154 = 0;
                uint64_t v155 = 0;
              }
              else
              {
                uint64_t v154 = *(void *)(v152 - 16);
                uint64_t v155 = *(void *)(v152 - 8);
              }
              uint64_t v167 = *(void *)*v237;
              __int16 v168 = *(uint64_t **)(v167 + 136);
              if (*(uint64_t **)(v167 + 144) == v168)
              {
                uint64_t v169 = 0;
              }
              else
              {
                uint64_t v169 = *v168;
                uint64_t v153 = v168[1];
              }
              int v267 = 134351105;
              unint64_t v268 = *(void *)&v45;
              __int16 v269 = 2049;
              *(void *)uint64_t v270 = v154;
              *(_WORD *)&v270[8] = 2049;
              *(void *)uint64_t v271 = v155;
              *(_WORD *)&v271[8] = 2049;
              *(void *)uint64_t v272 = v169;
              *(_WORD *)&v272[8] = 2049;
              *(void *)&v272[10] = v153;
              *(_WORD *)&v272[18] = 2050;
              *(long double *)&v272[20] = v69;
              __int16 v273 = 2050;
              double v274 = v46;
              __int16 v275 = 2050;
              double v276 = v89;
              __int16 v277 = 2050;
              double v278 = v87;
              double v171 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v171);
              if (v171 != buf) {
                free(v171);
              }
              uint64_t v62 = v237;
            }
            uint64_t v253 = *(v235 - 2);
            double v123 = (std::__shared_weak_count *)*(v235 - 1);
            uint64_t v254 = v123;
            if (v123) {
              atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            __int16 v124 = (std::__shared_weak_count *)v62[1];
            int v251 = (uint64_t **)*v62;
            double v252 = v124;
            uint64_t v34 = v234;
            if (v124) {
              atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v125 = *(std::__shared_weak_count **)(a1 + 144);
            uint64_t v249 = *(void *)(a1 + 136);
            BOOL v250 = v125;
            if (v125) {
              atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v126 = sub_1906C3284((uint64_t *)&v257, (double *)a1, &v253, &v251, &v249, v45, v89);
            if (v250) {
              sub_1906BFE48(v250);
            }
            if (v252) {
              sub_1906BFE48(v252);
            }
            if (v254) {
              sub_1906BFE48(v254);
            }
            if (v126)
            {
LABEL_156:
              double v127 = *(double *)&v260;
              uint64_t v128 = sub_190857D8C();
              *(double *)(v128 + 96) = v127 + *(double *)(v128 + 96);
              uint64_t v129 = sub_190857D8C();
              sub_1907E4A54((char *)(v129 + 128), (double)v259);
              int v246 = 0;
              uint64_t v247 = 0;
              uint64_t v248 = 0;
              memset(v245, 0, sizeof(v245));
              int v131 = (long long **)*((void *)&v257 + 1);
              for (double i = (long long **)v257; i != v131; i += 2)
                sub_1907458E0(v245, *i);
              if (a3 == 1)
              {
                if ((sub_19081F650((double *)a1, (uint64_t *)&v257, (uint64_t *)&v246, v37, v36, (uint64_t)&v262) & 1) == 0) {
                  goto LABEL_177;
                }
              }
              else
              {
                uint64_t v132 = *(v235 - 1);
                v244[0] = *(v235 - 2);
                v244[1] = v132;
                if (v132) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v132 + 8), 1uLL, memory_order_relaxed);
                }
                double v236 = (std::__shared_weak_count *)v132;
                uint64_t v133 = (std::__shared_weak_count *)v237[1];
                v243[0] = (uint64_t *)*v237;
                v243[1] = (uint64_t *)v133;
                if (v133) {
                  atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int v134 = sub_19081EBC0((double *)a1, (uint64_t *)&v257, (uint64_t *)&v246, v244, v243, (uint64_t)&v262);
                if (v133) {
                  sub_1906BFE48(v133);
                }
                if (v236)
                {
                  sub_1906BFE48(v236);
                  if ((v134 & 1) == 0) {
                    goto LABEL_177;
                  }
                }
                else if (!v134)
                {
LABEL_177:
                  int v139 = *(_DWORD *)(*(void *)(a1 + 136) + 116);
                  uint64_t v140 = sub_190857D8C();
                  *(_DWORD *)(v140 + 104) += v139;
                  uint64_t v141 = *(void *)(a1 + 136);
                  double Current = CFAbsoluteTimeGetCurrent();
                  sub_1907416A8(v141 + 288, Current, 0.5, 0.5);
                  BOOL v122 = v246 != (uint64_t *)v247;
                  *(void *)uint64_t buf = v245;
                  sub_1906C6BF0((void ***)buf);
                  *(void *)uint64_t buf = &v246;
                  sub_1906C6BF0((void ***)buf);
                  goto LABEL_178;
                }
              }
              sub_1908205B8(v238, *(void **)(a1 + 56), *v37, *v39, ((char *)*v39 - (char *)*v37) >> 4);
              sub_1908200A4(v238, *(void **)(a1 + 56), v246, v247, (v247 - (char *)v246) >> 4);
              sub_1908205B8(v238, *(void **)(a1 + 56), *v36, *v41, ((char *)*v41 - (char *)*v36) >> 4);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              int v135 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
              {
                uint64_t v136 = ((char *)*v39 - (char *)*v37) >> 4;
                uint64_t v137 = ((char *)*v41 - (char *)*v36) >> 4;
                uint64_t v138 = (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4;
                *(_DWORD *)uint64_t buf = 134350336;
                *(double *)&uint8_t buf[4] = v45;
                *(_WORD *)&unsigned char buf[12] = 2050;
                *(double *)&unsigned char buf[14] = v46;
                *(_WORD *)&unsigned char buf[22] = 2050;
                *(void *)uint64_t v280 = v136;
                *(_WORD *)&v280[8] = 2050;
                *(void *)uint64_t v281 = (v247 - (char *)v246) >> 4;
                *(_WORD *)&v281[8] = 2050;
                *(void *)&v281[10] = v137;
                *(_WORD *)&v281[18] = 2050;
                *(void *)&v281[20] = v138;
                _os_log_impl(&dword_1906B8000, v135, OS_LOG_TYPE_INFO, "CLTSP,MI,added snap solutions,startTime,%{public}.3lf,endTime,%{public}.3lf,startSnap,%{public}lu,constructed,%{public}lu,endSnap,%{public}lu,total,%{public}lu", buf, 0x3Eu);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
                }
                uint64_t v160 = ((char *)*v39 - (char *)*v37) >> 4;
                uint64_t v161 = ((char *)*v41 - (char *)*v36) >> 4;
                uint64_t v162 = (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4;
                int v267 = 134350336;
                unint64_t v268 = *(void *)&v45;
                __int16 v269 = 2050;
                *(double *)uint64_t v270 = v46;
                *(_WORD *)&v270[8] = 2050;
                *(void *)uint64_t v271 = v160;
                *(_WORD *)&v271[8] = 2050;
                *(void *)uint64_t v272 = (v247 - (char *)v246) >> 4;
                *(_WORD *)&v272[8] = 2050;
                *(void *)&v272[10] = v161;
                *(_WORD *)&v272[18] = 2050;
                *(void *)&v272[20] = v162;
                unint64_t v163 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v163);
                if (v163 != buf) {
                  free(v163);
                }
              }
              goto LABEL_177;
            }
LABEL_134:
            uint64_t v110 = sub_190857D8C();
            ++*(_DWORD *)(v110 + 80);
            int v111 = DWORD2(v258);
            uint64_t v112 = sub_190857D8C();
            *(_DWORD *)(v112 + 84) += v111;
            int v113 = HIDWORD(v258);
            uint64_t v114 = sub_190857D8C();
            *(_DWORD *)(v114 + 88) += v113;
            uint64_t v115 = sub_190857D8C();
            sub_1907E4A54((char *)(v115 + 128), (double)v259);
            double v116 = *(double *)&v260;
            uint64_t v117 = sub_190857D8C();
            *(double *)(v117 + 96) = v116 + *(double *)(v117 + 96);
            sub_1908205B8(v238, *(void **)(a1 + 56), *v37, *v39, ((char *)*v39 - (char *)*v37) >> 4);
            sub_1908205B8(v238, *(void **)(a1 + 56), *v36, *v41, ((char *)*v41 - (char *)*v36) >> 4);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            __int16 v118 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
            {
              uint64_t v119 = ((char *)*v39 - (char *)*v37) >> 4;
              uint64_t v120 = ((char *)*v41 - (char *)*v36) >> 4;
              uint64_t v121 = (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4;
              *(_DWORD *)uint64_t buf = 134350080;
              *(double *)&uint8_t buf[4] = v45;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(double *)&unsigned char buf[14] = v46;
              *(_WORD *)&unsigned char buf[22] = 2050;
              *(void *)uint64_t v280 = v119;
              *(_WORD *)&v280[8] = 2050;
              *(void *)uint64_t v281 = v120;
              *(_WORD *)&v281[8] = 2050;
              *(void *)&v281[10] = v121;
              _os_log_impl(&dword_1906B8000, v118, OS_LOG_TYPE_INFO, "CLTSP,MI,unable to construct route,added snap solutions,startTime,%{public}.3lf,endTime,%{public}.3lf,startSnap,%{public}lu,constructed,0,endSnap,%{public}lu,total,%{public}lu", buf, 0x34u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
              }
              uint64_t v156 = ((char *)*v39 - (char *)*v37) >> 4;
              uint64_t v157 = ((char *)*v41 - (char *)*v36) >> 4;
              uint64_t v158 = (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4;
              int v267 = 134350080;
              unint64_t v268 = *(void *)&v45;
              __int16 v269 = 2050;
              *(double *)uint64_t v270 = v46;
              *(_WORD *)&v270[8] = 2050;
              *(void *)uint64_t v271 = v156;
              *(_WORD *)&v271[8] = 2050;
              *(void *)uint64_t v272 = v157;
              *(_WORD *)&v272[8] = 2050;
              *(void *)&v272[10] = v158;
              double v159 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::constructSegment(const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, BOOL, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v159);
              if (v159 != buf) {
                free(v159);
              }
            }
            BOOL v122 = 0;
LABEL_178:
            *(void *)uint64_t buf = &v257;
            sub_1906C6BF0((void ***)buf);
            *(void *)uint64_t buf = v266;
            sub_1906C6BF0((void ***)buf);
            if (!v122) {
              goto LABEL_54;
            }
LABEL_61:
            ++v35;
            double v32 = *(void ***)(a1 + 200);
            uint64_t v33 = *(void *)(a1 + 208) - (void)v32;
            if (0xAAAAAAAAAAAAAAABLL * (v33 >> 3) <= v35) {
              goto LABEL_275;
            }
          }
          if (v84 < 0.0)
          {
            double v86 = v83 * 2.5;
            goto LABEL_107;
          }
          double v84 = (v83 + v84) * 0.5;
LABEL_106:
          double v86 = v84 * 2.5;
          goto LABEL_107;
        }
LABEL_275:
        if (v33 == 24) {
          sub_1908205B8((uint64_t *)(a1 + 48), *(void **)(a1 + 56), *v32, v32[1], ((char *)v32[1] - (char *)*v32) >> 4);
        }
        uint64_t v201 = *(void *)(a1 + 136);
        if (*(void *)(v201 + 88))
        {
          [*(id *)(v201 + 88) clearRoadTiles];
          uint64_t v201 = *(void *)(a1 + 136);
        }
        sub_19074102C(v201);
        sub_190819FA0(a1, (uint64_t *)__p, a7, a3);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        double v202 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
        {
          double v203 = 0.0;
          if (v15 >= 0.0)
          {
            uint64_t v204 = mach_continuous_time();
            double v203 = vabdd_f64(sub_1907E1770(v204), v15) * 1000.0;
          }
          int v205 = [a7 count];
          uint64_t v206 = (*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4;
          double v207 = __p;
          if (v242 < 0) {
            double v207 = (void **)__p[0];
          }
          uint64_t v208 = *(void *)(a1 + 136);
          int v210 = *(_DWORD *)(v208 + 112);
          int v209 = *(_DWORD *)(v208 + 116);
          uint64_t v211 = *(void *)(v208 + 320);
          LODWORD(v208) = *(_DWORD *)(v208 + 152);
          *(_DWORD *)uint64_t buf = 134350850;
          *(double *)&uint8_t buf[4] = v203;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v205;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v206;
          *(_WORD *)uint64_t v280 = 2082;
          *(void *)&v280[2] = v207;
          *(_WORD *)uint64_t v281 = 1026;
          *(_DWORD *)&v281[2] = v209;
          *(_WORD *)&v281[6] = 1026;
          *(_DWORD *)&v281[8] = v210;
          *(_WORD *)&v281[12] = 2050;
          *(void *)&v281[14] = v211;
          *(_WORD *)&v281[22] = 1026;
          *(_DWORD *)&v281[24] = v208;
          _os_log_impl(&dword_1906B8000, v202, OS_LOG_TYPE_DEFAULT, "CLTSP,MI,integrateWithMapDataSparse,timeTakenInMS,%{public}.3lf,inputLocations,%{public}d,snapLocations,%{public}d,id,%{public}s,mapsAPICalls,%{public}d,bufferCalls,%{public}d,connectionUsed,%{public}lu,geometry,%{public}d", buf, 0x3Eu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          double v224 = 0.0;
          if (v15 >= 0.0)
          {
            uint64_t v225 = mach_continuous_time();
            double v224 = vabdd_f64(sub_1907E1770(v225), v15) * 1000.0;
          }
          int v226 = [a7 count];
          uint64_t v227 = (*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4;
          uint64_t v228 = __p;
          if (v242 < 0) {
            uint64_t v228 = (void **)__p[0];
          }
          uint64_t v229 = *(void *)(a1 + 136);
          int v231 = *(_DWORD *)(v229 + 112);
          int v230 = *(_DWORD *)(v229 + 116);
          uint64_t v232 = *(void *)(v229 + 320);
          LODWORD(v229) = *(_DWORD *)(v229 + 152);
          int v267 = 134350850;
          unint64_t v268 = *(void *)&v224;
          __int16 v269 = 1026;
          *(_DWORD *)uint64_t v270 = v226;
          *(_WORD *)&v270[4] = 1026;
          *(_DWORD *)&v270[6] = v227;
          *(_WORD *)uint64_t v271 = 2082;
          *(void *)&v271[2] = v228;
          *(_WORD *)uint64_t v272 = 1026;
          *(_DWORD *)&v272[2] = v230;
          *(_WORD *)&v272[6] = 1026;
          *(_DWORD *)&v272[8] = v231;
          *(_WORD *)&v272[12] = 2050;
          *(void *)&v272[14] = v232;
          *(_WORD *)&v272[22] = 1026;
          *(_DWORD *)&v272[24] = v229;
          uint64_t v233 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v233);
          if (v233 != buf) {
            free(v233);
          }
        }
        sub_190812C34(*(void *)(a1 + 136));
        uint64_t v173 = 1;
        goto LABEL_272;
      }
      sub_190819FA0(a1, (uint64_t *)__p, a7, a3);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      double v194 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        double v195 = 0.0;
        if (v15 >= 0.0)
        {
          uint64_t v196 = mach_continuous_time();
          double v195 = vabdd_f64(sub_1907E1770(v196), v15) * 1000.0;
        }
        int v197 = [a7 count];
        uint64_t v198 = (*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4;
        double v199 = __p;
        if (v242 < 0) {
          double v199 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 134349826;
        *(double *)&uint8_t buf[4] = v195;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v197;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v198;
        *(_WORD *)uint64_t v280 = 2082;
        *(void *)&v280[2] = v199;
        _os_log_impl(&dword_1906B8000, v194, OS_LOG_TYPE_ERROR, "CLTSP,MI,integrateWithMapDataSparse failed, tripLocations count not be initialized,timeTakenInMS,%{public}.3lf,inputLocations,%{public}d,snapLocations,%{public}d,id,%{public}s", buf, 0x22u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_270;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      double v213 = 0.0;
      if (v15 >= 0.0)
      {
        uint64_t v214 = mach_continuous_time();
        double v213 = vabdd_f64(sub_1907E1770(v214), v15) * 1000.0;
      }
      int v215 = [a7 count];
      uint64_t v216 = (*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4;
      uint64_t v217 = __p;
      if (v242 < 0) {
        uint64_t v217 = (void **)__p[0];
      }
      int v267 = 134349826;
      unint64_t v268 = *(void *)&v213;
      __int16 v269 = 1026;
      *(_DWORD *)uint64_t v270 = v215;
      *(_WORD *)&v270[4] = 1026;
      *(_DWORD *)&v270[6] = v216;
      *(_WORD *)uint64_t v271 = 2082;
      *(void *)&v271[2] = v217;
      double v193 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v193);
    }
    else
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v180 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v181 = [a6 count];
        uint64_t v182 = [a7 count];
        double v183 = __p;
        if (v242 < 0) {
          double v183 = (void **)__p[0];
        }
        uint64_t v184 = *(void *)(a1 + 136);
        int v185 = *(_DWORD *)(v184 + 116);
        uint64_t v186 = *(void *)(v184 + 320);
        LODWORD(v184) = *(_DWORD *)(v184 + 152);
        *(_DWORD *)uint64_t buf = 134350338;
        *(void *)&uint8_t buf[4] = v181;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = v182;
        *(_WORD *)&unsigned char buf[22] = 2082;
        *(void *)uint64_t v280 = v183;
        *(_WORD *)&v280[8] = 1026;
        *(_DWORD *)uint64_t v281 = v185;
        *(_WORD *)&v281[4] = 2050;
        *(void *)&v281[6] = v186;
        *(_WORD *)&v281[14] = 1026;
        *(_DWORD *)&v281[16] = v184;
        _os_log_impl(&dword_1906B8000, v180, OS_LOG_TYPE_INFO, "CLTSP,MI,integrateWithMapData,segments not available for reconstruction,sparseLocations,%{public}lu,upsampledLocations,%{public}lu,id,%{public}s,mapsAPICalls,%{public}d,connectionBufferUsedCount,%{public}lu,geometry,%{public}d", buf, 0x36u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_270;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      uint64_t v187 = [a6 count];
      uint64_t v188 = [a7 count];
      double v189 = __p;
      if (v242 < 0) {
        double v189 = (void **)__p[0];
      }
      uint64_t v190 = *(void *)(a1 + 136);
      int v191 = *(_DWORD *)(v190 + 116);
      uint64_t v192 = *(void *)(v190 + 320);
      LODWORD(v190) = *(_DWORD *)(v190 + 152);
      int v267 = 134350338;
      unint64_t v268 = v187;
      __int16 v269 = 2050;
      *(void *)uint64_t v270 = v188;
      *(_WORD *)&v270[8] = 2082;
      *(void *)uint64_t v271 = v189;
      *(_WORD *)&v271[8] = 1026;
      *(_DWORD *)uint64_t v272 = v191;
      *(_WORD *)&v272[4] = 2050;
      *(void *)&v272[6] = v192;
      *(_WORD *)&v272[14] = 1026;
      *(_DWORD *)&v272[16] = v190;
      double v193 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v193);
    }
    if (v193 != buf) {
      free(v193);
    }
LABEL_270:
    sub_19074102C(*(void *)(a1 + 136));
LABEL_271:
    uint64_t v173 = 0;
LABEL_272:
    if (v242 < 0) {
      operator delete(__p[0]);
    }
    return v173;
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
  }
  uint64_t v172 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v172, OS_LOG_TYPE_ERROR, "CLTSP,MI,integrateWithMapData,geometry pointer is nullptr", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    LOWORD(v267) = 0;
    double v212 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::integrateWithMapData(NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, std::shared_ptr<CLTripSegmentRouteBuilder> &, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v212);
    if (v212 != buf) {
      free(v212);
    }
  }
  return 0;
}

void sub_19081EA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19081EBC0(double *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5, uint64_t a6)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a4;
  if (*a4 && (uint64_t v8 = *a5) != 0)
  {
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (v11 == *a2) {
      return 1;
    }
    int v16 = *(unsigned __int8 *)(*(void *)v10 + 16);
    uint64_t v17 = *(void *)(v11 - 16);
    int v18 = *(unsigned __int8 *)(v17 + 16);
    if ((unint64_t)(v11 - *a2) < 0x11)
    {
      int v19 = *((double *)v8 + 6) > *(double *)(v6 + 48);
      *(unsigned char *)(*(void *)v10 + 16) = v19;
    }
    else
    {
      sub_1907F00FC(a2, a1);
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      int v19 = *(unsigned __int8 *)(*(void *)*a2 + 16);
      uint64_t v6 = *a4;
      uint64_t v8 = *a5;
      uint64_t v17 = *(void *)(v11 - 16);
    }
    int v23 = *(unsigned __int8 *)(v17 + 16);
    double v24 = *(double *)(v6 + 152);
    if (v19 != v16) {
      double v24 = -v24;
    }
    *(double *)(v6 + 152) = v24;
    double v25 = *((double *)v8 + 19);
    if (v23 != v18) {
      double v25 = -v25;
    }
    *((double *)v8 + 19) = v25;
    if (v10 == v11) {
      return 1;
    }
    if (v19) {
      double v26 = *(double *)(v6 + 48);
    }
    else {
      double v26 = 1.0 - *(double *)(v6 + 48);
    }
    uint64_t v27 = *(void *)v6;
    sub_19082373C(*(void *)v6);
    double v28 = *(double *)(v27 + 40);
    uint64_t v29 = *a5;
    if (*(unsigned char *)(*(void *)(a2[1] - 16) + 16)) {
      double v30 = 1.0 - *((double *)*a5 + 6);
    }
    else {
      double v30 = *((double *)*a5 + 6);
    }
    uint64_t v31 = *v29;
    sub_19082373C(*v29);
    double v32 = v30 * *(double *)(v31 + 40) + v26 * v28;
    double v33 = sub_1907F3C3C(a2, *(double *)(*a4 + 152)) - v32;
    double v34 = sub_1907F3C3C(a2, *((double *)*a5 + 19)) - v32;
    uint64_t v35 = *a4;
    double v36 = *(double *)(*a4 + 104);
    double v37 = *((double *)*a5 + 13);
    if (v36 <= 0.5)
    {
      double v36 = -1.0;
      if (v37 > 0.5) {
        double v36 = *((double *)*a5 + 13);
      }
    }
    else if (v37 > 0.5 && v36 < v37)
    {
      double v36 = *((double *)*a5 + 13);
    }
    double v38 = (v33 + v34) * 0.5;
    double v39 = *((double *)*a5 + 2) - *(double *)(*a4 + 16);
    uint64_t v40 = *(void *)(a6 + 40);
    uint64_t v41 = *(void *)(a6 + 48);
    int v42 = (double ***)(a6 + 40);
    double v43 = 0.0;
    if (v40 != v41)
    {
      uint64_t v44 = *(void *)(a6 + 40);
      do
      {
        if (*(void *)v44) {
          double v43 = v43 + *(double *)(*(void *)v44 + 80);
        }
        v44 += 16;
      }
      while (v44 != v41);
    }
    BOOL v45 = 0;
    double v46 = v38 / v39;
    if (v36 >= 0.0 && v46 > 0.0)
    {
      double v47 = fabs(v39) * -0.0833333333 + 4.5;
      double v48 = 4.0;
      if (v47 <= 4.0) {
        double v48 = v47;
      }
      if (v47 >= 2.0) {
        double v49 = v48;
      }
      else {
        double v49 = 2.0;
      }
      BOOL v45 = v46 > v49 * v36;
    }
    double v50 = v43 * 1.2;
    if (!v45 && v38 <= v50)
    {
      double v51 = 0.0;
      while (v40 != v41)
      {
        if (*(void *)v40) {
          double v51 = v51 + *(double *)(*(void *)v40 + 80);
        }
        v40 += 16;
      }
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      double v75 = 0.0;
      if (sub_19081A7AC(a1, (uint64_t **)(a6 + 40), a2, &v73, *(double *)(v35 + 48), v33 / v51, *(double *)(v35 + 152)))
      {
        long long v71 = 0uLL;
        uint64_t v72 = 0;
        char v53 = sub_19081A7AC(a1, (uint64_t **)(a6 + 40), a2, (uint64_t *)&v71, *(double *)(*a4 + 48), v34 / v51, *((double *)*a5 + 19));
        if (v53)
        {
          double v83 = 0.0;
          *(void *)double v84 = 0;
          *(_OWORD *)uint64_t buf = xmmword_1908820F0;
          *(void *)&v84[8] = 0x3FF0000000000000;
          *(void *)&v84[16] = 0;
          *(void *)&v84[24] = 0;
          uint64_t v85 = 0;
          if (buf != (uint8_t *)a6) {
            sub_190820438((uint64_t *)&v84[16], *(uint64_t **)(a6 + 40), *(uint64_t **)(a6 + 48), (uint64_t)(*(void *)(a6 + 48) - *(void *)(a6 + 40)) >> 4);
          }
          uint64_t v54 = v73;
          if (v74 != v73)
          {
            unint64_t v55 = 0;
            do
            {
              uint64_t v56 = *(double ***)&v84[16];
              double v57 = 0.0;
              for (double i = 0.0; v56 != *(double ***)&v84[24]; v56 += 2)
              {
                int v59 = *v56;
                if (*v56)
                {
                  if (*v59 > ***v42 && *v59 <= *(*v42)[2 * v55]) {
                    double i = i + v59[10];
                  }
                }
              }
              if (v38 > 0.0) {
                double v57 = v33 / v51 * i / v33;
              }
              uint64_t v61 = (long long *)(v54 + 16 * v55);
              *(float64x2_t *)(*(void *)v61 + 24) = vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(*(void *)(v71 + 16 * v55) + 24), v57), *(float64x2_t *)(*(void *)v61 + 24), 1.0 - v57);
              sub_190745090(a3, v61);
              ++v55;
              uint64_t v54 = v73;
            }
            while (v55 < (v74 - v73) >> 4);
          }
          v70[0] = (void **)&v84[16];
          sub_1906C6BF0(v70);
        }
        else
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          double v64 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v65 = *(void *)(*a4 + 16);
            *(_DWORD *)uint64_t buf = 134349056;
            *(void *)&uint8_t buf[4] = v65;
            _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,unable to compute snap on constructed route", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
            }
            double v68 = *(void ***)(*a4 + 16);
            LODWORD(v70[0]) = 134349056;
            *(void ***)((char *)v70 + 4) = v68;
            long double v69 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentPedestrian(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, const CLGeoMapLocationArray &) const", "CoreLocation: %s\n", v69);
            if (v69 != (char *)buf) {
              free(v69);
            }
          }
        }
        *(void *)uint64_t buf = &v71;
        sub_1906C6BF0((void ***)buf);
        *(void *)uint64_t buf = &v73;
        sub_1906C6BF0((void ***)buf);
        if (v53) {
          return 1;
        }
      }
      else
      {
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
        }
        uint64_t v62 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v63 = *(void *)(*a4 + 16);
          *(_DWORD *)uint64_t buf = 134349056;
          *(void *)&uint8_t buf[4] = v63;
          _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_ERROR, "CLTSP,%{public}.1lf,unable to compute snap on constructed route", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
          }
          uint64_t v66 = *(void *)(*a4 + 16);
          LODWORD(v71) = 134349056;
          *(void *)((char *)&v71 + 4) = v66;
          uint64_t v67 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentPedestrian(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, const CLGeoMapLocationArray &) const", "CoreLocation: %s\n", v67);
          if (v67 != (char *)buf) {
            free(v67);
          }
        }
        *(void *)uint64_t buf = &v73;
        sub_1906C6BF0((void ***)buf);
      }
      return 0;
    }
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    uint64_t v52 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v45;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v38 > v50;
      *(_WORD *)&unsigned char buf[14] = 2050;
      double v83 = v46;
      *(_WORD *)double v84 = 2050;
      *(double *)&v84[2] = v36;
      *(_WORD *)&v84[10] = 2048;
      *(double *)&v84[12] = (v33 + v34) * 0.5;
      *(_WORD *)&v84[20] = 2048;
      *(double *)&v84[22] = v43;
      _os_log_impl(&dword_1906B8000, v52, OS_LOG_TYPE_DEFAULT, "CLTSP,Warning,cannot interpolate along route,speed_check_failed,%d,distance_check_failed,%d,route_speed_mps,%{public}.1lf,max_start_destination_speed_mps,%{public}.1lf,routeLength_m,%.1lf,li_distance_m,%.1lf", buf, 0x36u);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      LODWORD(v73) = 67110400;
      HIDWORD(v73) = v45;
      LOWORD(v74) = 1024;
      *(_DWORD *)((char *)&v74 + 2) = v38 > v50;
      HIWORD(v74) = 2050;
      double v75 = v46;
      __int16 v76 = 2050;
      double v77 = v36;
      __int16 v78 = 2048;
      double v79 = (v33 + v34) * 0.5;
      __int16 v80 = 2048;
      double v81 = v43;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentPedestrian(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, const CLGeoMapLocationArray &) const", "CoreLocation: %s\n", v22);
LABEL_14:
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    uint64_t v20 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_ERROR, "CLTSP,MI,interpolateLocationsAlongSegmentPedestrian,null pointers", buf, 2u);
    }
    uint64_t result = sub_1906CB57C(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      LOWORD(v73) = 0;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentPedestrian(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapSnapDataPtr, const CLGeoMapSnapDataPtr, const CLGeoMapLocationArray &) const", "CoreLocation: %s\n", v22);
      goto LABEL_14;
    }
  }
  return result;
}

void sub_19081F5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a13;
  sub_1906C6BF0(&a25);
  a25 = (void **)&a17;
  sub_1906C6BF0(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_19081F650(double *a1, uint64_t *a2, uint64_t *a3, void *a4, uint64_t **a5, uint64_t a6)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a4[1];
  if (*a4 == v8 || (long double v9 = *a5, *a5 == a5[1]))
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    uint64_t v22 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = (uint64_t)(a4[1] - *a4) >> 4;
      uint64_t v24 = ((char *)a5[1] - (char *)*a5) >> 4;
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v23;
      __int16 v53 = 2050;
      uint64_t v54 = v24;
      _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_ERROR, "CLTSP,MI,interpolateLocationsAlongSegmentVehicular,invalid size,start,%{public}lu,end,%{public}lu", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 == -1) {
      goto LABEL_48;
    }
    goto LABEL_58;
  }
  if (!*(void *)(v8 - 16) || !*v9)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    double v25 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = (uint64_t)(a4[1] - *a4) >> 4;
      uint64_t v27 = ((char *)a5[1] - (char *)*a5) >> 4;
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v26;
      __int16 v53 = 2050;
      uint64_t v54 = v27;
      _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_ERROR, "CLTSP,MI,interpolateLocationsAlongSegmentVehicular,null pointers,start,%{public}lu,end,%{public}lu", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 == -1)
    {
LABEL_48:
      uint64_t v36 = (uint64_t)(a4[1] - *a4) >> 4;
      uint64_t v37 = ((char *)a5[1] - (char *)*a5) >> 4;
      LODWORD(v47[0]) = 134349312;
      *(uint64_t *)((char *)v47 + 4) = v36;
      WORD2(v47[1]) = 2050;
      *(uint64_t *)((char *)&v47[1] + 6) = v37;
      double v38 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentVehicular(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapLocationArray &, BOOL)", "CoreLocation: %s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
      return 0;
    }
LABEL_58:
    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    goto LABEL_48;
  }
  uint64_t v43 = *(void *)(v8 - 16);
  uint64_t v14 = *(std::__shared_weak_count **)(v8 - 8);
  uint64_t v44 = v14;
  if (v14)
  {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    long double v9 = *a5;
  }
  uint64_t v16 = *v9;
  double v15 = (std::__shared_weak_count *)v9[1];
  uint64_t v41 = v16;
  int v42 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v17 = sub_1907F17F8(a2, &v43, &v41);
  if (v42) {
    sub_1906BFE48(v42);
  }
  if (v44) {
    sub_1906BFE48(v44);
  }
  uint64_t v18 = *(void *)(a6 + 40);
  uint64_t v19 = *(void *)(a6 + 48);
  uint64_t v20 = (uint64_t **)(a6 + 40);
  double v21 = 0.0;
  while (v18 != v19)
  {
    if (*(void *)v18) {
      double v21 = v21 + *(double *)(*(void *)v18 + 80);
    }
    v18 += 16;
  }
  uint64_t v30 = *(void *)(*(void *)(a4[1] - 16) + 16);
  uint64_t v31 = *(void *)(**a5 + 16);
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
  }
  double v32 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134350080;
    *(void *)&uint8_t buf[4] = v30;
    __int16 v53 = 2050;
    uint64_t v54 = v31;
    __int16 v55 = 2050;
    double v56 = v17;
    __int16 v57 = 2050;
    double v58 = v21;
    __int16 v59 = 2050;
    double v60 = v17 / v21;
    _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_INFO, "CLTSP,MI,construct route distances,startTime,%{public}.3lf,endTime,%{public}.3lf,routeConstructed,%{public}.3lf,routeExpected,%{public}.3lf,distanceScale,%{public}.3lf", buf, 0x34u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    LODWORD(v47[0]) = 134350080;
    *(uint64_t *)((char *)v47 + 4) = v30;
    WORD2(v47[1]) = 2050;
    *(uint64_t *)((char *)&v47[1] + 6) = v31;
    HIWORD(v47[2]) = 2050;
    *(double *)&_OWORD v47[3] = v17;
    __int16 v48 = 2050;
    double v49 = v21;
    __int16 v50 = 2050;
    double v51 = v17 / v21;
    double v39 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentVehicular(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapLocationArray &, BOOL)", "CoreLocation: %s\n", v39);
    if (v39 != buf) {
      free(v39);
    }
  }
  memset(v47, 0, 24);
  double v33 = (long long **)*a2;
  double v34 = (long long **)a2[1];
  while (v33 != v34)
  {
    sub_1907458E0(v47, *v33);
    v33 += 2;
  }
  uint64_t v28 = sub_19081A7AC(a1, v20, a2, a3, *(double *)(*(void *)(a4[1] - 16) + 48), v17 / v21, 0.0);
  if ((v28 & 1) == 0)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
    }
    uint64_t v35 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl(&dword_1906B8000, v35, OS_LOG_TYPE_ERROR, "CLTSP,MI,%{public}.1lf,unable to compute snap on constructed route", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE005F20);
      }
      int v45 = 134349056;
      uint64_t v46 = v30;
      uint64_t v40 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentMapIntegratorSparse::interpolateLocationsAlongSegmentVehicular(CLAStarRouteConstructor &, std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const std::vector<CLGeoMapSnapDataPtr> &, const CLGeoMapLocationArray &, BOOL)", "CoreLocation: %s\n", v40);
      if (v40 != buf) {
        free(v40);
      }
    }
  }
  *(void *)uint64_t buf = v47;
  sub_1906C6BF0((void ***)buf);
  return v28;
}

void sub_19081FE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a17;
  sub_1906C6BF0(&a25);
  _Unwind_Resume(a1);
}

os_log_t sub_19081FE64()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

void sub_19081FE94(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  BOOL v4 = *(long long **)a1;
  uint64_t v5 = *(double ***)(a1 + 8);
  unint64_t v6 = ((uint64_t)v5 - *(void *)a1) >> 4;
  unint64_t v7 = 3;
  if (a3 == 1) {
    unint64_t v7 = 14;
  }
  if (v6 > v7 && (a3 != 1 || (double)(3 * v6) < a4))
  {
    uint64_t v11 = a2[1];
    if (*a2 == v11)
    {
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v13 = *(double **)(v11 - 16);
      uint64_t v12 = *(std::__shared_weak_count **)(v11 - 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v14 = -1.0;
      if (v13)
      {
        double v15 = *v13;
        if (*(void *)v13)
        {
          if (*(_DWORD *)(*(void *)&v15 + 20) < 3u || (*(_DWORD *)(*(void *)&v15 + 24) - 1) <= 1) {
            double v14 = v13[2];
          }
        }
      }
      if (v12) {
        sub_1906BFE48(v12);
      }
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      BOOL v4 = *(long long **)a1;
      uint64_t v5 = *(double ***)(a1 + 8);
      if (v14 > 0.0)
      {
        if (v4 != (long long *)v5)
        {
          double v16 = 60.0;
          double v17 = *(double ***)a1;
          while (1)
          {
            uint64_t v18 = *v17;
            if (*v17)
            {
              double v16 = v16 + 1.0;
              if ((*(_DWORD *)(*(void *)v18 + 20) & 0xFFFFFFFC) == 4
                && vabdd_f64(v14, v18[2]) < v16
                && v18[13] > 18.0)
              {
                goto LABEL_37;
              }
            }
            v17 += 2;
            if (v17 == v5) {
              goto LABEL_26;
            }
          }
        }
        goto LABEL_35;
      }
    }
LABEL_26:
    if (v4 != (long long *)v5)
    {
      do
      {
        uint64_t v19 = *(double **)v4;
        if (*(void *)v4)
        {
          double v20 = 0.0;
          if (a3 != 1 || (double v20 = 3.0, !*(void *)v19) || (*(_DWORD *)(*(void *)v19 + 24) & 0xFFFFFFFE) != 6)
          {
            if (v19[13] >= v20) {
              sub_190745090((uint64_t *)&v23, v4);
            }
          }
        }
        ++v4;
      }
      while (v4 != (long long *)v5);
      double v21 = v23;
      uint64_t v22 = v24;
      goto LABEL_36;
    }
LABEL_35:
    uint64_t v22 = 0;
    double v21 = 0;
LABEL_36:
    sub_1908200A4(a2, (void *)a2[1], v21, v22, (v22 - (char *)v21) >> 4);
LABEL_37:
    uint64_t v26 = (void **)&v23;
    sub_1906C6BF0(&v26);
  }
}

void sub_190820084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1906C6BF0(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_1908200A4(uint64_t *result, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    unint64_t v6 = a3;
    uint64_t v8 = result;
    uint64_t v11 = result[2];
    long double v9 = result + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        double v21 = &a3[2 * a5];
      }
      else
      {
        double v21 = &a3[2 * v20];
        os_log_t result = sub_1907ED0E0((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        v8[1] = (uint64_t)result;
        if (v19 < 1) {
          return result;
        }
      }
      sub_190820248((uint64_t)v8, (uint64_t)a2, v12, (char *)&a2[2 * a5]);
      return sub_19074E28C((uint64_t)v25, v6, v21, a2);
    }
    uint64_t v13 = *v8;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *v8) >> 4);
    if (v14 >> 60) {
      sub_190718FD4();
    }
    uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
    uint64_t v16 = v10 - v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    v25[4] = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_19074C0B4((uint64_t)v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v22 = (uint64_t *)&v18[16 * v15];
    v25[0] = v18;
    v25[1] = v22;
    v25[3] = &v18[16 * v17];
    uint64_t v23 = &v22[2 * a5];
    do
    {
      *uint64_t v22 = *v6;
      uint64_t v24 = v6[1];
      v22[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      v22 += 2;
      v6 += 2;
    }
    while (v22 != v23);
    _OWORD v25[2] = v23;
    sub_1908202D8(v8, v25, a2);
    return (uint64_t *)sub_19074DC48(v25);
  }
  return result;
}

void sub_190820228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_190820248(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  BOOL v4 = *(char **)(a1 + 8);
  uint64_t v5 = (char *)(a2 + v4 - a4);
  unint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v5;
    v6 += 16;
    *(void *)uint64_t v5 = 0;
    *((void *)v5 + 1) = 0;
    v5 += 16;
  }
  *(void *)(a1 + 8) = v6;
  if (v4 != a4)
  {
    unint64_t v7 = (std::__shared_weak_count **)(v4 - 8);
    uint64_t v8 = a2 - 16;
    uint64_t v9 = 16 * ((v4 - a4) >> 4);
    do
    {
      uint64_t v10 = (void *)(v8 + v9);
      long long v11 = *(_OWORD *)(v8 + v9);
      void *v10 = 0;
      v10[1] = 0;
      unint64_t v12 = *v7;
      *(_OWORD *)(v7 - 1) = v11;
      if (v12) {
        sub_1906BFE48(v12);
      }
      v7 -= 2;
      v9 -= 16;
    }
    while (v9);
  }
}

uint64_t sub_1908202D8(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  unint64_t v7 = a1 + 2;
  sub_19074E034((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  uint64_t v9 = a1[1];
  uint64_t v10 = (_OWORD *)a2[2];
  unint64_t v17 = v10;
  uint64_t v18 = v10;
  v15[0] = v7;
  v15[1] = &v17;
  v15[2] = &v18;
  if ((void *)v9 != v3)
  {
    do
    {
      *v10++ = *(_OWORD *)v3;
      *uint64_t v3 = 0;
      v3[1] = 0;
      v3 += 2;
    }
    while (v3 != (void *)v9);
    uint64_t v18 = v10;
  }
  char v16 = 1;
  sub_1907ED170((uint64_t)v15);
  a2[2] = v10;
  uint64_t v11 = *a1;
  *a1 = a2[1];
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return v6;
}

uint64_t *sub_1908203CC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_19074C29C(a3);
      *(_OWORD *)a3 = *(_OWORD *)v5;
      a3[2] = *(void *)(v5 + 16);
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      a3 += 3;
      v5 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_190820438(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v10)
    {
      sub_19074C1F8(a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      sub_190718FD4();
    }
    uint64_t v11 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_19074C070(a1, v12);
    uint64_t v13 = sub_1907ED810(v9, a2, a3, (void *)a1[1]);
    goto LABEL_13;
  }
  unint64_t v14 = (a1[1] - (uint64_t)v10) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    sub_19074EF7C(a2, v15, v10);
    uint64_t v13 = sub_1907ED810(v9, v15, a3, (void *)a1[1]);
LABEL_13:
    a1[1] = (uint64_t)v13;
    return;
  }
  char v16 = sub_19074EF7C(a2, a3, v10);
  for (double i = (void *)a1[1]; i != v16; i -= 2)
  {
    uint64_t v18 = (std::__shared_weak_count *)*(i - 1);
    if (v18) {
      sub_1906BFE48(v18);
    }
  }
  a1[1] = (uint64_t)v16;
}

void sub_190820578(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_190820580(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

os_log_t sub_190820588()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_1908205B8(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = a3;
  unint64_t v7 = a2;
  uint64_t v11 = a1[2];
  uint64_t v9 = a1 + 2;
  uint64_t v10 = v11;
  unint64_t v12 = *(v9 - 1);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    uint64_t v13 = *a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
    if (v14 >> 60) {
      sub_190718FD4();
    }
    uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
    uint64_t v16 = v10 - v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v36 = v9;
    if (v17) {
      uint64_t v18 = (char *)sub_19074C0B4((uint64_t)v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v26 = &v18[16 * v15];
    double v32 = v18;
    double v33 = v26;
    uint64_t v35 = &v18[16 * v17];
    uint64_t v27 = &v26[16 * a5];
    do
    {
      *(void *)uint64_t v26 = *v6;
      uint64_t v28 = v6[1];
      *((void *)v26 + 1) = v28;
      if (v28) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
      }
      v26 += 16;
      v6 += 2;
    }
    while (v26 != v27);
    double v34 = v27;
    sub_1908202D8(a1, &v32, v7);
    sub_19074DC48(&v32);
    return;
  }
  uint64_t v19 = v12 - (void)a2;
  uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
  if (v20 >= a5)
  {
    double v21 = &a3[2 * a5];
LABEL_27:
    sub_190820248((uint64_t)a1, (uint64_t)v7, v12, (char *)&v7[2 * a5]);
    for (; v6 != v21; v7 += 2)
    {
      uint64_t v30 = *v6;
      uint64_t v29 = v6[1];
      if (v29) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = (std::__shared_weak_count *)v7[1];
      *unint64_t v7 = v30;
      v7[1] = v29;
      if (v31) {
        sub_1906BFE48(v31);
      }
      v6 += 2;
    }
    return;
  }
  uint64_t v37 = *(v9 - 1);
  double v38 = (void *)v12;
  double v21 = &a3[2 * v20];
  double v32 = v9;
  double v33 = (char *)&v37;
  double v34 = (char *)&v38;
  if (v21 == a4)
  {
    unint64_t v22 = v12;
  }
  else
  {
    unint64_t v22 = v12;
    uint64_t v23 = (void *)v12;
    uint64_t v24 = &a3[2 * v20];
    do
    {
      *uint64_t v23 = *v24;
      uint64_t v25 = v24[1];
      v23[1] = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      v23 += 2;
      v22 += 16;
      v24 += 2;
    }
    while (v24 != a4);
    double v38 = v23;
  }
  LOBYTE(v35) = 1;
  sub_1907ED170((uint64_t)&v32);
  a1[1] = v22;
  if (v19 >= 1) {
    goto LABEL_27;
  }
}

void sub_1908207CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19074DC48((void **)va);
  _Unwind_Resume(a1);
}

void sub_1908211F0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_190821258(uint64_t a1, uint64_t *a2)
{
  Weaunint64_t k = objc_loadWeak((id *)(a1 + 32));
  BOOL v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [Weak handleMessage:&v5];
  if (v6) {
    sub_1906BFE48(v6);
  }
}

void sub_1908212B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1908212CC(uint64_t a1)
{
  Weaunint64_t k = objc_loadWeak((id *)(a1 + 32));

  return [Weak handleInterruption];
}

void sub_190822588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190822864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190822B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190822EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_190823210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19082352C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_1908235C0()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Proximity");
  qword_1E929F688 = (uint64_t)result;
  return result;
}

void sub_1908235F0(void *a1, float64x2_t *a2, char a3)
{
  if (a3)
  {
    uint64_t v5 = (float64x2_t *)a1[18];
    if ((float64x2_t *)a1[17] == v5)
    {
      uint64_t v5 = (float64x2_t *)a1[17];
    }
    else
    {
      int32x2_t v6 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5[-1], *a2)));
      if (vand_s8((int8x8_t)v6, (int8x8_t)vdup_lane_s32(v6, 1)).u32[0]) {
        return;
      }
    }
  }
  else
  {
    uint64_t v5 = (float64x2_t *)a1[18];
  }
  uint64_t v7 = (uint64_t)(a1 + 19);
  unint64_t v8 = a1[19];
  if ((unint64_t)v5 >= v8)
  {
    uint64_t v10 = a1[17];
    uint64_t v11 = ((uint64_t)v5 - v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_1908252BC();
    }
    uint64_t v13 = v8 - v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = (char *)sub_19074C0B4(v7, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = (float64x2_t *)&v15[16 * v11];
    unint64_t v17 = &v15[16 * v14];
    *uint64_t v16 = *a2;
    f64 = (_OWORD *)v16[1].f64;
    uint64_t v19 = (float64x2_t *)a1[17];
    uint64_t v18 = (float64x2_t *)a1[18];
    if (v18 != v19)
    {
      do
      {
        v16[-1] = v18[-1];
        --v16;
        --v18;
      }
      while (v18 != v19);
      uint64_t v18 = (float64x2_t *)a1[17];
    }
    a1[17] = v16;
    a1[18] = f64;
    a1[19] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    f64 = (_OWORD *)v5[1].f64;
  }
  a1[18] = f64;
}

uint64_t sub_19082373C(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 160);
  uint64_t v2 = (void **)(a1 + 160);
  if (v1 != *(void *)(a1 + 168)) {
    return 1;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 168) = v1;
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  if (v5 != v6)
  {
    ++qword_1E92A04B8;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    *(_OWORD *)uint64_t buf = xmmword_1908820F0;
    uint64_t v27 = 0x3FF0000000000000;
    sub_190823A60((void **)(a1 + 160), ((v6 - v5) >> 4) - 1);
    uint64_t v7 = *(void *)(a1 + 136);
    if ((unint64_t)(*(void *)(a1 + 144) - v7) >= 0x11)
    {
      unint64_t v8 = (void *)(a1 + 176);
      uint64_t v9 = *(double **)(a1 + 168);
      unint64_t v10 = 1;
      do
      {
        double v11 = sub_1906DA618((double *)buf, *(double *)(v7 + 16 * v10 - 16), *(double *)(v7 + 16 * v10 - 8), *(double *)(v7 + 16 * v10), *(double *)(v7 + 16 * v10 + 8), 0.0);
        double v12 = v11;
        if ((unint64_t)v9 >= *v8)
        {
          unint64_t v14 = (double *)*v2;
          uint64_t v15 = ((char *)v9 - (unsigned char *)*v2) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_190718FD4();
          }
          uint64_t v17 = *v8 - (void)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)sub_190732A30(a1 + 176, v18);
            unint64_t v14 = *(double **)(a1 + 160);
            uint64_t v9 = *(double **)(a1 + 168);
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (double *)&v19[8 * v15];
          *uint64_t v20 = v12;
          uint64_t v13 = v20 + 1;
          while (v9 != v14)
          {
            uint64_t v21 = *((void *)v9-- - 1);
            *((void *)v20-- - 1) = v21;
          }
          *(void *)(a1 + 160) = v20;
          *(void *)(a1 + 168) = v13;
          *(void *)(a1 + 176) = &v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *uint64_t v9 = v11;
          uint64_t v13 = v9 + 1;
        }
        *(void *)(a1 + 168) = v13;
        *(double *)(a1 + 40) = v12 + *(double *)(a1 + 40);
        ++v10;
        uint64_t v7 = *(void *)(a1 + 136);
        uint64_t v9 = v13;
      }
      while (v10 < (*(void *)(a1 + 144) - v7) >> 4);
    }
    return 1;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
  }
  unint64_t v22 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_ERROR, "CLMM,computeSegmentLengthsAndHeading,CoordinateCount is 0", buf, 2u);
  }
  uint64_t result = sub_1906CB57C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
    }
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLMapRoad::computeSegmentDistances()", "CoreLocation: %s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
    return 0;
  }
  return result;
}

void sub_190823A60(void **a1, unint64_t a2)
{
  BOOL v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_190718FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_190732A30(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    double v11 = (char *)a1[1];
    double v12 = v7;
    if (v11 != *a1)
    {
      double v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

double sub_190823B08(uint64_t a1, signed int a2)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (void **)(a1 + 184);
  if (*(void *)(a1 + 184) == *(void *)(a1 + 192))
  {
    uint64_t v10 = *(void *)(a1 + 136);
    uint64_t v11 = *(void *)(a1 + 144);
    if (v10 == v11)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
      }
      uint64_t v40 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_ERROR, "CLMM,computeSegmentLengthsAndHeading,CoordinateCount is 0", buf, 2u);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
        }
        LOWORD(v48) = 0;
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLMapRoad::computeSegmentHeadings()", "CoreLocation: %s\n", v41);
        if (v41 != (char *)buf) {
          free(v41);
        }
      }
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      long long v44 = xmmword_1908820F0;
      uint64_t v47 = 0x3FF0000000000000;
      sub_190823A60((void **)(a1 + 184), ((v11 - v10) >> 4) - 1);
      ++qword_1E92A04C0;
      uint64_t v12 = *(void *)(a1 + 136);
      if ((unint64_t)(*(void *)(a1 + 144) - v12) >= 0x11)
      {
        unint64_t v13 = 1;
        do
        {
          unint64_t v14 = (double *)(v12 + 16 * v13);
          uint64_t v15 = v14 - 2;
          unint64_t v16 = v14 - 1;
          uint64_t v17 = (uint64_t *)(v14 + 1);
          double v18 = sub_190839D14((double *)&v44, *(v14 - 2), *(v14 - 1), *v14, v14[1]);
          if (v18 < 0.0)
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
            }
            uint64_t v19 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
            {
              double v20 = *v14;
              uint64_t v21 = *v17;
              uint64_t v22 = *(void *)v15;
              uint64_t v23 = *(void *)v16;
              *(_DWORD *)uint64_t buf = 134284289;
              double v57 = v20;
              __int16 v58 = 2049;
              uint64_t v59 = v21;
              __int16 v60 = 2049;
              uint64_t v61 = v22;
              __int16 v62 = 2049;
              uint64_t v63 = v23;
              _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLMM,invalid heading for CLMapRoad coordinate,%{private}.7lf,%{private}.7lf,prev,%{private}.7lf,%{private}.7lf", buf, 0x2Au);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
              }
              double v35 = *v14;
              uint64_t v36 = *v17;
              uint64_t v37 = *(void *)v15;
              uint64_t v38 = *(void *)v16;
              int v48 = 134284289;
              double v49 = v35;
              __int16 v50 = 2049;
              uint64_t v51 = v36;
              __int16 v52 = 2049;
              uint64_t v53 = v37;
              __int16 v54 = 2049;
              uint64_t v55 = v38;
              double v39 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLMapRoad::computeSegmentHeadings()", "CoreLocation: %s\n", v39);
              if (v39 != (char *)buf) {
                free(v39);
              }
            }
          }
          uint64_t v25 = *(double **)(a1 + 192);
          unint64_t v24 = *(void *)(a1 + 200);
          if ((unint64_t)v25 >= v24)
          {
            uint64_t v27 = (double *)*v4;
            uint64_t v28 = ((char *)v25 - (unsigned char *)*v4) >> 3;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 61) {
              sub_190718FD4();
            }
            uint64_t v30 = v24 - (void)v27;
            if (v30 >> 2 > v29) {
              unint64_t v29 = v30 >> 2;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v29;
            }
            if (v31)
            {
              double v32 = (char *)sub_190732A30(a1 + 200, v31);
              uint64_t v27 = *(double **)(a1 + 184);
              uint64_t v25 = *(double **)(a1 + 192);
            }
            else
            {
              double v32 = 0;
            }
            double v33 = (double *)&v32[8 * v28];
            *double v33 = v18;
            uint64_t v26 = v33 + 1;
            while (v25 != v27)
            {
              uint64_t v34 = *((void *)v25-- - 1);
              *((void *)v33-- - 1) = v34;
            }
            *(void *)(a1 + 184) = v33;
            *(void *)(a1 + 192) = v26;
            *(void *)(a1 + 200) = &v32[8 * v31];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            double *v25 = v18;
            uint64_t v26 = v25 + 1;
          }
          *(void *)(a1 + 192) = v26;
          ++v13;
          uint64_t v12 = *(void *)(a1 + 136);
        }
        while (v13 < (*(void *)(a1 + 144) - v12) >> 4);
      }
    }
  }
  uint64_t v5 = *(void *)(a1 + 184);
  if (a2 < (unint64_t)((*(void *)(a1 + 192) - v5) >> 3)) {
    return *(double *)(v5 + 8 * a2);
  }
  double v6 = -1.0;
  if (((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 4) - 1 > (unint64_t)a2)
  {
    double v6 = sub_19082418C(a1, a2, a2 + 1);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
    }
    uint64_t v7 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      double v8 = *(double *)a1;
      *(_DWORD *)uint64_t buf = 134283777;
      double v57 = v8;
      __int16 v58 = 1026;
      LODWORD(v59) = a2;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_ERROR, "CLMM,getHeadingForSegment,stored bearing value unavailble,had to be calculated,%{private}lld,index,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
      }
      double v42 = *(double *)a1;
      int v48 = 134283777;
      double v49 = v42;
      __int16 v50 = 1026;
      LODWORD(v51) = a2;
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "double CLMapRoad::getHeadingForSegment(const int)", "CoreLocation: %s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
  }
  return v6;
}

double sub_19082418C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  double result = -1.0;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 136);
    unint64_t v5 = (unint64_t)(*(void *)(a1 + 144) - v4) >> 4;
    if ((int)v5 > (int)a2 && (a3 & 0x80000000) == 0 && v4 && (int)v5 > (int)a3)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      long long v6 = xmmword_1908820F0;
      uint64_t v9 = 0x3FF0000000000000;
      return sub_190839D14((double *)&v6, *(double *)(v4 + 16 * a2), *(double *)(v4 + 16 * a2 + 8), *(double *)(v4 + 16 * a3), *(double *)(v4 + 16 * a3 + 8));
    }
  }
  return result;
}

uint64_t sub_190824208(uint64_t a1)
{
  uint64_t v1 = (*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 4;
  if ((int)v1 < 3) {
    return 0;
  }
  signed int v3 = 0;
  uint64_t v4 = 0;
  int v5 = v1 - 1;
  double v6 = -1.0;
  do
  {
    double v7 = sub_190823B08(a1, v3);
    if (v7 >= 0.0)
    {
      double v8 = v7;
      if (v6 >= 0.0)
      {
        double v9 = fmod(v7 - v6, 360.0);
        if (v9 < 0.0) {
          double v9 = v9 + 360.0;
        }
        if (v9 > 180.0) {
          double v9 = v9 + -360.0;
        }
        if (fabs(v9) <= 7.5) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = (v4 + 1);
        }
      }
    }
    else
    {
      double v8 = v6;
    }
    ++v3;
    double v6 = v8;
  }
  while (v5 != v3);
  return v4;
}

BOOL sub_1908242FC(uint64_t a1, int a2, double a3, double a4)
{
  if (((*(void *)(a1 + 144) - *(void *)(a1 + 136)) & 0xFFFFFFFF0) == 0x20) {
    return 0;
  }
  sub_19082373C(a1);
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = *(void *)(a1 + 168) - v8;
  if (!v9) {
    return 0;
  }
  uint64_t v10 = 0;
  unint64_t v11 = v9 >> 3;
  double v12 = *(double *)(a1 + 40) * a3;
  if (v11 <= 1) {
    unint64_t v11 = 1;
  }
  while (1)
  {
    double v12 = v12 - *(double *)(v8 + 8 * v10);
    if (v12 <= 0.0) {
      break;
    }
    if (v11 == ++v10) {
      return 0;
    }
  }
  if (!v10)
  {
    double v20 = sub_190823B08(a1, 0);
    double v21 = sub_190823B08(a1, 1);
    double v16 = v21;
    if (v20 >= 0.0 && v21 >= 0.0)
    {
      double v22 = fmod(v20 - v21, 360.0);
      if (v22 < 0.0) {
        double v22 = v22 + 360.0;
      }
      if (v22 > 180.0) {
        double v22 = v22 + -360.0;
      }
      if (fabs(v22) > a4) {
        return 1;
      }
    }
    if (a2)
    {
      uint64_t v23 = a1;
      signed int v24 = 2;
      goto LABEL_39;
    }
    return 0;
  }
  double v14 = sub_190823B08(a1, (int)v10 - 1);
  double v15 = sub_190823B08(a1, v10);
  double v16 = v15;
  if (v14 < 0.0 || v15 < 0.0)
  {
    if (a2)
    {
LABEL_31:
      double v25 = sub_190823B08(a1, (int)v10 - 2);
      if (v14 >= 0.0 && v25 >= 0.0)
      {
        double v26 = fmod(v25 - v14, 360.0);
        if (v26 < 0.0) {
          double v26 = v26 + 360.0;
        }
        if (v26 > 180.0) {
          double v26 = v26 + -360.0;
        }
        if (fabs(v26) > a4) {
          return 1;
        }
      }
      signed int v24 = v10 + 1;
      uint64_t v23 = a1;
LABEL_39:
      double v27 = sub_190823B08(v23, v24);
      if (v16 >= 0.0 && v27 >= 0.0)
      {
        double v28 = fmod(v16 - v27, 360.0);
        if (v28 < 0.0) {
          double v28 = v28 + 360.0;
        }
        if (v28 > 180.0) {
          double v28 = v28 + -360.0;
        }
        if (fabs(v28) > a4) {
          return 1;
        }
      }
    }
    return 0;
  }
  double v17 = fmod(v14 - v15, 360.0);
  if (v17 < 0.0) {
    double v17 = v17 + 360.0;
  }
  if (v17 > 180.0) {
    double v17 = v17 + -360.0;
  }
  double v18 = fabs(v17);
  BOOL result = v18 > a4;
  if (v18 <= a4 && a2 != 0) {
    goto LABEL_31;
  }
  return result;
}

uint64_t sub_190824580(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  uint64_t result = sub_19082467C(a1, a2);
  if (result)
  {
    uint64_t result = sub_1908246E0(a1, a2);
    if (result)
    {
      uint64_t v6 = *(void *)(a1 + 136);
      unint64_t v7 = (unint64_t)(*(void *)(a1 + 144) - v6) >> 4;
      uint64_t v8 = *(void *)(v2 + 136);
      uint64_t v9 = *(void *)(v2 + 144) - v8;
      if (v7 == ((unint64_t)v9 >> 4))
      {
        if ((int)v7 < 3) {
          return 1;
        }
        uint64_t v10 = (v7 - 1);
        uint64_t v11 = (int)(v9 >> 4);
        unsigned int v12 = v7 - 2;
        uint64_t v13 = 1;
        float64x2_t v14 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
        uint64_t result = 1;
        while (1)
        {
          uint64_t v15 = v13 + 1;
          if ((v12 & 0x80000000) == 0 && v13 < v11)
          {
            if (v6)
            {
              if ((int)v15 >= 1)
              {
                int32x2_t v16 = vmovn_s64(vcgtq_f64(v14, vabdq_f64(*(float64x2_t *)(v8 + 16 * v13), *(float64x2_t *)(v6 + 16 * v12))));
                if ((vand_s8((int8x8_t)v16, (int8x8_t)vdup_lane_s32(v16, 1)).u8[0] & 1) == 0) {
                  break;
                }
              }
            }
          }
          --v12;
          ++v13;
          if (v10 == v15) {
            return result;
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_19082467C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    signed int v3 = *(float64x2_t **)(a1 + 136);
    float64x2_t v4 = 0uLL;
    float64x2_t v5 = 0uLL;
    if (*(float64x2_t **)(a1 + 144) != v3) {
      float64x2_t v5 = *v3;
    }
    uint64_t v6 = *(void *)(v2 + 144);
    if (v6 != *(void *)(v2 + 136)) {
      float64x2_t v4 = *(float64x2_t *)(v6 - 16);
    }
    int32x2_t v7 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5, v4)));
    LOBYTE(v2) = vand_s8((int8x8_t)v7, (int8x8_t)vdup_lane_s32(v7, 1)).u8[0];
  }
  return v2 & 1;
}

uint64_t sub_1908246E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(a1 + 144);
    float64x2_t v4 = 0uLL;
    float64x2_t v5 = 0uLL;
    if (v3 != *(void *)(a1 + 136)) {
      float64x2_t v5 = *(float64x2_t *)(v3 - 16);
    }
    uint64_t v7 = v2 + 136;
    uint64_t v6 = *(float64x2_t **)(v2 + 136);
    if (*(float64x2_t **)(v7 + 8) != v6) {
      float64x2_t v4 = *v6;
    }
    int32x2_t v8 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5, v4)));
    LOBYTE(v2) = vand_s8((int8x8_t)v8, (int8x8_t)vdup_lane_s32(v8, 1)).u8[0];
  }
  return v2 & 1;
}

uint64_t sub_190824744(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(float64x2_t **)(a1 + 136);
    float64x2_t v4 = 0uLL;
    float64x2_t v5 = 0uLL;
    if (*(float64x2_t **)(a1 + 144) != v3) {
      float64x2_t v5 = *v3;
    }
    uint64_t v7 = v2 + 136;
    uint64_t v6 = *(float64x2_t **)(v2 + 136);
    if (*(float64x2_t **)(v7 + 8) != v6) {
      float64x2_t v4 = *v6;
    }
    int32x2_t v8 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5, v4)));
    LOBYTE(v2) = vand_s8((int8x8_t)v8, (int8x8_t)vdup_lane_s32(v8, 1)).u8[0];
  }
  return v2 & 1;
}

uint64_t sub_1908247A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *(void *)(a1 + 144);
    float64x2_t v4 = 0uLL;
    float64x2_t v5 = 0uLL;
    if (v3 != *(void *)(a1 + 136)) {
      float64x2_t v5 = *(float64x2_t *)(v3 - 16);
    }
    uint64_t v6 = *(void *)(v2 + 144);
    if (v6 != *(void *)(v2 + 136)) {
      float64x2_t v4 = *(float64x2_t *)(v6 - 16);
    }
    int32x2_t v7 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v5, v4)));
    LOBYTE(v2) = vand_s8((int8x8_t)v7, (int8x8_t)vdup_lane_s32(v7, 1)).u8[0];
  }
  return v2 & 1;
}

uint64_t sub_19082480C(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0;
  }
  if (sub_190824744(a1, a2)) {
    return 1;
  }

  return sub_1908246E0(a1, a2);
}

uint64_t sub_190824870(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0;
  }
  if (sub_1908247A8(a1, a2)) {
    return 1;
  }

  return sub_19082467C(a1, a2);
}

uint64_t sub_1908248D4(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0;
  }
  if (sub_190824744(a1, a2)) {
    return 1;
  }

  return sub_19082467C(a1, a2);
}

uint64_t sub_190824938(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0;
  }
  if (sub_1908247A8(a1, a2)) {
    return 1;
  }

  return sub_1908246E0(a1, a2);
}

uint64_t sub_19082499C(uint64_t a1, uint64_t *a2)
{
  if (!*a2) {
    return 0;
  }
  if (sub_1908248D4(a1, a2)) {
    return 1;
  }

  return sub_190824938(a1, a2);
}

uint64_t sub_190824A00(uint64_t a1)
{
  uint64_t v2 = *(float64x2_t **)(a1 + 136);
  uint64_t v1 = *(void *)(a1 + 144);
  if ((unint64_t)(v1 - (void)v2) >= 0x20)
  {
    if (v1 - (void)v2 != 32) {
      return 1;
    }
    int32x2_t v3 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(*(float64x2_t *)(v1 - 16), *v2)));
    if ((vand_s8((int8x8_t)v3, (int8x8_t)vdup_lane_s32(v3, 1)).u32[0] & 1) == 0) {
      return 1;
    }
  }
  uint64_t result = 0;
  ++qword_1E92A0168;
  return result;
}

uint64_t sub_190824A6C(uint64_t *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if ([a3 valueForKey:@"roadID"]) {
      *a1 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"roadID"), "longLongValue");
    }
    if ([a3 valueForKey:@"roadClass"]) {
      *((_DWORD *)a1 + 5) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"roadClass"), "intValue");
    }
    if ([a3 valueForKey:@"formOfWay"]) {
      *((_DWORD *)a1 + 6) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"formOfWay"), "intValue");
    }
    if ([a3 valueForKey:@"travelDirection"]) {
      *((_DWORD *)a1 + 18) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"travelDirection"), "intValue");
    }
    if ([a3 valueForKey:@"rampType"]) {
      *((_DWORD *)a1 + 19) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"rampType"), "intValue");
    }
    if ([a3 valueForKey:@"speedLimit"]) {
      *((double *)a1 + 4) = (double)(int)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"speedLimit"), "intValue");
    }
    if ([a3 valueForKey:@"isDrivable"]) {
      *((unsigned char *)a1 + 81) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"isDrivable"), "BOOLValue");
    }
    if ([a3 valueForKey:@"isRoadPedestrianNavigable"]) {
      char v36 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"isRoadPedestrianNavigable"), "BOOLValue");
    }
    else {
      char v36 = 0;
    }
    if ([a3 valueForKey:@"isTunnel"]) {
      *((unsigned char *)a1 + 18) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"isTunnel"), "BOOLValue");
    }
    if ([a3 valueForKey:@"isBridge"]) {
      *((unsigned char *)a1 + 19) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"isBridge"), "BOOLValue");
    }
    if ([a3 valueForKey:@"isRail"]) {
      *((unsigned char *)a1 + 17) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"isRail"), "BOOLValue");
    }
    if ([a3 valueForKey:@"startJunction"]) {
      *((_DWORD *)a1 + 27) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"startJunction"), "intValue");
    }
    if ([a3 valueForKey:@"stopJunction"]) {
      *((_DWORD *)a1 + 28) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"stopJunction"), "intValue");
    }
    if ([a3 valueForKey:@"startTileBorder"]) {
      *((unsigned char *)a1 + 116) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"startTileBorder"), "BOOLValue");
    }
    if ([a3 valueForKey:@"endTileBorder"]) {
      *((unsigned char *)a1 + 117) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"endTileBorder"), "BOOLValue");
    }
    if ([a3 valueForKey:@"bikeableSide"]) {
      *((_DWORD *)a1 + 22) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"bikeableSide"), "intValue");
    }
    if ([a3 valueForKey:@"walkableSide"]) {
      *((_DWORD *)a1 + 21) = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"walkableSide"), "intValue");
    }
    if ([a3 valueForKey:@"coordinateCount"])
    {
      int v10 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", @"coordinateCount"), "intValue");
      if (v10 >= 1)
      {
        int v11 = v10;
        uint64_t v12 = 0;
        while (1)
        {
          uint64_t v13 = (void *)MEMORY[0x192FCF260]();
          float64x2_t v14 = (void *)[(id)objc_msgSend(a3 valueForKey:objc_msgSend(NSString, "stringWithFormat:", @"coord%i", v12)), "componentsSeparatedByString:", @","];
          if ([v14 count] != 3) {
            break;
          }
          objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 0), "doubleValue");
          uint64_t v16 = v15;
          objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 1), "doubleValue");
          *(void *)uint64_t buf = v16;
          *(void *)&uint8_t buf[8] = v17;
          sub_1908235F0(a1, (float64x2_t *)buf, 1);
          uint64_t v18 = (a1[18] - a1[17]) & 0xFFFFFFFF0;
          objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 2), "doubleValue");
          if (v18 == 16) {
            uint64_t v20 = 15;
          }
          else {
            uint64_t v20 = 16;
          }
          a1[v20] = v19;
          uint64_t v12 = (v12 + 1);
          if (v11 == v12) {
            goto LABEL_53;
          }
        }
        return 0;
      }
    }
LABEL_53:
    int v21 = *((unsigned __int8 *)a1 + 17);
    char v22 = v36;
    if ((*((_DWORD *)a1 + 21) - 1) < 3) {
      char v22 = 1;
    }
    if (*((unsigned char *)a1 + 17)) {
      char v22 = 0;
    }
    *((unsigned char *)a1 + 80) = v22;
    if (v22)
    {
      char v23 = 1;
    }
    else
    {
      if (v21) {
        BOOL v24 = 1;
      }
      else {
        BOOL v24 = (*((_DWORD *)a1 + 22) - 1) >= 3;
      }
      char v23 = !v24;
    }
    *((unsigned char *)a1 + 82) = v23;
    uint64_t v25 = *((int *)a1 + 5);
    int v26 = *((_DWORD *)a1 + 18);
    if (v25 > 7)
    {
      double v28 = dbl_190882500[v26 == 0];
    }
    else
    {
      double v27 = (double *)&unk_190885E68;
      if (!v26) {
        double v27 = (double *)&unk_190885EA8;
      }
      double v28 = v27[v25];
    }
    *((double *)a1 + 12) = v28;
    if (v21) {
      BOOL v29 = 1;
    }
    else {
      BOOL v29 = v26 == 0;
    }
    char v30 = !v29;
    *((unsigned char *)a1 + 16) = v30;
    unint64_t v31 = (_OWORD *)a1[17];
    unint64_t v32 = a1[18] - (void)v31;
    if (a4)
    {
      if ((int)(v32 >> 4) <= 1)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
        }
        double v33 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v34 = *a1;
          unint64_t v35 = (unint64_t)(a1[18] - a1[17]) >> 4;
          *(_DWORD *)uint64_t buf = 134283777;
          *(void *)&uint8_t buf[4] = v34;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v35;
          _os_log_impl(&dword_1906B8000, v33, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,id,%{private}lld,has less than two coordinate,%{public}d", buf, 0x12u);
        }
        uint64_t result = sub_1906CB57C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
          }
          uint64_t v9 = (unsigned char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLMapRoad::fillFromMapHelperNSDictionaryArray(CLDistanceCalc &, NSDictionary * _Nonnull, BOOL)", "CoreLocation: %s\n");
LABEL_86:
          if (v9 != buf) {
            free(v9);
          }
          return 0;
        }
        return result;
      }
    }
    else
    {
      uint64_t result = 1;
      if (!v31 || (v32 & 0xFFFFFFFF0) != 0x10) {
        return result;
      }
      *(_OWORD *)uint64_t buf = *v31;
      sub_1908235F0(a1, (float64x2_t *)buf, 0);
    }
    return 1;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
  }
  uint64_t v6 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,fillFromMapHelperNSDictionaryArray,array is null", buf, 2u);
  }
  int v7 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE005F80);
    }
    uint64_t v9 = (unsigned char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLMapRoad::fillFromMapHelperNSDictionaryArray(CLDistanceCalc &, NSDictionary * _Nonnull, BOOL)", "CoreLocation: %s\n");
    goto LABEL_86;
  }
  return result;
}

os_log_t sub_19082528C()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_1908252BC()
{
}

uint64_t sub_1908252D4(void *a1)
{
  uint64_t v2 = (void *)[a1 objectForKey:@"Authorization"];
  if (v2)
  {
    unint64_t v3 = [v2 integerValue];
    if (v3 < 5) {
      return qword_190885F60[v3];
    }
    return 0;
  }
  float64x2_t v5 = (void *)[a1 objectForKey:@"Authorized"];
  if (!v5)
  {
    uint64_t v6 = (int)sub_190825E0C(a1, 1) - 3;
    if (v6 < 6) {
      return qword_190885F88[v6];
    }
    return 0;
  }
  if ([v5 BOOLValue]) {
    return 4;
  }
  else {
    return 1;
  }
}

uint64_t sub_190825378(void *a1, double a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = off_1E5698548;
  do
  {
    double v7 = dbl_190885EE8[v4];
    int32x2_t v8 = *v6;
    uint64_t v9 = (void *)[a1 objectForKey:*(v6 - 1)];
    uint64_t v10 = [a1 objectForKey:v8];
    int v11 = (void *)v10;
    if (v9) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      [v9 doubleValue];
      double v14 = v13;
      [v11 doubleValue];
      if (v14 <= v15)
      {
        BOOL v16 = 1;
        goto LABEL_15;
      }
      int v11 = 0;
    }
    BOOL v16 = v11 != 0;
    if (v9) {
      BOOL v17 = v11 == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (v17)
    {
LABEL_20:
      uint64_t v5 = dword_190885F38[v4] | v5;
      goto LABEL_21;
    }
LABEL_15:
    double v18 = a2 - v7;
    if (v18 > 0.0 && v16)
    {
      objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F1C9C8], "date"), "timeIntervalSinceReferenceDate");
      double v21 = v20;
      [v11 doubleValue];
      if (v18 - vabdd_f64(v22, v21) > 0.0) {
        goto LABEL_20;
      }
    }
LABEL_21:
    ++v4;
    v6 += 2;
  }
  while (v4 != 10);
  return v5;
}

id sub_1908254B0(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v22 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v2 = (void *)[a1 allKeys];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (!v3) {
    goto LABEL_31;
  }
  uint64_t v5 = v3;
  char v6 = 0;
  uint64_t v7 = *(void *)v24;
  *(void *)&long long v4 = 68289282;
  long long v21 = v4;
  do
  {
    uint64_t v8 = 0;
    do
    {
      if (*(void *)v24 != v7) {
        objc_enumerationMutation(v2);
      }
      uint64_t v9 = *(void *)(*((void *)&v23 + 1) + 8 * v8);
      objc_msgSend(a1, "objectForKeyedSubscript:", v9, v21);
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();
      int v11 = (void *)[a1 objectForKeyedSubscript:v9];
      if (isKindOfClass)
      {
        uint64_t v12 = [v11 objectAtIndexedSubscript:1];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v22 setObject:v12 forKeyedSubscript:v9];
        }
        else
        {
          if (qword_1EB2713D8 != -1) {
            dispatch_once(&qword_1EB2713D8, &unk_1EE005FA0);
          }
          double v13 = qword_1EB2713D0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713D0, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)uint64_t buf = v21;
            int v28 = 0;
            __int16 v29 = 2082;
            char v30 = "";
            __int16 v31 = 2114;
            uint64_t v32 = v12;
            _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp\", \"arr[1]\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1EB2713D8 != -1) {
              dispatch_once(&qword_1EB2713D8, &unk_1EE005FA0);
            }
          }
          double v14 = qword_1EB2713D0;
          if (os_signpost_enabled((os_log_t)qword_1EB2713D0))
          {
            *(_DWORD *)uint64_t buf = v21;
            int v28 = 0;
            __int16 v29 = 2082;
            char v30 = "";
            __int16 v31 = 2114;
            uint64_t v32 = v12;
            _os_signpost_emit_with_name_impl(&dword_1906B8000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp", "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp\", \"arr[1]\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        char v6 = 1;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          objc_msgSend(v22, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", v9), v9);
        }
        else
        {
          if (qword_1EB2713D8 != -1) {
            dispatch_once(&qword_1EB2713D8, &unk_1EE005FA0);
          }
          double v15 = qword_1EB2713D0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713D0, OS_LOG_TYPE_FAULT))
          {
            uint64_t v16 = [a1 objectForKeyedSubscript:v9];
            *(_DWORD *)uint64_t buf = v21;
            int v28 = 0;
            __int16 v29 = 2082;
            char v30 = "";
            __int16 v31 = 2114;
            uint64_t v32 = v16;
            _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp\", \"value\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1EB2713D8 != -1) {
              dispatch_once(&qword_1EB2713D8, &unk_1EE005FA0);
            }
          }
          BOOL v17 = qword_1EB2713D0;
          if (os_signpost_enabled((os_log_t)qword_1EB2713D0))
          {
            uint64_t v18 = [a1 objectForKeyedSubscript:v9];
            *(_DWORD *)uint64_t buf = v21;
            int v28 = 0;
            __int16 v29 = 2082;
            char v30 = "";
            __int16 v31 = 2114;
            uint64_t v32 = v18;
            _os_signpost_emit_with_name_impl(&dword_1906B8000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp", "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp\", \"value\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
      }
      ++v8;
    }
    while (v5 != v8);
    uint64_t v19 = [v2 countByEnumeratingWithState:&v23 objects:v33 count:16];
    uint64_t v5 = v19;
  }
  while (v19);
  if (v6) {
    return v22;
  }
LABEL_31:

  return a1;
}

uint64_t sub_19082591C(void *a1, int a2)
{
  char v4 = sub_1908252D4(a1);
  double v5 = 60.0;
  if (a2 != 2) {
    double v5 = 0.0;
  }
  if (a2 == 1) {
    double v5 = 10.0;
  }
  if ((v4 & 6) != 0) {
    double v6 = v5;
  }
  else {
    double v6 = -1.0;
  }
  int v7 = sub_190825378(a1, v6);
  id v8 = sub_1908254B0((void *)[a1 objectForKeyedSubscript:0x1EE00AC80]);
  if (v8) {
    LODWORD(v8) = sub_190825378(v8, v6);
  }
  if (((v8 | v7) & 0x240) != 0) {
    return 2;
  }
  if (!(v8 | v7)) {
    return 0;
  }
  uint64_t v10 = (void *)[a1 objectForKeyedSubscript:0x1EE00A7A0];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    int v11 = [v10 intValue];
  }
  else {
    int v11 = 0;
  }
  uint64_t v12 = (void *)[a1 objectForKeyedSubscript:0x1EE00AC60];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned int v13 = [v12 BOOLValue] ^ 1;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v11) {
    return 1;
  }
  else {
    return v13;
  }
}

BOOL sub_190825A60(void *a1)
{
  id v2 = sub_1908254B0((void *)[a1 objectForKeyedSubscript:0x1EE00AC80]);
  if ([a1 objectForKey:@"FenceTimeStarted"]
    || [v2 objectForKeyedSubscript:@"FenceTimeStarted"])
  {
    return 1;
  }
  unint64_t v4 = 0;
  do
  {
    unint64_t v5 = v4;
    if (v4 == 11) {
      break;
    }
    double v6 = off_1E56984E0[v4 + 1];
    if ([a1 objectForKey:v6]) {
      break;
    }
    uint64_t v7 = [v2 objectForKeyedSubscript:v6];
    unint64_t v4 = v5 + 1;
  }
  while (!v7);
  return v5 < 0xB;
}

uint64_t sub_190825B20(void *a1)
{
  uint64_t v1 = (void *)[a1 objectForKey:@"SupportedAuthorizationMask"];
  if (v1) {
    return [v1 integerValue] & 7;
  }
  else {
    return 5;
  }
}

BOOL sub_190825B54(void *a1)
{
  return objc_msgSend((id)objc_msgSend(a1, "objectForKey:", @"CorrectiveCompensationEnabled"), "integerValue") == 2;
}

void *sub_190825B80(void *a1)
{
  os_log_t result = (void *)[a1 objectForKey:@"IncidentalUseMode"];
  if (result)
  {
    os_log_t result = (void *)[result integerValue];
    if ((unint64_t)result >= 4) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_190825BB0(void *a1, const char *a2)
{
  return [a1 objectForKey:@"InterestZones"];
}

void *sub_190825BBC(void *a1)
{
  os_log_t result = (void *)[a1 objectForKey:@"Relevant"];
  if (result)
  {
    return (void *)[result BOOLValue];
  }
  return result;
}

uint64_t sub_190825BF8(void *a1)
{
  uint64_t v1 = (void *)[a1 objectForKey:@"BackgroundIndicatorEnabled"];
  if (!v1) {
    return 1;
  }

  return [v1 BOOLValue];
}

uint64_t sub_190825C38(void *a1)
{
  uint64_t v2 = sub_190825CB0(a1);
  id v3 = sub_1908254B0((void *)[a1 objectForKeyedSubscript:0x1EE00AC80]);
  if (!v3)
  {
    uint64_t v4 = 0;
    if (v2) {
      goto LABEL_3;
    }
    return v4;
  }
  uint64_t v4 = sub_190825CB0(v3);
  if (!v2) {
    return v4;
  }
LABEL_3:

  return MEMORY[0x1F4181798](v2, sel_laterDate_);
}

uint64_t sub_190825CB0(void *a1)
{
  unint64_t v2 = 0;
  char v3 = 0;
  double v4 = 2.22507386e-308;
  while (2)
  {
    unint64_t v5 = v2;
    while ((v5 | 8) == 0xA)
    {
LABEL_11:
      BOOL v10 = v5 > 0x11;
      v5 += 2;
      if (v10)
      {
        if ((v3 & 1) == 0) {
          return 0;
        }
        goto LABEL_20;
      }
    }
    double v6 = (void *)[a1 objectForKey:off_1E5698540[v5]];
    uint64_t v7 = [a1 objectForKey:*(__CFString **)((char *)off_1E5698540 + ((8 * v5) | 8))];
    id v8 = (void *)v7;
    if (v6) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      if (v6) {
        break;
      }
      if (v7) {
        goto LABEL_15;
      }
      goto LABEL_11;
    }
    [v6 doubleValue];
    double v12 = v11;
    [v8 doubleValue];
    if (v12 <= v13)
    {
LABEL_15:
      [v8 doubleValue];
      if (v14 > v4) {
        double v4 = v14;
      }
      unint64_t v2 = v5 + 2;
      char v3 = 1;
      if (v5 > 0x11)
      {
LABEL_20:
        double v15 = (void *)MEMORY[0x1E4F1C9C8];
        return [v15 dateWithTimeIntervalSinceReferenceDate:v4];
      }
      continue;
    }
    break;
  }
  BOOL v17 = (void *)MEMORY[0x1E4F1C9C8];

  return [v17 date];
}

uint64_t sub_190825E0C(void *a1, int a2)
{
  uint64_t v4 = [a1 objectForKey:@"BundleId"];
  CFStringRef v5 = (const __CFString *)[a1 objectForKey:@"BundlePath"];
  if (v4)
  {
    if (!a2) {
      return 1;
    }
    if ([a1 objectForKey:@"Registered"]) {
      return 1;
    }
    if ([a1 objectForKey:@"Authorized"]) {
      return 1;
    }
    uint64_t result = [a1 objectForKey:@"Authorization"];
    if (result) {
      return 1;
    }
  }
  else
  {
    uint64_t v7 = (__CFString *)v5;
    if (v5)
    {
      if (sub_19071778C(v5))
      {
        return 4;
      }
      else if (sub_190717960(v7))
      {
        return 5;
      }
      else if (sub_1907179B8(v7))
      {
        return 7;
      }
      else if (sub_190717544(v7))
      {
        return 8;
      }
      else if (sub_1907174DC(v7))
      {
        return 3;
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

os_log_t sub_190825F18()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

void sub_190825FFC()
{
}

void sub_19082612C(_Unwind_Exception *a1)
{
  MEMORY[0x192FCEAD0](v1, 0xA0C4046E95B3FLL);
  _Unwind_Resume(a1);
}

BOOL sub_190826160(uint64_t a1, const __CFString *a2)
{
  uint64_t v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v5 = (const __CFBoolean *)sub_19082624C(*(CFMutableDictionaryRef *)a1, a2, @"CLSystemService");
  CFBooleanRef v6 = v5;
  if (v5)
  {
    BOOL v7 = CFBooleanGetValue(v5) != 0;
    CFRelease(v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v7;
}

void sub_190826238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19082624C(CFMutableDictionaryRef theDict, const __CFString *key, const __CFString *a3)
{
  value = 0;
  if (!key) {
    goto LABEL_10;
  }
  if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value))
  {
    if (value)
    {
      CFRetain(value);
      goto LABEL_7;
    }
LABEL_10:
    BOOL v7 = (void *)*MEMORY[0x1E4F1CFC8];
    CFDictionarySetValue(theDict, key, (const void *)*MEMORY[0x1E4F1CFC8]);
    return v7;
  }
  CFBooleanRef v6 = (void *)sub_190717438(key, a3);
  value = v6;
  if (!v6) {
    goto LABEL_10;
  }
  CFDictionarySetValue(theDict, key, v6);
LABEL_7:
  BOOL v7 = value;
  if (!value) {
    goto LABEL_10;
  }
  CFTypeID v8 = CFGetTypeID(value);
  if (v8 != CFBooleanGetTypeID())
  {
    CFRelease(v7);
    goto LABEL_10;
  }
  return v7;
}

BOOL sub_19082631C(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v4 = (const __CFBoolean *)sub_19082624C(*(CFMutableDictionaryRef *)(v3 - 32), a2, @"CLIsFindMyiPhone");
  CFBooleanRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return v6;
}

void sub_1908263F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_190826404(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v4 = (const __CFBoolean *)sub_19082624C(*(CFMutableDictionaryRef *)(v3 - 24), a2, @"CLIsCoreRoutine");
  CFBooleanRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return v6;
}

void sub_1908264D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1908264EC(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(void *)(a1 + 48) + 16))(a1 + 48);
  CFBooleanRef v4 = (const __CFBoolean *)sub_19082624C(*(CFMutableDictionaryRef *)(v3 - 8), a2, @"CLEmergencyService");
  CFBooleanRef v5 = v4;
  if (v4)
  {
    BOOL v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    BOOL v6 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  return v6;
}

void sub_1908265C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1906EB9DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_190829E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190829E90(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*a2)
  {
    if (+[CLMiLoConnectionInternal _isKnownNonActionableMessage:](CLMiLoConnectionInternal, "_isKnownNonActionableMessage:"))
    {
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
      CFBooleanRef v4 = qword_1E929F628;
      if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = CLConnectionMessage::name(*a2);
        if (*(char *)(v5 + 23) >= 0) {
          uint64_t v6 = v5;
        }
        else {
          uint64_t v6 = *(void *)v5;
        }
        uint64_t v7 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "allKeys"), "componentsJoinedByString:", @","), "UTF8String");
        *(_DWORD *)uint64_t buf = 68289538;
        int v20 = 0;
        __int16 v21 = 2082;
        id v22 = "";
        __int16 v23 = 2082;
        uint64_t v24 = v6;
        __int16 v25 = 2082;
        uint64_t v26 = v7;
        _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DefaultMessageHandler, known non-actionable message\", \"MessageName\":%{public, location:escape_only}s, \"DictionaryKeys\":%{public, location:escape_only}s}", buf, 0x26u);
      }
    }
    else
    {
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
      BOOL v10 = qword_1E929F628;
      if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = CLConnectionMessage::name(*a2);
        if (*(char *)(v11 + 23) >= 0) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = *(void *)v11;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v20 = 0;
        __int16 v21 = 2082;
        id v22 = "";
        __int16 v23 = 2082;
        uint64_t v24 = v12;
        _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"DefaultMessageHandler, message received\", \"MessageName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      double v13 = (void *)MEMORY[0x1E4F1CAD0];
      uint64_t v14 = objc_opt_class();
      uint64_t v15 = objc_opt_class();
      uint64_t v16 = objc_opt_class();
      BOOL v17 = (NSSet *)objc_msgSend(v13, "setWithObjects:", v14, v15, v16, objc_opt_class(), 0);
      if (*a2) {
        uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v17);
      }
      else {
        uint64_t DictionaryOfClasses = 0;
      }
      [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  else
  {
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    CFTypeID v8 = qword_1E929F628;
    if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "DefaultMessageHandler, received null response", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLMiLoConnectionInternal initWithInfo:delegate:delegateQueue:]_block_invoke", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

id sub_19082A230(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  unint64_t v2 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_ERROR, "CLMiLoConnection, connection to locationd interrupted", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    CFTypeID v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLMiLoConnectionInternal initWithInfo:delegate:delegateQueue:]_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v9 = *MEMORY[0x1E4F28568];
  BOOL v10 = @"Internal error";
  uint64_t v3 = objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v10, &v9, 1));
  CFBooleanRef v4 = [[CLMiLoConnectionStatus alloc] initWithConnectionState:0];
  uint64_t v5 = [[CLMiLoServiceStatus alloc] initWithServiceState:2 suspendReasons:0 serviceDescriptor:0 currentLocationOfInterestUuid:0 currentLocationOfInterestType:0 error:v3 serviceQualityInfo:0 places:0 metaInfo:0];
  id result = objc_loadWeak((id *)(a1 + 32));
  if (result)
  {
    uint64_t v7 = result;
    [result _notifyClientDidUpdateMiLoConnectionStatus:v4];
    [v7 _notifyClientDidUpdateServiceStatus:v5];
    return (id)[v7 _invalidateLocationClient];
  }
  return result;
}

__CFString *sub_19082A4A0(unint64_t a1)
{
  if (a1 > 0x24) {
    return @"No error";
  }
  else {
    return off_1E56986A8[a1];
  }
}

void sub_19082A9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1906BFE48(a10);
  }
  if (v10) {
    sub_1906BFE48(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19082AA08(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "received service event callback kCLConnectionMessageMiLoServiceEvent", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _registerForMiLoServiceEvents]_block_invoke", "CoreLocation: %s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  uint64_t v5 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  BOOL v10 = (NSSet *)objc_msgSend(v5, "setWithObjects:", v6, v7, v8, v9, objc_opt_class(), 0);
  return objc_msgSend(*(id *)(a1 + 32), "_handleDaemonEvent:", CLConnectionMessage::getDictionaryOfClasses(*a2, v10));
}

void sub_19082ADD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a11) {
    sub_1906BFE48(a11);
  }
  if (v20) {
    sub_1906BFE48(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_19082AF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19082AF9C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "received callback for kCLConnectionMessageMiLoPredictionEventUpdate", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _setHandlerForMiLoPredictionEvents]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  return objc_msgSend(*(id *)(a1 + 32), "_handlePredictionUpdateEvent:", CLConnectionMessage::getDictionaryOfClasses(*a2, v5));
}

void sub_19082B284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19082B404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19082B428(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "received callback for kCLConnectionMessageMiLoServiceDebugResponse", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _registerForMiLoDebugResponseEvents]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  return objc_msgSend(*(id *)(a1 + 32), "_handleDebugResponseEvent:", CLConnectionMessage::getDictionaryOfClasses(*a2, v5));
}

void sub_19082B710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19082B890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19082B8B4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "received callback for kCLConnectionMessageMiLoGenericEventResponse", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _registerForMiLoGenericEvents]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  return objc_msgSend(*(id *)(a1 + 32), "_handleGenericEvent:", CLConnectionMessage::getDictionaryOfClasses(*a2, v5));
}

void sub_19082BB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19082BDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19082BE00(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "received callback for kCLConnectionMessageMiLoConnectionStatusEvent", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _registerForMiLoConnectionStatusEvents]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  return objc_msgSend(*(id *)(a1 + 32), "_handleMiLoConnectionStatusEvent:", CLConnectionMessage::getDictionaryOfClasses(*a2, v5));
}

void sub_19082C0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19082C1A0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_didUpdateMiLoConnectionStatus_);
}

uint64_t sub_19082C240(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_didUpdateServiceStatus_);
}

uint64_t sub_19082C2E0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_didCreateServiceWithServiceIdentifier_);
}

uint64_t sub_19082C380(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_createServiceDidFailWithError_);
}

uint64_t sub_19082C430(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_deleteServiceDidFailForServiceWithIdentifier_withError_);
}

uint64_t sub_19082C4D8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_didDeleteServiceWithServiceIdentifier_);
}

uint64_t sub_19082C578(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_didFindMyServicesWithServiceDescriptors_);
}

uint64_t sub_19082C628(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_connectServiceDidFailWithServiceIdentifier_withError_);
}

uint64_t sub_19082C6D0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_didUpdatePrediction_);
}

uint64_t sub_19082C770(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_queryServiceDidFailWithError_);
}

uint64_t sub_19082C820(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_disconnectServiceDidFailWithServiceIdentifier_withError_);
}

uint64_t sub_19082C8D8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_didCompleteClientRequest_withError_);
}

uint64_t sub_19082C980(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 32);
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "exportDatabaseTablesResult"), "exportDir");
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "exportDatabaseTablesResult"), "fileName");
  objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "exportDatabaseTablesResult"), "sandboxExtensionTok");

  return MEMORY[0x1F4181798](v2, sel_miLoConnection_didExportMiLoDatabaseWithExportDir_withFileName_withSandboxExtensionToken_);
}

uint64_t sub_19082CA98(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 32);
  [*(id *)(a1 + 40) eventType];
  [*(id *)(a1 + 40) genericEventDescription];
  [*(id *)(a1 + 40) error];

  return MEMORY[0x1F4181798](v2, sel_miLoConnection_didGetGenericEventNotificationWithEventType_withDescription_withError_);
}

uint64_t sub_19082CBA4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_queryMiLoConnectionStatusDidFailWithError_);
}

uint64_t sub_19082CC44(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(*(void *)(a1 + 32) + 32), sel_miLoConnection_didCompleteObservationWithMetaInformation_);
}

void sub_1908305C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1906BFE48(a15);
  }
  if (v15) {
    sub_1906BFE48(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1908305EC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for creating a service\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to create a service, empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to create a service, empty response", "{\"msg%{public}.0s\":\"SPI request, failed to create a service, empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientCreateServiceDidFailWithError:", objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_190830BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1906BFE48(a17);
  }
  if (v17) {
    sub_1906BFE48(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190830BE4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for deleting a service\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to delete a service with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to delete a service with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to delete a service with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDeleteServiceDidFailWithServiceIdentifier:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_1908311BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  sub_1906BFE48(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_190831210(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for query my services\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to query my services with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to query my services with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to query my services with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientQueryServiceDidFailWithError:", objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_19083187C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1906BFE48(a18);
  }
  if (v18) {
    sub_1906BFE48(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1908318A8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEFAULT, "received response message for query MiLo connection status", buf, 2u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "-[CLMiLoConnectionInternal _queryMiLoConnectionStatus]_block_invoke", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "SPI request, failed to query MiLo connection status with empty response", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "-[CLMiLoConnectionInternal _queryMiLoConnectionStatus]_block_invoke", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v11 = *MEMORY[0x1E4F28568];
  uint64_t v12 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientQueryMiLoConnectionStatusDidFailWithError:", objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1)));
}

void sub_190832154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 72);
  if (v18) {
    sub_1906BFE48(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190832180(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"received response message for connect to a service\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2 && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5)) != 0)
  {
    uint64_t v7 = DictionaryOfClasses;
    if ((objc_msgSend((id)objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", 0x1EE00ACE0), "isEqualToNumber:", &unk_1EE0238D8) & 1) == 0)
    {
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
      uint64_t v8 = qword_1E929F628;
      if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"connect to service failed, set connectedServiceIdentifier to nil\"}", buf, 0x12u);
      }

      *(void *)(*(void *)(a1 + 32) + 48) = 0;
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
      uint64_t v9 = qword_1E929F628;
      if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"connect to service failed, unset handler for prediction updates\"}", buf, 0x12u);
      }
      [*(id *)(a1 + 32) _unsetHandlerForMiLoPredictionEvents];
    }
    return [*(id *)(a1 + 32) _handleDaemonEvent:v7];
  }
  else
  {
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v11 = qword_1E929F628;
    if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to connect to services with empty response\"}", buf, 0x12u);
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
    }
    uint64_t v12 = qword_1E929F628;
    if (os_signpost_enabled((os_log_t)qword_1E929F628))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to connect to services with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to connect to services with empty response\"}", buf, 0x12u);
    }
    uint64_t v13 = *MEMORY[0x1E4F28568];
    uint64_t v14 = @"Internal error";
    return objc_msgSend(*(id *)(a1 + 32), "_notifyClientConnectServiceDidFailWithServiceIdentifier:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1)));
  }
}

void sub_190832BCC(_Unwind_Exception *a1)
{
  sub_1906BFE48(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190832C28(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"received response message for disconnecting to a service\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2 && (uint64_t DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v5)) != 0)
  {
    uint64_t v7 = DictionaryOfClasses;
    if ((objc_msgSend((id)objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", 0x1EE00ACE0), "isEqualToNumber:", &unk_1EE0238D8) & 1) == 0)
    {
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
      uint64_t v8 = qword_1E929F628;
      if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"disconnect to service failed, recover connectedServiceIdentifier\"}", buf, 0x12u);
      }
      *(void *)(*(void *)(a1 + 32) + 48) = [*(id *)(a1 + 40) copy];
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
      uint64_t v9 = qword_1E929F628;
      if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v16 = 0;
        __int16 v17 = 2082;
        uint64_t v18 = "";
        _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"disconnect to service failed, set handler for prediction updates\"}", buf, 0x12u);
      }
      [*(id *)(a1 + 32) _setHandlerForMiLoPredictionEvents];
    }
    return [*(id *)(a1 + 32) _handleDaemonEvent:v7];
  }
  else
  {
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
    uint64_t v11 = qword_1E929F628;
    if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to disconnect service with empty response\"}", buf, 0x12u);
      if (qword_1E929F620 != -1) {
        dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
      }
    }
    uint64_t v12 = qword_1E929F628;
    if (os_signpost_enabled((os_log_t)qword_1E929F628))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v16 = 0;
      __int16 v17 = 2082;
      uint64_t v18 = "";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to disconnect service with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to disconnect service with empty response\"}", buf, 0x12u);
    }
    uint64_t v13 = *MEMORY[0x1E4F28568];
    uint64_t v14 = @"Internal error";
    return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDisconnectServiceDidFailWithError:serviceIdentifier:", objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1)), *(void *)(a1 + 40));
  }
}

void sub_19083350C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  sub_1906BFE48(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_190833560(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for requesting a MiLo prediction\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request a single shot prediction with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request a single shot prediction with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request a single shot prediction with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_190833D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  sub_1906BFE48(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_190833D90(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for requesting an observation\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request observation with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request observation with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request observation with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_190834554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  sub_1906BFE48(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1908345A8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for labeling an observation\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to label an observation with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to label an observation with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to label an observation with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_190834D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  sub_1906BFE48(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_190834DD4(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for labeling observations between dates\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to label observations between dates with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to label observations between dates with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to label observations between dates with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

uint64_t sub_190835070(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for removing labels\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to  remove labels with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to  remove labels with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to  remove labels with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_1908357EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 104);
  if (v18) {
    sub_1906BFE48(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190835818(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for removing a custom LOI\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to  remove a custom LOI with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to  remove a custom LOI with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to  remove a custom LOI with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_190835F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 104);
  if (v18) {
    sub_1906BFE48(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190835FC0(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for start updating MicroLocation\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to tart updating MicroLocation with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to tart updating MicroLocation with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to tart updating MicroLocation with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_190836728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1906BFE48(a17);
  }
  if (v17) {
    sub_1906BFE48(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190836754(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for stop updating MicroLocation\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to stop updating MicroLocation with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to stop updating MicroLocation with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to stop updating MicroLocation with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_190836EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 104);
  if (v18) {
    sub_1906BFE48(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190836EEC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for MicroLocation learning\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request MicroLocation learning with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request MicroLocation learning with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request MicroLocation learning with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_1908374BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 88);
  if (v18) {
    sub_1906BFE48(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1908374E8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for MicroLocation purge data\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request Purge MiLo Data with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request Purge MiLo Data with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request Purge MiLo Data with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

void sub_190837C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1906BFE48(a17);
  }
  if (v17) {
    sub_1906BFE48(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190837C7C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for Export MiLo Database\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to request Export MiLo Database with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to request Export MiLo Database with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to request Export MiLo Database with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

uint64_t sub_190837F18(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  CFBooleanRef v4 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received response message for enable MiLo at current location\"}", buf, 0x12u);
  }
  uint64_t v5 = (NSSet *)objc_msgSend(MEMORY[0x1E4F1CAD0], "setWithObjects:", objc_opt_class(), 0);
  if (*a2)
  {
    uint64_t DictionaryOfClasses = CLConnectionMessage::getDictionaryOfClasses(*a2, v5);
    if (DictionaryOfClasses) {
      return [*(id *)(a1 + 32) _handleDaemonEvent:DictionaryOfClasses];
    }
  }
  if (qword_1E929F620 != -1) {
    dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
  }
  uint64_t v8 = qword_1E929F628;
  if (os_log_type_enabled((os_log_t)qword_1E929F628, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"SPI request, failed to enable MiLo at current location with empty response\"}", buf, 0x12u);
    if (qword_1E929F620 != -1) {
      dispatch_once(&qword_1E929F620, &unk_1EE005FE0);
    }
  }
  uint64_t v9 = qword_1E929F628;
  if (os_signpost_enabled((os_log_t)qword_1E929F628))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    _os_signpost_emit_with_name_impl(&dword_1906B8000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SPI request, failed to enable MiLo at current location with empty response", "{\"msg%{public}.0s\":\"SPI request, failed to enable MiLo at current location with empty response\"}", buf, 0x12u);
  }
  uint64_t v10 = *MEMORY[0x1E4F28568];
  uint64_t v11 = @"Internal error";
  return objc_msgSend(*(id *)(a1 + 32), "_notifyClientDidCompleteClientRequest:withError:", *(void *)(a1 + 40), objc_msgSend(MEMORY[0x1E4F28C58], "errorWithDomain:code:userInfo:", @"kCLErrorDomainPrivate", 0, objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1)));
}

uint64_t sub_190838290(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 8) _registerForMiLoServiceEvents];
  [*(id *)(*(void *)(a1 + 32) + 8) _registerForMiLoDebugResponseEvents];
  [*(id *)(*(void *)(a1 + 32) + 8) _registerForMiLoConnectionStatusEvents];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);

  return MEMORY[0x1F4181798](v2, sel__registerForMiLoGenericEvents);
}

uint64_t sub_19083838C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__teardown);
}

uint64_t sub_1908384CC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__createServiceWithServiceType_locationTypes_);
}

uint64_t sub_1908385AC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__deleteServiceWithIdentifier_);
}

uint64_t sub_19083862C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__queryMyServices);
}

uint64_t sub_1908386A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queryMiLoConnectionStatus];
}

uint64_t sub_1908386B0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__connectServiceWithIdentifier_);
}

uint64_t sub_1908386BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _disconnectServiceWithIdentifier:*(void *)(a1 + 40)];
}

uint64_t sub_19083875C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__requestMiLoPredictionWithRequestIdentifier_);
}

uint64_t sub_19083880C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__requestObservationWithRequestIdentifier_placeIdentifier_);
}

uint64_t sub_190838948(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__labelEventWithRequestIdentifier_placeIdentifier_observationIdentifier_);
}

uint64_t sub_190838AD8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__labelEventsWithStartDate_endDate_placeIdentifier_requestIdentifier_);
}

uint64_t sub_190838BD8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__removeLabels_withRequestIdentifier_);
}

uint64_t sub_190838CD0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__removeCustomLocationOfInterestFromMonitoringWithIdentifier_withRequestIdentifier_);
}

uint64_t sub_190838DC8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__startUpdatingMicroLocationWithConfiguration_withRequestIdentifier_);
}

uint64_t sub_190838E6C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__stopUpdatingMicroLocationWithRequestIdentifier_);
}

uint64_t sub_190838E78(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__requestModelLearningWithRequestIdentifier_);
}

uint64_t sub_190838F18(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__purgeAllMiLoDataWithRequestIdentifier_);
}

uint64_t sub_190838FB8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__requestExportDatabaseWithRequestIdentifier_);
}

uint64_t sub_190839058(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__createCustomLocationOfInterestAtCurrentLocationWithRequestIdentifier_);
}

os_log_t sub_19083906C()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Microlocation");
  qword_1E929F628 = (uint64_t)result;
  return result;
}

void sub_19083909C(void *a1, char *a2, void *a3)
{
  uint64_t v6 = operator new(0x70uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE005260;
  sub_1906D5C70(__p, a2);
  MEMORY[0x192FCE840](v6 + 3, __p, *a3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_190839134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_190839164(void *a1, char *a2, void *a3)
{
  uint64_t v6 = operator new(0x70uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_1EE005260;
  sub_1906D5C70(__p, a2);
  MEMORY[0x192FCE840](v6 + 3, __p, *a3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_1908391FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

long double sub_19083922C(double a1, double a2, double a3, double a4)
{
  double v4 = a3;
  long double result = 0.0;
  if (a3 > 90.0 || a1 < -90.0 || a1 > 90.0 || a3 < -90.0) {
    return result;
  }
  double v7 = a4 + 360.0;
  if (a4 >= 0.0) {
    double v7 = a4;
  }
  double v8 = a2 + 360.0;
  if (a2 >= 0.0) {
    double v8 = a2;
  }
  double v9 = v8 - v7;
  if (v9 <= 180.0)
  {
    if (v9 < -180.0) {
      double v9 = v9 + 360.0;
    }
  }
  else
  {
    double v9 = v9 + -360.0;
  }
  if (fabs(a1 + v4) >= 0.0001)
  {
    double v42 = a2;
    double v43 = a4;
LABEL_18:
    double v11 = v9;
    goto LABEL_19;
  }
  double v10 = fabs(a1);
  if (v10 < 0.0001 && 180.0 - fabs(v9) < 0.0001) {
    return 20037508.3;
  }
  BOOL v41 = fabs(v10 + -90.0) < 0.0001;
  if (v41) {
    double v11 = 0.0;
  }
  else {
    double v11 = v9;
  }
  double v42 = a2;
  double v43 = a4;
  if (!v41 && 180.0 - fabs(v9) >= 0.0001) {
    goto LABEL_18;
  }
  if (a1 <= v4) {
    double v4 = v4 + -0.0001;
  }
  else {
    a1 = a1 + -0.0001;
  }
LABEL_19:
  double v12 = v11 * 0.0174532925;
  double v44 = a1;
  double v13 = tan(a1 * 0.0174532925);
  long double v14 = tan(v4 * 0.0174532925);
  long double v15 = v13 * 0.996647189;
  long double v16 = v14 * 0.996647189;
  double v17 = atan(v15);
  double v18 = atan(v16);
  __double2 v19 = __sincos_stret(v17);
  __double2 v20 = __sincos_stret(v18);
  unsigned int v21 = 0;
  double v22 = v19.__cosval * v20.__cosval;
  double v23 = v12;
  while (1)
  {
    __double2 v24 = __sincos_stret(v23);
    double v25 = sqrt((-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)* (-(v19.__sinval * v20.__cosval) * v24.__cosval + v19.__cosval * v20.__sinval)+ v20.__cosval * v24.__sinval * (v20.__cosval * v24.__sinval));
    if (v25 < 2.22044605e-15) {
      break;
    }
    double v26 = v22 * v24.__cosval + v19.__sinval * v20.__sinval;
    double v27 = fabs(v26);
    if (fabs(v25) > 1.0 || v27 > 1.0) {
      break;
    }
    double v29 = atan2(v25, v26);
    double v30 = v22 * v24.__sinval / v25;
    if (v30 > 1.0) {
      break;
    }
    double v31 = 1.0 - v30 * v30;
    if (fabs(v31) >= 2.22044605e-15)
    {
      double v33 = v26 - (v19.__sinval + v19.__sinval) * v20.__sinval / v31;
      double v32 = v31 * 0.000209550667 * ((v31 * -3.0 + 4.0) * 0.00335281066 + 4.0);
    }
    else
    {
      double v32 = 0.0;
      double v33 = -1.0;
    }
    double v34 = v30 * ((1.0 - v32) * 0.00335281066);
    double v35 = v33 * v33 * 2.0 + -1.0;
    double v36 = v12 + v34 * (v29 + v25 * v32 * (v33 + v26 * v32 * v35));
    if (vabdd_f64(v36, v23) > 0.000000001)
    {
      double v23 = v36;
      if (v21++ < 0x31) {
        continue;
      }
    }
    double v38 = v31 * 2.72331606e11 / 4.04083e13;
    double v39 = v38 * 0.0000610351562 * (v38 * (v38 * (v38 * -175.0 + 320.0) + -768.0) + 4096.0) + 1.0;
    double v40 = v38 * 0.0009765625 * (v38 * (v38 * (v38 * -47.0 + 74.0) + -128.0) + 256.0);
    return v39
         * 6356752.31
         * (v29 - v25 * v40 * (v33 + v40 * 0.25 * ((v33 * v33 * 4.0 + -3.0) * (v40 / 6.0 * v33 * 3.0) + v26 * v35)));
  }

  return sub_190839684(v44, v42, v4, v43);
}

long double sub_190839684(double a1, double a2, double a3, double a4)
{
  double v5 = 360.0;
  if (a2 < 0.0) {
    a2 = a2 + 360.0;
  }
  if (a4 < 0.0) {
    a4 = a4 + 360.0;
  }
  double v6 = a4 - a2;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0) {
      goto LABEL_9;
    }
  }
  else
  {
    double v5 = -360.0;
  }
  double v6 = v6 + v5;
LABEL_9:
  double v7 = a1 * 0.0174532925;
  double v8 = v6 * 0.0174532925;
  long double v9 = sin((a3 - a1) * 0.0174532925 * 0.5);
  long double v10 = v9 * v9;
  __double2 v11 = __sincos_stret(v7);
  long double v12 = v11.__cosval * cos(a3 * 0.0174532925);
  long double v13 = sin(v8 * 0.5);
  double v14 = v10 + v12 * (v13 * v13);
  double v15 = 1.0 - v14;
  if (v14 < 0.0) {
    double v14 = 0.0;
  }
  if (v15 < 0.0) {
    double v15 = 0.0;
  }
  long double v16 = atan2(sqrt(v14), sqrt(v15));
  return (fabs(v11.__sinval) * -21000.0 + 6378160.0) * (v16 + v16);
}

BOOL sub_1908397AC(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8)
{
  BOOL result = 0;
  if (a7 >= 0.0 && a8 <= 50000.0)
  {
    double v15 = fabs(a8);
    __double2 v16 = __sincos_stret((dbl_190886050[a8 < 0.0] + a7) * 0.0174532925);
    return sub_190839874(a1, a2, a3, &v17, a4, a5, a6, v15 * v16.__cosval, v15 * v16.__sinval, 0.0);
  }
  return result;
}

BOOL sub_190839874(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v11 = sqrt(a9 * a9 + a8 * a8);
  if (v11 <= 70000.0)
  {
    if (vabdd_f64(a5, a1[3]) <= 0.005)
    {
      double v25 = *a1;
      double cosval = a1[4];
    }
    else
    {
      a1[2] = a5 * 0.0174532925;
      a1[3] = a5;
      __double2 v22 = __sincos_stret(a5 * 0.0174532925);
      double cosval = v22.__cosval;
      double v23 = v22.__sinval * -0.00669437999 * v22.__sinval + 1.0;
      double v24 = sqrt(v23);
      double v25 = 6335439.33 / (v23 * v24);
      *a1 = v25;
      a1[1] = 6378137.0 / v24;
      a1[4] = v22.__cosval;
    }
    double v26 = v25 + a7;
    double v27 = 0.0;
    double v28 = a8 / v26;
    if (fabs(cosval) >= 0.0001) {
      double v27 = a9 / (cosval * (a1[1] + a7));
    }
    *a2 = a5 + v28 * 57.2957795;
    *a3 = a6 + v27 * 57.2957795;
    *a4 = a7 + a10;
    double v29 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v29;
      *a3 = *a3 + 180.0;
      double v29 = *a2;
    }
    if (v29 >= -90.0)
    {
      double v30 = *a3;
    }
    else
    {
      *a2 = -180.0 - v29;
      double v30 = *a3 + 180.0;
      *a3 = v30;
    }
    if (v30 > -180.0)
    {
      if (v30 <= 180.0) {
        return v11 <= 70000.0;
      }
    }
    else
    {
      double v30 = v30 + 360.0;
    }
    if (v30 > 180.0) {
      double v30 = v30 + -360.0;
    }
    *a3 = v30;
  }
  return v11 <= 70000.0;
}

double sub_190839A78(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v17 = 0.0;
  double v18 = 0.0;
  sub_1906DA778(a1, &v18, &v17, &v16, a4, a5, a6, a8, a9, a6);
  double v12 = sqrt(v17 * v17 + v18 * v18);
  long double v13 = atan2(v17, v18);
  __double2 v14 = __sincos_stret(v13 + a7 * -0.0174532925);
  *a3 = v12 * v14.__cosval;
  double result = v12 * v14.__sinval;
  *a2 = v12 * v14.__sinval;
  return result;
}

void sub_190839B08(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v18 = a1[3];
  if (v18 == 0.0 || vabdd_f64(a4, v18) > 0.005)
  {
    a1[2] = a4 * 0.0174532925;
    a1[3] = a4;
    __double2 v19 = __sincos_stret(a4 * 0.0174532925);
    double v20 = v19.__sinval * -0.00669437999 * v19.__sinval + 1.0;
    double v21 = sqrt(v20);
    *a1 = 6335439.33 / (v20 * v21);
    a1[1] = 6378137.0 / v21;
    a1[4] = v19.__cosval;
  }
  *a2 = a4;
  *a3 = a5;
  if (a4 < 90.0 && a4 > -90.0 && a7 > 0.0 && a8 > 0.0 && a9 >= 0.0)
  {
    double v22 = a7 * a8;
    __double2 v23 = __sincos_stret(a9 * 0.0174532925);
    double v24 = a5 * 0.0174532925 + v22 * v23.__sinval / ((a1[1] + a6) * a1[4]);
    *a2 = (a4 * 0.0174532925 + v22 * v23.__cosval / (*a1 + a6)) * 57.2957795;
    double v25 = v24 * 57.2957795;
    *a3 = v25;
    double v26 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v26;
      double v25 = *a3 + 180.0;
      *a3 = v25;
      double v26 = *a2;
    }
    if (v26 < -90.0)
    {
      *a2 = -180.0 - v26;
      double v25 = *a3 + 180.0;
      *a3 = v25;
    }
    if (v25 > -180.0)
    {
      if (v25 <= 180.0) {
        return;
      }
    }
    else
    {
      double v25 = v25 + 360.0;
    }
    if (v25 > 180.0) {
      double v25 = v25 + -360.0;
    }
    *a3 = v25;
  }
}

double sub_190839D14(double *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (vabdd_f64(a2, a4) >= 0.00000001 || vabdd_f64(a3, a5) >= 0.00000001)
  {
    *(void *)uint64_t buf = 0;
    __y[0] = 0.0;
    BOOL v9 = sub_1906DA778(a1, (double *)buf, __y, &v11, a2, a3, 0.0, a4, a5, 0.0);
    double result = -1.0;
    if (v9)
    {
      double v10 = atan2(__y[0], *(long double *)buf);
      if (v10 < 0.0) {
        double v10 = v10 + 6.28318531;
      }
      return v10 * 57.2957795;
    }
  }
  else
  {
    if (qword_1EB2713B8 != -1) {
      dispatch_once(&qword_1EB2713B8, &unk_1EE006000);
    }
    double v5 = off_1EB2713B0;
    if (os_log_type_enabled((os_log_t)off_1EB2713B0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "#Warning, same coordinates input", buf, 2u);
    }
    int v6 = sub_1906CB57C(115, 2);
    double result = -1.0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713B8 != -1) {
        dispatch_once(&qword_1EB2713B8, &unk_1EE006000);
      }
      LOWORD(__y[0]) = 0;
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "double CLDistanceCalc::calculateAzimuth(double, double, double, double)", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return -1.0;
    }
  }
  return result;
}

os_log_t sub_190839F20()
{
  os_log_t result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1EB2713B0 = result;
  return result;
}

BOOL sub_19083A548(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 120);
  if (!v2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v7 = *(void *)(a1 + 248);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road", (uint8_t *)buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
LABEL_56:
    }
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    goto LABEL_54;
  }
  *(_DWORD *)(a1 + 520) = 1;
  uint64_t v3 = *(void *)(a1 + 152);
  uint64_t v4 = *(void *)(a1 + 160);
  *(void *)(a1 + 392) = v3;
  *(void *)(a1 + 400) = v4;
  double v5 = *(float *)(a1 + 144);
  *(double *)(a1 + 408) = v5;
  *(void *)(a1 + 528) = v3;
  *(void *)(a1 + 536) = v4;
  *(double *)(a1 + 544) = v5;
  *(void *)(a1 + 360) = *(void *)(v2 + 20);
  if (*(char *)(v2 + 71) < 0) {
    sub_1906C00FC(buf, *(void **)(v2 + 48), *(void *)(v2 + 56));
  }
  else {
    buf[0] = *(std::string *)(v2 + 48);
  }
  std::string::operator=((std::string *)(a1 + 368), buf);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *(void *)(a1 + 120);
  *(void *)(a1 + 352) = *(void *)v8;
  *(unsigned char *)(a1 + 601) = *(unsigned char *)(v8 + 19);
  LOBYTE(v8) = *(unsigned char *)(v8 + 18);
  uint64_t v9 = *(void *)(a1 + 168);
  float v10 = *(double *)(a1 + 176);
  *(float *)(a1 + 416) = v10;
  *(unsigned char *)(a1 + 602) = v8;
  *(void *)(a1 + 512) = v9;
  for (uint64_t i = *(void *)(a1 + 208); i != *(void *)(a1 + 216); i += 72)
  {
    if (*(_DWORD *)(i + 64) == 1)
    {
      *(void *)(a1 + 472) = *(void *)(i + 16);
      *(void *)(a1 + 480) = *(void *)(i + 56);
      if (*(unsigned char *)(a1 + 712)) {
        *(void *)(a1 + 408) = *(void *)(a1 + 344);
      }
      *(unsigned char *)(a1 + 505) = *(unsigned char *)(a1 + 745);
      uint64_t v32 = 0;
      double v33 = 0.0;
      sub_190839A78((double *)(a1 + 672), &v33, (double *)&v32, *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 312), *(float *)(a1 + 144), *(double *)(a1 + 296), *(double *)(a1 + 304));
      uint64_t v16 = *(void *)(a1 + 120);
      BOOL v14 = v16 != 0;
      if (v16)
      {
        uint64_t v17 = *(int *)(v16 + 20);
        double v18 = 0.5;
        double v19 = 1.0;
        if (v17 == 9 || (int v20 = *(_DWORD *)(v16 + 72), v20 == 6))
        {
          double v21 = 1.0;
        }
        else
        {
          double v21 = 1.0;
          if (v20 != 255)
          {
            double v22 = *(double *)(v16 + 96);
            if (v22 < 0.000001)
            {
              double v22 = 1.0;
              if ((v17 & 0xFFFFFFFE) != 8)
              {
                int v23 = *(unsigned __int8 *)(v16 + 16);
                if (v17 > 7)
                {
                  double v22 = dbl_190882500[v23 == 0];
                }
                else
                {
                  if (v23) {
                    double v24 = (double *)&unk_190886138;
                  }
                  else {
                    double v24 = (double *)&unk_190886178;
                  }
                  double v22 = v24[v17];
                }
              }
            }
            double v21 = v22 + 1.0;
            double v18 = v22 * 0.5 + 1.0;
          }
        }
        *(double *)(a1 + 664) = v21;
        if (v33 >= 0.0) {
          double v19 = -1.0;
        }
        double v29 = v33 + v19 * v18;
        *(void *)(a1 + 488) = v32;
        *(double *)(a1 + 496) = v29;
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v25 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          std::string::size_type v26 = *(void *)(a1 + 248);
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
          *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v26;
          _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to determine roadWidth when filling crumb", (uint8_t *)buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v27 = *(void *)(a1 + 248);
          int v34 = 134349056;
          uint64_t v35 = v27;
          double v28 = (std::string *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "CoreLocation: %s\n", (const char *)v28);
          if (v28 != buf) {
            free(v28);
          }
        }
      }
      return v14;
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  double v12 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v13 = *(void *)(a1 + 248);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 134349056;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v13;
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,RawGPSScore not available", (uint8_t *)buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      goto LABEL_56;
    }
LABEL_54:
    uint64_t v30 = *(void *)(a1 + 248);
    int v34 = 134349056;
    uint64_t v35 = v30;
    double v31 = (std::string *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMSnapData::fillCrumb()", "CoreLocation: %s\n", (const char *)v31);
    if (v31 != buf) {
      free(v31);
    }
  }
  return 0;
}

void sub_19083AB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19083ABB0(uint64_t result, double *a2, double *a3)
{
  if (result)
  {
    uint64_t v3 = *(int *)(result + 20);
    if (v3 == 9 || ((int v4 = *(_DWORD *)(result + 72), v4 != 255) ? (v5 = v4 == 6) : (v5 = 1), v5))
    {
      *a2 = 1.0;
      double v6 = 0.5;
    }
    else
    {
      double v7 = *(double *)(result + 96);
      *a2 = v7;
      if (v7 < 0.000001)
      {
        double v7 = 1.0;
        if ((v3 & 0xFFFFFFFE) != 8)
        {
          if (v3 > 7)
          {
            double v7 = dbl_190882500[*(unsigned char *)(result + 16) == 0];
          }
          else
          {
            if (*(unsigned char *)(result + 16)) {
              uint64_t v8 = (double *)&unk_190886138;
            }
            else {
              uint64_t v8 = (double *)&unk_190886178;
            }
            double v7 = v8[v3];
          }
        }
        *a2 = v7;
      }
      *a3 = v7 * 0.5;
      *a2 = *a2 + 1.0;
      double v6 = *a3 + 1.0;
    }
  }
  else
  {
    *a2 = 0.0;
    double v6 = 0.0;
  }
  *a3 = v6;
  return result;
}

BOOL sub_19083AC84(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a2;
  if (*(void *)a2)
  {
    if (!a1[136])
    {
      uint64_t v5 = *(void *)(a2 + 8);
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      a1[136] = v3;
      double v6 = (std::__shared_weak_count *)a1[137];
      a1[137] = v5;
      if (v6) {
        sub_1906BFE48(v6);
      }
    }
    unint64_t v7 = a1[134];
    if (v7 >= a1[135])
    {
      uint64_t v8 = sub_1907D5EFC(a1 + 133, a2);
    }
    else
    {
      sub_1907D6024((uint64_t)(a1 + 135), a1[134], a2);
      uint64_t v8 = v7 + 112;
      a1[134] = v7 + 112;
    }
    a1[134] = v8;
    double v12 = *(double *)(a2 + 48);
    if (v12 < *((double *)a1 + 129)) {
      *((double *)a1 + 129) = v12;
    }
    if (v12 > *((double *)a1 + 20)) {
      *((double *)a1 + 20) = v12;
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v9 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      double v10 = *(double *)a1;
      *(_DWORD *)uint64_t buf = 134349056;
      double v15 = v10;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected, null road when trying to add particles into candidate", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidate::addParticle(const CLParticleMapMatcherCommon::Particle &)", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return v3 != 0;
}

void sub_19083AEDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 1072) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_19083AEE8(uint64_t a1, int *a2)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  BOOL v2 = *(unsigned char *)(a1 + 152) == 0;
  if (*(unsigned char *)(a1 + 152)) {
    BOOL v3 = *(unsigned char *)(a1 + 153) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return v2;
  }
  if (*(_DWORD *)(a1 + 124) == *(_DWORD *)(a1 + 1104))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 176);
      int v8 = *(_DWORD *)(a1 + 124);
      int v9 = *(_DWORD *)(a1 + 1104);
      int v10 = *a2;
      *(_DWORD *)uint64_t buf = 134349824;
      uint64_t v66 = v7;
      __int16 v67 = 1026;
      *(_DWORD *)double v68 = v8;
      *(_WORD *)&v68[4] = 1026;
      *(_DWORD *)&v68[6] = v9;
      LOWORD(v69) = 1026;
      *(_DWORD *)((char *)&v69 + 2) = v10;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,ambiguityCase,combined,%{public}d,secondBestCombined,%{public}d,sigEnv,%{public}d", buf, 0x1Eu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 1044) <= (signed int)(-1227133513 * ((*(void *)(a1 + 1072) - *(void *)(a1 + 1064)) >> 4)))
  {
    if (*(double *)(a1 + 360) <= 0.0) {
      return 0;
    }
    double v21 = *(double *)(a1 + 272);
    if (v21 < 0.0 || (*a2 - 1) > 1) {
      return 0;
    }
    double v22 = *(double *)(a1 + 768);
    double v23 = *(double *)(a1 + 336);
    double v24 = fmod(v22 - v23, 360.0);
    if (v24 < 0.0) {
      double v24 = v24 + 360.0;
    }
    if (v24 > 180.0) {
      double v24 = v24 + -360.0;
    }
    if (v24 > 75.0)
    {
      double v25 = fmod(v23 + v24 * 0.5, 360.0);
      if (v25 >= 0.0) {
        double v26 = v25;
      }
      else {
        double v26 = v25 + 360.0;
      }
      double v27 = fmod(v21 - v26, 360.0);
      if (v27 < 0.0) {
        double v27 = v27 + 360.0;
      }
      if (v27 <= 180.0) {
        double v28 = v27;
      }
      else {
        double v28 = v27 + -360.0;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v29 = fabs(v28);
      uint64_t v30 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = *(void *)(a1 + 176);
        uint64_t v32 = *(void *)(a1 + 272);
        uint64_t v33 = *(void *)(a1 + 336);
        uint64_t v34 = *(void *)(a1 + 768);
        *(_DWORD *)uint64_t buf = 134350592;
        uint64_t v66 = v31;
        __int16 v67 = 2050;
        *(void *)double v68 = v32;
        *(_WORD *)&v68[8] = 2050;
        uint64_t v69 = v33;
        __int16 v70 = 2050;
        uint64_t v71 = v34;
        __int16 v72 = 2050;
        *(double *)uint64_t v73 = v26;
        *(_WORD *)&v73[8] = 2050;
        *(double *)uint64_t v74 = v29;
        *(_WORD *)&v74[8] = 1026;
        *(_DWORD *)&v74[10] = v29 < 10.0;
        _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,approxCourseOfTurningRoad,%{public}.2lf,turningCourseDiff,%{public}.2lf,outgoingCondition,%{public}d", buf, 0x44u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v64 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v64);
        if (v64 != (char *)buf) {
          free(v64);
        }
      }
      if (v29 < 10.0) {
        return 1;
      }
      double v21 = *(double *)(a1 + 272);
      double v22 = *(double *)(a1 + 768);
      double v23 = *(double *)(a1 + 336);
    }
    double v35 = fmod(v21 - v22, 360.0);
    if (v35 < 0.0) {
      double v35 = v35 + 360.0;
    }
    if (v35 > 180.0) {
      double v35 = v35 + -360.0;
    }
    double v36 = fabs(v35);
    double v37 = fmod(v21 - v23, 360.0);
    if (v37 < 0.0) {
      double v37 = v37 + 360.0;
    }
    if (v37 > 180.0) {
      double v37 = v37 + -360.0;
    }
    double v38 = fabs(v37);
    BOOL v39 = v38 >= 15.0 && v36 < 15.0;
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v40 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v41 = *(void *)(a1 + 176);
      uint64_t v42 = *(void *)(a1 + 272);
      uint64_t v43 = *(void *)(a1 + 336);
      uint64_t v44 = *(void *)(a1 + 768);
      int v45 = *a2;
      *(_DWORD *)uint64_t buf = 134350848;
      uint64_t v66 = v41;
      __int16 v67 = 2050;
      *(void *)double v68 = v42;
      *(_WORD *)&v68[8] = 2050;
      uint64_t v69 = v43;
      __int16 v70 = 2050;
      uint64_t v71 = v44;
      __int16 v72 = 1026;
      *(_DWORD *)uint64_t v73 = v36 < 15.0;
      *(_WORD *)&v73[4] = 1026;
      *(_DWORD *)&v73[6] = v38 < 15.0;
      *(_WORD *)uint64_t v74 = 1026;
      *(_DWORD *)&v74[2] = v45;
      *(_WORD *)&v74[6] = 1026;
      *(_DWORD *)&v74[8] = v39;
      _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,lowerOutgoingCountCase,course,%{public}.2lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf,isCrumbCourseAlignedWithOutgoing,%{public}d,isCrumbCourseAlignedWithIncoming,%{public}d,sigEnv,%{public}d,outgoingCondition,%{public}d", buf, 0x42u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v63 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v63);
      if (v63 != (char *)buf) {
        free(v63);
      }
    }
    return v39;
  }
  double v12 = *(double *)(a1 + 336);
  double v13 = *(double *)(a1 + 768);
  double v14 = fmod(v12 - v13, 360.0);
  if (v14 < 0.0) {
    double v14 = v14 + 360.0;
  }
  if (v14 > 180.0) {
    double v14 = v14 + -360.0;
  }
  double v15 = fabs(v14);
  double v16 = *(double *)(a1 + 360);
  if (v16 <= 0.0 || (double v17 = *(double *)(a1 + 272), v17 < 0.0))
  {
    BOOL v18 = 0;
    goto LABEL_23;
  }
  double v46 = fmod(v17 - v13, 360.0);
  if (v46 < 0.0) {
    double v46 = v46 + 360.0;
  }
  if (v46 > 180.0) {
    double v46 = v46 + -360.0;
  }
  double v47 = fabs(v46);
  BOOL v48 = *(double *)(a1 + 1048) >= 7.5;
  BOOL v18 = v47 < 25.0;
  if (v47 < 25.0) {
    BOOL v48 = 1;
  }
  if (v48 && v15 >= 45.0 && v47 >= 25.0)
  {
    if (v16 < 20.0)
    {
      double v50 = fmod(v17 - v12, 360.0);
      BOOL v18 = 0;
      if (v50 < 0.0) {
        double v50 = v50 + 360.0;
      }
      if (v50 > 180.0) {
        double v50 = v50 + -360.0;
      }
      if (fabs(v50) < 10.0)
      {
        int v20 = 1;
        goto LABEL_91;
      }
      goto LABEL_23;
    }
    BOOL v18 = 0;
  }
  if (!v48)
  {
LABEL_90:
    int v20 = 0;
    goto LABEL_91;
  }
LABEL_23:
  if (*(double *)(a1 + 352) > 0.0)
  {
    double v19 = *(double *)(a1 + 264);
    if (v19 >= 0.0 && v19 < 0.001) {
      goto LABEL_90;
    }
  }
  int v20 = 0;
  if (!*(unsigned char *)(a1 + 396))
  {
LABEL_101:
    BOOL v2 = 1;
    goto LABEL_102;
  }
LABEL_91:
  if (*(double *)(a1 + 264) == 0.0 && !*(unsigned char *)(a1 + 396) && (v16 <= 0.0 || *(double *)(a1 + 272) < 0.0))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v51 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v52 = *(void *)(a1 + 176);
      *(_DWORD *)uint64_t buf = 134349056;
      uint64_t v66 = v52;
      _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,shallConsiderOutgoingCandidate,position dependent", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      __int16 v62 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v62);
      if (v62 != (char *)buf) {
        free(v62);
      }
    }
    goto LABEL_101;
  }
  BOOL v2 = 0;
LABEL_102:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v53 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v54 = *(void *)(a1 + 176);
    uint64_t v55 = *(void *)(a1 + 336);
    uint64_t v56 = *(void *)(a1 + 768);
    uint64_t v57 = *(void *)(a1 + 272);
    uint64_t v58 = *(void *)(a1 + 1048);
    uint64_t v59 = *(void *)(a1 + 360);
    *(_DWORD *)uint64_t buf = 134351360;
    uint64_t v66 = v54;
    __int16 v67 = 2050;
    *(void *)double v68 = v55;
    *(_WORD *)&v68[8] = 2050;
    uint64_t v69 = v56;
    __int16 v70 = 2050;
    uint64_t v71 = v57;
    __int16 v72 = 2050;
    *(void *)uint64_t v73 = v58;
    *(_WORD *)&v73[8] = 1026;
    *(_DWORD *)uint64_t v74 = v2;
    *(_WORD *)&v74[4] = 2050;
    *(void *)&v74[6] = v59;
    __int16 v75 = 1026;
    BOOL v76 = v15 >= 45.0;
    __int16 v77 = 1026;
    BOOL v78 = v18;
    __int16 v79 = 1026;
    int v80 = v20;
    _os_log_impl(&dword_1906B8000, v53, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,snapCourse,%{public}.2lf,outgoingSnapCourse,%{public}.2lf, crumbCourse,%{public}.2lf, outgoingDistanceFromIntersection,%{public}.2lf,outgoingCondition,%{public}d,crumbCourseUnc,%{public}.2lf,significantCourseChange,%{public}d,isCrumbCourseAlignedWithOutgoing,%{public}d, isCrumbCourseAlignedWithIncoming,%{public}d", buf, 0x56u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v61 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMCandidate::shallConsiderOutgoingCandidate(const CLSignalEnvironmentProvider_Type::SignalEnvironmentInfo &) const", "CoreLocation: %s\n", v61);
    if (v61 != (char *)buf) {
      free(v61);
    }
  }
  return v2;
}

void *sub_19083BBDC(uint64_t *a1)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (!a1[3])
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v20 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *a1;
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getAlternateBestCandidate", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v30 = *a1;
      int v42 = 134349056;
      uint64_t v43 = v30;
      uint64_t v31 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMCandidateVector::getBestAndAlternateBestCandidate(const MMCandidate *&, const MMCandidate *&) const", "CoreLocation: %s\n", v31);
      if (v31 != buf) {
        free(v31);
      }
    }
    goto LABEL_52;
  }
  BOOL v2 = (uint64_t *)a1[1];
  BOOL v3 = a1 + 2;
  if (v2 == a1 + 2) {
    goto LABEL_52;
  }
  int v4 = 0;
  int v5 = 0;
  double v6 = (uint64_t *)a1[1];
  do
  {
    if (*((_DWORD *)v6 + 45) > v5)
    {
      int v5 = *((_DWORD *)v6 + 45);
      int v4 = v6 + 7;
    }
    uint64_t v7 = (uint64_t *)v6[1];
    if (v7)
    {
      do
      {
        int v8 = v7;
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int v8 = (uint64_t *)v6[2];
        BOOL v9 = *v8 == (void)v6;
        double v6 = v8;
      }
      while (!v9);
    }
    double v6 = v8;
  }
  while (v8 != v3);
  if (!v4 || !v4[1])
  {
LABEL_52:
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v22 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *a1;
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly unable to find candidates,getSolutionCandidate", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v28 = *a1;
    int v42 = 134349056;
    uint64_t v43 = v28;
    goto LABEL_70;
  }
  int v10 = 0;
  int v11 = 0;
  do
  {
    sub_1907BDE7C((uint64_t)(v4 + 1), (uint64_t)buf);
    if ((v2[4] != *(void *)buf || *((unsigned __int8 *)v2 + 48) != buf[16] || v2[5] != *(void *)&buf[8])
      && *((_DWORD *)v2 + 45) > v11)
    {
      int v10 = v2 + 7;
      int v11 = *((_DWORD *)v2 + 45);
    }
    double v12 = (uint64_t *)v2[1];
    if (v12)
    {
      do
      {
        double v13 = v12;
        double v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        double v13 = (uint64_t *)v2[2];
        BOOL v9 = *v13 == (void)v2;
        BOOL v2 = v13;
      }
      while (!v9);
    }
    BOOL v2 = v13;
  }
  while (v13 != v3);
  if (!v4[1])
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v25 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *a1;
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v26;
      _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly, best candidate is nullptr", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v27 = *a1;
    int v42 = 134349056;
    uint64_t v43 = v27;
LABEL_70:
    double v29 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "const MMCandidate *const CLParticleMM::MMCandidateVector::getSolutionCandidate() const", "CoreLocation: %s\n", v29);
    if (v29 != buf) {
      free(v29);
    }
    return 0;
  }
  if (v10)
  {
    if (v10[1])
    {
      sub_1907BDE7C((uint64_t)(v4 + 1), (uint64_t)v40);
      sub_1907BDE7C((uint64_t)(v10 + 1), (uint64_t)v38);
      if (v38[0] == v40[0]
        && v39 != v41
        && *((unsigned char *)v10 + 153)
        && *((unsigned char *)v4 + 153)
        && *((_DWORD *)v10 + 31) == *((_DWORD *)v4 + 31)
        && v10[16] == v38[0]
        && *((unsigned __int8 *)v10 + 144) == v41
        && v10[17] == v40[1]
        && v4[16] == v38[0]
        && *((unsigned __int8 *)v4 + 144) == v39
        && v4[17] == v38[1]
        && 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10[134] - v10[133]) >> 4) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                           * ((uint64_t)(v4[134] - v4[133]) >> 4)))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v14 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = *a1;
          int v16 = -1227133513 * ((v4[134] - v4[133]) >> 4);
          int v17 = -1227133513 * ((v10[134] - v10[133]) >> 4);
          int v18 = *((_DWORD *)v4 + 31);
          int v19 = *((_DWORD *)v10 + 31);
          *(_DWORD *)uint64_t buf = 134350336;
          *(void *)&uint8_t buf[4] = v15;
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(void *)&unsigned char buf[14] = v40[0];
          __int16 v55 = 1026;
          int v56 = v16;
          __int16 v57 = 1026;
          int v58 = v17;
          __int16 v59 = 1026;
          int v60 = v18;
          __int16 v61 = 1026;
          int v62 = v19;
          _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,overrode bestCandidate with alternate,roadID,%{public}lld,bestIncoming,%{public}d,altBestIncoming,%{public}d,bestCombined,%{public}d,altBestCombined,%{public}d", buf, 0x2Eu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v32 = *a1;
          int v33 = -1227133513 * ((v4[134] - v4[133]) >> 4);
          int v34 = -1227133513 * ((v10[134] - v10[133]) >> 4);
          int v35 = *((_DWORD *)v4 + 31);
          int v36 = *((_DWORD *)v10 + 31);
          int v42 = 134350336;
          uint64_t v43 = v32;
          __int16 v44 = 2050;
          uint64_t v45 = v40[0];
          __int16 v46 = 1026;
          int v47 = v33;
          __int16 v48 = 1026;
          int v49 = v34;
          __int16 v50 = 1026;
          int v51 = v35;
          __int16 v52 = 1026;
          int v53 = v36;
          double v37 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "const MMCandidate *const CLParticleMM::MMCandidateVector::getSolutionCandidate() const", "CoreLocation: %s\n", v37);
          if (v37 != buf) {
            free(v37);
          }
        }
        return v10;
      }
    }
  }
  return v4;
}

double sub_19083C424(uint64_t *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1[3])
  {
    BOOL v2 = sub_19083BBDC(a1);
    double v3 = 0.0;
    if (v2)
    {
      uint64_t v4 = (uint64_t)(v2 + 1);
      if (v2[1])
      {
        int v5 = (double *)a1[1];
        double v6 = a1 + 2;
        if (v5 != (double *)v6)
        {
          do
          {
            sub_1907BDE7C(v4, (uint64_t)&buf);
            if (*((void *)v5 + 4) == (void)buf && *((unsigned __int8 *)v5 + 48) == v16)
            {
              double v7 = v5[15];
              if (v7 <= v3) {
                double v7 = v3;
              }
              if (*((void *)v5 + 5) != *((void *)&buf + 1)) {
                double v3 = v7;
              }
            }
            else if (v5[15] > v3)
            {
              double v3 = v5[15];
            }
            int v8 = (uint64_t *)*((void *)v5 + 1);
            if (v8)
            {
              do
              {
                BOOL v9 = v8;
                int v8 = (uint64_t *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                BOOL v9 = (uint64_t *)*((void *)v5 + 2);
                BOOL v10 = *v9 == (void)v5;
                int v5 = (double *)v9;
              }
              while (!v10);
            }
            int v5 = (double *)v9;
          }
          while (v9 != v6);
        }
      }
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v11 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *a1;
      LODWORD(buf) = 134349056;
      *(void *)((char *)&buf + 4) = v12;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpectedly zero candidates,getSecondBestCandidate", (uint8_t *)&buf, 0xCu);
    }
    double v3 = 0.0;
    if (sub_1906CB57C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "double CLParticleMM::MMCandidateVector::getBestParticleScoreForAlternateCandidate() const", "CoreLocation: %s\n", v14);
      if (v14 != (char *)&buf) {
        free(v14);
      }
    }
  }
  return v3;
}

void sub_19083C6B8(uint64_t a1)
{
  int v5 = 0;
  uint64_t v6 = 0;
  BOOL v2 = (void *)(a1 + 16);
  sub_19084ED18(*(void **)(a1 + 16));
  double v3 = v5;
  *(v2 - 1) = &v5;
  *BOOL v2 = v3;
  uint64_t v4 = v6;
  v2[1] = v6;
  if (v4)
  {
    v3[2] = v2;
    int v5 = 0;
    uint64_t v6 = 0;
    double v3 = 0;
  }
  else
  {
    *(void *)(a1 + 8) = v2;
  }
  sub_19084ED18(v3);
}

uint64_t sub_19083C734(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v4;
  if (v6) {
    sub_1906BFE48(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  long long v9 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 64) = v9;
  if (a1 != a2) {
    sub_1907B5974((char *)(a1 + 96), *(char **)(a2 + 96), *(void *)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
  }
  long long v10 = *(_OWORD *)(a2 + 120);
  long long v11 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  long long v12 = *(_OWORD *)(a2 + 248);
  long long v13 = *(_OWORD *)(a2 + 264);
  long long v14 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v13;
  *(_OWORD *)(a1 + 280) = v14;
  *(_OWORD *)(a1 + 248) = v12;
  long long v15 = *(_OWORD *)(a2 + 168);
  long long v16 = *(_OWORD *)(a2 + 184);
  long long v17 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v17;
  *(_OWORD *)(a1 + 184) = v16;
  *(_OWORD *)(a1 + 168) = v15;
  std::string::operator=((std::string *)(a1 + 296), (const std::string *)(a2 + 296));
  memcpy((void *)(a1 + 320), (const void *)(a2 + 320), 0x118uLL);
  long long v18 = *(_OWORD *)(a2 + 648);
  long long v20 = *(_OWORD *)(a2 + 600);
  long long v19 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 632) = *(_OWORD *)(a2 + 632);
  *(_OWORD *)(a1 + 648) = v18;
  *(_OWORD *)(a1 + 600) = v20;
  *(_OWORD *)(a1 + 616) = v19;
  long long v21 = *(_OWORD *)(a2 + 712);
  long long v23 = *(_OWORD *)(a2 + 664);
  long long v22 = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 712) = v21;
  *(_OWORD *)(a1 + 664) = v23;
  *(_OWORD *)(a1 + 680) = v22;
  std::string::operator=((std::string *)(a1 + 728), (const std::string *)(a2 + 728));
  memcpy((void *)(a1 + 752), (const void *)(a2 + 752), 0x118uLL);
  long long v24 = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v24;
  if (a1 != a2) {
    sub_19084F698((uint64_t *)(a1 + 1064), *(uint64_t **)(a2 + 1064), *(uint64_t **)(a2 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 1072) - *(void *)(a2 + 1064)) >> 4));
  }
  uint64_t v25 = *(void *)(a2 + 1088);
  uint64_t v26 = *(void *)(a2 + 1096);
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1088) = v25;
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 1096);
  *(void *)(a1 + 1096) = v26;
  if (v27) {
    sub_1906BFE48(v27);
  }
  long long v28 = *(_OWORD *)(a2 + 1104);
  long long v29 = *(_OWORD *)(a2 + 1120);
  *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1120) = v29;
  *(_OWORD *)(a1 + 1104) = v28;
  return a1;
}

uint64_t sub_19083C920(uint64_t a1)
{
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 1096);
  if (v2) {
    sub_1906BFE48(v2);
  }
  uint64_t v6 = (void **)(a1 + 1064);
  sub_1907D5AB4(&v6);
  if (*(char *)(a1 + 751) < 0) {
    operator delete(*(void **)(a1 + 728));
  }
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  double v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    sub_1906BFE48(v4);
  }
  return a1;
}

void sub_19083C9A4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 1;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 88) = 0;
  double v3 = (char *)(a1 + 88);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 80) = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v7 = a1 + 16;
    long long v8 = (_OWORD *)(a1 + 56);
    double v9 = 0.0;
    do
    {
      double v10 = *((double *)v5 + 7);
      if (v10 > v9)
      {
        double v12 = *(double *)v5;
        uint64_t v11 = v5[1];
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        long long v13 = *(std::__shared_weak_count **)(a1 + 8);
        *(double *)a1 = v12;
        *(void *)(a1 + 8) = v11;
        if (v13) {
          sub_1906BFE48(v13);
        }
        long long v14 = *((_OWORD *)v5 + 2);
        *(_OWORD *)uint64_t v7 = *((_OWORD *)v5 + 1);
        *(_OWORD *)(v7 + 16) = v14;
        *(void *)(v7 + 32) = v5[6];
        *long long v8 = *(_OWORD *)(v5 + 7);
        *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)v5 + 65);
        if (v5 != (uint64_t *)a1) {
          sub_1907B5974(v3, (char *)v5[11], v5[12], 0x8E38E38E38E38E39 * ((v5[12] - v5[11]) >> 3));
        }
        double v9 = v10;
      }
      v5 += 14;
    }
    while (v5 != a3);
  }
}

void sub_19083CAD4(_Unwind_Exception *a1)
{
  sub_1907B515C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19083CAE8(uint64_t *a1, uint64_t a2, double a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    uint64_t v15 = a1[1];
    uint64_t v10 = v15;
    return -1227133513 * ((unint64_t)(v4 - v3) >> 4)
         + 1227133513 * ((unint64_t)(v10 - v15) >> 4);
  }
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  do
  {
    if (*(void *)v9)
    {
      sub_1907BDE7C(v9, (uint64_t)&buf);
      if ((void)buf != *(void *)a2 || v18 != *(unsigned char *)(a2 + 16) || *((void *)&buf + 1) != *(void *)(a2 + 8))
      {
        v9 += 112;
        uint64_t v10 = a1[1];
        continue;
      }
      uint64_t v10 = sub_19084F8FC((long long *)(v9 + 112), (long long *)a1[1], v9);
      for (uint64_t i = (void *)a1[1]; i != (void *)v10; sub_1907D5B4C(v8, i))
        i -= 14;
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v12 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134349056;
        *(double *)((char *)&buf + 4) = a3;
        _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particle road is null while eliminateParticlesWithRoadKey", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        long long v14 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "int CLParticleMM::MMParticleVector::eliminateParticlesWithRoadKey(const CFAbsoluteTime, const CLParticleMapMatcherCommon::RoadKey)", "CoreLocation: %s\n", v14);
        if (v14 != (char *)&buf) {
          free(v14);
        }
      }
      uint64_t v10 = sub_19084F8FC((long long *)(v9 + 112), (long long *)a1[1], v9);
      for (uint64_t j = (void *)a1[1]; j != (void *)v10; sub_1907D5B4C(v8, j))
        j -= 14;
    }
    a1[1] = v10;
  }
  while (v9 != v10);
  uint64_t v15 = *a1;
  return -1227133513 * ((unint64_t)(v4 - v3) >> 4)
       + 1227133513 * ((unint64_t)(v10 - v15) >> 4);
}

uint64_t sub_19083CDDC(double **a1, double a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4)
  {
    double v6 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    do
    {
      v3[7] = 0.0;
      v3[8] = 0.0;
      v3[9] = 0.0;
      uint64_t v7 = *((void *)v3 + 11);
      uint64_t v8 = *((void *)v3 + 12);
      double v9 = 0.0;
      if (v7 != v8)
      {
        double v10 = 0.0;
        do
        {
          if (*(_DWORD *)(v7 + 64) != 2)
          {
            double v11 = *(double *)(v7 + 24);
            double v12 = *(double *)v7 * v11;
            if (v9 > 0.0)
            {
              double v13 = log(v9);
              long double v14 = log(v12);
              double v12 = exp(v13 + v14);
            }
            v3[7] = v12;
            double v10 = v10 + *(double *)(v7 + 16) * v11;
            v3[9] = v10;
            double v9 = v12;
          }
          v7 += 72;
        }
        while (v7 != v8);
      }
      double v6 = v6 + v9;
      v3 += 14;
    }
    while (v3 != v4);
    if (v6 > 0.0)
    {
      long long v16 = *a1;
      uint64_t v15 = a1[1];
      if (v16 != v15)
      {
        long long v17 = v16;
        do
        {
          v17[8] = v17[7] / v6;
          v17 += 14;
        }
        while (v17 != v15);
        double v18 = 0.0;
        uint64_t v19 = v16;
        do
        {
          uint64_t v20 = *((void *)v19 + 11);
          uint64_t v21 = *((void *)v19 + 12);
          if (v20 == v21) {
            goto LABEL_43;
          }
          double v22 = 0.0;
          uint64_t v23 = *((void *)v19 + 11);
          do
          {
            double v24 = *(double *)(v23 + 24);
            if (*(_DWORD *)(v23 + 64) != 2) {
              double v24 = -0.0;
            }
            double v22 = v22 + v24;
            v23 += 72;
          }
          while (v23 != v21);
          BOOL v25 = (*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
          BOOL v26 = ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
          if (v22 >= 0.0)
          {
            BOOL v26 = 0;
            BOOL v25 = 0;
          }
          if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
            BOOL v25 = 1;
          }
          char v27 = (*(void *)&v22 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v25;
          if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
            char v27 = 1;
          }
          char v28 = v27 | v26;
          uint64_t v29 = *((void *)v19 + 11);
          if ((v28 & 1) == 0)
          {
            do
            {
              if (*(_DWORD *)(v29 + 64) == 2) {
                *(double *)(v29 + 24) = *(double *)(v29 + 24) / v22;
              }
              v29 += 72;
            }
            while (v29 != v21);
          }
          if (v20 == v21) {
            goto LABEL_43;
          }
          double v30 = 0.0;
          double v31 = 0.0;
          do
          {
            if (*(_DWORD *)(v20 + 64) == 2)
            {
              double v32 = *(double *)(v20 + 24);
              double v31 = v31 + *(double *)v20 * v32;
              double v30 = v30 + *(double *)(v20 + 16) * v32;
            }
            v20 += 72;
          }
          while (v20 != v21);
          if (v31 <= 0.0)
          {
LABEL_43:
            double v31 = v19[7];
          }
          else
          {
            long double v33 = v19[7];
            if (v33 > 0.0)
            {
              double v34 = log(v33);
              long double v35 = log(v31);
              double v31 = exp(v35 + v34);
            }
            v19[7] = v31;
            v19[9] = v30 + v19[9];
          }
          double v18 = v18 + v31;
          v19 += 14;
        }
        while (v19 != v15);
        if (v18 > 0.0)
        {
          do
          {
            v16[8] = v16[7] / v18;
            v16 += 14;
          }
          while (v16 != v15);
          return 1;
        }
      }
      return 0;
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  double v37 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349312;
    double v40 = a2;
    __int16 v41 = 2050;
    double v42 = v6;
    _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unable to normalizeLikelihoods, negative/zero totalScore after regular update,%{public}.8lf", buf, 0x16u);
  }
  uint64_t result = sub_1906CB57C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMParticleVector::computeLikelihoods(const CFAbsoluteTime, BOOL)", "CoreLocation: %s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_19083D210(double *a1, uint64_t a2, double *a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (*(void *)a3)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)long long buf = 0;
    sub_190839A78(a1, (double *)buf, (double *)&v27, a3[4], a3[5], *(double *)(a2 + 96), *((float *)a3 + 6), *(double *)(a2 + 80), *(double *)(a2 + 88));
    double v8 = *a3;
    BOOL v9 = *(void *)a3 != 0;
    if (*(void *)a3)
    {
      uint64_t v10 = *(int *)(*(void *)&v8 + 20);
      double v11 = 0.5;
      if (v10 != 9)
      {
        int v12 = *(_DWORD *)(*(void *)&v8 + 72);
        if (v12 != 6 && v12 != 255)
        {
          double v13 = *(double *)(*(void *)&v8 + 96);
          if (v13 < 0.000001)
          {
            double v13 = 1.0;
            if ((v10 & 0xFFFFFFFE) != 8)
            {
              int v14 = *(unsigned __int8 *)(*(void *)&v8 + 16);
              if (v10 > 7)
              {
                double v13 = dbl_190882500[v14 == 0];
              }
              else
              {
                if (v14) {
                  uint64_t v15 = (double *)&unk_190886138;
                }
                else {
                  uint64_t v15 = (double *)&unk_190886178;
                }
                double v13 = v15[v10];
              }
            }
          }
          double v11 = v13 * 0.5 + 1.0;
        }
      }
      double v20 = a3[4];
      double v21 = a3[5];
      double v25 = v21;
      double v26 = v20;
      if (*(double *)buf < 0.0) {
        double v11 = -v11;
      }
      sub_1908397AC(a1, &v26, &v25, v20, v21, *(double *)(a2 + 96), *((float *)a3 + 6), v11);
      sub_1906DA778(a1, (double *)(a4 + 40), (double *)(a4 + 32), (double *)(a4 + 48), v26, v25, *(double *)(a2 + 96), *(double *)(a2 + 80), *(double *)(a2 + 88), *(double *)(a2 + 96));
      if (*(unsigned char *)(a2 + 40))
      {
        double v22 = *(double *)(a2 + 104);
        if (v22 >= 0.0 && *(double *)(a2 + 120) > 0.0)
        {
          double v23 = fmod(v22 - *((float *)a3 + 6), 360.0);
          if (v23 < 0.0) {
            double v23 = v23 + 360.0;
          }
          if (v23 > 180.0) {
            double v23 = v23 + -360.0;
          }
          *(double *)(a4 + 56) = fabs(v23);
        }
      }
      sub_190802DC4(a2, a4);
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    long long v16 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a2 + 200);
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,NULL road when computing score", buf, 0xCu);
    }
    BOOL v9 = 0;
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v18 = *(void *)(a2 + 200);
      int v27 = 134349056;
      uint64_t v28 = v18;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::calculateScoreAndVarFactor(const CLParticleMapMatcherCommon::CLMMMeasurementData &, const CLMapGeometry::DistanceQueryResult &, CLMapDataUtil::MapMatcherScore &)", "CoreLocation: %s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
      return 0;
    }
  }
  return v9;
}

BOOL sub_19083D590(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 == v3) {
    return 0;
  }
  while (1)
  {
    long long v31 = 0uLL;
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0x3FF0000000000000;
    long long v33 = 0u;
    long long v34 = 0u;
    LODWORD(v35) = 0;
    BOOL result = sub_19083D210((double *)a1, a3, (double *)v3, (uint64_t)&v31);
    if (!result) {
      break;
    }
    LODWORD(v35) = a2;
    *((void *)&v32 + 1) = *(void *)(a3 + 128);
    unint64_t v9 = *(void *)(v3 + 104);
    unint64_t v10 = *(void *)(v3 + 96);
    if (v10 >= v9)
    {
      uint64_t v15 = *(void *)(v3 + 88);
      unint64_t v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - v15) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0x38E38E38E38E38ELL) {
        sub_190718FD4();
      }
      unint64_t v18 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v15) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x1C71C71C71C71C7) {
        unint64_t v19 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        double v20 = (char *)sub_1907B5928(v3 + 104, v19);
      }
      else {
        double v20 = 0;
      }
      double v21 = &v20[72 * v16];
      *(_OWORD *)double v21 = v31;
      long long v22 = v32;
      long long v23 = v33;
      long long v24 = v34;
      *((void *)v21 + 8) = v35;
      *((_OWORD *)v21 + 2) = v23;
      *((_OWORD *)v21 + 3) = v24;
      *((_OWORD *)v21 + 1) = v22;
      double v26 = *(char **)(v3 + 88);
      double v25 = *(char **)(v3 + 96);
      int v27 = v21;
      if (v25 != v26)
      {
        do
        {
          *(_OWORD *)(v27 - 72) = *(_OWORD *)(v25 - 72);
          long long v28 = *(_OWORD *)(v25 - 56);
          long long v29 = *(_OWORD *)(v25 - 40);
          long long v30 = *(_OWORD *)(v25 - 24);
          *((_DWORD *)v27 - 2) = *((_DWORD *)v25 - 2);
          *(_OWORD *)(v27 - 24) = v30;
          *(_OWORD *)(v27 - 40) = v29;
          *(_OWORD *)(v27 - 56) = v28;
          v27 -= 72;
          v25 -= 72;
        }
        while (v25 != v26);
        double v25 = *(char **)(v3 + 88);
      }
      int v14 = v21 + 72;
      *(void *)(v3 + 88) = v27;
      *(void *)(v3 + 96) = v21 + 72;
      *(void *)(v3 + 104) = &v20[72 * v19];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v10 = v31;
      long long v11 = v32;
      long long v12 = v33;
      long long v13 = v34;
      *(void *)(v10 + 64) = v35;
      *(_OWORD *)(v10 + 32) = v12;
      *(_OWORD *)(v10 + 48) = v13;
      *(_OWORD *)(v10 + 16) = v11;
      int v14 = (char *)(v10 + 72);
    }
    *(void *)(v3 + 96) = v14;
    sub_1907D4D3C((double *)v3);
    v3 += 112;
    if (v3 == v4) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_19083D7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v289 = *MEMORY[0x1E4F143B8];
  double v2 = *(double *)(a1 + 384);
  if (*(void *)(a1 + 48) == *(void *)(a1 + 40))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    unint64_t v9 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particle count,0", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_340;
    }
    goto LABEL_418;
  }
  if (!*(void *)(a1 + 128))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    unint64_t v10 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,candidate count,0", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_340;
    }
    goto LABEL_418;
  }
  uint64_t v5 = sub_19083BBDC((uint64_t *)(a1 + 104));
  if (!v5)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    long long v11 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,bestCandidate is nullptr", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_340;
    }
    goto LABEL_418;
  }
  uint64_t v6 = (uint64_t)v5;
  if (*((int *)v5 + 31) <= 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    long long v12 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,particles in candidate,0", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_340;
    }
    goto LABEL_418;
  }
  uint64_t v227 = v5 + 1;
  if (!v5[1])
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    long long v13 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,best particle road in best candidate is nullptr", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1)
    {
LABEL_340:
      *(_DWORD *)unint64_t v268 = 134349056;
      *(double *)&uint64_t v268[4] = v2;
      double v193 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v193);
      if (v193 != buf) {
        free(v193);
      }
      return 0;
    }
LABEL_418:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    goto LABEL_340;
  }
  uint64_t v228 = a2;
  if (*(void *)(a1 + 864))
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 872);
    *(_OWORD *)(a1 + 864) = 0u;
    if (v7) {
      sub_1906BFE48(v7);
    }
    *(unsigned char *)(a1 + 880) = 0;
  }
  char v248 = 0;
  long long v246 = 0u;
  long long v247 = 0u;
  long long v245 = 0u;
  unint64_t v249 = 0xBFF0000000000000;
  if (&v245 != (long long *)(v6 + 1064)) {
    sub_19084F698((uint64_t *)&v245, *(uint64_t **)(v6 + 1064), *(uint64_t **)(v6 + 1072), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v6 + 1072) - *(void *)(v6 + 1064)) >> 4));
  }
  if (!*(unsigned char *)(v6 + 153)) {
    goto LABEL_107;
  }
  if (*(void *)(a2 + 120))
  {
    BOOL v8 = *(unsigned char *)(a2 + 504)
      && (sub_1907BDE7C(a2 + 120, (uint64_t)buf), *(void *)buf == *(void *)(v6 + 128))
      && buf[16] == *(unsigned __int8 *)(v6 + 144)
      && *(void *)&buf[8] == *(void *)(v6 + 136);
    unint64_t v16 = (uint64_t *)(v6 + 128);
    if (!sub_19084F3B0(*(void *)(a1 + 120), (uint64_t *)(v6 + 128))) {
      goto LABEL_107;
    }
    if (v8)
    {
      int v17 = 1;
      goto LABEL_60;
    }
  }
  else
  {
    unint64_t v16 = (uint64_t *)(v6 + 128);
    if (!sub_19084F3B0(*(void *)(a1 + 120), (uint64_t *)(v6 + 128))) {
      goto LABEL_107;
    }
  }
  if (!sub_19083AEE8(v6, (int *)(a1 + 792))) {
    goto LABEL_107;
  }
  int v17 = 0;
LABEL_60:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  unint64_t v18 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349312;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v17;
    _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,extractSolution,using outgoing particles,previous,%{public}d", buf, 0x12u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)unint64_t v268 = 134349312;
    *(double *)&uint64_t v268[4] = v2;
    *(_WORD *)&v268[12] = 1026;
    *(_DWORD *)&v268[14] = v17;
    double v203 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v203);
    if (v203 != buf) {
      free(v203);
    }
  }
  *(unsigned char *)(a1 + 896) = 1;
  unint64_t v19 = sub_19084F444((uint64_t **)(a1 + 112), v16, (uint64_t)v16);
  uint64_t v20 = *((void *)v19 + 140);
  uint64_t v21 = *((void *)v19 + 141);
  if (v21 - v20 >= 1)
  {
    uint64_t v22 = (v21 - v20) / 112;
    unint64_t v23 = *((void *)&v245 + 1);
    uint64_t v24 = (*((void *)&v245 + 1) - (void)v245) / 112;
    uint64_t v25 = v245 + 112 * v24;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v246 - *((void *)&v245 + 1)) >> 4) >= v22)
    {
      __src = (char *)v245;
      uint64_t __str = (*((void *)&v245 + 1) - (void)v245) / 112;
      if (0x6DB6DB6DB6DB6DB7 * ((*((void *)&v245 + 1) - v25) >> 4) >= v22)
      {
        uint64_t v29 = v20 + 112 * v22;
        uint64_t v30 = *((void *)&v245 + 1);
      }
      else
      {
        uint64_t v223 = *((void *)&v245 + 1) - v25;
        *(void *)unint64_t v268 = *((void *)&v245 + 1);
        v253[0] = *((void *)&v245 + 1);
        uint64_t v29 = v20 + 16 * ((*((void *)&v245 + 1) - v25) >> 4);
        *(void *)long long buf = &v246;
        *(void *)&uint8_t buf[8] = v253;
        *(void *)&uint8_t buf[16] = v268;
        unsigned char buf[24] = 0;
        if (v29 == v21)
        {
          uint64_t v30 = *((void *)&v245 + 1);
        }
        else
        {
          uint64_t v30 = *((void *)&v245 + 1);
          uint64_t v31 = v20 + 16 * ((*((void *)&v245 + 1) - v25) >> 4);
          do
          {
            sub_1907D6024((uint64_t)&v246, v30, v31);
            v31 += 112;
            uint64_t v30 = *(void *)v268 + 112;
            *(void *)v268 += 112;
          }
          while (v31 != v21);
          uint64_t v22 = (v21 - v20) / 112;
        }
        *((void *)&v245 + 1) = v30;
        if (v223 < 1) {
          goto LABEL_107;
        }
      }
      uint64_t v43 = v25 + 112 * v22;
      unint64_t v44 = v30 - 112 * v22;
      uint64_t v45 = v30;
      if (v44 < v23)
      {
        unint64_t v46 = v30 - 112 * v22;
        uint64_t v45 = v30;
        do
        {
          *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
          *(void *)unint64_t v46 = 0;
          *(void *)(v46 + 8) = 0;
          long long v47 = *(_OWORD *)(v46 + 16);
          long long v48 = *(_OWORD *)(v46 + 32);
          *(void *)(v45 + 48) = *(void *)(v46 + 48);
          *(_OWORD *)(v45 + 16) = v47;
          *(_OWORD *)(v45 + 32) = v48;
          long long v49 = *(_OWORD *)(v46 + 56);
          *(_OWORD *)(v45 + 65) = *(_OWORD *)(v46 + 65);
          *(_OWORD *)(v45 + 56) = v49;
          *(void *)(v45 + 96) = 0;
          *(void *)(v45 + 104) = 0;
          *(void *)(v45 + 88) = 0;
          *(_OWORD *)(v45 + 88) = *(_OWORD *)(v46 + 88);
          *(void *)(v45 + 104) = *(void *)(v46 + 104);
          *(void *)(v46 + 88) = 0;
          *(void *)(v46 + 96) = 0;
          *(void *)(v46 + 104) = 0;
          v45 += 112;
          v46 += 112;
        }
        while (v46 < v23);
      }
      *((void *)&v245 + 1) = v45;
      if (v30 != v43)
      {
        uint64_t v50 = 0;
        uint64_t v51 = 0x6DB6DB6DB6DB6DB7 * ((v30 - v43) >> 4);
        uint64_t v52 = -112 * v51;
        int v53 = &__src[112 * v51 + 112 * __str];
        do
        {
          uint64_t v54 = &v53[v50];
          uint64_t v55 = v30 + v50;
          long long v56 = *(_OWORD *)&v53[v50 - 112];
          *((void *)v54 - 14) = 0;
          *((void *)v54 - 13) = 0;
          __int16 v57 = *(std::__shared_weak_count **)(v30 + v50 - 104);
          *(_OWORD *)(v30 + v50 - 112) = v56;
          if (v57) {
            sub_1906BFE48(v57);
          }
          long long v58 = *(_OWORD *)(v44 + v50 - 96);
          long long v59 = *(_OWORD *)(v44 + v50 - 80);
          *(void *)(v55 - 64) = *(void *)(v44 + v50 - 64);
          *(_OWORD *)(v55 - 96) = v58;
          *(_OWORD *)(v55 - 80) = v59;
          long long v60 = *(_OWORD *)(v44 + v50 - 56);
          *(_OWORD *)(v55 - 47) = *(_OWORD *)(v44 + v50 - 47);
          *(_OWORD *)(v55 - 56) = v60;
          sub_19084F148(v55 - 24, (__n128 *)(v44 + v50 - 24));
          v50 -= 112;
        }
        while (v52 != v50);
      }
      if (v29 != v20)
      {
        __int16 v61 = &__src[112 * __str + 88];
        int v62 = (uint64_t *)(v20 + 96);
        do
        {
          uint64_t v64 = *(v62 - 12);
          uint64_t v63 = *(v62 - 11);
          uint64_t v65 = v62 - 12;
          if (v63) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v66 = v61 - 88;
          __int16 v67 = (std::__shared_weak_count *)*((void *)v61 - 10);
          *(void *)uint64_t v66 = v64;
          *((void *)v66 + 1) = v63;
          if (v67) {
            sub_1906BFE48(v67);
          }
          long long v68 = *((_OWORD *)v62 - 5);
          long long v69 = *((_OWORD *)v62 - 4);
          *((void *)v61 - 5) = *(v62 - 6);
          *(_OWORD *)(v61 - 72) = v68;
          *(_OWORD *)(v61 - 56) = v69;
          long long v70 = *(_OWORD *)(v62 - 5);
          *(_OWORD *)(v61 - 23) = *(_OWORD *)((char *)v62 - 31);
          *((_OWORD *)v61 - 2) = v70;
          if (v66 != (char *)v65) {
            sub_1907B5974(v61, (char *)*(v62 - 1), *v62, 0x8E38E38E38E38E39 * ((*v62 - *(v62 - 1)) >> 3));
          }
          v61 += 112;
          v62 += 14;
        }
        while (v65 + 14 != (uint64_t *)v29);
      }
    }
    else
    {
      unint64_t v26 = v24 + v22;
      if ((unint64_t)(v24 + v22) > 0x249249249249249) {
        sub_190718FD4();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v246 - v245) >> 4) > v26) {
        unint64_t v26 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v246 - v245) >> 4);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v246 - v245) >> 4)) >= 0x124924924924924) {
        unint64_t v27 = 0x249249249249249;
      }
      else {
        unint64_t v27 = v26;
      }
      *(void *)&unsigned char buf[32] = &v246;
      if (v27) {
        long long v28 = (char *)sub_1907D613C((uint64_t)&v246, v27);
      }
      else {
        long long v28 = 0;
      }
      uint64_t v32 = (uint64_t)&v28[112 * v24];
      *(void *)long long buf = v28;
      *(void *)&uint8_t buf[8] = v32;
      *(void *)&uint8_t buf[16] = v32;
      *(void *)&unsigned char buf[24] = &v28[112 * v27];
      uint64_t v33 = 112 * v22;
      uint64_t v34 = v32 + 112 * v22;
      do
      {
        sub_1907D6024(*(uint64_t *)&buf[32], v32, v20);
        v32 += 112;
        v20 += 112;
        v33 -= 112;
      }
      while (v33);
      *(void *)&uint8_t buf[16] = v34;
      sub_1907D6188((uint64_t)&v246, v25, v25, v245, v245, *(uint64_t *)&buf[8], *(uint64_t *)&buf[8]);
      *(void *)&uint8_t buf[8] = v35;
      uint64_t v36 = *((void *)&v245 + 1);
      uint64_t v37 = *(void *)&buf[16];
      if (*((void *)&v245 + 1) != v25)
      {
        do
        {
          *(_OWORD *)uint64_t v37 = *(_OWORD *)v25;
          *(void *)uint64_t v25 = 0;
          *(void *)(v25 + 8) = 0;
          long long v38 = *(_OWORD *)(v25 + 16);
          long long v39 = *(_OWORD *)(v25 + 32);
          *(void *)(v37 + 48) = *(void *)(v25 + 48);
          *(_OWORD *)(v37 + 16) = v38;
          *(_OWORD *)(v37 + 32) = v39;
          long long v40 = *(_OWORD *)(v25 + 56);
          *(_OWORD *)(v37 + 65) = *(_OWORD *)(v25 + 65);
          *(_OWORD *)(v37 + 56) = v40;
          *(void *)(v37 + 96) = 0;
          *(void *)(v37 + 104) = 0;
          *(void *)(v37 + 88) = 0;
          *(_OWORD *)(v37 + 88) = *(_OWORD *)(v25 + 88);
          *(void *)(v37 + 104) = *(void *)(v25 + 104);
          *(void *)(v25 + 88) = 0;
          *(void *)(v25 + 96) = 0;
          *(void *)(v25 + 104) = 0;
          v37 += 112;
          v25 += 112;
        }
        while (v25 != v36);
        uint64_t v35 = *(void *)&buf[8];
        uint64_t v25 = *((void *)&v245 + 1);
      }
      uint64_t v41 = v245;
      uint64_t v42 = v246;
      *(void *)&long long v245 = v35;
      *((void *)&v245 + 1) = v37;
      *(void *)&long long v246 = *(void *)&buf[24];
      *(void *)&uint8_t buf[16] = v25;
      *(void *)&unsigned char buf[24] = v42;
      *(void *)&uint8_t buf[8] = v41;
      *(void *)long long buf = v41;
      sub_1907D62E4((void **)buf);
    }
  }
LABEL_107:
  if (*((void *)&v245 + 1) == (void)v245)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    __int16 v75 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v75, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,solutionParticleVector has zero particles", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)unint64_t v268 = 134349056;
      *(double *)&uint64_t v268[4] = v2;
      int v200 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v200);
      if (v200 != buf) {
        free(v200);
      }
    }
    uint64_t v14 = 0;
    goto LABEL_265;
  }
  long long v71 = *(_OWORD *)(v6 + 248);
  long long v271 = *(_OWORD *)(v6 + 232);
  long long v272 = v71;
  long long v72 = *(_OWORD *)(v6 + 184);
  *(_OWORD *)unint64_t v268 = *(_OWORD *)(v6 + 168);
  *(_OWORD *)&v268[16] = v72;
  long long v73 = *(_OWORD *)(v6 + 216);
  long long v269 = *(_OWORD *)(v6 + 200);
  long long v270 = v73;
  long long v74 = *(_OWORD *)(v6 + 280);
  long long v273 = *(_OWORD *)(v6 + 264);
  long long v274 = v74;
  if (*(char *)(v6 + 319) < 0)
  {
    sub_1906C00FC(&v275, *(void **)(v6 + 296), *(void *)(v6 + 304));
  }
  else
  {
    long long v275 = *(_OWORD *)(v6 + 296);
    uint64_t v276 = *(void *)(v6 + 312);
  }
  memcpy(v277, (const void *)(v6 + 320), sizeof(v277));
  double v76 = *(double *)(v6 + 360);
  BOOL v77 = v76 < 19.0 && v76 > 0.0;
  if (v77)
  {
    v277[5] = 0x4033000000000000;
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    BOOL v78 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v79 = *(void *)(v6 + 360);
      *(_DWORD *)long long buf = 134349568;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v79;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = 0x4033000000000000;
      _os_log_impl(&dword_1906B8000, v78, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,deweightCourse,courseUnc,%{public}.1lf,deweightUnc,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v201 = *(void *)(v6 + 360);
      LODWORD(v253[0]) = 134349568;
      *(double *)((char *)v253 + 4) = v2;
      WORD2(v253[1]) = 2050;
      *(uint64_t *)((char *)&v253[1] + 6) = v201;
      HIWORD(v253[2]) = 2050;
      *(void *)uint64_t v254 = 0x4033000000000000;
      double v202 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v202);
      if (v202 != buf) {
        free(v202);
      }
    }
  }
  if (sub_1908242FC(*(void *)(v6 + 8), 0, *(double *)(v6 + 56), 7.5)) {
    goto LABEL_127;
  }
  if ((*(_DWORD *)(*v227 + 20) & 0xFFFFFFFE) != 8) {
    goto LABEL_150;
  }
  uint64_t v87 = v228 + 120;
  if (*(void *)(v228 + 120)
    && ((sub_1907BDE7C((uint64_t)v227, (uint64_t)buf), sub_1907BDE7C(v87, (uint64_t)v253), *(void *)buf == v253[0])
     && buf[16] == LOBYTE(v253[2])
     && *(void *)&buf[8] == v253[1]
     || *(unsigned char *)(a1 + 896)
     && (sub_1907BDE7C(v87, (uint64_t)&v237), *(void *)(v6 + 128) == v237)
     && *(unsigned __int8 *)(v6 + 144) == v239
     && *(std::__shared_weak_count **)(v6 + 136) == v238))
  {
    int v88 = 1;
    BOOL v89 = sub_1908242FC(*(void *)(v6 + 8), 1, *(double *)(v6 + 56), 3.75);
  }
  else
  {
    int v88 = 0;
    BOOL v89 = 0;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v90 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349568;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v89;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v88;
    _os_log_impl(&dword_1906B8000, v90, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,invalidateCourse,particleIsOnSegmentsThatHasSmallCurves,%{public}d,particleInOnSameRoadAsPriorSnap,%{public}d", buf, 0x18u);
  }
  int v91 = v88 & v89;
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    LODWORD(v253[0]) = 134349568;
    *(double *)((char *)v253 + 4) = v2;
    WORD2(v253[1]) = 1026;
    *(_DWORD *)((char *)&v253[1] + 6) = v89;
    WORD1(v253[2]) = 1026;
    HIDWORD(v253[2]) = v88;
    int v205 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v205);
    if (v205 != buf) {
      free(v205);
    }
    if (v91) {
      goto LABEL_127;
    }
LABEL_150:
    char v86 = 0;
    if (!v77) {
      goto LABEL_153;
    }
    goto LABEL_151;
  }
  if (!v91) {
    goto LABEL_150;
  }
LABEL_127:
  *((void *)&v273 + 1) = 0xBFF0000000000000;
  v277[5] = 0xBFF0000000000000;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  int v80 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v81 = *(void *)(v6 + 1088);
    uint64_t v82 = *(void *)v81;
    double v83 = *(double *)(v6 + 56);
    sub_19082373C(v81);
    double v84 = *(double *)(v81 + 40);
    int v85 = sub_190824208(*(void *)(v6 + 1088));
    *(_DWORD *)long long buf = 134349825;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(void *)&unsigned char buf[14] = v82;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(double *)&unsigned char buf[24] = v83 * v84;
    *(_WORD *)&unsigned char buf[32] = 1026;
    *(_DWORD *)&buf[34] = v85;
    _os_log_impl(&dword_1906B8000, v80, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Particle is on a curved section of road,%{private}lld,projection,%{public}.2lf,deweightCourse,%{public}d", buf, 0x26u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v194 = *(void *)(v6 + 1088);
    uint64_t v195 = *(void *)v194;
    double v196 = *(double *)(v6 + 56);
    sub_19082373C(v194);
    double v197 = *(double *)(v194 + 40);
    int v198 = sub_190824208(*(void *)(v6 + 1088));
    LODWORD(v253[0]) = 134349825;
    *(double *)((char *)v253 + 4) = v2;
    WORD2(v253[1]) = 2049;
    *(uint64_t *)((char *)&v253[1] + 6) = v195;
    HIWORD(v253[2]) = 2050;
    *(double *)uint64_t v254 = v196 * v197;
    *(_WORD *)&v254[8] = 1026;
    *(_DWORD *)&v254[10] = v198;
    double v199 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v199);
    if (v199 != buf) {
      free(v199);
    }
  }
  char v86 = 1;
LABEL_151:
  memset(buf, 0, 24);
  *(_OWORD *)&unsigned char buf[24] = xmmword_1908824F0;
  buf[40] = 0;
  *(_OWORD *)&uint8_t buf[48] = 0u;
  long long v279 = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v280 = _Q0;
  long long v281 = _Q0;
  long long v282 = _Q0;
  long long v283 = _Q0;
  unint64_t v284 = 0xBFF0000000000000;
  char v285 = 0;
  long long v286 = _Q0;
  long long v287 = _Q0;
  long long v288 = _Q0;
  sub_190841084((uint64_t)buf, (uint64_t)v268, 0);
  uint64_t v97 = (double *)*((void *)&v245 + 1);
  for (uint64_t i = (double *)v245; i != v97; i += 14)
  {
    memset(v253, 0, sizeof(v253));
    *(void *)uint64_t v254 = 0x3FF0000000000000;
    memset(&v254[8], 0, 32);
    LODWORD(v255) = 0;
    sub_19083D210((double *)a1, (uint64_t)buf, i, (uint64_t)v253);
    LODWORD(v255) = 1;
    *(void *)uint64_t v254 = 0x3FF0000000000000;
    sub_1908410DC(i, (uint64_t)v253);
    sub_1907D4D3C(i);
  }
LABEL_153:
  sub_19083CDDC((double **)&v245, v2);
  sub_19083C9A4((uint64_t)&v237, (uint64_t *)v245, *((uint64_t **)&v245 + 1));
  uint64_t v99 = v228;
  if (v86) {
    goto LABEL_154;
  }
  if (!v237) {
    goto LABEL_154;
  }
  if (!*(unsigned char *)(v228 + 504)) {
    goto LABEL_154;
  }
  if (!*(void *)(v228 + 120)) {
    goto LABEL_154;
  }
  sub_1907BDE7C(v228 + 120, (uint64_t)buf);
  sub_1907BDE7C((uint64_t)&v237, (uint64_t)v253);
  if (*(void *)buf != v253[0] || buf[16] != LOBYTE(v253[2]) || *(void *)&buf[8] != v253[1]) {
    goto LABEL_154;
  }
  double v142 = v241;
  double v143 = *(double *)(v228 + 168);
  uint64_t v144 = v237;
  sub_19082373C(v237);
  double v145 = *(double *)(v144 + 40);
  double v146 = *(double *)(a1 + 856);
  sub_1908412A4((uint64_t)v265, (uint64_t)&v245);
  double v147 = (v142 - v143) * v145;
  double v148 = v146 * 5.0;
  if (v147 > v146 * 5.0)
  {
    memset(v253, 0, sizeof(v253));
    *(_OWORD *)uint64_t v254 = xmmword_1908824F0;
    v254[16] = 0;
    *(_OWORD *)&v254[24] = 0u;
    long long v255 = 0u;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v256 = _Q0;
    long long v257 = _Q0;
    long long v258 = _Q0;
    long long v259 = _Q0;
    unint64_t v260 = 0xBFF0000000000000;
    char v261 = 0;
    long long v262 = _Q0;
    long long v263 = _Q0;
    long long v264 = _Q0;
    sub_190841084((uint64_t)v253, (uint64_t)v268, 0);
    *((void *)&v257 + 1) = 0xBFF0000000000000;
    *((void *)&v258 + 1) = 0xBFF0000000000000;
    uint64_t v150 = *(double **)v265;
    uint64_t v151 = *(double **)&v265[8];
    if (*(void *)v265 == *(void *)&v265[8])
    {
      uint64_t v152 = *(uint64_t **)v265;
    }
    else
    {
      do
      {
        memset(buf, 0, 24);
        *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
        memset(&buf[32], 0, 32);
        LODWORD(v279) = 0;
        sub_19083D210((double *)a1, (uint64_t)v253, v150, (uint64_t)buf);
        LODWORD(v279) = 1;
        *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
        sub_1908410DC(v150, (uint64_t)buf);
        sub_1907D4D3C(v150);
        v150 += 14;
      }
      while (v150 != v151);
      uint64_t v152 = *(uint64_t **)v265;
      uint64_t v150 = *(double **)&v265[8];
      uint64_t v99 = v228;
    }
    sub_19083C9A4((uint64_t)&v230, v152, (uint64_t *)v150);
    uint64_t v186 = v230;
    if (v230)
    {
      double v187 = *(double *)&v235;
      double v188 = *(double *)(v99 + 168);
      sub_19082373C((uint64_t)v230);
      double v189 = (v187 - v188) * *((double *)v186 + 5);
      if (v189 >= v148) {
        goto LABEL_337;
      }
      sub_190841388((uint64_t)&v245, (uint64_t)v265);
      sub_1907BDEFC((uint64_t)&v237, (uint64_t *)&v230);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v190 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349568;
        *(double *)&uint8_t buf[4] = v2;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&unsigned char buf[14] = v147;
        *(_WORD *)&unsigned char buf[22] = 2050;
        *(double *)&unsigned char buf[24] = v189;
        _os_log_impl(&dword_1906B8000, v190, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,invalidated course and recomputed solution,changeInDistance,%{public}.2lf,newChangeInDistance,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_337;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)BOOL v250 = 134349568;
      *(double *)&v250[4] = v2;
      *(_WORD *)&v250[12] = 2050;
      *(double *)&v250[14] = v147;
      __int16 v251 = 2050;
      double v252 = v189;
      int v191 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v191);
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v192 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        *(double *)&uint8_t buf[4] = v2;
        _os_log_impl(&dword_1906B8000, v192, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,1", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_337;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)BOOL v250 = 134349056;
      *(double *)&v250[4] = v2;
      int v191 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v191);
    }
    if (v191 != buf) {
      free(v191);
    }
    uint64_t v99 = v228;
LABEL_337:
    sub_1907B515C(&v230);
  }
  sub_1908413FC((uint64_t)v265);
LABEL_154:
  if (!*(unsigned char *)(v99 + 504)
    || !*(unsigned char *)(v6 + 152)
    || !*(unsigned char *)(v6 + 153)
    || !v237
    || !*v227
    || (v101 = *(void *)(v99 + 120), uint64_t v100 = v99 + 120, !v101)
    || (sub_1907BDE7C(v100, (uint64_t)buf), sub_1907BDE7C((uint64_t)&v237, (uint64_t)v253), *(void *)buf == v253[0])
    && buf[16] == LOBYTE(v253[2])
    && *(void *)&buf[8] == v253[1]
    || (sub_1907BDE7C((uint64_t)&v237, (uint64_t)&v230), v230 != *(uint64_t **)(v6 + 128))
    || v232 != *(unsigned __int8 *)(v6 + 144)
    || v231 != *(uint64_t **)(v6 + 136)
    || (sub_1907BDE7C((uint64_t)v227, (uint64_t)v265),
        sub_1907BDE7C(v100, (uint64_t)v250),
        *(void *)v265 != *(void *)v250)
    || v265[16] != v250[16]
    || *(void *)&v265[8] != *(void *)&v250[8]
    || sub_190841444((uint64_t)&v237, (double *)a1, v100) <= *(double *)(a1 + 856) * 5.0)
  {
    BOOL v107 = 0;
    goto LABEL_189;
  }
  sub_1908412A4((uint64_t)&v230, (uint64_t)&v245);
  sub_1907BDE7C((uint64_t)&v237, (uint64_t)v229);
  int v102 = sub_19083CAE8((uint64_t *)&v230, (uint64_t)v229, v2);
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  double v103 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349312;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v102;
    _os_log_impl(&dword_1906B8000, v103, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,eliminated outgoing roadKey for local solution,%{public}d", buf, 0x12u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    LODWORD(v253[0]) = 134349312;
    *(double *)((char *)v253 + 4) = v2;
    WORD2(v253[1]) = 1026;
    *(_DWORD *)((char *)&v253[1] + 6) = v102;
    uint64_t v220 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v220);
    if (v220 != buf) {
      free(v220);
    }
  }
  if (v231 == v230)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v204 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349312;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v102;
      _os_log_impl(&dword_1906B8000, v204, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Number of particles 0 after eliminating particles on combined road,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      LODWORD(v253[0]) = 134349312;
      *(double *)((char *)v253 + 4) = v2;
      WORD2(v253[1]) = 1026;
      *(_DWORD *)((char *)&v253[1] + 6) = v102;
      uint64_t v221 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v221);
      if (v221 != buf) {
        free(v221);
      }
    }
    BOOL v107 = 0;
    goto LABEL_395;
  }
  sub_19083C9A4((uint64_t)v253, v230, v231);
  if (!v253[0])
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v206 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v206, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,newParticle road is nullptr,2", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_393;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)uint64_t v265 = 134349056;
    *(double *)&v265[4] = v2;
    double v207 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v207);
    goto LABEL_434;
  }
  double v104 = sub_190841444((uint64_t)v253, (double *)a1, v100);
  if (*(double *)(a1 + 472) < 0.75) {
    goto LABEL_179;
  }
  double v105 = *(double *)(a1 + 856);
  if (v104 > v105 * 0.8) {
    goto LABEL_179;
  }
  if (v104 < v105 && !*(unsigned char *)(a1 + 897))
  {
    double v213 = *(double *)(a1 + 480);
    double v214 = *(float *)v254;
    double v215 = *((float *)&v239 + 2);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v216 = vabdd_f64(v213, v214);
    double v217 = vabdd_f64(v213, v215);
    uint64_t v218 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134349568;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v216;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(double *)&unsigned char buf[24] = v217;
      _os_log_impl(&dword_1906B8000, v218, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,use new particle, course check, crumbCourseDiffWithNewParticle,%{public}.1lf,crumbCourseDiffWithPreviousParticle,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)uint64_t v265 = 134349568;
      *(double *)&v265[4] = v2;
      *(_WORD *)&v265[12] = 2050;
      *(double *)&v265[14] = v216;
      __int16 v266 = 2050;
      double v267 = v217;
      uint64_t v222 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v222);
      if (v222 != buf) {
        free(v222);
      }
    }
    if (v216 < 35.0 && v217 > 60.0)
    {
LABEL_179:
      double v106 = vabdd_f64(*(double *)(a1 + 480), *((float *)&v239 + 2));
      BOOL v107 = v106 < 30.0;
      sub_1907BDEFC((uint64_t)&v237, v253);
      sub_190841388((uint64_t)&v245, (uint64_t)&v230);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      __int16 v108 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349312;
        *(double *)&uint8_t buf[4] = v2;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v106 < 30.0;
        _os_log_impl(&dword_1906B8000, v108, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,new particle without the outgoing road accepted,courseIsUnreliable,%{public}d", buf, 0x12u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        *(_DWORD *)uint64_t v265 = 134349312;
        *(double *)&v265[4] = v2;
        *(_WORD *)&v265[12] = 1026;
        *(_DWORD *)&v265[14] = v106 < 30.0;
        char v109 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v109);
        if (v109 != buf) {
          free(v109);
        }
      }
      goto LABEL_394;
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v211 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134349312;
    *(double *)&uint8_t buf[4] = v2;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v102;
    _os_log_impl(&dword_1906B8000, v211, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not using local solution without outgoing road,%{public}d", buf, 0x12u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)uint64_t v265 = 134349312;
    *(double *)&v265[4] = v2;
    *(_WORD *)&v265[12] = 1026;
    *(_DWORD *)&v265[14] = v102;
    double v207 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v207);
LABEL_434:
    if (v207 != buf) {
      free(v207);
    }
  }
LABEL_393:
  BOOL v107 = 0;
LABEL_394:
  sub_1907B515C(v253);
LABEL_395:
  sub_1908413FC((uint64_t)&v230);
LABEL_189:
  uint64_t v110 = v237;
  int v111 = v238;
  if (v238) {
    atomic_fetch_add_explicit(&v238->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v112 = (uint64_t *)(a1 + 256);
  int v113 = *(std::__shared_weak_count **)(a1 + 264);
  *(void *)(a1 + 256) = v110;
  *(void *)(a1 + 264) = v111;
  if (v113) {
    sub_1906BFE48(v113);
  }
  long long v114 = v240;
  *(_OWORD *)(a1 + 272) = v239;
  *(_OWORD *)(a1 + 288) = v114;
  *(double *)(a1 + 304) = v241;
  *(_OWORD *)(a1 + 312) = v242[0];
  *(_OWORD *)(a1 + 321) = *(_OWORD *)((char *)v242 + 9);
  if (v112 != &v237) {
    sub_1907B5974((char *)(a1 + 344), (char *)__p, (uint64_t)v244, 0x8E38E38E38E38E39 * ((v244 - (unsigned char *)__p) >> 3));
  }
  *(unsigned char *)(a1 + 882) = 1;
  char v115 = *(unsigned char *)(v6 + 152);
  if (v115)
  {
    char v115 = *(unsigned char *)(v6 + 153);
    if (v115) {
      char v115 = *(_DWORD *)(v6 + 1044) > (int)(-1227133513 * ((*(void *)(v6 + 1072) - *(void *)(v6 + 1064)) >> 4));
    }
  }
  *(unsigned char *)(a1 + 368) = v115;
  if (!*(void *)(a1 + 256))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v153 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v153, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,best particle road is nullptr", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_258;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    LODWORD(v253[0]) = 134349056;
    *(double *)((char *)v253 + 4) = v2;
    uint64_t v154 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v154);
    goto LABEL_380;
  }
  double v116 = (_OWORD *)(a1 + 376);
  double v224 = (double *)(a1 + 312);
  if (*(unsigned char *)(a1 + 896)
    && (sub_1907BDE7C(a1 + 256, (uint64_t)buf), *(void *)(v6 + 128) == *(void *)buf)
    && *(unsigned __int8 *)(v6 + 144) == buf[16]
    && *(void *)(v6 + 136) == *(void *)&buf[8])
  {
    long long v117 = *(_OWORD *)(v6 + 600);
    long long v118 = *(_OWORD *)(v6 + 616);
    long long v119 = *(_OWORD *)(v6 + 648);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(v6 + 632);
    *(_OWORD *)(a1 + 424) = v119;
    _OWORD *v116 = v117;
    *(_OWORD *)(a1 + 392) = v118;
    long long v120 = *(_OWORD *)(v6 + 664);
    long long v121 = *(_OWORD *)(v6 + 680);
    long long v122 = *(_OWORD *)(v6 + 712);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(v6 + 696);
    *(_OWORD *)(a1 + 488) = v122;
    *(_OWORD *)(a1 + 440) = v120;
    *(_OWORD *)(a1 + 456) = v121;
    std::string::operator=((std::string *)(a1 + 504), (const std::string *)(v6 + 728));
    double v123 = (uint64_t **)(a1 + 864);
    memcpy((void *)(a1 + 528), (const void *)(v6 + 752), 0x118uLL);
    if (*(void *)(v6 + 8))
    {
      sub_19076BC8C((void *)(a1 + 864), v227);
      *(unsigned char *)(a1 + 880) = *(unsigned char *)(v6 + 28);
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v177 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134349056;
        *(double *)&uint8_t buf[4] = v2;
      }
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        LODWORD(v253[0]) = 134349056;
        *(double *)((char *)v253 + 4) = v2;
        uint64_t v219 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v219);
        if (v219 != buf) {
          free(v219);
        }
      }
    }
    if (*v123)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      __int16 v178 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v179 = **v123;
        uint64_t v180 = *(void *)(v6 + 128);
        uint64_t v181 = *(void *)v224;
        *(_DWORD *)long long buf = 134349825;
        *(double *)&uint8_t buf[4] = v2;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)&unsigned char buf[14] = v179;
        *(_WORD *)&unsigned char buf[22] = 2049;
        *(void *)&unsigned char buf[24] = v180;
        *(_WORD *)&unsigned char buf[32] = 2050;
        *(void *)&buf[34] = v181;
        _os_log_impl(&dword_1906B8000, v178, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Using outgoing,incomingID,%{private}lld,outgoingID,%{private}lld,score,%{public}.8lf", buf, 0x2Au);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v182 = **v123;
        uint64_t v183 = *(void *)(v6 + 128);
        uint64_t v184 = *(void *)v224;
        LODWORD(v253[0]) = 134349825;
        *(double *)((char *)v253 + 4) = v2;
        WORD2(v253[1]) = 2049;
        *(uint64_t *)((char *)&v253[1] + 6) = v182;
        HIWORD(v253[2]) = 2049;
        *(void *)uint64_t v254 = v183;
        *(_WORD *)&v254[8] = 2050;
        *(void *)&v254[10] = v184;
        int v185 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v185);
        if (v185 != buf) {
          free(v185);
        }
      }
    }
  }
  else
  {
    long long v124 = *(_OWORD *)(v6 + 168);
    long long v125 = *(_OWORD *)(v6 + 184);
    long long v126 = *(_OWORD *)(v6 + 216);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(v6 + 200);
    *(_OWORD *)(a1 + 424) = v126;
    _OWORD *v116 = v124;
    *(_OWORD *)(a1 + 392) = v125;
    long long v127 = *(_OWORD *)(v6 + 232);
    long long v128 = *(_OWORD *)(v6 + 248);
    long long v129 = *(_OWORD *)(v6 + 280);
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(v6 + 264);
    *(_OWORD *)(a1 + 488) = v129;
    *(_OWORD *)(a1 + 440) = v127;
    *(_OWORD *)(a1 + 456) = v128;
    std::string::operator=((std::string *)(a1 + 504), (const std::string *)(v6 + 296));
    memcpy((void *)(a1 + 528), (const void *)(v6 + 320), 0x118uLL);
  }
  *(unsigned char *)(a1 + 881) = 0;
  long long v130 = 0uLL;
  memset(buf, 0, 53);
  int v131 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (v131)
  {
    sub_1906BFE48(v131);
    long long v130 = 0uLL;
  }
  uint64_t v133 = (void *)(a1 + 224);
  uint64_t v132 = *(void **)(a1 + 224);
  *(_DWORD *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 1;
  *(_OWORD *)(a1 + 157) = v130;
  *(_OWORD *)(a1 + 173) = v130;
  *(_DWORD *)(a1 + 188) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)&buf[28];
  *(_OWORD *)(a1 + 201) = *(_OWORD *)&buf[37];
  if (v132)
  {
    *(void *)(a1 + 232) = v132;
    operator delete(v132);
    void *v133 = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
  }
  void *v133 = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0xBFF0000000000000;
  if (!*(unsigned char *)(a1 + 368) || *(double *)(a1 + 568) <= 0.0 || *(double *)(a1 + 480) < 0.0)
  {
    char v134 = 1;
    goto LABEL_214;
  }
  uint64_t v157 = *(void *)(a1 + 384);
  int v158 = *(unsigned __int8 *)(a1 + 276);
  double v159 = *(double *)(a1 + 304);
  uint64_t v160 = *(void *)(a1 + 256);
  sub_19082373C(v160);
  if (v158) {
    double v161 = 1.0 - v159;
  }
  else {
    double v161 = v159;
  }
  double v162 = *(double *)(v160 + 40);
  long double v163 = sub_1906DA618((double *)a1, *(double *)(a1 + 432), *(double *)(a1 + 440), *(double *)(v228 + 296), *(double *)(v228 + 304), *(double *)(a1 + 448));
  double v164 = *(double *)(v228 + 544);
  double v165 = *(double *)(a1 + 480);
  double v166 = -1.0;
  if (v164 >= 0.0)
  {
    double v167 = fmod(v165 - v164, 360.0);
    if (v167 < 0.0) {
      double v167 = v167 + 360.0;
    }
    if (v167 > 180.0) {
      double v167 = v167 + -360.0;
    }
    double v166 = fabs(v167);
  }
  double v168 = v161 * v162;
  double v169 = fmod(v165 - *(float *)(a1 + 280), 360.0);
  if (v169 < 0.0) {
    double v169 = v169 + 360.0;
  }
  if (v169 > 180.0) {
    double v169 = v169 + -360.0;
  }
  double v170 = fabs(v169);
  double v171 = *(double *)(a1 + 568);
  if (v171 > 0.0 && v171 < 45.0 && v170 > 30.0)
  {
    BOOL v172 = 0;
LABEL_288:
    char v134 = 1;
    if (v168 >= 0.0 && v168 < 35.0 && !v172)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v174 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 134349312;
        *(void *)&uint8_t buf[4] = v157;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&unsigned char buf[14] = v168;
        _os_log_impl(&dword_1906B8000, v174, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,not snapping course,reason,distanceToIntersection,%{public}.1lf", buf, 0x16u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        LODWORD(v253[0]) = 134349312;
        *(uint64_t *)((char *)v253 + 4) = v157;
        WORD2(v253[1]) = 2050;
        *(double *)((char *)&v253[1] + 6) = v168;
        double v212 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)", "CoreLocation: %s\n", v212);
        if (v212 != buf) {
          free(v212);
        }
      }
      char v134 = 0;
    }
    goto LABEL_297;
  }
  double v173 = *(double *)(v228 + 432);
  char v134 = 1;
  if (v173 > 0.0 && v173 < 45.0)
  {
    BOOL v172 = v166 <= 30.0;
    goto LABEL_288;
  }
LABEL_297:
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v175 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134350080;
    *(void *)&uint8_t buf[4] = v157;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&unsigned char buf[14] = v168;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(long double *)&unsigned char buf[24] = v163;
    *(_WORD *)&unsigned char buf[32] = 2050;
    *(double *)&buf[34] = v170;
    *(_WORD *)&buf[42] = 2050;
    *(double *)&buf[44] = v166;
    _os_log_impl(&dword_1906B8000, v175, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,distToNextMulti,%{public}.1lf,distFromPriorCrumb,%{public}.1lf,fabsCourseDiffWithSnap,%{public}.1lf,fabsCourseDiffWithPriorFullSnap,%{public}.1lf", buf, 0x34u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    LODWORD(v253[0]) = 134350080;
    *(uint64_t *)((char *)v253 + 4) = v157;
    WORD2(v253[1]) = 2050;
    *(double *)((char *)&v253[1] + 6) = v168;
    HIWORD(v253[2]) = 2050;
    *(long double *)uint64_t v254 = v163;
    *(_WORD *)&v254[8] = 2050;
    *(double *)&v254[10] = v170;
    *(_WORD *)&v254[18] = 2050;
    *(double *)&v254[20] = v166;
    uint64_t v176 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::shallUseSnapCourse(const MMSnapData &)", "CoreLocation: %s\n", v176);
    if (v176 != buf) {
      free(v176);
    }
  }
LABEL_214:
  *(unsigned char *)(a1 + 848) = v134 ^ 1;
  *(void *)(a1 + 888) = *(void *)(a1 + 96);
  memset(v253, 0, sizeof(v253));
  *(_OWORD *)uint64_t v254 = xmmword_1908824F0;
  v254[16] = 0;
  *(_OWORD *)&v254[24] = 0u;
  long long v255 = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v256 = _Q0;
  long long v257 = _Q0;
  long long v258 = _Q0;
  long long v259 = _Q0;
  unint64_t v260 = 0xBFF0000000000000;
  char v261 = 0;
  long long v262 = _Q0;
  long long v263 = _Q0;
  long long v264 = _Q0;
  sub_190841084((uint64_t)v253, a1 + 376, *(unsigned __int8 *)(a1 + 904));
  if (v107)
  {
    *((void *)&v257 + 1) = 0xBFF0000000000000;
    *((void *)&v258 + 1) = 0xBFF0000000000000;
  }
  int v230 = 0;
  int v231 = 0;
  uint64_t v232 = 0;
  uint64_t v233 = 0x3FF0000000000000;
  long long v234 = 0u;
  long long v235 = 0u;
  int v236 = 0;
  if (!sub_19083D210((double *)a1, (uint64_t)v253, (double *)(a1 + 256), (uint64_t)&v230))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v155 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      _os_log_impl(&dword_1906B8000, v155, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to calculate score", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_258;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_379;
    }
    goto LABEL_430;
  }
  int v236 = 1;
  uint64_t v233 = 0x3FF0000000000000;
  sub_1908410DC((void *)(a1 + 256), (uint64_t)&v230);
  sub_1907D4D3C((double *)(a1 + 256));
  if (sub_19083A548(a1 + 136))
  {
    *(_DWORD *)(a1 + 556) = 0;
    double v136 = sub_19083C424((uint64_t *)(a1 + 104));
    if (v136 > 0.0)
    {
      double v137 = *(double *)(a1 + 312) / v136;
      if (v137 > 1000000.0) {
        double v137 = 1000000.0;
      }
      float v138 = v137;
      *(float *)(a1 + 556) = v138;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v139 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v140 = *(void *)*v112;
      uint64_t v141 = *(void *)v224;
      *(_DWORD *)long long buf = 134349569;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&unsigned char buf[14] = v140;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v141;
      _os_log_impl(&dword_1906B8000, v139, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,bestParticleRoadID,%{private}lld,score,%{public}.8lf", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v208 = *(void *)*v112;
      double v209 = *v224;
      *(_DWORD *)uint64_t v265 = 134349569;
      *(double *)&v265[4] = v2;
      *(_WORD *)&v265[12] = 2049;
      *(void *)&v265[14] = v208;
      __int16 v266 = 2050;
      double v267 = v209;
      int v210 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v210);
      if (v210 != buf) {
        free(v210);
      }
    }
    uint64_t v14 = 1;
    goto LABEL_259;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v156 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349056;
    *(double *)&uint8_t buf[4] = v2;
    _os_log_impl(&dword_1906B8000, v156, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,unable to fill crumb", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1)
    {
LABEL_379:
      *(_DWORD *)uint64_t v265 = 134349056;
      *(double *)&v265[4] = v2;
      uint64_t v154 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::MMFilterData::extractSolution(const MMSnapData &)", "CoreLocation: %s\n", v154);
LABEL_380:
      if (v154 != buf) {
        free(v154);
      }
      goto LABEL_258;
    }
LABEL_430:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    goto LABEL_379;
  }
LABEL_258:
  uint64_t v14 = 0;
LABEL_259:
  if (__p)
  {
    uint64_t v244 = __p;
    operator delete(__p);
  }
  if (v238) {
    sub_1906BFE48(v238);
  }
  if (SHIBYTE(v276) < 0) {
    operator delete((void *)v275);
  }
LABEL_265:
  if (*((void *)&v246 + 1))
  {
    *(void *)&long long v247 = *((void *)&v246 + 1);
    operator delete(*((void **)&v246 + 1));
  }
  *(void *)long long buf = &v245;
  sub_1907D5AB4((void ***)buf);
  return v14;
}

void sub_190840EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (SLOBYTE(STACK[0x347]) < 0) {
    operator delete((void *)STACK[0x330]);
  }
  sub_1908413FC((uint64_t)&a49);
  _Unwind_Resume(a1);
}

double sub_190841084(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 56);
  uint64_t v3 = *(void *)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 96);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 72);
  *(void *)(a1 + 104) = v4;
  uint64_t v7 = *(void *)(a2 + 184);
  uint64_t v6 = *(void *)(a2 + 192);
  *(void *)(a1 + 112) = v3;
  *(void *)(a1 + 120) = v6;
  *(void *)(a1 + 128) = 0x3FF0000000000000;
  *(void *)(a1 + 136) = v5;
  *(void *)(a1 + 144) = v7;
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 228);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 176) = *(void *)(a2 + 216);
  *(int8x16_t *)(a1 + 184) = vextq_s8(*(int8x16_t *)(a2 + 16), *(int8x16_t *)(a2 + 16), 8uLL);
  *(void *)(a1 + 200) = *(void *)(a2 + 8);
  sub_190802558(a1, a2, a3);
  return result;
}

void sub_1908410DC(void *a1, uint64_t a2)
{
  uint64_t v5 = a1[11];
  unint64_t v4 = a1[12];
  uint64_t v6 = (void **)(a1 + 11);
  if (v5 == v4)
  {
LABEL_5:
    uint64_t v8 = (uint64_t)(a1 + 13);
    unint64_t v9 = a1[13];
    if (v4 >= v9)
    {
      unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v5) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0x38E38E38E38E38ELL) {
        sub_190718FD4();
      }
      unint64_t v16 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v5) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x1C71C71C71C71C7) {
        unint64_t v17 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17) {
        unint64_t v18 = (char *)sub_1907B5928(v8, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      uint64_t v22 = &v18[72 * v14];
      unint64_t v23 = &v18[72 * v17];
      *(_OWORD *)uint64_t v22 = *(_OWORD *)a2;
      long long v24 = *(_OWORD *)(a2 + 16);
      long long v25 = *(_OWORD *)(a2 + 32);
      long long v26 = *(_OWORD *)(a2 + 48);
      *((void *)v22 + 8) = *(void *)(a2 + 64);
      *((_OWORD *)v22 + 2) = v25;
      *((_OWORD *)v22 + 3) = v26;
      *((_OWORD *)v22 + 1) = v24;
      long long v13 = v22 + 72;
      long long v28 = (char *)a1[11];
      unint64_t v27 = (char *)a1[12];
      if (v27 != v28)
      {
        do
        {
          *(_OWORD *)(v22 - 72) = *(_OWORD *)(v27 - 72);
          long long v29 = *(_OWORD *)(v27 - 56);
          long long v30 = *(_OWORD *)(v27 - 40);
          long long v31 = *(_OWORD *)(v27 - 24);
          *((_DWORD *)v22 - 2) = *((_DWORD *)v27 - 2);
          *(_OWORD *)(v22 - 24) = v31;
          *(_OWORD *)(v22 - 40) = v30;
          *(_OWORD *)(v22 - 56) = v29;
          v22 -= 72;
          v27 -= 72;
        }
        while (v27 != v28);
        unint64_t v27 = (char *)*v6;
      }
      a1[11] = v22;
      a1[12] = v13;
      a1[13] = v23;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 16);
      long long v11 = *(_OWORD *)(a2 + 32);
      long long v12 = *(_OWORD *)(a2 + 48);
      *(void *)(v4 + 64) = *(void *)(a2 + 64);
      *(_OWORD *)(v4 + 32) = v11;
      *(_OWORD *)(v4 + 48) = v12;
      *(_OWORD *)(v4 + 16) = v10;
      long long v13 = (char *)(v4 + 72);
    }
    a1[12] = v13;
  }
  else
  {
    uint64_t v7 = a1[11];
    while (*(_DWORD *)(v7 + 64) != *(_DWORD *)(a2 + 64))
    {
      v7 += 72;
      if (v7 == v4) {
        goto LABEL_5;
      }
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    long long v19 = *(_OWORD *)(a2 + 16);
    long long v20 = *(_OWORD *)(a2 + 32);
    long long v21 = *(_OWORD *)(a2 + 48);
    *(_DWORD *)(v7 + 64) = *(_DWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 32) = v20;
    *(_OWORD *)(v7 + 48) = v21;
    *(_OWORD *)(v7 + 16) = v19;
  }
}

uint64_t sub_1908412A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_19084EDEC((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 24);
  unint64_t v4 = *(unsigned char **)(a2 + 32);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    sub_1907D63E4((void *)(a1 + 24), v6 >> 2);
    uint64_t v7 = *(char **)(a1 + 32);
    memmove(v7, v5, v6);
    *(void *)(a1 + 32) = &v7[4 * (v6 >> 2)];
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_190841360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  sub_1907D5AB4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_190841388(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_19084F698((uint64_t *)a1, *(uint64_t **)a2, *(uint64_t **)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
    sub_19084F03C((char *)(a1 + 24), *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t sub_1908413FC(uint64_t a1)
{
  double v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)a1;
  sub_1907D5AB4(&v4);
  return a1;
}

long double sub_190841444(uint64_t a1, double *a2, uint64_t a3)
{
  if (*(void *)a3 && *(void *)a1) {
    return sub_1906DA618(a2, *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a3 + 32), *(double *)(a3 + 40), 0.0);
  }
  else {
    return -1.0;
  }
}

uint64_t sub_190841470(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE003080;
  *(_DWORD *)(a1 + 8) = 257;
  *(unsigned char *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_190885430;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 168) = xmmword_1908820F0;
  *(void *)(a1 + 200) = 0x3FF0000000000000;
  *(void *)(a1 + 208) = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 216) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 224) = _Q1;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_WORD *)(a1 + 284) = 1;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(unsigned char *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 376) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_DWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 404) = 1;
  *(_DWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(unsigned char *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 496) = 0;
  *(void *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 520) = 0xBFF0000000000000;
  *(void *)(a1 + 528) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 552) = 0xBFF0000000000000;
  *(void *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(_WORD *)(a1 + 768) = 0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 851) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 718) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(void *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 928) = xmmword_190885CA0;
  *(void *)(a1 + 944) = 0x415854A640000000;
  *(void *)(a1 + 968) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 1007) = 0;
  *(void *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_DWORD *)(a1 + 1023) = 0;
  *(void *)(a1 + 1016) = 0;
  *(unsigned char *)(a1 + 1032) = 0;
  *(void *)(a1 + 1040) = a1 + 1040;
  *(void *)(a1 + 1048) = a1 + 1040;
  *(void *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_WORD *)(a1 + 1108) = 1;
  *(_DWORD *)(a1 + 1112) = 0;
  *(unsigned char *)(a1 + 1168) = 0;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1200) = 0;
  *(void *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_DWORD *)(a1 + 1208) = 0;
  *(unsigned char *)(a1 + 1212) = 0;
  *(void *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1257) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = _Q1;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(void *)(a1 + 1328) = 0xBFF0000000000000;
  *(void *)(a1 + 1552) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(_WORD *)(a1 + 1544) = 0;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1627) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1494) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(void *)(a1 + 1704) = 0xBFF0000000000000;
  *(void *)(a1 + 1696) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = xmmword_1908820F0;
  *(void *)(a1 + 1744) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 1752) = -1;
  *(_DWORD *)(a1 + 1776) = 0;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(void *)(a1 + 1784) = a1 + 1784;
  *(void *)(a1 + 1792) = a1 + 1784;
  *(void *)(a1 + 1800) = 0;
  *(void *)(a1 + 1808) = a1 + 1808;
  *(void *)(a1 + 1816) = a1 + 1808;
  *(void *)(a1 + 1824) = 0;
  *(void *)(a1 + 1832) = 0x600000006;
  *(void *)(a1 + 1848) = 0;
  *(void *)(a1 + 1840) = 0;
  *(void *)(a1 + 1856) = 0;
  *(void *)(a1 + 1864) = 0xBFF0000000000000;
  *(void *)(a1 + 1872) = 0xBFF0000000000000;
  *(void *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1928) = 0u;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(_OWORD *)(a1 + 1896) = 0u;
  *(_OWORD *)(a1 + 1952) = _Q1;
  *(_DWORD *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(void *)(a1 + 2112) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 2120) = 180;
  *(void *)(a1 + 2136) = 0;
  *(void *)(a1 + 2128) = 0;
  *(_DWORD *)(a1 + 2144) = 0;
  *(void *)(a1 + 2200) = 0;
  *(_OWORD *)(a1 + 2168) = 0u;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  sub_190841900(a1);
  return a1;
}

void sub_190841804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, void **a16)
{
  long long v30 = v23;
  long long v25 = *(void **)(v16 + 2176);
  if (v25)
  {
    *(void *)(v16 + 2184) = v25;
    operator delete(v25);
  }
  uint64_t v26 = *(void *)(v16 + 2088);
  *(void *)(v16 + 2088) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *v18;
  *unint64_t v18 = 0;
  if (v27) {
    sub_1907F4700((uint64_t)v18, v27);
  }
  a16 = v22;
  sub_1907D5DA4(&a16);
  a16 = v21;
  sub_1907D5DA4(&a16);
  sub_1907D5D50(&a16);
  long long v28 = *a14;
  if (*a14)
  {
    *(void *)(v16 + 1848) = v28;
    operator delete(v28);
  }
  sub_190770ADC(v20);
  sub_190770ADC(v19);
  if (*(char *)(v16 + 1431) < 0) {
    operator delete(*(void **)(v16 + 1408));
  }
  sub_1907BC84C(a15);
  sub_1907B5AD8(v30);
  sub_190841CDC(v17);
  sub_1907D5AB4(&a16);
  long long v29 = *(std::__shared_weak_count **)(v16 + 216);
  if (v29) {
    sub_1906BFE48(v29);
  }
  _Unwind_Resume(a1);
}

double sub_190841900(uint64_t a1)
{
  v55[2] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  sub_19084F340((void *)(a1 + 240));
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  memset(v12, 0, 24);
  *(void *)long long v11 = v12;
  sub_1907D5AB4((void ***)v11);
  bzero(v12, 0x300uLL);
  v12[20] = 1;
  *(_DWORD *)&v12[24] = 0;
  unint64_t v14 = 0;
  long long v15 = 0u;
  memset(&v12[32], 0, 48);
  char v13 = 0;
  unint64_t v16 = 0xBFF0000000000000;
  long long v17 = 0u;
  int v18 = 0;
  char v19 = 1;
  int v20 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  char v24 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  long long v25 = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v28 = 0u;
  long long v29 = _Q0;
  long long v30 = 0u;
  unint64_t v31 = 0xBFF0000000000000;
  int v43 = 0;
  memset(&v41[32], 0, 32);
  __int16 v42 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  memset(v47, 0, 27);
  memset(&v47[32], 0, 48);
  memset(v41, 0, 30);
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  unint64_t v49 = 0xBFF0000000000000;
  int v48 = 0;
  long long v50 = xmmword_1908820F0;
  long long v51 = 0u;
  uint64_t v52 = 0x3FF0000000000000;
  *(_DWORD *)((char *)v54 + 7) = 0;
  v54[0] = 0;
  long long v53 = 0u;
  *(_DWORD *)((char *)v55 + 7) = 0;
  v55[0] = 0;
  sub_19084363C(a1 + 264, (long long *)v12);
  if (v54[0]) {
    sub_1906BFE48(v54[0]);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(*((void **)&v36 + 1));
  }
  if ((void)v25) {
    operator delete((void *)v25);
  }
  if (*((void *)&v17 + 1)) {
    sub_1906BFE48(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (v14) {
    operator delete(v14);
  }
  if (*(void *)&v12[8]) {
    sub_1906BFE48(*(std::__shared_weak_count **)&v12[8]);
  }
  *(unsigned char *)(a1 + 1032) = 0;
  sub_1907B5AD8((void *)(a1 + 1040));
  *(_DWORD *)(a1 + 1208) = 0;
  *(_OWORD *)&v11[7] = 0uLL;
  memset(&v12[4], 0, 49);
  *(unsigned char *)(a1 + 1064) = 0;
  *(void *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1065) = *(_OWORD *)v11;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 1096);
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1096) = 0;
  if (v7) {
    sub_1906BFE48(v7);
  }
  *(_DWORD *)(a1 + 1104) = 0;
  *(_WORD *)(a1 + 1108) = 1;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1116) = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 1128) = *(_OWORD *)&v12[12];
  *(_OWORD *)(a1 + 1144) = *(_OWORD *)&v12[28];
  *(_OWORD *)(a1 + 1153) = *(_OWORD *)&v12[37];
  uint64_t v8 = *(void **)(a1 + 1176);
  if (v8)
  {
    *(void *)(a1 + 1184) = v8;
    operator delete(v8);
  }
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1200) = 0;
  *(void *)(a1 + 1192) = 0;
  *(unsigned char *)(a1 + 1212) = 0;
  *(void *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1257) = 0u;
  sub_1907B5B3C(a1 + 1280);
  *(_DWORD *)(a1 + 1752) = -1;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_DWORD *)(a1 + 1776) = 0;
  *(void *)long long v12 = v12;
  *(void *)&v12[8] = v12;
  *(void *)&v12[16] = 0;
  sub_19084F98C((uint64_t *)(a1 + 1784), v12);
  sub_190770ADC((uint64_t *)v12);
  *(void *)long long v12 = v12;
  *(void *)&v12[8] = v12;
  *(void *)&v12[16] = 0;
  sub_19084F98C((uint64_t *)(a1 + 1808), v12);
  sub_190770ADC((uint64_t *)v12);
  *(void *)(a1 + 1832) = 0x600000006;
  unint64_t v9 = *(void **)(a1 + 1840);
  if (v9)
  {
    *(void *)(a1 + 1848) = v9;
    operator delete(v9);
  }
  *(void *)(a1 + 1856) = 0;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(void *)(a1 + 1864) = 0xBFF0000000000000;
  *(void *)(a1 + 1872) = 0xBFF0000000000000;
  sub_1907D5A04((uint64_t *)(a1 + 1880));
  sub_1907D65CC((uint64_t *)(a1 + 1904));
  *(void *)(a1 + 1920) = 0;
  *(_OWORD *)(a1 + 1904) = 0u;
  memset(v12, 0, 24);
  *(void *)long long v11 = v12;
  sub_1907D5DA4((void ***)v11);
  sub_1907D65CC((uint64_t *)(a1 + 1928));
  *(void *)(a1 + 1944) = 0;
  *(_OWORD *)(a1 + 1928) = 0u;
  memset(v12, 0, 24);
  *(void *)long long v11 = v12;
  sub_1907D5DA4((void ***)v11);
  *(_DWORD *)(a1 + 2072) = 0;
  *(void *)(a1 + 2200) = 0;
  *(void *)(a1 + 1968) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2048) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(void *)(a1 + 2037) = 0;
  *(void *)(a1 + 2056) = 0xBFF0000000000000;
  *(void *)(a1 + 2064) = 0xBFF0000000000000;
  return result;
}

uint64_t sub_190841CDC(uint64_t a1)
{
  double v2 = *(std::__shared_weak_count **)(a1 + 736);
  if (v2) {
    sub_1906BFE48(v2);
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  uint64_t v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(void *)(a1 + 216) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4) {
    sub_1906BFE48(v4);
  }
  uint64_t v5 = *(void **)(a1 + 88);
  if (v5)
  {
    *(void *)(a1 + 96) = v5;
    operator delete(v5);
  }
  int64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    sub_1906BFE48(v6);
  }
  return a1;
}

double sub_190841D54(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1908820F0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 96) = _Q1;
  *(void *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 156) = 1;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_WORD *)(a1 + 276) = 1;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(void *)(a1 + 392) = 0xBFF0000000000000;
  *(void *)(a1 + 400) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 424) = 0xBFF0000000000000;
  *(void *)(a1 + 648) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  *(_WORD *)(a1 + 640) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 723) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 590) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 800) = xmmword_190885CA0;
  *(void *)(a1 + 816) = 0x415854A640000000;
  *(void *)(a1 + 840) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 848) = 0;
  *(_DWORD *)(a1 + 879) = 0;
  *(void *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_DWORD *)(a1 + 895) = 0;
  *(void *)(a1 + 888) = 0;
  *(unsigned char *)(a1 + 904) = 0;
  return result;
}

uint64_t sub_190841EA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v4;
  if (v6) {
    sub_1906BFE48(v6);
  }
  long long v7 = *((_OWORD *)a2 + 1);
  long long v8 = *((_OWORD *)a2 + 2);
  *(void *)(a1 + 48) = a2[6];
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = v8;
  long long v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)((char *)a2 + 65);
  *(_OWORD *)(a1 + 56) = v9;
  if ((uint64_t *)a1 != a2) {
    sub_1907B5974((char *)(a1 + 88), (char *)a2[11], a2[12], 0x8E38E38E38E38E39 * ((a2[12] - a2[11]) >> 3));
  }
  *(void *)(a1 + 112) = a2[14];
  uint64_t v11 = a2[15];
  uint64_t v10 = a2[16];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v11;
  *(void *)(a1 + 128) = v10;
  if (v12) {
    sub_1906BFE48(v12);
  }
  long long v13 = *(_OWORD *)(a2 + 17);
  long long v14 = *(_OWORD *)(a2 + 19);
  *(void *)(a1 + 168) = a2[21];
  *(_OWORD *)(a1 + 152) = v14;
  *(_OWORD *)(a1 + 136) = v13;
  long long v15 = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 185) = *(_OWORD *)((char *)a2 + 185);
  *(_OWORD *)(a1 + 176) = v15;
  if ((uint64_t *)a1 != a2) {
    sub_1907B5974((char *)(a1 + 208), (char *)a2[26], a2[27], 0x8E38E38E38E38E39 * ((a2[27] - a2[26]) >> 3));
  }
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  long long v16 = *((_OWORD *)a2 + 15);
  long long v17 = *((_OWORD *)a2 + 16);
  long long v18 = *((_OWORD *)a2 + 18);
  *(_OWORD *)(a1 + 272) = *((_OWORD *)a2 + 17);
  *(_OWORD *)(a1 + 288) = v18;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 256) = v17;
  long long v19 = *((_OWORD *)a2 + 19);
  long long v20 = *((_OWORD *)a2 + 20);
  long long v21 = *((_OWORD *)a2 + 22);
  *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 21);
  *(_OWORD *)(a1 + 352) = v21;
  *(_OWORD *)(a1 + 304) = v19;
  *(_OWORD *)(a1 + 320) = v20;
  std::string::operator=((std::string *)(a1 + 368), (const std::string *)(a2 + 46));
  memcpy((void *)(a1 + 392), a2 + 49, 0x118uLL);
  long long v22 = *((_OWORD *)a2 + 42);
  long long v23 = *((_OWORD *)a2 + 43);
  long long v24 = *((_OWORD *)a2 + 44);
  *(void *)(a1 + 720) = a2[90];
  *(_OWORD *)(a1 + 688) = v23;
  *(_OWORD *)(a1 + 704) = v24;
  *(_OWORD *)(a1 + 672) = v22;
  uint64_t v25 = a2[91];
  uint64_t v26 = a2[92];
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 728) = v25;
  char v27 = *(std::__shared_weak_count **)(a1 + 736);
  *(void *)(a1 + 736) = v26;
  if (v27) {
    sub_1906BFE48(v27);
  }
  long long v28 = *(_OWORD *)(a2 + 93);
  *(_DWORD *)(a1 + 759) = *(_DWORD *)((char *)a2 + 759);
  *(_OWORD *)(a1 + 744) = v28;
  return a1;
}

uint64_t sub_190842064(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  if ((long long *)a1 == a2) {
    goto LABEL_76;
  }
  sub_19084F698((uint64_t *)(a1 + 40), *((uint64_t **)a2 + 5), *((uint64_t **)a2 + 6), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 4));
  sub_19084F03C((char *)(a1 + 64), *((char **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 2);
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  uint64_t v5 = (void *)*((void *)a2 + 14);
  int64_t v6 = (void *)a2 + 15;
  if (!*(void *)(a1 + 128)) {
    goto LABEL_39;
  }
  long long v8 = (uint64_t *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(v7 + 16) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  if (*(void *)(v9 + 8)) {
    uint64_t v10 = *(uint64_t **)(v9 + 8);
  }
  else {
    uint64_t v10 = (uint64_t *)v9;
  }
  uint64_t v63 = (_OWORD *)(a1 + 112);
  uint64_t v64 = v10;
  uint64_t v65 = v10;
  if (!v10 || (uint64_t v64 = sub_19084F244((uint64_t)v10), v5 == v6))
  {
    long long v21 = v5;
    goto LABEL_38;
  }
  do
  {
    long long v11 = *((_OWORD *)v5 + 2);
    *((unsigned char *)v10 + 48) = *((unsigned char *)v5 + 48);
    *((_OWORD *)v10 + 2) = v11;
    sub_19083C734((uint64_t)(v10 + 7), (uint64_t)(v5 + 7));
    uint64_t v12 = *v8;
    uint64_t v13 = a1 + 120;
    long long v14 = (uint64_t **)(a1 + 120);
    if (!*v8) {
      goto LABEL_27;
    }
    uint64_t v15 = v65[4];
    do
    {
      while (1)
      {
        uint64_t v13 = v12;
        uint64_t v16 = *(void *)(v12 + 32);
        if (v15 != v16)
        {
          if (v15 >= v16) {
            goto LABEL_25;
          }
          goto LABEL_22;
        }
        int v17 = *(unsigned __int8 *)(v13 + 48);
        BOOL v18 = !*((unsigned char *)v65 + 48) || v17 == 0;
        if (v18) {
          break;
        }
        if ((unint64_t)v65[5] >= *(void *)(v13 + 40)) {
          goto LABEL_25;
        }
LABEL_22:
        uint64_t v12 = *(void *)v13;
        long long v14 = (uint64_t **)v13;
        if (!*(void *)v13) {
          goto LABEL_27;
        }
      }
      if (*((unsigned char *)v65 + 48)) {
        BOOL v19 = v17 == 0;
      }
      else {
        BOOL v19 = 0;
      }
      if (v19) {
        goto LABEL_22;
      }
LABEL_25:
      uint64_t v12 = *(void *)(v13 + 8);
    }
    while (v12);
    long long v14 = (uint64_t **)(v13 + 8);
LABEL_27:
    sub_19074BC4C((uint64_t **)(a1 + 112), v13, v14, v65);
    uint64_t v10 = v64;
    uint64_t v65 = v64;
    if (v64) {
      uint64_t v64 = sub_19084F244((uint64_t)v64);
    }
    long long v20 = (void *)v5[1];
    if (v20)
    {
      do
      {
        long long v21 = v20;
        long long v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        long long v21 = (void *)v5[2];
        BOOL v18 = *v21 == (void)v5;
        uint64_t v5 = v21;
      }
      while (!v18);
    }
    if (!v10) {
      break;
    }
    uint64_t v5 = v21;
  }
  while (v21 != v6);
LABEL_38:
  sub_19084F298((uint64_t)&v63);
  uint64_t v5 = v21;
LABEL_39:
  if (v5 != v6)
  {
    long long v22 = (uint64_t *)(a1 + 120);
    while (1)
    {
      long long v23 = operator new(0x4B0uLL);
      long long v24 = v23;
      uint64_t v63 = v23;
      uint64_t v64 = (uint64_t *)(a1 + 120);
      LOBYTE(v65) = 0;
      uint64_t v25 = v5[6];
      v23[2] = *((_OWORD *)v5 + 2);
      *((void *)v23 + 6) = v25;
      *((void *)v23 + 7) = v5[7];
      *((void *)v23 + 8) = v5[8];
      uint64_t v26 = v5[9];
      *((void *)v23 + 9) = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      long long v27 = *((_OWORD *)v5 + 5);
      long long v28 = *((_OWORD *)v5 + 6);
      *((void *)v23 + 14) = v5[14];
      v23[5] = v27;
      v23[6] = v28;
      long long v29 = *(_OWORD *)(v5 + 15);
      long long v30 = *(_OWORD *)((char *)v5 + 129);
      *((void *)v23 + 19) = 0;
      *(_OWORD *)((char *)v23 + 129) = v30;
      *(_OWORD *)((char *)v23 + 120) = v29;
      *((void *)v23 + 20) = 0;
      *((void *)v23 + 21) = 0;
      sub_1907B5854((void *)v23 + 19, (const void *)v5[19], v5[20], 0x8E38E38E38E38E39 * ((uint64_t)(v5[20] - v5[19]) >> 3));
      long long v31 = *((_OWORD *)v5 + 11);
      long long v32 = *((_OWORD *)v5 + 13);
      v24[12] = *((_OWORD *)v5 + 12);
      v24[13] = v32;
      v24[11] = v31;
      long long v33 = *((_OWORD *)v5 + 21);
      long long v35 = *((_OWORD *)v5 + 18);
      long long v34 = *((_OWORD *)v5 + 19);
      v24[20] = *((_OWORD *)v5 + 20);
      v24[21] = v33;
      v24[18] = v35;
      v24[19] = v34;
      long long v36 = *((_OWORD *)v5 + 14);
      long long v37 = *((_OWORD *)v5 + 15);
      long long v38 = *((_OWORD *)v5 + 17);
      v24[16] = *((_OWORD *)v5 + 16);
      v24[17] = v38;
      v24[14] = v36;
      v24[15] = v37;
      if (*((char *)v5 + 375) < 0)
      {
        sub_1906C00FC((unsigned char *)v24 + 352, (void *)v5[44], v5[45]);
      }
      else
      {
        long long v39 = *((_OWORD *)v5 + 22);
        *((void *)v24 + 46) = v5[46];
        v24[22] = v39;
      }
      memcpy((char *)v24 + 376, v5 + 47, 0x118uLL);
      long long v40 = *((_OWORD *)v5 + 41);
      long long v41 = *((_OWORD *)v5 + 42);
      long long v42 = *((_OWORD *)v5 + 44);
      v24[43] = *((_OWORD *)v5 + 43);
      v24[44] = v42;
      v24[41] = v40;
      v24[42] = v41;
      long long v43 = *((_OWORD *)v5 + 45);
      long long v44 = *((_OWORD *)v5 + 46);
      long long v45 = *((_OWORD *)v5 + 48);
      v24[47] = *((_OWORD *)v5 + 47);
      v24[48] = v45;
      v24[45] = v43;
      v24[46] = v44;
      if (*((char *)v5 + 807) < 0)
      {
        sub_1906C00FC((unsigned char *)v24 + 784, (void *)v5[98], v5[99]);
      }
      else
      {
        long long v46 = *((_OWORD *)v5 + 49);
        *((void *)v24 + 100) = v5[100];
        v24[49] = v46;
      }
      memcpy((char *)v24 + 808, v5 + 101, 0x118uLL);
      long long v47 = *((_OWORD *)v5 + 69);
      v24[68] = *((_OWORD *)v5 + 68);
      v24[69] = v47;
      *((void *)v24 + 140) = 0;
      *((void *)v24 + 142) = 0;
      *((void *)v24 + 141) = 0;
      sub_19084EDEC((void *)v24 + 140, v5[140], v5[141], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[141] - v5[140]) >> 4));
      *((void *)v24 + 143) = v5[143];
      uint64_t v48 = v5[144];
      *((void *)v24 + 144) = v48;
      if (v48) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
      }
      long long v49 = *(_OWORD *)(v5 + 145);
      long long v50 = *(_OWORD *)(v5 + 147);
      *((_DWORD *)v24 + 298) = *((_DWORD *)v5 + 298);
      *(_OWORD *)((char *)v24 + 1176) = v50;
      *(_OWORD *)((char *)v24 + 1160) = v49;
      LOBYTE(v65) = 1;
      uint64_t v51 = *v22;
      uint64_t v52 = a1 + 120;
      long long v53 = (uint64_t **)(a1 + 120);
      if (*v22) {
        break;
      }
LABEL_70:
      sub_19074BC4C((uint64_t **)(a1 + 112), v52, v53, (uint64_t *)v24);
      uint64_t v63 = 0;
      sub_19084F2E8((uint64_t)&v63);
      long long v59 = (void *)v5[1];
      if (v59)
      {
        do
        {
          long long v60 = v59;
          long long v59 = (void *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          long long v60 = (void *)v5[2];
          BOOL v18 = *v60 == (void)v5;
          uint64_t v5 = v60;
        }
        while (!v18);
      }
      uint64_t v5 = v60;
      if (v60 == v6) {
        goto LABEL_76;
      }
    }
    uint64_t v54 = *((void *)v24 + 4);
    while (1)
    {
      uint64_t v52 = v51;
      uint64_t v55 = *(void *)(v51 + 32);
      if (v54 == v55)
      {
        int v56 = *(unsigned __int8 *)(v52 + 48);
        if (*((unsigned char *)v24 + 48)) {
          BOOL v57 = v56 == 0;
        }
        else {
          BOOL v57 = 1;
        }
        if (v57)
        {
          if (*((unsigned char *)v24 + 48)) {
            BOOL v58 = v56 == 0;
          }
          else {
            BOOL v58 = 0;
          }
          if (v58)
          {
LABEL_65:
            uint64_t v51 = *(void *)v52;
            long long v53 = (uint64_t **)v52;
            if (!*(void *)v52) {
              goto LABEL_70;
            }
            continue;
          }
        }
        else if (*((void *)v24 + 5) < *(void *)(v52 + 40))
        {
          goto LABEL_65;
        }
      }
      else if (v54 < v55)
      {
        goto LABEL_65;
      }
      uint64_t v51 = *(void *)(v52 + 8);
      if (!v51)
      {
        long long v53 = (uint64_t **)(v52 + 8);
        goto LABEL_70;
      }
    }
  }
LABEL_76:
  sub_190841EA4(a1 + 136, (uint64_t *)a2 + 17);
  *(unsigned char *)(a1 + 904) = *((unsigned char *)a2 + 904);
  return a1;
}

void sub_190842564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int64_t v6 = (std::__shared_weak_count **)(v2 + 72);
  if (*(char *)(v2 + 375) < 0) {
    operator delete(*v4);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 160) = v7;
    operator delete(v7);
  }
  if (*v6) {
    sub_1906BFE48(*v6);
  }
  sub_19084F2E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1908425E0()
{
  if (!*(void *)(v0 + 72)) {
    JUMPOUT(0x1908425D0);
  }
  JUMPOUT(0x1908425CCLL);
}

uint64_t sub_1908425F0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, double *a5, double *a6, double a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  double v14 = a5[1];
  double v21 = v14;
  if ((sub_19084297C(a1, (double *)a4, v14, a7) & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v16 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      int v17 = a2;
      if (*((char *)a2 + 23) < 0) {
        int v17 = (uint64_t *)*a2;
      }
      *(_DWORD *)long long buf = 134349570;
      double v29 = v14;
      __int16 v30 = 2082;
      long long v31 = v17;
      __int16 v32 = 2050;
      double v33 = a7;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle,failed,%{public}s,moveDistance,%{public}.1lf", buf, 0x20u);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    int v22 = 134349570;
    double v23 = v14;
    __int16 v24 = 2082;
    uint64_t v25 = a2;
    __int16 v26 = 2050;
    double v27 = a7;
LABEL_29:
    long long v20 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticleAndCheckDivergence(const std::string, const std::string, CLParticleMapMatcherCommon::Particle &, const double, const CLMapCrumb &, double &)", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
    return 0;
  }
  if (sub_1908431BC((uint64_t *)&v21, a5, (double *)(a1 + 168), a6, *(double *)(a4 + 32), *(double *)(a4 + 40), *(float *)(a4 + 24)))return 1; {
  if (qword_1E929F6C0 != -1)
  }
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  BOOL v18 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v19 = a3;
    if (*((char *)a3 + 23) < 0) {
      BOOL v19 = (uint64_t *)*a3;
    }
    *(_DWORD *)long long buf = 134349314;
    double v29 = v14;
    __int16 v30 = 2082;
    long long v31 = v19;
    _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT,%{public}s,location or course diverged", buf, 0x16u);
  }
  uint64_t result = sub_1906CB57C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    if (*((char *)a3 + 23) < 0) {
      a3 = (uint64_t *)*a3;
    }
    int v22 = 134349314;
    double v23 = v14;
    __int16 v24 = 2082;
    uint64_t v25 = a3;
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_19084297C(uint64_t a1, double *a2, double a3, double a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 208);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 216);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    long long v11 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      double v26 = a3;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, moveParticle", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_46;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  if (((*(uint64_t (**)(uint64_t, double *, uint64_t, double))(*(void *)v8 + 88))(v8, a2, a1 + 1040, a4) & 1) == 0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v12 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = **(uint64_t ***)a2;
      double v14 = (uint64_t *)*((void *)a2 + 6);
      int v15 = *((unsigned __int8 *)a2 + 20);
      *(_DWORD *)long long buf = 134350081;
      double v26 = a3;
      __int16 v27 = 2049;
      long long v28 = v13;
      __int16 v29 = 2050;
      __int16 v30 = v14;
      __int16 v31 = 1026;
      int v32 = v15;
      __int16 v33 = 2050;
      double v34 = a4;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle,moveOnRoad returned false,roadID,%{private}lld,projection,%{public}.3lf,fwd,%{public}d,moveDistance,%{public}.2lf", buf, 0x30u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "CoreLocation: %s\n", v16);
      goto LABEL_53;
    }
    goto LABEL_46;
  }
  if (!*(void *)a2)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v17 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      double v26 = a3;
      _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,null road", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_46;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
  if (fabs(a2[4]) >= 0.00003 || fabs(a2[5]) >= 0.00003)
  {
    double v18 = a2[6];
    if (v18 >= 0.0 && v18 <= 1.0)
    {
      uint64_t v23 = 1;
      if (!v9) {
        return v23;
      }
      goto LABEL_47;
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    long long v20 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      double v21 = (uint64_t *)*((void *)a2 + 6);
      int v22 = **(uint64_t ***)a2;
      *(_DWORD *)long long buf = 134349569;
      double v26 = a3;
      __int16 v27 = 2050;
      long long v28 = v21;
      __int16 v29 = 2049;
      __int16 v30 = v22;
      _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,invalidProjection,%{public}.3lf,roadID,%{private}lld", buf, 0x20u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_46;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1)
    {
LABEL_52:
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::moveParticle(CFAbsoluteTime, CLParticleMapMatcherCommon::Particle &, double) const", "CoreLocation: %s\n", v16);
LABEL_53:
      if (v16 != (char *)buf) {
        free(v16);
      }
      goto LABEL_46;
    }
LABEL_55:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    goto LABEL_52;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v10 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134349056;
    double v26 = a3;
    _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,moveParticle,unexpected particle with snapLat == snapLon == 0", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_52;
    }
    goto LABEL_55;
  }
LABEL_46:
  uint64_t v23 = 0;
  if (v9) {
LABEL_47:
  }
    sub_1906BFE48(v9);
  return v23;
}

void sub_190843190(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1908431BC(uint64_t *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  double v13 = a2[38];
  double v14 = fmod(v13 - a7, 360.0);
  if (v14 < 0.0) {
    double v14 = v14 + 360.0;
  }
  if (v14 > 180.0) {
    double v14 = v14 + -360.0;
  }
  double v15 = fabs(v14);
  if (v15 <= 8.0)
  {
    if (v15 > *a4)
    {
      *a4 = v15;
      double v13 = a2[38];
    }
    double v27 = 0.0;
    double v28 = 0.0;
    sub_190839A78(a3, &v28, &v27, a2[36], a2[37], a2[9], v13, a5, a6);
    if (fabs(v28) <= 5.0)
    {
      if (fabs(v27) <= 45.0) {
        return 1;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v23 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v24 = *a1;
        *(_DWORD *)long long buf = 134349056;
        uint64_t v32 = v24;
        _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, along track too large, not suitable DOT assistance", buf, 0xCu);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v25 = *a1;
        int v29 = 134349056;
        uint64_t v30 = v25;
        goto LABEL_34;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      long long v20 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = *a1;
        *(_DWORD *)long long buf = 134349056;
        uint64_t v32 = v21;
        _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, across track too large, not suitable DOT assistance", buf, 0xCu);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v22 = *a1;
        int v29 = 134349056;
        uint64_t v30 = v22;
        goto LABEL_34;
      }
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v16 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *a1;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v32 = v17;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf, no DOT, course is not aligned", buf, 0xCu);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v19 = *a1;
      int v29 = 134349056;
      uint64_t v30 = v19;
LABEL_34:
      double v26 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMapMatcherCommon::checkDivergence(const CFAbsoluteTime &, double, double, double, const CLMapCrumb &, CLDistanceCalc &, double &)", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_19084363C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    sub_1906BFE48(v5);
  }
  long long v6 = a2[1];
  long long v7 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  long long v8 = *(long long *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 65) = *(long long *)((char *)a2 + 65);
  *(_OWORD *)(a1 + 56) = v8;
  sub_19084F148(a1 + 88, (__n128 *)((char *)a2 + 88));
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  long long v9 = *(long long *)((char *)a2 + 120);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v9;
  if (v10) {
    sub_1906BFE48(v10);
  }
  long long v11 = *(long long *)((char *)a2 + 136);
  long long v12 = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  long long v13 = a2[11];
  *(_OWORD *)(a1 + 185) = *(long long *)((char *)a2 + 185);
  *(_OWORD *)(a1 + 176) = v13;
  sub_19084F148(a1 + 208, (__n128 *)a2 + 13);
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  long long v14 = a2[15];
  long long v15 = a2[16];
  long long v16 = a2[18];
  *(_OWORD *)(a1 + 272) = a2[17];
  *(_OWORD *)(a1 + 288) = v16;
  *(_OWORD *)(a1 + 240) = v14;
  *(_OWORD *)(a1 + 256) = v15;
  long long v17 = a2[19];
  long long v18 = a2[20];
  long long v19 = a2[22];
  *(_OWORD *)(a1 + 336) = a2[21];
  *(_OWORD *)(a1 + 352) = v19;
  *(_OWORD *)(a1 + 304) = v17;
  *(_OWORD *)(a1 + 320) = v18;
  long long v20 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*v20);
  }
  long long v21 = a2[23];
  *(void *)(a1 + 384) = *((void *)a2 + 48);
  *(_OWORD *)long long v20 = v21;
  *((unsigned char *)a2 + 391) = 0;
  *((unsigned char *)a2 + 368) = 0;
  memcpy((void *)(a1 + 392), (char *)a2 + 392, 0x118uLL);
  long long v23 = a2[43];
  long long v22 = a2[44];
  long long v24 = a2[42];
  *(void *)(a1 + 720) = *((void *)a2 + 90);
  *(_OWORD *)(a1 + 688) = v23;
  *(_OWORD *)(a1 + 704) = v22;
  *(_OWORD *)(a1 + 672) = v24;
  long long v25 = *(long long *)((char *)a2 + 728);
  *(long long *)((char *)a2 + 728) = 0u;
  double v26 = *(std::__shared_weak_count **)(a1 + 736);
  *(_OWORD *)(a1 + 728) = v25;
  if (v26) {
    sub_1906BFE48(v26);
  }
  long long v27 = *(long long *)((char *)a2 + 744);
  *(_DWORD *)(a1 + 759) = *(_DWORD *)((char *)a2 + 759);
  *(_OWORD *)(a1 + 744) = v27;
  return a1;
}

uint64_t sub_1908437BC(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = *(void *)a2;
  if (!*(void *)a2) {
    return 0;
  }
  double v9 = *(unsigned char *)(a2 + 20) ? 1.0 - *(double *)(a2 + 48) : *(double *)(a2 + 48);
  sub_19082373C(*(void *)a2);
  if (v9 * *(double *)(v4 + 40) > 18.0)
  {
    double v10 = *(unsigned char *)(a2 + 20) ? *(double *)(a2 + 48) : 1.0 - *(double *)(a2 + 48);
    uint64_t v11 = *(void *)a2;
    sub_19082373C(*(void *)a2);
    if (v10 * *(double *)(v11 + 40) > 36.0) {
      return 0;
    }
  }
  long long v13 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v36 = *(void *)a2;
  long long v37 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v14 = *(_OWORD *)(a2 + 32);
  long long v38 = *(_OWORD *)(a2 + 16);
  long long v39 = v14;
  uint64_t v15 = *(void *)(a2 + 48);
  v41[0] = *(_OWORD *)(a2 + 56);
  *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)(a2 + 65);
  uint64_t v40 = v15;
  std::string __p = 0;
  long long v43 = 0;
  long long v16 = *(const void **)(a2 + 88);
  uint64_t v17 = *(void *)(a2 + 96);
  uint64_t v44 = 0;
  sub_1907B5854(&__p, v16, v17, 0x8E38E38E38E38E39 * ((v17 - (uint64_t)v16) >> 3));
  char v19 = sub_190843A3C(a1, (uint64_t)&v36, a3, 1, a4, v18);
  if (__p)
  {
    long long v43 = __p;
    operator delete(__p);
  }
  if (v37) {
    sub_1906BFE48(v37);
  }
  if (v19) {
    return 1;
  }
  unint64_t v35 = 0x4051800000000000;
  long long v20 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v26 = *(void *)a2;
  long long v27 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v28 = *(_OWORD *)(a2 + 16);
  long long v29 = v21;
  uint64_t v30 = *(void *)(a2 + 48);
  v31[0] = *(_OWORD *)(a2 + 56);
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)(a2 + 65);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  long long v22 = *(const void **)(a2 + 88);
  uint64_t v23 = *(void *)(a2 + 96);
  uint64_t v32 = 0;
  sub_1907B5854(&v32, v22, v23, 0x8E38E38E38E38E39 * ((v23 - (uint64_t)v22) >> 3));
  uint64_t v12 = sub_190843A3C(a1, (uint64_t)&v26, a3, 0, &v35, v24);
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  if (v27) {
    sub_1906BFE48(v27);
  }
  return v12;
}

void sub_1908439F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1907B515C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190843A3C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, unint64_t *a5, __n128 a6)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)a2;
  if (!*(void *)a2) {
    return 0;
  }
  char v12 = *(unsigned char *)(a2 + 20) == 0;
  BOOL v13 = *(unsigned char *)(a2 + 20) != 0;
  if (a4) {
    long long v14 = "next";
  }
  else {
    long long v14 = "prior";
  }
  if (a4) {
    char v12 = v13;
  }
  *(unsigned char *)(a2 + 20) = v12;
  if (*(unsigned char *)(a3 + 264))
  {
    a6.n128_u64[0] = *a5;
    *(_DWORD *)&uint8_t buf[16] = 0;
    buf[21] = 0;
    LODWORD(v71) = 0;
    long long v72 = 0uLL;
    uint64_t v15 = *(void *)(a2 + 8);
    uint64_t v55 = v14;
    if (v15)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      char v12 = *(unsigned char *)(a2 + 20);
    }
    *(void *)long long buf = v6;
    *(void *)&uint8_t buf[8] = v15;
    uint64_t v16 = *a1;
    uint64_t v17 = *(void *)(a2 + 48);
    buf[20] = v12;
    uint64_t v73 = v17;
    v56[0] = 0;
    *(void *)int v62 = v62;
    *(void *)&v62[8] = v62;
    *(void *)&v62[16] = 0;
    uint64_t v59 = 0;
    *(void *)long long v60 = v60;
    *(void *)&v60[8] = v60;
    *(void *)&v60[16] = 0;
    int v58 = 0;
    int v18 = (*(uint64_t (**)(uint64_t *, unsigned char *, int *, unsigned char *, unsigned char *, void **, uint64_t *, __n128))(v16 + 88))(a1, buf, &v58, v62, v60, v56, &v59, a6);
    if (v58 > 0) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    double v20 = -1.0;
    if (v19 == 1)
    {
      int v21 = *(unsigned __int8 *)(a2 + 20);
      double v22 = *(double *)(a2 + 48);
      uint64_t v23 = *(void *)a2;
      sub_19082373C(*(void *)a2);
      double v24 = 1.0 - v22;
      if (!v21) {
        double v24 = v22;
      }
      double v20 = v24 * *(double *)(v23 + 40);
      for (uint64_t i = *(void *)&v60[8]; (unsigned char *)i != v60; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v27 = *(void *)(i + 16);
        uint64_t v26 = *(std::__shared_weak_count **)(i + 24);
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_19082373C(v27);
        double v28 = *(double *)(v27 + 40);
        if (v26) {
          sub_1906BFE48(v26);
        }
        double v20 = v20 + v28;
      }
    }
    sub_190770ADC((uint64_t *)v60);
    sub_190770ADC((uint64_t *)v62);
    if (*(void *)&buf[8]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
    }
    long long v14 = v55;
  }
  else
  {
    double v20 = -1.0;
  }
  double v30 = *(double *)(a3 + 96);
  sub_1906D5C70(v56, v14);
  double v31 = *(double *)(a3 + 8);
  if (v20 < 0.0)
  {
    uint64_t v32 = *(void *)(a2 + 8);
    *(void *)int v62 = *(void *)a2;
    *(void *)&v62[8] = v32;
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    long long v33 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v62[16] = *(_OWORD *)(a2 + 16);
    long long v63 = v33;
    uint64_t v34 = *(void *)(a2 + 48);
    v65[0] = *(_OWORD *)(a2 + 56);
    *(_OWORD *)((char *)v65 + 9) = *(_OWORD *)(a2 + 65);
    uint64_t v64 = v34;
    std::string __p = 0;
    __int16 v67 = 0;
    unint64_t v35 = *(const void **)(a2 + 88);
    uint64_t v36 = *(void *)(a2 + 96);
    uint64_t v68 = 0;
    sub_1907B5854(&__p, v35, v36, 0x8E38E38E38E38E39 * ((v36 - (uint64_t)v35) >> 3));
    if (sub_19084297C((uint64_t)a1, (double *)v62, v31, 24.0))
    {
      double v37 = fmod(*(float *)&v62[24] - *(double *)(a3 + 104), 360.0);
      if (v37 < 0.0) {
        double v37 = v37 + 360.0;
      }
      if (v37 > 180.0) {
        double v37 = v37 + -360.0;
      }
      if (fabs(v37) <= 8.0)
      {
        if (__p)
        {
          __int16 v67 = __p;
          operator delete(__p);
        }
        if (*(void *)&v62[8]) {
          sub_1906BFE48(*(std::__shared_weak_count **)&v62[8]);
        }
        uint64_t v29 = 0;
        goto LABEL_79;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      long long v38 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        long long v39 = v56;
        if (v57 < 0) {
          long long v39 = (void **)v56[0];
        }
        *(_DWORD *)long long buf = 134349314;
        *(double *)&uint8_t buf[4] = v31;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v39;
        _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,no DOT, too close to a %{public}s road with large direction change", buf, 0x16u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v40 = v56;
      if (v57 < 0) {
        uint64_t v40 = (void **)v56[0];
      }
      *(_DWORD *)long long v60 = 134349314;
      *(double *)&v60[4] = v31;
      *(_WORD *)&v60[12] = 2082;
      *(void *)&v60[14] = v40;
      long long v41 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "CoreLocation: %s\n", v41);
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v51 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v52 = v56;
        if (v57 < 0) {
          uint64_t v52 = (void **)v56[0];
        }
        *(_DWORD *)long long buf = 134349570;
        *(double *)&uint8_t buf[4] = v31;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v52;
        __int16 v70 = 2050;
        uint64_t v71 = 0x4038000000000000;
        _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,moveParticle failed for %{public}s particle,distance,%{public}.1lf", buf, 0x20u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v54 = v56;
      if (v57 < 0) {
        uint64_t v54 = (void **)v56[0];
      }
      *(_DWORD *)long long v60 = 134349570;
      *(double *)&v60[4] = v31;
      *(_WORD *)&v60[12] = 2082;
      *(void *)&v60[14] = v54;
      *(_WORD *)&v60[22] = 2050;
      uint64_t v61 = 0x4038000000000000;
      long long v41 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "CoreLocation: %s\n", v41);
    }
    if (v41 != buf) {
      free(v41);
    }
LABEL_74:
    if (__p)
    {
      __int16 v67 = __p;
      operator delete(__p);
    }
    if (*(void *)&v62[8]) {
      sub_1906BFE48(*(std::__shared_weak_count **)&v62[8]);
    }
    goto LABEL_78;
  }
  double v42 = fabs(v30);
  if (v30 < 0.0) {
    double v42 = 3.0;
  }
  double v43 = v20 - v42;
  double v44 = 36.0;
  if (a4) {
    double v44 = 18.0;
  }
  if (v43 >= v44)
  {
    uint64_t v29 = 0;
    *(double *)a5 = v20 + -1.0;
    goto LABEL_79;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  long long v45 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    long long v46 = v56;
    if (v57 < 0) {
      long long v46 = (void **)v56[0];
    }
    uint64_t v47 = *(void *)(a3 + 96);
    *(_DWORD *)long long buf = 134349826;
    *(double *)&uint8_t buf[4] = v31;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v46;
    __int16 v70 = 2050;
    uint64_t v71 = *(void *)&v43;
    LOWORD(v72) = 2050;
    *(void *)((char *)&v72 + 2) = v47;
    _os_log_impl(&dword_1906B8000, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,no DOT,too close to %{public}s intersection,dist,%{public}.2lf,speed,%{public}.2lf", buf, 0x2Au);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v48 = v56;
    if (v57 < 0) {
      uint64_t v48 = (void **)v56[0];
    }
    uint64_t v49 = *(void *)(a3 + 96);
    *(_DWORD *)int v62 = 134349826;
    *(double *)&v62[4] = v31;
    *(_WORD *)&v62[12] = 2082;
    *(void *)&v62[14] = v48;
    *(_WORD *)&v62[22] = 2050;
    *(double *)&v62[24] = v43;
    LOWORD(v63) = 2050;
    *(void *)((char *)&v63 + 2) = v49;
    long long v50 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::isCloseToMultiOutboundIntersection(CLParticleMapMatcherCommon::Particle, const CLMapCrumb &, const BOOL, double &) const", "CoreLocation: %s\n", v50);
    if (v50 != buf) {
      free(v50);
    }
  }
LABEL_78:
  uint64_t v29 = 1;
LABEL_79:
  if (v57 < 0) {
    operator delete(v56[0]);
  }
  return v29;
}

void sub_1908442DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190844368(void *a1, double *a2, unsigned __int8 a3, uint64_t *a4, double a5)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    int v51 = 0;
    char v53 = 0;
    int v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v9 = *(void *)a2;
    long long v8 = (std::__shared_weak_count *)*((void *)a2 + 1);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)long long buf = v9;
    long long v50 = v8;
    double v10 = a2[6];
    unsigned __int8 v52 = a3;
    double v57 = v10;
    int v11 = 30;
    while (1)
    {
      int v12 = v52;
      double v13 = v57;
      uint64_t v14 = *(void *)buf;
      sub_19082373C(*(uint64_t *)buf);
      double v15 = 1.0 - v13;
      if (!v12) {
        double v15 = v13;
      }
      double v16 = v15 * *(double *)(v14 + 40);
      if (v16 > a5)
      {
LABEL_22:
        uint64_t v19 = 1;
        goto LABEL_56;
      }
      a5 = a5 - v16;
      if (v52) {
        double v17 = 1.0;
      }
      else {
        double v17 = 0.0;
      }
      sub_19079AA88(a4);
      if (v52) {
        double v18 = 1.0;
      }
      else {
        double v18 = 0.0;
      }
      double v57 = v18;
      uint64_t v46 = (uint64_t)&v46;
      uint64_t v47 = &v46;
      unint64_t v48 = 0;
      uint64_t v19 = (*(uint64_t (**)(void, uint64_t *, uint8_t *, double, double))(*(void *)*a1 + 72))(*a1, &v46, buf, v17, a5);
      if ((v19 & 1) == 0) {
        goto LABEL_55;
      }
      if (v48 >= 2) {
        break;
      }
      if (v48 != 1) {
        goto LABEL_55;
      }
      uint64_t v21 = v47[4];
      double v20 = (std::__shared_weak_count *)v47[5];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v22 = v50;
      *(void *)long long buf = v21;
      long long v50 = v20;
      if (v22) {
        sub_1906BFE48(v22);
      }
      unsigned __int8 v52 = *((unsigned char *)v47 + 24);
      double v57 = *((double *)v47 + 6);
      sub_19079AA88(&v46);
      if (!--v11) {
        goto LABEL_22;
      }
    }
    if (&v46 != a4)
    {
      double v24 = v47;
      long long v25 = (uint64_t *)a4[1];
      if (v47 != &v46 && v25 != a4)
      {
        do
        {
          uint64_t v26 = v24[2];
          *((_WORD *)v25 + 12) = *((_WORD *)v24 + 12);
          _OWORD v25[2] = v26;
          uint64_t v28 = v24[4];
          uint64_t v27 = v24[5];
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v29 = (std::__shared_weak_count *)v25[5];
          v25[4] = v28;
          v25[5] = v27;
          if (v29) {
            sub_1906BFE48(v29);
          }
          v25[6] = v24[6];
          double v24 = (uint64_t *)v24[1];
          long long v25 = (uint64_t *)v25[1];
        }
        while (v24 != &v46 && v25 != a4);
      }
      if (v25 == a4)
      {
        if (v24 != &v46)
        {
          uint64_t v34 = (uint64_t *)operator new(0x38uLL);
          unint64_t v35 = v34;
          *uint64_t v34 = 0;
          v34[1] = 0;
          uint64_t v36 = v24[2];
          *((_WORD *)v34 + 12) = *((_WORD *)v24 + 12);
          _OWORD v34[2] = v36;
          v34[4] = v24[4];
          uint64_t v37 = v24[5];
          v34[5] = v37;
          if (v37) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
          }
          v34[6] = v24[6];
          uint64_t v38 = v24[1];
          if ((uint64_t *)v38 == &v46)
          {
            uint64_t v39 = 1;
          }
          else
          {
            uint64_t v39 = 1;
            uint64_t v40 = v34;
            do
            {
              uint64_t v34 = (uint64_t *)operator new(0x38uLL);
              *uint64_t v34 = (uint64_t)v40;
              v34[1] = 0;
              uint64_t v41 = *(void *)(v38 + 16);
              *((_WORD *)v34 + 12) = *(_WORD *)(v38 + 24);
              _OWORD v34[2] = v41;
              v34[4] = *(void *)(v38 + 32);
              uint64_t v42 = *(void *)(v38 + 40);
              v34[5] = v42;
              if (v42) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
              }
              v34[6] = *(void *)(v38 + 48);
              v40[1] = (uint64_t)v34;
              ++v39;
              uint64_t v38 = *(void *)(v38 + 8);
              uint64_t v40 = v34;
            }
            while ((uint64_t *)v38 != &v46);
          }
          uint64_t v43 = *a4;
          *(void *)(v43 + 8) = v35;
          *unint64_t v35 = v43;
          *a4 = (uint64_t)v34;
          v34[1] = (uint64_t)a4;
          a4[2] += v39;
        }
      }
      else
      {
        uint64_t v30 = *a4;
        uint64_t v31 = *v25;
        *(void *)(v31 + 8) = *(void *)(*a4 + 8);
        **(void **)(v30 + 8) = v31;
        do
        {
          uint64_t v32 = (uint64_t *)v25[1];
          --a4[2];
          long long v33 = (std::__shared_weak_count *)v25[5];
          if (v33) {
            sub_1906BFE48(v33);
          }
          operator delete(v25);
          long long v25 = v32;
        }
        while (v32 != a4);
      }
    }
LABEL_55:
    sub_19079AA88(&v46);
LABEL_56:
    if (v50) {
      sub_1906BFE48(v50);
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v23 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, findMultiOutboundIntersection", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      LOWORD(v46) = 0;
      long long v45 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::findMultiOutboundIntersection(CLMapGeometryPtr, const CLMapGeometry::DistanceQueryResult &, BOOL, double, CLMapGeometry::ConnectedQueryResultList &)", "CoreLocation: %s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
    return 0;
  }
  return v19;
}

void sub_190844860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1906BFE48(a16);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1908448E8(uint64_t a1, double *a2, uint64_t a3, __n128 a4)
{
  double v5 = a2[12];
  a4.n128_u64[0] = *(void *)(a1 + 24);
  if (a4.n128_f64[0] >= 0.0) {
    goto LABEL_20;
  }
  uint64_t v8 = *(void *)(a1 + 208);
  if (v8)
  {
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8);
    a4.n128_u64[0] = 0.75;
    if (v9) {
      a4.n128_f64[0] = 2.5;
    }
  }
  else
  {
    a4.n128_u64[0] = 0.75;
  }
  if (a2[3] - *(double *)(a1 + 232) < 900.0)
  {
    uint64_t v10 = *(void *)(a1 + 208);
    if (v10)
    {
      int v11 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v10 + 104))(v10, a4);
      a4.n128_u64[0] = 0.375;
      if (v11) {
        a4.n128_f64[0] = 1.25;
      }
    }
    else
    {
      a4.n128_u64[0] = 0.375;
    }
  }
  if (a2[23] > 0.0 && a2[12] >= 0.0
    || *(double *)(a3 + 424) <= 0.0
    || (double v12 = *(double *)(a3 + 336), v12 < 0.0)
    || (double v13 = a2[3], v13 >= 0.0) && (v14 = *(double *)(a3 + 264), v14 >= 0.0) && vabdd_f64(v13, v14) > 2.2)
  {
LABEL_20:
    double v12 = v5;
  }
  return v12 > a4.n128_f64[0] || *(unsigned char *)(a3 + 504) != 0;
}

BOOL sub_190844A44(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v4 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(_DWORD *)long long buf = 134349312;
    uint64_t v9 = v5;
    __int16 v10 = 1026;
    int v11 = v3;
    _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,allowsNetworkUsage,%{public}d", buf, 0x12u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallUseNetwork(const CLMapCrumb &)", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v3 != 0;
}

void sub_190844C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  double v6 = *(double *)(a2 + 104);
  if (v6 > 0.0 && *(double *)(a2 + 192) <= 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    long long v7 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(void *)(a2 + 104);
      uint64_t v10 = *(void *)(a2 + 192);
      *(_DWORD *)long long buf = 134349568;
      uint64_t v86 = v8;
      __int16 v87 = 2050;
      uint64_t v88 = v9;
      __int16 v89 = 2050;
      uint64_t v90 = v10;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEBUG, "CLMMPED,match,%{public}.1lf,course invalidated as courseUnc was invalid,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v60 = *(void *)(a2 + 8);
      uint64_t v61 = *(void *)(a2 + 104);
      uint64_t v62 = *(void *)(a2 + 192);
      int v79 = 134349568;
      uint64_t v80 = v60;
      __int16 v81 = 2050;
      uint64_t v82 = v61;
      __int16 v83 = 2050;
      uint64_t v84 = v62;
      long long v63 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v63);
      if (v63 != (char *)buf) {
        free(v63);
      }
    }
    *(void *)(a2 + 104) = 0xBFF0000000000000;
    *(void *)(a2 + 192) = 0xBFF0000000000000;
    double v6 = -1.0;
  }
  double v11 = *(double *)(a3 + 264);
  if (v11 <= 0.0) {
    return;
  }
  double v12 = *(double *)(a2 + 24);
  BOOL v13 = v12 < 0.0 || v11 < 0.0;
  double v14 = vabdd_f64(v12, v11);
  if (v13) {
    double v15 = -1.0;
  }
  else {
    double v15 = v14;
  }
  v17 = *(double *)(a2 + 184) > 0.0 && (double v16 = *(double *)(a2 + 96), v16 >= 0.0) && v16 < 0.001
     || *(unsigned char *)(a2 + 228) != 0;
  double v18 = *(double *)(a2 + 192);
  BOOL v19 = v6 < 0.0;
  if (v18 <= 0.0) {
    BOOL v19 = 1;
  }
  if (v17 && v19 && v15 < 2.2)
  {
    double v20 = *(double *)(a3 + 432);
    if (v20 < 90.0 && v20 > 0.0)
    {
      double v21 = *(double *)(a3 + 344);
      if (v21 >= 0.0)
      {
        *(double *)(a2 + 104) = v21;
        *(double *)(a2 + 192) = v20;
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v22 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v23 = *(void *)(a2 + 8);
          uint64_t v24 = *(void *)(a2 + 104);
          uint64_t v25 = *(void *)(a2 + 192);
          *(_DWORD *)long long buf = 134349568;
          uint64_t v86 = v23;
          __int16 v87 = 2050;
          uint64_t v88 = v24;
          __int16 v89 = 2050;
          uint64_t v90 = v25;
          _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_DEBUG, "CLMMPED,match,%{public}.1lf,invalidCourseInfoUpdatedUsingPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_56;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_118;
        }
LABEL_130:
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
LABEL_118:
        uint64_t v64 = *(void *)(a2 + 8);
        uint64_t v65 = *(void *)(a2 + 104);
        uint64_t v66 = *(void *)(a2 + 192);
        int v79 = 134349568;
        uint64_t v80 = v64;
        __int16 v81 = 2050;
        uint64_t v82 = v65;
        __int16 v83 = 2050;
        uint64_t v84 = v66;
        __int16 v67 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v67);
        if (v67 != (char *)buf) {
          free(v67);
        }
        goto LABEL_56;
      }
    }
  }
  if (v6 >= 0.0 && v18 > 179.9)
  {
    if (v15 >= 2.2
      || (double v26 = *(double *)(a3 + 432), v26 >= 90.0)
      || v26 <= 0.0
      || *(double *)(a3 + 344) < 0.0
      || !*(unsigned char *)(a3 + 504)
      || (uint64_t v27 = (uint64_t *)(a3 + 120), !*(void *)(a3 + 120)))
    {
      *(void *)(a2 + 104) = 0xBFF0000000000000;
      *(void *)(a2 + 192) = 0xBFF0000000000000;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v34 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = *(void *)(a2 + 8);
        uint64_t v36 = *(void *)(a2 + 104);
        uint64_t v37 = *(void *)(a2 + 192);
        *(_DWORD *)long long buf = 134349568;
        uint64_t v86 = v35;
        __int16 v87 = 2050;
        uint64_t v88 = v36;
        __int16 v89 = 2050;
        uint64_t v90 = v37;
        _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseInvalidated,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_56;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_118;
      }
      goto LABEL_130;
    }
    v77[0] = (uint64_t)v77;
    v77[1] = (uint64_t)v77;
    unint64_t v78 = 0;
    uint64_t v29 = *(void *)(a1 + 208);
    uint64_t v28 = *(std::__shared_weak_count **)(a1 + 216);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v29)
    {
      uint64_t v30 = *v27;
      if (*v27)
      {
        int v31 = *(unsigned __int8 *)(a3 + 140);
        double v32 = *(double *)(a3 + 168);
        sub_19082373C(*v27);
        double v33 = 1.0 - v32;
        if (!v31) {
          double v33 = v32;
        }
        (*(void (**)(uint64_t, uint64_t *, uint64_t, BOOL, void, double, double))(*(void *)v29 + 72))(v29, v77, a3 + 120, v31 != 0, 0, v32, v33 * *(double *)(v30 + 40) + 5.0);
        goto LABEL_91;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      unint64_t v48 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v48, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,null road, getRoadsAtIntersection", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0))
      {
LABEL_91:
        if (v28) {
          sub_1906BFE48(v28);
        }
        double v49 = *(double *)(a3 + 168);
        BOOL v50 = v49 >= 0.07 && v49 <= 0.93;
        if (v50 || v78 < 2)
        {
          *(void *)(a2 + 104) = *(void *)(a3 + 344);
          double v55 = *(double *)(a3 + 432);
          if (v55 < 29.9) {
            double v55 = 29.9;
          }
          *(double *)(a2 + 192) = v55;
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v56 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v57 = *(void *)(a2 + 8);
            uint64_t v58 = *(void *)(a2 + 104);
            uint64_t v59 = *(void *)(a2 + 192);
            *(_DWORD *)long long buf = 134349568;
            uint64_t v86 = v57;
            __int16 v87 = 2050;
            uint64_t v88 = v58;
            __int16 v89 = 2050;
            uint64_t v90 = v59;
            _os_log_impl(&dword_1906B8000, v56, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,highCourseUncDataReplacedWithPreviousEpochInfo,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_112;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_125;
          }
        }
        else
        {
          *(void *)(a2 + 104) = 0xBFF0000000000000;
          *(void *)(a2 + 192) = 0xBFF0000000000000;
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          int v51 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v52 = *(void *)(a2 + 8);
            uint64_t v53 = *(void *)(a2 + 104);
            uint64_t v54 = *(void *)(a2 + 192);
            *(_DWORD *)long long buf = 134349568;
            uint64_t v86 = v52;
            __int16 v87 = 2050;
            uint64_t v88 = v53;
            __int16 v89 = 2050;
            uint64_t v90 = v54;
            _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseInvalidated,particle near multioutbound intersection,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_112;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1)
          {
LABEL_125:
            uint64_t v72 = *(void *)(a2 + 8);
            uint64_t v73 = *(void *)(a2 + 104);
            uint64_t v74 = *(void *)(a2 + 192);
            int v79 = 134349568;
            uint64_t v80 = v72;
            __int16 v81 = 2050;
            uint64_t v82 = v73;
            __int16 v83 = 2050;
            uint64_t v84 = v74;
            __int16 v75 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v75);
            if (v75 != (char *)buf) {
              free(v75);
            }
LABEL_112:
            sub_19079AA88(v77);
            goto LABEL_56;
          }
        }
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        goto LABEL_125;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_128:
        LOWORD(v79) = 0;
        double v76 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLParticleMapMatcherFilterBase::getRoadsAtIntersection(const CFAbsoluteTime, const CLMapGeometry::DistanceQueryResult &, CLMapGeometry::ConnectedQueryResultList &)", "CoreLocation: %s\n", v76);
        if (v76 != (char *)buf) {
          free(v76);
        }
        goto LABEL_91;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v47 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1906B8000, v47, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, getRoadsAtIntersection", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_91;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_128;
      }
    }
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    goto LABEL_128;
  }
LABEL_56:
  double v38 = *(double *)(a2 + 192);
  double v39 = *(double *)(a2 + 104);
  if (v38 > 0.0 && v39 >= 0.0)
  {
    if (v38 < 13.0)
    {
      *(void *)(a2 + 192) = 0x402A000000000000;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v40 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v41 = *(void *)(a2 + 8);
        uint64_t v42 = *(void *)(a2 + 104);
        uint64_t v43 = *(void *)(a2 + 192);
        *(_DWORD *)long long buf = 134349568;
        uint64_t v86 = v41;
        __int16 v87 = 2050;
        uint64_t v88 = v42;
        __int16 v89 = 2050;
        uint64_t v90 = v43;
        _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseUncFloorApplied,course,%{public}.2lf,courseUnc,%{public}.2lf", buf, 0x20u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v68 = *(void *)(a2 + 8);
        uint64_t v69 = *(void *)(a2 + 104);
        uint64_t v70 = *(void *)(a2 + 192);
        int v79 = 134349568;
        uint64_t v80 = v68;
        __int16 v81 = 2050;
        uint64_t v82 = v69;
        __int16 v83 = 2050;
        uint64_t v84 = v70;
        uint64_t v71 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLParticleMM::CLPedestrianMapMatcherFilter::prefilterCourse(CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v71);
        if (v71 != (char *)buf) {
          free(v71);
        }
      }
    }
    double v38 = *(double *)(a2 + 192);
    double v39 = *(double *)(a2 + 104);
  }
  if (v38 <= 0.0) {
    goto LABEL_76;
  }
  if (v39 < 0.0) {
    goto LABEL_76;
  }
  if (*(double *)(a3 + 432) <= 0.0) {
    goto LABEL_76;
  }
  double v44 = *(double *)(a3 + 344);
  if (v44 < 0.0 || v15 >= 2.2) {
    goto LABEL_76;
  }
  double v45 = fmod(v39 - v44, 360.0);
  if (v45 < 0.0) {
    double v45 = v45 + 360.0;
  }
  if (v45 > 180.0) {
    double v45 = v45 + -360.0;
  }
  double v46 = fabs(v45);
  if (!*(unsigned char *)(a1 + 1032))
  {
    *(unsigned char *)(a1 + 1032) = v46 > 14.0;
    return;
  }
  if (v46 < 8.0) {
LABEL_76:
  }
    *(unsigned char *)(a1 + 1032) = 0;
}

void sub_190845B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    sub_1906BFE48(v4);
  }
  sub_19079AA88((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_190845B74(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  double v4 = *(double *)(a2 + 24);
  if (v4 >= 0.0 && (double v5 = a3[33], v5 >= 0.0))
  {
    double v9 = (v4 - v5) * (v4 - v5);
    double v10 = *(double *)(a2 + 184);
    double v11 = 0.0;
    if (v10 <= 0.0 || (double v12 = *(double *)(a2 + 96), v12 < 0.0) || (v13 = a3[53], v13 <= 0.0))
    {
      double v15 = 0.0;
    }
    else
    {
      double v14 = a3[42];
      double v15 = 0.0;
      if (v14 >= 0.0)
      {
        double v11 = v9 * ((v13 * v13 + v10 * v10) * 0.25);
        double v15 = v9 * ((v12 + v14) * 0.5 * ((v12 + v14) * 0.5 * 0.25));
      }
    }
    return sqrt(v9 * 3.0 + v11 + v15);
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a2 + 8);
      *(_DWORD *)long long buf = 134349312;
      uint64_t v18 = v7;
      __int16 v19 = 2050;
      unint64_t v20 = 0xBFF0000000000000;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected, negtive dT,%{public}.1lf", buf, 0x16u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual double CLParticleMM::CLPedestrianMapMatcherFilter::getProcessNoise(const CLMapCrumb &, const MMSnapData &)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0.0;
  }
}

uint64_t sub_190845E08(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  if (!*(unsigned char *)(a3 + 746)) {
    return 0;
  }
  uint64_t v7 = 0;
  int v8 = 0;
  uint64_t v27 = (uint64_t *)(a2 + 40);
  double v9 = (long long *)(a3 + 136);
  double v10 = (_OWORD *)(a3 + 176);
  uint64_t v26 = a2 + 56;
  while (1)
  {
    double v11 = *(std::__shared_weak_count **)(a3 + 128);
    uint64_t v31 = *(void *)(a3 + 120);
    double v32 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v12 = v9[1];
    long long v33 = *v9;
    long long v34 = v12;
    uint64_t v35 = *((void *)v9 + 4);
    v36[0] = *v10;
    *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)((char *)v10 + 9);
    double v38 = 0;
    uint64_t v39 = 0;
    double v13 = *(const void **)(a3 + 208);
    uint64_t v14 = *(void *)(a3 + 216);
    std::string __p = 0;
    sub_1907B5854(&__p, v13, v14, 0x8E38E38E38E38E39 * ((v14 - (uint64_t)v13) >> 3));
    if (v31)
    {
      BYTE4(v33) ^= 1u;
      double v15 = fmod((float)(*((float *)&v33 + 2) + 180.0), 360.0);
      if (v15 < 0.0) {
        double v15 = v15 + 360.0;
      }
      float v16 = v15;
      *((float *)&v33 + 2) = v16;
      if (byte_1E929FD78)
      {
        byte_1E929FD78 = 0;
        float v17 = *(float *)&dword_1E929FD7C;
      }
      else
      {
        do
        {
          float v18 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v19 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v20 = (float)(v19 * v19) + (float)(v18 * v18);
        }
        while (v20 >= 1.0);
        float v17 = 0.0;
        if (v20 != 0.0)
        {
          float v21 = sqrtf((float)(logf((float)(v19 * v19) + (float)(v18 * v18)) * -2.0) / v20);
          *(float *)&dword_1E929FD7C = v19 * v21;
          byte_1E929FD78 = 1;
          float v17 = v18 * v21;
        }
      }
      if (sub_19084297C(a1, (double *)&v31, *(double *)(a2 + 384), v17 * a4 + a5))
      {
        unint64_t v22 = *(void *)(a2 + 48);
        if (v22 >= *(void *)(a2 + 56))
        {
          uint64_t v23 = sub_1907D5EFC(v27, (uint64_t)&v31);
        }
        else
        {
          sub_1907D6024(v26, *(void *)(a2 + 48), (uint64_t)&v31);
          uint64_t v23 = v22 + 112;
          *(void *)(a2 + 48) = v22 + 112;
        }
        int v24 = 0;
        *(void *)(a2 + 48) = v23;
        uint64_t v7 = (v7 + 1);
      }
      else
      {
        int v24 = 1;
      }
    }
    else
    {
      int v24 = 4;
    }
    if (__p)
    {
      double v38 = __p;
      operator delete(__p);
    }
    if (v32) {
      sub_1906BFE48(v32);
    }
    if ((v24 | 4) != 4) {
      break;
    }
    if (++v8 == 3) {
      return v7;
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_1908460CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v6 + 48) = v7;
  sub_1907B515C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190846104(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 745)) {
    BOOL v2 = *(void *)a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  uint64_t v6 = a1 + 5;
  uint64_t v7 = a1 + 7;
  unint64_t v8 = a1[6];
  int v9 = 4;
  do
  {
    if (v8 >= *v7)
    {
      unint64_t v8 = sub_1907D5EFC(v6, a2);
    }
    else
    {
      sub_1907D6024((uint64_t)v7, v8, a2);
      v8 += 112;
      a1[6] = v8;
    }
    a1[6] = v8;
    --v9;
  }
  while (v9);
  return 4;
}

void sub_1908461AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1908461B4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4, __n128 **a5, void *a6, void *a7, double a8)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(a1 + 208);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 216);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v15)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v37 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      buf.n128_u16[0] = 0;
      _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLMMPED,Unexpected,invalid geometry pointer, multiOutboundHelper", (uint8_t *)&buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      LOWORD(v45) = 0;
      uint64_t v43 = (__n128 *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::multiOutboundHelper(CLMapGeometry::DistanceQueryResult &, int &, double, CLMapGeometry::IntersectionQueryResultList &, CLMapGeometry::IntersectionQueryResultList &, double &, double &) const", "CoreLocation: %s\n", (const char *)v43);
      if (v43 != &buf) {
        free(v43);
      }
    }
    uint64_t v21 = 0;
LABEL_40:
    if (!v14) {
      return v21;
    }
LABEL_41:
    sub_1906BFE48(v14);
    return v21;
  }
  *a6 = 0;
  *a7 = 0;
  *a3 = 0;
  int v16 = *(unsigned __int8 *)(a2 + 20);
  double v17 = *(double *)(a2 + 48);
  uint64_t v18 = *(void *)a2;
  sub_19082373C(*(void *)a2);
  double v19 = 1.0 - v17;
  if (!v16) {
    double v19 = v17;
  }
  double v20 = v19 * *(double *)(v18 + 40);
  uint64_t v21 = 1;
  if (v20 > a8) {
    goto LABEL_40;
  }
  double v22 = a8 - v20;
  if (*(unsigned char *)(a2 + 20)) {
    double v23 = 1.0;
  }
  else {
    double v23 = 0.0;
  }
  int v24 = 30;
  while (1)
  {
    sub_190770ADC(a4);
    *a3 = 0;
    int v25 = *(unsigned __int8 *)(a2 + 20);
    uint64_t v27 = *(void **)(*(void *)a2 + 136);
    uint64_t v26 = *(void **)(*(void *)a2 + 144);
    if (*(unsigned char *)(a2 + 20))
    {
      if (v26 == v27)
      {
        *a6 = 0;
        uint64_t v28 = 0;
      }
      else
      {
        *a6 = *(v26 - 2);
        uint64_t v28 = *(v26 - 1);
      }
      double v29 = 1.0;
    }
    else if (v26 == v27)
    {
      *a6 = 0;
      double v29 = 0.0;
      uint64_t v28 = 0;
    }
    else
    {
      *a6 = *v27;
      uint64_t v28 = v27[1];
      double v29 = 0.0;
    }
    *a7 = v28;
    *(double *)(a2 + 48) = v29;
    uint64_t v45 = (uint64_t)&v45;
    double v46 = &v45;
    unint64_t v47 = 0;
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, BOOL, void, double, double))(*(void *)v15 + 72))(v15, &v45, a2, v25 != 0, 0, v23, v22);
    if ((v21 & 1) == 0) {
      break;
    }
    if (v47 >= 2)
    {
      __n128 buf = 0uLL;
      char v51 = 0;
      uint64_t v39 = v46;
      if (v46 != &v45)
      {
        do
        {
          char v49 = *((unsigned char *)v39 + 24);
          uint64_t v50 = v39[6];
          unint64_t v41 = v39[4];
          unint64_t v40 = v39[5];
          if (v40) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v42 = (std::__shared_weak_count *)buf.n128_u64[1];
          buf.n128_u64[0] = v41;
          buf.n128_u64[1] = v40;
          if (v42) {
            sub_1906BFE48(v42);
          }
          char v51 = 1;
          sub_19076D58C((__n128 **)a4, &buf);
          ++*a3;
          uint64_t v39 = (uint64_t *)v39[1];
        }
        while (v39 != &v45);
        if (buf.n128_u64[1]) {
          sub_1906BFE48((std::__shared_weak_count *)buf.n128_u64[1]);
        }
      }
      break;
    }
    if (v47 != 1) {
      break;
    }
    __n128 buf = 0uLL;
    char v51 = 0;
    char v49 = *((unsigned char *)v46 + 24);
    uint64_t v50 = v46[6];
    unint64_t v30 = v46[4];
    unint64_t v31 = v46[5];
    if (v31)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      double v32 = (std::__shared_weak_count *)buf.n128_u64[1];
      buf.n128_u64[0] = v30;
      buf.n128_u64[1] = v31;
      if (v32) {
        sub_1906BFE48(v32);
      }
    }
    else
    {
      __n128 buf = (__n128)(unint64_t)v46[4];
    }
    char v51 = 1;
    sub_19076D58C(a5, &buf);
    uint64_t v34 = v46[4];
    uint64_t v33 = v46[5];
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = *(std::__shared_weak_count **)(a2 + 8);
    *(void *)a2 = v34;
    *(void *)(a2 + 8) = v33;
    if (v35) {
      sub_1906BFE48(v35);
    }
    uint64_t v36 = v46;
    *(unsigned char *)(a2 + 20) = *((unsigned char *)v46 + 24);
    *(void *)(a2 + 48) = v36[6];
    if (buf.n128_u64[1]) {
      sub_1906BFE48((std::__shared_weak_count *)buf.n128_u64[1]);
    }
    sub_19079AA88(&v45);
    if (!--v24)
    {
      uint64_t v21 = 1;
      goto LABEL_52;
    }
  }
  sub_19079AA88(&v45);
LABEL_52:
  if (v14) {
    goto LABEL_41;
  }
  return v21;
}

void sub_190846630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    sub_1906BFE48(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190846680(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 9)) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 1880);
  if (v2 == *(void *)(a1 + 1888)) {
    return 0;
  }
  double v4 = *(double *)(a1 + 1872);
  double v5 = vabdd_f64(*(double *)(a2 + 400), v4);
  if (v4 < 0.0 || v5 > 2.5) {
    return 0;
  }
  uint64_t v7 = 0;
  uint64_t v28 = *(void *)(a2 + 384);
  double v32 = (uint64_t *)(a2 + 40);
  uint64_t v31 = a2 + 56;
  uint64_t v29 = *(void *)(a1 + 1888);
  while (2)
  {
    int v9 = *(std::__shared_weak_count **)(v2 + 8);
    double v38 = *(uint64_t **)v2;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v39 = *(unsigned __int8 *)(v2 + 20);
    __int16 v40 = *(_WORD *)(v2 + 21);
    char v41 = *(unsigned char *)(v2 + 23);
    int v34 = *(_DWORD *)(v2 + 16);
    float v35 = *(float *)(v2 + 24);
    unsigned int v10 = *(_DWORD *)(v2 + 28);
    unint64_t v36 = *(void *)(v2 + 40);
    uint64_t v37 = *(void *)(v2 + 32);
    char v11 = 1;
    uint64_t v30 = v2;
    uint64_t v12 = *(void *)(v2 + 48);
    do
    {
      char v13 = v11;
      memset(buf, 0, 20);
      *(_WORD *)&buf[20] = 1;
      LODWORD(v43) = 0;
      unint64_t v48 = 0;
      uint64_t v49 = 0;
      unint64_t v47 = 0;
      memset(v44, 0, sizeof(v44));
      long long v45 = 0u;
      char v46 = 0;
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v14 = *(std::__shared_weak_count **)&buf[8];
        *(void *)__n128 buf = v38;
        *(void *)&uint8_t buf[8] = v9;
        if (v14) {
          sub_1906BFE48(v14);
        }
      }
      else
      {
        *(void *)__n128 buf = v38;
        *(void *)&uint8_t buf[8] = 0;
      }
      *(_DWORD *)&uint8_t buf[16] = v34;
      buf[20] = v39;
      *(_WORD *)&buf[21] = v40;
      buf[23] = v41;
      unint64_t v43 = __PAIR64__(v10, LODWORD(v35));
      v44[0] = v37;
      v44[1] = v36;
      v44[2] = v12;
      if (byte_1E929FD78)
      {
        byte_1E929FD78 = 0;
        float v15 = *(float *)&dword_1E929FD7C;
      }
      else
      {
        do
        {
          float v16 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v17 = (float)((float)((float)random() * 4.6566e-10) * 2.0) + -1.0;
          float v18 = (float)(v17 * v17) + (float)(v16 * v16);
        }
        while (v18 >= 1.0);
        float v15 = 0.0;
        if (v18 != 0.0)
        {
          float v19 = sqrtf((float)(logf((float)(v17 * v17) + (float)(v16 * v16)) * -2.0) / v18);
          *(float *)&dword_1E929FD7C = v17 * v19;
          byte_1E929FD78 = 1;
          float v15 = v16 * v19;
        }
      }
      char v20 = sub_19084297C(a1, (double *)buf, *(double *)(a2 + 384), v15);
      if (v20)
      {
        int v21 = v7;
        unint64_t v22 = *(void *)(a2 + 48);
        if (v22 >= *(void *)(a2 + 56))
        {
          uint64_t v23 = sub_1907D5EFC(v32, (uint64_t)buf);
        }
        else
        {
          sub_1907D6024(v31, *(void *)(a2 + 48), (uint64_t)buf);
          uint64_t v23 = v22 + 112;
          *(void *)(a2 + 48) = v22 + 112;
        }
        *(void *)(a2 + 48) = v23;
        uint64_t v7 = (v21 + 1);
      }
      if (v47)
      {
        unint64_t v48 = v47;
        operator delete(v47);
      }
      if (*(void *)&buf[8]) {
        sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((v20 & 1) == 0)
      {
        if (v9) {
          sub_1906BFE48(v9);
        }
        return 0xFFFFFFFFLL;
      }
      char v11 = 0;
    }
    while ((v13 & 1) != 0);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    int v24 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v25 = *v38;
      *(_DWORD *)__n128 buf = 134350337;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&unsigned char buf[14] = v37;
      *(_WORD *)&unsigned char buf[22] = 2049;
      unint64_t v43 = v36;
      LOWORD(v44[0]) = 2050;
      *(double *)((char *)v44 + 2) = v35;
      WORD1(v44[1]) = 2049;
      *(void *)((char *)&v44[1] + 4) = v25;
      WORD2(v44[2]) = 1026;
      *(_DWORD *)((char *)&v44[2] + 6) = v39;
      _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHint,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,rseg,%{private}lld,fwd,%{public}d", buf, 0x3Au);
    }
    uint64_t v26 = v30;
    if (!sub_1906CB57C(115, 2))
    {
      if (!v9) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "int CLParticleMM::CLPedestrianMapMatcherFilter::addRouteHintParticles(MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v27);
    if (v27 != buf) {
      free(v27);
    }
    uint64_t v26 = v30;
    if (v9) {
LABEL_39:
    }
      sub_1906BFE48(v9);
LABEL_40:
    uint64_t v2 = v26 + 56;
    if (v2 != v29) {
      continue;
    }
    return v7;
  }
}

void sub_190846BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (v33) {
    sub_1906BFE48(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190846C10(void *a1, uint64_t a2, uint64_t a3)
{
  double v5 = a1;
  uint64_t v263 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 238;
  uint64_t v7 = a1[239];
  uint64_t v8 = a1[238];
  if (v7 != v8) {
    sub_1907D6428(a1 + 241, v8, v7, 0xF83E0F83E0F83E1 * ((v7 - v8) >> 3));
  }
  sub_1907D5DF8(v6);
  if (!*((unsigned char *)v5 + 9) || v5[235] == v5[236]) {
    return 0;
  }
  double v9 = *((double *)v5 + 234);
  double v10 = vabdd_f64(*(double *)(a2 + 400), v9);
  BOOL v11 = v9 >= 0.0 && v10 <= 2.5;
  if (!v11 || vabdd_f64(v9, *((double *)v5 + 244)) < 60.0) {
    return 0;
  }
  uint64_t v14 = *(void *)(a2 + 384);
  uint64_t i = (std::__shared_weak_count *)v5[27];
  uint64_t v210 = v5[26];
  if (i) {
    atomic_fetch_add_explicit(&i->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v210)
  {
    double v203 = v6;
    double v217 = 0;
    uint64_t v218 = 0;
    unint64_t v219 = 0;
    uint64_t v208 = v5;
    uint64_t v209 = a3;
    double v202 = i;
    if (!*(unsigned char *)(a3 + 504)) {
      goto LABEL_32;
    }
    uint64_t v16 = a3 + 120;
    sub_1907BDE7C(a3 + 120, (uint64_t)v215);
    float v17 = (__n128 *)v5[235];
    if (v17 == (__n128 *)v5[236])
    {
LABEL_31:
      uint64_t i = v202;
      goto LABEL_32;
    }
    while (1)
    {
      float v18 = (uint64_t *)v17->n128_u64[0];
      float v19 = (std::__shared_weak_count *)v17->n128_u64[1];
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        int v20 = v17[1].n128_u8[4];
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v22 = *v18;
        uint64_t v21 = v18[1];
        sub_1906BFE48(v19);
      }
      else
      {
        int v20 = v17[1].n128_u8[4];
        uint64_t v22 = *v18;
        uint64_t v21 = v18[1];
      }
      BOOL v24 = v215[0] == v22 && v216 == v20 && v215[1] == v21;
      a3 = v209;
      if (v19) {
        sub_1906BFE48(v19);
      }
      if (v24) {
        break;
      }
      float v17 = (__n128 *)((char *)v17 + 56);
      if (v17 == (__n128 *)v5[236]) {
        goto LABEL_31;
      }
    }
    double v104 = *(double *)(a2 + 400);
    double v105 = -1.0;
    if (v104 >= 0.0)
    {
      double v106 = *(double *)(v209 + 264);
      double v107 = vabdd_f64(v104, v106);
      if (v106 >= 0.0) {
        double v105 = v107;
      }
      else {
        double v105 = -1.0;
      }
    }
    double v108 = fmax(*(double *)(a2 + 856), 0.0) + (float)((float)random() * 4.6566e-10) * 0.25;
    if (v108 <= v105 * 6.0) {
      double v109 = v108;
    }
    else {
      double v109 = v105 * 6.0;
    }
    sub_1907B4FC4((uint64_t)v246, v16);
    double v212 = (__n128 *)&v212;
    double v213 = &v212;
    unint64_t v214 = 0;
    for (i = v202; v17 != (__n128 *)v5[236]; float v17 = (__n128 *)((char *)v17 + 56))
      sub_19076BCD4(&v212, v17);
    int v211 = 0;
    if (((*(uint64_t (**)(uint64_t, unsigned char *, __n128 **, int *, double, double))(*(void *)v210 + 56))(v210, v246, &v212, &v211, *(double *)&v247[16], v109) & 1) == 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      long long v121 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl(&dword_1906B8000, v121, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,failed as not enough route roads are available", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_197;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)long long v234 = 134349056;
      *(void *)&v234[4] = v14;
      long long v122 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v122);
      goto LABEL_338;
    }
    if (v214 <= v211)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v123 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134349568;
        *(void *)&uint8_t buf[4] = v14;
        __int16 v253 = 1026;
        *(_DWORD *)uint64_t v254 = v211;
        *(_WORD *)&v254[4] = 2050;
        *(void *)&v254[6] = v214;
        _os_log_impl(&dword_1906B8000, v123, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,route index,%{public}d,is more than number of route roads,%{public}ld", buf, 0x1Cu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_197;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)long long v234 = 134349568;
      *(void *)&v234[4] = v14;
      *(_WORD *)&v234[12] = 1026;
      *(_DWORD *)&v234[14] = v211;
      *(_WORD *)&v234[18] = 2050;
      *(void *)&v234[20] = v214;
      long long v122 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v122);
      goto LABEL_338;
    }
    double v110 = *(float *)&v246[24];
    double v111 = 5.0;
    if (*(double *)&v247[16] <= 0.97 && *(double *)&v247[16] >= 0.03)
    {
      if (*(double *)(a2 + 568) <= 0.0 || (double v112 = *(double *)(a2 + 480), v112 < 0.0))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        long long v124 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__n128 buf = 134349312;
          *(void *)&uint8_t buf[4] = v14;
          __int16 v253 = 2050;
          *(void *)uint64_t v254 = 0x403E000000000000;
          _os_log_impl(&dword_1906B8000, v124, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,course deweighted,unc,%{public}.2lf", buf, 0x16u);
        }
        double v111 = 30.0;
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          *(_DWORD *)long long v234 = 134349312;
          *(void *)&v234[4] = v14;
          *(_WORD *)&v234[12] = 2050;
          *(void *)&v234[14] = 0x403E000000000000;
          uint64_t v201 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v201);
          if (v201 != buf) {
            free(v201);
          }
          uint64_t i = v202;
          a3 = v209;
        }
      }
      else
      {
        double v113 = fmod(v112 - v110, 360.0);
        if (v113 < 0.0) {
          double v113 = v113 + 360.0;
        }
        if (v113 > 180.0) {
          double v113 = v113 + -360.0;
        }
        double v114 = fabs(v113);
        int v115 = *((_DWORD *)v5 + 518);
        if (v114 >= 135.0)
        {
          *((_DWORD *)v5 + 518) = v115 + 1;
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v174 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v175 = *(void *)(a2 + 480);
            int v176 = *((_DWORD *)v5 + 518);
            *(_DWORD *)__n128 buf = 134349824;
            *(void *)&uint8_t buf[4] = v14;
            __int16 v253 = 2050;
            *(double *)uint64_t v254 = v110;
            *(_WORD *)&v254[8] = 2050;
            *(void *)&v254[10] = v175;
            *(_WORD *)&v254[18] = 1026;
            *(_DWORD *)&v254[20] = v176;
            _os_log_impl(&dword_1906B8000, v174, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_197;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_284;
          }
          goto LABEL_351;
        }
        if (v114 > 60.0 && v115 >= 1)
        {
          *((_DWORD *)v5 + 518) = v115 + 1;
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v194 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v195 = *(void *)(a2 + 480);
            int v196 = *((_DWORD *)v5 + 518);
            *(_DWORD *)__n128 buf = 134349824;
            *(void *)&uint8_t buf[4] = v14;
            __int16 v253 = 2050;
            *(double *)uint64_t v254 = v110;
            *(_WORD *)&v254[8] = 2050;
            *(void *)&v254[10] = v195;
            *(_WORD *)&v254[18] = 1026;
            *(_DWORD *)&v254[20] = v196;
            _os_log_impl(&dword_1906B8000, v194, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,no meas,moveOnRouteRoads,routeCourse,%{public}.1lf,is different than crumb course,%{public}.1lf, and rejections are high,rejection,%{public}d", buf, 0x26u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_197;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_284;
          }
LABEL_351:
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
LABEL_284:
          uint64_t v177 = *(void *)(a2 + 480);
          int v178 = *((_DWORD *)v5 + 518);
          *(_DWORD *)long long v234 = 134349824;
          *(void *)&v234[4] = v14;
          *(_WORD *)&v234[12] = 2050;
          *(double *)&v234[14] = v110;
          *(_WORD *)&v234[22] = 2050;
          *(void *)&v234[24] = v177;
          *(_WORD *)&v234[32] = 1026;
          *(_DWORD *)&v234[34] = v178;
          long long v122 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v122);
LABEL_338:
          if (v122 != buf) {
            free(v122);
          }
          uint64_t i = v202;
LABEL_197:
          sub_190770ADC((uint64_t *)&v212);
          sub_1907B515C(v246);
          goto LABEL_198;
        }
        if (v114 > 80.0)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          long long v117 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v118 = *(void *)(a2 + 480);
            *(_DWORD *)__n128 buf = 134349568;
            *(void *)&uint8_t buf[4] = v14;
            __int16 v253 = 2050;
            *(double *)uint64_t v254 = v110;
            *(_WORD *)&v254[8] = 2050;
            *(void *)&v254[10] = v118;
            _os_log_impl(&dword_1906B8000, v117, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,routeCourse,%{public}.1lf,is somewhat different than crumb course,%{public}.1lf", buf, 0x20u);
          }
          uint64_t i = v202;
          a3 = v209;
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v119 = *(void *)(a2 + 480);
            *(_DWORD *)long long v234 = 134349568;
            *(void *)&v234[4] = v14;
            *(_WORD *)&v234[12] = 2050;
            *(double *)&v234[14] = v110;
            *(_WORD *)&v234[22] = 2050;
            *(void *)&v234[24] = v119;
            long long v120 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v120);
            if (v120 != buf) {
              free(v120);
            }
            uint64_t i = v202;
            a3 = v209;
          }
          goto LABEL_316;
        }
      }
      int v125 = v246[20];
      double v126 = *(double *)&v247[16];
      uint64_t v127 = *(void *)v246;
      sub_19082373C(*(uint64_t *)v246);
      double v128 = 1.0 - v126;
      if (!v125) {
        double v128 = v126;
      }
      if (v128 * *(double *)(v127 + 40) >= 15.0) {
        goto LABEL_296;
      }
    }
    if (*(double *)(a2 + 568) <= 0.0) {
      goto LABEL_296;
    }
    double v129 = *(double *)(a2 + 480);
    if (v129 < 0.0) {
      goto LABEL_296;
    }
    double v207 = v111;
    double v130 = fmod(v129 - v110, 360.0);
    if (v130 < 0.0) {
      double v130 = v130 + 360.0;
    }
    double v131 = -360.0;
    double v132 = 180.0;
    if (v130 > 180.0) {
      double v130 = v130 + -360.0;
    }
    double v205 = fabs(v130);
    if (v205 <= 50.0)
    {
LABEL_295:
      double v111 = v207;
      goto LABEL_296;
    }
    char v133 = 0;
    char v134 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    int v135 = 1;
    while (1)
    {
      char v136 = v133;
      unint64_t v137 = v211 + (uint64_t)v135;
      if (v214 > v137)
      {
        float v138 = (__n128 *)v213;
        if ((v137 & 0x80000000) != 0)
        {
          uint64_t v140 = v211 + (uint64_t)v135;
          do
          {
            float v138 = (__n128 *)v138->n128_u64[0];
            _CF = __CFADD__(v140++, 1);
          }
          while (!_CF);
        }
        else if (v137)
        {
          unint64_t v139 = v211 + (unint64_t)v135 + 1;
          do
          {
            float v138 = (__n128 *)v138->n128_u64[1];
            --v139;
          }
          while (v139 > 1);
        }
        if (v138 == (__n128 *)&v212 || (uint64_t v141 = v138[1].n128_i64[0]) == 0)
        {
          if (*((void *)v134 + 216) != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          double v5 = v208;
          a3 = v209;
          double v111 = v207;
          uint64_t v179 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 134349056;
            *(void *)&uint8_t buf[4] = v14;
            _os_log_impl(&dword_1906B8000, v179, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,unexpected,routeHints,moving on to next route road,nullptr", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (*((void *)v134 + 216) != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            *(_DWORD *)long long v234 = 134349056;
            *(void *)&v234[4] = v14;
            uint64_t v180 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v180);
            if (v180 != buf) {
              free(v180);
            }
            uint64_t i = v202;
            double v5 = v208;
            a3 = v209;
            goto LABEL_295;
          }
LABEL_296:
          uint64_t v181 = *(void *)v247;
          uint64_t v182 = *(void *)&v247[8];
          uint64_t v183 = v213;
          uint64_t v184 = v211;
          if (v211 < 0)
          {
            do
            {
              uint64_t v183 = (__n128 **)*v183;
              _CF = __CFADD__(v184++, 1);
            }
            while (!_CF);
          }
          else if (v211)
          {
            unint64_t v185 = v211 + 1;
            do
            {
              uint64_t v183 = (__n128 **)v183[1];
              --v185;
            }
            while (v185 > 1);
          }
          double v186 = sub_1906DA618((double *)v5 + 21, *(double *)v247, *(double *)&v247[8], *((double *)v183 + 6), *((double *)v183 + 7), 0.0);
          memset(v234, 0, 24);
          *(_OWORD *)&v234[24] = xmmword_1908824F0;
          v234[40] = 0;
          *(_OWORD *)&v234[48] = 0u;
          *(_OWORD *)long long v235 = 0u;
          __asm { FMOV            V1.2D, #-1.0 }
          long long v239 = _Q1;
          *(void *)&v240[0] = 0xBFF0000000000000;
          double v241 = 0.0;
          char v242 = 0;
          LODWORD(v243) = 0;
          WORD2(v243) = 1;
          DWORD2(v243) = 0;
          uint64_t v245 = 0;
          long long v244 = 0uLL;
          *(void *)&v235[16] = v181;
          *(void *)&v235[24] = v182;
          *(void *)&long long v236 = *(void *)(a2 + 448);
          *((double *)&v236 + 1) = v110;
          if (v186 < 8.0) {
            double v186 = 8.0;
          }
          *(double *)uint64_t v237 = v186;
          *((double *)v237 + 1) = v111;
          *(void *)&v237[1] = 0x3FF0000000000000;
          uint64_t v188 = *(void *)(a2 + 560);
          *((void *)&v237[1] + 1) = *(void *)(a2 + 472);
          *(void *)&long long v238 = v188;
          BYTE8(v238) = *(unsigned char *)(a2 + 604);
          *(int8x16_t *)((char *)v240 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
          *((void *)&v240[1] + 1) = *(void *)(a2 + 384);
          sub_1907D4B8C((uint64_t)v234, 0);
          double v190 = *(double *)v246;
          double v189 = *(std::__shared_weak_count **)&v246[8];
          if (*(void *)&v246[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v246[8] + 8), 1uLL, memory_order_relaxed);
          }
          int v191 = v242;
          double v241 = v190;
          char v242 = v189;
          if (v191) {
            sub_1906BFE48(v191);
          }
          long long v243 = *(_OWORD *)&v246[16];
          long long v244 = *(_OWORD *)v247;
          uint64_t v245 = *(void *)&v247[16];
          sub_1907D4C9C((uint64_t *)&v217, (uint64_t)v234);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v192 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v193 = 0xF83E0F83E0F83E1 * ((uint64_t)(v5[239] - v5[238]) >> 3);
            *(_DWORD *)__n128 buf = 134350593;
            *(void *)&uint8_t buf[4] = v14;
            __int16 v253 = 2049;
            *(void *)uint64_t v254 = *(void *)&v235[16];
            *(_WORD *)&v254[8] = 2049;
            *(void *)&v254[10] = *(void *)&v235[24];
            *(_WORD *)&v254[18] = 2050;
            *(void *)&v254[20] = *((void *)&v236 + 1);
            __int16 v255 = 2050;
            double v256 = *(double *)v237;
            __int16 v257 = 2050;
            double v258 = *((double *)v237 + 1);
            __int16 v259 = 2050;
            double v260 = *(double *)&v193;
            _os_log_impl(&dword_1906B8000, v192, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,meas,moveOnRouteRoads,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu", buf, 0x48u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v199 = 0xF83E0F83E0F83E1 * ((uint64_t)(v208[239] - v208[238]) >> 3);
            int v220 = 134350593;
            uint64_t v221 = v14;
            __int16 v222 = 2049;
            uint64_t v223 = *(void *)&v235[16];
            __int16 v224 = 2049;
            uint64_t v225 = *(void *)&v235[24];
            __int16 v226 = 2050;
            uint64_t v227 = *((void *)&v236 + 1);
            __int16 v228 = 2050;
            uint64_t v229 = *(void *)&v237[0];
            __int16 v230 = 2050;
            uint64_t v231 = *((void *)&v237[0] + 1);
            __int16 v232 = 2050;
            uint64_t v233 = v199;
            int v200 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v200);
            if (v200 != buf) {
              free(v200);
            }
            uint64_t i = v202;
            double v5 = v208;
            a3 = v209;
          }
          if (v242) {
            sub_1906BFE48(v242);
          }
LABEL_316:
          sub_190770ADC((uint64_t *)&v212);
          sub_1907B515C(v246);
LABEL_32:
          uint64_t v25 = (uint64_t)v217;
          uint64_t v206 = v218;
          if (v218 != v217) {
            goto LABEL_33;
          }
          uint64_t v58 = (double *)v5[235];
          uint64_t v59 = (uint64_t *)v5[236];
          if (v58 == (double *)v59)
          {
            uint64_t v12 = 0;
            uint64_t i = v202;
          }
          else
          {
            int v60 = 0;
            __asm { FMOV            V0.2D, #-1.0 }
            long long v204 = _Q0;
            do
            {
              double v64 = sub_1906DA618((double *)v5 + 21, v58[4], v58[5], *(double *)(a2 + 408), *(double *)(a2 + 416), 0.0);
              memset(v234, 0, 24);
              *(_OWORD *)&v234[24] = xmmword_1908824F0;
              v234[40] = 0;
              *(_OWORD *)&v234[48] = 0u;
              *(_OWORD *)long long v235 = 0u;
              long long v239 = v204;
              *(void *)&v240[0] = 0xBFF0000000000000;
              LODWORD(v243) = 0;
              double v241 = 0.0;
              char v242 = 0;
              WORD2(v243) = 1;
              DWORD2(v243) = 0;
              uint64_t v245 = 0;
              long long v244 = 0uLL;
              *(_OWORD *)&v235[16] = *((_OWORD *)v58 + 2);
              *(void *)&long long v236 = *(void *)(a2 + 448);
              if (v64 < 8.0) {
                double v64 = 8.0;
              }
              *((double *)&v236 + 1) = *((float *)v58 + 6);
              *(double *)uint64_t v237 = v64;
              *(_OWORD *)((char *)v237 + 8) = xmmword_190885430;
              uint64_t v65 = *(void *)(a2 + 560);
              *((void *)&v237[1] + 1) = *(void *)(a2 + 472);
              *(void *)&long long v238 = v65;
              BYTE8(v238) = *(unsigned char *)(a2 + 604);
              *(int8x16_t *)((char *)v240 + 8) = vextq_s8(*(int8x16_t *)(a2 + 392), *(int8x16_t *)(a2 + 392), 8uLL);
              *((void *)&v240[1] + 1) = *(void *)(a2 + 384);
              sub_1907D4B8C((uint64_t)v234, 0);
              *(double *)&v237[1] = 1.0 / *((double *)v237 + 1);
              double v67 = *v58;
              uint64_t v66 = (std::__shared_weak_count *)*((void *)v58 + 1);
              if (v66) {
                atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v68 = v242;
              double v241 = v67;
              char v242 = v66;
              if (v68) {
                sub_1906BFE48(v68);
              }
              long long v69 = *((_OWORD *)v58 + 1);
              long long v70 = *((_OWORD *)v58 + 2);
              uint64_t v245 = *((void *)v58 + 6);
              long long v243 = v69;
              long long v244 = v70;
              if (*(double *)(a2 + 568) <= 0.0 || (double v71 = *(double *)(a2 + 480), v71 < 0.0))
              {
                if (!*(unsigned char *)(a3 + 746)) {
                  goto LABEL_105;
                }
                double v71 = *(double *)(a3 + 408);
                if (v71 < 0.0) {
                  goto LABEL_105;
                }
              }
              double v72 = fmod(v71 - *((double *)&v236 + 1), 360.0);
              if (v72 < 0.0) {
                double v72 = v72 + 360.0;
              }
              double v73 = v72 + -360.0;
              if (v72 <= 180.0) {
                double v73 = v72;
              }
              if ((double v74 = fabs(v73), v74 < 135.0)
                && (v74 <= 60.0 || *((int *)v208 + 518) <= 0)
                && (v74 <= 80.0 || (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v208[236] - v208[235]) >> 3)) < 2))
              {
                if (v73 == 0.0) {
                  double v79 = *(double *)&v237[1];
                }
                else {
                  double v79 = 1.0 / v74;
                }
                *(double *)&v237[1] = v79;
                sub_1907D4B8C((uint64_t)v234, 0);
                uint64_t v80 = (double *)v218;
                if ((unint64_t)v218 >= v219)
                {
                  uint64_t v93 = sub_1907D68C4((uint64_t *)&v217, (uint64_t)v234);
                }
                else
                {
                  *uint64_t v218 = *(_OWORD *)v234;
                  long long v81 = *(_OWORD *)&v234[16];
                  long long v82 = *(_OWORD *)&v234[32];
                  long long v83 = *(_OWORD *)v235;
                  *((_OWORD *)v80 + 3) = *(_OWORD *)&v234[48];
                  *((_OWORD *)v80 + 4) = v83;
                  *((_OWORD *)v80 + 1) = v81;
                  *((_OWORD *)v80 + 2) = v82;
                  long long v84 = *(_OWORD *)&v235[16];
                  long long v85 = v236;
                  long long v86 = v237[1];
                  *((_OWORD *)v80 + 7) = v237[0];
                  *((_OWORD *)v80 + 8) = v86;
                  *((_OWORD *)v80 + 5) = v84;
                  *((_OWORD *)v80 + 6) = v85;
                  long long v87 = v238;
                  long long v88 = v239;
                  long long v89 = v240[1];
                  *((_OWORD *)v80 + 11) = v240[0];
                  *((_OWORD *)v80 + 12) = v89;
                  *((_OWORD *)v80 + 9) = v87;
                  *((_OWORD *)v80 + 10) = v88;
                  v80[26] = v241;
                  uint64_t v90 = v242;
                  *((void *)v80 + 27) = v242;
                  if (v90) {
                    atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  long long v91 = v243;
                  long long v92 = v244;
                  *((void *)v80 + 32) = v245;
                  *((_OWORD *)v80 + 14) = v91;
                  *((_OWORD *)v80 + 15) = v92;
                  uint64_t v93 = (uint64_t)(v80 + 33);
                }
                uint64_t v218 = (_OWORD *)v93;
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                uint64_t v94 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v95 = 0xF83E0F83E0F83E1 * ((uint64_t)(v208[239] - v208[238]) >> 3);
                  *(_DWORD *)__n128 buf = 134350849;
                  *(void *)&uint8_t buf[4] = v14;
                  __int16 v253 = 2049;
                  *(void *)uint64_t v254 = *(void *)&v235[16];
                  *(_WORD *)&v254[8] = 2049;
                  *(void *)&v254[10] = *(void *)&v235[24];
                  *(_WORD *)&v254[18] = 2050;
                  *(void *)&v254[20] = *((void *)&v236 + 1);
                  __int16 v255 = 2050;
                  double v256 = *(double *)v237;
                  __int16 v257 = 2050;
                  double v258 = *((double *)v237 + 1);
                  __int16 v259 = 2050;
                  double v260 = *(double *)&v95;
                  __int16 v261 = 2050;
                  double v262 = *(double *)&v237[1];
                  _os_log_impl(&dword_1906B8000, v94, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,meas,projection,ll,%{private}.7lf,%{private}.7lf,course,%{public}.3lf,hunc,%{public}.3lf,cunc,%{public}.3lf,count,%{public}lu,confidence,%{public}.4lf", buf, 0x52u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  uint64_t v96 = 0xF83E0F83E0F83E1 * ((uint64_t)(v208[239] - v208[238]) >> 3);
                  *(_DWORD *)long long v246 = 134350849;
                  *(void *)&v246[4] = v14;
                  *(_WORD *)&v246[12] = 2049;
                  *(void *)&v246[14] = *(void *)&v235[16];
                  *(_WORD *)&v246[22] = 2049;
                  *(void *)&v246[24] = *(void *)&v235[24];
                  *(_WORD *)long long v247 = 2050;
                  *(void *)&v247[2] = *((void *)&v236 + 1);
                  *(_WORD *)&v247[10] = 2050;
                  *(void *)&v247[12] = *(void *)&v237[0];
                  *(_WORD *)&v247[20] = 2050;
                  *(void *)&v247[22] = *((void *)&v237[0] + 1);
                  __int16 v248 = 2050;
                  uint64_t v249 = v96;
                  __int16 v250 = 2050;
                  uint64_t v251 = *(void *)&v237[1];
                  uint64_t v97 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v97);
                  if (v97 != buf) {
                    free(v97);
                  }
                  a3 = v209;
                }
              }
              else
              {
LABEL_105:
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                __int16 v75 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                {
                  double v76 = *((float *)v58 + 6);
                  uint64_t v77 = *(void *)(a2 + 480);
                  int v78 = *((_DWORD *)v208 + 518);
                  *(_DWORD *)__n128 buf = 134349824;
                  *(void *)&uint8_t buf[4] = v14;
                  __int16 v253 = 2050;
                  *(double *)uint64_t v254 = v76;
                  *(_WORD *)&v254[8] = 2050;
                  *(void *)&v254[10] = v77;
                  *(_WORD *)&v254[18] = 1026;
                  *(_DWORD *)&v254[20] = v78;
                  _os_log_impl(&dword_1906B8000, v75, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints, no meas, projection,routeCourse,%{public}.1lf,is very different than crumb course,%{public}.1lf,rejection,%{public}d", buf, 0x26u);
                }
                ++v60;
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  double v98 = *((float *)v58 + 6);
                  uint64_t v99 = *(void *)(a2 + 480);
                  int v100 = *((_DWORD *)v208 + 518);
                  *(_DWORD *)long long v246 = 134349824;
                  *(void *)&v246[4] = v14;
                  *(_WORD *)&v246[12] = 2050;
                  *(double *)&v246[14] = v98;
                  *(_WORD *)&v246[22] = 2050;
                  *(void *)&v246[24] = v99;
                  *(_WORD *)long long v247 = 1026;
                  *(_DWORD *)&v247[2] = v100;
                  uint64_t v101 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v101);
                  if (v101 != buf) {
                    free(v101);
                  }
                }
              }
              if (v242) {
                sub_1906BFE48(v242);
              }
              v58 += 7;
            }
            while (v58 != (double *)v59);
            uint64_t v25 = (uint64_t)v217;
            uint64_t v206 = v218;
            if (v60 <= 0)
            {
              uint64_t i = v202;
              double v5 = v208;
              goto LABEL_33;
            }
            double v5 = v208;
            uint64_t i = v202;
            if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v208[236] - v208[235]) >> 3) == v60 && v218 == v217)
            {
              uint64_t v12 = 0;
              ++*((_DWORD *)v208 + 518);
              goto LABEL_199;
            }
LABEL_33:
            if (v206 == (_OWORD *)v25)
            {
LABEL_198:
              uint64_t v12 = 0;
            }
            else
            {
              uint64_t v26 = (double *)(v5 + 21);
              *((_DWORD *)v5 + 518) = 0;
              double v27 = -1.0;
              double v28 = 0.0;
              double v29 = -1.0;
              do
              {
                uint64_t v30 = (double *)v5[241];
                uint64_t v31 = (double *)v5[242];
                if (v30 == v31) {
                  goto LABEL_59;
                }
                BOOL v32 = 1;
                do
                {
                  double v33 = vabdd_f64(v30[23], *(double *)(v25 + 184));
                  if (v27 < 0.0) {
                    double v27 = v33;
                  }
                  double v34 = sub_1906DA618(v26, *(double *)(v25 + 80), *(double *)(v25 + 88), v30[10], v30[11], 0.0);
                  if (v34 < v29 || v29 < 0.0) {
                    double v29 = v34;
                  }
                  if (v34 < 0.001)
                  {
                    BOOL v36 = *(double *)(v25 + 256) >= 0.2;
                    *(void *)long long v246 = v246;
                    *(void *)&v246[8] = v246;
                    *(void *)&v246[16] = 0;
                    if ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t, BOOL, void))(*(void *)v210 + 72))(v210, v246, v25 + 208, v36, 0))
                    {
                      unint64_t v37 = *(void *)&v246[16];
                      BOOL v32 = *(void *)&v246[16] > 1uLL;
                      if (qword_1E929F6C0 != -1) {
                        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                      }
                      double v38 = off_1E929F6C8;
                      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)__n128 buf = 134349568;
                        *(void *)&uint8_t buf[4] = v14;
                        __int16 v253 = 1026;
                        *(_DWORD *)uint64_t v254 = v37 > 1;
                        *(_WORD *)&v254[4] = 2050;
                        *(void *)&v254[6] = *(void *)&v246[16];
                        _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,duplicate measurement check,measurementGood,%{public}d,vector,%{public}lu", buf, 0x1Cu);
                      }
                      if (sub_1906CB57C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1E929F6C0 != -1) {
                          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                        }
                        *(_DWORD *)long long v234 = 134349568;
                        *(void *)&v234[4] = v14;
                        *(_WORD *)&v234[12] = 1026;
                        *(_DWORD *)&v234[14] = v37 > 1;
                        *(_WORD *)&v234[18] = 2050;
                        *(void *)&v234[20] = *(void *)&v246[16];
                        int v39 = (char *)_os_log_send_and_compose_impl();
                        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v39);
                        if (v39 != buf) {
                          free(v39);
                        }
                      }
                    }
                    sub_19079AA88((uint64_t *)v246);
                  }
                  v30 += 33;
                }
                while (v30 != v31);
                if (v32)
                {
LABEL_59:
                  double v40 = *(double *)(v25 + 128);
                  double v5 = v208;
                  unint64_t v41 = v208[239];
                  if (v41 >= v208[240])
                  {
                    uint64_t v54 = sub_1907D68C4(v203, v25);
                  }
                  else
                  {
                    *(_OWORD *)unint64_t v41 = *(_OWORD *)v25;
                    long long v42 = *(_OWORD *)(v25 + 16);
                    long long v43 = *(_OWORD *)(v25 + 32);
                    long long v44 = *(_OWORD *)(v25 + 64);
                    *(_OWORD *)(v41 + 48) = *(_OWORD *)(v25 + 48);
                    *(_OWORD *)(v41 + 64) = v44;
                    *(_OWORD *)(v41 + 16) = v42;
                    *(_OWORD *)(v41 + 32) = v43;
                    long long v45 = *(_OWORD *)(v25 + 80);
                    long long v46 = *(_OWORD *)(v25 + 96);
                    long long v47 = *(_OWORD *)(v25 + 128);
                    *(_OWORD *)(v41 + 112) = *(_OWORD *)(v25 + 112);
                    *(_OWORD *)(v41 + 128) = v47;
                    *(_OWORD *)(v41 + 80) = v45;
                    *(_OWORD *)(v41 + 96) = v46;
                    long long v48 = *(_OWORD *)(v25 + 144);
                    long long v49 = *(_OWORD *)(v25 + 160);
                    long long v50 = *(_OWORD *)(v25 + 192);
                    *(_OWORD *)(v41 + 176) = *(_OWORD *)(v25 + 176);
                    *(_OWORD *)(v41 + 192) = v50;
                    *(_OWORD *)(v41 + 144) = v48;
                    *(_OWORD *)(v41 + 160) = v49;
                    *(void *)(v41 + 208) = *(void *)(v25 + 208);
                    uint64_t v51 = *(void *)(v25 + 216);
                    *(void *)(v41 + 216) = v51;
                    if (v51) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
                    }
                    long long v52 = *(_OWORD *)(v25 + 224);
                    long long v53 = *(_OWORD *)(v25 + 240);
                    *(void *)(v41 + 256) = *(void *)(v25 + 256);
                    *(_OWORD *)(v41 + 224) = v52;
                    *(_OWORD *)(v41 + 240) = v53;
                    uint64_t v54 = v41 + 264;
                  }
                  double v28 = v28 + v40;
                  v208[239] = v54;
                }
                else
                {
                  double v5 = v208;
                }
                v25 += 264;
              }
              while ((_OWORD *)v25 != v206);
              if (v29 >= 0.0 && v27 > 0.0 && v27 < 5.0 && v29 > v27 * 6.0)
              {
                uint64_t i = v202;
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                double v55 = v203;
                uint64_t v56 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)__n128 buf = 134349312;
                  *(void *)&uint8_t buf[4] = v14;
                  __int16 v253 = 2050;
                  *(double *)uint64_t v254 = v29;
                  _os_log_impl(&dword_1906B8000, v56, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,jump in route hint measurement,%{public}.3lf,rejecting", buf, 0x16u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  *(_DWORD *)long long v234 = 134349312;
                  *(void *)&v234[4] = v14;
                  *(_WORD *)&v234[12] = 2050;
                  *(double *)&v234[14] = v29;
                  int v198 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v198);
                  if (v198 != buf) {
                    free(v198);
                  }
                  uint64_t i = v202;
                  double v55 = v203;
                }
                sub_1907D5DF8(v55);
                goto LABEL_198;
              }
              uint64_t i = v202;
              if (v28 > 0.0)
              {
                uint64_t v102 = v5[238];
                uint64_t v103 = v5[239];
                while (v102 != v103)
                {
                  *(double *)(v102 + 128) = *(double *)(v102 + 128) / v28;
                  v102 += 264;
                }
              }
              uint64_t v12 = 1;
            }
          }
LABEL_199:
          *(void *)__n128 buf = &v217;
          sub_1907D5DA4((void ***)buf);
          if (i) {
LABEL_200:
          }
            sub_1906BFE48(i);
          return v12;
        }
        double v142 = v138[2].n128_f32[2];
        double v143 = fmod(v142 - v110, 360.0);
        if (v143 < 0.0) {
          double v143 = v143 + 360.0;
        }
        if (v143 <= v132) {
          double v144 = v143;
        }
        else {
          double v144 = v143 + v131;
        }
        if (v144 >= 10.0) {
          goto LABEL_242;
        }
        sub_19082373C(v141);
        if (*(double *)(v141 + 40) >= 7.0)
        {
          double v142 = v138[2].n128_f32[2];
LABEL_242:
          double v148 = v110;
          double v149 = fmod(v110 + v144 * 0.5, 360.0);
          if (v149 >= 0.0) {
            double v150 = v149;
          }
          else {
            double v150 = v149 + 360.0;
          }
          double v151 = *(double *)(a2 + 480);
          double v152 = fmod(v151 - v142, 360.0);
          if (v152 < 0.0) {
            double v152 = v152 + 360.0;
          }
          if (v152 > v132) {
            double v152 = v152 + v131;
          }
          double v153 = v131;
          double v154 = fabs(v152);
          double v155 = fmod(v151 - v150, 360.0);
          if (v155 < 0.0) {
            double v155 = v155 + 360.0;
          }
          double v156 = v132;
          double v157 = v153;
          double v158 = v156;
          if (v155 > v156) {
            double v155 = v155 + v153;
          }
          double v159 = fabs(v155);
          if (v154 < 25.0 || v159 < 15.0)
          {
            if (*((void *)v134 + 216) != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v160 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v161 = *(void *)(a2 + 480);
              double v162 = v138[2].n128_f32[2];
              *(_DWORD *)__n128 buf = 134350848;
              *(void *)&uint8_t buf[4] = v14;
              __int16 v253 = 2050;
              *(void *)uint64_t v254 = v161;
              *(_WORD *)&v254[8] = 2050;
              *(double *)&v254[10] = v162;
              *(_WORD *)&v254[18] = 2050;
              *(double *)&v254[20] = v148;
              __int16 v255 = 2050;
              double v256 = v154;
              __int16 v257 = 2050;
              double v258 = v150;
              __int16 v259 = 2050;
              double v260 = v159;
              __int16 v261 = 2050;
              double v262 = v205;
              _os_log_impl(&dword_1906B8000, v160, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,skipping,moveOnRouteRoads meas,crumb close to intersection and gpsCourse,%{public}.1lf,is matching with next road on route,%{public}.1lf,course,%{public}.1lf,nextCourseDiff,%{public}.1lf,approxCourseOfTurningRoad,%{public}.1lf,turningCourseDiff,%{public}.1lf,courseDiff,%{public}.1lf", buf, 0x52u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (*((void *)v134 + 216) != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              uint64_t v168 = *(void *)(a2 + 480);
              double v169 = v138[2].n128_f32[2];
              *(_DWORD *)long long v234 = 134350848;
              *(void *)&v234[4] = v14;
              *(_WORD *)&v234[12] = 2050;
              *(void *)&v234[14] = v168;
              *(_WORD *)&v234[22] = 2050;
              *(double *)&v234[24] = v169;
              *(_WORD *)&v234[32] = 2050;
              *(double *)&v234[34] = v148;
              *(_WORD *)&v234[42] = 2050;
              *(double *)&v234[44] = v154;
              *(_WORD *)&v234[52] = 2050;
              *(double *)&v234[54] = v150;
              *(_WORD *)&v234[62] = 2050;
              *(double *)long long v235 = v159;
              *(_WORD *)&v235[8] = 2050;
              *(double *)&v235[10] = v205;
              double v170 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v170);
              if (v170 != buf) {
                free(v170);
              }
              uint64_t i = v202;
              char v134 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
            }
            unint64_t v164 = v138[1].n128_u64[0];
            unint64_t v163 = v138[1].n128_u64[1];
            if (v163) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v163 + 8), 1uLL, memory_order_relaxed);
            }
            double v165 = *(std::__shared_weak_count **)&v246[8];
            *(void *)long long v246 = v164;
            *(void *)&v246[8] = v163;
            double v131 = v157;
            if (v165) {
              sub_1906BFE48(v165);
            }
            __n128 v166 = v138[2];
            __n128 v167 = v138[3];
            *(void *)&v247[16] = v138[4].n128_u64[0];
            *(__n128 *)&v246[16] = v166;
            *(__n128 *)long long v247 = v167;
            v166.n128_f64[0] = v138[2].n128_f32[2];
            int v211 = v137;
            double v132 = v158;
            double v110 = v166.n128_f64[0];
          }
          else
          {
            double v131 = v157;
            double v132 = v156;
            double v110 = v148;
          }
          goto LABEL_266;
        }
        if (*((void *)v134 + 216) != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v145 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v146 = v138[1].n128_i64[0];
          sub_19082373C(v146);
          uint64_t v147 = *(void *)(v146 + 40);
          *(_DWORD *)__n128 buf = 134349824;
          *(void *)&uint8_t buf[4] = v14;
          __int16 v253 = 1026;
          *(_DWORD *)uint64_t v254 = v137;
          *(_WORD *)&v254[4] = 2050;
          *(double *)&v254[6] = v144;
          *(_WORD *)&v254[14] = 2050;
          *(void *)&v254[16] = v147;
          _os_log_impl(&dword_1906B8000, v145, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,routeHints,moving on to next route road,nextRouteRoadIndex,%{public}d,angleBetweenTwoRoads,%{public}.2lf,length,%{public}.2lf", buf, 0x26u);
          uint64_t i = v202;
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (*((void *)v134 + 216) != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v171 = v138[1].n128_i64[0];
          sub_19082373C(v171);
          uint64_t v172 = *(void *)(v171 + 40);
          *(_DWORD *)long long v234 = 134349824;
          *(void *)&v234[4] = v14;
          *(_WORD *)&v234[12] = 1026;
          *(_DWORD *)&v234[14] = v137;
          *(_WORD *)&v234[18] = 2050;
          *(double *)&v234[20] = v144;
          *(_WORD *)&v234[28] = 2050;
          *(void *)&v234[30] = v172;
          double v173 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v173);
          if (v173 != buf) {
            free(v173);
          }
          uint64_t i = v202;
          char v134 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
        }
      }
LABEL_266:
      int v135 = 2;
      char v133 = 1;
      if (v136)
      {
        double v5 = v208;
        a3 = v209;
        goto LABEL_295;
      }
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  uint64_t v57 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134349056;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl(&dword_1906B8000, v57, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, generateRouteHint", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    *(_DWORD *)long long v234 = 134349056;
    *(void *)&v234[4] = v14;
    double v197 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateRouteHintMeasurement(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v197);
    if (v197 != buf) {
      free(v197);
    }
    uint64_t v12 = 0;
    if (i) {
      goto LABEL_200;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (i) {
      goto LABEL_200;
    }
  }
  return v12;
}

void sub_190849338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  STACK[0x2F0] = (unint64_t)&a42;
  sub_1907D5DA4((void ***)&STACK[0x2F0]);
  if (a16) {
    sub_1906BFE48(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_190849440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 48) == *(void *)(a2 + 40)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 384);
  uint64_t v8 = *(void *)(a1 + 208);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 216);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    BOOL v24 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid geometry pointer, mapMatch", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      *(_DWORD *)std::string __p = 134349056;
      *(void *)&__p[4] = v6;
      double v142 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v142);
      if (v142 != buf) {
        free(v142);
      }
    }
    char v25 = 0;
    BOOL v26 = 0;
    if (v7) {
      goto LABEL_155;
    }
    goto LABEL_156;
  }
  double v9 = *(double *)(a1 + 1872);
  BOOL v10 = vabdd_f64(*(double *)(a2 + 400), v9) > 6.0 || v9 < 0.0;
  if (!v10 || (uint64_t v11 = *(void *)(a2 + 256)) == 0)
  {
    BOOL v174 = 0;
    BOOL v23 = 0;
    goto LABEL_52;
  }
  double v12 = 15.0;
  double v13 = 25.0;
  if (*(unsigned char *)(a1 + 12))
  {
    double v13 = 15.0;
    double v12 = 5.0;
  }
  if (*(double *)(v11 + 96) * 1.5 >= 0.0) {
    double v12 = *(double *)(v11 + 96) * 1.5;
  }
  if (v13 >= v12) {
    double v14 = v12;
  }
  else {
    double v14 = v13;
  }
  int v15 = *(unsigned __int8 *)(a2 + 276);
  double v16 = *(double *)(a2 + 304);
  sub_19082373C(*(void *)(a2 + 256));
  double v17 = 1.0 - v16;
  if (!v15) {
    double v17 = v16;
  }
  int v18 = *(unsigned __int8 *)(a2 + 276);
  double v19 = *(double *)(a2 + 304);
  if (v17 * *(double *)(v11 + 40) < v14) {
    goto LABEL_33;
  }
  double v20 = 1.0 - v19;
  if (*(unsigned char *)(a2 + 276)) {
    double v20 = *(double *)(a2 + 304);
  }
  if (v20 >= 0.99)
  {
LABEL_33:
    uint64_t v27 = *(void *)(a2 + 256);
    sub_19082373C(v27);
    double v28 = 1.0 - v19;
    if (!v18) {
      double v28 = v19;
    }
    double v29 = v28 * *(double *)(v27 + 40);
    *(void *)__n128 buf = buf;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0;
    if (!(*(unsigned int (**)(uint64_t, unsigned char *, uint64_t, void, uint64_t, double, double))(*(void *)v8 + 72))(v8, buf, a2 + 256, *(unsigned __int8 *)(a2 + 276), 1, *(double *)(a2 + 304), v29 + 1.0))goto LABEL_40; {
    if (*(void *)&buf[16])
    }
    {
      if (*(void *)&buf[16] != 1
        || **(void **)(a2 + 256) != *(void *)(*(void *)&buf[8] + 16)
        || (int v30 = *(unsigned __int8 *)(a2 + 276), v30 == *(unsigned __int8 *)(*(void *)&buf[8] + 24)))
      {
LABEL_40:
        BOOL v174 = 0;
        int v21 = 0;
LABEL_45:
        sub_19079AA88((uint64_t *)buf);
        goto LABEL_46;
      }
      double v31 = *(double *)(a2 + 304);
    }
    else
    {
      double v31 = *(double *)(a2 + 304);
      int v30 = *(unsigned __int8 *)(a2 + 276);
    }
    if (!v30) {
      double v31 = 1.0 - v31;
    }
    BOOL v174 = v31 >= 0.99;
    int v21 = 1;
    goto LABEL_45;
  }
  BOOL v174 = 0;
  int v21 = 0;
LABEL_46:
  if (*(unsigned char *)(a1 + 12))
  {
    int v32 = *(unsigned __int8 *)(a2 + 276);
    double v33 = *(double *)(a2 + 304);
    uint64_t v34 = *(void *)(a2 + 256);
    sub_19082373C(v34);
    double v35 = 1.0 - v33;
    if (!v32) {
      double v35 = v33;
    }
    if (v35 * *(double *)(v34 + 40) < v14) {
      int v21 = 1;
    }
  }
  BOOL v23 = v21 != 0;
LABEL_52:
  double v36 = *(double *)(a2 + 616);
  if (*(unsigned char *)(a2 + 896)) {
    BOOL v37 = 1;
  }
  else {
    BOOL v37 = *(unsigned char *)(a2 + 368) == 0;
  }
  int v38 = !v37;
  double v39 = fabs(*(double *)(a3 + 480));
  if (*(unsigned char *)(a3 + 504)) {
    double v40 = v39;
  }
  else {
    double v40 = -1.0;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  unint64_t v41 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v42 = *(void *)(a2 + 384);
    uint64_t v43 = *(void *)(a2 + 608);
    uint64_t v44 = *(void *)(a2 + 632);
    *(_DWORD *)__n128 buf = 134350592;
    *(void *)&uint8_t buf[4] = v42;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&unsigned char buf[14] = v36;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(double *)&unsigned char buf[24] = v40;
    *(_WORD *)&unsigned char buf[32] = 1026;
    *(_DWORD *)uint64_t v192 = v38;
    *(_WORD *)&v192[4] = 2050;
    *(void *)&v192[6] = v43;
    *(_WORD *)&v192[14] = 2050;
    *(void *)&v192[16] = v44;
    *(_WORD *)&v192[24] = 1026;
    *(_DWORD *)&v192[26] = v23;
    _os_log_impl(&dword_1906B8000, v41, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,evaluateMatch,oldOffRoadCount,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf,atIntersection,%{public}d,varFactor,%{public}.2lf,acrossTrack,%{public}.2lf,isAmbiguous,%{public}d", buf, 0x40u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v135 = *(void *)(a2 + 384);
    uint64_t v136 = *(void *)(a2 + 608);
    uint64_t v137 = *(void *)(a2 + 632);
    *(_DWORD *)std::string __p = 134350592;
    *(void *)&__p[4] = v135;
    *(_WORD *)&unsigned char __p[12] = 2050;
    *(double *)&__p[14] = v36;
    *(_WORD *)&__p[22] = 2050;
    *(double *)&__p[24] = v40;
    *(_WORD *)&__p[32] = 1026;
    *(_DWORD *)uint64_t v179 = v38;
    *(_WORD *)&v179[4] = 2050;
    *(void *)&v179[6] = v136;
    *(_WORD *)&v179[14] = 2050;
    *(void *)&v179[16] = v137;
    *(_WORD *)&v179[24] = 1026;
    *(_DWORD *)&v179[26] = v23;
    float v138 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v138);
    if (v138 != buf) {
      free(v138);
    }
  }
  int v45 = (int)*(double *)(a2 + 608);
  if (v36 < 25.0) {
    int v46 = 1;
  }
  else {
    int v46 = v38;
  }
  BOOL v175 = v23;
  if (v46 == 1)
  {
    char v47 = 0;
    int v48 = 0;
    switch(v45)
    {
      case 0:
      case 1:
      case 2:
        goto LABEL_74;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
        break;
      case 13:
        goto LABEL_75;
      case 14:
        goto LABEL_76;
      case 15:
      case 16:
        goto LABEL_72;
      case 17:
      case 18:
      case 19:
      case 20:
        goto LABEL_73;
      default:
        goto LABEL_77;
    }
  }
  else
  {
    char v47 = 0;
    int v48 = 0;
    switch(v45)
    {
      case 0:
      case 1:
      case 2:
LABEL_74:
        char v47 = 0;
        int v48 = -1;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        break;
      case 8:
      case 9:
      case 10:
LABEL_75:
        char v47 = 1;
        int v48 = 1;
        break;
      case 11:
      case 12:
LABEL_76:
        int v48 = 2;
        goto LABEL_78;
      case 13:
      case 14:
      case 15:
      case 16:
LABEL_72:
        int v48 = 3;
        goto LABEL_78;
      case 17:
      case 18:
      case 19:
      case 20:
LABEL_73:
        int v48 = 4;
        goto LABEL_78;
      default:
LABEL_77:
        int v48 = 10;
LABEL_78:
        char v47 = 1;
        break;
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  long long v49 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v50 = *(void *)(a2 + 384);
    int v51 = *(_DWORD *)(a1 + 1208);
    *(_DWORD *)__n128 buf = 134349568;
    *(void *)&uint8_t buf[4] = v50;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v51;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v51 + v48;
    _os_log_impl(&dword_1906B8000, v49, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,varFactorCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v139 = *(void *)(a2 + 384);
    int v140 = *(_DWORD *)(a1 + 1208);
    *(_DWORD *)std::string __p = 134349568;
    *(void *)&__p[4] = v139;
    *(_WORD *)&unsigned char __p[12] = 1026;
    *(_DWORD *)&__p[14] = v140;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = v140 + v48;
    uint64_t v141 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v141);
    if (v141 != buf) {
      free(v141);
    }
  }
  *(_DWORD *)(a1 + 1208) = (*(_DWORD *)(a1 + 1208) + v48) & ~((*(_DWORD *)(a1 + 1208) + v48) >> 31);
  double v52 = *(double *)(a2 + 568);
  if (v52 > 0.0 && *(double *)(a2 + 480) >= 0.0)
  {
    if (*(double *)(a2 + 560) <= 0.0
      || ((double v53 = *(double *)(a2 + 472), v53 < 0.001) ? (v54 = v53 < 0.0) : (v54 = 1), v54))
    {
      if (!*(unsigned char *)(a2 + 604) && fabs(*(double *)(a2 + 632)) > 25.0)
      {
        if (v38)
        {
          if (v36 <= 67.5) {
            goto LABEL_118;
          }
          if (v52 >= 20.0)
          {
            int v55 = 4;
LABEL_112:
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v57 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v58 = *(void *)(a2 + 384);
              int v59 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)__n128 buf = 134349568;
              *(void *)&uint8_t buf[4] = v58;
              *(_WORD *)&unsigned char buf[12] = 1026;
              *(_DWORD *)&unsigned char buf[14] = v59;
              *(_WORD *)&buf[18] = 1026;
              *(_DWORD *)&buf[20] = v59 + v55;
              _os_log_impl(&dword_1906B8000, v57, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              uint64_t v165 = *(void *)(a2 + 384);
              int v166 = *(_DWORD *)(a1 + 1208);
              *(_DWORD *)std::string __p = 134349568;
              *(void *)&__p[4] = v165;
              *(_WORD *)&unsigned char __p[12] = 1026;
              *(_DWORD *)&__p[14] = v166;
              *(_WORD *)&__p[18] = 1026;
              *(_DWORD *)&__p[20] = v166 + v55;
              __n128 v167 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v167);
              if (v167 != buf) {
                free(v167);
              }
            }
            *(_DWORD *)(a1 + 1208) += v55;
            char v47 = 1;
            goto LABEL_118;
          }
          goto LABEL_105;
        }
        if (v52 >= 20.0)
        {
          if (v36 > 67.5) {
            goto LABEL_105;
          }
          if (v36 > 45.0) {
            goto LABEL_108;
          }
          double v56 = 30.0;
        }
        else
        {
          if (v36 > 67.5)
          {
            int v55 = 18;
            goto LABEL_112;
          }
          if (v36 > 45.0)
          {
LABEL_105:
            int v55 = 6;
            goto LABEL_112;
          }
          if (v36 > 30.0)
          {
LABEL_108:
            int v55 = 2;
            goto LABEL_112;
          }
          double v56 = 20.0;
        }
        if (v36 <= v56) {
          goto LABEL_118;
        }
        int v55 = 1;
        goto LABEL_112;
      }
    }
  }
LABEL_118:
  double v60 = *(double *)(a2 + 456);
  double v61 = *(double *)(a2 + 576);
  if (v61 > 0.0)
  {
    double v62 = *(double *)(a2 + 584);
    if (v62 > 0.0) {
      double v60 = sqrt(v62 / 2.45 * (v62 / 2.45) + v61 / 2.45 * (v61 / 2.45));
    }
  }
  if (v60 >= 10.0) {
    double v63 = v60;
  }
  else {
    double v63 = 10.0;
  }
  if (v63 >= 50.0) {
    char v64 = 1;
  }
  else {
    char v64 = v47;
  }
  if ((v64 & 1) == 0)
  {
    if (fabs(*(double *)(a2 + 632)) <= 75.0 && fabs(*(double *)(a2 + 624)) <= 150.0)
    {
      char v47 = 0;
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v65 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v66 = *(void *)(a2 + 384);
        int v67 = *(_DWORD *)(a1 + 1208);
        *(_DWORD *)__n128 buf = 134349568;
        *(void *)&uint8_t buf[4] = v66;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v67;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v67 + 1;
        _os_log_impl(&dword_1906B8000, v65, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,courseCheck,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x18u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v145 = *(void *)(a2 + 384);
        int v146 = *(_DWORD *)(a1 + 1208);
        *(_DWORD *)std::string __p = 134349568;
        *(void *)&__p[4] = v145;
        *(_WORD *)&unsigned char __p[12] = 1026;
        *(_DWORD *)&__p[14] = v146;
        *(_WORD *)&__p[18] = 1026;
        *(_DWORD *)&__p[20] = v146 + 1;
        uint64_t v147 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v147);
        if (v147 != buf) {
          free(v147);
        }
      }
      ++*(_DWORD *)(a1 + 1208);
      char v47 = 1;
    }
  }
  if (*(unsigned char *)(a2 + 737)) {
    int v68 = v38;
  }
  else {
    int v68 = 1;
  }
  double v69 = 40000.0;
  if (v68) {
    double v69 = 10000.0;
  }
  if (*(unsigned char *)(a3 + 601)) {
    BOOL v70 = *(unsigned char *)(a3 + 504) == 0;
  }
  else {
    BOOL v70 = 1;
  }
  if (v70) {
    double v71 = 10000.0;
  }
  else {
    double v71 = v69;
  }
  double v72 = *(double *)(a2 + 632) * *(double *)(a2 + 632) + *(double *)(a2 + 624) * *(double *)(a2 + 624);
  if (v72 > v71)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    char v25 = v175;
    double v73 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v74 = *(void *)(a2 + 384);
      *(_DWORD *)__n128 buf = 134349568;
      *(void *)&uint8_t buf[4] = v74;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = sqrt(v71);
      *(_WORD *)&unsigned char buf[22] = 1026;
      *(_DWORD *)&unsigned char buf[24] = v38;
      _os_log_impl(&dword_1906B8000, v73, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,distance > %{public}.0lfm,Intersection,%{public}d", buf, 0x1Cu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v143 = *(void *)(a2 + 384);
      *(_DWORD *)std::string __p = 134349568;
      *(void *)&__p[4] = v143;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&__p[14] = sqrt(v71);
      *(_WORD *)&__p[22] = 1026;
      *(_DWORD *)&__p[24] = v38;
      double v144 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v144);
      if (v144 != buf) {
        free(v144);
      }
      char v25 = v175;
    }
    BOOL v26 = 0;
    *(unsigned char *)(a1 + 1212) = 0;
    if (v7) {
      goto LABEL_155;
    }
    goto LABEL_156;
  }
  double v80 = *(double *)(a2 + 472);
  if (v80 >= 0.0 && *(double *)(a2 + 560) > 0.0) {
    double v80 = (v80 + *(double *)(a3 + 336)) * 0.5;
  }
  double v82 = *(double *)(a2 + 400);
  double v83 = -1.0;
  if (v82 >= 0.0)
  {
    double v84 = *(double *)(a3 + 264);
    if (v84 >= 0.0) {
      double v83 = vabdd_f64(v82, v84);
    }
  }
  if (*(unsigned char *)(a3 + 504))
  {
    if (*(unsigned char *)(a1 + 1212))
    {
      if (*(double *)(a2 + 608) > 13.0)
      {
        double v85 = v80 * v83;
        double v86 = sub_1906DA618((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a2 + 528), *(double *)(a2 + 536), *(double *)(a2 + 448))- v80 * v83;
        if (v86 > 100.0)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          long long v87 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v88 = *(void *)(a2 + 384);
            int v89 = *(_DWORD *)(a1 + 1208);
            *(_DWORD *)__n128 buf = 134350080;
            *(void *)&uint8_t buf[4] = v88;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v86;
            *(_WORD *)&unsigned char buf[22] = 2050;
            *(double *)&unsigned char buf[24] = v85;
            *(_WORD *)&unsigned char buf[32] = 1026;
            *(_DWORD *)uint64_t v192 = v89;
            *(_WORD *)&v192[4] = 1026;
            *(_DWORD *)&v192[6] = v89 + 18;
            _os_log_impl(&dword_1906B8000, v87, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,jumpDistanceCheck,%{public}.1lf,expectedDistanceTravelled,%{public}.1lf,oldOffRoadCount,%{public}d,newOffRoadCount,%{public}d", buf, 0x2Cu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v148 = *(void *)(a2 + 384);
            int v149 = *(_DWORD *)(a1 + 1208);
            *(_DWORD *)std::string __p = 134350080;
            *(void *)&__p[4] = v148;
            *(_WORD *)&unsigned char __p[12] = 2050;
            *(double *)&__p[14] = v86;
            *(_WORD *)&__p[22] = 2050;
            *(double *)&__p[24] = v85;
            *(_WORD *)&__p[32] = 1026;
            *(_DWORD *)uint64_t v179 = v149;
            *(_WORD *)&v179[4] = 1026;
            *(_DWORD *)&v179[6] = v149 + 18;
            double v150 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v150);
            if (v150 != buf) {
              free(v150);
            }
          }
          *(_DWORD *)(a1 + 1208) += 18;
          char v47 = 1;
        }
      }
    }
  }
  if (v10 && v174)
  {
    double v90 = *(unsigned char *)(a2 + 276) ? *(double *)(a2 + 304) : 1.0 - *(double *)(a2 + 304);
    if (v90 >= 0.99)
    {
      *(_DWORD *)(a1 + 1208) += (int)(v90 * 10.0);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      long long v91 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v92 = *(void *)(a2 + 384);
        int v93 = *(_DWORD *)(a1 + 1208);
        *(_DWORD *)__n128 buf = 134349824;
        *(void *)&uint8_t buf[4] = v92;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = v93;
        *(_WORD *)&buf[18] = 2050;
        *(double *)&buf[20] = v90;
        *(_WORD *)&buf[28] = 1026;
        *(_DWORD *)&buf[30] = (int)(v90 * 10.0);
        _os_log_impl(&dword_1906B8000, v91, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,evalauteMatch,offRoadCount,%{public}d,projection,%{public}.2lf,delta,%{public}d", buf, 0x22u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v151 = *(void *)(a2 + 384);
        int v152 = *(_DWORD *)(a1 + 1208);
        *(_DWORD *)std::string __p = 134349824;
        *(void *)&__p[4] = v151;
        *(_WORD *)&unsigned char __p[12] = 1026;
        *(_DWORD *)&__p[14] = v152;
        *(_WORD *)&__p[18] = 2050;
        *(double *)&__p[20] = v90;
        *(_WORD *)&__p[28] = 1026;
        *(_DWORD *)&__p[30] = (int)(v90 * 10.0);
        double v153 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v153);
        if (v153 != buf) {
          free(v153);
        }
      }
      char v47 = 1;
    }
  }
  if (!*(unsigned char *)(a1 + 1212))
  {
    if (v47) {
      goto LABEL_262;
    }
    double v101 = 13.5;
    if (*(unsigned char *)(a2 + 724)) {
      double v101 = 7.5;
    }
    if (v60 > 7.5) {
      double v102 = 20.0;
    }
    else {
      double v102 = v101;
    }
    double v103 = 30.0;
    if (v10)
    {
      if (*(_DWORD *)(a2 + 496) == 9)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v104 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v105 = *(void *)(a2 + 384);
          int v106 = *(_DWORD *)(a2 + 496);
          if (*(char *)(a2 + 527) < 0)
          {
            sub_1906C00FC(__p, *(void **)(a2 + 504), *(void *)(a2 + 512));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 504);
            *(void *)&__p[16] = *(void *)(a2 + 520);
          }
          uint64_t v118 = __p;
          if (__p[23] < 0) {
            uint64_t v118 = *(unsigned char **)__p;
          }
          *(_DWORD *)__n128 buf = 134349570;
          *(void *)&uint8_t buf[4] = v105;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&unsigned char buf[14] = v106;
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v118;
          _os_log_impl(&dword_1906B8000, v104, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping,shouldStartSnappingOnfrc,frc,%{public}d,name,%{public}s,using tighter-threshold", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        double v102 = 5.0;
        double v103 = 8.0;
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v170 = *(void *)(a2 + 384);
          int v171 = *(_DWORD *)(a2 + 496);
          if (*(char *)(a2 + 527) < 0)
          {
            sub_1906C00FC(__dst, *(void **)(a2 + 504), *(void *)(a2 + 512));
          }
          else
          {
            *(_OWORD *)long long __dst = *(_OWORD *)(a2 + 504);
            uint64_t v177 = *(void *)(a2 + 520);
          }
          uint64_t v172 = __dst;
          if (v177 < 0) {
            uint64_t v172 = (void **)__dst[0];
          }
          *(_DWORD *)std::string __p = 134349570;
          *(void *)&__p[4] = v170;
          *(_WORD *)&unsigned char __p[12] = 1026;
          *(_DWORD *)&__p[14] = v171;
          *(_WORD *)&__p[18] = 2082;
          *(void *)&__p[20] = v172;
          double v173 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(v177) < 0) {
            operator delete(__dst[0]);
          }
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v173);
          if (v173 != buf) {
            free(v173);
          }
        }
      }
      else
      {
        int v117 = *(_DWORD *)(a2 + 792);
        if (v117 != 3)
        {
          double v103 = v117 == 4 ? 30.0 : 18.0;
          if (v117 != 4) {
            double v102 = 6.0;
          }
        }
      }
    }
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v119 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v120 = *(void *)(a2 + 384);
      uint64_t v121 = *(void *)(a2 + 632);
      uint64_t v122 = *(void *)(a2 + 608);
      uint64_t v123 = *(void *)(a3 + 472);
      uint64_t v124 = *(void *)(a2 + 472);
      uint64_t v125 = *(void *)(a2 + 480);
      uint64_t v126 = *(void *)(a3 + 336);
      uint64_t v127 = *(void *)(a3 + 344);
      *(_DWORD *)__n128 buf = 134351872;
      *(void *)&uint8_t buf[4] = v120;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v72;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = v121;
      *(_WORD *)&unsigned char buf[32] = 2050;
      *(double *)uint64_t v192 = v63;
      *(_WORD *)&v192[8] = 2050;
      *(void *)&v192[10] = v122;
      *(_WORD *)&v192[18] = 2048;
      *(void *)&v192[20] = v123;
      *(_WORD *)&v192[28] = 2050;
      uint64_t v193 = v124;
      __int16 v194 = 2050;
      uint64_t v195 = v126;
      __int16 v196 = 2050;
      uint64_t v197 = v125;
      __int16 v198 = 2050;
      uint64_t v199 = v127;
      __int16 v200 = 2050;
      double v201 = v36;
      __int16 v202 = 2050;
      double v203 = v40;
      _os_log_impl(&dword_1906B8000, v119, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping criteria,distance2,%{public}.1lf,acrossTrack,%{public}.2lf,drms,%{public}.1lf,currentVF,%{public}.3lf,prioVF{public},%.3lf,curSpeed,%{public}.2lf,priorSpeed,%{public}.2lf,curCourse,%{public}.2lf,priorCourse,%{public}.2lf,fabsDeltaAz,%{public}.2lf,priorFabsDeltaAz,%{public}.2lf", buf, 0x7Au);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v154 = *(void *)(a2 + 384);
      uint64_t v155 = *(void *)(a2 + 632);
      uint64_t v156 = *(void *)(a2 + 608);
      uint64_t v157 = *(void *)(a3 + 472);
      uint64_t v158 = *(void *)(a2 + 472);
      uint64_t v159 = *(void *)(a2 + 480);
      uint64_t v160 = *(void *)(a3 + 336);
      uint64_t v161 = *(void *)(a3 + 344);
      *(_DWORD *)std::string __p = 134351872;
      *(void *)&__p[4] = v154;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(double *)&__p[14] = v72;
      *(_WORD *)&__p[22] = 2050;
      *(void *)&__p[24] = v155;
      *(_WORD *)&__p[32] = 2050;
      *(double *)uint64_t v179 = v63;
      *(_WORD *)&v179[8] = 2050;
      *(void *)&v179[10] = v156;
      *(_WORD *)&v179[18] = 2048;
      *(void *)&v179[20] = v157;
      *(_WORD *)&v179[28] = 2050;
      uint64_t v180 = v158;
      __int16 v181 = 2050;
      uint64_t v182 = v160;
      __int16 v183 = 2050;
      uint64_t v184 = v159;
      __int16 v185 = 2050;
      uint64_t v186 = v161;
      __int16 v187 = 2050;
      double v188 = v36;
      __int16 v189 = 2050;
      double v190 = v40;
      double v162 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v162);
      if (v162 != buf) {
        free(v162);
      }
    }
    if (!*(unsigned char *)(a2 + 641)
      && v72 < 400.0
      && !*(unsigned char *)(a3 + 505)
      && fabs(*(double *)(a2 + 632)) < v102
      && v63 < 101.0)
    {
      double v130 = *(double *)(a2 + 608);
      if (v130 < 3.0)
      {
        double v131 = *(double *)(a3 + 472);
        if (v131 < 3.0
          && *(double *)(a2 + 472) > 0.25
          && *(double *)(a3 + 336) > 0.25
          && *(double *)(a2 + 480) >= 0.0
          && *(double *)(a3 + 344) >= 0.0
          && v36 < v103
          && v40 < v103)
        {
          double v132 = *(double *)(a2 + 568);
          if (v132 >= 20.0 || v132 <= 0.0)
          {
            float v133 = *(float *)(a2 + 556);
            float v134 = 3.0;
          }
          else
          {
            if (v36 >= 40.0) {
              goto LABEL_255;
            }
            float v133 = *(float *)(a2 + 556);
            float v134 = 2.5;
          }
          if (v133 > v134 || v130 < 1.0 && v131 < 1.0 && (v133 == 0.0 || v133 > 1.1))
          {
            *(unsigned char *)(a1 + 1212) = 1;
LABEL_256:
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            double v128 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v129 = *(void *)(a2 + 384);
              *(_DWORD *)__n128 buf = 134349056;
              *(void *)&uint8_t buf[4] = v129;
              _os_log_impl(&dword_1906B8000, v128, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,startSnapping", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              uint64_t v168 = *(void *)(a2 + 384);
              *(_DWORD *)std::string __p = 134349056;
              *(void *)&__p[4] = v168;
              double v169 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v169);
              if (v169 != buf) {
                free(v169);
              }
            }
            *(_DWORD *)(a1 + 1208) = 0;
            goto LABEL_262;
          }
        }
      }
    }
LABEL_255:
    if (!*(unsigned char *)(a1 + 1212)) {
      goto LABEL_262;
    }
    goto LABEL_256;
  }
  double v94 = *(double *)(a2 + 608);
  if (v94 > 70.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v95 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v96 = *(void *)(a2 + 384);
      uint64_t v97 = *(void *)(a2 + 608);
      *(_DWORD *)__n128 buf = 134349568;
      *(void *)&uint8_t buf[4] = v96;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v97;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = 0x4051800000000000;
      _os_log_impl(&dword_1906B8000, v95, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,varFactor,%{public}.1lf,threshold,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_222;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v98 = *(void *)(a2 + 384);
    uint64_t v99 = *(void *)(a2 + 608);
    *(_DWORD *)std::string __p = 134349568;
    *(void *)&__p[4] = v98;
    *(_WORD *)&unsigned char __p[12] = 2050;
    *(void *)&__p[14] = v99;
    *(_WORD *)&__p[22] = 2050;
    *(void *)&__p[24] = 0x4051800000000000;
    int v100 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v100);
LABEL_324:
    if (v100 != buf) {
      free(v100);
    }
LABEL_222:
    *(unsigned char *)(a1 + 1212) = 0;
    goto LABEL_262;
  }
  if (*(int *)(a1 + 1208) >= 18)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v107 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v108 = *(void *)(a2 + 384);
      int v109 = *(_DWORD *)(a1 + 1208);
      *(_DWORD *)__n128 buf = 134349568;
      *(void *)&uint8_t buf[4] = v108;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v109;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = 18;
      _os_log_impl(&dword_1906B8000, v107, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,stopSnapping,offRoadCount,%{public}d,threshold,%{public}d", buf, 0x18u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_222;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v163 = *(void *)(a2 + 384);
    int v164 = *(_DWORD *)(a1 + 1208);
    *(_DWORD *)std::string __p = 134349568;
    *(void *)&__p[4] = v163;
    *(_WORD *)&unsigned char __p[12] = 1026;
    *(_DWORD *)&__p[14] = v164;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = 18;
    int v100 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v100);
    goto LABEL_324;
  }
  if (v94 >= 6.5) {
    char v110 = 1;
  }
  else {
    char v110 = v47;
  }
  if ((v110 & 1) == 0)
  {
    *(_DWORD *)(a1 + 1208) = 0;
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    double v111 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v112 = *(void *)(a2 + 384);
      int v113 = *(_DWORD *)(a1 + 1208);
      *(_DWORD *)__n128 buf = 134349312;
      *(void *)&uint8_t buf[4] = v112;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v113;
      _os_log_impl(&dword_1906B8000, v111, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reseting offRoadCount,%{public}d", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v114 = *(void *)(a2 + 384);
      int v115 = *(_DWORD *)(a1 + 1208);
      *(_DWORD *)std::string __p = 134349312;
      *(void *)&__p[4] = v114;
      *(_WORD *)&unsigned char __p[12] = 1026;
      *(_DWORD *)&__p[14] = v115;
      double v116 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::evaluateMatch(const MMSnapData &, const MMSnapData &, BOOL &)", "CoreLocation: %s\n", v116);
      if (v116 != buf) {
        free(v116);
      }
    }
  }
LABEL_262:
  BOOL v26 = *(unsigned char *)(a1 + 1212) != 0;
  char v25 = v175;
  if (v7) {
LABEL_155:
  }
    sub_1906BFE48(v7);
LABEL_156:
  *(unsigned char *)(a2 + 640) = v26;
  if (*(unsigned char *)(a2 + 881)) {
    char v75 = 1;
  }
  else {
    char v75 = v25;
  }
  *(unsigned char *)(a2 + 881) = v75;
  sub_1907B519C(a1 + 1216, (long long *)(a2 + 376));
  int v76 = sub_1907B53E4((uint64_t *)(a1 + 1216), 0);
  if (v76)
  {
    *(unsigned char *)(a2 + 640) = 0;
  }
  else if (v26)
  {
    return 1;
  }
  uint64_t result = v76 ^ 1u;
  *(_DWORD *)(a2 + 656) = 0;
  uint64_t v77 = *(void *)(a2 + 432);
  uint64_t v78 = *(void *)(a2 + 440);
  *(void *)(a2 + 528) = v77;
  *(void *)(a2 + 536) = v78;
  uint64_t v79 = *(void *)(a2 + 480);
  *(void *)(a2 + 544) = v79;
  *(void *)(a2 + 664) = v77;
  *(void *)(a2 + 672) = v78;
  *(void *)(a2 + 680) = v79;
  return result;
}

void sub_19084B4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (v33) {
    sub_1906BFE48(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19084B600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 640))
  {
    *(_DWORD *)(a1 + 1752) = 0;
    *(_OWORD *)(a1 + 1760) = 0u;
    if (fabs(*(double *)(a2 + 528)) < 0.00003 && fabs(*(double *)(a2 + 536)) < 0.00003)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v6 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reset,snap coordinate is null island", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      goto LABEL_11;
    }
    if (*(unsigned char *)(a2 + 882)
      && *(unsigned char *)(a3 + 746)
      && *(void *)(a3 + 120)
      && *(void *)(a2 + 256)
      && (sub_1907BDE7C(a3 + 120, (uint64_t)buf),
          sub_1907BDE7C(a2 + 256, (uint64_t)v107),
          *(void *)buf == *(void *)v107)
      && buf[16] == v107[16]
      && *(void *)&buf[8] == *(void *)&v107[8])
    {
      ++*(_DWORD *)(a1 + 1776);
    }
    else
    {
      *(_DWORD *)(a1 + 1776) = 0;
    }
    if (!*(unsigned char *)(a2 + 640)) {
      goto LABEL_38;
    }
    if (!*(unsigned char *)(a3 + 504)) {
      goto LABEL_38;
    }
    uint64_t v15 = *(void *)(a2 + 488);
    if (v15 == *(void *)(a3 + 352)) {
      goto LABEL_38;
    }
    double v16 = fmod(*(double *)(a2 + 680) - *(double *)(a3 + 544), 360.0);
    if (v16 < 0.0) {
      double v16 = v16 + 360.0;
    }
    if (v16 > 180.0) {
      double v16 = v16 + -360.0;
    }
    if (fabs(v16) >= 45.0)
    {
      if (*(void *)(a1 + 1800) || (uint64_t v36 = *(void *)(a1 + 1816), v36 == a1 + 1808))
      {
        BOOL v29 = 0;
      }
      else
      {
        do
        {
          BOOL v29 = v15 == **(void **)(v36 + 16);
          if (v15 == **(void **)(v36 + 16)) {
            break;
          }
          uint64_t v36 = *(void *)(v36 + 8);
        }
        while (v36 != a1 + 1808);
      }
      for (uint64_t i = *(void *)(a1 + 1792); i != a1 + 1784; uint64_t i = *(void *)(i + 8))
      {
        if (v15 == **(void **)(i + 16)) {
          goto LABEL_68;
        }
      }
      if (v29) {
        goto LABEL_68;
      }
      BOOL v37 = *(uint64_t **)(a2 + 256);
      if (v37)
      {
        int v38 = *(uint64_t **)(a3 + 120);
        if (v38)
        {
          double v39 = *(std::__shared_weak_count **)(a2 + 264);
          if (v39)
          {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            int v38 = *(uint64_t **)(a3 + 120);
          }
          double v40 = *(std::__shared_weak_count **)(a3 + 128);
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v42 = (float64x2_t *)v37[17];
          unint64_t v41 = (float64x2_t *)v37[18];
          float64x2_t v43 = 0uLL;
          float64x2_t v44 = 0uLL;
          if (v41 != v42) {
            float64x2_t v44 = *v42;
          }
          int v46 = (float64x2_t *)v38[17];
          int v45 = (float64x2_t *)v38[18];
          if (v45 != v46) {
            float64x2_t v43 = *v46;
          }
          int32x2_t v47 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v44, v43)));
          if (vand_s8((int8x8_t)v47, (int8x8_t)vdup_lane_s32(v47, 1)).u8[0]) {
            goto LABEL_108;
          }
          float64x2_t v48 = 0uLL;
          float64x2_t v49 = 0uLL;
          if (v41 != v42) {
            float64x2_t v49 = *v42;
          }
          if (v45 != v46) {
            float64x2_t v48 = v45[-1];
          }
          int32x2_t v50 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v49, v48)));
          if (vand_s8((int8x8_t)v50, (int8x8_t)vdup_lane_s32(v50, 1)).u8[0]) {
            goto LABEL_108;
          }
          float64x2_t v51 = 0uLL;
          float64x2_t v52 = 0uLL;
          if (v41 != v42) {
            float64x2_t v52 = v41[-1];
          }
          if (v45 != v46) {
            float64x2_t v51 = *v46;
          }
          int32x2_t v53 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v52, v51)));
          if (vand_s8((int8x8_t)v53, (int8x8_t)vdup_lane_s32(v53, 1)).u8[0]) {
            goto LABEL_108;
          }
          float64x2_t v54 = 0uLL;
          float64x2_t v55 = 0uLL;
          if (v41 != v42) {
            float64x2_t v55 = v41[-1];
          }
          if (v45 != v46) {
            float64x2_t v54 = v45[-1];
          }
          int32x2_t v56 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v55, v54)));
          if (vand_s8((int8x8_t)v56, (int8x8_t)vdup_lane_s32(v56, 1)).u8[0]) {
LABEL_108:
          }
            int v57 = 1;
          else {
            int v57 = 0;
          }
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v58 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v59 = *(void *)(a2 + 384);
            uint64_t v60 = *v37;
            uint64_t v61 = *v38;
            *(_DWORD *)__n128 buf = 134349825;
            *(void *)&uint8_t buf[4] = v59;
            *(_WORD *)&unsigned char buf[12] = 1026;
            *(_DWORD *)&unsigned char buf[14] = v57;
            *(_WORD *)&buf[18] = 2049;
            *(void *)&buf[20] = v60;
            *(_WORD *)&buf[28] = 2049;
            *(void *)&buf[30] = v61;
            _os_log_impl(&dword_1906B8000, v58, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping check,connecting roads,%{public}d, current road %{private}lld,prior road %{private}lld", buf, 0x26u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v96 = *(void *)(a2 + 384);
            uint64_t v97 = *v37;
            uint64_t v98 = *v38;
            *(_DWORD *)double v107 = 134349825;
            *(void *)&v107[4] = v96;
            *(_WORD *)&v107[12] = 1026;
            *(_DWORD *)&v107[14] = v57;
            *(_WORD *)&v107[18] = 2049;
            *(void *)&v107[20] = v97;
            *(_WORD *)&v107[28] = 2049;
            *(void *)&v107[30] = v98;
            uint64_t v99 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v99);
            if (v99 != buf) {
              free(v99);
            }
          }
          if (v40) {
            sub_1906BFE48(v40);
          }
          if (v39) {
            sub_1906BFE48(v39);
          }
          if (v57) {
            goto LABEL_68;
          }
        }
      }
      double v62 = *(uint64_t **)(a3 + 120);
      if (v62)
      {
        uint64_t v63 = *(void *)(a2 + 864);
        if (v63)
        {
          char v64 = *(std::__shared_weak_count **)(a3 + 128);
          if (v64)
          {
            atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v63 = *(void *)(a2 + 864);
          }
          uint64_t v67 = v63 + 136;
          uint64_t v65 = *(float64x2_t **)(v63 + 136);
          uint64_t v66 = *(float64x2_t **)(v67 + 8);
          float64x2_t v105 = 0u;
          float64x2_t v106 = 0u;
          if (v66 != v65)
          {
            if (*(unsigned char *)(a2 + 880)) {
              float64x2_t v68 = *v65;
            }
            else {
              float64x2_t v68 = v66[-1];
            }
            float64x2_t v105 = v68;
          }
          BOOL v70 = (float64x2_t *)v62[17];
          double v69 = (float64x2_t *)v62[18];
          if (v69 != v70)
          {
            if (*(unsigned char *)(a3 + 140)) {
              float64x2_t v71 = v69[-1];
            }
            else {
              float64x2_t v71 = *v70;
            }
            float64x2_t v106 = v71;
          }
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          double v72 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v73 = *(void *)(a2 + 384);
            uint64_t v74 = *v62;
            uint64_t v75 = **(void **)(a2 + 864);
            uint64_t v76 = **(void **)(a2 + 256);
            *(_DWORD *)__n128 buf = 134349825;
            *(void *)&uint8_t buf[4] = v73;
            *(_WORD *)&unsigned char buf[12] = 2049;
            *(void *)&unsigned char buf[14] = v74;
            *(_WORD *)&unsigned char buf[22] = 2049;
            *(void *)&unsigned char buf[24] = v75;
            *(_WORD *)&unsigned char buf[32] = 2049;
            *(void *)&unsigned char buf[34] = v76;
            _os_log_impl(&dword_1906B8000, v72, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping check,prior road, %{private}lld, connected to the incoming road, %{private}lld, of the current solution road, %{private}lld", buf, 0x2Au);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            uint64_t v100 = *(void *)(a2 + 384);
            uint64_t v101 = *v62;
            uint64_t v102 = **(void **)(a2 + 864);
            uint64_t v103 = **(void **)(a2 + 256);
            *(_DWORD *)double v107 = 134349825;
            *(void *)&v107[4] = v100;
            *(_WORD *)&v107[12] = 2049;
            *(void *)&v107[14] = v101;
            *(_WORD *)&v107[22] = 2049;
            *(void *)&v107[24] = v102;
            *(_WORD *)&v107[32] = 2049;
            *(void *)&v107[34] = v103;
            double v104 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v104);
            if (v104 != buf) {
              free(v104);
            }
          }
          int32x2_t v77 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL), vabdq_f64(v105, v106)));
          unsigned __int8 v78 = vand_s8((int8x8_t)v77, (int8x8_t)vdup_lane_s32(v77, 1)).u8[0];
          if (v64) {
            sub_1906BFE48(v64);
          }
          if (v78)
          {
LABEL_68:
            sub_190770ADC((uint64_t *)(a1 + 1784));
            double v17 = (uint64_t *)(a1 + 1808);
            goto LABEL_39;
          }
        }
      }
      BOOL v79 = sub_1906DA618((double *)(a1 + 168), *(double *)(a3 + 528), *(double *)(a3 + 536), *(double *)(a2 + 664), *(double *)(a2 + 672), *(double *)(a2 + 448)) > 35.0|| *(_DWORD *)(a1 + 1776) > 15;
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v80 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v81 = *(void *)(a2 + 384);
        uint64_t v82 = *(void *)(a3 + 544);
        uint64_t v83 = *(void *)(a2 + 680);
        uint64_t v84 = *(void *)(a2 + 488);
        uint64_t v85 = *(void *)(a3 + 352);
        *(_DWORD *)__n128 buf = 134350081;
        *(void *)&uint8_t buf[4] = v81;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&unsigned char buf[14] = v82;
        *(_WORD *)&unsigned char buf[22] = 2050;
        *(void *)&unsigned char buf[24] = v83;
        *(_WORD *)&unsigned char buf[32] = 2049;
        *(void *)&unsigned char buf[34] = v84;
        __int16 v111 = 2049;
        uint64_t v112 = v85;
        _os_log_impl(&dword_1906B8000, v80, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,hopping between roads detected,priorfullSnapCourse,%{public}.1lf,currentFullSnapCourse,%{public}.1lf,priorId,%{private}llu,currentId,%{private}llu", buf, 0x34u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        uint64_t v90 = *(void *)(a2 + 384);
        uint64_t v91 = *(void *)(a3 + 544);
        uint64_t v92 = *(void *)(a2 + 680);
        uint64_t v93 = *(void *)(a2 + 488);
        uint64_t v94 = *(void *)(a3 + 352);
        *(_DWORD *)double v107 = 134350081;
        *(void *)&v107[4] = v90;
        *(_WORD *)&v107[12] = 2050;
        *(void *)&v107[14] = v91;
        *(_WORD *)&v107[22] = 2050;
        *(void *)&v107[24] = v92;
        *(_WORD *)&v107[32] = 2049;
        *(void *)&v107[34] = v93;
        __int16 v108 = 2049;
        uint64_t v109 = v94;
        uint64_t v95 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLParticleMM::CLPedestrianMapMatcherFilter::checkForSolutionHopping(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v95);
        if (v95 != buf) {
          free(v95);
        }
      }
      sub_190770ADC((uint64_t *)(a1 + 1784));
      sub_190770ADC((uint64_t *)(a1 + 1808));
      if (v79)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v86 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v87 = *(void *)(a2 + 384);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v87;
          _os_log_impl(&dword_1906B8000, v86, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,reset,solution hopping detected", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2)) {
          return 1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
LABEL_11:
        uint64_t v8 = *(void *)(a2 + 384);
        *(_DWORD *)double v107 = 134349056;
        *(void *)&v107[4] = v8;
        double v9 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
LABEL_161:
        if (v9 != buf) {
          free(v9);
        }
        return 1;
      }
    }
    else
    {
LABEL_38:
      sub_190770ADC((uint64_t *)(a1 + 1808));
      double v17 = (uint64_t *)(a1 + 1784);
LABEL_39:
      sub_190770ADC(v17);
    }
    return 0;
  }
  if (*(double *)(a2 + 608) > 70.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    BOOL v10 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a2 + 384);
      uint64_t v12 = *(void *)(a2 + 608);
      *(_DWORD *)__n128 buf = 134349568;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v12;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&unsigned char buf[24] = 0x4051800000000000;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding due to varFactor,%{public}.1lf,max,%{public}.1lf", buf, 0x20u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v13 = *(void *)(a2 + 384);
    uint64_t v14 = *(void *)(a2 + 608);
    *(_DWORD *)double v107 = 134349568;
    *(void *)&v107[4] = v13;
    *(_WORD *)&v107[12] = 2050;
    *(void *)&v107[14] = v14;
    *(_WORD *)&v107[22] = 2050;
    *(void *)&v107[24] = 0x4051800000000000;
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
    goto LABEL_161;
  }
  unsigned int v19 = *(_DWORD *)(a1 + 1752);
  if ((v19 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 1752) = v19 + 1;
    if (v19 >= 0x1E)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v20 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v21 = *(void *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349312;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&unsigned char buf[14] = 30;
        _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding as unable to match,max,%{public}d", buf, 0x12u);
      }
      if (!sub_1906CB57C(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      uint64_t v22 = *(void *)(a2 + 384);
      *(_DWORD *)double v107 = 134349312;
      *(void *)&v107[4] = v22;
      *(_WORD *)&v107[12] = 1026;
      *(_DWORD *)&v107[14] = 30;
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
      goto LABEL_161;
    }
  }
  if (!*(unsigned char *)(a3 + 746)) {
    return 0;
  }
  *(double *)(a1 + 1760) = *(double *)(a2 + 856) + *(double *)(a1 + 1760);
  double v23 = sub_1906DA618((double *)(a1 + 168), *(double *)(a3 + 392), *(double *)(a3 + 400), *(double *)(a2 + 528), *(double *)(a2 + 536), *(double *)(a2 + 448))+ *(double *)(a1 + 1768);
  *(double *)(a1 + 1768) = v23;
  double v24 = *(double *)(a1 + 1760);
  if (v24 <= 80.0) {
    return 0;
  }
  if (v23 < 0.001)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    char v25 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v26 = *(void *)(a2 + 384);
      uint64_t v27 = *(void *)(a1 + 1768);
      *(_DWORD *)__n128 buf = 134349312;
      *(void *)&uint8_t buf[4] = v26;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v27;
      _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,accumulated snap distance is ~0, %{public}.3lf", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v88 = *(void *)(a2 + 384);
    uint64_t v89 = *(void *)(a1 + 1768);
    *(_DWORD *)double v107 = 134349312;
    *(void *)&v107[4] = v88;
    *(_WORD *)&v107[12] = 2050;
    *(void *)&v107[14] = v89;
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v9);
    goto LABEL_161;
  }
  double v31 = v24 / v23;
  BOOL v18 = v24 / v23 > 5.0;
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
  }
  int v32 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v33 = *(void *)(a2 + 384);
    *(_DWORD *)__n128 buf = 134349312;
    *(void *)&uint8_t buf[4] = v33;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&unsigned char buf[14] = v31;
    _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,Reseeding due to stuck at dead-end while observations move away, ratioDist, %{public}.3lf", buf, 0x16u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v34 = *(void *)(a2 + 384);
    *(_DWORD *)double v107 = 134349312;
    *(void *)&v107[4] = v34;
    *(_WORD *)&v107[12] = 2050;
    *(double *)&v107[14] = v31;
    double v35 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::shallReset(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v35);
    if (v35 != buf) {
      free(v35);
    }
  }
  return v18;
}

void sub_19084C90C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1906BFE48(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19084C948(double *a1, uint64_t a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 48) == *(void *)(a2 + 40))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    }
    uint64_t v14 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      double v15 = *(double *)(a2 + 384);
      *(_DWORD *)__n128 buf = 134349056;
      double v58 = v15;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,roadWithAdustment,number of particles are 0", buf, 0xCu);
    }
    BOOL v6 = 0;
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v16 = *(double *)(a2 + 384);
      int v49 = 134349056;
      double v50 = v16;
      goto LABEL_37;
    }
  }
  else
  {
    *(void *)(a2 + 696) = 0;
    *(void *)(a2 + 688) = 0;
    if (*(unsigned char *)(a2 + 640))
    {
      if (*(void *)(a2 + 256))
      {
        uint64_t v47 = 0;
        double v48 = 0.0;
        double v4 = a1 + 21;
        sub_190839A78(a1 + 21, &v48, (double *)&v47, *(double *)(a2 + 664), *(double *)(a2 + 672), *(double *)(a2 + 448), *(double *)(a2 + 680), *(double *)(a2 + 432), *(double *)(a2 + 440));
        uint64_t v5 = *(void *)(a2 + 256);
        BOOL v6 = v5 != 0;
        if (v5)
        {
          uint64_t v7 = *(int *)(v5 + 20);
          double v8 = 0.5;
          double v9 = 1.0;
          if (v7 != 9)
          {
            int v10 = *(_DWORD *)(v5 + 72);
            if (v10 != 6 && v10 != 255)
            {
              double v11 = *(double *)(v5 + 96);
              if (v11 < 0.000001)
              {
                double v11 = 1.0;
                if ((v7 & 0xFFFFFFFE) != 8)
                {
                  int v12 = *(unsigned __int8 *)(v5 + 16);
                  if (v7 > 7)
                  {
                    double v11 = dbl_190882500[v12 == 0];
                  }
                  else
                  {
                    if (v12) {
                      uint64_t v13 = (double *)&unk_190886138;
                    }
                    else {
                      uint64_t v13 = (double *)&unk_190886178;
                    }
                    double v11 = v13[v7];
                  }
                }
              }
              double v9 = v11 + 1.0;
              double v8 = v11 * 0.5 + 1.0;
            }
          }
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          double v23 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            double v24 = *(double *)(a2 + 384);
            uint64_t v25 = *(void *)(a2 + 256);
            int v26 = *(_DWORD *)(v25 + 20);
            LODWORD(v25) = *(unsigned __int8 *)(v25 + 16);
            *(_DWORD *)__n128 buf = 134350080;
            double v58 = v24;
            __int16 v59 = 1026;
            *(_DWORD *)uint64_t v60 = v26;
            *(_WORD *)&v60[4] = 1026;
            *(_DWORD *)&void v60[6] = v25;
            __int16 v61 = 2050;
            double v62 = v9;
            __int16 v63 = 2050;
            double v64 = v48;
            _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,frc,%{public}d,oneway,%{public}d,roadWidth,%{public}.1lf,acrossTrack,%{public}.3lf", buf, 0x2Cu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            double v39 = *(double *)(a2 + 384);
            uint64_t v40 = *(void *)(a2 + 256);
            int v41 = *(_DWORD *)(v40 + 20);
            LODWORD(v40) = *(unsigned __int8 *)(v40 + 16);
            int v49 = 134350080;
            double v50 = v39;
            __int16 v51 = 1026;
            *(_DWORD *)float64x2_t v52 = v41;
            *(_WORD *)&v52[4] = 1026;
            *(_DWORD *)&v52[6] = v40;
            __int16 v53 = 2050;
            double v54 = v9;
            __int16 v55 = 2050;
            double v56 = v48;
            uint64_t v42 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "CoreLocation: %s\n", v42);
            if (v42 != (char *)buf) {
              free(v42);
            }
          }
          if (v9 >= 0.000001)
          {
            uint64_t v27 = *(void *)(a2 + 528);
            uint64_t v45 = *(void *)(a2 + 536);
            uint64_t v46 = v27;
            double v28 = a1[234];
            if (v28 < 0.0 || vabdd_f64(*(double *)(a2 + 400), v28) > 6.0)
            {
              uint64_t v29 = *(void *)(a2 + 256);
              if (!v29 || (*(_DWORD *)(v29 + 20) & 0xFFFFFFFE) != 8)
              {
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                }
                int v30 = off_1E929F6C8;
                if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                {
                  double v31 = v9 + a1[2];
                  *(_DWORD *)__n128 buf = 134349312;
                  double v58 = v9;
                  __int16 v59 = 2050;
                  *(double *)uint64_t v60 = v31;
                  _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_DEBUG, "CLMMPED,Road width inflated from,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  double v43 = v9 + a1[2];
                  int v49 = 134349312;
                  double v50 = v9;
                  __int16 v51 = 2050;
                  *(double *)float64x2_t v52 = v43;
                  float64x2_t v44 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "CoreLocation: %s\n", v44);
                  if (v44 != (char *)buf) {
                    free(v44);
                  }
                }
                double v8 = v8 + a1[2] * 0.5;
              }
            }
            double v32 = fabs(v48);
            if (v32 >= v8)
            {
              if (v48 >= 0.0) {
                double v35 = -(v32 - v8);
              }
              else {
                double v35 = v32 - v8;
              }
              sub_1908397AC(v4, (double *)&v46, (double *)&v45, *(double *)(a2 + 432), *(double *)(a2 + 440), *(double *)(a2 + 448), *(double *)(a2 + 680), v35);
              *(_DWORD *)(a2 + 656) = 2;
              uint64_t v34 = v45;
              uint64_t v33 = v46;
              *(void *)(a2 + 688) = v46;
              *(void *)(a2 + 696) = v34;
            }
            else
            {
              uint64_t v33 = *(void *)(a2 + 432);
              uint64_t v34 = *(void *)(a2 + 440);
            }
            *(void *)(a2 + 528) = v33;
            *(void *)(a2 + 536) = v34;
          }
        }
        return v6;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      unsigned int v19 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        double v20 = *(double *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349056;
        double v58 = v20;
        _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,roadWithAdustment,road is nullptr", buf, 0xCu);
      }
      BOOL v6 = 0;
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v21 = *(double *)(a2 + 384);
        int v49 = 134349056;
        double v50 = v21;
LABEL_37:
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
        return 0;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v17 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        double v18 = *(double *)(a2 + 384);
        *(_DWORD *)__n128 buf = 134349056;
        double v58 = v18;
        _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,roadWithAdustment,snap invalid or frc = 9", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
        }
        double v37 = *(double *)(a2 + 384);
        int v49 = 134349056;
        double v50 = v37;
        int v38 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::adjustSolutionforRoadWidth(MMFilterData &)", "CoreLocation: %s\n", v38);
        if (v38 != (char *)buf) {
          free(v38);
        }
      }
      return 1;
    }
  }
  return v6;
}

uint64_t sub_19084D258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v172 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 1968) = 0xBFF0000000000000;
  *(void *)(a1 + 2056) = 0xBFF0000000000000;
  *(void *)(a1 + 2064) = 0xBFF0000000000000;
  *(void *)uint64_t v94 = 0xBFF0000000000000;
  uint64_t v4 = a1 + 1968;
  *(_DWORD *)(a1 + 2048) = 0;
  *(_OWORD *)(a1 + 1976) = 0u;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(void *)(a1 + 2037) = 0;
  *(_DWORD *)uint64_t v95 = 0;
  memset(&v94[8], 0, 69);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v95[8] = _Q0;
  if (*(double *)(a3 + 248) > 0.0)
  {
    uint64_t v13 = (void *)(a2 + 256);
    uint64_t v14 = *(void *)(a2 + 384);
    uint64_t v93 = v14;
    double v15 = *(double *)(a2 + 400);
    double v16 = -1.0;
    if (v15 >= 0.0)
    {
      double v17 = *(double *)(a3 + 264);
      _NF = v17 < 0.0;
      double v16 = vabdd_f64(v15, v17);
      if (_NF) {
        double v16 = -1.0;
      }
    }
    if (*v13)
    {
      if (v16 > 0.0)
      {
        if (v16 > 1.5)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          double v18 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,timeDiff too large,DOT", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_77;
          }
LABEL_170:
          dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
LABEL_77:
          int v96 = 134349056;
          uint64_t v97 = v14;
          double v31 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v31);
          goto LABEL_110;
        }
        if (!*(unsigned char *)(a2 + 640) || *(unsigned char *)(a2 + 641))
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          double v24 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, currentCrumb invalid", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_77;
          }
          goto LABEL_170;
        }
        if (!*(unsigned char *)(a3 + 504) || *(unsigned char *)(a3 + 505))
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v25 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, priorCrumb invalid", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_77;
          }
          goto LABEL_170;
        }
        double v22 = *(double *)(a1 + 2272);
        if (v22 > 0.0 && vabdd_f64(v15, v22 + -1.0) < 0.9)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          double v23 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT,feedback interval check", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_77;
          }
          goto LABEL_170;
        }
        if (*(unsigned char *)(a1 + 1064) && *(double *)(a1 + 1072) < 36.0)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          int v26 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            int v27 = *(unsigned __int8 *)(a1 + 1064);
            uint64_t v28 = *(void *)(a1 + 1072);
            *(_DWORD *)__n128 buf = 134349568;
            uint64_t v135 = v14;
            __int16 v136 = 1026;
            *(_DWORD *)uint64_t v137 = v27;
            *(_WORD *)&v137[4] = 2050;
            *(void *)&v137[6] = v28;
            _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, too close to prior intersection,transitiondetected,%{public}d,dist,%{public}.2lf", buf, 0x1Cu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          int v29 = *(unsigned __int8 *)(a1 + 1064);
          uint64_t v30 = *(void *)(a1 + 1072);
          int v96 = 134349568;
          uint64_t v97 = v14;
          __int16 v98 = 1026;
          *(_DWORD *)uint64_t v99 = v29;
          *(_WORD *)&v99[4] = 2050;
          *(void *)&v99[6] = v30;
          double v31 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v31);
          goto LABEL_110;
        }
        double v32 = fmod(*(double *)(a2 + 544) - *(double *)(a2 + 680), 360.0);
        if (v32 < 0.0) {
          double v32 = v32 + 360.0;
        }
        if (v32 > 180.0) {
          double v32 = v32 + -360.0;
        }
        if (fabs(v32) > 1.0)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v33 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl(&dword_1906B8000, v33, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, course not aligned to full snap", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1) {
            goto LABEL_77;
          }
          goto LABEL_170;
        }
        double v92 = -1.0;
        if ((sub_1908431BC(&v93, (double *)(a2 + 376), (double *)(a1 + 168), &v92, *(double *)(a3 + 528), *(double *)(a3 + 536), *(double *)(a3 + 544)) & 1) == 0)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          int v41 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl(&dword_1906B8000, v41, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, priorCrumb location or course diverged", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          int v96 = 134349056;
          uint64_t v97 = v14;
          double v31 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v31);
          goto LABEL_110;
        }
        double v91 = 70.0;
        sub_1907B4FC4((uint64_t)v90, (uint64_t)v13);
        char v34 = sub_1908437BC((uint64_t *)a1, (uint64_t)v90, a2 + 376, (unint64_t *)&v91);
        sub_1907B515C(v90);
        if (v34) {
          return 0;
        }
        sub_1907B4FC4((uint64_t)&v87, (uint64_t)v13);
        sub_1906D5C70(v85, "lookBehindParticle");
        sub_1906D5C70(__p, "currentCrumb");
        char v35 = sub_1908425F0(a1, (uint64_t *)v85, (uint64_t *)__p, (uint64_t)&v87, (double *)(a2 + 376), &v92, -15.0);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
        if (v86 < 0) {
          operator delete(v85[0]);
        }
        if (v35)
        {
          sub_1906D5C70(v81, "Start");
          BOOL v36 = sub_190730588(a2 + 376, (double *)(a1 + 168), (uint64_t *)v81, (double *)&v94[8], (double *)&v94[16], v88, v89);
          if (v82 < 0) {
            operator delete(v81[0]);
          }
          if (v36)
          {
            double v37 = sub_1906DA618((double *)(a1 + 168), *(double *)(a2 + 288), *(double *)(a2 + 296), v88, v89, *(double *)(a2 + 448));
            sub_1907B4FC4((uint64_t)v78, (uint64_t)v13);
            double v38 = *(double *)(a2 + 472);
            if (v38 >= 0.0)
            {
              double v40 = fabs(v38);
            }
            else
            {
              uint64_t v39 = *(void *)(a1 + 208);
              if (v39)
              {
                if ((*(unsigned int (**)(uint64_t))(*(void *)v39 + 104))(v39)) {
                  double v40 = 8.32;
                }
                else {
                  double v40 = 3.0;
                }
              }
              else
              {
                double v40 = 3.0;
              }
            }
            double v43 = v91;
            double v44 = v91 - v40;
            if (v91 - v40 >= 18.0)
            {
              sub_1906D5C70(v76, "predictedParticle");
              sub_1906D5C70(v74, "currentCrumb");
              char v47 = sub_1908425F0(a1, (uint64_t *)v76, (uint64_t *)v74, (uint64_t)v78, (double *)(a2 + 376), &v92, v40);
              if (v75 < 0) {
                operator delete(v74[0]);
              }
              if (v77 < 0) {
                operator delete(v76[0]);
              }
              if ((v47 & 1) == 0) {
                goto LABEL_157;
              }
              *(_OWORD *)&v94[24] = v80;
              unint64_t v73 = 0xBFF0000000000000;
              sub_19083ABB0(v78[0], (double *)&v94[64], (double *)&v73);
              double v48 = fmax(*(double *)&v94[64], 15.0);
              if (v43 > v48 + 1.0)
              {
                sub_1907B4FC4((uint64_t)v72, (uint64_t)v13);
                if (v43 - v48 >= v40 + 15.0) {
                  double v49 = v40 + 15.0;
                }
                else {
                  double v49 = v43 - v48;
                }
                sub_1906D5C70(v70, "lookAheadParticle");
                sub_1906D5C70(v68, "currentCrumb");
                char v50 = sub_1908425F0(a1, (uint64_t *)v70, (uint64_t *)v68, (uint64_t)v72, (double *)(a2 + 376), &v92, v49);
                if (v69 < 0) {
                  operator delete(v68[0]);
                }
                if (v71 < 0) {
                  operator delete(v70[0]);
                }
                if ((v50 & 1) == 0) {
                  goto LABEL_160;
                }
                double v51 = fmin(v37, 15.0);
                double v52 = v92;
                if (v92 < 3.0) {
                  double v52 = 3.0;
                }
                *(double *)&v94[40] = v51 + v49;
                *(double *)&v94[56] = v52;
                sub_1906D5C70(v66, "Predicted");
                BOOL v53 = sub_190730588(a2 + 376, (double *)(a1 + 168), (uint64_t *)v66, (double *)&v94[24], (double *)&v94[32], *(double *)&v94[24], *(double *)&v94[32]);
                if (v67 < 0) {
                  operator delete(v66[0]);
                }
                if (v53)
                {
                  double v54 = *(double *)(a2 + 384) + 1.0;
                  *(double *)&v94[48] = v79;
                  *(double *)uint64_t v94 = v54;
                  __asm { FMOV            V1.2D, #1.0 }
                  *(float64x2_t *)&v95[8] = vaddq_f64(*(float64x2_t *)(a2 + 392), _Q1);
                  v94[73] = 0;
                  v94[74] = *(unsigned char *)(v78[0] + 17);
                  v94[72] = *(unsigned char *)(v78[0] + 18);
                  v94[75] = *(unsigned char *)(v78[0] + 19);
                  v94[76] = *(_DWORD *)(a2 + 496) == 0;
                  *(_DWORD *)uint64_t v95 = 2;
                  uint64_t v56 = *(void *)(a1 + 208);
                  if (v56 && (*(unsigned int (**)(uint64_t))(*(void *)v56 + 104))(v56)) {
                    *(_DWORD *)uint64_t v95 = 3;
                  }
                  long long v57 = *(_OWORD *)v95;
                  *(_OWORD *)(v4 + 64) = *(_OWORD *)&v94[64];
                  *(_OWORD *)(v4 + 80) = v57;
                  *(void *)(v4 + 96) = *(void *)&v95[16];
                  long long v58 = *(_OWORD *)&v94[16];
                  *(_OWORD *)uint64_t v4 = *(_OWORD *)v94;
                  *(_OWORD *)(v4 + 16) = v58;
                  long long v59 = *(_OWORD *)&v94[48];
                  *(_OWORD *)(v4 + 32) = *(_OWORD *)&v94[32];
                  *(_OWORD *)(v4 + 48) = v59;
                  *(void *)(a1 + 2272) = *(void *)&v95[16];
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                  }
                  uint64_t v60 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                  {
                    uint64_t v61 = *(void *)(a2 + 472);
                    *(_DWORD *)__n128 buf = 134353921;
                    uint64_t v135 = v14;
                    __int16 v136 = 2050;
                    *(void *)uint64_t v137 = *(void *)v94;
                    *(_WORD *)&v137[8] = 2049;
                    *(void *)&v137[10] = *(void *)&v94[24];
                    __int16 v138 = 2049;
                    uint64_t v139 = *(void *)&v94[32];
                    __int16 v140 = 2050;
                    uint64_t v141 = *(void *)&v94[48];
                    __int16 v142 = 2050;
                    uint64_t v143 = *(void *)&v94[56];
                    __int16 v144 = 2050;
                    uint64_t v145 = *(void *)&v94[64];
                    __int16 v146 = 2049;
                    uint64_t v147 = *(void *)&v94[8];
                    __int16 v148 = 2049;
                    uint64_t v149 = *(void *)&v94[16];
                    __int16 v150 = 2050;
                    uint64_t v151 = *(void *)&v94[40];
                    __int16 v152 = 2050;
                    uint64_t v153 = v61;
                    __int16 v154 = 1026;
                    int v155 = v94[73];
                    __int16 v156 = 1026;
                    int v157 = v94[74];
                    __int16 v158 = 1026;
                    int v159 = v94[72];
                    __int16 v160 = 1026;
                    int v161 = v94[75];
                    __int16 v162 = 2050;
                    double v163 = v48;
                    __int16 v164 = 1026;
                    int v165 = v94[76];
                    __int16 v166 = 2050;
                    uint64_t v167 = *(void *)&v95[16];
                    __int16 v168 = 2050;
                    double v169 = v51;
                    __int16 v170 = 1026;
                    int v171 = *(_DWORD *)v95;
                    _os_log_impl(&dword_1906B8000, v60, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf,DOT,%{public}.1lf,lat,%{private}.7lf,lon,%{private}.7lf,course,%{public}.1lf,courseUnc,%{public}.1lf,rw,%{public}.1lf,startLat,%{private}.7lf,startLon,%{private}.7lf,length,%{public}.1lf,speed,%{public}.3lf,isOneWay,%{public}d,isRailWay,%{public}d,isTunnel,%{public}d,isBridge,%{public}d,distFromIntersection,%{public}.1lf,isFreeway,%{public}d,machContTime,%{public}.3lf,lookBehindDist,%{public}.2lf,type,%{public}d", buf, 0xB2u);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
                    }
                    uint64_t v64 = *(void *)(a2 + 472);
                    int v96 = 134353921;
                    uint64_t v97 = v93;
                    __int16 v98 = 2050;
                    *(void *)uint64_t v99 = *(void *)v94;
                    *(_WORD *)&v99[8] = 2049;
                    *(void *)&v99[10] = *(void *)&v94[24];
                    __int16 v100 = 2049;
                    uint64_t v101 = *(void *)&v94[32];
                    __int16 v102 = 2050;
                    uint64_t v103 = *(void *)&v94[48];
                    __int16 v104 = 2050;
                    uint64_t v105 = *(void *)&v94[56];
                    __int16 v106 = 2050;
                    uint64_t v107 = *(void *)&v94[64];
                    __int16 v108 = 2049;
                    uint64_t v109 = *(void *)&v94[8];
                    __int16 v110 = 2049;
                    uint64_t v111 = *(void *)&v94[16];
                    __int16 v112 = 2050;
                    uint64_t v113 = *(void *)&v94[40];
                    __int16 v114 = 2050;
                    uint64_t v115 = v64;
                    __int16 v116 = 1026;
                    int v117 = v94[73];
                    __int16 v118 = 1026;
                    int v119 = v94[74];
                    __int16 v120 = 1026;
                    int v121 = v94[72];
                    __int16 v122 = 1026;
                    int v123 = v94[75];
                    __int16 v124 = 2050;
                    double v125 = v48;
                    __int16 v126 = 1026;
                    int v127 = v94[76];
                    __int16 v128 = 2050;
                    uint64_t v129 = *(void *)&v95[16];
                    __int16 v130 = 2050;
                    double v131 = v51;
                    __int16 v132 = 1026;
                    int v133 = *(_DWORD *)v95;
                    uint64_t v65 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v65);
                    if (v65 != (char *)buf) {
                      free(v65);
                    }
                  }
                  uint64_t v3 = 1;
                }
                else
                {
LABEL_160:
                  uint64_t v3 = 0;
                }
                sub_1907B515C(v72);
                goto LABEL_158;
              }
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              double v62 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__n128 buf = 134349056;
                uint64_t v135 = v14;
                _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, current particle within the stopDistanceFromIntersection", buf, 0xCu);
              }
              if (!sub_1906CB57C(115, 2))
              {
LABEL_157:
                uint64_t v3 = 0;
LABEL_158:
                sub_1907B515C(v78);
                goto LABEL_159;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              int v96 = 134349056;
              uint64_t v97 = v14;
              uint64_t v46 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v46);
            }
            else
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              uint64_t v45 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__n128 buf = 134349312;
                uint64_t v135 = v14;
                __int16 v136 = 2050;
                *(double *)uint64_t v137 = v44;
                _os_log_impl(&dword_1906B8000, v45, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, predicted point is too close to intersection,dist,%{public}.2lf", buf, 0x16u);
              }
              if (!sub_1906CB57C(115, 2)) {
                goto LABEL_157;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
              }
              int v96 = 134349312;
              uint64_t v97 = v14;
              __int16 v98 = 2050;
              *(double *)uint64_t v99 = v44;
              uint64_t v46 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v46);
            }
            if (v46 != (char *)buf) {
              free(v46);
            }
            goto LABEL_157;
          }
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
          }
          uint64_t v42 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__n128 buf = 134349056;
            uint64_t v135 = v14;
            _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_DEBUG, "CLMMPED,%{public}.1lf, no DOT, computeSnapCoordinatesFromRawGPSCoordinates lookBehind returned false", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
            }
            int v96 = 134349056;
            uint64_t v97 = v14;
            __int16 v63 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v63);
            if (v63 != (char *)buf) {
              free(v63);
            }
          }
        }
        uint64_t v3 = 0;
LABEL_159:
        sub_1907B515C(&v87);
        return v3;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      double v20 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134349056;
        uint64_t v135 = v14;
        _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid timeDiff,DOT", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_109:
        int v96 = 134349056;
        uint64_t v97 = v14;
        double v31 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLParticleMM::CLPedestrianMapMatcherFilter::generateDirectionOfTravelAssistance(const MMFilterData &, const MMSnapData &)", "CoreLocation: %s\n", v31);
LABEL_110:
        if (v31 != (char *)buf) {
          free(v31);
        }
        return 0;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
      }
      unsigned int v19 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134349056;
        uint64_t v135 = v14;
        _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLMMPED,%{public}.1lf,Unexpected,invalid bestParticle road,DOT", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_109;
      }
    }
    dispatch_once(&qword_1E929F6C0, &unk_1EE006040);
    goto LABEL_109;
  }
  return v3;
}

void sub_19084EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1907B515C(&a21);
  sub_1907B515C(&a42);
  sub_1907B515C(&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_19084EC4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(void *)(a1 + 2256) = v2;
    operator delete(v2);
  }

  return sub_1907F4568(a1);
}

void sub_19084EC90(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2248);
  if (v2)
  {
    *(void *)(a1 + 2256) = v2;
    operator delete(v2);
  }
  sub_1907F4568(a1);

  JUMPOUT(0x192FCEAD0);
}

os_log_t sub_19084ECE8()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_19084ED18(void *a1)
{
  if (a1)
  {
    sub_19084ED18(*a1);
    sub_19084ED18(a1[1]);
    sub_19084ED6C((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_19084ED6C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1120);
  if (v2) {
    sub_1906BFE48(v2);
  }
  uint64_t v5 = (void **)(a1 + 1088);
  sub_1907D5AB4(&v5);
  if (*(char *)(a1 + 775) < 0) {
    operator delete(*(void **)(a1 + 752));
  }
  if (*(char *)(a1 + 343) < 0) {
    operator delete(*(void **)(a1 + 320));
  }
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    sub_1906BFE48(v4);
  }
}

void *sub_19084EDEC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    sub_19084EE74(result, a4);
    os_log_t result = (void *)sub_19084EECC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_19084EE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1907D5AB4(&a9);
  _Unwind_Resume(a1);
}

char *sub_19084EE74(void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_190718FD4();
  }
  os_log_t result = (char *)sub_1907D613C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t sub_19084EECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = *(void *)v6;
      uint64_t v7 = *(void *)(v6 + 8);
      *(void *)(v4 + 8) = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      long long v8 = *(_OWORD *)(v6 + 16);
      long long v9 = *(_OWORD *)(v6 + 32);
      *(void *)(v4 + 48) = *(void *)(v6 + 48);
      *(_OWORD *)(v4 + 16) = v8;
      *(_OWORD *)(v4 + 32) = v9;
      long long v10 = *(_OWORD *)(v6 + 56);
      long long v11 = *(_OWORD *)(v6 + 65);
      *(void *)(v4 + 88) = 0;
      *(_OWORD *)(v4 + 65) = v11;
      *(_OWORD *)(v4 + 56) = v10;
      *(void *)(v4 + 96) = 0;
      *(void *)(v4 + 104) = 0;
      sub_1907B5854((void *)(v4 + 88), *(const void **)(v6 + 88), *(void *)(v6 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v6 + 96) - *(void *)(v6 + 88)) >> 3));
      uint64_t v4 = v13 + 112;
      v13 += 112;
      v6 += 112;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_19084EFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v11 = *(std::__shared_weak_count **)(v9 + 8);
  if (v11) {
    sub_1906BFE48(v11);
  }
  sub_19084EFD8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_19084EFD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void **)(a1 + 8);
    uint64_t v2 = *(void ***)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = (void *)*v3;
    if (*v2 != (void *)*v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 14;
        sub_1907D5B4C(v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

char *sub_19084F03C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      sub_190718FD4();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    os_log_t result = sub_1907D63E4(v7, v11);
    uint64_t v13 = (char *)v7[1];
    int v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    os_log_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    os_log_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v12 = &v9[v17];
  return result;
}

__n128 sub_19084F148(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_19084F19C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 872);
  if (v2) {
    sub_1906BFE48(v2);
  }
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  uint64_t v3 = *(void **)(a1 + 344);
  if (v3)
  {
    *(void *)(a1 + 352) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 264);
  if (v4) {
    sub_1906BFE48(v4);
  }
  uint64_t v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(void *)(a1 + 232) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 144);
  if (v6) {
    sub_1906BFE48(v6);
  }
  sub_19084ED18(*(void **)(a1 + 120));
  uint64_t v7 = *(void **)(a1 + 64);
  if (v7)
  {
    *(void *)(a1 + 72) = v7;
    operator delete(v7);
  }
  uint64_t v9 = (void **)(a1 + 40);
  sub_1907D5AB4(&v9);
  return a1;
}

void *sub_19084F244(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *__n128 result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t sub_19084F298(uint64_t a1)
{
  sub_19084ED18(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_19084ED18(v2);
  }
  return a1;
}

void sub_19084F2E8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_19084ED6C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_19084F340(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 14;
        sub_1907D5B4C((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_19084F3B0(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *a2;
    unint64_t v4 = a2[1];
    __n128 result = 1;
    while (1)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v3 == v5) {
        break;
      }
      if (v3 >= v5)
      {
        if (v5 >= v3) {
          return result;
        }
LABEL_21:
        v2 += 8;
      }
LABEL_22:
      uint64_t v2 = *(void *)v2;
      if (!v2) {
        return 0;
      }
    }
    if (*((unsigned char *)a2 + 16) && *(unsigned char *)(v2 + 48))
    {
      if (v4 < *(void *)(v2 + 40)) {
        goto LABEL_22;
      }
    }
    else
    {
      if (*(unsigned char *)(v2 + 48)) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = *((unsigned char *)a2 + 16) != 0;
      }
      if (v6) {
        goto LABEL_22;
      }
    }
    if (*(unsigned char *)(v2 + 48) && *((unsigned char *)a2 + 16))
    {
      if (*(void *)(v2 + 40) >= v4) {
        return result;
      }
    }
    else if (!*(unsigned char *)(v2 + 48) || *((unsigned char *)a2 + 16))
    {
      return result;
    }
    goto LABEL_21;
  }
  return result;
}

_OWORD *sub_19084F444(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = (uint64_t)a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = (uint64_t)(a1 + 1);
  if (!v5) {
    goto LABEL_25;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  do
  {
    while (1)
    {
      uint64_t v8 = v5;
      uint64_t v11 = *(void *)(v5 + 32);
      if (v9 != v11)
      {
        if (v9 >= v11)
        {
          if (v11 >= v9) {
            return (_OWORD *)v8;
          }
          goto LABEL_23;
        }
        goto LABEL_15;
      }
      if (!*((unsigned char *)a2 + 16) || !*(unsigned char *)(v8 + 48)) {
        break;
      }
      if (v10 >= *(void *)(v8 + 40)) {
        goto LABEL_17;
      }
LABEL_15:
      uint64_t v5 = *(void *)v8;
      uint64_t v7 = (uint64_t **)v8;
      if (!*(void *)v8) {
        goto LABEL_25;
      }
    }
    if (*(unsigned char *)(v8 + 48)) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = *((unsigned char *)a2 + 16) != 0;
    }
    if (v12) {
      goto LABEL_15;
    }
LABEL_17:
    if (*(unsigned char *)(v8 + 48) && *((unsigned char *)a2 + 16))
    {
      if (*(void *)(v8 + 40) >= v10) {
        return (_OWORD *)v8;
      }
    }
    else if (!*(unsigned char *)(v8 + 48) || *((unsigned char *)a2 + 16))
    {
      return (_OWORD *)v8;
    }
LABEL_23:
    uint64_t v5 = *(void *)(v8 + 8);
  }
  while (v5);
  uint64_t v7 = (uint64_t **)(v8 + 8);
LABEL_25:
  uint64_t v13 = operator new(0x4B0uLL);
  v20[1] = v6;
  v13[2] = *(_OWORD *)a3;
  *((void *)v13 + 6) = *(void *)(a3 + 16);
  bzero(v13 + 5, 0x460uLL);
  *((void *)v13 + 7) = 0xBFF0000000000000;
  v13[4] = 0u;
  *((_DWORD *)v13 + 20) = 0;
  *((unsigned char *)v13 + 84) = 1;
  v13[6] = 0u;
  v13[7] = 0u;
  v13[8] = 0u;
  *((unsigned char *)v13 + 144) = 0;
  *(_OWORD *)((char *)v13 + 152) = 0u;
  *(_OWORD *)((char *)v13 + 168) = 0u;
  *(_OWORD *)((char *)v13 + 184) = 0u;
  *((unsigned char *)v13 + 200) = 1;
  *((void *)v13 + 27) = 0;
  v13[14] = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  v13[15] = _Q1;
  v13[16] = 0u;
  *((void *)v13 + 34) = 0xBFF0000000000000;
  *((_WORD *)v13 + 244) = 0;
  *(_OWORD *)((char *)v13 + 456) = 0u;
  *(_OWORD *)((char *)v13 + 472) = 0u;
  v13[32] = 0u;
  v13[33] = 0u;
  v13[34] = 0u;
  v13[35] = 0u;
  *(_OWORD *)((char *)v13 + 571) = 0u;
  v13[37] = 0u;
  v13[38] = 0u;
  v13[39] = 0u;
  *(_OWORD *)((char *)v13 + 280) = 0u;
  *(_OWORD *)((char *)v13 + 296) = 0u;
  *(_OWORD *)((char *)v13 + 312) = 0u;
  *(_OWORD *)((char *)v13 + 328) = 0u;
  *(_OWORD *)((char *)v13 + 344) = 0u;
  *(_OWORD *)((char *)v13 + 360) = 0u;
  *(_OWORD *)((char *)v13 + 376) = 0u;
  *(_OWORD *)((char *)v13 + 392) = 0u;
  *(_OWORD *)((char *)v13 + 408) = 0u;
  *(_OWORD *)((char *)v13 + 424) = 0u;
  *(_OWORD *)((char *)v13 + 438) = 0u;
  *((void *)v13 + 81) = 0xBFF0000000000000;
  v13[41] = 0u;
  v13[42] = _Q1;
  v13[43] = 0u;
  *((void *)v13 + 88) = 0xBFF0000000000000;
  *((_WORD *)v13 + 460) = 0;
  *(_OWORD *)((char *)v13 + 888) = 0u;
  *(_OWORD *)((char *)v13 + 904) = 0u;
  *(_OWORD *)((char *)v13 + 1003) = 0u;
  v13[61] = 0u;
  v13[62] = 0u;
  v13[59] = 0u;
  v13[60] = 0u;
  v13[66] = 0u;
  v13[65] = 0u;
  v13[64] = 0u;
  *(_OWORD *)((char *)v13 + 712) = 0u;
  *(_OWORD *)((char *)v13 + 728) = 0u;
  *(_OWORD *)((char *)v13 + 744) = 0u;
  *(_OWORD *)((char *)v13 + 760) = 0u;
  *(_OWORD *)((char *)v13 + 776) = 0u;
  *(_OWORD *)((char *)v13 + 792) = 0u;
  *(_OWORD *)((char *)v13 + 808) = 0u;
  *(_OWORD *)((char *)v13 + 824) = 0u;
  *(_OWORD *)((char *)v13 + 840) = 0u;
  *(_OWORD *)((char *)v13 + 856) = 0u;
  *(_OWORD *)((char *)v13 + 870) = 0u;
  *((void *)v13 + 135) = 0xBFF0000000000000;
  *((void *)v13 + 136) = 0x3FF0000000000000;
  v13[73] = 0u;
  *((_DWORD *)v13 + 290) = 0;
  *(_OWORD *)((char *)v13 + 1144) = 0u;
  *(_OWORD *)((char *)v13 + 1128) = 0u;
  *(_OWORD *)((char *)v13 + 1112) = 0u;
  *(_OWORD *)((char *)v13 + 1096) = 0u;
  *((unsigned char *)v13 + 1184) = 1;
  *((_DWORD *)v13 + 298) = -1;
  char v21 = 1;
  sub_19074BC4C(a1, v8, v7, (uint64_t *)v13);
  v20[0] = 0;
  sub_19084F2E8((uint64_t)v20);
  return v13;
}

void sub_19084F698(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4) < a4)
  {
    sub_19084F340(a1);
    if (a4 > 0x249249249249249) {
      sub_190718FD4();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
      unint64_t v11 = 0x249249249249249;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_19084EE74(a1, v11);
    uint64_t v12 = sub_19084EECC(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a1[1] - v9) >> 4) < a4)
  {
    uint64_t v13 = &a2[2 * ((a1[1] - v9) >> 4)];
    sub_19084F82C(a2, v13, v9);
    uint64_t v12 = sub_19084EECC(v8, (uint64_t)v13, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  uint64_t v14 = sub_19084F82C(a2, a3, v9);
  for (uint64_t i = (void *)a1[1]; i != (void *)v14; sub_1907D5B4C(v8, i))
    i -= 14;
  a1[1] = v14;
}

void sub_19084F81C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19084F824(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19084F82C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 12;
    do
    {
      uint64_t v7 = *(v5 - 12);
      uint64_t v6 = *(v5 - 11);
      uint64_t v8 = v5 - 12;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(std::__shared_weak_count **)(a3 + 8);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = v6;
      if (v9) {
        sub_1906BFE48(v9);
      }
      long long v10 = *((_OWORD *)v5 - 5);
      long long v11 = *((_OWORD *)v5 - 4);
      *(void *)(a3 + 48) = *(v5 - 6);
      *(_OWORD *)(a3 + 16) = v10;
      *(_OWORD *)(a3 + 32) = v11;
      long long v12 = *(_OWORD *)(v5 - 5);
      *(_OWORD *)(a3 + 65) = *(_OWORD *)((char *)v5 - 31);
      *(_OWORD *)(a3 + 56) = v12;
      if ((uint64_t *)a3 != v8) {
        sub_1907B5974((char *)(a3 + 88), (char *)*(v5 - 1), *v5, 0x8E38E38E38E38E39 * ((*v5 - *(v5 - 1)) >> 3));
      }
      a3 += 112;
      v5 += 14;
    }
    while (v8 + 14 != a2);
  }
  return a3;
}

uint64_t sub_19084F8FC(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v7 = *(std::__shared_weak_count **)(a3 + 8);
      *(_OWORD *)a3 = v6;
      if (v7) {
        sub_1906BFE48(v7);
      }
      long long v8 = v5[1];
      long long v9 = v5[2];
      *(void *)(a3 + 48) = *((void *)v5 + 6);
      *(_OWORD *)(a3 + 16) = v8;
      *(_OWORD *)(a3 + 32) = v9;
      long long v10 = *(long long *)((char *)v5 + 56);
      *(_OWORD *)(a3 + 65) = *(long long *)((char *)v5 + 65);
      *(_OWORD *)(a3 + 56) = v10;
      sub_19084F148(a3 + 88, (__n128 *)((char *)v5 + 88));
      a3 += 112;
      v5 += 7;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_19084F98C(uint64_t *a1, void *a2)
{
  return sub_1907713E8((uint64_t)a1, a1, a2);
}

void sub_19084F9C8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = (void *)*((void *)v4 - 7);
        if (v6)
        {
          *((void *)v4 - 6) = v6;
          operator delete(v6);
        }
        v4 -= 64;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 sub_19084FA54(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 < 1) {
    return result;
  }
  uint64_t v6 = a3;
  uint64_t v8 = *a1;
  uint64_t v9 = a2 - *a1;
  uint64_t v10 = v9 >> 6;
  uint64_t v11 = *a1 + (v9 & 0xFFFFFFFFFFFFFFC0);
  uint64_t v13 = (uint64_t)(a1 + 2);
  uint64_t v12 = a1[2];
  unint64_t v14 = a1[1];
  if (a5 <= (uint64_t)(v12 - v14) >> 6)
  {
    uint64_t v19 = (uint64_t)(v14 - v11) >> 6;
    if (v19 >= a5)
    {
      uint64_t v21 = a3 + (a5 << 6);
      uint64_t v22 = a1[1];
    }
    else
    {
      float64x2_t v68 = a1 + 2;
      v72[0] = v14;
      unint64_t v75 = v14;
      uint64_t v21 = a3 + (v19 << 6);
      *(void *)&long long v69 = &v75;
      *((void *)&v69 + 1) = v72;
      LOBYTE(v70) = 0;
      if (v21 == a4)
      {
        uint64_t v22 = v14;
      }
      else
      {
        uint64_t v67 = v10;
        uint64_t v22 = v14;
        uint64_t v23 = a3 + (v19 << 6);
        do
        {
          sub_19084FF80(v22, v23);
          v23 += 64;
          uint64_t v22 = v72[0] + 64;
          v72[0] += 64;
        }
        while (v23 != a4);
        uint64_t v10 = v67;
      }
      LOBYTE(v70) = 1;
      sub_19084FFE8((uint64_t)&v68);
      a1[1] = v22;
      if ((uint64_t)(v14 - v11) < 1) {
        return result;
      }
    }
    uint64_t v34 = v11 + (a5 << 6);
    unint64_t v35 = v22 - (a5 << 6);
    uint64_t v36 = v22;
    if (v35 < v14)
    {
      uint64_t v36 = v22;
      do
      {
        *(void *)uint64_t v36 = *(void *)v35;
        *(void *)(v36 + 16) = 0;
        *(void *)(v36 + 24) = 0;
        *(void *)(v36 + 8) = 0;
        *(_OWORD *)(v36 + 8) = *(_OWORD *)(v35 + 8);
        *(void *)(v36 + 24) = *(void *)(v35 + 24);
        *(void *)(v35 + 8) = 0;
        *(void *)(v35 + 16) = 0;
        *(void *)(v35 + 24) = 0;
        *(_OWORD *)(v36 + 32) = *(_OWORD *)(v35 + 32);
        __n128 result = *(__n128 *)(v35 + 48);
        *(__n128 *)(v36 + 48) = result;
        v36 += 64;
        v35 += 64;
      }
      while (v35 < v14);
    }
    a1[1] = v36;
    if (v22 != v34)
    {
      uint64_t v37 = 0;
      uint64_t v38 = (v22 - v34) >> 6;
      uint64_t v39 = v8 + (v10 << 6) + (v38 << 6);
      uint64_t v40 = -64 * v38;
      do
      {
        uint64_t v41 = v39 + v37;
        uint64_t v42 = v22 + v37;
        double v44 = (void **)(v22 + v37 - 56);
        double v43 = *v44;
        *(void *)(v22 + v37 - 64) = *(void *)(v39 + v37 - 64);
        if (v43)
        {
          *(void *)(v42 - 48) = v43;
          operator delete(v43);
          char *v44 = 0;
          *(void *)(v22 + v37 - 48) = 0;
          *(void *)(v22 + v37 - 40) = 0;
        }
        uint64_t v45 = (void *)(v41 - 56);
        *(_OWORD *)double v44 = *(_OWORD *)(v41 - 56);
        *(void *)(v42 - 40) = *(void *)(v41 - 40);
        void *v45 = 0;
        v45[1] = 0;
        double v45[2] = 0;
        *(_OWORD *)(v42 - 32) = *(_OWORD *)(v41 - 32);
        __n128 result = *(__n128 *)(v41 - 16);
        *(__n128 *)(v42 - 16) = result;
        v37 -= 64;
      }
      while (v40 != v37);
    }
    for (; v6 != v21; v11 += 64)
    {
      *(void *)uint64_t v11 = *(void *)v6;
      if (v11 != v6)
      {
        uint64_t v46 = *(char **)(v11 + 8);
        double v48 = *(char **)(v6 + 8);
        char v47 = *(char **)(v6 + 16);
        unint64_t v49 = (v47 - v48) >> 4;
        uint64_t v50 = *(void *)(v11 + 24);
        if (v49 <= (v50 - (uint64_t)v46) >> 4)
        {
          BOOL v53 = (void *)(v11 + 16);
          double v54 = *(char **)(v11 + 16);
          unint64_t v57 = (v54 - v46) >> 4;
          if (v57 >= v49)
          {
            uint64_t v64 = *(void *)(v11 + 8);
            if (v48 != v47)
            {
              uint64_t v65 = *(_OWORD **)(v11 + 8);
              do
              {
                long long v66 = *(_OWORD *)v48;
                v48 += 16;
                *v65++ = v66;
                v64 += 16;
              }
              while (v48 != v47);
            }
            uint64_t v56 = (char *)(v64 - (void)v46);
            double v54 = v46;
          }
          else
          {
            if (v54 != v46)
            {
              uint64_t v58 = 16 * v57;
              long long v59 = *(long long **)(v6 + 8);
              do
              {
                long long v60 = *v59++;
                *(_OWORD *)uint64_t v46 = v60;
                v46 += 16;
                v58 -= 16;
              }
              while (v58);
            }
            uint64_t v61 = &v48[16 * v57];
            double v62 = v54;
            if (v61 != v47)
            {
              __int16 v63 = v54;
              do
              {
                *(void *)__int16 v63 = *(void *)v61;
                *((void *)v63 + 1) = *((void *)v61 + 1);
                v62 += 16;
                v61 += 16;
                v63 += 16;
              }
              while (v61 != v47);
            }
            uint64_t v56 = (char *)(v62 - v54);
          }
        }
        else
        {
          if (v46)
          {
            *(void *)(v11 + 16) = v46;
            operator delete(v46);
            uint64_t v50 = 0;
            *(void *)(v11 + 8) = 0;
            *(void *)(v11 + 16) = 0;
            *(void *)(v11 + 24) = 0;
          }
          if (v47 - v48 < 0) {
            sub_190718FD4();
          }
          uint64_t v51 = v50 >> 3;
          if (v50 >> 3 <= v49) {
            uint64_t v51 = (v47 - v48) >> 4;
          }
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v52 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v51;
          }
          sub_19074C070((void *)(v11 + 8), v52);
          BOOL v53 = (void *)(v11 + 16);
          double v54 = *(char **)(v11 + 16);
          __int16 v55 = v54;
          if (v48 != v47)
          {
            __int16 v55 = *(char **)(v11 + 16);
            do
            {
              *(void *)__int16 v55 = *(void *)v48;
              *((void *)v55 + 1) = *((void *)v48 + 1);
              v55 += 16;
              v48 += 16;
            }
            while (v48 != v47);
          }
          uint64_t v56 = (char *)(v55 - v54);
        }
        *BOOL v53 = &v56[(void)v54];
      }
      *(_OWORD *)(v11 + 32) = *(_OWORD *)(v6 + 32);
      __n128 result = *(__n128 *)(v6 + 48);
      *(__n128 *)(v11 + 48) = result;
      v6 += 64;
    }
  }
  else
  {
    unint64_t v15 = a5 + ((uint64_t)(v14 - v8) >> 6);
    if (v15 >> 58) {
      sub_190718FD4();
    }
    uint64_t v16 = v12 - v8;
    if (v16 >> 5 > v15) {
      unint64_t v15 = v16 >> 5;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    char v71 = a1 + 2;
    if (v17) {
      double v18 = (uint64_t *)sub_19074EAE8((uint64_t)(a1 + 2), v17);
    }
    else {
      double v18 = 0;
    }
    uint64_t v24 = (uint64_t)&v18[8 * v10];
    float64x2_t v68 = v18;
    *(void *)&long long v69 = v24;
    *((void *)&v69 + 1) = v24;
    BOOL v70 = (char *)&v18[8 * v17];
    uint64_t v25 = a5 << 6;
    uint64_t v26 = v24 + (a5 << 6);
    do
    {
      sub_19084FF80(v24, v6);
      v24 += 64;
      v6 += 64;
      v25 -= 64;
    }
    while (v25);
    *((void *)&v69 + 1) = v26;
    sub_19074EB20(v13, v11, v11, *a1, *a1, v69, v69);
    *(void *)&long long v69 = v27;
    uint64_t v28 = a1[1];
    uint64_t v29 = *((void *)&v69 + 1);
    unint64_t v75 = *((void *)&v69 + 1);
    uint64_t v74 = *((void *)&v69 + 1);
    v72[0] = v13;
    v72[1] = &v74;
    v72[2] = &v75;
    for (char i = 0; v11 != v28; v75 += 64)
    {
      sub_19074E984(v13, v29, v11);
      v11 += 64;
      uint64_t v29 = v75 + 64;
    }
    char i = 1;
    sub_19084FFE8((uint64_t)v72);
    long long v30 = *(_OWORD *)a1;
    uint64_t v31 = (uint64_t)v70;
    *a1 = v69;
    a1[1] = v29;
    long long v69 = v30;
    uint64_t v32 = a1[2];
    a1[2] = v31;
    BOOL v70 = (char *)v32;
    float64x2_t v68 = (uint64_t *)v30;
    sub_19074EC6C((uint64_t)&v68);
  }
  return result;
}

void sub_19084FF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19074EC6C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19084FF80(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  sub_19074E9EC((char *)(a1 + 8), *(void **)(a2 + 8), *(void **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  double result = *(double *)(a2 + 56);
  *(double *)(a1 + 56) = result;
  return result;
}

uint64_t sub_19084FFE8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 64)
    {
      uint64_t v5 = *(void **)(i - 56);
      if (v5)
      {
        *(void *)(i - 48) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

void sub_1908518F8(NSObject *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1[325].isa)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v1 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_INFO, "CLMM,Pedestrian,Maps API already initialized", buf, 2u);
    }
    if (!sub_1906CB57C(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::initializeMapsAPI()", "CoreLocation: %s\n", v2);
    if (v2 == (char *)buf) {
      return;
    }
LABEL_35:
    free(v2);
    return;
  }
  uint64_t v3 = a1;
  a1[326].isa = (Class)dispatch_queue_create("cl_geo_access_map_feature_geometry_pedestrian_queue", 0);
  unint64_t v4 = (objc_class *)[objc_alloc(MEMORY[0x1E4F64690]) initWithQueue:v3[326].isa];
  v3[325].isa = v4;
  if (v4)
  {
    [(objc_class *)v4 setAllowNetworkTileLoad:1];
    [(objc_class *)v3[325].isa setFlipNegativeTravelDirectionRoads:1];
    [(objc_class *)v3[325].isa setVisitDoubleTravelDirectionRoadsTwice:0];
    [(objc_class *)v3[325].isa setAllowStaleData:1];
    [(objc_class *)v3[325].isa setAllowOfflineData:1];
    uint64_t v5 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    if (qword_1E929F6C0 == -1) {
      goto LABEL_13;
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v9 = off_1E929F6C8;
    uint64_t v5 = (int *)"assert";
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)unint64_t v15 = 0;
      *(_WORD *)&v15[4] = 2082;
      *(void *)&v15[6] = "";
      __int16 v16 = 2082;
      unint64_t v17 = "assert";
      __int16 v18 = 2081;
      uint64_t v19 = "fGEOMapFeatureAccess != nullptr";
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
    }
    uint64_t v10 = off_1E929F6C8;
    if (os_signpost_enabled((os_log_t)off_1E929F6C8))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)unint64_t v15 = 0;
      *(_WORD *)&v15[4] = 2082;
      *(void *)&v15[6] = "";
      __int16 v16 = 2082;
      unint64_t v17 = "assert";
      __int16 v18 = 2081;
      uint64_t v19 = "fGEOMapFeatureAccess != nullptr";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
    }
    uint64_t v3 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)unint64_t v15 = 0;
      *(_WORD *)&v15[4] = 2082;
      *(void *)&v15[6] = "";
      __int16 v16 = 2082;
      unint64_t v17 = "assert";
      __int16 v18 = 2081;
      uint64_t v19 = "fGEOMapFeatureAccess != nullptr";
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    uint64_t v12 = 50;
    uint64_t v13 = "initializeMapsAPI";
    uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Daemon/Positioning/MapMatching/CLGeoMapFeatureAcce"
          "ssGeometryPedestrian.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
LABEL_13:
  uint64_t v6 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEFAULT))
  {
    if ((*((unsigned int (**))v3->isa + 13))(v3)) {
      uint64_t v7 = "Cycling";
    }
    else {
      uint64_t v7 = "Pedestrian";
    }
    int v8 = [(objc_class *)v3[325].isa allowStaleData];
    *(_DWORD *)__n128 buf = 136446466;
    *(void *)unint64_t v15 = v7;
    *(_WORD *)&v15[8] = 1026;
    *(_DWORD *)&v15[10] = v8;
    _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_DEFAULT, "CLMMPED,%{public}s,using maps API,stale data,%{public}d", buf, 0x12u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (*((void *)v5 + 216) != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    (*((uint64_t (**))v3->isa + 13))(v3);
    [(objc_class *)v3[325].isa allowStaleData];
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::initializeMapsAPI()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      goto LABEL_35;
    }
  }
}

BOOL sub_190851EE4(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    context = (void *)MEMORY[0x192FCF260]();
    double v7 = *(double *)(a3 + 64);
    double v74 = *(double *)(a3 + 56);
    char v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    if (*(unsigned char *)(a1 + 33))
    {
      if (!*(void *)(a1 + 16))
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        double v62 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v62, OS_LOG_TYPE_ERROR, "CLMMPED,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", buf, 2u);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_107;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        LOWORD(v88[0]) = 0;
        __int16 v63 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v63);
        goto LABEL_122;
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      int v8 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = (uint64_t)(*(void *)(*(void *)(a1 + 16) + 336) - *(void *)(*(void *)(a1 + 16) + 328)) >> 4;
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEBUG, "CLMMPED,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        uint64_t v68 = (uint64_t)(*(void *)(*(void *)(a1 + 16) + 336) - *(void *)(*(void *)(a1 + 16) + 328)) >> 4;
        LODWORD(v88[0]) = 134349056;
        *(void *)((char *)v88 + 4) = v68;
        long long v69 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v69);
        if (v69 != (char *)buf) {
          free(v69);
        }
      }
      if ((sub_190741DC4(*(void *)(a1 + 16), (uint64_t *)&v82, 1, *(double *)(a3 + 56), *(double *)(a3 + 64), a4) & 1) == 0)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        uint64_t v10 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,RoadBuffer,findRoadsNear returned false", buf, 2u);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_107;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 == -1) {
          goto LABEL_121;
        }
LABEL_124:
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
LABEL_121:
        LOWORD(v88[0]) = 0;
        __int16 v63 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v63);
LABEL_122:
        if (v63 != (char *)buf) {
          free(v63);
        }
LABEL_107:
        BOOL v13 = 0;
        goto LABEL_108;
      }
    }
    else if (!sub_190852EF4(a1, (uint64_t *)&v82, a3, a4))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      uint64_t v64 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,MapsAPI,findRoadsNear returned false", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_107;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_121;
      }
      goto LABEL_124;
    }
    unint64_t v15 = v82;
    unint64_t v14 = v83;
    if (v82 == v83)
    {
      BOOL v13 = 1;
      goto LABEL_108;
    }
    __int16 v16 = (double *)(a1 + 56);
    __asm { FMOV            V0.2D, #-1.0 }
    long long v72 = _Q0;
    char v71 = v83;
LABEL_26:
    float v77 = 0.0;
    __n128 v76 = 0uLL;
    __int16 v78 = 1;
    float v79 = 0.0;
    unint64_t v81 = 0;
    long long v80 = 0uLL;
    unint64_t v23 = *v15;
    unint64_t v22 = v15[1];
    if (v22)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      uint64_t v24 = (std::__shared_weak_count *)v76.n128_u64[1];
      v76.n128_u64[0] = v23;
      v76.n128_u64[1] = v22;
      if (v24)
      {
        sub_1906BFE48(v24);
        unint64_t v23 = v76.n128_u64[0];
      }
      if (!v23)
      {
LABEL_47:
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        uint64_t v51 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
          }
          LOWORD(v88[0]) = 0;
          long long v59 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v59);
          if (v59 != (char *)buf) {
            free(v59);
          }
        }
        sub_190770ADC(a2);
        int v52 = 1;
        goto LABEL_77;
      }
    }
    else
    {
      __n128 v76 = (__n128)*v15;
      if (!v23) {
        goto LABEL_47;
      }
    }
    v88[0] = 0uLL;
    v88[1] = v72;
    uint64_t v89 = 0;
    uint64_t v90 = 0;
    unint64_t v91 = 0xBFF0000000000000;
    uint64_t v103 = 0;
    int v104 = 0;
    memset(&v101[32], 0, 32);
    __int16 v102 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    memset(v108, 0, 27);
    memset(&v108[32], 0, 48);
    long long v100 = 0u;
    memset(v101, 0, 30);
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    unint64_t v110 = 0xBFF0000000000000;
    uint64_t v109 = 0;
    uint64_t v25 = *(double **)(v23 + 136);
    unint64_t v26 = *(void *)(v23 + 144) - (void)v25;
    unint64_t v75 = 0xBFF0000000000000;
    if ((int)(v26 >> 4) <= 1)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      BOOL v53 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v53, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        LOWORD(v85) = 0;
        long long v60 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "CoreLocation: %s\n", v60);
        if (v60 != (char *)buf) {
          free(v60);
        }
      }
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      double v54 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v54, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,findClosestPointOnRoad returned false", buf, 2u);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_74;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_91;
      }
      goto LABEL_93;
    }
    double v27 = *v25;
    double v28 = v25[1];
    *(_OWORD *)__n128 buf = 0uLL;
    double v29 = 0.0;
    sub_1906DA778(v16, (double *)buf, (double *)&buf[8], &v85, v74, v7, 0.0, v27, v28, 0.0);
    uint64_t v30 = 0;
    double v31 = *(double *)&buf[8];
    double v32 = *(double *)buf;
    uint64_t v33 = (v26 >> 4) - 1;
    double v34 = -1.0;
    double v35 = 0.0;
    while (1)
    {
      double v36 = v32;
      double v37 = v31;
      uint64_t v38 = *(void *)(v23 + 136) + v30;
      double v39 = *(double *)(v38 + 16);
      double v40 = *(double *)(v38 + 24);
      double v85 = 0.0;
      v86[0] = 0.0;
      sub_1906DA778(v16, &v85, v86, &v87, v74, v7, 0.0, v39, v40, 0.0);
      double v32 = v85;
      double v31 = v86[0];
      double v41 = (v36 - v85) * (v36 - v85) + (v37 - v86[0]) * (v37 - v86[0]);
      double v42 = 0.0 - v36;
      if (v41 >= 0.001)
      {
        double v44 = ((0.0 - v37) * (v86[0] - v37) + v42 * (v85 - v36)) / v41;
        if (v44 < 0.0)
        {
          double v46 = v42 * v42 + (0.0 - v37) * (0.0 - v37);
          double v44 = 0.0;
          goto LABEL_39;
        }
        if (v44 > 1.0)
        {
          double v46 = (0.0 - v85) * (0.0 - v85) + (0.0 - v86[0]) * (0.0 - v86[0]);
          double v44 = 1.0;
          goto LABEL_39;
        }
        double v43 = (0.0 - (v36 + (v85 - v36) * v44)) * (0.0 - (v36 + (v85 - v36) * v44));
        double v45 = 0.0 - (v37 + (v86[0] - v37) * v44);
      }
      else
      {
        double v43 = v42 * v42;
        double v44 = 0.0;
        double v45 = 0.0 - v37;
      }
      double v46 = v43 + v45 * v45;
LABEL_39:
      double v47 = sqrt(v41);
      double v48 = sqrt(v46);
      BOOL v49 = v34 < 0.0;
      if (v48 < v34) {
        BOOL v49 = 1;
      }
      double v50 = v35 + v47 * v44;
      if (v49)
      {
        double v34 = v48;
        double v29 = v50;
      }
      double v35 = v35 + v47;
      v30 += 16;
      if (!--v33)
      {
        double v55 = v29 / v35;
        if (v35 < 0.001) {
          double v55 = 0.0;
        }
        unint64_t v75 = *(void *)&v55;
        unint64_t v14 = v71;
        if ((sub_19081203C(a1, (uint64_t)v88, (uint64_t *)&v76, 1, (double *)&v75, 1) & 1) == 0)
        {
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
          }
          uint64_t v58 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)__n128 buf = 0;
            _os_log_impl(&dword_1906B8000, v58, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,interpolateOnRoad returned false", buf, 2u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_74;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 == -1)
          {
LABEL_91:
            LOWORD(v85) = 0;
            uint64_t v61 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v61);
            if (v61 != (char *)buf) {
              free(v61);
            }
LABEL_74:
            int v52 = 1;
            goto LABEL_75;
          }
LABEL_93:
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
          goto LABEL_91;
        }
        float v56 = v34;
        float v77 = v56;
        long long v80 = v98;
        float v57 = *(double *)&v99;
        float v79 = v57;
        unint64_t v81 = v75;
        __int16 v78 = 1;
        sub_19076BCD4((__n128 **)a2, &v76);
        int v52 = 0;
LABEL_75:
        if (SHIBYTE(v97) < 0) {
          operator delete(*((void **)&v96 + 1));
        }
LABEL_77:
        if (v76.n128_u64[1]) {
          sub_1906BFE48((std::__shared_weak_count *)v76.n128_u64[1]);
        }
        BOOL v13 = v52 == 0;
        if (v52 || (v15 += 2, v15 == v14))
        {
LABEL_108:
          *(void *)__n128 buf = &v82;
          sub_1906C6BF0((void ***)buf);
          return v13;
        }
        goto LABEL_26;
      }
    }
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
  }
  uint64_t v11 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 8);
    *(_DWORD *)__n128 buf = 134349056;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v66 = *(void *)(a1 + 8);
    LODWORD(v88[0]) = 134349056;
    *(void *)((char *)v88 + 4) = v66;
    uint64_t v67 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v67);
    if (v67 != (char *)buf) {
      free(v67);
    }
  }
  return 0;
}

void sub_190852E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  a37 = &a30;
  sub_1906C6BF0((void ***)&a37);
  _Unwind_Resume(a1);
}

BOOL sub_190852EF4(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  double v55 = a4;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    unint64_t v15 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v76 = v16;
      _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v17 = *(void *)(a1 + 8);
    LODWORD(v77) = 134349056;
    *(void *)((char *)&v77 + 4) = v17;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v18);
    goto LABEL_99;
  }
  if (*(void *)(a1 + 2600))
  {
    context = (void *)MEMORY[0x192FCF260]();
    long long v54 = *(_OWORD *)(a3 + 56);
    double v7 = (void *)[MEMORY[0x1E4F1CA48] array];
    v52[0] = MEMORY[0x1E4F143A8];
    v52[1] = 3221225472;
    v52[2] = sub_190853B9C;
    v52[3] = &unk_1E56987F8;
    v52[4] = v7;
    v52[5] = a1;
    BOOL v53 = v52;
    int v8 = operator new(0x28uLL);
    *int v8 = &unk_1EE003160;
    v8[1] = a1;
    _DWORD v8[2] = &v54;
    void v8[3] = &v55;
    v8[4] = &v53;
    void v72[3] = v8;
    ++*(_DWORD *)(a1 + 36);
    sub_190770D3C((uint64_t)v71, (uint64_t)v72);
    uint64_t v66 = 0;
    uint64_t v67 = &v66;
    uint64_t v68 = 0x2020000000;
    char v69 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = &v60;
    uint64_t v62 = 0x3052000000;
    __int16 v63 = sub_190857AE4;
    uint64_t v64 = sub_190857AF4;
    dispatch_group_t v65 = 0;
    dispatch_group_t v65 = dispatch_group_create();
    uint64_t v56 = 0;
    float v57 = &v56;
    uint64_t v58 = 0x2020000000;
    uint64_t v59 = 0;
    *(void *)&long long v77 = MEMORY[0x1E4F143A8];
    *((void *)&v77 + 1) = 3221225472;
    __int16 v78 = sub_1906DBFB8;
    float v79 = &unk_1E56979A0;
    long long v80 = &v66;
    unint64_t v81 = &v60;
    char v82 = &v56;
    dispatch_group_enter((dispatch_group_t)v61[5]);
    uint64_t v9 = (void *)sub_190770A00((uint64_t)v71, (uint64_t)&v77);
    uint64_t v10 = v61[5];
    dispatch_time_t v11 = dispatch_time(0, 100000000);
    intptr_t v12 = dispatch_group_wait(v10, v11);
    v57[3] = v12;
    if (v12)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      BOOL v13 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = v57[3];
        *(_DWORD *)__n128 buf = 134349056;
        uint64_t v76 = v14;
        _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        uint64_t v44 = v57[3];
        int v73 = 134349056;
        uint64_t v74 = v44;
        double v45 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v45);
        if (v45 != (char *)buf) {
          free(v45);
        }
      }
      [v9 cancel];
    }
    else if (v61[5])
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      uint64_t v21 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        LOWORD(v73) = 0;
        double v46 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "CoreLocation: %s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }

      v61[5] = 0;
    }
    if (v57[3])
    {
      _Block_object_dispose(&v56, 8);
      _Block_object_dispose(&v60, 8);
      _Block_object_dispose(&v66, 8);
      sub_190770CB8(v71);
    }
    else
    {
      int v22 = *((unsigned __int8 *)v67 + 24);
      _Block_object_dispose(&v56, 8);
      _Block_object_dispose(&v60, 8);
      _Block_object_dispose(&v66, 8);
      sub_190770CB8(v71);
      if (!v22)
      {
        *(_DWORD *)(a1 + 40) = 0;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        uint64_t v25 = [v7 countByEnumeratingWithState:&v48 objects:v70 count:16];
        if (v25)
        {
          uint64_t v26 = *(void *)v49;
LABEL_44:
          uint64_t v27 = 0;
          while (1)
          {
            if (*(void *)v49 != v26) {
              objc_enumerationMutation(v7);
            }
            double v28 = *(void **)(*((void *)&v48 + 1) + 8 * v27);
            if (v28)
            {
              char v29 = [*(id *)(*((void *)&v48 + 1) + 8 * v27) isRoadPedestrianNavigable];
              int v30 = [v28 walkableSide];
              char v31 = [v28 isRail];
              char v32 = (v30 - 1) < 3 ? 1 : v29;
              char v33 = v32 & (v31 ^ 1);
            }
            else
            {
              char v33 = 0;
            }
            if (*(unsigned char *)(a1 + 2648) || (v33 & 1) != 0)
            {
              if (!*(unsigned char *)(a1 + 2648)) {
                char v33 = 1;
              }
              if ((v33 & 1) != 0
                || v28
                && ((int v34 = [v28 bikeableSide],
                     char v35 = [v28 isRail],
                     (v34 - 4) < 0xFFFFFFFD)
                  ? (char v36 = 1)
                  : (char v36 = v35),
                    (v36 & 1) == 0))
              {
                sub_190746754(v28, 1, (std::string **)&v77);
                uint64_t v37 = v77;
                if ((void)v77)
                {
                  int v38 = *(_DWORD *)(v77 + 104);
                  if (v38 >= 1) {
                    *(double *)(v77 + 96) = (double)v38 * 3.70000005;
                  }
                  if (sub_190824A00(v37)) {
                    sub_1907458E0(a2, &v77);
                  }
                  int v39 = 0;
                }
                else
                {
                  if (qword_1E929F6C0 != -1) {
                    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
                  }
                  double v40 = off_1E929F6C8;
                  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)__n128 buf = 0;
                    _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,roadsWithinDistance returned nullptr", buf, 2u);
                  }
                  if (sub_1906CB57C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1E929F6C0 != -1) {
                      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
                    }
                    LOWORD(v60) = 0;
                    double v41 = (char *)_os_log_send_and_compose_impl();
                    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v41);
                    if (v41 != (char *)buf) {
                      free(v41);
                    }
                  }
                  sub_19074C1F8(a2);
                  int v39 = 1;
                }
                if (*((void *)&v77 + 1)) {
                  sub_1906BFE48(*((std::__shared_weak_count **)&v77 + 1));
                }
                if (!v37) {
                  break;
                }
              }
            }
            if (v25 == ++v27)
            {
              uint64_t v42 = [v7 countByEnumeratingWithState:&v48 objects:v70 count:16];
              uint64_t v25 = v42;
              if (v42) {
                goto LABEL_44;
              }
              goto LABEL_85;
            }
          }
        }
        else
        {
LABEL_85:
          int v39 = 0;
        }
        BOOL v20 = v39 == 0;
        goto LABEL_40;
      }
    }
    ++*(_DWORD *)(a1 + 40);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    unint64_t v23 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, query failed (roadsWithinDistance)", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      LOWORD(v77) = 0;
      double v43 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
    BOOL v20 = 0;
LABEL_40:
    sub_190770CB8(v72);
    return v20;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
  }
  uint64_t v19 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLMMPED,roadsWithinDistanceLite,fGEOMapFeatureAccess is unexpectedly nil", buf, 2u);
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    LOWORD(v77) = 0;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsWithinDistanceLite(std::vector<CLMapRoadPtr> &, const CLMapCrumb &, double, BOOL) const", "CoreLocation: %s\n", v18);
LABEL_99:
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  return 0;
}

void sub_190853B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  sub_190770CB8(&a63);
  sub_190770CB8(&a67);
  _Unwind_Resume(a1);
}

uint64_t sub_190853B9C(uint64_t result, void *a2)
{
  if (a2)
  {
    if ((uint64_t v3 = result,
          uint64_t v4 = *(void *)(result + 40),
          int v5 = [a2 isRoadPedestrianNavigable],
          int v6 = [a2 walkableSide],
          double result = [a2 isRail],
          (((v6 - 1) > 2) & ~v5) == 0)
      && !result
      || *(unsigned char *)(v4 + 2648)
      && (int v7 = [a2 bikeableSide], result = objc_msgSend(a2, "isRail"), (result & 1) == 0)
      && (v7 - 4) >= 0xFFFFFFFD)
    {
      int v8 = *(void **)(v3 + 32);
      return [v8 addObject:a2];
    }
  }
  return result;
}

uint64_t sub_190853C68(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, int a5, double a6, double a7)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v16 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      uint64_t v32 = *(void *)(a1 + 8);
      LODWORD(v36) = 134349056;
      *(void *)((char *)&v36 + 4) = v32;
      char v33 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "CoreLocation: %s\n", v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    return 0;
  }
  uint64_t v9 = *a3;
  if (!*a3) {
    return 0;
  }
  double v12 = a6;
  if (a4)
  {
    double v15 = 1.0 - a6;
    sub_19082373C(*a3);
    double v12 = *(double *)(v9 + 40);
  }
  else
  {
    sub_19082373C(*a3);
    double v15 = *(double *)(v9 + 40);
  }
  if (v12 * v15 > a7) {
    return 1;
  }
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  uint64_t v19 = (std::__shared_weak_count *)*a3;
  BOOL v20 = (std::__shared_weak_count *)a3[1];
  v35[0] = v19;
  v35[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = sub_190854120(a1, v35, a4, (uint64_t *)&v36, a5, a7 - v12 * v15);
  if (v20) {
    sub_1906BFE48(v20);
  }
  if (v18)
  {
    int v22 = (uint64_t **)*((void *)&v36 + 1);
    for (uint64_t i = (uint64_t **)v36; i != v22; i += 3)
    {
      uint64_t v24 = *i;
      unint64_t v23 = (std::__shared_weak_count *)i[1];
      uint64_t v25 = **i;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v26 = *((unsigned char *)i + 16);
      if (v26) {
        double v27 = 0.0;
      }
      else {
        double v27 = 1.0;
      }
      double v28 = operator new(0x38uLL);
      void v28[2] = v25;
      *((unsigned char *)v28 + 24) = v26;
      *((unsigned char *)v28 + 25) = 0;
      v28[4] = v24;
      v28[5] = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((double *)v28 + 6) = v27;
      uint64_t v29 = *a2;
      *double v28 = *a2;
      v28[1] = a2;
      *(void *)(v29 + 8) = v28;
      *a2 = (uint64_t)v28;
      ++a2[2];
      if (v23) {
        sub_1906BFE48(v23);
      }
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    int v30 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, findAllDigitizedRoads returned false", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      int v34 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsConnected(ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "CoreLocation: %s\n", v34);
      if (v34 != buf) {
        free(v34);
      }
    }
  }
  *(void *)__n128 buf = &v36;
  sub_190857C10((void ***)buf);
  return v18;
}

void sub_1908540D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a15;
  sub_190857C10(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_190854120(uint64_t a1, std::__shared_weak_count **a2, int a3, uint64_t *a4, int a5, double a6)
{
  uint64_t v6 = a1;
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v16 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)(v6 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      uint64_t v173 = *(void *)(v6 + 8);
      *(_DWORD *)__int16 v222 = 134349056;
      *(void *)&v222[4] = v173;
      BOOL v174 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v174);
      if (v174 != buf) {
        free(v174);
      }
    }
    return 0;
  }
  dispatch_time_t v11 = *a2;
  if (!*(unsigned char *)(a1 + 33))
  {
    if (v11)
    {
      *(void *)__int16 v222 = 0;
      *(void *)&v222[8] = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&v222[16] = _Q0;
      *(void *)uint64_t v223 = 0;
      *(void *)&v223[8] = 0;
      *(void *)&v223[16] = 0xBFF0000000000000;
      uint64_t v233 = 0;
      int v234 = 0;
      memset(&v231[32], 0, 32);
      __int16 v232 = 0;
      long long v235 = 0u;
      long long v236 = 0u;
      long long v237 = 0u;
      memset(v238, 0, 27);
      memset(&v238[32], 0, 48);
      memset(v231, 0, 30);
      long long v230 = 0u;
      long long v229 = 0u;
      long long v228 = 0u;
      long long v227 = 0u;
      long long v226 = 0u;
      long long v225 = 0u;
      memset(v224, 0, sizeof(v224));
      *(_OWORD *)&v223[24] = 0u;
      unint64_t v240 = 0xBFF0000000000000;
      uint64_t v239 = 0;
      shared_weak_owners = (std::__shared_weak_count_vtbl *)v11[5].__shared_weak_owners_;
      char v26 = v11[6].__vftable;
      if (a3)
      {
        uint64_t v27 = (char *)v26 - (char *)shared_weak_owners;
        if (v27)
        {
          uint64_t v28 = (v27 >> 4) - 1;
          uint64_t v29 = (double *)((char *)shared_weak_owners + 16 * v28);
LABEL_43:
          double v35 = *v29;
          *(double *)&v223[24] = v35;
          double v36 = *((double *)&shared_weak_owners->~__shared_weak_count_0 + 2 * v28);
          double v197 = v35;
          goto LABEL_79;
        }
        double v197 = 0.0;
      }
      else
      {
        uint64_t v28 = 0;
        if (v26 != shared_weak_owners)
        {
          uint64_t v29 = (double *)v11[5].__shared_weak_owners_;
          goto LABEL_43;
        }
        double v197 = 0.0;
      }
      double v35 = 0.0;
      double v36 = 0.0;
LABEL_79:
      *(double *)&v223[32] = v36;
      uint64_t v206 = (uint64_t *)&v206;
      double v207 = (uint64_t *)&v206;
      uint64_t v208 = 0;
      std::__shared_count v203 = v11->std::__shared_count;
      long long v51 = sub_19074128C((uint64_t **)(a1 + 2616), (long long *)&v203, 0);
      int v52 = v51;
      __int16 v198 = (uint64_t **)(v6 + 2616);
      uint64_t v200 = v6;
      if (v51)
      {
        BOOL v53 = (_OWORD *)((char *)v51 + 8);
        uint64_t v54 = 8;
        if (a3)
        {
          uint64_t v54 = 32;
          BOOL v53 = v51 + 2;
        }
        double v55 = *(uint64_t **)((char *)v51 + v54);
        uint64_t v56 = (uint64_t *)*((void *)v53 + 1);
        if (v55 != v56)
        {
          do
          {
            uint64_t v57 = *v55;
            uint64_t v58 = (std::__shared_weak_count *)v55[1];
            if (v58)
            {
              atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
              if (!v57) {
                goto LABEL_99;
              }
              memset(&buf[4], 0, 24);
              atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              if (!v57)
              {
LABEL_99:
                sub_190770ADC((uint64_t *)&v206);
                int v61 = 1;
                if (!v58) {
                  goto LABEL_94;
                }
                goto LABEL_93;
              }
              memset(&buf[4], 0, 24);
            }
            uint64_t v59 = (char *)operator new(0x48uLL);
            *((void *)v59 + 2) = v57;
            *((void *)v59 + 3) = v58;
            if (v58) {
              atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *((_DWORD *)v59 + 8) = 0;
            *((_WORD *)v59 + 18) = 1;
            *((_DWORD *)v59 + 10) = 0;
            *(_OWORD *)(v59 + 44) = *(_OWORD *)buf;
            *(_OWORD *)(v59 + 56) = *(_OWORD *)&buf[12];
            uint64_t v60 = (uint64_t)v206;
            *(void *)uint64_t v59 = v206;
            *((void *)v59 + 1) = &v206;
            *(void *)(v60 + 8) = v59;
            uint64_t v206 = (uint64_t *)v59;
            ++v208;
            if (v58) {
              sub_1906BFE48(v58);
            }
            int v61 = 0;
            if (!v58) {
              goto LABEL_94;
            }
LABEL_93:
            sub_1906BFE48(v58);
LABEL_94:
            v55 += 2;
            if (v55 == v56) {
              int v62 = 1;
            }
            else {
              int v62 = v61;
            }
          }
          while (v62 != 1);
        }
        uint64_t v6 = v200;
        if (v208)
        {
          *((void *)v52 + 7) = *(void *)(v200 + 8);
          char v199 = 1;
LABEL_128:
          if (a5)
          {
            unint64_t v75 = *a2;
            uint64_t v76 = a2[1];
            if (v76)
            {
              atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v77 = a3 ^ 1;
            unint64_t v78 = a4[2];
            unint64_t v79 = a4[1];
            if (v79 >= v78)
            {
              unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - *a4) >> 3);
              unint64_t v82 = v81 + 1;
              if (v81 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_190718FD4();
              }
              unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - *a4) >> 3);
              if (2 * v83 > v82) {
                unint64_t v82 = 2 * v83;
              }
              if (v83 >= 0x555555555555555) {
                unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v84 = v82;
              }
              *(void *)char v242 = a4 + 2;
              if (v84) {
                unint64_t v84 = (unint64_t)sub_1907812D8(v84);
              }
              else {
                uint64_t v85 = 0;
              }
              char v86 = (std::__shared_weak_count **)(v84 + 24 * v81);
              *(void *)__n128 buf = v84;
              *(void *)&uint8_t buf[8] = v86;
              *(void *)&unsigned char buf[24] = v84 + 24 * v85;
              *char v86 = v75;
              v86[1] = v76;
              if (v76) {
                atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(unsigned char *)(v84 + 24 * v81 + 16) = v77;
              *(void *)&uint8_t buf[16] = v86 + 3;
              sub_190857C98(a4, buf);
              uint64_t v80 = a4[1];
              sub_190857D2C((uint64_t)buf);
            }
            else
            {
              *(void *)unint64_t v79 = v75;
              *(void *)(v79 + 8) = v76;
              if (v76) {
                atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(unsigned char *)(v79 + 16) = v77;
              uint64_t v80 = v79 + 24;
            }
            a4[1] = v80;
            if (v76)
            {
              sub_1906BFE48(v76);
              sub_1906BFE48(v76);
            }
          }
          double v87 = v207;
          if (v207 != (uint64_t *)&v206)
          {
            while (1)
            {
              double v88 = (std::__shared_weak_count_vtbl **)v87[2];
              if (*v88 != (*a2)->__vftable)
              {
                uint64_t v90 = (double *)v88[17];
                uint64_t v89 = (double *)v88[18];
                if (v89 == v90)
                {
                  double v92 = 0.0;
                  double v91 = 0.0;
                }
                else
                {
                  double v92 = *v90;
                  double v91 = v90[1];
                }
                if (vabdd_f64(v35, v92) < 0.0000001 && vabdd_f64(v36, v91) < 0.0000001)
                {
                  long long v93 = (std::__shared_weak_count *)v87[3];
                  if (v93)
                  {
                    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
                    unint64_t v94 = a4[1];
                    unint64_t v95 = a4[2];
                    if (v94 < v95)
                    {
                      *(void *)unint64_t v94 = v88;
                      *(void *)(v94 + 8) = v93;
                      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
                      goto LABEL_169;
                    }
LABEL_170:
                    unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - *a4) >> 3);
                    unint64_t v100 = v99 + 1;
                    if (v99 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      sub_190718FD4();
                    }
                    unint64_t v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - *a4) >> 3);
                    if (2 * v101 > v100) {
                      unint64_t v100 = 2 * v101;
                    }
                    if (v101 >= 0x555555555555555) {
                      unint64_t v102 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v102 = v100;
                    }
                    *(void *)char v242 = a4 + 2;
                    if (v102) {
                      unint64_t v102 = (unint64_t)sub_1907812D8(v102);
                    }
                    else {
                      uint64_t v103 = 0;
                    }
                    unint64_t v110 = (std::__shared_weak_count_vtbl ***)(v102 + 24 * v99);
                    *(void *)__n128 buf = v102;
                    *(void *)&uint8_t buf[8] = v110;
                    *(void *)&unsigned char buf[24] = v102 + 24 * v103;
                    *unint64_t v110 = v88;
                    v110[1] = (std::__shared_weak_count_vtbl **)v93;
                    if (v93) {
                      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    *(unsigned char *)(v102 + 24 * v99 + 16) = 1;
LABEL_198:
                    *(void *)&uint8_t buf[16] = v110 + 3;
                    sub_190857C98(a4, buf);
                    uint64_t v104 = a4[1];
                    sub_190857D2C((uint64_t)buf);
LABEL_199:
                    a4[1] = v104;
                    if (v93)
                    {
                      sub_1906BFE48(v93);
                      sub_1906BFE48(v93);
                    }
                    goto LABEL_201;
                  }
                  unint64_t v94 = a4[1];
                  unint64_t v95 = a4[2];
                  if (v94 >= v95) {
                    goto LABEL_170;
                  }
                  *(void *)unint64_t v94 = v88;
                  *(void *)(v94 + 8) = 0;
LABEL_169:
                  *(unsigned char *)(v94 + 16) = 1;
LABEL_181:
                  uint64_t v104 = v94 + 24;
                  goto LABEL_199;
                }
                if (v89 == v90)
                {
                  double v97 = 0.0;
                  double v96 = 0.0;
                }
                else
                {
                  double v97 = *(v89 - 2);
                  double v96 = *(v89 - 1);
                }
                if (vabdd_f64(v35, v97) < 0.0000001 && vabdd_f64(v36, v96) < 0.0000001) {
                  break;
                }
              }
LABEL_201:
              double v87 = (uint64_t *)v87[1];
              if (v87 == (uint64_t *)&v206) {
                goto LABEL_202;
              }
            }
            long long v93 = (std::__shared_weak_count *)v87[3];
            if (v93)
            {
              atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
              unint64_t v94 = a4[1];
              unint64_t v98 = a4[2];
              if (v94 < v98)
              {
                *(void *)unint64_t v94 = v88;
                *(void *)(v94 + 8) = v93;
                atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_180:
                *(unsigned char *)(v94 + 16) = 0;
                goto LABEL_181;
              }
            }
            else
            {
              unint64_t v94 = a4[1];
              unint64_t v98 = a4[2];
              if (v94 < v98)
              {
                *(void *)unint64_t v94 = v88;
                *(void *)(v94 + 8) = 0;
                goto LABEL_180;
              }
            }
            unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - *a4) >> 3);
            unint64_t v106 = v105 + 1;
            if (v105 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_190718FD4();
            }
            unint64_t v107 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - *a4) >> 3);
            if (2 * v107 > v106) {
              unint64_t v106 = 2 * v107;
            }
            if (v107 >= 0x555555555555555) {
              unint64_t v108 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v108 = v106;
            }
            *(void *)char v242 = a4 + 2;
            if (v108) {
              unint64_t v108 = (unint64_t)sub_1907812D8(v108);
            }
            else {
              uint64_t v109 = 0;
            }
            unint64_t v110 = (std::__shared_weak_count_vtbl ***)(v108 + 24 * v105);
            *(void *)__n128 buf = v108;
            *(void *)&uint8_t buf[8] = v110;
            *(void *)&unsigned char buf[24] = v108 + 24 * v109;
            *unint64_t v110 = v88;
            v110[1] = (std::__shared_weak_count_vtbl **)v93;
            if (v93) {
              atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(unsigned char *)(v108 + 24 * v105 + 16) = 0;
            goto LABEL_198;
          }
LABEL_202:
          if ((v199 & 1) == 0 && a4[1] != *a4)
          {
            uint64_t v111 = sub_19074128C(v198, (long long *)&v203, 1);
            uint64_t v112 = (uint64_t)v111;
            if (v111)
            {
              sub_1907413D4((uint64_t)v111, a3 ^ 1);
              *(void *)(v112 + 56) = *(void *)(v200 + 8);
              uint64_t v113 = *a4;
              uint64_t v114 = a4[1];
              if (*a4 != v114)
              {
                do
                {
                  uint64_t v115 = *(std::__shared_weak_count_vtbl ***)v113;
                  *(void *)__n128 buf = *(void *)v113;
                  uint64_t v116 = *(void *)(v113 + 8);
                  *(void *)&uint8_t buf[8] = v116;
                  if (v116) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v116 + 8), 1uLL, memory_order_relaxed);
                  }
                  uint8_t buf[16] = *(unsigned char *)(v113 + 16);
                  if (v115)
                  {
                    if (*v115 == (*a2)->__vftable)
                    {
                      int v117 = 27;
                    }
                    else
                    {
                      if (a3)
                      {
                        *(unsigned char *)uint64_t v112 = 1;
                        __int16 v118 = (uint64_t *)(v112 + 32);
                      }
                      else
                      {
                        *(unsigned char *)(v112 + 1) = 1;
                        __int16 v118 = (uint64_t *)(v112 + 8);
                      }
                      sub_1907458E0(v118, (long long *)buf);
                      int v117 = 0;
                    }
                  }
                  else
                  {
                    sub_1907413D4(v112, a3 ^ 1);
                    *(void *)(v112 + 56) = 0xBFF0000000000000;
                    int v117 = 26;
                  }
                  if (*(void *)&buf[8]) {
                    sub_1906BFE48(*(std::__shared_weak_count **)&buf[8]);
                  }
                  if (v117 != 27 && v117) {
                    break;
                  }
                  v113 += 24;
                }
                while (v113 != v114);
              }
            }
            else
            {
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
              }
              int v119 = off_1E929F6C8;
              if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
              {
                uint64_t v120 = *(void *)(v200 + 8);
                *(_DWORD *)__n128 buf = 134217984;
                *(void *)&uint8_t buf[4] = v120;
                _os_log_impl(&dword_1906B8000, v119, OS_LOG_TYPE_ERROR, "CLMM,%.1lf,Unexpected,RoadConnectionsEntry could not be created", buf, 0xCu);
              }
              if (sub_1906CB57C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6C0 != -1) {
                  dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
                }
                uint64_t v193 = *(void *)(v200 + 8);
                LODWORD(v209[0]) = 134217984;
                *(uint64_t *)((char *)v209 + 4) = v193;
                __int16 v194 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v194);
                if (v194 != buf) {
                  free(v194);
                }
              }
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == a5)
          {
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
            }
            int v121 = off_1E929F6C8;
            if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v122 = *(void *)(v200 + 8);
              int v123 = (*a2)->__vftable;
              __int16 v124 = (uint64_t *)(*a2)[5].__shared_weak_owners_;
              double v125 = (*a2)[6].__vftable;
              if (v125 == (std::__shared_weak_count_vtbl *)v124)
              {
                get_deleter = 0;
                uint64_t v126 = 0;
                uint64_t v127 = 0;
                on_zero_shared_weaunint64_t k = 0;
              }
              else
              {
                uint64_t v126 = *v124;
                uint64_t v127 = v124[1];
                get_deleter = v125[-1].__get_deleter;
                on_zero_shared_weaunint64_t k = v125[-1].__on_zero_shared_weak;
              }
              *(_DWORD *)__n128 buf = 134351105;
              *(void *)&uint8_t buf[4] = v122;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(void *)&unsigned char buf[14] = v123;
              *(_WORD *)&unsigned char buf[22] = 2050;
              *(void *)&unsigned char buf[24] = v208;
              *(_WORD *)char v242 = 2049;
              *(void *)&_OWORD v242[2] = v126;
              __int16 v243 = 2049;
              uint64_t v244 = v127;
              __int16 v245 = 2049;
              long long v246 = get_deleter;
              __int16 v247 = 2049;
              __int16 v248 = on_zero_shared_weak;
              __int16 v249 = 2049;
              double v250 = v197;
              __int16 v251 = 2049;
              double v252 = v36;
              _os_log_impl(&dword_1906B8000, v121, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", buf, 0x5Cu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6C0 != -1) {
                dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
              }
              uint64_t v175 = *(void *)(v200 + 8);
              uint64_t v176 = (uint64_t)(*a2)->__vftable;
              uint64_t v177 = (uint64_t *)(*a2)[5].__shared_weak_owners_;
              int v178 = (*a2)[6].__vftable;
              if (v178 == (std::__shared_weak_count_vtbl *)v177)
              {
                __int16 v181 = 0;
                uint64_t v179 = 0;
                uint64_t v180 = 0;
                uint64_t v182 = 0;
              }
              else
              {
                uint64_t v179 = *v177;
                uint64_t v180 = v177[1];
                __int16 v181 = v178[-1].__get_deleter;
                uint64_t v182 = v178[-1].__on_zero_shared_weak;
              }
              LODWORD(v209[0]) = 134351105;
              *(uint64_t *)((char *)v209 + 4) = v175;
              WORD2(v209[1]) = 2049;
              *(uint64_t *)((char *)&v209[1] + 6) = v176;
              HIWORD(v209[2]) = 2050;
              v209[3] = v208;
              __int16 v210 = 2049;
              uint64_t v211 = v179;
              __int16 v212 = 2049;
              uint64_t v213 = v180;
              __int16 v214 = 2049;
              double v215 = v181;
              __int16 v216 = 2049;
              double v217 = v182;
              __int16 v218 = 2049;
              double v219 = v197;
              __int16 v220 = 2049;
              double v221 = v36;
              uint64_t v192 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v192);
              if (v192 != buf) {
                free(v192);
              }
            }
          }
          uint64_t v18 = 1;
LABEL_322:
          sub_190770ADC((uint64_t *)&v206);
          return v18;
        }
      }
      else if (v208)
      {
LABEL_127:
        char v199 = 0;
        goto LABEL_128;
      }
      memset(v209, 0, 24);
      if (sub_190852EF4(v6, v209, (uint64_t)v222, a6))
      {
        __int16 v63 = (uint64_t *)v209[0];
        uint64_t v64 = v209[1];
        if (v209[1] != v209[0]) {
          goto LABEL_106;
        }
        double v74 = fmin(a6 * 4.0, 250.0);
        if (v74 <= a6)
        {
LABEL_126:
          *(void *)__n128 buf = v209;
          sub_1906C6BF0((void ***)buf);
          goto LABEL_127;
        }
        if (sub_190852EF4(v6, v209, (uint64_t)v222, v74))
        {
          __int16 v63 = (uint64_t *)v209[0];
          uint64_t v64 = v209[1];
LABEL_106:
          while (v63 != (uint64_t *)v64)
          {
            memset(&buf[4], 0, 24);
            uint64_t v65 = *v63;
            uint64_t v66 = (std::__shared_weak_count *)v63[1];
            if (v66) {
              atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v67 = (char *)operator new(0x48uLL);
            *((void *)v67 + 2) = v65;
            *((void *)v67 + 3) = v66;
            if (v66) {
              atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *((_DWORD *)v67 + 8) = 0;
            *((_WORD *)v67 + 18) = 1;
            *((_DWORD *)v67 + 10) = 0;
            *(_OWORD *)(v67 + 44) = *(_OWORD *)buf;
            *(_OWORD *)(v67 + 56) = *(_OWORD *)&buf[12];
            uint64_t v68 = (uint64_t)v206;
            *(void *)uint64_t v67 = v206;
            *((void *)v67 + 1) = &v206;
            *(void *)(v68 + 8) = v67;
            uint64_t v206 = (uint64_t *)v67;
            ++v208;
            if (v66) {
              sub_1906BFE48(v66);
            }
            v63 += 2;
          }
          goto LABEL_126;
        }
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        int v171 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v171, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED, roadsWithinDistance returned false, expanded search", buf, 2u);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
          }
          __int16 v196 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoads(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v196);
          if (v196 != buf) {
            free(v196);
          }
        }
      }
      *(void *)__n128 buf = v209;
      sub_1906C6BF0((void ***)buf);
      uint64_t v18 = 0;
      goto LABEL_322;
    }
    return 0;
  }
  double v12 = a2[1];
  uint64_t v204 = (uint64_t *)*a2;
  double v205 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!*(unsigned char *)(a1 + 32))
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      char v31 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = *(void *)(v6 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v32;
        _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_49;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      uint64_t v33 = *(void *)(v6 + 8);
      *(_DWORD *)__int16 v222 = 134349056;
      *(void *)&v222[4] = v33;
      int v34 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v34);
      goto LABEL_330;
    }
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    int v30 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,fRoadGeometryBuffer is unexpectedly nullptr", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_49;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_329;
    }
    goto LABEL_363;
  }
  if (!v11)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v37 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,road is unexpectedly nullptr", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_49;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_329;
    }
LABEL_363:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
LABEL_329:
    *(_WORD *)__int16 v222 = 0;
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v34);
LABEL_330:
    if (v34 != buf) {
      free(v34);
    }
LABEL_49:
    uint64_t v18 = 0;
    goto LABEL_314;
  }
  v209[0] = (uint64_t)v209;
  v209[1] = (uint64_t)v209;
  v209[2] = 0;
  uint64_t v206 = 0;
  double v207 = 0;
  int v14 = a5 ^ 1;
  uint64_t v208 = 0;
  if (!a3)
  {
    if ((sub_1907459FC(v13, (uint64_t *)&v204, (uint64_t *)&v206, v14) & 1) == 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      long long v50 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v50, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToStartOfThisRoad returned false", buf, 2u);
      }
      if (!sub_1906CB57C(115, 0)) {
        goto LABEL_75;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_337;
      }
      goto LABEL_365;
    }
LABEL_51:
    int v202 = a5;
    int v38 = v206;
    uint64_t v39 = v207;
    if (v206 != v207)
    {
      while (1)
      {
        uint64_t v41 = *v38;
        double v40 = (std::__shared_weak_count *)v38[1];
        if (v40) {
          break;
        }
        if (v41)
        {
          memset(&buf[4], 0, 24);
LABEL_57:
          uint64_t v42 = (char *)operator new(0x48uLL);
          *((void *)v42 + 2) = v41;
          *((void *)v42 + 3) = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *((_DWORD *)v42 + 8) = 0;
          *((_WORD *)v42 + 18) = 1;
          *((_DWORD *)v42 + 10) = 0;
          *(_OWORD *)(v42 + 44) = *(_OWORD *)buf;
          *(_OWORD *)(v42 + 56) = *(_OWORD *)&buf[12];
          uint64_t v43 = v209[0];
          *(void *)uint64_t v42 = v209[0];
          *((void *)v42 + 1) = v209;
          *(void *)(v43 + 8) = v42;
          v209[0] = (uint64_t)v42;
          ++v209[2];
          if (!v40) {
            goto LABEL_62;
          }
          sub_1906BFE48(v40);
LABEL_61:
          sub_1906BFE48(v40);
        }
LABEL_62:
        v38 += 2;
        if (v38 == v39) {
          goto LABEL_63;
        }
      }
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v41)
      {
        memset(&buf[4], 0, 24);
        atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_57;
      }
      goto LABEL_61;
    }
LABEL_63:
    if (v202)
    {
      uint64_t v44 = v204;
      double v45 = v205;
      if (v205)
      {
        atomic_fetch_add_explicit(&v205->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v46 = a3 ^ 1;
      unint64_t v47 = a4[2];
      unint64_t v48 = a4[1];
      if (v48 >= v47)
      {
        unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *a4) >> 3);
        unint64_t v70 = v69 + 1;
        if (v69 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_190718FD4();
        }
        unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *a4) >> 3);
        if (2 * v71 > v70) {
          unint64_t v70 = 2 * v71;
        }
        if (v71 >= 0x555555555555555) {
          unint64_t v72 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v72 = v70;
        }
        *(void *)char v242 = a4 + 2;
        if (v72) {
          unint64_t v72 = (unint64_t)sub_1907812D8(v72);
        }
        else {
          uint64_t v73 = 0;
        }
        __int16 v130 = (uint64_t **)(v72 + 24 * v69);
        *(void *)__n128 buf = v72;
        *(void *)&uint8_t buf[8] = v130;
        *(void *)&unsigned char buf[24] = v72 + 24 * v73;
        *__int16 v130 = v44;
        v130[1] = (uint64_t *)v45;
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)(v72 + 24 * v69 + 16) = v46;
        *(void *)&uint8_t buf[16] = v130 + 3;
        sub_190857C98(a4, buf);
        uint64_t v49 = a4[1];
        sub_190857D2C((uint64_t)buf);
      }
      else
      {
        *(void *)unint64_t v48 = v44;
        *(void *)(v48 + 8) = v45;
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)(v48 + 16) = v46;
        uint64_t v49 = v48 + 24;
      }
      a4[1] = v49;
      if (v45)
      {
        sub_1906BFE48(v45);
        sub_1906BFE48(v45);
      }
    }
    uint64_t v131 = v204[17];
    uint64_t v132 = v204[18];
    if (a3)
    {
      uint64_t v133 = v132 - v131;
      if (v133)
      {
        uint64_t v134 = (v133 >> 4) - 1;
        uint64_t v135 = (double *)(v131 + 16 * v134);
LABEL_248:
        double v136 = *v135;
        double v137 = *(double *)(v131 + 16 * v134 + 8);
        goto LABEL_250;
      }
    }
    else if (v132 != v131)
    {
      uint64_t v134 = 0;
      uint64_t v135 = (double *)v204[17];
      goto LABEL_248;
    }
    double v136 = 0.0;
    double v137 = 0.0;
LABEL_250:
    __int16 v138 = (uint64_t *)v209[1];
    if ((uint64_t *)v209[1] == v209)
    {
LABEL_303:
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) == v202)
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        __int16 v162 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v163 = *(void *)(v6 + 8);
          uint64_t v164 = *v204;
          int v165 = (uint64_t *)v204[17];
          __int16 v166 = (uint64_t *)v204[18];
          if (v166 == v165)
          {
            double v169 = 0;
            uint64_t v167 = 0;
            uint64_t v168 = 0;
            __int16 v170 = 0;
          }
          else
          {
            uint64_t v167 = *v165;
            uint64_t v168 = v165[1];
            double v169 = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))*(v166 - 2);
            __int16 v170 = (void (__cdecl *)(std::__shared_weak_count *__hidden))*(v166 - 1);
          }
          *(_DWORD *)__n128 buf = 134351105;
          *(void *)&uint8_t buf[4] = v163;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(void *)&unsigned char buf[14] = v164;
          *(_WORD *)&unsigned char buf[22] = 2050;
          *(void *)&unsigned char buf[24] = v209[2];
          *(_WORD *)char v242 = 2049;
          *(void *)&_OWORD v242[2] = v167;
          __int16 v243 = 2049;
          uint64_t v244 = v168;
          __int16 v245 = 2049;
          long long v246 = v169;
          __int16 v247 = 2049;
          __int16 v248 = v170;
          __int16 v249 = 2049;
          double v250 = v136;
          __int16 v251 = 2049;
          double v252 = v137;
          _os_log_impl(&dword_1906B8000, v162, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.2lf,CLGeoMapFeatureAccessGeometryPedestrian,ConnectedRoads found 0 roads in buffer, %{private}lld, totalResults,%{public}lu,roadStartLL,%{private}.7lf,%{private}.7lf,roadEndLL,%{private}.7lf,%{private}.7lf,searchCoordinate,%{private}.7lf,%{private}.7lf", buf, 0x5Cu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
          }
          uint64_t v184 = *(void *)(v6 + 8);
          uint64_t v185 = *v204;
          uint64_t v186 = (uint64_t *)v204[17];
          __int16 v187 = (uint64_t *)v204[18];
          if (v187 == v186)
          {
            uint64_t v190 = 0;
            uint64_t v188 = 0;
            uint64_t v189 = 0;
            uint64_t v191 = 0;
          }
          else
          {
            uint64_t v188 = *v186;
            uint64_t v189 = v186[1];
            uint64_t v190 = *(v187 - 2);
            uint64_t v191 = *(v187 - 1);
          }
          *(_DWORD *)__int16 v222 = 134351105;
          *(void *)&v222[4] = v184;
          *(_WORD *)&v222[12] = 2049;
          *(void *)&v222[14] = v185;
          *(_WORD *)&v222[22] = 2050;
          *(void *)&v222[24] = v209[2];
          *(_WORD *)uint64_t v223 = 2049;
          *(void *)&v223[2] = v188;
          *(_WORD *)&v223[10] = 2049;
          *(void *)&v223[12] = v189;
          *(_WORD *)&v223[20] = 2049;
          *(void *)&v223[22] = v190;
          *(_WORD *)&v223[30] = 2049;
          *(void *)&v223[32] = v191;
          LOWORD(v224[0]) = 2049;
          *(double *)((char *)v224 + 2) = v136;
          HIWORD(v224[2]) = 2049;
          *(double *)&v224[3] = v137;
          uint64_t v195 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v195);
          if (v195 != buf) {
            free(v195);
          }
        }
      }
      uint64_t v18 = 1;
      goto LABEL_313;
    }
    while (1)
    {
      uint64_t v139 = (void *)v138[2];
      if (*v139 != *v204)
      {
        uint64_t v141 = (double *)v139[17];
        __int16 v140 = (double *)v139[18];
        if (v140 == v141)
        {
          double v143 = 0.0;
          double v142 = 0.0;
        }
        else
        {
          double v143 = *v141;
          double v142 = v141[1];
        }
        if (vabdd_f64(v136, v143) < 0.0000001 && vabdd_f64(v137, v142) < 0.0000001)
        {
          __int16 v144 = (std::__shared_weak_count *)v138[3];
          if (v144)
          {
            atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
            unint64_t v145 = a4[1];
            unint64_t v146 = a4[2];
            if (v145 < v146)
            {
              *(void *)unint64_t v145 = v139;
              *(void *)(v145 + 8) = v144;
              atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_270;
            }
LABEL_271:
            unint64_t v150 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - *a4) >> 3);
            unint64_t v151 = v150 + 1;
            if (v150 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_190718FD4();
            }
            unint64_t v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - *a4) >> 3);
            if (2 * v152 > v151) {
              unint64_t v151 = 2 * v152;
            }
            if (v152 >= 0x555555555555555) {
              unint64_t v153 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v153 = v151;
            }
            *(void *)char v242 = a4 + 2;
            if (v153) {
              unint64_t v153 = (unint64_t)sub_1907812D8(v153);
            }
            else {
              uint64_t v154 = 0;
            }
            int v161 = (void *)(v153 + 24 * v150);
            *(void *)__n128 buf = v153;
            *(void *)&uint8_t buf[8] = v161;
            *(void *)&unsigned char buf[24] = v153 + 24 * v154;
            *int v161 = v139;
            v161[1] = v144;
            if (v144) {
              atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(unsigned char *)(v153 + 24 * v150 + 16) = 1;
LABEL_299:
            *(void *)&uint8_t buf[16] = v161 + 3;
            sub_190857C98(a4, buf);
            uint64_t v155 = a4[1];
            sub_190857D2C((uint64_t)buf);
LABEL_300:
            a4[1] = v155;
            if (v144)
            {
              sub_1906BFE48(v144);
              sub_1906BFE48(v144);
            }
            goto LABEL_302;
          }
          unint64_t v145 = a4[1];
          unint64_t v146 = a4[2];
          if (v145 >= v146) {
            goto LABEL_271;
          }
          *(void *)unint64_t v145 = v139;
          *(void *)(v145 + 8) = 0;
LABEL_270:
          *(unsigned char *)(v145 + 16) = 1;
LABEL_282:
          uint64_t v155 = v145 + 24;
          goto LABEL_300;
        }
        if (v140 == v141)
        {
          double v148 = 0.0;
          double v147 = 0.0;
        }
        else
        {
          double v148 = *(v140 - 2);
          double v147 = *(v140 - 1);
        }
        if (vabdd_f64(v136, v148) < 0.0000001 && vabdd_f64(v137, v147) < 0.0000001) {
          break;
        }
      }
LABEL_302:
      __int16 v138 = (uint64_t *)v138[1];
      if (v138 == v209) {
        goto LABEL_303;
      }
    }
    __int16 v144 = (std::__shared_weak_count *)v138[3];
    if (v144)
    {
      atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v145 = a4[1];
      unint64_t v149 = a4[2];
      if (v145 < v149)
      {
        *(void *)unint64_t v145 = v139;
        *(void *)(v145 + 8) = v144;
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_281:
        *(unsigned char *)(v145 + 16) = 0;
        goto LABEL_282;
      }
    }
    else
    {
      unint64_t v145 = a4[1];
      unint64_t v149 = a4[2];
      if (v145 < v149)
      {
        *(void *)unint64_t v145 = v139;
        *(void *)(v145 + 8) = 0;
        goto LABEL_281;
      }
    }
    unint64_t v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - *a4) >> 3);
    unint64_t v157 = v156 + 1;
    if (v156 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_190718FD4();
    }
    unint64_t v158 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - *a4) >> 3);
    if (2 * v158 > v157) {
      unint64_t v157 = 2 * v158;
    }
    if (v158 >= 0x555555555555555) {
      unint64_t v159 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v159 = v157;
    }
    *(void *)char v242 = a4 + 2;
    if (v159) {
      unint64_t v159 = (unint64_t)sub_1907812D8(v159);
    }
    else {
      uint64_t v160 = 0;
    }
    int v161 = (void *)(v159 + 24 * v156);
    *(void *)__n128 buf = v159;
    *(void *)&uint8_t buf[8] = v161;
    *(void *)&unsigned char buf[24] = v159 + 24 * v160;
    *int v161 = v139;
    v161[1] = v144;
    if (v144) {
      atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)(v159 + 24 * v156 + 16) = 0;
    goto LABEL_299;
  }
  if (sub_1907451AC(v13, (uint64_t *)&v204, (uint64_t *)&v206, v14)) {
    goto LABEL_51;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
  }
  double v15 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_ERROR, "CLMMPED,findAllDigitizedRoadsUsingRoadBuffer,findRoadsConnectedToEndOfThisRoad returned false", buf, 2u);
  }
  if (!sub_1906CB57C(115, 0)) {
    goto LABEL_75;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1E929F6C0 != -1) {
LABEL_365:
  }
    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
LABEL_337:
  *(_WORD *)__int16 v222 = 0;
  __int16 v183 = (char *)_os_log_send_and_compose_impl();
  sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::findAllDigitizedRoadsUsingRoadBuffer(const CLMapRoadPtr, BOOL, double, std::vector<CLMapRoadWithDirection> &, BOOL) const", "CoreLocation: %s\n", v183);
  if (v183 != buf) {
    free(v183);
  }
LABEL_75:
  uint64_t v18 = 0;
LABEL_313:
  *(void *)__n128 buf = &v206;
  sub_1906C6BF0((void ***)buf);
  sub_190770ADC(v209);
LABEL_314:
  if (v205) {
    sub_1906BFE48(v205);
  }
  return v18;
}

void sub_190855EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  STACK[0x2A0] = (unint64_t)&a27;
  sub_1906C6BF0((void ***)&STACK[0x2A0]);
  sub_190770ADC(&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_190856014(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v1 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_ERROR, "CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection - Code not implemented", buf, 2u);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1)
      {
LABEL_16:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "CoreLocation: %s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
LABEL_18:
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v3 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v8 = v4;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
  }
  return 0;
}

unint64_t sub_1908562A0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, double a5, double a6)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  double v12 = (void *)MEMORY[0x192FCF260]();
  uint64_t v13 = *a3;
  if (!*a3)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    int v22 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED,input road is nullptr", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_119;
    }
    goto LABEL_130;
  }
  sub_19082373C(*a3);
  double v14 = *(double *)(v13 + 40);
  if (v14 <= 0.0)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    unint64_t v23 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_ERROR, "#Warning,CLMMPED, road length is 0.0", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 == -1) {
      goto LABEL_119;
    }
LABEL_130:
    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
LABEL_119:
    LOWORD(v68[0]) = 0;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v21);
    goto LABEL_120;
  }
  double v15 = (std::__shared_weak_count *)*a3;
  if ((int)((*(void *)(*a3 + 144) - *(void *)(*a3 + 136)) >> 4) <= 1)
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v16 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v17 = *(void *)*a3;
      uint64_t v18 = (int)((uint64_t)(*(void *)(*a3 + 144) - *(void *)(*a3 + 136)) >> 4);
      *(_DWORD *)__n128 buf = 134283777;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v70 = 2050;
      uint64_t v71 = v18;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEBUG, "#Warning,CLMMPED,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x16u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_24;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v19 = *(void *)*a3;
    uint64_t v20 = (int)((uint64_t)(*(void *)(*a3 + 144) - *(void *)(*a3 + 136)) >> 4);
    LODWORD(v68[0]) = 134283777;
    *(uint64_t *)((char *)v68 + 4) = v19;
    WORD2(v68[1]) = 2050;
    *(uint64_t *)((char *)&v68[1] + 6) = v20;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v21);
LABEL_120:
    if (v21 != buf) {
      free(v21);
    }
LABEL_24:
    LOBYTE(v24) = 0;
    return v24 & 1;
  }
  double v26 = fabs(a6);
  int v27 = *((unsigned __int8 *)a3 + 20);
  double v28 = 1.0 - a5;
  if (*((unsigned char *)a3 + 20))
  {
    if (a6 < 0.0) {
      double v28 = a5;
    }
    double v29 = v28 * v14;
    if (v28 * v14 <= v26)
    {
      char v63 = 0;
      if (a6 < 0.0) {
        double v30 = 0.0;
      }
      else {
        double v30 = 1.0;
      }
      goto LABEL_42;
    }
  }
  else
  {
    if (a6 >= 0.0) {
      double v28 = a5;
    }
    double v29 = v28 * v14;
    if (v28 * v14 <= v26)
    {
      char v63 = 0;
      if (a6 >= 0.0) {
        double v30 = 0.0;
      }
      else {
        double v30 = 1.0;
      }
      goto LABEL_42;
    }
  }
  double v31 = a6 / v14;
  if (!*((unsigned char *)a3 + 20)) {
    double v31 = -v31;
  }
  double v30 = v31 + a5;
  char v63 = 1;
LABEL_42:
  memset(v68, 0, 24);
  if ((a4 & 0x80000000) == 0 && v29 <= v26)
  {
    uint64_t v32 = (std::__shared_weak_count *)a3[1];
    v67[0] = v15;
    v67[1] = v32;
    if (v32)
    {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      int v27 = *((unsigned __int8 *)a3 + 20);
    }
    char v33 = sub_190854120(a1, v67, v27 != 0, v68, 1, 10.0);
    if (v32) {
      sub_1906BFE48(v32);
    }
    if ((v33 & 1) == 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      int v34 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_DEBUG, "CLMMPED,Warning,moveOnRoad,findAllDigitizedRoads returned false", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        LOWORD(v66) = 0;
        int v62 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v62);
        if (v62 != buf) {
          free(v62);
        }
      }
    }
  }
  if (a6 >= 0.0 || (uint64_t v35 = v68[0], v36 = v68[1], v68[0] == v68[1]))
  {
    LODWORD(v24) = -1;
  }
  else
  {
    int v37 = 0;
    LODWORD(v24) = -1;
    do
    {
      uint64_t v39 = *(void **)v35;
      int v38 = *(std::__shared_weak_count **)(v35 + 8);
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v40 = a2;
      while (1)
      {
        uint64_t v40 = *(void *)(v40 + 8);
        if (v40 == a2) {
          break;
        }
        if (*(void *)(v40 + 16) == *v39 && (*(unsigned char *)(v40 + 24) & 1) == *(unsigned char *)(v35 + 16))
        {
          LODWORD(v24) = v37;
          break;
        }
      }
      if (v38) {
        sub_1906BFE48(v38);
      }
      if ((v24 & 0x80000000) == 0) {
        break;
      }
      ++v37;
      v35 += 24;
    }
    while (v35 != v36);
  }
  if ((v63 & 1) != 0
    || (a6 < 0.0 ? (BOOL v46 = v24 == -1) : (BOOL v46 = 0),
        !v46 ? (int v47 = 0) : (int v47 = 1),
        a4 < 0 || (uint64_t v48 = v68[0], v68[1] == v68[0]) || v47))
  {
    uint64_t v42 = (std::__shared_weak_count *)a3[1];
    v64[0] = *a3;
    v64[1] = (uint64_t)v42;
    double v65 = 0.0;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v24) = sub_190856D88((double *)(a1 + 56), v64, (double *)&v66, &v65, v30);
    if (v42) {
      sub_1906BFE48(v42);
    }
    if (v24)
    {
      *((double *)a3 + 6) = v30;
      *((_OWORD *)a3 + 2) = v66;
      float v43 = v65;
      *((float *)a3 + 6) = v43;
      if (!*((unsigned char *)a3 + 20))
      {
        double v44 = fmod((float)(v43 + 180.0), 360.0);
        if (v44 < 0.0) {
          double v44 = v44 + 360.0;
        }
        float v45 = v44;
        *((float *)a3 + 6) = v45;
      }
    }
    else
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      long long v51 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v51, OS_LOG_TYPE_DEBUG, "#Warning CLMMPED,moveOnRoadInternal,interpolateProjections returned false", buf, 2u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        int v61 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "CoreLocation: %s\n", v61);
        if (v61 != buf) {
          free(v61);
        }
      }
    }
    int v52 = 0;
    goto LABEL_116;
  }
  double v49 = -v29;
  if (a6 < 0.0) {
    double v49 = v29;
  }
  double v50 = v49 + a6;
  if ((v24 & 0x80000000) != 0)
  {
    unsigned int v53 = sub_19076E340(a1 + 96);
    uint64_t v48 = v68[0];
    unint64_t v24 = v53 % (0xAAAAAAAAAAAAAAABLL * ((v68[1] - v68[0]) >> 3));
    goto LABEL_104;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v68[1] - v68[0]) >> 3) > v24)
  {
    unint64_t v24 = v24;
LABEL_104:
    unint64_t v54 = v48 + 24 * v24;
    int v55 = *(unsigned __int8 *)(v54 + 16);
    uint64_t v57 = *(void **)v54;
    uint64_t v56 = *(void **)(v54 + 8);
    if (v56) {
      atomic_fetch_add_explicit(v56 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v58 = (std::__shared_weak_count *)a3[1];
    *a3 = (uint64_t)v57;
    a3[1] = (uint64_t)v56;
    if (v58)
    {
      sub_1906BFE48(v58);
      uint64_t v48 = v68[0];
    }
    LOBYTE(v24) = *(unsigned char *)(v48 + 24 * v24 + 16);
    *((unsigned char *)a3 + 20) = v24;
    if (v55)
    {
      double v30 = 0.0;
    }
    else
    {
      double v59 = fmod((float)(*((float *)a3 + 6) + 180.0), 360.0);
      if (v59 < 0.0) {
        double v59 = v59 + 360.0;
      }
      float v60 = v59;
      *((float *)a3 + 6) = v60;
      double v30 = 1.0;
    }
    if (a6 < 0.0) {
      *((unsigned char *)a3 + 20) = v24 ^ 1;
    }
  }
  int v52 = 1;
  a6 = v50;
LABEL_116:
  *(void *)__n128 buf = v68;
  sub_190857C10((void ***)buf);
  if (v52) {
    LOBYTE(v24) = sub_1908562A0(a1, a2, a3, (a4 - 1), v30, a6);
  }
  return v24 & 1;
}

void sub_190856D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  a23 = (void **)&a19;
  sub_190857C10(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_190856D88(double *a1, uint64_t *a2, double *a3, double *a4, double a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  int v5 = (void *)*a2;
  if (*a2)
  {
    uint64_t v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      unint64_t v23 = off_1E929F6C8;
      if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", buf, 2u);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      LOWORD(__y[0]) = 0;
    }
    else
    {
      if (v6 == 1) {
        return 1;
      }
      sub_19082373C(*a2);
      uint64_t v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == v6 - 1)
      {
        uint64_t v13 = *a2;
        sub_19082373C(v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(void *)(v13 + 136);
          double v14 = *a3;
          double v15 = a3[1];
          uint64_t v16 = *(void *)(v13 + 136);
          double v17 = *(double *)(v16 + 16);
          double v18 = *(double *)(v16 + 24);
LABEL_51:
          *(void *)__n128 buf = 0;
          __y[0] = 0.0;
          sub_1906DA778(a1, (double *)buf, __y, &v59, v14, v15, 0.0, v17, v18, 0.0);
          double v33 = atan2(__y[0], *(long double *)buf);
          if (v33 < 0.0) {
            double v33 = v33 + 6.28318531;
          }
          double v34 = v33 * 57.2957795;
LABEL_54:
          *a4 = v34;
          return 1;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + 16 * v12);
          uint64_t v32 = *(void *)(v13 + 136) + 16 * v12;
          double v14 = *(double *)(v32 - 16);
          double v15 = *(double *)(v32 - 8);
          double v17 = *a3;
          double v18 = a3[1];
          goto LABEL_51;
        }
        uint64_t v25 = (double *)v5[20];
        double v26 = (double *)v5[21];
        if (v25 != v26)
        {
          double v27 = 0.0;
          int v28 = 2;
          uint64_t v29 = 24;
          while (1)
          {
            double v30 = *v25 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v27 + v30) < 0.000001) {
              break;
            }
            if (v27 + v30 > a5)
            {
              double v48 = (a5 - v27) / v30;
              uint64_t v49 = *(void *)(v13 + 136);
              uint64_t v50 = v49 + v29;
              double v51 = *(double *)(v49 + v29 - 16);
              double v52 = *(double *)(v49 + v29);
              *a3 = *(double *)(v49 + v29 - 24) + (*(double *)(v49 + v29 - 8) - *(double *)(v49 + v29 - 24)) * v48;
              double v53 = v51 + 360.0;
              if (v51 >= 0.0) {
                double v53 = v51;
              }
              double v54 = v52 + 360.0;
              if (v52 >= 0.0) {
                double v54 = v52;
              }
              double v55 = v54 - v53;
              if (v55 <= 180.0)
              {
                if (v55 < -180.0) {
                  double v55 = v55 + 360.0;
                }
              }
              else
              {
                double v55 = v55 + -360.0;
              }
              double v58 = fmod(v51 + v55 * v48, 360.0);
              if (v58 <= -180.0)
              {
                double v58 = v58 + 360.0;
              }
              else if (v58 > 180.0)
              {
                double v58 = v58 + -360.0;
              }
              a3[1] = v58;
              double v14 = *(double *)(v50 - 24);
              double v15 = *(double *)(v49 + v29 - 16);
              double v17 = *(double *)(v50 - 8);
              double v18 = *(double *)(v49 + v29);
              goto LABEL_51;
            }
            ++v25;
            v29 += 16;
            ++v28;
            double v27 = v27 + v30;
            if (v25 == v26) {
              goto LABEL_42;
            }
          }
          if (v28 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + v29 - 8);
            uint64_t v35 = *(void *)(v13 + 136) + v29;
            double v36 = *(double *)(v35 - 24);
            double v37 = *(double *)(v35 - 16);
            double v38 = *a3;
            double v39 = a3[1];
            *(void *)__n128 buf = 0;
            __y[0] = 0.0;
            sub_1906DA778(a1, (double *)buf, __y, &v59, v36, v37, 0.0, v38, v39, 0.0);
            double v40 = atan2(__y[0], *(long double *)buf);
            if (v40 < 0.0) {
              double v40 = v40 + 6.28318531;
            }
            double v41 = v40 * 57.2957795;
            double v42 = *a3;
            double v43 = a3[1];
            uint64_t v44 = *(void *)(v13 + 136) + v29;
            double v45 = *(double *)(v44 + 8);
            double v46 = *(double *)(v44 + 16);
            *(void *)__n128 buf = 0;
            __y[0] = 0.0;
            sub_1906DA778(a1, (double *)buf, __y, &v59, v42, v43, 0.0, v45, v46, 0.0);
            double v47 = atan2(__y[0], *(long double *)buf);
            if (v47 < 0.0) {
              double v47 = v47 + 6.28318531;
            }
            sub_190715278(v41, v47 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_1E929F6C0 != -1) {
            dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
          }
          uint64_t v56 = off_1E929F6C8;
          if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__n128 buf = 0;
            _os_log_impl(&dword_1906B8000, v56, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", buf, 2u);
          }
          int v57 = sub_1906CB57C(115, 0);
          uint64_t result = 0;
          if (v57)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6C0 != -1) {
              dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
            }
            LOWORD(__y[0]) = 0;
LABEL_15:
            int v22 = (uint8_t *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n");
LABEL_33:
            if (v22 != buf) {
              free(v22);
            }
            return 0;
          }
          return result;
        }
LABEL_42:
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        double v31 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v31, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", buf, 2u);
        }
        uint64_t result = sub_1906CB57C(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        LOWORD(__y[0]) = 0;
      }
      else
      {
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        unint64_t v24 = off_1E929F6C8;
        if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", buf, 2u);
        }
        uint64_t result = sub_1906CB57C(115, 2);
        if (!result) {
          return result;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6C0 != -1) {
          dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
        }
        LOWORD(__y[0]) = 0;
      }
    }
    int v22 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "CoreLocation: %s\n");
    goto LABEL_33;
  }
  if (qword_1E929F6C0 != -1) {
    dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
  }
  uint64_t v19 = off_1E929F6C8;
  if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_ERROR, "CLMM, NULL road", buf, 2u);
  }
  int v20 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v20)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    LOWORD(__y[0]) = 0;
    goto LABEL_15;
  }
  return result;
}

unint64_t sub_1908575EC(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    double v5 = 1050.0;
    if (a4 <= 1050.0)
    {
      double v5 = a4;
      if (a4 < -1050.0) {
        double v5 = -1050.0;
      }
    }
    double v6 = *((double *)a2 + 6);
    return sub_1908562A0(a1, a3, a2, 30, v6, v5);
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    uint64_t v8 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v12 = v9;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometryPedestrian::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, const CLMapGeometry::RoadInfoList &) const", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
}

void sub_19085782C(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2)
    {
      uint64_t v3 = v2 + 288;
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1907416A8(v3, Current, 0.5, 0.5);
    }
    double v5 = *(double *)(a1 + 8);
    sub_1907416A8(a1 + 2616, v5, 60.0, 60.0);
  }
  else
  {
    if (qword_1E929F6C0 != -1) {
      dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
    }
    double v6 = off_1E929F6C8;
    if (os_log_type_enabled((os_log_t)off_1E929F6C8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v10 = v7;
      _os_log_impl(&dword_1906B8000, v6, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometryPedestrian geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6C0 != -1) {
        dispatch_once(&qword_1E929F6C0, &unk_1EE006060);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "virtual void CLGeoMapFeatureAccessGeometryPedestrian::clearStoredStaleConnections()", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_190857A60(uint64_t a1)
{
  sub_1908111B8(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_190857A98(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2648)) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t sub_190857AAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 2648);
}

os_log_t sub_190857AB4()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "MapMatcher");
  off_1E929F6C8 = result;
  return result;
}

void sub_190857AE4(uint64_t a1, uint64_t a2)
{
}

void sub_190857AF4(uint64_t a1)
{
}

void sub_190857B00()
{
}

__n128 sub_190857B14(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EE003160;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_190857B68(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EE003160;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_190857BA0(uint64_t a1, void *a2)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 8) + 2600), "findRoadsNear:radius:handler:completionHandler:", **(void **)(a1 + 32), *a2, **(double **)(a1 + 16), *(double *)(*(void *)(a1 + 16) + 8), **(double **)(a1 + 24));
}

uint64_t sub_190857BC4(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE002F50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_190857C04()
{
  return &unk_1EE002F50;
}

void sub_190857C10(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        double v6 = (std::__shared_weak_count *)*((void *)v4 - 2);
        if (v6) {
          sub_1906BFE48(v6);
        }
        v4 -= 24;
      }
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_190857C98(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v6 = a2[1];
  }
  else
  {
    uint64_t v5 = result[1];
    uint64_t v6 = a2[1];
    do
    {
      uint64_t v7 = *(void *)(v5 - 24);
      v5 -= 24;
      *(void *)(v6 - 24) = v7;
      v6 -= 24;
      uint64_t v8 = *(void *)(v5 + 8);
      *(void *)(v6 + 8) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      *(unsigned char *)(v4 - 8) = *(unsigned char *)(v3 - 8);
      uint64_t v4 = v6;
      uint64_t v3 = v5;
    }
    while (v5 != v2);
  }
  a2[1] = v6;
  uint64_t v9 = *result;
  *__n128 result = v6;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_190857D2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 24;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 16);
    if (v4)
    {
      sub_1906BFE48(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_190857D8C()
{
  if (qword_1EB272588 != -1) {
    dispatch_once(&qword_1EB272588, &unk_1EE006080);
  }
  return qword_1EB272580;
}

void sub_190857DD0()
{
}

std::string *sub_190857E8C(std::string *result, std::string *__str)
{
  if (!result->__r_.__value_.__s.__data_[0]) {
    return result;
  }
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = (std::string *)&result->__r_.__value_.__r.__words[1];
  std::string::value_type v5 = result[1].__r_.__value_.__s.__data_[7];
  if ((v5 & 0x80000000) == 0)
  {
    if (!result[1].__r_.__value_.__s.__data_[7]) {
      goto LABEL_24;
    }
LABEL_6:
    uint64_t v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if ((v6 & 0x80u) == 0) {
      std::string::size_type v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v8 = __str->__r_.__value_.__l.__size_;
    }
    if (v5 >= 0) {
      std::string::size_type v9 = result[1].__r_.__value_.__s.__data_[7];
    }
    else {
      std::string::size_type v9 = result->__r_.__value_.__r.__words[2];
    }
    if (v8 == v9)
    {
      if (v5 >= 0) {
        uint64_t v10 = &result->__r_.__value_.__s.__data_[8];
      }
      else {
        uint64_t v10 = (std::string::value_type *)v4->__r_.__value_.__r.__words[0];
      }
      if ((v6 & 0x80) == 0)
      {
        if (v6)
        {
          uint64_t v11 = __str;
          while (v11->__r_.__value_.__s.__data_[0] == *v10)
          {
            uint64_t v11 = (std::string *)((char *)v11 + 1);
            ++v10;
            if (!--v6) {
              goto LABEL_27;
            }
          }
          goto LABEL_23;
        }
LABEL_27:
        ++*(_DWORD *)(v3 + 288);
        return result;
      }
      __n128 result = (std::string *)memcmp(__str->__r_.__value_.__l.__data_, v10, size);
      if (!result) {
        goto LABEL_27;
      }
    }
LABEL_23:
    sub_190857FDC((unsigned char *)v3);
    MEMORY[0x192FCE920](v4, "");
    *(void *)(v3 + 136) = 0;
    *(void *)(v3 + 144) = 0;
    *(_DWORD *)(v3 + 152) = 0;
    *(void *)(v3 + 168) = 0;
    *(void *)(v3 + 176) = 0;
    *(void *)(v3 + 160) = 0;
    *(void *)(v3 + 216) = 0;
    *(void *)(v3 + 224) = 0;
    *(_DWORD *)(v3 + 232) = 0;
    *(void *)(v3 + 248) = 0;
    *(void *)(v3 + 256) = 0;
    *(void *)(v3 + 240) = 0;
    *(_DWORD *)(v3 + 288) = 0;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
    goto LABEL_24;
  }
  if (result->__r_.__value_.__r.__words[2]) {
    goto LABEL_6;
  }
LABEL_24:

  return std::string::operator=(v4, __str);
}

void sub_190857FDC(unsigned char *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    AnalyticsSendEventLazy();
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006240);
    }
    uint64_t v1 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v1, OS_LOG_TYPE_DEFAULT, "CLTSP,Analytics Submitted", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006240);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentAnalytics::submitStats()", "CoreLocation: %s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
}

void sub_1908581C4(uint64_t a1, void *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a2 && *(unsigned char *)a1)
  {
    *(_DWORD *)(a1 + 36) += objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count");
    objc_msgSend(a2, "distance_m");
    *(_DWORD *)(a1 + 44) += (int)v4;
    objc_msgSend(a2, "duration_s");
    *(_DWORD *)(a1 + 40) += (int)v5;
    *(_DWORD *)float v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    int v63 = 0;
    long long v64 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v66 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    uint64_t v6 = (void *)[a2 tripLocations];
    uint64_t v7 = [v6 countByEnumeratingWithState:&v56 objects:v67 count:16];
    double v54 = a2;
    if (v7)
    {
      std::string::size_type v8 = 0;
      uint64_t v9 = *(void *)v57;
      double v55 = 0.0;
      double v10 = 0.0;
      double v11 = 0.0;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          uint64_t v13 = v8;
          if (*(void *)v57 != v9) {
            objc_enumerationMutation(v6);
          }
          std::string::size_type v8 = *(void **)(*((void *)&v56 + 1) + 8 * i);
          objc_msgSend(v8, "speed", v54);
          if (v14 < 0.0
            || ([v8 speedAccuracy], v15 <= 0.0)
            || ([v8 speed], (v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            || ([v8 speedAccuracy], (v17 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
          {
            ++*(_DWORD *)(a1 + 112);
          }
          [v8 course];
          if (v18 < 0.0
            || ([v8 courseAccuracy], v19 <= 0.0)
            || ([v8 course], (v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
            || ([v8 courseAccuracy], (v21 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
          {
            ++*(_DWORD *)(a1 + 116);
          }
          if ([v8 isOriginalLocationType]) {
            ++*(_DWORD *)(a1 + 56);
          }
          if ([v8 isInertialIntegrated]) {
            ++*(_DWORD *)(a1 + 64);
          }
          if ([v8 isLinearInterpolated]) {
            ++*(_DWORD *)(a1 + 60);
          }
          if ([v8 isMapMatched]) {
            ++*(_DWORD *)(a1 + 68);
          }
          if (v13)
          {
            objc_msgSend((id)objc_msgSend(v8, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v13, "timestamp"));
            double v23 = v22;
            sub_1907E4A54((char *)(a1 + 208), v22);
            if (v23 > 0.0)
            {
              [v8 speed];
              double v24 = 0.0;
              if (v25 >= 0.0)
              {
                [v13 speed];
                if (v26 >= 0.0)
                {
                  [v8 speed];
                  double v28 = v27;
                  [v13 speed];
                  double v24 = v28 - v29;
                }
              }
              [v8 altitude];
              double v31 = v30;
              [v13 altitude];
              double v33 = v32;
              [v13 speed];
              double v35 = v34;
              [v13 speed];
              double v37 = v35 * v36;
              if (v24 > 0.0)
              {
                [v8 speed];
                double v39 = v38;
                [v8 speed];
                double v55 = v55 + -(v37 - v39 * v40) * 0.5;
              }
              if (v31 - v33 <= 0.0) {
                double v41 = -0.0;
              }
              else {
                double v41 = v31 - v33;
              }
              [v13 speed];
              double v43 = v42;
              [v13 speed];
              double v45 = v44;
              sub_1907E4A54(v60, v24 / v23);
              double v10 = v10 + v41;
              double v11 = v11 + (v37 * v43 + v37 * 1.5 * v24 + v45 * (v24 * v24) + v24 * (v24 * v24) * 0.25) * v23;
            }
          }
        }
        uint64_t v7 = [v6 countByEnumeratingWithState:&v56 objects:v67 count:16];
      }
      while (v7);
    }
    else
    {
      double v55 = 0.0;
      double v10 = 0.0;
      double v11 = 0.0;
    }
    double v46 = v54;
    objc_msgSend(v54, "distance_m", v54);
    if (v47 > 0.0)
    {
      objc_msgSend(v46, "distance_m");
      *(double *)(a1 + 296) = v55 / v48;
      objc_msgSend(v46, "distance_m");
      *(double *)(a1 + 320) = sqrt(v11 / v49);
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v46, "tripLocations"), "lastObject"), "altitude");
      double v51 = v50;
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(v46, "tripLocations"), "firstObject"), "altitude");
      *(double *)(a1 + 304) = v10;
      *(double *)(a1 + 312) = v51 - v52;
      uint64_t v53 = v64;
      *(void *)(a1 + 328) = v61;
      *(void *)(a1 + 336) = v53;
    }
    if (__p[1])
    {
      *(void **)&long long v66 = __p[1];
      operator delete(__p[1]);
    }
  }
}

void sub_19085865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190858698(uint64_t a1)
{
  v53[32] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  v52[0] = @"modeOfTransport";
  v53[0] = [NSNumber numberWithInteger:*(void *)(v1 + 48)];
  v52[1] = @"breadcrumbCount";
  v53[1] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 32)];
  v52[2] = @"tripSegmentDuration";
  v53[2] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 40)];
  v52[3] = @"tripSegmentDistance";
  v53[3] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 44)];
  v52[4] = @"tripSegmentReconstructedLocCount";
  v53[4] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 36)];
  v52[5] = @"originalLocationPercentage";
  int v2 = *(_DWORD *)(v1 + 36);
  double v3 = 0.0;
  double v4 = 0.0;
  if (v2)
  {
    double v5 = (double)*(int *)(v1 + 56) / (double)v2 * 100.0;
    BOOL v6 = v5 > 1.0 || v5 <= 0.0;
    double v4 = (double)(int)llround(v5);
    if (!v6) {
      double v4 = 1.0;
    }
  }
  v53[5] = [NSNumber numberWithDouble:v4];
  void v52[6] = @"linearInterpolationPercentage";
  int v7 = *(_DWORD *)(v1 + 36);
  if (v7)
  {
    double v8 = (double)*(int *)(v1 + 60) / (double)v7 * 100.0;
    BOOL v9 = v8 > 1.0 || v8 <= 0.0;
    int v10 = llround(v8);
    if (v9) {
      double v3 = (double)v10;
    }
    else {
      double v3 = 1.0;
    }
  }
  v53[6] = [NSNumber numberWithDouble:v3];
  v52[7] = @"inertialIntegrationPercentgae";
  int v11 = *(_DWORD *)(v1 + 36);
  double v12 = 0.0;
  double v13 = 0.0;
  if (v11)
  {
    double v14 = (double)*(int *)(v1 + 64) / (double)v11 * 100.0;
    BOOL v15 = v14 > 1.0 || v14 <= 0.0;
    double v13 = (double)(int)llround(v14);
    if (!v15) {
      double v13 = 1.0;
    }
  }
  v53[7] = [NSNumber numberWithDouble:v13];
  v52[8] = @"mapmatchedPercentage";
  int v16 = *(_DWORD *)(v1 + 36);
  if (v16)
  {
    double v17 = (double)*(int *)(v1 + 68) / (double)v16 * 100.0;
    BOOL v18 = v17 > 1.0 || v17 <= 0.0;
    int v19 = llround(v17);
    if (v18) {
      double v12 = (double)v19;
    }
    else {
      double v12 = 1.0;
    }
  }
  v53[8] = [NSNumber numberWithDouble:v12];
  v52[9] = @"mapmatcherSegmentCount";
  v53[9] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 72)];
  unsigned char v52[10] = @"aStarAttemptCount";
  v53[10] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 76)];
  v52[11] = @"aStarRejectedPercentage";
  int v20 = *(_DWORD *)(v1 + 76);
  double v21 = 0.0;
  double v22 = 0.0;
  if (v20)
  {
    double v23 = (double)*(int *)(v1 + 92) / (double)v20 * 100.0;
    BOOL v24 = v23 > 1.0 || v23 <= 0.0;
    double v22 = (double)(int)llround(v23);
    if (!v24) {
      double v22 = 1.0;
    }
  }
  v53[11] = [NSNumber numberWithDouble:v22];
  v52[12] = @"aStarFailurePercentage";
  int v25 = *(_DWORD *)(v1 + 76);
  if (v25)
  {
    double v26 = (double)*(int *)(v1 + 80) / (double)v25 * 100.0;
    BOOL v27 = v26 > 1.0 || v26 <= 0.0;
    int v28 = llround(v26);
    if (v27) {
      double v21 = (double)v28;
    }
    else {
      double v21 = 1.0;
    }
  }
  v53[12] = [NSNumber numberWithDouble:v21];
  v52[13] = @"astarRoadCountExceededMaxPercentage";
  int v29 = *(_DWORD *)(v1 + 76);
  double v30 = 0.0;
  double v31 = 0.0;
  if (v29)
  {
    double v32 = (double)*(int *)(v1 + 84) / (double)v29 * 100.0;
    BOOL v33 = v32 > 1.0 || v32 <= 0.0;
    double v31 = (double)(int)llround(v32);
    if (!v33) {
      double v31 = 1.0;
    }
  }
  v53[13] = [NSNumber numberWithDouble:v31];
  v52[14] = @"astarIterationExceededMaxPercentage";
  int v34 = *(_DWORD *)(v1 + 76);
  if (v34)
  {
    double v35 = (double)*(int *)(v1 + 88) / (double)v34 * 100.0;
    BOOL v36 = v35 > 1.0 || v35 <= 0.0;
    int v37 = llround(v35);
    if (v36) {
      double v30 = (double)v37;
    }
    else {
      double v30 = 1.0;
    }
  }
  v53[14] = [NSNumber numberWithDouble:v30];
  v52[15] = @"astarMaxIterations";
  v53[15] = [NSNumber numberWithDouble:*(double *)(v1 + 136)];
  v52[16] = @"astarAvgIterations";
  v53[16] = [NSNumber numberWithDouble:*(double *)(v1 + 160)];
  v52[17] = @"aStarProcessingTime";
  v53[17] = [NSNumber numberWithDouble:*(double *)(v1 + 96)];
  v52[18] = @"mapDataQueryCount";
  v53[18] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 104)];
  v52[19] = @"mapDataUnavailablePercentage";
  int v38 = *(_DWORD *)(v1 + 104);
  double v39 = 0.0;
  double v40 = 0.0;
  if (v38)
  {
    double v41 = (double)*(int *)(v1 + 108) / (double)v38 * 100.0;
    BOOL v42 = v41 > 1.0 || v41 <= 0.0;
    double v40 = (double)(int)llround(v41);
    if (!v42) {
      double v40 = 1.0;
    }
  }
  v53[19] = [NSNumber numberWithDouble:v40];
  v52[20] = @"maxTimeBetweenEpochs";
  v53[20] = [NSNumber numberWithDouble:*(double *)(v1 + 216)];
  v52[21] = @"avgTimeBetweenEpochs";
  v53[21] = [NSNumber numberWithDouble:*(double *)(v1 + 240)];
  v52[22] = @"invalidSpeedPercentage";
  int v43 = *(_DWORD *)(v1 + 36);
  if (v43)
  {
    double v44 = (double)*(int *)(v1 + 112) / (double)v43 * 100.0;
    BOOL v45 = v44 > 1.0 || v44 <= 0.0;
    int v46 = llround(v44);
    if (v45) {
      double v39 = (double)v46;
    }
    else {
      double v39 = 1.0;
    }
  }
  v53[22] = [NSNumber numberWithDouble:v39];
  v52[23] = @"invalidCoursePercentage";
  int v47 = *(_DWORD *)(v1 + 36);
  if (v47)
  {
    double v48 = (double)*(int *)(v1 + 112) / (double)v47 * 100.0;
    BOOL v49 = v48 > 1.0 || v48 <= 0.0;
    double v50 = (double)(int)llround(v48);
    if (!v49) {
      double v50 = 1.0;
    }
  }
  else
  {
    double v50 = 0.0;
  }
  v53[23] = [NSNumber numberWithDouble:v50];
  v52[24] = @"tripChunksCount";
  v53[24] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 288)];
  v52[25] = @"processingTime";
  v53[25] = [NSNumber numberWithDouble:*(double *)(v1 + 120)];
  v52[26] = @"kineticEnergyCycling";
  v53[26] = [NSNumber numberWithDouble:*(double *)(v1 + 296)];
  v52[27] = @"characteristicSpeed";
  v53[27] = [NSNumber numberWithDouble:*(double *)(v1 + 320)];
  v52[28] = @"netElevationGain";
  v53[28] = [NSNumber numberWithDouble:*(double *)(v1 + 312)];
  v52[29] = @"grossElevationGain";
  v53[29] = [NSNumber numberWithDouble:*(double *)(v1 + 304)];
  v52[30] = @"maxAcceleration";
  v53[30] = [NSNumber numberWithDouble:*(double *)(v1 + 328)];
  v52[31] = @"averageAcceleration";
  v53[31] = [NSNumber numberWithDouble:*(double *)(v1 + 336)];
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v53 forKeys:v52 count:32];
}

void sub_190858D70(uint64_t a1)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)a1)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006240);
    }
    int v2 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
    {
      double v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        double v3 = (void *)*v3;
      }
      int v4 = *(_DWORD *)(a1 + 36);
      float64x2_t v5 = 0uLL;
      if (v4)
      {
        long long v6 = *(_OWORD *)(a1 + 56);
        v7.i64[0] = SDWORD2(v6);
        v7.i64[1] = SHIDWORD(v6);
        float64x2_t v8 = vcvtq_f64_s64(v7);
        v7.i64[0] = (int)v6;
        v7.i64[1] = SDWORD1(v6);
        float64x2_t v9 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v4), 0);
        float64x2_t v10 = vdivq_f64(vcvtq_f64_s64(v7), v9);
        float64x2_t v11 = vdivq_f64(v8, v9);
        float64x2_t v12 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        float64x2_t v13 = vmulq_f64(v11, v12);
        float64x2_t v14 = vmulq_f64(v10, v12);
      }
      else
      {
        float64x2_t v14 = 0uLL;
        float64x2_t v13 = 0uLL;
      }
      int v15 = *(_DWORD *)(a1 + 76);
      if (v15)
      {
        long long v16 = *(_OWORD *)(a1 + 80);
        v17.i64[0] = SDWORD2(v16);
        v17.i64[1] = SHIDWORD(v16);
        float64x2_t v18 = vcvtq_f64_s64(v17);
        v17.i64[0] = (int)v16;
        v17.i64[1] = SDWORD1(v16);
        float64x2_t v19 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v15), 0);
        float64x2_t v20 = vdivq_f64(vcvtq_f64_s64(v17), v19);
        float64x2_t v21 = vdivq_f64(v18, v19);
        float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
        float64x2_t v23 = vmulq_f64(v21, v22);
        float64x2_t v5 = vmulq_f64(v20, v22);
      }
      else
      {
        float64x2_t v23 = 0uLL;
      }
      int v24 = *(_DWORD *)(a1 + 104);
      if (v24) {
        double v25 = (double)*(int *)(a1 + 108) / (double)v24 * 100.0;
      }
      else {
        double v25 = 0.0;
      }
      int v26 = *(_DWORD *)(a1 + 44);
      int v27 = *(_DWORD *)(a1 + 48);
      int v28 = *(_DWORD *)(a1 + 32);
      int v29 = *(_DWORD *)(a1 + 40);
      int v30 = *(_DWORD *)(a1 + 72);
      uint64_t v31 = *(void *)(a1 + 136);
      uint64_t v32 = *(void *)(a1 + 160);
      uint64_t v33 = *(void *)(a1 + 96);
      uint64_t v34 = *(void *)(a1 + 216);
      uint64_t v35 = *(void *)(a1 + 240);
      if (v4)
      {
        uint64_t v36 = *(void *)(a1 + 112);
        v37.i64[0] = (int)v36;
        v37.i64[1] = SHIDWORD(v36);
        float64x2_t v38 = vmulq_f64(vdivq_f64(vcvtq_f64_s64(v37), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v4), 0)), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL));
      }
      else
      {
        float64x2_t v38 = 0uLL;
      }
      int v39 = *(_DWORD *)(a1 + 288);
      uint64_t v40 = *(void *)(a1 + 120);
      *(_DWORD *)__n128 buf = 136452866;
      int v43 = v3;
      __int16 v44 = 1026;
      int v45 = v27;
      __int16 v46 = 1026;
      int v47 = v28;
      __int16 v48 = 1026;
      int v49 = v29;
      __int16 v50 = 1026;
      int v51 = v26;
      __int16 v52 = 1026;
      int v53 = v4;
      __int16 v54 = 2050;
      float64_t v55 = v14.f64[0];
      __int16 v56 = 2050;
      float64_t v57 = v14.f64[1];
      __int16 v58 = 2050;
      float64_t v59 = v13.f64[0];
      __int16 v60 = 2050;
      float64_t v61 = v13.f64[1];
      __int16 v62 = 1026;
      int v63 = v30;
      __int16 v64 = 1026;
      int v65 = v15;
      __int16 v66 = 2050;
      float64_t v67 = v23.f64[1];
      __int16 v68 = 2050;
      float64_t v69 = v5.f64[0];
      __int16 v70 = 2050;
      float64_t v71 = v5.f64[1];
      __int16 v72 = 2050;
      float64_t v73 = v23.f64[0];
      __int16 v74 = 2050;
      uint64_t v75 = v31;
      __int16 v76 = 2050;
      uint64_t v77 = v32;
      __int16 v78 = 2050;
      uint64_t v79 = v33;
      __int16 v80 = 1026;
      int v81 = v24;
      __int16 v82 = 2050;
      double v83 = v25;
      __int16 v84 = 2050;
      uint64_t v85 = v34;
      __int16 v86 = 2050;
      uint64_t v87 = v35;
      __int16 v88 = 2050;
      float64_t v89 = v38.f64[0];
      __int16 v90 = 2050;
      float64_t v91 = v38.f64[1];
      __int16 v92 = 1026;
      int v93 = v39;
      __int16 v94 = 2050;
      uint64_t v95 = v40;
      _os_log_impl(&dword_1906B8000, v2, OS_LOG_TYPE_DEFAULT, "CLTSP,Analytics,tripID,%{public}s,modeOfTransport,%{public}d,bcCount,%{public}d,tripDuration,%{public}d,tripDistance,%{public}d,reconstructedCount,%{public}d,origPct,%{public}.2lf,liPct,%{public}.2lf,iiPct,%{public}.2lf,miPct,%{public}.2lf,miSegments,%{public}d,astarAttemptCount,%{public}d,miRouteRejectedPct,%{public}.2lf,astarFailPct,%{public}.2lf,astarIterationExceededMaxPct,%{public}.2lf,astarRoadCountExceededMaxPct,%{public}.2lf,astarMaxIterations,%{public}.2lf,astarAvgIterations,%{public}.2lf,astarProcessingTime,%{public}.2lf,mapQueryCount,%{public}d,mapFailPct,%{public}.2lf,maxTimeBetweenEpochs,%{public}.2lf,avgTimeBetweenEpochs,%{public}.2lf,invalidSpeedPct,%{public}.2lf,invalidCoursePct,%{public}.2lf,tripChunksCount,%{public}d,processingTime,%{public}.2lf", buf, 0xECu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006240);
      }
      double v41 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentAnalytics::debugLog()", "CoreLocation: %s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
  }
}

uint64_t sub_190859358()
{
  if (qword_1EB272598 != -1) {
    dispatch_once(&qword_1EB272598, &unk_1EE006160);
  }
  return qword_1EB272590;
}

void sub_19085939C()
{
}

void sub_1908594B8(uint64_t a1, void *a2, void *a3, int a4, void *a5, void *a6, double a7)
{
  uint64_t v299 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)a1) {
    return;
  }
  sub_1906D5C70(&__s1, (char *)objc_msgSend((id)objc_msgSend(a2, "UUIDString"), "UTF8String"));
  uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = *(unsigned __int8 *)(a1 + 39);
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a1 + 24);
  }
  if (size != v15) {
    goto LABEL_18;
  }
  if (v16 >= 0) {
    int64x2_t v17 = (unsigned __int8 *)(a1 + 16);
  }
  else {
    int64x2_t v17 = *(unsigned __int8 **)(a1 + 16);
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__s1.__r_.__value_.__l.__data_, v17, __s1.__r_.__value_.__l.__size_))
    {
LABEL_18:
      if (*(int *)(a1 + 608) >= 1) {
        sub_19085A1E4(a1);
      }
    }
  }
  else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    p_s1 = &__s1;
    while (p_s1->__r_.__value_.__s.__data_[0] == *v17)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      ++v17;
      if (!--v13) {
        goto LABEL_20;
      }
    }
    goto LABEL_18;
  }
LABEL_20:
  ++*(_DWORD *)(a1 + 608);
  std::string::operator=((std::string *)(a1 + 16), &__s1);
  objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
  uint64_t v155 = (void *)(a1 + 40);
  MEMORY[0x192FCE920]();
  *(double *)(a1 + 616) = *(double *)(a1 + 616) + a7;
  objc_msgSend(a6, "distance_m");
  *(double *)(a1 + 632) = v19 + *(double *)(a1 + 632);
  *(_DWORD *)(a1 + 640) += objc_msgSend((id)objc_msgSend(a6, "tripLocations"), "count");
  *(_DWORD *)(a1 + 624) += a4;
  unint64_t v156 = (uint64_t *)(a1 + 16);
  *(void *)(a1 + 8) = [a6 modeOfTransport];
  long long v166 = 0u;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v169 = 0u;
  float64x2_t v20 = (void *)[a6 tripLocations];
  uint64_t v21 = [v20 countByEnumeratingWithState:&v166 objects:v298 count:16];
  if (v21)
  {
    uint64_t v22 = *(void *)v167;
    unint64_t v157 = (double *)(a1 + 64);
    obuint64_t j = v20;
    do
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        if (*(void *)v167 != v22) {
          objc_enumerationMutation(obj);
        }
        int v24 = *(void **)(*((void *)&v166 + 1) + 8 * i);
        if ([v24 isMapMatched]) {
          ++*(_DWORD *)(a1 + 584);
        }
        if ([v24 isInertialIntegrated]) {
          ++*(_DWORD *)(a1 + 588);
        }
        if ([v24 isLinearInterpolated]) {
          ++*(_DWORD *)(a1 + 592);
        }
        [v24 speed];
        if (v25 < 0.0) {
          ++*(_DWORD *)(a1 + 596);
        }
        if (*(double *)(a1 + 600) < 0.0 || ([v24 speed], v26 > *(double *)(a1 + 600)))
        {
          [v24 speed];
          *(void *)(a1 + 600) = v27;
        }
        if ([v24 isGPSLocationType])
        {
          if (([v24 isOriginalLocationType] & 1) == 0)
          {
            objc_msgSend((id)objc_msgSend(v24, "timestamp"), "timeIntervalSinceReferenceDate");
            double v29 = v28;
            long long v164 = 0u;
            long long v165 = 0u;
            long long v162 = 0u;
            long long v163 = 0u;
            uint64_t v30 = [a5 countByEnumeratingWithState:&v162 objects:v297 count:16];
            if (v30)
            {
              uint64_t v31 = *(void *)v163;
              while (2)
              {
                for (uint64_t j = 0; j != v30; ++j)
                {
                  if (*(void *)v163 != v31) {
                    objc_enumerationMutation(a5);
                  }
                  uint64_t v33 = *(void **)(*((void *)&v162 + 1) + 8 * j);
                  if ([v33 isGPSLocationType])
                  {
                    if ([v33 isOriginalLocationType])
                    {
                      objc_msgSend((id)objc_msgSend(v33, "timestamp"), "timeIntervalSinceReferenceDate");
                      if (vabdd_f64(v34, v29) < 0.5)
                      {
                        if (v33)
                        {
                          *(void *)__n128 buf = 0;
                          *(void *)int v171 = 0;
                          double v159 = 0.0;
                          double v160 = 0.0;
                          [v24 latitude];
                          double v36 = v35;
                          [v24 longitude];
                          double v38 = v37;
                          [v24 altitude];
                          double v40 = v39;
                          [v33 latitude];
                          double v42 = v41;
                          [v33 longitude];
                          double v44 = v43;
                          [v33 altitude];
                          sub_1906DA778(v157, (double *)buf, (double *)v171, &v161, v36, v38, v40, v42, v44, v45);
                          [v33 latitude];
                          double v47 = v46;
                          [v33 longitude];
                          double v49 = v48;
                          [v33 altitude];
                          double v51 = v50;
                          [v33 course];
                          double v53 = v52;
                          [v24 latitude];
                          double v55 = v54;
                          [v24 longitude];
                          sub_190839A78(v157, &v159, &v160, v47, v49, v51, v53, v55, v56);
                          sub_1907E4A54((char *)(a1 + 104), v159);
                          sub_1907E4A54((char *)(a1 + 184), v160);
                          sub_1907E4A54((char *)(a1 + 264), sqrt(*(double *)v171 * *(double *)v171 + *(double *)buf * *(double *)buf));
                          [v24 altitude];
                          double v58 = v57;
                          [v33 altitude];
                          sub_1907E4A54((char *)(a1 + 424), vabdd_f64(v58, v59));
                          [v24 speed];
                          if (v60 >= 0.0)
                          {
                            [v33 speed];
                            if (v61 >= 0.0)
                            {
                              [v24 speed];
                              double v63 = v62;
                              [v33 speed];
                              sub_1907E4A54((char *)(a1 + 344), vabdd_f64(v63, v64));
                            }
                          }
                          [v24 course];
                          if (v65 >= 0.0)
                          {
                            [v33 course];
                            if (v66 >= 0.0)
                            {
                              [v24 course];
                              double v68 = v67;
                              [v33 course];
                              double v70 = fmod(v68 - v69, 360.0);
                              if (v70 < 0.0) {
                                double v70 = v70 + 360.0;
                              }
                              if (v70 > 180.0) {
                                double v70 = v70 + -360.0;
                              }
                              sub_1907E4A54((char *)(a1 + 504), fabs(v70));
                            }
                          }
                        }
                        goto LABEL_60;
                      }
                    }
                  }
                }
                uint64_t v30 = [a5 countByEnumeratingWithState:&v162 objects:v297 count:16];
                if (v30) {
                  continue;
                }
                break;
              }
            }
          }
        }
LABEL_60:
        ;
      }
      uint64_t v21 = [obj countByEnumeratingWithState:&v166 objects:v298 count:16];
    }
    while (v21);
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006240);
  }
  uint64_t v71 = a1 + 16;
  __int16 v72 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v73 = a1 + 16;
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v73 = *v156;
    }
    __int16 v74 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      __int16 v74 = (void *)*v155;
    }
    double v75 = 0.0;
    double v76 = 0.0;
    if (*(_DWORD *)(a1 + 128)) {
      double v76 = sqrt(*(double *)(a1 + 152));
    }
    if (*(_DWORD *)(a1 + 208)) {
      double v75 = sqrt(*(double *)(a1 + 232));
    }
    int v77 = *(_DWORD *)(a1 + 288);
    double v78 = 0.0;
    double v79 = 0.0;
    if (v77) {
      double v79 = sqrt(*(double *)(a1 + 312));
    }
    if (*(_DWORD *)(a1 + 368)) {
      double v78 = sqrt(*(double *)(a1 + 392));
    }
    double v80 = 0.0;
    double v81 = 0.0;
    if (*(_DWORD *)(a1 + 448)) {
      double v81 = sqrt(*(double *)(a1 + 472));
    }
    if (*(_DWORD *)(a1 + 528)) {
      double v80 = sqrt(*(double *)(a1 + 552));
    }
    int v82 = *(_DWORD *)(a1 + 8);
    uint64_t v83 = *(void *)(a1 + 632);
    double v84 = fabs(*(double *)(a1 + 112));
    double v85 = fabs(*(double *)(a1 + 136));
    double v86 = fabs(*(double *)(a1 + 192));
    double v87 = fabs(*(double *)(a1 + 216));
    uint64_t v88 = *(void *)(a1 + 272);
    uint64_t v89 = *(void *)(a1 + 296);
    double v90 = fabs(*(double *)(a1 + 352));
    double v91 = fabs(*(double *)(a1 + 376));
    double v92 = fabs(*(double *)(a1 + 432));
    double v93 = fabs(*(double *)(a1 + 456));
    double v94 = fabs(*(double *)(a1 + 512));
    double v95 = fabs(*(double *)(a1 + 536));
    uint64_t v96 = *(void *)(a1 + 600);
    int v97 = *(_DWORD *)(a1 + 596);
    int v98 = *(_DWORD *)(a1 + 640);
    if (v98)
    {
      float64x2_t v99 = (float64x2_t)vdupq_n_s64(0x4059000000000000uLL);
      double v100 = (double)*(int *)(a1 + 584) / (double)v98 * 100.0;
      int v101 = llround(v100);
      BOOL v102 = v100 > 1.0 || v100 <= 0.0;
      double v103 = (double)v101;
      if (!v102) {
        double v103 = 1.0;
      }
      uint64_t v104 = *(void *)(a1 + 588);
      v105.i64[0] = (int)v104;
      v105.i64[1] = SHIDWORD(v104);
      float64x2_t v106 = vmulq_f64(vdivq_f64(vcvtq_f64_s64(v105), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v98), 0)), v99);
      __asm { FMOV            V26.2D, #1.0 }
      int8x16_t v112 = vandq_s8((int8x16_t)vcgtzq_f64(v106), (int8x16_t)vcgeq_f64(_Q26, v106));
      *(int32x2_t *)&v106.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(v106)));
      v105.i64[0] = SLODWORD(v106.f64[0]);
      v105.i64[1] = SHIDWORD(v106.f64[0]);
      int8x16_t v113 = vbslq_s8(v112, (int8x16_t)_Q26, (int8x16_t)vcvtq_f64_s64(v105));
    }
    else
    {
      double v103 = 0.0;
      int8x16_t v113 = 0uLL;
    }
    int v114 = *(_DWORD *)(a1 + 624);
    int v115 = *(_DWORD *)(a1 + 608);
    uint64_t v116 = *(void *)(a1 + 616);
    *(_DWORD *)__n128 buf = 136454146;
    *(void *)&uint8_t buf[4] = v73;
    __int16 v235 = 2082;
    long long v236 = v74;
    __int16 v237 = 1026;
    int v238 = v82;
    __int16 v239 = 2050;
    uint64_t v240 = v83;
    __int16 v241 = 2050;
    double v242 = v84;
    __int16 v243 = 2050;
    double v244 = v76;
    __int16 v245 = 2050;
    double v246 = v85;
    __int16 v247 = 2050;
    double v248 = v86;
    __int16 v249 = 2050;
    double v250 = v75;
    __int16 v251 = 2050;
    double v252 = v87;
    __int16 v253 = 2050;
    uint64_t v254 = v88;
    __int16 v255 = 2050;
    double v256 = v79;
    __int16 v257 = 2050;
    uint64_t v258 = v89;
    __int16 v259 = 2050;
    double v260 = v90;
    __int16 v261 = 2050;
    double v262 = v78;
    __int16 v263 = 2050;
    double v264 = v91;
    __int16 v265 = 2050;
    double v266 = v92;
    __int16 v267 = 2050;
    double v268 = v81;
    __int16 v269 = 2050;
    double v270 = v93;
    __int16 v271 = 2050;
    double v272 = v94;
    __int16 v273 = 2050;
    double v274 = v80;
    __int16 v275 = 2050;
    double v276 = v95;
    __int16 v277 = 1026;
    int v278 = v77;
    __int16 v279 = 2050;
    uint64_t v280 = v96;
    __int16 v281 = 1026;
    int v282 = v97;
    __int16 v283 = 2050;
    double v284 = v103;
    __int16 v285 = 2050;
    uint64_t v286 = v113.i64[0];
    __int16 v287 = 2050;
    uint64_t v288 = v113.i64[1];
    __int16 v289 = 1026;
    int v290 = v114;
    __int16 v291 = 1026;
    int v292 = v98;
    __int16 v293 = 1026;
    int v294 = v115;
    __int16 v295 = 2050;
    uint64_t v296 = v116;
    _os_log_impl(&dword_1906B8000, v72, OS_LOG_TYPE_DEFAULT, "CLTSP,AnalyticsSimulated submitted,tripID,%{public}s,simTripID,%{public}s,modeOfTransport,%{public}d,distance,%{public}.2lf,acrossTrackMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,alongTrackMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,horizontalMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,speedMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,altitudeMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,courseMaxRMSAvg,%{public}.2lf,%{public}.2lf,%{public}.2lf,count,%{public}d,maxSpeed,%{public}.2lf,invalidSpeed,%{public}d,mmPCT,%{public}.2lf,iiPCT,%{public}.2lf,liPCT,%{public}.2lf,sparseBreadCrumbCount,%{public}d,reconstructedCount,%{public}d,chunkCount,%{public}d,processingTimeMSec,%{public}.2lf", buf, 0x12Au);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006240);
    }
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v71 = *v156;
    }
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v155 = (void *)*v155;
    }
    double v117 = 0.0;
    double v118 = 0.0;
    if (*(_DWORD *)(a1 + 128)) {
      double v118 = sqrt(*(double *)(a1 + 152));
    }
    if (*(_DWORD *)(a1 + 208)) {
      double v117 = sqrt(*(double *)(a1 + 232));
    }
    int v119 = *(_DWORD *)(a1 + 288);
    double v120 = 0.0;
    double v121 = 0.0;
    if (v119) {
      double v121 = sqrt(*(double *)(a1 + 312));
    }
    if (*(_DWORD *)(a1 + 368)) {
      double v120 = sqrt(*(double *)(a1 + 392));
    }
    double v122 = 0.0;
    double v123 = 0.0;
    if (*(_DWORD *)(a1 + 448)) {
      double v123 = sqrt(*(double *)(a1 + 472));
    }
    if (*(_DWORD *)(a1 + 528)) {
      double v122 = sqrt(*(double *)(a1 + 552));
    }
    int v124 = *(_DWORD *)(a1 + 8);
    uint64_t v125 = *(void *)(a1 + 632);
    double v126 = fabs(*(double *)(a1 + 112));
    double v127 = fabs(*(double *)(a1 + 136));
    double v128 = fabs(*(double *)(a1 + 192));
    double v129 = fabs(*(double *)(a1 + 216));
    uint64_t v130 = *(void *)(a1 + 272);
    uint64_t v131 = *(void *)(a1 + 296);
    double v132 = fabs(*(double *)(a1 + 352));
    double v133 = fabs(*(double *)(a1 + 376));
    double v134 = fabs(*(double *)(a1 + 432));
    double v135 = fabs(*(double *)(a1 + 456));
    double v136 = fabs(*(double *)(a1 + 512));
    double v137 = fabs(*(double *)(a1 + 536));
    uint64_t v138 = *(void *)(a1 + 600);
    int v139 = *(_DWORD *)(a1 + 596);
    int v140 = *(_DWORD *)(a1 + 640);
    if (v140)
    {
      uint64_t v141 = *(void *)(a1 + 584);
      v142.i64[0] = (int)v141;
      v142.i64[1] = SHIDWORD(v141);
      float64x2_t v143 = vmulq_f64(vdivq_f64(vcvtq_f64_s64(v142), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v140), 0)), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL));
      __asm { FMOV            V27.2D, #1.0 }
      int8x16_t v145 = vandq_s8((int8x16_t)vcgtzq_f64(v143), (int8x16_t)vcgeq_f64(_Q27, v143));
      *(int32x2_t *)&v143.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(v143)));
      v142.i64[0] = SLODWORD(v143.f64[0]);
      v142.i64[1] = SHIDWORD(v143.f64[0]);
      int8x16_t v146 = (int8x16_t)vcvtq_f64_s64(v142);
      double v147 = (double)*(int *)(a1 + 592) / (double)v140 * 100.0;
      BOOL v148 = v147 > 1.0 || v147 <= 0.0;
      double v149 = (double)(int)llround(v147);
      int8x16_t v150 = vbslq_s8(v145, (int8x16_t)_Q27, v146);
      if (!v148) {
        double v149 = 1.0;
      }
    }
    else
    {
      double v149 = 0.0;
      int8x16_t v150 = 0uLL;
    }
    int v151 = *(_DWORD *)(a1 + 624);
    int v152 = *(_DWORD *)(a1 + 608);
    uint64_t v153 = *(void *)(a1 + 616);
    *(_DWORD *)int v171 = 136454146;
    *(void *)&v171[4] = v71;
    __int16 v172 = 2082;
    uint64_t v173 = v155;
    __int16 v174 = 1026;
    int v175 = v124;
    __int16 v176 = 2050;
    uint64_t v177 = v125;
    __int16 v178 = 2050;
    double v179 = v126;
    __int16 v180 = 2050;
    double v181 = v118;
    __int16 v182 = 2050;
    double v183 = v127;
    __int16 v184 = 2050;
    double v185 = v128;
    __int16 v186 = 2050;
    double v187 = v117;
    __int16 v188 = 2050;
    double v189 = v129;
    __int16 v190 = 2050;
    uint64_t v191 = v130;
    __int16 v192 = 2050;
    double v193 = v121;
    __int16 v194 = 2050;
    uint64_t v195 = v131;
    __int16 v196 = 2050;
    double v197 = v132;
    __int16 v198 = 2050;
    double v199 = v120;
    __int16 v200 = 2050;
    double v201 = v133;
    __int16 v202 = 2050;
    double v203 = v134;
    __int16 v204 = 2050;
    double v205 = v123;
    __int16 v206 = 2050;
    double v207 = v135;
    __int16 v208 = 2050;
    double v209 = v136;
    __int16 v210 = 2050;
    double v211 = v122;
    __int16 v212 = 2050;
    double v213 = v137;
    __int16 v214 = 1026;
    int v215 = v119;
    __int16 v216 = 2050;
    uint64_t v217 = v138;
    __int16 v218 = 1026;
    int v219 = v139;
    __int16 v220 = 2050;
    uint64_t v221 = v150.i64[0];
    __int16 v222 = 2050;
    uint64_t v223 = v150.i64[1];
    __int16 v224 = 2050;
    double v225 = v149;
    __int16 v226 = 1026;
    int v227 = v151;
    __int16 v228 = 1026;
    int v229 = v140;
    __int16 v230 = 1026;
    int v231 = v152;
    __int16 v232 = 2050;
    uint64_t v233 = v153;
    uint64_t v154 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLTripSegmentAnalyticsSimulatedTripSegment::comparseAndSubmitCoreAnalytics(NSUUID * _Nonnull, NSUUID * _Nonnull, const int, NSArray<CLTripSegmentLocation *> * _Nonnull, CLTripSegmentOutputData * _Nonnull, const double)", "CoreLocation: %s\n", v154);
    if (v154 != buf) {
      free(v154);
    }
  }
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_19085A198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_19085A1E4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    AnalyticsSendEventLazy();
    MEMORY[0x192FCE920](a1 + 16, "");
    MEMORY[0x192FCE920](a1 + 40, "");
    double result = 0.0;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_DWORD *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_DWORD *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_DWORD *)(a1 + 288) = 0;
    *(void *)(a1 + 312) = 0;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_DWORD *)(a1 + 368) = 0;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(void *)(a1 + 392) = 0;
    *(_DWORD *)(a1 + 448) = 0;
    *(_OWORD *)(a1 + 432) = 0u;
    *(void *)(a1 + 472) = 0;
    *(_OWORD *)(a1 + 456) = 0u;
    *(_OWORD *)(a1 + 584) = 0u;
    *(void *)(a1 + 600) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 608) = 0;
    *(void *)(a1 + 616) = 0;
    *(_DWORD *)(a1 + 624) = 0;
    *(void *)(a1 + 632) = 0;
    *(_DWORD *)(a1 + 640) = 0;
  }
  return result;
}

uint64_t sub_19085A310(uint64_t a1)
{
  v35[34] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  v34[0] = @"modeOfTransport";
  v35[0] = [NSNumber numberWithInteger:*(void *)(v1 + 8)];
  v34[1] = @"acrossTrackMax";
  v35[1] = [NSNumber numberWithDouble:fabs((double)(int)*(double *)(v1 + 112))];
  _OWORD v34[2] = @"acrossTrackRMS";
  if (*(_DWORD *)(v1 + 128)) {
    uint64_t v2 = (int)sqrt(*(double *)(v1 + 152));
  }
  else {
    uint64_t v2 = 0;
  }
  v35[2] = [NSNumber numberWithInt:v2];
  v34[3] = @"acrossTrackAvg";
  v35[3] = [NSNumber numberWithDouble:fabs((double)(int)*(double *)(v1 + 136))];
  v34[4] = @"alongTrackMax";
  v35[4] = [NSNumber numberWithDouble:fabs((double)(int)*(double *)(v1 + 192))];
  v34[5] = @"alongTrackRMS";
  if (*(_DWORD *)(v1 + 208)) {
    uint64_t v3 = (int)sqrt(*(double *)(v1 + 232));
  }
  else {
    uint64_t v3 = 0;
  }
  v35[5] = [NSNumber numberWithInt:v3];
  v34[6] = @"alongTrackAvg";
  v35[6] = [NSNumber numberWithDouble:fabs((double)(int)*(double *)(v1 + 216))];
  v34[7] = @"horizontalErrorMax";
  v35[7] = [NSNumber numberWithInt:(int)*(double *)(v1 + 272)];
  v34[8] = @"horizontalErrorRMS";
  if (*(_DWORD *)(v1 + 288)) {
    uint64_t v4 = (int)sqrt(*(double *)(v1 + 312));
  }
  else {
    uint64_t v4 = 0;
  }
  v35[8] = [NSNumber numberWithInt:v4];
  v34[9] = @"horizontalErrorAvg";
  v35[9] = [NSNumber numberWithInt:(int)*(double *)(v1 + 296)];
  v34[10] = @"speedErrorMax";
  LODWORD(v5) = llround(fabs(*(double *)(v1 + 352)));
  v35[10] = [NSNumber numberWithInt:v5];
  v34[11] = @"speedErrorRMS";
  if (*(_DWORD *)(v1 + 368)) {
    double v7 = sqrt(*(double *)(v1 + 392));
  }
  else {
    double v7 = 0.0;
  }
  LODWORD(v6) = llround(v7);
  v35[11] = [NSNumber numberWithInt:v6];
  v34[12] = @"speedErrorAvg";
  LODWORD(v8) = llround(fabs(*(double *)(v1 + 376)));
  v35[12] = [NSNumber numberWithInt:v8];
  v34[13] = @"altitudeErrorMax";
  v35[13] = [NSNumber numberWithInt:(int)fabs(*(double *)(v1 + 432))];
  v34[14] = @"altitudeErrorRMS";
  if (*(_DWORD *)(v1 + 448)) {
    uint64_t v9 = (int)sqrt(*(double *)(v1 + 472));
  }
  else {
    uint64_t v9 = 0;
  }
  v35[14] = [NSNumber numberWithInt:v9];
  v34[15] = @"altitudeErrorAvg";
  v35[15] = [NSNumber numberWithInt:(int)fabs(*(double *)(v1 + 456))];
  v34[16] = @"courseErrorMax";
  LODWORD(v10) = llround(fabs(*(double *)(v1 + 512)));
  v35[16] = [NSNumber numberWithInt:v10];
  v34[17] = @"courseErrorRMS";
  double v12 = 0.0;
  double v13 = 0.0;
  if (*(_DWORD *)(v1 + 528)) {
    double v13 = sqrt(*(double *)(v1 + 552));
  }
  LODWORD(v11) = llround(v13);
  v35[17] = [NSNumber numberWithInt:v11];
  v34[18] = @"courseErrorAvg";
  LODWORD(v14) = llround(fabs(*(double *)(v1 + 536)));
  v35[18] = [NSNumber numberWithInt:v14];
  v34[19] = @"positionErrorCount";
  v35[19] = [NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 288)];
  v34[20] = @"speedErrorCount";
  v35[20] = [NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 368)];
  v34[21] = @"courseErrorCount";
  v35[21] = [NSNumber numberWithUnsignedInt:*(unsigned int *)(v1 + 528)];
  v34[22] = @"maxSpeed";
  v35[22] = [NSNumber numberWithInt:(int)fabs(*(double *)(v1 + 600))];
  v34[23] = @"distance";
  v35[23] = [NSNumber numberWithInt:(int)fabs(*(double *)(v1 + 632))];
  v34[24] = @"invalidSpeed";
  v35[24] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 596)];
  v34[25] = @"sparseBreadCrumbCount";
  v35[25] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 624)];
  v34[26] = @"sparseBreadCrumbCountPercentage";
  int v15 = *(_DWORD *)(v1 + 640);
  if (v15)
  {
    double v16 = (double)*(int *)(v1 + 624) / (double)v15 * 100.0;
    BOOL v17 = v16 > 1.0 || v16 <= 0.0;
    int v18 = llround(v16);
    if (v17) {
      double v12 = (double)v18;
    }
    else {
      double v12 = 1.0;
    }
  }
  v35[26] = [NSNumber numberWithDouble:v12];
  v34[27] = @"reconstructedCount";
  v35[27] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 640)];
  v34[28] = @"mapMatchedPercentage";
  int v19 = *(_DWORD *)(v1 + 640);
  double v20 = 0.0;
  double v21 = 0.0;
  if (v19)
  {
    double v22 = (double)*(int *)(v1 + 584) / (double)v19 * 100.0;
    BOOL v23 = v22 > 1.0 || v22 <= 0.0;
    double v21 = (double)(int)llround(v22);
    if (!v23) {
      double v21 = 1.0;
    }
  }
  v35[28] = [NSNumber numberWithDouble:v21];
  v34[29] = @"inertialPercentage";
  int v24 = *(_DWORD *)(v1 + 640);
  if (v24)
  {
    double v25 = (double)*(int *)(v1 + 588) / (double)v24 * 100.0;
    BOOL v26 = v25 > 1.0 || v25 <= 0.0;
    int v27 = llround(v25);
    if (v26) {
      double v20 = (double)v27;
    }
    else {
      double v20 = 1.0;
    }
  }
  v35[29] = [NSNumber numberWithDouble:v20];
  v34[30] = @"linearInterpolatedPercentage";
  int v28 = *(_DWORD *)(v1 + 640);
  if (v28)
  {
    double v29 = (double)*(int *)(v1 + 592) / (double)v28 * 100.0;
    BOOL v30 = v29 > 1.0 || v29 <= 0.0;
    double v31 = (double)(int)llround(v29);
    if (!v30) {
      double v31 = 1.0;
    }
  }
  else
  {
    double v31 = 0.0;
  }
  v35[30] = [NSNumber numberWithDouble:v31];
  v34[31] = @"chunkCount";
  v35[31] = [NSNumber numberWithInt:*(unsigned int *)(v1 + 608)];
  v34[32] = @"processingTimeMSec";
  uint64_t v32 = [NSNumber numberWithInt:(int)*(double *)(v1 + 616)];
  v34[33] = @"simulated";
  v35[32] = v32;
  v35[33] = &unk_1EE0238F0;
  return [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v35 forKeys:v34 count:34];
}

os_log_t sub_19085A958()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

uint64_t sub_19085B0AC()
{
  qword_1EB2725A0 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F28C10]);
  [(id)qword_1EB2725A0 setDateStyle:1];
  [(id)qword_1EB2725A0 setTimeStyle:4];
  uint64_t v0 = qword_1EB2725A0;

  return MEMORY[0x1F4181798](v0, sel_setFormatterBehavior_);
}

uint64_t sub_19085BBA0(double a1, double a2)
{
  *(double *)uint64_t v3 = a1;
  *(double *)&v3[1] = a2;
  return [MEMORY[0x1E4F29238] valueWithBytes:v3 objCType:"{CLLocationCoordinate2D=dd}"];
}

void sub_19085C968(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (objc_loadWeak((id *)(*(void *)(a1 + 32) + 24)))
  {
    Weaunint64_t k = objc_loadWeak((id *)(*(void *)(a1 + 32) + 24));
    MEMORY[0x1F4181798](Weak, sel_locationSelectorDidSelectLocation_);
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    uint64_t v3 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 138477827;
      uint64_t v7 = v4;
      _os_log_impl(&dword_1906B8000, v3, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelector,sendLocationCB,self:%{private}@,nil fDelegate,early return", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "-[CLEmergencyLocationSelector initWithConfig:bundle:delegate:queue:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_19085E0BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1906F4064(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_19085EA68(const char *a1, int a2, const char *a3, NSObject *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v20 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    uint64_t v4 = a4;
    uint64_t v5 = a3;
    LODWORD(v6) = a2;
    if (qword_1E929F690 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v13 = qword_1E929F698;
    a1 = "";
    uint64_t v6 = "assert";
    uint64_t v5 = "h && \"invalid handler\"";
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)int v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "";
      __int16 v28 = 2082;
      double v29 = "assert";
      __int16 v30 = 2081;
      double v31 = "h && \"invalid handler\"";
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    uint64_t v14 = qword_1E929F698;
    if (os_signpost_enabled((os_log_t)qword_1E929F698))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)int v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "";
      __int16 v28 = 2082;
      double v29 = "assert";
      __int16 v30 = 2081;
      double v31 = "h && \"invalid handler\"";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    uint64_t v4 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)int v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(void *)&v27[6] = "";
      __int16 v28 = 2082;
      double v29 = "assert";
      __int16 v30 = 2081;
      double v31 = "h && \"invalid handler\"";
      _os_log_impl(&dword_1906B8000, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
LABEL_3:
  uint64_t v8 = qword_1E929F698;
  os_log_type_t v9 = a1[120];
  if (os_log_type_enabled((os_log_t)qword_1E929F698, v9))
  {
    uint64_t v10 = a1 + 96;
    if (a1[119] < 0) {
      uint64_t v10 = (void *)*v10;
    }
    sub_1906D5C70(__p, off_1E5698890[(int)v6]);
    if (SBYTE3(v25) >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = *(const char **)__p;
    }
    *(_DWORD *)__n128 buf = 136315650;
    *(void *)int v27 = v10;
    *(_WORD *)&v27[8] = 1024;
    *(_DWORD *)&v27[10] = v6;
    __int16 v28 = 2080;
    double v29 = v11;
    _os_log_impl(&dword_1906B8000, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    int v15 = a1 + 96;
    if (a1[119] < 0) {
      int v15 = (void *)*v15;
    }
    sub_19086368C(v18, (int)v6);
    if (v19 >= 0) {
      double v16 = v18;
    }
    else {
      double v16 = (void **)v18[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v15;
    __int16 v22 = 1024;
    int v23 = (int)v6;
    __int16 v24 = 2080;
    double v25 = v16;
    BOOL v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1906D4A28("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyLocationSelectorInternal>::setStateHandler(State, StateHandler) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  os_log_t result = sub_1908685B4((uint64_t **)a1 + 1, (int)v6, &v20);
  result[5] = (uint64_t *)v5;
  result[6] = (uint64_t *)v4;
  return result;
}

uint64_t sub_19085EF0C(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 0:
      [*(id *)a1 firstLocationTimeout];
      sub_19086369C(a1 + 24, v3);
      return 0;
    case 1:
      sub_190864200(a1 + 24, 4);
      return 0;
    case 2:
      return 3;
    case 3:
      if (!sub_190864694((id *)a1, (void *)[*(id *)a1 firstLocationUsabilityCriteria], *(void **)(a1 + 152)))return 0; {

      }
      *(void *)(a1 + 176) = *(id *)(a1 + 152);
      if (objc_msgSend((id)objc_msgSend(*(id *)a1, "firstLocationUsabilityCriteria"), "altitudeStitchingEnabled")&& sub_190865144((id *)a1, objc_msgSend(*(id *)a1, "firstLocationUsabilityCriteria"), *(void **)(a1 + 152)))
      {

        *(void *)(a1 + 184) = *(id *)(a1 + 152);
      }
      if (*(void *)a1)
      {
        uint64_t v7 = *(void **)(a1 + 176);
        if (v7)
        {
          [v7 coordinate];
          if (v9 < -180.0 || v9 > 180.0 || v8 > 90.0 || v8 < -90.0)
          {
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
            }
            int v20 = qword_1EB2713E0;
            if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
            {
              id v21 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
              *(_DWORD *)__n128 buf = 138543362;
              uint64_t v32 = (uint64_t)v21;
              _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,not sending,invalid coordinates", buf, 0xCu);
            }
            if (!sub_1906CB57C(115, 2)) {
              return 0;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713E8 == -1) {
              goto LABEL_80;
            }
          }
          else
          {
            if (![*(id *)a1 firstLocationEarlyReturnEnabled]) {
              return 0;
            }
            [*(id *)(a1 + 176) horizontalAccuracy];
            double v11 = v10;
            [*(id *)a1 firstLocationMaxEarlyReturnHunc];
            if (v11 <= v12)
            {
              [*(id *)(a1 + 176) verticalAccuracy];
              double v24 = v23;
              [*(id *)a1 firstLocationMaxEarlyReturnVunc];
              if (v24 <= v25)
              {
                if (qword_1EB2713E8 != -1) {
                  dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
                }
                __int16 v28 = qword_1EB2713E0;
                if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
                {
                  id v29 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
                  *(_DWORD *)__n128 buf = 138543362;
                  uint64_t v32 = (uint64_t)v29;
                  _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,can send first location early", buf, 0xCu);
                }
                if (sub_1906CB57C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EB2713E8 != -1) {
                    dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
                  }
                  +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
                  __int16 v30 = (char *)_os_log_send_and_compose_impl();
                  sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::shouldSendFirstLocationEarly()", "CoreLocation: %s\n", v30);
                  if (v30 != (char *)buf) {
                    free(v30);
                  }
                }
                uint64_t v6 = 1;
                *(unsigned char *)(a1 + 209) = 1;
                uint64_t v5 = (void *)[*(id *)a1 firstLocationUsabilityCriteria];
                goto LABEL_8;
              }
              if (qword_1EB2713E8 != -1) {
                dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
              }
              BOOL v26 = qword_1EB2713E0;
              if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
              {
                id v27 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
                *(_DWORD *)__n128 buf = 138543362;
                uint64_t v32 = (uint64_t)v27;
                _os_log_impl(&dword_1906B8000, v26, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,not sending,First location early return Vunc not satisfied", buf, 0xCu);
              }
              if (!sub_1906CB57C(115, 2)) {
                return 0;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1EB2713E8 == -1) {
                goto LABEL_80;
              }
            }
            else
            {
              if (qword_1EB2713E8 != -1) {
                dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
              }
              double v13 = qword_1EB2713E0;
              if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
              {
                id v14 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
                *(_DWORD *)__n128 buf = 138543362;
                uint64_t v32 = (uint64_t)v14;
                _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,not sending,First location early return Hunc not satisfied", buf, 0xCu);
              }
              if (!sub_1906CB57C(115, 2)) {
                return 0;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1EB2713E8 == -1) {
                goto LABEL_80;
              }
            }
          }
        }
        else
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          int v18 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v19 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            uint64_t v32 = (uint64_t)v19;
            _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendFirstLocationEarly,not sending,invalid cached location", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 0;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 == -1) {
            goto LABEL_80;
          }
        }
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
LABEL_80:
        +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::shouldSendFirstLocationEarly()", "CoreLocation: %s\n", v16);
        if (v16 == (char *)buf) {
          return 0;
        }
        goto LABEL_81;
      }
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      BOOL v17 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134283521;
        uint64_t v32 = a1;
        _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,shouldSendFirstLocationEarly,this:%{private}p,nil fConfig,early return", buf, 0xCu);
      }
      uint64_t v6 = 0;
      if (sub_1906CB57C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::shouldSendFirstLocationEarly()", "CoreLocation: %s\n", v16);
        goto LABEL_49;
      }
      return v6;
    case 4:
      id v4 = *(id *)a1;
      if (*(void *)a1)
      {
        if (*(void *)(a1 + 176)
          && (sub_190866108((id *)a1, (void *)[v4 firstLocationUsabilityCriteria], *(void **)(a1 + 176)) & 1) == 0)
        {

          *(void *)(a1 + 176) = 0;
        }
        *(unsigned char *)(a1 + 209) = 0;
        uint64_t v5 = (void *)[*(id *)a1 firstLocationUsabilityCriteria];
        uint64_t v6 = 1;
LABEL_8:
        sub_1908657F8(a1, v5, 1);
        if (([*(id *)a1 firstUpdateEnabled] & 1) == 0)
        {
          if ([*(id *)a1 periodicUpdatesEnabled]) {
            return 2;
          }
          else {
            return 3;
          }
        }
      }
      else
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        int v15 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__n128 buf = 134283521;
          uint64_t v32 = a1;
          _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,FirstLocation,SendLocationTimeout,this:%{private}p,nil fConfig,early return", buf, 0xCu);
        }
        uint64_t v6 = 0;
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          double v16 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "CLEmergencyLocationSelectorInternal::State CLEmergencyLocationSelectorInternal::handler_FirstLocation(CLEmergencyLocationSelectorInternal::Event)", "CoreLocation: %s\n", v16);
LABEL_49:
          if (v16 != (char *)buf) {
LABEL_81:
          }
            free(v16);
          return 0;
        }
      }
      return v6;
    default:
      return 0;
  }
}

uint64_t sub_19085FA58(uint64_t a1, int a2)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 0:
      [*(id *)a1 firstUpdateTimeout];
      sub_19086369C(a1 + 24, v3);
      if (*(void *)(a1 + 160))
      {
        if (sub_1908665C0((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 160)))
        {

          *(void *)(a1 + 192) = *(id *)(a1 + 160);
        }
        if (sub_190865144((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 160)))
        {

          *(void *)(a1 + 200) = *(id *)(a1 + 160);
        }
      }
      return 1;
    case 1:

      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 200) = 0;
      sub_190864200(a1 + 24, 4);
      return 1;
    case 2:
      return 3;
    case 3:
      if (sub_1908665C0((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 152)))
      {

        *(void *)(a1 + 192) = *(id *)(a1 + 152);
      }
      int v18 = (void *)[*(id *)a1 locationUpdateUsabilityCriteria];
      if (!*(void *)a1)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        double v36 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__n128 buf = 134283521;
          *(void *)&uint8_t buf[4] = a1;
          _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,isAltitudeUsableForFirstUpdate,this:%{private}p,nil fConfig,early return", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_83;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        LODWORD(v62[2]) = 134283521;
        *(void *)((char *)&v62[2] + 4) = a1;
        uint64_t v33 = (unsigned char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
        goto LABEL_55;
      }
      id v19 = *(void **)(a1 + 152);
      if (!sub_190865144((id *)a1, v18, v19)) {
        goto LABEL_83;
      }
      int v20 = *(void **)(a1 + 200);
      if (!v20)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        double v42 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
        {
          id v43 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v43;
          _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsableForFirstUpdate,YES,FirstUpdateVerticalLocation being saved first time", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_82;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 == -1) {
          goto LABEL_113;
        }
        goto LABEL_121;
      }
      [v20 verticalAccuracy];
      double v22 = v21;
      [v19 verticalAccuracy];
      if (v22 >= v23)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        double v44 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
        {
          id v45 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v45;
          _os_log_impl(&dword_1906B8000, v44, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsableForFirstUpdate,YES,received Vunc better than cached Vunc", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_82;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 == -1) {
          goto LABEL_113;
        }
LABEL_121:
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
LABEL_113:
        id v57 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
        LODWORD(v62[2]) = 138543362;
        *(void *)((char *)&v62[2] + 4) = v57;
        goto LABEL_114;
      }
      [*(id *)(a1 + 200) ellipsoidalAltitude];
      double v25 = v24;
      [v19 ellipsoidalAltitude];
      double v27 = vabdd_f64(v25, v26);
      [*(id *)a1 locationUpdateChangeInAltitudeToSendEarly];
      if (v27 >= v28)
      {
        [v19 verticalAccuracy];
        if (v27 >= v29 * 0.5)
        {
          if (qword_1E929F608 != -1) {
            dispatch_once(&qword_1E929F608, &unk_1EE003398);
          }
          double v52 = qword_1E929F600;
          if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEFAULT))
          {
            id v53 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543618;
            *(void *)&uint8_t buf[4] = v53;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v27;
            _os_log_impl(&dword_1906B8000, v52, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsableForFirstUpdate,YES,altitude change significant,%{public}f", buf, 0x16u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_82;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F608 != -1) {
            dispatch_once(&qword_1E929F608, &unk_1EE003398);
          }
          id v54 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
          LODWORD(v62[2]) = 138543618;
          *(void *)((char *)&v62[2] + 4) = v54;
          WORD6(v62[2]) = 2050;
          *(double *)((char *)&v62[2] + 14) = v27;
LABEL_114:
          double v58 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n", v58);
          if (v58 != buf) {
            free(v58);
          }
LABEL_82:

          *(void *)(a1 + 200) = *(id *)(a1 + 152);
          goto LABEL_83;
        }
      }
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      __int16 v30 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
        *(_DWORD *)__n128 buf = 138543362;
        *(void *)&uint8_t buf[4] = v31;
        _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsableForFirstUpdate,NO", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 2)) {
        goto LABEL_83;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      id v32 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
      LODWORD(v62[2]) = 138543362;
      *(void *)((char *)&v62[2] + 4) = v32;
      uint64_t v33 = (unsigned char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
LABEL_55:
      if (v33 != buf) {
        free(v33);
      }
LABEL_83:
      if (sub_190864694((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 152)))
      {

        *(void *)(a1 + 176) = *(id *)(a1 + 152);
        if (objc_msgSend((id)objc_msgSend(*(id *)a1, "locationUpdateUsabilityCriteria"), "altitudeStitchingEnabled"))
        {
          if (sub_190865144((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 152)))
          {

            *(void *)(a1 + 184) = *(id *)(a1 + 152);
          }
        }
      }
      return 1;
    case 4:
      if (!*(void *)a1)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        double v34 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__n128 buf = 134283521;
          *(void *)&uint8_t buf[4] = a1;
          _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,FirstUpdate,SendLocationTimeout,this:%{private}p,nil fConfig,early return", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          LODWORD(v62[2]) = 134283521;
          *(void *)((char *)&v62[2] + 4) = a1;
          double v35 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "CLEmergencyLocationSelectorInternal::State CLEmergencyLocationSelectorInternal::handler_FirstUpdate(CLEmergencyLocationSelectorInternal::Event)", "CoreLocation: %s\n", v35);
          if (v35 != buf) {
            free(v35);
          }
        }
        return 1;
      }
      id v4 = *(void **)(a1 + 192);
      if (!v4)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        double v37 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
        {
          id v38 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v38;
          _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendFirstUpdateLocation,send nil Location", buf, 0xCu);
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          id v55 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
          LODWORD(v62[2]) = 138543362;
          *(void *)((char *)&v62[2] + 4) = v55;
          double v56 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::sendFirstUpdateLocation()", "CoreLocation: %s\n", v56);
          if (v56 != buf) {
            free(v56);
          }
        }
        sub_190867C90(a1, 0);
        goto LABEL_97;
      }
      [v4 trustedTimestamp];
      uint64_t v6 = v5;
      long long v67 = 0u;
      memset(v68, 0, 28);
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      memset(&v62[2], 0, 48);
      uint64_t v7 = *(void **)(a1 + 192);
      if (v7) {
        [v7 clientLocation];
      }
      double v8 = *(void **)(a1 + 200);
      if (v8)
      {
        [v8 verticalAccuracy];
        double v10 = v9;
        [*(id *)(a1 + 192) verticalAccuracy];
        if (v10 == v11)
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          double v46 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v47 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v47;
            _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendFirstUpdateLocation,FirstUpdateHorizontalLocation,as-is", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 == -1) {
            goto LABEL_117;
          }
        }
        else
        {
          [*(id *)(a1 + 200) altitude];
          *(void *)((char *)&v62[3] + 12) = v12;
          [*(id *)(a1 + 200) ellipsoidalAltitude];
          *(void *)&v68[1] = v13;
          [*(id *)(a1 + 200) verticalAccuracy];
          *(void *)((char *)&v62[4] + 4) = v14;
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          int v15 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v16 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            *(void *)&uint8_t buf[4] = v16;
            _os_log_impl(&dword_1906B8000, v15, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendFirstUpdateLocation,FirstUpdateHorizontalLocation,with altitude stitching", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_94;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 == -1)
          {
LABEL_117:
            id v59 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            LODWORD(v61[0]) = 138543362;
            *(void *)((char *)v61 + 4) = v59;
            double v60 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::sendFirstUpdateLocation()", "CoreLocation: %s\n", v60);
            if (v60 != buf) {
              free(v60);
            }
LABEL_94:
            double v48 = [CLLocation alloc];
            v61[6] = v66;
            v61[7] = v67;
            v62[0] = v68[0];
            *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)((char *)v68 + 12);
            v61[2] = v62[4];
            v61[3] = v63;
            v61[4] = v64;
            v61[5] = v65;
            v61[0] = v62[2];
            v61[1] = v62[3];
            *(_OWORD *)__n128 buf = xmmword_1908835C0;
            *(void *)&uint8_t buf[16] = 0xBFF0000000000000;
            uint64_t v70 = v6;
            memcpy(v71, &unk_1908835E0, sizeof(v71));
            double v49 = [(CLLocation *)v48 initWithClientLocation:v61 clientLocationPrivate:buf];
            sub_190867C90(a1, v49);
            if (v49)
            {
              *(unsigned char *)(a1 + 232) = 1;
              *(_DWORD *)(a1 + 248) = [(CLLocation *)v49 integrity];
              *(_DWORD *)(a1 + 236) = [(CLLocation *)v49 type];
              [(CLLocation *)v49 horizontalAccuracy];
              *(_DWORD *)(a1 + 240) = (int)v50;
              [(CLLocation *)v49 verticalAccuracy];
              *(_DWORD *)(a1 + 244) = (int)v51;
              *(_DWORD *)(a1 + 252) = (int)sub_1908671A4((id *)a1, v49);
            }

LABEL_97:
            if ([*(id *)a1 periodicUpdatesEnabled]) {
              return 2;
            }
            else {
              return 3;
            }
          }
        }
      }
      else
      {
        *(void *)((char *)&v62[3] + 12) = 0;
        *(void *)&v68[1] = 0;
        [*(id *)(a1 + 184) verticalAccuracy];
        *(void *)((char *)&v62[4] + 4) = v39;
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        double v40 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
        {
          id v41 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
          *(_DWORD *)__n128 buf = 138543362;
          *(void *)&uint8_t buf[4] = v41;
          _os_log_impl(&dword_1906B8000, v40, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendFirstUpdateLocation,FirstUpdateHorizontalLocation,with altitude cleared", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 2)) {
          goto LABEL_94;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 == -1) {
          goto LABEL_117;
        }
      }
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      goto LABEL_117;
    default:
      return 1;
  }
}

uint64_t sub_190860BE8(uint64_t a1, int a2)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  switch(a2)
  {
    case 0:
      if (*(void *)(a1 + 176)
        && (sub_190864694((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 176)) & 1) == 0)
      {

        *(void *)(a1 + 176) = 0;
      }
      if (*(void *)(a1 + 184)
        && (!sub_190864694((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 184))|| (sub_190865144((id *)a1, objc_msgSend(*(id *)a1, "locationUpdateUsabilityCriteria"), *(void **)(a1 + 184)) & 1) == 0))
      {

        *(void *)(a1 + 184) = 0;
      }
      goto LABEL_112;
    case 1:
      sub_190864200(a1 + 24, 4);
      return 2;
    case 2:
      return 3;
    case 3:
      if (!sub_190864694((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 152)))return 2; {

      }
      *(void *)(a1 + 176) = *(id *)(a1 + 152);
      if (objc_msgSend((id)objc_msgSend(*(id *)a1, "locationUpdateUsabilityCriteria"), "altitudeStitchingEnabled")&& sub_190865144((id *)a1, objc_msgSend(*(id *)a1, "locationUpdateUsabilityCriteria"), *(void **)(a1 + 152)))
      {

        *(void *)(a1 + 184) = *(id *)(a1 + 152);
      }
      if (!*(void *)a1)
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        uint64_t v13 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__n128 buf = 134283521;
          uint64_t v70 = a1;
          _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,shouldSendLocationUpdateEarly,this:%{private}p,nil fConfig,early return", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          return 2;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        int v63 = 134283521;
        uint64_t v64 = a1;
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::shouldSendLocationUpdateEarly()", "CoreLocation: %s\n", v12);
LABEL_47:
        if (v12 == (char *)buf) {
          return 2;
        }
        goto LABEL_58;
      }
      if (*(void *)(a1 + 176))
      {
        if (!*(void *)(a1 + 160))
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          BOOL v17 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v18 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            uint64_t v70 = (uint64_t)v18;
            _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,first valid fix being sent after sending no fix or nil fix", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
            }
            id v19 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            int v63 = 138543362;
            uint64_t v64 = (uint64_t)v19;
            goto LABEL_117;
          }
          goto LABEL_111;
        }
        uint64_t v5 = mach_continuous_time();
        double v6 = sub_1907E1770(v5) - *(double *)(a1 + 168);
        [*(id *)a1 locationUpdateMinDelay];
        if (v6 < v7)
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          double v8 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v9 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543618;
            uint64_t v70 = (uint64_t)v9;
            __int16 v71 = 2050;
            double v72 = v6;
            _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,not sending,last send was too recent,tDiff,%{public}f", buf, 0x16u);
          }
          uint64_t v4 = 2;
          if (!sub_1906CB57C(115, 2)) {
            return v4;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          id v10 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
          int v63 = 138543618;
          uint64_t v64 = (uint64_t)v10;
          __int16 v65 = 2050;
          double v66 = v6;
          goto LABEL_57;
        }
        double v61 = 0.0;
        double v62 = 0.0;
        sub_190867544(*(void *)(a1 + 176), &v62, &v61);
        double v59 = 0.0;
        double v60 = 0.0;
        sub_190867544(*(void *)(a1 + 160), &v60, &v59);
        double v20 = v60;
        double v21 = v62;
        double v22 = v60 - v62;
        [*(id *)a1 locationUpdateHuncReductionToSendEarly];
        if (v22 >= v23)
        {
          if (qword_1E929F608 != -1) {
            dispatch_once(&qword_1E929F608, &unk_1EE003398);
          }
          double v46 = qword_1E929F600;
          if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEFAULT))
          {
            id v47 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543874;
            uint64_t v70 = (uint64_t)v47;
            __int16 v71 = 2050;
            double v72 = v20;
            __int16 v73 = 2050;
            double v74 = v21;
            _os_log_impl(&dword_1906B8000, v46, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,higher hunc reduction,previous,%{public}f,current,%{public}f", buf, 0x20u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_111;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F608 == -1) {
            goto LABEL_116;
          }
        }
        else
        {
          [*(id *)(a1 + 160) coordinate];
          double v25 = v24;
          [*(id *)(a1 + 160) coordinate];
          double v27 = v26;
          [*(id *)(a1 + 176) coordinate];
          double v29 = v28;
          [*(id *)(a1 + 176) coordinate];
          double v31 = sub_1906D7AA4(v25, v27, v29, v30);
          [*(id *)a1 locationUpdateDistanceMovedToSendEarly];
          if (v31 >= v32)
          {
            [*(id *)(a1 + 160) horizontalAccuracy];
            if (v31 >= v33 || ([*(id *)(a1 + 176) horizontalAccuracy], v31 >= v34))
            {
              if (qword_1E929F608 != -1) {
                dispatch_once(&qword_1E929F608, &unk_1EE003398);
              }
              double v48 = qword_1E929F600;
              if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEFAULT))
              {
                id v49 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
                *(_DWORD *)__n128 buf = 138543618;
                uint64_t v70 = (uint64_t)v49;
                __int16 v71 = 2050;
                double v72 = v31;
                _os_log_impl(&dword_1906B8000, v48, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,location changed significantly,dist,%{public}f", buf, 0x16u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F608 == -1) {
                  goto LABEL_83;
                }
                goto LABEL_122;
              }
LABEL_111:
              sub_1908657F8(a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], 0);
LABEL_112:
              [*(id *)a1 locationUpdateTimeout];
              sub_19086369C(a1 + 24, v55);
              return 2;
            }
          }
          if (!sub_190865144((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 176)))return 2; {
          if ((sub_190865144((id *)a1, (void *)[*(id *)a1 locationUpdateUsabilityCriteria], *(void **)(a1 + 160)) & 1) == 0)
          }
          {
            if (qword_1E929F608 != -1) {
              dispatch_once(&qword_1E929F608, &unk_1EE003398);
            }
            double v50 = qword_1E929F600;
            if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEFAULT))
            {
              id v51 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
              *(_DWORD *)__n128 buf = 138543362;
              uint64_t v70 = (uint64_t)v51;
              _os_log_impl(&dword_1906B8000, v50, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,altitude is usable now", buf, 0xCu);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F608 != -1) {
                dispatch_once(&qword_1E929F608, &unk_1EE003398);
              }
              id v52 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
              int v63 = 138543362;
              uint64_t v64 = (uint64_t)v52;
              goto LABEL_117;
            }
            goto LABEL_111;
          }
          double v20 = v59;
          double v21 = v61;
          double v35 = v59 - v61;
          [*(id *)a1 locationUpdateVuncReductionToSendEarly];
          if (v35 < v36)
          {
            [*(id *)(a1 + 160) ellipsoidalAltitude];
            double v38 = v37;
            [*(id *)(a1 + 176) ellipsoidalAltitude];
            double v31 = vabdd_f64(v38, v39);
            [*(id *)a1 locationUpdateChangeInAltitudeToSendEarly];
            if (v31 < v40) {
              return 2;
            }
            [*(id *)(a1 + 160) verticalAccuracy];
            if (v31 < v41 * 0.5)
            {
              [*(id *)(a1 + 176) verticalAccuracy];
              if (v31 < v42 * 0.5) {
                return 2;
              }
            }
            if (qword_1E929F608 != -1) {
              dispatch_once(&qword_1E929F608, &unk_1EE003398);
            }
            id v43 = qword_1E929F600;
            if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEFAULT))
            {
              id v44 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
              *(_DWORD *)__n128 buf = 138543618;
              uint64_t v70 = (uint64_t)v44;
              __int16 v71 = 2050;
              double v72 = v31;
              _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,higher altitude change,%{public}f", buf, 0x16u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F608 == -1)
              {
LABEL_83:
                id v45 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
                int v63 = 138543618;
                uint64_t v64 = (uint64_t)v45;
                __int16 v65 = 2050;
                double v66 = v31;
                goto LABEL_117;
              }
LABEL_122:
              dispatch_once(&qword_1E929F608, &unk_1EE003398);
              goto LABEL_83;
            }
            goto LABEL_111;
          }
          if (qword_1E929F608 != -1) {
            dispatch_once(&qword_1E929F608, &unk_1EE003398);
          }
          id v53 = qword_1E929F600;
          if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEFAULT))
          {
            id v54 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543874;
            uint64_t v70 = (uint64_t)v54;
            __int16 v71 = 2050;
            double v72 = v20;
            __int16 v73 = 2050;
            double v74 = v21;
            _os_log_impl(&dword_1906B8000, v53, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,sending,higher vunc reduction,previous,%{public}f,current,%{public}f", buf, 0x20u);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_111;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1E929F608 == -1)
          {
LABEL_116:
            id v57 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            int v63 = 138543874;
            uint64_t v64 = (uint64_t)v57;
            __int16 v65 = 2050;
            double v66 = v20;
            __int16 v67 = 2050;
            double v68 = v21;
LABEL_117:
            double v58 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::shouldSendLocationUpdateEarly()", "CoreLocation: %s\n", v58);
            if (v58 != (char *)buf) {
              free(v58);
            }
            goto LABEL_111;
          }
        }
        dispatch_once(&qword_1E929F608, &unk_1EE003398);
        goto LABEL_116;
      }
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      uint64_t v14 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
        *(_DWORD *)__n128 buf = 138543362;
        uint64_t v70 = (uint64_t)v15;
        _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,shouldSendLocationUpdateEarly,not sending,invalid cached location", buf, 0xCu);
      }
      uint64_t v4 = 2;
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        id v16 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
        int v63 = 138543362;
        uint64_t v64 = (uint64_t)v16;
LABEL_57:
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::shouldSendLocationUpdateEarly()", "CoreLocation: %s\n", v12);
        if (v12 == (char *)buf) {
          return 2;
        }
LABEL_58:
        free(v12);
        return 2;
      }
      return v4;
    case 4:
      id v3 = *(id *)a1;
      if (*(void *)a1)
      {
        if (*(void *)(a1 + 176)
          && (sub_190866108((id *)a1, (void *)[v3 locationUpdateUsabilityCriteria], *(void **)(a1 + 176)) & 1) == 0)
        {

          *(void *)(a1 + 176) = 0;
        }
        goto LABEL_111;
      }
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      double v11 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134283521;
        uint64_t v70 = a1;
        _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,PeriodicUpdates,SendLocationTimeout,this:%{private}p,nil fConfig,early return", buf, 0xCu);
      }
      if (!sub_1906CB57C(115, 0)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      int v63 = 134283521;
      uint64_t v64 = a1;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "CLEmergencyLocationSelectorInternal::State CLEmergencyLocationSelectorInternal::handler_PeriodicUpdates(CLEmergencyLocationSelectorInternal::Event)", "CoreLocation: %s\n", v12);
      goto LABEL_47;
    default:
      return 2;
  }
}

uint64_t sub_190861C84()
{
  return 3;
}

void sub_190861C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(a1 + 88);
  uint64_t v2 = *(int *)(a1 + 4);
  int v106 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v61 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "handler && \"invalid handler\"";
      _os_log_impl(&dword_1906B8000, v61, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    double v62 = qword_1E929F698;
    if (os_signpost_enabled((os_log_t)qword_1E929F698))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "handler && \"invalid handler\"";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v62, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    int v63 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "handler && \"invalid handler\"";
      _os_log_impl(&dword_1906B8000, v63, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_112;
  }
  uint64_t v4 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
  uint64_t v5 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
  if (!*(unsigned char *)(a1 + 48))
  {
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    uint64_t v64 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "fIniitalized && \"must call initialize(state) first\"";
      _os_log_impl(&dword_1906B8000, v64, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    __int16 v65 = qword_1E929F698;
    if (os_signpost_enabled((os_log_t)qword_1E929F698))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "fIniitalized && \"must call initialize(state) first\"";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v65, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    double v66 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "fIniitalized && \"must call initialize(state) first\"";
      _os_log_impl(&dword_1906B8000, v66, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_112:
    abort_report_np();
    goto LABEL_219;
  }
  if (qword_1E929F690 != -1) {
    dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
  }
  double v7 = qword_1E929F698;
  os_log_type_t v8 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1E929F698, v8))
  {
    id v9 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      id v9 = (void *)*v9;
    }
    sub_1906D5C70(__p, off_1E5698890[*(int *)(a1 + 4)]);
    int v10 = SHIBYTE(v110);
    double v11 = *(unsigned char **)__p;
    sub_19086367C(v113, a2);
    uint64_t v12 = __p;
    if (v10 < 0) {
      uint64_t v12 = v11;
    }
    if (v116 >= 0) {
      uint64_t v13 = v113;
    }
    else {
      uint64_t v13 = *(unsigned char **)v113;
    }
    *(_DWORD *)__n128 buf = 136315650;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v12;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&unsigned char buf[24] = v13;
    _os_log_impl(&dword_1906B8000, v7, v8, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v116 < 0) {
      operator delete(*(void **)v113);
    }
    uint64_t v4 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    if (SHIBYTE(v110) < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v5 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    __int16 v67 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v67 = (void *)*v67;
    }
    sub_19086368C(v113, *(_DWORD *)(a1 + 4));
    int v68 = v116;
    double v69 = *(unsigned char **)v113;
    sub_19086367C(v104, a2);
    uint64_t v70 = v113;
    if (v68 < 0) {
      uint64_t v70 = v69;
    }
    if (v105 >= 0) {
      __int16 v71 = v104;
    }
    else {
      __int16 v71 = (void **)v104[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v67;
    __int16 v108 = 2080;
    uint64_t v109 = v70;
    __int16 v110 = 2080;
    uint64_t v111 = v71;
    double v72 = (char *)_os_log_send_and_compose_impl();
    if (v105 < 0) {
      operator delete(v104[0]);
    }
    uint64_t v4 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
    if (v116 < 0) {
      operator delete(*(void **)v113);
    }
    sub_1906D4A28("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyLocationSelectorInternal>::handleEvent(Event) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v72);
    if (v72 != buf) {
      free(v72);
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    goto LABEL_29;
  }
  id v15 = (uint64_t **)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 4);
  uint64_t v17 = a1 + 16;
  do
  {
    int v18 = *(_DWORD *)(v14 + 32);
    BOOL v19 = v18 < v16;
    if (v18 >= v16) {
      double v20 = (uint64_t *)v14;
    }
    else {
      double v20 = (uint64_t *)(v14 + 8);
    }
    if (!v19) {
      uint64_t v17 = v14;
    }
    uint64_t v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_29:
    if (*((void *)v4 + 210) != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v21 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "handlerFn != std::end(state_handlers)";
      _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    double v22 = qword_1E929F698;
    if (os_signpost_enabled((os_log_t)qword_1E929F698))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "handlerFn != std::end(state_handlers)";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    double v23 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "handlerFn != std::end(state_handlers)";
      _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
LABEL_192:
    abort_report_np();
    goto LABEL_219;
  }
  double v24 = *(uint64_t (**)(void *, uint64_t))(v17 + 40);
  uint64_t v25 = *(void *)(v17 + 48);
  double v26 = (void *)(*(void *)(a1 + 32) + (v25 >> 1));
  if (v25) {
    double v24 = *(uint64_t (**)(void *, uint64_t))(*v26 + v24);
  }
  int v27 = v24(v26, a2);
  int v28 = v27;
  int v103 = v27;
  if (a2 <= 1 && v27 != v2)
  {
    if (*((void *)v4 + 210) != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v76 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "newState == oldState";
      _os_log_impl(&dword_1906B8000, v76, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    int v77 = qword_1E929F698;
    if (os_signpost_enabled((os_log_t)qword_1E929F698))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "newState == oldState";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v77, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    double v78 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "newState == oldState";
      _os_log_impl(&dword_1906B8000, v78, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    goto LABEL_192;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (*((void *)v4 + 210) != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v29 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_ERROR))
    {
      double v30 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v30 = (void *)*v30;
      }
      *(_DWORD *)__n128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v30;
      _os_log_impl(&dword_1906B8000, v29, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      double v79 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v79 = (void *)*v79;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v79;
      double v80 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "State CLStateMachine<CLEmergencyLocationSelectorInternal>::handleEvent(Event) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v80);
      if (v80 != buf) {
        free(v80);
      }
    }
  }
  if (*((void *)v4 + 210) != -1) {
    dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
  }
  double v31 = qword_1E929F698;
  os_log_type_t v32 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1E929F698, v32))
  {
    double v33 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      double v33 = (void *)*v33;
    }
    sub_1906D5C70(buf, off_1E5698890[v28]);
    if (buf[23] >= 0) {
      double v34 = buf;
    }
    else {
      double v34 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v33;
    __int16 v108 = 2080;
    uint64_t v109 = v34;
    _os_log_impl(&dword_1906B8000, v31, v32, "%snewState,%s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (*((void *)v4 + 210) != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    __int16 v73 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v73 = (void *)*v73;
    }
    sub_19086368C(__p, v28);
    if (v110 >= 0) {
      double v74 = __p;
    }
    else {
      double v74 = *(unsigned char **)__p;
    }
    *(_DWORD *)int8x16_t v113 = 136315394;
    *(void *)&v113[4] = v73;
    __int16 v114 = 2080;
    int v115 = v74;
    uint64_t v75 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v110) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1906D4A28("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyLocationSelectorInternal>::handleEvent(Event) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v75);
    if (v75 != buf) {
      free(v75);
    }
  }
  if (v28 != v2)
  {
    if (*((void *)v4 + 210) != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v35 = qword_1E929F698;
    os_log_type_t v36 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1E929F698, v36))
    {
      double v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v37 = (void *)*v37;
      }
      sub_1906D5C70(__p, off_1E5698890[v2]);
      double v38 = v4;
      int v39 = SHIBYTE(v110);
      double v40 = *(unsigned char **)__p;
      sub_1906D5C70(v113, "Exit");
      double v41 = __p;
      if (v39 < 0) {
        double v41 = v40;
      }
      if (v116 >= 0) {
        double v42 = v113;
      }
      else {
        double v42 = *(unsigned char **)v113;
      }
      *(_DWORD *)__n128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v41;
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&unsigned char buf[24] = v42;
      _os_log_impl(&dword_1906B8000, v35, v36, "%soldState,%s,event,%s", buf, 0x20u);
      if (v116 < 0) {
        operator delete(*(void **)v113);
      }
      uint64_t v5 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
      uint64_t v4 = v38;
      if (SHIBYTE(v110) < 0) {
        operator delete(*(void **)__p);
      }
      id v15 = (uint64_t **)(a1 + 8);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      double v81 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v81 = (void *)*v81;
      }
      sub_19086368C(v113, v2);
      int v101 = v15;
      int v82 = v4;
      int v83 = v116;
      double v84 = *(unsigned char **)v113;
      sub_1906D5C70(v104, "Exit");
      double v85 = v113;
      if (v83 < 0) {
        double v85 = v84;
      }
      if (v105 >= 0) {
        double v86 = v104;
      }
      else {
        double v86 = (void **)v104[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v81;
      __int16 v108 = 2080;
      uint64_t v109 = v85;
      __int16 v110 = 2080;
      uint64_t v111 = v86;
      double v87 = (char *)_os_log_send_and_compose_impl();
      if (v105 < 0) {
        operator delete(v104[0]);
      }
      uint64_t v5 = &OBJC_IVAR___CLServiceSession__authorizationRequirement;
      uint64_t v4 = v82;
      if (v116 < 0) {
        operator delete(*(void **)v113);
      }
      sub_1906D4A28("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyLocationSelectorInternal>::handleEvent(Event) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v87);
      id v15 = v101;
      if (v87 != buf) {
        free(v87);
      }
    }
    uint64_t v43 = *(void *)(a1 + 32);
    id v44 = sub_1908685B4(v15, v2, &v106);
    id v45 = v44[5];
    uint64_t v46 = (uint64_t)v44[6];
    id v47 = (void *)(v43 + (v46 >> 1));
    if (v46) {
      id v45 = *(uint64_t **)(*v47 + v45);
    }
    if (((unsigned int (*)(void *, uint64_t))v45)(v47, 1) != v2)
    {
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      uint64_t v88 = *((void *)v5 + 211);
      if (os_log_type_enabled(v88, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__n128 buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "retState == oldState";
        _os_log_impl(&dword_1906B8000, v88, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (*((void *)v4 + 210) != -1) {
          dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
        }
      }
      uint64_t v89 = *((void *)v5 + 211);
      if (os_signpost_enabled(v89))
      {
        *(_DWORD *)__n128 buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "retState == oldState";
        _os_signpost_emit_with_name_impl(&dword_1906B8000, v89, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (*((void *)v4 + 210) != -1) {
          dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
        }
      }
      double v90 = *((void *)v5 + 211);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__n128 buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "retState == oldState";
        _os_log_impl(&dword_1906B8000, v90, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      goto LABEL_192;
    }
    *(_DWORD *)(a1 + 4) = v28;
    if (*((void *)v4 + 210) != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v48 = *((void *)v5 + 211);
    os_log_type_t v49 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled(v48, v49))
    {
      double v50 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v50 = (void *)*v50;
      }
      sub_1906D5C70(__p, off_1E5698890[v28]);
      id v51 = v4;
      int v52 = SHIBYTE(v110);
      id v53 = *(unsigned char **)__p;
      sub_1906D5C70(v113, "Enter");
      id v54 = __p;
      if (v52 < 0) {
        id v54 = v53;
      }
      if (v116 >= 0) {
        double v55 = v113;
      }
      else {
        double v55 = *(unsigned char **)v113;
      }
      *(_DWORD *)__n128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v50;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v54;
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&unsigned char buf[24] = v55;
      _os_log_impl(&dword_1906B8000, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
      if (v116 < 0) {
        operator delete(*(void **)v113);
      }
      uint64_t v4 = v51;
      if (SHIBYTE(v110) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      double v91 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v91 = (void *)*v91;
      }
      sub_19086368C(v113, v28);
      BOOL v102 = v15;
      double v92 = v4;
      int v93 = v116;
      double v94 = *(unsigned char **)v113;
      sub_1906D5C70(v104, "Enter");
      double v95 = v113;
      if (v93 < 0) {
        double v95 = v94;
      }
      if (v105 >= 0) {
        uint64_t v96 = v104;
      }
      else {
        uint64_t v96 = (void **)v104[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v91;
      __int16 v108 = 2080;
      uint64_t v109 = v95;
      __int16 v110 = 2080;
      uint64_t v111 = v96;
      int v97 = (char *)_os_log_send_and_compose_impl();
      if (v105 < 0) {
        operator delete(v104[0]);
      }
      uint64_t v4 = v92;
      if (v116 < 0) {
        operator delete(*(void **)v113);
      }
      sub_1906D4A28("Generic", 1, 0, 2, "State CLStateMachine<CLEmergencyLocationSelectorInternal>::handleEvent(Event) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v97);
      id v15 = v102;
      if (v97 != buf) {
        free(v97);
      }
    }
    uint64_t v56 = *(void *)(a1 + 32);
    id v57 = sub_1908685B4(v15, v28, &v103);
    double v58 = v57[5];
    uint64_t v59 = (uint64_t)v57[6];
    double v60 = (void *)(v56 + (v59 >> 1));
    if (v59) {
      double v58 = *(uint64_t **)(*v60 + v58);
    }
    if (((unsigned int (*)(void *, void))v58)(v60, 0) != v28)
    {
      if (*((void *)v4 + 210) != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      int v98 = *((void *)v5 + 211);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__n128 buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "retState == newState";
        _os_log_impl(&dword_1906B8000, v98, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (*((void *)v4 + 210) != -1) {
          dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
        }
      }
      float64x2_t v99 = *((void *)v5 + 211);
      if (os_signpost_enabled(v99))
      {
        *(_DWORD *)__n128 buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "retState == newState";
        _os_signpost_emit_with_name_impl(&dword_1906B8000, v99, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (*((void *)v4 + 210) != -1) {
          dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
        }
      }
      double v100 = *((void *)v5 + 211);
      if (os_log_type_enabled(v100, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__n128 buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "retState == newState";
        _os_log_impl(&dword_1906B8000, v100, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np();
LABEL_219:
      __break(1u);
    }
  }
  --*(_DWORD *)(a1 + 88);
}

void sub_190863630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 105) < 0) {
    operator delete(*(void **)(v24 - 128));
  }
  _Unwind_Resume(exception_object);
}

void *sub_19086367C(void *a1, int a2)
{
  return sub_1906D5C70(a1, off_1E5698868[a2]);
}

void *sub_19086368C(void *a1, int a2)
{
  return sub_1906D5C70(a1, off_1E5698890[a2]);
}

void sub_19086369C(uint64_t a1, double a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v3 = *(NSObject **)(a1 + 80);
  if (!v3)
  {
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v37 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_ERROR))
    {
      double v38 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v38 = (void *)*v38;
      }
      *(_DWORD *)__n128 buf = 136315138;
      *(void *)&uint8_t buf[4] = v38;
      _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      double v42 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v42 = (void *)*v42;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v42;
      uint64_t v43 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyLocationSelectorInternal>::setTimeoutEvent(Event, double) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v43);
      if (v43 != buf) {
        free(v43);
      }
    }
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    int v39 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    double v40 = qword_1E929F698;
    if (os_signpost_enabled((os_log_t)qword_1E929F698))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl(&dword_1906B8000, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
    }
    double v41 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl(&dword_1906B8000, v41, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a2 < 0.0)
  {
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    uint64_t v5 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_FAULT))
    {
      double v6 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v6 = (void *)*v6;
      }
      sub_1906D5C70(__p, "SendLocationTimeout");
      if (v53 >= 0) {
        double v7 = __p;
      }
      else {
        double v7 = *(unsigned char **)__p;
      }
      *(_DWORD *)__n128 buf = 136315650;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v7;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(double *)&unsigned char buf[24] = a2;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v53) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      os_log_type_t v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        os_log_type_t v8 = (void *)*v8;
      }
      sub_1906D5C70(v46, "SendLocationTimeout");
      if (v49 >= 0) {
        id v9 = v46;
      }
      else {
        id v9 = *(unsigned char **)v46;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v8;
      __int16 v51 = 2082;
      int v52 = v9;
      __int16 v53 = 2050;
      double v54 = a2;
      int v10 = (char *)_os_log_send_and_compose_impl();
      if (v49 < 0) {
        operator delete(*(void **)v46);
      }
LABEL_89:
      sub_1906D4A28("Generic", 1, 0, 0, "void CLStateMachine<CLEmergencyLocationSelectorInternal>::setTimeoutEvent(Event, double) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v10);
LABEL_90:
      if (v10 != buf) {
        free(v10);
      }
      return;
    }
    return;
  }
  uint64_t v12 = (uint64_t **)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11)
  {
    uint64_t v13 = a1 + 64;
    do
    {
      int v14 = *(_DWORD *)(v11 + 32);
      BOOL v15 = v14 < 4;
      if (v14 >= 4) {
        int v16 = (uint64_t *)v11;
      }
      else {
        int v16 = (uint64_t *)(v11 + 8);
      }
      if (!v15) {
        uint64_t v13 = v11;
      }
      uint64_t v11 = *v16;
    }
    while (*v16);
    if ((uint64_t **)v13 != v12 && *(int *)(v13 + 32) <= 4)
    {
      uint64_t v17 = *(NSObject **)(v13 + 40);
      if (v17)
      {
LABEL_47:
        dispatch_time_t v25 = dispatch_time(0, (uint64_t)(a2 * 1000000000.0));
        dispatch_source_set_timer(v17, v25, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1E929F690 != -1) {
          dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
        }
        double v26 = qword_1E929F698;
        os_log_type_t v27 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1E929F698, v27))
        {
          int v28 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            int v28 = (void *)*v28;
          }
          sub_19086367C(__p, 4);
          if (v53 >= 0) {
            double v29 = __p;
          }
          else {
            double v29 = *(unsigned char **)__p;
          }
          *(_DWORD *)__n128 buf = 136315650;
          *(void *)&uint8_t buf[4] = v28;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v29;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&unsigned char buf[24] = a2;
          _os_log_impl(&dword_1906B8000, v26, v27, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v53) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_1906CB57C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F690 != -1) {
            dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
          }
          double v30 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            double v30 = (void *)*v30;
          }
          sub_19086367C(v46, 4);
          if (v49 >= 0) {
            double v31 = v46;
          }
          else {
            double v31 = *(unsigned char **)v46;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v30;
          __int16 v51 = 2080;
          int v52 = v31;
          __int16 v53 = 2048;
          double v54 = a2;
          int v10 = (char *)_os_log_send_and_compose_impl();
          if (v49 < 0) {
            operator delete(*(void **)v46);
          }
          sub_1906D4A28("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyLocationSelectorInternal>::setTimeoutEvent(Event, double) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v10);
          goto LABEL_90;
        }
        return;
      }
    }
  }
  dispatch_source_t v18 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v3);
  if (v18)
  {
    uint64_t v17 = v18;
    BOOL v19 = *v12;
    double v20 = (uint64_t **)(a1 + 64);
    if (*v12)
    {
      while (1)
      {
        while (1)
        {
          double v20 = (uint64_t **)v19;
          int v21 = *((_DWORD *)v19 + 8);
          if (v21 < 5) {
            break;
          }
          BOOL v19 = *v20;
          uint64_t v12 = v20;
          if (!*v20) {
            goto LABEL_43;
          }
        }
        if (v21 == 4) {
          break;
        }
        BOOL v19 = v20[1];
        if (!v19)
        {
          uint64_t v12 = v20 + 1;
          goto LABEL_43;
        }
      }
    }
    else
    {
LABEL_43:
      double v22 = (uint64_t *)v20;
      double v20 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v20 + 8) = 4;
      v20[5] = 0;
      *double v20 = 0;
      v20[1] = 0;
      void v20[2] = v22;
      *uint64_t v12 = (uint64_t *)v20;
      uint64_t v23 = **(void **)(a1 + 56);
      uint64_t v24 = (uint64_t *)v20;
      if (v23)
      {
        *(void *)(a1 + 56) = v23;
        uint64_t v24 = *v12;
      }
      sub_19074BCA4(*(uint64_t **)(a1 + 64), v24);
      ++*(void *)(a1 + 72);
    }
    v20[5] = (uint64_t *)v17;
    dispatch_source_set_timer(v17, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = sub_190868684;
    handler[3] = &unk_1E5696BA0;
    handler[4] = a1;
    int v45 = 4;
    dispatch_source_set_event_handler(v17, handler);
    dispatch_resume(v17);
    goto LABEL_47;
  }
  if (qword_1E929F690 != -1) {
    dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
  }
  os_log_type_t v32 = qword_1E929F698;
  if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_FAULT))
  {
    double v33 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      double v33 = (void *)*v33;
    }
    sub_1906D5C70(buf, "SendLocationTimeout");
    if (buf[23] >= 0) {
      double v34 = buf;
    }
    else {
      double v34 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v33;
    __int16 v51 = 2082;
    int v52 = v34;
    _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_1906CB57C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    double v35 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      double v35 = (void *)*v35;
    }
    sub_1906D5C70(__p, "SendLocationTimeout");
    if (v53 >= 0) {
      os_log_type_t v36 = __p;
    }
    else {
      os_log_type_t v36 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v46 = 136315394;
    *(void *)&v46[4] = v35;
    __int16 v47 = 2082;
    double v48 = v36;
    int v10 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v53) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_89;
  }
}

void sub_190864200(uint64_t a1, int a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      os_log_type_t v8 = (uint64_t *)v4;
    }
    else {
      os_log_type_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (id v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    int v10 = qword_1E929F698;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1E929F698, v11))
    {
      uint64_t v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      sub_19086367C(__p, a2);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)__n128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      uint64_t v24 = v13;
      _os_log_impl(&dword_1906B8000, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      int v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v14 = (void *)*v14;
      }
      sub_19086367C(buf, a2);
      if (v25 >= 0) {
        BOOL v15 = buf;
      }
      else {
        BOOL v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      os_log_type_t v27 = v14;
      __int16 v28 = 2080;
      double v29 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1906D4A28("Generic", 1, 0, 2, "void CLStateMachine<CLEmergencyLocationSelectorInternal>::cancelTimeoutEvent(Event) [T = CLEmergencyLocationSelectorInternal]", "CoreLocation: %s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1E929F690 != -1) {
      dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
    }
    uint64_t v17 = qword_1E929F698;
    if (os_log_type_enabled((os_log_t)qword_1E929F698, OS_LOG_TYPE_DEFAULT))
    {
      dispatch_source_t v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_source_t v18 = (void *)*v18;
      }
      sub_19086367C(__p, a2);
      if (v31 >= 0) {
        BOOL v19 = __p;
      }
      else {
        BOOL v19 = (void **)__p[0];
      }
      *(_DWORD *)__n128 buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      uint64_t v24 = v19;
      _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1E929F690 != -1) {
        dispatch_once(&qword_1E929F690, &unk_1EE0033B8);
      }
      double v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v20 = (void *)*v20;
      }
      sub_19086367C(buf, a2);
      if (v25 >= 0) {
        int v21 = buf;
      }
      else {
        int v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      os_log_type_t v27 = v20;
      __int16 v28 = 2080;
      double v29 = v21;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

uint64_t sub_190864694(id *a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!*a1)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    uint64_t v13 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134283521;
      double v33 = a1;
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,isLocationUsable,this:%{private}p,nil fConfig,early return", buf, 0xCu);
    }
    int v14 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v14) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    BOOL v15 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::isLocationUsable(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
LABEL_24:
    if (v15 == buf) {
      return 0;
    }
    goto LABEL_40;
  }
  if (!a2 || !a3)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    int v16 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
      *(_DWORD *)__n128 buf = 138543362;
      double v33 = v17;
      _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsable,invalid parameters", buf, 0xCu);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      goto LABEL_73;
    }
LABEL_39:
    +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
    BOOL v15 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isLocationUsable(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n", (const char *)v15);
    if (v15 == buf) {
      return 0;
    }
LABEL_40:
    free(v15);
    return 0;
  }
  [a3 coordinate];
  if (v7 < -180.0 || v7 > 180.0 || v6 > 90.0 || v6 < -90.0)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    dispatch_source_t v18 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v19 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
      *(_DWORD *)__n128 buf = 138543362;
      double v33 = v19;
      _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsable,invalid coordinates", buf, 0xCu);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 == -1) {
        goto LABEL_39;
      }
      goto LABEL_73;
    }
    return result;
  }
  double v8 = sub_1908671A4(a1, a3);
  [a2 maxUsableAge];
  if (fabs(v8) > v9)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    int v10 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      os_log_type_t v11 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
      *(_DWORD *)__n128 buf = 138543618;
      double v33 = v11;
      __int16 v34 = 2050;
      double v35 = v8;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsable,location too old. Age:%{public}f", buf, 0x16u);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 == -1) {
        goto LABEL_39;
      }
LABEL_73:
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      goto LABEL_39;
    }
    return result;
  }
  [a3 horizontalAccuracy];
  if (v20 <= 0.0 || ([a3 horizontalAccuracy], double v22 = v21, objc_msgSend(a2, "maxUsableHunc"), v22 > v23))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    uint64_t v24 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      char v25 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
      [a3 horizontalAccuracy];
      *(_DWORD *)__n128 buf = 138543618;
      double v33 = v25;
      __int16 v34 = 2050;
      double v35 = v26;
      _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsable,horizontal accuracy too low. Hunc:%{public}f", buf, 0x16u);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
    [a3 horizontalAccuracy];
LABEL_72:
    BOOL v15 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isLocationUsable(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
    goto LABEL_24;
  }
  unsigned int v27 = [a3 integrity];
  if (v27 < [a2 minUsableIntegrity])
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    __int16 v28 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      double v29 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
      *(_DWORD *)__n128 buf = 138543618;
      double v33 = v29;
      __int16 v34 = 1026;
      LODWORD(v35) = [a3 integrity];
      _os_log_impl(&dword_1906B8000, v28, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsable,integrity too low. Integrity:%{public}d", buf, 0x12u);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
    [a3 integrity];
    goto LABEL_72;
  }
  if (![a2 vuncCheckRequiredForUsability] || (sub_190865144(a1, a2, a3) & 1) != 0) {
    return 1;
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
  }
  double v30 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    char v31 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
    *(_DWORD *)__n128 buf = 138543362;
    double v33 = v31;
    _os_log_impl(&dword_1906B8000, v30, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsable,unusable altitude", buf, 0xCu);
  }
  uint64_t result = sub_1906CB57C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      goto LABEL_73;
    }
    goto LABEL_39;
  }
  return result;
}

uint64_t sub_190865144(id *a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    if (a2 && a3)
    {
      [a3 verticalAccuracy];
      if (v6 > 0.0 && ([a3 verticalAccuracy], double v8 = v7, objc_msgSend(a2, "maxUsableVunc"), v8 <= v9))
      {
        [a3 ellipsoidalAltitude];
        if (v19 >= -450.0 && ([a3 ellipsoidalAltitude], v20 <= 8850.0))
        {
          return 1;
        }
        else
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          double v21 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            double v22 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
            [a3 ellipsoidalAltitude];
            *(_DWORD *)__n128 buf = 138543619;
            char v25 = v22;
            __int16 v26 = 2049;
            uint64_t v27 = v23;
            _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsable,NO,received altitude is not valid,%{private}.2f", buf, 0x16u);
          }
          uint64_t result = sub_1906CB57C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
            }
            +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
            [a3 ellipsoidalAltitude];
            goto LABEL_38;
          }
        }
      }
      else
      {
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        int v10 = qword_1EB2713E0;
        if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
        {
          os_log_type_t v11 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
          [a3 verticalAccuracy];
          *(_DWORD *)__n128 buf = 138543618;
          char v25 = v11;
          __int16 v26 = 2050;
          uint64_t v27 = v12;
          _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsable,NO,vertical accuracy too low,%{public}.2f", buf, 0x16u);
        }
        uint64_t result = sub_1906CB57C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
          [a3 verticalAccuracy];
LABEL_38:
          int v16 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsable(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
          goto LABEL_39;
        }
      }
    }
    else
    {
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      uint64_t v17 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        dispatch_source_t v18 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
        *(_DWORD *)__n128 buf = 138543362;
        char v25 = v18;
        _os_log_impl(&dword_1906B8000, v17, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isAltitudeUsable,NO,invalid parameters", buf, 0xCu);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
        int v16 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsable(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n", v16);
        if (v16 == (char *)buf) {
          return 0;
        }
        goto LABEL_40;
      }
    }
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    int v14 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134283521;
      char v25 = a1;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,isAltitudeUsable,this:%{private}p,nil fConfig,early return", buf, 0xCu);
    }
    int v15 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (v15)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::isAltitudeUsable(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
LABEL_39:
      if (v16 == (char *)buf) {
        return 0;
      }
LABEL_40:
      free(v16);
      return 0;
    }
  }
  return result;
}

void sub_1908657F8(uint64_t a1, void *a2, int a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*(void *)a1)
  {
    if (a2)
    {
      double v6 = *(void **)(a1 + 176);
      if (v6)
      {
        if (sub_190865144((id *)a1, a2, v6))
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          double v7 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v8 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            uint64_t v47 = (uint64_t)v8;
            _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendCachedLocation,location sent to client without altitude stitching", buf, 0xCu);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
            }
            id v25 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            LODWORD(v38) = 138543362;
            *(void *)((char *)&v38 + 4) = v25;
            __int16 v26 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::sendCachedLocation(CLEmergencyLocationUsabilityCriteria *, BOOL)", "CoreLocation: %s\n", v26);
            if (v26 != (char *)buf) {
              free(v26);
            }
          }
          sub_190867C90(a1, *(void **)(a1 + 176));
          sub_1908675E8(a1, *(void **)(a1 + 176), a3);
          if ((a3 & 1) == 0) {
            ++*(_DWORD *)(a1 + 256);
          }
          return;
        }
        [*(id *)(a1 + 176) trustedTimestamp];
        uint64_t v12 = v11;
        long long v44 = 0u;
        memset(v45, 0, 28);
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        memset(v39, 0, sizeof(v39));
        long long v38 = 0u;
        uint64_t v13 = *(void **)(a1 + 176);
        if (v13) {
          [v13 clientLocation];
        }
        *(void *)&v45[1] = 0;
        *(_OWORD *)((char *)v39 + 12) = xmmword_190882480;
        if ([a2 altitudeStitchingEnabled]
          && (int v14 = *(void **)(a1 + 184)) != 0
          && sub_190866108((id *)a1, a2, v14))
        {
          [*(id *)(a1 + 184) altitude];
          *(void *)((char *)v39 + 12) = v15;
          [*(id *)(a1 + 184) ellipsoidalAltitude];
          *(void *)&v45[1] = v16;
          [*(id *)(a1 + 184) verticalAccuracy];
          *(void *)((char *)&v39[1] + 4) = v17;
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          dispatch_source_t v18 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v19 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            uint64_t v47 = (uint64_t)v19;
            _os_log_impl(&dword_1906B8000, v18, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendCachedLocation,location sent to client with altitude stitching", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_41;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 == -1)
          {
LABEL_57:
            id v27 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            int v36 = 138543362;
            id v37 = v27;
            uint64_t v28 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::sendCachedLocation(CLEmergencyLocationUsabilityCriteria *, BOOL)", "CoreLocation: %s\n", v28);
            if (v28 != (char *)buf) {
              free(v28);
            }
LABEL_41:
            double v22 = [CLLocation alloc];
            v34[6] = v43;
            v34[7] = v44;
            v35[0] = v45[0];
            *(_OWORD *)((char *)v35 + 12) = *(_OWORD *)((char *)v45 + 12);
            _OWORD v34[2] = v39[1];
            v34[3] = v40;
            v34[4] = v41;
            v34[5] = v42;
            v34[0] = v38;
            v34[1] = v39[0];
            long long v30 = xmmword_1908835C0;
            unint64_t v31 = 0xBFF0000000000000;
            uint64_t v32 = v12;
            memcpy(v33, &unk_1908835E0, sizeof(v33));
            uint64_t v23 = [(CLLocation *)v22 initWithClientLocation:v34 clientLocationPrivate:&v30];
            sub_190867C90(a1, v23);
            if (v23)
            {
              if (qword_1EB2713E8 != -1) {
                dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
              }
              uint64_t v24 = qword_1EB2713E0;
              if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)__n128 buf = 0;
                _os_log_impl(&dword_1906B8000, v24, OS_LOG_TYPE_DEFAULT, "#CLELS,sendCachedLocation,updating metrics", buf, 2u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EB2713E8 != -1) {
                  dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
                }
                LOWORD(v36) = 0;
                double v29 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::sendCachedLocation(CLEmergencyLocationUsabilityCriteria *, BOOL)", "CoreLocation: %s\n", v29);
                if (v29 != (char *)buf) {
                  free(v29);
                }
              }
              sub_1908675E8(a1, *(void **)(a1 + 176), a3);
            }
            if ((a3 & 1) == 0) {
              ++*(_DWORD *)(a1 + 256);
            }

            return;
          }
        }
        else
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          double v20 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v21 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            uint64_t v47 = (uint64_t)v21;
            _os_log_impl(&dword_1906B8000, v20, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendCachedLocation,location sent to client with altitude cleared", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            goto LABEL_41;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 == -1) {
            goto LABEL_57;
          }
        }
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        goto LABEL_57;
      }
    }
    sub_190867C90(a1, 0);
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    double v9 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134283521;
      uint64_t v47 = a1;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,sendCachedLocation,this:%{private}p,nil fConfig,early return", buf, 0xCu);
    }
    if (sub_1906CB57C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      LODWORD(v38) = 134283521;
      *(void *)((char *)&v38 + 4) = a1;
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 0, "void CLEmergencyLocationSelectorInternal::sendCachedLocation(CLEmergencyLocationUsabilityCriteria *, BOOL)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

uint64_t sub_190866108(id *a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (!*a1)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    id v8 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134283521;
      uint64_t v16 = a1;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,isLocationRecentEnough,this:%{private}p,nil fConfig,early return", buf, 0xCu);
    }
    int v9 = sub_1906CB57C(115, 0);
    uint64_t result = 0;
    if (!v9) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::isLocationRecentEnough(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n", v10);
    if (v10 != (char *)buf) {
      goto LABEL_30;
    }
    return 0;
  }
  if (!a2 || !a3)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    uint64_t v11 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
      *(_DWORD *)__n128 buf = 138543362;
      uint64_t v16 = v12;
      _os_log_impl(&dword_1906B8000, v11, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,canSendLocationAtTimeout,will send nil location", buf, 0xCu);
    }
    uint64_t result = sub_1906CB57C(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 == -1)
    {
LABEL_29:
      +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isLocationRecentEnough(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
LABEL_30:
      }
        free(v10);
      return 0;
    }
LABEL_32:
    dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    goto LABEL_29;
  }
  double v5 = sub_1908671A4(a1, a3);
  [a2 maxUsableAge];
  if (fabs(v5) <= v6) {
    return 1;
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
  }
  uint64_t v13 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
    *(_DWORD *)__n128 buf = 138543618;
    uint64_t v16 = v14;
    __int16 v17 = 2050;
    double v18 = v5;
    _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,canSendLocationAtTimeout,not sending,location too old. Age:%{public}f", buf, 0x16u);
  }
  uint64_t result = sub_1906CB57C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 == -1) {
      goto LABEL_29;
    }
    goto LABEL_32;
  }
  return result;
}

uint64_t sub_1908665C0(id *a1, void *a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    if (a2 && a3)
    {
      [a3 horizontalAccuracy];
      if (v6 > 0.0)
      {
        unsigned int v7 = [a3 integrity];
        if (v7 < [a2 minUsableIntegrity])
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          id v8 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
            *(_DWORD *)__n128 buf = 138543618;
            long long v42 = v9;
            __int16 v43 = 1026;
            LODWORD(v44) = [a3 integrity];
            _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsableForFirstUpdate,not saving,integrity too low. Integrity:%{public}d", buf, 0x12u);
          }
          uint64_t result = sub_1906CB57C(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1EB2713E8 != -1) {
              dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
            }
            +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
            [a3 integrity];
            uint64_t v11 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isLocationUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
            goto LABEL_22;
          }
          return result;
        }
        id v18 = a1[24];
        if (v18)
        {
          [v18 horizontalAccuracy];
          double v20 = v19;
          [a3 horizontalAccuracy];
          if (v20 < v21)
          {
            [a1[24] coordinate];
            double v23 = v22;
            [a1[24] coordinate];
            double v25 = v24;
            [a3 coordinate];
            double v27 = v26;
            [a3 coordinate];
            double v29 = sub_1906D7AA4(v23, v25, v27, v28);
            [*a1 locationUpdateDistanceMovedToSendEarly];
            if (v29 < v30 || ([a3 horizontalAccuracy], v29 < v31))
            {
              if (qword_1EB2713E8 != -1) {
                dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
              }
              uint64_t v32 = qword_1EB2713E0;
              if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
              {
                double v33 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
                *(_DWORD *)__n128 buf = 138543362;
                long long v42 = v33;
                _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsableForFirstUpdate,not saving", buf, 0xCu);
              }
              uint64_t result = sub_1906CB57C(115, 2);
              if (!result) {
                return result;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1EB2713E8 == -1) {
                goto LABEL_37;
              }
LABEL_75:
              dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
              goto LABEL_37;
            }
            if (qword_1E929F608 != -1) {
              dispatch_once(&qword_1E929F608, &unk_1EE003398);
            }
            long long v38 = qword_1E929F600;
            if (os_log_type_enabled((os_log_t)qword_1E929F600, OS_LOG_TYPE_DEFAULT))
            {
              int v39 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
              *(_DWORD *)__n128 buf = 138543618;
              long long v42 = v39;
              __int16 v43 = 2050;
              double v44 = v29;
              _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsableForFirstUpdate,saving,location changed significantly,dist,%{public}f", buf, 0x16u);
            }
            if (!sub_1906CB57C(115, 2)) {
              return 1;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1E929F608 != -1) {
              dispatch_once(&qword_1E929F608, &unk_1EE003398);
            }
LABEL_73:
            +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
            long long v40 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isLocationUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n", v40);
            if (v40 != (char *)buf) {
              free(v40);
            }
            return 1;
          }
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          int v36 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            id v37 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            long long v42 = v37;
            _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsableForFirstUpdate,saving,better Hunc", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 1;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 == -1) {
            goto LABEL_73;
          }
        }
        else
        {
          if (qword_1EB2713E8 != -1) {
            dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
          }
          __int16 v34 = qword_1EB2713E0;
          if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
          {
            double v35 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
            *(_DWORD *)__n128 buf = 138543362;
            long long v42 = v35;
            _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsableForFirstUpdate,saving,haven't save first update before.", buf, 0xCu);
          }
          if (!sub_1906CB57C(115, 2)) {
            return 1;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1EB2713E8 == -1) {
            goto LABEL_73;
          }
        }
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        goto LABEL_73;
      }
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      uint64_t v16 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v17 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
        *(_DWORD *)__n128 buf = 138543362;
        long long v42 = v17;
        _os_log_impl(&dword_1906B8000, v16, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsableForFirstUpdate,not saving,invalid hunc", buf, 0xCu);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        goto LABEL_75;
      }
    }
    else
    {
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      int v14 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
        *(_DWORD *)__n128 buf = 138543362;
        long long v42 = v15;
        _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,isLocationUsableForFirstUpdate,not saving,invalid parameters", buf, 0xCu);
      }
      uint64_t result = sub_1906CB57C(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        goto LABEL_75;
      }
    }
LABEL_37:
    +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLEmergencyLocationSelectorInternal::isLocationUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n", v11);
    if (v11 == (char *)buf) {
      return 0;
    }
LABEL_38:
    free(v11);
    return 0;
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
  }
  uint64_t v12 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134283521;
    long long v42 = a1;
    _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,isLocationUsableForFirstUpdate,this:%{private}p,nil fConfig,early return", buf, 0xCu);
  }
  int v13 = sub_1906CB57C(115, 0);
  uint64_t result = 0;
  if (v13)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLEmergencyLocationSelectorInternal::isLocationUsableForFirstUpdate(CLEmergencyLocationUsabilityCriteria *, CLLocation *)", "CoreLocation: %s\n");
LABEL_22:
    if (v11 == (char *)buf) {
      return 0;
    }
    goto LABEL_38;
  }
  return result;
}

double sub_1908671A4(id *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*a1)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    unsigned int v7 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134283521;
      uint64_t v12 = a1;
      _os_log_impl(&dword_1906B8000, v7, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,getAge,this:%{private}p,nil fConfig,early return", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 1.79769313e308;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    id v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "CFTimeInterval CLEmergencyLocationSelectorInternal::getAge(CLLocation *)", "CoreLocation: %s\n", v8);
    if (v8 == (char *)buf) {
      return 1.79769313e308;
    }
LABEL_24:
    free(v8);
    return 1.79769313e308;
  }
  if (!a2)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    int v9 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
      *(_DWORD *)__n128 buf = 138543362;
      uint64_t v12 = v10;
      _os_log_impl(&dword_1906B8000, v9, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,getAge,invalid parameters", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return 1.79769313e308;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*a1 feature]);
    id v8 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "CFTimeInterval CLEmergencyLocationSelectorInternal::getAge(CLLocation *)", "CoreLocation: %s\n", v8);
    if (v8 == (char *)buf) {
      return 1.79769313e308;
    }
    goto LABEL_24;
  }
  uint64_t v4 = (void *)[MEMORY[0x1E4F1C9C8] date];
  uint64_t v5 = [a2 timestamp];

  [v4 timeIntervalSinceDate:v5];
  return result;
}

uint64_t sub_190867544(uint64_t result, double *a2, double *a3)
{
  if (result)
  {
    uint64_t v5 = (void *)result;
    double v12 = 0.0;
    double v13 = 0.0;
    CLGetUncertaintyScaleFactors(0x5Fu, &v13, &v12);
    double v6 = v13;
    [v5 horizontalAccuracy];
    *a2 = v6 * v7;
    double result = [v5 verticalAccuracy];
    double v8 = -1.0;
    if (v9 > 0.0)
    {
      double v10 = v12;
      double result = [v5 verticalAccuracy];
      double v8 = v10 * v11;
    }
    *a3 = v8;
  }
  else
  {
    *a2 = -1.0;
    *a3 = -1.0;
  }
  return result;
}

void sub_1908675E8(uint64_t a1, void *a2, int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    uint64_t v5 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "#CLELS,updateSessionStats,updating metrics for first location", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      double v23 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::updateSessionStats(CLLocation *, BOOL)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    *(unsigned char *)(a1 + 208) = 1;
    *(_DWORD *)(a1 + 224) = [a2 integrity];
    *(_DWORD *)(a1 + 212) = [a2 type];
    [a2 horizontalAccuracy];
    *(_DWORD *)(a1 + 216) = (int)v6;
    [a2 verticalAccuracy];
    *(_DWORD *)(a1 + 220) = (int)v7;
    *(_DWORD *)(a1 + 228) = (int)sub_1908671A4((id *)a1, a2);
  }
  else
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    double v8 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v8, OS_LOG_TYPE_DEFAULT, "#CLELS,updateSessionStats,updating metrics for periodic update", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      double v24 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::updateSessionStats(CLLocation *, BOOL)", "CoreLocation: %s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    int v9 = *(_DWORD *)(a1 + 264);
    if (v9 < 1 || (double v10 = (double)v9, [a2 horizontalAccuracy], v11 < v10))
    {
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      double v12 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(_DWORD *)(a1 + 264);
        [a2 horizontalAccuracy];
        *(_DWORD *)__n128 buf = 67109376;
        int v28 = v13;
        __int16 v29 = 2048;
        uint64_t v30 = v14;
        _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_DEFAULT, "#CLELS,updateSessionStats,updating HACC for periodic update,horizontalAccOfLocInBestPeriodicUpdate,%d,horizontalAccuracy,%f", buf, 0x12u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        [a2 horizontalAccuracy];
        double v25 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::updateSessionStats(CLLocation *, BOOL)", "CoreLocation: %s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      *(_DWORD *)(a1 + 272) = [a2 integrity];
      *(_DWORD *)(a1 + 280) = [a2 type];
      [a2 horizontalAccuracy];
      *(_DWORD *)(a1 + 264) = (int)v15;
      *(_DWORD *)(a1 + 276) = (int)sub_1908671A4((id *)a1, a2);
    }
    int v16 = *(_DWORD *)(a1 + 268);
    if (v16 < 1 || (double v17 = (double)v16, [a2 verticalAccuracy], v18 < v17))
    {
      if (qword_1EB2713E8 != -1) {
        dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
      }
      double v19 = qword_1EB2713E0;
      if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *(_DWORD *)(a1 + 268);
        [a2 verticalAccuracy];
        *(_DWORD *)__n128 buf = 67109376;
        int v28 = v20;
        __int16 v29 = 2048;
        uint64_t v30 = v21;
        _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_DEFAULT, "#CLELS,updateSessionStats,updating VACC for periodic update,verticalAccOfLocInBestPeriodicUpdate,%d,verticalAccuracy,%f", buf, 0x12u);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB2713E8 != -1) {
          dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
        }
        [a2 verticalAccuracy];
        double v26 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::updateSessionStats(CLLocation *, BOOL)", "CoreLocation: %s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      [a2 verticalAccuracy];
      *(_DWORD *)(a1 + 268) = (int)v22;
    }
    ++*(_DWORD *)(a1 + 260);
  }
}

void sub_190867C90(uint64_t a1, void *a2)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (!*(void *)a1)
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    double v22 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134283521;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_impl(&dword_1906B8000, v22, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,sendLocation,this:%{private}p,nil fConfig,early return", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    LODWORD(v45[0]) = 134283521;
    *(void *)((char *)v45 + 4) = a1;
LABEL_25:
    double v24 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "void CLEmergencyLocationSelectorInternal::sendLocation(CLLocation *)", "CoreLocation: %s\n", v24);
    if (v24 == (char *)buf) {
      return;
    }
    goto LABEL_46;
  }
  if (!*(void *)(a1 + 16))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    double v23 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134283521;
      *(void *)&uint8_t buf[4] = a1;
      _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_ERROR, "#CLELS,CLEmergencyLocationSelectorInternal,sendLocation,this:%{private}p,nil fSendLocationCb,early return", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    LODWORD(v45[0]) = 134283521;
    *(void *)((char *)v45 + 4) = a1;
    goto LABEL_25;
  }

  *(void *)(a1 + 160) = a2;
  uint64_t v4 = mach_continuous_time();
  *(double *)(a1 + 168) = sub_1907E1770(v4);
  (*(void (**)(void))(*(void *)(a1 + 16) + 16))();
  if (*(void *)(a1 + 160))
  {
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    uint64_t v5 = qword_1EB2713E0;
    if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
      [*(id *)(a1 + 160) coordinate];
      uint64_t v8 = v7;
      [*(id *)(a1 + 160) coordinate];
      uint64_t v10 = v9;
      [*(id *)(a1 + 160) horizontalAccuracy];
      uint64_t v12 = v11;
      [*(id *)(a1 + 160) altitude];
      uint64_t v14 = v13;
      [*(id *)(a1 + 160) ellipsoidalAltitude];
      uint64_t v16 = v15;
      [*(id *)(a1 + 160) verticalAccuracy];
      uint64_t v18 = v17;
      uint64_t v19 = [*(id *)(a1 + 160) timestamp];
      int v20 = *(void **)(a1 + 160);
      if (v20)
      {
        [v20 clientLocation];
        int v21 = v75;
        int v20 = *(void **)(a1 + 160);
      }
      else
      {
        int v21 = 0;
        long long v76 = 0u;
        memset(v77, 0, sizeof(v77));
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        *(_OWORD *)__n128 buf = 0u;
      }
      LODWORD(v45[0]) = 138545667;
      *(void *)((char *)v45 + 4) = v6;
      WORD6(v45[0]) = 2049;
      *(void *)((char *)v45 + 14) = v8;
      WORD3(v45[1]) = 2049;
      *((void *)&v45[1] + 1) = v10;
      LOWORD(v45[2]) = 2050;
      *(void *)((char *)&v45[2] + 2) = v12;
      WORD5(v45[2]) = 2049;
      *(void *)((char *)&v45[2] + 12) = v14;
      WORD2(v45[3]) = 2049;
      *(void *)((char *)&v45[3] + 6) = v16;
      HIWORD(v45[3]) = 2050;
      *(void *)&v45[4] = v18;
      WORD4(v45[4]) = 2114;
      *(void *)((char *)&v45[4] + 10) = v19;
      WORD1(v45[5]) = 1026;
      DWORD1(v45[5]) = v21;
      WORD4(v45[5]) = 1026;
      *(_DWORD *)((char *)&v45[5] + 10) = [v20 integrity];
      _os_log_impl(&dword_1906B8000, v5, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendLocation,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}f,alt,%{private}f,ellipsoidalAlt,%{private}f,vunc,%{public}f,timestamp,%{public}@,locationType,%{public}d,integrity,%{public}d", (uint8_t *)v45, 0x5Eu);
    }
    if (!sub_1906CB57C(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    id v28 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
    [*(id *)(a1 + 160) coordinate];
    uint64_t v30 = v29;
    [*(id *)(a1 + 160) coordinate];
    uint64_t v32 = v31;
    [*(id *)(a1 + 160) horizontalAccuracy];
    uint64_t v34 = v33;
    [*(id *)(a1 + 160) altitude];
    uint64_t v36 = v35;
    [*(id *)(a1 + 160) ellipsoidalAltitude];
    uint64_t v38 = v37;
    [*(id *)(a1 + 160) verticalAccuracy];
    uint64_t v40 = v39;
    uint64_t v41 = [*(id *)(a1 + 160) timestamp];
    long long v42 = *(void **)(a1 + 160);
    if (v42)
    {
      [v42 clientLocation];
      int v43 = v46;
      long long v42 = *(void **)(a1 + 160);
    }
    else
    {
      int v43 = 0;
      long long v47 = 0u;
      memset(v48, 0, sizeof(v48));
      long long v46 = 0u;
      memset(v45, 0, sizeof(v45));
    }
    int v44 = [v42 integrity];
    int v49 = 138545667;
    id v50 = v28;
    __int16 v51 = 2049;
    uint64_t v52 = v30;
    __int16 v53 = 2049;
    uint64_t v54 = v32;
    __int16 v55 = 2050;
    uint64_t v56 = v34;
    __int16 v57 = 2049;
    uint64_t v58 = v36;
    __int16 v59 = 2049;
    uint64_t v60 = v38;
    __int16 v61 = 2050;
    uint64_t v62 = v40;
    __int16 v63 = 2114;
    uint64_t v64 = v41;
    __int16 v65 = 1026;
    int v66 = v43;
    __int16 v67 = 1026;
    int v68 = v44;
    goto LABEL_45;
  }
  if (qword_1EB2713E8 != -1) {
    dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
  }
  double v25 = qword_1EB2713E0;
  if (os_log_type_enabled((os_log_t)qword_1EB2713E0, OS_LOG_TYPE_DEFAULT))
  {
    id v26 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
    *(_DWORD *)__n128 buf = 138543362;
    *(void *)&uint8_t buf[4] = v26;
    _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_DEFAULT, "#CLELS,%{public}@,sendLocation,nil location sent to client", buf, 0xCu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB2713E8 != -1) {
      dispatch_once(&qword_1EB2713E8, &unk_1EE0060C0);
    }
    id v27 = +[CLEmergencyLocationSelectorConfig featureString:](CLEmergencyLocationSelectorConfig, "featureString:", [*(id *)a1 feature]);
    LODWORD(v45[0]) = 138543362;
    *(void *)((char *)v45 + 4) = v27;
LABEL_45:
    double v24 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void CLEmergencyLocationSelectorInternal::sendLocation(CLLocation *)", "CoreLocation: %s\n", v24);
    if (v24 == (char *)buf) {
      return;
    }
LABEL_46:
    free(v24);
  }
}

uint64_t sub_190868418(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

os_log_t sub_190868420()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Emergency");
  qword_1E929F600 = (uint64_t)result;
  return result;
}

void sub_190868454(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

uint64_t sub_190868490(uint64_t a1, uint64_t a2)
{
  if (sub_190770C68(a2, (uint64_t)&unk_1EE0037B0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

os_log_t sub_1908684D4()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "Gnss");
  qword_1E929F698 = (uint64_t)result;
  return result;
}

uint64_t sub_190868504(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  id v3 = (void *)(a1 + 64);
  if (v2 != (void *)(a1 + 64))
  {
    do
    {
      sub_190864200(a1, *((_DWORD *)v2 + 8));
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1906DDC00(*(void **)(a1 + 64));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
  if (v7) {
    sub_1906BFE48(v7);
  }
  sub_1906DDC00(*(void **)(a1 + 16));
  return a1;
}

uint64_t **sub_1908685B4(uint64_t **a1, int a2, _DWORD *a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        BOOL v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        BOOL v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    v7[6] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *BOOL v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_19074BCA4(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_190868684(uint64_t a1)
{
}

void sub_19086883C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
}

uint64_t sub_190868854(uint64_t a1)
{
  return sub_190868860(*(void *)(*(void *)(a1 + 32) + 8));
}

uint64_t sub_190868860(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    uint64_t v3 = MEMORY[0x192FCE820]();
    uint64_t result = MEMORY[0x192FCEAD0](v3, 0xB0C40BC2CC919);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_190868A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
}

os_log_t sub_190869674()
{
  os_log_t result = os_log_create("com.apple.locationd.Core", "Core");
  qword_1EB2713D0 = (uint64_t)result;
  return result;
}

uint64_t sub_19086B27C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
}

void *sub_19086B2A4(void *a1)
{
  *a1 = &unk_1EE004C28;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveEveryObserver(LocalCenter, a1);
  if (*((char *)a1 + 151) < 0) {
    operator delete((void *)a1[16]);
  }
  if (*((char *)a1 + 127) < 0) {
    operator delete((void *)a1[13]);
  }
  if (*((char *)a1 + 103) < 0) {
    operator delete((void *)a1[10]);
  }
  if (*((char *)a1 + 79) < 0) {
    operator delete((void *)a1[7]);
  }
  sub_19078D570((uint64_t)(a1 + 5));
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_1906BFE48(v3);
  }
  return a1;
}

uint64_t sub_19086B350()
{
  uint64_t v0 = objc_opt_new();
  qword_1EB2725B0 = (uint64_t)v0;

  return [v0 setDateFormat:@"yyyy-MM-dd_HH-mm-ss"];
}

void sub_19086B390(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB2725C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB2725C0))
  {
    unk_1EB272600 = 0;
    xmmword_1EB2725F0 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB2725F0, &dword_1906B8000);
    __cxa_guard_release(&qword_1EB2725C0);
  }
  if (qword_1EB2725C8 != -1) {
    dispatch_once(&qword_1EB2725C8, &unk_1EE006440);
  }
  if (byte_1EB272607 < 0)
  {
    long long v2 = xmmword_1EB2725F0;
    sub_1906C00FC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB2725F0;
    *(void *)(a1 + 16) = unk_1EB272600;
  }
}

void sub_19086B480()
{
}

void sub_19086B494(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB2725D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB2725D0))
  {
    unk_1EB272618 = 0;
    xmmword_1EB272608 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB272608, &dword_1906B8000);
    __cxa_guard_release(&qword_1EB2725D0);
  }
  if (qword_1EB2725D8 != -1) {
    dispatch_once(&qword_1EB2725D8, &unk_1EE0061A0);
  }
  if (byte_1EB27261F < 0)
  {
    long long v2 = xmmword_1EB272608;
    sub_1906C00FC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB272608;
    *(void *)(a1 + 16) = unk_1EB272618;
  }
}

void sub_19086B584()
{
  uint64_t v0 = NSString;
  sub_1906D5C70(v2, "mobile");
  sub_1907AA64C((uint64_t)v2, __p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  MEMORY[0x192FCE920](&xmmword_1EB272608, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v0, "stringWithUTF8String:", v1), "stringByAppendingPathComponent:", objc_msgSend(&unk_1EE023838, "componentsJoinedByString:", @"/")), "UTF8String"));
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_19086B640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19086B674(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB2725E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB2725E0))
  {
    unk_1EB272630 = 0;
    xmmword_1EB272620 = 0uLL;
    __cxa_atexit(MEMORY[0x1E4FBA210], &xmmword_1EB272620, &dword_1906B8000);
    __cxa_guard_release(&qword_1EB2725E0);
  }
  if (qword_1EB2725E8 != -1) {
    dispatch_once(&qword_1EB2725E8, &unk_1EE0062A0);
  }
  if (byte_1EB272637 < 0)
  {
    long long v2 = xmmword_1EB272620;
    sub_1906C00FC((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_1EB272620;
    *(void *)(a1 + 16) = unk_1EB272630;
  }
}

void sub_19086B764()
{
  uint64_t v0 = NSString;
  sub_1906D5C70(v2, "mobile");
  sub_1907AA64C((uint64_t)v2, __p);
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  MEMORY[0x192FCE920](&xmmword_1EB272620, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v0, "stringWithUTF8String:", v1), "stringByAppendingPathComponent:", objc_msgSend(&unk_1EE023850, "componentsJoinedByString:", @"/")), "UTF8String"));
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_19086B820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19086B854(const void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, std::string *a5@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  uint64_t v11 = &v30;
  sub_190796A90((uint64_t)&v30, v10 + 1);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = *a1;
    }
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v14 = *(const std::string::value_type **)a2;
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v15 = *(void *)(a2 + 8);
  }
  uint64_t v16 = std::string::append(&v30, v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v31, "_");
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (qword_1EB2725B8 != -1) {
    dispatch_once(&qword_1EB2725B8, &unk_1EE006120);
  }
  sub_1906D5C70(__p, (char *)objc_msgSend((id)objc_msgSend((id)qword_1EB2725B0, "stringFromDate:", a4), "UTF8String"));
  if ((v29 & 0x80u) == 0) {
    int v20 = __p;
  }
  else {
    int v20 = (void **)__p[0];
  }
  if ((v29 & 0x80u) == 0) {
    std::string::size_type v21 = v29;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)__p[1];
  }
  double v22 = std::string::append(&v32, (const std::string::value_type *)v20, v21);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  int v24 = *(char *)(a3 + 23);
  if (v24 >= 0) {
    double v25 = (const std::string::value_type *)a3;
  }
  else {
    double v25 = *(const std::string::value_type **)a3;
  }
  if (v24 >= 0) {
    std::string::size_type v26 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v26 = *(void *)(a3 + 8);
  }
  id v27 = std::string::append(&v33, v25, v26);
  *a5 = *v27;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  if ((char)v29 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_19086BA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19086BAEC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_19086B674((uint64_t)v5);
  if (v6 >= 0) {
    uint64_t v4 = (char *)v5;
  }
  else {
    uint64_t v4 = (char *)v5[0];
  }
  sub_1906D5C70(__p, v4);
  sub_19086B854((const void **)__p, a1 + 80, a1 + 104, [MEMORY[0x1E4F1C9C8] date], a2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_19086BB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19086BBBC()
{
  return [MEMORY[0x1E4F1C9C8] date];
}

uint64_t sub_19086BBC8(uint64_t a1, char **a2, char *a3)
{
  char v3 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 >= 0) {
    uint64_t v4 = (char *)a2;
  }
  else {
    uint64_t v4 = *a2;
  }
  int v5 = a3[23];
  if (v5 >= 0) {
    char v6 = a3;
  }
  else {
    char v6 = *(char **)a3;
  }
  if (v5 >= 0) {
    int64_t v7 = a3[23];
  }
  else {
    int64_t v7 = *((void *)a3 + 1);
  }
  if (!v7) {
    return 1;
  }
  if ((char)v3 < 0) {
    char v3 = a2[1];
  }
  char v8 = &v3[(void)v4];
  if ((uint64_t)v3 >= v7)
  {
    int v12 = *v6;
    int v13 = v4;
    do
    {
      uint64_t v14 = &v3[-v7];
      if (v14 == (char *)-1) {
        break;
      }
      std::string::size_type v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
      if (!v15) {
        break;
      }
      uint64_t v9 = v15;
      if (!memcmp(v15, v6, v7)) {
        return v9 != v8 && v9 == v4;
      }
      int v13 = v9 + 1;
      char v3 = (char *)(v8 - (v9 + 1));
    }
    while ((uint64_t)v3 >= v7);
  }
  uint64_t v9 = v8;
  return v9 != v8 && v9 == v4;
}

unint64_t sub_19086BCA0(uint64_t a1, void **a2, char *a3)
{
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  char v4 = a3[23];
  if (v4 >= 0) {
    int64_t v5 = a3[23];
  }
  else {
    int64_t v5 = *((void *)a3 + 1);
  }
  if (v4 >= 0) {
    char v6 = a3;
  }
  else {
    char v6 = *(char **)a3;
  }
  if ((v3 & 0x80u) == 0)
  {
    int64_t v7 = (char *)a2;
  }
  else
  {
    unint64_t v3 = (unint64_t)a2[1];
    int64_t v7 = (char *)*a2;
  }
  unint64_t result = v3 == v5;
  if (v3 < result) {
    return 1;
  }
  if (v5)
  {
    uint64_t v9 = &v7[result];
    size_t v10 = &v7[v3];
    int64_t v11 = &v7[v3] - v9;
    if (v11 >= v5)
    {
      int v14 = *v6;
      do
      {
        int64_t v15 = v11 - v5;
        if (v15 == -1) {
          break;
        }
        uint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        int v12 = v16;
        if (!memcmp(v16, v6, v5)) {
          return v12 != v7 || v12 == v10;
        }
        uint64_t v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v5);
    }
    int v12 = v10;
    return v12 != v7 || v12 == v10;
  }
  return result;
}

unint64_t *CLGenerateRoadSegmentId(unint64_t *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  *unint64_t result = ((unint64_t)a3 << 12) | (a2 << 38) | a4;
  return result;
}

uint64_t sub_19086E42C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v13 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v13, OS_LOG_TYPE_ERROR, "CLTSP,null tripData", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 == -1) {
      goto LABEL_70;
    }
    goto LABEL_229;
  }
  if (![a2 tripLocations] || !objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count"))
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v12 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v12, OS_LOG_TYPE_ERROR, "CLTSP,zero tripLocations", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 == -1) {
      goto LABEL_70;
    }
LABEL_229:
    dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
LABEL_70:
    LOWORD(v205) = 0;
    int64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentProcessor::processData(CLTripSegmentInputData * _Nonnull, CLTripSegmentProcessorOptions * _Nonnull, TripSegmentOutputDataHandler _Nonnull)", "CoreLocation: %s\n", v11);
    goto LABEL_71;
  }
  uint64_t v183 = a1;
  objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "lastObject"), "timestamp"), "timeIntervalSinceDate:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "firstObject"), "timestamp"));
  double v9 = fabs(v8);
  if (v9 > 3601.0)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    size_t v10 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134349056;
      *(double *)__int16 v230 = v9;
      _os_log_impl(&dword_1906B8000, v10, OS_LOG_TYPE_ERROR, "CLTSP,too long trip segment,%{public}.lf,seconds", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v205 = 134349056;
    *(double *)__int16 v206 = v9;
    int64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentProcessor::processData(CLTripSegmentInputData * _Nonnull, CLTripSegmentProcessorOptions * _Nonnull, TripSegmentOutputDataHandler _Nonnull)", "CoreLocation: %s\n", v11);
LABEL_71:
    if (v11 != (char *)buf) {
      free(v11);
    }
    return 0;
  }
  uint64_t v16 = mach_continuous_time();
  double v180 = sub_1907E1770(v16);
  *(unsigned char *)(a1 + 72) = [a3 shouldRecordDataInFileForReplay];
  uint64_t v17 = a1 + 72;
  *(void *)(v183 + 80) = [a3 tripSegmentRecorderLoggingDirectory];
  if (objc_msgSend((id)objc_msgSend(a3, "tripSegmentRecorderLoggingDirectory"), "containsString:", @"routesmoother"))*(unsigned char *)(v183 + 73) = 1; {
  sub_1907DC9A8(v17, (uint64_t)a2, objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "objectAtIndexedSubscript:", 0), "timestamp"), 0);
  }
  sub_1906D5C70(&__str, (char *)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripSegmentID"), "UUIDString"), "UTF8String"));
  __int16 v182 = a3;
  uint64_t v18 = (char *)objc_msgSend((id)sub_1907DC8F8(objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "objectAtIndexedSubscript:", 0), "timestamp")), "UTF8String");
  sub_1906D5C70(v200, v18);
  uint64_t v179 = v17;
  uint64_t v181 = a4;
  long long v19 = (char *)objc_msgSend((id)sub_1907DC950(objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "objectAtIndexedSubscript:", 0), "timestamp")), "UTF8String");
  sub_1906D5C70(v198, v19);
  int v20 = (unsigned char *)sub_190857D8C();
  *int v20 = [a3 isSimulatedSparseProcessing] ^ 1;
  std::string::size_type v21 = (std::string *)sub_190857D8C();
  sub_190857E8C(v21, &__str);
  uint64_t v22 = sub_190857D8C();
  if (*(unsigned char *)v22)
  {
    *(_DWORD *)(v22 + 32) += objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count");
    *(void *)(v22 + 48) = [a2 modeOfTransport];
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
  }
  long long v23 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    int v25 = [a2 modeOfTransport];
    int v26 = [a2 isFinalPart];
    int v27 = objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count");
    if (objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count"))
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      double v29 = v28;
    }
    else
    {
      double v29 = -1.0;
    }
    if (objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count"))
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      double v31 = v30;
    }
    else
    {
      double v31 = -1.0;
    }
    int v32 = [v182 isSimulatedSparseProcessing];
    uint64_t v33 = v200;
    if (v201 < 0) {
      uint64_t v33 = (void **)v200[0];
    }
    uint64_t v34 = v198;
    if (v199 < 0) {
      uint64_t v34 = (void **)v198[0];
    }
    *(_DWORD *)__n128 buf = 136448514;
    *(void *)__int16 v230 = p_str;
    *(_WORD *)&v230[8] = 1026;
    *(_DWORD *)int v231 = v25;
    *(_WORD *)&v231[4] = 1026;
    *(_DWORD *)&v231[6] = v26;
    *(_WORD *)&v231[10] = 1026;
    *(_DWORD *)__int16 v232 = v27;
    *(_WORD *)&v232[4] = 2050;
    *(double *)&v232[6] = v29;
    *(_WORD *)&v232[14] = 2050;
    *(double *)&v232[16] = v31;
    *(_WORD *)&v232[24] = 1026;
    *(_DWORD *)&v232[26] = v32;
    *(_WORD *)uint64_t v233 = 2082;
    *(void *)&v233[2] = v33;
    *(_WORD *)&v233[10] = 2082;
    *(void *)&v233[12] = v34;
    *(_WORD *)&v233[20] = 2050;
    *(double *)&v233[22] = v9;
    _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEFAULT, "CLTSP,processData,input,tripSegmentID,%{public}s,modeOfTransport,%{public}d,isFinalPart,%{public}d,sparseLocationsCount,%{public}d,startTime,%{public}.1lf,endTime,%{public}.1lf,simulated,%{public}d,date,%{public}s,time,%{public}s,crumbDuration,%{public}.lf", buf, 0x56u);
  }
  __int16 v190 = a2;
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v45 = &__str;
    }
    else {
      uint64_t v45 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    int v46 = [a2 modeOfTransport];
    int v47 = [a2 isFinalPart];
    int v48 = objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count");
    if (objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count"))
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      double v50 = v49;
    }
    else
    {
      double v50 = -1.0;
    }
    if (objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "count"))
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a2, "tripLocations"), "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      double v156 = v155;
    }
    else
    {
      double v156 = -1.0;
    }
    int v157 = [v182 isSimulatedSparseProcessing];
    unint64_t v158 = v200;
    if (v201 < 0) {
      unint64_t v158 = (void **)v200[0];
    }
    double v159 = v198;
    if (v199 < 0) {
      double v159 = (void **)v198[0];
    }
    int v205 = 136448514;
    *(void *)__int16 v206 = v45;
    *(_WORD *)&v206[8] = 1026;
    *(_DWORD *)double v207 = v46;
    *(_WORD *)&v207[4] = 1026;
    *(_DWORD *)&v207[6] = v47;
    *(_WORD *)&v207[10] = 1026;
    *(_DWORD *)__int16 v208 = v48;
    *(_WORD *)&v208[4] = 2050;
    *(double *)&v208[6] = v50;
    *(_WORD *)&v208[14] = 2050;
    *(double *)&v208[16] = v156;
    *(_WORD *)&v208[24] = 1026;
    *(_DWORD *)&v208[26] = v157;
    *(_WORD *)double v209 = 2082;
    *(void *)&v209[2] = v158;
    *(_WORD *)&v209[10] = 2082;
    *(void *)&v209[12] = v159;
    *(_WORD *)&v209[20] = 2050;
    *(double *)&v209[22] = v9;
    double v160 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::processData(CLTripSegmentInputData * _Nonnull, CLTripSegmentProcessorOptions * _Nonnull, TripSegmentOutputDataHandler _Nonnull)", "CoreLocation: %s\n", v160);
    if (v160 != (char *)buf) {
      free(v160);
    }
  }
  uint64_t v35 = (void *)[a2 tripLocations];
  uint64_t v203 = 0;
  sub_1908738E8(v35, (_DWORD *)&v203 + 1, &v203);
  int v36 = v203;
  if ((int)v203 >= 1)
  {
    do
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
      }
      uint64_t v37 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
      {
        int v38 = [v35 count];
        *(_DWORD *)__n128 buf = 67240960;
        *(_DWORD *)__int16 v230 = v38;
        *(_WORD *)&v230[4] = 1026;
        *(_DWORD *)&v230[6] = HIDWORD(v203);
        *(_WORD *)int v231 = 1026;
        *(_DWORD *)&v231[2] = v36;
        *(_WORD *)&v231[6] = 1026;
        *(_DWORD *)&v231[8] = 0;
        _os_log_impl(&dword_1906B8000, v37, OS_LOG_TYPE_INFO, "CLTSP,china shift,second try,locCount,%{public}d,applied,%{public}d,failed,%{public}d,iteration,%{public}d,", buf, 0x1Au);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
        }
        int v39 = [v35 count];
        int v205 = 67240960;
        *(_DWORD *)__int16 v206 = v39;
        *(_WORD *)&v206[4] = 1026;
        *(_DWORD *)&v206[6] = HIDWORD(v203);
        *(_WORD *)double v207 = 1026;
        *(_DWORD *)&v207[2] = v36;
        *(_WORD *)&v207[6] = 1026;
        *(_DWORD *)&v207[8] = 0;
        uint64_t v40 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::applyChinaShiftIfRequired(NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v40);
        if (v40 != (char *)buf) {
          free(v40);
        }
      }
      sub_1908738E8(v35, (_DWORD *)&v203 + 1, &v203);
      int v36 = v203;
    }
    while ((int)v203 > 0);
  }
  int v41 = HIDWORD(v203);
  long long v42 = a2;
  if (SHIDWORD(v203) >= 1)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v43 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
    {
      int v44 = [v35 count];
      *(_DWORD *)__n128 buf = 67240704;
      *(_DWORD *)__int16 v230 = v44;
      *(_WORD *)&v230[4] = 1026;
      *(_DWORD *)&v230[6] = v41;
      *(_WORD *)int v231 = 1026;
      *(_DWORD *)&v231[2] = v36;
      _os_log_impl(&dword_1906B8000, v43, OS_LOG_TYPE_INFO, "CLTSP,china shift,locCount,%{public}d,shiftCount,%{public}d,failed,%{public}d", buf, 0x14u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
      }
      int v51 = [v35 count];
      int v205 = 67240704;
      *(_DWORD *)__int16 v206 = v51;
      *(_WORD *)&v206[4] = 1026;
      *(_DWORD *)&v206[6] = v41;
      *(_WORD *)double v207 = 1026;
      *(_DWORD *)&v207[2] = v36;
      uint64_t v52 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::applyChinaShiftIfRequired(NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
      long long v42 = a2;
      if (v36) {
        goto LABEL_68;
      }
LABEL_85:
      long long v196 = 0u;
      long long v197 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      __int16 v53 = (void *)[v42 tripLocations];
      uint64_t v54 = [v53 countByEnumeratingWithState:&v194 objects:v204 count:16];
      if (v54)
      {
        uint64_t v188 = *(void *)v195;
        obuint64_t j = v53;
        do
        {
          uint64_t v55 = 0;
          uint64_t v189 = v54;
          do
          {
            if (*(void *)v195 != v188) {
              objc_enumerationMutation(obj);
            }
            uint64_t v56 = *(void **)(*((void *)&v194 + 1) + 8 * v55);
            [v56 setLocationReconstructionType:1];
            sub_1906D5C70(v192, "SparseInput");
            int v57 = [v190 modeOfTransport];
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              sub_1906C00FC(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              std::string __p = __str;
            }
            int v58 = [v190 isFinalPart];
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
            }
            __int16 v59 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
            {
              if (v193 >= 0) {
                uint64_t v60 = v192;
              }
              else {
                uint64_t v60 = (void **)v192[0];
              }
              objc_msgSend((id)objc_msgSend(v56, "timestamp"), "timeIntervalSinceReferenceDate");
              uint64_t v187 = v61;
              [v56 latitude];
              uint64_t v185 = v62;
              [v56 longitude];
              uint64_t v64 = v63;
              [v56 altitude];
              uint64_t v66 = v65;
              [v56 speed];
              uint64_t v68 = v67;
              [v56 course];
              uint64_t v70 = v69;
              [v56 horizontalAccuracy];
              uint64_t v72 = v71;
              [v56 altitudeAccuracy];
              uint64_t v74 = v73;
              [v56 speedAccuracy];
              uint64_t v76 = v75;
              [v56 courseAccuracy];
              uint64_t v78 = v77;
              int v79 = [v56 locType];
              int v80 = [v56 locTypeStart];
              int v81 = [v56 locTypeStop];
              int v82 = [v56 reconstructionType];
              int v83 = [v56 signalEnvironmentType];
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)__n128 buf = 136319747;
              *(void *)__int16 v230 = v60;
              *(_WORD *)&v230[8] = 1026;
              *(_DWORD *)int v231 = v57;
              *(_WORD *)&v231[4] = 1026;
              *(_DWORD *)&v231[6] = v58;
              *(_WORD *)&v231[10] = 2050;
              *(void *)__int16 v232 = v187;
              *(_WORD *)&v232[8] = 2049;
              *(void *)&v232[10] = v185;
              *(_WORD *)&v232[18] = 2049;
              *(void *)&v232[20] = v64;
              *(_WORD *)&v232[28] = 2050;
              *(void *)uint64_t v233 = v66;
              *(_WORD *)&v233[8] = 2050;
              *(void *)&v233[10] = v68;
              *(_WORD *)&v233[18] = 2050;
              *(void *)&v233[20] = v70;
              *(_WORD *)&v233[28] = 2050;
              uint64_t v234 = v72;
              __int16 v235 = 2050;
              uint64_t v236 = v74;
              __int16 v237 = 2050;
              uint64_t v238 = v76;
              __int16 v239 = 2050;
              uint64_t v240 = v78;
              __int16 v241 = 1026;
              int v242 = v79;
              __int16 v243 = 1026;
              int v244 = v80;
              __int16 v245 = 1026;
              int v246 = v81;
              __int16 v247 = 1026;
              int v248 = v82;
              __int16 v249 = 1026;
              int v250 = v83;
              __int16 v251 = 2082;
              double v252 = p_p;
              _os_log_impl(&dword_1906B8000, v59, OS_LOG_TYPE_DEBUG, "CLTSP,%s,mode,%{public}d,final,%{public}d,time,%{public}.3lf,LL,%{private}.7lf,%{private}.7lf,altitude,%{public}.2lf,speed,%{public}.2lf,course,%{public}.2lf,hunc,%{public}.2lf,vunc,%{public}.2lf,sunc,%{public}.7lf,cunc,%{public}.7lf,type,%{public}d,startLocType,%{public}d,endLocType,%{public}d,reconstructionType,%{public}d,sigEnv,%{public}d,id,%{public}s", buf, 0xA4u);
            }
            if (sub_1906CB57C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
              }
              if (v193 >= 0) {
                double v85 = v192;
              }
              else {
                double v85 = (void **)v192[0];
              }
              objc_msgSend((id)objc_msgSend(v56, "timestamp"), "timeIntervalSinceReferenceDate");
              uint64_t v186 = v86;
              [v56 latitude];
              uint64_t v178 = v87;
              [v56 longitude];
              uint64_t v89 = v88;
              [v56 altitude];
              uint64_t v91 = v90;
              [v56 speed];
              uint64_t v93 = v92;
              [v56 course];
              uint64_t v95 = v94;
              [v56 horizontalAccuracy];
              uint64_t v97 = v96;
              [v56 altitudeAccuracy];
              uint64_t v99 = v98;
              [v56 speedAccuracy];
              uint64_t v101 = v100;
              [v56 courseAccuracy];
              uint64_t v103 = v102;
              int v104 = [v56 locType];
              int v105 = [v56 locTypeStart];
              int v106 = [v56 locTypeStop];
              int v107 = [v56 reconstructionType];
              int v108 = [v56 signalEnvironmentType];
              uint64_t v109 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v109 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              int v205 = 136319747;
              *(void *)__int16 v206 = v85;
              *(_WORD *)&v206[8] = 1026;
              *(_DWORD *)double v207 = v57;
              *(_WORD *)&v207[4] = 1026;
              *(_DWORD *)&v207[6] = v58;
              *(_WORD *)&v207[10] = 2050;
              *(void *)__int16 v208 = v186;
              *(_WORD *)&v208[8] = 2049;
              *(void *)&v208[10] = v178;
              *(_WORD *)&v208[18] = 2049;
              *(void *)&v208[20] = v89;
              *(_WORD *)&v208[28] = 2050;
              *(void *)double v209 = v91;
              *(_WORD *)&v209[8] = 2050;
              *(void *)&v209[10] = v93;
              *(_WORD *)&v209[18] = 2050;
              *(void *)&v209[20] = v95;
              *(_WORD *)&v209[28] = 2050;
              uint64_t v210 = v97;
              __int16 v211 = 2050;
              uint64_t v212 = v99;
              __int16 v213 = 2050;
              uint64_t v214 = v101;
              __int16 v215 = 2050;
              uint64_t v216 = v103;
              __int16 v217 = 1026;
              int v218 = v104;
              __int16 v219 = 1026;
              int v220 = v105;
              __int16 v221 = 1026;
              int v222 = v106;
              __int16 v223 = 1026;
              int v224 = v107;
              __int16 v225 = 1026;
              int v226 = v108;
              __int16 v227 = 2082;
              __int16 v228 = v109;
              __int16 v110 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 2, "static void CLTripSegmentUtilities::logCLTripSegmentLocation(std::string, CLTripSegmentLocation * _Nonnull, CLTripSegmentModeOfTransport, std::string, BOOL)", "CoreLocation: %s\n", v110);
              if (v110 != (char *)buf) {
                free(v110);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v193 < 0) {
              operator delete(v192[0]);
            }
            ++v55;
          }
          while (v189 != v55);
          uint64_t v54 = [obj countByEnumeratingWithState:&v194 objects:v204 count:16];
        }
        while (v54);
      }
      uint64_t v111 = (id *)(v183 + 40);
      sub_1907B10D8(v183 + 40);
      int8x16_t v112 = v190;
      id v113 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v114 = [v190 modeOfTransport];
      if (v114 == 1)
      {
        double v121 = (void *)[v190 tripSegmentID];
        uint64_t v122 = [v190 isFinalPart];
        unint64_t v123 = [v190 modeOfTransport];
        char v120 = sub_1908704B0(v183, v182, v121, v122, v123, (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:copyItems:", objc_msgSend(v190, "tripLocations"), 1), objc_msgSend(v190, "inertialData"), v113);
      }
      else
      {
        if (v114 != 2)
        {
          if (v114 == 3)
          {
            if (sub_190871C70(v182, (void *)[v190 tripSegmentID], objc_msgSend(v190, "isFinalPart"), objc_msgSend(v190, "modeOfTransport"), objc_msgSend(v190, "tripLocations"), v113))
            {
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
              }
              int v115 = qword_1E929F6D8;
              if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)__n128 buf = 0;
                _os_log_impl(&dword_1906B8000, v115, OS_LOG_TYPE_INFO, "CLTSP,processPedestrianOrCycling,success", buf, 2u);
              }
              if (sub_1906CB57C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929F6D0 != -1) {
                  dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
                }
                LOWORD(v205) = 0;
                char v116 = (char *)_os_log_send_and_compose_impl();
                sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::processData(CLTripSegmentInputData * _Nonnull, CLTripSegmentProcessorOptions * _Nonnull, TripSegmentOutputDataHandler _Nonnull)", "CoreLocation: %s\n", v116);
                if (v116 != (char *)buf) {
                  free(v116);
                }
                int8x16_t v112 = v190;
              }
              goto LABEL_136;
            }
          }
          else
          {
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
            }
            double v129 = qword_1E929F6D8;
            if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
            {
              int v130 = [v190 modeOfTransport];
              *(_DWORD *)__n128 buf = 67240192;
              *(_DWORD *)__int16 v230 = v130;
              _os_log_impl(&dword_1906B8000, v129, OS_LOG_TYPE_ERROR, "CLTSP,processData,unknown modeOfTransport,%{public}d", buf, 8u);
            }
            if (sub_1906CB57C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929F6D0 != -1) {
                dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
              }
              int v161 = [v190 modeOfTransport];
              int v205 = 67240192;
              *(_DWORD *)__int16 v206 = v161;
              long long v162 = (char *)_os_log_send_and_compose_impl();
              sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentProcessor::processData(CLTripSegmentInputData * _Nonnull, CLTripSegmentProcessorOptions * _Nonnull, TripSegmentOutputDataHandler _Nonnull)", "CoreLocation: %s\n", v162);
              if (v162 != (char *)buf) {
                free(v162);
              }
            }
          }
          goto LABEL_145;
        }
        uint64_t v117 = (void *)[v190 tripSegmentID];
        unsigned int v118 = [v190 isFinalPart];
        unint64_t v119 = [v190 modeOfTransport];
        char v120 = sub_1908710E0(v183, v182, v117, v118, v119, (id)objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithArray:copyItems:", objc_msgSend(v190, "tripLocations"), 1), objc_msgSend(v190, "inertialOdometryData"), v113);
      }
      if (v120)
      {
LABEL_136:
        if (!v181)
        {
LABEL_170:
          double v148 = 0.0;
          if (v180 >= 0.0)
          {
            uint64_t v149 = mach_continuous_time();
            double v148 = vabdd_f64(sub_1907E1770(v149), v180) * 1000.0;
          }
          uint64_t v150 = sub_190857D8C();
          *(double *)(v150 + 120) = v148 + *(double *)(v150 + 120);
          uint64_t v151 = sub_190857D8C();
          sub_190858D70(v151);
          if ([v112 isFinalPart])
          {
            int v152 = (unsigned char *)sub_190857D8C();
            sub_190857FDC(v152);
            uint64_t v153 = sub_190857D8C();
            MEMORY[0x192FCE920](v153 + 8, "");
            *(void *)(v153 + 136) = 0;
            *(void *)(v153 + 144) = 0;
            *(_DWORD *)(v153 + 152) = 0;
            *(void *)(v153 + 168) = 0;
            *(void *)(v153 + 176) = 0;
            *(void *)(v153 + 160) = 0;
            *(void *)(v153 + 216) = 0;
            *(void *)(v153 + 224) = 0;
            *(_DWORD *)(v153 + 232) = 0;
            *(void *)(v153 + 248) = 0;
            *(void *)(v153 + 256) = 0;
            *(void *)(v153 + 240) = 0;
            *(_DWORD *)(v153 + 288) = 0;
            *(_OWORD *)(v153 + 32) = 0u;
            *(_OWORD *)(v153 + 48) = 0u;
            *(_OWORD *)(v153 + 64) = 0u;
            *(_OWORD *)(v153 + 80) = 0u;
            *(_OWORD *)(v153 + 96) = 0u;
            *(_OWORD *)(v153 + 112) = 0u;
          }
          if (!*v111)
          {
            uint64_t v14 = 1;
            goto LABEL_177;
          }

          uint64_t v14 = 1;
          goto LABEL_176;
        }
        uint64_t v124 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v112, "tripLocations"), "firstObject"), "timestamp");
        uint64_t v125 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v112, "tripLocations"), "lastObject"), "timestamp");
        double v126 = v125;
        if (v124 && v125)
        {
          [v125 timeIntervalSinceDate:v124];
          double v128 = v127;
        }
        else
        {
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
          }
          uint64_t v131 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v132 = objc_msgSend((id)objc_msgSend(v112, "tripLocations"), "count");
            *(_DWORD *)__n128 buf = 67240704;
            *(_DWORD *)__int16 v230 = v124 == 0;
            *(_WORD *)&v230[4] = 1026;
            *(_DWORD *)&v230[6] = v126 == 0;
            *(_WORD *)int v231 = 2050;
            *(void *)&v231[2] = v132;
            _os_log_impl(&dword_1906B8000, v131, OS_LOG_TYPE_ERROR, "CLTSP,processData,CLTripSegmentOutputData,duration cannot be set,startDate is nil,%{public}d,endDate is nil,%{public}d,tripSegmentData.tripLocations,count,%{public}lu", buf, 0x18u);
          }
          double v128 = -1.0;
          if (sub_1906CB57C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
            }
            uint64_t v163 = objc_msgSend((id)objc_msgSend(v190, "tripLocations"), "count");
            int v205 = 67240704;
            *(_DWORD *)__int16 v206 = v124 == 0;
            *(_WORD *)&v206[4] = 1026;
            *(_DWORD *)&v206[6] = v126 == 0;
            *(_WORD *)double v207 = 2050;
            *(void *)&v207[2] = v163;
            long long v164 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentProcessor::processData(CLTripSegmentInputData * _Nonnull, CLTripSegmentProcessorOptions * _Nonnull, TripSegmentOutputDataHandler _Nonnull)", "CoreLocation: %s\n", v164);
            if (v164 != (char *)buf) {
              free(v164);
            }
            int8x16_t v112 = v190;
          }
        }
        double v133 = sub_190871ED4(v113);
        if (sub_190872040((void *)[v112 tripLocations], v113))
        {
          double v134 = -[CLTripSegmentOutputData initWithTripSegmentID:isFinalPart:startDate:endDate:duration:modeOfTransport:distance:distanceUnc:tripLocations:]([CLTripSegmentOutputData alloc], "initWithTripSegmentID:isFinalPart:startDate:endDate:duration:modeOfTransport:distance:distanceUnc:tripLocations:", [v112 tripSegmentID], objc_msgSend(v112, "isFinalPart"), v124, v126, objc_msgSend(v112, "modeOfTransport"), v113, v128, v133, v133 * 0.05);
          if (objc_msgSend((id)objc_msgSend(v112, "tripLocations"), "count")) {
            sub_1907DC9A8(v179, (uint64_t)v134, objc_msgSend((id)objc_msgSend((id)objc_msgSend(v112, "tripLocations"), "objectAtIndexedSubscript:", 0), "timestamp"), 4);
          }
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
          }
          double v135 = qword_1E929F6D8;
          if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEFAULT))
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v136 = &__str;
            }
            else {
              double v136 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            int v137 = [(CLTripSegmentOutputData *)v134 modeOfTransport];
            BOOL v138 = [(CLTripSegmentOutputData *)v134 isFinalPart];
            int v139 = objc_msgSend((id)objc_msgSend(v112, "tripLocations"), "count");
            int v140 = [(NSArray *)[(CLTripSegmentOutputData *)v134 tripLocations] count];
            double v141 = 0.0;
            double v142 = v180;
            if (v180 >= 0.0)
            {
              uint64_t v143 = mach_continuous_time();
              double v142 = vabdd_f64(sub_1907E1770(v143), v180);
              double v141 = v142 * 1000.0;
            }
            int v144 = objc_msgSend(v182, "isSimulatedSparseProcessing", v142);
            int8x16_t v145 = v200;
            if (v201 < 0) {
              int8x16_t v145 = (void **)v200[0];
            }
            int8x16_t v146 = v198;
            if (v199 < 0) {
              int8x16_t v146 = (void **)v198[0];
            }
            *(_DWORD *)__n128 buf = 136448514;
            *(void *)__int16 v230 = v136;
            *(_WORD *)&v230[8] = 1026;
            *(_DWORD *)int v231 = v137;
            *(_WORD *)&v231[4] = 1026;
            *(_DWORD *)&v231[6] = v138;
            *(_WORD *)&v231[10] = 1026;
            *(_DWORD *)__int16 v232 = v139;
            *(_WORD *)&v232[4] = 1026;
            *(_DWORD *)&v232[6] = v140;
            *(_WORD *)&v232[10] = 2050;
            *(double *)&v232[12] = v133;
            *(_WORD *)&v232[20] = 2050;
            *(double *)&v232[22] = v141;
            *(_WORD *)uint64_t v233 = 1026;
            *(_DWORD *)&v233[2] = v144;
            *(_WORD *)&v233[6] = 2082;
            *(void *)&v233[8] = v145;
            *(_WORD *)&v233[16] = 2082;
            *(void *)&v233[18] = v146;
            _os_log_impl(&dword_1906B8000, v135, OS_LOG_TYPE_DEFAULT, "CLTSP,processData,output,tripSegmentID,%{public}s,modeOfTransport,%{public}d,isFinalPart,%{public}d,sparseLocationsCount,%{public}d,reconstructedLocCount,%{public}d,totalDistance,%{public}.2lf,processingTimeMSec,%{public}.1lf,simulated,%{public}d,date,%{public}s,time,%{public}s", buf, 0x52u);
          }
          if (sub_1906CB57C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929F6D0 != -1) {
              dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v166 = &__str;
            }
            else {
              long long v166 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            int v167 = [(CLTripSegmentOutputData *)v134 modeOfTransport];
            BOOL v168 = [(CLTripSegmentOutputData *)v134 isFinalPart];
            int v169 = objc_msgSend((id)objc_msgSend(v190, "tripLocations"), "count");
            int v170 = [(NSArray *)[(CLTripSegmentOutputData *)v134 tripLocations] count];
            double v171 = 0.0;
            double v172 = v180;
            if (v180 >= 0.0)
            {
              uint64_t v173 = mach_continuous_time();
              double v172 = vabdd_f64(sub_1907E1770(v173), v180);
              double v171 = v172 * 1000.0;
            }
            int v174 = objc_msgSend(v182, "isSimulatedSparseProcessing", v172);
            int v175 = v200;
            if (v201 < 0) {
              int v175 = (void **)v200[0];
            }
            __int16 v176 = v198;
            if (v199 < 0) {
              __int16 v176 = (void **)v198[0];
            }
            int v205 = 136448514;
            *(void *)__int16 v206 = v166;
            *(_WORD *)&v206[8] = 1026;
            *(_DWORD *)double v207 = v167;
            *(_WORD *)&v207[4] = 1026;
            *(_DWORD *)&v207[6] = v168;
            *(_WORD *)&v207[10] = 1026;
            *(_DWORD *)__int16 v208 = v169;
            *(_WORD *)&v208[4] = 1026;
            *(_DWORD *)&v208[6] = v170;
            *(_WORD *)&v208[10] = 2050;
            *(double *)&v208[12] = v133;
            *(_WORD *)&v208[20] = 2050;
            *(double *)&v208[22] = v171;
            *(_WORD *)double v209 = 1026;
            *(_DWORD *)&v209[2] = v174;
            *(_WORD *)&v209[6] = 2082;
            *(void *)&v209[8] = v175;
            *(_WORD *)&v209[16] = 2082;
            *(void *)&v209[18] = v176;
            uint64_t v177 = (char *)_os_log_send_and_compose_impl();
            sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::processData(CLTripSegmentInputData * _Nonnull, CLTripSegmentProcessorOptions * _Nonnull, TripSegmentOutputDataHandler _Nonnull)", "CoreLocation: %s\n", v177);
            if (v177 != (char *)buf) {
              free(v177);
            }
            int8x16_t v112 = v190;
          }
          uint64_t v147 = sub_190857D8C();
          sub_1908581C4(v147, v134);
          (*(void (**)(uint64_t, CLTripSegmentOutputData *))(v181 + 16))(v181, v134);
          goto LABEL_170;
        }
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
        }
        uint64_t v154 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__n128 buf = 0;
          _os_log_impl(&dword_1906B8000, v154, OS_LOG_TYPE_ERROR, "CLTSP,CLTripSegmentUtilities::getCorrectedCoordinates failed", buf, 2u);
        }
        if (sub_1906CB57C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929F6D0 != -1) {
            dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
          }
          LOWORD(v205) = 0;
          long long v165 = (char *)_os_log_send_and_compose_impl();
          sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentProcessor::processData(CLTripSegmentInputData * _Nonnull, CLTripSegmentProcessorOptions * _Nonnull, TripSegmentOutputDataHandler _Nonnull)", "CoreLocation: %s\n", v165);
          if (v165 != (char *)buf) {
            free(v165);
          }
        }
        if (!*v111) {
          goto LABEL_68;
        }
LABEL_146:

        uint64_t v14 = 0;
LABEL_176:
        id *v111 = 0;
        goto LABEL_177;
      }
LABEL_145:
      if (!*v111) {
        goto LABEL_68;
      }
      goto LABEL_146;
    }
  }
  if (!v36) {
    goto LABEL_85;
  }
LABEL_68:
  uint64_t v14 = 0;
LABEL_177:
  if (v199 < 0) {
    operator delete(v198[0]);
  }
  if (v201 < 0) {
    operator delete(v200[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_1908703C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1908704B0(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  v61[0] = 0xBFF0000000000000;
  v61[1] = 0;
  id v14 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if ([a6 count])
  {
    unint64_t v15 = 0;
    do
    {
      if (sub_1907E9D74((uint64_t)v61, a6, v15, 1.5, 45.0, 25.0)) {
        objc_msgSend(v14, "addObject:", objc_msgSend(a6, "objectAtIndexedSubscript:", v15));
      }
      ++v15;
    }
    while ([a6 count] > v15);
  }
  if (![v14 count]) {
    return 0;
  }
  uint64_t v53 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndexedSubscript:", 0), "timestamp");
  if (a8 && v14)
  {
    [a8 removeAllObjects];
    [a8 addObjectsFromArray:v14];
  }
  if (![a2 runInertialIntegrator]) {
    goto LABEL_32;
  }
  id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  if (![a7 count])
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    long long v19 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
      *(_DWORD *)__n128 buf = 136446210;
      *(void *)&long long v65 = v20;
      _os_log_impl(&dword_1906B8000, v19, OS_LOG_TYPE_DEBUG, "CLTSP,II,inertial integrator failed as there is no inertial data available,%{public}s", buf, 0xCu);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_32;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    uint64_t v21 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
    int v74 = 136446210;
    *(void *)&long long v75 = v21;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::runInertialIntegrator(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v22);
    goto LABEL_70;
  }
  [v16 removeAllObjects];
  LOBYTE(v62) = 0;
  if (!sub_190751308(&v62, a3, a4, a5, v14, a7, v16))
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    long long v23 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      int v24 = [v16 count];
      uint64_t v25 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
      *(_DWORD *)__n128 buf = 67240450;
      LODWORD(v65) = v24;
      WORD2(v65) = 2082;
      *(void *)((char *)&v65 + 6) = v25;
      _os_log_impl(&dword_1906B8000, v23, OS_LOG_TYPE_DEBUG, "CLTSP,II,inertial integrator failed to compute locations,count,%{public}d,tripSegmentID,%{public}s,fallback to input location array", buf, 0x12u);
    }
    if (!sub_1906CB57C(115, 2)) {
      goto LABEL_32;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v51 = [v16 count];
    uint64_t v52 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
    int v74 = 67240450;
    LODWORD(v75) = v51;
    WORD2(v75) = 2082;
    *(void *)((char *)&v75 + 6) = v52;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::runInertialIntegrator(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v22);
LABEL_70:
    if (v22 != (char *)buf) {
      free(v22);
    }
LABEL_32:
    int v54 = 0;
    goto LABEL_33;
  }
  sub_1907DC9A8(a1 + 72, (uint64_t)v16, v53, 1);
  BOOL v17 = a8 == 0;
  if (!v16) {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    [a8 removeAllObjects];
    [a8 addObjectsFromArray:v16];
  }
  int v54 = 1;
LABEL_33:
  if ([a2 runLinearInterpolator])
  {
    if ([v14 count])
    {
      int v26 = v14;
      if (![a8 count])
      {
LABEL_48:
        id v39 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        if (sub_190871C70(a2, a3, a4, a5, v26, v39))
        {
          sub_1907DC9A8(a1 + 72, (uint64_t)v39, v53, 2);
          int v40 = 1;
          if (v26 && v39)
          {
            [v26 removeAllObjects];
            [v26 addObjectsFromArray:v39];
          }
        }
        else
        {
          int v40 = 0;
        }
        a8 = v26;
        goto LABEL_55;
      }
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a8, "firstObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      double v28 = v27;
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a8, "lastObject"), "timestamp"), "timeIntervalSinceReferenceDate");
      double v30 = v29;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      uint64_t v31 = [v14 countByEnumeratingWithState:&v57 objects:v63 count:16];
      if (v31)
      {
        int v32 = 0;
        double v33 = v28 + -0.5;
        double v34 = v30 + 0.5;
        uint64_t v35 = *(void *)v58;
        do
        {
          for (uint64_t i = 0; i != v31; ++i)
          {
            if (*(void *)v58 != v35) {
              objc_enumerationMutation(v14);
            }
            uint64_t v37 = *(void **)(*((void *)&v57 + 1) + 8 * i);
            objc_msgSend((id)objc_msgSend(v37, "timestamp"), "timeIntervalSinceReferenceDate");
            if (v38 >= v33)
            {
              if (v38 > v34) {
                [a8 addObject:v37];
              }
            }
            else
            {
              [a8 insertObject:v37 atIndex:v32++];
            }
          }
          uint64_t v31 = [v14 countByEnumeratingWithState:&v57 objects:v63 count:16];
        }
        while (v31);
      }
    }
    int v26 = a8;
    goto LABEL_48;
  }
  int v40 = 0;
LABEL_55:
  if ([a2 runMapIntegrator])
  {
    id v41 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    sub_19087281C(a1, a2, a3, a5, a4, v14, a8);
  }
  uint64_t v18 = v54 | v40;
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
  }
  long long v42 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
  {
    int v43 = [a2 runLinearInterpolator];
    int v44 = [a2 runInertialIntegrator];
    int v45 = [a2 runMapIntegrator];
    *(_DWORD *)__n128 buf = 67241728;
    LODWORD(v65) = v54 | v40;
    WORD2(v65) = 1026;
    *(_DWORD *)((char *)&v65 + 6) = v43;
    WORD5(v65) = 1026;
    HIDWORD(v65) = v44;
    __int16 v66 = 1026;
    int v67 = v45;
    __int16 v68 = 1026;
    int v69 = v40;
    __int16 v70 = 1026;
    int v71 = v54;
    __int16 v72 = 1026;
    int v73 = 0;
    _os_log_impl(&dword_1906B8000, v42, OS_LOG_TYPE_INFO, "CLTSP,processVehicularData,success,%{public}d,liEnabled,%{public}d,iiEnabled,%{public}d,miEnabled,%{public}d,liSuccess,%{public}d,iiSuccess,%{public}d,miSuccess,%{public}d", buf, 0x2Cu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v47 = [a2 runLinearInterpolator];
    int v48 = [a2 runInertialIntegrator];
    int v49 = [a2 runMapIntegrator];
    int v74 = 67241728;
    LODWORD(v75) = v54 | v40;
    WORD2(v75) = 1026;
    *(_DWORD *)((char *)&v75 + 6) = v47;
    WORD5(v75) = 1026;
    HIDWORD(v75) = v48;
    __int16 v76 = 1026;
    int v77 = v49;
    __int16 v78 = 1026;
    int v79 = v40;
    __int16 v80 = 1026;
    int v81 = v54;
    __int16 v82 = 1026;
    int v83 = 0;
    double v50 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::processVehicularData(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentInertialData *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v50);
    if (v50 != (char *)buf) {
      free(v50);
    }
  }
  return v18;
}

uint64_t sub_1908710E0(uint64_t a1, void *a2, void *a3, unsigned int a4, unint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  if (![a6 count])
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    uint64_t v25 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v25, OS_LOG_TYPE_ERROR, "CLTSP,processPedestrianData,empty tripLocations", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    LOWORD(v55) = 0;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentProcessor::processPedestrianData(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v26);
    goto LABEL_98;
  }
  int v47 = a3;
  unint64_t v48 = a5;
  unsigned int v49 = a4;
  id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  uint64_t v17 = [a6 countByEnumeratingWithState:&v51 objects:v69 count:16];
  if (v17)
  {
    uint64_t v18 = *(void *)v52;
    do
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        if (*(void *)v52 != v18) {
          objc_enumerationMutation(a6);
        }
        uint64_t v20 = *(void **)(*((void *)&v51 + 1) + 8 * i);
        if ([v20 isGPSLocationType]) {
          [v16 addObject:v20];
        }
        else {
          [v20 isWiFiLocationType];
        }
      }
      uint64_t v17 = [a6 countByEnumeratingWithState:&v51 objects:v69 count:16];
    }
    while (v17);
  }
  if (![v16 count])
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    double v27 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v27, OS_LOG_TYPE_ERROR, "CLTSP,processPedestrianData,GPS crumbs not available", buf, 2u);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    LOWORD(v55) = 0;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentProcessor::processPedestrianData(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v26);
    goto LABEL_98;
  }
  uint64_t v21 = objc_msgSend((id)objc_msgSend(v16, "objectAtIndexedSubscript:", 0), "timestamp");
  id v22 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  double v50 = -1.0;
  if (![a2 runInertialIntegrator])
  {
    int v23 = 0;
    id v22 = v16;
    if (!a8) {
      goto LABEL_49;
    }
    goto LABEL_47;
  }
  *(_WORD *)__n128 buf = 0;
  *(void *)&v72[16] = 0;
  uint64_t v73 = 0;
  *(_OWORD *)__int16 v72 = xmmword_1908820F0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v74 = 0x3FF0000000000000;
  char v77 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  unint64_t v78 = 0xBFF0000000000000;
  int v81 = 0;
  char v82 = 0;
  char v87 = 0;
  char v88 = 0;
  char v89 = 0;
  v93[32] = 0;
  v93[40] = 0;
  v93[48] = 0;
  v93[56] = 0;
  int v83 = 0;
  uint64_t v84 = 0;
  char v86 = 0;
  uint64_t v85 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  memset(v93, 0, 26);
  char v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v94 = 0x3FF0000000000000;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  char v97 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0x10000000000000;
  int v104 = 0;
  uint64_t v103 = 0;
  uint64_t v105 = 0;
  uint64_t v107 = 0;
  long long v106 = xmmword_1908820F0;
  uint64_t v108 = 0;
  uint64_t v109 = 0x3FF0000000000000;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  uint64_t v113 = 5;
  uint64_t v114 = 1000;
  int v23 = sub_190809530((uint64_t)buf, v16, a7, v22, &v50);
  if (v23)
  {
    sub_1907DC9A8(a1 + 72, (uint64_t)v22, v21, 1);
    if ([v22 count])
    {
      objc_msgSend((id)objc_msgSend(v22, "objectAtIndexedSubscript:", 0), "horizontalAccuracy");
      if (v24 == -1.0) {
        objc_msgSend((id)objc_msgSend(v22, "objectAtIndexedSubscript:", 0), "setHorizontalAccuracy:", 100.0);
      }
    }
  }
  if (*((void *)&v111 + 1))
  {
    *(void *)&long long v112 = *((void *)&v111 + 1);
    operator delete(*((void **)&v111 + 1));
  }
  if ((void)v110)
  {
    *((void *)&v110 + 1) = v110;
    operator delete((void *)v110);
  }
  if (v103)
  {
    int v104 = v103;
    operator delete(v103);
  }
  if (v83)
  {
    uint64_t v84 = v83;
    operator delete(v83);
  }
  if (!v23) {
    id v22 = v16;
  }
  if (a8)
  {
LABEL_47:
    if (v22)
    {
      [a8 removeAllObjects];
      [a8 addObjectsFromArray:v22];
    }
  }
LABEL_49:
  if ([a2 runLinearInterpolator]
    && (id v28 = objc_alloc_init(MEMORY[0x1E4F1CA48]), sub_190871C70(a2, v47, v49, v48, a8, v28)))
  {
    sub_1907DC9A8(a1 + 72, (uint64_t)v28, v21, 2);
    BOOL v29 = a8 == 0;
    if (!v28) {
      BOOL v29 = 1;
    }
    if (!v29)
    {
      [a8 removeAllObjects];
      [a8 addObjectsFromArray:v28];
    }
    int v46 = 1;
  }
  else
  {
    int v46 = 0;
  }
  if (![a8 count])
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    double v38 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 67240448;
      int v71 = v46;
      *(_WORD *)__int16 v72 = 1026;
      *(_DWORD *)&v72[2] = v23;
      _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_ERROR, "CLTSP,processPedestrianData,empty reconstructed locations,liSuccess,%{public}d,iiSuccess,%{public}d", buf, 0xEu);
    }
    if (!sub_1906CB57C(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v55 = 67240448;
    int v56 = v46;
    __int16 v57 = 1026;
    int v58 = v23;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 0, "BOOL CLTripSegmentProcessor::processPedestrianData(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v26);
LABEL_98:
    if (v26 != (char *)buf) {
      free(v26);
    }
    return 0;
  }
  if ([a2 runMapIntegrator])
  {
    id v30 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    sub_19087281C(a1, a2, v47, v48, v49, v16, a8);
  }
  if ((v23 | [a2 runInertialIntegrator] ^ 1) == 1
    && (v46 | [a2 runLinearInterpolator] ^ 1) == 1)
  {
    uint64_t v31 = [a2 runMapIntegrator] ^ 1;
  }
  else
  {
    uint64_t v31 = 0;
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
  }
  int v32 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
  {
    int v33 = [a2 runInertialIntegrator];
    int v34 = [a2 runLinearInterpolator];
    int v35 = [a2 runMapIntegrator];
    *(_DWORD *)__n128 buf = 67241728;
    int v71 = v31;
    *(_WORD *)__int16 v72 = 1026;
    *(_DWORD *)&v72[2] = v33;
    *(_WORD *)&v72[6] = 1026;
    *(_DWORD *)&v72[8] = v34;
    *(_WORD *)&v72[12] = 1026;
    *(_DWORD *)&void v72[14] = v35;
    *(_WORD *)&v72[18] = 1026;
    *(_DWORD *)&v72[20] = v46;
    LOWORD(v73) = 1026;
    *(_DWORD *)((char *)&v73 + 2) = v23;
    HIWORD(v73) = 1026;
    LODWORD(v74) = 0;
    _os_log_impl(&dword_1906B8000, v32, OS_LOG_TYPE_INFO, "CLTSP,processPedestrianData,success,%{public}d,iiEnabled,%{public}d,liEnabled,%{public}d,miEnabled,%{public}d,liSuccess,%{public}d,iiSuccess,%{public}d,miSuccess,%{public}d", buf, 0x2Cu);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v42 = [a2 runInertialIntegrator];
    int v43 = [a2 runLinearInterpolator];
    int v44 = [a2 runMapIntegrator];
    int v55 = 67241728;
    int v56 = v31;
    __int16 v57 = 1026;
    int v58 = v42;
    __int16 v59 = 1026;
    int v60 = v43;
    __int16 v61 = 1026;
    int v62 = v44;
    __int16 v63 = 1026;
    int v64 = v46;
    __int16 v65 = 1026;
    int v66 = v23;
    __int16 v67 = 1026;
    int v68 = 0;
    int v45 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::processPedestrianData(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLBackgroundInertialOdometrySample *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  if ([a8 count])
  {
    uint64_t v36 = 0;
    while (1)
    {
      objc_msgSend((id)objc_msgSend((id)objc_msgSend(a8, "objectAtIndexedSubscript:", v36), "timestamp"), "timeIntervalSinceReferenceDate");
      if (v37 >= v50 + -0.5) {
        break;
      }
      if (++v36 >= (unint64_t)[a8 count]) {
        return v31;
      }
    }
    if (v36 - 1 < 0
      || [a8 count] - 1 < (unint64_t)(v36 - 1)
      || !objc_msgSend((id)objc_msgSend(a8, "objectAtIndexedSubscript:", (v36 - 1)), "isMapMatched"))
    {
LABEL_89:
      if (v36) {
LABEL_90:
      }
        objc_msgSend(a8, "removeObjectsInRange:", 0, v36);
    }
    else
    {
      uint64_t v36 = (v36 - 1);
      while ((int)v36 > 0)
      {
        uint64_t v40 = v36 - 1;
        if ([a8 count] - 1 < (unint64_t)(v36 - 1)) {
          goto LABEL_90;
        }
        if (!objc_msgSend((id)objc_msgSend(a8, "objectAtIndexedSubscript:", --v36), "isMapMatched"))
        {
          uint64_t v36 = v40 + 1;
          goto LABEL_89;
        }
      }
    }
  }
  return v31;
}

void sub_190871C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
}

BOOL sub_190871C70(void *a1, void *a2, int a3, unint64_t a4, void *a5, void *a6)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  [a6 removeAllObjects];
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  long long v21 = xmmword_1908820F0;
  uint64_t v24 = 0x3FF0000000000000;
  [a1 timeBetweenReconstructedPointsSeconds];
  BOOL v13 = sub_190813638(v12, (uint64_t)&v21, a2, a3, a4, a5, a6);
  if (!v13)
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    id v14 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      int v15 = [a6 count];
      uint64_t v16 = objc_msgSend((id)objc_msgSend(a2, "UUIDString"), "UTF8String");
      *(_DWORD *)__n128 buf = 67240450;
      int v30 = v15;
      __int16 v31 = 2082;
      uint64_t v32 = v16;
      _os_log_impl(&dword_1906B8000, v14, OS_LOG_TYPE_DEBUG, "CLTSP,LI,linear interpolator failed to compute locations,count,%{public}d,tripSegmentID,%{public}s,fallback to location array before interpolation", buf, 0x12u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
      }
      int v18 = [a6 count];
      uint64_t v19 = objc_msgSend((id)objc_msgSend(a2, "UUIDString"), "UTF8String");
      int v25 = 67240450;
      int v26 = v18;
      __int16 v27 = 2082;
      uint64_t v28 = v19;
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::runLinearInterpolator(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const BOOL, const CLTripSegmentModeOfTransport, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  return v13;
}

double sub_190871ED4(void *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v2 = [a1 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = v2;
  char v4 = 0;
  uint64_t v5 = *(void *)v20;
  double v6 = 0.0;
  do
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      double v8 = v4;
      if (*(void *)v20 != v5) {
        objc_enumerationMutation(a1);
      }
      char v4 = *(void **)(*((void *)&v19 + 1) + 8 * i);
      if (v8)
      {
        if (v4)
        {
          [v8 latitude];
          uint64_t v18 = v9;
          [v8 longitude];
          uint64_t v17 = v10;
          if (sub_1907583F8((double *)&v18, (double *)&v17))
          {
            [v4 latitude];
            uint64_t v16 = v11;
            [v4 longitude];
            uint64_t v15 = v12;
            if (sub_1907583F8((double *)&v16, (double *)&v15))
            {
              [v4 distanceFromLocation:v8];
              double v6 = v6 + v13;
            }
          }
        }
      }
    }
    uint64_t v3 = [a1 countByEnumeratingWithState:&v19 objects:v23 count:16];
  }
  while (v3);
  return v6;
}

uint64_t sub_190872040(void *a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  if ([a1 count])
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0x3FF0000000000000;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = xmmword_1908820F0;
    uint64_t v4 = [a2 countByEnumeratingWithState:&v46 objects:v56 count:16];
    if (!v4) {
      goto LABEL_23;
    }
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)v47;
    int v8 = -1;
LABEL_4:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v47 != v7) {
        objc_enumerationMutation(a2);
      }
      uint64_t v10 = *(void **)(*((void *)&v46 + 1) + 8 * v9);
      if (v10)
      {
        if ([*(id *)(*((void *)&v46 + 1) + 8 * v9) referenceFrame] != 1) {
          break;
        }
      }
LABEL_21:
      if (++v9 == v6)
      {
        uint64_t v6 = [a2 countByEnumeratingWithState:&v46 objects:v56 count:16];
        if (!v6)
        {
LABEL_23:
          char v33 = 1;
          goto LABEL_50;
        }
        goto LABEL_4;
      }
    }
    objc_msgSend((id)objc_msgSend(v10, "timestamp"), "timeIntervalSinceReferenceDate");
    double v12 = v11;
    for (unint64_t i = v8 & ~(v8 >> 31); [a1 count] > i; ++i)
    {
      if ([a1 objectAtIndexedSubscript:i])
      {
        if ((v8 & 0x80000000) == 0)
        {
          objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", i), "timestamp"), "timeIntervalSinceReferenceDate");
          if (v14 > v12) {
            goto LABEL_18;
          }
        }
        if (objc_msgSend((id)objc_msgSend(a1, "objectAtIndexedSubscript:", i), "referenceFrame") == 1) {
          int v8 = i;
        }
      }
    }
    if (v8 == -1)
    {
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
      }
      id v39 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)__n128 buf = 134349056;
        double v58 = v12;
        _os_log_impl(&dword_1906B8000, v39, OS_LOG_TYPE_INFO, "CLTSP,getCorrectedCoordinates,raw coordinate not available,%{public}.1lf", buf, 0xCu);
      }
      if (sub_1906CB57C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
        }
        int v54 = 134349056;
        double v55 = v12;
        int v43 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::getCorrectedCoordinates(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v43);
        if (v43 != (char *)buf) {
          free(v43);
        }
      }
      char v33 = 0;
      char v5 = 1;
    }
    else
    {
LABEL_18:
      uint64_t v15 = [a1 objectAtIndexedSubscript:v8];
      if (v15)
      {
        uint64_t v16 = (void *)v15;
        double v45 = 0.0;
        [v10 latitude];
        double v45 = v17;
        double v44 = 0.0;
        [v10 longitude];
        double v44 = v18;
        [v16 rawLatitude];
        double v20 = v19;
        [v16 rawLongitude];
        double v22 = v21;
        [v16 latitude];
        double v24 = v23;
        [v16 longitude];
        double v26 = v25;
        [v10 latitude];
        double v28 = v27;
        [v10 longitude];
        if (sub_1907A2404((double *)&v50, &v45, &v44, v20, v22, v24, v26, v28, v29))
        {
          double v31 = v44;
          double v30 = v45;
          [v10 horizontalAccuracy];
          objc_msgSend(v10, "updateLatitude:longitude:horizontalAccuracy:referenceFrame:", objc_msgSend(v16, "rawReferenceFrame"), v30, v31, v32);
          goto LABEL_21;
        }
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
        }
        double v38 = qword_1E929F6D8;
        if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__n128 buf = 134349056;
          double v58 = v12;
          _os_log_impl(&dword_1906B8000, v38, OS_LOG_TYPE_ERROR, "CLTSP,getCorrectedCoordinates,corrected computation failed for time,%{public}.1lf", buf, 0xCu);
        }
        if (!sub_1906CB57C(115, 0)) {
          goto LABEL_43;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
        }
        int v54 = 134349056;
        double v55 = v12;
LABEL_59:
        int v42 = (char *)_os_log_send_and_compose_impl();
        sub_1906D4A28("Generic", 1, 0, 0, "static BOOL CLTripSegmentUtilities::getCorrectedCoordinates(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v42);
        if (v42 != (char *)buf) {
          free(v42);
        }
LABEL_43:
        char v33 = 0;
        char v5 = 0;
        goto LABEL_50;
      }
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
      }
      uint64_t v36 = qword_1E929F6D8;
      if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134349056;
        double v58 = v12;
        _os_log_impl(&dword_1906B8000, v36, OS_LOG_TYPE_ERROR, "CLTSP,getCorrectedCoordinates,tripLoc is nil,%{public}.1lf", buf, 0xCu);
      }
      int v37 = sub_1906CB57C(115, 0);
      char v33 = 0;
      char v5 = 0;
      if (v37)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929F6D0 != -1) {
          dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
        }
        int v54 = 134349056;
        double v55 = v12;
        goto LABEL_59;
      }
    }
LABEL_50:
    char v35 = v33 | v5;
  }
  else
  {
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    int v34 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl(&dword_1906B8000, v34, OS_LOG_TYPE_INFO, "CLTSP,getCorrectedCoordinates,empty locations", buf, 2u);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
      }
      LOWORD(v50) = 0;
      id v41 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "static BOOL CLTripSegmentUtilities::getCorrectedCoordinates(NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    char v35 = 0;
  }
  return v35 & 1;
}

void *sub_1908727B8(void *a1)
{
  uint64_t v2 = (void *)a1[66];
  if (v2)
  {
    a1[67] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[63];
  if (v3)
  {
    a1[64] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[55];
  if (v4)
  {
    a1[56] = v4;
    operator delete(v4);
  }
  char v5 = (void *)a1[17];
  if (v5)
  {
    a1[18] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_19087281C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  long long v90 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  uint64_t v8 = [a6 countByEnumeratingWithState:&v90 objects:&__p count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v91;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v91 != v9) {
          objc_enumerationMutation(a6);
        }
        double v11 = *(void **)(*((void *)&v90 + 1) + 8 * v10);
        if ([v11 isWiFiLocationType])
        {
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          uint64_t v12 = [a7 countByEnumeratingWithState:&v86 objects:&v117 count:16];
          if (v12)
          {
            uint64_t v13 = *(void *)v87;
            double v14 = -1.0;
            double v15 = -1.0;
            do
            {
              for (uint64_t i = 0; i != v12; ++i)
              {
                if (*(void *)v87 != v13) {
                  objc_enumerationMutation(a7);
                }
                double v17 = *(void **)(*((void *)&v86 + 1) + 8 * i);
                objc_msgSend((id)objc_msgSend(v17, "timestamp"), "timeIntervalSinceDate:", objc_msgSend(v11, "timestamp"));
                double v19 = fabs(v18);
                if (v15 < 0.0 || v19 < v15 && v14 >= 0.0)
                {
                  [v17 course];
                  double v14 = v20;
                  [v17 courseAccuracy];
                  double v15 = v19;
                }
                if (v15 == 0.0 || v15 > 0.0 && v19 > v15)
                {
                  if (v15 < 2.0 && v14 >= 0.0)
                  {
                    if (qword_1E929F6D0 != -1) {
                      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
                    }
                    double v21 = qword_1E929F6D8;
                    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
                    {
                      objc_msgSend((id)objc_msgSend(v17, "timestamp"), "timeIntervalSinceReferenceDate");
                      uint64_t v23 = v22;
                      [v17 latitude];
                      uint64_t v25 = v24;
                      [v17 longitude];
                      uint64_t v27 = v26;
                      [v17 horizontalAccuracy];
                      uint64_t v29 = v28;
                      [v17 speed];
                      uint64_t v31 = v30;
                      [v17 course];
                      *(_DWORD *)__n128 buf = 134350593;
                      *(void *)&uint8_t buf[4] = v23;
                      *(_WORD *)&unsigned char buf[12] = 2049;
                      *(void *)buf_14 = v25;
                      *(_WORD *)&buf_14[8] = 2049;
                      *(void *)&buf_14[10] = v27;
                      *(_WORD *)&buf_14[18] = 2050;
                      uint64_t v111 = v29;
                      *(_WORD *)long long v112 = 2050;
                      *(void *)&v112[2] = v31;
                      *(_WORD *)&v112[10] = 2050;
                      *(void *)&v112[12] = v32;
                      __int16 v113 = 2050;
                      *(double *)uint64_t v114 = v14;
                      _os_log_impl(&dword_1906B8000, v21, OS_LOG_TYPE_DEBUG, "CLTSP,wifiCourseFromInertial,course updated using inertial,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,hunc,%{public}.3lf,speed,%{public}.3lf,prevCourse,%{public}.3lf,newCourse,%{public}.3lf", buf, 0x48u);
                    }
                    if (sub_1906CB57C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1E929F6D0 != -1) {
                        dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
                      }
                      objc_msgSend((id)objc_msgSend(v17, "timestamp"), "timeIntervalSinceReferenceDate");
                      uint64_t v34 = v33;
                      [v17 latitude];
                      uint64_t v36 = v35;
                      [v17 longitude];
                      uint64_t v38 = v37;
                      [v17 horizontalAccuracy];
                      uint64_t v40 = v39;
                      [v17 speed];
                      uint64_t v42 = v41;
                      [v17 course];
                      int v95 = 134350593;
                      uint64_t v96 = v34;
                      __int16 v97 = 2049;
                      uint64_t v98 = v36;
                      __int16 v99 = 2049;
                      uint64_t v100 = v38;
                      __int16 v101 = 2050;
                      uint64_t v102 = v40;
                      __int16 v103 = 2050;
                      uint64_t v104 = v42;
                      __int16 v105 = 2050;
                      uint64_t v106 = v43;
                      __int16 v107 = 2050;
                      double v108 = v14;
                      double v44 = (char *)_os_log_send_and_compose_impl();
                      sub_1906D4A28("Generic", 1, 0, 2, "static void CLTripSegmentUtilities::setCourseForWiFiLocationsUsingInertialReconstructedLocations(NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v44);
                      if (v44 != buf) {
                        free(v44);
                      }
                    }
                    [v11 updateCourse:v14 andCourseAccuracy:10.0];
                  }
                  goto LABEL_30;
                }
              }
              uint64_t v12 = [a7 countByEnumeratingWithState:&v86 objects:&v117 count:16];
            }
            while (v12);
          }
        }
LABEL_30:
        ++v10;
      }
      while (v10 != v8);
      uint64_t v45 = [a6 countByEnumeratingWithState:&v90 objects:&__p count:16];
      uint64_t v8 = v45;
    }
    while (v45);
  }
  if (a4 == 1 && !*(void *)(a1 + 88))
  {
    long long v46 = (char *)operator new(0xA0uLL);
    *((void *)v46 + 1) = 0;
    *((void *)v46 + 2) = 0;
    *(_OWORD *)(v46 + 24) = 0u;
    *(void *)long long v46 = &unk_1EE003260;
    *(_OWORD *)(v46 + 72) = 0u;
    *(_OWORD *)(v46 + 40) = 0u;
    *(_OWORD *)(v46 + 56) = 0u;
    *(_OWORD *)(v46 + 88) = 0u;
    *((void *)v46 + 15) = 0;
    *((void *)v46 + 16) = 0;
    *(_OWORD *)(v46 + 104) = xmmword_1908820F0;
    *((void *)v46 + 17) = 0x3FF0000000000000;
    *((void *)v46 + 18) = 0;
    v46[152] = 1;
    *((void *)v46 + 18) = (id)[MEMORY[0x1E4F1CA48] array];
    long long v47 = *(std::__shared_weak_count **)(a1 + 96);
    *(void *)(a1 + 88) = v46 + 24;
    *(void *)(a1 + 96) = v46;
    if (v47) {
      sub_1906BFE48(v47);
    }
  }
  long long v49 = (uint64_t *)(a1 + 88);
  uint64_t v48 = *(void *)(a1 + 88);
  if (v48)
  {
    sub_1906D5C70(buf, (char *)objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String"));
    sub_1907E9714(v48, (const std::string *)buf);
    if ((buf_14[9] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  sub_1906D54D4();
  if (sub_190795DAC()) {
    int v50 = sub_1907E9A00(@"DeriveCrumbsFromUpsampledLocationsForCLTSP", 1);
  }
  else {
    int v50 = 1;
  }
  uint64_t v51 = (void *)[MEMORY[0x1E4F1CA48] array];
  if ([a7 count])
  {
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(a7, "objectAtIndexedSubscript:", 0), "timestamp"), "timeIntervalSinceReferenceDate");
    uint64_t v53 = *v49;
    if (*v49)
    {
      double v54 = v52;
      long long v84 = 0u;
      long long v85 = 0u;
      long long v82 = 0u;
      long long v83 = 0u;
      double v55 = *(void **)(v53 + 120);
      uint64_t v56 = [v55 countByEnumeratingWithState:&v82 objects:v94 count:16];
      if (v56)
      {
        uint64_t v57 = *(void *)v83;
        do
        {
          for (uint64_t j = 0; j != v56; ++j)
          {
            if (*(void *)v83 != v57) {
              objc_enumerationMutation(v55);
            }
            uint64_t v59 = *(void **)(*((void *)&v82 + 1) + 8 * j);
            objc_msgSend((id)objc_msgSend(v59, "timestamp"), "timeIntervalSinceReferenceDate");
            if (v60 < v54) {
              [v51 addObject:v59];
            }
          }
          uint64_t v56 = [v55 countByEnumeratingWithState:&v82 objects:v94 count:16];
        }
        while (v56);
      }
    }
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    __int16 v61 = qword_1E929F6D8;
    if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_DEBUG))
    {
      int v62 = [v51 count];
      int v63 = [v51 count];
      int v64 = [a7 count];
      uint64_t v65 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
      *(_DWORD *)__n128 buf = 67240962;
      *(_DWORD *)&uint8_t buf[4] = v62;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v64 + v63;
      *(_WORD *)buf_14 = 2082;
      *(void *)&buf_14[2] = v65;
      *(_WORD *)&buf_14[10] = 1026;
      *(_DWORD *)&buf_14[12] = v50;
      _os_log_impl(&dword_1906B8000, v61, OS_LOG_TYPE_DEBUG, "CLTSP,MI,upsampledLocationsSet created,prevLocation,%{public}d,newTotalLocation,%{public}d,tripSegmentID,%{public}s,deriveCrumbsFromUpsampledLocations,%{public}d", buf, 0x1Eu);
    }
    if (sub_1906CB57C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929F6D0 != -1) {
        dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
      }
      int v72 = [v51 count];
      int v73 = [v51 count];
      int v74 = [a7 count];
      uint64_t v75 = objc_msgSend((id)objc_msgSend(a3, "UUIDString"), "UTF8String");
      LODWORD(__p) = 67240962;
      HIDWORD(__p) = v72;
      LOWORD(v140) = 1026;
      *(_DWORD *)((char *)&v140 + 2) = v74 + v73;
      HIWORD(v140) = 2082;
      uint64_t v141 = v75;
      LOWORD(v142[0]) = 1026;
      *(_DWORD *)((char *)v142 + 2) = v50;
      uint64_t v76 = (char *)_os_log_send_and_compose_impl();
      sub_1906D4A28("Generic", 1, 0, 2, "BOOL CLTripSegmentProcessor::runMapIntegrator(CLTripSegmentProcessorOptions * _Nonnull, NSUUID * _Nonnull, const CLTripSegmentModeOfTransport, const BOOL, NSArray<CLTripSegmentLocation *> * _Nonnull, NSArray<CLTripSegmentLocation *> * _Nonnull, NSMutableArray<CLTripSegmentLocation *> * _Nonnull)", "CoreLocation: %s\n", v76);
      if (v76 != buf) {
        free(v76);
      }
    }
    [v51 addObjectsFromArray:a7];
  }
  uint64_t v140 = 0;
  std::string __p = 0;
  v142[0] = 0;
  uint64_t v141 = 0;
  uint64_t v143 = 0x3FE0000000000000;
  __int16 v144 = 0;
  long long v145 = xmmword_1908824D0;
  __int16 v146 = 1;
  long long v147 = xmmword_1908824E0;
  __int16 v148 = 1;
  int v149 = 0;
  MEMORY[0x192FCE920](&__p, "CLTripSegmentMapIntegratorSparse");
  if (a4 == 1) {
    int v66 = 1;
  }
  else {
    int v66 = 2;
  }
  v142[0] = v66;
  uint64_t v143 = 0x3FE0000000000000;
  HIBYTE(v144) = [a2 useXPCServiceForMapQuery];
  LOBYTE(v146) = [a2 isNetworkAccessAllowed];
  LOBYTE(v144) = 1;
  *(void *)&long long v145 = 0x4072C00000000000;
  LOBYTE(v148) = 1;
  if (a4 != 1)
  {
    HIBYTE(v146) = 1;
    long long v147 = xmmword_190886790;
  }
  if (qword_1E929F6D0 != -1) {
    dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
  }
  __int16 v67 = qword_1E929F6D8;
  if (os_log_type_enabled((os_log_t)qword_1E929F6D8, OS_LOG_TYPE_INFO))
  {
    p_p = &__p;
    if (v141 < 0) {
      p_p = __p;
    }
    *(_DWORD *)__n128 buf = 136317698;
    *(void *)&uint8_t buf[4] = p_p;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)buf_14 = v142[0];
    *(_WORD *)&buf_14[4] = 2050;
    *(void *)&buf_14[6] = v143;
    *(_WORD *)&buf_14[14] = 1026;
    *(_DWORD *)&buf_14[16] = HIBYTE(v144);
    LOWORD(v111) = 1026;
    *(_DWORD *)((char *)&v111 + 2) = v146;
    HIWORD(v111) = 1026;
    *(_DWORD *)long long v112 = v144;
    *(_WORD *)&v112[4] = 2050;
    *(void *)&v112[6] = v145;
    *(_WORD *)&v112[14] = 1026;
    *(_DWORD *)&v112[16] = v148;
    __int16 v113 = 1026;
    *(_DWORD *)uint64_t v114 = HIBYTE(v146);
    *(_WORD *)&v114[4] = 2050;
    *(void *)&v114[6] = v147;
    __int16 v115 = 2050;
    uint64_t v116 = *((void *)&v147 + 1);
    _os_log_impl(&dword_1906B8000, v67, OS_LOG_TYPE_INFO, "CLTSP,getGeoMapGeometrySettingsForRouteReconstruction,fTypeName,%s,fGeometryType,%{public}d,fIntersectionRoadSearchDistance,%{public}.1lf,fUseXPCServiceForDataQuery,%{public}d,fAllowNetworkTileDownload,%{public}d,fStoringRoadConnectionEnabled,%{public}d,fMinimumRadiusForMapDataBuffer_m,%{public}.1lf,fWaitForMapDataQueryToComplete,%{public}d,fPreferCachedTiles,%{public}d,fMinSnapRadiusM,%{public}.1lf,fMaxSnapRadiusM,%{public}.1lf", buf, 0x58u);
  }
  if (sub_1906CB57C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929F6D0 != -1) {
      dispatch_once(&qword_1E929F6D0, &unk_1EE006140);
    }
    __int16 v70 = &__p;
    if (v141 < 0) {
      __int16 v70 = __p;
    }
    int v117 = 136317698;
    unsigned int v118 = v70;
    __int16 v119 = 1026;
    int v120 = v142[0];
    __int16 v121 = 2050;
    uint64_t v122 = v143;
    __int16 v123 = 1026;
    int v124 = HIBYTE(v144);
    __int16 v125 = 1026;
    int v126 = v146;
    __int16 v127 = 1026;
    int v128 = v144;
    __int16 v129 = 2050;
    uint64_t v130 = v145;
    __int16 v131 = 1026;
    int v132 = v148;
    __int16 v133 = 1026;
    int v134 = HIBYTE(v146);
    __int16 v135 = 2050;
    uint64_t v136 = v147;
    __int16 v137 = 2050;
    uint64_t v138 = *((void *)&v147 + 1);
    int v71 = (char *)_os_log_send_and_compose_impl();
    sub_1906D4A28("Generic", 1, 0, 2, "void getGeoMapGeometrySettingsForRouteReconstruction(CLTripSegmentProcessorOptions * _Nonnull, CLGeoMapFeatureGeometrySettings &, const CLTripSegmentModeOfTransport)", "CoreLocation: %s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  int v69 = (char *)operator new(0xF8uLL);
  *((void *)v69 + 1) = 0;
  *((void *)v69 + 2) = 0;
  *(void *)int v69 = &unk_1EE003298;
  *(_OWORD *)(v69 + 24) = xmmword_1908820F0;
  *((void *)v69 + 5) = 0;
  *((void *)v69 + 6) = 0;
  *((_OWORD *)v69 + 4) = 0u;
  *((void *)v69 + 7) = 0x3FF0000000000000;
  *((void *)v69 + 14) = 0;
  *((void *)v69 + 15) = 0;
  *((_OWORD *)v69 + 5) = 0u;
  *((_OWORD *)v69 + 6) = xmmword_1908820F0;
  *((void *)v69 + 16) = 0x3FF0000000000000;
  *(_OWORD *)(v69 + 136) = 0u;
  *(_OWORD *)(v69 + 152) = 0u;
  *((void *)v69 + 21) = 0;
  *((void *)v69 + 8) = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  sub_1908133D4();
}

void sub_1908737E0(_Unwind_Exception *a1)
{
  sub_1906BFE48(v1);
  if (SLOBYTE(STACK[0x8E7]) < 0) {
    operator delete((void *)STACK[0x8D0]);
  }
  _Unwind_Resume(a1);
}

os_log_t sub_1908738B8()
{
  os_log_t result = os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
  qword_1E929F6D8 = (uint64_t)result;
  return result;
}

id *sub_1908738E8(void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  *a3 = 0;
  id v29 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v6 = [a1 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v26 != v7) {
          objc_enumerationMutation(a1);
        }
        uint64_t v9 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        if ([v9 referenceFrame] == 2)
        {
          ++*a2;
          continue;
        }
        [v9 latitude];
        double v11 = v10;
        [v9 longitude];
        double v13 = v12;
        [v9 horizontalAccuracy];
        double v15 = v14;
        double v24 = 0.0;
        [v9 latitude];
        double v24 = v16;
        double v23 = 0.0;
        [v9 longitude];
        double v23 = v17;
        double v22 = 0.0;
        [v9 horizontalAccuracy];
        double v22 = v18;
        int v19 = sub_1907A22F8(&v29, [v9 referenceFrame], &v24, &v23, &v22, 5, v11, v13, v15);
        double v20 = a3;
        if (v19 != 1)
        {
          if (v19 != 2) {
            continue;
          }
          [v9 updateLatitude:2 longitude:v24 horizontalAccuracy:v23 referenceFrame:v22];
          double v20 = a2;
        }
        ++*v20;
      }
      uint64_t v6 = [a1 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }
    while (v6);
  }
  return sub_1907A22C0(&v29);
}

void sub_190873AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1907A22C0((id *)va);
  _Unwind_Resume(a1);
}

id sub_190873B0C(uint64_t ***a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  while (v3 != v4)
  {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v6 = *v3;
    uint64_t v7 = v3[1];
    while (v6 != v7)
    {
      if (*v6) {
        objc_msgSend(v5, "addObject:", sub_1907A1F04(*v6, 1));
      }
      v6 += 2;
    }
    [v2 addObjectsFromArray:v5];
    v3 += 3;
  }
  return v2;
}

void sub_190873BBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE003260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_190873BDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE003260;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_190873C30(uint64_t a1)
{
  id v2 = (void **)(a1 + 72);
  sub_1907ED314(&v2);
  id v2 = (void **)(a1 + 48);
  sub_19074DEC0(&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void sub_190873C98(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE003298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_190873CB8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE003298;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCEAD0);
}

void sub_190873D0C(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 224);
  sub_19074DEC0(&v4);
  id v2 = *(void **)(a1 + 64);
  if (v2) {
    [v2 dealloc];
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 168);
  if (v3) {
    sub_1906BFE48(v3);
  }
  uint64_t v4 = (void **)(a1 + 136);
  sub_1906C6BF0(&v4);
  uint64_t v4 = (void **)(a1 + 72);
  sub_1906C6BF0(&v4);
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

void BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len)
{
}

void BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out)
{
}

BZFILE *__cdecl BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor)
{
  return (BZFILE *)MEMORY[0x1F417E340](bzerror, f, *(void *)&blockSize100k, *(void *)&verbosity, *(void *)&workFactor);
}

uint64_t CCCryptorGCMOneshotDecrypt()
{
  return MEMORY[0x1F40C94F8]();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return MEMORY[0x1F40C9500]();
}

uint64_t CCDeriveKey()
{
  return MEMORY[0x1F40C9540]();
}

uint64_t CCKDFParametersCreateAnsiX963()
{
  return MEMORY[0x1F40C9628]();
}

uint64_t CCKDFParametersDestroy()
{
  return MEMORY[0x1F40C9638]();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1F40C9770](data, *(void *)&len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7568](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1F40D77B8]();
}

uint64_t CFCopyUserName()
{
  return MEMORY[0x1F40D77D8]();
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

uint64_t CFGetUserName()
{
  return MEMORY[0x1F40D7B88]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1F40D7EB8](applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F18](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F28](allocator, propertyList, mutabilityOption);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1F40D7F70](propertyList, stream, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8758](anURL, pathStyle);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D88A0](allocator, filePath, pathStyle, isDirectory);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFTypeRef CFWriteStreamCopyProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1F40D8A90](stream, propertyName);
}

CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AA0](alloc, bufferAllocator);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

uint64_t GEOCalculateDistance()
{
  return MEMORY[0x1F411C040]();
}

uint64_t GEOClosestCoordinateOnLineSegmentFromCoordinate()
{
  return MEMORY[0x1F411C058]();
}

uint64_t GEOErrorDomain()
{
  return MEMORY[0x1F411C140]();
}

uint64_t GEOResetGeoCodecsAllocator()
{
  return MEMORY[0x1F411C378]();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9168](*(void *)&entry, key, allocator, *(void *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1F40E9250](*(void *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGIsDeviceOfType()
{
  return MEMORY[0x1F417CE40]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1F417CE48]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x1F40F6B10](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1F40F6B80](allocator, data);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40F6E40](key, error);
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x1F40F6E70](key);
}

uint64_t SecKeyCreateDecryptedDataWithParameters()
{
  return MEMORY[0x1F40F6EA0]();
}

uint64_t SecKeyCreateEncryptedDataWithParameters()
{
  return MEMORY[0x1F40F6EB8]();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6EE0](parameters, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6F08](keyData, attributes, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1F40F70F0](rnd, count, bytes);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1F40F7190](trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1F40F7210](trust, error);
}

uint64_t SecTrustStoreContains()
{
  return MEMORY[0x1F40F72B0]();
}

uint64_t SecTrustStoreForDomain()
{
  return MEMORY[0x1F40F72C0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFBundleCreateUnique()
{
  return MEMORY[0x1F40D8C30]();
}

uint64_t _CFCopyServerVersionDictionary()
{
  return MEMORY[0x1F40D8D00]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1F40D8D10]();
}

uint64_t _CFExecutableLinkedOnOrAfter()
{
  return MEMORY[0x1F40D8DB8]();
}

uint64_t _CFIsDeallocating()
{
  return MEMORY[0x1F40D8E18]();
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1F40D8EA0]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

int _NSGetExecutablePath(char *buf, uint32_t *bufsize)
{
  return MEMORY[0x1F40C9AE8](buf, bufsize);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t CLConnection::sendMessage()
{
  return MEMORY[0x1F412AA70]();
}

uint64_t CLConnection::deferredDelete(CLConnection *this)
{
  return MEMORY[0x1F412AA78](this);
}

uint64_t CLConnection::setDefaultMessageHandler()
{
  return MEMORY[0x1F412AA80]();
}

uint64_t CLConnection::start(CLConnection *this)
{
  return MEMORY[0x1F412AA88](this);
}

uint64_t CLConnection::CLConnection()
{
  return MEMORY[0x1F412AA90]();
}

uint64_t CLConnectionClient::sendMessage()
{
  return MEMORY[0x1F412AA98]();
}

{
  return MEMORY[0x1F412AAA0]();
}

uint64_t CLConnectionClient::sendMessageSync()
{
  return MEMORY[0x1F412AAA8]();
}

uint64_t CLConnectionClient::setHandlerForMessage()
{
  return MEMORY[0x1F412AAB0]();
}

uint64_t CLConnectionClient::setInterruptionHandler()
{
  return MEMORY[0x1F412AAB8]();
}

uint64_t CLConnectionClient::setDefaultMessageHandler()
{
  return MEMORY[0x1F412AAC0]();
}

uint64_t CLConnectionClient::sendMessageWithCompletion()
{
  return MEMORY[0x1F412AAC8]();
}

uint64_t CLConnectionClient::start(CLConnectionClient *this)
{
  return MEMORY[0x1F412AAD0](this);
}

uint64_t CLConnectionClient::CLConnectionClient()
{
  return MEMORY[0x1F412AAD8]();
}

void CLConnectionClient::~CLConnectionClient(CLConnectionClient *this)
{
}

uint64_t CLConnectionMessage::CLConnectionMessage()
{
  return MEMORY[0x1F412AAF0]();
}

{
  return MEMORY[0x1F412AAF8]();
}

void CLConnectionMessage::~CLConnectionMessage(CLConnectionMessage *this)
{
}

uint64_t CLConnectionMessage::getDictionary(CLConnectionMessage *this)
{
  return MEMORY[0x1F412AB08](this);
}

uint64_t CLConnectionMessage::getDictionaryOfClasses(CLConnectionMessage *this, NSSet *a2)
{
  return MEMORY[0x1F412AB28](this, a2);
}

uint64_t CLConnectionMessage::name(CLConnectionMessage *this)
{
  return MEMORY[0x1F412AB30](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1F417E3A8]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5D8](this, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E880]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>()
{
  return MEMORY[0x1F417EC68]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__double cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__double cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

const mach_header *__cdecl _dyld_get_image_header(uint32_t image_index)
{
  return (const mach_header *)MEMORY[0x1F40C9E08](*(void *)&image_index);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x1F40C9E10](*(void *)&image_index);
}

uint32_t _dyld_image_count(void)
{
  return MEMORY[0x1F40C9E60]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1F40C9F70](dso, description, activity, *(void *)&flags);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_send_and_compose_impl()
{
  return MEMORY[0x1F40C9FF8]();
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sandbox_in_a_container()
{
  return MEMORY[0x1F40CA128]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

long double acos(long double __x)
{
  MEMORY[0x1F40CA330](__x);
  return result;
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1F40CA3C0](*(void *)&__upper_bound);
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1F40CA4F8](a1, *(void *)&a2);
}

char *__cdecl basename(char *a1)
{
  return (char *)MEMORY[0x1F40CA518](a1);
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
}

uint64_t dispatch_set_qos_class_fallback()
{
  return MEMORY[0x1F40CBC70]();
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD58](label);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

uint64_t entr_act_begin()
{
  return MEMORY[0x1F417F600]();
}

uint64_t entr_act_end()
{
  return MEMORY[0x1F417F608]();
}

uint64_t entr_act_modify()
{
  return MEMORY[0x1F417F610]();
}

uint64_t entr_act_set()
{
  return MEMORY[0x1F417F618]();
}

char *__cdecl ether_ntoa(const ether_addr *a1)
{
  return (char *)MEMORY[0x1F40CBF78](a1);
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1F40CC098](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int fgetpos(FILE *a1, fpos_t *a2)
{
  return MEMORY[0x1F40CC0F8](a1, a2);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1F40CC100](a1, *(void *)&a2, a3);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1F40CC320](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

gid_t getgid(void)
{
  return MEMORY[0x1F40CC3D0]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1F40CC4D8](a1);
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

int lchmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CC7F0](a1, a2);
}

int lchown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CC7F8](a1, *(void *)&a2, *(void *)&a3);
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CC900](a1, a2);
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x1F40CC930]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeak(id *location)
{
  return (id)MEMORY[0x1F4181778](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1F4181A18](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1F4181A60](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1F40CD570]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1F40CD578]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

void perror(const char *a1)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

int pthread_main_np(void)
{
  return MEMORY[0x1F40CDA68]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA0](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

uint64_t sandbox_check()
{
  return MEMORY[0x1F40CDDD0]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

int setvbuf(FILE *a1, char *a2, int a3, size_t a4)
{
  return MEMORY[0x1F40CDFD0](a1, a2, *(void *)&a3, a4);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1F40CE078](*(void *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

void srandom(unsigned int a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

void uuid_clear(uuid_t uu)
{
}

uint64_t vproc_swap_integer()
{
  return MEMORY[0x1F40CE780]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

const xmlChar *__cdecl xmlBufferContent(const xmlBuffer *buf)
{
  return (const xmlChar *)MEMORY[0x1F41825E0](buf);
}

xmlBufferPtr xmlBufferCreate(void)
{
  return (xmlBufferPtr)MEMORY[0x1F41825E8]();
}

void xmlBufferFree(xmlBufferPtr buf)
{
}

int xmlBufferLength(const xmlBuffer *buf)
{
  return MEMORY[0x1F41825F8](buf);
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
}

xmlTextWriterPtr xmlNewTextWriterMemory(xmlBufferPtr buf, int compression)
{
  return (xmlTextWriterPtr)MEMORY[0x1F4182790](buf, *(void *)&compression);
}

int xmlTextWriterFlush(xmlTextWriterPtr writer)
{
  return MEMORY[0x1F4182A00](writer);
}

int xmlTextWriterWriteBase64(xmlTextWriterPtr writer, const char *data, int start, int len)
{
  return MEMORY[0x1F4182A38](writer, data, *(void *)&start, *(void *)&len);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

void xpc_release(xpc_object_t object)
{
}

uint64_t xpc_set_event()
{
  return MEMORY[0x1F40CF250]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}